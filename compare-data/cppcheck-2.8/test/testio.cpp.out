

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741964 expected@var22 !=@expr1073741965 actual@var23 ) {
62: std ::@expr1073741966 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741967 expected@var22 ;
64: std ::@expr1073741968 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741969 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741970 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741971 str (@expr1073741972 ) , actualStr@var26 .@expr1073741973 str (@expr1073741974 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741975 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741976 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741977 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741978 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testio.cpp

1:
|
30:
31: class TestIO : public TestFixture {
32: public:
33: TestIO ( ) : TestFixture ( "TestIO" ) { }
34:
35: private:
36: Settings settings@var102 ;
37:
38: void run ( ) override {
39: $do ${ $if $(@expr1073741979 settings@var102 .@expr156 library@var103 $.@expr1073741981 $load $(@expr1073741982 $exename@var11 $.@expr1073741983 $c_str $(@expr1073741984 $) $, "std.cfg" $) $.@expr1073741985 $errorcode $!=@expr1073741986 $Library $::@expr1073741987 $ErrorCode $::@expr1073741988 $OK $) ${ $complainMissingLib $(@expr1073741989 "std.cfg" $) $; $return $; $} $} $while $(@expr1073741990 $false $) ;
40: $do ${ $if $(@expr1073741991 settings@var102 .@expr156 library@var103 $.@expr1073741993 $load $(@expr1073741994 $exename@var11 $.@expr1073741995 $c_str $(@expr1073741996 $) $, "windows.cfg" $) $.@expr1073741997 $errorcode $!=@expr1073741998 $Library $::@expr1073741999 $ErrorCode $::@expr1073742000 $OK $) ${ $complainMissingLib $(@expr1073742001 "windows.cfg" $) $; $return $; $} $} $while $(@expr1073742002 $false $) ;
41: $do ${ $if $(@expr1073742003 settings@var102 .@expr156 library@var103 $.@expr1073742005 $load $(@expr1073742006 $exename@var11 $.@expr1073742007 $c_str $(@expr1073742008 $) $, "qt.cfg" $) $.@expr1073742009 $errorcode $!=@expr1073742010 $Library $::@expr1073742011 $ErrorCode $::@expr1073742012 $OK $) ${ $complainMissingLib $(@expr1073742013 "qt.cfg" $) $; $return $; $} $} $while $(@expr1073742014 $false $) ;
42:
43: $do ${ $if $(@expr1073742015 $prepareTest $(@expr1073742016 "coutCerrMisusage" $) $) ${ $setVerbose $(@expr1073742017 $false $) $; coutCerrMisusage $(@expr1073742018 $) $; $} $} $while $(@expr1073742019 $false $) ;
44:
45: $do ${ $if $(@expr1073742020 $prepareTest $(@expr1073742021 "wrongMode_simple" $) $) ${ $setVerbose $(@expr1073742022 $false $) $; wrongMode_simple $(@expr1073742023 $) $; $} $} $while $(@expr1073742024 $false $) ;
46: $do ${ $if $(@expr1073742025 $prepareTest $(@expr1073742026 "wrongMode_complex" $) $) ${ $setVerbose $(@expr1073742027 $false $) $; wrongMode_complex $(@expr1073742028 $) $; $} $} $while $(@expr1073742029 $false $) ;
47: $do ${ $if $(@expr1073742030 $prepareTest $(@expr1073742031 "useClosedFile" $) $) ${ $setVerbose $(@expr1073742032 $false $) $; useClosedFile $(@expr1073742033 $) $; $} $} $while $(@expr1073742034 $false $) ;
48: $do ${ $if $(@expr1073742035 $prepareTest $(@expr1073742036 "fileIOwithoutPositioning" $) $) ${ $setVerbose $(@expr1073742037 $false $) $; fileIOwithoutPositioning $(@expr1073742038 $) $; $} $} $while $(@expr1073742039 $false $) ;
49: $do ${ $if $(@expr1073742040 $prepareTest $(@expr1073742041 "seekOnAppendedFile" $) $) ${ $setVerbose $(@expr1073742042 $false $) $; seekOnAppendedFile $(@expr1073742043 $) $; $} $} $while $(@expr1073742044 $false $) ;
50: $do ${ $if $(@expr1073742045 $prepareTest $(@expr1073742046 "fflushOnInputStream" $) $) ${ $setVerbose $(@expr1073742047 $false $) $; fflushOnInputStream $(@expr1073742048 $) $; $} $} $while $(@expr1073742049 $false $) ;
51: $do ${ $if $(@expr1073742050 $prepareTest $(@expr1073742051 "incompatibleFileOpen" $) $) ${ $setVerbose $(@expr1073742052 $false $) $; incompatibleFileOpen $(@expr1073742053 $) $; $} $} $while $(@expr1073742054 $false $) ;
52:
53: $do ${ $if $(@expr1073742055 $prepareTest $(@expr1073742056 "testScanf1" $) $) ${ $setVerbose $(@expr1073742057 $false $) $; testScanf1 $(@expr1073742058 $) $; $} $} $while $(@expr1073742059 $false $) ;
54: $do ${ $if $(@expr1073742060 $prepareTest $(@expr1073742061 "testScanf2" $) $) ${ $setVerbose $(@expr1073742062 $false $) $; testScanf2 $(@expr1073742063 $) $; $} $} $while $(@expr1073742064 $false $) ;
55: $do ${ $if $(@expr1073742065 $prepareTest $(@expr1073742066 "testScanf3" $) $) ${ $setVerbose $(@expr1073742067 $false $) $; testScanf3 $(@expr1073742068 $) $; $} $} $while $(@expr1073742069 $false $) ;
56: $do ${ $if $(@expr1073742070 $prepareTest $(@expr1073742071 "testScanf4" $) $) ${ $setVerbose $(@expr1073742072 $false $) $; testScanf4 $(@expr1073742073 $) $; $} $} $while $(@expr1073742074 $false $) ;
57: $do ${ $if $(@expr1073742075 $prepareTest $(@expr1073742076 "testScanf5" $) $) ${ $setVerbose $(@expr1073742077 $false $) $; testScanf5 $(@expr1073742078 $) $; $} $} $while $(@expr1073742079 $false $) ;
58:
59: $do ${ $if $(@expr1073742080 $prepareTest $(@expr1073742081 "testScanfArgument" $) $) ${ $setVerbose $(@expr1073742082 $false $) $; testScanfArgument $(@expr1073742083 $) $; $} $} $while $(@expr1073742084 $false $) ;
60: $do ${ $if $(@expr1073742085 $prepareTest $(@expr1073742086 "testPrintfArgument" $) $) ${ $setVerbose $(@expr1073742087 $false $) $; testPrintfArgument $(@expr1073742088 $) $; $} $} $while $(@expr1073742089 $false $) ;
61: $do ${ $if $(@expr1073742090 $prepareTest $(@expr1073742091 "testPrintfArgumentVariables" $) $) ${ $setVerbose $(@expr1073742092 $false $) $; testPrintfArgumentVariables $(@expr1073742093 $) $; $} $} $while $(@expr1073742094 $false $) ;
62: $do ${ $if $(@expr1073742095 $prepareTest $(@expr1073742096 "testPosixPrintfScanfParameterPosition" $) $) ${ $setVerbose $(@expr1073742097 $false $) $; testPosixPrintfScanfParameterPosition $(@expr1073742098 $) $; $} $} $while $(@expr1073742099 $false $) ;
63:
64: $do ${ $if $(@expr1073742100 $prepareTest $(@expr1073742101 "testMicrosoftPrintfArgument" $) $) ${ $setVerbose $(@expr1073742102 $false $) $; testMicrosoftPrintfArgument $(@expr1073742103 $) $; $} $} $while $(@expr1073742104 $false $) ;
65: $do ${ $if $(@expr1073742105 $prepareTest $(@expr1073742106 "testMicrosoftScanfArgument" $) $) ${ $setVerbose $(@expr1073742107 $false $) $; testMicrosoftScanfArgument $(@expr1073742108 $) $; $} $} $while $(@expr1073742109 $false $) ;
66: $do ${ $if $(@expr1073742110 $prepareTest $(@expr1073742111 "testMicrosoftCStringFormatArguments" $) $) ${ $setVerbose $(@expr1073742112 $false $) $; testMicrosoftCStringFormatArguments $(@expr1073742113 $) $; $} $} $while $(@expr1073742114 $false $) ;
67: $do ${ $if $(@expr1073742115 $prepareTest $(@expr1073742116 "testMicrosoftSecurePrintfArgument" $) $) ${ $setVerbose $(@expr1073742117 $false $) $; testMicrosoftSecurePrintfArgument $(@expr1073742118 $) $; $} $} $while $(@expr1073742119 $false $) ;
68: $do ${ $if $(@expr1073742120 $prepareTest $(@expr1073742121 "testMicrosoftSecureScanfArgument" $) $) ${ $setVerbose $(@expr1073742122 $false $) $; testMicrosoftSecureScanfArgument $(@expr1073742123 $) $; $} $} $while $(@expr1073742124 $false $) ;
69:
70: $do ${ $if $(@expr1073742125 $prepareTest $(@expr1073742126 "testQStringFormatArguments" $) $) ${ $setVerbose $(@expr1073742127 $false $) $; testQStringFormatArguments $(@expr1073742128 $) $; $} $} $while $(@expr1073742129 $false $) ;
71:
72: $do ${ $if $(@expr1073742130 $prepareTest $(@expr1073742131 "testTernary" $) $) ${ $setVerbose $(@expr1073742132 $false $) $; testTernary $(@expr1073742133 $) $; $} $} $while $(@expr1073742134 $false $) ;
73: $do ${ $if $(@expr1073742135 $prepareTest $(@expr1073742136 "testUnsignedConst" $) $) ${ $setVerbose $(@expr1073742137 $false $) $; testUnsignedConst $(@expr1073742138 $) $; $} $} $while $(@expr1073742139 $false $) ;
74:
75: $do ${ $if $(@expr1073742140 $prepareTest $(@expr1073742141 "testAstType" $) $) ${ $setVerbose $(@expr1073742142 $false $) $; testAstType $(@expr1073742143 $) $; $} $} $while $(@expr1073742144 $false $) ;
76: $do ${ $if $(@expr1073742145 $prepareTest $(@expr1073742146 "testPrintf0WithSuffix" $) $) ${ $setVerbose $(@expr1073742147 $false $) $; testPrintf0WithSuffix $(@expr1073742148 $) $; $} $} $while $(@expr1073742149 $false $) ;
77: $do ${ $if $(@expr1073742150 $prepareTest $(@expr1073742151 "testReturnValueTypeStdLib" $) $) ${ $setVerbose $(@expr1073742152 $false $) $; testReturnValueTypeStdLib $(@expr1073742153 $) $; $} $} $while $(@expr1073742154 $false $) ;
78:
79: $do ${ $if $(@expr1073742155 $prepareTest $(@expr1073742156 "testPrintfTypeAlias1" $) $) ${ $setVerbose $(@expr1073742157 $false $) $; testPrintfTypeAlias1 $(@expr1073742158 $) $; $} $} $while $(@expr1073742159 $false $) ;
80: $do ${ $if $(@expr1073742160 $prepareTest $(@expr1073742161 "testPrintfAuto" $) $) ${ $setVerbose $(@expr1073742162 $false $) $; testPrintfAuto $(@expr1073742163 $) $; $} $} $while $(@expr1073742164 $false $) ;
81: $do ${ $if $(@expr1073742165 $prepareTest $(@expr1073742166 "testPrintfParenthesis" $) $) ${ $setVerbose $(@expr1073742167 $false $) $; testPrintfParenthesis $(@expr1073742168 $) $; $} $} $while $(@expr1073742169 $false $) ;
82: $do ${ $if $(@expr1073742170 $prepareTest $(@expr1073742171 "testStdDistance" $) $) ${ $setVerbose $(@expr1073742172 $false $) $; testStdDistance $(@expr1073742173 $) $; $} $} $while $(@expr1073742174 $false $) ;
83: }
84:
85:
86: void check_ ( const char * file@var104 , int line@var105 , const char * code@var106 , bool inconclusive@var107 = false , bool portability@var108 = false , Settings :: PlatformType platform@var109 = Settings :: Unspecified , bool onlyFormatStr@var110 = false ) {
87:
88: errout@var100 .@expr1073742179 str (@expr1073742180 "" ) ;
89:
90: settings@var102 .@expr357 severity@var111 .@expr1073742182 clear (@expr1073742183 ) ;
91: settings@var102 .@expr357 severity@var111 .@expr361 enable (@expr1073742186 Severity ::@expr1073742187 warning@expr1073742175 ) ;
92: settings@var102 .@expr357 severity@var111 .@expr361 enable (@expr1073742190 Severity ::@expr1073742191 style@expr1073742176 ) ;
93: if (@expr1073742192 portability@var108 ) {
94: settings@var102 .@expr357 severity@var111 .@expr361 enable (@expr1073742195 Severity ::@expr1073742196 portability@expr1073742177 ) ; }
95: settings@var102 .@expr1073742197 certainty@var112 .@expr1073742198 setEnabled (@expr1073742199 Certainty ::@expr1073742200 inconclusive@expr1073742178 , inconclusive@var107 ) ;
96: settings@var102 .@expr1073742201 platform (@expr1073742202 platform@var109 ) ;
97:
98:
99: Tokenizer tokenizer@var113 (@expr1073742203 &@expr380 settings@var102 , this@expr381 ) ;
100: std ::@expr1073742206 istringstream istr@var114 (@expr1073742207 code@var106 ) ;
101: $assert_ $(@expr1073742208 file@var104 $, line@var105 $, $(@expr1073742209 tokenizer@var113 .@expr1073742210 tokenize (@expr1073742211 istr@var114 , "test.cpp" ) $) $) ;
102:
103:
104: CheckIO checkIO@var115 (@expr1073742212 &@expr1073742213 tokenizer@var113 , &@expr380 settings@var102 , this@expr381 ) ;
105: checkIO@var115 .@expr1073742215 checkWrongPrintfScanfArguments (@expr1073742216 ) ;
106: if (@expr1073742217 !@expr1073742218 onlyFormatStr@var110 ) {
107: checkIO@var115 .@expr1073742219 checkCoutCerrMisusage (@expr1073742220 ) ;
108: checkIO@var115 .@expr1073742221 checkFileUsage (@expr1073742222 ) ;
109: checkIO@var115 .@expr1073742223 invalidScanf (@expr1073742224 ) ;
110: }
111: }
112:
113: void coutCerrMisusage ( ) {
114: $check_ $(@expr1073742225 "cppcheck-2.8/test/testio.cpp" $, 114 $, "void foo() {\n  std::cout << std::cout;\n}" $)
115:
116:
117: ;
118: $if $(@expr1073742226 $!@expr1073742227 $assertEquals $(@expr1073742228 "cppcheck-2.8/test/testio.cpp" $, 118 $, "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cout'.\n" $, errout@var100 .@expr405 str (@expr406 ) $) $) { $return ; }
119:
120: $check_ $(@expr1073742231 "cppcheck-2.8/test/testio.cpp" $, 120 $, "void foo() {\n  std::cout << (std::cout);\n}" $)
121:
122:
123: ;
124: $if $(@expr1073742232 $!@expr1073742233 $assertEquals $(@expr1073742234 "cppcheck-2.8/test/testio.cpp" $, 124 $, "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cout'.\n" $, errout@var100 .@expr405 str (@expr406 ) $) $) { $return ; }
125:
126: $check_ $(@expr1073742237 "cppcheck-2.8/test/testio.cpp" $, 126 $, "void foo() {\n  std::cout << \"xyz\" << std::cout;\n}" $)
127:
128:
129: ;
130: $if $(@expr1073742238 $!@expr1073742239 $assertEquals $(@expr1073742240 "cppcheck-2.8/test/testio.cpp" $, 130 $, "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cout'.\n" $, errout@var100 .@expr405 str (@expr406 ) $) $) { $return ; }
131:
132: $check_ $(@expr1073742243 "cppcheck-2.8/test/testio.cpp" $, 132 $, "void foo(int i) {\n  std::cout << i << std::cerr;\n}" $)
133:
134:
135: ;
136: $if $(@expr1073742244 $!@expr1073742245 $assertEquals $(@expr1073742246 "cppcheck-2.8/test/testio.cpp" $, 136 $, "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cerr'.\n" $, errout@var100 .@expr405 str (@expr406 ) $) $) { $return ; }
137:
138: $check_ $(@expr1073742249 "cppcheck-2.8/test/testio.cpp" $, 138 $, "void foo() {\n  std::cout << \"xyz\";\n  std::cout << \"xyz\";\n}" $)
139:
140:
141:
142: ;
143: $if $(@expr1073742250 $!@expr1073742251 $assertEquals $(@expr1073742252 "cppcheck-2.8/test/testio.cpp" $, 143 $, "" $, errout@var100 .@expr405 str (@expr406 ) $) $) { $return ; }
144:
145: $check_ $(@expr1073742255 "cppcheck-2.8/test/testio.cpp" $, 145 $, "void foo() {\n  std::cout << std::cout.good();\n}" $)
146:
147:
148: ;
149: $if $(@expr1073742256 $!@expr1073742257 $assertEquals $(@expr1073742258 "cppcheck-2.8/test/testio.cpp" $, 149 $, "" $, errout@var100 .@expr405 str (@expr406 ) $) $) { $return ; }
150:
151: $check_ $(@expr1073742261 "cppcheck-2.8/test/testio.cpp" $, 151 $, "void foo() {\n    unknownObject << std::cout;\n}" $)
152:
153:
154: ;
155: $if $(@expr1073742262 $!@expr1073742263 $assertEquals $(@expr1073742264 "cppcheck-2.8/test/testio.cpp" $, 155 $, "" $, errout@var100 .@expr405 str (@expr406 ) $) $) { $return ; }
156:
157: $check_ $(@expr1073742267 "cppcheck-2.8/test/testio.cpp" $, 157 $, "void foo() {\n  MACRO(std::cout <<, << std::cout)\n}" $)
158:
159:
160: ;
161: $if $(@expr1073742268 $!@expr1073742269 $assertEquals $(@expr1073742270 "cppcheck-2.8/test/testio.cpp" $, 161 $, "" $, errout@var100 .@expr405 str (@expr406 ) $) $) { $return ; }
162: }
163:
164:
165:
166: void wrongMode_simple ( ) {
167:
168: $check_ $(@expr1073742275 "cppcheck-2.8/test/testio.cpp" $, 168 $, "void foo(FILE*& f) {\n    f = fopen(name, \"r\");\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" $)
169:
|
172:
173: ;
174: $if $(@expr1073742276 $!@expr1073742277 $assertEquals $(@expr1073742278 "cppcheck-2.8/test/testio.cpp" $, 174 $, "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
175:
176: $check_ $(@expr1073742281 "cppcheck-2.8/test/testio.cpp" $, 176 $, "void foo(FILE*& f) {\n    f = _wfopen(name, L\"r\");\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
177:
|
180:
181: ;
182: $if $(@expr1073742283 $!@expr1073742284 $assertEquals $(@expr1073742285 "cppcheck-2.8/test/testio.cpp" $, 182 $, "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
183:
184: $check_ $(@expr1073742288 "cppcheck-2.8/test/testio.cpp" $, 184 $, "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr465 Win32A@expr450 $)
185:
|
188:
189: ;
190: $if $(@expr1073742290 $!@expr1073742291 $assertEquals $(@expr1073742292 "cppcheck-2.8/test/testio.cpp" $, 190 $, "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
191:
192: $check_ $(@expr1073742295 "cppcheck-2.8/test/testio.cpp" $, 192 $, "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
193:
|
196:
197: ;
198: $if $(@expr1073742297 $!@expr1073742298 $assertEquals $(@expr1073742299 "cppcheck-2.8/test/testio.cpp" $, 198 $, "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
199:
200: $check_ $(@expr1073742302 "cppcheck-2.8/test/testio.cpp" $, 200 $, "void foo(FILE*& f) {\n    _wfopen_s(&f, name, L\"r\");\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
201:
|
204:
205: ;
206: $if $(@expr1073742304 $!@expr1073742305 $assertEquals $(@expr1073742306 "cppcheck-2.8/test/testio.cpp" $, 206 $, "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
207:
208: $check_ $(@expr1073742309 "cppcheck-2.8/test/testio.cpp" $, 208 $, "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr465 Win32A@expr450 $)
209:
|
212:
213: ;
214: $if $(@expr1073742311 $!@expr1073742312 $assertEquals $(@expr1073742313 "cppcheck-2.8/test/testio.cpp" $, 214 $, "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
215:
216: $check_ $(@expr1073742316 "cppcheck-2.8/test/testio.cpp" $, 216 $, "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
217:
|
220:
221: ;
222: $if $(@expr1073742318 $!@expr1073742319 $assertEquals $(@expr1073742320 "cppcheck-2.8/test/testio.cpp" $, 222 $, "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
223:
224: $check_ $(@expr1073742323 "cppcheck-2.8/test/testio.cpp" $, 224 $, "void foo(FILE*& f) {\n    f = fopen(name, \"r+\");\n    fwrite(buffer, 5, 6, f);\n}" $)
225:
226:
227: ;
228: $if $(@expr1073742324 $!@expr1073742325 $assertEquals $(@expr1073742326 "cppcheck-2.8/test/testio.cpp" $, 228 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
229:
230: $check_ $(@expr1073742329 "cppcheck-2.8/test/testio.cpp" $, 230 $, "void foo(FILE*& f) {\n    f = _wfopen(name, L\"r+\");\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
231:
232:
233: ;
234: $if $(@expr1073742331 $!@expr1073742332 $assertEquals $(@expr1073742333 "cppcheck-2.8/test/testio.cpp" $, 234 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
235:
236: $check_ $(@expr1073742336 "cppcheck-2.8/test/testio.cpp" $, 236 $, "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr465 Win32A@expr450 $)
237:
238:
239: ;
240: $if $(@expr1073742338 $!@expr1073742339 $assertEquals $(@expr1073742340 "cppcheck-2.8/test/testio.cpp" $, 240 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
241:
242: $check_ $(@expr1073742343 "cppcheck-2.8/test/testio.cpp" $, 242 $, "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
243:
244:
245: ;
246: $if $(@expr1073742345 $!@expr1073742346 $assertEquals $(@expr1073742347 "cppcheck-2.8/test/testio.cpp" $, 246 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
247:
248: $check_ $(@expr1073742350 "cppcheck-2.8/test/testio.cpp" $, 248 $, "void foo(FILE*& f) {\n    _wfopen_s(&f, name, L\"r+\");\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
249:
250:
251: ;
252: $if $(@expr1073742352 $!@expr1073742353 $assertEquals $(@expr1073742354 "cppcheck-2.8/test/testio.cpp" $, 252 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
253:
254: $check_ $(@expr1073742357 "cppcheck-2.8/test/testio.cpp" $, 254 $, "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr465 Win32A@expr450 $)
255:
256:
257: ;
258: $if $(@expr1073742359 $!@expr1073742360 $assertEquals $(@expr1073742361 "cppcheck-2.8/test/testio.cpp" $, 258 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
259:
260: $check_ $(@expr1073742364 "cppcheck-2.8/test/testio.cpp" $, 260 $, "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
261:
262:
263: ;
264: $if $(@expr1073742366 $!@expr1073742367 $assertEquals $(@expr1073742368 "cppcheck-2.8/test/testio.cpp" $, 264 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
265:
266: $check_ $(@expr1073742371 "cppcheck-2.8/test/testio.cpp" $, 266 $, "void foo(FILE*& f) {\n    f = tmpfile();\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
267:
268:
269: ;
270: $if $(@expr1073742373 $!@expr1073742374 $assertEquals $(@expr1073742375 "cppcheck-2.8/test/testio.cpp" $, 270 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
271:
272:
273: $check_ $(@expr1073742378 "cppcheck-2.8/test/testio.cpp" $, 273 $, "void foo(FILE*& f) {\n    f = fopen(name, \"w\");\n    fwrite(buffer, 5, 6, f);\n    rewind(f);\n    fread(buffer, 5, 6, f);\n}" $)
274:
|
277:
278: ;
279: $if $(@expr1073742379 $!@expr1073742380 $assertEquals $(@expr1073742381 "cppcheck-2.8/test/testio.cpp" $, 279 $, "[test.cpp:5]: (error) Read operation on a file that was opened only for writing.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
280:
281: $check_ $(@expr1073742384 "cppcheck-2.8/test/testio.cpp" $, 281 $, "void foo(FILE*& f) {\n    f = fopen(name, \"w+\");\n    fread(buffer, 5, 6, f);\n}" $)
282:
283:
284: ;
285: $if $(@expr1073742385 $!@expr1073742386 $assertEquals $(@expr1073742387 "cppcheck-2.8/test/testio.cpp" $, 285 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
286:
287: $check_ $(@expr1073742390 "cppcheck-2.8/test/testio.cpp" $, 287 $, "void foo(FILE*& f) {\n    f = tmpfile();\n    fread(buffer, 5, 6, f);\n}" $)
288:
289:
290: ;
291: $if $(@expr1073742391 $!@expr1073742392 $assertEquals $(@expr1073742393 "cppcheck-2.8/test/testio.cpp" $, 291 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
292:
293:
294: $check_ $(@expr1073742396 "cppcheck-2.8/test/testio.cpp" $, 294 $, "void foo(FILE*& f) {\n    f = fopen(name, \"a\");\n    fwrite(buffer, 5, 6, f);\n    rewind(f);\n    fread(buffer, 5, 6, f);\n}" $)
295:
|
298:
299: ;
300: $if $(@expr1073742397 $!@expr1073742398 $assertEquals $(@expr1073742399 "cppcheck-2.8/test/testio.cpp" $, 300 $, "[test.cpp:4]: (warning) Repositioning operation performed on a file opened in append mode has no effect.\n[test.cpp:5]: (error) Read operation on a file that was opened only for writing.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return
301: ; }
302:
303: $check_ $(@expr1073742402 "cppcheck-2.8/test/testio.cpp" $, 303 $, "void foo(FILE*& f) {\n    f = fopen(name, \"a+\");\n    fread(buffer, 5, 6, f);\n}" $)
304:
305:
306: ;
307: $if $(@expr1073742403 $!@expr1073742404 $assertEquals $(@expr1073742405 "cppcheck-2.8/test/testio.cpp" $, 307 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
308:
309:
310: $check_ $(@expr1073742408 "cppcheck-2.8/test/testio.cpp" $, 310 $, "void foo() {\n    FILE* f = fopen(name, \"r\");\n    fwrite(buffer, 5, 6, f);\n    fclose(f);\n}" $)
311:
312:
313:
314: ;
315: $if $(@expr1073742409 $!@expr1073742410 $assertEquals $(@expr1073742411 "cppcheck-2.8/test/testio.cpp" $, 315 $, "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
316:
317:
318: $check_ $(@expr1073742414 "cppcheck-2.8/test/testio.cpp" $, 318 $, "void foo(FILE*& f) {\n    f = fopen(name, \"a\");\n    fwrite(buffer, 5, 6, f);\n    bar(f);\n    fread(buffer, 5, 6, f);\n}" $)
319:
|
322:
323: ;
324: $if $(@expr1073742415 $!@expr1073742416 $assertEquals $(@expr1073742417 "cppcheck-2.8/test/testio.cpp" $, 324 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
325:
326:
327: $check_ $(@expr1073742420 "cppcheck-2.8/test/testio.cpp" $, 327 $, "void foo(FILE*& f) {\n    f = freopen(name, \"r\", f);\n    fwrite(buffer, 5, 6, f);\n}" $)
328:
329:
330: ;
331: $if $(@expr1073742421 $!@expr1073742422 $assertEquals $(@expr1073742423 "cppcheck-2.8/test/testio.cpp" $, 331 $, "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
332:
333: $check_ $(@expr1073742426 "cppcheck-2.8/test/testio.cpp" $, 333 $, "void foo(FILE*& f) {\n    f = _wfreopen(name, L\"r\", f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
334:
335:
336: ;
337: $if $(@expr1073742428 $!@expr1073742429 $assertEquals $(@expr1073742430 "cppcheck-2.8/test/testio.cpp" $, 337 $, "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
338:
339: $check_ $(@expr1073742433 "cppcheck-2.8/test/testio.cpp" $, 339 $, "void foo(FILE*& f) {\n    f = _tfreopen(name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr465 Win32A@expr450 $)
340:
341:
342: ;
343: $if $(@expr1073742435 $!@expr1073742436 $assertEquals $(@expr1073742437 "cppcheck-2.8/test/testio.cpp" $, 343 $, "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
344:
345: $check_ $(@expr1073742440 "cppcheck-2.8/test/testio.cpp" $, 345 $, "void foo(FILE*& f) {\n    f = _tfreopen(name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
346:
347:
348: ;
349: $if $(@expr1073742442 $!@expr1073742443 $assertEquals $(@expr1073742444 "cppcheck-2.8/test/testio.cpp" $, 349 $, "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
350:
351: $check_ $(@expr1073742447 "cppcheck-2.8/test/testio.cpp" $, 351 $, "void foo(FILE*& f) {\n    f = _wfreopen_s(&f, name, L\"r\", f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
352:
353:
354: ;
355: $if $(@expr1073742449 $!@expr1073742450 $assertEquals $(@expr1073742451 "cppcheck-2.8/test/testio.cpp" $, 355 $, "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
356:
357: $check_ $(@expr1073742454 "cppcheck-2.8/test/testio.cpp" $, 357 $, "void foo(FILE*& f) {\n    f = _tfreopen_s(&f, name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr465 Win32A@expr450 $)
358:
359:
360: ;
361: $if $(@expr1073742456 $!@expr1073742457 $assertEquals $(@expr1073742458 "cppcheck-2.8/test/testio.cpp" $, 361 $, "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
362:
363: $check_ $(@expr1073742461 "cppcheck-2.8/test/testio.cpp" $, 363 $, "void foo(FILE*& f) {\n    f = _tfreopen_s(&f, name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}" , false , false , Settings ::@expr458 Win32W@expr449 $)
364:
365:
366: ;
367: $if $(@expr1073742463 $!@expr1073742464 $assertEquals $(@expr1073742465 "cppcheck-2.8/test/testio.cpp" $, 367 $, "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
368:
369:
370: $check_ $(@expr1073742468 "cppcheck-2.8/test/testio.cpp" $, 370 $, "void foo(FILE*& f) {\n    f = fopen(name, mode);\n    fwrite(buffer, 5, 6, f);\n}" $)
371:
372:
373: ;
374: $if $(@expr1073742469 $!@expr1073742470 $assertEquals $(@expr1073742471 "cppcheck-2.8/test/testio.cpp" $, 374 $, "" $, errout@var100 .@expr455 str (@expr456 ) $) $) { $return ; }
375:
376: $check_ $(@expr1073742474 "cppcheck-2.8/test/testio.cpp" $, 376 $, "void fopen(std::string const &filepath, std::string const &mode);" $) ;
377: }
378:
379: void wrongMode_complex ( ) {
380: $check_ $(@expr1073742475 "cppcheck-2.8/test/testio.cpp" $, 380 $, "void foo(FILE* f) {\n    if(a) f = fopen(name, \"w\");\n    else  f = fopen(name, \"r\");\n    if(a) fwrite(buffer, 5, 6, f);\n    else  fread(buffer, 5, 6, f);\n}" $)
381:
|
384:
385: ;
386: $if $(@expr1073742476 $!@expr1073742477 $assertEquals $(@expr1073742478 "cppcheck-2.8/test/testio.cpp" $, 386 $, "" $, errout@var100 .@expr655 str (@expr656 ) $) $) { $return ; }
387:
388: $check_ $(@expr1073742481 "cppcheck-2.8/test/testio.cpp" $, 388 $, "void foo() {\n    FILE* f;\n    if(a) f = fopen(name, \"w\");\n    else  f = fopen(name, \"r\");\n    if(a) fwrite(buffer, 5, 6, f);\n    else  fread(buffer, 5, 6, f);\n}" $)
389:
|
393:
394: ;
395: $if $(@expr1073742482 $!@expr1073742483 $assertEquals $(@expr1073742484 "cppcheck-2.8/test/testio.cpp" $, 395 $, "" $, errout@var100 .@expr655 str (@expr656 ) $) $) { $return ; }
396:
397: $check_ $(@expr1073742487 "cppcheck-2.8/test/testio.cpp" $, 397 $, "void foo() {\n    FILE* f = fopen(name, \"w\");\n    if(a) fwrite(buffer, 5, 6, f);\n    else  fread(buffer, 5, 6, f);\n}" $)
398:
399:
400:
401: ;
402: $if $(@expr1073742488 $!@expr1073742489 $assertEquals $(@expr1073742490 "cppcheck-2.8/test/testio.cpp" $, 402 $, "[test.cpp:4]: (error) Read operation on a file that was opened only for writing.\n" $, errout@var100 .@expr655 str (@expr656 ) $) $) { $return ; }
403: }
404:
405: void useClosedFile ( ) {
406: $check_ $(@expr1073742493 "cppcheck-2.8/test/testio.cpp" $, 406 $, "void foo(FILE*& f) {\n    fclose(f);\n    fwrite(buffer, 5, 6, f);\n    clearerr(f);\n    fread(buffer, 5, 6, f);\n    ungetc('a', f);\n    ungetwc(L'a', f);\n    rewind(f);\n}" $)
407:
|
413:
414: ;
415: $if $(@expr1073742494 $!@expr1073742495 $assertEquals $(@expr1073742496 "cppcheck-2.8/test/testio.cpp" $, 415 $, "[test.cpp:3]: (error) Used file that is not opened.\n[test.cpp:4]: (error) Used file that is not opened.\n[test.cpp:5]: (error) Used file that is not opened.\n[test.cpp:6]: (error) Used file that is not opened.\n[test.cpp:7]: (error) Used file that is not opened.\n[test.cpp:8]: (error) Used file that is not opened.\n" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return
416:
|
419:
420: ; }
421:
422: $check_ $(@expr1073742499 "cppcheck-2.8/test/testio.cpp" $, 422 $, "void foo(FILE*& f) {\n    if(!ferror(f)) {\n        fclose(f);\n        return;    }\n    fwrite(buffer, 5, 6, f);\n}" $)
423:
|
427:
428: ;
429: $if $(@expr1073742500 $!@expr1073742501 $assertEquals $(@expr1073742502 "cppcheck-2.8/test/testio.cpp" $, 429 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
430:
431: $check_ $(@expr1073742505 "cppcheck-2.8/test/testio.cpp" $, 431 $, "void foo(FILE*& f) {\n    fclose(f);\n    f = fopen(name, \"r\");\n    fread(buffer, 5, 6, f);\n}" $)
432:
433:
434:
435: ;
436: $if $(@expr1073742506 $!@expr1073742507 $assertEquals $(@expr1073742508 "cppcheck-2.8/test/testio.cpp" $, 436 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
437:
438: $check_ $(@expr1073742511 "cppcheck-2.8/test/testio.cpp" $, 438 $, "void foo(FILE*& f) {\n    f = fopen(name, \"r\");\n    f = g;\n    fwrite(buffer, 5, 6, f);\n}" $)
439:
440:
441:
442: ;
443: $if $(@expr1073742512 $!@expr1073742513 $assertEquals $(@expr1073742514 "cppcheck-2.8/test/testio.cpp" $, 443 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
444:
445: $check_ $(@expr1073742517 "cppcheck-2.8/test/testio.cpp" $, 445 $, "void foo() {\n    FILE* f;\n    fwrite(buffer, 5, 6, f);\n}" $)
446:
447:
448: ;
449: $if $(@expr1073742518 $!@expr1073742519 $assertEquals $(@expr1073742520 "cppcheck-2.8/test/testio.cpp" $, 449 $, "[test.cpp:3]: (error) Used file that is not opened.\n" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
450:
451: $check_ $(@expr1073742523 "cppcheck-2.8/test/testio.cpp" $, 451 $, "void foo() {\n    FILE* f(stdout);\n    fwrite(buffer, 5, 6, f);\n}" $)
452:
453:
454: ;
455: $if $(@expr1073742524 $!@expr1073742525 $assertEquals $(@expr1073742526 "cppcheck-2.8/test/testio.cpp" $, 455 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
456:
457: $check_ $(@expr1073742529 "cppcheck-2.8/test/testio.cpp" $, 457 $, "void foo() {\n    FILE* f[3];\n    f[0] = fopen(name, mode);\n    fclose(f[0]);\n}" $)
458:
459:
460:
461: ;
462: $if $(@expr1073742530 $!@expr1073742531 $assertEquals $(@expr1073742532 "cppcheck-2.8/test/testio.cpp" $, 462 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
463:
464:
465: $check_ $(@expr1073742535 "cppcheck-2.8/test/testio.cpp" $, 465 $, "static FILE *fp = NULL;\n\nvoid close()\n{\n  fclose(fp);\n}\n\nvoid dump()\n{\n  if (fp == NULL) return;\n  fprintf(fp, \"Here's the output.\\n\");\n}\n\nint main()\n{\n  fp = fopen(\"test.txt\", \"w\");\n  dump();\n  close();\n  return 0;\n}" $)
466:
|
483:
484: ;
485: $if $(@expr1073742536 $!@expr1073742537 $assertEquals $(@expr1073742538 "cppcheck-2.8/test/testio.cpp" $, 485 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
486:
487: $check_ $(@expr1073742541 "cppcheck-2.8/test/testio.cpp" $, 487 $, "static FILE *fp = NULL;\n\nvoid close()\n{\n  fclose(fp);\n}\n\nvoid dump()\n{\n  fclose(fp);\n  fprintf(fp, \"Here's the output.\\n\");\n}" $)
488:
|
497:
498: ;
499: $if $(@expr1073742542 $!@expr1073742543 $assertEquals $(@expr1073742544 "cppcheck-2.8/test/testio.cpp" $, 499 $, "[test.cpp:11]: (error) Used file that is not opened.\n" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
500:
501:
502: $check_ $(@expr1073742547 "cppcheck-2.8/test/testio.cpp" $, 502 $, "void chdcd_parse_nero(FILE *infile) {\n    switch (mode) {\n        case 0x0300:\n            fclose(infile);\n            return;\n        case 0x0500:\n            fclose(infile);\n            return;\n    }\n}" $)
503:
|
510:
511: ;
512: $if $(@expr1073742548 $!@expr1073742549 $assertEquals $(@expr1073742550 "cppcheck-2.8/test/testio.cpp" $, 512 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
513:
514: $check_ $(@expr1073742553 "cppcheck-2.8/test/testio.cpp" $, 514 $, "void chdcd_parse_nero(FILE *infile) {\n    switch (mode) {\n        case 0x0300:\n            fclose(infile);\n            exit(0);\n        case 0x0500:\n            fclose(infile);\n            return;\n    }\n}" $)
515:
|
522:
523: ;
524: $if $(@expr1073742554 $!@expr1073742555 $assertEquals $(@expr1073742556 "cppcheck-2.8/test/testio.cpp" $, 524 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
525:
526:
527: $check_ $(@expr1073742559 "cppcheck-2.8/test/testio.cpp" $, 527 $, "void foo() {\n    struct {FILE *f1; FILE *f2;} a;\n    a.f1 = fopen(name,mode);\n    a.f2 = fopen(name,mode);\n    fclose(a.f1);\n    fclose(a.f2);\n}" $)
528:
|
532:
533: ;
534: $if $(@expr1073742560 $!@expr1073742561 $assertEquals $(@expr1073742562 "cppcheck-2.8/test/testio.cpp" $, 534 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
535:
536:
537: $check_ $(@expr1073742565 "cppcheck-2.8/test/testio.cpp" $, 537 $, "void foo() {\n    FILE *a = fopen(\"aa\", \"r\");\n    while (fclose(a)) {}\n}" $)
538:
539:
540: ;
541: $todoAssertEquals $(@expr1073742566 "cppcheck-2.8/test/testio.cpp" $, 541 $, "[test.cpp:3]: (error) Used file that is not opened.\n" $, "" $, errout@var100 .@expr673 str (@expr674 ) $) ;
542:
543:
544: $check_ $(@expr1073742569 "cppcheck-2.8/test/testio.cpp" $, 544 $, "void foo() {\n    FILE f[2];\n    f[0] = fopen(\"1\", \"w\");\n    f[1] = fopen(\"2\", \"w\");\n    fclose(f[0]);\n    fclose(f[1]);\n}" $)
545:
|
549:
550: ;
551: $if $(@expr1073742570 $!@expr1073742571 $assertEquals $(@expr1073742572 "cppcheck-2.8/test/testio.cpp" $, 551 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
552: }
553:
554: void fileIOwithoutPositioning ( ) {
555: $check_ $(@expr1073742575 "cppcheck-2.8/test/testio.cpp" $, 555 $, "void foo(FILE* f) {\n    fwrite(buffer, 5, 6, f);\n    fread(buffer, 5, 6, f);\n}" $)
556:
557:
558: ;
559: $if $(@expr1073742576 $!@expr1073742577 $assertEquals $(@expr1073742578 "cppcheck-2.8/test/testio.cpp" $, 559 $, "[test.cpp:3]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
560:
561: $check_ $(@expr1073742581 "cppcheck-2.8/test/testio.cpp" $, 561 $, "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fwrite(buffer, 5, 6, f);\n}" $)
562:
563:
564: ;
565: $if $(@expr1073742582 $!@expr1073742583 $assertEquals $(@expr1073742584 "cppcheck-2.8/test/testio.cpp" $, 565 $, "[test.cpp:3]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
566:
567: $check_ $(@expr1073742587 "cppcheck-2.8/test/testio.cpp" $, 567 $, "void foo(FILE* f, bool read) {\n    if(read)\n        fread(buffer, 5, 6, f);\n    else\n        fwrite(buffer, 5, 6, f);\n}" $)
568:
|
571:
572: ;
573: $if $(@expr1073742588 $!@expr1073742589 $assertEquals $(@expr1073742590 "cppcheck-2.8/test/testio.cpp" $, 573 $, "" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
574:
575: $check_ $(@expr1073742593 "cppcheck-2.8/test/testio.cpp" $, 575 $, "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fflush(f);\n    fwrite(buffer, 5, 6, f);\n}" $)
576:
577:
578:
579: ;
580: $if $(@expr1073742594 $!@expr1073742595 $assertEquals $(@expr1073742596 "cppcheck-2.8/test/testio.cpp" $, 580 $, "" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
581:
582: $check_ $(@expr1073742599 "cppcheck-2.8/test/testio.cpp" $, 582 $, "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" $)
583:
584:
585:
586: ;
587: $if $(@expr1073742600 $!@expr1073742601 $assertEquals $(@expr1073742602 "cppcheck-2.8/test/testio.cpp" $, 587 $, "" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
588:
589: $check_ $(@expr1073742605 "cppcheck-2.8/test/testio.cpp" $, 589 $, "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fsetpos(f, pos);\n    fwrite(buffer, 5, 6, f);\n}" $)
590:
591:
592:
593: ;
594: $if $(@expr1073742606 $!@expr1073742607 $assertEquals $(@expr1073742608 "cppcheck-2.8/test/testio.cpp" $, 594 $, "" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
595:
596: $check_ $(@expr1073742611 "cppcheck-2.8/test/testio.cpp" $, 596 $, "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fseek(f, 0, SEEK_SET);\n    fwrite(buffer, 5, 6, f);\n}" $)
597:
598:
599:
600: ;
601: $if $(@expr1073742612 $!@expr1073742613 $assertEquals $(@expr1073742614 "cppcheck-2.8/test/testio.cpp" $, 601 $, "" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
602:
603: $check_ $(@expr1073742617 "cppcheck-2.8/test/testio.cpp" $, 603 $, "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    long pos = ftell(f);\n    fwrite(buffer, 5, 6, f);\n}" $)
604:
605:
606:
607: ;
608: $if $(@expr1073742618 $!@expr1073742619 $assertEquals $(@expr1073742620 "cppcheck-2.8/test/testio.cpp" $, 608 $, "[test.cpp:4]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
609:
610:
611: $check_ $(@expr1073742623 "cppcheck-2.8/test/testio.cpp" $, 611 $, "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    void seek(long offset, Position p);\n    FileStreamPrivate *d;\n};\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(aboutToOverwrite.data(), 1, bufferLength, d->file);\n    seek(writePosition);\n    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);\n}" $)
612:
|
619:
620: ;
621: $if $(@expr1073742624 $!@expr1073742625 $assertEquals $(@expr1073742626 "cppcheck-2.8/test/testio.cpp" $, 621 $, "" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
622:
623: $check_ $(@expr1073742629 "cppcheck-2.8/test/testio.cpp" $, 623 $, "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    FileStreamPrivate *d;\n};\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(aboutToOverwrite.data(), 1, bufferLength, d->file);\n    unknown(writePosition);\n    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);\n}" $)
624:
|
630:
631: ;
632: $if $(@expr1073742630 $!@expr1073742631 $assertEquals $(@expr1073742632 "cppcheck-2.8/test/testio.cpp" $, 632 $, "" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
633:
634: $check_ $(@expr1073742635 "cppcheck-2.8/test/testio.cpp" $, 634 $, "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    FileStreamPrivate *d;\n};\nvoid known(int);\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(aboutToOverwrite.data(), 1, bufferLength, d->file);\n    known(writePosition);\n    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);\n}" $)
635:
|
642:
643: ;
644: $if $(@expr1073742636 $!@expr1073742637 $assertEquals $(@expr1073742638 "cppcheck-2.8/test/testio.cpp" $, 644 $, "[test.cpp:9]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
645:
646: $check_ $(@expr1073742641 "cppcheck-2.8/test/testio.cpp" $, 646 $, "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    FileStreamPrivate *d;\n};\nvoid known(int);\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(X::data(), 1, bufferLength, d->file);\n    known(writePosition);\n    fwrite(X::data(), sizeof(char), buffer.size(), d->file);\n}" $)
647:
|
654:
655: ;
656: $if $(@expr1073742642 $!@expr1073742643 $assertEquals $(@expr1073742644 "cppcheck-2.8/test/testio.cpp" $, 656 $, "[test.cpp:9]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" $, errout@var100 .@expr755 str (@expr756 ) $) $) { $return ; }
657: }
658:
659: void seekOnAppendedFile ( ) {
660: $check_ $(@expr1073742647 "cppcheck-2.8/test/testio.cpp" $, 660 $, "void foo() {\n    FILE* f = fopen(\"\", \"a+\");\n    fseek(f, 0, SEEK_SET);\n}" $)
661:
662:
663: ;
664: $if $(@expr1073742648 $!@expr1073742649 $assertEquals $(@expr1073742650 "cppcheck-2.8/test/testio.cpp" $, 664 $, "" $, errout@var100 .@expr827 str (@expr828 ) $) $) { $return ; }
665:
666: $check_ $(@expr1073742653 "cppcheck-2.8/test/testio.cpp" $, 666 $, "void foo() {\n    FILE* f = fopen(\"\", \"w\");\n    fseek(f, 0, SEEK_SET);\n}" $)
667:
668:
669: ;
670: $if $(@expr1073742654 $!@expr1073742655 $assertEquals $(@expr1073742656 "cppcheck-2.8/test/testio.cpp" $, 670 $, "" $, errout@var100 .@expr827 str (@expr828 ) $) $) { $return ; }
671:
672: $check_ $(@expr1073742659 "cppcheck-2.8/test/testio.cpp" $, 672 $, "void foo() {\n    FILE* f = fopen(\"\", \"a\");\n    fseek(f, 0, SEEK_SET);\n}" $)
673:
674:
675: ;
676: $if $(@expr1073742660 $!@expr1073742661 $assertEquals $(@expr1073742662 "cppcheck-2.8/test/testio.cpp" $, 676 $, "[test.cpp:3]: (warning) Repositioning operation performed on a file opened in append mode has no effect.\n" $, errout@var100 .@expr827 str (@expr828 ) $) $) { $return ; }
677:
678: $check_ $(@expr1073742665 "cppcheck-2.8/test/testio.cpp" $, 678 $, "void foo() {\n    FILE* f = fopen(\"\", \"a\");\n    fflush(f);\n}" $)
679:
680:
681: ;
682: $if $(@expr1073742666 $!@expr1073742667 $assertEquals $(@expr1073742668 "cppcheck-2.8/test/testio.cpp" $, 682 $, "" $, errout@var100 .@expr827 str (@expr828 ) $) $) { $return ; }
683:
684: $check_ $(@expr1073742671 "cppcheck-2.8/test/testio.cpp" $, 684 $, "void foo() {\n    FILE* f = fopen(\"\", \"a\");\n    fclose(f);\n    f = fopen(\"\", \"r\");\n    fseek(f, 0, SEEK_SET);\n}" $)
685:
|
688:
689: ;
690: $if $(@expr1073742672 $!@expr1073742673 $assertEquals $(@expr1073742674 "cppcheck-2.8/test/testio.cpp" $, 690 $, "" $, errout@var100 .@expr827 str (@expr828 ) $) $) { $return ; }
691: }
692:
693: void fflushOnInputStream ( ) {
694: $check_ $(@expr1073742677 "cppcheck-2.8/test/testio.cpp" $, 694 $, "void foo()\n{\n    fflush(stdin);\n}" , false , true $)
695:
696:
697: ;
698: $if $(@expr1073742678 $!@expr1073742679 $assertEquals $(@expr1073742680 "cppcheck-2.8/test/testio.cpp" $, 698 $, "[test.cpp:3]: (portability) fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems.\n" $, errout@var100 .@expr857 str (@expr858 ) $) $) { $return ; }
699:
700: $check_ $(@expr1073742683 "cppcheck-2.8/test/testio.cpp" $, 700 $, "void foo()\n{\n    fflush(stdout);\n}" , false , true $)
701:
702:
703: ;
704: $if $(@expr1073742684 $!@expr1073742685 $assertEquals $(@expr1073742686 "cppcheck-2.8/test/testio.cpp" $, 704 $, "" $, errout@var100 .@expr857 str (@expr858 ) $) $) { $return ; }
705:
706: $check_ $(@expr1073742689 "cppcheck-2.8/test/testio.cpp" $, 706 $, "void foo(FILE*& f) {\n    f = fopen(path, \"r\");\n    fflush(f);\n}" , false , true $)
707:
708:
709: ;
710: $if $(@expr1073742690 $!@expr1073742691 $assertEquals $(@expr1073742692 "cppcheck-2.8/test/testio.cpp" $, 710 $, "[test.cpp:3]: (portability) fflush() called on input stream 'f' may result in undefined behaviour on non-linux systems.\n" $, errout@var100 .@expr857 str (@expr858 ) $) $) { $return ; }
711:
712: $check_ $(@expr1073742695 "cppcheck-2.8/test/testio.cpp" $, 712 $, "void foo(FILE*& f) {\n    f = fopen(path, \"w\");\n    fflush(f);\n}" , false , true $)
713:
714:
715: ;
716: $if $(@expr1073742696 $!@expr1073742697 $assertEquals $(@expr1073742698 "cppcheck-2.8/test/testio.cpp" $, 716 $, "" $, errout@var100 .@expr857 str (@expr858 ) $) $) { $return ; }
717:
718: $check_ $(@expr1073742701 "cppcheck-2.8/test/testio.cpp" $, 718 $, "void foo(FILE*& f) {\n    fflush(f);\n}" , false , true $)
719:
720: ;
721: $if $(@expr1073742702 $!@expr1073742703 $assertEquals $(@expr1073742704 "cppcheck-2.8/test/testio.cpp" $, 721 $, "" $, errout@var100 .@expr857 str (@expr858 ) $) $) { $return ; }
722: }
723:
724: void incompatibleFileOpen ( ) {
725: $check_ $(@expr1073742707 "cppcheck-2.8/test/testio.cpp" $, 725 $, "void foo() {\n    FILE *f1 = fopen(\"tmp\", \"wt\");\n    FILE *f2 = fopen(\"tmp\", \"rt\");\n}" $)
726:
727:
728: ;
729: $if $(@expr1073742708 $!@expr1073742709 $assertEquals $(@expr1073742710 "cppcheck-2.8/test/testio.cpp" $, 729 $, "[test.cpp:3]: (warning) The file '\"tmp\"' is opened for read and write access at the same time on different streams\n" $, errout@var100 .@expr1073742711 str (@expr1073742712 ) $) $) { $return ; }
730: }
731:
732:
733: void testScanf1 ( ) {
734: $check_ $(@expr1073742713 "cppcheck-2.8/test/testio.cpp" $, 734 $, "void foo() {\n    int a, b;\n    FILE *file = fopen(\"test\", \"r\");\n    a = fscanf(file, \"aa %s\", bar);\n    b = scanf(\"aa %S\", bar);\n    b = scanf(\"aa %ls\", bar);\n    sscanf(foo, \"%[^~]\", bar);\n    scanf(\"%dx%s\", &b, bar);\n    fclose(file);\n}" $)
735:
|
742:
743: ;
744: $if $(@expr1073742714 $!@expr1073742715 $assertEquals $(@expr1073742716 "cppcheck-2.8/test/testio.cpp" $, 744 $, "[test.cpp:4]: (warning) fscanf() without field width limits can crash with huge input data.\n[test.cpp:5]: (warning) scanf() without field width limits can crash with huge input data.\n[test.cpp:6]: (warning) scanf() without field width limits can crash with huge input data.\n[test.cpp:7]: (warning) sscanf() without field width limits can crash with huge input data.\n[test.cpp:8]: (warning) scanf() without field width limits can crash with huge input data.\n" $, errout@var100 .@expr1073742717 str (@expr1073742718 ) $) $) { $return
745:
746:
747:
748: ; }
749: }
750:
751: void testScanf2 ( ) {
752: $check_ $(@expr1073742719 "cppcheck-2.8/test/testio.cpp" $, 752 $, "void foo() {\n    scanf(\"%5s\", bar);\n    scanf(\"%5[^~]\", bar);\n    scanf(\"aa%%s\", bar);\n    scanf(\"aa%d\", &a);\n    scanf(\"aa%ld\", &a);\n    scanf(\"%*[^~]\");\n}" $)
753:
|
758:
759: ;
760: $if $(@expr1073742720 $!@expr1073742721 $assertEquals $(@expr1073742722 "cppcheck-2.8/test/testio.cpp" $, 760 $, "[test.cpp:4]: (warning) scanf format string requires 0 parameters but 1 is given.\n" $, errout@var100 .@expr1073742723 str (@expr1073742724 ) $) $) { $return ; }
761: }
762:
763: void testScanf3 ( ) {
764: $check_ $(@expr1073742725 "cppcheck-2.8/test/testio.cpp" $, 764 $, "void f() {\n  char str[8];\n  scanf(\"%7c\", str);\n  scanf(\"%8c\", str);\n  scanf(\"%9c\", str);\n}" $)
765:
|
768:
769: ;
770: $if $(@expr1073742726 $!@expr1073742727 $assertEquals $(@expr1073742728 "cppcheck-2.8/test/testio.cpp" $, 770 $, "[test.cpp:5]: (error) Width 9 given in format string (no. 1) is larger than destination buffer 'str[8]', use %8c to prevent overflowing it.\n" $, errout@var100 .@expr1073742729 str (@expr1073742730 ) $) $) { $return ; }
771: }
772:
773: void testScanf4 ( ) {
774: $check_ $(@expr1073742731 "cppcheck-2.8/test/testio.cpp" $, 774 $, "void f()\n{\n  char str [8];\n  scanf (\"%70s\",str);\n}" $)
775:
776:
777:
778: ;
779: $if $(@expr1073742732 $!@expr1073742733 $assertEquals $(@expr1073742734 "cppcheck-2.8/test/testio.cpp" $, 779 $, "[test.cpp:4]: (error) Width 70 given in format string (no. 1) is larger than destination buffer 'str[8]', use %7s to prevent overflowing it.\n" $, errout@var100 .@expr1073742735 str (@expr1073742736 ) $) $) { $return ; }
780: }
781:
782: void testScanf5 ( ) {
783: $check_ $(@expr1073742737 "cppcheck-2.8/test/testio.cpp" $, 783 $, "char s1[42], s2[42];\nvoid test() {\n    scanf(\"%42s%42[a-z]\", s1, s2);\n}" $)
784:
785:
786: ;
787: $if $(@expr1073742738 $!@expr1073742739 $assertEquals $(@expr1073742740 "cppcheck-2.8/test/testio.cpp" $, 787 $, "[test.cpp:3]: (error) Width 42 given in format string (no. 1) is larger than destination buffer 's1[42]', use %41s to prevent overflowing it.\n[test.cpp:3]: (error) Width 42 given in format string (no. 2) is larger than destination buffer 's2[42]', use %41[a-z] to prevent overflowing it.\n" $, errout@var100 .@expr1073742741 str (@expr1073742742 ) $) $) { $return
788: ; }
789: }
790:
|
809:
810: void testFormatStrNoWarn ( const char * filename@var116 , unsigned int linenr@var117 , const char * code@var118 ) {
811: $check_ $(@expr1073742743 "cppcheck-2.8/test/testio.cpp" $, 811 $, code@var118 , true , false , Settings ::@expr1073742744 Unix32 , true $) ;
812: assertEquals (@expr921 filename@var116 , linenr@var117 , emptyString , errout@var100 .@expr922 str (@expr923 ) ) ;
813: $check_ $(@expr1073742748 "cppcheck-2.8/test/testio.cpp" $, 813 $, code@var118 , true , false , Settings ::@expr1073742749 Unix64 , true $) ;
814: assertEquals (@expr921 filename@var116 , linenr@var117 , emptyString , errout@var100 .@expr922 str (@expr923 ) ) ;
815: $check_ $(@expr1073742753 "cppcheck-2.8/test/testio.cpp" $, 815 $, code@var118 , true , false , Settings ::@expr1073742754 Win32A , true $) ;
816: assertEquals (@expr921 filename@var116 , linenr@var117 , emptyString , errout@var100 .@expr922 str (@expr923 ) ) ;
817: $check_ $(@expr1073742758 "cppcheck-2.8/test/testio.cpp" $, 817 $, code@var118 , true , false , Settings ::@expr1073742759 Win64 , true $) ;
818: assertEquals (@expr921 filename@var116 , linenr@var117 , emptyString , errout@var100 .@expr922 str (@expr923 ) ) ;
819: }
820:
821: void testFormatStrWarn ( const char * filename@var119 , unsigned int linenr@var120 ,
822: const char * code@var121 , const char * testScanfErrString@var122 ) {
823: $check_ $(@expr1073742763 "cppcheck-2.8/test/testio.cpp" $, 823 $, code@var121 , true , false , Settings ::@expr1073742764 Unix32 , true $) ;
824: assertEquals (@expr941 filename@var119 , linenr@var120 , testScanfErrString@var122 , errout@var100 .@expr942 str (@expr943 ) ) ;
825: $check_ $(@expr1073742768 "cppcheck-2.8/test/testio.cpp" $, 825 $, code@var121 , true , false , Settings ::@expr1073742769 Unix64 , true $) ;
826: assertEquals (@expr941 filename@var119 , linenr@var120 , testScanfErrString@var122 , errout@var100 .@expr942 str (@expr943 ) ) ;
827: $check_ $(@expr1073742773 "cppcheck-2.8/test/testio.cpp" $, 827 $, code@var121 , true , false , Settings ::@expr1073742774 Win32A , true $) ;
828: assertEquals (@expr941 filename@var119 , linenr@var120 , testScanfErrString@var122 , errout@var100 .@expr942 str (@expr943 ) ) ;
829: $check_ $(@expr1073742778 "cppcheck-2.8/test/testio.cpp" $, 829 $, code@var121 , true , false , Settings ::@expr1073742779 Win64 , true $) ;
830: assertEquals (@expr941 filename@var119 , linenr@var120 , testScanfErrString@var122 , errout@var100 .@expr942 str (@expr943 ) ) ;
831: }
832:
833: void testFormatStrWarnAka ( const char * filename@var123 , unsigned int linenr@var124 ,
834: const char * code@var125 , const char * testScanfErrAkaString@var126 , const char * testScanfErrAkaWin64String@var127 ) {
835: $check_ $(@expr1073742783 "cppcheck-2.8/test/testio.cpp" $, 835 $, code@var125 , true , true , Settings ::@expr1073742784 Unix32 , true $) ;
836: assertEquals (@expr961 filename@var123 , linenr@var124 , testScanfErrAkaString@var126 , errout@var100 .@expr962 str (@expr963 ) ) ;
837: $check_ $(@expr1073742788 "cppcheck-2.8/test/testio.cpp" $, 837 $, code@var125 , true , true , Settings ::@expr1073742789 Unix64 , true $) ;
838: assertEquals (@expr961 filename@var123 , linenr@var124 , testScanfErrAkaString@var126 , errout@var100 .@expr962 str (@expr963 ) ) ;
839: $check_ $(@expr1073742793 "cppcheck-2.8/test/testio.cpp" $, 839 $, code@var125 , true , true , Settings ::@expr1073742794 Win32A , true $) ;
840: assertEquals (@expr961 filename@var123 , linenr@var124 , testScanfErrAkaString@var126 , errout@var100 .@expr962 str (@expr963 ) ) ;
841: $check_ $(@expr1073742798 "cppcheck-2.8/test/testio.cpp" $, 841 $, code@var125 , true , true , Settings ::@expr1073742799 Win64 , true $) ;
842: assertEquals (@expr1073742800 filename@var123 , linenr@var124 , testScanfErrAkaWin64String@var127 , errout@var100 .@expr962 str (@expr963 ) ) ;
843: }
844:
845: void testFormatStrWarnAkaWin64 ( const char * filename@var128 , unsigned int linenr@var129 ,
846: const char * code@var130 , const char * testScanfErrAkaWin64String@var131 ) {
847: $check_ $(@expr1073742803 "cppcheck-2.8/test/testio.cpp" $, 847 $, code@var130 , true , true , Settings ::@expr1073742804 Unix32 , true $) ;
848: assertEquals (@expr981 filename@var128 , linenr@var129 , emptyString , errout@var100 .@expr982 str (@expr983 ) ) ;
849: $check_ $(@expr1073742808 "cppcheck-2.8/test/testio.cpp" $, 849 $, code@var130 , true , true , Settings ::@expr1073742809 Unix64 , true $) ;
850: assertEquals (@expr981 filename@var128 , linenr@var129 , emptyString , errout@var100 .@expr982 str (@expr983 ) ) ;
851: $check_ $(@expr1073742813 "cppcheck-2.8/test/testio.cpp" $, 851 $, code@var130 , true , true , Settings ::@expr1073742814 Win32A , true $) ;
852: assertEquals (@expr981 filename@var128 , linenr@var129 , emptyString , errout@var100 .@expr982 str (@expr983 ) ) ;
853: $check_ $(@expr1073742818 "cppcheck-2.8/test/testio.cpp" $, 853 $, code@var130 , true , true , Settings ::@expr1073742819 Win64 , true $) ;
854: assertEquals (@expr1073742820 filename@var128 , linenr@var129 , testScanfErrAkaWin64String@var131 , errout@var100 .@expr982 str (@expr983 ) ) ;
855: }
856:
857: void testFormatStrWarnAkaWin32 ( const char * filename@var132 , unsigned int linenr@var133 ,
858: const char * code@var134 , const char * testScanfErrAkaString@var135 ) {
859: $check_ $(@expr1073742823 "cppcheck-2.8/test/testio.cpp" $, 859 $, code@var134 , true , true , Settings ::@expr1073742824 Unix32 , true $) ;
860: assertEquals (@expr1001 filename@var132 , linenr@var133 , testScanfErrAkaString@var135 , errout@var100 .@expr1002 str (@expr1003 ) ) ;
861: $check_ $(@expr1073742828 "cppcheck-2.8/test/testio.cpp" $, 861 $, code@var134 , true , true , Settings ::@expr1073742829 Unix64 , true $) ;
862: assertEquals (@expr1001 filename@var132 , linenr@var133 , testScanfErrAkaString@var135 , errout@var100 .@expr1002 str (@expr1003 ) ) ;
863: $check_ $(@expr1073742833 "cppcheck-2.8/test/testio.cpp" $, 863 $, code@var134 , true , true , Settings ::@expr1073742834 Win32A , true $) ;
864: assertEquals (@expr1001 filename@var132 , linenr@var133 , testScanfErrAkaString@var135 , errout@var100 .@expr1002 str (@expr1003 ) ) ;
865: $check_ $(@expr1073742838 "cppcheck-2.8/test/testio.cpp" $, 865 $, code@var134 , true , true , Settings ::@expr1073742839 Win64 , true $) ;
866: assertEquals (@expr1073742840 filename@var132 , linenr@var133 , emptyString , errout@var100 .@expr1002 str (@expr1003 ) ) ;
867: }
868:
|
890:
891: void testScanfArgument ( ) {
892: $check_ $(@expr1073742847 "cppcheck-2.8/test/testio.cpp" $, 892 $, "void foo() {\n    scanf(\"%1d\", &foo);\n    sscanf(bar, \"%1d\", &foo);\n    scanf(\"%1u%1u\", &foo, bar());\n    scanf(\"%*1x %1x %29s\", &count, KeyName);\n    fscanf(f, \"%7ms\", &ref);\n    sscanf(ip_port, \"%*[^:]:%4d\", &port);\n}" $)
893:
|
898:
899: ;
900: $if $(@expr1073742848 $!@expr1073742849 $assertEquals $(@expr1073742850 "cppcheck-2.8/test/testio.cpp" $, 900 $, "" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
901:
902: $check_ $(@expr1073742853 "cppcheck-2.8/test/testio.cpp" $, 902 $, "void foo() {\n    scanf(\"\", &foo);\n    scanf(\"%1d\", &foo, &bar);\n    fscanf(bar, \"%1d\", &foo, &bar);\n    scanf(\"%*1x %1x %29s\", &count, KeyName, foo);\n}" $)
903:
|
906:
907: ;
908: $if $(@expr1073742854 $!@expr1073742855 $assertEquals $(@expr1073742856 "cppcheck-2.8/test/testio.cpp" $, 908 $, "[test.cpp:2]: (warning) scanf format string requires 0 parameters but 1 is given.\n[test.cpp:3]: (warning) scanf format string requires 1 parameter but 2 are given.\n[test.cpp:4]: (warning) fscanf format string requires 1 parameter but 2 are given.\n[test.cpp:5]: (warning) scanf format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
909:
910:
911: ; }
912:
913: $check_ $(@expr1073742859 "cppcheck-2.8/test/testio.cpp" $, 913 $, "void foo() {\n    scanf(\"%1d\");\n    scanf(\"%1u%1u\", bar());\n    sscanf(bar, \"%1d%1d\", &foo);\n    scanf(\"%*1x %1x %29s\", &count);\n}" $)
914:
|
917:
918: ;
919: $if $(@expr1073742860 $!@expr1073742861 $assertEquals $(@expr1073742862 "cppcheck-2.8/test/testio.cpp" $, 919 $, "[test.cpp:2]: (error) scanf format string requires 1 parameter but only 0 are given.\n[test.cpp:3]: (error) scanf format string requires 2 parameters but only 1 is given.\n[test.cpp:4]: (error) sscanf format string requires 2 parameters but only 1 is given.\n[test.cpp:5]: (error) scanf format string requires 2 parameters but only 1 is given.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
920:
921:
922: ; }
923:
924: $check_ $(@expr1073742865 "cppcheck-2.8/test/testio.cpp" $, 924 $, "void foo() {\n    char input[10];\n    char output[5];\n    sscanf(input, \"%3s\", output);\n    sscanf(input, \"%4s\", output);\n    sscanf(input, \"%5s\", output);\n}" , false $)
925:
|
929:
930: ;
931: $if $(@expr1073742866 $!@expr1073742867 $assertEquals $(@expr1073742868 "cppcheck-2.8/test/testio.cpp" $, 931 $, "[test.cpp:6]: (error) Width 5 given in format string (no. 1) is larger than destination buffer 'output[5]', use %4s to prevent overflowing it.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
932:
933: $check_ $(@expr1073742871 "cppcheck-2.8/test/testio.cpp" $, 933 $, "void foo() {\n    char input[10];\n    char output[5];\n    sscanf(input, \"%s\", output);\n    sscanf(input, \"%3s\", output);\n    sscanf(input, \"%4s\", output);\n    sscanf(input, \"%5s\", output);\n}" , true $)
934:
|
939:
940: ;
941: $if $(@expr1073742872 $!@expr1073742873 $assertEquals $(@expr1073742874 "cppcheck-2.8/test/testio.cpp" $, 941 $, "[test.cpp:5]: (warning, inconclusive) Width 3 given in format string (no. 1) is smaller than destination buffer 'output[5]'.\n[test.cpp:7]: (error) Width 5 given in format string (no. 1) is larger than destination buffer 'output[5]', use %4s to prevent overflowing it.\n[test.cpp:4]: (warning) sscanf() without field width limits can crash with huge input data.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
942:
943: ; }
944:
945: $check_ $(@expr1073742877 "cppcheck-2.8/test/testio.cpp" $, 945 $, "void foo() {\n    const size_t BUFLENGTH(2048);\n    typedef char bufT[BUFLENGTH];\n    bufT line= {0};\n    bufT projectId= {0};\n    const int scanrc=sscanf(line, \"Project(\\\"{%36s}\\\")\", projectId);\n    sscanf(input, \"%5s\", output);\n}" , true $)
946:
|
951:
952: ;
953: $if $(@expr1073742878 $!@expr1073742879 $assertEquals $(@expr1073742880 "cppcheck-2.8/test/testio.cpp" $, 953 $, "[test.cpp:6]: (warning, inconclusive) Width 36 given in format string (no. 1) is smaller than destination buffer 'projectId[2048]'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
954:
955: $check_ $(@expr1073742883 "cppcheck-2.8/test/testio.cpp" $, 955 $, "void foo(unsigned int i) {\n  scanf(\"%h\", &i);\n  scanf(\"%hh\", &i);\n  scanf(\"%l\", &i);\n  scanf(\"%ll\", &i);\n  scanf(\"%j\", &i);\n  scanf(\"%z\", &i);\n  scanf(\"%t\", &i);\n  scanf(\"%L\", &i);\n  scanf(\"%I\", &i);\n}" $)
956:
|
964:
965: ;
966: $if $(@expr1073742884 $!@expr1073742885 $assertEquals $(@expr1073742886 "cppcheck-2.8/test/testio.cpp" $, 966 $, "[test.cpp:2]: (warning) 'h' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:3]: (warning) 'hh' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:4]: (warning) 'l' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'll' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'j' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'z' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 't' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'L' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
967:
|
973:
974: ; }
975:
976:
977:
978: $testFormatStrNoWarn $(@expr1073742889 "cppcheck-2.8/test/testio.cpp" $, 978 $, $"void f(){intmax_t x; scanf(\"%jb\", &x);}" $) ;
979: $testFormatStrNoWarn $(@expr1073742890 "cppcheck-2.8/test/testio.cpp" $, 979 $, $"void f(){uintmax_t x; scanf(\"%jw\", &x);}" $) ;
980: $testFormatStrNoWarn $(@expr1073742891 "cppcheck-2.8/test/testio.cpp" $, 980 $, $"void f(){size_t x; scanf(\"%zr\", &x);}" $) ;
981: $testFormatStrNoWarn $(@expr1073742892 "cppcheck-2.8/test/testio.cpp" $, 981 $, $"void f(){ptrdiff_t x; scanf(\"%tm\", &x);}" $) ;
982: $testFormatStrNoWarn $(@expr1073742893 "cppcheck-2.8/test/testio.cpp" $, 982 $, $"void f(){long double x; scanf(\"%La\", &x);}" $) ;
983: $testFormatStrNoWarn $(@expr1073742894 "cppcheck-2.8/test/testio.cpp" $, 983 $, $"void f(){std::size_t x; scanf(\"%zv\", &x);}" $) ;
984: $testFormatStrNoWarn $(@expr1073742895 "cppcheck-2.8/test/testio.cpp" $, 984 $, $"void f(){std::ptrdiff_t x; scanf(\"%tp\", &x);}" $) ;
985:
986: $testFormatStrWarn $(@expr1073742896 "cppcheck-2.8/test/testio.cpp" $, 986 $, $"void f(){bool x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'bool *'.\n" $) ;
987: $testFormatStrWarn $(@expr1073742897 "cppcheck-2.8/test/testio.cpp" $, 987 $, $"void f(){char x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'char *'.\n" $) ;
988: $testFormatStrWarn $(@expr1073742898 "cppcheck-2.8/test/testio.cpp" $, 988 $, $"void f(){signed char x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed char *'.\n" $) ;
989: $testFormatStrWarn $(@expr1073742899 "cppcheck-2.8/test/testio.cpp" $, 989 $, $"void f(){unsigned char x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned char *'.\n" $) ;
990: $testFormatStrWarn $(@expr1073742900 "cppcheck-2.8/test/testio.cpp" $, 990 $, $"void f(){signed short x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed short *'.\n" $) ;
991: $testFormatStrWarn $(@expr1073742901 "cppcheck-2.8/test/testio.cpp" $, 991 $, $"void f(){unsigned short x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned short *'.\n" $) ;
992: $testFormatStrWarn $(@expr1073742902 "cppcheck-2.8/test/testio.cpp" $, 992 $, $"void f(){signed int x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'.\n" $) ;
993: $testFormatStrNoWarn $(@expr1073742903 "cppcheck-2.8/test/testio.cpp" $, 993 $, $"void f(){unsigned int x; scanf(\"%u\", &x);}" $) ;
994: $testFormatStrWarn $(@expr1073742904 "cppcheck-2.8/test/testio.cpp" $, 994 $, $"void f(){signed long x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long *'.\n" $) ;
995: $testFormatStrWarn $(@expr1073742905 "cppcheck-2.8/test/testio.cpp" $, 995 $, $"void f(){unsigned long x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long *'.\n" $) ;
996: $testFormatStrWarn $(@expr1073742906 "cppcheck-2.8/test/testio.cpp" $, 996 $, $"void f(){signed long long x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long long *'.\n" $) ;
997: $testFormatStrWarn $(@expr1073742907 "cppcheck-2.8/test/testio.cpp" $, 997 $, $"void f(){unsigned long long x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long long *'.\n" $) ;
998: $testFormatStrWarn $(@expr1073742908 "cppcheck-2.8/test/testio.cpp" $, 998 $, $"void f(){float x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'float *'.\n" $) ;
999: $testFormatStrWarn $(@expr1073742909 "cppcheck-2.8/test/testio.cpp" $, 999 $, $"void f(){double x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'double *'.\n" $) ;
1000: $testFormatStrWarn $(@expr1073742910 "cppcheck-2.8/test/testio.cpp" $, 1000 $, $"void f(){long double x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'long double *'.\n" $) ;
1001: $testFormatStrWarn $(@expr1073742911 "cppcheck-2.8/test/testio.cpp" $, 1001 $, $"void f(){void * x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'void * *'.\n" $) ;
1002: $testFormatStrWarnAka $(@expr1073742912 "cppcheck-2.8/test/testio.cpp" $, 1002 $, $"void f(){size_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1003: $testFormatStrWarnAka $(@expr1073742913 "cppcheck-2.8/test/testio.cpp" $, 1003 $, $"void f(){ssize_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1004: $testFormatStrWarnAka $(@expr1073742914 "cppcheck-2.8/test/testio.cpp" $, 1004 $, $"void f(){ptrdiff_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1005: $testFormatStrWarnAka $(@expr1073742915 "cppcheck-2.8/test/testio.cpp" $, 1005 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1006: $testFormatStrWarnAka $(@expr1073742916 "cppcheck-2.8/test/testio.cpp" $, 1006 $, $"void f(){intmax_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1007: $testFormatStrWarnAka $(@expr1073742917 "cppcheck-2.8/test/testio.cpp" $, 1007 $, $"void f(){uintmax_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1008: $testFormatStrWarnAka $(@expr1073742918 "cppcheck-2.8/test/testio.cpp" $, 1008 $, $"void f(){intptr_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1009: $testFormatStrWarnAka $(@expr1073742919 "cppcheck-2.8/test/testio.cpp" $, 1009 $, $"void f(){uintptr_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" $) ;
1010: $testFormatStrWarnAka $(@expr1073742920 "cppcheck-2.8/test/testio.cpp" $, 1010 $, $"void f(){std::size_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1011: $testFormatStrWarnAka $(@expr1073742921 "cppcheck-2.8/test/testio.cpp" $, 1011 $, $"void f(){std::ssize_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1012: $testFormatStrWarnAka $(@expr1073742922 "cppcheck-2.8/test/testio.cpp" $, 1012 $, $"void f(){std::ptrdiff_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1013: $testFormatStrWarnAka $(@expr1073742923 "cppcheck-2.8/test/testio.cpp" $, 1013 $, $"void f(){std::intmax_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1014: $testFormatStrWarnAka $(@expr1073742924 "cppcheck-2.8/test/testio.cpp" $, 1014 $, $"void f(){std::uintmax_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1015: $testFormatStrWarnAka $(@expr1073742925 "cppcheck-2.8/test/testio.cpp" $, 1015 $, $"void f(){std::intptr_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1016: $testFormatStrWarnAka $(@expr1073742926 "cppcheck-2.8/test/testio.cpp" $, 1016 $, $"void f(){std::uintptr_t x; scanf(\"%u\", &x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1017:
1018: $check_ $(@expr1073742927 "cppcheck-2.8/test/testio.cpp" $, 1018 $, "void foo() {\n    scanf(\"%u\", \"s3\");\n    scanf(\"%u\", L\"s5W\");\n}" , true $)
1019:
1020:
1021: ;
1022: $if $(@expr1073742928 $!@expr1073742929 $assertEquals $(@expr1073742930 "cppcheck-2.8/test/testio.cpp" $, 1022 $, "[test.cpp:2]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
1023: ; }
1024:
1025: $check_ $(@expr1073742933 "cppcheck-2.8/test/testio.cpp" $, 1025 $, "void foo(long l) {\n    scanf(\"%u\", l);\n}" , true $)
1026:
1027: ;
1028: $if $(@expr1073742934 $!@expr1073742935 $assertEquals $(@expr1073742936 "cppcheck-2.8/test/testio.cpp" $, 1028 $, "[test.cpp:2]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
1029:
1030: $testFormatStrWarn $(@expr1073742939 "cppcheck-2.8/test/testio.cpp" $, 1030 $, $"void f(){bool x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'bool *'.\n" $) ;
1031: $testFormatStrWarn $(@expr1073742940 "cppcheck-2.8/test/testio.cpp" $, 1031 $, $"void f(){char x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'char *'.\n" $) ;
1032: $testFormatStrWarn $(@expr1073742941 "cppcheck-2.8/test/testio.cpp" $, 1032 $, $"void f(){signed char x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed char *'.\n" $) ;
1033: $testFormatStrWarn $(@expr1073742942 "cppcheck-2.8/test/testio.cpp" $, 1033 $, $"void f(){unsigned char x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned char *'.\n" $) ;
1034: $testFormatStrWarn $(@expr1073742943 "cppcheck-2.8/test/testio.cpp" $, 1034 $, $"void f(){signed short x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed short *'.\n" $) ;
1035: $testFormatStrWarn $(@expr1073742944 "cppcheck-2.8/test/testio.cpp" $, 1035 $, $"void f(){unsigned short x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned short *'.\n" $) ;
1036: $testFormatStrWarn $(@expr1073742945 "cppcheck-2.8/test/testio.cpp" $, 1036 $, $"void f(){signed int x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed int *'.\n" $) ;
1037: $testFormatStrWarn $(@expr1073742946 "cppcheck-2.8/test/testio.cpp" $, 1037 $, $"void f(){unsigned int x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned int *'.\n" $) ;
1038: $testFormatStrWarn $(@expr1073742947 "cppcheck-2.8/test/testio.cpp" $, 1038 $, $"void f(){signed long x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long *'.\n" $) ;
1039: $testFormatStrNoWarn $(@expr1073742948 "cppcheck-2.8/test/testio.cpp" $, 1039 $, $"void f(){unsigned long x; scanf(\"%lu\", &x);}" $) ;
1040: $testFormatStrWarn $(@expr1073742949 "cppcheck-2.8/test/testio.cpp" $, 1040 $, $"void f(){signed long long x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long long *'.\n" $) ;
1041: $testFormatStrWarn $(@expr1073742950 "cppcheck-2.8/test/testio.cpp" $, 1041 $, $"void f(){unsigned long long x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned long long *'.\n" $) ;
1042: $testFormatStrWarn $(@expr1073742951 "cppcheck-2.8/test/testio.cpp" $, 1042 $, $"void f(){float x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'float *'.\n" $) ;
1043: $testFormatStrWarn $(@expr1073742952 "cppcheck-2.8/test/testio.cpp" $, 1043 $, $"void f(){double x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'double *'.\n" $) ;
1044: $testFormatStrWarn $(@expr1073742953 "cppcheck-2.8/test/testio.cpp" $, 1044 $, $"void f(){long double x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'long double *'.\n" $) ;
1045: $testFormatStrWarn $(@expr1073742954 "cppcheck-2.8/test/testio.cpp" $, 1045 $, $"void f(){void * x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'void * *'.\n" $) ;
1046: $testFormatStrWarnAka $(@expr1073742955 "cppcheck-2.8/test/testio.cpp" $, 1046 $, $"void f(){size_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1047: $testFormatStrWarnAka $(@expr1073742956 "cppcheck-2.8/test/testio.cpp" $, 1047 $, $"void f(){ssize_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1048: $testFormatStrWarnAka $(@expr1073742957 "cppcheck-2.8/test/testio.cpp" $, 1048 $, $"void f(){ptrdiff_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1049: $testFormatStrWarnAka $(@expr1073742958 "cppcheck-2.8/test/testio.cpp" $, 1049 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1050: $testFormatStrWarnAka $(@expr1073742959 "cppcheck-2.8/test/testio.cpp" $, 1050 $, $"void f(){intmax_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1051: $testFormatStrWarnAka $(@expr1073742960 "cppcheck-2.8/test/testio.cpp" $, 1051 $, $"void f(){uintmax_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1052: $testFormatStrWarnAka $(@expr1073742961 "cppcheck-2.8/test/testio.cpp" $, 1052 $, $"void f(){intptr_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1053: $testFormatStrWarnAkaWin64 $(@expr1073742962 "cppcheck-2.8/test/testio.cpp" $, 1053 $, $"void f(){uintptr_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" $) ;
1054: $testFormatStrWarnAka $(@expr1073742963 "cppcheck-2.8/test/testio.cpp" $, 1054 $, $"void f(){std::size_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1055: $testFormatStrWarnAka $(@expr1073742964 "cppcheck-2.8/test/testio.cpp" $, 1055 $, $"void f(){std::ssize_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1056: $testFormatStrWarnAka $(@expr1073742965 "cppcheck-2.8/test/testio.cpp" $, 1056 $, $"void f(){std::ptrdiff_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1057: $testFormatStrWarnAka $(@expr1073742966 "cppcheck-2.8/test/testio.cpp" $, 1057 $, $"void f(){std::intmax_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1058: $testFormatStrWarnAka $(@expr1073742967 "cppcheck-2.8/test/testio.cpp" $, 1058 $, $"void f(){std::uintmax_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1059: $testFormatStrWarnAka $(@expr1073742968 "cppcheck-2.8/test/testio.cpp" $, 1059 $, $"void f(){std::intptr_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1060: $testFormatStrWarnAkaWin64 $(@expr1073742969 "cppcheck-2.8/test/testio.cpp" $, 1060 $, $"void f(){std::uintptr_t x; scanf(\"%lu\", &x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1061:
1062: $testFormatStrWarn $(@expr1073742970 "cppcheck-2.8/test/testio.cpp" $, 1062 $, $"void f(){bool x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'bool *'.\n" $) ;
1063: $testFormatStrWarn $(@expr1073742971 "cppcheck-2.8/test/testio.cpp" $, 1063 $, $"void f(){char x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'char *'.\n" $) ;
1064: $testFormatStrWarn $(@expr1073742972 "cppcheck-2.8/test/testio.cpp" $, 1064 $, $"void f(){signed char x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed char *'.\n" $) ;
1065: $testFormatStrWarn $(@expr1073742973 "cppcheck-2.8/test/testio.cpp" $, 1065 $, $"void f(){unsigned char x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned char *'.\n" $) ;
1066: $testFormatStrWarn $(@expr1073742974 "cppcheck-2.8/test/testio.cpp" $, 1066 $, $"void f(){signed short x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed short *'.\n" $) ;
1067: $testFormatStrWarn $(@expr1073742975 "cppcheck-2.8/test/testio.cpp" $, 1067 $, $"void f(){unsigned short x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned short *'.\n" $) ;
1068: $testFormatStrWarn $(@expr1073742976 "cppcheck-2.8/test/testio.cpp" $, 1068 $, $"void f(){signed int x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed int *'.\n" $) ;
1069: $testFormatStrWarn $(@expr1073742977 "cppcheck-2.8/test/testio.cpp" $, 1069 $, $"void f(){unsigned int x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned int *'.\n" $) ;
1070: $testFormatStrWarn $(@expr1073742978 "cppcheck-2.8/test/testio.cpp" $, 1070 $, $"void f(){signed long x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long *'.\n" $) ;
1071: $testFormatStrNoWarn $(@expr1073742979 "cppcheck-2.8/test/testio.cpp" $, 1071 $, $"void f(){unsigned long x; scanf(\"%lx\", &x);}" $) ;
1072: $testFormatStrWarn $(@expr1073742980 "cppcheck-2.8/test/testio.cpp" $, 1072 $, $"void f(){signed long long x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long long *'.\n" $) ;
1073: $testFormatStrWarn $(@expr1073742981 "cppcheck-2.8/test/testio.cpp" $, 1073 $, $"void f(){unsigned long long x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned long long *'.\n" $) ;
1074: $testFormatStrWarn $(@expr1073742982 "cppcheck-2.8/test/testio.cpp" $, 1074 $, $"void f(){float x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'float *'.\n" $) ;
1075: $testFormatStrWarn $(@expr1073742983 "cppcheck-2.8/test/testio.cpp" $, 1075 $, $"void f(){double x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'double *'.\n" $) ;
1076: $testFormatStrWarn $(@expr1073742984 "cppcheck-2.8/test/testio.cpp" $, 1076 $, $"void f(){long double x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'long double *'.\n" $) ;
1077: $testFormatStrWarn $(@expr1073742985 "cppcheck-2.8/test/testio.cpp" $, 1077 $, $"void f(){void * x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'void * *'.\n" $) ;
1078: $testFormatStrWarnAka $(@expr1073742986 "cppcheck-2.8/test/testio.cpp" $, 1078 $, $"void f(){size_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1079: $testFormatStrWarnAka $(@expr1073742987 "cppcheck-2.8/test/testio.cpp" $, 1079 $, $"void f(){ssize_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1080: $testFormatStrWarnAka $(@expr1073742988 "cppcheck-2.8/test/testio.cpp" $, 1080 $, $"void f(){ptrdiff_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1081: $testFormatStrWarnAka $(@expr1073742989 "cppcheck-2.8/test/testio.cpp" $, 1081 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1082: $testFormatStrWarnAka $(@expr1073742990 "cppcheck-2.8/test/testio.cpp" $, 1082 $, $"void f(){intmax_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1083: $testFormatStrWarnAka $(@expr1073742991 "cppcheck-2.8/test/testio.cpp" $, 1083 $, $"void f(){uintmax_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1084: $testFormatStrWarnAka $(@expr1073742992 "cppcheck-2.8/test/testio.cpp" $, 1084 $, $"void f(){intptr_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1085: $testFormatStrWarnAkaWin64 $(@expr1073742993 "cppcheck-2.8/test/testio.cpp" $, 1085 $, $"void f(){uintptr_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" $) ;
1086: $testFormatStrWarnAka $(@expr1073742994 "cppcheck-2.8/test/testio.cpp" $, 1086 $, $"void f(){std::size_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1087: $testFormatStrWarnAka $(@expr1073742995 "cppcheck-2.8/test/testio.cpp" $, 1087 $, $"void f(){std::ssize_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1088: $testFormatStrWarnAka $(@expr1073742996 "cppcheck-2.8/test/testio.cpp" $, 1088 $, $"void f(){std::ptrdiff_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1089: $testFormatStrWarnAka $(@expr1073742997 "cppcheck-2.8/test/testio.cpp" $, 1089 $, $"void f(){std::intmax_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1090: $testFormatStrWarnAka $(@expr1073742998 "cppcheck-2.8/test/testio.cpp" $, 1090 $, $"void f(){std::uintmax_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1091: $testFormatStrWarnAka $(@expr1073742999 "cppcheck-2.8/test/testio.cpp" $, 1091 $, $"void f(){std::intptr_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1092: $testFormatStrWarnAkaWin64 $(@expr1073743000 "cppcheck-2.8/test/testio.cpp" $, 1092 $, $"void f(){std::uintptr_t x; scanf(\"%lx\", &x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1093:
1094: $testFormatStrWarn $(@expr1073743001 "cppcheck-2.8/test/testio.cpp" $, 1094 $, $"void f(){bool x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'bool *'.\n" $) ;
1095: $testFormatStrWarn $(@expr1073743002 "cppcheck-2.8/test/testio.cpp" $, 1095 $, $"void f(){char x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'char *'.\n" $) ;
1096: $testFormatStrNoWarn $(@expr1073743003 "cppcheck-2.8/test/testio.cpp" $, 1096 $, $"void f(){signed long x; scanf(\"%ld\", &x);}" $) ;
1097: $testFormatStrWarn $(@expr1073743004 "cppcheck-2.8/test/testio.cpp" $, 1097 $, $"void f(){unsigned long x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'unsigned long *'.\n" $) ;
1098: $testFormatStrWarn $(@expr1073743005 "cppcheck-2.8/test/testio.cpp" $, 1098 $, $"void f(){void * x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'void * *'.\n" $) ;
1099: $testFormatStrWarnAka $(@expr1073743006 "cppcheck-2.8/test/testio.cpp" $, 1099 $, $"void f(){size_t x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1100: $testFormatStrWarnAka $(@expr1073743007 "cppcheck-2.8/test/testio.cpp" $, 1100 $, $"void f(){intmax_t x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1101: $testFormatStrWarnAka $(@expr1073743008 "cppcheck-2.8/test/testio.cpp" $, 1101 $, $"void f(){std::ptrdiff_t x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1102: $testFormatStrWarnAka $(@expr1073743009 "cppcheck-2.8/test/testio.cpp" $, 1102 $, $"void f(){std::intmax_t x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1103: $testFormatStrWarnAkaWin64 $(@expr1073743010 "cppcheck-2.8/test/testio.cpp" $, 1103 $, $"void f(){std::intptr_t x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1104: $testFormatStrWarnAka $(@expr1073743011 "cppcheck-2.8/test/testio.cpp" $, 1104 $, $"void f(){std::uintptr_t x; scanf(\"%ld\", &x);}" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1105:
1106: $testFormatStrWarn $(@expr1073743012 "cppcheck-2.8/test/testio.cpp" $, 1106 $, $"void f(){bool x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n" $) ;
1107: $testFormatStrWarn $(@expr1073743013 "cppcheck-2.8/test/testio.cpp" $, 1107 $, $"void f(){char x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n" $) ;
1108: $testFormatStrWarn $(@expr1073743014 "cppcheck-2.8/test/testio.cpp" $, 1108 $, $"void f(){signed char x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n" $) ;
1109: $testFormatStrWarn $(@expr1073743015 "cppcheck-2.8/test/testio.cpp" $, 1109 $, $"void f(){unsigned char x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n" $) ;
1110: $testFormatStrWarn $(@expr1073743016 "cppcheck-2.8/test/testio.cpp" $, 1110 $, $"void f(){signed short x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n" $) ;
1111: $testFormatStrWarn $(@expr1073743017 "cppcheck-2.8/test/testio.cpp" $, 1111 $, $"void f(){unsigned short x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n" $) ;
1112: $testFormatStrWarn $(@expr1073743018 "cppcheck-2.8/test/testio.cpp" $, 1112 $, $"void f(){signed int x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n" $) ;
1113: $testFormatStrWarn $(@expr1073743019 "cppcheck-2.8/test/testio.cpp" $, 1113 $, $"void f(){unsigned int x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n" $) ;
1114: $testFormatStrWarn $(@expr1073743020 "cppcheck-2.8/test/testio.cpp" $, 1114 $, $"void f(){signed long x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n" $) ;
1115: $testFormatStrWarn $(@expr1073743021 "cppcheck-2.8/test/testio.cpp" $, 1115 $, $"void f(){unsigned long x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n" $) ;
1116: $testFormatStrWarn $(@expr1073743022 "cppcheck-2.8/test/testio.cpp" $, 1116 $, $"void f(){signed long long x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n" $) ;
1117: $testFormatStrNoWarn $(@expr1073743023 "cppcheck-2.8/test/testio.cpp" $, 1117 $, $"void f(){unsigned long long x; scanf(\"%llu\", &x);}" $) ;
1118: $testFormatStrWarn $(@expr1073743024 "cppcheck-2.8/test/testio.cpp" $, 1118 $, $"void f(){float x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n" $) ;
1119: $testFormatStrWarn $(@expr1073743025 "cppcheck-2.8/test/testio.cpp" $, 1119 $, $"void f(){double x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n" $) ;
1120: $testFormatStrWarn $(@expr1073743026 "cppcheck-2.8/test/testio.cpp" $, 1120 $, $"void f(){long double x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n" $) ;
1121: $testFormatStrWarn $(@expr1073743027 "cppcheck-2.8/test/testio.cpp" $, 1121 $, $"void f(){void * x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n" $) ;
1122: $testFormatStrWarnAka $(@expr1073743028 "cppcheck-2.8/test/testio.cpp" $, 1122 $, $"void f(){size_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1123: $testFormatStrWarnAka $(@expr1073743029 "cppcheck-2.8/test/testio.cpp" $, 1123 $, $"void f(){ssize_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1124: $testFormatStrWarnAka $(@expr1073743030 "cppcheck-2.8/test/testio.cpp" $, 1124 $, $"void f(){ptrdiff_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1125: $testFormatStrWarnAka $(@expr1073743031 "cppcheck-2.8/test/testio.cpp" $, 1125 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1126: $testFormatStrWarnAka $(@expr1073743032 "cppcheck-2.8/test/testio.cpp" $, 1126 $, $"void f(){intmax_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1127: $testFormatStrWarnAka $(@expr1073743033 "cppcheck-2.8/test/testio.cpp" $, 1127 $, $"void f(){uintmax_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1128: $testFormatStrWarnAka $(@expr1073743034 "cppcheck-2.8/test/testio.cpp" $, 1128 $, $"void f(){intptr_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1129: $testFormatStrWarnAkaWin32 $(@expr1073743035 "cppcheck-2.8/test/testio.cpp" $, 1129 $, $"void f(){uintptr_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $) ;
1130: $testFormatStrWarnAka $(@expr1073743036 "cppcheck-2.8/test/testio.cpp" $, 1130 $, $"void f(){std::size_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1131: $testFormatStrWarnAka $(@expr1073743037 "cppcheck-2.8/test/testio.cpp" $, 1131 $, $"void f(){std::ssize_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1132: $testFormatStrWarnAka $(@expr1073743038 "cppcheck-2.8/test/testio.cpp" $, 1132 $, $"void f(){std::ptrdiff_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1133: $testFormatStrWarnAka $(@expr1073743039 "cppcheck-2.8/test/testio.cpp" $, 1133 $, $"void f(){std::intmax_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1134: $testFormatStrWarnAka $(@expr1073743040 "cppcheck-2.8/test/testio.cpp" $, 1134 $, $"void f(){std::uintmax_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1135: $testFormatStrWarnAka $(@expr1073743041 "cppcheck-2.8/test/testio.cpp" $, 1135 $, $"void f(){std::intptr_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1136: $testFormatStrWarnAkaWin32 $(@expr1073743042 "cppcheck-2.8/test/testio.cpp" $, 1136 $, $"void f(){std::uintptr_t x; scanf(\"%llu\", &x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $) ;
1137:
1138: $testFormatStrWarn $(@expr1073743043 "cppcheck-2.8/test/testio.cpp" $, 1138 $, $"void f(){bool x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n" $) ;
1139: $testFormatStrWarn $(@expr1073743044 "cppcheck-2.8/test/testio.cpp" $, 1139 $, $"void f(){char x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n" $) ;
1140: $testFormatStrWarn $(@expr1073743045 "cppcheck-2.8/test/testio.cpp" $, 1140 $, $"void f(){signed char x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n" $) ;
1141: $testFormatStrWarn $(@expr1073743046 "cppcheck-2.8/test/testio.cpp" $, 1141 $, $"void f(){unsigned char x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n" $) ;
1142: $testFormatStrWarn $(@expr1073743047 "cppcheck-2.8/test/testio.cpp" $, 1142 $, $"void f(){signed short x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n" $) ;
1143: $testFormatStrWarn $(@expr1073743048 "cppcheck-2.8/test/testio.cpp" $, 1143 $, $"void f(){unsigned short x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n" $) ;
1144: $testFormatStrWarn $(@expr1073743049 "cppcheck-2.8/test/testio.cpp" $, 1144 $, $"void f(){signed int x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n" $) ;
1145: $testFormatStrWarn $(@expr1073743050 "cppcheck-2.8/test/testio.cpp" $, 1145 $, $"void f(){unsigned int x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n" $) ;
1146: $testFormatStrWarn $(@expr1073743051 "cppcheck-2.8/test/testio.cpp" $, 1146 $, $"void f(){signed long x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n" $) ;
1147: $testFormatStrWarn $(@expr1073743052 "cppcheck-2.8/test/testio.cpp" $, 1147 $, $"void f(){unsigned long x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n" $) ;
1148: $testFormatStrWarn $(@expr1073743053 "cppcheck-2.8/test/testio.cpp" $, 1148 $, $"void f(){signed long long x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n" $) ;
1149: $testFormatStrNoWarn $(@expr1073743054 "cppcheck-2.8/test/testio.cpp" $, 1149 $, $"void f(){unsigned long long x; scanf(\"%llx\", &x);}" $) ;
1150: $testFormatStrWarn $(@expr1073743055 "cppcheck-2.8/test/testio.cpp" $, 1150 $, $"void f(){float x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n" $) ;
1151: $testFormatStrWarn $(@expr1073743056 "cppcheck-2.8/test/testio.cpp" $, 1151 $, $"void f(){double x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n" $) ;
1152: $testFormatStrWarn $(@expr1073743057 "cppcheck-2.8/test/testio.cpp" $, 1152 $, $"void f(){long double x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n" $) ;
1153: $testFormatStrWarn $(@expr1073743058 "cppcheck-2.8/test/testio.cpp" $, 1153 $, $"void f(){void * x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n" $) ;
1154: $testFormatStrWarnAka $(@expr1073743059 "cppcheck-2.8/test/testio.cpp" $, 1154 $, $"void f(){size_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1155: $testFormatStrWarnAka $(@expr1073743060 "cppcheck-2.8/test/testio.cpp" $, 1155 $, $"void f(){ssize_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1156: $testFormatStrWarnAka $(@expr1073743061 "cppcheck-2.8/test/testio.cpp" $, 1156 $, $"void f(){ptrdiff_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1157: $testFormatStrWarnAka $(@expr1073743062 "cppcheck-2.8/test/testio.cpp" $, 1157 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1158: $testFormatStrWarnAka $(@expr1073743063 "cppcheck-2.8/test/testio.cpp" $, 1158 $, $"void f(){intmax_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1159: $testFormatStrWarnAka $(@expr1073743064 "cppcheck-2.8/test/testio.cpp" $, 1159 $, $"void f(){uintmax_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1160: $testFormatStrWarnAka $(@expr1073743065 "cppcheck-2.8/test/testio.cpp" $, 1160 $, $"void f(){intptr_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1161: $testFormatStrWarnAkaWin32 $(@expr1073743066 "cppcheck-2.8/test/testio.cpp" $, 1161 $, $"void f(){uintptr_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $) ;
1162: $testFormatStrWarnAka $(@expr1073743067 "cppcheck-2.8/test/testio.cpp" $, 1162 $, $"void f(){std::size_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1163: $testFormatStrWarnAka $(@expr1073743068 "cppcheck-2.8/test/testio.cpp" $, 1163 $, $"void f(){std::ssize_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1164: $testFormatStrWarnAka $(@expr1073743069 "cppcheck-2.8/test/testio.cpp" $, 1164 $, $"void f(){std::ptrdiff_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1165: $testFormatStrWarnAka $(@expr1073743070 "cppcheck-2.8/test/testio.cpp" $, 1165 $, $"void f(){std::intmax_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1166: $testFormatStrWarnAka $(@expr1073743071 "cppcheck-2.8/test/testio.cpp" $, 1166 $, $"void f(){std::uintmax_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1167: $testFormatStrWarnAka $(@expr1073743072 "cppcheck-2.8/test/testio.cpp" $, 1167 $, $"void f(){std::intptr_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1168: $testFormatStrWarnAkaWin32 $(@expr1073743073 "cppcheck-2.8/test/testio.cpp" $, 1168 $, $"void f(){std::uintptr_t x; scanf(\"%llx\", &x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $) ;
1169:
1170: $testFormatStrWarn $(@expr1073743074 "cppcheck-2.8/test/testio.cpp" $, 1170 $, $"void f(){bool x; scanf(\"%lld\", &x);}" $, $"[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'bool *'.\n" $) ;
1171: $testFormatStrWarn $(@expr1073743075 "cppcheck-2.8/test/testio.cpp" $, 1171 $, $"void f(){char x; scanf(\"%lld\", &x);}" $, $"[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'char *'.\n" $) ;
1172: $testFormatStrNoWarn $(@expr1073743076 "cppcheck-2.8/test/testio.cpp" $, 1172 $, $"void f(){long long x; scanf(\"%lld\", &x);}" $) ;
1173: $testFormatStrWarn $(@expr1073743077 "cppcheck-2.8/test/testio.cpp" $, 1173 $, $"void f(){unsigned long long x; scanf(\"%lld\", &x);}" $, $"[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned long long *'.\n" $) ;
1174: $testFormatStrWarn $(@expr1073743078 "cppcheck-2.8/test/testio.cpp" $, 1174 $, $"void f(){void * x; scanf(\"%lld\", &x);}" $, $"[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'void * *'.\n" $) ;
1175: $testFormatStrWarnAka $(@expr1073743079 "cppcheck-2.8/test/testio.cpp" $, 1175 $, $"void f(){size_t x; scanf(\"%lld\", &x);}" $, $"[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1176: $testFormatStrWarnAka $(@expr1073743080 "cppcheck-2.8/test/testio.cpp" $, 1176 $, $"void f(){intmax_t x; scanf(\"%lld\", &x);}" $, $"[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1177: $testFormatStrWarnAka $(@expr1073743081 "cppcheck-2.8/test/testio.cpp" $, 1177 $, $"void f(){std::ptrdiff_t x; scanf(\"%lld\", &x);}" $, $"[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1178: $testFormatStrWarnAka $(@expr1073743082 "cppcheck-2.8/test/testio.cpp" $, 1178 $, $"void f(){std::intmax_t x; scanf(\"%lld\", &x);}" $, $"[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1179: $testFormatStrWarnAkaWin32 $(@expr1073743083 "cppcheck-2.8/test/testio.cpp" $, 1179 $, $"void f(){std::intptr_t x; scanf(\"%lld\", &x);}" $, $"[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $) ;
1180:
1181: $testFormatStrWarn $(@expr1073743084 "cppcheck-2.8/test/testio.cpp" $, 1181 $, $"void f(){bool x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'bool *'.\n" $) ;
1182: $testFormatStrWarn $(@expr1073743085 "cppcheck-2.8/test/testio.cpp" $, 1182 $, $"void f(){char x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'char *'.\n" $) ;
1183: $testFormatStrWarn $(@expr1073743086 "cppcheck-2.8/test/testio.cpp" $, 1183 $, $"void f(){signed char x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed char *'.\n" $) ;
1184: $testFormatStrWarn $(@expr1073743087 "cppcheck-2.8/test/testio.cpp" $, 1184 $, $"void f(){unsigned char x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned char *'.\n" $) ;
1185: $testFormatStrWarn $(@expr1073743088 "cppcheck-2.8/test/testio.cpp" $, 1185 $, $"void f(){signed short x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed short *'.\n" $) ;
1186: $testFormatStrNoWarn $(@expr1073743089 "cppcheck-2.8/test/testio.cpp" $, 1186 $, $"void f(){unsigned short x; scanf(\"%hu\", &x);}" $) ;
1187: $testFormatStrWarn $(@expr1073743090 "cppcheck-2.8/test/testio.cpp" $, 1187 $, $"void f(){signed int x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed int *'.\n" $) ;
1188: $testFormatStrWarn $(@expr1073743091 "cppcheck-2.8/test/testio.cpp" $, 1188 $, $"void f(){unsigned int x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned int *'.\n" $) ;
1189: $testFormatStrWarn $(@expr1073743092 "cppcheck-2.8/test/testio.cpp" $, 1189 $, $"void f(){signed long x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long *'.\n" $) ;
1190: $testFormatStrWarn $(@expr1073743093 "cppcheck-2.8/test/testio.cpp" $, 1190 $, $"void f(){unsigned long x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long *'.\n" $) ;
1191: $testFormatStrWarn $(@expr1073743094 "cppcheck-2.8/test/testio.cpp" $, 1191 $, $"void f(){signed long long x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long long *'.\n" $) ;
1192: $testFormatStrWarn $(@expr1073743095 "cppcheck-2.8/test/testio.cpp" $, 1192 $, $"void f(){unsigned long long x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long long *'.\n" $) ;
1193: $testFormatStrWarn $(@expr1073743096 "cppcheck-2.8/test/testio.cpp" $, 1193 $, $"void f(){float x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'float *'.\n" $) ;
1194: $testFormatStrWarn $(@expr1073743097 "cppcheck-2.8/test/testio.cpp" $, 1194 $, $"void f(){double x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'double *'.\n" $) ;
1195: $testFormatStrWarn $(@expr1073743098 "cppcheck-2.8/test/testio.cpp" $, 1195 $, $"void f(){long double x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'long double *'.\n" $) ;
1196: $testFormatStrWarn $(@expr1073743099 "cppcheck-2.8/test/testio.cpp" $, 1196 $, $"void f(){void * x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'void * *'.\n" $) ;
1197: $testFormatStrWarnAka $(@expr1073743100 "cppcheck-2.8/test/testio.cpp" $, 1197 $, $"void f(){size_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1198: $testFormatStrWarnAka $(@expr1073743101 "cppcheck-2.8/test/testio.cpp" $, 1198 $, $"void f(){ssize_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1199: $testFormatStrWarnAka $(@expr1073743102 "cppcheck-2.8/test/testio.cpp" $, 1199 $, $"void f(){ptrdiff_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1200: $testFormatStrWarnAka $(@expr1073743103 "cppcheck-2.8/test/testio.cpp" $, 1200 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1201: $testFormatStrWarnAka $(@expr1073743104 "cppcheck-2.8/test/testio.cpp" $, 1201 $, $"void f(){intmax_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1202: $testFormatStrWarnAka $(@expr1073743105 "cppcheck-2.8/test/testio.cpp" $, 1202 $, $"void f(){uintmax_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1203: $testFormatStrWarnAka $(@expr1073743106 "cppcheck-2.8/test/testio.cpp" $, 1203 $, $"void f(){std::size_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1204: $testFormatStrWarnAka $(@expr1073743107 "cppcheck-2.8/test/testio.cpp" $, 1204 $, $"void f(){std::ssize_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1205: $testFormatStrWarnAka $(@expr1073743108 "cppcheck-2.8/test/testio.cpp" $, 1205 $, $"void f(){std::ptrdiff_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1206: $testFormatStrWarnAka $(@expr1073743109 "cppcheck-2.8/test/testio.cpp" $, 1206 $, $"void f(){std::intptr_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1207: $testFormatStrWarnAka $(@expr1073743110 "cppcheck-2.8/test/testio.cpp" $, 1207 $, $"void f(){std::uintptr_t x; scanf(\"%hu\", &x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1208:
1209: $testFormatStrWarn $(@expr1073743111 "cppcheck-2.8/test/testio.cpp" $, 1209 $, $"void f(){bool x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'bool *'.\n" $) ;
1210: $testFormatStrWarn $(@expr1073743112 "cppcheck-2.8/test/testio.cpp" $, 1210 $, $"void f(){char x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'char *'.\n" $) ;
1211: $testFormatStrWarn $(@expr1073743113 "cppcheck-2.8/test/testio.cpp" $, 1211 $, $"void f(){signed char x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed char *'.\n" $) ;
1212: $testFormatStrWarn $(@expr1073743114 "cppcheck-2.8/test/testio.cpp" $, 1212 $, $"void f(){unsigned char x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned char *'.\n" $) ;
1213: $testFormatStrWarn $(@expr1073743115 "cppcheck-2.8/test/testio.cpp" $, 1213 $, $"void f(){signed short x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed short *'.\n" $) ;
1214: $testFormatStrNoWarn $(@expr1073743116 "cppcheck-2.8/test/testio.cpp" $, 1214 $, $"void f(){unsigned short x; scanf(\"%hx\", &x);}" $) ;
1215: $testFormatStrWarn $(@expr1073743117 "cppcheck-2.8/test/testio.cpp" $, 1215 $, $"void f(){signed int x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed int *'.\n" $) ;
1216: $testFormatStrWarn $(@expr1073743118 "cppcheck-2.8/test/testio.cpp" $, 1216 $, $"void f(){unsigned int x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned int *'.\n" $) ;
1217: $testFormatStrWarn $(@expr1073743119 "cppcheck-2.8/test/testio.cpp" $, 1217 $, $"void f(){signed long x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long *'.\n" $) ;
1218: $testFormatStrWarn $(@expr1073743120 "cppcheck-2.8/test/testio.cpp" $, 1218 $, $"void f(){unsigned long x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long *'.\n" $) ;
1219: $testFormatStrWarn $(@expr1073743121 "cppcheck-2.8/test/testio.cpp" $, 1219 $, $"void f(){signed long long x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long long *'.\n" $) ;
1220: $testFormatStrWarn $(@expr1073743122 "cppcheck-2.8/test/testio.cpp" $, 1220 $, $"void f(){unsigned long long x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long long *'.\n" $) ;
1221: $testFormatStrWarn $(@expr1073743123 "cppcheck-2.8/test/testio.cpp" $, 1221 $, $"void f(){float x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'float *'.\n" $) ;
1222: $testFormatStrWarn $(@expr1073743124 "cppcheck-2.8/test/testio.cpp" $, 1222 $, $"void f(){double x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'double *'.\n" $) ;
1223: $testFormatStrWarn $(@expr1073743125 "cppcheck-2.8/test/testio.cpp" $, 1223 $, $"void f(){long double x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'long double *'.\n" $) ;
1224: $testFormatStrWarn $(@expr1073743126 "cppcheck-2.8/test/testio.cpp" $, 1224 $, $"void f(){void * x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'void * *'.\n" $) ;
1225: $testFormatStrWarnAka $(@expr1073743127 "cppcheck-2.8/test/testio.cpp" $, 1225 $, $"void f(){size_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1226: $testFormatStrWarnAka $(@expr1073743128 "cppcheck-2.8/test/testio.cpp" $, 1226 $, $"void f(){ssize_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1227: $testFormatStrWarnAka $(@expr1073743129 "cppcheck-2.8/test/testio.cpp" $, 1227 $, $"void f(){ptrdiff_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1228: $testFormatStrWarnAka $(@expr1073743130 "cppcheck-2.8/test/testio.cpp" $, 1228 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1229: $testFormatStrWarnAka $(@expr1073743131 "cppcheck-2.8/test/testio.cpp" $, 1229 $, $"void f(){intmax_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1230: $testFormatStrWarnAka $(@expr1073743132 "cppcheck-2.8/test/testio.cpp" $, 1230 $, $"void f(){uintmax_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1231: $testFormatStrWarnAka $(@expr1073743133 "cppcheck-2.8/test/testio.cpp" $, 1231 $, $"void f(){std::size_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1232: $testFormatStrWarnAka $(@expr1073743134 "cppcheck-2.8/test/testio.cpp" $, 1232 $, $"void f(){std::ssize_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1233: $testFormatStrWarnAka $(@expr1073743135 "cppcheck-2.8/test/testio.cpp" $, 1233 $, $"void f(){std::ptrdiff_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1234: $testFormatStrWarnAka $(@expr1073743136 "cppcheck-2.8/test/testio.cpp" $, 1234 $, $"void f(){std::intptr_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1235: $testFormatStrWarnAka $(@expr1073743137 "cppcheck-2.8/test/testio.cpp" $, 1235 $, $"void f(){std::uintptr_t x; scanf(\"%hx\", &x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1236:
1237: $testFormatStrWarn $(@expr1073743138 "cppcheck-2.8/test/testio.cpp" $, 1237 $, $"void f(){bool x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'bool *'.\n" $) ;
1238: $testFormatStrWarn $(@expr1073743139 "cppcheck-2.8/test/testio.cpp" $, 1238 $, $"void f(){char x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'char *'.\n" $) ;
1239: $testFormatStrWarn $(@expr1073743140 "cppcheck-2.8/test/testio.cpp" $, 1239 $, $"void f(){signed char x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'signed char *'.\n" $) ;
1240: $testFormatStrWarn $(@expr1073743141 "cppcheck-2.8/test/testio.cpp" $, 1240 $, $"void f(){unsigned char x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'unsigned char *'.\n" $) ;
1241: $testFormatStrNoWarn $(@expr1073743142 "cppcheck-2.8/test/testio.cpp" $, 1241 $, $"void f(){signed short x; scanf(\"%hd\", &x);}" $) ;
1242: $testFormatStrWarn $(@expr1073743143 "cppcheck-2.8/test/testio.cpp" $, 1242 $, $"void f(){unsigned short x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'unsigned short *'.\n" $) ;
1243: $testFormatStrWarn $(@expr1073743144 "cppcheck-2.8/test/testio.cpp" $, 1243 $, $"void f(){signed int x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'signed int *'.\n" $) ;
1244: $testFormatStrWarn $(@expr1073743145 "cppcheck-2.8/test/testio.cpp" $, 1244 $, $"void f(){unsigned int x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'unsigned int *'.\n" $) ;
1245: $testFormatStrWarn $(@expr1073743146 "cppcheck-2.8/test/testio.cpp" $, 1245 $, $"void f(){signed long x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'signed long *'.\n" $) ;
1246: $testFormatStrWarn $(@expr1073743147 "cppcheck-2.8/test/testio.cpp" $, 1246 $, $"void f(){void * x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'void * *'.\n" $) ;
1247: $testFormatStrWarnAka $(@expr1073743148 "cppcheck-2.8/test/testio.cpp" $, 1247 $, $"void f(){size_t x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1248: $testFormatStrWarnAka $(@expr1073743149 "cppcheck-2.8/test/testio.cpp" $, 1248 $, $"void f(){ssize_t x; scanf(\"%hd\", &x);}" $, $"[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1249:
1250: $testFormatStrWarn $(@expr1073743150 "cppcheck-2.8/test/testio.cpp" $, 1250 $, $"void f(){bool x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'bool *'.\n" $) ;
1251: $testFormatStrWarn $(@expr1073743151 "cppcheck-2.8/test/testio.cpp" $, 1251 $, $"void f(){char x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'char *'.\n" $) ;
1252: $testFormatStrWarn $(@expr1073743152 "cppcheck-2.8/test/testio.cpp" $, 1252 $, $"void f(){signed char x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed char *'.\n" $) ;
1253: $testFormatStrNoWarn $(@expr1073743153 "cppcheck-2.8/test/testio.cpp" $, 1253 $, $"void f(){unsigned char x; scanf(\"%hhu\", &x);}" $) ;
1254: $testFormatStrWarn $(@expr1073743154 "cppcheck-2.8/test/testio.cpp" $, 1254 $, $"void f(){signed short x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed short *'.\n" $) ;
1255: $testFormatStrWarn $(@expr1073743155 "cppcheck-2.8/test/testio.cpp" $, 1255 $, $"void f(){unsigned short x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned short *'.\n" $) ;
1256: $testFormatStrWarn $(@expr1073743156 "cppcheck-2.8/test/testio.cpp" $, 1256 $, $"void f(){signed int x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed int *'.\n" $) ;
1257: $testFormatStrWarn $(@expr1073743157 "cppcheck-2.8/test/testio.cpp" $, 1257 $, $"void f(){unsigned int x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned int *'.\n" $) ;
1258: $testFormatStrWarn $(@expr1073743158 "cppcheck-2.8/test/testio.cpp" $, 1258 $, $"void f(){signed long x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long *'.\n" $) ;
1259: $testFormatStrWarn $(@expr1073743159 "cppcheck-2.8/test/testio.cpp" $, 1259 $, $"void f(){unsigned long x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long *'.\n" $) ;
1260: $testFormatStrWarn $(@expr1073743160 "cppcheck-2.8/test/testio.cpp" $, 1260 $, $"void f(){signed long long x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long long *'.\n" $) ;
1261: $testFormatStrWarn $(@expr1073743161 "cppcheck-2.8/test/testio.cpp" $, 1261 $, $"void f(){unsigned long long x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long long *'.\n" $) ;
1262: $testFormatStrWarn $(@expr1073743162 "cppcheck-2.8/test/testio.cpp" $, 1262 $, $"void f(){float x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'float *'.\n" $) ;
1263: $testFormatStrWarn $(@expr1073743163 "cppcheck-2.8/test/testio.cpp" $, 1263 $, $"void f(){double x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'double *'.\n" $) ;
1264: $testFormatStrWarn $(@expr1073743164 "cppcheck-2.8/test/testio.cpp" $, 1264 $, $"void f(){long double x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'long double *'.\n" $) ;
1265: $testFormatStrWarn $(@expr1073743165 "cppcheck-2.8/test/testio.cpp" $, 1265 $, $"void f(){void * x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'void * *'.\n" $) ;
1266: $testFormatStrWarnAka $(@expr1073743166 "cppcheck-2.8/test/testio.cpp" $, 1266 $, $"void f(){size_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1267: $testFormatStrWarnAka $(@expr1073743167 "cppcheck-2.8/test/testio.cpp" $, 1267 $, $"void f(){ssize_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1268: $testFormatStrWarnAka $(@expr1073743168 "cppcheck-2.8/test/testio.cpp" $, 1268 $, $"void f(){ptrdiff_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1269: $testFormatStrWarnAka $(@expr1073743169 "cppcheck-2.8/test/testio.cpp" $, 1269 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1270: $testFormatStrWarnAka $(@expr1073743170 "cppcheck-2.8/test/testio.cpp" $, 1270 $, $"void f(){intmax_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1271: $testFormatStrWarnAka $(@expr1073743171 "cppcheck-2.8/test/testio.cpp" $, 1271 $, $"void f(){uintmax_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1272: $testFormatStrWarnAka $(@expr1073743172 "cppcheck-2.8/test/testio.cpp" $, 1272 $, $"void f(){std::size_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1273: $testFormatStrWarnAka $(@expr1073743173 "cppcheck-2.8/test/testio.cpp" $, 1273 $, $"void f(){std::ssize_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1274: $testFormatStrWarnAka $(@expr1073743174 "cppcheck-2.8/test/testio.cpp" $, 1274 $, $"void f(){std::ptrdiff_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1275: $testFormatStrWarnAka $(@expr1073743175 "cppcheck-2.8/test/testio.cpp" $, 1275 $, $"void f(){std::intptr_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1276: $testFormatStrWarnAka $(@expr1073743176 "cppcheck-2.8/test/testio.cpp" $, 1276 $, $"void f(){std::uintptr_t x; scanf(\"%hhu\", &x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1277:
1278: $testFormatStrWarn $(@expr1073743177 "cppcheck-2.8/test/testio.cpp" $, 1278 $, $"void f(){bool x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'bool *'.\n" $) ;
1279: $testFormatStrWarn $(@expr1073743178 "cppcheck-2.8/test/testio.cpp" $, 1279 $, $"void f(){char x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'char *'.\n" $) ;
1280: $testFormatStrWarn $(@expr1073743179 "cppcheck-2.8/test/testio.cpp" $, 1280 $, $"void f(){signed char x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed char *'.\n" $) ;
1281: $testFormatStrNoWarn $(@expr1073743180 "cppcheck-2.8/test/testio.cpp" $, 1281 $, $"void f(){unsigned char x; scanf(\"%hhx\", &x);}" $) ;
1282: $testFormatStrWarn $(@expr1073743181 "cppcheck-2.8/test/testio.cpp" $, 1282 $, $"void f(){signed short x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed short *'.\n" $) ;
1283: $testFormatStrWarn $(@expr1073743182 "cppcheck-2.8/test/testio.cpp" $, 1283 $, $"void f(){unsigned short x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned short *'.\n" $) ;
1284: $testFormatStrWarn $(@expr1073743183 "cppcheck-2.8/test/testio.cpp" $, 1284 $, $"void f(){signed int x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed int *'.\n" $) ;
1285: $testFormatStrWarn $(@expr1073743184 "cppcheck-2.8/test/testio.cpp" $, 1285 $, $"void f(){unsigned int x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned int *'.\n" $) ;
1286: $testFormatStrWarn $(@expr1073743185 "cppcheck-2.8/test/testio.cpp" $, 1286 $, $"void f(){signed long x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long *'.\n" $) ;
1287: $testFormatStrWarn $(@expr1073743186 "cppcheck-2.8/test/testio.cpp" $, 1287 $, $"void f(){unsigned long x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long *'.\n" $) ;
1288: $testFormatStrWarn $(@expr1073743187 "cppcheck-2.8/test/testio.cpp" $, 1288 $, $"void f(){signed long long x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long long *'.\n" $) ;
1289: $testFormatStrWarn $(@expr1073743188 "cppcheck-2.8/test/testio.cpp" $, 1289 $, $"void f(){unsigned long long x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long long *'.\n" $) ;
1290: $testFormatStrWarn $(@expr1073743189 "cppcheck-2.8/test/testio.cpp" $, 1290 $, $"void f(){float x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'float *'.\n" $) ;
1291: $testFormatStrWarn $(@expr1073743190 "cppcheck-2.8/test/testio.cpp" $, 1291 $, $"void f(){double x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'double *'.\n" $) ;
1292: $testFormatStrWarn $(@expr1073743191 "cppcheck-2.8/test/testio.cpp" $, 1292 $, $"void f(){long double x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'long double *'.\n" $) ;
1293: $testFormatStrWarn $(@expr1073743192 "cppcheck-2.8/test/testio.cpp" $, 1293 $, $"void f(){void * x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'void * *'.\n" $) ;
1294: $testFormatStrWarnAka $(@expr1073743193 "cppcheck-2.8/test/testio.cpp" $, 1294 $, $"void f(){size_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1295: $testFormatStrWarnAka $(@expr1073743194 "cppcheck-2.8/test/testio.cpp" $, 1295 $, $"void f(){ssize_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1296: $testFormatStrWarnAka $(@expr1073743195 "cppcheck-2.8/test/testio.cpp" $, 1296 $, $"void f(){ptrdiff_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1297: $testFormatStrWarnAka $(@expr1073743196 "cppcheck-2.8/test/testio.cpp" $, 1297 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1298: $testFormatStrWarnAka $(@expr1073743197 "cppcheck-2.8/test/testio.cpp" $, 1298 $, $"void f(){intmax_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1299: $testFormatStrWarnAka $(@expr1073743198 "cppcheck-2.8/test/testio.cpp" $, 1299 $, $"void f(){uintmax_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1300: $testFormatStrWarnAka $(@expr1073743199 "cppcheck-2.8/test/testio.cpp" $, 1300 $, $"void f(){std::size_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1301: $testFormatStrWarnAka $(@expr1073743200 "cppcheck-2.8/test/testio.cpp" $, 1301 $, $"void f(){std::ssize_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1302: $testFormatStrWarnAka $(@expr1073743201 "cppcheck-2.8/test/testio.cpp" $, 1302 $, $"void f(){std::ptrdiff_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1303: $testFormatStrWarnAka $(@expr1073743202 "cppcheck-2.8/test/testio.cpp" $, 1303 $, $"void f(){std::intptr_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1304: $testFormatStrWarnAka $(@expr1073743203 "cppcheck-2.8/test/testio.cpp" $, 1304 $, $"void f(){std::uintptr_t x; scanf(\"%hhx\", &x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1305:
1306: $testFormatStrWarn $(@expr1073743204 "cppcheck-2.8/test/testio.cpp" $, 1306 $, $"void f(){bool x; scanf(\"%hhd\", &x);}" $, $"[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'bool *'.\n" $) ;
1307: $testFormatStrNoWarn $(@expr1073743205 "cppcheck-2.8/test/testio.cpp" $, 1307 $, $"void f(){char x; scanf(\"%hhd\", &x);}" $) ;
1308: $testFormatStrNoWarn $(@expr1073743206 "cppcheck-2.8/test/testio.cpp" $, 1308 $, $"void f(){signed char x; scanf(\"%hhd\", &x);}" $) ;
1309: $testFormatStrWarn $(@expr1073743207 "cppcheck-2.8/test/testio.cpp" $, 1309 $, $"void f(){unsigned char x; scanf(\"%hhd\", &x);}" $, $"[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'unsigned char *'.\n" $) ;
1310: $testFormatStrWarn $(@expr1073743208 "cppcheck-2.8/test/testio.cpp" $, 1310 $, $"void f(){signed short x; scanf(\"%hhd\", &x);}" $, $"[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'signed short *'.\n" $) ;
1311: $testFormatStrWarn $(@expr1073743209 "cppcheck-2.8/test/testio.cpp" $, 1311 $, $"void f(){void * x; scanf(\"%hhd\", &x);}" $, $"[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'void * *'.\n" $) ;
1312: $testFormatStrWarnAka $(@expr1073743210 "cppcheck-2.8/test/testio.cpp" $, 1312 $, $"void f(){size_t x; scanf(\"%hhd\", &x);}" $, $"[test.cpp:1]: (portability) %hhd in format string (no. 1) requires 'char *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %hhd in format string (no. 1) requires 'char *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1313:
1314: $testFormatStrWarn $(@expr1073743211 "cppcheck-2.8/test/testio.cpp" $, 1314 $, $"void f(){bool x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n" $) ;
1315: $testFormatStrWarn $(@expr1073743212 "cppcheck-2.8/test/testio.cpp" $, 1315 $, $"void f(){char x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n" $) ;
1316: $testFormatStrWarn $(@expr1073743213 "cppcheck-2.8/test/testio.cpp" $, 1316 $, $"void f(){signed char x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n" $) ;
1317: $testFormatStrWarn $(@expr1073743214 "cppcheck-2.8/test/testio.cpp" $, 1317 $, $"void f(){unsigned char x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n" $) ;
1318: $testFormatStrWarn $(@expr1073743215 "cppcheck-2.8/test/testio.cpp" $, 1318 $, $"void f(){signed short x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n" $) ;
1319: $testFormatStrWarn $(@expr1073743216 "cppcheck-2.8/test/testio.cpp" $, 1319 $, $"void f(){unsigned short x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n" $) ;
1320: $testFormatStrWarn $(@expr1073743217 "cppcheck-2.8/test/testio.cpp" $, 1320 $, $"void f(){signed int x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n" $) ;
1321: $testFormatStrWarn $(@expr1073743218 "cppcheck-2.8/test/testio.cpp" $, 1321 $, $"void f(){unsigned int x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n" $) ;
1322: $testFormatStrWarn $(@expr1073743219 "cppcheck-2.8/test/testio.cpp" $, 1322 $, $"void f(){signed long x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n" $) ;
1323: $testFormatStrWarn $(@expr1073743220 "cppcheck-2.8/test/testio.cpp" $, 1323 $, $"void f(){unsigned long x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n" $) ;
1324: $testFormatStrWarn $(@expr1073743221 "cppcheck-2.8/test/testio.cpp" $, 1324 $, $"void f(){signed long long x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n" $) ;
1325: $testFormatStrNoWarn $(@expr1073743222 "cppcheck-2.8/test/testio.cpp" $, 1325 $, $"void f(){unsigned long long x; scanf(\"%Lu\", &x);}" $) ;
1326: $testFormatStrWarn $(@expr1073743223 "cppcheck-2.8/test/testio.cpp" $, 1326 $, $"void f(){float x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n" $) ;
1327: $testFormatStrWarn $(@expr1073743224 "cppcheck-2.8/test/testio.cpp" $, 1327 $, $"void f(){double x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n" $) ;
1328: $testFormatStrWarn $(@expr1073743225 "cppcheck-2.8/test/testio.cpp" $, 1328 $, $"void f(){long double x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n" $) ;
1329: $testFormatStrWarn $(@expr1073743226 "cppcheck-2.8/test/testio.cpp" $, 1329 $, $"void f(){void * x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n" $) ;
1330: $testFormatStrWarnAka $(@expr1073743227 "cppcheck-2.8/test/testio.cpp" $, 1330 $, $"void f(){size_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1331: $testFormatStrWarnAka $(@expr1073743228 "cppcheck-2.8/test/testio.cpp" $, 1331 $, $"void f(){ssize_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1332: $testFormatStrWarnAka $(@expr1073743229 "cppcheck-2.8/test/testio.cpp" $, 1332 $, $"void f(){ptrdiff_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1333: $testFormatStrWarnAkaWin32 $(@expr1073743230 "cppcheck-2.8/test/testio.cpp" $, 1333 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $) ;
1334: $testFormatStrWarnAka $(@expr1073743231 "cppcheck-2.8/test/testio.cpp" $, 1334 $, $"void f(){intmax_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1335: $testFormatStrWarnAka $(@expr1073743232 "cppcheck-2.8/test/testio.cpp" $, 1335 $, $"void f(){uintmax_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1336: $testFormatStrWarnAka $(@expr1073743233 "cppcheck-2.8/test/testio.cpp" $, 1336 $, $"void f(){intptr_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1337: $testFormatStrWarnAkaWin32 $(@expr1073743234 "cppcheck-2.8/test/testio.cpp" $, 1337 $, $"void f(){uintptr_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $) ;
1338: $testFormatStrWarnAka $(@expr1073743235 "cppcheck-2.8/test/testio.cpp" $, 1338 $, $"void f(){std::size_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1339: $testFormatStrWarnAka $(@expr1073743236 "cppcheck-2.8/test/testio.cpp" $, 1339 $, $"void f(){std::ssize_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1340: $testFormatStrWarnAka $(@expr1073743237 "cppcheck-2.8/test/testio.cpp" $, 1340 $, $"void f(){std::ptrdiff_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1341: $testFormatStrWarnAka $(@expr1073743238 "cppcheck-2.8/test/testio.cpp" $, 1341 $, $"void f(){std::intmax_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1342: $testFormatStrWarnAka $(@expr1073743239 "cppcheck-2.8/test/testio.cpp" $, 1342 $, $"void f(){std::uintmax_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1343: $testFormatStrWarnAka $(@expr1073743240 "cppcheck-2.8/test/testio.cpp" $, 1343 $, $"void f(){std::intptr_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1344: $testFormatStrWarnAkaWin32 $(@expr1073743241 "cppcheck-2.8/test/testio.cpp" $, 1344 $, $"void f(){std::uintptr_t x; scanf(\"%Lu\", &x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $) ;
1345:
1346: $testFormatStrWarn $(@expr1073743242 "cppcheck-2.8/test/testio.cpp" $, 1346 $, $"void f(){bool x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n" $) ;
1347: $testFormatStrWarn $(@expr1073743243 "cppcheck-2.8/test/testio.cpp" $, 1347 $, $"void f(){char x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n" $) ;
1348: $testFormatStrWarn $(@expr1073743244 "cppcheck-2.8/test/testio.cpp" $, 1348 $, $"void f(){signed char x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n" $) ;
1349: $testFormatStrWarn $(@expr1073743245 "cppcheck-2.8/test/testio.cpp" $, 1349 $, $"void f(){unsigned char x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n" $) ;
1350: $testFormatStrWarn $(@expr1073743246 "cppcheck-2.8/test/testio.cpp" $, 1350 $, $"void f(){signed short x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n" $) ;
1351: $testFormatStrWarn $(@expr1073743247 "cppcheck-2.8/test/testio.cpp" $, 1351 $, $"void f(){unsigned short x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n" $) ;
1352: $testFormatStrWarn $(@expr1073743248 "cppcheck-2.8/test/testio.cpp" $, 1352 $, $"void f(){signed int x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n" $) ;
1353: $testFormatStrWarn $(@expr1073743249 "cppcheck-2.8/test/testio.cpp" $, 1353 $, $"void f(){unsigned int x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n" $) ;
1354: $testFormatStrWarn $(@expr1073743250 "cppcheck-2.8/test/testio.cpp" $, 1354 $, $"void f(){signed long x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n" $) ;
1355: $testFormatStrWarn $(@expr1073743251 "cppcheck-2.8/test/testio.cpp" $, 1355 $, $"void f(){unsigned long x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n" $) ;
1356: $testFormatStrWarn $(@expr1073743252 "cppcheck-2.8/test/testio.cpp" $, 1356 $, $"void f(){signed long long x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n" $) ;
1357: $testFormatStrNoWarn $(@expr1073743253 "cppcheck-2.8/test/testio.cpp" $, 1357 $, $"void f(){unsigned long long x; scanf(\"%Lx\", &x);}" $) ;
1358: $testFormatStrWarn $(@expr1073743254 "cppcheck-2.8/test/testio.cpp" $, 1358 $, $"void f(){float x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n" $) ;
1359: $testFormatStrWarn $(@expr1073743255 "cppcheck-2.8/test/testio.cpp" $, 1359 $, $"void f(){double x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n" $) ;
1360: $testFormatStrWarn $(@expr1073743256 "cppcheck-2.8/test/testio.cpp" $, 1360 $, $"void f(){long double x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n" $) ;
1361: $testFormatStrWarn $(@expr1073743257 "cppcheck-2.8/test/testio.cpp" $, 1361 $, $"void f(){void * x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n" $) ;
1362: $testFormatStrWarnAka $(@expr1073743258 "cppcheck-2.8/test/testio.cpp" $, 1362 $, $"void f(){size_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1363: $testFormatStrWarnAka $(@expr1073743259 "cppcheck-2.8/test/testio.cpp" $, 1363 $, $"void f(){ssize_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1364: $testFormatStrWarnAka $(@expr1073743260 "cppcheck-2.8/test/testio.cpp" $, 1364 $, $"void f(){ptrdiff_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1365: $testFormatStrWarnAkaWin32 $(@expr1073743261 "cppcheck-2.8/test/testio.cpp" $, 1365 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $) ;
1366: $testFormatStrWarnAka $(@expr1073743262 "cppcheck-2.8/test/testio.cpp" $, 1366 $, $"void f(){intmax_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1367: $testFormatStrWarnAka $(@expr1073743263 "cppcheck-2.8/test/testio.cpp" $, 1367 $, $"void f(){uintmax_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1368: $testFormatStrWarnAka $(@expr1073743264 "cppcheck-2.8/test/testio.cpp" $, 1368 $, $"void f(){intptr_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1369: $testFormatStrWarnAkaWin32 $(@expr1073743265 "cppcheck-2.8/test/testio.cpp" $, 1369 $, $"void f(){uintptr_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $) ;
1370: $testFormatStrWarnAka $(@expr1073743266 "cppcheck-2.8/test/testio.cpp" $, 1370 $, $"void f(){std::size_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1371: $testFormatStrWarnAka $(@expr1073743267 "cppcheck-2.8/test/testio.cpp" $, 1371 $, $"void f(){std::ssize_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1372: $testFormatStrWarnAka $(@expr1073743268 "cppcheck-2.8/test/testio.cpp" $, 1372 $, $"void f(){std::ptrdiff_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1373: $testFormatStrWarnAka $(@expr1073743269 "cppcheck-2.8/test/testio.cpp" $, 1373 $, $"void f(){std::intmax_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1374: $testFormatStrWarnAka $(@expr1073743270 "cppcheck-2.8/test/testio.cpp" $, 1374 $, $"void f(){std::uintmax_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1375: $testFormatStrWarnAka $(@expr1073743271 "cppcheck-2.8/test/testio.cpp" $, 1375 $, $"void f(){std::intptr_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1376: $testFormatStrWarnAkaWin32 $(@expr1073743272 "cppcheck-2.8/test/testio.cpp" $, 1376 $, $"void f(){std::uintptr_t x; scanf(\"%Lx\", &x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $) ;
1377:
1378: $testFormatStrWarn $(@expr1073743273 "cppcheck-2.8/test/testio.cpp" $, 1378 $, $"void f(){bool x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'bool *'.\n" $) ;
1379: $testFormatStrWarn $(@expr1073743274 "cppcheck-2.8/test/testio.cpp" $, 1379 $, $"void f(){char x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'char *'.\n" $) ;
1380: $testFormatStrWarn $(@expr1073743275 "cppcheck-2.8/test/testio.cpp" $, 1380 $, $"void f(){signed char x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed char *'.\n" $) ;
1381: $testFormatStrWarn $(@expr1073743276 "cppcheck-2.8/test/testio.cpp" $, 1381 $, $"void f(){unsigned char x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned char *'.\n" $) ;
1382: $testFormatStrWarn $(@expr1073743277 "cppcheck-2.8/test/testio.cpp" $, 1382 $, $"void f(){signed short x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed short *'.\n" $) ;
1383: $testFormatStrWarn $(@expr1073743278 "cppcheck-2.8/test/testio.cpp" $, 1383 $, $"void f(){unsigned short x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned short *'.\n" $) ;
1384: $testFormatStrWarn $(@expr1073743279 "cppcheck-2.8/test/testio.cpp" $, 1384 $, $"void f(){signed int x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed int *'.\n" $) ;
1385: $testFormatStrWarn $(@expr1073743280 "cppcheck-2.8/test/testio.cpp" $, 1385 $, $"void f(){unsigned int x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned int *'.\n" $) ;
1386: $testFormatStrWarn $(@expr1073743281 "cppcheck-2.8/test/testio.cpp" $, 1386 $, $"void f(){signed long x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed long *'.\n" $) ;
1387: $testFormatStrWarn $(@expr1073743282 "cppcheck-2.8/test/testio.cpp" $, 1387 $, $"void f(){unsigned long x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned long *'.\n" $) ;
1388: $testFormatStrNoWarn $(@expr1073743283 "cppcheck-2.8/test/testio.cpp" $, 1388 $, $"void f(){signed long long x; scanf(\"%Ld\", &x);}" $) ;
1389: $testFormatStrWarn $(@expr1073743284 "cppcheck-2.8/test/testio.cpp" $, 1389 $, $"void f(){unsigned long long x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned long long *'.\n" $) ;
1390: $testFormatStrWarn $(@expr1073743285 "cppcheck-2.8/test/testio.cpp" $, 1390 $, $"void f(){float x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'float *'.\n" $) ;
1391: $testFormatStrWarn $(@expr1073743286 "cppcheck-2.8/test/testio.cpp" $, 1391 $, $"void f(){double x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'double *'.\n" $) ;
1392: $testFormatStrWarn $(@expr1073743287 "cppcheck-2.8/test/testio.cpp" $, 1392 $, $"void f(){long double x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'long double *'.\n" $) ;
1393: $testFormatStrWarn $(@expr1073743288 "cppcheck-2.8/test/testio.cpp" $, 1393 $, $"void f(){void * x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'void * *'.\n" $) ;
1394: $testFormatStrWarnAka $(@expr1073743289 "cppcheck-2.8/test/testio.cpp" $, 1394 $, $"void f(){size_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1395: $testFormatStrWarnAkaWin32 $(@expr1073743290 "cppcheck-2.8/test/testio.cpp" $, 1395 $, $"void f(){ssize_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $) ;
1396: $testFormatStrWarnAkaWin32 $(@expr1073743291 "cppcheck-2.8/test/testio.cpp" $, 1396 $, $"void f(){ptrdiff_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $) ;
1397: $testFormatStrWarnAka $(@expr1073743292 "cppcheck-2.8/test/testio.cpp" $, 1397 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1398: $testFormatStrWarnAkaWin32 $(@expr1073743293 "cppcheck-2.8/test/testio.cpp" $, 1398 $, $"void f(){intmax_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $) ;
1399: $testFormatStrWarnAka $(@expr1073743294 "cppcheck-2.8/test/testio.cpp" $, 1399 $, $"void f(){uintmax_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1400: $testFormatStrWarnAka $(@expr1073743295 "cppcheck-2.8/test/testio.cpp" $, 1400 $, $"void f(){std::size_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1401: $testFormatStrWarnAkaWin32 $(@expr1073743296 "cppcheck-2.8/test/testio.cpp" $, 1401 $, $"void f(){std::ssize_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $) ;
1402: $testFormatStrWarnAkaWin32 $(@expr1073743297 "cppcheck-2.8/test/testio.cpp" $, 1402 $, $"void f(){std::ptrdiff_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $) ;
1403: $testFormatStrWarnAkaWin32 $(@expr1073743298 "cppcheck-2.8/test/testio.cpp" $, 1403 $, $"void f(){std::intptr_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $) ;
1404: $testFormatStrWarnAka $(@expr1073743299 "cppcheck-2.8/test/testio.cpp" $, 1404 $, $"void f(){std::uintptr_t x; scanf(\"%Ld\", &x);}" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1405:
1406: $check_ $(@expr1073743300 "cppcheck-2.8/test/testio.cpp" $, 1406 $, "void foo() {\n    scanf(\"%Ld\", \"s3\");\n    scanf(\"%Ld\", L\"s5W\");\n}" , true $)
1407:
1408:
1409: ;
1410: $if $(@expr1073743301 $!@expr1073743302 $assertEquals $(@expr1073743303 "cppcheck-2.8/test/testio.cpp" $, 1410 $, "[test.cpp:2]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
1411: ; }
1412:
1413: $check_ $(@expr1073743306 "cppcheck-2.8/test/testio.cpp" $, 1413 $, "void foo(int i) {\n    scanf(\"%Ld\", i);\n}" , true $)
1414:
1415: ;
1416: $if $(@expr1073743307 $!@expr1073743308 $assertEquals $(@expr1073743309 "cppcheck-2.8/test/testio.cpp" $, 1416 $, "[test.cpp:2]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed int'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
1417:
1418: $testFormatStrWarn $(@expr1073743312 "cppcheck-2.8/test/testio.cpp" $, 1418 $, $"void f(){bool x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'bool *'.\n" $) ;
1419: $testFormatStrWarn $(@expr1073743313 "cppcheck-2.8/test/testio.cpp" $, 1419 $, $"void f(){char x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'char *'.\n" $) ;
1420: $testFormatStrWarn $(@expr1073743314 "cppcheck-2.8/test/testio.cpp" $, 1420 $, $"void f(){signed char x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed char *'.\n" $) ;
1421: $testFormatStrWarn $(@expr1073743315 "cppcheck-2.8/test/testio.cpp" $, 1421 $, $"void f(){unsigned char x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned char *'.\n" $) ;
1422: $testFormatStrWarn $(@expr1073743316 "cppcheck-2.8/test/testio.cpp" $, 1422 $, $"void f(){signed short x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed short *'.\n" $) ;
1423: $testFormatStrWarn $(@expr1073743317 "cppcheck-2.8/test/testio.cpp" $, 1423 $, $"void f(){unsigned short x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned short *'.\n" $) ;
1424: $testFormatStrWarn $(@expr1073743318 "cppcheck-2.8/test/testio.cpp" $, 1424 $, $"void f(){signed int x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed int *'.\n" $) ;
1425: $testFormatStrWarn $(@expr1073743319 "cppcheck-2.8/test/testio.cpp" $, 1425 $, $"void f(){unsigned int x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned int *'.\n" $) ;
1426: $testFormatStrWarn $(@expr1073743320 "cppcheck-2.8/test/testio.cpp" $, 1426 $, $"void f(){signed long x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long *'.\n" $) ;
1427: $testFormatStrWarn $(@expr1073743321 "cppcheck-2.8/test/testio.cpp" $, 1427 $, $"void f(){unsigned long x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long *'.\n" $) ;
1428: $testFormatStrWarn $(@expr1073743322 "cppcheck-2.8/test/testio.cpp" $, 1428 $, $"void f(){signed long long x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long long *'.\n" $) ;
1429: $testFormatStrWarn $(@expr1073743323 "cppcheck-2.8/test/testio.cpp" $, 1429 $, $"void f(){unsigned long long x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long long *'.\n" $) ;
1430: $testFormatStrWarn $(@expr1073743324 "cppcheck-2.8/test/testio.cpp" $, 1430 $, $"void f(){float x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'float *'.\n" $) ;
1431: $testFormatStrWarn $(@expr1073743325 "cppcheck-2.8/test/testio.cpp" $, 1431 $, $"void f(){double x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'double *'.\n" $) ;
1432: $testFormatStrWarn $(@expr1073743326 "cppcheck-2.8/test/testio.cpp" $, 1432 $, $"void f(){long double x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'long double *'.\n" $) ;
1433: $testFormatStrWarn $(@expr1073743327 "cppcheck-2.8/test/testio.cpp" $, 1433 $, $"void f(){void * x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'void * *'.\n" $) ;
1434: $testFormatStrWarnAka $(@expr1073743328 "cppcheck-2.8/test/testio.cpp" $, 1434 $, $"void f(){size_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1435: $testFormatStrWarnAka $(@expr1073743329 "cppcheck-2.8/test/testio.cpp" $, 1435 $, $"void f(){ssize_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1436: $testFormatStrWarnAka $(@expr1073743330 "cppcheck-2.8/test/testio.cpp" $, 1436 $, $"void f(){ptrdiff_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1437: $testFormatStrWarnAka $(@expr1073743331 "cppcheck-2.8/test/testio.cpp" $, 1437 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1438: $testFormatStrWarnAka $(@expr1073743332 "cppcheck-2.8/test/testio.cpp" $, 1438 $, $"void f(){intmax_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1439: $testFormatStrNoWarn $(@expr1073743333 "cppcheck-2.8/test/testio.cpp" $, 1439 $, $"void f(){uintmax_t x; scanf(\"%ju\", &x);}" $) ;
1440: $testFormatStrWarnAka $(@expr1073743334 "cppcheck-2.8/test/testio.cpp" $, 1440 $, $"void f(){std::size_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1441: $testFormatStrWarnAka $(@expr1073743335 "cppcheck-2.8/test/testio.cpp" $, 1441 $, $"void f(){std::ssize_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1442: $testFormatStrWarnAka $(@expr1073743336 "cppcheck-2.8/test/testio.cpp" $, 1442 $, $"void f(){std::ptrdiff_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1443: $testFormatStrWarnAka $(@expr1073743337 "cppcheck-2.8/test/testio.cpp" $, 1443 $, $"void f(){std::intmax_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1444: $testFormatStrNoWarn $(@expr1073743338 "cppcheck-2.8/test/testio.cpp" $, 1444 $, $"void f(){std::uintmax_t x; scanf(\"%ju\", &x);}" $) ;
1445: $testFormatStrWarnAka $(@expr1073743339 "cppcheck-2.8/test/testio.cpp" $, 1445 $, $"void f(){std::intptr_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1446: $testFormatStrWarnAka $(@expr1073743340 "cppcheck-2.8/test/testio.cpp" $, 1446 $, $"void f(){std::uintptr_t x; scanf(\"%ju\", &x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1447:
1448: $testFormatStrWarn $(@expr1073743341 "cppcheck-2.8/test/testio.cpp" $, 1448 $, $"void f(){bool x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'bool *'.\n" $) ;
1449: $testFormatStrWarn $(@expr1073743342 "cppcheck-2.8/test/testio.cpp" $, 1449 $, $"void f(){char x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'char *'.\n" $) ;
1450: $testFormatStrWarn $(@expr1073743343 "cppcheck-2.8/test/testio.cpp" $, 1450 $, $"void f(){signed char x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed char *'.\n" $) ;
1451: $testFormatStrWarn $(@expr1073743344 "cppcheck-2.8/test/testio.cpp" $, 1451 $, $"void f(){unsigned char x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned char *'.\n" $) ;
1452: $testFormatStrWarn $(@expr1073743345 "cppcheck-2.8/test/testio.cpp" $, 1452 $, $"void f(){signed short x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed short *'.\n" $) ;
1453: $testFormatStrWarn $(@expr1073743346 "cppcheck-2.8/test/testio.cpp" $, 1453 $, $"void f(){unsigned short x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned short *'.\n" $) ;
1454: $testFormatStrWarn $(@expr1073743347 "cppcheck-2.8/test/testio.cpp" $, 1454 $, $"void f(){signed int x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed int *'.\n" $) ;
1455: $testFormatStrWarn $(@expr1073743348 "cppcheck-2.8/test/testio.cpp" $, 1455 $, $"void f(){unsigned int x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned int *'.\n" $) ;
1456: $testFormatStrWarn $(@expr1073743349 "cppcheck-2.8/test/testio.cpp" $, 1456 $, $"void f(){signed long x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long *'.\n" $) ;
1457: $testFormatStrWarn $(@expr1073743350 "cppcheck-2.8/test/testio.cpp" $, 1457 $, $"void f(){unsigned long x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long *'.\n" $) ;
1458: $testFormatStrWarn $(@expr1073743351 "cppcheck-2.8/test/testio.cpp" $, 1458 $, $"void f(){signed long long x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long long *'.\n" $) ;
1459: $testFormatStrWarn $(@expr1073743352 "cppcheck-2.8/test/testio.cpp" $, 1459 $, $"void f(){unsigned long long x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long long *'.\n" $) ;
1460: $testFormatStrWarn $(@expr1073743353 "cppcheck-2.8/test/testio.cpp" $, 1460 $, $"void f(){float x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'float *'.\n" $) ;
1461: $testFormatStrWarn $(@expr1073743354 "cppcheck-2.8/test/testio.cpp" $, 1461 $, $"void f(){double x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'double *'.\n" $) ;
1462: $testFormatStrWarn $(@expr1073743355 "cppcheck-2.8/test/testio.cpp" $, 1462 $, $"void f(){long double x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'long double *'.\n" $) ;
1463: $testFormatStrWarn $(@expr1073743356 "cppcheck-2.8/test/testio.cpp" $, 1463 $, $"void f(){void * x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'void * *'.\n" $) ;
1464: $testFormatStrWarnAka $(@expr1073743357 "cppcheck-2.8/test/testio.cpp" $, 1464 $, $"void f(){size_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1465: $testFormatStrWarnAka $(@expr1073743358 "cppcheck-2.8/test/testio.cpp" $, 1465 $, $"void f(){ssize_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1466: $testFormatStrWarnAka $(@expr1073743359 "cppcheck-2.8/test/testio.cpp" $, 1466 $, $"void f(){ptrdiff_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1467: $testFormatStrWarnAka $(@expr1073743360 "cppcheck-2.8/test/testio.cpp" $, 1467 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1468: $testFormatStrWarnAka $(@expr1073743361 "cppcheck-2.8/test/testio.cpp" $, 1468 $, $"void f(){intmax_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1469: $testFormatStrNoWarn $(@expr1073743362 "cppcheck-2.8/test/testio.cpp" $, 1469 $, $"void f(){uintmax_t x; scanf(\"%jx\", &x);}" $) ;
1470: $testFormatStrWarnAka $(@expr1073743363 "cppcheck-2.8/test/testio.cpp" $, 1470 $, $"void f(){std::size_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1471: $testFormatStrWarnAka $(@expr1073743364 "cppcheck-2.8/test/testio.cpp" $, 1471 $, $"void f(){std::ssize_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1472: $testFormatStrWarnAka $(@expr1073743365 "cppcheck-2.8/test/testio.cpp" $, 1472 $, $"void f(){std::ptrdiff_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1473: $testFormatStrWarnAka $(@expr1073743366 "cppcheck-2.8/test/testio.cpp" $, 1473 $, $"void f(){std::intmax_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1474: $testFormatStrNoWarn $(@expr1073743367 "cppcheck-2.8/test/testio.cpp" $, 1474 $, $"void f(){std::uintmax_t x; scanf(\"%jx\", &x);}" $) ;
1475: $testFormatStrWarnAka $(@expr1073743368 "cppcheck-2.8/test/testio.cpp" $, 1475 $, $"void f(){std::intptr_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1476: $testFormatStrWarnAka $(@expr1073743369 "cppcheck-2.8/test/testio.cpp" $, 1476 $, $"void f(){std::uintptr_t x; scanf(\"%jx\", &x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1477:
1478: $testFormatStrWarn $(@expr1073743370 "cppcheck-2.8/test/testio.cpp" $, 1478 $, $"void f(){long double x; scanf(\"%jd\", &x);}" $, $"[test.cpp:1]: (warning) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'long double *'.\n" $) ;
1479: $testFormatStrWarn $(@expr1073743371 "cppcheck-2.8/test/testio.cpp" $, 1479 $, $"void f(){void * x; scanf(\"%jd\", &x);}" $, $"[test.cpp:1]: (warning) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'void * *'.\n" $) ;
1480: $testFormatStrWarnAka $(@expr1073743372 "cppcheck-2.8/test/testio.cpp" $, 1480 $, $"void f(){size_t x; scanf(\"%jd\", &x);}" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1481: $testFormatStrWarnAka $(@expr1073743373 "cppcheck-2.8/test/testio.cpp" $, 1481 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%jd\", &x);}" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1482: $testFormatStrWarnAka $(@expr1073743374 "cppcheck-2.8/test/testio.cpp" $, 1482 $, $"void f(){std::ssize_t x; scanf(\"%jd\", &x);}" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1483: $testFormatStrWarnAka $(@expr1073743375 "cppcheck-2.8/test/testio.cpp" $, 1483 $, $"void f(){std::ptrdiff_t x; scanf(\"%jd\", &x);}" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1484: $testFormatStrNoWarn $(@expr1073743376 "cppcheck-2.8/test/testio.cpp" $, 1484 $, $"void f(){intmax_t x; scanf(\"%jd\", &x);}" $) ;
1485: $testFormatStrWarnAka $(@expr1073743377 "cppcheck-2.8/test/testio.cpp" $, 1485 $, $"void f(){uintmax_t x; scanf(\"%jd\", &x);}" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1486: $testFormatStrNoWarn $(@expr1073743378 "cppcheck-2.8/test/testio.cpp" $, 1486 $, $"void f(){std::intmax_t x; scanf(\"%jd\", &x);}" $) ;
1487:
1488: $testFormatStrWarn $(@expr1073743379 "cppcheck-2.8/test/testio.cpp" $, 1488 $, $"void f(){bool x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n" $) ;
1489: $testFormatStrWarn $(@expr1073743380 "cppcheck-2.8/test/testio.cpp" $, 1489 $, $"void f(){char x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n" $) ;
1490: $testFormatStrWarn $(@expr1073743381 "cppcheck-2.8/test/testio.cpp" $, 1490 $, $"void f(){signed char x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n" $) ;
1491: $testFormatStrWarn $(@expr1073743382 "cppcheck-2.8/test/testio.cpp" $, 1491 $, $"void f(){unsigned char x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n" $) ;
1492: $testFormatStrWarn $(@expr1073743383 "cppcheck-2.8/test/testio.cpp" $, 1492 $, $"void f(){signed short x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n" $) ;
1493: $testFormatStrWarn $(@expr1073743384 "cppcheck-2.8/test/testio.cpp" $, 1493 $, $"void f(){unsigned short x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n" $) ;
1494: $testFormatStrWarn $(@expr1073743385 "cppcheck-2.8/test/testio.cpp" $, 1494 $, $"void f(){signed int x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n" $) ;
1495: $testFormatStrWarn $(@expr1073743386 "cppcheck-2.8/test/testio.cpp" $, 1495 $, $"void f(){unsigned int x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n" $) ;
1496: $testFormatStrWarn $(@expr1073743387 "cppcheck-2.8/test/testio.cpp" $, 1496 $, $"void f(){signed long x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n" $) ;
1497: $testFormatStrWarn $(@expr1073743388 "cppcheck-2.8/test/testio.cpp" $, 1497 $, $"void f(){unsigned long x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n" $) ;
1498: $testFormatStrWarn $(@expr1073743389 "cppcheck-2.8/test/testio.cpp" $, 1498 $, $"void f(){signed long long x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n" $) ;
1499: $testFormatStrWarn $(@expr1073743390 "cppcheck-2.8/test/testio.cpp" $, 1499 $, $"void f(){unsigned long long x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n" $) ;
1500: $testFormatStrWarn $(@expr1073743391 "cppcheck-2.8/test/testio.cpp" $, 1500 $, $"void f(){float x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n" $) ;
1501: $testFormatStrWarn $(@expr1073743392 "cppcheck-2.8/test/testio.cpp" $, 1501 $, $"void f(){double x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n" $) ;
1502: $testFormatStrWarn $(@expr1073743393 "cppcheck-2.8/test/testio.cpp" $, 1502 $, $"void f(){long double x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n" $) ;
1503: $testFormatStrWarn $(@expr1073743394 "cppcheck-2.8/test/testio.cpp" $, 1503 $, $"void f(){void * x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n" $) ;
1504: $testFormatStrNoWarn $(@expr1073743395 "cppcheck-2.8/test/testio.cpp" $, 1504 $, $"void f(){size_t x; scanf(\"%zu\", &x);}" $) ;
1505: $testFormatStrWarnAka $(@expr1073743396 "cppcheck-2.8/test/testio.cpp" $, 1505 $, $"void f(){ssize_t x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1506: $testFormatStrWarnAka $(@expr1073743397 "cppcheck-2.8/test/testio.cpp" $, 1506 $, $"void f(){ptrdiff_t x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1507: $testFormatStrWarnAka $(@expr1073743398 "cppcheck-2.8/test/testio.cpp" $, 1507 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1508: $testFormatStrWarnAka $(@expr1073743399 "cppcheck-2.8/test/testio.cpp" $, 1508 $, $"void f(){intmax_t x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1509: $testFormatStrWarnAka $(@expr1073743400 "cppcheck-2.8/test/testio.cpp" $, 1509 $, $"void f(){uintmax_t x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1510: $testFormatStrNoWarn $(@expr1073743401 "cppcheck-2.8/test/testio.cpp" $, 1510 $, $"void f(){std::size_t x; scanf(\"%zu\", &x);}" $) ;
1511: $testFormatStrWarnAka $(@expr1073743402 "cppcheck-2.8/test/testio.cpp" $, 1511 $, $"void f(){std::ssize_t x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1512: $testFormatStrWarnAka $(@expr1073743403 "cppcheck-2.8/test/testio.cpp" $, 1512 $, $"void f(){std::ptrdiff_t x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1513: $testFormatStrWarnAka $(@expr1073743404 "cppcheck-2.8/test/testio.cpp" $, 1513 $, $"void f(){std::intptr_t x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1514: $testFormatStrWarnAka $(@expr1073743405 "cppcheck-2.8/test/testio.cpp" $, 1514 $, $"void f(){std::uintptr_t x; scanf(\"%zu\", &x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1515:
1516: $testFormatStrWarn $(@expr1073743406 "cppcheck-2.8/test/testio.cpp" $, 1516 $, $"void f(){bool x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n" $) ;
1517: $testFormatStrWarn $(@expr1073743407 "cppcheck-2.8/test/testio.cpp" $, 1517 $, $"void f(){char x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n" $) ;
1518: $testFormatStrWarn $(@expr1073743408 "cppcheck-2.8/test/testio.cpp" $, 1518 $, $"void f(){signed char x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n" $) ;
1519: $testFormatStrWarn $(@expr1073743409 "cppcheck-2.8/test/testio.cpp" $, 1519 $, $"void f(){unsigned char x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n" $) ;
1520: $testFormatStrWarn $(@expr1073743410 "cppcheck-2.8/test/testio.cpp" $, 1520 $, $"void f(){signed short x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n" $) ;
1521: $testFormatStrWarn $(@expr1073743411 "cppcheck-2.8/test/testio.cpp" $, 1521 $, $"void f(){unsigned short x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n" $) ;
1522: $testFormatStrWarn $(@expr1073743412 "cppcheck-2.8/test/testio.cpp" $, 1522 $, $"void f(){signed int x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n" $) ;
1523: $testFormatStrWarn $(@expr1073743413 "cppcheck-2.8/test/testio.cpp" $, 1523 $, $"void f(){unsigned int x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n" $) ;
1524: $testFormatStrWarn $(@expr1073743414 "cppcheck-2.8/test/testio.cpp" $, 1524 $, $"void f(){signed long x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n" $) ;
1525: $testFormatStrWarn $(@expr1073743415 "cppcheck-2.8/test/testio.cpp" $, 1525 $, $"void f(){unsigned long x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n" $) ;
1526: $testFormatStrWarn $(@expr1073743416 "cppcheck-2.8/test/testio.cpp" $, 1526 $, $"void f(){signed long long x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n" $) ;
1527: $testFormatStrWarn $(@expr1073743417 "cppcheck-2.8/test/testio.cpp" $, 1527 $, $"void f(){unsigned long long x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n" $) ;
1528: $testFormatStrWarn $(@expr1073743418 "cppcheck-2.8/test/testio.cpp" $, 1528 $, $"void f(){float x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n" $) ;
1529: $testFormatStrWarn $(@expr1073743419 "cppcheck-2.8/test/testio.cpp" $, 1529 $, $"void f(){double x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n" $) ;
1530: $testFormatStrWarn $(@expr1073743420 "cppcheck-2.8/test/testio.cpp" $, 1530 $, $"void f(){long double x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n" $) ;
1531: $testFormatStrWarn $(@expr1073743421 "cppcheck-2.8/test/testio.cpp" $, 1531 $, $"void f(){void * x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n" $) ;
1532: $testFormatStrNoWarn $(@expr1073743422 "cppcheck-2.8/test/testio.cpp" $, 1532 $, $"void f(){size_t x; scanf(\"%zx\", &x);}" $) ;
1533: $testFormatStrWarnAka $(@expr1073743423 "cppcheck-2.8/test/testio.cpp" $, 1533 $, $"void f(){ssize_t x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1534: $testFormatStrWarnAka $(@expr1073743424 "cppcheck-2.8/test/testio.cpp" $, 1534 $, $"void f(){ptrdiff_t x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1535: $testFormatStrWarnAka $(@expr1073743425 "cppcheck-2.8/test/testio.cpp" $, 1535 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1536: $testFormatStrWarnAka $(@expr1073743426 "cppcheck-2.8/test/testio.cpp" $, 1536 $, $"void f(){intmax_t x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1537: $testFormatStrWarnAka $(@expr1073743427 "cppcheck-2.8/test/testio.cpp" $, 1537 $, $"void f(){uintmax_t x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1538: $testFormatStrNoWarn $(@expr1073743428 "cppcheck-2.8/test/testio.cpp" $, 1538 $, $"void f(){std::size_t x; scanf(\"%zx\", &x);}" $) ;
1539: $testFormatStrWarnAka $(@expr1073743429 "cppcheck-2.8/test/testio.cpp" $, 1539 $, $"void f(){std::ssize_t x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1540: $testFormatStrWarnAka $(@expr1073743430 "cppcheck-2.8/test/testio.cpp" $, 1540 $, $"void f(){std::ptrdiff_t x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1541: $testFormatStrWarnAka $(@expr1073743431 "cppcheck-2.8/test/testio.cpp" $, 1541 $, $"void f(){std::intptr_t x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1542: $testFormatStrWarnAka $(@expr1073743432 "cppcheck-2.8/test/testio.cpp" $, 1542 $, $"void f(){std::uintptr_t x; scanf(\"%zx\", &x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1543:
1544: $testFormatStrWarn $(@expr1073743433 "cppcheck-2.8/test/testio.cpp" $, 1544 $, $"void f(){bool x; scanf(\"%zd\", &x);}" $, $"[test.cpp:1]: (warning) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'bool *'.\n" $) ;
1545: $testFormatStrWarn $(@expr1073743434 "cppcheck-2.8/test/testio.cpp" $, 1545 $, $"void f(){signed short x; scanf(\"%zd\", &x);}" $, $"[test.cpp:1]: (warning) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'signed short *'.\n" $) ;
1546: $testFormatStrWarn $(@expr1073743435 "cppcheck-2.8/test/testio.cpp" $, 1546 $, $"void f(){void * x; scanf(\"%zd\", &x);}" $, $"[test.cpp:1]: (warning) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'void * *'.\n" $) ;
1547: $testFormatStrWarnAka $(@expr1073743436 "cppcheck-2.8/test/testio.cpp" $, 1547 $, $"void f(){size_t x; scanf(\"%zd\", &x);}" $, $"[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1548: $testFormatStrNoWarn $(@expr1073743437 "cppcheck-2.8/test/testio.cpp" $, 1548 $, $"void f(){ssize_t x; scanf(\"%zd\", &x);}" $) ;
1549: $testFormatStrWarnAka $(@expr1073743438 "cppcheck-2.8/test/testio.cpp" $, 1549 $, $"void f(){ptrdiff_t x; scanf(\"%zd\", &x);}" $, $"[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1550:
1551: $testFormatStrWarnAka $(@expr1073743439 "cppcheck-2.8/test/testio.cpp" $, 1551 $, $"void f(){size_t x; scanf(\"%zi\", &x);}" $, $"[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1552:
1553: $testFormatStrWarn $(@expr1073743440 "cppcheck-2.8/test/testio.cpp" $, 1553 $, $"void f(){bool x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'bool *'.\n" $) ;
1554: $testFormatStrWarn $(@expr1073743441 "cppcheck-2.8/test/testio.cpp" $, 1554 $, $"void f(){char x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'char *'.\n" $) ;
1555: $testFormatStrWarn $(@expr1073743442 "cppcheck-2.8/test/testio.cpp" $, 1555 $, $"void f(){signed char x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed char *'.\n" $) ;
1556: $testFormatStrWarn $(@expr1073743443 "cppcheck-2.8/test/testio.cpp" $, 1556 $, $"void f(){unsigned char x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned char *'.\n" $) ;
1557: $testFormatStrWarn $(@expr1073743444 "cppcheck-2.8/test/testio.cpp" $, 1557 $, $"void f(){signed short x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed short *'.\n" $) ;
1558: $testFormatStrWarn $(@expr1073743445 "cppcheck-2.8/test/testio.cpp" $, 1558 $, $"void f(){unsigned short x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned short *'.\n" $) ;
1559: $testFormatStrWarn $(@expr1073743446 "cppcheck-2.8/test/testio.cpp" $, 1559 $, $"void f(){signed int x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed int *'.\n" $) ;
1560: $testFormatStrWarn $(@expr1073743447 "cppcheck-2.8/test/testio.cpp" $, 1560 $, $"void f(){unsigned int x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned int *'.\n" $) ;
1561: $testFormatStrWarn $(@expr1073743448 "cppcheck-2.8/test/testio.cpp" $, 1561 $, $"void f(){signed long x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long *'.\n" $) ;
1562: $testFormatStrWarn $(@expr1073743449 "cppcheck-2.8/test/testio.cpp" $, 1562 $, $"void f(){unsigned long x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long *'.\n" $) ;
1563: $testFormatStrWarn $(@expr1073743450 "cppcheck-2.8/test/testio.cpp" $, 1563 $, $"void f(){signed long long x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long long *'.\n" $) ;
1564: $testFormatStrWarn $(@expr1073743451 "cppcheck-2.8/test/testio.cpp" $, 1564 $, $"void f(){unsigned long long x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long long *'.\n" $) ;
1565: $testFormatStrWarn $(@expr1073743452 "cppcheck-2.8/test/testio.cpp" $, 1565 $, $"void f(){float x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'float *'.\n" $) ;
1566: $testFormatStrWarn $(@expr1073743453 "cppcheck-2.8/test/testio.cpp" $, 1566 $, $"void f(){double x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'double *'.\n" $) ;
1567: $testFormatStrWarn $(@expr1073743454 "cppcheck-2.8/test/testio.cpp" $, 1567 $, $"void f(){long double x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'long double *'.\n" $) ;
1568: $testFormatStrWarn $(@expr1073743455 "cppcheck-2.8/test/testio.cpp" $, 1568 $, $"void f(){void * x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'void * *'.\n" $) ;
1569: $testFormatStrWarnAka $(@expr1073743456 "cppcheck-2.8/test/testio.cpp" $, 1569 $, $"void f(){size_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1570: $testFormatStrWarnAka $(@expr1073743457 "cppcheck-2.8/test/testio.cpp" $, 1570 $, $"void f(){ssize_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1571: $testFormatStrWarnAka $(@expr1073743458 "cppcheck-2.8/test/testio.cpp" $, 1571 $, $"void f(){ptrdiff_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1572: $testFormatStrNoWarn $(@expr1073743459 "cppcheck-2.8/test/testio.cpp" $, 1572 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%tu\", &x);}" $) ;
1573: $testFormatStrWarnAka $(@expr1073743460 "cppcheck-2.8/test/testio.cpp" $, 1573 $, $"void f(){intmax_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1574: $testFormatStrWarnAka $(@expr1073743461 "cppcheck-2.8/test/testio.cpp" $, 1574 $, $"void f(){uintmax_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1575: $testFormatStrWarnAka $(@expr1073743462 "cppcheck-2.8/test/testio.cpp" $, 1575 $, $"void f(){std::size_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1576: $testFormatStrWarnAka $(@expr1073743463 "cppcheck-2.8/test/testio.cpp" $, 1576 $, $"void f(){std::ssize_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1577: $testFormatStrWarnAka $(@expr1073743464 "cppcheck-2.8/test/testio.cpp" $, 1577 $, $"void f(){std::ptrdiff_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1578: $testFormatStrWarnAka $(@expr1073743465 "cppcheck-2.8/test/testio.cpp" $, 1578 $, $"void f(){std::intptr_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1579: $testFormatStrWarnAka $(@expr1073743466 "cppcheck-2.8/test/testio.cpp" $, 1579 $, $"void f(){std::uintptr_t x; scanf(\"%tu\", &x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1580:
1581: $testFormatStrWarn $(@expr1073743467 "cppcheck-2.8/test/testio.cpp" $, 1581 $, $"void f(){bool x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'bool *'.\n" $) ;
1582: $testFormatStrWarn $(@expr1073743468 "cppcheck-2.8/test/testio.cpp" $, 1582 $, $"void f(){char x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'char *'.\n" $) ;
1583: $testFormatStrWarn $(@expr1073743469 "cppcheck-2.8/test/testio.cpp" $, 1583 $, $"void f(){signed char x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed char *'.\n" $) ;
1584: $testFormatStrWarn $(@expr1073743470 "cppcheck-2.8/test/testio.cpp" $, 1584 $, $"void f(){unsigned char x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned char *'.\n" $) ;
1585: $testFormatStrWarn $(@expr1073743471 "cppcheck-2.8/test/testio.cpp" $, 1585 $, $"void f(){signed short x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed short *'.\n" $) ;
1586: $testFormatStrWarn $(@expr1073743472 "cppcheck-2.8/test/testio.cpp" $, 1586 $, $"void f(){unsigned short x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned short *'.\n" $) ;
1587: $testFormatStrWarn $(@expr1073743473 "cppcheck-2.8/test/testio.cpp" $, 1587 $, $"void f(){signed int x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed int *'.\n" $) ;
1588: $testFormatStrWarn $(@expr1073743474 "cppcheck-2.8/test/testio.cpp" $, 1588 $, $"void f(){unsigned int x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned int *'.\n" $) ;
1589: $testFormatStrWarn $(@expr1073743475 "cppcheck-2.8/test/testio.cpp" $, 1589 $, $"void f(){signed long x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long *'.\n" $) ;
1590: $testFormatStrWarn $(@expr1073743476 "cppcheck-2.8/test/testio.cpp" $, 1590 $, $"void f(){unsigned long x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long *'.\n" $) ;
1591: $testFormatStrWarn $(@expr1073743477 "cppcheck-2.8/test/testio.cpp" $, 1591 $, $"void f(){signed long long x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long long *'.\n" $) ;
1592: $testFormatStrWarn $(@expr1073743478 "cppcheck-2.8/test/testio.cpp" $, 1592 $, $"void f(){unsigned long long x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long long *'.\n" $) ;
1593: $testFormatStrWarn $(@expr1073743479 "cppcheck-2.8/test/testio.cpp" $, 1593 $, $"void f(){float x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'float *'.\n" $) ;
1594: $testFormatStrWarn $(@expr1073743480 "cppcheck-2.8/test/testio.cpp" $, 1594 $, $"void f(){double x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'double *'.\n" $) ;
1595: $testFormatStrWarn $(@expr1073743481 "cppcheck-2.8/test/testio.cpp" $, 1595 $, $"void f(){long double x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'long double *'.\n" $) ;
1596: $testFormatStrWarn $(@expr1073743482 "cppcheck-2.8/test/testio.cpp" $, 1596 $, $"void f(){void * x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'void * *'.\n" $) ;
1597: $testFormatStrWarnAka $(@expr1073743483 "cppcheck-2.8/test/testio.cpp" $, 1597 $, $"void f(){size_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1598: $testFormatStrWarnAka $(@expr1073743484 "cppcheck-2.8/test/testio.cpp" $, 1598 $, $"void f(){ssize_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1599: $testFormatStrWarnAka $(@expr1073743485 "cppcheck-2.8/test/testio.cpp" $, 1599 $, $"void f(){ptrdiff_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1600: $testFormatStrNoWarn $(@expr1073743486 "cppcheck-2.8/test/testio.cpp" $, 1600 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%tx\", &x);}" $) ;
1601: $testFormatStrWarnAka $(@expr1073743487 "cppcheck-2.8/test/testio.cpp" $, 1601 $, $"void f(){intmax_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1602: $testFormatStrWarnAka $(@expr1073743488 "cppcheck-2.8/test/testio.cpp" $, 1602 $, $"void f(){uintmax_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1603: $testFormatStrWarnAka $(@expr1073743489 "cppcheck-2.8/test/testio.cpp" $, 1603 $, $"void f(){std::size_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1604: $testFormatStrWarnAka $(@expr1073743490 "cppcheck-2.8/test/testio.cpp" $, 1604 $, $"void f(){std::ssize_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1605: $testFormatStrWarnAka $(@expr1073743491 "cppcheck-2.8/test/testio.cpp" $, 1605 $, $"void f(){std::ptrdiff_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1606: $testFormatStrWarnAka $(@expr1073743492 "cppcheck-2.8/test/testio.cpp" $, 1606 $, $"void f(){std::intptr_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1607: $testFormatStrWarnAka $(@expr1073743493 "cppcheck-2.8/test/testio.cpp" $, 1607 $, $"void f(){std::uintptr_t x; scanf(\"%tx\", &x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1608:
1609: $testFormatStrWarn $(@expr1073743494 "cppcheck-2.8/test/testio.cpp" $, 1609 $, $"void f(){long double x; scanf(\"%td\", &x);}" $, $"[test.cpp:1]: (warning) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'long double *'.\n" $) ;
1610: $testFormatStrWarn $(@expr1073743495 "cppcheck-2.8/test/testio.cpp" $, 1610 $, $"void f(){void * x; scanf(\"%td\", &x);}" $, $"[test.cpp:1]: (warning) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'void * *'.\n" $) ;
1611: $testFormatStrNoWarn $(@expr1073743496 "cppcheck-2.8/test/testio.cpp" $, 1611 $, $"void f(){ptrdiff_t x; scanf(\"%td\", &x);}" $) ;
1612: $testFormatStrWarnAka $(@expr1073743497 "cppcheck-2.8/test/testio.cpp" $, 1612 $, $"void f(){intmax_t x; scanf(\"%td\", &x);}" $, $"[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1613: $testFormatStrWarnAka $(@expr1073743498 "cppcheck-2.8/test/testio.cpp" $, 1613 $, $"void f(){uintmax_t x; scanf(\"%td\", &x);}" $, $"[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1614: $testFormatStrWarnAka $(@expr1073743499 "cppcheck-2.8/test/testio.cpp" $, 1614 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%td\", &x);}" $, $"[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1615:
1616: $testFormatStrWarn $(@expr1073743500 "cppcheck-2.8/test/testio.cpp" $, 1616 $, $"void f(){bool x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n" $) ;
1617: $testFormatStrWarn $(@expr1073743501 "cppcheck-2.8/test/testio.cpp" $, 1617 $, $"void f(){char x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n" $) ;
1618: $testFormatStrWarn $(@expr1073743502 "cppcheck-2.8/test/testio.cpp" $, 1618 $, $"void f(){signed char x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n" $) ;
1619: $testFormatStrWarn $(@expr1073743503 "cppcheck-2.8/test/testio.cpp" $, 1619 $, $"void f(){unsigned char x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n" $) ;
1620: $testFormatStrWarn $(@expr1073743504 "cppcheck-2.8/test/testio.cpp" $, 1620 $, $"void f(){signed short x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n" $) ;
1621: $testFormatStrWarn $(@expr1073743505 "cppcheck-2.8/test/testio.cpp" $, 1621 $, $"void f(){unsigned short x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n" $) ;
1622: $testFormatStrWarn $(@expr1073743506 "cppcheck-2.8/test/testio.cpp" $, 1622 $, $"void f(){signed int x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n" $) ;
1623: $testFormatStrWarn $(@expr1073743507 "cppcheck-2.8/test/testio.cpp" $, 1623 $, $"void f(){unsigned int x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n" $) ;
1624: $testFormatStrWarn $(@expr1073743508 "cppcheck-2.8/test/testio.cpp" $, 1624 $, $"void f(){signed long x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n" $) ;
1625: $testFormatStrWarn $(@expr1073743509 "cppcheck-2.8/test/testio.cpp" $, 1625 $, $"void f(){unsigned long x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n" $) ;
1626: $testFormatStrWarn $(@expr1073743510 "cppcheck-2.8/test/testio.cpp" $, 1626 $, $"void f(){signed long long x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n" $) ;
1627: $testFormatStrWarn $(@expr1073743511 "cppcheck-2.8/test/testio.cpp" $, 1627 $, $"void f(){unsigned long long x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n" $) ;
1628: $testFormatStrWarn $(@expr1073743512 "cppcheck-2.8/test/testio.cpp" $, 1628 $, $"void f(){float x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n" $) ;
1629: $testFormatStrWarn $(@expr1073743513 "cppcheck-2.8/test/testio.cpp" $, 1629 $, $"void f(){double x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n" $) ;
1630: $testFormatStrWarn $(@expr1073743514 "cppcheck-2.8/test/testio.cpp" $, 1630 $, $"void f(){long double x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n" $) ;
1631: $testFormatStrWarn $(@expr1073743515 "cppcheck-2.8/test/testio.cpp" $, 1631 $, $"void f(){void * x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n" $) ;
1632: $testFormatStrNoWarn $(@expr1073743516 "cppcheck-2.8/test/testio.cpp" $, 1632 $, $"void f(){size_t x; scanf(\"%Iu\", &x);}" $) ;
1633: $testFormatStrWarnAka $(@expr1073743517 "cppcheck-2.8/test/testio.cpp" $, 1633 $, $"void f(){ssize_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1634: $testFormatStrWarnAka $(@expr1073743518 "cppcheck-2.8/test/testio.cpp" $, 1634 $, $"void f(){ptrdiff_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1635: $testFormatStrWarnAka $(@expr1073743519 "cppcheck-2.8/test/testio.cpp" $, 1635 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1636: $testFormatStrWarnAka $(@expr1073743520 "cppcheck-2.8/test/testio.cpp" $, 1636 $, $"void f(){intmax_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1637: $testFormatStrWarnAka $(@expr1073743521 "cppcheck-2.8/test/testio.cpp" $, 1637 $, $"void f(){uintmax_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1638: $testFormatStrWarnAka $(@expr1073743522 "cppcheck-2.8/test/testio.cpp" $, 1638 $, $"void f(){intptr_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1639: $testFormatStrWarnAka $(@expr1073743523 "cppcheck-2.8/test/testio.cpp" $, 1639 $, $"void f(){uintptr_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" $) ;
1640: $testFormatStrNoWarn $(@expr1073743524 "cppcheck-2.8/test/testio.cpp" $, 1640 $, $"void f(){std::size_t x; scanf(\"%Iu\", &x);}" $) ;
1641: $testFormatStrWarnAka $(@expr1073743525 "cppcheck-2.8/test/testio.cpp" $, 1641 $, $"void f(){std::ssize_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1642: $testFormatStrWarnAka $(@expr1073743526 "cppcheck-2.8/test/testio.cpp" $, 1642 $, $"void f(){std::ptrdiff_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1643: $testFormatStrWarnAka $(@expr1073743527 "cppcheck-2.8/test/testio.cpp" $, 1643 $, $"void f(){std::intmax_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1644: $testFormatStrWarnAka $(@expr1073743528 "cppcheck-2.8/test/testio.cpp" $, 1644 $, $"void f(){std::uintmax_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1645: $testFormatStrWarnAka $(@expr1073743529 "cppcheck-2.8/test/testio.cpp" $, 1645 $, $"void f(){std::intptr_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1646: $testFormatStrWarnAka $(@expr1073743530 "cppcheck-2.8/test/testio.cpp" $, 1646 $, $"void f(){std::uintptr_t x; scanf(\"%Iu\", &x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1647:
1648: $testFormatStrWarn $(@expr1073743531 "cppcheck-2.8/test/testio.cpp" $, 1648 $, $"void f(){bool x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n" $) ;
1649: $testFormatStrWarn $(@expr1073743532 "cppcheck-2.8/test/testio.cpp" $, 1649 $, $"void f(){char x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n" $) ;
1650: $testFormatStrWarn $(@expr1073743533 "cppcheck-2.8/test/testio.cpp" $, 1650 $, $"void f(){signed char x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n" $) ;
1651: $testFormatStrWarn $(@expr1073743534 "cppcheck-2.8/test/testio.cpp" $, 1651 $, $"void f(){unsigned char x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n" $) ;
1652: $testFormatStrWarn $(@expr1073743535 "cppcheck-2.8/test/testio.cpp" $, 1652 $, $"void f(){signed short x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n" $) ;
1653: $testFormatStrWarn $(@expr1073743536 "cppcheck-2.8/test/testio.cpp" $, 1653 $, $"void f(){unsigned short x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n" $) ;
1654: $testFormatStrWarn $(@expr1073743537 "cppcheck-2.8/test/testio.cpp" $, 1654 $, $"void f(){signed int x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n" $) ;
1655: $testFormatStrWarn $(@expr1073743538 "cppcheck-2.8/test/testio.cpp" $, 1655 $, $"void f(){unsigned int x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n" $) ;
1656: $testFormatStrWarn $(@expr1073743539 "cppcheck-2.8/test/testio.cpp" $, 1656 $, $"void f(){signed long x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n" $) ;
1657: $testFormatStrWarn $(@expr1073743540 "cppcheck-2.8/test/testio.cpp" $, 1657 $, $"void f(){unsigned long x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n" $) ;
1658: $testFormatStrWarn $(@expr1073743541 "cppcheck-2.8/test/testio.cpp" $, 1658 $, $"void f(){signed long long x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n" $) ;
1659: $testFormatStrWarn $(@expr1073743542 "cppcheck-2.8/test/testio.cpp" $, 1659 $, $"void f(){unsigned long long x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n" $) ;
1660: $testFormatStrWarn $(@expr1073743543 "cppcheck-2.8/test/testio.cpp" $, 1660 $, $"void f(){float x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n" $) ;
1661: $testFormatStrWarn $(@expr1073743544 "cppcheck-2.8/test/testio.cpp" $, 1661 $, $"void f(){double x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n" $) ;
1662: $testFormatStrWarn $(@expr1073743545 "cppcheck-2.8/test/testio.cpp" $, 1662 $, $"void f(){long double x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n" $) ;
1663: $testFormatStrWarn $(@expr1073743546 "cppcheck-2.8/test/testio.cpp" $, 1663 $, $"void f(){void * x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n" $) ;
1664: $testFormatStrNoWarn $(@expr1073743547 "cppcheck-2.8/test/testio.cpp" $, 1664 $, $"void f(){size_t x; scanf(\"%Ix\", &x);}" $) ;
1665: $testFormatStrWarnAka $(@expr1073743548 "cppcheck-2.8/test/testio.cpp" $, 1665 $, $"void f(){ssize_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1666: $testFormatStrWarnAka $(@expr1073743549 "cppcheck-2.8/test/testio.cpp" $, 1666 $, $"void f(){ptrdiff_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1667: $testFormatStrWarnAka $(@expr1073743550 "cppcheck-2.8/test/testio.cpp" $, 1667 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1668: $testFormatStrWarnAka $(@expr1073743551 "cppcheck-2.8/test/testio.cpp" $, 1668 $, $"void f(){intmax_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1669: $testFormatStrWarnAka $(@expr1073743552 "cppcheck-2.8/test/testio.cpp" $, 1669 $, $"void f(){uintmax_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1670: $testFormatStrWarnAka $(@expr1073743553 "cppcheck-2.8/test/testio.cpp" $, 1670 $, $"void f(){intptr_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1671: $testFormatStrWarnAka $(@expr1073743554 "cppcheck-2.8/test/testio.cpp" $, 1671 $, $"void f(){uintptr_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" $) ;
1672: $testFormatStrNoWarn $(@expr1073743555 "cppcheck-2.8/test/testio.cpp" $, 1672 $, $"void f(){std::size_t x; scanf(\"%Ix\", &x);}" $) ;
1673: $testFormatStrWarnAka $(@expr1073743556 "cppcheck-2.8/test/testio.cpp" $, 1673 $, $"void f(){std::ssize_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1674: $testFormatStrWarnAka $(@expr1073743557 "cppcheck-2.8/test/testio.cpp" $, 1674 $, $"void f(){std::ptrdiff_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1675: $testFormatStrWarnAka $(@expr1073743558 "cppcheck-2.8/test/testio.cpp" $, 1675 $, $"void f(){std::intmax_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1676: $testFormatStrWarnAka $(@expr1073743559 "cppcheck-2.8/test/testio.cpp" $, 1676 $, $"void f(){std::uintmax_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1677: $testFormatStrWarnAka $(@expr1073743560 "cppcheck-2.8/test/testio.cpp" $, 1677 $, $"void f(){std::intptr_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1678: $testFormatStrWarnAka $(@expr1073743561 "cppcheck-2.8/test/testio.cpp" $, 1678 $, $"void f(){std::uintptr_t x; scanf(\"%Ix\", &x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1679:
1680: $testFormatStrWarn $(@expr1073743562 "cppcheck-2.8/test/testio.cpp" $, 1680 $, $"void f(){bool x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'bool *'.\n" $) ;
1681: $testFormatStrWarn $(@expr1073743563 "cppcheck-2.8/test/testio.cpp" $, 1681 $, $"void f(){char x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'char *'.\n" $) ;
1682: $testFormatStrWarn $(@expr1073743564 "cppcheck-2.8/test/testio.cpp" $, 1682 $, $"void f(){signed char x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed char *'.\n" $) ;
1683: $testFormatStrWarn $(@expr1073743565 "cppcheck-2.8/test/testio.cpp" $, 1683 $, $"void f(){unsigned char x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned char *'.\n" $) ;
1684: $testFormatStrWarn $(@expr1073743566 "cppcheck-2.8/test/testio.cpp" $, 1684 $, $"void f(){signed short x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed short *'.\n" $) ;
1685: $testFormatStrWarn $(@expr1073743567 "cppcheck-2.8/test/testio.cpp" $, 1685 $, $"void f(){unsigned short x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned short *'.\n" $) ;
1686: $testFormatStrWarn $(@expr1073743568 "cppcheck-2.8/test/testio.cpp" $, 1686 $, $"void f(){signed int x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed int *'.\n" $) ;
1687: $testFormatStrWarn $(@expr1073743569 "cppcheck-2.8/test/testio.cpp" $, 1687 $, $"void f(){unsigned int x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned int *'.\n" $) ;
1688: $testFormatStrWarn $(@expr1073743570 "cppcheck-2.8/test/testio.cpp" $, 1688 $, $"void f(){signed long x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed long *'.\n" $) ;
1689: $testFormatStrWarn $(@expr1073743571 "cppcheck-2.8/test/testio.cpp" $, 1689 $, $"void f(){unsigned long x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned long *'.\n" $) ;
1690: $testFormatStrWarn $(@expr1073743572 "cppcheck-2.8/test/testio.cpp" $, 1690 $, $"void f(){signed long long x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed long long *'.\n" $) ;
1691: $testFormatStrWarn $(@expr1073743573 "cppcheck-2.8/test/testio.cpp" $, 1691 $, $"void f(){unsigned long long x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned long long *'.\n" $) ;
1692: $testFormatStrWarn $(@expr1073743574 "cppcheck-2.8/test/testio.cpp" $, 1692 $, $"void f(){float x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'float *'.\n" $) ;
1693: $testFormatStrWarn $(@expr1073743575 "cppcheck-2.8/test/testio.cpp" $, 1693 $, $"void f(){double x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'double *'.\n" $) ;
1694: $testFormatStrWarn $(@expr1073743576 "cppcheck-2.8/test/testio.cpp" $, 1694 $, $"void f(){long double x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'long double *'.\n" $) ;
1695: $testFormatStrWarn $(@expr1073743577 "cppcheck-2.8/test/testio.cpp" $, 1695 $, $"void f(){void * x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'void * *'.\n" $) ;
1696: $testFormatStrWarnAka $(@expr1073743578 "cppcheck-2.8/test/testio.cpp" $, 1696 $, $"void f(){size_t x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1697: $testFormatStrWarnAka $(@expr1073743579 "cppcheck-2.8/test/testio.cpp" $, 1697 $, $"void f(){ssize_t x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1698: $testFormatStrNoWarn $(@expr1073743580 "cppcheck-2.8/test/testio.cpp" $, 1698 $, $"void f(){ptrdiff_t x; scanf(\"%Id\", &x);}" $) ;
1699: $testFormatStrWarnAka $(@expr1073743581 "cppcheck-2.8/test/testio.cpp" $, 1699 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1700: $testFormatStrWarnAka $(@expr1073743582 "cppcheck-2.8/test/testio.cpp" $, 1700 $, $"void f(){intmax_t x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1701: $testFormatStrWarnAka $(@expr1073743583 "cppcheck-2.8/test/testio.cpp" $, 1701 $, $"void f(){uintmax_t x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1702: $testFormatStrWarnAka $(@expr1073743584 "cppcheck-2.8/test/testio.cpp" $, 1702 $, $"void f(){std::size_t x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1703: $testFormatStrWarnAka $(@expr1073743585 "cppcheck-2.8/test/testio.cpp" $, 1703 $, $"void f(){std::ssize_t x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1704: $testFormatStrNoWarn $(@expr1073743586 "cppcheck-2.8/test/testio.cpp" $, 1704 $, $"void f(){std::ptrdiff_t x; scanf(\"%Id\", &x);}" $) ;
1705: $testFormatStrWarnAka $(@expr1073743587 "cppcheck-2.8/test/testio.cpp" $, 1705 $, $"void f(){std::intptr_t x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1706: $testFormatStrWarnAka $(@expr1073743588 "cppcheck-2.8/test/testio.cpp" $, 1706 $, $"void f(){std::uintptr_t x; scanf(\"%Id\", &x);}" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1707:
1708: $testFormatStrWarn $(@expr1073743589 "cppcheck-2.8/test/testio.cpp" $, 1708 $, $"void f(){bool x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'bool *'.\n" $) ;
1709: $testFormatStrWarn $(@expr1073743590 "cppcheck-2.8/test/testio.cpp" $, 1709 $, $"void f(){char x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'char *'.\n" $) ;
1710: $testFormatStrWarn $(@expr1073743591 "cppcheck-2.8/test/testio.cpp" $, 1710 $, $"void f(){signed char x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed char *'.\n" $) ;
1711: $testFormatStrWarn $(@expr1073743592 "cppcheck-2.8/test/testio.cpp" $, 1711 $, $"void f(){unsigned char x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned char *'.\n" $) ;
1712: $testFormatStrWarn $(@expr1073743593 "cppcheck-2.8/test/testio.cpp" $, 1712 $, $"void f(){signed short x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed short *'.\n" $) ;
1713: $testFormatStrWarn $(@expr1073743594 "cppcheck-2.8/test/testio.cpp" $, 1713 $, $"void f(){unsigned short x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned short *'.\n" $) ;
1714: $testFormatStrWarn $(@expr1073743595 "cppcheck-2.8/test/testio.cpp" $, 1714 $, $"void f(){signed int x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed int *'.\n" $) ;
1715: $testFormatStrWarn $(@expr1073743596 "cppcheck-2.8/test/testio.cpp" $, 1715 $, $"void f(){unsigned int x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned int *'.\n" $) ;
1716: $testFormatStrWarn $(@expr1073743597 "cppcheck-2.8/test/testio.cpp" $, 1716 $, $"void f(){signed long x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long *'.\n" $) ;
1717: $testFormatStrWarn $(@expr1073743598 "cppcheck-2.8/test/testio.cpp" $, 1717 $, $"void f(){unsigned long x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned long *'.\n" $) ;
1718: $testFormatStrWarn $(@expr1073743599 "cppcheck-2.8/test/testio.cpp" $, 1718 $, $"void f(){signed long long x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long long *'.\n" $) ;
1719: $testFormatStrNoWarn $(@expr1073743600 "cppcheck-2.8/test/testio.cpp" $, 1719 $, $"void f(){unsigned long long x; scanf(\"%I64u\", &x);}" $) ;
1720: $testFormatStrWarn $(@expr1073743601 "cppcheck-2.8/test/testio.cpp" $, 1720 $, $"void f(){float x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'float *'.\n" $) ;
1721: $testFormatStrWarn $(@expr1073743602 "cppcheck-2.8/test/testio.cpp" $, 1721 $, $"void f(){double x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'double *'.\n" $) ;
1722: $testFormatStrWarn $(@expr1073743603 "cppcheck-2.8/test/testio.cpp" $, 1722 $, $"void f(){long double x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'long double *'.\n" $) ;
1723: $testFormatStrWarn $(@expr1073743604 "cppcheck-2.8/test/testio.cpp" $, 1723 $, $"void f(){void * x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'void * *'.\n" $) ;
1724: $testFormatStrWarnAkaWin32 $(@expr1073743605 "cppcheck-2.8/test/testio.cpp" $, 1724 $, $"void f(){size_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $) ;
1725: $testFormatStrWarnAka $(@expr1073743606 "cppcheck-2.8/test/testio.cpp" $, 1725 $, $"void f(){ssize_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1726: $testFormatStrWarnAka $(@expr1073743607 "cppcheck-2.8/test/testio.cpp" $, 1726 $, $"void f(){ptrdiff_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1727: $testFormatStrWarnAkaWin32 $(@expr1073743608 "cppcheck-2.8/test/testio.cpp" $, 1727 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $) ;
1728: $testFormatStrWarnAka $(@expr1073743609 "cppcheck-2.8/test/testio.cpp" $, 1728 $, $"void f(){intmax_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1729: $testFormatStrWarnAkaWin32 $(@expr1073743610 "cppcheck-2.8/test/testio.cpp" $, 1729 $, $"void f(){uintmax_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $) ;
1730: $testFormatStrWarnAka $(@expr1073743611 "cppcheck-2.8/test/testio.cpp" $, 1730 $, $"void f(){intptr_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1731: $testFormatStrWarnAkaWin32 $(@expr1073743612 "cppcheck-2.8/test/testio.cpp" $, 1731 $, $"void f(){uintptr_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $) ;
1732: $testFormatStrWarnAkaWin32 $(@expr1073743613 "cppcheck-2.8/test/testio.cpp" $, 1732 $, $"void f(){std::size_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $) ;
1733: $testFormatStrWarnAka $(@expr1073743614 "cppcheck-2.8/test/testio.cpp" $, 1733 $, $"void f(){std::ssize_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1734: $testFormatStrWarnAka $(@expr1073743615 "cppcheck-2.8/test/testio.cpp" $, 1734 $, $"void f(){std::ptrdiff_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1735: $testFormatStrWarnAka $(@expr1073743616 "cppcheck-2.8/test/testio.cpp" $, 1735 $, $"void f(){std::intmax_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1736: $testFormatStrWarnAkaWin32 $(@expr1073743617 "cppcheck-2.8/test/testio.cpp" $, 1736 $, $"void f(){std::uintmax_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $) ;
1737: $testFormatStrWarnAka $(@expr1073743618 "cppcheck-2.8/test/testio.cpp" $, 1737 $, $"void f(){std::intptr_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1738: $testFormatStrWarnAkaWin32 $(@expr1073743619 "cppcheck-2.8/test/testio.cpp" $, 1738 $, $"void f(){std::uintptr_t x; scanf(\"%I64u\", &x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $) ;
1739:
1740: $testFormatStrWarn $(@expr1073743620 "cppcheck-2.8/test/testio.cpp" $, 1740 $, $"void f(){bool x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'bool *'.\n" $) ;
1741: $testFormatStrWarn $(@expr1073743621 "cppcheck-2.8/test/testio.cpp" $, 1741 $, $"void f(){char x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'char *'.\n" $) ;
1742: $testFormatStrWarn $(@expr1073743622 "cppcheck-2.8/test/testio.cpp" $, 1742 $, $"void f(){signed char x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed char *'.\n" $) ;
1743: $testFormatStrWarn $(@expr1073743623 "cppcheck-2.8/test/testio.cpp" $, 1743 $, $"void f(){unsigned char x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned char *'.\n" $) ;
1744: $testFormatStrWarn $(@expr1073743624 "cppcheck-2.8/test/testio.cpp" $, 1744 $, $"void f(){signed short x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed short *'.\n" $) ;
1745: $testFormatStrWarn $(@expr1073743625 "cppcheck-2.8/test/testio.cpp" $, 1745 $, $"void f(){unsigned short x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned short *'.\n" $) ;
1746: $testFormatStrWarn $(@expr1073743626 "cppcheck-2.8/test/testio.cpp" $, 1746 $, $"void f(){signed int x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed int *'.\n" $) ;
1747: $testFormatStrWarn $(@expr1073743627 "cppcheck-2.8/test/testio.cpp" $, 1747 $, $"void f(){unsigned int x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned int *'.\n" $) ;
1748: $testFormatStrWarn $(@expr1073743628 "cppcheck-2.8/test/testio.cpp" $, 1748 $, $"void f(){signed long x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long *'.\n" $) ;
1749: $testFormatStrWarn $(@expr1073743629 "cppcheck-2.8/test/testio.cpp" $, 1749 $, $"void f(){unsigned long x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned long *'.\n" $) ;
1750: $testFormatStrWarn $(@expr1073743630 "cppcheck-2.8/test/testio.cpp" $, 1750 $, $"void f(){signed long long x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long long *'.\n" $) ;
1751: $testFormatStrNoWarn $(@expr1073743631 "cppcheck-2.8/test/testio.cpp" $, 1751 $, $"void f(){unsigned long long x; scanf(\"%I64x\", &x);}" $) ;
1752: $testFormatStrWarn $(@expr1073743632 "cppcheck-2.8/test/testio.cpp" $, 1752 $, $"void f(){float x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'float *'.\n" $) ;
1753: $testFormatStrWarn $(@expr1073743633 "cppcheck-2.8/test/testio.cpp" $, 1753 $, $"void f(){double x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'double *'.\n" $) ;
1754: $testFormatStrWarn $(@expr1073743634 "cppcheck-2.8/test/testio.cpp" $, 1754 $, $"void f(){long double x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'long double *'.\n" $) ;
1755: $testFormatStrWarn $(@expr1073743635 "cppcheck-2.8/test/testio.cpp" $, 1755 $, $"void f(){void * x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'void * *'.\n" $) ;
1756: $testFormatStrWarnAkaWin32 $(@expr1073743636 "cppcheck-2.8/test/testio.cpp" $, 1756 $, $"void f(){size_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $) ;
1757: $testFormatStrWarnAka $(@expr1073743637 "cppcheck-2.8/test/testio.cpp" $, 1757 $, $"void f(){ssize_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1758: $testFormatStrWarnAka $(@expr1073743638 "cppcheck-2.8/test/testio.cpp" $, 1758 $, $"void f(){ptrdiff_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1759: $testFormatStrNoWarn $(@expr1073743639 "cppcheck-2.8/test/testio.cpp" $, 1759 $, $"void f(){unsigned __int64 x; scanf(\"%I64x\", &x);}" $) ;
1760:
1761: $testFormatStrWarnAkaWin32 $(@expr1073743640 "cppcheck-2.8/test/testio.cpp" $, 1761 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $) ;
1762: $testFormatStrWarnAka $(@expr1073743641 "cppcheck-2.8/test/testio.cpp" $, 1762 $, $"void f(){intmax_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1763: $testFormatStrWarnAkaWin32 $(@expr1073743642 "cppcheck-2.8/test/testio.cpp" $, 1763 $, $"void f(){uintmax_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $) ;
1764: $testFormatStrWarnAka $(@expr1073743643 "cppcheck-2.8/test/testio.cpp" $, 1764 $, $"void f(){intptr_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1765: $testFormatStrWarnAkaWin32 $(@expr1073743644 "cppcheck-2.8/test/testio.cpp" $, 1765 $, $"void f(){uintptr_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $) ;
1766: $testFormatStrWarnAkaWin32 $(@expr1073743645 "cppcheck-2.8/test/testio.cpp" $, 1766 $, $"void f(){std::size_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $) ;
1767: $testFormatStrWarnAka $(@expr1073743646 "cppcheck-2.8/test/testio.cpp" $, 1767 $, $"void f(){std::ssize_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1768: $testFormatStrWarnAka $(@expr1073743647 "cppcheck-2.8/test/testio.cpp" $, 1768 $, $"void f(){std::ptrdiff_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1769: $testFormatStrWarnAka $(@expr1073743648 "cppcheck-2.8/test/testio.cpp" $, 1769 $, $"void f(){std::intmax_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1770: $testFormatStrWarnAkaWin32 $(@expr1073743649 "cppcheck-2.8/test/testio.cpp" $, 1770 $, $"void f(){std::uintmax_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $) ;
1771: $testFormatStrWarnAka $(@expr1073743650 "cppcheck-2.8/test/testio.cpp" $, 1771 $, $"void f(){std::intptr_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1772: $testFormatStrWarnAkaWin32 $(@expr1073743651 "cppcheck-2.8/test/testio.cpp" $, 1772 $, $"void f(){std::uintptr_t x; scanf(\"%I64x\", &x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $) ;
1773:
1774: $testFormatStrWarn $(@expr1073743652 "cppcheck-2.8/test/testio.cpp" $, 1774 $, $"void f(){bool x; scanf(\"%I64d\", &x);}" $, $"[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'bool *'.\n" $) ;
1775: $testFormatStrWarn $(@expr1073743653 "cppcheck-2.8/test/testio.cpp" $, 1775 $, $"void f(){signed char x; scanf(\"%I64d\", &x);}" $, $"[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'signed char *'.\n" $) ;
1776: $testFormatStrWarn $(@expr1073743654 "cppcheck-2.8/test/testio.cpp" $, 1776 $, $"void f(){unsigned char x; scanf(\"%I64d\", &x);}" $, $"[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'unsigned char *'.\n" $) ;
1777: $testFormatStrWarn $(@expr1073743655 "cppcheck-2.8/test/testio.cpp" $, 1777 $, $"void f(){void * x; scanf(\"%I64d\", &x);}" $, $"[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'void * *'.\n" $) ;
1778:
1779: $testFormatStrWarnAkaWin32 $(@expr1073743656 "cppcheck-2.8/test/testio.cpp" $, 1779 $, $"void f(){intmax_t x; scanf(\"%I64d\", &x);}" $, $"[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $) ;
1780: $testFormatStrWarnAkaWin32 $(@expr1073743657 "cppcheck-2.8/test/testio.cpp" $, 1780 $, $"void f(){ssize_t x; scanf(\"%I64d\", &x);}" $, $"[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $) ;
1781: $testFormatStrWarnAkaWin32 $(@expr1073743658 "cppcheck-2.8/test/testio.cpp" $, 1781 $, $"void f(){ptrdiff_t x; scanf(\"%I64d\", &x);}" $, $"[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $) ;
1782: $testFormatStrNoWarn $(@expr1073743659 "cppcheck-2.8/test/testio.cpp" $, 1782 $, $"void f(){__int64 x; scanf(\"%I64d\", &x);}" $) ;
1783:
1784: $testFormatStrWarn $(@expr1073743660 "cppcheck-2.8/test/testio.cpp" $, 1784 $, $"void f(){bool x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'bool *'.\n" $) ;
1785: $testFormatStrWarn $(@expr1073743661 "cppcheck-2.8/test/testio.cpp" $, 1785 $, $"void f(){char x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'char *'.\n" $) ;
1786: $testFormatStrWarn $(@expr1073743662 "cppcheck-2.8/test/testio.cpp" $, 1786 $, $"void f(){signed char x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed char *'.\n" $) ;
1787: $testFormatStrWarn $(@expr1073743663 "cppcheck-2.8/test/testio.cpp" $, 1787 $, $"void f(){unsigned char x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned char *'.\n" $) ;
1788: $testFormatStrWarn $(@expr1073743664 "cppcheck-2.8/test/testio.cpp" $, 1788 $, $"void f(){signed short x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed short *'.\n" $) ;
1789: $testFormatStrWarn $(@expr1073743665 "cppcheck-2.8/test/testio.cpp" $, 1789 $, $"void f(){unsigned short x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned short *'.\n" $) ;
1790: $testFormatStrWarn $(@expr1073743666 "cppcheck-2.8/test/testio.cpp" $, 1790 $, $"void f(){signed int x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed int *'.\n" $) ;
1791: $testFormatStrNoWarn $(@expr1073743667 "cppcheck-2.8/test/testio.cpp" $, 1791 $, $"void f(){unsigned int x; scanf(\"%I32u\", &x);}" $) ;
1792: $testFormatStrWarn $(@expr1073743668 "cppcheck-2.8/test/testio.cpp" $, 1792 $, $"void f(){signed long x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long *'.\n" $) ;
1793: $testFormatStrWarn $(@expr1073743669 "cppcheck-2.8/test/testio.cpp" $, 1793 $, $"void f(){unsigned long x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long *'.\n" $) ;
1794: $testFormatStrWarn $(@expr1073743670 "cppcheck-2.8/test/testio.cpp" $, 1794 $, $"void f(){signed long long x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long long *'.\n" $) ;
1795: $testFormatStrWarn $(@expr1073743671 "cppcheck-2.8/test/testio.cpp" $, 1795 $, $"void f(){unsigned long long x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long long *'.\n" $) ;
1796: $testFormatStrWarn $(@expr1073743672 "cppcheck-2.8/test/testio.cpp" $, 1796 $, $"void f(){float x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'float *'.\n" $) ;
1797: $testFormatStrWarn $(@expr1073743673 "cppcheck-2.8/test/testio.cpp" $, 1797 $, $"void f(){double x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'double *'.\n" $) ;
1798: $testFormatStrWarn $(@expr1073743674 "cppcheck-2.8/test/testio.cpp" $, 1798 $, $"void f(){long double x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'long double *'.\n" $) ;
1799: $testFormatStrWarn $(@expr1073743675 "cppcheck-2.8/test/testio.cpp" $, 1799 $, $"void f(){void * x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'void * *'.\n" $) ;
1800: $testFormatStrWarnAka $(@expr1073743676 "cppcheck-2.8/test/testio.cpp" $, 1800 $, $"void f(){size_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1801: $testFormatStrWarnAka $(@expr1073743677 "cppcheck-2.8/test/testio.cpp" $, 1801 $, $"void f(){ssize_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1802: $testFormatStrWarnAka $(@expr1073743678 "cppcheck-2.8/test/testio.cpp" $, 1802 $, $"void f(){ptrdiff_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1803: $testFormatStrWarnAka $(@expr1073743679 "cppcheck-2.8/test/testio.cpp" $, 1803 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1804: $testFormatStrWarnAka $(@expr1073743680 "cppcheck-2.8/test/testio.cpp" $, 1804 $, $"void f(){intmax_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1805: $testFormatStrWarnAka $(@expr1073743681 "cppcheck-2.8/test/testio.cpp" $, 1805 $, $"void f(){uintmax_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1806: $testFormatStrWarnAka $(@expr1073743682 "cppcheck-2.8/test/testio.cpp" $, 1806 $, $"void f(){intptr_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1807: $testFormatStrWarnAka $(@expr1073743683 "cppcheck-2.8/test/testio.cpp" $, 1807 $, $"void f(){uintptr_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" $) ;
1808: $testFormatStrWarnAka $(@expr1073743684 "cppcheck-2.8/test/testio.cpp" $, 1808 $, $"void f(){std::size_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1809: $testFormatStrWarnAka $(@expr1073743685 "cppcheck-2.8/test/testio.cpp" $, 1809 $, $"void f(){std::ssize_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1810: $testFormatStrWarnAka $(@expr1073743686 "cppcheck-2.8/test/testio.cpp" $, 1810 $, $"void f(){std::ptrdiff_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1811: $testFormatStrWarnAka $(@expr1073743687 "cppcheck-2.8/test/testio.cpp" $, 1811 $, $"void f(){std::intmax_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1812: $testFormatStrWarnAka $(@expr1073743688 "cppcheck-2.8/test/testio.cpp" $, 1812 $, $"void f(){std::uintmax_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1813: $testFormatStrWarnAka $(@expr1073743689 "cppcheck-2.8/test/testio.cpp" $, 1813 $, $"void f(){std::intptr_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1814: $testFormatStrWarnAka $(@expr1073743690 "cppcheck-2.8/test/testio.cpp" $, 1814 $, $"void f(){std::uintptr_t x; scanf(\"%I32u\", &x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1815:
1816: $testFormatStrWarn $(@expr1073743691 "cppcheck-2.8/test/testio.cpp" $, 1816 $, $"void f(){bool x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'bool *'.\n" $) ;
1817: $testFormatStrWarn $(@expr1073743692 "cppcheck-2.8/test/testio.cpp" $, 1817 $, $"void f(){char x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'char *'.\n" $) ;
1818: $testFormatStrWarn $(@expr1073743693 "cppcheck-2.8/test/testio.cpp" $, 1818 $, $"void f(){signed char x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed char *'.\n" $) ;
1819: $testFormatStrWarn $(@expr1073743694 "cppcheck-2.8/test/testio.cpp" $, 1819 $, $"void f(){unsigned char x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned char *'.\n" $) ;
1820: $testFormatStrWarn $(@expr1073743695 "cppcheck-2.8/test/testio.cpp" $, 1820 $, $"void f(){signed short x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed short *'.\n" $) ;
1821: $testFormatStrWarn $(@expr1073743696 "cppcheck-2.8/test/testio.cpp" $, 1821 $, $"void f(){unsigned short x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned short *'.\n" $) ;
1822: $testFormatStrWarn $(@expr1073743697 "cppcheck-2.8/test/testio.cpp" $, 1822 $, $"void f(){signed int x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed int *'.\n" $) ;
1823: $testFormatStrNoWarn $(@expr1073743698 "cppcheck-2.8/test/testio.cpp" $, 1823 $, $"void f(){unsigned int x; scanf(\"%I32x\", &x);}" $) ;
1824: $testFormatStrWarn $(@expr1073743699 "cppcheck-2.8/test/testio.cpp" $, 1824 $, $"void f(){signed long x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long *'.\n" $) ;
1825: $testFormatStrWarn $(@expr1073743700 "cppcheck-2.8/test/testio.cpp" $, 1825 $, $"void f(){unsigned long x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long *'.\n" $) ;
1826: $testFormatStrWarn $(@expr1073743701 "cppcheck-2.8/test/testio.cpp" $, 1826 $, $"void f(){signed long long x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long long *'.\n" $) ;
1827: $testFormatStrWarn $(@expr1073743702 "cppcheck-2.8/test/testio.cpp" $, 1827 $, $"void f(){unsigned long long x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long long *'.\n" $) ;
1828: $testFormatStrWarn $(@expr1073743703 "cppcheck-2.8/test/testio.cpp" $, 1828 $, $"void f(){float x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'float *'.\n" $) ;
1829: $testFormatStrWarn $(@expr1073743704 "cppcheck-2.8/test/testio.cpp" $, 1829 $, $"void f(){double x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'double *'.\n" $) ;
1830: $testFormatStrWarn $(@expr1073743705 "cppcheck-2.8/test/testio.cpp" $, 1830 $, $"void f(){long double x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'long double *'.\n" $) ;
1831: $testFormatStrWarn $(@expr1073743706 "cppcheck-2.8/test/testio.cpp" $, 1831 $, $"void f(){void * x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'void * *'.\n" $) ;
1832: $testFormatStrWarnAka $(@expr1073743707 "cppcheck-2.8/test/testio.cpp" $, 1832 $, $"void f(){size_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1833: $testFormatStrWarnAka $(@expr1073743708 "cppcheck-2.8/test/testio.cpp" $, 1833 $, $"void f(){ssize_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1834: $testFormatStrWarnAka $(@expr1073743709 "cppcheck-2.8/test/testio.cpp" $, 1834 $, $"void f(){ptrdiff_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1835: $testFormatStrWarnAka $(@expr1073743710 "cppcheck-2.8/test/testio.cpp" $, 1835 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1836: $testFormatStrWarnAka $(@expr1073743711 "cppcheck-2.8/test/testio.cpp" $, 1836 $, $"void f(){intmax_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1837: $testFormatStrWarnAka $(@expr1073743712 "cppcheck-2.8/test/testio.cpp" $, 1837 $, $"void f(){uintmax_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1838: $testFormatStrWarnAka $(@expr1073743713 "cppcheck-2.8/test/testio.cpp" $, 1838 $, $"void f(){intptr_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1839: $testFormatStrWarnAka $(@expr1073743714 "cppcheck-2.8/test/testio.cpp" $, 1839 $, $"void f(){uintptr_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" $) ;
1840: $testFormatStrWarnAka $(@expr1073743715 "cppcheck-2.8/test/testio.cpp" $, 1840 $, $"void f(){std::size_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1841: $testFormatStrWarnAka $(@expr1073743716 "cppcheck-2.8/test/testio.cpp" $, 1841 $, $"void f(){std::ssize_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1842: $testFormatStrWarnAka $(@expr1073743717 "cppcheck-2.8/test/testio.cpp" $, 1842 $, $"void f(){std::ptrdiff_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1843: $testFormatStrWarnAka $(@expr1073743718 "cppcheck-2.8/test/testio.cpp" $, 1843 $, $"void f(){std::intmax_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1844: $testFormatStrWarnAka $(@expr1073743719 "cppcheck-2.8/test/testio.cpp" $, 1844 $, $"void f(){std::uintmax_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1845: $testFormatStrWarnAka $(@expr1073743720 "cppcheck-2.8/test/testio.cpp" $, 1845 $, $"void f(){std::intptr_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1846: $testFormatStrWarnAka $(@expr1073743721 "cppcheck-2.8/test/testio.cpp" $, 1846 $, $"void f(){std::uintptr_t x; scanf(\"%I32x\", &x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1847:
1848: $testFormatStrWarn $(@expr1073743722 "cppcheck-2.8/test/testio.cpp" $, 1848 $, $"void f(){bool x; scanf(\"%I32d\", &x);}" $, $"[test.cpp:1]: (warning) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'bool *'.\n" $) ;
1849: $testFormatStrWarn $(@expr1073743723 "cppcheck-2.8/test/testio.cpp" $, 1849 $, $"void f(){void * x; scanf(\"%I32d\", &x);}" $, $"[test.cpp:1]: (warning) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'void * *'.\n" $) ;
1850: $testFormatStrWarnAka $(@expr1073743724 "cppcheck-2.8/test/testio.cpp" $, 1850 $, $"void f(){size_t x; scanf(\"%I32d\", &x);}" $, $"[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1851:
1852: $testFormatStrWarnAka $(@expr1073743725 "cppcheck-2.8/test/testio.cpp" $, 1852 $, $"void f(){ptrdiff_t x; scanf(\"%I32d\", &x);}" $, $"[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1853: $testFormatStrNoWarn $(@expr1073743726 "cppcheck-2.8/test/testio.cpp" $, 1853 $, $"void f(){__int32 x; scanf(\"%I32d\", &x);}" $) ;
1854:
1855: $testFormatStrWarn $(@expr1073743727 "cppcheck-2.8/test/testio.cpp" $, 1855 $, $"void f(){bool x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'bool *'.\n" $) ;
1856: $testFormatStrWarn $(@expr1073743728 "cppcheck-2.8/test/testio.cpp" $, 1856 $, $"void f(){char x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'char *'.\n" $) ;
1857: $testFormatStrWarn $(@expr1073743729 "cppcheck-2.8/test/testio.cpp" $, 1857 $, $"void f(){signed char x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed char *'.\n" $) ;
1858: $testFormatStrWarn $(@expr1073743730 "cppcheck-2.8/test/testio.cpp" $, 1858 $, $"void f(){unsigned char x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned char *'.\n" $) ;
1859: $testFormatStrWarn $(@expr1073743731 "cppcheck-2.8/test/testio.cpp" $, 1859 $, $"void f(){signed short x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed short *'.\n" $) ;
1860: $testFormatStrWarn $(@expr1073743732 "cppcheck-2.8/test/testio.cpp" $, 1860 $, $"void f(){unsigned short x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned short *'.\n" $) ;
1861: $testFormatStrNoWarn $(@expr1073743733 "cppcheck-2.8/test/testio.cpp" $, 1861 $, $"void f(){signed int x; scanf(\"%d\", &x);}" $) ;
1862: $testFormatStrWarn $(@expr1073743734 "cppcheck-2.8/test/testio.cpp" $, 1862 $, $"void f(){unsigned int x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'.\n" $) ;
1863: $testFormatStrWarn $(@expr1073743735 "cppcheck-2.8/test/testio.cpp" $, 1863 $, $"void f(){signed long x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed long *'.\n" $) ;
1864: $testFormatStrWarn $(@expr1073743736 "cppcheck-2.8/test/testio.cpp" $, 1864 $, $"void f(){unsigned long x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned long *'.\n" $) ;
1865: $testFormatStrWarn $(@expr1073743737 "cppcheck-2.8/test/testio.cpp" $, 1865 $, $"void f(){signed long long x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed long long *'.\n" $) ;
1866: $testFormatStrWarn $(@expr1073743738 "cppcheck-2.8/test/testio.cpp" $, 1866 $, $"void f(){unsigned long long x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned long long *'.\n" $) ;
1867: $testFormatStrWarn $(@expr1073743739 "cppcheck-2.8/test/testio.cpp" $, 1867 $, $"void f(){float x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'float *'.\n" $) ;
1868: $testFormatStrWarn $(@expr1073743740 "cppcheck-2.8/test/testio.cpp" $, 1868 $, $"void f(){double x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'double *'.\n" $) ;
1869: $testFormatStrWarn $(@expr1073743741 "cppcheck-2.8/test/testio.cpp" $, 1869 $, $"void f(){long double x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'long double *'.\n" $) ;
1870: $testFormatStrWarn $(@expr1073743742 "cppcheck-2.8/test/testio.cpp" $, 1870 $, $"void f(){void * x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'void * *'.\n" $) ;
1871: $testFormatStrWarnAka $(@expr1073743743 "cppcheck-2.8/test/testio.cpp" $, 1871 $, $"void f(){size_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1872: $testFormatStrWarnAka $(@expr1073743744 "cppcheck-2.8/test/testio.cpp" $, 1872 $, $"void f(){ssize_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1873: $testFormatStrWarnAka $(@expr1073743745 "cppcheck-2.8/test/testio.cpp" $, 1873 $, $"void f(){ptrdiff_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1874: $testFormatStrWarnAka $(@expr1073743746 "cppcheck-2.8/test/testio.cpp" $, 1874 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1875: $testFormatStrWarnAka $(@expr1073743747 "cppcheck-2.8/test/testio.cpp" $, 1875 $, $"void f(){intmax_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1876: $testFormatStrWarnAka $(@expr1073743748 "cppcheck-2.8/test/testio.cpp" $, 1876 $, $"void f(){uintmax_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1877: $testFormatStrWarnAka $(@expr1073743749 "cppcheck-2.8/test/testio.cpp" $, 1877 $, $"void f(){std::size_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1878: $testFormatStrWarnAka $(@expr1073743750 "cppcheck-2.8/test/testio.cpp" $, 1878 $, $"void f(){std::ssize_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1879: $testFormatStrWarnAka $(@expr1073743751 "cppcheck-2.8/test/testio.cpp" $, 1879 $, $"void f(){std::ptrdiff_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1880: $testFormatStrWarnAka $(@expr1073743752 "cppcheck-2.8/test/testio.cpp" $, 1880 $, $"void f(){std::intptr_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1881: $testFormatStrWarnAka $(@expr1073743753 "cppcheck-2.8/test/testio.cpp" $, 1881 $, $"void f(){std::uintptr_t x; scanf(\"%d\", &x);}" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1882:
1883: $check_ $(@expr1073743754 "cppcheck-2.8/test/testio.cpp" $, 1883 $, "void foo() {\n    scanf(\"%d\", \"s3\");\n    scanf(\"%d\", L\"s5W\");\n}" , true $)
1884:
1885:
1886: ;
1887: $if $(@expr1073743755 $!@expr1073743756 $assertEquals $(@expr1073743757 "cppcheck-2.8/test/testio.cpp" $, 1887 $, "[test.cpp:2]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
1888: ; }
1889:
1890: $check_ $(@expr1073743760 "cppcheck-2.8/test/testio.cpp" $, 1890 $, "void foo(long l) {\n    scanf(\"%d\", l);\n}" , true $)
1891:
1892: ;
1893: $if $(@expr1073743761 $!@expr1073743762 $assertEquals $(@expr1073743763 "cppcheck-2.8/test/testio.cpp" $, 1893 $, "[test.cpp:2]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed long'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
1894:
1895: $testFormatStrWarn $(@expr1073743766 "cppcheck-2.8/test/testio.cpp" $, 1895 $, $"void f(){bool x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'bool *'.\n" $) ;
1896: $testFormatStrWarn $(@expr1073743767 "cppcheck-2.8/test/testio.cpp" $, 1896 $, $"void f(){char x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'char *'.\n" $) ;
1897: $testFormatStrWarn $(@expr1073743768 "cppcheck-2.8/test/testio.cpp" $, 1897 $, $"void f(){signed char x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed char *'.\n" $) ;
1898: $testFormatStrWarn $(@expr1073743769 "cppcheck-2.8/test/testio.cpp" $, 1898 $, $"void f(){unsigned char x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned char *'.\n" $) ;
1899: $testFormatStrWarn $(@expr1073743770 "cppcheck-2.8/test/testio.cpp" $, 1899 $, $"void f(){signed short x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed short *'.\n" $) ;
1900: $testFormatStrWarn $(@expr1073743771 "cppcheck-2.8/test/testio.cpp" $, 1900 $, $"void f(){unsigned short x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned short *'.\n" $) ;
1901: $testFormatStrWarn $(@expr1073743772 "cppcheck-2.8/test/testio.cpp" $, 1901 $, $"void f(){signed int x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'.\n" $) ;
1902: $testFormatStrNoWarn $(@expr1073743773 "cppcheck-2.8/test/testio.cpp" $, 1902 $, $"void f(){unsigned int x; scanf(\"%x\", &x);}" $) ;
1903: $testFormatStrWarn $(@expr1073743774 "cppcheck-2.8/test/testio.cpp" $, 1903 $, $"void f(){signed long x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long *'.\n" $) ;
1904: $testFormatStrWarn $(@expr1073743775 "cppcheck-2.8/test/testio.cpp" $, 1904 $, $"void f(){unsigned long x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long *'.\n" $) ;
1905: $testFormatStrWarn $(@expr1073743776 "cppcheck-2.8/test/testio.cpp" $, 1905 $, $"void f(){signed long long x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long long *'.\n" $) ;
1906: $testFormatStrWarn $(@expr1073743777 "cppcheck-2.8/test/testio.cpp" $, 1906 $, $"void f(){unsigned long long x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long long *'.\n" $) ;
1907: $testFormatStrWarn $(@expr1073743778 "cppcheck-2.8/test/testio.cpp" $, 1907 $, $"void f(){float x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'float *'.\n" $) ;
1908: $testFormatStrWarn $(@expr1073743779 "cppcheck-2.8/test/testio.cpp" $, 1908 $, $"void f(){double x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'double *'.\n" $) ;
1909: $testFormatStrWarn $(@expr1073743780 "cppcheck-2.8/test/testio.cpp" $, 1909 $, $"void f(){long double x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'long double *'.\n" $) ;
1910: $testFormatStrWarn $(@expr1073743781 "cppcheck-2.8/test/testio.cpp" $, 1910 $, $"void f(){void * x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'void * *'.\n" $) ;
1911: $testFormatStrWarnAka $(@expr1073743782 "cppcheck-2.8/test/testio.cpp" $, 1911 $, $"void f(){size_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1912: $testFormatStrWarnAka $(@expr1073743783 "cppcheck-2.8/test/testio.cpp" $, 1912 $, $"void f(){ssize_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1913: $testFormatStrWarnAka $(@expr1073743784 "cppcheck-2.8/test/testio.cpp" $, 1913 $, $"void f(){ptrdiff_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1914: $testFormatStrWarnAka $(@expr1073743785 "cppcheck-2.8/test/testio.cpp" $, 1914 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1915: $testFormatStrWarnAka $(@expr1073743786 "cppcheck-2.8/test/testio.cpp" $, 1915 $, $"void f(){intmax_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1916: $testFormatStrWarnAka $(@expr1073743787 "cppcheck-2.8/test/testio.cpp" $, 1916 $, $"void f(){uintmax_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1917: $testFormatStrWarnAka $(@expr1073743788 "cppcheck-2.8/test/testio.cpp" $, 1917 $, $"void f(){intptr_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" $) ;
1918: $testFormatStrWarnAka $(@expr1073743789 "cppcheck-2.8/test/testio.cpp" $, 1918 $, $"void f(){uintptr_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" $) ;
1919: $testFormatStrWarnAka $(@expr1073743790 "cppcheck-2.8/test/testio.cpp" $, 1919 $, $"void f(){std::size_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1920: $testFormatStrWarnAka $(@expr1073743791 "cppcheck-2.8/test/testio.cpp" $, 1920 $, $"void f(){std::ssize_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1921: $testFormatStrWarnAka $(@expr1073743792 "cppcheck-2.8/test/testio.cpp" $, 1921 $, $"void f(){std::ptrdiff_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1922: $testFormatStrWarnAka $(@expr1073743793 "cppcheck-2.8/test/testio.cpp" $, 1922 $, $"void f(){std::intmax_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" $) ;
1923: $testFormatStrWarnAka $(@expr1073743794 "cppcheck-2.8/test/testio.cpp" $, 1923 $, $"void f(){std::uintmax_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" $) ;
1924: $testFormatStrWarnAka $(@expr1073743795 "cppcheck-2.8/test/testio.cpp" $, 1924 $, $"void f(){std::intptr_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1925: $testFormatStrWarnAka $(@expr1073743796 "cppcheck-2.8/test/testio.cpp" $, 1925 $, $"void f(){std::uintptr_t x; scanf(\"%x\", &x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1926:
1927: $check_ $(@expr1073743797 "cppcheck-2.8/test/testio.cpp" $, 1927 $, "void foo() {\n    scanf(\"%x\", \"s3\");\n    scanf(\"%x\", L\"s5W\");\n}" , true $)
1928:
1929:
1930: ;
1931: $if $(@expr1073743798 $!@expr1073743799 $assertEquals $(@expr1073743800 "cppcheck-2.8/test/testio.cpp" $, 1931 $, "[test.cpp:2]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
1932: ; }
1933:
1934: $check_ $(@expr1073743803 "cppcheck-2.8/test/testio.cpp" $, 1934 $, "void foo(long l) {\n    scanf(\"%x\", l);\n}" , true $)
1935:
1936: ;
1937: $if $(@expr1073743804 $!@expr1073743805 $assertEquals $(@expr1073743806 "cppcheck-2.8/test/testio.cpp" $, 1937 $, "[test.cpp:2]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
1938:
1939: $testFormatStrWarn $(@expr1073743809 "cppcheck-2.8/test/testio.cpp" $, 1939 $, $"void f(){bool x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'bool *'.\n" $) ;
1940: $testFormatStrWarn $(@expr1073743810 "cppcheck-2.8/test/testio.cpp" $, 1940 $, $"void f(){char x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'char *'.\n" $) ;
1941: $testFormatStrWarn $(@expr1073743811 "cppcheck-2.8/test/testio.cpp" $, 1941 $, $"void f(){signed char x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed char *'.\n" $) ;
1942: $testFormatStrWarn $(@expr1073743812 "cppcheck-2.8/test/testio.cpp" $, 1942 $, $"void f(){unsigned char x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned char *'.\n" $) ;
1943: $testFormatStrWarn $(@expr1073743813 "cppcheck-2.8/test/testio.cpp" $, 1943 $, $"void f(){signed short x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed short *'.\n" $) ;
1944: $testFormatStrWarn $(@expr1073743814 "cppcheck-2.8/test/testio.cpp" $, 1944 $, $"void f(){unsigned short x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned short *'.\n" $) ;
1945: $testFormatStrWarn $(@expr1073743815 "cppcheck-2.8/test/testio.cpp" $, 1945 $, $"void f(){signed int x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed int *'.\n" $) ;
1946: $testFormatStrWarn $(@expr1073743816 "cppcheck-2.8/test/testio.cpp" $, 1946 $, $"void f(){unsigned int x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned int *'.\n" $) ;
1947: $testFormatStrWarn $(@expr1073743817 "cppcheck-2.8/test/testio.cpp" $, 1947 $, $"void f(){signed long x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed long *'.\n" $) ;
1948: $testFormatStrWarn $(@expr1073743818 "cppcheck-2.8/test/testio.cpp" $, 1948 $, $"void f(){unsigned long x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned long *'.\n" $) ;
1949: $testFormatStrWarn $(@expr1073743819 "cppcheck-2.8/test/testio.cpp" $, 1949 $, $"void f(){signed long long x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed long long *'.\n" $) ;
1950: $testFormatStrWarn $(@expr1073743820 "cppcheck-2.8/test/testio.cpp" $, 1950 $, $"void f(){unsigned long long x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned long long *'.\n" $) ;
1951: $testFormatStrNoWarn $(@expr1073743821 "cppcheck-2.8/test/testio.cpp" $, 1951 $, $"void f(){float x; scanf(\"%f\", &x);}" $) ;
1952: $testFormatStrWarn $(@expr1073743822 "cppcheck-2.8/test/testio.cpp" $, 1952 $, $"void f(){double x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'double *'.\n" $) ;
1953: $testFormatStrWarn $(@expr1073743823 "cppcheck-2.8/test/testio.cpp" $, 1953 $, $"void f(){long double x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'long double *'.\n" $) ;
1954: $testFormatStrWarn $(@expr1073743824 "cppcheck-2.8/test/testio.cpp" $, 1954 $, $"void f(){void * x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'void * *'.\n" $) ;
1955: $testFormatStrWarnAka $(@expr1073743825 "cppcheck-2.8/test/testio.cpp" $, 1955 $, $"void f(){size_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1956: $testFormatStrWarnAka $(@expr1073743826 "cppcheck-2.8/test/testio.cpp" $, 1956 $, $"void f(){ssize_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1957: $testFormatStrWarnAka $(@expr1073743827 "cppcheck-2.8/test/testio.cpp" $, 1957 $, $"void f(){ptrdiff_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1958: $testFormatStrWarnAka $(@expr1073743828 "cppcheck-2.8/test/testio.cpp" $, 1958 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1959: $testFormatStrWarnAka $(@expr1073743829 "cppcheck-2.8/test/testio.cpp" $, 1959 $, $"void f(){intmax_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
1960: $testFormatStrWarnAka $(@expr1073743830 "cppcheck-2.8/test/testio.cpp" $, 1960 $, $"void f(){uintmax_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
1961: $testFormatStrWarnAka $(@expr1073743831 "cppcheck-2.8/test/testio.cpp" $, 1961 $, $"void f(){std::size_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
1962: $testFormatStrWarnAka $(@expr1073743832 "cppcheck-2.8/test/testio.cpp" $, 1962 $, $"void f(){std::ssize_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
1963: $testFormatStrWarnAka $(@expr1073743833 "cppcheck-2.8/test/testio.cpp" $, 1963 $, $"void f(){std::ptrdiff_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
1964: $testFormatStrWarnAka $(@expr1073743834 "cppcheck-2.8/test/testio.cpp" $, 1964 $, $"void f(){std::intptr_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
1965: $testFormatStrWarnAka $(@expr1073743835 "cppcheck-2.8/test/testio.cpp" $, 1965 $, $"void f(){std::uintptr_t x; scanf(\"%f\", &x);}" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
1966:
1967: $check_ $(@expr1073743836 "cppcheck-2.8/test/testio.cpp" $, 1967 $, "void foo() {\n    scanf(\"%f\", \"s3\");\n    scanf(\"%f\", L\"s5W\");\n}" , true $)
1968:
1969:
1970: ;
1971: $if $(@expr1073743837 $!@expr1073743838 $assertEquals $(@expr1073743839 "cppcheck-2.8/test/testio.cpp" $, 1971 $, "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
1972: ; }
1973:
1974: $check_ $(@expr1073743842 "cppcheck-2.8/test/testio.cpp" $, 1974 $, "void foo(float f) {\n    scanf(\"%f\", f);\n}" , true $)
1975:
1976: ;
1977: $if $(@expr1073743843 $!@expr1073743844 $assertEquals $(@expr1073743845 "cppcheck-2.8/test/testio.cpp" $, 1977 $, "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'float'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
1978:
1979: $testFormatStrWarn $(@expr1073743848 "cppcheck-2.8/test/testio.cpp" $, 1979 $, $"void f(){bool x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'bool *'.\n" $) ;
1980: $testFormatStrWarn $(@expr1073743849 "cppcheck-2.8/test/testio.cpp" $, 1980 $, $"void f(){char x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'char *'.\n" $) ;
1981: $testFormatStrWarn $(@expr1073743850 "cppcheck-2.8/test/testio.cpp" $, 1981 $, $"void f(){signed char x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed char *'.\n" $) ;
1982: $testFormatStrWarn $(@expr1073743851 "cppcheck-2.8/test/testio.cpp" $, 1982 $, $"void f(){unsigned char x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned char *'.\n" $) ;
1983: $testFormatStrWarn $(@expr1073743852 "cppcheck-2.8/test/testio.cpp" $, 1983 $, $"void f(){signed short x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed short *'.\n" $) ;
1984: $testFormatStrWarn $(@expr1073743853 "cppcheck-2.8/test/testio.cpp" $, 1984 $, $"void f(){unsigned short x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned short *'.\n" $) ;
1985: $testFormatStrWarn $(@expr1073743854 "cppcheck-2.8/test/testio.cpp" $, 1985 $, $"void f(){signed int x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed int *'.\n" $) ;
1986: $testFormatStrWarn $(@expr1073743855 "cppcheck-2.8/test/testio.cpp" $, 1986 $, $"void f(){unsigned int x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned int *'.\n" $) ;
1987: $testFormatStrWarn $(@expr1073743856 "cppcheck-2.8/test/testio.cpp" $, 1987 $, $"void f(){signed long x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed long *'.\n" $) ;
1988: $testFormatStrWarn $(@expr1073743857 "cppcheck-2.8/test/testio.cpp" $, 1988 $, $"void f(){unsigned long x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned long *'.\n" $) ;
1989: $testFormatStrWarn $(@expr1073743858 "cppcheck-2.8/test/testio.cpp" $, 1989 $, $"void f(){signed long long x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed long long *'.\n" $) ;
1990: $testFormatStrWarn $(@expr1073743859 "cppcheck-2.8/test/testio.cpp" $, 1990 $, $"void f(){unsigned long long x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned long long *'.\n" $) ;
1991: $testFormatStrWarn $(@expr1073743860 "cppcheck-2.8/test/testio.cpp" $, 1991 $, $"void f(){float x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'float *'.\n" $) ;
1992: $testFormatStrNoWarn $(@expr1073743861 "cppcheck-2.8/test/testio.cpp" $, 1992 $, $"void f(){double x; scanf(\"%lf\", &x);}" $) ;
1993: $testFormatStrWarn $(@expr1073743862 "cppcheck-2.8/test/testio.cpp" $, 1993 $, $"void f(){long double x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'long double *'.\n" $) ;
1994: $testFormatStrWarn $(@expr1073743863 "cppcheck-2.8/test/testio.cpp" $, 1994 $, $"void f(){void * x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'void * *'.\n" $) ;
1995: $testFormatStrWarnAka $(@expr1073743864 "cppcheck-2.8/test/testio.cpp" $, 1995 $, $"void f(){size_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
1996: $testFormatStrWarnAka $(@expr1073743865 "cppcheck-2.8/test/testio.cpp" $, 1996 $, $"void f(){ssize_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
1997: $testFormatStrWarnAka $(@expr1073743866 "cppcheck-2.8/test/testio.cpp" $, 1997 $, $"void f(){ptrdiff_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
1998: $testFormatStrWarnAka $(@expr1073743867 "cppcheck-2.8/test/testio.cpp" $, 1998 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
1999: $testFormatStrWarnAka $(@expr1073743868 "cppcheck-2.8/test/testio.cpp" $, 1999 $, $"void f(){intmax_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
2000: $testFormatStrWarnAka $(@expr1073743869 "cppcheck-2.8/test/testio.cpp" $, 2000 $, $"void f(){uintmax_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
2001: $testFormatStrWarnAka $(@expr1073743870 "cppcheck-2.8/test/testio.cpp" $, 2001 $, $"void f(){std::size_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
2002: $testFormatStrWarnAka $(@expr1073743871 "cppcheck-2.8/test/testio.cpp" $, 2002 $, $"void f(){std::ssize_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
2003: $testFormatStrWarnAka $(@expr1073743872 "cppcheck-2.8/test/testio.cpp" $, 2003 $, $"void f(){std::ptrdiff_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
2004: $testFormatStrWarnAka $(@expr1073743873 "cppcheck-2.8/test/testio.cpp" $, 2004 $, $"void f(){std::intptr_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
2005: $testFormatStrWarnAka $(@expr1073743874 "cppcheck-2.8/test/testio.cpp" $, 2005 $, $"void f(){std::uintptr_t x; scanf(\"%lf\", &x);}" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
2006:
2007: $testFormatStrWarn $(@expr1073743875 "cppcheck-2.8/test/testio.cpp" $, 2007 $, $"void f(){bool x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'bool *'.\n" $) ;
2008: $testFormatStrWarn $(@expr1073743876 "cppcheck-2.8/test/testio.cpp" $, 2008 $, $"void f(){char x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'char *'.\n" $) ;
2009: $testFormatStrWarn $(@expr1073743877 "cppcheck-2.8/test/testio.cpp" $, 2009 $, $"void f(){signed char x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed char *'.\n" $) ;
2010: $testFormatStrWarn $(@expr1073743878 "cppcheck-2.8/test/testio.cpp" $, 2010 $, $"void f(){unsigned char x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned char *'.\n" $) ;
2011: $testFormatStrWarn $(@expr1073743879 "cppcheck-2.8/test/testio.cpp" $, 2011 $, $"void f(){signed short x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed short *'.\n" $) ;
2012: $testFormatStrWarn $(@expr1073743880 "cppcheck-2.8/test/testio.cpp" $, 2012 $, $"void f(){unsigned short x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned short *'.\n" $) ;
2013: $testFormatStrWarn $(@expr1073743881 "cppcheck-2.8/test/testio.cpp" $, 2013 $, $"void f(){signed int x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed int *'.\n" $) ;
2014: $testFormatStrWarn $(@expr1073743882 "cppcheck-2.8/test/testio.cpp" $, 2014 $, $"void f(){unsigned int x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned int *'.\n" $) ;
2015: $testFormatStrWarn $(@expr1073743883 "cppcheck-2.8/test/testio.cpp" $, 2015 $, $"void f(){signed long x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed long *'.\n" $) ;
2016: $testFormatStrWarn $(@expr1073743884 "cppcheck-2.8/test/testio.cpp" $, 2016 $, $"void f(){unsigned long x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned long *'.\n" $) ;
2017: $testFormatStrWarn $(@expr1073743885 "cppcheck-2.8/test/testio.cpp" $, 2017 $, $"void f(){signed long long x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed long long *'.\n" $) ;
2018: $testFormatStrWarn $(@expr1073743886 "cppcheck-2.8/test/testio.cpp" $, 2018 $, $"void f(){unsigned long long x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned long long *'.\n" $) ;
2019: $testFormatStrWarn $(@expr1073743887 "cppcheck-2.8/test/testio.cpp" $, 2019 $, $"void f(){float x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'float *'.\n" $) ;
2020: $testFormatStrWarn $(@expr1073743888 "cppcheck-2.8/test/testio.cpp" $, 2020 $, $"void f(){double x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'double *'.\n" $) ;
2021: $testFormatStrNoWarn $(@expr1073743889 "cppcheck-2.8/test/testio.cpp" $, 2021 $, $"void f(){long double x; scanf(\"%Lf\", &x);}" $) ;
2022: $testFormatStrWarn $(@expr1073743890 "cppcheck-2.8/test/testio.cpp" $, 2022 $, $"void f(){void * x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'void * *'.\n" $) ;
2023: $testFormatStrWarnAka $(@expr1073743891 "cppcheck-2.8/test/testio.cpp" $, 2023 $, $"void f(){size_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
2024: $testFormatStrWarnAka $(@expr1073743892 "cppcheck-2.8/test/testio.cpp" $, 2024 $, $"void f(){ssize_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
2025: $testFormatStrWarnAka $(@expr1073743893 "cppcheck-2.8/test/testio.cpp" $, 2025 $, $"void f(){ptrdiff_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
2026: $testFormatStrWarnAka $(@expr1073743894 "cppcheck-2.8/test/testio.cpp" $, 2026 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
2027: $testFormatStrWarnAka $(@expr1073743895 "cppcheck-2.8/test/testio.cpp" $, 2027 $, $"void f(){intmax_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
2028: $testFormatStrWarnAka $(@expr1073743896 "cppcheck-2.8/test/testio.cpp" $, 2028 $, $"void f(){uintmax_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
2029: $testFormatStrWarnAka $(@expr1073743897 "cppcheck-2.8/test/testio.cpp" $, 2029 $, $"void f(){std::size_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
2030: $testFormatStrWarnAka $(@expr1073743898 "cppcheck-2.8/test/testio.cpp" $, 2030 $, $"void f(){std::ssize_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
2031: $testFormatStrWarnAka $(@expr1073743899 "cppcheck-2.8/test/testio.cpp" $, 2031 $, $"void f(){std::ptrdiff_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
2032: $testFormatStrWarnAka $(@expr1073743900 "cppcheck-2.8/test/testio.cpp" $, 2032 $, $"void f(){std::intptr_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
2033: $testFormatStrWarnAka $(@expr1073743901 "cppcheck-2.8/test/testio.cpp" $, 2033 $, $"void f(){std::uintptr_t x; scanf(\"%Lf\", &x);}" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
2034:
2035: $testFormatStrWarn $(@expr1073743902 "cppcheck-2.8/test/testio.cpp" $, 2035 $, $"void f(){bool x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'bool *'.\n" $) ;
2036: $testFormatStrWarn $(@expr1073743903 "cppcheck-2.8/test/testio.cpp" $, 2036 $, $"void f(){char x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'char *'.\n" $) ;
2037: $testFormatStrWarn $(@expr1073743904 "cppcheck-2.8/test/testio.cpp" $, 2037 $, $"void f(){signed char x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed char *'.\n" $) ;
2038: $testFormatStrWarn $(@expr1073743905 "cppcheck-2.8/test/testio.cpp" $, 2038 $, $"void f(){unsigned char x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned char *'.\n" $) ;
2039: $testFormatStrWarn $(@expr1073743906 "cppcheck-2.8/test/testio.cpp" $, 2039 $, $"void f(){signed short x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed short *'.\n" $) ;
2040: $testFormatStrWarn $(@expr1073743907 "cppcheck-2.8/test/testio.cpp" $, 2040 $, $"void f(){unsigned short x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned short *'.\n" $) ;
2041: $testFormatStrNoWarn $(@expr1073743908 "cppcheck-2.8/test/testio.cpp" $, 2041 $, $"void f(){signed int x; scanf(\"%n\", &x);}" $) ;
2042: $testFormatStrWarn $(@expr1073743909 "cppcheck-2.8/test/testio.cpp" $, 2042 $, $"void f(){unsigned int x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'.\n" $) ;
2043: $testFormatStrWarn $(@expr1073743910 "cppcheck-2.8/test/testio.cpp" $, 2043 $, $"void f(){signed long x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed long *'.\n" $) ;
2044: $testFormatStrWarn $(@expr1073743911 "cppcheck-2.8/test/testio.cpp" $, 2044 $, $"void f(){unsigned long x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned long *'.\n" $) ;
2045: $testFormatStrWarn $(@expr1073743912 "cppcheck-2.8/test/testio.cpp" $, 2045 $, $"void f(){signed long long x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed long long *'.\n" $) ;
2046: $testFormatStrWarn $(@expr1073743913 "cppcheck-2.8/test/testio.cpp" $, 2046 $, $"void f(){unsigned long long x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned long long *'.\n" $) ;
2047: $testFormatStrWarn $(@expr1073743914 "cppcheck-2.8/test/testio.cpp" $, 2047 $, $"void f(){float x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'float *'.\n" $) ;
2048: $testFormatStrWarn $(@expr1073743915 "cppcheck-2.8/test/testio.cpp" $, 2048 $, $"void f(){double x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'double *'.\n" $) ;
2049: $testFormatStrWarn $(@expr1073743916 "cppcheck-2.8/test/testio.cpp" $, 2049 $, $"void f(){long double x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'long double *'.\n" $) ;
2050: $testFormatStrWarn $(@expr1073743917 "cppcheck-2.8/test/testio.cpp" $, 2050 $, $"void f(){void * x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'void * *'.\n" $) ;
2051: $testFormatStrWarnAka $(@expr1073743918 "cppcheck-2.8/test/testio.cpp" $, 2051 $, $"void f(){size_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" $) ;
2052: $testFormatStrWarnAka $(@expr1073743919 "cppcheck-2.8/test/testio.cpp" $, 2052 $, $"void f(){ssize_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" $) ;
2053: $testFormatStrWarnAka $(@expr1073743920 "cppcheck-2.8/test/testio.cpp" $, 2053 $, $"void f(){ptrdiff_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" $) ;
2054: $testFormatStrWarnAka $(@expr1073743921 "cppcheck-2.8/test/testio.cpp" $, 2054 $, $"void f(){unsigned ptrdiff_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" $) ;
2055: $testFormatStrWarnAka $(@expr1073743922 "cppcheck-2.8/test/testio.cpp" $, 2055 $, $"void f(){intmax_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" $) ;
2056: $testFormatStrWarnAka $(@expr1073743923 "cppcheck-2.8/test/testio.cpp" $, 2056 $, $"void f(){uintmax_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" $) ;
2057: $testFormatStrWarnAka $(@expr1073743924 "cppcheck-2.8/test/testio.cpp" $, 2057 $, $"void f(){std::size_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" $) ;
2058: $testFormatStrWarnAka $(@expr1073743925 "cppcheck-2.8/test/testio.cpp" $, 2058 $, $"void f(){std::ssize_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" $) ;
2059: $testFormatStrWarnAka $(@expr1073743926 "cppcheck-2.8/test/testio.cpp" $, 2059 $, $"void f(){std::ptrdiff_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" $) ;
2060: $testFormatStrWarnAka $(@expr1073743927 "cppcheck-2.8/test/testio.cpp" $, 2060 $, $"void f(){std::intptr_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" $) ;
2061: $testFormatStrWarnAka $(@expr1073743928 "cppcheck-2.8/test/testio.cpp" $, 2061 $, $"void f(){std::uintptr_t x; scanf(\"%n\", &x);}" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" $, $"[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" $) ;
2062:
2063: $check_ $(@expr1073743929 "cppcheck-2.8/test/testio.cpp" $, 2063 $, "void foo() {\n    scanf(\"%n\", \"s3\");\n    scanf(\"%n\", L\"s5W\");\n}" , true $)
2064:
2065:
2066: ;
2067: $if $(@expr1073743930 $!@expr1073743931 $assertEquals $(@expr1073743932 "cppcheck-2.8/test/testio.cpp" $, 2067 $, "[test.cpp:2]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
2068: ; }
2069:
2070: $check_ $(@expr1073743935 "cppcheck-2.8/test/testio.cpp" $, 2070 $, "void foo(long l) {\n    scanf(\"%n\", l);\n}" , true $)
2071:
2072: ;
2073: $if $(@expr1073743936 $!@expr1073743937 $assertEquals $(@expr1073743938 "cppcheck-2.8/test/testio.cpp" $, 2073 $, "[test.cpp:2]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed long'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
2074:
2075: $check_ $(@expr1073743941 "cppcheck-2.8/test/testio.cpp" $, 2075 $, "void g() {\n    myvector<int> v1(1);\n    scanf(\"%d\",&v1[0]);\n    myvector<unsigned int> v2(1);\n    scanf(\"%u\",&v2[0]);\n    myvector<unsigned int> v3(1);\n    scanf(\"%x\",&v3[0]);\n    myvector<double> v4(1);\n    scanf(\"%lf\",&v4[0]);\n    myvector<char *> v5(1);\n    scanf(\"%10s\",v5[0]);\n}" $)
2076:
|
2085:
2086: ;
2087: $if $(@expr1073743942 $!@expr1073743943 $assertEquals $(@expr1073743944 "cppcheck-2.8/test/testio.cpp" $, 2087 $, "" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
2088:
2089: {
2090: const char * code@var136 ; code@var136 =@expr1073743947 "void g() {\n    size_t s1;\n    ptrdiff_t s2;\n    ssize_t s3;\n    scanf(\"%zd\", &s1);\n    scanf(\"%zd\", &s2);\n    scanf(\"%zd\", &s3);\n}\n"
2091:
|
2096:
2097: ;
2098: const char * result@var137 (@expr1073743948 "[test.cpp:5]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n[test.cpp:6]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
2099: ) ;
2100: const char * result_win64@var138 (@expr1073743949 "[test.cpp:5]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n[test.cpp:6]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
2101: ) ;
2102:
2103: $check_ $(@expr1073743950 "cppcheck-2.8/test/testio.cpp" $, 2103 $, code@var136 , false , true , Settings ::@expr1073743951 Unix32@expr1073742843 $) ;
2104: $if $(@expr1073743952 $!@expr1073743953 $assertEquals $(@expr1073743954 "cppcheck-2.8/test/testio.cpp" $, 2104 $, result@var137 $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
2105: $check_ $(@expr1073743957 "cppcheck-2.8/test/testio.cpp" $, 2105 $, code@var136 , false , true , Settings ::@expr1073743958 Unix64@expr1073742844 $) ;
2106: $if $(@expr1073743959 $!@expr1073743960 $assertEquals $(@expr1073743961 "cppcheck-2.8/test/testio.cpp" $, 2106 $, result@var137 $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
2107: $check_ $(@expr1073743964 "cppcheck-2.8/test/testio.cpp" $, 2107 $, code@var136 , false , true , Settings ::@expr1073743965 Win32A@expr1073742845 $) ;
2108: $if $(@expr1073743966 $!@expr1073743967 $assertEquals $(@expr1073743968 "cppcheck-2.8/test/testio.cpp" $, 2108 $, result@var137 $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
2109: $check_ $(@expr1073743971 "cppcheck-2.8/test/testio.cpp" $, 2109 $, code@var136 , false , true , Settings ::@expr1073743972 Win64@expr1073742846 $) ;
2110: $if $(@expr1073743973 $!@expr1073743974 $assertEquals $(@expr1073743975 "cppcheck-2.8/test/testio.cpp" $, 2110 $, result_win64@var138 $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
2111: }
2112: {
2113: $check_ $(@expr1073743978 "cppcheck-2.8/test/testio.cpp" $, 2113 $, "void g() {\n    const char c[]=\"42\";\n    scanf(\"%s\", c);\n}" $)
2114:
2115:
2116: ;
2117: $if $(@expr1073743979 $!@expr1073743980 $assertEquals $(@expr1073743981 "cppcheck-2.8/test/testio.cpp" $, 2117 $, "[test.cpp:3]: (warning) %s in format string (no. 1) requires a 'char *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) scanf() without field width limits can crash with huge input data.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return
2118: ; }
2119: }
2120:
2121: $check_ $(@expr1073743984 "cppcheck-2.8/test/testio.cpp" $, 2121 $, "void f() {\n    scanf(\"%i\", \"abc\" + 1);\n}\n" $)
2122:
2123: ;
2124: $if $(@expr1073743985 $!@expr1073743986 $assertEquals $(@expr1073743987 "cppcheck-2.8/test/testio.cpp" $, 2124 $, "[test.cpp:2]: (warning) %i in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n" $, errout@var100 .@expr1027 str (@expr1028 ) $) $) { $return ; }
2125: }
2126:
2127: void testPrintfArgument ( ) {
2128: $check_ $(@expr1073743994 "cppcheck-2.8/test/testio.cpp" $, 2128 $, "void foo() {\n    printf(\"%i\");\n    printf(\"%i%s\", 123);\n    printf(\"%i%s%d\", 0, bar());\n    printf(\"%i%%%s%d\", 0, bar());\n    printf(\"%idfd%%dfa%s%d\", 0, bar());\n    fprintf(stderr,\"%u%s\");\n    snprintf(str,10,\"%u%s\");\n    sprintf(string1, \"%-*.*s\", 32, string2);\n    snprintf(a, 9, \"%s%d\", \"11223344\");\n}" $)
2129:
|
2137:
2138: ;
2139: $if $(@expr1073743995 $!@expr1073743996 $assertEquals $(@expr1073743997 "cppcheck-2.8/test/testio.cpp" $, 2139 $, "[test.cpp:2]: (error) printf format string requires 1 parameter but only 0 are given.\n[test.cpp:3]: (error) printf format string requires 2 parameters but only 1 is given.\n[test.cpp:4]: (error) printf format string requires 3 parameters but only 2 are given.\n[test.cpp:5]: (error) printf format string requires 3 parameters but only 2 are given.\n[test.cpp:6]: (error) printf format string requires 3 parameters but only 2 are given.\n[test.cpp:7]: (error) fprintf format string requires 2 parameters but only 0 are given.\n[test.cpp:8]: (error) snprintf format string requires 2 parameters but only 0 are given.\n[test.cpp:9]: (error) sprintf format string requires 3 parameters but only 2 are given.\n[test.cpp:10]: (error) snprintf format string requires 2 parameters but only 1 is given.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2140:
|
2146:
2147: ; }
2148:
2149: $check_ $(@expr1073744000 "cppcheck-2.8/test/testio.cpp" $, 2149 $, "void foo(char *str) {\n    printf(\"\", 0);\n    printf(\"%i\", 123, bar());\n    printf(\"%i%s\", 0, bar(), 43123);\n}" $)
2150:
2151:
2152:
2153: ;
2154: $if $(@expr1073744001 $!@expr1073744002 $assertEquals $(@expr1073744003 "cppcheck-2.8/test/testio.cpp" $, 2154 $, "[test.cpp:2]: (warning) printf format string requires 0 parameters but 1 is given.\n[test.cpp:3]: (warning) printf format string requires 1 parameter but 2 are given.\n[test.cpp:4]: (warning) printf format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2155:
2156: ; }
2157:
2158: $check_ $(@expr1073744006 "cppcheck-2.8/test/testio.cpp" $, 2158 $, "void foo() {\n    swprintf(string1, L\"%i\", 32, string2);\n    swprintf(string1, L\"%s%s\", L\"a\", string2);\n    swprintf(string1, 6, L\"%i\", 32, string2);\n    swprintf(string1, 6, L\"%i%s\", 32, string2);\n}" $)
2159:
|
2162:
2163: ;
2164: $if $(@expr1073744007 $!@expr1073744008 $assertEquals $(@expr1073744009 "cppcheck-2.8/test/testio.cpp" $, 2164 $, "[test.cpp:2]: (warning) swprintf format string requires 1 parameter but 2 are given.\n[test.cpp:4]: (warning) swprintf format string requires 1 parameter but 2 are given.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2165: ; }
2166:
2167: $check_ $(@expr1073744012 "cppcheck-2.8/test/testio.cpp" $, 2167 $, "void foo(char *str) {\n    printf(\"%i\", 0);\n    printf(\"%i%s\", 123, bar());\n    printf(\"%i%s%d\", 0, bar(), 43123);\n    printf(\"%i%%%s%d\", 0, bar(), 43123);\n    printf(\"%idfd%%dfa%s%d\", 0, bar(), 43123);\n    printf(\"%\"PRId64\"\", 123);\n    fprintf(stderr,\"%\"PRId64\"\", 123);\n    snprintf(str,10,\"%\"PRId64\"\", 123);\n    fprintf(stderr, \"error: %m\");\n    printf(\"string: %.*s\", len, string);\n    fprintf(stderr, \"%*cText.\", indent, ' ');\n    sprintf(string1, \"%*\", 32);\n}" $)
2168:
|
2179:
2180: ;
2181: $if $(@expr1073744013 $!@expr1073744014 $assertEquals $(@expr1073744015 "cppcheck-2.8/test/testio.cpp" $, 2181 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2182:
2183: $check_ $(@expr1073744018 "cppcheck-2.8/test/testio.cpp" $, 2183 $, "void foo(char* s, const char* s2, std::string s3, int i) {\n    printf(\"%s%s\", s, s2);\n    printf(\"%s\", i);\n    printf(\"%i%s\", i, i);\n    printf(\"%s\", s3);\n    printf(\"%s\", \"s4\");\n    printf(\"%u\", s);\n}" $)
2184:
|
2189:
2190: ;
2191: $if $(@expr1073744019 $!@expr1073744020 $assertEquals $(@expr1073744021 "cppcheck-2.8/test/testio.cpp" $, 2191 $, "[test.cpp:3]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) %s in format string (no. 2) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'std::string'.\n[test.cpp:7]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2192:
2193:
2194: ; }
2195:
2196: $check_ $(@expr1073744024 "cppcheck-2.8/test/testio.cpp" $, 2196 $, "void foo(char* s, const char* s2, std::string s3, int i) {\n    printf(\"%jd\", s);\n    printf(\"%ji\", s);\n    printf(\"%ju\", s2);\n    printf(\"%jo\", s3);\n    printf(\"%jx\", i);\n    printf(\"%jX\", i);\n}" $)
2197:
|
2202:
2203: ;
2204: $if $(@expr1073744025 $!@expr1073744026 $assertEquals $(@expr1073744027 "cppcheck-2.8/test/testio.cpp" $, 2204 $, "[test.cpp:2]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'char *'.\n[test.cpp:3]: (warning) %ji in format string (no. 1) requires 'intmax_t' but the argument type is 'char *'.\n[test.cpp:4]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %jo in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::string'.\n[test.cpp:6]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n[test.cpp:7]: (warning) %jX in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2205:
|
2208:
2209: ; }
2210:
2211: $check_ $(@expr1073744030 "cppcheck-2.8/test/testio.cpp" $, 2211 $, "void foo(uintmax_t uim, std::string s3, unsigned int ui, int i) {\n    printf(\"%ju\", uim);\n    printf(\"%ju\", ui);\n    printf(\"%jd\", ui);\n    printf(\"%jd\", s3);\n    printf(\"%jd\", i);\n}" $)
2212:
|
2216:
2217: ;
2218: $if $(@expr1073744031 $!@expr1073744032 $assertEquals $(@expr1073744033 "cppcheck-2.8/test/testio.cpp" $, 2218 $, "[test.cpp:3]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'std::string'.\n[test.cpp:6]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2219:
2220:
2221: ; }
2222:
2223: $check_ $(@expr1073744036 "cppcheck-2.8/test/testio.cpp" $, 2223 $, "void foo(const int* cpi, const int ci, int i, int* pi, std::string s) {\n    printf(\"%n\", cpi);\n    printf(\"%n\", ci);\n    printf(\"%n\", i);\n    printf(\"%n\", pi);\n    printf(\"%n\", s);\n    printf(\"%n\", \"s4\");\n}" $)
2224:
|
2229:
2230: ;
2231: $if $(@expr1073744037 $!@expr1073744038 $assertEquals $(@expr1073744039 "cppcheck-2.8/test/testio.cpp" $, 2231 $, "[test.cpp:3]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed int'.\n[test.cpp:6]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'std::string'.\n[test.cpp:7]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2232:
2233:
2234: ; }
2235:
2236: $check_ $(@expr1073744042 "cppcheck-2.8/test/testio.cpp" $, 2236 $, "void foo() {\n    printf(\"%n\", L\"s5W\");\n}" $)
2237:
2238: ;
2239: $if $(@expr1073744043 $!@expr1073744044 $assertEquals $(@expr1073744045 "cppcheck-2.8/test/testio.cpp" $, 2239 $, "[test.cpp:2]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2240:
2241: $check_ $(@expr1073744048 "cppcheck-2.8/test/testio.cpp" $, 2241 $, "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, int i, unsigned int u) {\n    printf(\"%X\", f);\n    printf(\"%c\", \"s4\");\n    printf(\"%o\", d);\n    printf(\"%x\", cpi);\n    printf(\"%o\", b);\n    printf(\"%X\", bp);\n    printf(\"%X\", u);\n    printf(\"%X\", i);\n}" $)
2242:
|
2250:
2251: ;
2252: $if $(@expr1073744049 $!@expr1073744050 $assertEquals $(@expr1073744051 "cppcheck-2.8/test/testio.cpp" $, 2252 $, "[test.cpp:3]: (warning) %X in format string (no. 1) requires 'unsigned int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %c in format string (no. 1) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %o in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n[test.cpp:6]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'const signed int *'.\n[test.cpp:8]: (warning) %X in format string (no. 1) requires 'unsigned int' but the argument type is 'bar *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2253:
2254:
2255:
2256: ; }
2257:
2258: $check_ $(@expr1073744054 "cppcheck-2.8/test/testio.cpp" $, 2258 $, "class foo {};\nvoid foo(const char* cpc, char* pc) {\n    printf(\"%x\", cpc);\n    printf(\"%x\", pc);\n}" $)
2259:
2260:
2261:
2262: ;
2263: $if $(@expr1073744055 $!@expr1073744056 $assertEquals $(@expr1073744057 "cppcheck-2.8/test/testio.cpp" $, 2263 $, "[test.cpp:3]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:4]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2264: ; }
2265:
2266: $check_ $(@expr1073744060 "cppcheck-2.8/test/testio.cpp" $, 2266 $, "class foo {};\nvoid foo() {\n    printf(\"%x\", L\"s5W\");\n    printf(\"%X\", L\"s5W\");\n    printf(\"%c\", L\"s5W\");\n    printf(\"%o\", L\"s5W\");\n}" $)
2267:
|
2271:
2272: ;
2273: $if $(@expr1073744061 $!@expr1073744062 $assertEquals $(@expr1073744063 "cppcheck-2.8/test/testio.cpp" $, 2273 $, "[test.cpp:3]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n[test.cpp:4]: (warning) %X in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n[test.cpp:5]: (warning) %c in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n[test.cpp:6]: (warning) %o in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2274:
2275:
2276: ; }
2277:
2278: $check_ $(@expr1073744066 "cppcheck-2.8/test/testio.cpp" $, 2278 $, "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, unsigned int u, unsigned char uc) {\n    printf(\"%i\", f);\n    printf(\"%d\", \"s4\");\n    printf(\"%d\", d);\n    printf(\"%d\", u);\n    printf(\"%d\", cpi);\n    printf(\"%i\", b);\n    printf(\"%i\", bp);\n    printf(\"%i\", uc);\n}" $)
2279:
|
2287:
2288: ;
2289: $if $(@expr1073744067 $!@expr1073744068 $assertEquals $(@expr1073744069 "cppcheck-2.8/test/testio.cpp" $, 2289 $, "[test.cpp:3]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'double'.\n[test.cpp:6]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:7]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const signed int *'.\n[test.cpp:9]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'bar *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2290:
|
2293:
2294: ; }
2295:
2296: $check_ $(@expr1073744072 "cppcheck-2.8/test/testio.cpp" $, 2296 $, "class foo {};\nvoid foo() {\n    printf(\"%i\", L\"s5W\");\n    printf(\"%d\", L\"s5W\");\n}" $)
2297:
2298:
2299:
2300: ;
2301: $if $(@expr1073744073 $!@expr1073744074 $assertEquals $(@expr1073744075 "cppcheck-2.8/test/testio.cpp" $, 2301 $, "[test.cpp:3]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'const wchar_t *'.\n[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2302: ; }
2303:
2304: $check_ $(@expr1073744078 "cppcheck-2.8/test/testio.cpp" $, 2304 $, "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, int i, bool bo) {\n    printf(\"%u\", f);\n    printf(\"%u\", \"s4\");\n    printf(\"%u\", d);\n    printf(\"%u\", i);\n    printf(\"%u\", cpi);\n    printf(\"%u\", b);\n    printf(\"%u\", bp);\n    printf(\"%u\", bo);\n}" $)
2305:
|
2313:
2314: ;
2315: $if $(@expr1073744079 $!@expr1073744080 $assertEquals $(@expr1073744081 "cppcheck-2.8/test/testio.cpp" $, 2315 $, "[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n[test.cpp:6]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:7]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'const signed int *'.\n[test.cpp:9]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'bar *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2316:
|
2319:
2320: ; }
2321:
2322: $check_ $(@expr1073744084 "cppcheck-2.8/test/testio.cpp" $, 2322 $, "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, int i, bool bo) {\n    printf(\"%u\", L\"s5W\");\n}" $)
2323:
2324:
2325: ;
2326: $if $(@expr1073744085 $!@expr1073744086 $assertEquals $(@expr1073744087 "cppcheck-2.8/test/testio.cpp" $, 2326 $, "[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2327:
2328: $check_ $(@expr1073744090 "cppcheck-2.8/test/testio.cpp" $, 2328 $, "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, char c) {\n    printf(\"%p\", f);\n    printf(\"%p\", c);\n    printf(\"%p\", bp);\n    printf(\"%p\", cpi);\n    printf(\"%p\", b);\n}" $)
2329:
|
2334:
2335: ;
2336: $if $(@expr1073744091 $!@expr1073744092 $assertEquals $(@expr1073744093 "cppcheck-2.8/test/testio.cpp" $, 2336 $, "[test.cpp:3]: (warning) %p in format string (no. 1) requires an address but the argument type is 'foo'.\n[test.cpp:4]: (warning) %p in format string (no. 1) requires an address but the argument type is 'char'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2337: ; }
2338:
2339: $check_ $(@expr1073744096 "cppcheck-2.8/test/testio.cpp" $, 2339 $, "class foo {};\nvoid foo(char* pc, const char* cpc, wchar_t* pwc, const wchar_t* cpwc) {\n    printf(\"%p\", pc);\n    printf(\"%p\", cpc);\n    printf(\"%p\", pwc);\n    printf(\"%p\", cpwc);\n    printf(\"%p\", \"s4\");\n    printf(\"%p\", L\"s5W\");\n}" $)
2340:
|
2346:
2347: ;
2348: $if $(@expr1073744097 $!@expr1073744098 $assertEquals $(@expr1073744099 "cppcheck-2.8/test/testio.cpp" $, 2348 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2349:
2350: $check_ $(@expr1073744102 "cppcheck-2.8/test/testio.cpp" $, 2350 $, "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d) {\n    printf(\"%e\", f);\n    printf(\"%E\", \"s4\");\n    printf(\"%f\", cpi);\n    printf(\"%G\", bp);\n    printf(\"%f\", d);\n    printf(\"%f\", b);\n    printf(\"%f\", (float)cpi);\n}" $)
2351:
|
2358:
2359: ;
2360: $if $(@expr1073744103 $!@expr1073744104 $assertEquals $(@expr1073744105 "cppcheck-2.8/test/testio.cpp" $, 2360 $, "[test.cpp:3]: (warning) %e in format string (no. 1) requires 'double' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %E in format string (no. 1) requires 'double' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'const signed int *'.\n[test.cpp:6]: (warning) %G in format string (no. 1) requires 'double' but the argument type is 'bar *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2361:
2362:
2363: ; }
2364:
2365: $check_ $(@expr1073744108 "cppcheck-2.8/test/testio.cpp" $, 2365 $, "class foo {};\nvoid foo(const char* cpc, char* pc) {\n    printf(\"%e\", cpc);\n    printf(\"%E\", pc);\n    printf(\"%f\", cpc);\n    printf(\"%G\", pc);\n    printf(\"%f\", pc);\n}" $)
2366:
|
2371:
2372: ;
2373: $if $(@expr1073744109 $!@expr1073744110 $assertEquals $(@expr1073744111 "cppcheck-2.8/test/testio.cpp" $, 2373 $, "[test.cpp:3]: (warning) %e in format string (no. 1) requires 'double' but the argument type is 'const char *'.\n[test.cpp:4]: (warning) %E in format string (no. 1) requires 'double' but the argument type is 'char *'.\n[test.cpp:5]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'const char *'.\n[test.cpp:6]: (warning) %G in format string (no. 1) requires 'double' but the argument type is 'char *'.\n[test.cpp:7]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2374:
2375:
2376:
2377: ; }
2378:
2379: $check_ $(@expr1073744114 "cppcheck-2.8/test/testio.cpp" $, 2379 $, "class foo {};\nvoid foo() {\n    printf(\"%e\", L\"s5W\");\n    printf(\"%E\", L\"s5W\");\n    printf(\"%f\", L\"s5W\");\n    printf(\"%G\", L\"s5W\");\n}" $)
2380:
|
2384:
2385: ;
2386: $if $(@expr1073744115 $!@expr1073744116 $assertEquals $(@expr1073744117 "cppcheck-2.8/test/testio.cpp" $, 2386 $, "[test.cpp:3]: (warning) %e in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n[test.cpp:4]: (warning) %E in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n[test.cpp:5]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n[test.cpp:6]: (warning) %G in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2387:
2388:
2389: ; }
2390:
2391: $check_ $(@expr1073744120 "cppcheck-2.8/test/testio.cpp" $, 2391 $, "class foo;\nvoid foo(foo f) {\n    printf(\"%u\", f);\n    printf(\"%f\", f);\n    printf(\"%p\", f);\n}" $)
2392:
|
2395:
2396: ;
2397: $if $(@expr1073744121 $!@expr1073744122 $assertEquals $(@expr1073744123 "cppcheck-2.8/test/testio.cpp" $, 2397 $, "[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'foo'.\n[test.cpp:5]: (warning) %p in format string (no. 1) requires an address but the argument type is 'foo'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2398:
2399: ; }
2400:
2401:
2402:
2403: $check_ $(@expr1073744126 "cppcheck-2.8/test/testio.cpp" $, 2403 $, "void foo(signed char sc, unsigned char uc, short int si, unsigned short int usi) {\n  printf(\"%hhx %hhd\", sc, uc);\n  printf(\"%hd %hu\", si, usi);\n}" $)
2404:
2405:
2406: ;
2407: $if $(@expr1073744127 $!@expr1073744128 $assertEquals $(@expr1073744129 "cppcheck-2.8/test/testio.cpp" $, 2407 $, "[test.cpp:2]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed char'.\n[test.cpp:2]: (warning) %hhd in format string (no. 2) requires 'char' but the argument type is 'unsigned char'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2408: ; }
2409:
2410: $check_ $(@expr1073744132 "cppcheck-2.8/test/testio.cpp" $, 2410 $, "void foo(long long int lli, unsigned long long int ulli, long int li, unsigned long int uli) {\n  printf(\"%llo %llx\", lli, ulli);\n  printf(\"%ld %lu\", li, uli);\n}" $)
2411:
2412:
2413: ;
2414: $if $(@expr1073744133 $!@expr1073744134 $assertEquals $(@expr1073744135 "cppcheck-2.8/test/testio.cpp" $, 2414 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2415:
2416: $check_ $(@expr1073744138 "cppcheck-2.8/test/testio.cpp" $, 2416 $, "void foo(intmax_t im, uintmax_t uim, size_t s, ptrdiff_t p, long double ld, std::size_t ss, std::ptrdiff_t sp) {\n  printf(\"%jd %jo\", im, uim);\n  printf(\"%zx\", s);\n  printf(\"%ti\", p);\n  printf(\"%Lf\", ld);\n  printf(\"%zx\", ss);\n  printf(\"%ti\", sp);\n}" $)
2417:
|
2422:
2423: ;
2424: $if $(@expr1073744139 $!@expr1073744140 $assertEquals $(@expr1073744141 "cppcheck-2.8/test/testio.cpp" $, 2424 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2425:
2426:
2427:
2428: $check_ $(@expr1073744144 "cppcheck-2.8/test/testio.cpp" $, 2428 $, "void foo(intmax_t im, uintmax_t uim, size_t s, ptrdiff_t p, long double ld, std::size_t ss, std::ptrdiff_t sp) {\n  printf(\"%jb %jw\", im, uim);\n  printf(\"%zr\", s);\n  printf(\"%tm\", p);\n  printf(\"%La\", ld);\n  printf(\"%zv\", ss);\n  printf(\"%tp\", sp);\n}" $)
2429:
|
2434:
2435: ;
2436: $if $(@expr1073744145 $!@expr1073744146 $assertEquals $(@expr1073744147 "cppcheck-2.8/test/testio.cpp" $, 2436 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2437:
2438: $check_ $(@expr1073744150 "cppcheck-2.8/test/testio.cpp" $, 2438 $, "void foo(long long l, ptrdiff_t p, std::ptrdiff_t sp) {\n  printf(\"%td\", p);\n  printf(\"%td\", sp);\n  printf(\"%td\", l);\n}" $)
2439:
2440:
2441:
2442: ;
2443: $if $(@expr1073744151 $!@expr1073744152 $assertEquals $(@expr1073744153 "cppcheck-2.8/test/testio.cpp" $, 2443 $, "[test.cpp:4]: (warning) %td in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'signed long long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2444:
2445: $check_ $(@expr1073744156 "cppcheck-2.8/test/testio.cpp" $, 2445 $, "void foo(int i, long double ld) {\n  printf(\"%zx %zu\", i, ld);\n}" $)
2446:
2447: ;
2448: $if $(@expr1073744157 $!@expr1073744158 $assertEquals $(@expr1073744159 "cppcheck-2.8/test/testio.cpp" $, 2448 $, "[test.cpp:2]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %zu in format string (no. 2) requires 'size_t' but the argument type is 'long double'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2449: ; }
2450:
2451: $check_ $(@expr1073744162 "cppcheck-2.8/test/testio.cpp" $, 2451 $, "void foo(unsigned int ui, long double ld) {\n  printf(\"%zu %zx\", ui, ld);\n}" $)
2452:
2453: ;
2454: $if $(@expr1073744163 $!@expr1073744164 $assertEquals $(@expr1073744165 "cppcheck-2.8/test/testio.cpp" $, 2454 $, "[test.cpp:2]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %zx in format string (no. 2) requires 'size_t' but the argument type is 'long double'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2455: ; }
2456:
2457: $check_ $(@expr1073744168 "cppcheck-2.8/test/testio.cpp" $, 2457 $, "void foo(int i, long double ld) {\n  printf(\"%tx %tu\", i, ld);\n}" $)
2458:
2459: ;
2460: $if $(@expr1073744169 $!@expr1073744170 $assertEquals $(@expr1073744171 "cppcheck-2.8/test/testio.cpp" $, 2460 $, "[test.cpp:2]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %tu in format string (no. 2) requires 'unsigned ptrdiff_t' but the argument type is 'long double'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2461: ; }
2462:
2463:
2464: $check_ $(@expr1073744174 "cppcheck-2.8/test/testio.cpp" $, 2464 $, "void foo(unsigned int i) {\n  printf(\"%h\", i);\n  printf(\"%hh\", i);\n  printf(\"%l\", i);\n  printf(\"%ll\", i);\n  printf(\"%j\", i);\n  printf(\"%z\", i);\n  printf(\"%t\", i);\n  printf(\"%L\", i);\n  printf(\"%I\", i);\n}" $)
2465:
|
2473:
2474: ;
2475: $if $(@expr1073744175 $!@expr1073744176 $assertEquals $(@expr1073744177 "cppcheck-2.8/test/testio.cpp" $, 2475 $, "[test.cpp:2]: (warning) 'h' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:3]: (warning) 'hh' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:4]: (warning) 'l' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'll' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'j' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'z' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 't' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'L' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2476:
|
2482:
2483: ; }
2484:
2485: $check_ $(@expr1073744180 "cppcheck-2.8/test/testio.cpp" $, 2485 $, "void foo(unsigned int i) {\n  printf(\"%hd\", i);\n  printf(\"%hhd\", i);\n  printf(\"%ld\", i);\n  printf(\"%lld\", i);\n}" $)
2486:
|
2489:
2490: ;
2491: $if $(@expr1073744181 $!@expr1073744182 $assertEquals $(@expr1073744183 "cppcheck-2.8/test/testio.cpp" $, 2491 $, "[test.cpp:2]: (warning) %hd in format string (no. 1) requires 'short' but the argument type is 'unsigned int'.\n[test.cpp:3]: (warning) %hhd in format string (no. 1) requires 'char' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %lld in format string (no. 1) requires 'long long' but the argument type is 'unsigned int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2492:
2493:
2494: ; }
2495:
2496: $check_ $(@expr1073744186 "cppcheck-2.8/test/testio.cpp" $, 2496 $, "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" , false , true , Settings ::@expr2363 Unix32@expr2166 $)
2497:
2498:
2499: ;
2500: $if $(@expr1073744188 $!@expr1073744189 $assertEquals $(@expr1073744190 "cppcheck-2.8/test/testio.cpp" $, 2500 $, "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2501: ; }
2502:
2503: $check_ $(@expr1073744193 "cppcheck-2.8/test/testio.cpp" $, 2503 $, "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" , false , true , Settings ::@expr2363 Unix32@expr2166 $)
2504:
2505:
2506: ;
2507: $if $(@expr1073744195 $!@expr1073744196 $assertEquals $(@expr1073744197 "cppcheck-2.8/test/testio.cpp" $, 2507 $, "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2508: ; }
2509:
2510: $check_ $(@expr1073744200 "cppcheck-2.8/test/testio.cpp" $, 2510 $, "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
2511:
2512:
2513: ;
2514: $if $(@expr1073744202 $!@expr1073744203 $assertEquals $(@expr1073744204 "cppcheck-2.8/test/testio.cpp" $, 2514 $, "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2515: ; }
2516:
2517: $check_ $(@expr1073744207 "cppcheck-2.8/test/testio.cpp" $, 2517 $, "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
2518:
2519:
2520: ;
2521: $if $(@expr1073744209 $!@expr1073744210 $assertEquals $(@expr1073744211 "cppcheck-2.8/test/testio.cpp" $, 2521 $, "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2522: ; }
2523:
2524: $check_ $(@expr1073744214 "cppcheck-2.8/test/testio.cpp" $, 2524 $, "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" , false , true , Settings ::@expr2391 Win32A@expr2168 $)
2525:
2526:
2527: ;
2528: $if $(@expr1073744216 $!@expr1073744217 $assertEquals $(@expr1073744218 "cppcheck-2.8/test/testio.cpp" $, 2528 $, "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2529: ; }
2530:
2531: $check_ $(@expr1073744221 "cppcheck-2.8/test/testio.cpp" $, 2531 $, "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" , false , true , Settings ::@expr2391 Win32A@expr2168 $)
2532:
2533:
2534: ;
2535: $if $(@expr1073744223 $!@expr1073744224 $assertEquals $(@expr1073744225 "cppcheck-2.8/test/testio.cpp" $, 2535 $, "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2536: ; }
2537:
2538: $check_ $(@expr1073744228 "cppcheck-2.8/test/testio.cpp" $, 2538 $, "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" , false , true , Settings ::@expr2405 Win64@expr2169 $)
2539:
2540:
2541: ;
2542: $if $(@expr1073744230 $!@expr1073744231 $assertEquals $(@expr1073744232 "cppcheck-2.8/test/testio.cpp" $, 2542 $, "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2543: ; }
2544:
2545: $check_ $(@expr1073744235 "cppcheck-2.8/test/testio.cpp" $, 2545 $, "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" , false , true , Settings ::@expr2405 Win64@expr2169 $)
2546:
2547:
2548: ;
2549: $if $(@expr1073744237 $!@expr1073744238 $assertEquals $(@expr1073744239 "cppcheck-2.8/test/testio.cpp" $, 2549 $, "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2550: ; }
2551:
2552: $check_ $(@expr1073744242 "cppcheck-2.8/test/testio.cpp" $, 2552 $, "void foo(size_t s, uintmax_t um) {\n  printf(\"%lu\", s);\n  printf(\"%lu\", um);\n  printf(\"%llu\", s);\n  printf(\"%llu\", um);\n}" , false , true , Settings ::@expr2405 Win64@expr2169 $)
2553:
|
2556:
2557: ;
2558: $if $(@expr1073744244 $!@expr1073744245 $assertEquals $(@expr1073744246 "cppcheck-2.8/test/testio.cpp" $, 2558 $, "[test.cpp:2]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:3]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n[test.cpp:4]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:5]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2559:
2560:
2561: ; }
2562:
2563: $check_ $(@expr1073744249 "cppcheck-2.8/test/testio.cpp" $, 2563 $, "void foo(unsigned int i) {\n  printf(\"%ld\", i);\n  printf(\"%lld\", i);\n  printf(\"%lu\", i);\n  printf(\"%llu\", i);\n  printf(\"%lx\", i);\n  printf(\"%llx\", i);\n}" $)
2564:
|
2569:
2570: ;
2571: $if $(@expr1073744250 $!@expr1073744251 $assertEquals $(@expr1073744252 "cppcheck-2.8/test/testio.cpp" $, 2571 $, "[test.cpp:2]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:3]: (warning) %lld in format string (no. 1) requires 'long long' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n[test.cpp:6]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n[test.cpp:7]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2572:
|
2575:
2576: ; }
2577:
2578: $check_ $(@expr1073744255 "cppcheck-2.8/test/testio.cpp" $, 2578 $, "void foo(int i, intmax_t im, ptrdiff_t p) {\n  printf(\"%lld\", i);\n  printf(\"%lld\", im);\n  printf(\"%lld\", p);\n}" $)
2579:
2580:
2581:
2582: ;
2583: $if $(@expr1073744256 $!@expr1073744257 $assertEquals $(@expr1073744258 "cppcheck-2.8/test/testio.cpp" $, 2583 $, "[test.cpp:2]: (warning) %lld in format string (no. 1) requires 'long long' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2584:
2585: $check_ $(@expr1073744261 "cppcheck-2.8/test/testio.cpp" $, 2585 $, "void foo(intmax_t im, ptrdiff_t p) {\n  printf(\"%lld\", im);\n  printf(\"%lld\", p);\n}" , false , true , Settings ::@expr2405 Win64@expr2169 $)
2586:
2587:
2588: ;
2589: $if $(@expr1073744263 $!@expr1073744264 $assertEquals $(@expr1073744265 "cppcheck-2.8/test/testio.cpp" $, 2589 $, "[test.cpp:2]: (portability) %lld in format string (no. 1) requires 'long long' but the argument type is 'intmax_t {aka signed long long}'.\n[test.cpp:3]: (portability) %lld in format string (no. 1) requires 'long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2590: ; }
2591:
2592: $check_ $(@expr1073744268 "cppcheck-2.8/test/testio.cpp" $, 2592 $, "class Foo {\n    double d;\n    struct Bar {\n        int i;\n    } bar[2];\n    struct Baz {\n        int i;\n    } baz;\n};\nint a[10];\nFoo f[10];\nvoid foo(const Foo* foo) {\n    printf(\"%d %f %f %d %f %f\",\n        foo->d, foo->bar[0].i, a[0],\n        f[0].d, f[0].baz.i, f[0].bar[0].i);\n}" $)
2593:
|
2606:
2607: ;
2608: $if $(@expr1073744269 $!@expr1073744270 $assertEquals $(@expr1073744271 "cppcheck-2.8/test/testio.cpp" $, 2608 $, "[test.cpp:13]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'double'.\n[test.cpp:13]: (warning) %f in format string (no. 2) requires 'double' but the argument type is 'signed int'.\n[test.cpp:13]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'int'.\n[test.cpp:13]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'double'.\n[test.cpp:13]: (warning) %f in format string (no. 5) requires 'double' but the argument type is 'int'.\n[test.cpp:13]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2609:
|
2612:
2613: ; }
2614:
2615: $check_ $(@expr1073744274 "cppcheck-2.8/test/testio.cpp" $, 2615 $, "short f() { return 0; }\nvoid foo() { printf(\"%d %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2616: ;
2617: $if $(@expr1073744275 $!@expr1073744276 $assertEquals $(@expr1073744277 "cppcheck-2.8/test/testio.cpp" $, 2617 $, "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %I64d in format string (no. 5) requires '__int64' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed short'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2618:
|
2622:
2623: ; }
2624:
2625: $check_ $(@expr1073744280 "cppcheck-2.8/test/testio.cpp" $, 2625 $, "unsigned short f() { return 0; }\nvoid foo() { printf(\"%u %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2626: ;
2627: $if $(@expr1073744281 $!@expr1073744282 $assertEquals $(@expr1073744283 "cppcheck-2.8/test/testio.cpp" $, 2627 $, "[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %I64u in format string (no. 5) requires 'unsigned __int64' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned short'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2628:
|
2631:
2632: ; }
2633:
2634: $check_ $(@expr1073744286 "cppcheck-2.8/test/testio.cpp" $, 2634 $, "int f() { return 0; }\nvoid foo() { printf(\"%d %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2635: ;
2636: $if $(@expr1073744287 $!@expr1073744288 $assertEquals $(@expr1073744289 "cppcheck-2.8/test/testio.cpp" $, 2636 $, "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64d in format string (no. 5) requires '__int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2637:
|
2641:
2642: ; }
2643:
2644: $check_ $(@expr1073744292 "cppcheck-2.8/test/testio.cpp" $, 2644 $, "unsigned int f() { return 0; }\nvoid foo() { printf(\"%u %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2645: ;
2646: $if $(@expr1073744293 $!@expr1073744294 $assertEquals $(@expr1073744295 "cppcheck-2.8/test/testio.cpp" $, 2646 $, "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %I64u in format string (no. 5) requires 'unsigned __int64' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2647:
|
2651:
2652: ; }
2653:
2654: $check_ $(@expr1073744298 "cppcheck-2.8/test/testio.cpp" $, 2654 $, "long f() { return 0; }\nvoid foo() { printf(\"%ld %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2655: ;
2656: $if $(@expr1073744299 $!@expr1073744300 $assertEquals $(@expr1073744301 "cppcheck-2.8/test/testio.cpp" $, 2656 $, "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %I64d in format string (no. 5) requires '__int64' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2657:
|
2661:
2662: ; }
2663:
2664: $check_ $(@expr1073744304 "cppcheck-2.8/test/testio.cpp" $, 2664 $, "unsigned long f() { return 0; }\nvoid foo() { printf(\"%lu %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2665: ;
2666: $if $(@expr1073744305 $!@expr1073744306 $assertEquals $(@expr1073744307 "cppcheck-2.8/test/testio.cpp" $, 2666 $, "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %I64u in format string (no. 5) requires 'unsigned __int64' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2667:
|
2671:
2672: ; }
2673:
2674: $check_ $(@expr1073744310 "cppcheck-2.8/test/testio.cpp" $, 2674 $, "long long f() { return 0; }\nvoid foo() { printf(\"%lld %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2675: ;
2676: $if $(@expr1073744311 $!@expr1073744312 $assertEquals $(@expr1073744313 "cppcheck-2.8/test/testio.cpp" $, 2676 $, "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed long long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2677:
|
2680:
2681: ; }
2682:
2683: $check_ $(@expr1073744316 "cppcheck-2.8/test/testio.cpp" $, 2683 $, "unsigned long long f() { return 0; }\nvoid foo() { printf(\"%llu %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2684: ;
2685: $if $(@expr1073744317 $!@expr1073744318 $assertEquals $(@expr1073744319 "cppcheck-2.8/test/testio.cpp" $, 2685 $, "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned long long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2686:
|
2689:
2690: ; }
2691:
2692: $check_ $(@expr1073744322 "cppcheck-2.8/test/testio.cpp" $, 2692 $, "float f() { return 0; }\nvoid foo() { printf(\"%f %d %ld %u %lu %I64d %I64u %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2693: ;
2694: $if $(@expr1073744323 $!@expr1073744324 $assertEquals $(@expr1073744325 "cppcheck-2.8/test/testio.cpp" $, 2694 $, "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'float'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'float'.\n[test.cpp:2]: (warning) %u in format string (no. 4) requires 'unsigned int' but the argument type is 'float'.\n[test.cpp:2]: (warning) %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'float'.\n[test.cpp:2]: (warning) %I64d in format string (no. 6) requires '__int64' but the argument type is 'float'.\n[test.cpp:2]: (warning) %I64u in format string (no. 7) requires 'unsigned __int64' but the argument type is 'float'.\n[test.cpp:2]: (warning) %Lf in format string (no. 8) requires 'long double' but the argument type is 'float'.\n[test.cpp:2]: (warning) %p in format string (no. 9) requires an address but the argument type is 'float'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2695:
|
2700:
2701: ; }
2702:
2703: $check_ $(@expr1073744328 "cppcheck-2.8/test/testio.cpp" $, 2703 $, "double f() { return 0; }\nvoid foo() { printf(\"%f %d %ld %u %lu %I64d %I64u %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2704: ;
2705: $if $(@expr1073744329 $!@expr1073744330 $assertEquals $(@expr1073744331 "cppcheck-2.8/test/testio.cpp" $, 2705 $, "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'double'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'double'.\n[test.cpp:2]: (warning) %u in format string (no. 4) requires 'unsigned int' but the argument type is 'double'.\n[test.cpp:2]: (warning) %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'double'.\n[test.cpp:2]: (warning) %I64d in format string (no. 6) requires '__int64' but the argument type is 'double'.\n[test.cpp:2]: (warning) %I64u in format string (no. 7) requires 'unsigned __int64' but the argument type is 'double'.\n[test.cpp:2]: (warning) %Lf in format string (no. 8) requires 'long double' but the argument type is 'double'.\n[test.cpp:2]: (warning) %p in format string (no. 9) requires an address but the argument type is 'double'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2706:
|
2711:
2712: ; }
2713:
2714: $check_ $(@expr1073744334 "cppcheck-2.8/test/testio.cpp" $, 2714 $, "long double f() { return 0; }\nvoid foo() { printf(\"%Lf %d %ld %u %lu %I64d %I64u %f %p\", f(), f(), f(), f(), f(), f(), f(), f(), f()); }" $)
2715: ;
2716: $if $(@expr1073744335 $!@expr1073744336 $assertEquals $(@expr1073744337 "cppcheck-2.8/test/testio.cpp" $, 2716 $, "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %u in format string (no. 4) requires 'unsigned int' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %I64d in format string (no. 6) requires '__int64' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %I64u in format string (no. 7) requires 'unsigned __int64' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %f in format string (no. 8) requires 'double' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %p in format string (no. 9) requires an address but the argument type is 'long double'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2717:
|
2722:
2723: ; }
2724:
2725: $check_ $(@expr1073744340 "cppcheck-2.8/test/testio.cpp" $, 2725 $, "int f() { return 0; }\nvoid foo() { printf(\"%I64d %I64u %I64x %d\", f(), f(), f(), f()); }" $)
2726: ;
2727: $if $(@expr1073744341 $!@expr1073744342 $assertEquals $(@expr1073744343 "cppcheck-2.8/test/testio.cpp" $, 2727 $, "[test.cpp:2]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64x in format string (no. 3) requires 'unsigned __int64' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2728:
2729: ; }
2730:
2731: $check_ $(@expr1073744346 "cppcheck-2.8/test/testio.cpp" $, 2731 $, "long long f() { return 0; }\nvoid foo() { printf(\"%I32d %I32u %I32x %lld\", f(), f(), f(), f()); }" $)
2732: ;
2733: $if $(@expr1073744347 $!@expr1073744348 $assertEquals $(@expr1073744349 "cppcheck-2.8/test/testio.cpp" $, 2733 $, "[test.cpp:2]: (warning) %I32d in format string (no. 1) requires '__int32' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %I32x in format string (no. 3) requires 'unsigned __int32' but the argument type is 'signed long long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2734:
2735: ; }
2736:
2737: $check_ $(@expr1073744352 "cppcheck-2.8/test/testio.cpp" $, 2737 $, "unsigned long long f() { return 0; }\nvoid foo() { printf(\"%I32d %I32u %I32x %llx\", f(), f(), f(), f()); }" $)
2738: ;
2739: $if $(@expr1073744353 $!@expr1073744354 $assertEquals $(@expr1073744355 "cppcheck-2.8/test/testio.cpp" $, 2739 $, "[test.cpp:2]: (warning) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %I32x in format string (no. 3) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2740:
2741: ; }
2742:
2743: $check_ $(@expr1073744358 "cppcheck-2.8/test/testio.cpp" $, 2743 $, "signed char f() { return 0; }\nvoid foo() { printf(\"%Id %Iu %Ix %hhi\", f(), f(), f(), f()); }" $)
2744: ;
2745: $if $(@expr1073744359 $!@expr1073744360 $assertEquals $(@expr1073744361 "cppcheck-2.8/test/testio.cpp" $, 2745 $, "[test.cpp:2]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'signed char'.\n[test.cpp:2]: (warning) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'signed char'.\n[test.cpp:2]: (warning) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'signed char'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2746:
2747: ; }
2748:
2749: $check_ $(@expr1073744364 "cppcheck-2.8/test/testio.cpp" $, 2749 $, "unsigned char f() { return 0; }\nvoid foo() { printf(\"%Id %Iu %Ix %hho\", f(), f(), f(), f()); }" $)
2750: ;
2751: $if $(@expr1073744365 $!@expr1073744366 $assertEquals $(@expr1073744367 "cppcheck-2.8/test/testio.cpp" $, 2751 $, "[test.cpp:2]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'unsigned char'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2752:
2753: ; }
2754:
2755: $check_ $(@expr1073744370 "cppcheck-2.8/test/testio.cpp" $, 2755 $, "namespace bar { int f() { return 0; } }\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar::f(), bar::f(), bar::f(), bar::f(), bar::f(), bar::f()); }" $)
2756: ;
2757: $if $(@expr1073744371 $!@expr1073744372 $assertEquals $(@expr1073744373 "cppcheck-2.8/test/testio.cpp" $, 2757 $, "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2758:
2759:
2760:
2761: ; }
2762:
2763: $check_ $(@expr1073744376 "cppcheck-2.8/test/testio.cpp" $, 2763 $, "struct Fred { int i; } f;\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", f.i, f.i, f.i, f.i, f.i, f.i); }" $)
2764: ;
2765: $if $(@expr1073744377 $!@expr1073744378 $assertEquals $(@expr1073744379 "cppcheck-2.8/test/testio.cpp" $, 2765 $, "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2766:
2767:
2768:
2769: ; }
2770:
2771: $check_ $(@expr1073744382 "cppcheck-2.8/test/testio.cpp" $, 2771 $, "struct Fred { unsigned int u; } f;\nvoid foo() { printf(\"%u %d %ld %f %Lf %p\", f.u, f.u, f.u, f.u, f.u, f.u); }" $)
2772: ;
2773: $if $(@expr1073744383 $!@expr1073744384 $assertEquals $(@expr1073744385 "cppcheck-2.8/test/testio.cpp" $, 2773 $, "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'unsigned int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2774:
2775:
2776:
2777: ; }
2778:
2779: $check_ $(@expr1073744388 "cppcheck-2.8/test/testio.cpp" $, 2779 $, "struct Fred { unsigned int ui() { return 0; } } f;\nvoid foo() { printf(\"%u %d %ld %f %Lf %p\", f.ui(), f.ui(), f.ui(), f.ui(), f.ui(), f.ui()); }" $)
2780: ;
2781: $if $(@expr1073744389 $!@expr1073744390 $assertEquals $(@expr1073744391 "cppcheck-2.8/test/testio.cpp" $, 2781 $, "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'unsigned int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2782:
2783:
2784:
2785: ; }
2786:
2787:
2788: $check_ $(@expr1073744394 "cppcheck-2.8/test/testio.cpp" $, 2788 $, "void f(int len, int newline) {\n    printf(\"%s\", newline ? a : str + len);\n    printf(\"%s\", newline + newline);\n}" $)
2789:
2790:
2791: ;
2792: $if $(@expr1073744395 $!@expr1073744396 $assertEquals $(@expr1073744397 "cppcheck-2.8/test/testio.cpp" $, 2792 $, "[test.cpp:3]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2793:
2794: $check_ $(@expr1073744400 "cppcheck-2.8/test/testio.cpp" $, 2794 $, "struct Fred { int i; } f;\nstruct Fred & bar() { };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }" $)
2795:
2796: ;
2797: $if $(@expr1073744401 $!@expr1073744402 $assertEquals $(@expr1073744403 "cppcheck-2.8/test/testio.cpp" $, 2797 $, "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2798:
2799:
2800:
2801: ; }
2802:
2803: $check_ $(@expr1073744406 "cppcheck-2.8/test/testio.cpp" $, 2803 $, "struct Fred { int i; } f;\nconst struct Fred & bar() { };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }" $)
2804:
2805: ;
2806: $if $(@expr1073744407 $!@expr1073744408 $assertEquals $(@expr1073744409 "cppcheck-2.8/test/testio.cpp" $, 2806 $, "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2807:
2808:
2809:
2810: ; }
2811:
2812: $check_ $(@expr1073744412 "cppcheck-2.8/test/testio.cpp" $, 2812 $, "struct Fred { int i; } f;\nstatic const struct Fred & bar() { };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }" $)
2813:
2814: ;
2815: $if $(@expr1073744413 $!@expr1073744414 $assertEquals $(@expr1073744415 "cppcheck-2.8/test/testio.cpp" $, 2815 $, "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2816:
2817:
2818:
2819: ; }
2820:
2821: $check_ $(@expr1073744418 "cppcheck-2.8/test/testio.cpp" $, 2821 $, "struct Fred { int i; } f[2];\nstruct Fred * bar() { return f; };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i); }" $)
2822:
2823: ;
2824: $if $(@expr1073744419 $!@expr1073744420 $assertEquals $(@expr1073744421 "cppcheck-2.8/test/testio.cpp" $, 2824 $, "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2825:
2826:
2827:
2828: ; }
2829:
2830: $check_ $(@expr1073744424 "cppcheck-2.8/test/testio.cpp" $, 2830 $, "struct Fred { int i; } f[2];\nconst struct Fred * bar() { return f; };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i); }" $)
2831:
2832: ;
2833: $if $(@expr1073744425 $!@expr1073744426 $assertEquals $(@expr1073744427 "cppcheck-2.8/test/testio.cpp" $, 2833 $, "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2834:
2835:
2836:
2837: ; }
2838:
2839: $check_ $(@expr1073744430 "cppcheck-2.8/test/testio.cpp" $, 2839 $, "struct Fred { int i; } f[2];\nstatic const struct Fred * bar() { return f; };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i); }" $)
2840:
2841: ;
2842: $if $(@expr1073744431 $!@expr1073744432 $assertEquals $(@expr1073744433 "cppcheck-2.8/test/testio.cpp" $, 2842 $, "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2843:
2844:
2845:
2846: ; }
2847:
2848: $check_ $(@expr1073744436 "cppcheck-2.8/test/testio.cpp" $, 2848 $, "struct Fred { int32_t i; } f;\nstruct Fred & bar() { };\nvoid foo() { printf(\"%d %ld %u %lu %f %Lf\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }" $)
2849:
2850: ;
2851: $if $(@expr1073744437 $!@expr1073744438 $assertEquals $(@expr1073744439 "cppcheck-2.8/test/testio.cpp" $, 2851 $, "[test.cpp:3]: (warning) %ld in format string (no. 2) requires 'long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 4) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 5) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 6) requires 'long double' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2852:
|
2855:
2856: ; }
2857:
2858:
2859: $check_ $(@expr1073744442 "cppcheck-2.8/test/testio.cpp" $, 2859 $, "void f(double *x) {\n    printf(\"%f\", x[0]);\n}" $)
2860:
2861: ;
2862: $if $(@expr1073744443 $!@expr1073744444 $assertEquals $(@expr1073744445 "cppcheck-2.8/test/testio.cpp" $, 2862 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2863:
2864: $check_ $(@expr1073744448 "cppcheck-2.8/test/testio.cpp" $, 2864 $, "int array[10];\nint * foo() { return array; }\nvoid f() {\n    printf(\"%f\", foo()[0]);\n}" $)
2865:
2866:
2867:
2868: ;
2869: $if $(@expr1073744449 $!@expr1073744450 $assertEquals $(@expr1073744451 "cppcheck-2.8/test/testio.cpp" $, 2869 $, "[test.cpp:4]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2870:
2871: $check_ $(@expr1073744454 "cppcheck-2.8/test/testio.cpp" $, 2871 $, "struct Base { int length() { } };\nstruct Derived : public Base { };\nvoid foo(Derived * d) {\n    printf(\"%f\", d.length());\n}" $)
2872:
2873:
2874:
2875: ;
2876: $if $(@expr1073744455 $!@expr1073744456 $assertEquals $(@expr1073744457 "cppcheck-2.8/test/testio.cpp" $, 2876 $, "[test.cpp:4]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2877:
2878: $check_ $(@expr1073744460 "cppcheck-2.8/test/testio.cpp" $, 2878 $, "std::vector<int> v;\nvoid foo() {\n    printf(\"%d %u %f\", v[0], v[0], v[0]);\n}" $)
2879:
2880:
2881: ;
2882: $if $(@expr1073744461 $!@expr1073744462 $assertEquals $(@expr1073744463 "cppcheck-2.8/test/testio.cpp" $, 2882 $, "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2883: ; }
2884:
2885:
2886: $check_ $(@expr1073744466 "cppcheck-2.8/test/testio.cpp" $, 2886 $, "int bar(int a);\nvoid foo() {\n    printf(\"%d\", bar(0));\n}" $)
2887:
2888:
2889: ;
2890: $if $(@expr1073744467 $!@expr1073744468 $assertEquals $(@expr1073744469 "cppcheck-2.8/test/testio.cpp" $, 2890 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
2891:
2892: $check_ $(@expr1073744472 "cppcheck-2.8/test/testio.cpp" $, 2892 $, "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" , false , true , Settings ::@expr2391 Win32A@expr2168 $)
2893:
|
2896:
2897: ;
2898: $if $(@expr1073744474 $!@expr1073744475 $assertEquals $(@expr1073744476 "cppcheck-2.8/test/testio.cpp" $, 2898 $, "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2899:
2900:
2901: ; }
2902:
2903: $check_ $(@expr1073744479 "cppcheck-2.8/test/testio.cpp" $, 2903 $, "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" , false , true , Settings ::@expr2405 Win64@expr2169 $)
2904:
|
2907:
2908: ;
2909: $if $(@expr1073744481 $!@expr1073744482 $assertEquals $(@expr1073744483 "cppcheck-2.8/test/testio.cpp" $, 2909 $, "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2910:
2911:
2912: ; }
2913:
2914: $check_ $(@expr1073744486 "cppcheck-2.8/test/testio.cpp" $, 2914 $, "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" , false , true , Settings ::@expr2363 Unix32@expr2166 $)
2915:
|
2918:
2919: ;
2920: $if $(@expr1073744488 $!@expr1073744489 $assertEquals $(@expr1073744490 "cppcheck-2.8/test/testio.cpp" $, 2920 $, "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2921:
2922:
2923: ; }
2924:
2925: $check_ $(@expr1073744493 "cppcheck-2.8/test/testio.cpp" $, 2925 $, "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
2926:
|
2929:
2930: ;
2931: $if $(@expr1073744495 $!@expr1073744496 $assertEquals $(@expr1073744497 "cppcheck-2.8/test/testio.cpp" $, 2931 $, "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2932:
2933:
2934: ; }
2935:
2936: $check_ $(@expr1073744500 "cppcheck-2.8/test/testio.cpp" $, 2936 $, "class Fred : public std::vector<int> {} v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
2937:
|
2940:
2941: ;
2942: $if $(@expr1073744502 $!@expr1073744503 $assertEquals $(@expr1073744504 "cppcheck-2.8/test/testio.cpp" $, 2942 $, "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2943:
2944:
2945: ; }
2946:
2947: $check_ $(@expr1073744507 "cppcheck-2.8/test/testio.cpp" $, 2947 $, "class Fred : public std::vector<int> {} v;\nvoid foo() {\n    printf(\"%d %u %f\", v[0], v[0], v[0]);\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
2948:
2949:
2950: ;
2951: $if $(@expr1073744509 $!@expr1073744510 $assertEquals $(@expr1073744511 "cppcheck-2.8/test/testio.cpp" $, 2951 $, "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'int'.\n[test.cpp:3]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2952: ; }
2953:
2954: $check_ $(@expr1073744514 "cppcheck-2.8/test/testio.cpp" $, 2954 $, "std::string s;\nvoid foo() {\n    printf(\"%s %p %u %d %f\", s.c_str(), s.c_str(), s.c_str(), s.c_str(), s.c_str());\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
2955:
2956:
2957: ;
2958: $if $(@expr1073744516 $!@expr1073744517 $assertEquals $(@expr1073744518 "cppcheck-2.8/test/testio.cpp" $, 2958 $, "[test.cpp:3]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %f in format string (no. 5) requires 'double' but the argument type is 'const char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2959:
2960: ; }
2961:
2962: $check_ $(@expr1073744521 "cppcheck-2.8/test/testio.cpp" $, 2962 $, "std::vector<int> array;\nchar * p = 0;\nchar q[] = \"abc\";\nchar r[10] = { 0 };\nsize_t s;\nvoid foo() {\n    printf(\"%zu %zu\", array.size(), s);\n    printf(\"%u %u %u\", p, q, r);\n    printf(\"%u %u\", array.size(), s);\n    printf(\"%lu %lu\", array.size(), s);\n    printf(\"%llu %llu\", array.size(), s);\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
2963:
|
2972:
2973: ;
2974: $if $(@expr1073744523 $!@expr1073744524 $assertEquals $(@expr1073744525 "cppcheck-2.8/test/testio.cpp" $, 2974 $, "[test.cpp:8]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char *'.\n[test.cpp:8]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'char *'.\n[test.cpp:8]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'char *'.\n[test.cpp:9]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:9]: (portability) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:10]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:10]: (portability) %lu in format string (no. 2) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:11]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:11]: (portability) %llu in format string (no. 2) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2975:
|
2981:
2982: ; }
2983:
2984: $check_ $(@expr1073744528 "cppcheck-2.8/test/testio.cpp" $, 2984 $, "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%td %zd %d %d %d %d %d %d %d %d %d %d %d\", pt, pt, b, c, sc, uc, s, us, st, pt, pc, cl, ca);\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
2985:
|
2996:
2997: ;
2998: $if $(@expr1073744530 $!@expr1073744531 $assertEquals $(@expr1073744532 "cppcheck-2.8/test/testio.cpp" $, 2998 $, "[test.cpp:13]: (portability) %zd in format string (no. 2) requires 'ssize_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (portability) %d in format string (no. 9) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %d in format string (no. 10) requires 'int' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %d in format string (no. 11) requires 'int' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %d in format string (no. 12) requires 'int' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %d in format string (no. 13) requires 'int' but the argument type is 'char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
2999:
|
3002:
3003: ; }
3004:
3005: $check_ $(@expr1073744535 "cppcheck-2.8/test/testio.cpp" $, 3005 $, "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\", b, c, sc, uc, s, us, st, pt, pc, cl, ca);\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
3006:
|
3017:
3018: ;
3019: $if $(@expr1073744537 $!@expr1073744538 $assertEquals $(@expr1073744539 "cppcheck-2.8/test/testio.cpp" $, 3019 $, "[test.cpp:13]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'bool'.\n[test.cpp:13]: (warning) %ld in format string (no. 2) requires 'long' but the argument type is 'char'.\n[test.cpp:13]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'signed char'.\n[test.cpp:13]: (warning) %ld in format string (no. 4) requires 'long' but the argument type is 'unsigned char'.\n[test.cpp:13]: (warning) %ld in format string (no. 5) requires 'long' but the argument type is 'signed short'.\n[test.cpp:13]: (warning) %ld in format string (no. 6) requires 'long' but the argument type is 'unsigned short'.\n[test.cpp:13]: (portability) %ld in format string (no. 7) requires 'long' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %ld in format string (no. 8) requires 'long' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %ld in format string (no. 9) requires 'long' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %ld in format string (no. 10) requires 'long' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %ld in format string (no. 11) requires 'long' but the argument type is 'char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3020:
|
3028:
3029: ; }
3030:
3031:
3032: $check_ $(@expr1073744542 "cppcheck-2.8/test/testio.cpp" $, 3032 $, "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%td %zd %d %d %d %d %d %d %d %d %d\", ptf(), ptf(), bf(), cf(), scf(), ucf(), sf(), usf(), stf(), ptf(), pcf());\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
3033:
|
3044:
3045: ;
3046: $if $(@expr1073744544 $!@expr1073744545 $assertEquals $(@expr1073744546 "cppcheck-2.8/test/testio.cpp" $, 3046 $, "[test.cpp:13]: (portability) %zd in format string (no. 2) requires 'ssize_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (portability) %d in format string (no. 9) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %d in format string (no. 10) requires 'int' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %d in format string (no. 11) requires 'int' but the argument type is 'char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3047:
3048:
3049: ; }
3050:
3051: $check_ $(@expr1073744549 "cppcheck-2.8/test/testio.cpp" $, 3051 $, "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%ld %ld %ld %ld %ld %ld %ld %ld %ld\", bf(), cf(), scf(), ucf(), sf(), usf(), stf(), ptf(), pcf());\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
3052:
|
3063:
3064: ;
3065: $if $(@expr1073744551 $!@expr1073744552 $assertEquals $(@expr1073744553 "cppcheck-2.8/test/testio.cpp" $, 3065 $, "[test.cpp:13]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'bool'.\n[test.cpp:13]: (warning) %ld in format string (no. 2) requires 'long' but the argument type is 'char'.\n[test.cpp:13]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'signed char'.\n[test.cpp:13]: (warning) %ld in format string (no. 4) requires 'long' but the argument type is 'unsigned char'.\n[test.cpp:13]: (warning) %ld in format string (no. 5) requires 'long' but the argument type is 'signed short'.\n[test.cpp:13]: (warning) %ld in format string (no. 6) requires 'long' but the argument type is 'unsigned short'.\n[test.cpp:13]: (portability) %ld in format string (no. 7) requires 'long' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %ld in format string (no. 8) requires 'long' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %ld in format string (no. 9) requires 'long' but the argument type is 'char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3066:
|
3072:
3073: ; }
3074:
3075: $check_ $(@expr1073744556 "cppcheck-2.8/test/testio.cpp" $, 3075 $, "struct A {};\nclass B : public std::vector<const int *> {} b;\nclass C : public std::vector<const struct A *> {} c;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %u\", b.size(), b.size());\n    printf(\"%p %d\", b[0], b[0]);\n    printf(\"%p %d\", c[0], c[0]);\n    printf(\"%p %d\", s.c_str(), s.c_str());\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
3076:
|
3083:
3084: ;
3085: $if $(@expr1073744558 $!@expr1073744559 $assertEquals $(@expr1073744560 "cppcheck-2.8/test/testio.cpp" $, 3085 $, "[test.cpp:6]: (portability) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:7]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const int *'.\n[test.cpp:8]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const struct A *'.\n[test.cpp:9]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const char *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3086:
3087:
3088: ; }
3089:
3090: $check_ $(@expr1073744563 "cppcheck-2.8/test/testio.cpp" $, 3090 $, "class A : public std::vector<std::string> {} a;\nclass B : public std::string {} b;\nstd::string s;\nvoid foo() {\n    printf(\"%p %d\", a[0].c_str(), a[0].c_str());\n    printf(\"%c %p\", b[0], b[0]);\n    printf(\"%c %p\", s[0], s[0]);\n}\n" , false , false , Settings ::@expr2377 Unix64@expr2167 $)
3091:
|
3096:
3097: ;
3098: $if $(@expr1073744565 $!@expr1073744566 $assertEquals $(@expr1073744567 "cppcheck-2.8/test/testio.cpp" $, 3098 $, "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const char *'.\n[test.cpp:6]: (warning) %p in format string (no. 2) requires an address but the argument type is 'char'.\n[test.cpp:7]: (warning) %p in format string (no. 2) requires an address but the argument type is 'char'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3099:
3100: ; }
3101:
3102: $check_ $(@expr1073744570 "cppcheck-2.8/test/testio.cpp" $, 3102 $, "template <class T>\nstruct buffer {\n    size_t size();\n};\nbuffer<int> b;\nvoid foo() {\n    printf(\"%u\", b.size());\n}\n" , false , true , Settings ::@expr2377 Unix64@expr2167 $)
3103:
|
3108:
3109: ;
3110: $if $(@expr1073744572 $!@expr1073744573 $assertEquals $(@expr1073744574 "cppcheck-2.8/test/testio.cpp" $, 3110 $, "[test.cpp:7]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
3111:
3112: $check_ $(@expr1073744577 "cppcheck-2.8/test/testio.cpp" $, 3112 $, "DWORD a;\nDWORD_PTR b;\nvoid foo() {\n    printf(\"%u %u\", a, b);\n}\n" , false , true , Settings ::@expr2391 Win32A@expr2168 $)
3113:
3114:
3115:
3116: ;
3117: $if $(@expr1073744579 $!@expr1073744580 $assertEquals $(@expr1073744581 "cppcheck-2.8/test/testio.cpp" $, 3117 $, "[test.cpp:4]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'DWORD {aka unsigned long}'.\n[test.cpp:4]: (portability) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'DWORD_PTR {aka unsigned long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3118: ; }
3119:
3120: $check_ $(@expr1073744584 "cppcheck-2.8/test/testio.cpp" $, 3120 $, "unsigned long a[] = { 1, 2 };\nvoid foo() {\n    printf(\"%d %d %x \", a[0], a[0], a[0]);\n}\n" , false , false , Settings ::@expr2391 Win32A@expr2168 $)
3121:
3122:
3123: ;
3124: $if $(@expr1073744586 $!@expr1073744587 $assertEquals $(@expr1073744588 "cppcheck-2.8/test/testio.cpp" $, 3124 $, "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned long'.\n[test.cpp:3]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned long'.\n[test.cpp:3]: (warning) %x in format string (no. 3) requires 'unsigned int' but the argument type is 'unsigned long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3125:
3126: ; }
3127:
3128: $check_ $(@expr1073744591 "cppcheck-2.8/test/testio.cpp" $, 3128 $, "void foo (wchar_t c) {\n    printf(\"%c\", c);\n}\n" , false , false , Settings ::@expr2405 Win64@expr2169 $)
3129:
3130: ;
3131: $if $(@expr1073744593 $!@expr1073744594 $assertEquals $(@expr1073744595 "cppcheck-2.8/test/testio.cpp" $, 3131 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
3132:
3133: $check_ $(@expr1073744598 "cppcheck-2.8/test/testio.cpp" $, 3133 $, "void foo() {\n    printf(\"%f %d\", static_cast<int>(1.0f), reinterpret_cast<const void *>(0));\n}" $)
3134:
3135: ;
3136: $if $(@expr1073744599 $!@expr1073744600 $assertEquals $(@expr1073744601 "cppcheck-2.8/test/testio.cpp" $, 3136 $, "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const void *'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3137: ; }
3138:
3139: $check_ $(@expr1073744604 "cppcheck-2.8/test/testio.cpp" $, 3139 $, "void foo() {\n    UNKNOWN * u;\n    printf(\"%d %x %u %f\", u[i], u[i], u[i], u[i]);\n}" $)
3140:
3141:
3142: ;
3143: $if $(@expr1073744605 $!@expr1073744606 $assertEquals $(@expr1073744607 "cppcheck-2.8/test/testio.cpp" $, 3143 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
3144:
3145: $check_ $(@expr1073744610 "cppcheck-2.8/test/testio.cpp" $, 3145 $, "void foo() {\n    long * l;\n    printf(\"%d %x %u %f\", l[i], l[i], l[i], l[i]);\n}" $)
3146:
3147:
3148: ;
3149: $if $(@expr1073744611 $!@expr1073744612 $assertEquals $(@expr1073744613 "cppcheck-2.8/test/testio.cpp" $, 3149 $, "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'signed long'.\n[test.cpp:3]: (warning) %x in format string (no. 2) requires 'unsigned int' but the argument type is 'signed long'.\n[test.cpp:3]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'signed long'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3150:
3151:
3152: ; }
3153:
3154: $check_ $(@expr1073744616 "cppcheck-2.8/test/testio.cpp" $, 3154 $, "void f() {\n    myvector<unsigned short> v1(1,0);\n    printf(\"%d\",v1[0]);\n    myvector<int> v2(1,0);\n    printf(\"%d\",v2[0]);\n    myvector<unsigned int> v3(1,0);\n    printf(\"%u\",v3[0]);\n    myvector<unsigned int> v4(1,0);\n    printf(\"%x\",v4[0]);\n    myvector<double> v5(1,0);\n    printf(\"%f\",v5[0]);\n    myvector<bool> v6(1,0);\n    printf(\"%u\",v6[0]);\n    myvector<char *> v7(1,0);\n    printf(\"%s\",v7[0]);\n}" $)
3155:
|
3168:
3169: ;
3170: $if $(@expr1073744617 $!@expr1073744618 $assertEquals $(@expr1073744619 "cppcheck-2.8/test/testio.cpp" $, 3170 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
3171:
3172: $check_ $(@expr1073744622 "cppcheck-2.8/test/testio.cpp" $, 3172 $, "std::vector<char> v;\nvoid foo() {\n   printf(\"%c %u %f\", v.at(32), v.at(32), v.at(32));\n}" $)
3173:
3174:
3175: ;
3176: $if $(@expr1073744623 $!@expr1073744624 $assertEquals $(@expr1073744625 "cppcheck-2.8/test/testio.cpp" $, 3176 $, "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'char'.\n[test.cpp:3]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'char'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3177: ; }
3178:
3179:
3180: $check_ $(@expr1073744628 "cppcheck-2.8/test/testio.cpp" $, 3180 $, "void T::a(const std::vector<double>& vx) {\n    printf(\"%f\", vx.at(0));\n}" $)
3181:
3182: ;
3183: $if $(@expr1073744629 $!@expr1073744630 $assertEquals $(@expr1073744631 "cppcheck-2.8/test/testio.cpp" $, 3183 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
3184:
3185:
3186: $check_ $(@expr1073744634 "cppcheck-2.8/test/testio.cpp" $, 3186 $, "void foo() {\n    ssize_t test = 0;\n    printf(\"%zd\", test);\n}" $)
3187:
3188:
3189: ;
3190: $if $(@expr1073744635 $!@expr1073744636 $assertEquals $(@expr1073744637 "cppcheck-2.8/test/testio.cpp" $, 3190 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
3191:
3192:
3193: $check_ $(@expr1073744640 "cppcheck-2.8/test/testio.cpp" $, 3193 $, "extern std::string StringByReturnValue();\nextern int         IntByReturnValue();\nvoid MyFunction() {\n    printf( \"%s - %s\", StringByReturnValue(), IntByReturnValue() );\n}" $)
3194:
3195:
3196:
3197: ;
3198: $if $(@expr1073744641 $!@expr1073744642 $assertEquals $(@expr1073744643 "cppcheck-2.8/test/testio.cpp" $, 3198 $, "[test.cpp:4]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'std::string'.\n[test.cpp:4]: (warning) %s in format string (no. 2) requires 'char *' but the argument type is 'signed int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3199: ; }
3200:
3201: $check_ $(@expr1073744646 "cppcheck-2.8/test/testio.cpp" $, 3201 $, "template <class T, size_t S>\nstruct Array {\n    T data[S];\n    T & operator [] (size_t i) { return data[i]; }\n};\nvoid foo() {\n    Array<int, 10> array1;\n    Array<float, 10> array2;\n    printf(\"%u %u\", array1[0], array2[0]);\n}" $)
3202:
|
3209:
3210: ;
3211: $if $(@expr1073744647 $!@expr1073744648 $assertEquals $(@expr1073744649 "cppcheck-2.8/test/testio.cpp" $, 3211 $, "[test.cpp:9]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'int'.\n[test.cpp:9]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'float'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3212: ; }
3213:
3214:
3215: $check_ $(@expr1073744652 "cppcheck-2.8/test/testio.cpp" $, 3215 $, "struct S { unsigned short x; } s = {0};\nvoid foo() {\n    printf(\"%d\", s.x);\n}" $)
3216:
3217:
3218: ;
3219: $if $(@expr1073744653 $!@expr1073744654 $assertEquals $(@expr1073744655 "cppcheck-2.8/test/testio.cpp" $, 3219 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
3220:
3221:
3222: $check_ $(@expr1073744658 "cppcheck-2.8/test/testio.cpp" $, 3222 $, "void foo(int i, unsigned int ui, long long ll, unsigned long long ull) {\n    printf(\"%Ld %Lu %Ld %Lu\", i, ui, ll, ull);\n}" $)
3223:
3224: ;
3225: $if $(@expr1073744659 $!@expr1073744660 $assertEquals $(@expr1073744661 "cppcheck-2.8/test/testio.cpp" $, 3225 $, "[test.cpp:2]: (warning) %Ld in format string (no. 1) requires 'long long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lu in format string (no. 2) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3226: ; }
3227:
3228: $check_ $(@expr1073744664 "cppcheck-2.8/test/testio.cpp" $, 3228 $, "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hhd %hhd %hhd %hhd %hhd %hhd %hhd %hhd\", c, uc, s, us, i, ui, l, ul);\n}" $)
3229:
3230: ;
3231: $if $(@expr1073744665 $!@expr1073744666 $assertEquals $(@expr1073744667 "cppcheck-2.8/test/testio.cpp" $, 3231 $, "[test.cpp:2]: (warning) %hhd in format string (no. 2) requires 'char' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hhd in format string (no. 3) requires 'char' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hhd in format string (no. 4) requires 'char' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hhd in format string (no. 5) requires 'char' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hhd in format string (no. 6) requires 'char' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hhd in format string (no. 7) requires 'char' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hhd in format string (no. 8) requires 'char' but the argument type is 'unsigned long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3232:
|
3236:
3237: ; }
3238:
3239: $check_ $(@expr1073744670 "cppcheck-2.8/test/testio.cpp" $, 3239 $, "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu\", c, uc, s, us, i, ui, l, ul);\n}" $)
3240:
3241: ;
3242: $if $(@expr1073744671 $!@expr1073744672 $assertEquals $(@expr1073744673 "cppcheck-2.8/test/testio.cpp" $, 3242 $, "[test.cpp:2]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hhu in format string (no. 3) requires 'unsigned char' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hhu in format string (no. 4) requires 'unsigned char' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hhu in format string (no. 5) requires 'unsigned char' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hhu in format string (no. 6) requires 'unsigned char' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hhu in format string (no. 7) requires 'unsigned char' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hhu in format string (no. 8) requires 'unsigned char' but the argument type is 'unsigned long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3243:
|
3247:
3248: ; }
3249:
3250: $check_ $(@expr1073744676 "cppcheck-2.8/test/testio.cpp" $, 3250 $, "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\", c, uc, s, us, i, ui, l, ul);\n}" $)
3251:
3252: ;
3253: $if $(@expr1073744677 $!@expr1073744678 $assertEquals $(@expr1073744679 "cppcheck-2.8/test/testio.cpp" $, 3253 $, "[test.cpp:2]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hhx in format string (no. 3) requires 'unsigned char' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hhx in format string (no. 4) requires 'unsigned char' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hhx in format string (no. 5) requires 'unsigned char' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hhx in format string (no. 6) requires 'unsigned char' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hhx in format string (no. 7) requires 'unsigned char' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hhx in format string (no. 8) requires 'unsigned char' but the argument type is 'unsigned long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3254:
|
3258:
3259: ; }
3260:
3261: $check_ $(@expr1073744682 "cppcheck-2.8/test/testio.cpp" $, 3261 $, "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hd %hd %hd %hd %hd %hd %hd %hd\", c, uc, s, us, i, ui, l, ul);\n}" $)
3262:
3263: ;
3264: $if $(@expr1073744683 $!@expr1073744684 $assertEquals $(@expr1073744685 "cppcheck-2.8/test/testio.cpp" $, 3264 $, "[test.cpp:2]: (warning) %hd in format string (no. 1) requires 'short' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hd in format string (no. 2) requires 'short' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hd in format string (no. 4) requires 'short' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hd in format string (no. 5) requires 'short' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hd in format string (no. 6) requires 'short' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hd in format string (no. 7) requires 'short' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hd in format string (no. 8) requires 'short' but the argument type is 'unsigned long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3265:
|
3269:
3270: ; }
3271:
3272: $check_ $(@expr1073744688 "cppcheck-2.8/test/testio.cpp" $, 3272 $, "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hu %hu %hu %hu %hu %hu %hu %hu\", c, uc, s, us, i, ui, l, ul);\n}" $)
3273:
3274: ;
3275: $if $(@expr1073744689 $!@expr1073744690 $assertEquals $(@expr1073744691 "cppcheck-2.8/test/testio.cpp" $, 3275 $, "[test.cpp:2]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hu in format string (no. 2) requires 'unsigned short' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hu in format string (no. 3) requires 'unsigned short' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hu in format string (no. 5) requires 'unsigned short' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hu in format string (no. 6) requires 'unsigned short' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hu in format string (no. 7) requires 'unsigned short' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hu in format string (no. 8) requires 'unsigned short' but the argument type is 'unsigned long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3276:
|
3280:
3281: ; }
3282:
3283: $check_ $(@expr1073744694 "cppcheck-2.8/test/testio.cpp" $, 3283 $, "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hx %hx %hx %hx %hx %hx %hx %hx\", c, uc, s, us, i, ui, l, ul);\n}" $)
3284:
3285: ;
3286: $if $(@expr1073744695 $!@expr1073744696 $assertEquals $(@expr1073744697 "cppcheck-2.8/test/testio.cpp" $, 3286 $, "[test.cpp:2]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hx in format string (no. 2) requires 'unsigned short' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hx in format string (no. 3) requires 'unsigned short' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hx in format string (no. 5) requires 'unsigned short' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hx in format string (no. 6) requires 'unsigned short' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hx in format string (no. 7) requires 'unsigned short' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hx in format string (no. 8) requires 'unsigned short' but the argument type is 'unsigned long'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3287:
|
3291:
3292: ; }
3293:
3294:
3295: $check_ $(@expr1073744700 "cppcheck-2.8/test/testio.cpp" $, 3295 $, "struct S {\n  double (* f)(double);\n};\n\nvoid foo(struct S x) {\n  printf(\"%f\", x.f(4.0));\n}" $)
3296:
|
3300:
3301: ;
3302: $if $(@expr1073744701 $!@expr1073744702 $assertEquals $(@expr1073744703 "cppcheck-2.8/test/testio.cpp" $, 3302 $, "" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return ; }
3303:
3304: $check_ $(@expr1073744706 "cppcheck-2.8/test/testio.cpp" $, 3304 $, "void f() {\n    printf(\"%lu\", sizeof(char));\n}\n" , false , true , Settings ::@expr2405 Win64@expr2169 $)
3305:
3306: ;
3307: $if $(@expr1073744708 $!@expr1073744709 $assertEquals $(@expr1073744710 "cppcheck-2.8/test/testio.cpp" $, 3307 $, "[test.cpp:2]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n" $, errout@var100 .@expr2174 str (@expr2175 ) $) $) { $return
3308: ; }
3309: }
3310:
3311: void testPrintfArgumentVariables ( ) {
3312: $testFormatStrNoWarn $(@expr1073744713 "cppcheck-2.8/test/testio.cpp" $, 3312 $, $"void f(bool x){printf(\"%u\", x);}" $) ;
3313: $testFormatStrWarn $(@expr1073744714 "cppcheck-2.8/test/testio.cpp" $, 3313 $, $"void f(char x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char'.\n" $) ;
3314: $testFormatStrWarn $(@expr1073744715 "cppcheck-2.8/test/testio.cpp" $, 3314 $, $"void f(signed char x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed char'.\n" $) ;
3315: $testFormatStrNoWarn $(@expr1073744716 "cppcheck-2.8/test/testio.cpp" $, 3315 $, $"void f(unsigned char x){printf(\"%u\", x);}" $) ;
3316: $testFormatStrWarn $(@expr1073744717 "cppcheck-2.8/test/testio.cpp" $, 3316 $, $"void f(signed short x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed short'.\n" $) ;
3317: $testFormatStrNoWarn $(@expr1073744718 "cppcheck-2.8/test/testio.cpp" $, 3317 $, $"void f(unsigned short x){printf(\"%u\", x);}" $) ;
3318: $testFormatStrWarn $(@expr1073744719 "cppcheck-2.8/test/testio.cpp" $, 3318 $, $"void f(signed int x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n" $) ;
3319: $testFormatStrNoWarn $(@expr1073744720 "cppcheck-2.8/test/testio.cpp" $, 3319 $, $"void f(unsigned int x){printf(\"%u\", x);}" $) ;
3320: $testFormatStrWarn $(@expr1073744721 "cppcheck-2.8/test/testio.cpp" $, 3320 $, $"void f(signed long x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n" $) ;
3321: $testFormatStrWarn $(@expr1073744722 "cppcheck-2.8/test/testio.cpp" $, 3321 $, $"void f(unsigned long x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n" $) ;
3322: $testFormatStrWarn $(@expr1073744723 "cppcheck-2.8/test/testio.cpp" $, 3322 $, $"void f(signed long long x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n" $) ;
3323: $testFormatStrWarn $(@expr1073744724 "cppcheck-2.8/test/testio.cpp" $, 3323 $, $"void f(unsigned long long x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n" $) ;
3324: $testFormatStrWarn $(@expr1073744725 "cppcheck-2.8/test/testio.cpp" $, 3324 $, $"void f(float x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n" $) ;
3325: $testFormatStrWarn $(@expr1073744726 "cppcheck-2.8/test/testio.cpp" $, 3325 $, $"void f(double x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n" $) ;
3326: $testFormatStrWarn $(@expr1073744727 "cppcheck-2.8/test/testio.cpp" $, 3326 $, $"void f(long double x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'long double'.\n" $) ;
3327: $testFormatStrWarn $(@expr1073744728 "cppcheck-2.8/test/testio.cpp" $, 3327 $, $"void f(void * x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'void *'.\n" $) ;
3328: $testFormatStrWarnAka $(@expr1073744729 "cppcheck-2.8/test/testio.cpp" $, 3328 $, $"void f(size_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3329: $testFormatStrWarnAka $(@expr1073744730 "cppcheck-2.8/test/testio.cpp" $, 3329 $, $"void f(ssize_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3330: $testFormatStrWarnAka $(@expr1073744731 "cppcheck-2.8/test/testio.cpp" $, 3330 $, $"void f(ptrdiff_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3331: $testFormatStrWarnAka $(@expr1073744732 "cppcheck-2.8/test/testio.cpp" $, 3331 $, $"void f(unsigned ptrdiff_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3332: $testFormatStrWarnAka $(@expr1073744733 "cppcheck-2.8/test/testio.cpp" $, 3332 $, $"void f(intmax_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3333: $testFormatStrWarnAka $(@expr1073744734 "cppcheck-2.8/test/testio.cpp" $, 3333 $, $"void f(uintmax_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3334: $testFormatStrWarnAka $(@expr1073744735 "cppcheck-2.8/test/testio.cpp" $, 3334 $, $"void f(intptr_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3335: $testFormatStrWarnAka $(@expr1073744736 "cppcheck-2.8/test/testio.cpp" $, 3335 $, $"void f(uintptr_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" $) ;
3336: $testFormatStrWarnAka $(@expr1073744737 "cppcheck-2.8/test/testio.cpp" $, 3336 $, $"void f(std::size_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3337: $testFormatStrWarnAka $(@expr1073744738 "cppcheck-2.8/test/testio.cpp" $, 3337 $, $"void f(std::ssize_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3338: $testFormatStrWarnAka $(@expr1073744739 "cppcheck-2.8/test/testio.cpp" $, 3338 $, $"void f(std::ptrdiff_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3339: $testFormatStrWarnAka $(@expr1073744740 "cppcheck-2.8/test/testio.cpp" $, 3339 $, $"void f(std::intmax_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3340: $testFormatStrWarnAka $(@expr1073744741 "cppcheck-2.8/test/testio.cpp" $, 3340 $, $"void f(std::uintmax_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" $) ;
3341: $testFormatStrWarnAka $(@expr1073744742 "cppcheck-2.8/test/testio.cpp" $, 3341 $, $"void f(std::intptr_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3342: $testFormatStrWarnAka $(@expr1073744743 "cppcheck-2.8/test/testio.cpp" $, 3342 $, $"void f(std::uintptr_t x){printf(\"%u\", x);}" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3343:
3344: $testFormatStrNoWarn $(@expr1073744744 "cppcheck-2.8/test/testio.cpp" $, 3344 $, $"void f(bool x){printf(\"%x\", x);}" $) ;
3345:
3346:
3347: $testFormatStrNoWarn $(@expr1073744745 "cppcheck-2.8/test/testio.cpp" $, 3347 $, $"void f(unsigned char x){printf(\"%x\", x);}" $) ;
3348:
3349: $testFormatStrNoWarn $(@expr1073744746 "cppcheck-2.8/test/testio.cpp" $, 3349 $, $"void f(unsigned short x){printf(\"%x\", x);}" $) ;
3350:
3351: $testFormatStrNoWarn $(@expr1073744747 "cppcheck-2.8/test/testio.cpp" $, 3351 $, $"void f(unsigned int x){printf(\"%x\", x);}" $) ;
3352: $testFormatStrWarn $(@expr1073744748 "cppcheck-2.8/test/testio.cpp" $, 3352 $, $"void f(signed long x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n" $) ;
3353: $testFormatStrWarn $(@expr1073744749 "cppcheck-2.8/test/testio.cpp" $, 3353 $, $"void f(unsigned long x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n" $) ;
3354: $testFormatStrWarn $(@expr1073744750 "cppcheck-2.8/test/testio.cpp" $, 3354 $, $"void f(signed long long x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n" $) ;
3355: $testFormatStrWarn $(@expr1073744751 "cppcheck-2.8/test/testio.cpp" $, 3355 $, $"void f(unsigned long long x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n" $) ;
3356: $testFormatStrWarn $(@expr1073744752 "cppcheck-2.8/test/testio.cpp" $, 3356 $, $"void f(float x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n" $) ;
3357: $testFormatStrWarn $(@expr1073744753 "cppcheck-2.8/test/testio.cpp" $, 3357 $, $"void f(double x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n" $) ;
3358: $testFormatStrWarn $(@expr1073744754 "cppcheck-2.8/test/testio.cpp" $, 3358 $, $"void f(long double x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'long double'.\n" $) ;
3359: $testFormatStrWarn $(@expr1073744755 "cppcheck-2.8/test/testio.cpp" $, 3359 $, $"void f(void * x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'void *'.\n" $) ;
3360: $testFormatStrWarnAka $(@expr1073744756 "cppcheck-2.8/test/testio.cpp" $, 3360 $, $"void f(size_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3361: $testFormatStrWarnAka $(@expr1073744757 "cppcheck-2.8/test/testio.cpp" $, 3361 $, $"void f(ssize_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3362: $testFormatStrWarnAka $(@expr1073744758 "cppcheck-2.8/test/testio.cpp" $, 3362 $, $"void f(ptrdiff_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3363: $testFormatStrWarnAka $(@expr1073744759 "cppcheck-2.8/test/testio.cpp" $, 3363 $, $"void f(unsigned ptrdiff_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3364: $testFormatStrWarnAka $(@expr1073744760 "cppcheck-2.8/test/testio.cpp" $, 3364 $, $"void f(intmax_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3365: $testFormatStrWarnAka $(@expr1073744761 "cppcheck-2.8/test/testio.cpp" $, 3365 $, $"void f(uintmax_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3366: $testFormatStrWarnAka $(@expr1073744762 "cppcheck-2.8/test/testio.cpp" $, 3366 $, $"void f(intptr_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3367: $testFormatStrWarnAka $(@expr1073744763 "cppcheck-2.8/test/testio.cpp" $, 3367 $, $"void f(uintptr_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" $) ;
3368: $testFormatStrWarnAka $(@expr1073744764 "cppcheck-2.8/test/testio.cpp" $, 3368 $, $"void f(std::size_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3369: $testFormatStrWarnAka $(@expr1073744765 "cppcheck-2.8/test/testio.cpp" $, 3369 $, $"void f(std::ssize_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3370: $testFormatStrWarnAka $(@expr1073744766 "cppcheck-2.8/test/testio.cpp" $, 3370 $, $"void f(std::ptrdiff_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3371: $testFormatStrWarnAka $(@expr1073744767 "cppcheck-2.8/test/testio.cpp" $, 3371 $, $"void f(std::intmax_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3372: $testFormatStrWarnAka $(@expr1073744768 "cppcheck-2.8/test/testio.cpp" $, 3372 $, $"void f(std::uintmax_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" $) ;
3373: $testFormatStrWarnAka $(@expr1073744769 "cppcheck-2.8/test/testio.cpp" $, 3373 $, $"void f(std::intptr_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3374: $testFormatStrWarnAka $(@expr1073744770 "cppcheck-2.8/test/testio.cpp" $, 3374 $, $"void f(std::uintptr_t x){printf(\"%x\", x);}" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3375:
3376: $testFormatStrWarn $(@expr1073744771 "cppcheck-2.8/test/testio.cpp" $, 3376 $, $"void f(bool x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'bool'.\n" $) ;
3377: $testFormatStrWarn $(@expr1073744772 "cppcheck-2.8/test/testio.cpp" $, 3377 $, $"void f(char x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'char'.\n" $) ;
3378: $testFormatStrWarn $(@expr1073744773 "cppcheck-2.8/test/testio.cpp" $, 3378 $, $"void f(signed char x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed char'.\n" $) ;
3379: $testFormatStrWarn $(@expr1073744774 "cppcheck-2.8/test/testio.cpp" $, 3379 $, $"void f(unsigned char x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned char'.\n" $) ;
3380: $testFormatStrWarn $(@expr1073744775 "cppcheck-2.8/test/testio.cpp" $, 3380 $, $"void f(signed short x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed short'.\n" $) ;
3381: $testFormatStrWarn $(@expr1073744776 "cppcheck-2.8/test/testio.cpp" $, 3381 $, $"void f(unsigned short x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned short'.\n" $) ;
3382: $testFormatStrWarn $(@expr1073744777 "cppcheck-2.8/test/testio.cpp" $, 3382 $, $"void f(signed int x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed int'.\n" $) ;
3383: $testFormatStrWarn $(@expr1073744778 "cppcheck-2.8/test/testio.cpp" $, 3383 $, $"void f(unsigned int x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n" $) ;
3384: $testFormatStrWarn $(@expr1073744779 "cppcheck-2.8/test/testio.cpp" $, 3384 $, $"void f(signed long x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long'.\n" $) ;
3385: $testFormatStrNoWarn $(@expr1073744780 "cppcheck-2.8/test/testio.cpp" $, 3385 $, $"void f(unsigned long x){printf(\"%lu\", x);}" $) ;
3386: $testFormatStrWarn $(@expr1073744781 "cppcheck-2.8/test/testio.cpp" $, 3386 $, $"void f(signed long long x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long long'.\n" $) ;
3387: $testFormatStrWarn $(@expr1073744782 "cppcheck-2.8/test/testio.cpp" $, 3387 $, $"void f(unsigned long long x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned long long'.\n" $) ;
3388: $testFormatStrWarn $(@expr1073744783 "cppcheck-2.8/test/testio.cpp" $, 3388 $, $"void f(float x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'float'.\n" $) ;
3389: $testFormatStrWarn $(@expr1073744784 "cppcheck-2.8/test/testio.cpp" $, 3389 $, $"void f(double x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'double'.\n" $) ;
3390: $testFormatStrWarn $(@expr1073744785 "cppcheck-2.8/test/testio.cpp" $, 3390 $, $"void f(long double x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'long double'.\n" $) ;
3391: $testFormatStrWarn $(@expr1073744786 "cppcheck-2.8/test/testio.cpp" $, 3391 $, $"void f(void * x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'void *'.\n" $) ;
3392: $testFormatStrWarnAka $(@expr1073744787 "cppcheck-2.8/test/testio.cpp" $, 3392 $, $"void f(size_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3393: $testFormatStrWarnAka $(@expr1073744788 "cppcheck-2.8/test/testio.cpp" $, 3393 $, $"void f(ssize_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3394: $testFormatStrWarnAka $(@expr1073744789 "cppcheck-2.8/test/testio.cpp" $, 3394 $, $"void f(ptrdiff_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3395: $testFormatStrWarnAkaWin64 $(@expr1073744790 "cppcheck-2.8/test/testio.cpp" $, 3395 $, $"void f(unsigned ptrdiff_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3396: $testFormatStrWarnAka $(@expr1073744791 "cppcheck-2.8/test/testio.cpp" $, 3396 $, $"void f(intmax_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3397: $testFormatStrWarnAka $(@expr1073744792 "cppcheck-2.8/test/testio.cpp" $, 3397 $, $"void f(uintmax_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3398: $testFormatStrWarnAka $(@expr1073744793 "cppcheck-2.8/test/testio.cpp" $, 3398 $, $"void f(intptr_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3399: $testFormatStrWarnAkaWin64 $(@expr1073744794 "cppcheck-2.8/test/testio.cpp" $, 3399 $, $"void f(uintptr_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" $) ;
3400: $testFormatStrWarnAka $(@expr1073744795 "cppcheck-2.8/test/testio.cpp" $, 3400 $, $"void f(std::size_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3401: $testFormatStrWarnAka $(@expr1073744796 "cppcheck-2.8/test/testio.cpp" $, 3401 $, $"void f(std::ssize_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3402: $testFormatStrWarnAka $(@expr1073744797 "cppcheck-2.8/test/testio.cpp" $, 3402 $, $"void f(std::ptrdiff_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3403: $testFormatStrWarnAka $(@expr1073744798 "cppcheck-2.8/test/testio.cpp" $, 3403 $, $"void f(std::intmax_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3404: $testFormatStrWarnAkaWin64 $(@expr1073744799 "cppcheck-2.8/test/testio.cpp" $, 3404 $, $"void f(std::uintmax_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" $) ;
3405: $testFormatStrWarnAka $(@expr1073744800 "cppcheck-2.8/test/testio.cpp" $, 3405 $, $"void f(std::intptr_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3406: $testFormatStrWarnAkaWin64 $(@expr1073744801 "cppcheck-2.8/test/testio.cpp" $, 3406 $, $"void f(std::uintptr_t x){printf(\"%lu\", x);}" $, $"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3407:
3408: $testFormatStrWarn $(@expr1073744802 "cppcheck-2.8/test/testio.cpp" $, 3408 $, $"void f(bool x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'bool'.\n" $) ;
3409: $testFormatStrWarn $(@expr1073744803 "cppcheck-2.8/test/testio.cpp" $, 3409 $, $"void f(char x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'char'.\n" $) ;
3410: $testFormatStrWarn $(@expr1073744804 "cppcheck-2.8/test/testio.cpp" $, 3410 $, $"void f(signed char x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed char'.\n" $) ;
3411: $testFormatStrWarn $(@expr1073744805 "cppcheck-2.8/test/testio.cpp" $, 3411 $, $"void f(unsigned char x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned char'.\n" $) ;
3412: $testFormatStrWarn $(@expr1073744806 "cppcheck-2.8/test/testio.cpp" $, 3412 $, $"void f(signed short x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed short'.\n" $) ;
3413: $testFormatStrWarn $(@expr1073744807 "cppcheck-2.8/test/testio.cpp" $, 3413 $, $"void f(unsigned short x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned short'.\n" $) ;
3414: $testFormatStrWarn $(@expr1073744808 "cppcheck-2.8/test/testio.cpp" $, 3414 $, $"void f(signed int x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed int'.\n" $) ;
3415: $testFormatStrWarn $(@expr1073744809 "cppcheck-2.8/test/testio.cpp" $, 3415 $, $"void f(unsigned int x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n" $) ;
3416:
3417: $testFormatStrNoWarn $(@expr1073744810 "cppcheck-2.8/test/testio.cpp" $, 3417 $, $"void f(unsigned long x){printf(\"%lx\", x);}" $) ;
3418: $testFormatStrWarn $(@expr1073744811 "cppcheck-2.8/test/testio.cpp" $, 3418 $, $"void f(signed long long x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long long'.\n" $) ;
3419: $testFormatStrWarn $(@expr1073744812 "cppcheck-2.8/test/testio.cpp" $, 3419 $, $"void f(unsigned long long x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned long long'.\n" $) ;
3420: $testFormatStrWarn $(@expr1073744813 "cppcheck-2.8/test/testio.cpp" $, 3420 $, $"void f(float x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'float'.\n" $) ;
3421: $testFormatStrWarn $(@expr1073744814 "cppcheck-2.8/test/testio.cpp" $, 3421 $, $"void f(double x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'double'.\n" $) ;
3422: $testFormatStrWarn $(@expr1073744815 "cppcheck-2.8/test/testio.cpp" $, 3422 $, $"void f(long double x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'long double'.\n" $) ;
3423: $testFormatStrWarn $(@expr1073744816 "cppcheck-2.8/test/testio.cpp" $, 3423 $, $"void f(void * x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'void *'.\n" $) ;
3424: $testFormatStrWarnAka $(@expr1073744817 "cppcheck-2.8/test/testio.cpp" $, 3424 $, $"void f(size_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3425: $testFormatStrWarnAkaWin64 $(@expr1073744818 "cppcheck-2.8/test/testio.cpp" $, 3425 $, $"void f(ssize_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3426: $testFormatStrWarnAkaWin64 $(@expr1073744819 "cppcheck-2.8/test/testio.cpp" $, 3426 $, $"void f(ptrdiff_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3427: $testFormatStrWarnAkaWin64 $(@expr1073744820 "cppcheck-2.8/test/testio.cpp" $, 3427 $, $"void f(unsigned ptrdiff_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3428: $testFormatStrWarnAkaWin64 $(@expr1073744821 "cppcheck-2.8/test/testio.cpp" $, 3428 $, $"void f(intmax_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3429: $testFormatStrWarnAka $(@expr1073744822 "cppcheck-2.8/test/testio.cpp" $, 3429 $, $"void f(uintmax_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3430: $testFormatStrWarnAkaWin64 $(@expr1073744823 "cppcheck-2.8/test/testio.cpp" $, 3430 $, $"void f(intptr_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3431: $testFormatStrWarnAkaWin64 $(@expr1073744824 "cppcheck-2.8/test/testio.cpp" $, 3431 $, $"void f(uintptr_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" $) ;
3432: $testFormatStrWarnAka $(@expr1073744825 "cppcheck-2.8/test/testio.cpp" $, 3432 $, $"void f(std::size_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3433: $testFormatStrWarnAkaWin64 $(@expr1073744826 "cppcheck-2.8/test/testio.cpp" $, 3433 $, $"void f(std::ssize_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3434: $testFormatStrWarnAkaWin64 $(@expr1073744827 "cppcheck-2.8/test/testio.cpp" $, 3434 $, $"void f(std::ptrdiff_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3435: $testFormatStrWarnAkaWin64 $(@expr1073744828 "cppcheck-2.8/test/testio.cpp" $, 3435 $, $"void f(std::intmax_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3436: $testFormatStrWarnAkaWin64 $(@expr1073744829 "cppcheck-2.8/test/testio.cpp" $, 3436 $, $"void f(std::uintmax_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" $) ;
3437: $testFormatStrWarnAkaWin64 $(@expr1073744830 "cppcheck-2.8/test/testio.cpp" $, 3437 $, $"void f(std::intptr_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3438: $testFormatStrWarnAkaWin64 $(@expr1073744831 "cppcheck-2.8/test/testio.cpp" $, 3438 $, $"void f(std::uintptr_t x){printf(\"%lx\", x);}" $, $"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3439:
3440: $testFormatStrWarn $(@expr1073744832 "cppcheck-2.8/test/testio.cpp" $, 3440 $, $"void f(bool x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'bool'.\n" $) ;
3441: $testFormatStrWarn $(@expr1073744833 "cppcheck-2.8/test/testio.cpp" $, 3441 $, $"void f(char x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'char'.\n" $) ;
3442: $testFormatStrWarn $(@expr1073744834 "cppcheck-2.8/test/testio.cpp" $, 3442 $, $"void f(signed char x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed char'.\n" $) ;
3443: $testFormatStrWarn $(@expr1073744835 "cppcheck-2.8/test/testio.cpp" $, 3443 $, $"void f(unsigned char x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned char'.\n" $) ;
3444: $testFormatStrWarn $(@expr1073744836 "cppcheck-2.8/test/testio.cpp" $, 3444 $, $"void f(signed short x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed short'.\n" $) ;
3445: $testFormatStrWarn $(@expr1073744837 "cppcheck-2.8/test/testio.cpp" $, 3445 $, $"void f(unsigned short x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned short'.\n" $) ;
3446: $testFormatStrWarn $(@expr1073744838 "cppcheck-2.8/test/testio.cpp" $, 3446 $, $"void f(signed int x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed int'.\n" $) ;
3447: $testFormatStrWarn $(@expr1073744839 "cppcheck-2.8/test/testio.cpp" $, 3447 $, $"void f(unsigned int x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" $) ;
3448: $testFormatStrWarn $(@expr1073744840 "cppcheck-2.8/test/testio.cpp" $, 3448 $, $"void f(signed long x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n" $) ;
3449: $testFormatStrWarn $(@expr1073744841 "cppcheck-2.8/test/testio.cpp" $, 3449 $, $"void f(unsigned long x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n" $) ;
3450: $testFormatStrWarn $(@expr1073744842 "cppcheck-2.8/test/testio.cpp" $, 3450 $, $"void f(signed long long x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long long'.\n" $) ;
3451: $testFormatStrNoWarn $(@expr1073744843 "cppcheck-2.8/test/testio.cpp" $, 3451 $, $"void f(unsigned long long x){printf(\"%llu\", x);}" $) ;
3452: $testFormatStrWarn $(@expr1073744844 "cppcheck-2.8/test/testio.cpp" $, 3452 $, $"void f(float x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n" $) ;
3453: $testFormatStrWarn $(@expr1073744845 "cppcheck-2.8/test/testio.cpp" $, 3453 $, $"void f(double x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n" $) ;
3454: $testFormatStrWarn $(@expr1073744846 "cppcheck-2.8/test/testio.cpp" $, 3454 $, $"void f(long double x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n" $) ;
3455: $testFormatStrWarn $(@expr1073744847 "cppcheck-2.8/test/testio.cpp" $, 3455 $, $"void f(void * x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n" $) ;
3456: $testFormatStrWarnAka $(@expr1073744848 "cppcheck-2.8/test/testio.cpp" $, 3456 $, $"void f(size_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3457: $testFormatStrWarnAka $(@expr1073744849 "cppcheck-2.8/test/testio.cpp" $, 3457 $, $"void f(ssize_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3458: $testFormatStrWarnAka $(@expr1073744850 "cppcheck-2.8/test/testio.cpp" $, 3458 $, $"void f(ptrdiff_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3459: $testFormatStrWarnAkaWin32 $(@expr1073744851 "cppcheck-2.8/test/testio.cpp" $, 3459 $, $"void f(unsigned ptrdiff_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $) ;
3460: $testFormatStrWarnAka $(@expr1073744852 "cppcheck-2.8/test/testio.cpp" $, 3460 $, $"void f(intmax_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3461: $testFormatStrWarnAka $(@expr1073744853 "cppcheck-2.8/test/testio.cpp" $, 3461 $, $"void f(uintmax_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3462: $testFormatStrWarnAka $(@expr1073744854 "cppcheck-2.8/test/testio.cpp" $, 3462 $, $"void f(intptr_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3463: $testFormatStrWarnAkaWin32 $(@expr1073744855 "cppcheck-2.8/test/testio.cpp" $, 3463 $, $"void f(uintptr_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $) ;
3464: $testFormatStrWarnAka $(@expr1073744856 "cppcheck-2.8/test/testio.cpp" $, 3464 $, $"void f(std::size_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3465: $testFormatStrWarnAka $(@expr1073744857 "cppcheck-2.8/test/testio.cpp" $, 3465 $, $"void f(std::ssize_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3466: $testFormatStrWarnAka $(@expr1073744858 "cppcheck-2.8/test/testio.cpp" $, 3466 $, $"void f(std::ptrdiff_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3467: $testFormatStrWarnAka $(@expr1073744859 "cppcheck-2.8/test/testio.cpp" $, 3467 $, $"void f(std::intmax_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3468: $testFormatStrWarnAkaWin32 $(@expr1073744860 "cppcheck-2.8/test/testio.cpp" $, 3468 $, $"void f(std::uintmax_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $) ;
3469: $testFormatStrWarnAka $(@expr1073744861 "cppcheck-2.8/test/testio.cpp" $, 3469 $, $"void f(std::intptr_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3470: $testFormatStrWarnAkaWin32 $(@expr1073744862 "cppcheck-2.8/test/testio.cpp" $, 3470 $, $"void f(std::uintptr_t x){printf(\"%llu\", x);}" $, $"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $) ;
3471:
3472: $testFormatStrWarn $(@expr1073744863 "cppcheck-2.8/test/testio.cpp" $, 3472 $, $"void f(bool x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'bool'.\n" $) ;
3473: $testFormatStrWarn $(@expr1073744864 "cppcheck-2.8/test/testio.cpp" $, 3473 $, $"void f(char x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'char'.\n" $) ;
3474: $testFormatStrWarn $(@expr1073744865 "cppcheck-2.8/test/testio.cpp" $, 3474 $, $"void f(signed char x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed char'.\n" $) ;
3475: $testFormatStrWarn $(@expr1073744866 "cppcheck-2.8/test/testio.cpp" $, 3475 $, $"void f(unsigned char x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned char'.\n" $) ;
3476: $testFormatStrWarn $(@expr1073744867 "cppcheck-2.8/test/testio.cpp" $, 3476 $, $"void f(signed short x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed short'.\n" $) ;
3477: $testFormatStrWarn $(@expr1073744868 "cppcheck-2.8/test/testio.cpp" $, 3477 $, $"void f(unsigned short x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned short'.\n" $) ;
3478: $testFormatStrWarn $(@expr1073744869 "cppcheck-2.8/test/testio.cpp" $, 3478 $, $"void f(signed int x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed int'.\n" $) ;
3479: $testFormatStrWarn $(@expr1073744870 "cppcheck-2.8/test/testio.cpp" $, 3479 $, $"void f(unsigned int x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" $) ;
3480: $testFormatStrWarn $(@expr1073744871 "cppcheck-2.8/test/testio.cpp" $, 3480 $, $"void f(signed long x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n" $) ;
3481: $testFormatStrWarn $(@expr1073744872 "cppcheck-2.8/test/testio.cpp" $, 3481 $, $"void f(unsigned long x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n" $) ;
3482:
3483: $testFormatStrNoWarn $(@expr1073744873 "cppcheck-2.8/test/testio.cpp" $, 3483 $, $"void f(unsigned long long x){printf(\"%llx\", x);}" $) ;
3484: $testFormatStrWarn $(@expr1073744874 "cppcheck-2.8/test/testio.cpp" $, 3484 $, $"void f(float x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n" $) ;
3485: $testFormatStrWarn $(@expr1073744875 "cppcheck-2.8/test/testio.cpp" $, 3485 $, $"void f(double x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n" $) ;
3486: $testFormatStrWarn $(@expr1073744876 "cppcheck-2.8/test/testio.cpp" $, 3486 $, $"void f(long double x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n" $) ;
3487: $testFormatStrWarn $(@expr1073744877 "cppcheck-2.8/test/testio.cpp" $, 3487 $, $"void f(void * x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n" $) ;
3488: $testFormatStrWarnAka $(@expr1073744878 "cppcheck-2.8/test/testio.cpp" $, 3488 $, $"void f(size_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3489: $testFormatStrWarnAkaWin32 $(@expr1073744879 "cppcheck-2.8/test/testio.cpp" $, 3489 $, $"void f(ssize_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n" $) ;
3490: $testFormatStrWarnAkaWin32 $(@expr1073744880 "cppcheck-2.8/test/testio.cpp" $, 3490 $, $"void f(ptrdiff_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $) ;
3491: $testFormatStrWarnAkaWin32 $(@expr1073744881 "cppcheck-2.8/test/testio.cpp" $, 3491 $, $"void f(unsigned ptrdiff_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $) ;
3492: $testFormatStrWarnAkaWin32 $(@expr1073744882 "cppcheck-2.8/test/testio.cpp" $, 3492 $, $"void f(intmax_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n" $) ;
3493: $testFormatStrWarnAka $(@expr1073744883 "cppcheck-2.8/test/testio.cpp" $, 3493 $, $"void f(uintmax_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3494: $testFormatStrWarnAkaWin32 $(@expr1073744884 "cppcheck-2.8/test/testio.cpp" $, 3494 $, $"void f(intptr_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n" $) ;
3495: $testFormatStrWarnAkaWin32 $(@expr1073744885 "cppcheck-2.8/test/testio.cpp" $, 3495 $, $"void f(uintptr_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $) ;
3496: $testFormatStrWarnAka $(@expr1073744886 "cppcheck-2.8/test/testio.cpp" $, 3496 $, $"void f(std::size_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3497: $testFormatStrWarnAkaWin32 $(@expr1073744887 "cppcheck-2.8/test/testio.cpp" $, 3497 $, $"void f(std::ssize_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n" $) ;
3498: $testFormatStrWarnAkaWin32 $(@expr1073744888 "cppcheck-2.8/test/testio.cpp" $, 3498 $, $"void f(std::ptrdiff_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $) ;
3499: $testFormatStrWarnAkaWin32 $(@expr1073744889 "cppcheck-2.8/test/testio.cpp" $, 3499 $, $"void f(std::intmax_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n" $) ;
3500: $testFormatStrWarnAkaWin32 $(@expr1073744890 "cppcheck-2.8/test/testio.cpp" $, 3500 $, $"void f(std::uintmax_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $) ;
3501: $testFormatStrWarnAkaWin32 $(@expr1073744891 "cppcheck-2.8/test/testio.cpp" $, 3501 $, $"void f(std::intptr_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n" $) ;
3502: $testFormatStrWarnAkaWin32 $(@expr1073744892 "cppcheck-2.8/test/testio.cpp" $, 3502 $, $"void f(std::uintptr_t x){printf(\"%llx\", x);}" $, $"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $) ;
3503:
3504: $testFormatStrWarn $(@expr1073744893 "cppcheck-2.8/test/testio.cpp" $, 3504 $, $"void f(bool x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'bool'.\n" $) ;
3505: $testFormatStrWarn $(@expr1073744894 "cppcheck-2.8/test/testio.cpp" $, 3505 $, $"void f(char x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n" $) ;
3506: $testFormatStrWarn $(@expr1073744895 "cppcheck-2.8/test/testio.cpp" $, 3506 $, $"void f(signed char x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed char'.\n" $) ;
3507: $testFormatStrWarn $(@expr1073744896 "cppcheck-2.8/test/testio.cpp" $, 3507 $, $"void f(unsigned char x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned char'.\n" $) ;
3508: $testFormatStrWarn $(@expr1073744897 "cppcheck-2.8/test/testio.cpp" $, 3508 $, $"void f(signed short x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed short'.\n" $) ;
3509: $testFormatStrNoWarn $(@expr1073744898 "cppcheck-2.8/test/testio.cpp" $, 3509 $, $"void f(unsigned short x){printf(\"%hu\", x);}" $) ;
3510: $testFormatStrWarn $(@expr1073744899 "cppcheck-2.8/test/testio.cpp" $, 3510 $, $"void f(signed int x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed int'.\n" $) ;
3511: $testFormatStrWarn $(@expr1073744900 "cppcheck-2.8/test/testio.cpp" $, 3511 $, $"void f(unsigned int x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned int'.\n" $) ;
3512: $testFormatStrWarn $(@expr1073744901 "cppcheck-2.8/test/testio.cpp" $, 3512 $, $"void f(signed long x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long'.\n" $) ;
3513: $testFormatStrWarn $(@expr1073744902 "cppcheck-2.8/test/testio.cpp" $, 3513 $, $"void f(unsigned long x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long'.\n" $) ;
3514: $testFormatStrWarn $(@expr1073744903 "cppcheck-2.8/test/testio.cpp" $, 3514 $, $"void f(signed long long x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long long'.\n" $) ;
3515: $testFormatStrWarn $(@expr1073744904 "cppcheck-2.8/test/testio.cpp" $, 3515 $, $"void f(unsigned long long x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long long'.\n" $) ;
3516: $testFormatStrWarn $(@expr1073744905 "cppcheck-2.8/test/testio.cpp" $, 3516 $, $"void f(float x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'float'.\n" $) ;
3517: $testFormatStrWarn $(@expr1073744906 "cppcheck-2.8/test/testio.cpp" $, 3517 $, $"void f(double x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'double'.\n" $) ;
3518: $testFormatStrWarn $(@expr1073744907 "cppcheck-2.8/test/testio.cpp" $, 3518 $, $"void f(long double x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'long double'.\n" $) ;
3519: $testFormatStrWarn $(@expr1073744908 "cppcheck-2.8/test/testio.cpp" $, 3519 $, $"void f(void * x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'void *'.\n" $) ;
3520: $testFormatStrWarnAka $(@expr1073744909 "cppcheck-2.8/test/testio.cpp" $, 3520 $, $"void f(size_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3521: $testFormatStrWarnAka $(@expr1073744910 "cppcheck-2.8/test/testio.cpp" $, 3521 $, $"void f(ssize_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3522: $testFormatStrWarnAka $(@expr1073744911 "cppcheck-2.8/test/testio.cpp" $, 3522 $, $"void f(ptrdiff_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3523: $testFormatStrWarnAka $(@expr1073744912 "cppcheck-2.8/test/testio.cpp" $, 3523 $, $"void f(unsigned ptrdiff_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3524: $testFormatStrWarnAka $(@expr1073744913 "cppcheck-2.8/test/testio.cpp" $, 3524 $, $"void f(intmax_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3525: $testFormatStrWarnAka $(@expr1073744914 "cppcheck-2.8/test/testio.cpp" $, 3525 $, $"void f(uintmax_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3526: $testFormatStrWarnAka $(@expr1073744915 "cppcheck-2.8/test/testio.cpp" $, 3526 $, $"void f(std::size_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3527: $testFormatStrWarnAka $(@expr1073744916 "cppcheck-2.8/test/testio.cpp" $, 3527 $, $"void f(std::ssize_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3528: $testFormatStrWarnAka $(@expr1073744917 "cppcheck-2.8/test/testio.cpp" $, 3528 $, $"void f(std::ptrdiff_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3529: $testFormatStrWarnAka $(@expr1073744918 "cppcheck-2.8/test/testio.cpp" $, 3529 $, $"void f(std::intptr_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3530: $testFormatStrWarnAka $(@expr1073744919 "cppcheck-2.8/test/testio.cpp" $, 3530 $, $"void f(std::uintptr_t x){printf(\"%hu\", x);}" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3531:
3532: $testFormatStrWarn $(@expr1073744920 "cppcheck-2.8/test/testio.cpp" $, 3532 $, $"void f(bool x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'bool'.\n" $) ;
3533: $testFormatStrWarn $(@expr1073744921 "cppcheck-2.8/test/testio.cpp" $, 3533 $, $"void f(char x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n" $) ;
3534: $testFormatStrWarn $(@expr1073744922 "cppcheck-2.8/test/testio.cpp" $, 3534 $, $"void f(signed char x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed char'.\n" $) ;
3535: $testFormatStrWarn $(@expr1073744923 "cppcheck-2.8/test/testio.cpp" $, 3535 $, $"void f(unsigned char x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned char'.\n" $) ;
3536: $testFormatStrWarn $(@expr1073744924 "cppcheck-2.8/test/testio.cpp" $, 3536 $, $"void f(signed short x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed short'.\n" $) ;
3537: $testFormatStrNoWarn $(@expr1073744925 "cppcheck-2.8/test/testio.cpp" $, 3537 $, $"void f(unsigned short x){printf(\"%hx\", x);}" $) ;
3538: $testFormatStrWarn $(@expr1073744926 "cppcheck-2.8/test/testio.cpp" $, 3538 $, $"void f(signed int x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed int'.\n" $) ;
3539: $testFormatStrWarn $(@expr1073744927 "cppcheck-2.8/test/testio.cpp" $, 3539 $, $"void f(unsigned int x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned int'.\n" $) ;
3540: $testFormatStrWarn $(@expr1073744928 "cppcheck-2.8/test/testio.cpp" $, 3540 $, $"void f(signed long x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long'.\n" $) ;
3541: $testFormatStrWarn $(@expr1073744929 "cppcheck-2.8/test/testio.cpp" $, 3541 $, $"void f(unsigned long x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long'.\n" $) ;
3542: $testFormatStrWarn $(@expr1073744930 "cppcheck-2.8/test/testio.cpp" $, 3542 $, $"void f(signed long long x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long long'.\n" $) ;
3543: $testFormatStrWarn $(@expr1073744931 "cppcheck-2.8/test/testio.cpp" $, 3543 $, $"void f(unsigned long long x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long long'.\n" $) ;
3544: $testFormatStrWarn $(@expr1073744932 "cppcheck-2.8/test/testio.cpp" $, 3544 $, $"void f(float x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'float'.\n" $) ;
3545: $testFormatStrWarn $(@expr1073744933 "cppcheck-2.8/test/testio.cpp" $, 3545 $, $"void f(double x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'double'.\n" $) ;
3546: $testFormatStrWarn $(@expr1073744934 "cppcheck-2.8/test/testio.cpp" $, 3546 $, $"void f(long double x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'long double'.\n" $) ;
3547: $testFormatStrWarn $(@expr1073744935 "cppcheck-2.8/test/testio.cpp" $, 3547 $, $"void f(void * x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'void *'.\n" $) ;
3548: $testFormatStrWarnAka $(@expr1073744936 "cppcheck-2.8/test/testio.cpp" $, 3548 $, $"void f(size_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3549: $testFormatStrWarnAka $(@expr1073744937 "cppcheck-2.8/test/testio.cpp" $, 3549 $, $"void f(ssize_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3550: $testFormatStrWarnAka $(@expr1073744938 "cppcheck-2.8/test/testio.cpp" $, 3550 $, $"void f(ptrdiff_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3551: $testFormatStrWarnAka $(@expr1073744939 "cppcheck-2.8/test/testio.cpp" $, 3551 $, $"void f(unsigned ptrdiff_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3552: $testFormatStrWarnAka $(@expr1073744940 "cppcheck-2.8/test/testio.cpp" $, 3552 $, $"void f(intmax_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3553: $testFormatStrWarnAka $(@expr1073744941 "cppcheck-2.8/test/testio.cpp" $, 3553 $, $"void f(uintmax_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3554: $testFormatStrWarnAka $(@expr1073744942 "cppcheck-2.8/test/testio.cpp" $, 3554 $, $"void f(std::size_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3555: $testFormatStrWarnAka $(@expr1073744943 "cppcheck-2.8/test/testio.cpp" $, 3555 $, $"void f(std::ssize_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3556: $testFormatStrWarnAka $(@expr1073744944 "cppcheck-2.8/test/testio.cpp" $, 3556 $, $"void f(std::ptrdiff_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3557: $testFormatStrWarnAka $(@expr1073744945 "cppcheck-2.8/test/testio.cpp" $, 3557 $, $"void f(std::intptr_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3558: $testFormatStrWarnAka $(@expr1073744946 "cppcheck-2.8/test/testio.cpp" $, 3558 $, $"void f(std::uintptr_t x){printf(\"%hx\", x);}" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3559:
3560: $testFormatStrWarn $(@expr1073744947 "cppcheck-2.8/test/testio.cpp" $, 3560 $, $"void f(bool x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'bool'.\n" $) ;
3561: $testFormatStrWarn $(@expr1073744948 "cppcheck-2.8/test/testio.cpp" $, 3561 $, $"void f(char x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n" $) ;
3562: $testFormatStrWarn $(@expr1073744949 "cppcheck-2.8/test/testio.cpp" $, 3562 $, $"void f(signed char x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed char'.\n" $) ;
3563: $testFormatStrNoWarn $(@expr1073744950 "cppcheck-2.8/test/testio.cpp" $, 3563 $, $"void f(unsigned char x){printf(\"%hhu\", x);}" $) ;
3564: $testFormatStrWarn $(@expr1073744951 "cppcheck-2.8/test/testio.cpp" $, 3564 $, $"void f(signed short x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed short'.\n" $) ;
3565: $testFormatStrWarn $(@expr1073744952 "cppcheck-2.8/test/testio.cpp" $, 3565 $, $"void f(unsigned short x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned short'.\n" $) ;
3566: $testFormatStrWarn $(@expr1073744953 "cppcheck-2.8/test/testio.cpp" $, 3566 $, $"void f(signed int x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed int'.\n" $) ;
3567: $testFormatStrWarn $(@expr1073744954 "cppcheck-2.8/test/testio.cpp" $, 3567 $, $"void f(unsigned int x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned int'.\n" $) ;
3568: $testFormatStrWarn $(@expr1073744955 "cppcheck-2.8/test/testio.cpp" $, 3568 $, $"void f(signed long x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long'.\n" $) ;
3569: $testFormatStrWarn $(@expr1073744956 "cppcheck-2.8/test/testio.cpp" $, 3569 $, $"void f(unsigned long x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long'.\n" $) ;
3570: $testFormatStrWarn $(@expr1073744957 "cppcheck-2.8/test/testio.cpp" $, 3570 $, $"void f(signed long long x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long long'.\n" $) ;
3571: $testFormatStrWarn $(@expr1073744958 "cppcheck-2.8/test/testio.cpp" $, 3571 $, $"void f(unsigned long long x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long long'.\n" $) ;
3572: $testFormatStrWarn $(@expr1073744959 "cppcheck-2.8/test/testio.cpp" $, 3572 $, $"void f(float x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'float'.\n" $) ;
3573: $testFormatStrWarn $(@expr1073744960 "cppcheck-2.8/test/testio.cpp" $, 3573 $, $"void f(double x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'double'.\n" $) ;
3574: $testFormatStrWarn $(@expr1073744961 "cppcheck-2.8/test/testio.cpp" $, 3574 $, $"void f(long double x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'long double'.\n" $) ;
3575: $testFormatStrWarn $(@expr1073744962 "cppcheck-2.8/test/testio.cpp" $, 3575 $, $"void f(void * x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'void *'.\n" $) ;
3576: $testFormatStrWarnAka $(@expr1073744963 "cppcheck-2.8/test/testio.cpp" $, 3576 $, $"void f(size_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3577: $testFormatStrWarnAka $(@expr1073744964 "cppcheck-2.8/test/testio.cpp" $, 3577 $, $"void f(ssize_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3578: $testFormatStrWarnAka $(@expr1073744965 "cppcheck-2.8/test/testio.cpp" $, 3578 $, $"void f(ptrdiff_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3579: $testFormatStrWarnAka $(@expr1073744966 "cppcheck-2.8/test/testio.cpp" $, 3579 $, $"void f(unsigned ptrdiff_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3580: $testFormatStrWarnAka $(@expr1073744967 "cppcheck-2.8/test/testio.cpp" $, 3580 $, $"void f(intmax_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3581: $testFormatStrWarnAka $(@expr1073744968 "cppcheck-2.8/test/testio.cpp" $, 3581 $, $"void f(uintmax_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3582: $testFormatStrWarnAka $(@expr1073744969 "cppcheck-2.8/test/testio.cpp" $, 3582 $, $"void f(std::size_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3583: $testFormatStrWarnAka $(@expr1073744970 "cppcheck-2.8/test/testio.cpp" $, 3583 $, $"void f(std::ssize_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3584: $testFormatStrWarnAka $(@expr1073744971 "cppcheck-2.8/test/testio.cpp" $, 3584 $, $"void f(std::ptrdiff_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3585: $testFormatStrWarnAka $(@expr1073744972 "cppcheck-2.8/test/testio.cpp" $, 3585 $, $"void f(std::intptr_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3586: $testFormatStrWarnAka $(@expr1073744973 "cppcheck-2.8/test/testio.cpp" $, 3586 $, $"void f(std::uintptr_t x){printf(\"%hhu\", x);}" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3587:
3588: $testFormatStrWarn $(@expr1073744974 "cppcheck-2.8/test/testio.cpp" $, 3588 $, $"void f(bool x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'bool'.\n" $) ;
3589: $testFormatStrWarn $(@expr1073744975 "cppcheck-2.8/test/testio.cpp" $, 3589 $, $"void f(char x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n" $) ;
3590: $testFormatStrWarn $(@expr1073744976 "cppcheck-2.8/test/testio.cpp" $, 3590 $, $"void f(signed char x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed char'.\n" $) ;
3591: $testFormatStrNoWarn $(@expr1073744977 "cppcheck-2.8/test/testio.cpp" $, 3591 $, $"void f(unsigned char x){printf(\"%hhx\", x);}" $) ;
3592: $testFormatStrWarn $(@expr1073744978 "cppcheck-2.8/test/testio.cpp" $, 3592 $, $"void f(signed short x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed short'.\n" $) ;
3593: $testFormatStrWarn $(@expr1073744979 "cppcheck-2.8/test/testio.cpp" $, 3593 $, $"void f(unsigned short x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned short'.\n" $) ;
3594: $testFormatStrWarn $(@expr1073744980 "cppcheck-2.8/test/testio.cpp" $, 3594 $, $"void f(signed int x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed int'.\n" $) ;
3595: $testFormatStrWarn $(@expr1073744981 "cppcheck-2.8/test/testio.cpp" $, 3595 $, $"void f(unsigned int x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned int'.\n" $) ;
3596: $testFormatStrWarn $(@expr1073744982 "cppcheck-2.8/test/testio.cpp" $, 3596 $, $"void f(signed long x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long'.\n" $) ;
3597: $testFormatStrWarn $(@expr1073744983 "cppcheck-2.8/test/testio.cpp" $, 3597 $, $"void f(unsigned long x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long'.\n" $) ;
3598: $testFormatStrWarn $(@expr1073744984 "cppcheck-2.8/test/testio.cpp" $, 3598 $, $"void f(signed long long x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long long'.\n" $) ;
3599: $testFormatStrWarn $(@expr1073744985 "cppcheck-2.8/test/testio.cpp" $, 3599 $, $"void f(unsigned long long x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long long'.\n" $) ;
3600: $testFormatStrWarn $(@expr1073744986 "cppcheck-2.8/test/testio.cpp" $, 3600 $, $"void f(float x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'float'.\n" $) ;
3601: $testFormatStrWarn $(@expr1073744987 "cppcheck-2.8/test/testio.cpp" $, 3601 $, $"void f(double x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'double'.\n" $) ;
3602: $testFormatStrWarn $(@expr1073744988 "cppcheck-2.8/test/testio.cpp" $, 3602 $, $"void f(long double x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'long double'.\n" $) ;
3603: $testFormatStrWarn $(@expr1073744989 "cppcheck-2.8/test/testio.cpp" $, 3603 $, $"void f(void * x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'void *'.\n" $) ;
3604: $testFormatStrWarnAka $(@expr1073744990 "cppcheck-2.8/test/testio.cpp" $, 3604 $, $"void f(size_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3605: $testFormatStrWarnAka $(@expr1073744991 "cppcheck-2.8/test/testio.cpp" $, 3605 $, $"void f(ssize_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3606: $testFormatStrWarnAka $(@expr1073744992 "cppcheck-2.8/test/testio.cpp" $, 3606 $, $"void f(ptrdiff_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3607: $testFormatStrWarnAka $(@expr1073744993 "cppcheck-2.8/test/testio.cpp" $, 3607 $, $"void f(unsigned ptrdiff_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3608: $testFormatStrWarnAka $(@expr1073744994 "cppcheck-2.8/test/testio.cpp" $, 3608 $, $"void f(intmax_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3609: $testFormatStrWarnAka $(@expr1073744995 "cppcheck-2.8/test/testio.cpp" $, 3609 $, $"void f(uintmax_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3610: $testFormatStrWarnAka $(@expr1073744996 "cppcheck-2.8/test/testio.cpp" $, 3610 $, $"void f(std::size_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3611: $testFormatStrWarnAka $(@expr1073744997 "cppcheck-2.8/test/testio.cpp" $, 3611 $, $"void f(std::ssize_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3612: $testFormatStrWarnAka $(@expr1073744998 "cppcheck-2.8/test/testio.cpp" $, 3612 $, $"void f(std::ptrdiff_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3613: $testFormatStrWarnAka $(@expr1073744999 "cppcheck-2.8/test/testio.cpp" $, 3613 $, $"void f(std::intptr_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3614: $testFormatStrWarnAka $(@expr1073745000 "cppcheck-2.8/test/testio.cpp" $, 3614 $, $"void f(std::uintptr_t x){printf(\"%hhx\", x);}" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3615:
3616: $testFormatStrWarn $(@expr1073745001 "cppcheck-2.8/test/testio.cpp" $, 3616 $, $"void f(bool x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'bool'.\n" $) ;
3617: $testFormatStrWarn $(@expr1073745002 "cppcheck-2.8/test/testio.cpp" $, 3617 $, $"void f(char x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'char'.\n" $) ;
3618: $testFormatStrWarn $(@expr1073745003 "cppcheck-2.8/test/testio.cpp" $, 3618 $, $"void f(signed char x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed char'.\n" $) ;
3619: $testFormatStrWarn $(@expr1073745004 "cppcheck-2.8/test/testio.cpp" $, 3619 $, $"void f(unsigned char x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned char'.\n" $) ;
3620: $testFormatStrWarn $(@expr1073745005 "cppcheck-2.8/test/testio.cpp" $, 3620 $, $"void f(signed short x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed short'.\n" $) ;
3621: $testFormatStrWarn $(@expr1073745006 "cppcheck-2.8/test/testio.cpp" $, 3621 $, $"void f(unsigned short x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned short'.\n" $) ;
3622: $testFormatStrWarn $(@expr1073745007 "cppcheck-2.8/test/testio.cpp" $, 3622 $, $"void f(signed int x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed int'.\n" $) ;
3623: $testFormatStrWarn $(@expr1073745008 "cppcheck-2.8/test/testio.cpp" $, 3623 $, $"void f(unsigned int x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" $) ;
3624: $testFormatStrWarn $(@expr1073745009 "cppcheck-2.8/test/testio.cpp" $, 3624 $, $"void f(signed long x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n" $) ;
3625: $testFormatStrWarn $(@expr1073745010 "cppcheck-2.8/test/testio.cpp" $, 3625 $, $"void f(unsigned long x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n" $) ;
3626: $testFormatStrWarn $(@expr1073745011 "cppcheck-2.8/test/testio.cpp" $, 3626 $, $"void f(signed long long x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long long'.\n" $) ;
3627: $testFormatStrNoWarn $(@expr1073745012 "cppcheck-2.8/test/testio.cpp" $, 3627 $, $"void f(unsigned long long x){printf(\"%Lu\", x);}" $) ;
3628: $testFormatStrWarn $(@expr1073745013 "cppcheck-2.8/test/testio.cpp" $, 3628 $, $"void f(float x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n" $) ;
3629: $testFormatStrWarn $(@expr1073745014 "cppcheck-2.8/test/testio.cpp" $, 3629 $, $"void f(double x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n" $) ;
3630: $testFormatStrWarn $(@expr1073745015 "cppcheck-2.8/test/testio.cpp" $, 3630 $, $"void f(long double x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n" $) ;
3631: $testFormatStrWarn $(@expr1073745016 "cppcheck-2.8/test/testio.cpp" $, 3631 $, $"void f(void * x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n" $) ;
3632: $testFormatStrWarnAkaWin32 $(@expr1073745017 "cppcheck-2.8/test/testio.cpp" $, 3632 $, $"void f(size_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" $) ;
3633: $testFormatStrWarnAka $(@expr1073745018 "cppcheck-2.8/test/testio.cpp" $, 3633 $, $"void f(ssize_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3634: $testFormatStrWarnAka $(@expr1073745019 "cppcheck-2.8/test/testio.cpp" $, 3634 $, $"void f(ptrdiff_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3635: $testFormatStrWarnAkaWin32 $(@expr1073745020 "cppcheck-2.8/test/testio.cpp" $, 3635 $, $"void f(unsigned ptrdiff_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $) ;
3636: $testFormatStrWarnAka $(@expr1073745021 "cppcheck-2.8/test/testio.cpp" $, 3636 $, $"void f(intmax_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3637: $testFormatStrWarnAkaWin32 $(@expr1073745022 "cppcheck-2.8/test/testio.cpp" $, 3637 $, $"void f(uintmax_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $) ;
3638: $testFormatStrWarnAka $(@expr1073745023 "cppcheck-2.8/test/testio.cpp" $, 3638 $, $"void f(intptr_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3639: $testFormatStrWarnAkaWin32 $(@expr1073745024 "cppcheck-2.8/test/testio.cpp" $, 3639 $, $"void f(uintptr_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $) ;
3640: $testFormatStrWarnAkaWin32 $(@expr1073745025 "cppcheck-2.8/test/testio.cpp" $, 3640 $, $"void f(std::size_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n" $) ;
3641: $testFormatStrWarnAka $(@expr1073745026 "cppcheck-2.8/test/testio.cpp" $, 3641 $, $"void f(std::ssize_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3642: $testFormatStrWarnAka $(@expr1073745027 "cppcheck-2.8/test/testio.cpp" $, 3642 $, $"void f(std::ptrdiff_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3643: $testFormatStrWarnAka $(@expr1073745028 "cppcheck-2.8/test/testio.cpp" $, 3643 $, $"void f(std::intmax_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3644: $testFormatStrWarnAkaWin32 $(@expr1073745029 "cppcheck-2.8/test/testio.cpp" $, 3644 $, $"void f(std::uintmax_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $) ;
3645: $testFormatStrWarnAka $(@expr1073745030 "cppcheck-2.8/test/testio.cpp" $, 3645 $, $"void f(std::intptr_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3646: $testFormatStrWarnAkaWin32 $(@expr1073745031 "cppcheck-2.8/test/testio.cpp" $, 3646 $, $"void f(std::uintptr_t x){printf(\"%Lu\", x);}" $, $"[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $) ;
3647:
|
3655:
3656: $testFormatStrWarn $(@expr1073745032 "cppcheck-2.8/test/testio.cpp" $, 3656 $, $"void f(signed long x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n" $) ;
3657: $testFormatStrWarn $(@expr1073745033 "cppcheck-2.8/test/testio.cpp" $, 3657 $, $"void f(unsigned long x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n" $) ;
3658: $testFormatStrWarn $(@expr1073745034 "cppcheck-2.8/test/testio.cpp" $, 3658 $, $"void f(signed long long x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long long'.\n" $) ;
3659:
3660: $testFormatStrWarn $(@expr1073745035 "cppcheck-2.8/test/testio.cpp" $, 3660 $, $"void f(float x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n" $) ;
3661: $testFormatStrWarn $(@expr1073745036 "cppcheck-2.8/test/testio.cpp" $, 3661 $, $"void f(double x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n" $) ;
3662: $testFormatStrWarn $(@expr1073745037 "cppcheck-2.8/test/testio.cpp" $, 3662 $, $"void f(long double x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n" $) ;
3663: $testFormatStrWarn $(@expr1073745038 "cppcheck-2.8/test/testio.cpp" $, 3663 $, $"void f(void * x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n" $) ;
3664: $testFormatStrWarnAka $(@expr1073745039 "cppcheck-2.8/test/testio.cpp" $, 3664 $, $"void f(size_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3665: $testFormatStrWarnAka $(@expr1073745040 "cppcheck-2.8/test/testio.cpp" $, 3665 $, $"void f(ssize_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3666: $testFormatStrWarnAka $(@expr1073745041 "cppcheck-2.8/test/testio.cpp" $, 3666 $, $"void f(ptrdiff_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3667: $testFormatStrWarnAka $(@expr1073745042 "cppcheck-2.8/test/testio.cpp" $, 3667 $, $"void f(unsigned ptrdiff_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3668: $testFormatStrWarnAka $(@expr1073745043 "cppcheck-2.8/test/testio.cpp" $, 3668 $, $"void f(intmax_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3669: $testFormatStrWarnAka $(@expr1073745044 "cppcheck-2.8/test/testio.cpp" $, 3669 $, $"void f(uintmax_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3670: $testFormatStrWarnAka $(@expr1073745045 "cppcheck-2.8/test/testio.cpp" $, 3670 $, $"void f(intptr_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3671: $testFormatStrWarnAka $(@expr1073745046 "cppcheck-2.8/test/testio.cpp" $, 3671 $, $"void f(uintptr_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" $) ;
3672: $testFormatStrWarnAka $(@expr1073745047 "cppcheck-2.8/test/testio.cpp" $, 3672 $, $"void f(std::size_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3673: $testFormatStrWarnAka $(@expr1073745048 "cppcheck-2.8/test/testio.cpp" $, 3673 $, $"void f(std::ssize_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3674: $testFormatStrWarnAka $(@expr1073745049 "cppcheck-2.8/test/testio.cpp" $, 3674 $, $"void f(std::ptrdiff_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3675: $testFormatStrWarnAka $(@expr1073745050 "cppcheck-2.8/test/testio.cpp" $, 3675 $, $"void f(std::intmax_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3676: $testFormatStrWarnAka $(@expr1073745051 "cppcheck-2.8/test/testio.cpp" $, 3676 $, $"void f(std::uintmax_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" $) ;
3677: $testFormatStrWarnAka $(@expr1073745052 "cppcheck-2.8/test/testio.cpp" $, 3677 $, $"void f(std::intptr_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3678: $testFormatStrWarnAka $(@expr1073745053 "cppcheck-2.8/test/testio.cpp" $, 3678 $, $"void f(std::uintptr_t x){printf(\"%Lx\", x);}" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3679:
3680: $testFormatStrWarn $(@expr1073745054 "cppcheck-2.8/test/testio.cpp" $, 3680 $, $"void f(bool x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'bool'.\n" $) ;
3681: $testFormatStrWarn $(@expr1073745055 "cppcheck-2.8/test/testio.cpp" $, 3681 $, $"void f(char x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'char'.\n" $) ;
3682: $testFormatStrWarn $(@expr1073745056 "cppcheck-2.8/test/testio.cpp" $, 3682 $, $"void f(signed char x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed char'.\n" $) ;
3683: $testFormatStrWarn $(@expr1073745057 "cppcheck-2.8/test/testio.cpp" $, 3683 $, $"void f(unsigned char x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned char'.\n" $) ;
3684: $testFormatStrWarn $(@expr1073745058 "cppcheck-2.8/test/testio.cpp" $, 3684 $, $"void f(signed short x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed short'.\n" $) ;
3685: $testFormatStrWarn $(@expr1073745059 "cppcheck-2.8/test/testio.cpp" $, 3685 $, $"void f(unsigned short x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned short'.\n" $) ;
3686: $testFormatStrWarn $(@expr1073745060 "cppcheck-2.8/test/testio.cpp" $, 3686 $, $"void f(signed int x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n" $) ;
3687: $testFormatStrWarn $(@expr1073745061 "cppcheck-2.8/test/testio.cpp" $, 3687 $, $"void f(unsigned int x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned int'.\n" $) ;
3688: $testFormatStrWarn $(@expr1073745062 "cppcheck-2.8/test/testio.cpp" $, 3688 $, $"void f(signed long x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long'.\n" $) ;
3689: $testFormatStrWarn $(@expr1073745063 "cppcheck-2.8/test/testio.cpp" $, 3689 $, $"void f(unsigned long x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long'.\n" $) ;
3690: $testFormatStrWarn $(@expr1073745064 "cppcheck-2.8/test/testio.cpp" $, 3690 $, $"void f(signed long long x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long long'.\n" $) ;
3691: $testFormatStrWarn $(@expr1073745065 "cppcheck-2.8/test/testio.cpp" $, 3691 $, $"void f(unsigned long long x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long long'.\n" $) ;
3692: $testFormatStrWarn $(@expr1073745066 "cppcheck-2.8/test/testio.cpp" $, 3692 $, $"void f(float x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'float'.\n" $) ;
3693: $testFormatStrWarn $(@expr1073745067 "cppcheck-2.8/test/testio.cpp" $, 3693 $, $"void f(double x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'double'.\n" $) ;
3694: $testFormatStrWarn $(@expr1073745068 "cppcheck-2.8/test/testio.cpp" $, 3694 $, $"void f(long double x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'long double'.\n" $) ;
3695: $testFormatStrWarn $(@expr1073745069 "cppcheck-2.8/test/testio.cpp" $, 3695 $, $"void f(void * x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'void *'.\n" $) ;
3696: $testFormatStrWarnAka $(@expr1073745070 "cppcheck-2.8/test/testio.cpp" $, 3696 $, $"void f(size_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3697: $testFormatStrWarnAka $(@expr1073745071 "cppcheck-2.8/test/testio.cpp" $, 3697 $, $"void f(ssize_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3698: $testFormatStrWarnAka $(@expr1073745072 "cppcheck-2.8/test/testio.cpp" $, 3698 $, $"void f(ptrdiff_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3699: $testFormatStrWarnAka $(@expr1073745073 "cppcheck-2.8/test/testio.cpp" $, 3699 $, $"void f(unsigned ptrdiff_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3700: $testFormatStrWarnAka $(@expr1073745074 "cppcheck-2.8/test/testio.cpp" $, 3700 $, $"void f(intmax_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3701: $testFormatStrNoWarn $(@expr1073745075 "cppcheck-2.8/test/testio.cpp" $, 3701 $, $"void f(uintmax_t x){printf(\"%ju\", x);}" $) ;
3702: $testFormatStrWarnAka $(@expr1073745076 "cppcheck-2.8/test/testio.cpp" $, 3702 $, $"void f(std::size_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3703: $testFormatStrWarnAka $(@expr1073745077 "cppcheck-2.8/test/testio.cpp" $, 3703 $, $"void f(std::ssize_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3704: $testFormatStrWarnAka $(@expr1073745078 "cppcheck-2.8/test/testio.cpp" $, 3704 $, $"void f(std::ptrdiff_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3705: $testFormatStrWarnAka $(@expr1073745079 "cppcheck-2.8/test/testio.cpp" $, 3705 $, $"void f(std::intptr_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3706: $testFormatStrWarnAka $(@expr1073745080 "cppcheck-2.8/test/testio.cpp" $, 3706 $, $"void f(std::uintptr_t x){printf(\"%ju\", x);}" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3707:
3708: $testFormatStrWarn $(@expr1073745081 "cppcheck-2.8/test/testio.cpp" $, 3708 $, $"void f(bool x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'bool'.\n" $) ;
3709: $testFormatStrWarn $(@expr1073745082 "cppcheck-2.8/test/testio.cpp" $, 3709 $, $"void f(char x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'char'.\n" $) ;
3710: $testFormatStrWarn $(@expr1073745083 "cppcheck-2.8/test/testio.cpp" $, 3710 $, $"void f(signed char x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed char'.\n" $) ;
3711: $testFormatStrWarn $(@expr1073745084 "cppcheck-2.8/test/testio.cpp" $, 3711 $, $"void f(unsigned char x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned char'.\n" $) ;
3712: $testFormatStrWarn $(@expr1073745085 "cppcheck-2.8/test/testio.cpp" $, 3712 $, $"void f(signed short x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed short'.\n" $) ;
3713: $testFormatStrWarn $(@expr1073745086 "cppcheck-2.8/test/testio.cpp" $, 3713 $, $"void f(unsigned short x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned short'.\n" $) ;
3714: $testFormatStrWarn $(@expr1073745087 "cppcheck-2.8/test/testio.cpp" $, 3714 $, $"void f(signed int x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n" $) ;
3715: $testFormatStrWarn $(@expr1073745088 "cppcheck-2.8/test/testio.cpp" $, 3715 $, $"void f(unsigned int x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned int'.\n" $) ;
3716: $testFormatStrWarn $(@expr1073745089 "cppcheck-2.8/test/testio.cpp" $, 3716 $, $"void f(signed long x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long'.\n" $) ;
3717: $testFormatStrWarn $(@expr1073745090 "cppcheck-2.8/test/testio.cpp" $, 3717 $, $"void f(unsigned long x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long'.\n" $) ;
3718: $testFormatStrWarn $(@expr1073745091 "cppcheck-2.8/test/testio.cpp" $, 3718 $, $"void f(signed long long x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long long'.\n" $) ;
3719: $testFormatStrWarn $(@expr1073745092 "cppcheck-2.8/test/testio.cpp" $, 3719 $, $"void f(unsigned long long x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long long'.\n" $) ;
3720: $testFormatStrWarn $(@expr1073745093 "cppcheck-2.8/test/testio.cpp" $, 3720 $, $"void f(float x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'float'.\n" $) ;
3721: $testFormatStrWarn $(@expr1073745094 "cppcheck-2.8/test/testio.cpp" $, 3721 $, $"void f(double x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'double'.\n" $) ;
3722: $testFormatStrWarn $(@expr1073745095 "cppcheck-2.8/test/testio.cpp" $, 3722 $, $"void f(long double x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'long double'.\n" $) ;
3723: $testFormatStrWarn $(@expr1073745096 "cppcheck-2.8/test/testio.cpp" $, 3723 $, $"void f(void * x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'void *'.\n" $) ;
3724: $testFormatStrWarnAka $(@expr1073745097 "cppcheck-2.8/test/testio.cpp" $, 3724 $, $"void f(size_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3725: $testFormatStrWarnAka $(@expr1073745098 "cppcheck-2.8/test/testio.cpp" $, 3725 $, $"void f(ssize_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3726: $testFormatStrWarnAka $(@expr1073745099 "cppcheck-2.8/test/testio.cpp" $, 3726 $, $"void f(ptrdiff_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3727: $testFormatStrWarnAka $(@expr1073745100 "cppcheck-2.8/test/testio.cpp" $, 3727 $, $"void f(unsigned ptrdiff_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3728: $testFormatStrWarnAka $(@expr1073745101 "cppcheck-2.8/test/testio.cpp" $, 3728 $, $"void f(intmax_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3729: $testFormatStrNoWarn $(@expr1073745102 "cppcheck-2.8/test/testio.cpp" $, 3729 $, $"void f(uintmax_t x){printf(\"%jx\", x);}" $) ;
3730: $testFormatStrWarnAka $(@expr1073745103 "cppcheck-2.8/test/testio.cpp" $, 3730 $, $"void f(std::size_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3731: $testFormatStrWarnAka $(@expr1073745104 "cppcheck-2.8/test/testio.cpp" $, 3731 $, $"void f(std::ssize_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3732: $testFormatStrWarnAka $(@expr1073745105 "cppcheck-2.8/test/testio.cpp" $, 3732 $, $"void f(std::ptrdiff_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3733: $testFormatStrWarnAka $(@expr1073745106 "cppcheck-2.8/test/testio.cpp" $, 3733 $, $"void f(std::intptr_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3734: $testFormatStrWarnAka $(@expr1073745107 "cppcheck-2.8/test/testio.cpp" $, 3734 $, $"void f(std::uintptr_t x){printf(\"%jx\", x);}" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3735:
3736: $testFormatStrWarnAka $(@expr1073745108 "cppcheck-2.8/test/testio.cpp" $, 3736 $, $"void f(size_t x){printf(\"%zd\", x);}" $, $"[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3737: $testFormatStrWarnAka $(@expr1073745109 "cppcheck-2.8/test/testio.cpp" $, 3737 $, $"void f(size_t x){printf(\"%zi\", x);}" $, $"[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3738:
3739: $testFormatStrWarn $(@expr1073745110 "cppcheck-2.8/test/testio.cpp" $, 3739 $, $"void f(bool x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n" $) ;
3740: $testFormatStrWarn $(@expr1073745111 "cppcheck-2.8/test/testio.cpp" $, 3740 $, $"void f(char x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n" $) ;
3741: $testFormatStrWarn $(@expr1073745112 "cppcheck-2.8/test/testio.cpp" $, 3741 $, $"void f(signed char x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n" $) ;
3742: $testFormatStrWarn $(@expr1073745113 "cppcheck-2.8/test/testio.cpp" $, 3742 $, $"void f(unsigned char x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n" $) ;
3743: $testFormatStrWarn $(@expr1073745114 "cppcheck-2.8/test/testio.cpp" $, 3743 $, $"void f(signed short x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n" $) ;
3744: $testFormatStrWarn $(@expr1073745115 "cppcheck-2.8/test/testio.cpp" $, 3744 $, $"void f(unsigned short x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n" $) ;
3745: $testFormatStrWarn $(@expr1073745116 "cppcheck-2.8/test/testio.cpp" $, 3745 $, $"void f(signed int x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n" $) ;
3746: $testFormatStrWarn $(@expr1073745117 "cppcheck-2.8/test/testio.cpp" $, 3746 $, $"void f(unsigned int x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n" $) ;
3747: $testFormatStrWarn $(@expr1073745118 "cppcheck-2.8/test/testio.cpp" $, 3747 $, $"void f(signed long x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n" $) ;
3748: $testFormatStrWarn $(@expr1073745119 "cppcheck-2.8/test/testio.cpp" $, 3748 $, $"void f(unsigned long x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n" $) ;
3749: $testFormatStrWarn $(@expr1073745120 "cppcheck-2.8/test/testio.cpp" $, 3749 $, $"void f(signed long long x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n" $) ;
3750: $testFormatStrWarn $(@expr1073745121 "cppcheck-2.8/test/testio.cpp" $, 3750 $, $"void f(unsigned long long x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n" $) ;
3751: $testFormatStrWarn $(@expr1073745122 "cppcheck-2.8/test/testio.cpp" $, 3751 $, $"void f(float x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n" $) ;
3752: $testFormatStrWarn $(@expr1073745123 "cppcheck-2.8/test/testio.cpp" $, 3752 $, $"void f(double x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n" $) ;
3753: $testFormatStrWarn $(@expr1073745124 "cppcheck-2.8/test/testio.cpp" $, 3753 $, $"void f(long double x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n" $) ;
3754: $testFormatStrWarn $(@expr1073745125 "cppcheck-2.8/test/testio.cpp" $, 3754 $, $"void f(void * x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n" $) ;
3755: $testFormatStrNoWarn $(@expr1073745126 "cppcheck-2.8/test/testio.cpp" $, 3755 $, $"void f(size_t x){printf(\"%zu\", x);}" $) ;
3756: $testFormatStrWarnAka $(@expr1073745127 "cppcheck-2.8/test/testio.cpp" $, 3756 $, $"void f(ssize_t x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3757: $testFormatStrWarnAka $(@expr1073745128 "cppcheck-2.8/test/testio.cpp" $, 3757 $, $"void f(ptrdiff_t x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3758: $testFormatStrWarnAka $(@expr1073745129 "cppcheck-2.8/test/testio.cpp" $, 3758 $, $"void f(unsigned ptrdiff_t x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3759: $testFormatStrWarnAka $(@expr1073745130 "cppcheck-2.8/test/testio.cpp" $, 3759 $, $"void f(intmax_t x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3760: $testFormatStrWarnAka $(@expr1073745131 "cppcheck-2.8/test/testio.cpp" $, 3760 $, $"void f(uintmax_t x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3761: $testFormatStrNoWarn $(@expr1073745132 "cppcheck-2.8/test/testio.cpp" $, 3761 $, $"void f(std::size_t x){printf(\"%zu\", x);}" $) ;
3762: $testFormatStrWarnAka $(@expr1073745133 "cppcheck-2.8/test/testio.cpp" $, 3762 $, $"void f(std::ssize_t x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3763: $testFormatStrWarnAka $(@expr1073745134 "cppcheck-2.8/test/testio.cpp" $, 3763 $, $"void f(std::ptrdiff_t x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3764: $testFormatStrWarnAka $(@expr1073745135 "cppcheck-2.8/test/testio.cpp" $, 3764 $, $"void f(std::intptr_t x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3765: $testFormatStrWarnAka $(@expr1073745136 "cppcheck-2.8/test/testio.cpp" $, 3765 $, $"void f(std::uintptr_t x){printf(\"%zu\", x);}" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3766:
3767: $testFormatStrWarn $(@expr1073745137 "cppcheck-2.8/test/testio.cpp" $, 3767 $, $"void f(bool x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n" $) ;
3768: $testFormatStrWarn $(@expr1073745138 "cppcheck-2.8/test/testio.cpp" $, 3768 $, $"void f(char x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n" $) ;
3769: $testFormatStrWarn $(@expr1073745139 "cppcheck-2.8/test/testio.cpp" $, 3769 $, $"void f(signed char x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n" $) ;
3770: $testFormatStrWarn $(@expr1073745140 "cppcheck-2.8/test/testio.cpp" $, 3770 $, $"void f(unsigned char x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n" $) ;
3771: $testFormatStrWarn $(@expr1073745141 "cppcheck-2.8/test/testio.cpp" $, 3771 $, $"void f(signed short x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n" $) ;
3772: $testFormatStrWarn $(@expr1073745142 "cppcheck-2.8/test/testio.cpp" $, 3772 $, $"void f(unsigned short x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n" $) ;
3773: $testFormatStrWarn $(@expr1073745143 "cppcheck-2.8/test/testio.cpp" $, 3773 $, $"void f(signed int x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n" $) ;
3774: $testFormatStrWarn $(@expr1073745144 "cppcheck-2.8/test/testio.cpp" $, 3774 $, $"void f(unsigned int x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n" $) ;
3775: $testFormatStrWarn $(@expr1073745145 "cppcheck-2.8/test/testio.cpp" $, 3775 $, $"void f(signed long x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n" $) ;
3776: $testFormatStrWarn $(@expr1073745146 "cppcheck-2.8/test/testio.cpp" $, 3776 $, $"void f(unsigned long x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n" $) ;
3777: $testFormatStrWarn $(@expr1073745147 "cppcheck-2.8/test/testio.cpp" $, 3777 $, $"void f(signed long long x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n" $) ;
3778: $testFormatStrWarn $(@expr1073745148 "cppcheck-2.8/test/testio.cpp" $, 3778 $, $"void f(unsigned long long x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n" $) ;
3779: $testFormatStrWarn $(@expr1073745149 "cppcheck-2.8/test/testio.cpp" $, 3779 $, $"void f(float x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n" $) ;
3780: $testFormatStrWarn $(@expr1073745150 "cppcheck-2.8/test/testio.cpp" $, 3780 $, $"void f(double x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n" $) ;
3781: $testFormatStrWarn $(@expr1073745151 "cppcheck-2.8/test/testio.cpp" $, 3781 $, $"void f(long double x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n" $) ;
3782: $testFormatStrWarn $(@expr1073745152 "cppcheck-2.8/test/testio.cpp" $, 3782 $, $"void f(void * x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n" $) ;
3783: $testFormatStrNoWarn $(@expr1073745153 "cppcheck-2.8/test/testio.cpp" $, 3783 $, $"void f(size_t x){printf(\"%zx\", x);}" $) ;
3784: $testFormatStrWarnAka $(@expr1073745154 "cppcheck-2.8/test/testio.cpp" $, 3784 $, $"void f(ssize_t x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3785: $testFormatStrWarnAka $(@expr1073745155 "cppcheck-2.8/test/testio.cpp" $, 3785 $, $"void f(ptrdiff_t x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3786: $testFormatStrWarnAka $(@expr1073745156 "cppcheck-2.8/test/testio.cpp" $, 3786 $, $"void f(unsigned ptrdiff_t x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3787: $testFormatStrWarnAka $(@expr1073745157 "cppcheck-2.8/test/testio.cpp" $, 3787 $, $"void f(intmax_t x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3788: $testFormatStrWarnAka $(@expr1073745158 "cppcheck-2.8/test/testio.cpp" $, 3788 $, $"void f(uintmax_t x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3789: $testFormatStrNoWarn $(@expr1073745159 "cppcheck-2.8/test/testio.cpp" $, 3789 $, $"void f(std::size_t x){printf(\"%zx\", x);}" $) ;
3790: $testFormatStrWarnAka $(@expr1073745160 "cppcheck-2.8/test/testio.cpp" $, 3790 $, $"void f(std::ssize_t x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3791: $testFormatStrWarnAka $(@expr1073745161 "cppcheck-2.8/test/testio.cpp" $, 3791 $, $"void f(std::ptrdiff_t x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3792: $testFormatStrWarnAka $(@expr1073745162 "cppcheck-2.8/test/testio.cpp" $, 3792 $, $"void f(std::intptr_t x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3793: $testFormatStrWarnAka $(@expr1073745163 "cppcheck-2.8/test/testio.cpp" $, 3793 $, $"void f(std::uintptr_t x){printf(\"%zx\", x);}" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3794:
3795: $testFormatStrWarn $(@expr1073745164 "cppcheck-2.8/test/testio.cpp" $, 3795 $, $"void f(bool x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'bool'.\n" $) ;
3796: $testFormatStrWarn $(@expr1073745165 "cppcheck-2.8/test/testio.cpp" $, 3796 $, $"void f(char x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'char'.\n" $) ;
3797: $testFormatStrWarn $(@expr1073745166 "cppcheck-2.8/test/testio.cpp" $, 3797 $, $"void f(signed char x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed char'.\n" $) ;
3798: $testFormatStrWarn $(@expr1073745167 "cppcheck-2.8/test/testio.cpp" $, 3798 $, $"void f(unsigned char x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned char'.\n" $) ;
3799: $testFormatStrWarn $(@expr1073745168 "cppcheck-2.8/test/testio.cpp" $, 3799 $, $"void f(signed short x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed short'.\n" $) ;
3800: $testFormatStrWarn $(@expr1073745169 "cppcheck-2.8/test/testio.cpp" $, 3800 $, $"void f(unsigned short x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned short'.\n" $) ;
3801: $testFormatStrWarn $(@expr1073745170 "cppcheck-2.8/test/testio.cpp" $, 3801 $, $"void f(signed int x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed int'.\n" $) ;
3802: $testFormatStrWarn $(@expr1073745171 "cppcheck-2.8/test/testio.cpp" $, 3802 $, $"void f(unsigned int x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned int'.\n" $) ;
3803: $testFormatStrWarn $(@expr1073745172 "cppcheck-2.8/test/testio.cpp" $, 3803 $, $"void f(signed long x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long'.\n" $) ;
3804: $testFormatStrWarn $(@expr1073745173 "cppcheck-2.8/test/testio.cpp" $, 3804 $, $"void f(unsigned long x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long'.\n" $) ;
3805: $testFormatStrWarn $(@expr1073745174 "cppcheck-2.8/test/testio.cpp" $, 3805 $, $"void f(signed long long x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long long'.\n" $) ;
3806: $testFormatStrWarn $(@expr1073745175 "cppcheck-2.8/test/testio.cpp" $, 3806 $, $"void f(unsigned long long x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long long'.\n" $) ;
3807: $testFormatStrWarn $(@expr1073745176 "cppcheck-2.8/test/testio.cpp" $, 3807 $, $"void f(float x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'float'.\n" $) ;
3808: $testFormatStrWarn $(@expr1073745177 "cppcheck-2.8/test/testio.cpp" $, 3808 $, $"void f(double x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'double'.\n" $) ;
3809: $testFormatStrWarn $(@expr1073745178 "cppcheck-2.8/test/testio.cpp" $, 3809 $, $"void f(long double x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'long double'.\n" $) ;
3810: $testFormatStrWarn $(@expr1073745179 "cppcheck-2.8/test/testio.cpp" $, 3810 $, $"void f(void * x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'void *'.\n" $) ;
3811: $testFormatStrWarnAka $(@expr1073745180 "cppcheck-2.8/test/testio.cpp" $, 3811 $, $"void f(size_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3812: $testFormatStrWarnAka $(@expr1073745181 "cppcheck-2.8/test/testio.cpp" $, 3812 $, $"void f(ssize_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3813: $testFormatStrWarnAka $(@expr1073745182 "cppcheck-2.8/test/testio.cpp" $, 3813 $, $"void f(ptrdiff_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3814: $testFormatStrNoWarn $(@expr1073745183 "cppcheck-2.8/test/testio.cpp" $, 3814 $, $"void f(unsigned ptrdiff_t x){printf(\"%tu\", x);}" $) ;
3815: $testFormatStrWarnAka $(@expr1073745184 "cppcheck-2.8/test/testio.cpp" $, 3815 $, $"void f(intmax_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3816: $testFormatStrWarnAka $(@expr1073745185 "cppcheck-2.8/test/testio.cpp" $, 3816 $, $"void f(uintmax_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3817: $testFormatStrWarnAka $(@expr1073745186 "cppcheck-2.8/test/testio.cpp" $, 3817 $, $"void f(std::size_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3818: $testFormatStrWarnAka $(@expr1073745187 "cppcheck-2.8/test/testio.cpp" $, 3818 $, $"void f(std::ssize_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3819: $testFormatStrWarnAka $(@expr1073745188 "cppcheck-2.8/test/testio.cpp" $, 3819 $, $"void f(std::ptrdiff_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3820: $testFormatStrWarnAka $(@expr1073745189 "cppcheck-2.8/test/testio.cpp" $, 3820 $, $"void f(std::intptr_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3821: $testFormatStrWarnAka $(@expr1073745190 "cppcheck-2.8/test/testio.cpp" $, 3821 $, $"void f(std::uintptr_t x){printf(\"%tu\", x);}" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3822:
3823: $testFormatStrWarn $(@expr1073745191 "cppcheck-2.8/test/testio.cpp" $, 3823 $, $"void f(bool x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'bool'.\n" $) ;
3824: $testFormatStrWarn $(@expr1073745192 "cppcheck-2.8/test/testio.cpp" $, 3824 $, $"void f(char x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'char'.\n" $) ;
3825: $testFormatStrWarn $(@expr1073745193 "cppcheck-2.8/test/testio.cpp" $, 3825 $, $"void f(signed char x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed char'.\n" $) ;
3826: $testFormatStrWarn $(@expr1073745194 "cppcheck-2.8/test/testio.cpp" $, 3826 $, $"void f(unsigned char x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned char'.\n" $) ;
3827: $testFormatStrWarn $(@expr1073745195 "cppcheck-2.8/test/testio.cpp" $, 3827 $, $"void f(signed short x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed short'.\n" $) ;
3828: $testFormatStrWarn $(@expr1073745196 "cppcheck-2.8/test/testio.cpp" $, 3828 $, $"void f(unsigned short x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned short'.\n" $) ;
3829: $testFormatStrWarn $(@expr1073745197 "cppcheck-2.8/test/testio.cpp" $, 3829 $, $"void f(signed int x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed int'.\n" $) ;
3830: $testFormatStrWarn $(@expr1073745198 "cppcheck-2.8/test/testio.cpp" $, 3830 $, $"void f(unsigned int x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned int'.\n" $) ;
3831: $testFormatStrWarn $(@expr1073745199 "cppcheck-2.8/test/testio.cpp" $, 3831 $, $"void f(signed long x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long'.\n" $) ;
3832: $testFormatStrWarn $(@expr1073745200 "cppcheck-2.8/test/testio.cpp" $, 3832 $, $"void f(unsigned long x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long'.\n" $) ;
3833: $testFormatStrWarn $(@expr1073745201 "cppcheck-2.8/test/testio.cpp" $, 3833 $, $"void f(signed long long x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long long'.\n" $) ;
3834: $testFormatStrWarn $(@expr1073745202 "cppcheck-2.8/test/testio.cpp" $, 3834 $, $"void f(unsigned long long x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long long'.\n" $) ;
3835: $testFormatStrWarn $(@expr1073745203 "cppcheck-2.8/test/testio.cpp" $, 3835 $, $"void f(float x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'float'.\n" $) ;
3836: $testFormatStrWarn $(@expr1073745204 "cppcheck-2.8/test/testio.cpp" $, 3836 $, $"void f(double x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'double'.\n" $) ;
3837: $testFormatStrWarn $(@expr1073745205 "cppcheck-2.8/test/testio.cpp" $, 3837 $, $"void f(long double x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'long double'.\n" $) ;
3838: $testFormatStrWarn $(@expr1073745206 "cppcheck-2.8/test/testio.cpp" $, 3838 $, $"void f(void * x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'void *'.\n" $) ;
3839: $testFormatStrWarnAka $(@expr1073745207 "cppcheck-2.8/test/testio.cpp" $, 3839 $, $"void f(size_t x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
3840: $testFormatStrWarnAka $(@expr1073745208 "cppcheck-2.8/test/testio.cpp" $, 3840 $, $"void f(ssize_t x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3841:
3842: $testFormatStrNoWarn $(@expr1073745209 "cppcheck-2.8/test/testio.cpp" $, 3842 $, $"void f(unsigned ptrdiff_t x){printf(\"%tx\", x);}" $) ;
3843: $testFormatStrWarnAka $(@expr1073745210 "cppcheck-2.8/test/testio.cpp" $, 3843 $, $"void f(intmax_t x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3844: $testFormatStrWarnAka $(@expr1073745211 "cppcheck-2.8/test/testio.cpp" $, 3844 $, $"void f(uintmax_t x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3845: $testFormatStrWarnAka $(@expr1073745212 "cppcheck-2.8/test/testio.cpp" $, 3845 $, $"void f(std::size_t x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
3846: $testFormatStrWarnAka $(@expr1073745213 "cppcheck-2.8/test/testio.cpp" $, 3846 $, $"void f(std::ssize_t x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3847:
3848: $testFormatStrWarnAka $(@expr1073745214 "cppcheck-2.8/test/testio.cpp" $, 3848 $, $"void f(std::intptr_t x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3849: $testFormatStrWarnAka $(@expr1073745215 "cppcheck-2.8/test/testio.cpp" $, 3849 $, $"void f(std::uintptr_t x){printf(\"%tx\", x);}" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3850:
3851: $testFormatStrWarn $(@expr1073745216 "cppcheck-2.8/test/testio.cpp" $, 3851 $, $"void f(bool x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n" $) ;
3852: $testFormatStrWarn $(@expr1073745217 "cppcheck-2.8/test/testio.cpp" $, 3852 $, $"void f(char x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n" $) ;
3853: $testFormatStrWarn $(@expr1073745218 "cppcheck-2.8/test/testio.cpp" $, 3853 $, $"void f(signed char x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n" $) ;
3854: $testFormatStrWarn $(@expr1073745219 "cppcheck-2.8/test/testio.cpp" $, 3854 $, $"void f(unsigned char x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n" $) ;
3855: $testFormatStrWarn $(@expr1073745220 "cppcheck-2.8/test/testio.cpp" $, 3855 $, $"void f(signed short x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n" $) ;
3856: $testFormatStrWarn $(@expr1073745221 "cppcheck-2.8/test/testio.cpp" $, 3856 $, $"void f(unsigned short x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n" $) ;
3857: $testFormatStrWarn $(@expr1073745222 "cppcheck-2.8/test/testio.cpp" $, 3857 $, $"void f(signed int x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n" $) ;
3858: $testFormatStrWarn $(@expr1073745223 "cppcheck-2.8/test/testio.cpp" $, 3858 $, $"void f(unsigned int x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n" $) ;
3859: $testFormatStrWarn $(@expr1073745224 "cppcheck-2.8/test/testio.cpp" $, 3859 $, $"void f(signed long x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n" $) ;
3860: $testFormatStrWarn $(@expr1073745225 "cppcheck-2.8/test/testio.cpp" $, 3860 $, $"void f(unsigned long x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n" $) ;
3861: $testFormatStrWarn $(@expr1073745226 "cppcheck-2.8/test/testio.cpp" $, 3861 $, $"void f(signed long long x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n" $) ;
3862: $testFormatStrWarn $(@expr1073745227 "cppcheck-2.8/test/testio.cpp" $, 3862 $, $"void f(unsigned long long x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n" $) ;
3863: $testFormatStrWarn $(@expr1073745228 "cppcheck-2.8/test/testio.cpp" $, 3863 $, $"void f(float x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n" $) ;
3864: $testFormatStrWarn $(@expr1073745229 "cppcheck-2.8/test/testio.cpp" $, 3864 $, $"void f(double x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n" $) ;
3865: $testFormatStrWarn $(@expr1073745230 "cppcheck-2.8/test/testio.cpp" $, 3865 $, $"void f(long double x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n" $) ;
3866: $testFormatStrWarn $(@expr1073745231 "cppcheck-2.8/test/testio.cpp" $, 3866 $, $"void f(void * x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n" $) ;
3867: $testFormatStrNoWarn $(@expr1073745232 "cppcheck-2.8/test/testio.cpp" $, 3867 $, $"void f(size_t x){printf(\"%Iu\", x);}" $) ;
3868: $testFormatStrWarnAka $(@expr1073745233 "cppcheck-2.8/test/testio.cpp" $, 3868 $, $"void f(ssize_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3869: $testFormatStrWarnAka $(@expr1073745234 "cppcheck-2.8/test/testio.cpp" $, 3869 $, $"void f(ptrdiff_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3870: $testFormatStrWarnAka $(@expr1073745235 "cppcheck-2.8/test/testio.cpp" $, 3870 $, $"void f(unsigned ptrdiff_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3871: $testFormatStrWarnAka $(@expr1073745236 "cppcheck-2.8/test/testio.cpp" $, 3871 $, $"void f(intmax_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3872: $testFormatStrWarnAka $(@expr1073745237 "cppcheck-2.8/test/testio.cpp" $, 3872 $, $"void f(uintmax_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3873: $testFormatStrWarnAka $(@expr1073745238 "cppcheck-2.8/test/testio.cpp" $, 3873 $, $"void f(intptr_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3874: $testFormatStrWarnAka $(@expr1073745239 "cppcheck-2.8/test/testio.cpp" $, 3874 $, $"void f(uintptr_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" $) ;
3875: $testFormatStrNoWarn $(@expr1073745240 "cppcheck-2.8/test/testio.cpp" $, 3875 $, $"void f(std::size_t x){printf(\"%Iu\", x);}" $) ;
3876: $testFormatStrWarnAka $(@expr1073745241 "cppcheck-2.8/test/testio.cpp" $, 3876 $, $"void f(std::ssize_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3877: $testFormatStrWarnAka $(@expr1073745242 "cppcheck-2.8/test/testio.cpp" $, 3877 $, $"void f(std::ptrdiff_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3878: $testFormatStrWarnAka $(@expr1073745243 "cppcheck-2.8/test/testio.cpp" $, 3878 $, $"void f(std::intmax_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3879: $testFormatStrWarnAka $(@expr1073745244 "cppcheck-2.8/test/testio.cpp" $, 3879 $, $"void f(std::uintmax_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" $) ;
3880: $testFormatStrWarnAka $(@expr1073745245 "cppcheck-2.8/test/testio.cpp" $, 3880 $, $"void f(std::intptr_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3881: $testFormatStrWarnAka $(@expr1073745246 "cppcheck-2.8/test/testio.cpp" $, 3881 $, $"void f(std::uintptr_t x){printf(\"%Iu\", x);}" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3882:
3883: $testFormatStrWarn $(@expr1073745247 "cppcheck-2.8/test/testio.cpp" $, 3883 $, $"void f(bool x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n" $) ;
3884: $testFormatStrWarn $(@expr1073745248 "cppcheck-2.8/test/testio.cpp" $, 3884 $, $"void f(char x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n" $) ;
3885: $testFormatStrWarn $(@expr1073745249 "cppcheck-2.8/test/testio.cpp" $, 3885 $, $"void f(signed char x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n" $) ;
3886: $testFormatStrWarn $(@expr1073745250 "cppcheck-2.8/test/testio.cpp" $, 3886 $, $"void f(unsigned char x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n" $) ;
3887: $testFormatStrWarn $(@expr1073745251 "cppcheck-2.8/test/testio.cpp" $, 3887 $, $"void f(signed short x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n" $) ;
3888: $testFormatStrWarn $(@expr1073745252 "cppcheck-2.8/test/testio.cpp" $, 3888 $, $"void f(unsigned short x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n" $) ;
3889: $testFormatStrWarn $(@expr1073745253 "cppcheck-2.8/test/testio.cpp" $, 3889 $, $"void f(signed int x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n" $) ;
3890: $testFormatStrWarn $(@expr1073745254 "cppcheck-2.8/test/testio.cpp" $, 3890 $, $"void f(unsigned int x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n" $) ;
3891: $testFormatStrWarn $(@expr1073745255 "cppcheck-2.8/test/testio.cpp" $, 3891 $, $"void f(signed long x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n" $) ;
3892: $testFormatStrWarn $(@expr1073745256 "cppcheck-2.8/test/testio.cpp" $, 3892 $, $"void f(unsigned long x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n" $) ;
3893: $testFormatStrWarn $(@expr1073745257 "cppcheck-2.8/test/testio.cpp" $, 3893 $, $"void f(signed long long x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n" $) ;
3894: $testFormatStrWarn $(@expr1073745258 "cppcheck-2.8/test/testio.cpp" $, 3894 $, $"void f(unsigned long long x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n" $) ;
3895: $testFormatStrWarn $(@expr1073745259 "cppcheck-2.8/test/testio.cpp" $, 3895 $, $"void f(float x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n" $) ;
3896: $testFormatStrWarn $(@expr1073745260 "cppcheck-2.8/test/testio.cpp" $, 3896 $, $"void f(double x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n" $) ;
3897: $testFormatStrWarn $(@expr1073745261 "cppcheck-2.8/test/testio.cpp" $, 3897 $, $"void f(long double x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n" $) ;
3898: $testFormatStrWarn $(@expr1073745262 "cppcheck-2.8/test/testio.cpp" $, 3898 $, $"void f(void * x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n" $) ;
3899: $testFormatStrNoWarn $(@expr1073745263 "cppcheck-2.8/test/testio.cpp" $, 3899 $, $"void f(size_t x){printf(\"%Ix\", x);}" $) ;
3900: $testFormatStrWarnAka $(@expr1073745264 "cppcheck-2.8/test/testio.cpp" $, 3900 $, $"void f(ssize_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3901: $testFormatStrWarnAka $(@expr1073745265 "cppcheck-2.8/test/testio.cpp" $, 3901 $, $"void f(ptrdiff_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3902: $testFormatStrWarnAka $(@expr1073745266 "cppcheck-2.8/test/testio.cpp" $, 3902 $, $"void f(unsigned ptrdiff_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
3903: $testFormatStrWarnAka $(@expr1073745267 "cppcheck-2.8/test/testio.cpp" $, 3903 $, $"void f(intmax_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3904: $testFormatStrWarnAka $(@expr1073745268 "cppcheck-2.8/test/testio.cpp" $, 3904 $, $"void f(uintmax_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
3905: $testFormatStrWarnAka $(@expr1073745269 "cppcheck-2.8/test/testio.cpp" $, 3905 $, $"void f(intptr_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3906: $testFormatStrWarnAka $(@expr1073745270 "cppcheck-2.8/test/testio.cpp" $, 3906 $, $"void f(uintptr_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" $) ;
3907: $testFormatStrNoWarn $(@expr1073745271 "cppcheck-2.8/test/testio.cpp" $, 3907 $, $"void f(std::size_t x){printf(\"%Ix\", x);}" $) ;
3908: $testFormatStrWarnAka $(@expr1073745272 "cppcheck-2.8/test/testio.cpp" $, 3908 $, $"void f(std::ssize_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3909: $testFormatStrWarnAka $(@expr1073745273 "cppcheck-2.8/test/testio.cpp" $, 3909 $, $"void f(std::ptrdiff_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3910: $testFormatStrWarnAka $(@expr1073745274 "cppcheck-2.8/test/testio.cpp" $, 3910 $, $"void f(std::intmax_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3911: $testFormatStrWarnAka $(@expr1073745275 "cppcheck-2.8/test/testio.cpp" $, 3911 $, $"void f(std::uintmax_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" $) ;
3912: $testFormatStrWarnAka $(@expr1073745276 "cppcheck-2.8/test/testio.cpp" $, 3912 $, $"void f(std::intptr_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3913: $testFormatStrWarnAka $(@expr1073745277 "cppcheck-2.8/test/testio.cpp" $, 3913 $, $"void f(std::uintptr_t x){printf(\"%Ix\", x);}" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
3914:
3915: $testFormatStrWarn $(@expr1073745278 "cppcheck-2.8/test/testio.cpp" $, 3915 $, $"void f(bool x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'bool'.\n" $) ;
3916: $testFormatStrWarn $(@expr1073745279 "cppcheck-2.8/test/testio.cpp" $, 3916 $, $"void f(char x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'char'.\n" $) ;
3917: $testFormatStrWarn $(@expr1073745280 "cppcheck-2.8/test/testio.cpp" $, 3917 $, $"void f(signed char x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed char'.\n" $) ;
3918: $testFormatStrWarn $(@expr1073745281 "cppcheck-2.8/test/testio.cpp" $, 3918 $, $"void f(unsigned char x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned char'.\n" $) ;
3919: $testFormatStrWarn $(@expr1073745282 "cppcheck-2.8/test/testio.cpp" $, 3919 $, $"void f(signed short x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed short'.\n" $) ;
3920: $testFormatStrWarn $(@expr1073745283 "cppcheck-2.8/test/testio.cpp" $, 3920 $, $"void f(unsigned short x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned short'.\n" $) ;
3921: $testFormatStrWarn $(@expr1073745284 "cppcheck-2.8/test/testio.cpp" $, 3921 $, $"void f(signed int x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed int'.\n" $) ;
3922: $testFormatStrWarn $(@expr1073745285 "cppcheck-2.8/test/testio.cpp" $, 3922 $, $"void f(unsigned int x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned int'.\n" $) ;
3923: $testFormatStrWarn $(@expr1073745286 "cppcheck-2.8/test/testio.cpp" $, 3923 $, $"void f(signed long x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed long'.\n" $) ;
3924: $testFormatStrWarn $(@expr1073745287 "cppcheck-2.8/test/testio.cpp" $, 3924 $, $"void f(unsigned long x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned long'.\n" $) ;
3925: $testFormatStrWarn $(@expr1073745288 "cppcheck-2.8/test/testio.cpp" $, 3925 $, $"void f(signed long long x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed long long'.\n" $) ;
3926: $testFormatStrNoWarn $(@expr1073745289 "cppcheck-2.8/test/testio.cpp" $, 3926 $, $"void f(unsigned long long x){printf(\"%I64u\", x);}" $) ;
3927: $testFormatStrWarn $(@expr1073745290 "cppcheck-2.8/test/testio.cpp" $, 3927 $, $"void f(float x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'float'.\n" $) ;
3928: $testFormatStrWarn $(@expr1073745291 "cppcheck-2.8/test/testio.cpp" $, 3928 $, $"void f(double x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'double'.\n" $) ;
3929: $testFormatStrWarn $(@expr1073745292 "cppcheck-2.8/test/testio.cpp" $, 3929 $, $"void f(long double x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'long double'.\n" $) ;
3930: $testFormatStrWarn $(@expr1073745293 "cppcheck-2.8/test/testio.cpp" $, 3930 $, $"void f(void * x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'void *'.\n" $) ;
3931: $testFormatStrWarnAkaWin32 $(@expr1073745294 "cppcheck-2.8/test/testio.cpp" $, 3931 $, $"void f(size_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'size_t {aka unsigned long}'.\n" $) ;
3932: $testFormatStrWarnAka $(@expr1073745295 "cppcheck-2.8/test/testio.cpp" $, 3932 $, $"void f(ssize_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
3933: $testFormatStrWarnAka $(@expr1073745296 "cppcheck-2.8/test/testio.cpp" $, 3933 $, $"void f(ptrdiff_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
3934: $testFormatStrWarnAkaWin32 $(@expr1073745297 "cppcheck-2.8/test/testio.cpp" $, 3934 $, $"void f(unsigned ptrdiff_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $) ;
3935: $testFormatStrWarnAka $(@expr1073745298 "cppcheck-2.8/test/testio.cpp" $, 3935 $, $"void f(intmax_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
3936: $testFormatStrWarnAkaWin32 $(@expr1073745299 "cppcheck-2.8/test/testio.cpp" $, 3936 $, $"void f(uintmax_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $) ;
3937: $testFormatStrWarnAka $(@expr1073745300 "cppcheck-2.8/test/testio.cpp" $, 3937 $, $"void f(intptr_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
3938: $testFormatStrWarnAkaWin32 $(@expr1073745301 "cppcheck-2.8/test/testio.cpp" $, 3938 $, $"void f(uintptr_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $) ;
3939: $testFormatStrWarnAkaWin32 $(@expr1073745302 "cppcheck-2.8/test/testio.cpp" $, 3939 $, $"void f(std::size_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::size_t {aka unsigned long}'.\n" $) ;
3940: $testFormatStrWarnAka $(@expr1073745303 "cppcheck-2.8/test/testio.cpp" $, 3940 $, $"void f(std::ssize_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
3941: $testFormatStrWarnAka $(@expr1073745304 "cppcheck-2.8/test/testio.cpp" $, 3941 $, $"void f(std::ptrdiff_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
3942: $testFormatStrWarnAka $(@expr1073745305 "cppcheck-2.8/test/testio.cpp" $, 3942 $, $"void f(std::intmax_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
3943: $testFormatStrWarnAkaWin32 $(@expr1073745306 "cppcheck-2.8/test/testio.cpp" $, 3943 $, $"void f(std::uintmax_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $) ;
3944: $testFormatStrWarnAka $(@expr1073745307 "cppcheck-2.8/test/testio.cpp" $, 3944 $, $"void f(std::intptr_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
3945: $testFormatStrWarnAkaWin32 $(@expr1073745308 "cppcheck-2.8/test/testio.cpp" $, 3945 $, $"void f(std::uintptr_t x){printf(\"%I64u\", x);}" $, $"[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $) ;
3946:
3947: $testFormatStrWarn $(@expr1073745309 "cppcheck-2.8/test/testio.cpp" $, 3947 $, $"void f(bool x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'bool'.\n" $) ;
3948: $testFormatStrWarn $(@expr1073745310 "cppcheck-2.8/test/testio.cpp" $, 3948 $, $"void f(char x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'char'.\n" $) ;
3949: $testFormatStrWarn $(@expr1073745311 "cppcheck-2.8/test/testio.cpp" $, 3949 $, $"void f(signed char x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed char'.\n" $) ;
3950: $testFormatStrWarn $(@expr1073745312 "cppcheck-2.8/test/testio.cpp" $, 3950 $, $"void f(unsigned char x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned char'.\n" $) ;
3951: $testFormatStrWarn $(@expr1073745313 "cppcheck-2.8/test/testio.cpp" $, 3951 $, $"void f(signed short x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed short'.\n" $) ;
3952: $testFormatStrWarn $(@expr1073745314 "cppcheck-2.8/test/testio.cpp" $, 3952 $, $"void f(unsigned short x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned short'.\n" $) ;
3953: $testFormatStrWarn $(@expr1073745315 "cppcheck-2.8/test/testio.cpp" $, 3953 $, $"void f(signed int x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed int'.\n" $) ;
3954: $testFormatStrWarn $(@expr1073745316 "cppcheck-2.8/test/testio.cpp" $, 3954 $, $"void f(unsigned int x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned int'.\n" $) ;
3955: $testFormatStrWarn $(@expr1073745317 "cppcheck-2.8/test/testio.cpp" $, 3955 $, $"void f(signed long x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed long'.\n" $) ;
3956: $testFormatStrWarn $(@expr1073745318 "cppcheck-2.8/test/testio.cpp" $, 3956 $, $"void f(unsigned long x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned long'.\n" $) ;
3957:
3958: $testFormatStrNoWarn $(@expr1073745319 "cppcheck-2.8/test/testio.cpp" $, 3958 $, $"void f(unsigned long long x){printf(\"%I64x\", x);}" $) ;
3959: $testFormatStrWarn $(@expr1073745320 "cppcheck-2.8/test/testio.cpp" $, 3959 $, $"void f(float x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'float'.\n" $) ;
3960: $testFormatStrWarn $(@expr1073745321 "cppcheck-2.8/test/testio.cpp" $, 3960 $, $"void f(double x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'double'.\n" $) ;
3961: $testFormatStrWarn $(@expr1073745322 "cppcheck-2.8/test/testio.cpp" $, 3961 $, $"void f(long double x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'long double'.\n" $) ;
3962: $testFormatStrWarn $(@expr1073745323 "cppcheck-2.8/test/testio.cpp" $, 3962 $, $"void f(void * x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'void *'.\n" $) ;
3963:
3964: $testFormatStrWarnAkaWin32 $(@expr1073745324 "cppcheck-2.8/test/testio.cpp" $, 3964 $, $"void f(ssize_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ssize_t {aka signed long}'.\n" $) ;
3965: $testFormatStrWarnAkaWin32 $(@expr1073745325 "cppcheck-2.8/test/testio.cpp" $, 3965 $, $"void f(ptrdiff_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $) ;
3966:
3967:
3968: $testFormatStrWarnAkaWin32 $(@expr1073745326 "cppcheck-2.8/test/testio.cpp" $, 3968 $, $"void f(unsigned ptrdiff_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $) ;
3969: $testFormatStrWarnAkaWin32 $(@expr1073745327 "cppcheck-2.8/test/testio.cpp" $, 3969 $, $"void f(intmax_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intmax_t {aka signed long}'.\n" $) ;
3970: $testFormatStrWarnAkaWin32 $(@expr1073745328 "cppcheck-2.8/test/testio.cpp" $, 3970 $, $"void f(uintmax_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $) ;
3971: $testFormatStrWarnAkaWin32 $(@expr1073745329 "cppcheck-2.8/test/testio.cpp" $, 3971 $, $"void f(intptr_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intptr_t {aka signed long}'.\n" $) ;
3972: $testFormatStrWarnAkaWin32 $(@expr1073745330 "cppcheck-2.8/test/testio.cpp" $, 3972 $, $"void f(uintptr_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $) ;
3973: $testFormatStrWarnAkaWin32 $(@expr1073745331 "cppcheck-2.8/test/testio.cpp" $, 3973 $, $"void f(std::size_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::size_t {aka unsigned long}'.\n" $) ;
3974: $testFormatStrWarnAkaWin32 $(@expr1073745332 "cppcheck-2.8/test/testio.cpp" $, 3974 $, $"void f(std::ssize_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ssize_t {aka signed long}'.\n" $) ;
3975: $testFormatStrWarnAkaWin32 $(@expr1073745333 "cppcheck-2.8/test/testio.cpp" $, 3975 $, $"void f(std::ptrdiff_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $) ;
3976: $testFormatStrWarnAkaWin32 $(@expr1073745334 "cppcheck-2.8/test/testio.cpp" $, 3976 $, $"void f(std::intmax_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intmax_t {aka signed long}'.\n" $) ;
3977: $testFormatStrWarnAkaWin32 $(@expr1073745335 "cppcheck-2.8/test/testio.cpp" $, 3977 $, $"void f(std::uintmax_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $) ;
3978: $testFormatStrWarnAkaWin32 $(@expr1073745336 "cppcheck-2.8/test/testio.cpp" $, 3978 $, $"void f(std::intptr_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intptr_t {aka signed long}'.\n" $) ;
3979: $testFormatStrWarnAkaWin32 $(@expr1073745337 "cppcheck-2.8/test/testio.cpp" $, 3979 $, $"void f(std::uintptr_t x){printf(\"%I64x\", x);}" $, $"[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $) ;
3980:
3981: $testFormatStrWarn $(@expr1073745338 "cppcheck-2.8/test/testio.cpp" $, 3981 $, $"void f(bool x){printf(\"%I64d\", x);}" $, $"[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'bool'.\n" $) ;
3982: $testFormatStrWarn $(@expr1073745339 "cppcheck-2.8/test/testio.cpp" $, 3982 $, $"void f(signed char x){printf(\"%I64d\", x);}" $, $"[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'signed char'.\n" $) ;
3983: $testFormatStrWarn $(@expr1073745340 "cppcheck-2.8/test/testio.cpp" $, 3983 $, $"void f(unsigned char x){printf(\"%I64d\", x);}" $, $"[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'unsigned char'.\n" $) ;
3984: $testFormatStrWarn $(@expr1073745341 "cppcheck-2.8/test/testio.cpp" $, 3984 $, $"void f(void * x){printf(\"%I64d\", x);}" $, $"[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'void *'.\n" $) ;
3985:
3986: $testFormatStrWarnAkaWin32 $(@expr1073745342 "cppcheck-2.8/test/testio.cpp" $, 3986 $, $"void f(intmax_t x){printf(\"%I64d\", x);}" $, $"[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'intmax_t {aka signed long}'.\n" $) ;
3987: $testFormatStrWarnAkaWin32 $(@expr1073745343 "cppcheck-2.8/test/testio.cpp" $, 3987 $, $"void f(ssize_t x){printf(\"%I64d\", x);}" $, $"[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'ssize_t {aka signed long}'.\n" $) ;
3988: $testFormatStrWarnAkaWin32 $(@expr1073745344 "cppcheck-2.8/test/testio.cpp" $, 3988 $, $"void f(ptrdiff_t x){printf(\"%I64d\", x);}" $, $"[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $) ;
3989: $testFormatStrNoWarn $(@expr1073745345 "cppcheck-2.8/test/testio.cpp" $, 3989 $, $"void f(__int64 x){printf(\"%I64d\", x);}" $) ;
3990:
3991: $testFormatStrWarn $(@expr1073745346 "cppcheck-2.8/test/testio.cpp" $, 3991 $, $"void f(bool x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'bool'.\n" $) ;
3992: $testFormatStrWarn $(@expr1073745347 "cppcheck-2.8/test/testio.cpp" $, 3992 $, $"void f(char x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'char'.\n" $) ;
3993: $testFormatStrWarn $(@expr1073745348 "cppcheck-2.8/test/testio.cpp" $, 3993 $, $"void f(signed char x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed char'.\n" $) ;
3994: $testFormatStrWarn $(@expr1073745349 "cppcheck-2.8/test/testio.cpp" $, 3994 $, $"void f(unsigned char x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned char'.\n" $) ;
3995: $testFormatStrWarn $(@expr1073745350 "cppcheck-2.8/test/testio.cpp" $, 3995 $, $"void f(signed short x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed short'.\n" $) ;
3996: $testFormatStrWarn $(@expr1073745351 "cppcheck-2.8/test/testio.cpp" $, 3996 $, $"void f(unsigned short x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned short'.\n" $) ;
3997: $testFormatStrWarn $(@expr1073745352 "cppcheck-2.8/test/testio.cpp" $, 3997 $, $"void f(signed int x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed int'.\n" $) ;
3998: $testFormatStrNoWarn $(@expr1073745353 "cppcheck-2.8/test/testio.cpp" $, 3998 $, $"void f(unsigned int x){printf(\"%I32u\", x);}" $) ;
3999: $testFormatStrWarn $(@expr1073745354 "cppcheck-2.8/test/testio.cpp" $, 3999 $, $"void f(signed long x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long'.\n" $) ;
4000: $testFormatStrWarn $(@expr1073745355 "cppcheck-2.8/test/testio.cpp" $, 4000 $, $"void f(unsigned long x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long'.\n" $) ;
4001: $testFormatStrWarn $(@expr1073745356 "cppcheck-2.8/test/testio.cpp" $, 4001 $, $"void f(signed long long x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long long'.\n" $) ;
4002: $testFormatStrWarn $(@expr1073745357 "cppcheck-2.8/test/testio.cpp" $, 4002 $, $"void f(unsigned long long x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n" $) ;
4003: $testFormatStrWarn $(@expr1073745358 "cppcheck-2.8/test/testio.cpp" $, 4003 $, $"void f(float x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'float'.\n" $) ;
4004: $testFormatStrWarn $(@expr1073745359 "cppcheck-2.8/test/testio.cpp" $, 4004 $, $"void f(double x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'double'.\n" $) ;
4005: $testFormatStrWarn $(@expr1073745360 "cppcheck-2.8/test/testio.cpp" $, 4005 $, $"void f(long double x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'long double'.\n" $) ;
4006: $testFormatStrWarn $(@expr1073745361 "cppcheck-2.8/test/testio.cpp" $, 4006 $, $"void f(void * x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'void *'.\n" $) ;
4007: $testFormatStrWarnAka $(@expr1073745362 "cppcheck-2.8/test/testio.cpp" $, 4007 $, $"void f(size_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
4008: $testFormatStrWarnAka $(@expr1073745363 "cppcheck-2.8/test/testio.cpp" $, 4008 $, $"void f(ssize_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
4009: $testFormatStrWarnAka $(@expr1073745364 "cppcheck-2.8/test/testio.cpp" $, 4009 $, $"void f(ptrdiff_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
4010: $testFormatStrWarnAka $(@expr1073745365 "cppcheck-2.8/test/testio.cpp" $, 4010 $, $"void f(unsigned ptrdiff_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
4011: $testFormatStrWarnAka $(@expr1073745366 "cppcheck-2.8/test/testio.cpp" $, 4011 $, $"void f(intmax_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
4012: $testFormatStrWarnAka $(@expr1073745367 "cppcheck-2.8/test/testio.cpp" $, 4012 $, $"void f(uintmax_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
4013: $testFormatStrWarnAka $(@expr1073745368 "cppcheck-2.8/test/testio.cpp" $, 4013 $, $"void f(intptr_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
4014: $testFormatStrWarnAka $(@expr1073745369 "cppcheck-2.8/test/testio.cpp" $, 4014 $, $"void f(uintptr_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" $) ;
4015: $testFormatStrWarnAka $(@expr1073745370 "cppcheck-2.8/test/testio.cpp" $, 4015 $, $"void f(std::size_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
4016: $testFormatStrWarnAka $(@expr1073745371 "cppcheck-2.8/test/testio.cpp" $, 4016 $, $"void f(std::ssize_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
4017: $testFormatStrWarnAka $(@expr1073745372 "cppcheck-2.8/test/testio.cpp" $, 4017 $, $"void f(std::ptrdiff_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
4018: $testFormatStrWarnAka $(@expr1073745373 "cppcheck-2.8/test/testio.cpp" $, 4018 $, $"void f(std::intmax_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
4019: $testFormatStrWarnAka $(@expr1073745374 "cppcheck-2.8/test/testio.cpp" $, 4019 $, $"void f(std::uintmax_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" $) ;
4020: $testFormatStrWarnAka $(@expr1073745375 "cppcheck-2.8/test/testio.cpp" $, 4020 $, $"void f(std::intptr_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
4021: $testFormatStrWarnAka $(@expr1073745376 "cppcheck-2.8/test/testio.cpp" $, 4021 $, $"void f(std::uintptr_t x){printf(\"%I32u\", x);}" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
4022:
4023: $testFormatStrWarn $(@expr1073745377 "cppcheck-2.8/test/testio.cpp" $, 4023 $, $"void f(bool x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'bool'.\n" $) ;
4024: $testFormatStrWarn $(@expr1073745378 "cppcheck-2.8/test/testio.cpp" $, 4024 $, $"void f(char x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'char'.\n" $) ;
4025: $testFormatStrWarn $(@expr1073745379 "cppcheck-2.8/test/testio.cpp" $, 4025 $, $"void f(signed char x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed char'.\n" $) ;
4026: $testFormatStrWarn $(@expr1073745380 "cppcheck-2.8/test/testio.cpp" $, 4026 $, $"void f(unsigned char x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned char'.\n" $) ;
4027: $testFormatStrWarn $(@expr1073745381 "cppcheck-2.8/test/testio.cpp" $, 4027 $, $"void f(signed short x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed short'.\n" $) ;
4028: $testFormatStrWarn $(@expr1073745382 "cppcheck-2.8/test/testio.cpp" $, 4028 $, $"void f(unsigned short x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned short'.\n" $) ;
4029:
4030: $testFormatStrNoWarn $(@expr1073745383 "cppcheck-2.8/test/testio.cpp" $, 4030 $, $"void f(unsigned int x){printf(\"%I32x\", x);}" $) ;
4031: $testFormatStrWarn $(@expr1073745384 "cppcheck-2.8/test/testio.cpp" $, 4031 $, $"void f(signed long x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long'.\n" $) ;
4032: $testFormatStrWarn $(@expr1073745385 "cppcheck-2.8/test/testio.cpp" $, 4032 $, $"void f(unsigned long x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long'.\n" $) ;
4033: $testFormatStrWarn $(@expr1073745386 "cppcheck-2.8/test/testio.cpp" $, 4033 $, $"void f(signed long long x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long long'.\n" $) ;
4034: $testFormatStrWarn $(@expr1073745387 "cppcheck-2.8/test/testio.cpp" $, 4034 $, $"void f(unsigned long long x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n" $) ;
4035: $testFormatStrWarn $(@expr1073745388 "cppcheck-2.8/test/testio.cpp" $, 4035 $, $"void f(float x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'float'.\n" $) ;
4036: $testFormatStrWarn $(@expr1073745389 "cppcheck-2.8/test/testio.cpp" $, 4036 $, $"void f(double x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'double'.\n" $) ;
4037: $testFormatStrWarn $(@expr1073745390 "cppcheck-2.8/test/testio.cpp" $, 4037 $, $"void f(long double x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'long double'.\n" $) ;
4038: $testFormatStrWarn $(@expr1073745391 "cppcheck-2.8/test/testio.cpp" $, 4038 $, $"void f(void * x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'void *'.\n" $) ;
4039: $testFormatStrWarnAka $(@expr1073745392 "cppcheck-2.8/test/testio.cpp" $, 4039 $, $"void f(size_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long long}'.\n" $) ;
4040: $testFormatStrWarnAka $(@expr1073745393 "cppcheck-2.8/test/testio.cpp" $, 4040 $, $"void f(ssize_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long long}'.\n" $) ;
4041: $testFormatStrWarnAka $(@expr1073745394 "cppcheck-2.8/test/testio.cpp" $, 4041 $, $"void f(ptrdiff_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" $) ;
4042: $testFormatStrWarnAka $(@expr1073745395 "cppcheck-2.8/test/testio.cpp" $, 4042 $, $"void f(unsigned ptrdiff_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" $) ;
4043: $testFormatStrWarnAka $(@expr1073745396 "cppcheck-2.8/test/testio.cpp" $, 4043 $, $"void f(intmax_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long long}'.\n" $) ;
4044: $testFormatStrWarnAka $(@expr1073745397 "cppcheck-2.8/test/testio.cpp" $, 4044 $, $"void f(uintmax_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" $) ;
4045: $testFormatStrWarnAka $(@expr1073745398 "cppcheck-2.8/test/testio.cpp" $, 4045 $, $"void f(intptr_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long long}'.\n" $) ;
4046: $testFormatStrWarnAka $(@expr1073745399 "cppcheck-2.8/test/testio.cpp" $, 4046 $, $"void f(uintptr_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" $) ;
4047: $testFormatStrWarnAka $(@expr1073745400 "cppcheck-2.8/test/testio.cpp" $, 4047 $, $"void f(std::size_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long long}'.\n" $) ;
4048: $testFormatStrWarnAka $(@expr1073745401 "cppcheck-2.8/test/testio.cpp" $, 4048 $, $"void f(std::ssize_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long long}'.\n" $) ;
4049: $testFormatStrWarnAka $(@expr1073745402 "cppcheck-2.8/test/testio.cpp" $, 4049 $, $"void f(std::ptrdiff_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" $) ;
4050: $testFormatStrWarnAka $(@expr1073745403 "cppcheck-2.8/test/testio.cpp" $, 4050 $, $"void f(std::intmax_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long long}'.\n" $) ;
4051: $testFormatStrWarnAka $(@expr1073745404 "cppcheck-2.8/test/testio.cpp" $, 4051 $, $"void f(std::uintmax_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" $) ;
4052: $testFormatStrWarnAka $(@expr1073745405 "cppcheck-2.8/test/testio.cpp" $, 4052 $, $"void f(std::intptr_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long long}'.\n" $) ;
4053: $testFormatStrWarnAka $(@expr1073745406 "cppcheck-2.8/test/testio.cpp" $, 4053 $, $"void f(std::uintptr_t x){printf(\"%I32x\", x);}" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" $, $"[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" $) ;
4054: }
4055:
4056: void testPosixPrintfScanfParameterPosition ( ) {
4057: $check_ $(@expr1073745407 "cppcheck-2.8/test/testio.cpp" $, 4057 $, "void foo() {  int bar;  printf(\"%1$d\", 1);  printf(\"%1$d, %d, %1$d\", 1, 2);  scanf(\"%1$d\", &bar);}" $)
4058:
|
4061:
4062: ;
4063: $if $(@expr1073745408 $!@expr1073745409 $assertEquals $(@expr1073745410 "cppcheck-2.8/test/testio.cpp" $, 4063 $, "" $, errout@var100 .@expr3587 str (@expr3588 ) $) $) { $return ; }
4064:
4065: $check_ $(@expr1073745413 "cppcheck-2.8/test/testio.cpp" $, 4065 $, "void foo() {\n  int bar;\n  printf(\"%1$d\");\n  printf(\"%1$d, %d, %4$d\", 1, 2, 3);\n  scanf(\"%2$d\", &bar);\n  printf(\"%0$f\", 0.0);\n}" $)
4066:
|
4070:
4071: ;
4072: $if $(@expr1073745414 $!@expr1073745415 $assertEquals $(@expr1073745416 "cppcheck-2.8/test/testio.cpp" $, 4072 $, "[test.cpp:3]: (error) printf format string requires 1 parameter but only 0 are given.\n[test.cpp:4]: (warning) printf: referencing parameter 4 while 3 arguments given\n[test.cpp:5]: (warning) scanf: referencing parameter 2 while 1 arguments given\n[test.cpp:6]: (warning) printf: parameter positions start at 1, not 0\n" $, errout@var100 .@expr3587 str (@expr3588 ) $) $) { $return
4073:
4074:
4075:
4076: ; }
4077: }
4078:
4079:
4080: void testMicrosoftPrintfArgument ( ) {
4081: $check_ $(@expr1073745422 "cppcheck-2.8/test/testio.cpp" $, 4081 $, "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    printf(\"%Id %Iu %Ix\", s, s, s);\n    printf(\"%Id %Iu %Ix\", p, p, p);\n    printf(\"%I32d %I32u %I32x\", i32, i32, i32);\n    printf(\"%I32d %I32u %I32x\", u32, u32, u32);\n    printf(\"%I64d %I64u %I64x\", i64, i64, i64);\n    printf(\"%I64d %I64u %I64x\", u64, u64, u64);\n}" , false , true , Settings ::@expr3599 Win32A@expr3595 $)
4082:
|
4093:
4094: ;
4095: $if $(@expr1073745424 $!@expr1073745425 $assertEquals $(@expr1073745426 "cppcheck-2.8/test/testio.cpp" $, 4095 $, "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is '__int32 {aka signed int}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is '__int64 {aka signed long long}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'unsigned __int64 {aka unsigned long long}'.\n" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return
4096:
|
4100:
4101: ; }
4102:
4103: $check_ $(@expr1073745429 "cppcheck-2.8/test/testio.cpp" $, 4103 $, "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    printf(\"%Id %Iu %Ix\", s, s, s);\n    printf(\"%Id %Iu %Ix\", p, p, p);\n    printf(\"%I32d %I32u %I32x\", i32, i32, i32);\n    printf(\"%I32d %I32u %I32x\", u32, u32, u32);\n    printf(\"%I64d %I64u %I64x\", i64, i64, i64);\n    printf(\"%I64d %I64u %I64x\", u64, u64, u64);\n}" , false , true , Settings ::@expr3606 Win64@expr3596 $)
4104:
|
4115:
4116: ;
4117: $if $(@expr1073745431 $!@expr1073745432 $assertEquals $(@expr1073745433 "cppcheck-2.8/test/testio.cpp" $, 4117 $, "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is '__int32 {aka signed int}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is '__int64 {aka signed long long}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'unsigned __int64 {aka unsigned long long}'.\n" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return
4118:
|
4122:
4123: ; }
4124:
4125: $check_ $(@expr1073745436 "cppcheck-2.8/test/testio.cpp" $, 4125 $, "void foo() {\n    size_t s;\n    int i;\n    printf(\"%I\", s);\n    printf(\"%I6\", s);\n    printf(\"%I6x\", s);\n    printf(\"%I16\", s);\n    printf(\"%I16x\", s);\n    printf(\"%I32\", s);\n    printf(\"%I64\", s);\n    printf(\"%I%i\", s, i);\n    printf(\"%I6%i\", s, i);\n    printf(\"%I6x%i\", s, i);\n    printf(\"%I16%i\", s, i);\n    printf(\"%I16x%i\", s, i);\n    printf(\"%I32%i\", s, i);\n    printf(\"%I64%i\", s, i);\n}" $)
4126:
|
4141:
4142: ;
4143: $if $(@expr1073745437 $!@expr1073745438 $assertEquals $(@expr1073745439 "cppcheck-2.8/test/testio.cpp" $, 4143 $, "[test.cpp:4]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:11]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:12]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:13]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:14]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:15]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:16]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:17]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return
4144:
|
4155:
4156: ; }
4157:
4158:
4159: $check_ $(@expr1073745442 "cppcheck-2.8/test/testio.cpp" $, 4159 $, "void foo(LPARAM lp, WPARAM wp, LRESULT lr) {\n    printf(\"%Ix %Ix %Ix\", lp, wp, lr);\n}\n" , false , true , Settings ::@expr3606 Win64@expr3596 $)
4160:
4161: ;
4162: $if $(@expr1073745444 $!@expr1073745445 $assertEquals $(@expr1073745446 "cppcheck-2.8/test/testio.cpp" $, 4162 $, "" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return ; }
4163:
4164: $check_ $(@expr1073745449 "cppcheck-2.8/test/testio.cpp" $, 4164 $, "void foo(LPARAM lp, WPARAM wp, LRESULT lr) {\n    printf(\"%Ix %Ix %Ix\", lp, wp, lr);\n}\n" , false , true , Settings ::@expr3599 Win32A@expr3595 $)
4165:
4166: ;
4167: $if $(@expr1073745451 $!@expr1073745452 $assertEquals $(@expr1073745453 "cppcheck-2.8/test/testio.cpp" $, 4167 $, "" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return ; }
4168:
4169: $check_ $(@expr1073745456 "cppcheck-2.8/test/testio.cpp" $, 4169 $, "void foo(UINT32 a, ::UINT32 b, Fred::UINT32 c) {\n    printf(\"%d %d %d\", a, b, c);\n};\n" , false , true , Settings ::@expr3599 Win32A@expr3595 $)
4170:
4171: ;
4172: $if $(@expr1073745458 $!@expr1073745459 $assertEquals $(@expr1073745460 "cppcheck-2.8/test/testio.cpp" $, 4172 $, "[test.cpp:2]: (portability) %d in format string (no. 1) requires 'int' but the argument type is 'UINT32 {aka unsigned int}'.\n[test.cpp:2]: (portability) %d in format string (no. 2) requires 'int' but the argument type is 'UINT32 {aka unsigned int}'.\n" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return
4173: ; }
4174:
4175: $check_ $(@expr1073745463 "cppcheck-2.8/test/testio.cpp" $, 4175 $, "void foo(LPCVOID a, ::LPCVOID b, Fred::LPCVOID c) {\n    printf(\"%d %d %d\", a, b, c);\n};\n" , false , true , Settings ::@expr3599 Win32A@expr3595 $)
4176:
4177: ;
4178: $if $(@expr1073745465 $!@expr1073745466 $assertEquals $(@expr1073745467 "cppcheck-2.8/test/testio.cpp" $, 4178 $, "[test.cpp:2]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const void *'.\n[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const void *'.\n" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return
4179: ; }
4180:
4181: $check_ $(@expr1073745470 "cppcheck-2.8/test/testio.cpp" $, 4181 $, "void foo() {\n    SSIZE_T s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}" , false , true , Settings ::@expr3599 Win32A@expr3595 $)
4182:
|
4186:
4187: ;
4188: $if $(@expr1073745472 $!@expr1073745473 $assertEquals $(@expr1073745474 "cppcheck-2.8/test/testio.cpp" $, 4188 $, "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'SSIZE_T {aka signed long}'.\n" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return ; }
4189:
4190: $check_ $(@expr1073745477 "cppcheck-2.8/test/testio.cpp" $, 4190 $, "void foo() {\n    SSIZE_T s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}" , false , true , Settings ::@expr3606 Win64@expr3596 $)
4191:
|
4195:
4196: ;
4197: $if $(@expr1073745479 $!@expr1073745480 $assertEquals $(@expr1073745481 "cppcheck-2.8/test/testio.cpp" $, 4197 $, "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'SSIZE_T {aka signed long long}'.\n" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return ; }
4198:
4199: $check_ $(@expr1073745484 "cppcheck-2.8/test/testio.cpp" $, 4199 $, "void foo() {\n    SSIZE_T s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}" , false , true , Settings ::@expr1073745485 Unix64@expr1073745421 $)
4200:
|
4204:
4205: ;
4206: $if $(@expr1073745486 $!@expr1073745487 $assertEquals $(@expr1073745488 "cppcheck-2.8/test/testio.cpp" $, 4206 $, "" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return ; }
4207:
4208: $check_ $(@expr1073745491 "cppcheck-2.8/test/testio.cpp" $, 4208 $, "void foo() {\n    typedef SSIZE_T ssize_t;\n    ssize_t s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}" , false , true , Settings ::@expr3606 Win64@expr3596 $)
4209:
|
4214:
4215: ;
4216: $if $(@expr1073745493 $!@expr1073745494 $assertEquals $(@expr1073745495 "cppcheck-2.8/test/testio.cpp" $, 4216 $, "[test.cpp:7]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'SSIZE_T {aka signed long long}'.\n" $, errout@var100 .@expr3603 str (@expr3604 ) $) $) { $return ; }
4217:
4218: }
4219:
4220: void testMicrosoftScanfArgument ( ) {
4221: $check_ $(@expr1073745501 "cppcheck-2.8/test/testio.cpp" $, 4221 $, "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    scanf(\"%Id %Iu %Ix\", &s, &s, &s);\n    scanf(\"%Id %Iu %Ix\", &p, &p, &p);\n    scanf(\"%I32d %I32u %I32x\", &i32, &i32, &i32);\n    scanf(\"%I32d %I32u %I32x\", &u32, &u32, &u32);\n    scanf(\"%I64d %I64u %I64x\", &i64, &i64, &i64);\n    scanf(\"%I64d %I64u %I64x\", &u64, &u64, &u64);\n}" , false , true , Settings ::@expr3678 Win32A@expr3674 $)
4222:
|
4233:
4234: ;
4235: $if $(@expr1073745503 $!@expr1073745504 $assertEquals $(@expr1073745505 "cppcheck-2.8/test/testio.cpp" $, 4235 $, "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:10]: (portability) %I32x in format string (no. 3) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'unsigned __int32 * {aka unsigned int *}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:12]: (portability) %I64x in format string (no. 3) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'unsigned __int64 * {aka unsigned long long *}'.\n" $, errout@var100 .@expr3682 str (@expr3683 ) $) $) { $return
4236:
|
4242:
4243: ; }
4244:
4245: $check_ $(@expr1073745508 "cppcheck-2.8/test/testio.cpp" $, 4245 $, "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    scanf(\"%Id %Iu %Ix\", &s, &s, &s);\n    scanf(\"%Id %Iu %Ix\", &p, &p, &p);\n    scanf(\"%I32d %I32u %I32x\", &i32, &i32, &i32);\n    scanf(\"%I32d %I32u %I32x\", &u32, &u32, &u32);\n    scanf(\"%I64d %I64u %I64x\", &i64, &i64, &i64);\n    scanf(\"%I64d %I64u %I64x\", &u64, &u64, &u64);\n}" , false , true , Settings ::@expr3685 Win64@expr3675 $)
4246:
|
4257:
4258: ;
4259: $if $(@expr1073745510 $!@expr1073745511 $assertEquals $(@expr1073745512 "cppcheck-2.8/test/testio.cpp" $, 4259 $, "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:10]: (portability) %I32x in format string (no. 3) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'unsigned __int32 * {aka unsigned int *}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:12]: (portability) %I64x in format string (no. 3) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'unsigned __int64 * {aka unsigned long long *}'.\n" $, errout@var100 .@expr3682 str (@expr3683 ) $) $) { $return
4260:
|
4266:
4267: ; }
4268:
4269: $check_ $(@expr1073745515 "cppcheck-2.8/test/testio.cpp" $, 4269 $, "void foo() {\n    size_t s;\n    int i;\n    scanf(\"%I\", &s);\n    scanf(\"%I6\", &s);\n    scanf(\"%I6x\", &s);\n    scanf(\"%I16\", &s);\n    scanf(\"%I16x\", &s);\n    scanf(\"%I32\", &s);\n    scanf(\"%I64\", &s);\n    scanf(\"%I%i\", &s, &i);\n    scanf(\"%I6%i\", &s, &i);\n    scanf(\"%I6x%i\", &s, &i);\n    scanf(\"%I16%i\", &s, &i);\n    scanf(\"%I16x%i\", &s, &i);\n    scanf(\"%I32%i\", &s, &i);\n    scanf(\"%I64%i\", &s, &i);\n}" $)
4270:
|
4285:
4286: ;
4287: $if $(@expr1073745516 $!@expr1073745517 $assertEquals $(@expr1073745518 "cppcheck-2.8/test/testio.cpp" $, 4287 $, "[test.cpp:4]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:11]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:12]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:13]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:14]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:15]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:16]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:17]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n" $, errout@var100 .@expr3682 str (@expr3683 ) $) $) { $return
4288:
|
4299:
4300: ; }
4301:
4302: $check_ $(@expr1073745521 "cppcheck-2.8/test/testio.cpp" $, 4302 $, "void foo() {\n    SSIZE_T s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}" , false , true , Settings ::@expr3678 Win32A@expr3674 $)
4303:
|
4307:
4308: ;
4309: $if $(@expr1073745523 $!@expr1073745524 $assertEquals $(@expr1073745525 "cppcheck-2.8/test/testio.cpp" $, 4309 $, "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'SSIZE_T * {aka signed long *}'.\n" $, errout@var100 .@expr3682 str (@expr3683 ) $) $) { $return ; }
4310:
4311: $check_ $(@expr1073745528 "cppcheck-2.8/test/testio.cpp" $, 4311 $, "void foo() {\n    SSIZE_T s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}" , false , true , Settings ::@expr3685 Win64@expr3675 $)
4312:
|
4316:
4317: ;
4318: $if $(@expr1073745530 $!@expr1073745531 $assertEquals $(@expr1073745532 "cppcheck-2.8/test/testio.cpp" $, 4318 $, "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'SSIZE_T * {aka signed long long *}'.\n" $, errout@var100 .@expr3682 str (@expr3683 ) $) $) { $return ; }
4319:
4320: $check_ $(@expr1073745535 "cppcheck-2.8/test/testio.cpp" $, 4320 $, "void foo() {\n    SSIZE_T s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}" , false , true , Settings ::@expr1073745536 Unix64@expr1073745500 $)
4321:
|
4325:
4326: ;
4327: $if $(@expr1073745537 $!@expr1073745538 $assertEquals $(@expr1073745539 "cppcheck-2.8/test/testio.cpp" $, 4327 $, "" $, errout@var100 .@expr3682 str (@expr3683 ) $) $) { $return ; }
4328:
4329: $check_ $(@expr1073745542 "cppcheck-2.8/test/testio.cpp" $, 4329 $, "void foo() {\n    typedef SSIZE_T ssize_t;\n    ssize_t s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}" , false , true , Settings ::@expr3685 Win64@expr3675 $)
4330:
|
4335:
4336: ;
4337: $if $(@expr1073745544 $!@expr1073745545 $assertEquals $(@expr1073745546 "cppcheck-2.8/test/testio.cpp" $, 4337 $, "[test.cpp:7]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'SSIZE_T * {aka signed long long *}'.\n" $, errout@var100 .@expr3682 str (@expr3683 ) $) $) { $return ; }
4338:
4339: }
4340:
4341: void testMicrosoftCStringFormatArguments ( ) {
4342: $check_ $(@expr1073745551 "cppcheck-2.8/test/testio.cpp" $, 4342 $, "void foo() {\n    unsigned __int32 u32;\n    String string;\n    string.Format(\"%I32d\", u32);\n    string.AppendFormat(\"%I32d\", u32);\n}" , false , true , Settings ::@expr3728 Win32A@expr3725 $)
4343:
|
4346:
4347: ;
4348: $if $(@expr1073745553 $!@expr1073745554 $assertEquals $(@expr1073745555 "cppcheck-2.8/test/testio.cpp" $, 4348 $, "" $, errout@var100 .@expr3732 str (@expr3733 ) $) $) { $return ; }
4349:
4350: $check_ $(@expr1073745558 "cppcheck-2.8/test/testio.cpp" $, 4350 $, "void foo() {\n    unsigned __int32 u32;\n    CString string;\n    string.Format(\"%I32d\", u32);\n    string.AppendFormat(\"%I32d\", u32);\n}" , false , true , Settings ::@expr1073745559 Unix32@expr1073745550 $)
4351:
|
4354:
4355: ;
4356: $if $(@expr1073745560 $!@expr1073745561 $assertEquals $(@expr1073745562 "cppcheck-2.8/test/testio.cpp" $, 4356 $, "" $, errout@var100 .@expr3732 str (@expr3733 ) $) $) { $return ; }
4357:
4358: $check_ $(@expr1073745565 "cppcheck-2.8/test/testio.cpp" $, 4358 $, "void foo() {\n    unsigned __int32 u32;\n    CString string;\n    string.Format(\"%I32d\", u32);\n    string.AppendFormat(\"%I32d\", u32);\n    CString::Format(\"%I32d\", u32);\n}" , false , true , Settings ::@expr3728 Win32A@expr3725 $)
4359:
|
4363:
4364: ;
4365: $if $(@expr1073745567 $!@expr1073745568 $assertEquals $(@expr1073745569 "cppcheck-2.8/test/testio.cpp" $, 4365 $, "[test.cpp:4]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:5]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:6]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n" $, errout@var100 .@expr3732 str (@expr3733 ) $) $) { $return
4366:
4367: ; }
4368: }
4369:
4370: void testMicrosoftSecurePrintfArgument ( ) {
4371: $check_ $(@expr1073745574 "cppcheck-2.8/test/testio.cpp" $, 4371 $, "void foo() {\n    int i;\n    unsigned int u;\n    _tprintf_s(_T(\"%d %u\"), u, i, 0);\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4372:
4373:
4374:
4375: ;
4376: $if $(@expr1073745576 $!@expr1073745577 $assertEquals $(@expr1073745578 "cppcheck-2.8/test/testio.cpp" $, 4376 $, "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _tprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4377:
4378: ; }
4379:
4380: $check_ $(@expr1073745581 "cppcheck-2.8/test/testio.cpp" $, 4380 $, "void foo() {\n    int i;\n    unsigned int u;\n    _tprintf_s(_T(\"%d %u\"), u, i, 0);\n}\n" , false , false , Settings ::@expr3758 Win32W@expr3749 $)
4381:
4382:
4383:
4384: ;
4385: $if $(@expr1073745583 $!@expr1073745584 $assertEquals $(@expr1073745585 "cppcheck-2.8/test/testio.cpp" $, 4385 $, "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _tprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4386:
4387: ; }
4388:
4389: $check_ $(@expr1073745588 "cppcheck-2.8/test/testio.cpp" $, 4389 $, "void foo() {\n    int i;\n    unsigned int u;\n    printf_s(\"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4390:
4391:
4392:
4393: ;
4394: $if $(@expr1073745590 $!@expr1073745591 $assertEquals $(@expr1073745592 "cppcheck-2.8/test/testio.cpp" $, 4394 $, "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) printf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4395:
4396: ; }
4397:
4398: $check_ $(@expr1073745595 "cppcheck-2.8/test/testio.cpp" $, 4398 $, "void foo() {\n    int i;\n    unsigned int u;\n    wprintf_s(L\"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3758 Win32W@expr3749 $)
4399:
4400:
4401:
4402: ;
4403: $if $(@expr1073745597 $!@expr1073745598 $assertEquals $(@expr1073745599 "cppcheck-2.8/test/testio.cpp" $, 4403 $, "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) wprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4404:
4405: ; }
4406:
4407: $check_ $(@expr1073745602 "cppcheck-2.8/test/testio.cpp" $, 4407 $, "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _stprintf_s(str, sizeof(str) / sizeof(TCHAR), _T(\"%d %u\"), u, i, 0);\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4408:
|
4411:
4412: ;
4413: $if $(@expr1073745604 $!@expr1073745605 $assertEquals $(@expr1073745606 "cppcheck-2.8/test/testio.cpp" $, 4413 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _stprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4414:
4415: ; }
4416:
4417: $check_ $(@expr1073745609 "cppcheck-2.8/test/testio.cpp" $, 4417 $, "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _stprintf_s(str, sizeof(str) / sizeof(TCHAR), _T(\"%d %u\"), u, i, 0);\n}\n" , false , false , Settings ::@expr3758 Win32W@expr3749 $)
4418:
|
4421:
4422: ;
4423: $if $(@expr1073745611 $!@expr1073745612 $assertEquals $(@expr1073745613 "cppcheck-2.8/test/testio.cpp" $, 4423 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _stprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4424:
4425: ; }
4426:
4427: $check_ $(@expr1073745616 "cppcheck-2.8/test/testio.cpp" $, 4427 $, "void foo() {\n    char str[10];\n    int i;\n    unsigned int u;\n    sprintf_s(str, sizeof(str), \"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4428:
|
4431:
4432: ;
4433: $if $(@expr1073745618 $!@expr1073745619 $assertEquals $(@expr1073745620 "cppcheck-2.8/test/testio.cpp" $, 4433 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) sprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4434:
4435: ; }
4436:
4437: $check_ $(@expr1073745623 "cppcheck-2.8/test/testio.cpp" $, 4437 $, "void foo() {\n    char str[10];\n    int i;\n    unsigned int u;\n    sprintf_s(str, \"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4438:
|
4441:
4442: ;
4443: $if $(@expr1073745625 $!@expr1073745626 $assertEquals $(@expr1073745627 "cppcheck-2.8/test/testio.cpp" $, 4443 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) sprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4444:
4445: ; }
4446:
4447: $check_ $(@expr1073745630 "cppcheck-2.8/test/testio.cpp" $, 4447 $, "void foo() {\n    wchar_t str[10];\n    int i;\n    unsigned int u;\n    swprintf_s(str, sizeof(str) / sizeof(wchar_t), L\"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3758 Win32W@expr3749 $)
4448:
|
4451:
4452: ;
4453: $if $(@expr1073745632 $!@expr1073745633 $assertEquals $(@expr1073745634 "cppcheck-2.8/test/testio.cpp" $, 4453 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) swprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4454:
4455: ; }
4456:
4457: $check_ $(@expr1073745637 "cppcheck-2.8/test/testio.cpp" $, 4457 $, "void foo() {\n    wchar_t str[10];\n    int i;\n    unsigned int u;\n    swprintf_s(str, L\"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3758 Win32W@expr3749 $)
4458:
|
4461:
4462: ;
4463: $if $(@expr1073745639 $!@expr1073745640 $assertEquals $(@expr1073745641 "cppcheck-2.8/test/testio.cpp" $, 4463 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) swprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4464:
4465: ; }
4466:
4467: $check_ $(@expr1073745644 "cppcheck-2.8/test/testio.cpp" $, 4467 $, "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _sntprintf_s(str, sizeof(str) / sizeof(TCHAR), _TRUNCATE, _T(\"%d %u\"), u, i, 0);\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4468:
|
4471:
4472: ;
4473: $if $(@expr1073745646 $!@expr1073745647 $assertEquals $(@expr1073745648 "cppcheck-2.8/test/testio.cpp" $, 4473 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _sntprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4474:
4475: ; }
4476:
4477: $check_ $(@expr1073745651 "cppcheck-2.8/test/testio.cpp" $, 4477 $, "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _sntprintf_s(str, sizeof(str) / sizeof(TCHAR), _TRUNCATE, _T(\"%d %u\"), u, i, 0);\n}\n" , false , false , Settings ::@expr3758 Win32W@expr3749 $)
4478:
|
4481:
4482: ;
4483: $if $(@expr1073745653 $!@expr1073745654 $assertEquals $(@expr1073745655 "cppcheck-2.8/test/testio.cpp" $, 4483 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _sntprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4484:
4485: ; }
4486:
4487: $check_ $(@expr1073745658 "cppcheck-2.8/test/testio.cpp" $, 4487 $, "void foo() {\n    char str[10];\n    int i;\n    unsigned int u;\n    _snprintf_s(str, sizeof(str), _TRUNCATE, \"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4488:
|
4491:
4492: ;
4493: $if $(@expr1073745660 $!@expr1073745661 $assertEquals $(@expr1073745662 "cppcheck-2.8/test/testio.cpp" $, 4493 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _snprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4494:
4495: ; }
4496:
4497: $check_ $(@expr1073745665 "cppcheck-2.8/test/testio.cpp" $, 4497 $, "void foo() {\n    wchar_t str[10];\n    int i;\n    unsigned int u;\n    _snwprintf_s(str, sizeof(str) / sizeof(wchar_t), _TRUNCATE, L\"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3758 Win32W@expr3749 $)
4498:
|
4501:
4502: ;
4503: $if $(@expr1073745667 $!@expr1073745668 $assertEquals $(@expr1073745669 "cppcheck-2.8/test/testio.cpp" $, 4503 $, "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _snwprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4504:
4505: ; }
4506:
4507: $check_ $(@expr1073745672 "cppcheck-2.8/test/testio.cpp" $, 4507 $, "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    _ftprintf_s(fp, _T(\"%d %u\"), u, i, 0);\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4508:
4509:
4510:
4511: ;
4512: $if $(@expr1073745674 $!@expr1073745675 $assertEquals $(@expr1073745676 "cppcheck-2.8/test/testio.cpp" $, 4512 $, "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _ftprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4513:
4514: ; }
4515:
4516: $check_ $(@expr1073745679 "cppcheck-2.8/test/testio.cpp" $, 4516 $, "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    _ftprintf_s(fp, _T(\"%d %u\"), u, i, 0);\n}\n" , false , false , Settings ::@expr3758 Win32W@expr3749 $)
4517:
4518:
4519:
4520: ;
4521: $if $(@expr1073745681 $!@expr1073745682 $assertEquals $(@expr1073745683 "cppcheck-2.8/test/testio.cpp" $, 4521 $, "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _ftprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4522:
4523: ; }
4524:
4525: $check_ $(@expr1073745686 "cppcheck-2.8/test/testio.cpp" $, 4525 $, "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    fprintf_s(fp, \"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4526:
4527:
4528:
4529: ;
4530: $if $(@expr1073745688 $!@expr1073745689 $assertEquals $(@expr1073745690 "cppcheck-2.8/test/testio.cpp" $, 4530 $, "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) fprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4531:
4532: ; }
4533:
4534: $check_ $(@expr1073745693 "cppcheck-2.8/test/testio.cpp" $, 4534 $, "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    fwprintf_s(fp, L\"%d %u\", u, i, 0);\n}\n" , false , false , Settings ::@expr3758 Win32W@expr3749 $)
4535:
4536:
4537:
4538: ;
4539: $if $(@expr1073745695 $!@expr1073745696 $assertEquals $(@expr1073745697 "cppcheck-2.8/test/testio.cpp" $, 4539 $, "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) fwprintf_s format string requires 2 parameters but 3 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4540:
4541: ; }
4542:
4543: $check_ $(@expr1073745700 "cppcheck-2.8/test/testio.cpp" $, 4543 $, "void foo() {\n    char lineBuffer [600];\n    const char * const format = \"%15s%17s%17s%17s%17s\";\n    sprintf_s(lineBuffer, 600, format, \"type\", \"sum\", \"avg\", \"min\", \"max\");\n    sprintf_s(lineBuffer, format, \"type\", \"sum\", \"avg\", \"min\", \"max\");\n}\n" , false , false , Settings ::@expr3751 Win32A@expr3748 $)
4544:
|
4547:
4548: ;
4549: $if $(@expr1073745702 $!@expr1073745703 $assertEquals $(@expr1073745704 "cppcheck-2.8/test/testio.cpp" $, 4549 $, "" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return ; }
4550:
4551: $check_ $(@expr1073745707 "cppcheck-2.8/test/testio.cpp" $, 4551 $, "void foo() {\n    const char * const format1 = \"%15s%17s%17s%17s%17s\";\n    const char format2[] = \"%15s%17s%17s%17s%17s\";\n    const char * const format3 = format1;\n    int i = 0;\n    sprintf_s(lineBuffer, format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf(lineBuffer, format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf(lineBuffer, format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf(lineBuffer, format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    printf(format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    printf(format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    printf(format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, 100, format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, 100, format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, 100, format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n}\n" , true , false , Settings ::@expr3751 Win32A@expr3748 $)
4552:
|
4567:
4568: ;
4569: $if $(@expr1073745709 $!@expr1073745710 $assertEquals $(@expr1073745711 "cppcheck-2.8/test/testio.cpp" $, 4569 $, "[test.cpp:6]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:6]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:7]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:7]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:8]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:8]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:9]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:9]: (warning) sprintf format string requires 5 parameters but 6 are given.\n[test.cpp:10]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:10]: (warning) sprintf format string requires 5 parameters but 6 are given.\n[test.cpp:11]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:11]: (warning) sprintf format string requires 5 parameters but 6 are given.\n[test.cpp:12]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:12]: (warning) printf format string requires 5 parameters but 6 are given.\n[test.cpp:13]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:13]: (warning) printf format string requires 5 parameters but 6 are given.\n[test.cpp:14]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:14]: (warning) printf format string requires 5 parameters but 6 are given.\n[test.cpp:15]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:15]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:16]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:16]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:17]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:17]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n" $, errout@var100 .@expr3755 str (@expr3756 ) $) $) { $return
4570:
|
4591:
4592: ; }
4593:
4594: }
4595:
4596: void testMicrosoftSecureScanfArgument ( ) {
4597: $check_ $(@expr1073745716 "cppcheck-2.8/test/testio.cpp" $, 4597 $, "void foo() {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _tscanf_s(_T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3893 Win32A@expr3890 $)
4598:
|
4601:
4602: ;
4603: $if $(@expr1073745718 $!@expr1073745719 $assertEquals $(@expr1073745720 "cppcheck-2.8/test/testio.cpp" $, 4603 $, "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _tscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4604:
4605: ; }
4606:
4607: $check_ $(@expr1073745723 "cppcheck-2.8/test/testio.cpp" $, 4607 $, "void foo() {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _tscanf_s(_T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3900 Win32W@expr3891 $)
4608:
|
4611:
4612: ;
4613: $if $(@expr1073745725 $!@expr1073745726 $assertEquals $(@expr1073745727 "cppcheck-2.8/test/testio.cpp" $, 4613 $, "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _tscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4614:
4615: ; }
4616:
4617: $check_ $(@expr1073745730 "cppcheck-2.8/test/testio.cpp" $, 4617 $, "void foo() {\n    int i;\n    unsigned int u;\n    char str[10];\n    scanf_s(\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3893 Win32A@expr3890 $)
4618:
|
4621:
4622: ;
4623: $if $(@expr1073745732 $!@expr1073745733 $assertEquals $(@expr1073745734 "cppcheck-2.8/test/testio.cpp" $, 4623 $, "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) scanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4624:
4625: ; }
4626:
4627: $check_ $(@expr1073745737 "cppcheck-2.8/test/testio.cpp" $, 4627 $, "void foo() {\n    int i;\n    unsigned int u;\n    wchar_t str[10];\n    wscanf_s(L\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3900 Win32W@expr3891 $)
4628:
|
4631:
4632: ;
4633: $if $(@expr1073745739 $!@expr1073745740 $assertEquals $(@expr1073745741 "cppcheck-2.8/test/testio.cpp" $, 4633 $, "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) wscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4634:
4635: ; }
4636:
4637: $check_ $(@expr1073745744 "cppcheck-2.8/test/testio.cpp" $, 4637 $, "void f() {\n  char str[8];\n  scanf_s(\"%8c\", str, sizeof(str));\n  scanf_s(\"%9c\", str, sizeof(str));\n}\n" , false , false , Settings ::@expr3893 Win32A@expr3890 $)
4638:
|
4643:
4644: ;
4645: $if $(@expr1073745746 $!@expr1073745747 $assertEquals $(@expr1073745748 "cppcheck-2.8/test/testio.cpp" $, 4645 $, "[test.cpp:4]: (error) Width 9 given in format string (no. 1) is larger than destination buffer 'str[8]', use %8c to prevent overflowing it.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return ; }
4646:
4647: $check_ $(@expr1073745751 "cppcheck-2.8/test/testio.cpp" $, 4647 $, "void foo() {\n    TCHAR txt[100];\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _stscanf_s(txt, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3893 Win32A@expr3890 $)
4648:
|
4652:
4653: ;
4654: $if $(@expr1073745753 $!@expr1073745754 $assertEquals $(@expr1073745755 "cppcheck-2.8/test/testio.cpp" $, 4654 $, "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) _stscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4655:
4656: ; }
4657:
4658: $check_ $(@expr1073745758 "cppcheck-2.8/test/testio.cpp" $, 4658 $, "void foo() {\n    TCHAR txt[100];\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _stscanf_s(txt, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3900 Win32W@expr3891 $)
4659:
|
4663:
4664: ;
4665: $if $(@expr1073745760 $!@expr1073745761 $assertEquals $(@expr1073745762 "cppcheck-2.8/test/testio.cpp" $, 4665 $, "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) _stscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4666:
4667: ; }
4668:
4669: $check_ $(@expr1073745765 "cppcheck-2.8/test/testio.cpp" $, 4669 $, "void foo() {\n    char txt[100];\n    int i;\n    unsigned int u;\n    char str[10];\n    sscanf_s(txt, \"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3893 Win32A@expr3890 $)
4670:
|
4674:
4675: ;
4676: $if $(@expr1073745767 $!@expr1073745768 $assertEquals $(@expr1073745769 "cppcheck-2.8/test/testio.cpp" $, 4676 $, "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) sscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4677:
4678: ; }
4679:
4680: $check_ $(@expr1073745772 "cppcheck-2.8/test/testio.cpp" $, 4680 $, "void foo() {\n    wchar_t txt[100];\n    int i;\n    unsigned int u;\n    wchar_t str[10];\n    swscanf_s(txt, L\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3900 Win32W@expr3891 $)
4681:
|
4685:
4686: ;
4687: $if $(@expr1073745774 $!@expr1073745775 $assertEquals $(@expr1073745776 "cppcheck-2.8/test/testio.cpp" $, 4687 $, "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) swscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4688:
4689: ; }
4690:
4691: $check_ $(@expr1073745779 "cppcheck-2.8/test/testio.cpp" $, 4691 $, "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _ftscanf_s(fp, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3893 Win32A@expr3890 $)
4692:
|
4695:
4696: ;
4697: $if $(@expr1073745781 $!@expr1073745782 $assertEquals $(@expr1073745783 "cppcheck-2.8/test/testio.cpp" $, 4697 $, "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _ftscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4698:
4699: ; }
4700:
4701: $check_ $(@expr1073745786 "cppcheck-2.8/test/testio.cpp" $, 4701 $, "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _ftscanf_s(fp, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3900 Win32W@expr3891 $)
4702:
|
4705:
4706: ;
4707: $if $(@expr1073745788 $!@expr1073745789 $assertEquals $(@expr1073745790 "cppcheck-2.8/test/testio.cpp" $, 4707 $, "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _ftscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4708:
4709: ; }
4710:
4711: $check_ $(@expr1073745793 "cppcheck-2.8/test/testio.cpp" $, 4711 $, "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    char str[10];\n    fscanf_s(fp, \"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3893 Win32A@expr3890 $)
4712:
|
4715:
4716: ;
4717: $if $(@expr1073745795 $!@expr1073745796 $assertEquals $(@expr1073745797 "cppcheck-2.8/test/testio.cpp" $, 4717 $, "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) fscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4718:
4719: ; }
4720:
4721: $check_ $(@expr1073745800 "cppcheck-2.8/test/testio.cpp" $, 4721 $, "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    wchar_t str[10];\n    fwscanf_s(fp, L\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" , false , false , Settings ::@expr3900 Win32W@expr3891 $)
4722:
|
4725:
4726: ;
4727: $if $(@expr1073745802 $!@expr1073745803 $assertEquals $(@expr1073745804 "cppcheck-2.8/test/testio.cpp" $, 4727 $, "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) fwscanf_s format string requires 6 parameters but 7 are given.\n" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return
4728:
4729: ; }
4730:
4731: $check_ $(@expr1073745807 "cppcheck-2.8/test/testio.cpp" $, 4731 $, "void foo() {\n    WCHAR msStr1[5] = {0};\n    wscanf_s(L\"%4[^-]\", msStr1, _countof(msStr1));\n}\n" , false , false , Settings ::@expr3900 Win32W@expr3891 $)
4732:
4733:
4734: ;
4735: $if $(@expr1073745809 $!@expr1073745810 $assertEquals $(@expr1073745811 "cppcheck-2.8/test/testio.cpp" $, 4735 $, "" $, errout@var100 .@expr3897 str (@expr3898 ) $) $) { $return ; }
4736: }
4737:
4738: void testQStringFormatArguments ( ) {
4739: $check_ $(@expr1073745815 "cppcheck-2.8/test/testio.cpp" $, 4739 $, "void foo(float f) {\n    QString string;\n    string.sprintf(\"%d\", f);\n}" , false , false , Settings ::@expr3992 Win32A@expr3990 $)
4740:
4741:
4742: ;
4743: $if $(@expr1073745817 $!@expr1073745818 $assertEquals $(@expr1073745819 "cppcheck-2.8/test/testio.cpp" $, 4743 $, "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'float'.\n" $, errout@var100 .@expr3996 str (@expr3997 ) $) $) { $return ; }
4744:
4745: $check_ $(@expr1073745822 "cppcheck-2.8/test/testio.cpp" $, 4745 $, "void foo(float f) {\n    QString string;\n    string = QString::asprintf(\"%d\", f);\n}" , false , false , Settings ::@expr3992 Win32A@expr3990 $)
4746:
4747:
4748: ;
4749: $if $(@expr1073745824 $!@expr1073745825 $assertEquals $(@expr1073745826 "cppcheck-2.8/test/testio.cpp" $, 4749 $, "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'float'.\n" $, errout@var100 .@expr3996 str (@expr3997 ) $) $) { $return ; }
4750: }
4751:
4752: void testTernary ( ) {
4753: $check_ $(@expr1073745829 "cppcheck-2.8/test/testio.cpp" $, 4753 $, "void test(const std::string &val) {\n    printf(\"%s\", val.empty() ? \"I like to eat bananas\" : val.c_str());\n}" $)
4754:
4755: ;
4756: $if $(@expr1073745830 $!@expr1073745831 $assertEquals $(@expr1073745832 "cppcheck-2.8/test/testio.cpp" $, 4756 $, "" $, errout@var100 .@expr1073745833 str (@expr1073745834 ) $) $) { $return ; }
4757: }
4758:
4759: void testUnsignedConst ( ) {
4760: $check_ $(@expr1073745835 "cppcheck-2.8/test/testio.cpp" $, 4760 $, "void test() {\n    unsigned const x = 5;\n    printf(\"%u\", x);\n}" $)
4761:
4762:
4763: ;
4764: $if $(@expr1073745836 $!@expr1073745837 $assertEquals $(@expr1073745838 "cppcheck-2.8/test/testio.cpp" $, 4764 $, "" $, errout@var100 .@expr1073745839 str (@expr1073745840 ) $) $) { $return ; }
4765: }
4766:
4767: void testAstType ( ) {
4768: $check_ $(@expr1073745841 "cppcheck-2.8/test/testio.cpp" $, 4768 $, "void test() {\n    printf(\"%c\", \"hello\"[0]);\n}" $)
4769:
4770: ;
4771: $if $(@expr1073745842 $!@expr1073745843 $assertEquals $(@expr1073745844 "cppcheck-2.8/test/testio.cpp" $, 4771 $, "" $, errout@var100 .@expr4021 str (@expr4022 ) $) $) { $return ; }
4772:
4773: $check_ $(@expr1073745847 "cppcheck-2.8/test/testio.cpp" $, 4773 $, "void test() {\n    printf(\"%lld\", (long long)1);\n}" $)
4774:
4775: ;
4776: $if $(@expr1073745848 $!@expr1073745849 $assertEquals $(@expr1073745850 "cppcheck-2.8/test/testio.cpp" $, 4776 $, "" $, errout@var100 .@expr4021 str (@expr4022 ) $) $) { $return ; }
4777:
4778: $check_ $(@expr1073745853 "cppcheck-2.8/test/testio.cpp" $, 4778 $, "void test() {\n    printf(\"%i\", (short *)x);\n}" $)
4779:
4780: ;
4781: $if $(@expr1073745854 $!@expr1073745855 $assertEquals $(@expr1073745856 "cppcheck-2.8/test/testio.cpp" $, 4781 $, "[test.cpp:2]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'signed short *'.\n" $, errout@var100 .@expr4021 str (@expr4022 ) $) $) { $return ; }
4782:
4783: $check_ $(@expr1073745859 "cppcheck-2.8/test/testio.cpp" $, 4783 $, "int (*fp)();\nvoid test() {\n    printf(\"%i\", fp());\n}" $)
4784:
4785:
4786: ;
4787: $if $(@expr1073745860 $!@expr1073745861 $assertEquals $(@expr1073745862 "cppcheck-2.8/test/testio.cpp" $, 4787 $, "" $, errout@var100 .@expr4021 str (@expr4022 ) $) $) { $return ; }
4788: }
4789:
4790: void testPrintf0WithSuffix ( ) {
4791: $check_ $(@expr1073745865 "cppcheck-2.8/test/testio.cpp" $, 4791 $, "void foo() {\n    printf(\"%u %lu %llu\", 0U, 0UL, 0ULL);\n    printf(\"%u %lu %llu\", 0u, 0ul, 0ull);\n}" $)
4792:
4793:
4794: ;
4795: $if $(@expr1073745866 $!@expr1073745867 $assertEquals $(@expr1073745868 "cppcheck-2.8/test/testio.cpp" $, 4795 $, "" $, errout@var100 .@expr1073745869 str (@expr1073745870 ) $) $) { $return ; }
4796: }
4797:
4798: void testReturnValueTypeStdLib ( ) {
4799: $check_ $(@expr1073745872 "cppcheck-2.8/test/testio.cpp" $, 4799 $, "void f() {\n   const char *s = \"0\";\n   printf(\"%ld%lld\", atol(s), atoll(s));\n}" $)
4800:
4801:
4802: ;
4803: $if $(@expr1073745873 $!@expr1073745874 $assertEquals $(@expr1073745875 "cppcheck-2.8/test/testio.cpp" $, 4803 $, "" $, errout@var100 .@expr4052 str (@expr4053 ) $) $) { $return ; }
4804:
4805:
4806: $check_ $(@expr1073745878 "cppcheck-2.8/test/testio.cpp" $, 4806 $, "void f(int i) {\n   printf(\"%f\", imaxabs(i));\n}\n" , false , true , Settings ::@expr1073745879 Unix64@expr1073745871 $)
4807:
4808: ;
4809: $if $(@expr1073745880 $!@expr1073745881 $assertEquals $(@expr1073745882 "cppcheck-2.8/test/testio.cpp" $, 4809 $, "[test.cpp:2]: (portability) %f in format string (no. 1) requires 'double' but the argument type is 'intmax_t {aka signed long}'.\n" $, errout@var100 .@expr4052 str (@expr4053 ) $) $) { $return ; }
4810: }
4811:
4812: void testPrintfTypeAlias1 ( ) {
4813: $check_ $(@expr1073745885 "cppcheck-2.8/test/testio.cpp" $, 4813 $, "using INT = int;\n\nusing PINT = INT *;\nusing PCINT = const PINT;\nINT i;\nPINT pi;\nPCINT pci;void foo() {\n    printf(\"%d %p %p\", i, pi, pci);\n};" $)
4814:
|
4820:
4821: ;
4822: $if $(@expr1073745886 $!@expr1073745887 $assertEquals $(@expr1073745888 "cppcheck-2.8/test/testio.cpp" $, 4822 $, "" $, errout@var100 .@expr4065 str (@expr4066 ) $) $) { $return ; }
4823:
4824: $check_ $(@expr1073745891 "cppcheck-2.8/test/testio.cpp" $, 4824 $, "using INT = int;\n\nusing PINT = INT *;\nusing PCINT = const PINT;\nINT i;\nPINT pi;\nPCINT pci;void foo() {\n    printf(\"%f %f %f\", i, pi, pci);\n};" $)
4825:
|
4831:
4832: ;
4833: $if $(@expr1073745892 $!@expr1073745893 $assertEquals $(@expr1073745894 "cppcheck-2.8/test/testio.cpp" $, 4833 $, "[test.cpp:8]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n[test.cpp:8]: (warning) %f in format string (no. 2) requires 'double' but the argument type is 'signed int *'.\n[test.cpp:8]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'const signed int *'.\n" $, errout@var100 .@expr4065 str (@expr4066 ) $) $) { $return
4834:
4835: ; }
4836: }
4837:
4838: void testPrintfAuto ( ) {
4839: $check_ $(@expr1073745897 "cppcheck-2.8/test/testio.cpp" $, 4839 $, "void f() {\n    auto s = sizeof(int);\n    printf(\"%zu\", s);\n    printf(\"%f\", s);\n}\n" , false , true $)
4840:
4841:
4842:
4843: ;
4844: $if $(@expr1073745898 $!@expr1073745899 $assertEquals $(@expr1073745900 "cppcheck-2.8/test/testio.cpp" $, 4844 $, "[test.cpp:4]: (portability) %f in format string (no. 1) requires 'double' but the argument type is 'size_t {aka unsigned long}'.\n" $, errout@var100 .@expr1073745901 str (@expr1073745902 ) $) $) { $return ; }
4845: }
4846:
4847: void testPrintfParenthesis ( ) {
4848: $check_ $(@expr1073745903 "cppcheck-2.8/test/testio.cpp" $, 4848 $, "void f(int a) {\n    printf(\"%f\", (a >> 24) & 0xff);\n}" $)
4849:
4850: ;
4851: $if $(@expr1073745904 $!@expr1073745905 $assertEquals $(@expr1073745906 "cppcheck-2.8/test/testio.cpp" $, 4851 $, "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" $, errout@var100 .@expr4083 str (@expr4084 ) $) $) { $return ; }
4852:
4853: $check_ $(@expr1073745909 "cppcheck-2.8/test/testio.cpp" $, 4853 $, "void f(int a) {\n    printf(\"%f\", 0xff & (a >> 24));\n}" $)
4854:
4855: ;
4856: $if $(@expr1073745910 $!@expr1073745911 $assertEquals $(@expr1073745912 "cppcheck-2.8/test/testio.cpp" $, 4856 $, "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" $, errout@var100 .@expr4083 str (@expr4084 ) $) $) { $return ; }
4857:
4858: $check_ $(@expr1073745915 "cppcheck-2.8/test/testio.cpp" $, 4858 $, "void f(int a) {\n    printf(\"%f\", ((a >> 24) + 1) & 0xff);\n}" $)
4859:
4860: ;
4861: $if $(@expr1073745916 $!@expr1073745917 $assertEquals $(@expr1073745918 "cppcheck-2.8/test/testio.cpp" $, 4861 $, "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" $, errout@var100 .@expr4083 str (@expr4084 ) $) $) { $return ; }
4862: }
4863:
4864: void testStdDistance ( ) {
4865: $check_ $(@expr1073745921 "cppcheck-2.8/test/testio.cpp" $, 4865 $, "void foo(const std::vector<int>& IO, const int* pio) {\nconst auto Idx = std::distance(&IO.front(), pio);\nprintf(\"Idx = %td\", Idx);\n}" , false , true $)
4866:
4867:
4868: ;
4869: $if $(@expr1073745922 $!@expr1073745923 $assertEquals $(@expr1073745924 "cppcheck-2.8/test/testio.cpp" $, 4869 $, "" $, errout@var100 .@expr1073745925 str (@expr1073745926 ) $) $) { $return ; }
4870: }
4871: } ;
4872:
4873: $namespace ${ TestIO instance_TestIO@var139 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@203}
  v {!<=-1,!>=2,0@203}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 33
  "TestIO" always "TestIO"
Line 39
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 40
  ( {lifetime[Object]=(exename),!0}
  "windows.cfg" always "windows.cfg"
  != always {!<=-1,!>=2}
  "windows.cfg" always "windows.cfg"
  false always 0
Line 41
  ( {lifetime[Object]=(exename),!0}
  "qt.cfg" always "qt.cfg"
  != always {!<=-1,!>=2}
  "qt.cfg" always "qt.cfg"
  false always 0
Line 43
  ( always {!<=-1,!>=2}
  "coutCerrMisusage" always "coutCerrMisusage"
  false always 0
  false always 0
Line 45
  ( always {!<=-1,!>=2}
  "wrongMode_simple" always "wrongMode_simple"
  false always 0
  false always 0
Line 46
  ( always {!<=-1,!>=2}
  "wrongMode_complex" always "wrongMode_complex"
  false always 0
  false always 0
Line 47
  ( always {!<=-1,!>=2}
  "useClosedFile" always "useClosedFile"
  false always 0
  false always 0
Line 48
  ( always {!<=-1,!>=2}
  "fileIOwithoutPositioning" always "fileIOwithoutPositioning"
  false always 0
  false always 0
Line 49
  ( always {!<=-1,!>=2}
  "seekOnAppendedFile" always "seekOnAppendedFile"
  false always 0
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "fflushOnInputStream" always "fflushOnInputStream"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "incompatibleFileOpen" always "incompatibleFileOpen"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "testScanf1" always "testScanf1"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "testScanf2" always "testScanf2"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "testScanf3" always "testScanf3"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "testScanf4" always "testScanf4"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "testScanf5" always "testScanf5"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "testScanfArgument" always "testScanfArgument"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "testPrintfArgument" always "testPrintfArgument"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "testPrintfArgumentVariables" always "testPrintfArgumentVariables"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "testPosixPrintfScanfParameterPosition" always "testPosixPrintfScanfParameterPosition"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "testMicrosoftPrintfArgument" always "testMicrosoftPrintfArgument"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "testMicrosoftScanfArgument" always "testMicrosoftScanfArgument"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "testMicrosoftCStringFormatArguments" always "testMicrosoftCStringFormatArguments"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "testMicrosoftSecurePrintfArgument" always "testMicrosoftSecurePrintfArgument"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "testMicrosoftSecureScanfArgument" always "testMicrosoftSecureScanfArgument"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "testQStringFormatArguments" always "testQStringFormatArguments"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "testTernary" always "testTernary"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "testUnsignedConst" always "testUnsignedConst"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "testAstType" always "testAstType"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "testPrintf0WithSuffix" always "testPrintf0WithSuffix"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "testReturnValueTypeStdLib" always "testReturnValueTypeStdLib"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "testPrintfTypeAlias1" always "testPrintfTypeAlias1"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "testPrintfAuto" always "testPrintfAuto"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "testPrintfParenthesis" always "testPrintfParenthesis"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "testStdDistance" always "testStdDistance"
  false always 0
  false always 0
Line 86
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 0
  portability always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 0
  onlyFormatStr always {!<=-1,!>=2}
  = always 0
  false always 0
Line 88
  "" always ""
Line 93
  portability {!<=-1,!>=2,1@1,0@17}
Line 95
  inconclusive {!<=-1,!>=2,0@17,1@52}
Line 99
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 100
  code inconclusive {"void foo(const std::vector<int>& IO, const int* pio) {\nconst auto Idx = std::distance(&IO.front(), pio);\nprintf(\"Idx = %td\", Idx);\n}"@1,"void f(int a) {\n    printf(\"%f\", (a >> 24) & 0xff);\n}"@2,"void f(int a) {\n    printf(\"%f\", 0xff & (a >> 24));\n}"@3,"void f(int a) {\n    printf(\"%f\", ((a >> 24) + 1) & 0xff);\n}"@4,"void f() {\n    auto s = sizeof(int);\n    printf(\"%zu\", s);\n    printf(\"%f\", s);\n}\n"@5,"using INT = int;\n\nusing PINT = INT *;\nusing PCINT = const PINT;\nINT i;\nPINT pi;\nPCINT pci;void foo() {\n    printf(\"%d %p %p\", i, pi, pci);\n};"@6,"using INT = int;\n\nusing PINT = INT *;\nusing PCINT = const PINT;\nINT i;\nPINT pi;\nPCINT pci;void foo() {\n    printf(\"%f %f %f\", i, pi, pci);\n};"@7,"void f() {\n   const char *s = \"0\";\n   printf(\"%ld%lld\", atol(s), atoll(s));\n}"@8,"void f(int i) {\n   printf(\"%f\", imaxabs(i));\n}\n"@9,"void foo() {\n    printf(\"%u %lu %llu\", 0U, 0UL, 0ULL);\n    printf(\"%u %lu %llu\", 0u, 0ul, 0ull);\n}"@10}
Line 101
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testio.cpp"@1,"cppcheck-2.8/test/testio.cpp"@2,"cppcheck-2.8/test/testio.cpp"@3,"cppcheck-2.8/test/testio.cpp"@4,"cppcheck-2.8/test/testio.cpp"@5,"cppcheck-2.8/test/testio.cpp"@6,"cppcheck-2.8/test/testio.cpp"@7,"cppcheck-2.8/test/testio.cpp"@8,"cppcheck-2.8/test/testio.cpp"@9,"cppcheck-2.8/test/testio.cpp"@10}
  line inconclusive {4865@1,4848@2,4853@3,4858@4,4839@5,4813@6,4824@7,4799@8,4806@9,4791@10}
  "test.cpp" always "test.cpp"
Line 104
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 106
  ! always {!<=-1,!>=2}
  onlyFormatStr always {!<=-1,!>=2}
Line 114
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  114 always 114
  "void foo() {\n  std::cout << std::cout;\n}" always "void foo() {\n  std::cout << std::cout;\n}"
Line 118
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  118 always 118
  "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cout'.\n" always "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cout'.\n"
Line 120
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  120 always 120
  "void foo() {\n  std::cout << (std::cout);\n}" always "void foo() {\n  std::cout << (std::cout);\n}"
Line 124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  124 always 124
  "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cout'.\n" always "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cout'.\n"
Line 126
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  126 always 126
  "void foo() {\n  std::cout << \"xyz\" << std::cout;\n}" always "void foo() {\n  std::cout << \"xyz\" << std::cout;\n}"
Line 130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  130 always 130
  "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cout'.\n" always "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cout'.\n"
Line 132
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  132 always 132
  "void foo(int i) {\n  std::cout << i << std::cerr;\n}" always "void foo(int i) {\n  std::cout << i << std::cerr;\n}"
Line 136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  136 always 136
  "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cerr'.\n" always "[test.cpp:2]: (error) Invalid usage of output stream: '<< std::cerr'.\n"
Line 138
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  138 always 138
  "void foo() {\n  std::cout << \"xyz\";\n  std::cout << \"xyz\";\n}" always "void foo() {\n  std::cout << \"xyz\";\n  std::cout << \"xyz\";\n}"
Line 143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  143 always 143
  "" always ""
Line 145
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  145 always 145
  "void foo() {\n  std::cout << std::cout.good();\n}" always "void foo() {\n  std::cout << std::cout.good();\n}"
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  149 always 149
  "" always ""
Line 151
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  151 always 151
  "void foo() {\n    unknownObject << std::cout;\n}" always "void foo() {\n    unknownObject << std::cout;\n}"
Line 155
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  155 always 155
  "" always ""
Line 157
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  157 always 157
  "void foo() {\n  MACRO(std::cout <<, << std::cout)\n}" always "void foo() {\n  MACRO(std::cout <<, << std::cout)\n}"
Line 161
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  161 always 161
  "" always ""
Line 168
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  168 always 168
  "void foo(FILE*& f) {\n    f = fopen(name, \"r\");\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = fopen(name, \"r\");\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}"
Line 174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  174 always 174
  "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n"
Line 176
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  176 always 176
  "void foo(FILE*& f) {\n    f = _wfopen(name, L\"r\");\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _wfopen(name, L\"r\");\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  182 always 182
  "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n"
Line 184
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  184 always 184
  "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  190 always 190
  "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n"
Line 192
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  192 always 192
  "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  198 always 198
  "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n"
Line 200
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  200 always 200
  "void foo(FILE*& f) {\n    _wfopen_s(&f, name, L\"r\");\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    _wfopen_s(&f, name, L\"r\");\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  206 always 206
  "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n"
Line 208
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  208 always 208
  "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  214 always 214
  "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n"
Line 216
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  216 always 216
  "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r\"));\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  222 always 222
  "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:5]: (error) Write operation on a file that was opened only for reading.\n"
Line 224
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  224 always 224
  "void foo(FILE*& f) {\n    f = fopen(name, \"r+\");\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = fopen(name, \"r+\");\n    fwrite(buffer, 5, 6, f);\n}"
Line 228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  228 always 228
  "" always ""
Line 230
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  230 always 230
  "void foo(FILE*& f) {\n    f = _wfopen(name, L\"r+\");\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _wfopen(name, L\"r+\");\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 234
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  234 always 234
  "" always ""
Line 236
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  236 always 236
  "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  240 always 240
  "" always ""
Line 242
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  242 always 242
  "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _tfopen(name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  246 always 246
  "" always ""
Line 248
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  248 always 248
  "void foo(FILE*& f) {\n    _wfopen_s(&f, name, L\"r+\");\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    _wfopen_s(&f, name, L\"r+\");\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  252 always 252
  "" always ""
Line 254
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  254 always 254
  "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  258 always 258
  "" always ""
Line 260
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  260 always 260
  "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    _tfopen_s(&f, name, _T(\"r+\"));\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 264
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  264 always 264
  "" always ""
Line 266
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  266 always 266
  "void foo(FILE*& f) {\n    f = tmpfile();\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = tmpfile();\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 270
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  270 always 270
  "" always ""
Line 273
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  273 always 273
  "void foo(FILE*& f) {\n    f = fopen(name, \"w\");\n    fwrite(buffer, 5, 6, f);\n    rewind(f);\n    fread(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = fopen(name, \"w\");\n    fwrite(buffer, 5, 6, f);\n    rewind(f);\n    fread(buffer, 5, 6, f);\n}"
Line 279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  279 always 279
  "[test.cpp:5]: (error) Read operation on a file that was opened only for writing.\n" always "[test.cpp:5]: (error) Read operation on a file that was opened only for writing.\n"
Line 281
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  281 always 281
  "void foo(FILE*& f) {\n    f = fopen(name, \"w+\");\n    fread(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = fopen(name, \"w+\");\n    fread(buffer, 5, 6, f);\n}"
Line 285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  285 always 285
  "" always ""
Line 287
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  287 always 287
  "void foo(FILE*& f) {\n    f = tmpfile();\n    fread(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = tmpfile();\n    fread(buffer, 5, 6, f);\n}"
Line 291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  291 always 291
  "" always ""
Line 294
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  294 always 294
  "void foo(FILE*& f) {\n    f = fopen(name, \"a\");\n    fwrite(buffer, 5, 6, f);\n    rewind(f);\n    fread(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = fopen(name, \"a\");\n    fwrite(buffer, 5, 6, f);\n    rewind(f);\n    fread(buffer, 5, 6, f);\n}"
Line 300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  300 always 300
  "[test.cpp:4]: (warning) Repositioning operation performed on a file opened in append mode has no effect.\n[test.cpp:5]: (error) Read operation on a file that was opened only for writing.\n" always "[test.cpp:4]: (warning) Repositioning operation performed on a file opened in append mode has no effect.\n[test.cpp:5]: (error) Read operation on a file that was opened only for writing.\n"
Line 303
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  303 always 303
  "void foo(FILE*& f) {\n    f = fopen(name, \"a+\");\n    fread(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = fopen(name, \"a+\");\n    fread(buffer, 5, 6, f);\n}"
Line 307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  307 always 307
  "" always ""
Line 310
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  310 always 310
  "void foo() {\n    FILE* f = fopen(name, \"r\");\n    fwrite(buffer, 5, 6, f);\n    fclose(f);\n}" always "void foo() {\n    FILE* f = fopen(name, \"r\");\n    fwrite(buffer, 5, 6, f);\n    fclose(f);\n}"
Line 315
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  315 always 315
  "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n"
Line 318
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  318 always 318
  "void foo(FILE*& f) {\n    f = fopen(name, \"a\");\n    fwrite(buffer, 5, 6, f);\n    bar(f);\n    fread(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = fopen(name, \"a\");\n    fwrite(buffer, 5, 6, f);\n    bar(f);\n    fread(buffer, 5, 6, f);\n}"
Line 324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  324 always 324
  "" always ""
Line 327
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  327 always 327
  "void foo(FILE*& f) {\n    f = freopen(name, \"r\", f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = freopen(name, \"r\", f);\n    fwrite(buffer, 5, 6, f);\n}"
Line 331
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  331 always 331
  "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n"
Line 333
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  333 always 333
  "void foo(FILE*& f) {\n    f = _wfreopen(name, L\"r\", f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _wfreopen(name, L\"r\", f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  337 always 337
  "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n"
Line 339
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  339 always 339
  "void foo(FILE*& f) {\n    f = _tfreopen(name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _tfreopen(name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 343
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  343 always 343
  "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n"
Line 345
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  345 always 345
  "void foo(FILE*& f) {\n    f = _tfreopen(name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _tfreopen(name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  349 always 349
  "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n"
Line 351
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  351 always 351
  "void foo(FILE*& f) {\n    f = _wfreopen_s(&f, name, L\"r\", f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _wfreopen_s(&f, name, L\"r\", f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  355 always 355
  "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n"
Line 357
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  357 always 357
  "void foo(FILE*& f) {\n    f = _tfreopen_s(&f, name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _tfreopen_s(&f, name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  361 always 361
  "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n"
Line 363
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  363 always 363
  "void foo(FILE*& f) {\n    f = _tfreopen_s(&f, name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = _tfreopen_s(&f, name, _T(\"r\"), f);\n    fwrite(buffer, 5, 6, f);\n}"
  false always 0
  false always 0
Line 367
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  367 always 367
  "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n" always "[test.cpp:3]: (error) Write operation on a file that was opened only for reading.\n"
Line 370
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  370 always 370
  "void foo(FILE*& f) {\n    f = fopen(name, mode);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = fopen(name, mode);\n    fwrite(buffer, 5, 6, f);\n}"
Line 374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  374 always 374
  "" always ""
Line 376
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  376 always 376
  "void fopen(std::string const &filepath, std::string const &mode);" always "void fopen(std::string const &filepath, std::string const &mode);"
Line 380
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  380 always 380
  "void foo(FILE* f) {\n    if(a) f = fopen(name, \"w\");\n    else  f = fopen(name, \"r\");\n    if(a) fwrite(buffer, 5, 6, f);\n    else  fread(buffer, 5, 6, f);\n}" always "void foo(FILE* f) {\n    if(a) f = fopen(name, \"w\");\n    else  f = fopen(name, \"r\");\n    if(a) fwrite(buffer, 5, 6, f);\n    else  fread(buffer, 5, 6, f);\n}"
Line 386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  386 always 386
  "" always ""
Line 388
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  388 always 388
  "void foo() {\n    FILE* f;\n    if(a) f = fopen(name, \"w\");\n    else  f = fopen(name, \"r\");\n    if(a) fwrite(buffer, 5, 6, f);\n    else  fread(buffer, 5, 6, f);\n}" always "void foo() {\n    FILE* f;\n    if(a) f = fopen(name, \"w\");\n    else  f = fopen(name, \"r\");\n    if(a) fwrite(buffer, 5, 6, f);\n    else  fread(buffer, 5, 6, f);\n}"
Line 395
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  395 always 395
  "" always ""
Line 397
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  397 always 397
  "void foo() {\n    FILE* f = fopen(name, \"w\");\n    if(a) fwrite(buffer, 5, 6, f);\n    else  fread(buffer, 5, 6, f);\n}" always "void foo() {\n    FILE* f = fopen(name, \"w\");\n    if(a) fwrite(buffer, 5, 6, f);\n    else  fread(buffer, 5, 6, f);\n}"
Line 402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  402 always 402
  "[test.cpp:4]: (error) Read operation on a file that was opened only for writing.\n" always "[test.cpp:4]: (error) Read operation on a file that was opened only for writing.\n"
Line 406
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  406 always 406
  "void foo(FILE*& f) {\n    fclose(f);\n    fwrite(buffer, 5, 6, f);\n    clearerr(f);\n    fread(buffer, 5, 6, f);\n    ungetc('a', f);\n    ungetwc(L'a', f);\n    rewind(f);\n}" always "void foo(FILE*& f) {\n    fclose(f);\n    fwrite(buffer, 5, 6, f);\n    clearerr(f);\n    fread(buffer, 5, 6, f);\n    ungetc('a', f);\n    ungetwc(L'a', f);\n    rewind(f);\n}"
Line 415
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  415 always 415
  "[test.cpp:3]: (error) Used file that is not opened.\n[test.cpp:4]: (error) Used file that is not opened.\n[test.cpp:5]: (error) Used file that is not opened.\n[test.cpp:6]: (error) Used file that is not opened.\n[test.cpp:7]: (error) Used file that is not opened.\n[test.cpp:8]: (error) Used file that is not opened.\n" always "[test.cpp:3]: (error) Used file that is not opened.\n[test.cpp:4]: (error) Used file that is not opened.\n[test.cpp:5]: (error) Used file that is not opened.\n[test.cpp:6]: (error) Used file that is not opened.\n[test.cpp:7]: (error) Used file that is not opened.\n[test.cpp:8]: (error) Used file that is not opened.\n"
Line 422
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  422 always 422
  "void foo(FILE*& f) {\n    if(!ferror(f)) {\n        fclose(f);\n        return;    }\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    if(!ferror(f)) {\n        fclose(f);\n        return;    }\n    fwrite(buffer, 5, 6, f);\n}"
Line 429
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  429 always 429
  "" always ""
Line 431
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  431 always 431
  "void foo(FILE*& f) {\n    fclose(f);\n    f = fopen(name, \"r\");\n    fread(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    fclose(f);\n    f = fopen(name, \"r\");\n    fread(buffer, 5, 6, f);\n}"
Line 436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  436 always 436
  "" always ""
Line 438
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  438 always 438
  "void foo(FILE*& f) {\n    f = fopen(name, \"r\");\n    f = g;\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE*& f) {\n    f = fopen(name, \"r\");\n    f = g;\n    fwrite(buffer, 5, 6, f);\n}"
Line 443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  443 always 443
  "" always ""
Line 445
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  445 always 445
  "void foo() {\n    FILE* f;\n    fwrite(buffer, 5, 6, f);\n}" always "void foo() {\n    FILE* f;\n    fwrite(buffer, 5, 6, f);\n}"
Line 449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  449 always 449
  "[test.cpp:3]: (error) Used file that is not opened.\n" always "[test.cpp:3]: (error) Used file that is not opened.\n"
Line 451
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  451 always 451
  "void foo() {\n    FILE* f(stdout);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo() {\n    FILE* f(stdout);\n    fwrite(buffer, 5, 6, f);\n}"
Line 455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  455 always 455
  "" always ""
Line 457
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  457 always 457
  "void foo() {\n    FILE* f[3];\n    f[0] = fopen(name, mode);\n    fclose(f[0]);\n}" always "void foo() {\n    FILE* f[3];\n    f[0] = fopen(name, mode);\n    fclose(f[0]);\n}"
Line 462
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  462 always 462
  "" always ""
Line 465
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  465 always 465
  "static FILE *fp = NULL;\n\nvoid close()\n{\n  fclose(fp);\n}\n\nvoid dump()\n{\n  if (fp == NULL) return;\n  fprintf(fp, \"Here's the output.\\n\");\n}\n\nint main()\n{\n  fp = fopen(\"test.txt\", \"w\");\n  dump();\n  close();\n  return 0;\n}" always "static FILE *fp = NULL;\n\nvoid close()\n{\n  fclose(fp);\n}\n\nvoid dump()\n{\n  if (fp == NULL) return;\n  fprintf(fp, \"Here's the output.\\n\");\n}\n\nint main()\n{\n  fp = fopen(\"test.txt\", \"w\");\n  dump();\n  close();\n  return 0;\n}"
Line 485
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  485 always 485
  "" always ""
Line 487
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  487 always 487
  "static FILE *fp = NULL;\n\nvoid close()\n{\n  fclose(fp);\n}\n\nvoid dump()\n{\n  fclose(fp);\n  fprintf(fp, \"Here's the output.\\n\");\n}" always "static FILE *fp = NULL;\n\nvoid close()\n{\n  fclose(fp);\n}\n\nvoid dump()\n{\n  fclose(fp);\n  fprintf(fp, \"Here's the output.\\n\");\n}"
Line 499
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  499 always 499
  "[test.cpp:11]: (error) Used file that is not opened.\n" always "[test.cpp:11]: (error) Used file that is not opened.\n"
Line 502
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  502 always 502
  "void chdcd_parse_nero(FILE *infile) {\n    switch (mode) {\n        case 0x0300:\n            fclose(infile);\n            return;\n        case 0x0500:\n            fclose(infile);\n            return;\n    }\n}" always "void chdcd_parse_nero(FILE *infile) {\n    switch (mode) {\n        case 0x0300:\n            fclose(infile);\n            return;\n        case 0x0500:\n            fclose(infile);\n            return;\n    }\n}"
Line 512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  512 always 512
  "" always ""
Line 514
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  514 always 514
  "void chdcd_parse_nero(FILE *infile) {\n    switch (mode) {\n        case 0x0300:\n            fclose(infile);\n            exit(0);\n        case 0x0500:\n            fclose(infile);\n            return;\n    }\n}" always "void chdcd_parse_nero(FILE *infile) {\n    switch (mode) {\n        case 0x0300:\n            fclose(infile);\n            exit(0);\n        case 0x0500:\n            fclose(infile);\n            return;\n    }\n}"
Line 524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  524 always 524
  "" always ""
Line 527
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  527 always 527
  "void foo() {\n    struct {FILE *f1; FILE *f2;} a;\n    a.f1 = fopen(name,mode);\n    a.f2 = fopen(name,mode);\n    fclose(a.f1);\n    fclose(a.f2);\n}" always "void foo() {\n    struct {FILE *f1; FILE *f2;} a;\n    a.f1 = fopen(name,mode);\n    a.f2 = fopen(name,mode);\n    fclose(a.f1);\n    fclose(a.f2);\n}"
Line 534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  534 always 534
  "" always ""
Line 537
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  537 always 537
  "void foo() {\n    FILE *a = fopen(\"aa\", \"r\");\n    while (fclose(a)) {}\n}" always "void foo() {\n    FILE *a = fopen(\"aa\", \"r\");\n    while (fclose(a)) {}\n}"
Line 541
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  541 always 541
  "[test.cpp:3]: (error) Used file that is not opened.\n" always "[test.cpp:3]: (error) Used file that is not opened.\n"
  "" always ""
Line 544
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  544 always 544
  "void foo() {\n    FILE f[2];\n    f[0] = fopen(\"1\", \"w\");\n    f[1] = fopen(\"2\", \"w\");\n    fclose(f[0]);\n    fclose(f[1]);\n}" always "void foo() {\n    FILE f[2];\n    f[0] = fopen(\"1\", \"w\");\n    f[1] = fopen(\"2\", \"w\");\n    fclose(f[0]);\n    fclose(f[1]);\n}"
Line 551
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  551 always 551
  "" always ""
Line 555
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  555 always 555
  "void foo(FILE* f) {\n    fwrite(buffer, 5, 6, f);\n    fread(buffer, 5, 6, f);\n}" always "void foo(FILE* f) {\n    fwrite(buffer, 5, 6, f);\n    fread(buffer, 5, 6, f);\n}"
Line 559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  559 always 559
  "[test.cpp:3]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" always "[test.cpp:3]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n"
Line 561
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  561 always 561
  "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fwrite(buffer, 5, 6, f);\n}"
Line 565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  565 always 565
  "[test.cpp:3]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" always "[test.cpp:3]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n"
Line 567
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  567 always 567
  "void foo(FILE* f, bool read) {\n    if(read)\n        fread(buffer, 5, 6, f);\n    else\n        fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE* f, bool read) {\n    if(read)\n        fread(buffer, 5, 6, f);\n    else\n        fwrite(buffer, 5, 6, f);\n}"
Line 573
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  573 always 573
  "" always ""
Line 575
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  575 always 575
  "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fflush(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fflush(f);\n    fwrite(buffer, 5, 6, f);\n}"
Line 580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  580 always 580
  "" always ""
Line 582
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  582 always 582
  "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    rewind(f);\n    fwrite(buffer, 5, 6, f);\n}"
Line 587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  587 always 587
  "" always ""
Line 589
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  589 always 589
  "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fsetpos(f, pos);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fsetpos(f, pos);\n    fwrite(buffer, 5, 6, f);\n}"
Line 594
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  594 always 594
  "" always ""
Line 596
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  596 always 596
  "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fseek(f, 0, SEEK_SET);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    fseek(f, 0, SEEK_SET);\n    fwrite(buffer, 5, 6, f);\n}"
Line 601
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  601 always 601
  "" always ""
Line 603
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  603 always 603
  "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    long pos = ftell(f);\n    fwrite(buffer, 5, 6, f);\n}" always "void foo(FILE* f) {\n    fread(buffer, 5, 6, f);\n    long pos = ftell(f);\n    fwrite(buffer, 5, 6, f);\n}"
Line 608
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  608 always 608
  "[test.cpp:4]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" always "[test.cpp:4]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n"
Line 611
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  611 always 611
  "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    void seek(long offset, Position p);\n    FileStreamPrivate *d;\n};\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(aboutToOverwrite.data(), 1, bufferLength, d->file);\n    seek(writePosition);\n    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);\n}" always "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    void seek(long offset, Position p);\n    FileStreamPrivate *d;\n};\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(aboutToOverwrite.data(), 1, bufferLength, d->file);\n    seek(writePosition);\n    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);\n}"
Line 621
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  621 always 621
  "" always ""
Line 623
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  623 always 623
  "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    FileStreamPrivate *d;\n};\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(aboutToOverwrite.data(), 1, bufferLength, d->file);\n    unknown(writePosition);\n    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);\n}" always "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    FileStreamPrivate *d;\n};\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(aboutToOverwrite.data(), 1, bufferLength, d->file);\n    unknown(writePosition);\n    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);\n}"
Line 632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  632 always 632
  "" always ""
Line 634
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  634 always 634
  "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    FileStreamPrivate *d;\n};\nvoid known(int);\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(aboutToOverwrite.data(), 1, bufferLength, d->file);\n    known(writePosition);\n    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);\n}" always "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    FileStreamPrivate *d;\n};\nvoid known(int);\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(aboutToOverwrite.data(), 1, bufferLength, d->file);\n    known(writePosition);\n    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);\n}"
Line 644
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  644 always 644
  "[test.cpp:9]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" always "[test.cpp:9]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n"
Line 646
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  646 always 646
  "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    FileStreamPrivate *d;\n};\nvoid known(int);\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(X::data(), 1, bufferLength, d->file);\n    known(writePosition);\n    fwrite(X::data(), sizeof(char), buffer.size(), d->file);\n}" always "class FileStream {\n    void insert(const ByteVector &data, ulong start);\n    FileStreamPrivate *d;\n};\nvoid known(int);\nvoid FileStream::insert(const ByteVector &data, ulong start) {\n    int bytesRead = fread(X::data(), 1, bufferLength, d->file);\n    known(writePosition);\n    fwrite(X::data(), sizeof(char), buffer.size(), d->file);\n}"
Line 656
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  656 always 656
  "[test.cpp:9]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n" always "[test.cpp:9]: (error) Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.\n"
Line 660
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  660 always 660
  "void foo() {\n    FILE* f = fopen(\"\", \"a+\");\n    fseek(f, 0, SEEK_SET);\n}" always "void foo() {\n    FILE* f = fopen(\"\", \"a+\");\n    fseek(f, 0, SEEK_SET);\n}"
Line 664
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  664 always 664
  "" always ""
Line 666
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  666 always 666
  "void foo() {\n    FILE* f = fopen(\"\", \"w\");\n    fseek(f, 0, SEEK_SET);\n}" always "void foo() {\n    FILE* f = fopen(\"\", \"w\");\n    fseek(f, 0, SEEK_SET);\n}"
Line 670
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  670 always 670
  "" always ""
Line 672
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  672 always 672
  "void foo() {\n    FILE* f = fopen(\"\", \"a\");\n    fseek(f, 0, SEEK_SET);\n}" always "void foo() {\n    FILE* f = fopen(\"\", \"a\");\n    fseek(f, 0, SEEK_SET);\n}"
Line 676
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  676 always 676
  "[test.cpp:3]: (warning) Repositioning operation performed on a file opened in append mode has no effect.\n" always "[test.cpp:3]: (warning) Repositioning operation performed on a file opened in append mode has no effect.\n"
Line 678
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  678 always 678
  "void foo() {\n    FILE* f = fopen(\"\", \"a\");\n    fflush(f);\n}" always "void foo() {\n    FILE* f = fopen(\"\", \"a\");\n    fflush(f);\n}"
Line 682
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  682 always 682
  "" always ""
Line 684
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  684 always 684
  "void foo() {\n    FILE* f = fopen(\"\", \"a\");\n    fclose(f);\n    f = fopen(\"\", \"r\");\n    fseek(f, 0, SEEK_SET);\n}" always "void foo() {\n    FILE* f = fopen(\"\", \"a\");\n    fclose(f);\n    f = fopen(\"\", \"r\");\n    fseek(f, 0, SEEK_SET);\n}"
Line 690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  690 always 690
  "" always ""
Line 694
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  694 always 694
  "void foo()\n{\n    fflush(stdin);\n}" always "void foo()\n{\n    fflush(stdin);\n}"
  false always 0
  true always 1
Line 698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  698 always 698
  "[test.cpp:3]: (portability) fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems.\n" always "[test.cpp:3]: (portability) fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems.\n"
Line 700
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  700 always 700
  "void foo()\n{\n    fflush(stdout);\n}" always "void foo()\n{\n    fflush(stdout);\n}"
  false always 0
  true always 1
Line 704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  704 always 704
  "" always ""
Line 706
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  706 always 706
  "void foo(FILE*& f) {\n    f = fopen(path, \"r\");\n    fflush(f);\n}" always "void foo(FILE*& f) {\n    f = fopen(path, \"r\");\n    fflush(f);\n}"
  false always 0
  true always 1
Line 710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  710 always 710
  "[test.cpp:3]: (portability) fflush() called on input stream 'f' may result in undefined behaviour on non-linux systems.\n" always "[test.cpp:3]: (portability) fflush() called on input stream 'f' may result in undefined behaviour on non-linux systems.\n"
Line 712
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  712 always 712
  "void foo(FILE*& f) {\n    f = fopen(path, \"w\");\n    fflush(f);\n}" always "void foo(FILE*& f) {\n    f = fopen(path, \"w\");\n    fflush(f);\n}"
  false always 0
  true always 1
Line 716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  716 always 716
  "" always ""
Line 718
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  718 always 718
  "void foo(FILE*& f) {\n    fflush(f);\n}" always "void foo(FILE*& f) {\n    fflush(f);\n}"
  false always 0
  true always 1
Line 721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  721 always 721
  "" always ""
Line 725
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  725 always 725
  "void foo() {\n    FILE *f1 = fopen(\"tmp\", \"wt\");\n    FILE *f2 = fopen(\"tmp\", \"rt\");\n}" always "void foo() {\n    FILE *f1 = fopen(\"tmp\", \"wt\");\n    FILE *f2 = fopen(\"tmp\", \"rt\");\n}"
Line 729
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  729 always 729
  "[test.cpp:3]: (warning) The file '\"tmp\"' is opened for read and write access at the same time on different streams\n" always "[test.cpp:3]: (warning) The file '\"tmp\"' is opened for read and write access at the same time on different streams\n"
Line 734
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  734 always 734
  "void foo() {\n    int a, b;\n    FILE *file = fopen(\"test\", \"r\");\n    a = fscanf(file, \"aa %s\", bar);\n    b = scanf(\"aa %S\", bar);\n    b = scanf(\"aa %ls\", bar);\n    sscanf(foo, \"%[^~]\", bar);\n    scanf(\"%dx%s\", &b, bar);\n    fclose(file);\n}" always "void foo() {\n    int a, b;\n    FILE *file = fopen(\"test\", \"r\");\n    a = fscanf(file, \"aa %s\", bar);\n    b = scanf(\"aa %S\", bar);\n    b = scanf(\"aa %ls\", bar);\n    sscanf(foo, \"%[^~]\", bar);\n    scanf(\"%dx%s\", &b, bar);\n    fclose(file);\n}"
Line 744
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  744 always 744
  "[test.cpp:4]: (warning) fscanf() without field width limits can crash with huge input data.\n[test.cpp:5]: (warning) scanf() without field width limits can crash with huge input data.\n[test.cpp:6]: (warning) scanf() without field width limits can crash with huge input data.\n[test.cpp:7]: (warning) sscanf() without field width limits can crash with huge input data.\n[test.cpp:8]: (warning) scanf() without field width limits can crash with huge input data.\n" always "[test.cpp:4]: (warning) fscanf() without field width limits can crash with huge input data.\n[test.cpp:5]: (warning) scanf() without field width limits can crash with huge input data.\n[test.cpp:6]: (warning) scanf() without field width limits can crash with huge input data.\n[test.cpp:7]: (warning) sscanf() without field width limits can crash with huge input data.\n[test.cpp:8]: (warning) scanf() without field width limits can crash with huge input data.\n"
Line 752
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  752 always 752
  "void foo() {\n    scanf(\"%5s\", bar);\n    scanf(\"%5[^~]\", bar);\n    scanf(\"aa%%s\", bar);\n    scanf(\"aa%d\", &a);\n    scanf(\"aa%ld\", &a);\n    scanf(\"%*[^~]\");\n}" always "void foo() {\n    scanf(\"%5s\", bar);\n    scanf(\"%5[^~]\", bar);\n    scanf(\"aa%%s\", bar);\n    scanf(\"aa%d\", &a);\n    scanf(\"aa%ld\", &a);\n    scanf(\"%*[^~]\");\n}"
Line 760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  760 always 760
  "[test.cpp:4]: (warning) scanf format string requires 0 parameters but 1 is given.\n" always "[test.cpp:4]: (warning) scanf format string requires 0 parameters but 1 is given.\n"
Line 764
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  764 always 764
  "void f() {\n  char str[8];\n  scanf(\"%7c\", str);\n  scanf(\"%8c\", str);\n  scanf(\"%9c\", str);\n}" always "void f() {\n  char str[8];\n  scanf(\"%7c\", str);\n  scanf(\"%8c\", str);\n  scanf(\"%9c\", str);\n}"
Line 770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  770 always 770
  "[test.cpp:5]: (error) Width 9 given in format string (no. 1) is larger than destination buffer 'str[8]', use %8c to prevent overflowing it.\n" always "[test.cpp:5]: (error) Width 9 given in format string (no. 1) is larger than destination buffer 'str[8]', use %8c to prevent overflowing it.\n"
Line 774
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  774 always 774
  "void f()\n{\n  char str [8];\n  scanf (\"%70s\",str);\n}" always "void f()\n{\n  char str [8];\n  scanf (\"%70s\",str);\n}"
Line 779
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  779 always 779
  "[test.cpp:4]: (error) Width 70 given in format string (no. 1) is larger than destination buffer 'str[8]', use %7s to prevent overflowing it.\n" always "[test.cpp:4]: (error) Width 70 given in format string (no. 1) is larger than destination buffer 'str[8]', use %7s to prevent overflowing it.\n"
Line 783
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  783 always 783
  "char s1[42], s2[42];\nvoid test() {\n    scanf(\"%42s%42[a-z]\", s1, s2);\n}" always "char s1[42], s2[42];\nvoid test() {\n    scanf(\"%42s%42[a-z]\", s1, s2);\n}"
Line 787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  787 always 787
  "[test.cpp:3]: (error) Width 42 given in format string (no. 1) is larger than destination buffer 's1[42]', use %41s to prevent overflowing it.\n[test.cpp:3]: (error) Width 42 given in format string (no. 2) is larger than destination buffer 's2[42]', use %41[a-z] to prevent overflowing it.\n" always "[test.cpp:3]: (error) Width 42 given in format string (no. 1) is larger than destination buffer 's1[42]', use %41s to prevent overflowing it.\n[test.cpp:3]: (error) Width 42 given in format string (no. 2) is larger than destination buffer 's2[42]', use %41[a-z] to prevent overflowing it.\n"
Line 810
  , always !<=-1
  linenr always !<=-1
Line 811
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  811 always 811
  code possible {"void f(bool x){printf(\"%u\", x);}"@76,"void f(unsigned char x){printf(\"%u\", x);}"@79,"void f(unsigned short x){printf(\"%u\", x);}"@81,"void f(unsigned int x){printf(\"%u\", x);}"@83,"void f(bool x){printf(\"%x\", x);}"@107,"void f(unsigned char x){printf(\"%x\", x);}"@108,"void f(unsigned short x){printf(\"%x\", x);}"@109,"void f(unsigned int x){printf(\"%x\", x);}"@110,"void f(unsigned long x){printf(\"%lu\", x);}"@143,"void f(unsigned long x){printf(\"%lx\", x);}"@173}
  true always 1
  false always 0
  true always 1
Line 812
  filename possible {"cppcheck-2.8/test/testio.cpp"@76,"cppcheck-2.8/test/testio.cpp"@79,"cppcheck-2.8/test/testio.cpp"@81,"cppcheck-2.8/test/testio.cpp"@83,"cppcheck-2.8/test/testio.cpp"@107,"cppcheck-2.8/test/testio.cpp"@108,"cppcheck-2.8/test/testio.cpp"@109,"cppcheck-2.8/test/testio.cpp"@110,"cppcheck-2.8/test/testio.cpp"@143,"cppcheck-2.8/test/testio.cpp"@173}
  linenr {!<=-1,3312@76,3315@79,3317@81,3319@83,3344@107,3347@108,3349@109,3351@110,3385@143}
Line 813
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  813 always 813
  code inconclusive {"void f(bool x){printf(\"%u\", x);}"@76,"void f(unsigned char x){printf(\"%u\", x);}"@79,"void f(unsigned short x){printf(\"%u\", x);}"@81,"void f(unsigned int x){printf(\"%u\", x);}"@83,"void f(bool x){printf(\"%x\", x);}"@107,"void f(unsigned char x){printf(\"%x\", x);}"@108,"void f(unsigned short x){printf(\"%x\", x);}"@109,"void f(unsigned int x){printf(\"%x\", x);}"@110,"void f(unsigned long x){printf(\"%lu\", x);}"@143,"void f(unsigned long x){printf(\"%lx\", x);}"@173}
  true always 1
  false always 0
  true always 1
Line 814
  filename inconclusive {"cppcheck-2.8/test/testio.cpp"@76,"cppcheck-2.8/test/testio.cpp"@79,"cppcheck-2.8/test/testio.cpp"@81,"cppcheck-2.8/test/testio.cpp"@83,"cppcheck-2.8/test/testio.cpp"@107,"cppcheck-2.8/test/testio.cpp"@108,"cppcheck-2.8/test/testio.cpp"@109,"cppcheck-2.8/test/testio.cpp"@110,"cppcheck-2.8/test/testio.cpp"@143,"cppcheck-2.8/test/testio.cpp"@173}
  linenr {!<=-1,3312@76,3315@79,3317@81,3319@83,3344@107,3347@108,3349@109,3351@110,3385@143}
Line 815
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  815 always 815
  code inconclusive {"void f(bool x){printf(\"%u\", x);}"@76,"void f(unsigned char x){printf(\"%u\", x);}"@79,"void f(unsigned short x){printf(\"%u\", x);}"@81,"void f(unsigned int x){printf(\"%u\", x);}"@83,"void f(bool x){printf(\"%x\", x);}"@107,"void f(unsigned char x){printf(\"%x\", x);}"@108,"void f(unsigned short x){printf(\"%x\", x);}"@109,"void f(unsigned int x){printf(\"%x\", x);}"@110,"void f(unsigned long x){printf(\"%lu\", x);}"@143,"void f(unsigned long x){printf(\"%lx\", x);}"@173}
  true always 1
  false always 0
  true always 1
Line 816
  filename inconclusive {"cppcheck-2.8/test/testio.cpp"@76,"cppcheck-2.8/test/testio.cpp"@79,"cppcheck-2.8/test/testio.cpp"@81,"cppcheck-2.8/test/testio.cpp"@83,"cppcheck-2.8/test/testio.cpp"@107,"cppcheck-2.8/test/testio.cpp"@108,"cppcheck-2.8/test/testio.cpp"@109,"cppcheck-2.8/test/testio.cpp"@110,"cppcheck-2.8/test/testio.cpp"@143,"cppcheck-2.8/test/testio.cpp"@173}
  linenr {!<=-1,3312@76,3315@79,3317@81,3319@83,3344@107,3347@108,3349@109,3351@110,3385@143}
Line 817
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  817 always 817
  code inconclusive {"void f(bool x){printf(\"%u\", x);}"@76,"void f(unsigned char x){printf(\"%u\", x);}"@79,"void f(unsigned short x){printf(\"%u\", x);}"@81,"void f(unsigned int x){printf(\"%u\", x);}"@83,"void f(bool x){printf(\"%x\", x);}"@107,"void f(unsigned char x){printf(\"%x\", x);}"@108,"void f(unsigned short x){printf(\"%x\", x);}"@109,"void f(unsigned int x){printf(\"%x\", x);}"@110,"void f(unsigned long x){printf(\"%lu\", x);}"@143,"void f(unsigned long x){printf(\"%lx\", x);}"@173}
  true always 1
  false always 0
  true always 1
Line 818
  filename inconclusive {"cppcheck-2.8/test/testio.cpp"@76,"cppcheck-2.8/test/testio.cpp"@79,"cppcheck-2.8/test/testio.cpp"@81,"cppcheck-2.8/test/testio.cpp"@83,"cppcheck-2.8/test/testio.cpp"@107,"cppcheck-2.8/test/testio.cpp"@108,"cppcheck-2.8/test/testio.cpp"@109,"cppcheck-2.8/test/testio.cpp"@110,"cppcheck-2.8/test/testio.cpp"@143,"cppcheck-2.8/test/testio.cpp"@173}
  linenr {!<=-1,3312@76,3315@79,3317@81,3319@83,3344@107,3347@108,3349@109,3351@110,3385@143}
Line 821
  , always !<=-1
  linenr always !<=-1
Line 823
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  823 always 823
  code possible {"void f(char x){printf(\"%u\", x);}"@77,"void f(signed char x){printf(\"%u\", x);}"@78,"void f(signed short x){printf(\"%u\", x);}"@80,"void f(signed int x){printf(\"%u\", x);}"@82,"void f(signed long x){printf(\"%u\", x);}"@84,"void f(unsigned long x){printf(\"%u\", x);}"@85,"void f(signed long long x){printf(\"%u\", x);}"@86,"void f(unsigned long long x){printf(\"%u\", x);}"@87,"void f(float x){printf(\"%u\", x);}"@88,"void f(double x){printf(\"%u\", x);}"@89}
  true always 1
  false always 0
  true always 1
Line 824
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@77,"cppcheck-2.8/test/testio.cpp"@78,"cppcheck-2.8/test/testio.cpp"@80,"cppcheck-2.8/test/testio.cpp"@82,"cppcheck-2.8/test/testio.cpp"@84,"cppcheck-2.8/test/testio.cpp"@85,"cppcheck-2.8/test/testio.cpp"@86,"cppcheck-2.8/test/testio.cpp"@87,"cppcheck-2.8/test/testio.cpp"@88,"cppcheck-2.8/test/testio.cpp"@89}
  linenr {!<=-1,3313@77,3314@78,3316@80,3318@82,3320@84,3321@85,3322@86,3323@87,3324@88}
  testScanfErrString possible {"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char'.\n"@77,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed char'.\n"@78,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed short'.\n"@80,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n"@82,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n"@84,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n"@85,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n"@86,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n"@87,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n"@88,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n"@89}
Line 825
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  825 always 825
  code possible {"void f(char x){printf(\"%u\", x);}"@77,"void f(signed char x){printf(\"%u\", x);}"@78,"void f(signed short x){printf(\"%u\", x);}"@80,"void f(signed int x){printf(\"%u\", x);}"@82,"void f(signed long x){printf(\"%u\", x);}"@84,"void f(unsigned long x){printf(\"%u\", x);}"@85,"void f(signed long long x){printf(\"%u\", x);}"@86,"void f(unsigned long long x){printf(\"%u\", x);}"@87,"void f(float x){printf(\"%u\", x);}"@88,"void f(double x){printf(\"%u\", x);}"@89}
  true always 1
  false always 0
  true always 1
Line 826
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@77,"cppcheck-2.8/test/testio.cpp"@78,"cppcheck-2.8/test/testio.cpp"@80,"cppcheck-2.8/test/testio.cpp"@82,"cppcheck-2.8/test/testio.cpp"@84,"cppcheck-2.8/test/testio.cpp"@85,"cppcheck-2.8/test/testio.cpp"@86,"cppcheck-2.8/test/testio.cpp"@87,"cppcheck-2.8/test/testio.cpp"@88,"cppcheck-2.8/test/testio.cpp"@89}
  linenr {!<=-1,3313@77,3314@78,3316@80,3318@82,3320@84,3321@85,3322@86,3323@87,3324@88}
  testScanfErrString possible {"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char'.\n"@77,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed char'.\n"@78,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed short'.\n"@80,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n"@82,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n"@84,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n"@85,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n"@86,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n"@87,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n"@88,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n"@89}
Line 827
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  827 always 827
  code possible {"void f(char x){printf(\"%u\", x);}"@77,"void f(signed char x){printf(\"%u\", x);}"@78,"void f(signed short x){printf(\"%u\", x);}"@80,"void f(signed int x){printf(\"%u\", x);}"@82,"void f(signed long x){printf(\"%u\", x);}"@84,"void f(unsigned long x){printf(\"%u\", x);}"@85,"void f(signed long long x){printf(\"%u\", x);}"@86,"void f(unsigned long long x){printf(\"%u\", x);}"@87,"void f(float x){printf(\"%u\", x);}"@88,"void f(double x){printf(\"%u\", x);}"@89}
  true always 1
  false always 0
  true always 1
Line 828
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@77,"cppcheck-2.8/test/testio.cpp"@78,"cppcheck-2.8/test/testio.cpp"@80,"cppcheck-2.8/test/testio.cpp"@82,"cppcheck-2.8/test/testio.cpp"@84,"cppcheck-2.8/test/testio.cpp"@85,"cppcheck-2.8/test/testio.cpp"@86,"cppcheck-2.8/test/testio.cpp"@87,"cppcheck-2.8/test/testio.cpp"@88,"cppcheck-2.8/test/testio.cpp"@89}
  linenr {!<=-1,3313@77,3314@78,3316@80,3318@82,3320@84,3321@85,3322@86,3323@87,3324@88}
  testScanfErrString possible {"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char'.\n"@77,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed char'.\n"@78,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed short'.\n"@80,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n"@82,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n"@84,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n"@85,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n"@86,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n"@87,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n"@88,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n"@89}
Line 829
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  829 always 829
  code possible {"void f(char x){printf(\"%u\", x);}"@77,"void f(signed char x){printf(\"%u\", x);}"@78,"void f(signed short x){printf(\"%u\", x);}"@80,"void f(signed int x){printf(\"%u\", x);}"@82,"void f(signed long x){printf(\"%u\", x);}"@84,"void f(unsigned long x){printf(\"%u\", x);}"@85,"void f(signed long long x){printf(\"%u\", x);}"@86,"void f(unsigned long long x){printf(\"%u\", x);}"@87,"void f(float x){printf(\"%u\", x);}"@88,"void f(double x){printf(\"%u\", x);}"@89}
  true always 1
  false always 0
  true always 1
Line 830
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@77,"cppcheck-2.8/test/testio.cpp"@78,"cppcheck-2.8/test/testio.cpp"@80,"cppcheck-2.8/test/testio.cpp"@82,"cppcheck-2.8/test/testio.cpp"@84,"cppcheck-2.8/test/testio.cpp"@85,"cppcheck-2.8/test/testio.cpp"@86,"cppcheck-2.8/test/testio.cpp"@87,"cppcheck-2.8/test/testio.cpp"@88,"cppcheck-2.8/test/testio.cpp"@89}
  linenr {!<=-1,3313@77,3314@78,3316@80,3318@82,3320@84,3321@85,3322@86,3323@87,3324@88}
  testScanfErrString possible {"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char'.\n"@77,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed char'.\n"@78,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed short'.\n"@80,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n"@82,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n"@84,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n"@85,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n"@86,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n"@87,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n"@88,"[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n"@89}
Line 833
  , always !<=-1
  linenr always !<=-1
Line 835
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  835 always 835
  code possible {"void f(size_t x){printf(\"%u\", x);}"@92,"void f(ssize_t x){printf(\"%u\", x);}"@93,"void f(ptrdiff_t x){printf(\"%u\", x);}"@94,"void f(unsigned ptrdiff_t x){printf(\"%u\", x);}"@95,"void f(intmax_t x){printf(\"%u\", x);}"@96,"void f(uintmax_t x){printf(\"%u\", x);}"@97,"void f(intptr_t x){printf(\"%u\", x);}"@98,"void f(uintptr_t x){printf(\"%u\", x);}"@99,"void f(std::size_t x){printf(\"%u\", x);}"@100,"void f(std::ssize_t x){printf(\"%u\", x);}"@101}
  true always 1
  true always 1
  true always 1
Line 836
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@92,"cppcheck-2.8/test/testio.cpp"@93,"cppcheck-2.8/test/testio.cpp"@94,"cppcheck-2.8/test/testio.cpp"@95,"cppcheck-2.8/test/testio.cpp"@96,"cppcheck-2.8/test/testio.cpp"@97,"cppcheck-2.8/test/testio.cpp"@98,"cppcheck-2.8/test/testio.cpp"@99,"cppcheck-2.8/test/testio.cpp"@100,"cppcheck-2.8/test/testio.cpp"@101}
  linenr {!<=-1,3328@92,3329@93,3330@94,3331@95,3332@96,3333@97,3334@98,3335@99,3336@100}
  testScanfErrAkaString possible {"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n"@92,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long}'.\n"@93,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long}'.\n"@94,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"@95,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long}'.\n"@96,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long}'.\n"@97,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long}'.\n"@98,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long}'.\n"@99,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n"@100,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long}'.\n"@101}
Line 837
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  837 always 837
  code possible {"void f(size_t x){printf(\"%u\", x);}"@92,"void f(ssize_t x){printf(\"%u\", x);}"@93,"void f(ptrdiff_t x){printf(\"%u\", x);}"@94,"void f(unsigned ptrdiff_t x){printf(\"%u\", x);}"@95,"void f(intmax_t x){printf(\"%u\", x);}"@96,"void f(uintmax_t x){printf(\"%u\", x);}"@97,"void f(intptr_t x){printf(\"%u\", x);}"@98,"void f(uintptr_t x){printf(\"%u\", x);}"@99,"void f(std::size_t x){printf(\"%u\", x);}"@100,"void f(std::ssize_t x){printf(\"%u\", x);}"@101}
  true always 1
  true always 1
  true always 1
Line 838
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@92,"cppcheck-2.8/test/testio.cpp"@93,"cppcheck-2.8/test/testio.cpp"@94,"cppcheck-2.8/test/testio.cpp"@95,"cppcheck-2.8/test/testio.cpp"@96,"cppcheck-2.8/test/testio.cpp"@97,"cppcheck-2.8/test/testio.cpp"@98,"cppcheck-2.8/test/testio.cpp"@99,"cppcheck-2.8/test/testio.cpp"@100,"cppcheck-2.8/test/testio.cpp"@101}
  linenr {!<=-1,3328@92,3329@93,3330@94,3331@95,3332@96,3333@97,3334@98,3335@99,3336@100}
  testScanfErrAkaString possible {"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n"@92,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long}'.\n"@93,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long}'.\n"@94,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"@95,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long}'.\n"@96,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long}'.\n"@97,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long}'.\n"@98,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long}'.\n"@99,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n"@100,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long}'.\n"@101}
Line 839
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  839 always 839
  code possible {"void f(size_t x){printf(\"%u\", x);}"@92,"void f(ssize_t x){printf(\"%u\", x);}"@93,"void f(ptrdiff_t x){printf(\"%u\", x);}"@94,"void f(unsigned ptrdiff_t x){printf(\"%u\", x);}"@95,"void f(intmax_t x){printf(\"%u\", x);}"@96,"void f(uintmax_t x){printf(\"%u\", x);}"@97,"void f(intptr_t x){printf(\"%u\", x);}"@98,"void f(uintptr_t x){printf(\"%u\", x);}"@99,"void f(std::size_t x){printf(\"%u\", x);}"@100,"void f(std::ssize_t x){printf(\"%u\", x);}"@101}
  true always 1
  true always 1
  true always 1
Line 840
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@92,"cppcheck-2.8/test/testio.cpp"@93,"cppcheck-2.8/test/testio.cpp"@94,"cppcheck-2.8/test/testio.cpp"@95,"cppcheck-2.8/test/testio.cpp"@96,"cppcheck-2.8/test/testio.cpp"@97,"cppcheck-2.8/test/testio.cpp"@98,"cppcheck-2.8/test/testio.cpp"@99,"cppcheck-2.8/test/testio.cpp"@100,"cppcheck-2.8/test/testio.cpp"@101}
  linenr {!<=-1,3328@92,3329@93,3330@94,3331@95,3332@96,3333@97,3334@98,3335@99,3336@100}
  testScanfErrAkaString possible {"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n"@92,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long}'.\n"@93,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long}'.\n"@94,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"@95,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long}'.\n"@96,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long}'.\n"@97,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long}'.\n"@98,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long}'.\n"@99,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n"@100,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long}'.\n"@101}
Line 841
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  841 always 841
  code possible {"void f(size_t x){printf(\"%u\", x);}"@92,"void f(ssize_t x){printf(\"%u\", x);}"@93,"void f(ptrdiff_t x){printf(\"%u\", x);}"@94,"void f(unsigned ptrdiff_t x){printf(\"%u\", x);}"@95,"void f(intmax_t x){printf(\"%u\", x);}"@96,"void f(uintmax_t x){printf(\"%u\", x);}"@97,"void f(intptr_t x){printf(\"%u\", x);}"@98,"void f(uintptr_t x){printf(\"%u\", x);}"@99,"void f(std::size_t x){printf(\"%u\", x);}"@100,"void f(std::ssize_t x){printf(\"%u\", x);}"@101}
  true always 1
  true always 1
  true always 1
Line 842
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@92,"cppcheck-2.8/test/testio.cpp"@93,"cppcheck-2.8/test/testio.cpp"@94,"cppcheck-2.8/test/testio.cpp"@95,"cppcheck-2.8/test/testio.cpp"@96,"cppcheck-2.8/test/testio.cpp"@97,"cppcheck-2.8/test/testio.cpp"@98,"cppcheck-2.8/test/testio.cpp"@99,"cppcheck-2.8/test/testio.cpp"@100,"cppcheck-2.8/test/testio.cpp"@101}
  linenr {!<=-1,3328@92,3329@93,3330@94,3331@95,3332@96,3333@97,3334@98,3335@99,3336@100}
  testScanfErrAkaWin64String possible {"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long long}'.\n"@92,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long long}'.\n"@93,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"@94,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"@95,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long long}'.\n"@96,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"@97,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long long}'.\n"@98,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"@99,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long long}'.\n"@100,"[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long long}'.\n"@101}
Line 845
  , always !<=-1
  linenr always !<=-1
Line 847
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  847 always 847
  code possible {"void f(unsigned ptrdiff_t x){printf(\"%lu\", x);}"@153,"void f(uintptr_t x){printf(\"%lu\", x);}"@157,"void f(std::uintmax_t x){printf(\"%lu\", x);}"@162,"void f(std::uintptr_t x){printf(\"%lu\", x);}"@164,"void f(ssize_t x){printf(\"%lx\", x);}"@181,"void f(ptrdiff_t x){printf(\"%lx\", x);}"@182,"void f(unsigned ptrdiff_t x){printf(\"%lx\", x);}"@183,"void f(intmax_t x){printf(\"%lx\", x);}"@184,"void f(intptr_t x){printf(\"%lx\", x);}"@186,"void f(uintptr_t x){printf(\"%lx\", x);}"@187}
  true always 1
  true always 1
  true always 1
Line 848
  filename possible {"cppcheck-2.8/test/testio.cpp"@153,"cppcheck-2.8/test/testio.cpp"@157,"cppcheck-2.8/test/testio.cpp"@162,"cppcheck-2.8/test/testio.cpp"@164,"cppcheck-2.8/test/testio.cpp"@181,"cppcheck-2.8/test/testio.cpp"@182,"cppcheck-2.8/test/testio.cpp"@183,"cppcheck-2.8/test/testio.cpp"@184,"cppcheck-2.8/test/testio.cpp"@186,"cppcheck-2.8/test/testio.cpp"@187}
  linenr {!<=-1,3395@153,3399@157,3404@162,3406@164,3425@181,3426@182,3427@183,3428@184,3430@186}
Line 849
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  849 always 849
  code inconclusive {"void f(unsigned ptrdiff_t x){printf(\"%lu\", x);}"@153,"void f(uintptr_t x){printf(\"%lu\", x);}"@157,"void f(std::uintmax_t x){printf(\"%lu\", x);}"@162,"void f(std::uintptr_t x){printf(\"%lu\", x);}"@164,"void f(ssize_t x){printf(\"%lx\", x);}"@181,"void f(ptrdiff_t x){printf(\"%lx\", x);}"@182,"void f(unsigned ptrdiff_t x){printf(\"%lx\", x);}"@183,"void f(intmax_t x){printf(\"%lx\", x);}"@184,"void f(intptr_t x){printf(\"%lx\", x);}"@186,"void f(uintptr_t x){printf(\"%lx\", x);}"@187}
  true always 1
  true always 1
  true always 1
Line 850
  filename inconclusive {"cppcheck-2.8/test/testio.cpp"@153,"cppcheck-2.8/test/testio.cpp"@157,"cppcheck-2.8/test/testio.cpp"@162,"cppcheck-2.8/test/testio.cpp"@164,"cppcheck-2.8/test/testio.cpp"@181,"cppcheck-2.8/test/testio.cpp"@182,"cppcheck-2.8/test/testio.cpp"@183,"cppcheck-2.8/test/testio.cpp"@184,"cppcheck-2.8/test/testio.cpp"@186,"cppcheck-2.8/test/testio.cpp"@187}
  linenr {!<=-1,3395@153,3399@157,3404@162,3406@164,3425@181,3426@182,3427@183,3428@184,3430@186}
Line 851
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  851 always 851
  code inconclusive {"void f(unsigned ptrdiff_t x){printf(\"%lu\", x);}"@153,"void f(uintptr_t x){printf(\"%lu\", x);}"@157,"void f(std::uintmax_t x){printf(\"%lu\", x);}"@162,"void f(std::uintptr_t x){printf(\"%lu\", x);}"@164,"void f(ssize_t x){printf(\"%lx\", x);}"@181,"void f(ptrdiff_t x){printf(\"%lx\", x);}"@182,"void f(unsigned ptrdiff_t x){printf(\"%lx\", x);}"@183,"void f(intmax_t x){printf(\"%lx\", x);}"@184,"void f(intptr_t x){printf(\"%lx\", x);}"@186,"void f(uintptr_t x){printf(\"%lx\", x);}"@187}
  true always 1
  true always 1
  true always 1
Line 852
  filename inconclusive {"cppcheck-2.8/test/testio.cpp"@153,"cppcheck-2.8/test/testio.cpp"@157,"cppcheck-2.8/test/testio.cpp"@162,"cppcheck-2.8/test/testio.cpp"@164,"cppcheck-2.8/test/testio.cpp"@181,"cppcheck-2.8/test/testio.cpp"@182,"cppcheck-2.8/test/testio.cpp"@183,"cppcheck-2.8/test/testio.cpp"@184,"cppcheck-2.8/test/testio.cpp"@186,"cppcheck-2.8/test/testio.cpp"@187}
  linenr {!<=-1,3395@153,3399@157,3404@162,3406@164,3425@181,3426@182,3427@183,3428@184,3430@186}
Line 853
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  853 always 853
  code inconclusive {"void f(unsigned ptrdiff_t x){printf(\"%lu\", x);}"@153,"void f(uintptr_t x){printf(\"%lu\", x);}"@157,"void f(std::uintmax_t x){printf(\"%lu\", x);}"@162,"void f(std::uintptr_t x){printf(\"%lu\", x);}"@164,"void f(ssize_t x){printf(\"%lx\", x);}"@181,"void f(ptrdiff_t x){printf(\"%lx\", x);}"@182,"void f(unsigned ptrdiff_t x){printf(\"%lx\", x);}"@183,"void f(intmax_t x){printf(\"%lx\", x);}"@184,"void f(intptr_t x){printf(\"%lx\", x);}"@186,"void f(uintptr_t x){printf(\"%lx\", x);}"@187}
  true always 1
  true always 1
  true always 1
Line 854
  ( always {!<=-1,!>=2}
  filename inconclusive {"cppcheck-2.8/test/testio.cpp"@153,"cppcheck-2.8/test/testio.cpp"@157,"cppcheck-2.8/test/testio.cpp"@162,"cppcheck-2.8/test/testio.cpp"@164,"cppcheck-2.8/test/testio.cpp"@181,"cppcheck-2.8/test/testio.cpp"@182,"cppcheck-2.8/test/testio.cpp"@183,"cppcheck-2.8/test/testio.cpp"@184,"cppcheck-2.8/test/testio.cpp"@186,"cppcheck-2.8/test/testio.cpp"@187}
  linenr {!<=-1,3395@153,3399@157,3404@162,3406@164,3425@181,3426@182,3427@183,3428@184,3430@186}
  testScanfErrAkaWin64String inconclusive {"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"@153,"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"@157,"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"@162,"[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"@164,"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long long}'.\n"@181,"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"@182,"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"@183,"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long long}'.\n"@184,"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long long}'.\n"@186,"[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"@187}
Line 857
  , always !<=-1
  linenr always !<=-1
Line 859
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  859 always 859
  code possible {"void f(unsigned ptrdiff_t x){printf(\"%llu\", x);}"@214,"void f(uintptr_t x){printf(\"%llu\", x);}"@218,"void f(std::uintmax_t x){printf(\"%llu\", x);}"@223,"void f(std::uintptr_t x){printf(\"%llu\", x);}"@225,"void f(ssize_t x){printf(\"%llx\", x);}"@242,"void f(ptrdiff_t x){printf(\"%llx\", x);}"@243,"void f(unsigned ptrdiff_t x){printf(\"%llx\", x);}"@244,"void f(intmax_t x){printf(\"%llx\", x);}"@245,"void f(intptr_t x){printf(\"%llx\", x);}"@247,"void f(uintptr_t x){printf(\"%llx\", x);}"@248}
  true always 1
  true always 1
  true always 1
Line 860
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@214,"cppcheck-2.8/test/testio.cpp"@218,"cppcheck-2.8/test/testio.cpp"@223,"cppcheck-2.8/test/testio.cpp"@225,"cppcheck-2.8/test/testio.cpp"@242,"cppcheck-2.8/test/testio.cpp"@243,"cppcheck-2.8/test/testio.cpp"@244,"cppcheck-2.8/test/testio.cpp"@245,"cppcheck-2.8/test/testio.cpp"@247,"cppcheck-2.8/test/testio.cpp"@248}
  linenr {!<=-1,3459@214,3463@218,3468@223,3470@225,3489@242,3490@243,3491@244,3492@245,3494@247}
  testScanfErrAkaString possible {"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"@214,"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"@218,"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"@223,"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"@225,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n"@242,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n"@243,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"@244,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n"@245,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n"@247,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"@248}
Line 861
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  861 always 861
  code possible {"void f(unsigned ptrdiff_t x){printf(\"%llu\", x);}"@214,"void f(uintptr_t x){printf(\"%llu\", x);}"@218,"void f(std::uintmax_t x){printf(\"%llu\", x);}"@223,"void f(std::uintptr_t x){printf(\"%llu\", x);}"@225,"void f(ssize_t x){printf(\"%llx\", x);}"@242,"void f(ptrdiff_t x){printf(\"%llx\", x);}"@243,"void f(unsigned ptrdiff_t x){printf(\"%llx\", x);}"@244,"void f(intmax_t x){printf(\"%llx\", x);}"@245,"void f(intptr_t x){printf(\"%llx\", x);}"@247,"void f(uintptr_t x){printf(\"%llx\", x);}"@248}
  true always 1
  true always 1
  true always 1
Line 862
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@214,"cppcheck-2.8/test/testio.cpp"@218,"cppcheck-2.8/test/testio.cpp"@223,"cppcheck-2.8/test/testio.cpp"@225,"cppcheck-2.8/test/testio.cpp"@242,"cppcheck-2.8/test/testio.cpp"@243,"cppcheck-2.8/test/testio.cpp"@244,"cppcheck-2.8/test/testio.cpp"@245,"cppcheck-2.8/test/testio.cpp"@247,"cppcheck-2.8/test/testio.cpp"@248}
  linenr {!<=-1,3459@214,3463@218,3468@223,3470@225,3489@242,3490@243,3491@244,3492@245,3494@247}
  testScanfErrAkaString possible {"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"@214,"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"@218,"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"@223,"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"@225,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n"@242,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n"@243,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"@244,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n"@245,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n"@247,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"@248}
Line 863
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  863 always 863
  code possible {"void f(unsigned ptrdiff_t x){printf(\"%llu\", x);}"@214,"void f(uintptr_t x){printf(\"%llu\", x);}"@218,"void f(std::uintmax_t x){printf(\"%llu\", x);}"@223,"void f(std::uintptr_t x){printf(\"%llu\", x);}"@225,"void f(ssize_t x){printf(\"%llx\", x);}"@242,"void f(ptrdiff_t x){printf(\"%llx\", x);}"@243,"void f(unsigned ptrdiff_t x){printf(\"%llx\", x);}"@244,"void f(intmax_t x){printf(\"%llx\", x);}"@245,"void f(intptr_t x){printf(\"%llx\", x);}"@247,"void f(uintptr_t x){printf(\"%llx\", x);}"@248}
  true always 1
  true always 1
  true always 1
Line 864
  ( always {!<=-1,!>=2}
  filename possible {"cppcheck-2.8/test/testio.cpp"@214,"cppcheck-2.8/test/testio.cpp"@218,"cppcheck-2.8/test/testio.cpp"@223,"cppcheck-2.8/test/testio.cpp"@225,"cppcheck-2.8/test/testio.cpp"@242,"cppcheck-2.8/test/testio.cpp"@243,"cppcheck-2.8/test/testio.cpp"@244,"cppcheck-2.8/test/testio.cpp"@245,"cppcheck-2.8/test/testio.cpp"@247,"cppcheck-2.8/test/testio.cpp"@248}
  linenr {!<=-1,3459@214,3463@218,3468@223,3470@225,3489@242,3490@243,3491@244,3492@245,3494@247}
  testScanfErrAkaString possible {"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"@214,"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"@218,"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"@223,"[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"@225,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n"@242,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n"@243,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"@244,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n"@245,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n"@247,"[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"@248}
Line 865
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  865 always 865
  code possible {"void f(unsigned ptrdiff_t x){printf(\"%llu\", x);}"@214,"void f(uintptr_t x){printf(\"%llu\", x);}"@218,"void f(std::uintmax_t x){printf(\"%llu\", x);}"@223,"void f(std::uintptr_t x){printf(\"%llu\", x);}"@225,"void f(ssize_t x){printf(\"%llx\", x);}"@242,"void f(ptrdiff_t x){printf(\"%llx\", x);}"@243,"void f(unsigned ptrdiff_t x){printf(\"%llx\", x);}"@244,"void f(intmax_t x){printf(\"%llx\", x);}"@245,"void f(intptr_t x){printf(\"%llx\", x);}"@247,"void f(uintptr_t x){printf(\"%llx\", x);}"@248}
  true always 1
  true always 1
  true always 1
Line 866
  filename possible {"cppcheck-2.8/test/testio.cpp"@214,"cppcheck-2.8/test/testio.cpp"@218,"cppcheck-2.8/test/testio.cpp"@223,"cppcheck-2.8/test/testio.cpp"@225,"cppcheck-2.8/test/testio.cpp"@242,"cppcheck-2.8/test/testio.cpp"@243,"cppcheck-2.8/test/testio.cpp"@244,"cppcheck-2.8/test/testio.cpp"@245,"cppcheck-2.8/test/testio.cpp"@247,"cppcheck-2.8/test/testio.cpp"@248}
  linenr {!<=-1,3459@214,3463@218,3468@223,3470@225,3489@242,3490@243,3491@244,3492@245,3494@247}
Line 892
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  892 always 892
  "void foo() {\n    scanf(\"%1d\", &foo);\n    sscanf(bar, \"%1d\", &foo);\n    scanf(\"%1u%1u\", &foo, bar());\n    scanf(\"%*1x %1x %29s\", &count, KeyName);\n    fscanf(f, \"%7ms\", &ref);\n    sscanf(ip_port, \"%*[^:]:%4d\", &port);\n}" always "void foo() {\n    scanf(\"%1d\", &foo);\n    sscanf(bar, \"%1d\", &foo);\n    scanf(\"%1u%1u\", &foo, bar());\n    scanf(\"%*1x %1x %29s\", &count, KeyName);\n    fscanf(f, \"%7ms\", &ref);\n    sscanf(ip_port, \"%*[^:]:%4d\", &port);\n}"
Line 900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  900 always 900
  "" always ""
Line 902
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  902 always 902
  "void foo() {\n    scanf(\"\", &foo);\n    scanf(\"%1d\", &foo, &bar);\n    fscanf(bar, \"%1d\", &foo, &bar);\n    scanf(\"%*1x %1x %29s\", &count, KeyName, foo);\n}" always "void foo() {\n    scanf(\"\", &foo);\n    scanf(\"%1d\", &foo, &bar);\n    fscanf(bar, \"%1d\", &foo, &bar);\n    scanf(\"%*1x %1x %29s\", &count, KeyName, foo);\n}"
Line 908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  908 always 908
  "[test.cpp:2]: (warning) scanf format string requires 0 parameters but 1 is given.\n[test.cpp:3]: (warning) scanf format string requires 1 parameter but 2 are given.\n[test.cpp:4]: (warning) fscanf format string requires 1 parameter but 2 are given.\n[test.cpp:5]: (warning) scanf format string requires 2 parameters but 3 are given.\n" always "[test.cpp:2]: (warning) scanf format string requires 0 parameters but 1 is given.\n[test.cpp:3]: (warning) scanf format string requires 1 parameter but 2 are given.\n[test.cpp:4]: (warning) fscanf format string requires 1 parameter but 2 are given.\n[test.cpp:5]: (warning) scanf format string requires 2 parameters but 3 are given.\n"
Line 913
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  913 always 913
  "void foo() {\n    scanf(\"%1d\");\n    scanf(\"%1u%1u\", bar());\n    sscanf(bar, \"%1d%1d\", &foo);\n    scanf(\"%*1x %1x %29s\", &count);\n}" always "void foo() {\n    scanf(\"%1d\");\n    scanf(\"%1u%1u\", bar());\n    sscanf(bar, \"%1d%1d\", &foo);\n    scanf(\"%*1x %1x %29s\", &count);\n}"
Line 919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  919 always 919
  "[test.cpp:2]: (error) scanf format string requires 1 parameter but only 0 are given.\n[test.cpp:3]: (error) scanf format string requires 2 parameters but only 1 is given.\n[test.cpp:4]: (error) sscanf format string requires 2 parameters but only 1 is given.\n[test.cpp:5]: (error) scanf format string requires 2 parameters but only 1 is given.\n" always "[test.cpp:2]: (error) scanf format string requires 1 parameter but only 0 are given.\n[test.cpp:3]: (error) scanf format string requires 2 parameters but only 1 is given.\n[test.cpp:4]: (error) sscanf format string requires 2 parameters but only 1 is given.\n[test.cpp:5]: (error) scanf format string requires 2 parameters but only 1 is given.\n"
Line 924
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  924 always 924
  "void foo() {\n    char input[10];\n    char output[5];\n    sscanf(input, \"%3s\", output);\n    sscanf(input, \"%4s\", output);\n    sscanf(input, \"%5s\", output);\n}" always "void foo() {\n    char input[10];\n    char output[5];\n    sscanf(input, \"%3s\", output);\n    sscanf(input, \"%4s\", output);\n    sscanf(input, \"%5s\", output);\n}"
  false always 0
Line 931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  931 always 931
  "[test.cpp:6]: (error) Width 5 given in format string (no. 1) is larger than destination buffer 'output[5]', use %4s to prevent overflowing it.\n" always "[test.cpp:6]: (error) Width 5 given in format string (no. 1) is larger than destination buffer 'output[5]', use %4s to prevent overflowing it.\n"
Line 933
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  933 always 933
  "void foo() {\n    char input[10];\n    char output[5];\n    sscanf(input, \"%s\", output);\n    sscanf(input, \"%3s\", output);\n    sscanf(input, \"%4s\", output);\n    sscanf(input, \"%5s\", output);\n}" always "void foo() {\n    char input[10];\n    char output[5];\n    sscanf(input, \"%s\", output);\n    sscanf(input, \"%3s\", output);\n    sscanf(input, \"%4s\", output);\n    sscanf(input, \"%5s\", output);\n}"
  true always 1
Line 941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  941 always 941
  "[test.cpp:5]: (warning, inconclusive) Width 3 given in format string (no. 1) is smaller than destination buffer 'output[5]'.\n[test.cpp:7]: (error) Width 5 given in format string (no. 1) is larger than destination buffer 'output[5]', use %4s to prevent overflowing it.\n[test.cpp:4]: (warning) sscanf() without field width limits can crash with huge input data.\n" always "[test.cpp:5]: (warning, inconclusive) Width 3 given in format string (no. 1) is smaller than destination buffer 'output[5]'.\n[test.cpp:7]: (error) Width 5 given in format string (no. 1) is larger than destination buffer 'output[5]', use %4s to prevent overflowing it.\n[test.cpp:4]: (warning) sscanf() without field width limits can crash with huge input data.\n"
Line 945
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  945 always 945
  "void foo() {\n    const size_t BUFLENGTH(2048);\n    typedef char bufT[BUFLENGTH];\n    bufT line= {0};\n    bufT projectId= {0};\n    const int scanrc=sscanf(line, \"Project(\\\"{%36s}\\\")\", projectId);\n    sscanf(input, \"%5s\", output);\n}" always "void foo() {\n    const size_t BUFLENGTH(2048);\n    typedef char bufT[BUFLENGTH];\n    bufT line= {0};\n    bufT projectId= {0};\n    const int scanrc=sscanf(line, \"Project(\\\"{%36s}\\\")\", projectId);\n    sscanf(input, \"%5s\", output);\n}"
  true always 1
Line 953
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  953 always 953
  "[test.cpp:6]: (warning, inconclusive) Width 36 given in format string (no. 1) is smaller than destination buffer 'projectId[2048]'.\n" always "[test.cpp:6]: (warning, inconclusive) Width 36 given in format string (no. 1) is smaller than destination buffer 'projectId[2048]'.\n"
Line 955
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  955 always 955
  "void foo(unsigned int i) {\n  scanf(\"%h\", &i);\n  scanf(\"%hh\", &i);\n  scanf(\"%l\", &i);\n  scanf(\"%ll\", &i);\n  scanf(\"%j\", &i);\n  scanf(\"%z\", &i);\n  scanf(\"%t\", &i);\n  scanf(\"%L\", &i);\n  scanf(\"%I\", &i);\n}" always "void foo(unsigned int i) {\n  scanf(\"%h\", &i);\n  scanf(\"%hh\", &i);\n  scanf(\"%l\", &i);\n  scanf(\"%ll\", &i);\n  scanf(\"%j\", &i);\n  scanf(\"%z\", &i);\n  scanf(\"%t\", &i);\n  scanf(\"%L\", &i);\n  scanf(\"%I\", &i);\n}"
Line 966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  966 always 966
  "[test.cpp:2]: (warning) 'h' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:3]: (warning) 'hh' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:4]: (warning) 'l' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'll' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'j' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'z' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 't' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'L' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n" always "[test.cpp:2]: (warning) 'h' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:3]: (warning) 'hh' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:4]: (warning) 'l' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'll' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'j' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'z' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 't' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'L' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n"
Line 978
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  978 always 978
  "void f(){intmax_t x; scanf(\"%jb\", &x);}" always "void f(){intmax_t x; scanf(\"%jb\", &x);}"
Line 979
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  979 always 979
  "void f(){uintmax_t x; scanf(\"%jw\", &x);}" always "void f(){uintmax_t x; scanf(\"%jw\", &x);}"
Line 980
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  980 always 980
  "void f(){size_t x; scanf(\"%zr\", &x);}" always "void f(){size_t x; scanf(\"%zr\", &x);}"
Line 981
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  981 always 981
  "void f(){ptrdiff_t x; scanf(\"%tm\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%tm\", &x);}"
Line 982
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  982 always 982
  "void f(){long double x; scanf(\"%La\", &x);}" always "void f(){long double x; scanf(\"%La\", &x);}"
Line 983
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  983 always 983
  "void f(){std::size_t x; scanf(\"%zv\", &x);}" always "void f(){std::size_t x; scanf(\"%zv\", &x);}"
Line 984
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  984 always 984
  "void f(){std::ptrdiff_t x; scanf(\"%tp\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%tp\", &x);}"
Line 986
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  986 always 986
  "void f(){bool x; scanf(\"%u\", &x);}" always "void f(){bool x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'bool *'.\n"
Line 987
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  987 always 987
  "void f(){char x; scanf(\"%u\", &x);}" always "void f(){char x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'char *'.\n"
Line 988
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  988 always 988
  "void f(){signed char x; scanf(\"%u\", &x);}" always "void f(){signed char x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed char *'.\n"
Line 989
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  989 always 989
  "void f(){unsigned char x; scanf(\"%u\", &x);}" always "void f(){unsigned char x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned char *'.\n"
Line 990
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  990 always 990
  "void f(){signed short x; scanf(\"%u\", &x);}" always "void f(){signed short x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed short *'.\n"
Line 991
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  991 always 991
  "void f(){unsigned short x; scanf(\"%u\", &x);}" always "void f(){unsigned short x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned short *'.\n"
Line 992
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  992 always 992
  "void f(){signed int x; scanf(\"%u\", &x);}" always "void f(){signed int x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'.\n"
Line 993
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  993 always 993
  "void f(){unsigned int x; scanf(\"%u\", &x);}" always "void f(){unsigned int x; scanf(\"%u\", &x);}"
Line 994
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  994 always 994
  "void f(){signed long x; scanf(\"%u\", &x);}" always "void f(){signed long x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long *'.\n"
Line 995
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  995 always 995
  "void f(){unsigned long x; scanf(\"%u\", &x);}" always "void f(){unsigned long x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long *'.\n"
Line 996
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  996 always 996
  "void f(){signed long long x; scanf(\"%u\", &x);}" always "void f(){signed long long x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long long *'.\n"
Line 997
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  997 always 997
  "void f(){unsigned long long x; scanf(\"%u\", &x);}" always "void f(){unsigned long long x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long long *'.\n"
Line 998
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  998 always 998
  "void f(){float x; scanf(\"%u\", &x);}" always "void f(){float x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'float *'.\n"
Line 999
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  999 always 999
  "void f(){double x; scanf(\"%u\", &x);}" always "void f(){double x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'double *'.\n"
Line 1000
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1000 always 1000
  "void f(){long double x; scanf(\"%u\", &x);}" always "void f(){long double x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'long double *'.\n"
Line 1001
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1001 always 1001
  "void f(){void * x; scanf(\"%u\", &x);}" always "void f(){void * x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'void * *'.\n"
Line 1002
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1002 always 1002
  "void f(){size_t x; scanf(\"%u\", &x);}" always "void f(){size_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1003
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1003 always 1003
  "void f(){ssize_t x; scanf(\"%u\", &x);}" always "void f(){ssize_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1004
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1004 always 1004
  "void f(){ptrdiff_t x; scanf(\"%u\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1005
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1005 always 1005
  "void f(){unsigned ptrdiff_t x; scanf(\"%u\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1006
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1006 always 1006
  "void f(){intmax_t x; scanf(\"%u\", &x);}" always "void f(){intmax_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1007
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1007 always 1007
  "void f(){uintmax_t x; scanf(\"%u\", &x);}" always "void f(){uintmax_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1008
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1008 always 1008
  "void f(){intptr_t x; scanf(\"%u\", &x);}" always "void f(){intptr_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1009
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1009 always 1009
  "void f(){uintptr_t x; scanf(\"%u\", &x);}" always "void f(){uintptr_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n"
Line 1010
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1010 always 1010
  "void f(){std::size_t x; scanf(\"%u\", &x);}" always "void f(){std::size_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1011
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1011 always 1011
  "void f(){std::ssize_t x; scanf(\"%u\", &x);}" always "void f(){std::ssize_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1012
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1012 always 1012
  "void f(){std::ptrdiff_t x; scanf(\"%u\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1013
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1013 always 1013
  "void f(){std::intmax_t x; scanf(\"%u\", &x);}" always "void f(){std::intmax_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1014
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1014 always 1014
  "void f(){std::uintmax_t x; scanf(\"%u\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1015
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1015 always 1015
  "void f(){std::intptr_t x; scanf(\"%u\", &x);}" always "void f(){std::intptr_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1016
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1016 always 1016
  "void f(){std::uintptr_t x; scanf(\"%u\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%u\", &x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1018
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1018 always 1018
  "void foo() {\n    scanf(\"%u\", \"s3\");\n    scanf(\"%u\", L\"s5W\");\n}" always "void foo() {\n    scanf(\"%u\", \"s3\");\n    scanf(\"%u\", L\"s5W\");\n}"
  true always 1
Line 1022
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1022 always 1022
  "[test.cpp:2]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:2]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'const wchar_t *'.\n"
Line 1025
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1025 always 1025
  "void foo(long l) {\n    scanf(\"%u\", l);\n}" always "void foo(long l) {\n    scanf(\"%u\", l);\n}"
  true always 1
Line 1028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1028 always 1028
  "[test.cpp:2]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long'.\n" always "[test.cpp:2]: (warning) %u in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long'.\n"
Line 1030
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1030 always 1030
  "void f(){bool x; scanf(\"%lu\", &x);}" always "void f(){bool x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'bool *'.\n"
Line 1031
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1031 always 1031
  "void f(){char x; scanf(\"%lu\", &x);}" always "void f(){char x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'char *'.\n"
Line 1032
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1032 always 1032
  "void f(){signed char x; scanf(\"%lu\", &x);}" always "void f(){signed char x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed char *'.\n"
Line 1033
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1033 always 1033
  "void f(){unsigned char x; scanf(\"%lu\", &x);}" always "void f(){unsigned char x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned char *'.\n"
Line 1034
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1034 always 1034
  "void f(){signed short x; scanf(\"%lu\", &x);}" always "void f(){signed short x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed short *'.\n"
Line 1035
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1035 always 1035
  "void f(){unsigned short x; scanf(\"%lu\", &x);}" always "void f(){unsigned short x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned short *'.\n"
Line 1036
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1036 always 1036
  "void f(){signed int x; scanf(\"%lu\", &x);}" always "void f(){signed int x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed int *'.\n"
Line 1037
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1037 always 1037
  "void f(){unsigned int x; scanf(\"%lu\", &x);}" always "void f(){unsigned int x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned int *'.\n"
Line 1038
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1038 always 1038
  "void f(){signed long x; scanf(\"%lu\", &x);}" always "void f(){signed long x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long *'.\n"
Line 1039
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1039 always 1039
  "void f(){unsigned long x; scanf(\"%lu\", &x);}" always "void f(){unsigned long x; scanf(\"%lu\", &x);}"
Line 1040
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1040 always 1040
  "void f(){signed long long x; scanf(\"%lu\", &x);}" always "void f(){signed long long x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long long *'.\n"
Line 1041
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1041 always 1041
  "void f(){unsigned long long x; scanf(\"%lu\", &x);}" always "void f(){unsigned long long x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned long long *'.\n"
Line 1042
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1042 always 1042
  "void f(){float x; scanf(\"%lu\", &x);}" always "void f(){float x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'float *'.\n"
Line 1043
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1043 always 1043
  "void f(){double x; scanf(\"%lu\", &x);}" always "void f(){double x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'double *'.\n"
Line 1044
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1044 always 1044
  "void f(){long double x; scanf(\"%lu\", &x);}" always "void f(){long double x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'long double *'.\n"
Line 1045
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1045 always 1045
  "void f(){void * x; scanf(\"%lu\", &x);}" always "void f(){void * x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'void * *'.\n"
Line 1046
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1046 always 1046
  "void f(){size_t x; scanf(\"%lu\", &x);}" always "void f(){size_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1047
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1047 always 1047
  "void f(){ssize_t x; scanf(\"%lu\", &x);}" always "void f(){ssize_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1048
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1048 always 1048
  "void f(){ptrdiff_t x; scanf(\"%lu\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1049
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1049 always 1049
  "void f(){unsigned ptrdiff_t x; scanf(\"%lu\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1050
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1050 always 1050
  "void f(){intmax_t x; scanf(\"%lu\", &x);}" always "void f(){intmax_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1051
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1051 always 1051
  "void f(){uintmax_t x; scanf(\"%lu\", &x);}" always "void f(){uintmax_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1052
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1052 always 1052
  "void f(){intptr_t x; scanf(\"%lu\", &x);}" always "void f(){intptr_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1053
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1053 always 1053
  "void f(){uintptr_t x; scanf(\"%lu\", &x);}" always "void f(){uintptr_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n"
Line 1054
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1054 always 1054
  "void f(){std::size_t x; scanf(\"%lu\", &x);}" always "void f(){std::size_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1055
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1055 always 1055
  "void f(){std::ssize_t x; scanf(\"%lu\", &x);}" always "void f(){std::ssize_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1056
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1056 always 1056
  "void f(){std::ptrdiff_t x; scanf(\"%lu\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1057
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1057 always 1057
  "void f(){std::intmax_t x; scanf(\"%lu\", &x);}" always "void f(){std::intmax_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1058
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1058 always 1058
  "void f(){std::uintmax_t x; scanf(\"%lu\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1059
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1059 always 1059
  "void f(){std::intptr_t x; scanf(\"%lu\", &x);}" always "void f(){std::intptr_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1060
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1060 always 1060
  "void f(){std::uintptr_t x; scanf(\"%lu\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%lu\", &x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1062
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1062 always 1062
  "void f(){bool x; scanf(\"%lx\", &x);}" always "void f(){bool x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'bool *'.\n"
Line 1063
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1063 always 1063
  "void f(){char x; scanf(\"%lx\", &x);}" always "void f(){char x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'char *'.\n"
Line 1064
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1064 always 1064
  "void f(){signed char x; scanf(\"%lx\", &x);}" always "void f(){signed char x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed char *'.\n"
Line 1065
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1065 always 1065
  "void f(){unsigned char x; scanf(\"%lx\", &x);}" always "void f(){unsigned char x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned char *'.\n"
Line 1066
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1066 always 1066
  "void f(){signed short x; scanf(\"%lx\", &x);}" always "void f(){signed short x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed short *'.\n"
Line 1067
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1067 always 1067
  "void f(){unsigned short x; scanf(\"%lx\", &x);}" always "void f(){unsigned short x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned short *'.\n"
Line 1068
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1068 always 1068
  "void f(){signed int x; scanf(\"%lx\", &x);}" always "void f(){signed int x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed int *'.\n"
Line 1069
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1069 always 1069
  "void f(){unsigned int x; scanf(\"%lx\", &x);}" always "void f(){unsigned int x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned int *'.\n"
Line 1070
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1070 always 1070
  "void f(){signed long x; scanf(\"%lx\", &x);}" always "void f(){signed long x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long *'.\n"
Line 1071
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1071 always 1071
  "void f(){unsigned long x; scanf(\"%lx\", &x);}" always "void f(){unsigned long x; scanf(\"%lx\", &x);}"
Line 1072
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1072 always 1072
  "void f(){signed long long x; scanf(\"%lx\", &x);}" always "void f(){signed long long x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long long *'.\n"
Line 1073
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1073 always 1073
  "void f(){unsigned long long x; scanf(\"%lx\", &x);}" always "void f(){unsigned long long x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned long long *'.\n"
Line 1074
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1074 always 1074
  "void f(){float x; scanf(\"%lx\", &x);}" always "void f(){float x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'float *'.\n"
Line 1075
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1075 always 1075
  "void f(){double x; scanf(\"%lx\", &x);}" always "void f(){double x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'double *'.\n"
Line 1076
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1076 always 1076
  "void f(){long double x; scanf(\"%lx\", &x);}" always "void f(){long double x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'long double *'.\n"
Line 1077
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1077 always 1077
  "void f(){void * x; scanf(\"%lx\", &x);}" always "void f(){void * x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'void * *'.\n"
Line 1078
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1078 always 1078
  "void f(){size_t x; scanf(\"%lx\", &x);}" always "void f(){size_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1079
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1079 always 1079
  "void f(){ssize_t x; scanf(\"%lx\", &x);}" always "void f(){ssize_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1080
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1080 always 1080
  "void f(){ptrdiff_t x; scanf(\"%lx\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1081
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1081 always 1081
  "void f(){unsigned ptrdiff_t x; scanf(\"%lx\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1082
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1082 always 1082
  "void f(){intmax_t x; scanf(\"%lx\", &x);}" always "void f(){intmax_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1083
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1083 always 1083
  "void f(){uintmax_t x; scanf(\"%lx\", &x);}" always "void f(){uintmax_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1084
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1084 always 1084
  "void f(){intptr_t x; scanf(\"%lx\", &x);}" always "void f(){intptr_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1085
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1085 always 1085
  "void f(){uintptr_t x; scanf(\"%lx\", &x);}" always "void f(){uintptr_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n"
Line 1086
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1086 always 1086
  "void f(){std::size_t x; scanf(\"%lx\", &x);}" always "void f(){std::size_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1087
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1087 always 1087
  "void f(){std::ssize_t x; scanf(\"%lx\", &x);}" always "void f(){std::ssize_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1088
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1088 always 1088
  "void f(){std::ptrdiff_t x; scanf(\"%lx\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1089
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1089 always 1089
  "void f(){std::intmax_t x; scanf(\"%lx\", &x);}" always "void f(){std::intmax_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1090
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1090 always 1090
  "void f(){std::uintmax_t x; scanf(\"%lx\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1091
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1091 always 1091
  "void f(){std::intptr_t x; scanf(\"%lx\", &x);}" always "void f(){std::intptr_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1092
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1092 always 1092
  "void f(){std::uintptr_t x; scanf(\"%lx\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%lx\", &x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1094
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1094 always 1094
  "void f(){bool x; scanf(\"%ld\", &x);}" always "void f(){bool x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'bool *'.\n"
Line 1095
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1095 always 1095
  "void f(){char x; scanf(\"%ld\", &x);}" always "void f(){char x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'char *'.\n"
Line 1096
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1096 always 1096
  "void f(){signed long x; scanf(\"%ld\", &x);}" always "void f(){signed long x; scanf(\"%ld\", &x);}"
Line 1097
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1097 always 1097
  "void f(){unsigned long x; scanf(\"%ld\", &x);}" always "void f(){unsigned long x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'unsigned long *'.\n"
Line 1098
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1098 always 1098
  "void f(){void * x; scanf(\"%ld\", &x);}" always "void f(){void * x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %ld in format string (no. 1) requires 'long *' but the argument type is 'void * *'.\n"
Line 1099
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1099 always 1099
  "void f(){size_t x; scanf(\"%ld\", &x);}" always "void f(){size_t x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1100
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1100 always 1100
  "void f(){intmax_t x; scanf(\"%ld\", &x);}" always "void f(){intmax_t x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1101
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1101 always 1101
  "void f(){std::ptrdiff_t x; scanf(\"%ld\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1102
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1102 always 1102
  "void f(){std::intmax_t x; scanf(\"%ld\", &x);}" always "void f(){std::intmax_t x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1103
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1103 always 1103
  "void f(){std::intptr_t x; scanf(\"%ld\", &x);}" always "void f(){std::intptr_t x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1104
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1104 always 1104
  "void f(){std::uintptr_t x; scanf(\"%ld\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%ld\", &x);}"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %ld in format string (no. 1) requires 'long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1106
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1106 always 1106
  "void f(){bool x; scanf(\"%llu\", &x);}" always "void f(){bool x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n"
Line 1107
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1107 always 1107
  "void f(){char x; scanf(\"%llu\", &x);}" always "void f(){char x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n"
Line 1108
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1108 always 1108
  "void f(){signed char x; scanf(\"%llu\", &x);}" always "void f(){signed char x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n"
Line 1109
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1109 always 1109
  "void f(){unsigned char x; scanf(\"%llu\", &x);}" always "void f(){unsigned char x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n"
Line 1110
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1110 always 1110
  "void f(){signed short x; scanf(\"%llu\", &x);}" always "void f(){signed short x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n"
Line 1111
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1111 always 1111
  "void f(){unsigned short x; scanf(\"%llu\", &x);}" always "void f(){unsigned short x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n"
Line 1112
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1112 always 1112
  "void f(){signed int x; scanf(\"%llu\", &x);}" always "void f(){signed int x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n"
Line 1113
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1113 always 1113
  "void f(){unsigned int x; scanf(\"%llu\", &x);}" always "void f(){unsigned int x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n"
Line 1114
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1114 always 1114
  "void f(){signed long x; scanf(\"%llu\", &x);}" always "void f(){signed long x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n"
Line 1115
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1115 always 1115
  "void f(){unsigned long x; scanf(\"%llu\", &x);}" always "void f(){unsigned long x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n"
Line 1116
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1116 always 1116
  "void f(){signed long long x; scanf(\"%llu\", &x);}" always "void f(){signed long long x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n"
Line 1117
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1117 always 1117
  "void f(){unsigned long long x; scanf(\"%llu\", &x);}" always "void f(){unsigned long long x; scanf(\"%llu\", &x);}"
Line 1118
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1118 always 1118
  "void f(){float x; scanf(\"%llu\", &x);}" always "void f(){float x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n"
Line 1119
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1119 always 1119
  "void f(){double x; scanf(\"%llu\", &x);}" always "void f(){double x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n"
Line 1120
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1120 always 1120
  "void f(){long double x; scanf(\"%llu\", &x);}" always "void f(){long double x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n"
Line 1121
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1121 always 1121
  "void f(){void * x; scanf(\"%llu\", &x);}" always "void f(){void * x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n"
Line 1122
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1122 always 1122
  "void f(){size_t x; scanf(\"%llu\", &x);}" always "void f(){size_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1123
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1123 always 1123
  "void f(){ssize_t x; scanf(\"%llu\", &x);}" always "void f(){ssize_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1124
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1124 always 1124
  "void f(){ptrdiff_t x; scanf(\"%llu\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1125
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1125 always 1125
  "void f(){unsigned ptrdiff_t x; scanf(\"%llu\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1126
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1126 always 1126
  "void f(){intmax_t x; scanf(\"%llu\", &x);}" always "void f(){intmax_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1127
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1127 always 1127
  "void f(){uintmax_t x; scanf(\"%llu\", &x);}" always "void f(){uintmax_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1128
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1128 always 1128
  "void f(){intptr_t x; scanf(\"%llu\", &x);}" always "void f(){intptr_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1129
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1129 always 1129
  "void f(){uintptr_t x; scanf(\"%llu\", &x);}" always "void f(){uintptr_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
Line 1130
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1130 always 1130
  "void f(){std::size_t x; scanf(\"%llu\", &x);}" always "void f(){std::size_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1131
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1131 always 1131
  "void f(){std::ssize_t x; scanf(\"%llu\", &x);}" always "void f(){std::ssize_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1132
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1132 always 1132
  "void f(){std::ptrdiff_t x; scanf(\"%llu\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1133
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1133 always 1133
  "void f(){std::intmax_t x; scanf(\"%llu\", &x);}" always "void f(){std::intmax_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1134
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1134 always 1134
  "void f(){std::uintmax_t x; scanf(\"%llu\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1135
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1135 always 1135
  "void f(){std::intptr_t x; scanf(\"%llu\", &x);}" always "void f(){std::intptr_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1136
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1136 always 1136
  "void f(){std::uintptr_t x; scanf(\"%llu\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%llu\", &x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
Line 1138
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1138 always 1138
  "void f(){bool x; scanf(\"%llx\", &x);}" always "void f(){bool x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n"
Line 1139
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1139 always 1139
  "void f(){char x; scanf(\"%llx\", &x);}" always "void f(){char x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n"
Line 1140
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1140 always 1140
  "void f(){signed char x; scanf(\"%llx\", &x);}" always "void f(){signed char x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n"
Line 1141
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1141 always 1141
  "void f(){unsigned char x; scanf(\"%llx\", &x);}" always "void f(){unsigned char x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n"
Line 1142
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1142 always 1142
  "void f(){signed short x; scanf(\"%llx\", &x);}" always "void f(){signed short x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n"
Line 1143
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1143 always 1143
  "void f(){unsigned short x; scanf(\"%llx\", &x);}" always "void f(){unsigned short x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n"
Line 1144
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1144 always 1144
  "void f(){signed int x; scanf(\"%llx\", &x);}" always "void f(){signed int x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n"
Line 1145
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1145 always 1145
  "void f(){unsigned int x; scanf(\"%llx\", &x);}" always "void f(){unsigned int x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n"
Line 1146
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1146 always 1146
  "void f(){signed long x; scanf(\"%llx\", &x);}" always "void f(){signed long x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n"
Line 1147
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1147 always 1147
  "void f(){unsigned long x; scanf(\"%llx\", &x);}" always "void f(){unsigned long x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n"
Line 1148
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1148 always 1148
  "void f(){signed long long x; scanf(\"%llx\", &x);}" always "void f(){signed long long x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n"
Line 1149
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1149 always 1149
  "void f(){unsigned long long x; scanf(\"%llx\", &x);}" always "void f(){unsigned long long x; scanf(\"%llx\", &x);}"
Line 1150
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1150 always 1150
  "void f(){float x; scanf(\"%llx\", &x);}" always "void f(){float x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n"
Line 1151
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1151 always 1151
  "void f(){double x; scanf(\"%llx\", &x);}" always "void f(){double x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n"
Line 1152
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1152 always 1152
  "void f(){long double x; scanf(\"%llx\", &x);}" always "void f(){long double x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n"
Line 1153
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1153 always 1153
  "void f(){void * x; scanf(\"%llx\", &x);}" always "void f(){void * x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n"
Line 1154
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1154 always 1154
  "void f(){size_t x; scanf(\"%llx\", &x);}" always "void f(){size_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1155
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1155 always 1155
  "void f(){ssize_t x; scanf(\"%llx\", &x);}" always "void f(){ssize_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1156
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1156 always 1156
  "void f(){ptrdiff_t x; scanf(\"%llx\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1157
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1157 always 1157
  "void f(){unsigned ptrdiff_t x; scanf(\"%llx\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1158
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1158 always 1158
  "void f(){intmax_t x; scanf(\"%llx\", &x);}" always "void f(){intmax_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1159
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1159 always 1159
  "void f(){uintmax_t x; scanf(\"%llx\", &x);}" always "void f(){uintmax_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1160
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1160 always 1160
  "void f(){intptr_t x; scanf(\"%llx\", &x);}" always "void f(){intptr_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1161
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1161 always 1161
  "void f(){uintptr_t x; scanf(\"%llx\", &x);}" always "void f(){uintptr_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
Line 1162
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1162 always 1162
  "void f(){std::size_t x; scanf(\"%llx\", &x);}" always "void f(){std::size_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1163
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1163 always 1163
  "void f(){std::ssize_t x; scanf(\"%llx\", &x);}" always "void f(){std::ssize_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1164
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1164 always 1164
  "void f(){std::ptrdiff_t x; scanf(\"%llx\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1165
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1165 always 1165
  "void f(){std::intmax_t x; scanf(\"%llx\", &x);}" always "void f(){std::intmax_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1166
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1166 always 1166
  "void f(){std::uintmax_t x; scanf(\"%llx\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1167
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1167 always 1167
  "void f(){std::intptr_t x; scanf(\"%llx\", &x);}" always "void f(){std::intptr_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1168
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1168 always 1168
  "void f(){std::uintptr_t x; scanf(\"%llx\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%llx\", &x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
Line 1170
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1170 always 1170
  "void f(){bool x; scanf(\"%lld\", &x);}" always "void f(){bool x; scanf(\"%lld\", &x);}"
  "[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'bool *'.\n"
Line 1171
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1171 always 1171
  "void f(){char x; scanf(\"%lld\", &x);}" always "void f(){char x; scanf(\"%lld\", &x);}"
  "[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'char *'.\n"
Line 1172
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1172 always 1172
  "void f(){long long x; scanf(\"%lld\", &x);}" always "void f(){long long x; scanf(\"%lld\", &x);}"
Line 1173
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1173 always 1173
  "void f(){unsigned long long x; scanf(\"%lld\", &x);}" always "void f(){unsigned long long x; scanf(\"%lld\", &x);}"
  "[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned long long *'.\n"
Line 1174
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1174 always 1174
  "void f(){void * x; scanf(\"%lld\", &x);}" always "void f(){void * x; scanf(\"%lld\", &x);}"
  "[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %lld in format string (no. 1) requires 'long long *' but the argument type is 'void * *'.\n"
Line 1175
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1175 always 1175
  "void f(){size_t x; scanf(\"%lld\", &x);}" always "void f(){size_t x; scanf(\"%lld\", &x);}"
  "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1176
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1176 always 1176
  "void f(){intmax_t x; scanf(\"%lld\", &x);}" always "void f(){intmax_t x; scanf(\"%lld\", &x);}"
  "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1177
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1177 always 1177
  "void f(){std::ptrdiff_t x; scanf(\"%lld\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%lld\", &x);}"
  "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1178
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1178 always 1178
  "void f(){std::intmax_t x; scanf(\"%lld\", &x);}" always "void f(){std::intmax_t x; scanf(\"%lld\", &x);}"
  "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1179
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1179 always 1179
  "void f(){std::intptr_t x; scanf(\"%lld\", &x);}" always "void f(){std::intptr_t x; scanf(\"%lld\", &x);}"
  "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lld in format string (no. 1) requires 'long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
Line 1181
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1181 always 1181
  "void f(){bool x; scanf(\"%hu\", &x);}" always "void f(){bool x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'bool *'.\n"
Line 1182
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1182 always 1182
  "void f(){char x; scanf(\"%hu\", &x);}" always "void f(){char x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'char *'.\n"
Line 1183
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1183 always 1183
  "void f(){signed char x; scanf(\"%hu\", &x);}" always "void f(){signed char x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed char *'.\n"
Line 1184
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1184 always 1184
  "void f(){unsigned char x; scanf(\"%hu\", &x);}" always "void f(){unsigned char x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned char *'.\n"
Line 1185
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1185 always 1185
  "void f(){signed short x; scanf(\"%hu\", &x);}" always "void f(){signed short x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed short *'.\n"
Line 1186
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1186 always 1186
  "void f(){unsigned short x; scanf(\"%hu\", &x);}" always "void f(){unsigned short x; scanf(\"%hu\", &x);}"
Line 1187
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1187 always 1187
  "void f(){signed int x; scanf(\"%hu\", &x);}" always "void f(){signed int x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed int *'.\n"
Line 1188
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1188 always 1188
  "void f(){unsigned int x; scanf(\"%hu\", &x);}" always "void f(){unsigned int x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned int *'.\n"
Line 1189
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1189 always 1189
  "void f(){signed long x; scanf(\"%hu\", &x);}" always "void f(){signed long x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long *'.\n"
Line 1190
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1190 always 1190
  "void f(){unsigned long x; scanf(\"%hu\", &x);}" always "void f(){unsigned long x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long *'.\n"
Line 1191
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1191 always 1191
  "void f(){signed long long x; scanf(\"%hu\", &x);}" always "void f(){signed long long x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long long *'.\n"
Line 1192
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1192 always 1192
  "void f(){unsigned long long x; scanf(\"%hu\", &x);}" always "void f(){unsigned long long x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long long *'.\n"
Line 1193
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1193 always 1193
  "void f(){float x; scanf(\"%hu\", &x);}" always "void f(){float x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'float *'.\n"
Line 1194
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1194 always 1194
  "void f(){double x; scanf(\"%hu\", &x);}" always "void f(){double x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'double *'.\n"
Line 1195
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1195 always 1195
  "void f(){long double x; scanf(\"%hu\", &x);}" always "void f(){long double x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'long double *'.\n"
Line 1196
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1196 always 1196
  "void f(){void * x; scanf(\"%hu\", &x);}" always "void f(){void * x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'void * *'.\n"
Line 1197
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1197 always 1197
  "void f(){size_t x; scanf(\"%hu\", &x);}" always "void f(){size_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1198
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1198 always 1198
  "void f(){ssize_t x; scanf(\"%hu\", &x);}" always "void f(){ssize_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1199
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1199 always 1199
  "void f(){ptrdiff_t x; scanf(\"%hu\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1200
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1200 always 1200
  "void f(){unsigned ptrdiff_t x; scanf(\"%hu\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1201
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1201 always 1201
  "void f(){intmax_t x; scanf(\"%hu\", &x);}" always "void f(){intmax_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1202
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1202 always 1202
  "void f(){uintmax_t x; scanf(\"%hu\", &x);}" always "void f(){uintmax_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1203
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1203 always 1203
  "void f(){std::size_t x; scanf(\"%hu\", &x);}" always "void f(){std::size_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1204
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1204 always 1204
  "void f(){std::ssize_t x; scanf(\"%hu\", &x);}" always "void f(){std::ssize_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1205
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1205 always 1205
  "void f(){std::ptrdiff_t x; scanf(\"%hu\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1206
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1206 always 1206
  "void f(){std::intptr_t x; scanf(\"%hu\", &x);}" always "void f(){std::intptr_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1207
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1207 always 1207
  "void f(){std::uintptr_t x; scanf(\"%hu\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%hu\", &x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1209
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1209 always 1209
  "void f(){bool x; scanf(\"%hx\", &x);}" always "void f(){bool x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'bool *'.\n"
Line 1210
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1210 always 1210
  "void f(){char x; scanf(\"%hx\", &x);}" always "void f(){char x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'char *'.\n"
Line 1211
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1211 always 1211
  "void f(){signed char x; scanf(\"%hx\", &x);}" always "void f(){signed char x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed char *'.\n"
Line 1212
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1212 always 1212
  "void f(){unsigned char x; scanf(\"%hx\", &x);}" always "void f(){unsigned char x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned char *'.\n"
Line 1213
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1213 always 1213
  "void f(){signed short x; scanf(\"%hx\", &x);}" always "void f(){signed short x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed short *'.\n"
Line 1214
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1214 always 1214
  "void f(){unsigned short x; scanf(\"%hx\", &x);}" always "void f(){unsigned short x; scanf(\"%hx\", &x);}"
Line 1215
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1215 always 1215
  "void f(){signed int x; scanf(\"%hx\", &x);}" always "void f(){signed int x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed int *'.\n"
Line 1216
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1216 always 1216
  "void f(){unsigned int x; scanf(\"%hx\", &x);}" always "void f(){unsigned int x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned int *'.\n"
Line 1217
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1217 always 1217
  "void f(){signed long x; scanf(\"%hx\", &x);}" always "void f(){signed long x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long *'.\n"
Line 1218
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1218 always 1218
  "void f(){unsigned long x; scanf(\"%hx\", &x);}" always "void f(){unsigned long x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long *'.\n"
Line 1219
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1219 always 1219
  "void f(){signed long long x; scanf(\"%hx\", &x);}" always "void f(){signed long long x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'signed long long *'.\n"
Line 1220
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1220 always 1220
  "void f(){unsigned long long x; scanf(\"%hx\", &x);}" always "void f(){unsigned long long x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned long long *'.\n"
Line 1221
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1221 always 1221
  "void f(){float x; scanf(\"%hx\", &x);}" always "void f(){float x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'float *'.\n"
Line 1222
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1222 always 1222
  "void f(){double x; scanf(\"%hx\", &x);}" always "void f(){double x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'double *'.\n"
Line 1223
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1223 always 1223
  "void f(){long double x; scanf(\"%hx\", &x);}" always "void f(){long double x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'long double *'.\n"
Line 1224
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1224 always 1224
  "void f(){void * x; scanf(\"%hx\", &x);}" always "void f(){void * x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'void * *'.\n"
Line 1225
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1225 always 1225
  "void f(){size_t x; scanf(\"%hx\", &x);}" always "void f(){size_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1226
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1226 always 1226
  "void f(){ssize_t x; scanf(\"%hx\", &x);}" always "void f(){ssize_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1227
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1227 always 1227
  "void f(){ptrdiff_t x; scanf(\"%hx\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1228
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1228 always 1228
  "void f(){unsigned ptrdiff_t x; scanf(\"%hx\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1229
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1229 always 1229
  "void f(){intmax_t x; scanf(\"%hx\", &x);}" always "void f(){intmax_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1230
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1230 always 1230
  "void f(){uintmax_t x; scanf(\"%hx\", &x);}" always "void f(){uintmax_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1231
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1231 always 1231
  "void f(){std::size_t x; scanf(\"%hx\", &x);}" always "void f(){std::size_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1232
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1232 always 1232
  "void f(){std::ssize_t x; scanf(\"%hx\", &x);}" always "void f(){std::ssize_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1233
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1233 always 1233
  "void f(){std::ptrdiff_t x; scanf(\"%hx\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1234
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1234 always 1234
  "void f(){std::intptr_t x; scanf(\"%hx\", &x);}" always "void f(){std::intptr_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1235
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1235 always 1235
  "void f(){std::uintptr_t x; scanf(\"%hx\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%hx\", &x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1237
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1237 always 1237
  "void f(){bool x; scanf(\"%hd\", &x);}" always "void f(){bool x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'bool *'.\n"
Line 1238
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1238 always 1238
  "void f(){char x; scanf(\"%hd\", &x);}" always "void f(){char x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'char *'.\n"
Line 1239
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1239 always 1239
  "void f(){signed char x; scanf(\"%hd\", &x);}" always "void f(){signed char x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'signed char *'.\n"
Line 1240
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1240 always 1240
  "void f(){unsigned char x; scanf(\"%hd\", &x);}" always "void f(){unsigned char x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'unsigned char *'.\n"
Line 1241
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1241 always 1241
  "void f(){signed short x; scanf(\"%hd\", &x);}" always "void f(){signed short x; scanf(\"%hd\", &x);}"
Line 1242
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1242 always 1242
  "void f(){unsigned short x; scanf(\"%hd\", &x);}" always "void f(){unsigned short x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'unsigned short *'.\n"
Line 1243
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1243 always 1243
  "void f(){signed int x; scanf(\"%hd\", &x);}" always "void f(){signed int x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'signed int *'.\n"
Line 1244
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1244 always 1244
  "void f(){unsigned int x; scanf(\"%hd\", &x);}" always "void f(){unsigned int x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'unsigned int *'.\n"
Line 1245
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1245 always 1245
  "void f(){signed long x; scanf(\"%hd\", &x);}" always "void f(){signed long x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'signed long *'.\n"
Line 1246
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1246 always 1246
  "void f(){void * x; scanf(\"%hd\", &x);}" always "void f(){void * x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %hd in format string (no. 1) requires 'short *' but the argument type is 'void * *'.\n"
Line 1247
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1247 always 1247
  "void f(){size_t x; scanf(\"%hd\", &x);}" always "void f(){size_t x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1248
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1248 always 1248
  "void f(){ssize_t x; scanf(\"%hd\", &x);}" always "void f(){ssize_t x; scanf(\"%hd\", &x);}"
  "[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hd in format string (no. 1) requires 'short *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1250
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1250 always 1250
  "void f(){bool x; scanf(\"%hhu\", &x);}" always "void f(){bool x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'bool *'.\n"
Line 1251
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1251 always 1251
  "void f(){char x; scanf(\"%hhu\", &x);}" always "void f(){char x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'char *'.\n"
Line 1252
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1252 always 1252
  "void f(){signed char x; scanf(\"%hhu\", &x);}" always "void f(){signed char x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed char *'.\n"
Line 1253
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1253 always 1253
  "void f(){unsigned char x; scanf(\"%hhu\", &x);}" always "void f(){unsigned char x; scanf(\"%hhu\", &x);}"
Line 1254
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1254 always 1254
  "void f(){signed short x; scanf(\"%hhu\", &x);}" always "void f(){signed short x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed short *'.\n"
Line 1255
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1255 always 1255
  "void f(){unsigned short x; scanf(\"%hhu\", &x);}" always "void f(){unsigned short x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned short *'.\n"
Line 1256
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1256 always 1256
  "void f(){signed int x; scanf(\"%hhu\", &x);}" always "void f(){signed int x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed int *'.\n"
Line 1257
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1257 always 1257
  "void f(){unsigned int x; scanf(\"%hhu\", &x);}" always "void f(){unsigned int x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned int *'.\n"
Line 1258
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1258 always 1258
  "void f(){signed long x; scanf(\"%hhu\", &x);}" always "void f(){signed long x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long *'.\n"
Line 1259
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1259 always 1259
  "void f(){unsigned long x; scanf(\"%hhu\", &x);}" always "void f(){unsigned long x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long *'.\n"
Line 1260
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1260 always 1260
  "void f(){signed long long x; scanf(\"%hhu\", &x);}" always "void f(){signed long long x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long long *'.\n"
Line 1261
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1261 always 1261
  "void f(){unsigned long long x; scanf(\"%hhu\", &x);}" always "void f(){unsigned long long x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long long *'.\n"
Line 1262
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1262 always 1262
  "void f(){float x; scanf(\"%hhu\", &x);}" always "void f(){float x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'float *'.\n"
Line 1263
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1263 always 1263
  "void f(){double x; scanf(\"%hhu\", &x);}" always "void f(){double x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'double *'.\n"
Line 1264
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1264 always 1264
  "void f(){long double x; scanf(\"%hhu\", &x);}" always "void f(){long double x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'long double *'.\n"
Line 1265
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1265 always 1265
  "void f(){void * x; scanf(\"%hhu\", &x);}" always "void f(){void * x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'void * *'.\n"
Line 1266
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1266 always 1266
  "void f(){size_t x; scanf(\"%hhu\", &x);}" always "void f(){size_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1267
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1267 always 1267
  "void f(){ssize_t x; scanf(\"%hhu\", &x);}" always "void f(){ssize_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1268
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1268 always 1268
  "void f(){ptrdiff_t x; scanf(\"%hhu\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1269
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1269 always 1269
  "void f(){unsigned ptrdiff_t x; scanf(\"%hhu\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1270
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1270 always 1270
  "void f(){intmax_t x; scanf(\"%hhu\", &x);}" always "void f(){intmax_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1271
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1271 always 1271
  "void f(){uintmax_t x; scanf(\"%hhu\", &x);}" always "void f(){uintmax_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1272
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1272 always 1272
  "void f(){std::size_t x; scanf(\"%hhu\", &x);}" always "void f(){std::size_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1273
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1273 always 1273
  "void f(){std::ssize_t x; scanf(\"%hhu\", &x);}" always "void f(){std::ssize_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1274
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1274 always 1274
  "void f(){std::ptrdiff_t x; scanf(\"%hhu\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1275
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1275 always 1275
  "void f(){std::intptr_t x; scanf(\"%hhu\", &x);}" always "void f(){std::intptr_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1276
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1276 always 1276
  "void f(){std::uintptr_t x; scanf(\"%hhu\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%hhu\", &x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1278
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1278 always 1278
  "void f(){bool x; scanf(\"%hhx\", &x);}" always "void f(){bool x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'bool *'.\n"
Line 1279
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1279 always 1279
  "void f(){char x; scanf(\"%hhx\", &x);}" always "void f(){char x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'char *'.\n"
Line 1280
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1280 always 1280
  "void f(){signed char x; scanf(\"%hhx\", &x);}" always "void f(){signed char x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed char *'.\n"
Line 1281
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1281 always 1281
  "void f(){unsigned char x; scanf(\"%hhx\", &x);}" always "void f(){unsigned char x; scanf(\"%hhx\", &x);}"
Line 1282
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1282 always 1282
  "void f(){signed short x; scanf(\"%hhx\", &x);}" always "void f(){signed short x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed short *'.\n"
Line 1283
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1283 always 1283
  "void f(){unsigned short x; scanf(\"%hhx\", &x);}" always "void f(){unsigned short x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned short *'.\n"
Line 1284
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1284 always 1284
  "void f(){signed int x; scanf(\"%hhx\", &x);}" always "void f(){signed int x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed int *'.\n"
Line 1285
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1285 always 1285
  "void f(){unsigned int x; scanf(\"%hhx\", &x);}" always "void f(){unsigned int x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned int *'.\n"
Line 1286
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1286 always 1286
  "void f(){signed long x; scanf(\"%hhx\", &x);}" always "void f(){signed long x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long *'.\n"
Line 1287
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1287 always 1287
  "void f(){unsigned long x; scanf(\"%hhx\", &x);}" always "void f(){unsigned long x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long *'.\n"
Line 1288
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1288 always 1288
  "void f(){signed long long x; scanf(\"%hhx\", &x);}" always "void f(){signed long long x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'signed long long *'.\n"
Line 1289
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1289 always 1289
  "void f(){unsigned long long x; scanf(\"%hhx\", &x);}" always "void f(){unsigned long long x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned long long *'.\n"
Line 1290
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1290 always 1290
  "void f(){float x; scanf(\"%hhx\", &x);}" always "void f(){float x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'float *'.\n"
Line 1291
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1291 always 1291
  "void f(){double x; scanf(\"%hhx\", &x);}" always "void f(){double x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'double *'.\n"
Line 1292
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1292 always 1292
  "void f(){long double x; scanf(\"%hhx\", &x);}" always "void f(){long double x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'long double *'.\n"
Line 1293
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1293 always 1293
  "void f(){void * x; scanf(\"%hhx\", &x);}" always "void f(){void * x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'void * *'.\n"
Line 1294
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1294 always 1294
  "void f(){size_t x; scanf(\"%hhx\", &x);}" always "void f(){size_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1295
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1295 always 1295
  "void f(){ssize_t x; scanf(\"%hhx\", &x);}" always "void f(){ssize_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1296
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1296 always 1296
  "void f(){ptrdiff_t x; scanf(\"%hhx\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1297
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1297 always 1297
  "void f(){unsigned ptrdiff_t x; scanf(\"%hhx\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1298
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1298 always 1298
  "void f(){intmax_t x; scanf(\"%hhx\", &x);}" always "void f(){intmax_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1299
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1299 always 1299
  "void f(){uintmax_t x; scanf(\"%hhx\", &x);}" always "void f(){uintmax_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1300
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1300 always 1300
  "void f(){std::size_t x; scanf(\"%hhx\", &x);}" always "void f(){std::size_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1301
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1301 always 1301
  "void f(){std::ssize_t x; scanf(\"%hhx\", &x);}" always "void f(){std::ssize_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1302
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1302 always 1302
  "void f(){std::ptrdiff_t x; scanf(\"%hhx\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1303
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1303 always 1303
  "void f(){std::intptr_t x; scanf(\"%hhx\", &x);}" always "void f(){std::intptr_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1304
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1304 always 1304
  "void f(){std::uintptr_t x; scanf(\"%hhx\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%hhx\", &x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1306
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1306 always 1306
  "void f(){bool x; scanf(\"%hhd\", &x);}" always "void f(){bool x; scanf(\"%hhd\", &x);}"
  "[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'bool *'.\n"
Line 1307
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1307 always 1307
  "void f(){char x; scanf(\"%hhd\", &x);}" always "void f(){char x; scanf(\"%hhd\", &x);}"
Line 1308
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1308 always 1308
  "void f(){signed char x; scanf(\"%hhd\", &x);}" always "void f(){signed char x; scanf(\"%hhd\", &x);}"
Line 1309
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1309 always 1309
  "void f(){unsigned char x; scanf(\"%hhd\", &x);}" always "void f(){unsigned char x; scanf(\"%hhd\", &x);}"
  "[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'unsigned char *'.\n"
Line 1310
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1310 always 1310
  "void f(){signed short x; scanf(\"%hhd\", &x);}" always "void f(){signed short x; scanf(\"%hhd\", &x);}"
  "[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'signed short *'.\n"
Line 1311
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1311 always 1311
  "void f(){void * x; scanf(\"%hhd\", &x);}" always "void f(){void * x; scanf(\"%hhd\", &x);}"
  "[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %hhd in format string (no. 1) requires 'char *' but the argument type is 'void * *'.\n"
Line 1312
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1312 always 1312
  "void f(){size_t x; scanf(\"%hhd\", &x);}" always "void f(){size_t x; scanf(\"%hhd\", &x);}"
  "[test.cpp:1]: (portability) %hhd in format string (no. 1) requires 'char *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %hhd in format string (no. 1) requires 'char *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %hhd in format string (no. 1) requires 'char *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %hhd in format string (no. 1) requires 'char *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1314
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1314 always 1314
  "void f(){bool x; scanf(\"%Lu\", &x);}" always "void f(){bool x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n"
Line 1315
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1315 always 1315
  "void f(){char x; scanf(\"%Lu\", &x);}" always "void f(){char x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n"
Line 1316
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1316 always 1316
  "void f(){signed char x; scanf(\"%Lu\", &x);}" always "void f(){signed char x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n"
Line 1317
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1317 always 1317
  "void f(){unsigned char x; scanf(\"%Lu\", &x);}" always "void f(){unsigned char x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n"
Line 1318
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1318 always 1318
  "void f(){signed short x; scanf(\"%Lu\", &x);}" always "void f(){signed short x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n"
Line 1319
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1319 always 1319
  "void f(){unsigned short x; scanf(\"%Lu\", &x);}" always "void f(){unsigned short x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n"
Line 1320
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1320 always 1320
  "void f(){signed int x; scanf(\"%Lu\", &x);}" always "void f(){signed int x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n"
Line 1321
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1321 always 1321
  "void f(){unsigned int x; scanf(\"%Lu\", &x);}" always "void f(){unsigned int x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n"
Line 1322
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1322 always 1322
  "void f(){signed long x; scanf(\"%Lu\", &x);}" always "void f(){signed long x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n"
Line 1323
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1323 always 1323
  "void f(){unsigned long x; scanf(\"%Lu\", &x);}" always "void f(){unsigned long x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n"
Line 1324
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1324 always 1324
  "void f(){signed long long x; scanf(\"%Lu\", &x);}" always "void f(){signed long long x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n"
Line 1325
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1325 always 1325
  "void f(){unsigned long long x; scanf(\"%Lu\", &x);}" always "void f(){unsigned long long x; scanf(\"%Lu\", &x);}"
Line 1326
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1326 always 1326
  "void f(){float x; scanf(\"%Lu\", &x);}" always "void f(){float x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n"
Line 1327
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1327 always 1327
  "void f(){double x; scanf(\"%Lu\", &x);}" always "void f(){double x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n"
Line 1328
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1328 always 1328
  "void f(){long double x; scanf(\"%Lu\", &x);}" always "void f(){long double x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n"
Line 1329
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1329 always 1329
  "void f(){void * x; scanf(\"%Lu\", &x);}" always "void f(){void * x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n"
Line 1330
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1330 always 1330
  "void f(){size_t x; scanf(\"%Lu\", &x);}" always "void f(){size_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1331
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1331 always 1331
  "void f(){ssize_t x; scanf(\"%Lu\", &x);}" always "void f(){ssize_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1332
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1332 always 1332
  "void f(){ptrdiff_t x; scanf(\"%Lu\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1333
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1333 always 1333
  "void f(){unsigned ptrdiff_t x; scanf(\"%Lu\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
Line 1334
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1334 always 1334
  "void f(){intmax_t x; scanf(\"%Lu\", &x);}" always "void f(){intmax_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1335
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1335 always 1335
  "void f(){uintmax_t x; scanf(\"%Lu\", &x);}" always "void f(){uintmax_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1336
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1336 always 1336
  "void f(){intptr_t x; scanf(\"%Lu\", &x);}" always "void f(){intptr_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1337
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1337 always 1337
  "void f(){uintptr_t x; scanf(\"%Lu\", &x);}" always "void f(){uintptr_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
Line 1338
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1338 always 1338
  "void f(){std::size_t x; scanf(\"%Lu\", &x);}" always "void f(){std::size_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1339
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1339 always 1339
  "void f(){std::ssize_t x; scanf(\"%Lu\", &x);}" always "void f(){std::ssize_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1340
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1340 always 1340
  "void f(){std::ptrdiff_t x; scanf(\"%Lu\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1341
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1341 always 1341
  "void f(){std::intmax_t x; scanf(\"%Lu\", &x);}" always "void f(){std::intmax_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1342
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1342 always 1342
  "void f(){std::uintmax_t x; scanf(\"%Lu\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1343
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1343 always 1343
  "void f(){std::intptr_t x; scanf(\"%Lu\", &x);}" always "void f(){std::intptr_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1344
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1344 always 1344
  "void f(){std::uintptr_t x; scanf(\"%Lu\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%Lu\", &x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
Line 1346
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1346 always 1346
  "void f(){bool x; scanf(\"%Lx\", &x);}" always "void f(){bool x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'bool *'.\n"
Line 1347
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1347 always 1347
  "void f(){char x; scanf(\"%Lx\", &x);}" always "void f(){char x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'char *'.\n"
Line 1348
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1348 always 1348
  "void f(){signed char x; scanf(\"%Lx\", &x);}" always "void f(){signed char x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed char *'.\n"
Line 1349
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1349 always 1349
  "void f(){unsigned char x; scanf(\"%Lx\", &x);}" always "void f(){unsigned char x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned char *'.\n"
Line 1350
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1350 always 1350
  "void f(){signed short x; scanf(\"%Lx\", &x);}" always "void f(){signed short x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed short *'.\n"
Line 1351
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1351 always 1351
  "void f(){unsigned short x; scanf(\"%Lx\", &x);}" always "void f(){unsigned short x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned short *'.\n"
Line 1352
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1352 always 1352
  "void f(){signed int x; scanf(\"%Lx\", &x);}" always "void f(){signed int x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed int *'.\n"
Line 1353
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1353 always 1353
  "void f(){unsigned int x; scanf(\"%Lx\", &x);}" always "void f(){unsigned int x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned int *'.\n"
Line 1354
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1354 always 1354
  "void f(){signed long x; scanf(\"%Lx\", &x);}" always "void f(){signed long x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long *'.\n"
Line 1355
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1355 always 1355
  "void f(){unsigned long x; scanf(\"%Lx\", &x);}" always "void f(){unsigned long x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned long *'.\n"
Line 1356
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1356 always 1356
  "void f(){signed long long x; scanf(\"%Lx\", &x);}" always "void f(){signed long long x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'signed long long *'.\n"
Line 1357
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1357 always 1357
  "void f(){unsigned long long x; scanf(\"%Lx\", &x);}" always "void f(){unsigned long long x; scanf(\"%Lx\", &x);}"
Line 1358
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1358 always 1358
  "void f(){float x; scanf(\"%Lx\", &x);}" always "void f(){float x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'float *'.\n"
Line 1359
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1359 always 1359
  "void f(){double x; scanf(\"%Lx\", &x);}" always "void f(){double x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'double *'.\n"
Line 1360
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1360 always 1360
  "void f(){long double x; scanf(\"%Lx\", &x);}" always "void f(){long double x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'long double *'.\n"
Line 1361
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1361 always 1361
  "void f(){void * x; scanf(\"%Lx\", &x);}" always "void f(){void * x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'void * *'.\n"
Line 1362
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1362 always 1362
  "void f(){size_t x; scanf(\"%Lx\", &x);}" always "void f(){size_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1363
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1363 always 1363
  "void f(){ssize_t x; scanf(\"%Lx\", &x);}" always "void f(){ssize_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1364
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1364 always 1364
  "void f(){ptrdiff_t x; scanf(\"%Lx\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1365
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1365 always 1365
  "void f(){unsigned ptrdiff_t x; scanf(\"%Lx\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
Line 1366
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1366 always 1366
  "void f(){intmax_t x; scanf(\"%Lx\", &x);}" always "void f(){intmax_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1367
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1367 always 1367
  "void f(){uintmax_t x; scanf(\"%Lx\", &x);}" always "void f(){uintmax_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1368
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1368 always 1368
  "void f(){intptr_t x; scanf(\"%Lx\", &x);}" always "void f(){intptr_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1369
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1369 always 1369
  "void f(){uintptr_t x; scanf(\"%Lx\", &x);}" always "void f(){uintptr_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
Line 1370
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1370 always 1370
  "void f(){std::size_t x; scanf(\"%Lx\", &x);}" always "void f(){std::size_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1371
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1371 always 1371
  "void f(){std::ssize_t x; scanf(\"%Lx\", &x);}" always "void f(){std::ssize_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1372
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1372 always 1372
  "void f(){std::ptrdiff_t x; scanf(\"%Lx\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1373
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1373 always 1373
  "void f(){std::intmax_t x; scanf(\"%Lx\", &x);}" always "void f(){std::intmax_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1374
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1374 always 1374
  "void f(){std::uintmax_t x; scanf(\"%Lx\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1375
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1375 always 1375
  "void f(){std::intptr_t x; scanf(\"%Lx\", &x);}" always "void f(){std::intptr_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1376
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1376 always 1376
  "void f(){std::uintptr_t x; scanf(\"%Lx\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%Lx\", &x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
Line 1378
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1378 always 1378
  "void f(){bool x; scanf(\"%Ld\", &x);}" always "void f(){bool x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'bool *'.\n"
Line 1379
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1379 always 1379
  "void f(){char x; scanf(\"%Ld\", &x);}" always "void f(){char x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'char *'.\n"
Line 1380
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1380 always 1380
  "void f(){signed char x; scanf(\"%Ld\", &x);}" always "void f(){signed char x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed char *'.\n"
Line 1381
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1381 always 1381
  "void f(){unsigned char x; scanf(\"%Ld\", &x);}" always "void f(){unsigned char x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned char *'.\n"
Line 1382
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1382 always 1382
  "void f(){signed short x; scanf(\"%Ld\", &x);}" always "void f(){signed short x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed short *'.\n"
Line 1383
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1383 always 1383
  "void f(){unsigned short x; scanf(\"%Ld\", &x);}" always "void f(){unsigned short x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned short *'.\n"
Line 1384
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1384 always 1384
  "void f(){signed int x; scanf(\"%Ld\", &x);}" always "void f(){signed int x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed int *'.\n"
Line 1385
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1385 always 1385
  "void f(){unsigned int x; scanf(\"%Ld\", &x);}" always "void f(){unsigned int x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned int *'.\n"
Line 1386
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1386 always 1386
  "void f(){signed long x; scanf(\"%Ld\", &x);}" always "void f(){signed long x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed long *'.\n"
Line 1387
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1387 always 1387
  "void f(){unsigned long x; scanf(\"%Ld\", &x);}" always "void f(){unsigned long x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned long *'.\n"
Line 1388
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1388 always 1388
  "void f(){signed long long x; scanf(\"%Ld\", &x);}" always "void f(){signed long long x; scanf(\"%Ld\", &x);}"
Line 1389
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1389 always 1389
  "void f(){unsigned long long x; scanf(\"%Ld\", &x);}" always "void f(){unsigned long long x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned long long *'.\n"
Line 1390
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1390 always 1390
  "void f(){float x; scanf(\"%Ld\", &x);}" always "void f(){float x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'float *'.\n"
Line 1391
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1391 always 1391
  "void f(){double x; scanf(\"%Ld\", &x);}" always "void f(){double x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'double *'.\n"
Line 1392
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1392 always 1392
  "void f(){long double x; scanf(\"%Ld\", &x);}" always "void f(){long double x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'long double *'.\n"
Line 1393
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1393 always 1393
  "void f(){void * x; scanf(\"%Ld\", &x);}" always "void f(){void * x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'void * *'.\n"
Line 1394
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1394 always 1394
  "void f(){size_t x; scanf(\"%Ld\", &x);}" always "void f(){size_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1395
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1395 always 1395
  "void f(){ssize_t x; scanf(\"%Ld\", &x);}" always "void f(){ssize_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
Line 1396
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1396 always 1396
  "void f(){ptrdiff_t x; scanf(\"%Ld\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
Line 1397
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1397 always 1397
  "void f(){unsigned ptrdiff_t x; scanf(\"%Ld\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1398
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1398 always 1398
  "void f(){intmax_t x; scanf(\"%Ld\", &x);}" always "void f(){intmax_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
Line 1399
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1399 always 1399
  "void f(){uintmax_t x; scanf(\"%Ld\", &x);}" always "void f(){uintmax_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1400
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1400 always 1400
  "void f(){std::size_t x; scanf(\"%Ld\", &x);}" always "void f(){std::size_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1401
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1401 always 1401
  "void f(){std::ssize_t x; scanf(\"%Ld\", &x);}" always "void f(){std::ssize_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
Line 1402
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1402 always 1402
  "void f(){std::ptrdiff_t x; scanf(\"%Ld\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
Line 1403
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1403 always 1403
  "void f(){std::intptr_t x; scanf(\"%Ld\", &x);}" always "void f(){std::intptr_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
Line 1404
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1404 always 1404
  "void f(){std::uintptr_t x; scanf(\"%Ld\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%Ld\", &x);}"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1406
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1406 always 1406
  "void foo() {\n    scanf(\"%Ld\", \"s3\");\n    scanf(\"%Ld\", L\"s5W\");\n}" always "void foo() {\n    scanf(\"%Ld\", \"s3\");\n    scanf(\"%Ld\", L\"s5W\");\n}"
  true always 1
Line 1410
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1410 always 1410
  "[test.cpp:2]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:2]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'const wchar_t *'.\n"
Line 1413
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1413 always 1413
  "void foo(int i) {\n    scanf(\"%Ld\", i);\n}" always "void foo(int i) {\n    scanf(\"%Ld\", i);\n}"
  true always 1
Line 1416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1416 always 1416
  "[test.cpp:2]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %Ld in format string (no. 1) requires 'long long *' but the argument type is 'signed int'.\n"
Line 1418
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1418 always 1418
  "void f(){bool x; scanf(\"%ju\", &x);}" always "void f(){bool x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'bool *'.\n"
Line 1419
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1419 always 1419
  "void f(){char x; scanf(\"%ju\", &x);}" always "void f(){char x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'char *'.\n"
Line 1420
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1420 always 1420
  "void f(){signed char x; scanf(\"%ju\", &x);}" always "void f(){signed char x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed char *'.\n"
Line 1421
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1421 always 1421
  "void f(){unsigned char x; scanf(\"%ju\", &x);}" always "void f(){unsigned char x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned char *'.\n"
Line 1422
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1422 always 1422
  "void f(){signed short x; scanf(\"%ju\", &x);}" always "void f(){signed short x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed short *'.\n"
Line 1423
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1423 always 1423
  "void f(){unsigned short x; scanf(\"%ju\", &x);}" always "void f(){unsigned short x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned short *'.\n"
Line 1424
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1424 always 1424
  "void f(){signed int x; scanf(\"%ju\", &x);}" always "void f(){signed int x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed int *'.\n"
Line 1425
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1425 always 1425
  "void f(){unsigned int x; scanf(\"%ju\", &x);}" always "void f(){unsigned int x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned int *'.\n"
Line 1426
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1426 always 1426
  "void f(){signed long x; scanf(\"%ju\", &x);}" always "void f(){signed long x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long *'.\n"
Line 1427
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1427 always 1427
  "void f(){unsigned long x; scanf(\"%ju\", &x);}" always "void f(){unsigned long x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long *'.\n"
Line 1428
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1428 always 1428
  "void f(){signed long long x; scanf(\"%ju\", &x);}" always "void f(){signed long long x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long long *'.\n"
Line 1429
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1429 always 1429
  "void f(){unsigned long long x; scanf(\"%ju\", &x);}" always "void f(){unsigned long long x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long long *'.\n"
Line 1430
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1430 always 1430
  "void f(){float x; scanf(\"%ju\", &x);}" always "void f(){float x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'float *'.\n"
Line 1431
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1431 always 1431
  "void f(){double x; scanf(\"%ju\", &x);}" always "void f(){double x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'double *'.\n"
Line 1432
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1432 always 1432
  "void f(){long double x; scanf(\"%ju\", &x);}" always "void f(){long double x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'long double *'.\n"
Line 1433
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1433 always 1433
  "void f(){void * x; scanf(\"%ju\", &x);}" always "void f(){void * x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'void * *'.\n"
Line 1434
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1434 always 1434
  "void f(){size_t x; scanf(\"%ju\", &x);}" always "void f(){size_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1435
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1435 always 1435
  "void f(){ssize_t x; scanf(\"%ju\", &x);}" always "void f(){ssize_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1436
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1436 always 1436
  "void f(){ptrdiff_t x; scanf(\"%ju\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1437
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1437 always 1437
  "void f(){unsigned ptrdiff_t x; scanf(\"%ju\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1438
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1438 always 1438
  "void f(){intmax_t x; scanf(\"%ju\", &x);}" always "void f(){intmax_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1439
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1439 always 1439
  "void f(){uintmax_t x; scanf(\"%ju\", &x);}" always "void f(){uintmax_t x; scanf(\"%ju\", &x);}"
Line 1440
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1440 always 1440
  "void f(){std::size_t x; scanf(\"%ju\", &x);}" always "void f(){std::size_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1441
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1441 always 1441
  "void f(){std::ssize_t x; scanf(\"%ju\", &x);}" always "void f(){std::ssize_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1442
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1442 always 1442
  "void f(){std::ptrdiff_t x; scanf(\"%ju\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1443
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1443 always 1443
  "void f(){std::intmax_t x; scanf(\"%ju\", &x);}" always "void f(){std::intmax_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1444
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1444 always 1444
  "void f(){std::uintmax_t x; scanf(\"%ju\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%ju\", &x);}"
Line 1445
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1445 always 1445
  "void f(){std::intptr_t x; scanf(\"%ju\", &x);}" always "void f(){std::intptr_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1446
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1446 always 1446
  "void f(){std::uintptr_t x; scanf(\"%ju\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%ju\", &x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1448
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1448 always 1448
  "void f(){bool x; scanf(\"%jx\", &x);}" always "void f(){bool x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'bool *'.\n"
Line 1449
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1449 always 1449
  "void f(){char x; scanf(\"%jx\", &x);}" always "void f(){char x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'char *'.\n"
Line 1450
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1450 always 1450
  "void f(){signed char x; scanf(\"%jx\", &x);}" always "void f(){signed char x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed char *'.\n"
Line 1451
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1451 always 1451
  "void f(){unsigned char x; scanf(\"%jx\", &x);}" always "void f(){unsigned char x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned char *'.\n"
Line 1452
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1452 always 1452
  "void f(){signed short x; scanf(\"%jx\", &x);}" always "void f(){signed short x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed short *'.\n"
Line 1453
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1453 always 1453
  "void f(){unsigned short x; scanf(\"%jx\", &x);}" always "void f(){unsigned short x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned short *'.\n"
Line 1454
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1454 always 1454
  "void f(){signed int x; scanf(\"%jx\", &x);}" always "void f(){signed int x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed int *'.\n"
Line 1455
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1455 always 1455
  "void f(){unsigned int x; scanf(\"%jx\", &x);}" always "void f(){unsigned int x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned int *'.\n"
Line 1456
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1456 always 1456
  "void f(){signed long x; scanf(\"%jx\", &x);}" always "void f(){signed long x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long *'.\n"
Line 1457
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1457 always 1457
  "void f(){unsigned long x; scanf(\"%jx\", &x);}" always "void f(){unsigned long x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long *'.\n"
Line 1458
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1458 always 1458
  "void f(){signed long long x; scanf(\"%jx\", &x);}" always "void f(){signed long long x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'signed long long *'.\n"
Line 1459
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1459 always 1459
  "void f(){unsigned long long x; scanf(\"%jx\", &x);}" always "void f(){unsigned long long x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned long long *'.\n"
Line 1460
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1460 always 1460
  "void f(){float x; scanf(\"%jx\", &x);}" always "void f(){float x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'float *'.\n"
Line 1461
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1461 always 1461
  "void f(){double x; scanf(\"%jx\", &x);}" always "void f(){double x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'double *'.\n"
Line 1462
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1462 always 1462
  "void f(){long double x; scanf(\"%jx\", &x);}" always "void f(){long double x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'long double *'.\n"
Line 1463
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1463 always 1463
  "void f(){void * x; scanf(\"%jx\", &x);}" always "void f(){void * x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'void * *'.\n"
Line 1464
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1464 always 1464
  "void f(){size_t x; scanf(\"%jx\", &x);}" always "void f(){size_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1465
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1465 always 1465
  "void f(){ssize_t x; scanf(\"%jx\", &x);}" always "void f(){ssize_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1466
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1466 always 1466
  "void f(){ptrdiff_t x; scanf(\"%jx\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1467
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1467 always 1467
  "void f(){unsigned ptrdiff_t x; scanf(\"%jx\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1468
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1468 always 1468
  "void f(){intmax_t x; scanf(\"%jx\", &x);}" always "void f(){intmax_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1469
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1469 always 1469
  "void f(){uintmax_t x; scanf(\"%jx\", &x);}" always "void f(){uintmax_t x; scanf(\"%jx\", &x);}"
Line 1470
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1470 always 1470
  "void f(){std::size_t x; scanf(\"%jx\", &x);}" always "void f(){std::size_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1471
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1471 always 1471
  "void f(){std::ssize_t x; scanf(\"%jx\", &x);}" always "void f(){std::ssize_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1472
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1472 always 1472
  "void f(){std::ptrdiff_t x; scanf(\"%jx\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1473
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1473 always 1473
  "void f(){std::intmax_t x; scanf(\"%jx\", &x);}" always "void f(){std::intmax_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1474
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1474 always 1474
  "void f(){std::uintmax_t x; scanf(\"%jx\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%jx\", &x);}"
Line 1475
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1475 always 1475
  "void f(){std::intptr_t x; scanf(\"%jx\", &x);}" always "void f(){std::intptr_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1476
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1476 always 1476
  "void f(){std::uintptr_t x; scanf(\"%jx\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%jx\", &x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1478
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1478 always 1478
  "void f(){long double x; scanf(\"%jd\", &x);}" always "void f(){long double x; scanf(\"%jd\", &x);}"
  "[test.cpp:1]: (warning) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'long double *'.\n"
Line 1479
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1479 always 1479
  "void f(){void * x; scanf(\"%jd\", &x);}" always "void f(){void * x; scanf(\"%jd\", &x);}"
  "[test.cpp:1]: (warning) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'void * *'.\n"
Line 1480
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1480 always 1480
  "void f(){size_t x; scanf(\"%jd\", &x);}" always "void f(){size_t x; scanf(\"%jd\", &x);}"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1481
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1481 always 1481
  "void f(){unsigned ptrdiff_t x; scanf(\"%jd\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%jd\", &x);}"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1482
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1482 always 1482
  "void f(){std::ssize_t x; scanf(\"%jd\", &x);}" always "void f(){std::ssize_t x; scanf(\"%jd\", &x);}"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1483
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1483 always 1483
  "void f(){std::ptrdiff_t x; scanf(\"%jd\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%jd\", &x);}"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1484
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1484 always 1484
  "void f(){intmax_t x; scanf(\"%jd\", &x);}" always "void f(){intmax_t x; scanf(\"%jd\", &x);}"
Line 1485
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1485 always 1485
  "void f(){uintmax_t x; scanf(\"%jd\", &x);}" always "void f(){uintmax_t x; scanf(\"%jd\", &x);}"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %jd in format string (no. 1) requires 'intmax_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1486
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1486 always 1486
  "void f(){std::intmax_t x; scanf(\"%jd\", &x);}" always "void f(){std::intmax_t x; scanf(\"%jd\", &x);}"
Line 1488
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1488 always 1488
  "void f(){bool x; scanf(\"%zu\", &x);}" always "void f(){bool x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n"
Line 1489
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1489 always 1489
  "void f(){char x; scanf(\"%zu\", &x);}" always "void f(){char x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n"
Line 1490
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1490 always 1490
  "void f(){signed char x; scanf(\"%zu\", &x);}" always "void f(){signed char x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n"
Line 1491
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1491 always 1491
  "void f(){unsigned char x; scanf(\"%zu\", &x);}" always "void f(){unsigned char x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n"
Line 1492
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1492 always 1492
  "void f(){signed short x; scanf(\"%zu\", &x);}" always "void f(){signed short x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n"
Line 1493
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1493 always 1493
  "void f(){unsigned short x; scanf(\"%zu\", &x);}" always "void f(){unsigned short x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n"
Line 1494
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1494 always 1494
  "void f(){signed int x; scanf(\"%zu\", &x);}" always "void f(){signed int x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n"
Line 1495
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1495 always 1495
  "void f(){unsigned int x; scanf(\"%zu\", &x);}" always "void f(){unsigned int x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n"
Line 1496
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1496 always 1496
  "void f(){signed long x; scanf(\"%zu\", &x);}" always "void f(){signed long x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n"
Line 1497
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1497 always 1497
  "void f(){unsigned long x; scanf(\"%zu\", &x);}" always "void f(){unsigned long x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n"
Line 1498
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1498 always 1498
  "void f(){signed long long x; scanf(\"%zu\", &x);}" always "void f(){signed long long x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n"
Line 1499
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1499 always 1499
  "void f(){unsigned long long x; scanf(\"%zu\", &x);}" always "void f(){unsigned long long x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n"
Line 1500
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1500 always 1500
  "void f(){float x; scanf(\"%zu\", &x);}" always "void f(){float x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n"
Line 1501
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1501 always 1501
  "void f(){double x; scanf(\"%zu\", &x);}" always "void f(){double x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n"
Line 1502
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1502 always 1502
  "void f(){long double x; scanf(\"%zu\", &x);}" always "void f(){long double x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n"
Line 1503
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1503 always 1503
  "void f(){void * x; scanf(\"%zu\", &x);}" always "void f(){void * x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n"
Line 1504
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1504 always 1504
  "void f(){size_t x; scanf(\"%zu\", &x);}" always "void f(){size_t x; scanf(\"%zu\", &x);}"
Line 1505
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1505 always 1505
  "void f(){ssize_t x; scanf(\"%zu\", &x);}" always "void f(){ssize_t x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1506
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1506 always 1506
  "void f(){ptrdiff_t x; scanf(\"%zu\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1507
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1507 always 1507
  "void f(){unsigned ptrdiff_t x; scanf(\"%zu\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1508
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1508 always 1508
  "void f(){intmax_t x; scanf(\"%zu\", &x);}" always "void f(){intmax_t x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1509
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1509 always 1509
  "void f(){uintmax_t x; scanf(\"%zu\", &x);}" always "void f(){uintmax_t x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1510
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1510 always 1510
  "void f(){std::size_t x; scanf(\"%zu\", &x);}" always "void f(){std::size_t x; scanf(\"%zu\", &x);}"
Line 1511
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1511 always 1511
  "void f(){std::ssize_t x; scanf(\"%zu\", &x);}" always "void f(){std::ssize_t x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1512
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1512 always 1512
  "void f(){std::ptrdiff_t x; scanf(\"%zu\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1513
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1513 always 1513
  "void f(){std::intptr_t x; scanf(\"%zu\", &x);}" always "void f(){std::intptr_t x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1514
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1514 always 1514
  "void f(){std::uintptr_t x; scanf(\"%zu\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%zu\", &x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1516
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1516 always 1516
  "void f(){bool x; scanf(\"%zx\", &x);}" always "void f(){bool x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n"
Line 1517
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1517 always 1517
  "void f(){char x; scanf(\"%zx\", &x);}" always "void f(){char x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n"
Line 1518
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1518 always 1518
  "void f(){signed char x; scanf(\"%zx\", &x);}" always "void f(){signed char x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n"
Line 1519
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1519 always 1519
  "void f(){unsigned char x; scanf(\"%zx\", &x);}" always "void f(){unsigned char x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n"
Line 1520
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1520 always 1520
  "void f(){signed short x; scanf(\"%zx\", &x);}" always "void f(){signed short x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n"
Line 1521
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1521 always 1521
  "void f(){unsigned short x; scanf(\"%zx\", &x);}" always "void f(){unsigned short x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n"
Line 1522
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1522 always 1522
  "void f(){signed int x; scanf(\"%zx\", &x);}" always "void f(){signed int x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n"
Line 1523
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1523 always 1523
  "void f(){unsigned int x; scanf(\"%zx\", &x);}" always "void f(){unsigned int x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n"
Line 1524
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1524 always 1524
  "void f(){signed long x; scanf(\"%zx\", &x);}" always "void f(){signed long x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n"
Line 1525
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1525 always 1525
  "void f(){unsigned long x; scanf(\"%zx\", &x);}" always "void f(){unsigned long x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n"
Line 1526
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1526 always 1526
  "void f(){signed long long x; scanf(\"%zx\", &x);}" always "void f(){signed long long x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n"
Line 1527
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1527 always 1527
  "void f(){unsigned long long x; scanf(\"%zx\", &x);}" always "void f(){unsigned long long x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n"
Line 1528
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1528 always 1528
  "void f(){float x; scanf(\"%zx\", &x);}" always "void f(){float x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n"
Line 1529
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1529 always 1529
  "void f(){double x; scanf(\"%zx\", &x);}" always "void f(){double x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n"
Line 1530
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1530 always 1530
  "void f(){long double x; scanf(\"%zx\", &x);}" always "void f(){long double x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n"
Line 1531
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1531 always 1531
  "void f(){void * x; scanf(\"%zx\", &x);}" always "void f(){void * x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n"
Line 1532
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1532 always 1532
  "void f(){size_t x; scanf(\"%zx\", &x);}" always "void f(){size_t x; scanf(\"%zx\", &x);}"
Line 1533
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1533 always 1533
  "void f(){ssize_t x; scanf(\"%zx\", &x);}" always "void f(){ssize_t x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1534
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1534 always 1534
  "void f(){ptrdiff_t x; scanf(\"%zx\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1535
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1535 always 1535
  "void f(){unsigned ptrdiff_t x; scanf(\"%zx\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1536
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1536 always 1536
  "void f(){intmax_t x; scanf(\"%zx\", &x);}" always "void f(){intmax_t x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1537
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1537 always 1537
  "void f(){uintmax_t x; scanf(\"%zx\", &x);}" always "void f(){uintmax_t x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1538
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1538 always 1538
  "void f(){std::size_t x; scanf(\"%zx\", &x);}" always "void f(){std::size_t x; scanf(\"%zx\", &x);}"
Line 1539
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1539 always 1539
  "void f(){std::ssize_t x; scanf(\"%zx\", &x);}" always "void f(){std::ssize_t x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1540
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1540 always 1540
  "void f(){std::ptrdiff_t x; scanf(\"%zx\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1541
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1541 always 1541
  "void f(){std::intptr_t x; scanf(\"%zx\", &x);}" always "void f(){std::intptr_t x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1542
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1542 always 1542
  "void f(){std::uintptr_t x; scanf(\"%zx\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%zx\", &x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1544
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1544 always 1544
  "void f(){bool x; scanf(\"%zd\", &x);}" always "void f(){bool x; scanf(\"%zd\", &x);}"
  "[test.cpp:1]: (warning) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'bool *'.\n"
Line 1545
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1545 always 1545
  "void f(){signed short x; scanf(\"%zd\", &x);}" always "void f(){signed short x; scanf(\"%zd\", &x);}"
  "[test.cpp:1]: (warning) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'signed short *'.\n"
Line 1546
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1546 always 1546
  "void f(){void * x; scanf(\"%zd\", &x);}" always "void f(){void * x; scanf(\"%zd\", &x);}"
  "[test.cpp:1]: (warning) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'void * *'.\n"
Line 1547
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1547 always 1547
  "void f(){size_t x; scanf(\"%zd\", &x);}" always "void f(){size_t x; scanf(\"%zd\", &x);}"
  "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1548
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1548 always 1548
  "void f(){ssize_t x; scanf(\"%zd\", &x);}" always "void f(){ssize_t x; scanf(\"%zd\", &x);}"
Line 1549
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1549 always 1549
  "void f(){ptrdiff_t x; scanf(\"%zd\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%zd\", &x);}"
  "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1551
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1551 always 1551
  "void f(){size_t x; scanf(\"%zi\", &x);}" always "void f(){size_t x; scanf(\"%zi\", &x);}"
  "[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1553
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1553 always 1553
  "void f(){bool x; scanf(\"%tu\", &x);}" always "void f(){bool x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'bool *'.\n"
Line 1554
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1554 always 1554
  "void f(){char x; scanf(\"%tu\", &x);}" always "void f(){char x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'char *'.\n"
Line 1555
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1555 always 1555
  "void f(){signed char x; scanf(\"%tu\", &x);}" always "void f(){signed char x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed char *'.\n"
Line 1556
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1556 always 1556
  "void f(){unsigned char x; scanf(\"%tu\", &x);}" always "void f(){unsigned char x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned char *'.\n"
Line 1557
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1557 always 1557
  "void f(){signed short x; scanf(\"%tu\", &x);}" always "void f(){signed short x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed short *'.\n"
Line 1558
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1558 always 1558
  "void f(){unsigned short x; scanf(\"%tu\", &x);}" always "void f(){unsigned short x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned short *'.\n"
Line 1559
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1559 always 1559
  "void f(){signed int x; scanf(\"%tu\", &x);}" always "void f(){signed int x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed int *'.\n"
Line 1560
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1560 always 1560
  "void f(){unsigned int x; scanf(\"%tu\", &x);}" always "void f(){unsigned int x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned int *'.\n"
Line 1561
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1561 always 1561
  "void f(){signed long x; scanf(\"%tu\", &x);}" always "void f(){signed long x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long *'.\n"
Line 1562
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1562 always 1562
  "void f(){unsigned long x; scanf(\"%tu\", &x);}" always "void f(){unsigned long x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long *'.\n"
Line 1563
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1563 always 1563
  "void f(){signed long long x; scanf(\"%tu\", &x);}" always "void f(){signed long long x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long long *'.\n"
Line 1564
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1564 always 1564
  "void f(){unsigned long long x; scanf(\"%tu\", &x);}" always "void f(){unsigned long long x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long long *'.\n"
Line 1565
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1565 always 1565
  "void f(){float x; scanf(\"%tu\", &x);}" always "void f(){float x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'float *'.\n"
Line 1566
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1566 always 1566
  "void f(){double x; scanf(\"%tu\", &x);}" always "void f(){double x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'double *'.\n"
Line 1567
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1567 always 1567
  "void f(){long double x; scanf(\"%tu\", &x);}" always "void f(){long double x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'long double *'.\n"
Line 1568
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1568 always 1568
  "void f(){void * x; scanf(\"%tu\", &x);}" always "void f(){void * x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'void * *'.\n"
Line 1569
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1569 always 1569
  "void f(){size_t x; scanf(\"%tu\", &x);}" always "void f(){size_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1570
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1570 always 1570
  "void f(){ssize_t x; scanf(\"%tu\", &x);}" always "void f(){ssize_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1571
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1571 always 1571
  "void f(){ptrdiff_t x; scanf(\"%tu\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1572
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1572 always 1572
  "void f(){unsigned ptrdiff_t x; scanf(\"%tu\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%tu\", &x);}"
Line 1573
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1573 always 1573
  "void f(){intmax_t x; scanf(\"%tu\", &x);}" always "void f(){intmax_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1574
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1574 always 1574
  "void f(){uintmax_t x; scanf(\"%tu\", &x);}" always "void f(){uintmax_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1575
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1575 always 1575
  "void f(){std::size_t x; scanf(\"%tu\", &x);}" always "void f(){std::size_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1576
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1576 always 1576
  "void f(){std::ssize_t x; scanf(\"%tu\", &x);}" always "void f(){std::ssize_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1577
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1577 always 1577
  "void f(){std::ptrdiff_t x; scanf(\"%tu\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1578
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1578 always 1578
  "void f(){std::intptr_t x; scanf(\"%tu\", &x);}" always "void f(){std::intptr_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1579
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1579 always 1579
  "void f(){std::uintptr_t x; scanf(\"%tu\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%tu\", &x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1581
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1581 always 1581
  "void f(){bool x; scanf(\"%tx\", &x);}" always "void f(){bool x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'bool *'.\n"
Line 1582
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1582 always 1582
  "void f(){char x; scanf(\"%tx\", &x);}" always "void f(){char x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'char *'.\n"
Line 1583
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1583 always 1583
  "void f(){signed char x; scanf(\"%tx\", &x);}" always "void f(){signed char x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed char *'.\n"
Line 1584
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1584 always 1584
  "void f(){unsigned char x; scanf(\"%tx\", &x);}" always "void f(){unsigned char x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned char *'.\n"
Line 1585
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1585 always 1585
  "void f(){signed short x; scanf(\"%tx\", &x);}" always "void f(){signed short x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed short *'.\n"
Line 1586
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1586 always 1586
  "void f(){unsigned short x; scanf(\"%tx\", &x);}" always "void f(){unsigned short x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned short *'.\n"
Line 1587
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1587 always 1587
  "void f(){signed int x; scanf(\"%tx\", &x);}" always "void f(){signed int x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed int *'.\n"
Line 1588
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1588 always 1588
  "void f(){unsigned int x; scanf(\"%tx\", &x);}" always "void f(){unsigned int x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned int *'.\n"
Line 1589
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1589 always 1589
  "void f(){signed long x; scanf(\"%tx\", &x);}" always "void f(){signed long x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long *'.\n"
Line 1590
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1590 always 1590
  "void f(){unsigned long x; scanf(\"%tx\", &x);}" always "void f(){unsigned long x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long *'.\n"
Line 1591
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1591 always 1591
  "void f(){signed long long x; scanf(\"%tx\", &x);}" always "void f(){signed long long x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'signed long long *'.\n"
Line 1592
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1592 always 1592
  "void f(){unsigned long long x; scanf(\"%tx\", &x);}" always "void f(){unsigned long long x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'unsigned long long *'.\n"
Line 1593
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1593 always 1593
  "void f(){float x; scanf(\"%tx\", &x);}" always "void f(){float x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'float *'.\n"
Line 1594
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1594 always 1594
  "void f(){double x; scanf(\"%tx\", &x);}" always "void f(){double x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'double *'.\n"
Line 1595
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1595 always 1595
  "void f(){long double x; scanf(\"%tx\", &x);}" always "void f(){long double x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'long double *'.\n"
Line 1596
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1596 always 1596
  "void f(){void * x; scanf(\"%tx\", &x);}" always "void f(){void * x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'void * *'.\n"
Line 1597
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1597 always 1597
  "void f(){size_t x; scanf(\"%tx\", &x);}" always "void f(){size_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1598
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1598 always 1598
  "void f(){ssize_t x; scanf(\"%tx\", &x);}" always "void f(){ssize_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1599
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1599 always 1599
  "void f(){ptrdiff_t x; scanf(\"%tx\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1600
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1600 always 1600
  "void f(){unsigned ptrdiff_t x; scanf(\"%tx\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%tx\", &x);}"
Line 1601
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1601 always 1601
  "void f(){intmax_t x; scanf(\"%tx\", &x);}" always "void f(){intmax_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1602
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1602 always 1602
  "void f(){uintmax_t x; scanf(\"%tx\", &x);}" always "void f(){uintmax_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1603
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1603 always 1603
  "void f(){std::size_t x; scanf(\"%tx\", &x);}" always "void f(){std::size_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1604
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1604 always 1604
  "void f(){std::ssize_t x; scanf(\"%tx\", &x);}" always "void f(){std::ssize_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1605
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1605 always 1605
  "void f(){std::ptrdiff_t x; scanf(\"%tx\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1606
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1606 always 1606
  "void f(){std::intptr_t x; scanf(\"%tx\", &x);}" always "void f(){std::intptr_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1607
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1607 always 1607
  "void f(){std::uintptr_t x; scanf(\"%tx\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%tx\", &x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1609
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1609 always 1609
  "void f(){long double x; scanf(\"%td\", &x);}" always "void f(){long double x; scanf(\"%td\", &x);}"
  "[test.cpp:1]: (warning) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'long double *'.\n"
Line 1610
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1610 always 1610
  "void f(){void * x; scanf(\"%td\", &x);}" always "void f(){void * x; scanf(\"%td\", &x);}"
  "[test.cpp:1]: (warning) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'void * *'.\n"
Line 1611
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1611 always 1611
  "void f(){ptrdiff_t x; scanf(\"%td\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%td\", &x);}"
Line 1612
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1612 always 1612
  "void f(){intmax_t x; scanf(\"%td\", &x);}" always "void f(){intmax_t x; scanf(\"%td\", &x);}"
  "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1613
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1613 always 1613
  "void f(){uintmax_t x; scanf(\"%td\", &x);}" always "void f(){uintmax_t x; scanf(\"%td\", &x);}"
  "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1614
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1614 always 1614
  "void f(){unsigned ptrdiff_t x; scanf(\"%td\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%td\", &x);}"
  "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %td in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1616
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1616 always 1616
  "void f(){bool x; scanf(\"%Iu\", &x);}" always "void f(){bool x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n"
Line 1617
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1617 always 1617
  "void f(){char x; scanf(\"%Iu\", &x);}" always "void f(){char x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n"
Line 1618
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1618 always 1618
  "void f(){signed char x; scanf(\"%Iu\", &x);}" always "void f(){signed char x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n"
Line 1619
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1619 always 1619
  "void f(){unsigned char x; scanf(\"%Iu\", &x);}" always "void f(){unsigned char x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n"
Line 1620
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1620 always 1620
  "void f(){signed short x; scanf(\"%Iu\", &x);}" always "void f(){signed short x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n"
Line 1621
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1621 always 1621
  "void f(){unsigned short x; scanf(\"%Iu\", &x);}" always "void f(){unsigned short x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n"
Line 1622
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1622 always 1622
  "void f(){signed int x; scanf(\"%Iu\", &x);}" always "void f(){signed int x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n"
Line 1623
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1623 always 1623
  "void f(){unsigned int x; scanf(\"%Iu\", &x);}" always "void f(){unsigned int x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n"
Line 1624
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1624 always 1624
  "void f(){signed long x; scanf(\"%Iu\", &x);}" always "void f(){signed long x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n"
Line 1625
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1625 always 1625
  "void f(){unsigned long x; scanf(\"%Iu\", &x);}" always "void f(){unsigned long x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n"
Line 1626
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1626 always 1626
  "void f(){signed long long x; scanf(\"%Iu\", &x);}" always "void f(){signed long long x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n"
Line 1627
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1627 always 1627
  "void f(){unsigned long long x; scanf(\"%Iu\", &x);}" always "void f(){unsigned long long x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n"
Line 1628
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1628 always 1628
  "void f(){float x; scanf(\"%Iu\", &x);}" always "void f(){float x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n"
Line 1629
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1629 always 1629
  "void f(){double x; scanf(\"%Iu\", &x);}" always "void f(){double x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n"
Line 1630
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1630 always 1630
  "void f(){long double x; scanf(\"%Iu\", &x);}" always "void f(){long double x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n"
Line 1631
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1631 always 1631
  "void f(){void * x; scanf(\"%Iu\", &x);}" always "void f(){void * x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n"
Line 1632
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1632 always 1632
  "void f(){size_t x; scanf(\"%Iu\", &x);}" always "void f(){size_t x; scanf(\"%Iu\", &x);}"
Line 1633
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1633 always 1633
  "void f(){ssize_t x; scanf(\"%Iu\", &x);}" always "void f(){ssize_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1634
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1634 always 1634
  "void f(){ptrdiff_t x; scanf(\"%Iu\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1635
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1635 always 1635
  "void f(){unsigned ptrdiff_t x; scanf(\"%Iu\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1636
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1636 always 1636
  "void f(){intmax_t x; scanf(\"%Iu\", &x);}" always "void f(){intmax_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1637
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1637 always 1637
  "void f(){uintmax_t x; scanf(\"%Iu\", &x);}" always "void f(){uintmax_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1638
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1638 always 1638
  "void f(){intptr_t x; scanf(\"%Iu\", &x);}" always "void f(){intptr_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1639
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1639 always 1639
  "void f(){uintptr_t x; scanf(\"%Iu\", &x);}" always "void f(){uintptr_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n"
Line 1640
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1640 always 1640
  "void f(){std::size_t x; scanf(\"%Iu\", &x);}" always "void f(){std::size_t x; scanf(\"%Iu\", &x);}"
Line 1641
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1641 always 1641
  "void f(){std::ssize_t x; scanf(\"%Iu\", &x);}" always "void f(){std::ssize_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1642
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1642 always 1642
  "void f(){std::ptrdiff_t x; scanf(\"%Iu\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1643
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1643 always 1643
  "void f(){std::intmax_t x; scanf(\"%Iu\", &x);}" always "void f(){std::intmax_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1644
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1644 always 1644
  "void f(){std::uintmax_t x; scanf(\"%Iu\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1645
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1645 always 1645
  "void f(){std::intptr_t x; scanf(\"%Iu\", &x);}" always "void f(){std::intptr_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1646
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1646 always 1646
  "void f(){std::uintptr_t x; scanf(\"%Iu\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%Iu\", &x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1648
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1648 always 1648
  "void f(){bool x; scanf(\"%Ix\", &x);}" always "void f(){bool x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'bool *'.\n"
Line 1649
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1649 always 1649
  "void f(){char x; scanf(\"%Ix\", &x);}" always "void f(){char x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'char *'.\n"
Line 1650
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1650 always 1650
  "void f(){signed char x; scanf(\"%Ix\", &x);}" always "void f(){signed char x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed char *'.\n"
Line 1651
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1651 always 1651
  "void f(){unsigned char x; scanf(\"%Ix\", &x);}" always "void f(){unsigned char x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned char *'.\n"
Line 1652
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1652 always 1652
  "void f(){signed short x; scanf(\"%Ix\", &x);}" always "void f(){signed short x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed short *'.\n"
Line 1653
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1653 always 1653
  "void f(){unsigned short x; scanf(\"%Ix\", &x);}" always "void f(){unsigned short x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned short *'.\n"
Line 1654
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1654 always 1654
  "void f(){signed int x; scanf(\"%Ix\", &x);}" always "void f(){signed int x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed int *'.\n"
Line 1655
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1655 always 1655
  "void f(){unsigned int x; scanf(\"%Ix\", &x);}" always "void f(){unsigned int x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned int *'.\n"
Line 1656
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1656 always 1656
  "void f(){signed long x; scanf(\"%Ix\", &x);}" always "void f(){signed long x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed long *'.\n"
Line 1657
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1657 always 1657
  "void f(){unsigned long x; scanf(\"%Ix\", &x);}" always "void f(){unsigned long x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long *'.\n"
Line 1658
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1658 always 1658
  "void f(){signed long long x; scanf(\"%Ix\", &x);}" always "void f(){signed long long x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'signed long long *'.\n"
Line 1659
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1659 always 1659
  "void f(){unsigned long long x; scanf(\"%Ix\", &x);}" always "void f(){unsigned long long x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned long long *'.\n"
Line 1660
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1660 always 1660
  "void f(){float x; scanf(\"%Ix\", &x);}" always "void f(){float x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'float *'.\n"
Line 1661
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1661 always 1661
  "void f(){double x; scanf(\"%Ix\", &x);}" always "void f(){double x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'double *'.\n"
Line 1662
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1662 always 1662
  "void f(){long double x; scanf(\"%Ix\", &x);}" always "void f(){long double x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'long double *'.\n"
Line 1663
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1663 always 1663
  "void f(){void * x; scanf(\"%Ix\", &x);}" always "void f(){void * x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'void * *'.\n"
Line 1664
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1664 always 1664
  "void f(){size_t x; scanf(\"%Ix\", &x);}" always "void f(){size_t x; scanf(\"%Ix\", &x);}"
Line 1665
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1665 always 1665
  "void f(){ssize_t x; scanf(\"%Ix\", &x);}" always "void f(){ssize_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1666
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1666 always 1666
  "void f(){ptrdiff_t x; scanf(\"%Ix\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1667
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1667 always 1667
  "void f(){unsigned ptrdiff_t x; scanf(\"%Ix\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1668
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1668 always 1668
  "void f(){intmax_t x; scanf(\"%Ix\", &x);}" always "void f(){intmax_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1669
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1669 always 1669
  "void f(){uintmax_t x; scanf(\"%Ix\", &x);}" always "void f(){uintmax_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1670
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1670 always 1670
  "void f(){intptr_t x; scanf(\"%Ix\", &x);}" always "void f(){intptr_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1671
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1671 always 1671
  "void f(){uintptr_t x; scanf(\"%Ix\", &x);}" always "void f(){uintptr_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n"
Line 1672
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1672 always 1672
  "void f(){std::size_t x; scanf(\"%Ix\", &x);}" always "void f(){std::size_t x; scanf(\"%Ix\", &x);}"
Line 1673
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1673 always 1673
  "void f(){std::ssize_t x; scanf(\"%Ix\", &x);}" always "void f(){std::ssize_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1674
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1674 always 1674
  "void f(){std::ptrdiff_t x; scanf(\"%Ix\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1675
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1675 always 1675
  "void f(){std::intmax_t x; scanf(\"%Ix\", &x);}" always "void f(){std::intmax_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1676
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1676 always 1676
  "void f(){std::uintmax_t x; scanf(\"%Ix\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1677
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1677 always 1677
  "void f(){std::intptr_t x; scanf(\"%Ix\", &x);}" always "void f(){std::intptr_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1678
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1678 always 1678
  "void f(){std::uintptr_t x; scanf(\"%Ix\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%Ix\", &x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1680
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1680 always 1680
  "void f(){bool x; scanf(\"%Id\", &x);}" always "void f(){bool x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'bool *'.\n"
Line 1681
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1681 always 1681
  "void f(){char x; scanf(\"%Id\", &x);}" always "void f(){char x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'char *'.\n"
Line 1682
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1682 always 1682
  "void f(){signed char x; scanf(\"%Id\", &x);}" always "void f(){signed char x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed char *'.\n"
Line 1683
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1683 always 1683
  "void f(){unsigned char x; scanf(\"%Id\", &x);}" always "void f(){unsigned char x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned char *'.\n"
Line 1684
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1684 always 1684
  "void f(){signed short x; scanf(\"%Id\", &x);}" always "void f(){signed short x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed short *'.\n"
Line 1685
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1685 always 1685
  "void f(){unsigned short x; scanf(\"%Id\", &x);}" always "void f(){unsigned short x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned short *'.\n"
Line 1686
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1686 always 1686
  "void f(){signed int x; scanf(\"%Id\", &x);}" always "void f(){signed int x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed int *'.\n"
Line 1687
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1687 always 1687
  "void f(){unsigned int x; scanf(\"%Id\", &x);}" always "void f(){unsigned int x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned int *'.\n"
Line 1688
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1688 always 1688
  "void f(){signed long x; scanf(\"%Id\", &x);}" always "void f(){signed long x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed long *'.\n"
Line 1689
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1689 always 1689
  "void f(){unsigned long x; scanf(\"%Id\", &x);}" always "void f(){unsigned long x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned long *'.\n"
Line 1690
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1690 always 1690
  "void f(){signed long long x; scanf(\"%Id\", &x);}" always "void f(){signed long long x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'signed long long *'.\n"
Line 1691
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1691 always 1691
  "void f(){unsigned long long x; scanf(\"%Id\", &x);}" always "void f(){unsigned long long x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned long long *'.\n"
Line 1692
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1692 always 1692
  "void f(){float x; scanf(\"%Id\", &x);}" always "void f(){float x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'float *'.\n"
Line 1693
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1693 always 1693
  "void f(){double x; scanf(\"%Id\", &x);}" always "void f(){double x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'double *'.\n"
Line 1694
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1694 always 1694
  "void f(){long double x; scanf(\"%Id\", &x);}" always "void f(){long double x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'long double *'.\n"
Line 1695
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1695 always 1695
  "void f(){void * x; scanf(\"%Id\", &x);}" always "void f(){void * x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'void * *'.\n"
Line 1696
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1696 always 1696
  "void f(){size_t x; scanf(\"%Id\", &x);}" always "void f(){size_t x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1697
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1697 always 1697
  "void f(){ssize_t x; scanf(\"%Id\", &x);}" always "void f(){ssize_t x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1698
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1698 always 1698
  "void f(){ptrdiff_t x; scanf(\"%Id\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%Id\", &x);}"
Line 1699
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1699 always 1699
  "void f(){unsigned ptrdiff_t x; scanf(\"%Id\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1700
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1700 always 1700
  "void f(){intmax_t x; scanf(\"%Id\", &x);}" always "void f(){intmax_t x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1701
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1701 always 1701
  "void f(){uintmax_t x; scanf(\"%Id\", &x);}" always "void f(){uintmax_t x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1702
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1702 always 1702
  "void f(){std::size_t x; scanf(\"%Id\", &x);}" always "void f(){std::size_t x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1703
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1703 always 1703
  "void f(){std::ssize_t x; scanf(\"%Id\", &x);}" always "void f(){std::ssize_t x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1704
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1704 always 1704
  "void f(){std::ptrdiff_t x; scanf(\"%Id\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%Id\", &x);}"
Line 1705
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1705 always 1705
  "void f(){std::intptr_t x; scanf(\"%Id\", &x);}" always "void f(){std::intptr_t x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1706
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1706 always 1706
  "void f(){std::uintptr_t x; scanf(\"%Id\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%Id\", &x);}"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1708
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1708 always 1708
  "void f(){bool x; scanf(\"%I64u\", &x);}" always "void f(){bool x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'bool *'.\n"
Line 1709
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1709 always 1709
  "void f(){char x; scanf(\"%I64u\", &x);}" always "void f(){char x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'char *'.\n"
Line 1710
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1710 always 1710
  "void f(){signed char x; scanf(\"%I64u\", &x);}" always "void f(){signed char x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed char *'.\n"
Line 1711
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1711 always 1711
  "void f(){unsigned char x; scanf(\"%I64u\", &x);}" always "void f(){unsigned char x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned char *'.\n"
Line 1712
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1712 always 1712
  "void f(){signed short x; scanf(\"%I64u\", &x);}" always "void f(){signed short x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed short *'.\n"
Line 1713
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1713 always 1713
  "void f(){unsigned short x; scanf(\"%I64u\", &x);}" always "void f(){unsigned short x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned short *'.\n"
Line 1714
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1714 always 1714
  "void f(){signed int x; scanf(\"%I64u\", &x);}" always "void f(){signed int x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed int *'.\n"
Line 1715
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1715 always 1715
  "void f(){unsigned int x; scanf(\"%I64u\", &x);}" always "void f(){unsigned int x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned int *'.\n"
Line 1716
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1716 always 1716
  "void f(){signed long x; scanf(\"%I64u\", &x);}" always "void f(){signed long x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long *'.\n"
Line 1717
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1717 always 1717
  "void f(){unsigned long x; scanf(\"%I64u\", &x);}" always "void f(){unsigned long x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned long *'.\n"
Line 1718
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1718 always 1718
  "void f(){signed long long x; scanf(\"%I64u\", &x);}" always "void f(){signed long long x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long long *'.\n"
Line 1719
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1719 always 1719
  "void f(){unsigned long long x; scanf(\"%I64u\", &x);}" always "void f(){unsigned long long x; scanf(\"%I64u\", &x);}"
Line 1720
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1720 always 1720
  "void f(){float x; scanf(\"%I64u\", &x);}" always "void f(){float x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'float *'.\n"
Line 1721
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1721 always 1721
  "void f(){double x; scanf(\"%I64u\", &x);}" always "void f(){double x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'double *'.\n"
Line 1722
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1722 always 1722
  "void f(){long double x; scanf(\"%I64u\", &x);}" always "void f(){long double x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'long double *'.\n"
Line 1723
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1723 always 1723
  "void f(){void * x; scanf(\"%I64u\", &x);}" always "void f(){void * x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'void * *'.\n"
Line 1724
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1724 always 1724
  "void f(){size_t x; scanf(\"%I64u\", &x);}" always "void f(){size_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
Line 1725
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1725 always 1725
  "void f(){ssize_t x; scanf(\"%I64u\", &x);}" always "void f(){ssize_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1726
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1726 always 1726
  "void f(){ptrdiff_t x; scanf(\"%I64u\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1727
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1727 always 1727
  "void f(){unsigned ptrdiff_t x; scanf(\"%I64u\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
Line 1728
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1728 always 1728
  "void f(){intmax_t x; scanf(\"%I64u\", &x);}" always "void f(){intmax_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1729
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1729 always 1729
  "void f(){uintmax_t x; scanf(\"%I64u\", &x);}" always "void f(){uintmax_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
Line 1730
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1730 always 1730
  "void f(){intptr_t x; scanf(\"%I64u\", &x);}" always "void f(){intptr_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1731
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1731 always 1731
  "void f(){uintptr_t x; scanf(\"%I64u\", &x);}" always "void f(){uintptr_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
Line 1732
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1732 always 1732
  "void f(){std::size_t x; scanf(\"%I64u\", &x);}" always "void f(){std::size_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
Line 1733
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1733 always 1733
  "void f(){std::ssize_t x; scanf(\"%I64u\", &x);}" always "void f(){std::ssize_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1734
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1734 always 1734
  "void f(){std::ptrdiff_t x; scanf(\"%I64u\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1735
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1735 always 1735
  "void f(){std::intmax_t x; scanf(\"%I64u\", &x);}" always "void f(){std::intmax_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1736
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1736 always 1736
  "void f(){std::uintmax_t x; scanf(\"%I64u\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
Line 1737
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1737 always 1737
  "void f(){std::intptr_t x; scanf(\"%I64u\", &x);}" always "void f(){std::intptr_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1738
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1738 always 1738
  "void f(){std::uintptr_t x; scanf(\"%I64u\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%I64u\", &x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
Line 1740
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1740 always 1740
  "void f(){bool x; scanf(\"%I64x\", &x);}" always "void f(){bool x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'bool *'.\n"
Line 1741
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1741 always 1741
  "void f(){char x; scanf(\"%I64x\", &x);}" always "void f(){char x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'char *'.\n"
Line 1742
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1742 always 1742
  "void f(){signed char x; scanf(\"%I64x\", &x);}" always "void f(){signed char x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed char *'.\n"
Line 1743
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1743 always 1743
  "void f(){unsigned char x; scanf(\"%I64x\", &x);}" always "void f(){unsigned char x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned char *'.\n"
Line 1744
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1744 always 1744
  "void f(){signed short x; scanf(\"%I64x\", &x);}" always "void f(){signed short x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed short *'.\n"
Line 1745
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1745 always 1745
  "void f(){unsigned short x; scanf(\"%I64x\", &x);}" always "void f(){unsigned short x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned short *'.\n"
Line 1746
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1746 always 1746
  "void f(){signed int x; scanf(\"%I64x\", &x);}" always "void f(){signed int x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed int *'.\n"
Line 1747
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1747 always 1747
  "void f(){unsigned int x; scanf(\"%I64x\", &x);}" always "void f(){unsigned int x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned int *'.\n"
Line 1748
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1748 always 1748
  "void f(){signed long x; scanf(\"%I64x\", &x);}" always "void f(){signed long x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long *'.\n"
Line 1749
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1749 always 1749
  "void f(){unsigned long x; scanf(\"%I64x\", &x);}" always "void f(){unsigned long x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned long *'.\n"
Line 1750
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1750 always 1750
  "void f(){signed long long x; scanf(\"%I64x\", &x);}" always "void f(){signed long long x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'signed long long *'.\n"
Line 1751
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1751 always 1751
  "void f(){unsigned long long x; scanf(\"%I64x\", &x);}" always "void f(){unsigned long long x; scanf(\"%I64x\", &x);}"
Line 1752
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1752 always 1752
  "void f(){float x; scanf(\"%I64x\", &x);}" always "void f(){float x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'float *'.\n"
Line 1753
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1753 always 1753
  "void f(){double x; scanf(\"%I64x\", &x);}" always "void f(){double x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'double *'.\n"
Line 1754
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1754 always 1754
  "void f(){long double x; scanf(\"%I64x\", &x);}" always "void f(){long double x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'long double *'.\n"
Line 1755
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1755 always 1755
  "void f(){void * x; scanf(\"%I64x\", &x);}" always "void f(){void * x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'void * *'.\n"
Line 1756
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1756 always 1756
  "void f(){size_t x; scanf(\"%I64x\", &x);}" always "void f(){size_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
Line 1757
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1757 always 1757
  "void f(){ssize_t x; scanf(\"%I64x\", &x);}" always "void f(){ssize_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1758
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1758 always 1758
  "void f(){ptrdiff_t x; scanf(\"%I64x\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1759
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1759 always 1759
  "void f(){unsigned __int64 x; scanf(\"%I64x\", &x);}" always "void f(){unsigned __int64 x; scanf(\"%I64x\", &x);}"
Line 1761
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1761 always 1761
  "void f(){unsigned ptrdiff_t x; scanf(\"%I64x\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
Line 1762
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1762 always 1762
  "void f(){intmax_t x; scanf(\"%I64x\", &x);}" always "void f(){intmax_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1763
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1763 always 1763
  "void f(){uintmax_t x; scanf(\"%I64x\", &x);}" always "void f(){uintmax_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
Line 1764
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1764 always 1764
  "void f(){intptr_t x; scanf(\"%I64x\", &x);}" always "void f(){intptr_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1765
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1765 always 1765
  "void f(){uintptr_t x; scanf(\"%I64x\", &x);}" always "void f(){uintptr_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
Line 1766
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1766 always 1766
  "void f(){std::size_t x; scanf(\"%I64x\", &x);}" always "void f(){std::size_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
Line 1767
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1767 always 1767
  "void f(){std::ssize_t x; scanf(\"%I64x\", &x);}" always "void f(){std::ssize_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1768
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1768 always 1768
  "void f(){std::ptrdiff_t x; scanf(\"%I64x\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1769
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1769 always 1769
  "void f(){std::intmax_t x; scanf(\"%I64x\", &x);}" always "void f(){std::intmax_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1770
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1770 always 1770
  "void f(){std::uintmax_t x; scanf(\"%I64x\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
Line 1771
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1771 always 1771
  "void f(){std::intptr_t x; scanf(\"%I64x\", &x);}" always "void f(){std::intptr_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1772
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1772 always 1772
  "void f(){std::uintptr_t x; scanf(\"%I64x\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%I64x\", &x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
Line 1774
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1774 always 1774
  "void f(){bool x; scanf(\"%I64d\", &x);}" always "void f(){bool x; scanf(\"%I64d\", &x);}"
  "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'bool *'.\n"
Line 1775
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1775 always 1775
  "void f(){signed char x; scanf(\"%I64d\", &x);}" always "void f(){signed char x; scanf(\"%I64d\", &x);}"
  "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'signed char *'.\n"
Line 1776
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1776 always 1776
  "void f(){unsigned char x; scanf(\"%I64d\", &x);}" always "void f(){unsigned char x; scanf(\"%I64d\", &x);}"
  "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'unsigned char *'.\n"
Line 1777
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1777 always 1777
  "void f(){void * x; scanf(\"%I64d\", &x);}" always "void f(){void * x; scanf(\"%I64d\", &x);}"
  "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'void * *'.\n"
Line 1779
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1779 always 1779
  "void f(){intmax_t x; scanf(\"%I64d\", &x);}" always "void f(){intmax_t x; scanf(\"%I64d\", &x);}"
  "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
Line 1780
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1780 always 1780
  "void f(){ssize_t x; scanf(\"%I64d\", &x);}" always "void f(){ssize_t x; scanf(\"%I64d\", &x);}"
  "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
Line 1781
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1781 always 1781
  "void f(){ptrdiff_t x; scanf(\"%I64d\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%I64d\", &x);}"
  "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
Line 1782
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1782 always 1782
  "void f(){__int64 x; scanf(\"%I64d\", &x);}" always "void f(){__int64 x; scanf(\"%I64d\", &x);}"
Line 1784
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1784 always 1784
  "void f(){bool x; scanf(\"%I32u\", &x);}" always "void f(){bool x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'bool *'.\n"
Line 1785
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1785 always 1785
  "void f(){char x; scanf(\"%I32u\", &x);}" always "void f(){char x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'char *'.\n"
Line 1786
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1786 always 1786
  "void f(){signed char x; scanf(\"%I32u\", &x);}" always "void f(){signed char x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed char *'.\n"
Line 1787
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1787 always 1787
  "void f(){unsigned char x; scanf(\"%I32u\", &x);}" always "void f(){unsigned char x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned char *'.\n"
Line 1788
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1788 always 1788
  "void f(){signed short x; scanf(\"%I32u\", &x);}" always "void f(){signed short x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed short *'.\n"
Line 1789
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1789 always 1789
  "void f(){unsigned short x; scanf(\"%I32u\", &x);}" always "void f(){unsigned short x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned short *'.\n"
Line 1790
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1790 always 1790
  "void f(){signed int x; scanf(\"%I32u\", &x);}" always "void f(){signed int x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed int *'.\n"
Line 1791
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1791 always 1791
  "void f(){unsigned int x; scanf(\"%I32u\", &x);}" always "void f(){unsigned int x; scanf(\"%I32u\", &x);}"
Line 1792
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1792 always 1792
  "void f(){signed long x; scanf(\"%I32u\", &x);}" always "void f(){signed long x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long *'.\n"
Line 1793
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1793 always 1793
  "void f(){unsigned long x; scanf(\"%I32u\", &x);}" always "void f(){unsigned long x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long *'.\n"
Line 1794
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1794 always 1794
  "void f(){signed long long x; scanf(\"%I32u\", &x);}" always "void f(){signed long long x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long long *'.\n"
Line 1795
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1795 always 1795
  "void f(){unsigned long long x; scanf(\"%I32u\", &x);}" always "void f(){unsigned long long x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long long *'.\n"
Line 1796
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1796 always 1796
  "void f(){float x; scanf(\"%I32u\", &x);}" always "void f(){float x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'float *'.\n"
Line 1797
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1797 always 1797
  "void f(){double x; scanf(\"%I32u\", &x);}" always "void f(){double x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'double *'.\n"
Line 1798
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1798 always 1798
  "void f(){long double x; scanf(\"%I32u\", &x);}" always "void f(){long double x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'long double *'.\n"
Line 1799
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1799 always 1799
  "void f(){void * x; scanf(\"%I32u\", &x);}" always "void f(){void * x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'void * *'.\n"
Line 1800
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1800 always 1800
  "void f(){size_t x; scanf(\"%I32u\", &x);}" always "void f(){size_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1801
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1801 always 1801
  "void f(){ssize_t x; scanf(\"%I32u\", &x);}" always "void f(){ssize_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1802
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1802 always 1802
  "void f(){ptrdiff_t x; scanf(\"%I32u\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1803
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1803 always 1803
  "void f(){unsigned ptrdiff_t x; scanf(\"%I32u\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1804
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1804 always 1804
  "void f(){intmax_t x; scanf(\"%I32u\", &x);}" always "void f(){intmax_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1805
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1805 always 1805
  "void f(){uintmax_t x; scanf(\"%I32u\", &x);}" always "void f(){uintmax_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1806
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1806 always 1806
  "void f(){intptr_t x; scanf(\"%I32u\", &x);}" always "void f(){intptr_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1807
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1807 always 1807
  "void f(){uintptr_t x; scanf(\"%I32u\", &x);}" always "void f(){uintptr_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n"
Line 1808
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1808 always 1808
  "void f(){std::size_t x; scanf(\"%I32u\", &x);}" always "void f(){std::size_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1809
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1809 always 1809
  "void f(){std::ssize_t x; scanf(\"%I32u\", &x);}" always "void f(){std::ssize_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1810
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1810 always 1810
  "void f(){std::ptrdiff_t x; scanf(\"%I32u\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1811
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1811 always 1811
  "void f(){std::intmax_t x; scanf(\"%I32u\", &x);}" always "void f(){std::intmax_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1812
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1812 always 1812
  "void f(){std::uintmax_t x; scanf(\"%I32u\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1813
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1813 always 1813
  "void f(){std::intptr_t x; scanf(\"%I32u\", &x);}" always "void f(){std::intptr_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1814
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1814 always 1814
  "void f(){std::uintptr_t x; scanf(\"%I32u\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%I32u\", &x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1816
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1816 always 1816
  "void f(){bool x; scanf(\"%I32x\", &x);}" always "void f(){bool x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'bool *'.\n"
Line 1817
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1817 always 1817
  "void f(){char x; scanf(\"%I32x\", &x);}" always "void f(){char x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'char *'.\n"
Line 1818
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1818 always 1818
  "void f(){signed char x; scanf(\"%I32x\", &x);}" always "void f(){signed char x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed char *'.\n"
Line 1819
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1819 always 1819
  "void f(){unsigned char x; scanf(\"%I32x\", &x);}" always "void f(){unsigned char x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned char *'.\n"
Line 1820
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1820 always 1820
  "void f(){signed short x; scanf(\"%I32x\", &x);}" always "void f(){signed short x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed short *'.\n"
Line 1821
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1821 always 1821
  "void f(){unsigned short x; scanf(\"%I32x\", &x);}" always "void f(){unsigned short x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned short *'.\n"
Line 1822
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1822 always 1822
  "void f(){signed int x; scanf(\"%I32x\", &x);}" always "void f(){signed int x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed int *'.\n"
Line 1823
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1823 always 1823
  "void f(){unsigned int x; scanf(\"%I32x\", &x);}" always "void f(){unsigned int x; scanf(\"%I32x\", &x);}"
Line 1824
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1824 always 1824
  "void f(){signed long x; scanf(\"%I32x\", &x);}" always "void f(){signed long x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long *'.\n"
Line 1825
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1825 always 1825
  "void f(){unsigned long x; scanf(\"%I32x\", &x);}" always "void f(){unsigned long x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long *'.\n"
Line 1826
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1826 always 1826
  "void f(){signed long long x; scanf(\"%I32x\", &x);}" always "void f(){signed long long x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'signed long long *'.\n"
Line 1827
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1827 always 1827
  "void f(){unsigned long long x; scanf(\"%I32x\", &x);}" always "void f(){unsigned long long x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned long long *'.\n"
Line 1828
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1828 always 1828
  "void f(){float x; scanf(\"%I32x\", &x);}" always "void f(){float x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'float *'.\n"
Line 1829
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1829 always 1829
  "void f(){double x; scanf(\"%I32x\", &x);}" always "void f(){double x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'double *'.\n"
Line 1830
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1830 always 1830
  "void f(){long double x; scanf(\"%I32x\", &x);}" always "void f(){long double x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'long double *'.\n"
Line 1831
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1831 always 1831
  "void f(){void * x; scanf(\"%I32x\", &x);}" always "void f(){void * x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'void * *'.\n"
Line 1832
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1832 always 1832
  "void f(){size_t x; scanf(\"%I32x\", &x);}" always "void f(){size_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1833
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1833 always 1833
  "void f(){ssize_t x; scanf(\"%I32x\", &x);}" always "void f(){ssize_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1834
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1834 always 1834
  "void f(){ptrdiff_t x; scanf(\"%I32x\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1835
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1835 always 1835
  "void f(){unsigned ptrdiff_t x; scanf(\"%I32x\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1836
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1836 always 1836
  "void f(){intmax_t x; scanf(\"%I32x\", &x);}" always "void f(){intmax_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1837
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1837 always 1837
  "void f(){uintmax_t x; scanf(\"%I32x\", &x);}" always "void f(){uintmax_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1838
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1838 always 1838
  "void f(){intptr_t x; scanf(\"%I32x\", &x);}" always "void f(){intptr_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1839
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1839 always 1839
  "void f(){uintptr_t x; scanf(\"%I32x\", &x);}" always "void f(){uintptr_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n"
Line 1840
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1840 always 1840
  "void f(){std::size_t x; scanf(\"%I32x\", &x);}" always "void f(){std::size_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1841
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1841 always 1841
  "void f(){std::ssize_t x; scanf(\"%I32x\", &x);}" always "void f(){std::ssize_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1842
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1842 always 1842
  "void f(){std::ptrdiff_t x; scanf(\"%I32x\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1843
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1843 always 1843
  "void f(){std::intmax_t x; scanf(\"%I32x\", &x);}" always "void f(){std::intmax_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1844
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1844 always 1844
  "void f(){std::uintmax_t x; scanf(\"%I32x\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1845
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1845 always 1845
  "void f(){std::intptr_t x; scanf(\"%I32x\", &x);}" always "void f(){std::intptr_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1846
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1846 always 1846
  "void f(){std::uintptr_t x; scanf(\"%I32x\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%I32x\", &x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32 *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1848
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1848 always 1848
  "void f(){bool x; scanf(\"%I32d\", &x);}" always "void f(){bool x; scanf(\"%I32d\", &x);}"
  "[test.cpp:1]: (warning) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'bool *'.\n"
Line 1849
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1849 always 1849
  "void f(){void * x; scanf(\"%I32d\", &x);}" always "void f(){void * x; scanf(\"%I32d\", &x);}"
  "[test.cpp:1]: (warning) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'void * *'.\n"
Line 1850
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1850 always 1850
  "void f(){size_t x; scanf(\"%I32d\", &x);}" always "void f(){size_t x; scanf(\"%I32d\", &x);}"
  "[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1852
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1852 always 1852
  "void f(){ptrdiff_t x; scanf(\"%I32d\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%I32d\", &x);}"
  "[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1853
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1853 always 1853
  "void f(){__int32 x; scanf(\"%I32d\", &x);}" always "void f(){__int32 x; scanf(\"%I32d\", &x);}"
Line 1855
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1855 always 1855
  "void f(){bool x; scanf(\"%d\", &x);}" always "void f(){bool x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'bool *'.\n"
Line 1856
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1856 always 1856
  "void f(){char x; scanf(\"%d\", &x);}" always "void f(){char x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'char *'.\n"
Line 1857
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1857 always 1857
  "void f(){signed char x; scanf(\"%d\", &x);}" always "void f(){signed char x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed char *'.\n"
Line 1858
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1858 always 1858
  "void f(){unsigned char x; scanf(\"%d\", &x);}" always "void f(){unsigned char x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned char *'.\n"
Line 1859
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1859 always 1859
  "void f(){signed short x; scanf(\"%d\", &x);}" always "void f(){signed short x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed short *'.\n"
Line 1860
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1860 always 1860
  "void f(){unsigned short x; scanf(\"%d\", &x);}" always "void f(){unsigned short x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned short *'.\n"
Line 1861
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1861 always 1861
  "void f(){signed int x; scanf(\"%d\", &x);}" always "void f(){signed int x; scanf(\"%d\", &x);}"
Line 1862
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1862 always 1862
  "void f(){unsigned int x; scanf(\"%d\", &x);}" always "void f(){unsigned int x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'.\n"
Line 1863
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1863 always 1863
  "void f(){signed long x; scanf(\"%d\", &x);}" always "void f(){signed long x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed long *'.\n"
Line 1864
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1864 always 1864
  "void f(){unsigned long x; scanf(\"%d\", &x);}" always "void f(){unsigned long x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned long *'.\n"
Line 1865
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1865 always 1865
  "void f(){signed long long x; scanf(\"%d\", &x);}" always "void f(){signed long long x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed long long *'.\n"
Line 1866
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1866 always 1866
  "void f(){unsigned long long x; scanf(\"%d\", &x);}" always "void f(){unsigned long long x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned long long *'.\n"
Line 1867
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1867 always 1867
  "void f(){float x; scanf(\"%d\", &x);}" always "void f(){float x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'float *'.\n"
Line 1868
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1868 always 1868
  "void f(){double x; scanf(\"%d\", &x);}" always "void f(){double x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'double *'.\n"
Line 1869
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1869 always 1869
  "void f(){long double x; scanf(\"%d\", &x);}" always "void f(){long double x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'long double *'.\n"
Line 1870
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1870 always 1870
  "void f(){void * x; scanf(\"%d\", &x);}" always "void f(){void * x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'void * *'.\n"
Line 1871
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1871 always 1871
  "void f(){size_t x; scanf(\"%d\", &x);}" always "void f(){size_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1872
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1872 always 1872
  "void f(){ssize_t x; scanf(\"%d\", &x);}" always "void f(){ssize_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1873
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1873 always 1873
  "void f(){ptrdiff_t x; scanf(\"%d\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1874
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1874 always 1874
  "void f(){unsigned ptrdiff_t x; scanf(\"%d\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1875
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1875 always 1875
  "void f(){intmax_t x; scanf(\"%d\", &x);}" always "void f(){intmax_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1876
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1876 always 1876
  "void f(){uintmax_t x; scanf(\"%d\", &x);}" always "void f(){uintmax_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1877
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1877 always 1877
  "void f(){std::size_t x; scanf(\"%d\", &x);}" always "void f(){std::size_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1878
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1878 always 1878
  "void f(){std::ssize_t x; scanf(\"%d\", &x);}" always "void f(){std::ssize_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1879
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1879 always 1879
  "void f(){std::ptrdiff_t x; scanf(\"%d\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1880
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1880 always 1880
  "void f(){std::intptr_t x; scanf(\"%d\", &x);}" always "void f(){std::intptr_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1881
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1881 always 1881
  "void f(){std::uintptr_t x; scanf(\"%d\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%d\", &x);}"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %d in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1883
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1883 always 1883
  "void foo() {\n    scanf(\"%d\", \"s3\");\n    scanf(\"%d\", L\"s5W\");\n}" always "void foo() {\n    scanf(\"%d\", \"s3\");\n    scanf(\"%d\", L\"s5W\");\n}"
  true always 1
Line 1887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1887 always 1887
  "[test.cpp:2]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'const wchar_t *'.\n"
Line 1890
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1890 always 1890
  "void foo(long l) {\n    scanf(\"%d\", l);\n}" always "void foo(long l) {\n    scanf(\"%d\", l);\n}"
  true always 1
Line 1893
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1893 always 1893
  "[test.cpp:2]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed long'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 1) requires 'int *' but the argument type is 'signed long'.\n"
Line 1895
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1895 always 1895
  "void f(){bool x; scanf(\"%x\", &x);}" always "void f(){bool x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'bool *'.\n"
Line 1896
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1896 always 1896
  "void f(){char x; scanf(\"%x\", &x);}" always "void f(){char x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'char *'.\n"
Line 1897
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1897 always 1897
  "void f(){signed char x; scanf(\"%x\", &x);}" always "void f(){signed char x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed char *'.\n"
Line 1898
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1898 always 1898
  "void f(){unsigned char x; scanf(\"%x\", &x);}" always "void f(){unsigned char x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned char *'.\n"
Line 1899
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1899 always 1899
  "void f(){signed short x; scanf(\"%x\", &x);}" always "void f(){signed short x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed short *'.\n"
Line 1900
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1900 always 1900
  "void f(){unsigned short x; scanf(\"%x\", &x);}" always "void f(){unsigned short x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned short *'.\n"
Line 1901
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1901 always 1901
  "void f(){signed int x; scanf(\"%x\", &x);}" always "void f(){signed int x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'.\n"
Line 1902
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1902 always 1902
  "void f(){unsigned int x; scanf(\"%x\", &x);}" always "void f(){unsigned int x; scanf(\"%x\", &x);}"
Line 1903
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1903 always 1903
  "void f(){signed long x; scanf(\"%x\", &x);}" always "void f(){signed long x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long *'.\n"
Line 1904
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1904 always 1904
  "void f(){unsigned long x; scanf(\"%x\", &x);}" always "void f(){unsigned long x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long *'.\n"
Line 1905
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1905 always 1905
  "void f(){signed long long x; scanf(\"%x\", &x);}" always "void f(){signed long long x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long long *'.\n"
Line 1906
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1906 always 1906
  "void f(){unsigned long long x; scanf(\"%x\", &x);}" always "void f(){unsigned long long x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned long long *'.\n"
Line 1907
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1907 always 1907
  "void f(){float x; scanf(\"%x\", &x);}" always "void f(){float x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'float *'.\n"
Line 1908
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1908 always 1908
  "void f(){double x; scanf(\"%x\", &x);}" always "void f(){double x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'double *'.\n"
Line 1909
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1909 always 1909
  "void f(){long double x; scanf(\"%x\", &x);}" always "void f(){long double x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'long double *'.\n"
Line 1910
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1910 always 1910
  "void f(){void * x; scanf(\"%x\", &x);}" always "void f(){void * x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'void * *'.\n"
Line 1911
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1911 always 1911
  "void f(){size_t x; scanf(\"%x\", &x);}" always "void f(){size_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1912
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1912 always 1912
  "void f(){ssize_t x; scanf(\"%x\", &x);}" always "void f(){ssize_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1913
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1913 always 1913
  "void f(){ptrdiff_t x; scanf(\"%x\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1914
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1914 always 1914
  "void f(){unsigned ptrdiff_t x; scanf(\"%x\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1915
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1915 always 1915
  "void f(){intmax_t x; scanf(\"%x\", &x);}" always "void f(){intmax_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1916
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1916 always 1916
  "void f(){uintmax_t x; scanf(\"%x\", &x);}" always "void f(){uintmax_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1917
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1917 always 1917
  "void f(){intptr_t x; scanf(\"%x\", &x);}" always "void f(){intptr_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'intptr_t * {aka signed long long *}'.\n"
Line 1918
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1918 always 1918
  "void f(){uintptr_t x; scanf(\"%x\", &x);}" always "void f(){uintptr_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'uintptr_t * {aka unsigned long long *}'.\n"
Line 1919
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1919 always 1919
  "void f(){std::size_t x; scanf(\"%x\", &x);}" always "void f(){std::size_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1920
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1920 always 1920
  "void f(){std::ssize_t x; scanf(\"%x\", &x);}" always "void f(){std::ssize_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1921
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1921 always 1921
  "void f(){std::ptrdiff_t x; scanf(\"%x\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1922
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1922 always 1922
  "void f(){std::intmax_t x; scanf(\"%x\", &x);}" always "void f(){std::intmax_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intmax_t * {aka signed long long *}'.\n"
Line 1923
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1923 always 1923
  "void f(){std::uintmax_t x; scanf(\"%x\", &x);}" always "void f(){std::uintmax_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintmax_t * {aka unsigned long long *}'.\n"
Line 1924
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1924 always 1924
  "void f(){std::intptr_t x; scanf(\"%x\", &x);}" always "void f(){std::intptr_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1925
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1925 always 1925
  "void f(){std::uintptr_t x; scanf(\"%x\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%x\", &x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1927
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1927 always 1927
  "void foo() {\n    scanf(\"%x\", \"s3\");\n    scanf(\"%x\", L\"s5W\");\n}" always "void foo() {\n    scanf(\"%x\", \"s3\");\n    scanf(\"%x\", L\"s5W\");\n}"
  true always 1
Line 1931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1931 always 1931
  "[test.cpp:2]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:2]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'const wchar_t *'.\n"
Line 1934
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1934 always 1934
  "void foo(long l) {\n    scanf(\"%x\", l);\n}" always "void foo(long l) {\n    scanf(\"%x\", l);\n}"
  true always 1
Line 1937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1937 always 1937
  "[test.cpp:2]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long'.\n" always "[test.cpp:2]: (warning) %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed long'.\n"
Line 1939
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1939 always 1939
  "void f(){bool x; scanf(\"%f\", &x);}" always "void f(){bool x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'bool *'.\n"
Line 1940
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1940 always 1940
  "void f(){char x; scanf(\"%f\", &x);}" always "void f(){char x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'char *'.\n"
Line 1941
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1941 always 1941
  "void f(){signed char x; scanf(\"%f\", &x);}" always "void f(){signed char x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed char *'.\n"
Line 1942
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1942 always 1942
  "void f(){unsigned char x; scanf(\"%f\", &x);}" always "void f(){unsigned char x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned char *'.\n"
Line 1943
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1943 always 1943
  "void f(){signed short x; scanf(\"%f\", &x);}" always "void f(){signed short x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed short *'.\n"
Line 1944
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1944 always 1944
  "void f(){unsigned short x; scanf(\"%f\", &x);}" always "void f(){unsigned short x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned short *'.\n"
Line 1945
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1945 always 1945
  "void f(){signed int x; scanf(\"%f\", &x);}" always "void f(){signed int x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed int *'.\n"
Line 1946
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1946 always 1946
  "void f(){unsigned int x; scanf(\"%f\", &x);}" always "void f(){unsigned int x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned int *'.\n"
Line 1947
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1947 always 1947
  "void f(){signed long x; scanf(\"%f\", &x);}" always "void f(){signed long x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed long *'.\n"
Line 1948
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1948 always 1948
  "void f(){unsigned long x; scanf(\"%f\", &x);}" always "void f(){unsigned long x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned long *'.\n"
Line 1949
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1949 always 1949
  "void f(){signed long long x; scanf(\"%f\", &x);}" always "void f(){signed long long x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'signed long long *'.\n"
Line 1950
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1950 always 1950
  "void f(){unsigned long long x; scanf(\"%f\", &x);}" always "void f(){unsigned long long x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned long long *'.\n"
Line 1951
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1951 always 1951
  "void f(){float x; scanf(\"%f\", &x);}" always "void f(){float x; scanf(\"%f\", &x);}"
Line 1952
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1952 always 1952
  "void f(){double x; scanf(\"%f\", &x);}" always "void f(){double x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'double *'.\n"
Line 1953
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1953 always 1953
  "void f(){long double x; scanf(\"%f\", &x);}" always "void f(){long double x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'long double *'.\n"
Line 1954
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1954 always 1954
  "void f(){void * x; scanf(\"%f\", &x);}" always "void f(){void * x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'void * *'.\n"
Line 1955
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1955 always 1955
  "void f(){size_t x; scanf(\"%f\", &x);}" always "void f(){size_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1956
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1956 always 1956
  "void f(){ssize_t x; scanf(\"%f\", &x);}" always "void f(){ssize_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1957
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1957 always 1957
  "void f(){ptrdiff_t x; scanf(\"%f\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1958
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1958 always 1958
  "void f(){unsigned ptrdiff_t x; scanf(\"%f\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1959
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1959 always 1959
  "void f(){intmax_t x; scanf(\"%f\", &x);}" always "void f(){intmax_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 1960
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1960 always 1960
  "void f(){uintmax_t x; scanf(\"%f\", &x);}" always "void f(){uintmax_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 1961
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1961 always 1961
  "void f(){std::size_t x; scanf(\"%f\", &x);}" always "void f(){std::size_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 1962
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1962 always 1962
  "void f(){std::ssize_t x; scanf(\"%f\", &x);}" always "void f(){std::ssize_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 1963
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1963 always 1963
  "void f(){std::ptrdiff_t x; scanf(\"%f\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 1964
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1964 always 1964
  "void f(){std::intptr_t x; scanf(\"%f\", &x);}" always "void f(){std::intptr_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 1965
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1965 always 1965
  "void f(){std::uintptr_t x; scanf(\"%f\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%f\", &x);}"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %f in format string (no. 1) requires 'float *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 1967
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1967 always 1967
  "void foo() {\n    scanf(\"%f\", \"s3\");\n    scanf(\"%f\", L\"s5W\");\n}" always "void foo() {\n    scanf(\"%f\", \"s3\");\n    scanf(\"%f\", L\"s5W\");\n}"
  true always 1
Line 1971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1971 always 1971
  "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'const wchar_t *'.\n"
Line 1974
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1974 always 1974
  "void foo(float f) {\n    scanf(\"%f\", f);\n}" always "void foo(float f) {\n    scanf(\"%f\", f);\n}"
  true always 1
Line 1977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1977 always 1977
  "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'float'.\n" always "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'float *' but the argument type is 'float'.\n"
Line 1979
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1979 always 1979
  "void f(){bool x; scanf(\"%lf\", &x);}" always "void f(){bool x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'bool *'.\n"
Line 1980
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1980 always 1980
  "void f(){char x; scanf(\"%lf\", &x);}" always "void f(){char x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'char *'.\n"
Line 1981
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1981 always 1981
  "void f(){signed char x; scanf(\"%lf\", &x);}" always "void f(){signed char x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed char *'.\n"
Line 1982
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1982 always 1982
  "void f(){unsigned char x; scanf(\"%lf\", &x);}" always "void f(){unsigned char x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned char *'.\n"
Line 1983
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1983 always 1983
  "void f(){signed short x; scanf(\"%lf\", &x);}" always "void f(){signed short x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed short *'.\n"
Line 1984
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1984 always 1984
  "void f(){unsigned short x; scanf(\"%lf\", &x);}" always "void f(){unsigned short x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned short *'.\n"
Line 1985
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1985 always 1985
  "void f(){signed int x; scanf(\"%lf\", &x);}" always "void f(){signed int x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed int *'.\n"
Line 1986
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1986 always 1986
  "void f(){unsigned int x; scanf(\"%lf\", &x);}" always "void f(){unsigned int x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned int *'.\n"
Line 1987
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1987 always 1987
  "void f(){signed long x; scanf(\"%lf\", &x);}" always "void f(){signed long x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed long *'.\n"
Line 1988
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1988 always 1988
  "void f(){unsigned long x; scanf(\"%lf\", &x);}" always "void f(){unsigned long x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned long *'.\n"
Line 1989
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1989 always 1989
  "void f(){signed long long x; scanf(\"%lf\", &x);}" always "void f(){signed long long x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'signed long long *'.\n"
Line 1990
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1990 always 1990
  "void f(){unsigned long long x; scanf(\"%lf\", &x);}" always "void f(){unsigned long long x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned long long *'.\n"
Line 1991
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1991 always 1991
  "void f(){float x; scanf(\"%lf\", &x);}" always "void f(){float x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'float *'.\n"
Line 1992
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1992 always 1992
  "void f(){double x; scanf(\"%lf\", &x);}" always "void f(){double x; scanf(\"%lf\", &x);}"
Line 1993
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1993 always 1993
  "void f(){long double x; scanf(\"%lf\", &x);}" always "void f(){long double x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'long double *'.\n"
Line 1994
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1994 always 1994
  "void f(){void * x; scanf(\"%lf\", &x);}" always "void f(){void * x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %lf in format string (no. 1) requires 'double *' but the argument type is 'void * *'.\n"
Line 1995
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1995 always 1995
  "void f(){size_t x; scanf(\"%lf\", &x);}" always "void f(){size_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 1996
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1996 always 1996
  "void f(){ssize_t x; scanf(\"%lf\", &x);}" always "void f(){ssize_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 1997
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1997 always 1997
  "void f(){ptrdiff_t x; scanf(\"%lf\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 1998
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1998 always 1998
  "void f(){unsigned ptrdiff_t x; scanf(\"%lf\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 1999
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  1999 always 1999
  "void f(){intmax_t x; scanf(\"%lf\", &x);}" always "void f(){intmax_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 2000
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2000 always 2000
  "void f(){uintmax_t x; scanf(\"%lf\", &x);}" always "void f(){uintmax_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 2001
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2001 always 2001
  "void f(){std::size_t x; scanf(\"%lf\", &x);}" always "void f(){std::size_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 2002
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2002 always 2002
  "void f(){std::ssize_t x; scanf(\"%lf\", &x);}" always "void f(){std::ssize_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 2003
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2003 always 2003
  "void f(){std::ptrdiff_t x; scanf(\"%lf\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 2004
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2004 always 2004
  "void f(){std::intptr_t x; scanf(\"%lf\", &x);}" always "void f(){std::intptr_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 2005
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2005 always 2005
  "void f(){std::uintptr_t x; scanf(\"%lf\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%lf\", &x);}"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %lf in format string (no. 1) requires 'double *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 2007
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2007 always 2007
  "void f(){bool x; scanf(\"%Lf\", &x);}" always "void f(){bool x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'bool *'.\n"
Line 2008
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2008 always 2008
  "void f(){char x; scanf(\"%Lf\", &x);}" always "void f(){char x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'char *'.\n"
Line 2009
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2009 always 2009
  "void f(){signed char x; scanf(\"%Lf\", &x);}" always "void f(){signed char x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed char *'.\n"
Line 2010
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2010 always 2010
  "void f(){unsigned char x; scanf(\"%Lf\", &x);}" always "void f(){unsigned char x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned char *'.\n"
Line 2011
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2011 always 2011
  "void f(){signed short x; scanf(\"%Lf\", &x);}" always "void f(){signed short x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed short *'.\n"
Line 2012
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2012 always 2012
  "void f(){unsigned short x; scanf(\"%Lf\", &x);}" always "void f(){unsigned short x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned short *'.\n"
Line 2013
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2013 always 2013
  "void f(){signed int x; scanf(\"%Lf\", &x);}" always "void f(){signed int x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed int *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed int *'.\n"
Line 2014
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2014 always 2014
  "void f(){unsigned int x; scanf(\"%Lf\", &x);}" always "void f(){unsigned int x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned int *'.\n"
Line 2015
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2015 always 2015
  "void f(){signed long x; scanf(\"%Lf\", &x);}" always "void f(){signed long x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed long *'.\n"
Line 2016
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2016 always 2016
  "void f(){unsigned long x; scanf(\"%Lf\", &x);}" always "void f(){unsigned long x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned long *'.\n"
Line 2017
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2017 always 2017
  "void f(){signed long long x; scanf(\"%Lf\", &x);}" always "void f(){signed long long x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'signed long long *'.\n"
Line 2018
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2018 always 2018
  "void f(){unsigned long long x; scanf(\"%Lf\", &x);}" always "void f(){unsigned long long x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned long long *'.\n"
Line 2019
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2019 always 2019
  "void f(){float x; scanf(\"%Lf\", &x);}" always "void f(){float x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'float *'.\n"
Line 2020
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2020 always 2020
  "void f(){double x; scanf(\"%Lf\", &x);}" always "void f(){double x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'double *'.\n"
Line 2021
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2021 always 2021
  "void f(){long double x; scanf(\"%Lf\", &x);}" always "void f(){long double x; scanf(\"%Lf\", &x);}"
Line 2022
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2022 always 2022
  "void f(){void * x; scanf(\"%Lf\", &x);}" always "void f(){void * x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'void * *'.\n"
Line 2023
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2023 always 2023
  "void f(){size_t x; scanf(\"%Lf\", &x);}" always "void f(){size_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 2024
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2024 always 2024
  "void f(){ssize_t x; scanf(\"%Lf\", &x);}" always "void f(){ssize_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 2025
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2025 always 2025
  "void f(){ptrdiff_t x; scanf(\"%Lf\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 2026
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2026 always 2026
  "void f(){unsigned ptrdiff_t x; scanf(\"%Lf\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 2027
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2027 always 2027
  "void f(){intmax_t x; scanf(\"%Lf\", &x);}" always "void f(){intmax_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 2028
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2028 always 2028
  "void f(){uintmax_t x; scanf(\"%Lf\", &x);}" always "void f(){uintmax_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 2029
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2029 always 2029
  "void f(){std::size_t x; scanf(\"%Lf\", &x);}" always "void f(){std::size_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 2030
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2030 always 2030
  "void f(){std::ssize_t x; scanf(\"%Lf\", &x);}" always "void f(){std::ssize_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 2031
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2031 always 2031
  "void f(){std::ptrdiff_t x; scanf(\"%Lf\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 2032
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2032 always 2032
  "void f(){std::intptr_t x; scanf(\"%Lf\", &x);}" always "void f(){std::intptr_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 2033
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2033 always 2033
  "void f(){std::uintptr_t x; scanf(\"%Lf\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%Lf\", &x);}"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %Lf in format string (no. 1) requires 'long double *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 2035
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2035 always 2035
  "void f(){bool x; scanf(\"%n\", &x);}" always "void f(){bool x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'bool *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'bool *'.\n"
Line 2036
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2036 always 2036
  "void f(){char x; scanf(\"%n\", &x);}" always "void f(){char x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'char *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'char *'.\n"
Line 2037
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2037 always 2037
  "void f(){signed char x; scanf(\"%n\", &x);}" always "void f(){signed char x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed char *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed char *'.\n"
Line 2038
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2038 always 2038
  "void f(){unsigned char x; scanf(\"%n\", &x);}" always "void f(){unsigned char x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned char *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned char *'.\n"
Line 2039
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2039 always 2039
  "void f(){signed short x; scanf(\"%n\", &x);}" always "void f(){signed short x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed short *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed short *'.\n"
Line 2040
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2040 always 2040
  "void f(){unsigned short x; scanf(\"%n\", &x);}" always "void f(){unsigned short x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned short *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned short *'.\n"
Line 2041
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2041 always 2041
  "void f(){signed int x; scanf(\"%n\", &x);}" always "void f(){signed int x; scanf(\"%n\", &x);}"
Line 2042
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2042 always 2042
  "void f(){unsigned int x; scanf(\"%n\", &x);}" always "void f(){unsigned int x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'.\n"
Line 2043
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2043 always 2043
  "void f(){signed long x; scanf(\"%n\", &x);}" always "void f(){signed long x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed long *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed long *'.\n"
Line 2044
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2044 always 2044
  "void f(){unsigned long x; scanf(\"%n\", &x);}" always "void f(){unsigned long x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned long *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned long *'.\n"
Line 2045
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2045 always 2045
  "void f(){signed long long x; scanf(\"%n\", &x);}" always "void f(){signed long long x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed long long *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed long long *'.\n"
Line 2046
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2046 always 2046
  "void f(){unsigned long long x; scanf(\"%n\", &x);}" always "void f(){unsigned long long x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned long long *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned long long *'.\n"
Line 2047
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2047 always 2047
  "void f(){float x; scanf(\"%n\", &x);}" always "void f(){float x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'float *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'float *'.\n"
Line 2048
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2048 always 2048
  "void f(){double x; scanf(\"%n\", &x);}" always "void f(){double x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'double *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'double *'.\n"
Line 2049
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2049 always 2049
  "void f(){long double x; scanf(\"%n\", &x);}" always "void f(){long double x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'long double *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'long double *'.\n"
Line 2050
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2050 always 2050
  "void f(){void * x; scanf(\"%n\", &x);}" always "void f(){void * x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'void * *'.\n" always "[test.cpp:1]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'void * *'.\n"
Line 2051
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2051 always 2051
  "void f(){size_t x; scanf(\"%n\", &x);}" always "void f(){size_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'size_t * {aka unsigned long long *}'.\n"
Line 2052
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2052 always 2052
  "void f(){ssize_t x; scanf(\"%n\", &x);}" always "void f(){ssize_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ssize_t * {aka signed long long *}'.\n"
Line 2053
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2053 always 2053
  "void f(){ptrdiff_t x; scanf(\"%n\", &x);}" always "void f(){ptrdiff_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 2054
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2054 always 2054
  "void f(){unsigned ptrdiff_t x; scanf(\"%n\", &x);}" always "void f(){unsigned ptrdiff_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'unsigned ptrdiff_t * {aka unsigned long long *}'.\n"
Line 2055
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2055 always 2055
  "void f(){intmax_t x; scanf(\"%n\", &x);}" always "void f(){intmax_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'intmax_t * {aka signed long long *}'.\n"
Line 2056
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2056 always 2056
  "void f(){uintmax_t x; scanf(\"%n\", &x);}" always "void f(){uintmax_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'uintmax_t * {aka unsigned long long *}'.\n"
Line 2057
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2057 always 2057
  "void f(){std::size_t x; scanf(\"%n\", &x);}" always "void f(){std::size_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::size_t * {aka unsigned long long *}'.\n"
Line 2058
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2058 always 2058
  "void f(){std::ssize_t x; scanf(\"%n\", &x);}" always "void f(){std::ssize_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ssize_t * {aka signed long long *}'.\n"
Line 2059
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2059 always 2059
  "void f(){std::ptrdiff_t x; scanf(\"%n\", &x);}" always "void f(){std::ptrdiff_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::ptrdiff_t * {aka signed long long *}'.\n"
Line 2060
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2060 always 2060
  "void f(){std::intptr_t x; scanf(\"%n\", &x);}" always "void f(){std::intptr_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::intptr_t * {aka signed long long *}'.\n"
Line 2061
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2061 always 2061
  "void f(){std::uintptr_t x; scanf(\"%n\", &x);}" always "void f(){std::uintptr_t x; scanf(\"%n\", &x);}"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long *}'.\n"
  "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n" always "[test.cpp:1]: (portability) %n in format string (no. 1) requires 'int *' but the argument type is 'std::uintptr_t * {aka unsigned long long *}'.\n"
Line 2063
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2063 always 2063
  "void foo() {\n    scanf(\"%n\", \"s3\");\n    scanf(\"%n\", L\"s5W\");\n}" always "void foo() {\n    scanf(\"%n\", \"s3\");\n    scanf(\"%n\", L\"s5W\");\n}"
  true always 1
Line 2067
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2067 always 2067
  "[test.cpp:2]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:2]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const wchar_t *'.\n"
Line 2070
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2070 always 2070
  "void foo(long l) {\n    scanf(\"%n\", l);\n}" always "void foo(long l) {\n    scanf(\"%n\", l);\n}"
  true always 1
Line 2073
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2073 always 2073
  "[test.cpp:2]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed long'.\n" always "[test.cpp:2]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed long'.\n"
Line 2075
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2075 always 2075
  "void g() {\n    myvector<int> v1(1);\n    scanf(\"%d\",&v1[0]);\n    myvector<unsigned int> v2(1);\n    scanf(\"%u\",&v2[0]);\n    myvector<unsigned int> v3(1);\n    scanf(\"%x\",&v3[0]);\n    myvector<double> v4(1);\n    scanf(\"%lf\",&v4[0]);\n    myvector<char *> v5(1);\n    scanf(\"%10s\",v5[0]);\n}" always "void g() {\n    myvector<int> v1(1);\n    scanf(\"%d\",&v1[0]);\n    myvector<unsigned int> v2(1);\n    scanf(\"%u\",&v2[0]);\n    myvector<unsigned int> v3(1);\n    scanf(\"%x\",&v3[0]);\n    myvector<double> v4(1);\n    scanf(\"%lf\",&v4[0]);\n    myvector<char *> v5(1);\n    scanf(\"%10s\",v5[0]);\n}"
Line 2087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2087 always 2087
  "" always ""
Line 2090
  = always "void g() {\n    size_t s1;\n    ptrdiff_t s2;\n    ssize_t s3;\n    scanf(\"%zd\", &s1);\n    scanf(\"%zd\", &s2);\n    scanf(\"%zd\", &s3);\n}\n"
  "void g() {\n    size_t s1;\n    ptrdiff_t s2;\n    ssize_t s3;\n    scanf(\"%zd\", &s1);\n    scanf(\"%zd\", &s2);\n    scanf(\"%zd\", &s3);\n}\n" always "void g() {\n    size_t s1;\n    ptrdiff_t s2;\n    ssize_t s3;\n    scanf(\"%zd\", &s1);\n    scanf(\"%zd\", &s2);\n    scanf(\"%zd\", &s3);\n}\n"
Line 2098
  "[test.cpp:5]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n[test.cpp:6]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n" always "[test.cpp:5]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n[test.cpp:6]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
Line 2100
  "[test.cpp:5]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n[test.cpp:6]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n" always "[test.cpp:5]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n[test.cpp:6]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n"
Line 2103
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2103 always 2103
  code always "void g() {\n    size_t s1;\n    ptrdiff_t s2;\n    ssize_t s3;\n    scanf(\"%zd\", &s1);\n    scanf(\"%zd\", &s2);\n    scanf(\"%zd\", &s3);\n}\n"
  false always 0
  true always 1
Line 2104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2104 always 2104
  result always "[test.cpp:5]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n[test.cpp:6]: (portability) %zd in format string (no. 1) requires 'ssize_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n"
Line 2105
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2105 always 2105
  false always 0
  true always 1
Line 2106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2106 always 2106
Line 2107
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2107 always 2107
  false always 0
  true always 1
Line 2108
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2108 always 2108
Line 2109
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2109 always 2109
  false always 0
  true always 1
Line 2110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2110 always 2110
Line 2113
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2113 always 2113
  "void g() {\n    const char c[]=\"42\";\n    scanf(\"%s\", c);\n}" always "void g() {\n    const char c[]=\"42\";\n    scanf(\"%s\", c);\n}"
Line 2117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2117 always 2117
  "[test.cpp:3]: (warning) %s in format string (no. 1) requires a 'char *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) scanf() without field width limits can crash with huge input data.\n" always "[test.cpp:3]: (warning) %s in format string (no. 1) requires a 'char *' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) scanf() without field width limits can crash with huge input data.\n"
Line 2121
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2121 always 2121
  "void f() {\n    scanf(\"%i\", \"abc\" + 1);\n}\n" always "void f() {\n    scanf(\"%i\", \"abc\" + 1);\n}\n"
Line 2124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2124 always 2124
  "[test.cpp:2]: (warning) %i in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n" always "[test.cpp:2]: (warning) %i in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n"
Line 2128
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2128 always 2128
  "void foo() {\n    printf(\"%i\");\n    printf(\"%i%s\", 123);\n    printf(\"%i%s%d\", 0, bar());\n    printf(\"%i%%%s%d\", 0, bar());\n    printf(\"%idfd%%dfa%s%d\", 0, bar());\n    fprintf(stderr,\"%u%s\");\n    snprintf(str,10,\"%u%s\");\n    sprintf(string1, \"%-*.*s\", 32, string2);\n    snprintf(a, 9, \"%s%d\", \"11223344\");\n}" always "void foo() {\n    printf(\"%i\");\n    printf(\"%i%s\", 123);\n    printf(\"%i%s%d\", 0, bar());\n    printf(\"%i%%%s%d\", 0, bar());\n    printf(\"%idfd%%dfa%s%d\", 0, bar());\n    fprintf(stderr,\"%u%s\");\n    snprintf(str,10,\"%u%s\");\n    sprintf(string1, \"%-*.*s\", 32, string2);\n    snprintf(a, 9, \"%s%d\", \"11223344\");\n}"
Line 2139
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2139 always 2139
  "[test.cpp:2]: (error) printf format string requires 1 parameter but only 0 are given.\n[test.cpp:3]: (error) printf format string requires 2 parameters but only 1 is given.\n[test.cpp:4]: (error) printf format string requires 3 parameters but only 2 are given.\n[test.cpp:5]: (error) printf format string requires 3 parameters but only 2 are given.\n[test.cpp:6]: (error) printf format string requires 3 parameters but only 2 are given.\n[test.cpp:7]: (error) fprintf format string requires 2 parameters but only 0 are given.\n[test.cpp:8]: (error) snprintf format string requires 2 parameters but only 0 are given.\n[test.cpp:9]: (error) sprintf format string requires 3 parameters but only 2 are given.\n[test.cpp:10]: (error) snprintf format string requires 2 parameters but only 1 is given.\n" always "[test.cpp:2]: (error) printf format string requires 1 parameter but only 0 are given.\n[test.cpp:3]: (error) printf format string requires 2 parameters but only 1 is given.\n[test.cpp:4]: (error) printf format string requires 3 parameters but only 2 are given.\n[test.cpp:5]: (error) printf format string requires 3 parameters but only 2 are given.\n[test.cpp:6]: (error) printf format string requires 3 parameters but only 2 are given.\n[test.cpp:7]: (error) fprintf format string requires 2 parameters but only 0 are given.\n[test.cpp:8]: (error) snprintf format string requires 2 parameters but only 0 are given.\n[test.cpp:9]: (error) sprintf format string requires 3 parameters but only 2 are given.\n[test.cpp:10]: (error) snprintf format string requires 2 parameters but only 1 is given.\n"
Line 2149
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2149 always 2149
  "void foo(char *str) {\n    printf(\"\", 0);\n    printf(\"%i\", 123, bar());\n    printf(\"%i%s\", 0, bar(), 43123);\n}" always "void foo(char *str) {\n    printf(\"\", 0);\n    printf(\"%i\", 123, bar());\n    printf(\"%i%s\", 0, bar(), 43123);\n}"
Line 2154
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2154 always 2154
  "[test.cpp:2]: (warning) printf format string requires 0 parameters but 1 is given.\n[test.cpp:3]: (warning) printf format string requires 1 parameter but 2 are given.\n[test.cpp:4]: (warning) printf format string requires 2 parameters but 3 are given.\n" always "[test.cpp:2]: (warning) printf format string requires 0 parameters but 1 is given.\n[test.cpp:3]: (warning) printf format string requires 1 parameter but 2 are given.\n[test.cpp:4]: (warning) printf format string requires 2 parameters but 3 are given.\n"
Line 2158
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2158 always 2158
  "void foo() {\n    swprintf(string1, L\"%i\", 32, string2);\n    swprintf(string1, L\"%s%s\", L\"a\", string2);\n    swprintf(string1, 6, L\"%i\", 32, string2);\n    swprintf(string1, 6, L\"%i%s\", 32, string2);\n}" always "void foo() {\n    swprintf(string1, L\"%i\", 32, string2);\n    swprintf(string1, L\"%s%s\", L\"a\", string2);\n    swprintf(string1, 6, L\"%i\", 32, string2);\n    swprintf(string1, 6, L\"%i%s\", 32, string2);\n}"
Line 2164
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2164 always 2164
  "[test.cpp:2]: (warning) swprintf format string requires 1 parameter but 2 are given.\n[test.cpp:4]: (warning) swprintf format string requires 1 parameter but 2 are given.\n" always "[test.cpp:2]: (warning) swprintf format string requires 1 parameter but 2 are given.\n[test.cpp:4]: (warning) swprintf format string requires 1 parameter but 2 are given.\n"
Line 2167
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2167 always 2167
  "void foo(char *str) {\n    printf(\"%i\", 0);\n    printf(\"%i%s\", 123, bar());\n    printf(\"%i%s%d\", 0, bar(), 43123);\n    printf(\"%i%%%s%d\", 0, bar(), 43123);\n    printf(\"%idfd%%dfa%s%d\", 0, bar(), 43123);\n    printf(\"%\"PRId64\"\", 123);\n    fprintf(stderr,\"%\"PRId64\"\", 123);\n    snprintf(str,10,\"%\"PRId64\"\", 123);\n    fprintf(stderr, \"error: %m\");\n    printf(\"string: %.*s\", len, string);\n    fprintf(stderr, \"%*cText.\", indent, ' ');\n    sprintf(string1, \"%*\", 32);\n}" always "void foo(char *str) {\n    printf(\"%i\", 0);\n    printf(\"%i%s\", 123, bar());\n    printf(\"%i%s%d\", 0, bar(), 43123);\n    printf(\"%i%%%s%d\", 0, bar(), 43123);\n    printf(\"%idfd%%dfa%s%d\", 0, bar(), 43123);\n    printf(\"%\"PRId64\"\", 123);\n    fprintf(stderr,\"%\"PRId64\"\", 123);\n    snprintf(str,10,\"%\"PRId64\"\", 123);\n    fprintf(stderr, \"error: %m\");\n    printf(\"string: %.*s\", len, string);\n    fprintf(stderr, \"%*cText.\", indent, ' ');\n    sprintf(string1, \"%*\", 32);\n}"
Line 2181
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2181 always 2181
  "" always ""
Line 2183
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2183 always 2183
  "void foo(char* s, const char* s2, std::string s3, int i) {\n    printf(\"%s%s\", s, s2);\n    printf(\"%s\", i);\n    printf(\"%i%s\", i, i);\n    printf(\"%s\", s3);\n    printf(\"%s\", \"s4\");\n    printf(\"%u\", s);\n}" always "void foo(char* s, const char* s2, std::string s3, int i) {\n    printf(\"%s%s\", s, s2);\n    printf(\"%s\", i);\n    printf(\"%i%s\", i, i);\n    printf(\"%s\", s3);\n    printf(\"%s\", \"s4\");\n    printf(\"%u\", s);\n}"
Line 2191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2191 always 2191
  "[test.cpp:3]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) %s in format string (no. 2) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'std::string'.\n[test.cpp:7]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char *'.\n" always "[test.cpp:3]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) %s in format string (no. 2) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'std::string'.\n[test.cpp:7]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char *'.\n"
Line 2196
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2196 always 2196
  "void foo(char* s, const char* s2, std::string s3, int i) {\n    printf(\"%jd\", s);\n    printf(\"%ji\", s);\n    printf(\"%ju\", s2);\n    printf(\"%jo\", s3);\n    printf(\"%jx\", i);\n    printf(\"%jX\", i);\n}" always "void foo(char* s, const char* s2, std::string s3, int i) {\n    printf(\"%jd\", s);\n    printf(\"%ji\", s);\n    printf(\"%ju\", s2);\n    printf(\"%jo\", s3);\n    printf(\"%jx\", i);\n    printf(\"%jX\", i);\n}"
Line 2204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2204 always 2204
  "[test.cpp:2]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'char *'.\n[test.cpp:3]: (warning) %ji in format string (no. 1) requires 'intmax_t' but the argument type is 'char *'.\n[test.cpp:4]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %jo in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::string'.\n[test.cpp:6]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n[test.cpp:7]: (warning) %jX in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'char *'.\n[test.cpp:3]: (warning) %ji in format string (no. 1) requires 'intmax_t' but the argument type is 'char *'.\n[test.cpp:4]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %jo in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::string'.\n[test.cpp:6]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n[test.cpp:7]: (warning) %jX in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n"
Line 2211
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2211 always 2211
  "void foo(uintmax_t uim, std::string s3, unsigned int ui, int i) {\n    printf(\"%ju\", uim);\n    printf(\"%ju\", ui);\n    printf(\"%jd\", ui);\n    printf(\"%jd\", s3);\n    printf(\"%jd\", i);\n}" always "void foo(uintmax_t uim, std::string s3, unsigned int ui, int i) {\n    printf(\"%ju\", uim);\n    printf(\"%ju\", ui);\n    printf(\"%jd\", ui);\n    printf(\"%jd\", s3);\n    printf(\"%jd\", i);\n}"
Line 2218
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2218 always 2218
  "[test.cpp:3]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'std::string'.\n[test.cpp:6]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'std::string'.\n[test.cpp:6]: (warning) %jd in format string (no. 1) requires 'intmax_t' but the argument type is 'signed int'.\n"
Line 2223
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2223 always 2223
  "void foo(const int* cpi, const int ci, int i, int* pi, std::string s) {\n    printf(\"%n\", cpi);\n    printf(\"%n\", ci);\n    printf(\"%n\", i);\n    printf(\"%n\", pi);\n    printf(\"%n\", s);\n    printf(\"%n\", \"s4\");\n}" always "void foo(const int* cpi, const int ci, int i, int* pi, std::string s) {\n    printf(\"%n\", cpi);\n    printf(\"%n\", ci);\n    printf(\"%n\", i);\n    printf(\"%n\", pi);\n    printf(\"%n\", s);\n    printf(\"%n\", \"s4\");\n}"
Line 2231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2231 always 2231
  "[test.cpp:3]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed int'.\n[test.cpp:6]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'std::string'.\n[test.cpp:7]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n" always "[test.cpp:3]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'signed int'.\n[test.cpp:6]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'std::string'.\n[test.cpp:7]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const char *'.\n"
Line 2236
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2236 always 2236
  "void foo() {\n    printf(\"%n\", L\"s5W\");\n}" always "void foo() {\n    printf(\"%n\", L\"s5W\");\n}"
Line 2239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2239 always 2239
  "[test.cpp:2]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:2]: (warning) %n in format string (no. 1) requires 'int *' but the argument type is 'const wchar_t *'.\n"
Line 2241
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2241 always 2241
  "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, int i, unsigned int u) {\n    printf(\"%X\", f);\n    printf(\"%c\", \"s4\");\n    printf(\"%o\", d);\n    printf(\"%x\", cpi);\n    printf(\"%o\", b);\n    printf(\"%X\", bp);\n    printf(\"%X\", u);\n    printf(\"%X\", i);\n}" always "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, int i, unsigned int u) {\n    printf(\"%X\", f);\n    printf(\"%c\", \"s4\");\n    printf(\"%o\", d);\n    printf(\"%x\", cpi);\n    printf(\"%o\", b);\n    printf(\"%X\", bp);\n    printf(\"%X\", u);\n    printf(\"%X\", i);\n}"
Line 2252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2252 always 2252
  "[test.cpp:3]: (warning) %X in format string (no. 1) requires 'unsigned int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %c in format string (no. 1) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %o in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n[test.cpp:6]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'const signed int *'.\n[test.cpp:8]: (warning) %X in format string (no. 1) requires 'unsigned int' but the argument type is 'bar *'.\n" always "[test.cpp:3]: (warning) %X in format string (no. 1) requires 'unsigned int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %c in format string (no. 1) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %o in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n[test.cpp:6]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'const signed int *'.\n[test.cpp:8]: (warning) %X in format string (no. 1) requires 'unsigned int' but the argument type is 'bar *'.\n"
Line 2258
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2258 always 2258
  "class foo {};\nvoid foo(const char* cpc, char* pc) {\n    printf(\"%x\", cpc);\n    printf(\"%x\", pc);\n}" always "class foo {};\nvoid foo(const char* cpc, char* pc) {\n    printf(\"%x\", cpc);\n    printf(\"%x\", pc);\n}"
Line 2263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2263 always 2263
  "[test.cpp:3]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:4]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'char *'.\n" always "[test.cpp:3]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:4]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'char *'.\n"
Line 2266
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2266 always 2266
  "class foo {};\nvoid foo() {\n    printf(\"%x\", L\"s5W\");\n    printf(\"%X\", L\"s5W\");\n    printf(\"%c\", L\"s5W\");\n    printf(\"%o\", L\"s5W\");\n}" always "class foo {};\nvoid foo() {\n    printf(\"%x\", L\"s5W\");\n    printf(\"%X\", L\"s5W\");\n    printf(\"%c\", L\"s5W\");\n    printf(\"%o\", L\"s5W\");\n}"
Line 2273
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2273 always 2273
  "[test.cpp:3]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n[test.cpp:4]: (warning) %X in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n[test.cpp:5]: (warning) %c in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n[test.cpp:6]: (warning) %o in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:3]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n[test.cpp:4]: (warning) %X in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n[test.cpp:5]: (warning) %c in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n[test.cpp:6]: (warning) %o in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n"
Line 2278
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2278 always 2278
  "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, unsigned int u, unsigned char uc) {\n    printf(\"%i\", f);\n    printf(\"%d\", \"s4\");\n    printf(\"%d\", d);\n    printf(\"%d\", u);\n    printf(\"%d\", cpi);\n    printf(\"%i\", b);\n    printf(\"%i\", bp);\n    printf(\"%i\", uc);\n}" always "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, unsigned int u, unsigned char uc) {\n    printf(\"%i\", f);\n    printf(\"%d\", \"s4\");\n    printf(\"%d\", d);\n    printf(\"%d\", u);\n    printf(\"%d\", cpi);\n    printf(\"%i\", b);\n    printf(\"%i\", bp);\n    printf(\"%i\", uc);\n}"
Line 2289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2289 always 2289
  "[test.cpp:3]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'double'.\n[test.cpp:6]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:7]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const signed int *'.\n[test.cpp:9]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'bar *'.\n" always "[test.cpp:3]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'double'.\n[test.cpp:6]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:7]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const signed int *'.\n[test.cpp:9]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'bar *'.\n"
Line 2296
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2296 always 2296
  "class foo {};\nvoid foo() {\n    printf(\"%i\", L\"s5W\");\n    printf(\"%d\", L\"s5W\");\n}" always "class foo {};\nvoid foo() {\n    printf(\"%i\", L\"s5W\");\n    printf(\"%d\", L\"s5W\");\n}"
Line 2301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2301 always 2301
  "[test.cpp:3]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'const wchar_t *'.\n[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:3]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'const wchar_t *'.\n[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const wchar_t *'.\n"
Line 2304
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2304 always 2304
  "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, int i, bool bo) {\n    printf(\"%u\", f);\n    printf(\"%u\", \"s4\");\n    printf(\"%u\", d);\n    printf(\"%u\", i);\n    printf(\"%u\", cpi);\n    printf(\"%u\", b);\n    printf(\"%u\", bp);\n    printf(\"%u\", bo);\n}" always "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, int i, bool bo) {\n    printf(\"%u\", f);\n    printf(\"%u\", \"s4\");\n    printf(\"%u\", d);\n    printf(\"%u\", i);\n    printf(\"%u\", cpi);\n    printf(\"%u\", b);\n    printf(\"%u\", bp);\n    printf(\"%u\", bo);\n}"
Line 2315
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2315 always 2315
  "[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n[test.cpp:6]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:7]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'const signed int *'.\n[test.cpp:9]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'bar *'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n[test.cpp:6]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:7]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'const signed int *'.\n[test.cpp:9]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'bar *'.\n"
Line 2322
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2322 always 2322
  "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, int i, bool bo) {\n    printf(\"%u\", L\"s5W\");\n}" always "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d, int i, bool bo) {\n    printf(\"%u\", L\"s5W\");\n}"
Line 2326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2326 always 2326
  "[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'const wchar_t *'.\n"
Line 2328
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2328 always 2328
  "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, char c) {\n    printf(\"%p\", f);\n    printf(\"%p\", c);\n    printf(\"%p\", bp);\n    printf(\"%p\", cpi);\n    printf(\"%p\", b);\n}" always "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, char c) {\n    printf(\"%p\", f);\n    printf(\"%p\", c);\n    printf(\"%p\", bp);\n    printf(\"%p\", cpi);\n    printf(\"%p\", b);\n}"
Line 2336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2336 always 2336
  "[test.cpp:3]: (warning) %p in format string (no. 1) requires an address but the argument type is 'foo'.\n[test.cpp:4]: (warning) %p in format string (no. 1) requires an address but the argument type is 'char'.\n" always "[test.cpp:3]: (warning) %p in format string (no. 1) requires an address but the argument type is 'foo'.\n[test.cpp:4]: (warning) %p in format string (no. 1) requires an address but the argument type is 'char'.\n"
Line 2339
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2339 always 2339
  "class foo {};\nvoid foo(char* pc, const char* cpc, wchar_t* pwc, const wchar_t* cpwc) {\n    printf(\"%p\", pc);\n    printf(\"%p\", cpc);\n    printf(\"%p\", pwc);\n    printf(\"%p\", cpwc);\n    printf(\"%p\", \"s4\");\n    printf(\"%p\", L\"s5W\");\n}" always "class foo {};\nvoid foo(char* pc, const char* cpc, wchar_t* pwc, const wchar_t* cpwc) {\n    printf(\"%p\", pc);\n    printf(\"%p\", cpc);\n    printf(\"%p\", pwc);\n    printf(\"%p\", cpwc);\n    printf(\"%p\", \"s4\");\n    printf(\"%p\", L\"s5W\");\n}"
Line 2348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2348 always 2348
  "" always ""
Line 2350
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2350 always 2350
  "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d) {\n    printf(\"%e\", f);\n    printf(\"%E\", \"s4\");\n    printf(\"%f\", cpi);\n    printf(\"%G\", bp);\n    printf(\"%f\", d);\n    printf(\"%f\", b);\n    printf(\"%f\", (float)cpi);\n}" always "class foo {};\nvoid foo(const int* cpi, foo f, bar b, bar* bp, double d) {\n    printf(\"%e\", f);\n    printf(\"%E\", \"s4\");\n    printf(\"%f\", cpi);\n    printf(\"%G\", bp);\n    printf(\"%f\", d);\n    printf(\"%f\", b);\n    printf(\"%f\", (float)cpi);\n}"
Line 2360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2360 always 2360
  "[test.cpp:3]: (warning) %e in format string (no. 1) requires 'double' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %E in format string (no. 1) requires 'double' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'const signed int *'.\n[test.cpp:6]: (warning) %G in format string (no. 1) requires 'double' but the argument type is 'bar *'.\n" always "[test.cpp:3]: (warning) %e in format string (no. 1) requires 'double' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %E in format string (no. 1) requires 'double' but the argument type is 'const char *'.\n[test.cpp:5]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'const signed int *'.\n[test.cpp:6]: (warning) %G in format string (no. 1) requires 'double' but the argument type is 'bar *'.\n"
Line 2365
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2365 always 2365
  "class foo {};\nvoid foo(const char* cpc, char* pc) {\n    printf(\"%e\", cpc);\n    printf(\"%E\", pc);\n    printf(\"%f\", cpc);\n    printf(\"%G\", pc);\n    printf(\"%f\", pc);\n}" always "class foo {};\nvoid foo(const char* cpc, char* pc) {\n    printf(\"%e\", cpc);\n    printf(\"%E\", pc);\n    printf(\"%f\", cpc);\n    printf(\"%G\", pc);\n    printf(\"%f\", pc);\n}"
Line 2373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2373 always 2373
  "[test.cpp:3]: (warning) %e in format string (no. 1) requires 'double' but the argument type is 'const char *'.\n[test.cpp:4]: (warning) %E in format string (no. 1) requires 'double' but the argument type is 'char *'.\n[test.cpp:5]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'const char *'.\n[test.cpp:6]: (warning) %G in format string (no. 1) requires 'double' but the argument type is 'char *'.\n[test.cpp:7]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'char *'.\n" always "[test.cpp:3]: (warning) %e in format string (no. 1) requires 'double' but the argument type is 'const char *'.\n[test.cpp:4]: (warning) %E in format string (no. 1) requires 'double' but the argument type is 'char *'.\n[test.cpp:5]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'const char *'.\n[test.cpp:6]: (warning) %G in format string (no. 1) requires 'double' but the argument type is 'char *'.\n[test.cpp:7]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'char *'.\n"
Line 2379
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2379 always 2379
  "class foo {};\nvoid foo() {\n    printf(\"%e\", L\"s5W\");\n    printf(\"%E\", L\"s5W\");\n    printf(\"%f\", L\"s5W\");\n    printf(\"%G\", L\"s5W\");\n}" always "class foo {};\nvoid foo() {\n    printf(\"%e\", L\"s5W\");\n    printf(\"%E\", L\"s5W\");\n    printf(\"%f\", L\"s5W\");\n    printf(\"%G\", L\"s5W\");\n}"
Line 2386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2386 always 2386
  "[test.cpp:3]: (warning) %e in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n[test.cpp:4]: (warning) %E in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n[test.cpp:5]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n[test.cpp:6]: (warning) %G in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n" always "[test.cpp:3]: (warning) %e in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n[test.cpp:4]: (warning) %E in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n[test.cpp:5]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n[test.cpp:6]: (warning) %G in format string (no. 1) requires 'double' but the argument type is 'const wchar_t *'.\n"
Line 2391
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2391 always 2391
  "class foo;\nvoid foo(foo f) {\n    printf(\"%u\", f);\n    printf(\"%f\", f);\n    printf(\"%p\", f);\n}" always "class foo;\nvoid foo(foo f) {\n    printf(\"%u\", f);\n    printf(\"%f\", f);\n    printf(\"%p\", f);\n}"
Line 2397
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2397 always 2397
  "[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'foo'.\n[test.cpp:5]: (warning) %p in format string (no. 1) requires an address but the argument type is 'foo'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'foo'.\n[test.cpp:4]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'foo'.\n[test.cpp:5]: (warning) %p in format string (no. 1) requires an address but the argument type is 'foo'.\n"
Line 2403
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2403 always 2403
  "void foo(signed char sc, unsigned char uc, short int si, unsigned short int usi) {\n  printf(\"%hhx %hhd\", sc, uc);\n  printf(\"%hd %hu\", si, usi);\n}" always "void foo(signed char sc, unsigned char uc, short int si, unsigned short int usi) {\n  printf(\"%hhx %hhd\", sc, uc);\n  printf(\"%hd %hu\", si, usi);\n}"
Line 2407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2407 always 2407
  "[test.cpp:2]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed char'.\n[test.cpp:2]: (warning) %hhd in format string (no. 2) requires 'char' but the argument type is 'unsigned char'.\n" always "[test.cpp:2]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed char'.\n[test.cpp:2]: (warning) %hhd in format string (no. 2) requires 'char' but the argument type is 'unsigned char'.\n"
Line 2410
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2410 always 2410
  "void foo(long long int lli, unsigned long long int ulli, long int li, unsigned long int uli) {\n  printf(\"%llo %llx\", lli, ulli);\n  printf(\"%ld %lu\", li, uli);\n}" always "void foo(long long int lli, unsigned long long int ulli, long int li, unsigned long int uli) {\n  printf(\"%llo %llx\", lli, ulli);\n  printf(\"%ld %lu\", li, uli);\n}"
Line 2414
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2414 always 2414
  "" always ""
Line 2416
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2416 always 2416
  "void foo(intmax_t im, uintmax_t uim, size_t s, ptrdiff_t p, long double ld, std::size_t ss, std::ptrdiff_t sp) {\n  printf(\"%jd %jo\", im, uim);\n  printf(\"%zx\", s);\n  printf(\"%ti\", p);\n  printf(\"%Lf\", ld);\n  printf(\"%zx\", ss);\n  printf(\"%ti\", sp);\n}" always "void foo(intmax_t im, uintmax_t uim, size_t s, ptrdiff_t p, long double ld, std::size_t ss, std::ptrdiff_t sp) {\n  printf(\"%jd %jo\", im, uim);\n  printf(\"%zx\", s);\n  printf(\"%ti\", p);\n  printf(\"%Lf\", ld);\n  printf(\"%zx\", ss);\n  printf(\"%ti\", sp);\n}"
Line 2424
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2424 always 2424
  "" always ""
Line 2428
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2428 always 2428
  "void foo(intmax_t im, uintmax_t uim, size_t s, ptrdiff_t p, long double ld, std::size_t ss, std::ptrdiff_t sp) {\n  printf(\"%jb %jw\", im, uim);\n  printf(\"%zr\", s);\n  printf(\"%tm\", p);\n  printf(\"%La\", ld);\n  printf(\"%zv\", ss);\n  printf(\"%tp\", sp);\n}" always "void foo(intmax_t im, uintmax_t uim, size_t s, ptrdiff_t p, long double ld, std::size_t ss, std::ptrdiff_t sp) {\n  printf(\"%jb %jw\", im, uim);\n  printf(\"%zr\", s);\n  printf(\"%tm\", p);\n  printf(\"%La\", ld);\n  printf(\"%zv\", ss);\n  printf(\"%tp\", sp);\n}"
Line 2436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2436 always 2436
  "" always ""
Line 2438
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2438 always 2438
  "void foo(long long l, ptrdiff_t p, std::ptrdiff_t sp) {\n  printf(\"%td\", p);\n  printf(\"%td\", sp);\n  printf(\"%td\", l);\n}" always "void foo(long long l, ptrdiff_t p, std::ptrdiff_t sp) {\n  printf(\"%td\", p);\n  printf(\"%td\", sp);\n  printf(\"%td\", l);\n}"
Line 2443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2443 always 2443
  "[test.cpp:4]: (warning) %td in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'signed long long'.\n" always "[test.cpp:4]: (warning) %td in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'signed long long'.\n"
Line 2445
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2445 always 2445
  "void foo(int i, long double ld) {\n  printf(\"%zx %zu\", i, ld);\n}" always "void foo(int i, long double ld) {\n  printf(\"%zx %zu\", i, ld);\n}"
Line 2448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2448 always 2448
  "[test.cpp:2]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %zu in format string (no. 2) requires 'size_t' but the argument type is 'long double'.\n" always "[test.cpp:2]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %zu in format string (no. 2) requires 'size_t' but the argument type is 'long double'.\n"
Line 2451
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2451 always 2451
  "void foo(unsigned int ui, long double ld) {\n  printf(\"%zu %zx\", ui, ld);\n}" always "void foo(unsigned int ui, long double ld) {\n  printf(\"%zu %zx\", ui, ld);\n}"
Line 2454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2454 always 2454
  "[test.cpp:2]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %zx in format string (no. 2) requires 'size_t' but the argument type is 'long double'.\n" always "[test.cpp:2]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %zx in format string (no. 2) requires 'size_t' but the argument type is 'long double'.\n"
Line 2457
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2457 always 2457
  "void foo(int i, long double ld) {\n  printf(\"%tx %tu\", i, ld);\n}" always "void foo(int i, long double ld) {\n  printf(\"%tx %tu\", i, ld);\n}"
Line 2460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2460 always 2460
  "[test.cpp:2]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %tu in format string (no. 2) requires 'unsigned ptrdiff_t' but the argument type is 'long double'.\n" always "[test.cpp:2]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %tu in format string (no. 2) requires 'unsigned ptrdiff_t' but the argument type is 'long double'.\n"
Line 2464
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2464 always 2464
  "void foo(unsigned int i) {\n  printf(\"%h\", i);\n  printf(\"%hh\", i);\n  printf(\"%l\", i);\n  printf(\"%ll\", i);\n  printf(\"%j\", i);\n  printf(\"%z\", i);\n  printf(\"%t\", i);\n  printf(\"%L\", i);\n  printf(\"%I\", i);\n}" always "void foo(unsigned int i) {\n  printf(\"%h\", i);\n  printf(\"%hh\", i);\n  printf(\"%l\", i);\n  printf(\"%ll\", i);\n  printf(\"%j\", i);\n  printf(\"%z\", i);\n  printf(\"%t\", i);\n  printf(\"%L\", i);\n  printf(\"%I\", i);\n}"
Line 2475
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2475 always 2475
  "[test.cpp:2]: (warning) 'h' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:3]: (warning) 'hh' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:4]: (warning) 'l' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'll' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'j' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'z' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 't' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'L' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n" always "[test.cpp:2]: (warning) 'h' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:3]: (warning) 'hh' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:4]: (warning) 'l' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'll' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'j' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'z' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 't' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'L' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n"
Line 2485
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2485 always 2485
  "void foo(unsigned int i) {\n  printf(\"%hd\", i);\n  printf(\"%hhd\", i);\n  printf(\"%ld\", i);\n  printf(\"%lld\", i);\n}" always "void foo(unsigned int i) {\n  printf(\"%hd\", i);\n  printf(\"%hhd\", i);\n  printf(\"%ld\", i);\n  printf(\"%lld\", i);\n}"
Line 2491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2491 always 2491
  "[test.cpp:2]: (warning) %hd in format string (no. 1) requires 'short' but the argument type is 'unsigned int'.\n[test.cpp:3]: (warning) %hhd in format string (no. 1) requires 'char' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %lld in format string (no. 1) requires 'long long' but the argument type is 'unsigned int'.\n" always "[test.cpp:2]: (warning) %hd in format string (no. 1) requires 'short' but the argument type is 'unsigned int'.\n[test.cpp:3]: (warning) %hhd in format string (no. 1) requires 'char' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %lld in format string (no. 1) requires 'long long' but the argument type is 'unsigned int'.\n"
Line 2496
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2496 always 2496
  "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" always "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}"
  false always 0
  true always 1
Line 2500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2500 always 2500
  "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
Line 2503
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2503 always 2503
  "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" always "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}"
  false always 0
  true always 1
Line 2507
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2507 always 2507
  "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
Line 2510
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2510 always 2510
  "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" always "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}"
  false always 0
  true always 1
Line 2514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2514 always 2514
  "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
Line 2517
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2517 always 2517
  "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" always "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}"
  false always 0
  true always 1
Line 2521
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2521 always 2521
  "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
Line 2524
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2524 always 2524
  "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" always "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}"
  false always 0
  true always 1
Line 2528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2528 always 2528
  "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
Line 2531
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2531 always 2531
  "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" always "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}"
  false always 0
  true always 1
Line 2535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2535 always 2535
  "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
Line 2538
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2538 always 2538
  "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" always "void foo(size_t s, ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}"
  false always 0
  true always 1
Line 2542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2542 always 2542
  "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 2545
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2545 always 2545
  "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}" always "void foo(std::size_t s, std::ptrdiff_t p) {\n  printf(\"%zd\", s);\n  printf(\"%tu\", p);\n}"
  false always 0
  true always 1
Line 2549
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2549 always 2549
  "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:2]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:3]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 2552
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2552 always 2552
  "void foo(size_t s, uintmax_t um) {\n  printf(\"%lu\", s);\n  printf(\"%lu\", um);\n  printf(\"%llu\", s);\n  printf(\"%llu\", um);\n}" always "void foo(size_t s, uintmax_t um) {\n  printf(\"%lu\", s);\n  printf(\"%lu\", um);\n  printf(\"%llu\", s);\n  printf(\"%llu\", um);\n}"
  false always 0
  true always 1
Line 2558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2558 always 2558
  "[test.cpp:2]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:3]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n[test.cpp:4]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:5]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:2]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:3]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n[test.cpp:4]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:5]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 2563
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2563 always 2563
  "void foo(unsigned int i) {\n  printf(\"%ld\", i);\n  printf(\"%lld\", i);\n  printf(\"%lu\", i);\n  printf(\"%llu\", i);\n  printf(\"%lx\", i);\n  printf(\"%llx\", i);\n}" always "void foo(unsigned int i) {\n  printf(\"%ld\", i);\n  printf(\"%lld\", i);\n  printf(\"%lu\", i);\n  printf(\"%llu\", i);\n  printf(\"%lx\", i);\n  printf(\"%llx\", i);\n}"
Line 2571
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2571 always 2571
  "[test.cpp:2]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:3]: (warning) %lld in format string (no. 1) requires 'long long' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n[test.cpp:6]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n[test.cpp:7]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" always "[test.cpp:2]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:3]: (warning) %lld in format string (no. 1) requires 'long long' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n[test.cpp:6]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n[test.cpp:7]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n"
Line 2578
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2578 always 2578
  "void foo(int i, intmax_t im, ptrdiff_t p) {\n  printf(\"%lld\", i);\n  printf(\"%lld\", im);\n  printf(\"%lld\", p);\n}" always "void foo(int i, intmax_t im, ptrdiff_t p) {\n  printf(\"%lld\", i);\n  printf(\"%lld\", im);\n  printf(\"%lld\", p);\n}"
Line 2583
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2583 always 2583
  "[test.cpp:2]: (warning) %lld in format string (no. 1) requires 'long long' but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %lld in format string (no. 1) requires 'long long' but the argument type is 'signed int'.\n"
Line 2585
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2585 always 2585
  "void foo(intmax_t im, ptrdiff_t p) {\n  printf(\"%lld\", im);\n  printf(\"%lld\", p);\n}" always "void foo(intmax_t im, ptrdiff_t p) {\n  printf(\"%lld\", im);\n  printf(\"%lld\", p);\n}"
  false always 0
  true always 1
Line 2589
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2589 always 2589
  "[test.cpp:2]: (portability) %lld in format string (no. 1) requires 'long long' but the argument type is 'intmax_t {aka signed long long}'.\n[test.cpp:3]: (portability) %lld in format string (no. 1) requires 'long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:2]: (portability) %lld in format string (no. 1) requires 'long long' but the argument type is 'intmax_t {aka signed long long}'.\n[test.cpp:3]: (portability) %lld in format string (no. 1) requires 'long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 2592
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2592 always 2592
  "class Foo {\n    double d;\n    struct Bar {\n        int i;\n    } bar[2];\n    struct Baz {\n        int i;\n    } baz;\n};\nint a[10];\nFoo f[10];\nvoid foo(const Foo* foo) {\n    printf(\"%d %f %f %d %f %f\",\n        foo->d, foo->bar[0].i, a[0],\n        f[0].d, f[0].baz.i, f[0].bar[0].i);\n}" always "class Foo {\n    double d;\n    struct Bar {\n        int i;\n    } bar[2];\n    struct Baz {\n        int i;\n    } baz;\n};\nint a[10];\nFoo f[10];\nvoid foo(const Foo* foo) {\n    printf(\"%d %f %f %d %f %f\",\n        foo->d, foo->bar[0].i, a[0],\n        f[0].d, f[0].baz.i, f[0].bar[0].i);\n}"
Line 2608
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2608 always 2608
  "[test.cpp:13]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'double'.\n[test.cpp:13]: (warning) %f in format string (no. 2) requires 'double' but the argument type is 'signed int'.\n[test.cpp:13]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'int'.\n[test.cpp:13]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'double'.\n[test.cpp:13]: (warning) %f in format string (no. 5) requires 'double' but the argument type is 'int'.\n[test.cpp:13]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'int'.\n" always "[test.cpp:13]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'double'.\n[test.cpp:13]: (warning) %f in format string (no. 2) requires 'double' but the argument type is 'signed int'.\n[test.cpp:13]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'int'.\n[test.cpp:13]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'double'.\n[test.cpp:13]: (warning) %f in format string (no. 5) requires 'double' but the argument type is 'int'.\n[test.cpp:13]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'int'.\n"
Line 2615
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2615 always 2615
  "short f() { return 0; }\nvoid foo() { printf(\"%d %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" always "short f() { return 0; }\nvoid foo() { printf(\"%d %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2617
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2617 always 2617
  "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %I64d in format string (no. 5) requires '__int64' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed short'.\n" always "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %I64d in format string (no. 5) requires '__int64' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed short'.\n"
Line 2625
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2625 always 2625
  "unsigned short f() { return 0; }\nvoid foo() { printf(\"%u %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" always "unsigned short f() { return 0; }\nvoid foo() { printf(\"%u %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2627
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2627 always 2627
  "[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %I64u in format string (no. 5) requires 'unsigned __int64' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned short'.\n" always "[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %I64u in format string (no. 5) requires 'unsigned __int64' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned short'.\n"
Line 2634
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2634 always 2634
  "int f() { return 0; }\nvoid foo() { printf(\"%d %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" always "int f() { return 0; }\nvoid foo() { printf(\"%d %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2636
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2636 always 2636
  "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64d in format string (no. 5) requires '__int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64d in format string (no. 5) requires '__int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed int'.\n"
Line 2644
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2644 always 2644
  "unsigned int f() { return 0; }\nvoid foo() { printf(\"%u %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" always "unsigned int f() { return 0; }\nvoid foo() { printf(\"%u %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2646 always 2646
  "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %I64u in format string (no. 5) requires 'unsigned __int64' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned int'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %I64u in format string (no. 5) requires 'unsigned __int64' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned int'.\n"
Line 2654
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2654 always 2654
  "long f() { return 0; }\nvoid foo() { printf(\"%ld %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" always "long f() { return 0; }\nvoid foo() { printf(\"%ld %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2656
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2656 always 2656
  "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %I64d in format string (no. 5) requires '__int64' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed long'.\n" always "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %I64d in format string (no. 5) requires '__int64' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed long'.\n"
Line 2664
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2664 always 2664
  "unsigned long f() { return 0; }\nvoid foo() { printf(\"%lu %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" always "unsigned long f() { return 0; }\nvoid foo() { printf(\"%lu %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2666 always 2666
  "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %I64u in format string (no. 5) requires 'unsigned __int64' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned long'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %I64u in format string (no. 5) requires 'unsigned __int64' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned long'.\n"
Line 2674
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2674 always 2674
  "long long f() { return 0; }\nvoid foo() { printf(\"%lld %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" always "long long f() { return 0; }\nvoid foo() { printf(\"%lld %u %lu %I64u %I64d %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2676
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2676 always 2676
  "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed long long'.\n" always "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %I64u in format string (no. 4) requires 'unsigned __int64' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'signed long long'.\n"
Line 2683
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2683 always 2683
  "unsigned long long f() { return 0; }\nvoid foo() { printf(\"%llu %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }" always "unsigned long long f() { return 0; }\nvoid foo() { printf(\"%llu %d %ld %I64d %I64u %f %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2685 always 2685
  "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned long long'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %I64d in format string (no. 4) requires '__int64' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %f in format string (no. 6) requires 'double' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %Lf in format string (no. 7) requires 'long double' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %p in format string (no. 8) requires an address but the argument type is 'unsigned long long'.\n"
Line 2692
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2692 always 2692
  "float f() { return 0; }\nvoid foo() { printf(\"%f %d %ld %u %lu %I64d %I64u %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f(), f()); }" always "float f() { return 0; }\nvoid foo() { printf(\"%f %d %ld %u %lu %I64d %I64u %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2694
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2694 always 2694
  "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'float'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'float'.\n[test.cpp:2]: (warning) %u in format string (no. 4) requires 'unsigned int' but the argument type is 'float'.\n[test.cpp:2]: (warning) %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'float'.\n[test.cpp:2]: (warning) %I64d in format string (no. 6) requires '__int64' but the argument type is 'float'.\n[test.cpp:2]: (warning) %I64u in format string (no. 7) requires 'unsigned __int64' but the argument type is 'float'.\n[test.cpp:2]: (warning) %Lf in format string (no. 8) requires 'long double' but the argument type is 'float'.\n[test.cpp:2]: (warning) %p in format string (no. 9) requires an address but the argument type is 'float'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'float'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'float'.\n[test.cpp:2]: (warning) %u in format string (no. 4) requires 'unsigned int' but the argument type is 'float'.\n[test.cpp:2]: (warning) %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'float'.\n[test.cpp:2]: (warning) %I64d in format string (no. 6) requires '__int64' but the argument type is 'float'.\n[test.cpp:2]: (warning) %I64u in format string (no. 7) requires 'unsigned __int64' but the argument type is 'float'.\n[test.cpp:2]: (warning) %Lf in format string (no. 8) requires 'long double' but the argument type is 'float'.\n[test.cpp:2]: (warning) %p in format string (no. 9) requires an address but the argument type is 'float'.\n"
Line 2703
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2703 always 2703
  "double f() { return 0; }\nvoid foo() { printf(\"%f %d %ld %u %lu %I64d %I64u %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f(), f()); }" always "double f() { return 0; }\nvoid foo() { printf(\"%f %d %ld %u %lu %I64d %I64u %Lf %p\", f(), f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2705
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2705 always 2705
  "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'double'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'double'.\n[test.cpp:2]: (warning) %u in format string (no. 4) requires 'unsigned int' but the argument type is 'double'.\n[test.cpp:2]: (warning) %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'double'.\n[test.cpp:2]: (warning) %I64d in format string (no. 6) requires '__int64' but the argument type is 'double'.\n[test.cpp:2]: (warning) %I64u in format string (no. 7) requires 'unsigned __int64' but the argument type is 'double'.\n[test.cpp:2]: (warning) %Lf in format string (no. 8) requires 'long double' but the argument type is 'double'.\n[test.cpp:2]: (warning) %p in format string (no. 9) requires an address but the argument type is 'double'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'double'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'double'.\n[test.cpp:2]: (warning) %u in format string (no. 4) requires 'unsigned int' but the argument type is 'double'.\n[test.cpp:2]: (warning) %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'double'.\n[test.cpp:2]: (warning) %I64d in format string (no. 6) requires '__int64' but the argument type is 'double'.\n[test.cpp:2]: (warning) %I64u in format string (no. 7) requires 'unsigned __int64' but the argument type is 'double'.\n[test.cpp:2]: (warning) %Lf in format string (no. 8) requires 'long double' but the argument type is 'double'.\n[test.cpp:2]: (warning) %p in format string (no. 9) requires an address but the argument type is 'double'.\n"
Line 2714
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2714 always 2714
  "long double f() { return 0; }\nvoid foo() { printf(\"%Lf %d %ld %u %lu %I64d %I64u %f %p\", f(), f(), f(), f(), f(), f(), f(), f(), f()); }" always "long double f() { return 0; }\nvoid foo() { printf(\"%Lf %d %ld %u %lu %I64d %I64u %f %p\", f(), f(), f(), f(), f(), f(), f(), f(), f()); }"
Line 2716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2716 always 2716
  "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %u in format string (no. 4) requires 'unsigned int' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %I64d in format string (no. 6) requires '__int64' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %I64u in format string (no. 7) requires 'unsigned __int64' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %f in format string (no. 8) requires 'double' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %p in format string (no. 9) requires an address but the argument type is 'long double'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %u in format string (no. 4) requires 'unsigned int' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %I64d in format string (no. 6) requires '__int64' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %I64u in format string (no. 7) requires 'unsigned __int64' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %f in format string (no. 8) requires 'double' but the argument type is 'long double'.\n[test.cpp:2]: (warning) %p in format string (no. 9) requires an address but the argument type is 'long double'.\n"
Line 2725
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2725 always 2725
  "int f() { return 0; }\nvoid foo() { printf(\"%I64d %I64u %I64x %d\", f(), f(), f(), f()); }" always "int f() { return 0; }\nvoid foo() { printf(\"%I64d %I64u %I64x %d\", f(), f(), f(), f()); }"
Line 2727
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2727 always 2727
  "[test.cpp:2]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64x in format string (no. 3) requires 'unsigned __int64' but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %I64x in format string (no. 3) requires 'unsigned __int64' but the argument type is 'signed int'.\n"
Line 2731
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2731 always 2731
  "long long f() { return 0; }\nvoid foo() { printf(\"%I32d %I32u %I32x %lld\", f(), f(), f(), f()); }" always "long long f() { return 0; }\nvoid foo() { printf(\"%I32d %I32u %I32x %lld\", f(), f(), f(), f()); }"
Line 2733
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2733 always 2733
  "[test.cpp:2]: (warning) %I32d in format string (no. 1) requires '__int32' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %I32x in format string (no. 3) requires 'unsigned __int32' but the argument type is 'signed long long'.\n" always "[test.cpp:2]: (warning) %I32d in format string (no. 1) requires '__int32' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is 'signed long long'.\n[test.cpp:2]: (warning) %I32x in format string (no. 3) requires 'unsigned __int32' but the argument type is 'signed long long'.\n"
Line 2737
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2737 always 2737
  "unsigned long long f() { return 0; }\nvoid foo() { printf(\"%I32d %I32u %I32x %llx\", f(), f(), f(), f()); }" always "unsigned long long f() { return 0; }\nvoid foo() { printf(\"%I32d %I32u %I32x %llx\", f(), f(), f(), f()); }"
Line 2739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2739 always 2739
  "[test.cpp:2]: (warning) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %I32x in format string (no. 3) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n" always "[test.cpp:2]: (warning) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n[test.cpp:2]: (warning) %I32x in format string (no. 3) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n"
Line 2743
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2743 always 2743
  "signed char f() { return 0; }\nvoid foo() { printf(\"%Id %Iu %Ix %hhi\", f(), f(), f(), f()); }" always "signed char f() { return 0; }\nvoid foo() { printf(\"%Id %Iu %Ix %hhi\", f(), f(), f(), f()); }"
Line 2745
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2745 always 2745
  "[test.cpp:2]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'signed char'.\n[test.cpp:2]: (warning) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'signed char'.\n[test.cpp:2]: (warning) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'signed char'.\n" always "[test.cpp:2]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'signed char'.\n[test.cpp:2]: (warning) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'signed char'.\n[test.cpp:2]: (warning) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'signed char'.\n"
Line 2749
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2749 always 2749
  "unsigned char f() { return 0; }\nvoid foo() { printf(\"%Id %Iu %Ix %hho\", f(), f(), f(), f()); }" always "unsigned char f() { return 0; }\nvoid foo() { printf(\"%Id %Iu %Ix %hho\", f(), f(), f(), f()); }"
Line 2751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2751 always 2751
  "[test.cpp:2]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'unsigned char'.\n" always "[test.cpp:2]: (warning) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'unsigned char'.\n"
Line 2755
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2755 always 2755
  "namespace bar { int f() { return 0; } }\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar::f(), bar::f(), bar::f(), bar::f(), bar::f(), bar::f()); }" always "namespace bar { int f() { return 0; } }\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar::f(), bar::f(), bar::f(), bar::f(), bar::f(), bar::f()); }"
Line 2757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2757 always 2757
  "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n"
Line 2763
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2763 always 2763
  "struct Fred { int i; } f;\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", f.i, f.i, f.i, f.i, f.i, f.i); }" always "struct Fred { int i; } f;\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", f.i, f.i, f.i, f.i, f.i, f.i); }"
Line 2765
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2765 always 2765
  "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n"
Line 2771
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2771 always 2771
  "struct Fred { unsigned int u; } f;\nvoid foo() { printf(\"%u %d %ld %f %Lf %p\", f.u, f.u, f.u, f.u, f.u, f.u); }" always "struct Fred { unsigned int u; } f;\nvoid foo() { printf(\"%u %d %ld %f %Lf %p\", f.u, f.u, f.u, f.u, f.u, f.u); }"
Line 2773
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2773 always 2773
  "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'unsigned int'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'unsigned int'.\n"
Line 2779
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2779 always 2779
  "struct Fred { unsigned int ui() { return 0; } } f;\nvoid foo() { printf(\"%u %d %ld %f %Lf %p\", f.ui(), f.ui(), f.ui(), f.ui(), f.ui(), f.ui()); }" always "struct Fred { unsigned int ui() { return 0; } } f;\nvoid foo() { printf(\"%u %d %ld %f %Lf %p\", f.ui(), f.ui(), f.ui(), f.ui(), f.ui(), f.ui()); }"
Line 2781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2781 always 2781
  "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'unsigned int'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %p in format string (no. 6) requires an address but the argument type is 'unsigned int'.\n"
Line 2788
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2788 always 2788
  "void f(int len, int newline) {\n    printf(\"%s\", newline ? a : str + len);\n    printf(\"%s\", newline + newline);\n}" always "void f(int len, int newline) {\n    printf(\"%s\", newline ? a : str + len);\n    printf(\"%s\", newline + newline);\n}"
Line 2792
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2792 always 2792
  "[test.cpp:3]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'signed int'.\n"
Line 2794
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2794 always 2794
  "struct Fred { int i; } f;\nstruct Fred & bar() { };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }" always "struct Fred { int i; } f;\nstruct Fred & bar() { };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }"
Line 2797
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2797 always 2797
  "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n"
Line 2803
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2803 always 2803
  "struct Fred { int i; } f;\nconst struct Fred & bar() { };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }" always "struct Fred { int i; } f;\nconst struct Fred & bar() { };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }"
Line 2806
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2806 always 2806
  "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n"
Line 2812
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2812 always 2812
  "struct Fred { int i; } f;\nstatic const struct Fred & bar() { };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }" always "struct Fred { int i; } f;\nstatic const struct Fred & bar() { };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }"
Line 2815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2815 always 2815
  "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n"
Line 2821
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2821 always 2821
  "struct Fred { int i; } f[2];\nstruct Fred * bar() { return f; };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i); }" always "struct Fred { int i; } f[2];\nstruct Fred * bar() { return f; };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i); }"
Line 2824
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2824 always 2824
  "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n"
Line 2830
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2830 always 2830
  "struct Fred { int i; } f[2];\nconst struct Fred * bar() { return f; };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i); }" always "struct Fred { int i; } f[2];\nconst struct Fred * bar() { return f; };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i); }"
Line 2833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2833 always 2833
  "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n"
Line 2839
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2839 always 2839
  "struct Fred { int i; } f[2];\nstatic const struct Fred * bar() { return f; };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i); }" always "struct Fred { int i; } f[2];\nstatic const struct Fred * bar() { return f; };\nvoid foo() { printf(\"%d %u %lu %f %Lf %p\", bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i, bar()[0].i); }"
Line 2842
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2842 always 2842
  "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 5) requires 'long double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %p in format string (no. 6) requires an address but the argument type is 'signed int'.\n"
Line 2848
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2848 always 2848
  "struct Fred { int32_t i; } f;\nstruct Fred & bar() { };\nvoid foo() { printf(\"%d %ld %u %lu %f %Lf\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }" always "struct Fred { int32_t i; } f;\nstruct Fred & bar() { };\nvoid foo() { printf(\"%d %ld %u %lu %f %Lf\", bar().i, bar().i, bar().i, bar().i, bar().i, bar().i); }"
Line 2851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2851 always 2851
  "[test.cpp:3]: (warning) %ld in format string (no. 2) requires 'long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 4) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 5) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 6) requires 'long double' but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %ld in format string (no. 2) requires 'long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %lu in format string (no. 4) requires 'unsigned long' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 5) requires 'double' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %Lf in format string (no. 6) requires 'long double' but the argument type is 'signed int'.\n"
Line 2859
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2859 always 2859
  "void f(double *x) {\n    printf(\"%f\", x[0]);\n}" always "void f(double *x) {\n    printf(\"%f\", x[0]);\n}"
Line 2862
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2862 always 2862
  "" always ""
Line 2864
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2864 always 2864
  "int array[10];\nint * foo() { return array; }\nvoid f() {\n    printf(\"%f\", foo()[0]);\n}" always "int array[10];\nint * foo() { return array; }\nvoid f() {\n    printf(\"%f\", foo()[0]);\n}"
Line 2869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2869 always 2869
  "[test.cpp:4]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" always "[test.cpp:4]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n"
Line 2871
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2871 always 2871
  "struct Base { int length() { } };\nstruct Derived : public Base { };\nvoid foo(Derived * d) {\n    printf(\"%f\", d.length());\n}" always "struct Base { int length() { } };\nstruct Derived : public Base { };\nvoid foo(Derived * d) {\n    printf(\"%f\", d.length());\n}"
Line 2876
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2876 always 2876
  "[test.cpp:4]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" always "[test.cpp:4]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n"
Line 2878
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2878 always 2878
  "std::vector<int> v;\nvoid foo() {\n    printf(\"%d %u %f\", v[0], v[0], v[0]);\n}" always "std::vector<int> v;\nvoid foo() {\n    printf(\"%d %u %f\", v[0], v[0], v[0]);\n}"
Line 2882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2882 always 2882
  "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'signed int'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:3]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'signed int'.\n"
Line 2886
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2886 always 2886
  "int bar(int a);\nvoid foo() {\n    printf(\"%d\", bar(0));\n}" always "int bar(int a);\nvoid foo() {\n    printf(\"%d\", bar(0));\n}"
Line 2890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2890 always 2890
  "" always ""
Line 2892
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2892 always 2892
  "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" always "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n"
  false always 0
  true always 1
Line 2898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2898 always 2898
  "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n"
Line 2903
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2903 always 2903
  "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" always "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n"
  false always 0
  true always 1
Line 2909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2909 always 2909
  "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 2914
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2914 always 2914
  "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" always "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n"
  false always 0
  true always 1
Line 2920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2920 always 2920
  "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n"
Line 2925
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2925 always 2925
  "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" always "std::vector<int> v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n"
  false always 0
  true always 1
Line 2931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2931 always 2931
  "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n"
Line 2936
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2936 always 2936
  "class Fred : public std::vector<int> {} v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n" always "class Fred : public std::vector<int> {} v;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %Iu %d %f\", v.size(), v.size(), v.size(), v.size());\n    printf(\"%zu %Iu %d %f\", s.size(), s.size(), s.size(), s.size());\n}\n"
  false always 0
  true always 1
Line 2942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2942 always 2942
  "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:4]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:4]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %d in format string (no. 3) requires 'int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:5]: (portability) %f in format string (no. 4) requires 'double' but the argument type is 'std::size_t {aka unsigned long}'.\n"
Line 2947
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2947 always 2947
  "class Fred : public std::vector<int> {} v;\nvoid foo() {\n    printf(\"%d %u %f\", v[0], v[0], v[0]);\n}\n" always "class Fred : public std::vector<int> {} v;\nvoid foo() {\n    printf(\"%d %u %f\", v[0], v[0], v[0]);\n}\n"
  false always 0
  true always 1
Line 2951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2951 always 2951
  "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'int'.\n[test.cpp:3]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'int'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'int'.\n[test.cpp:3]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'int'.\n"
Line 2954
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2954 always 2954
  "std::string s;\nvoid foo() {\n    printf(\"%s %p %u %d %f\", s.c_str(), s.c_str(), s.c_str(), s.c_str(), s.c_str());\n}\n" always "std::string s;\nvoid foo() {\n    printf(\"%s %p %u %d %f\", s.c_str(), s.c_str(), s.c_str(), s.c_str(), s.c_str());\n}\n"
  false always 0
  true always 1
Line 2958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2958 always 2958
  "[test.cpp:3]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %f in format string (no. 5) requires 'double' but the argument type is 'const char *'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %d in format string (no. 4) requires 'int' but the argument type is 'const char *'.\n[test.cpp:3]: (warning) %f in format string (no. 5) requires 'double' but the argument type is 'const char *'.\n"
Line 2962
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2962 always 2962
  "std::vector<int> array;\nchar * p = 0;\nchar q[] = \"abc\";\nchar r[10] = { 0 };\nsize_t s;\nvoid foo() {\n    printf(\"%zu %zu\", array.size(), s);\n    printf(\"%u %u %u\", p, q, r);\n    printf(\"%u %u\", array.size(), s);\n    printf(\"%lu %lu\", array.size(), s);\n    printf(\"%llu %llu\", array.size(), s);\n}\n" always "std::vector<int> array;\nchar * p = 0;\nchar q[] = \"abc\";\nchar r[10] = { 0 };\nsize_t s;\nvoid foo() {\n    printf(\"%zu %zu\", array.size(), s);\n    printf(\"%u %u %u\", p, q, r);\n    printf(\"%u %u\", array.size(), s);\n    printf(\"%lu %lu\", array.size(), s);\n    printf(\"%llu %llu\", array.size(), s);\n}\n"
  false always 0
  true always 1
Line 2974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2974 always 2974
  "[test.cpp:8]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char *'.\n[test.cpp:8]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'char *'.\n[test.cpp:8]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'char *'.\n[test.cpp:9]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:9]: (portability) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:10]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:10]: (portability) %lu in format string (no. 2) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:11]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:11]: (portability) %llu in format string (no. 2) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:8]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char *'.\n[test.cpp:8]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'char *'.\n[test.cpp:8]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'char *'.\n[test.cpp:9]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:9]: (portability) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:10]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:10]: (portability) %lu in format string (no. 2) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:11]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n[test.cpp:11]: (portability) %llu in format string (no. 2) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n"
Line 2984
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2984 always 2984
  "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%td %zd %d %d %d %d %d %d %d %d %d %d %d\", pt, pt, b, c, sc, uc, s, us, st, pt, pc, cl, ca);\n}\n" always "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%td %zd %d %d %d %d %d %d %d %d %d %d %d\", pt, pt, b, c, sc, uc, s, us, st, pt, pc, cl, ca);\n}\n"
  false always 0
  true always 1
Line 2998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  2998 always 2998
  "[test.cpp:13]: (portability) %zd in format string (no. 2) requires 'ssize_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (portability) %d in format string (no. 9) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %d in format string (no. 10) requires 'int' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %d in format string (no. 11) requires 'int' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %d in format string (no. 12) requires 'int' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %d in format string (no. 13) requires 'int' but the argument type is 'char *'.\n" always "[test.cpp:13]: (portability) %zd in format string (no. 2) requires 'ssize_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (portability) %d in format string (no. 9) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %d in format string (no. 10) requires 'int' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %d in format string (no. 11) requires 'int' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %d in format string (no. 12) requires 'int' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %d in format string (no. 13) requires 'int' but the argument type is 'char *'.\n"
Line 3005
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3005 always 3005
  "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\", b, c, sc, uc, s, us, st, pt, pc, cl, ca);\n}\n" always "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\", b, c, sc, uc, s, us, st, pt, pc, cl, ca);\n}\n"
  false always 0
  true always 1
Line 3019
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3019 always 3019
  "[test.cpp:13]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'bool'.\n[test.cpp:13]: (warning) %ld in format string (no. 2) requires 'long' but the argument type is 'char'.\n[test.cpp:13]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'signed char'.\n[test.cpp:13]: (warning) %ld in format string (no. 4) requires 'long' but the argument type is 'unsigned char'.\n[test.cpp:13]: (warning) %ld in format string (no. 5) requires 'long' but the argument type is 'signed short'.\n[test.cpp:13]: (warning) %ld in format string (no. 6) requires 'long' but the argument type is 'unsigned short'.\n[test.cpp:13]: (portability) %ld in format string (no. 7) requires 'long' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %ld in format string (no. 8) requires 'long' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %ld in format string (no. 9) requires 'long' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %ld in format string (no. 10) requires 'long' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %ld in format string (no. 11) requires 'long' but the argument type is 'char *'.\n" always "[test.cpp:13]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'bool'.\n[test.cpp:13]: (warning) %ld in format string (no. 2) requires 'long' but the argument type is 'char'.\n[test.cpp:13]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'signed char'.\n[test.cpp:13]: (warning) %ld in format string (no. 4) requires 'long' but the argument type is 'unsigned char'.\n[test.cpp:13]: (warning) %ld in format string (no. 5) requires 'long' but the argument type is 'signed short'.\n[test.cpp:13]: (warning) %ld in format string (no. 6) requires 'long' but the argument type is 'unsigned short'.\n[test.cpp:13]: (portability) %ld in format string (no. 7) requires 'long' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %ld in format string (no. 8) requires 'long' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %ld in format string (no. 9) requires 'long' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %ld in format string (no. 10) requires 'long' but the argument type is 'char *'.\n[test.cpp:13]: (warning) %ld in format string (no. 11) requires 'long' but the argument type is 'char *'.\n"
Line 3032
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3032 always 3032
  "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%td %zd %d %d %d %d %d %d %d %d %d\", ptf(), ptf(), bf(), cf(), scf(), ucf(), sf(), usf(), stf(), ptf(), pcf());\n}\n" always "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%td %zd %d %d %d %d %d %d %d %d %d\", ptf(), ptf(), bf(), cf(), scf(), ucf(), sf(), usf(), stf(), ptf(), pcf());\n}\n"
  false always 0
  true always 1
Line 3046
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3046 always 3046
  "[test.cpp:13]: (portability) %zd in format string (no. 2) requires 'ssize_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (portability) %d in format string (no. 9) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %d in format string (no. 10) requires 'int' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %d in format string (no. 11) requires 'int' but the argument type is 'char *'.\n" always "[test.cpp:13]: (portability) %zd in format string (no. 2) requires 'ssize_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (portability) %d in format string (no. 9) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %d in format string (no. 10) requires 'int' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %d in format string (no. 11) requires 'int' but the argument type is 'char *'.\n"
Line 3051
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3051 always 3051
  "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%ld %ld %ld %ld %ld %ld %ld %ld %ld\", bf(), cf(), scf(), ucf(), sf(), usf(), stf(), ptf(), pcf());\n}\n" always "bool b; bool bf();\nchar c; char cf();\nsigned char sc; signed char scf();\nunsigned char uc; unsigned char ucf();\nshort s; short sf();\nunsigned short us; unsigned short usf();\nsize_t st; size_t stf();\nptrdiff_t pt; ptrdiff_t ptf();\nchar * pc; char * pcf();\nchar cl[] = \"123\";\nchar ca[3];\nvoid foo() {\n    printf(\"%ld %ld %ld %ld %ld %ld %ld %ld %ld\", bf(), cf(), scf(), ucf(), sf(), usf(), stf(), ptf(), pcf());\n}\n"
  false always 0
  true always 1
Line 3065
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3065 always 3065
  "[test.cpp:13]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'bool'.\n[test.cpp:13]: (warning) %ld in format string (no. 2) requires 'long' but the argument type is 'char'.\n[test.cpp:13]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'signed char'.\n[test.cpp:13]: (warning) %ld in format string (no. 4) requires 'long' but the argument type is 'unsigned char'.\n[test.cpp:13]: (warning) %ld in format string (no. 5) requires 'long' but the argument type is 'signed short'.\n[test.cpp:13]: (warning) %ld in format string (no. 6) requires 'long' but the argument type is 'unsigned short'.\n[test.cpp:13]: (portability) %ld in format string (no. 7) requires 'long' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %ld in format string (no. 8) requires 'long' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %ld in format string (no. 9) requires 'long' but the argument type is 'char *'.\n" always "[test.cpp:13]: (warning) %ld in format string (no. 1) requires 'long' but the argument type is 'bool'.\n[test.cpp:13]: (warning) %ld in format string (no. 2) requires 'long' but the argument type is 'char'.\n[test.cpp:13]: (warning) %ld in format string (no. 3) requires 'long' but the argument type is 'signed char'.\n[test.cpp:13]: (warning) %ld in format string (no. 4) requires 'long' but the argument type is 'unsigned char'.\n[test.cpp:13]: (warning) %ld in format string (no. 5) requires 'long' but the argument type is 'signed short'.\n[test.cpp:13]: (warning) %ld in format string (no. 6) requires 'long' but the argument type is 'unsigned short'.\n[test.cpp:13]: (portability) %ld in format string (no. 7) requires 'long' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:13]: (portability) %ld in format string (no. 8) requires 'long' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:13]: (warning) %ld in format string (no. 9) requires 'long' but the argument type is 'char *'.\n"
Line 3075
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3075 always 3075
  "struct A {};\nclass B : public std::vector<const int *> {} b;\nclass C : public std::vector<const struct A *> {} c;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %u\", b.size(), b.size());\n    printf(\"%p %d\", b[0], b[0]);\n    printf(\"%p %d\", c[0], c[0]);\n    printf(\"%p %d\", s.c_str(), s.c_str());\n}\n" always "struct A {};\nclass B : public std::vector<const int *> {} b;\nclass C : public std::vector<const struct A *> {} c;\nstd::string s;\nvoid foo() {\n    printf(\"%zu %u\", b.size(), b.size());\n    printf(\"%p %d\", b[0], b[0]);\n    printf(\"%p %d\", c[0], c[0]);\n    printf(\"%p %d\", s.c_str(), s.c_str());\n}\n"
  false always 0
  true always 1
Line 3085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3085 always 3085
  "[test.cpp:6]: (portability) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:7]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const int *'.\n[test.cpp:8]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const struct A *'.\n[test.cpp:9]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const char *'.\n" always "[test.cpp:6]: (portability) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:7]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const int *'.\n[test.cpp:8]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const struct A *'.\n[test.cpp:9]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const char *'.\n"
Line 3090
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3090 always 3090
  "class A : public std::vector<std::string> {} a;\nclass B : public std::string {} b;\nstd::string s;\nvoid foo() {\n    printf(\"%p %d\", a[0].c_str(), a[0].c_str());\n    printf(\"%c %p\", b[0], b[0]);\n    printf(\"%c %p\", s[0], s[0]);\n}\n" always "class A : public std::vector<std::string> {} a;\nclass B : public std::string {} b;\nstd::string s;\nvoid foo() {\n    printf(\"%p %d\", a[0].c_str(), a[0].c_str());\n    printf(\"%c %p\", b[0], b[0]);\n    printf(\"%c %p\", s[0], s[0]);\n}\n"
  false always 0
  false always 0
Line 3098
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3098 always 3098
  "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const char *'.\n[test.cpp:6]: (warning) %p in format string (no. 2) requires an address but the argument type is 'char'.\n[test.cpp:7]: (warning) %p in format string (no. 2) requires an address but the argument type is 'char'.\n" always "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const char *'.\n[test.cpp:6]: (warning) %p in format string (no. 2) requires an address but the argument type is 'char'.\n[test.cpp:7]: (warning) %p in format string (no. 2) requires an address but the argument type is 'char'.\n"
Line 3102
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3102 always 3102
  "template <class T>\nstruct buffer {\n    size_t size();\n};\nbuffer<int> b;\nvoid foo() {\n    printf(\"%u\", b.size());\n}\n" always "template <class T>\nstruct buffer {\n    size_t size();\n};\nbuffer<int> b;\nvoid foo() {\n    printf(\"%u\", b.size());\n}\n"
  false always 0
  true always 1
Line 3110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3110 always 3110
  "[test.cpp:7]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:7]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n"
Line 3112
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3112 always 3112
  "DWORD a;\nDWORD_PTR b;\nvoid foo() {\n    printf(\"%u %u\", a, b);\n}\n" always "DWORD a;\nDWORD_PTR b;\nvoid foo() {\n    printf(\"%u %u\", a, b);\n}\n"
  false always 0
  true always 1
Line 3117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3117 always 3117
  "[test.cpp:4]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'DWORD {aka unsigned long}'.\n[test.cpp:4]: (portability) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'DWORD_PTR {aka unsigned long}'.\n" always "[test.cpp:4]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'DWORD {aka unsigned long}'.\n[test.cpp:4]: (portability) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'DWORD_PTR {aka unsigned long}'.\n"
Line 3120
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3120 always 3120
  "unsigned long a[] = { 1, 2 };\nvoid foo() {\n    printf(\"%d %d %x \", a[0], a[0], a[0]);\n}\n" always "unsigned long a[] = { 1, 2 };\nvoid foo() {\n    printf(\"%d %d %x \", a[0], a[0], a[0]);\n}\n"
  false always 0
  false always 0
Line 3124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3124 always 3124
  "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned long'.\n[test.cpp:3]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned long'.\n[test.cpp:3]: (warning) %x in format string (no. 3) requires 'unsigned int' but the argument type is 'unsigned long'.\n" always "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned long'.\n[test.cpp:3]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'unsigned long'.\n[test.cpp:3]: (warning) %x in format string (no. 3) requires 'unsigned int' but the argument type is 'unsigned long'.\n"
Line 3128
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3128 always 3128
  "void foo (wchar_t c) {\n    printf(\"%c\", c);\n}\n" always "void foo (wchar_t c) {\n    printf(\"%c\", c);\n}\n"
  false always 0
  false always 0
Line 3131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3131 always 3131
  "" always ""
Line 3133
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3133 always 3133
  "void foo() {\n    printf(\"%f %d\", static_cast<int>(1.0f), reinterpret_cast<const void *>(0));\n}" always "void foo() {\n    printf(\"%f %d\", static_cast<int>(1.0f), reinterpret_cast<const void *>(0));\n}"
Line 3136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3136 always 3136
  "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const void *'.\n" always "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const void *'.\n"
Line 3139
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3139 always 3139
  "void foo() {\n    UNKNOWN * u;\n    printf(\"%d %x %u %f\", u[i], u[i], u[i], u[i]);\n}" always "void foo() {\n    UNKNOWN * u;\n    printf(\"%d %x %u %f\", u[i], u[i], u[i], u[i]);\n}"
Line 3143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3143 always 3143
  "" always ""
Line 3145
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3145 always 3145
  "void foo() {\n    long * l;\n    printf(\"%d %x %u %f\", l[i], l[i], l[i], l[i]);\n}" always "void foo() {\n    long * l;\n    printf(\"%d %x %u %f\", l[i], l[i], l[i], l[i]);\n}"
Line 3149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3149 always 3149
  "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'signed long'.\n[test.cpp:3]: (warning) %x in format string (no. 2) requires 'unsigned int' but the argument type is 'signed long'.\n[test.cpp:3]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'signed long'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed long'.\n" always "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'signed long'.\n[test.cpp:3]: (warning) %x in format string (no. 2) requires 'unsigned int' but the argument type is 'signed long'.\n[test.cpp:3]: (warning) %u in format string (no. 3) requires 'unsigned int' but the argument type is 'signed long'.\n[test.cpp:3]: (warning) %f in format string (no. 4) requires 'double' but the argument type is 'signed long'.\n"
Line 3154
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3154 always 3154
  "void f() {\n    myvector<unsigned short> v1(1,0);\n    printf(\"%d\",v1[0]);\n    myvector<int> v2(1,0);\n    printf(\"%d\",v2[0]);\n    myvector<unsigned int> v3(1,0);\n    printf(\"%u\",v3[0]);\n    myvector<unsigned int> v4(1,0);\n    printf(\"%x\",v4[0]);\n    myvector<double> v5(1,0);\n    printf(\"%f\",v5[0]);\n    myvector<bool> v6(1,0);\n    printf(\"%u\",v6[0]);\n    myvector<char *> v7(1,0);\n    printf(\"%s\",v7[0]);\n}" always "void f() {\n    myvector<unsigned short> v1(1,0);\n    printf(\"%d\",v1[0]);\n    myvector<int> v2(1,0);\n    printf(\"%d\",v2[0]);\n    myvector<unsigned int> v3(1,0);\n    printf(\"%u\",v3[0]);\n    myvector<unsigned int> v4(1,0);\n    printf(\"%x\",v4[0]);\n    myvector<double> v5(1,0);\n    printf(\"%f\",v5[0]);\n    myvector<bool> v6(1,0);\n    printf(\"%u\",v6[0]);\n    myvector<char *> v7(1,0);\n    printf(\"%s\",v7[0]);\n}"
Line 3170
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3170 always 3170
  "" always ""
Line 3172
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3172 always 3172
  "std::vector<char> v;\nvoid foo() {\n   printf(\"%c %u %f\", v.at(32), v.at(32), v.at(32));\n}" always "std::vector<char> v;\nvoid foo() {\n   printf(\"%c %u %f\", v.at(32), v.at(32), v.at(32));\n}"
Line 3176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3176 always 3176
  "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'char'.\n[test.cpp:3]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'char'.\n" always "[test.cpp:3]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'char'.\n[test.cpp:3]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'char'.\n"
Line 3180
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3180 always 3180
  "void T::a(const std::vector<double>& vx) {\n    printf(\"%f\", vx.at(0));\n}" always "void T::a(const std::vector<double>& vx) {\n    printf(\"%f\", vx.at(0));\n}"
Line 3183
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3183 always 3183
  "" always ""
Line 3186
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3186 always 3186
  "void foo() {\n    ssize_t test = 0;\n    printf(\"%zd\", test);\n}" always "void foo() {\n    ssize_t test = 0;\n    printf(\"%zd\", test);\n}"
Line 3190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3190 always 3190
  "" always ""
Line 3193
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3193 always 3193
  "extern std::string StringByReturnValue();\nextern int         IntByReturnValue();\nvoid MyFunction() {\n    printf( \"%s - %s\", StringByReturnValue(), IntByReturnValue() );\n}" always "extern std::string StringByReturnValue();\nextern int         IntByReturnValue();\nvoid MyFunction() {\n    printf( \"%s - %s\", StringByReturnValue(), IntByReturnValue() );\n}"
Line 3198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3198 always 3198
  "[test.cpp:4]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'std::string'.\n[test.cpp:4]: (warning) %s in format string (no. 2) requires 'char *' but the argument type is 'signed int'.\n" always "[test.cpp:4]: (warning) %s in format string (no. 1) requires 'char *' but the argument type is 'std::string'.\n[test.cpp:4]: (warning) %s in format string (no. 2) requires 'char *' but the argument type is 'signed int'.\n"
Line 3201
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3201 always 3201
  "template <class T, size_t S>\nstruct Array {\n    T data[S];\n    T & operator [] (size_t i) { return data[i]; }\n};\nvoid foo() {\n    Array<int, 10> array1;\n    Array<float, 10> array2;\n    printf(\"%u %u\", array1[0], array2[0]);\n}" always "template <class T, size_t S>\nstruct Array {\n    T data[S];\n    T & operator [] (size_t i) { return data[i]; }\n};\nvoid foo() {\n    Array<int, 10> array1;\n    Array<float, 10> array2;\n    printf(\"%u %u\", array1[0], array2[0]);\n}"
Line 3211
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3211 always 3211
  "[test.cpp:9]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'int'.\n[test.cpp:9]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'float'.\n" always "[test.cpp:9]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'int'.\n[test.cpp:9]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'float'.\n"
Line 3215
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3215 always 3215
  "struct S { unsigned short x; } s = {0};\nvoid foo() {\n    printf(\"%d\", s.x);\n}" always "struct S { unsigned short x; } s = {0};\nvoid foo() {\n    printf(\"%d\", s.x);\n}"
Line 3219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3219 always 3219
  "" always ""
Line 3222
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3222 always 3222
  "void foo(int i, unsigned int ui, long long ll, unsigned long long ull) {\n    printf(\"%Ld %Lu %Ld %Lu\", i, ui, ll, ull);\n}" always "void foo(int i, unsigned int ui, long long ll, unsigned long long ull) {\n    printf(\"%Ld %Lu %Ld %Lu\", i, ui, ll, ull);\n}"
Line 3225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3225 always 3225
  "[test.cpp:2]: (warning) %Ld in format string (no. 1) requires 'long long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lu in format string (no. 2) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" always "[test.cpp:2]: (warning) %Ld in format string (no. 1) requires 'long long' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %Lu in format string (no. 2) requires 'unsigned long long' but the argument type is 'unsigned int'.\n"
Line 3228
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3228 always 3228
  "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hhd %hhd %hhd %hhd %hhd %hhd %hhd %hhd\", c, uc, s, us, i, ui, l, ul);\n}" always "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hhd %hhd %hhd %hhd %hhd %hhd %hhd %hhd\", c, uc, s, us, i, ui, l, ul);\n}"
Line 3231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3231 always 3231
  "[test.cpp:2]: (warning) %hhd in format string (no. 2) requires 'char' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hhd in format string (no. 3) requires 'char' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hhd in format string (no. 4) requires 'char' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hhd in format string (no. 5) requires 'char' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hhd in format string (no. 6) requires 'char' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hhd in format string (no. 7) requires 'char' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hhd in format string (no. 8) requires 'char' but the argument type is 'unsigned long'.\n" always "[test.cpp:2]: (warning) %hhd in format string (no. 2) requires 'char' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hhd in format string (no. 3) requires 'char' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hhd in format string (no. 4) requires 'char' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hhd in format string (no. 5) requires 'char' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hhd in format string (no. 6) requires 'char' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hhd in format string (no. 7) requires 'char' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hhd in format string (no. 8) requires 'char' but the argument type is 'unsigned long'.\n"
Line 3239
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3239 always 3239
  "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu\", c, uc, s, us, i, ui, l, ul);\n}" always "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu\", c, uc, s, us, i, ui, l, ul);\n}"
Line 3242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3242 always 3242
  "[test.cpp:2]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hhu in format string (no. 3) requires 'unsigned char' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hhu in format string (no. 4) requires 'unsigned char' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hhu in format string (no. 5) requires 'unsigned char' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hhu in format string (no. 6) requires 'unsigned char' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hhu in format string (no. 7) requires 'unsigned char' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hhu in format string (no. 8) requires 'unsigned char' but the argument type is 'unsigned long'.\n" always "[test.cpp:2]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hhu in format string (no. 3) requires 'unsigned char' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hhu in format string (no. 4) requires 'unsigned char' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hhu in format string (no. 5) requires 'unsigned char' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hhu in format string (no. 6) requires 'unsigned char' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hhu in format string (no. 7) requires 'unsigned char' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hhu in format string (no. 8) requires 'unsigned char' but the argument type is 'unsigned long'.\n"
Line 3250
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3250 always 3250
  "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\", c, uc, s, us, i, ui, l, ul);\n}" always "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\", c, uc, s, us, i, ui, l, ul);\n}"
Line 3253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3253 always 3253
  "[test.cpp:2]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hhx in format string (no. 3) requires 'unsigned char' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hhx in format string (no. 4) requires 'unsigned char' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hhx in format string (no. 5) requires 'unsigned char' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hhx in format string (no. 6) requires 'unsigned char' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hhx in format string (no. 7) requires 'unsigned char' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hhx in format string (no. 8) requires 'unsigned char' but the argument type is 'unsigned long'.\n" always "[test.cpp:2]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hhx in format string (no. 3) requires 'unsigned char' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hhx in format string (no. 4) requires 'unsigned char' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hhx in format string (no. 5) requires 'unsigned char' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hhx in format string (no. 6) requires 'unsigned char' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hhx in format string (no. 7) requires 'unsigned char' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hhx in format string (no. 8) requires 'unsigned char' but the argument type is 'unsigned long'.\n"
Line 3261
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3261 always 3261
  "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hd %hd %hd %hd %hd %hd %hd %hd\", c, uc, s, us, i, ui, l, ul);\n}" always "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hd %hd %hd %hd %hd %hd %hd %hd\", c, uc, s, us, i, ui, l, ul);\n}"
Line 3264
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3264 always 3264
  "[test.cpp:2]: (warning) %hd in format string (no. 1) requires 'short' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hd in format string (no. 2) requires 'short' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hd in format string (no. 4) requires 'short' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hd in format string (no. 5) requires 'short' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hd in format string (no. 6) requires 'short' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hd in format string (no. 7) requires 'short' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hd in format string (no. 8) requires 'short' but the argument type is 'unsigned long'.\n" always "[test.cpp:2]: (warning) %hd in format string (no. 1) requires 'short' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hd in format string (no. 2) requires 'short' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hd in format string (no. 4) requires 'short' but the argument type is 'unsigned short'.\n[test.cpp:2]: (warning) %hd in format string (no. 5) requires 'short' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hd in format string (no. 6) requires 'short' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hd in format string (no. 7) requires 'short' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hd in format string (no. 8) requires 'short' but the argument type is 'unsigned long'.\n"
Line 3272
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3272 always 3272
  "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hu %hu %hu %hu %hu %hu %hu %hu\", c, uc, s, us, i, ui, l, ul);\n}" always "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hu %hu %hu %hu %hu %hu %hu %hu\", c, uc, s, us, i, ui, l, ul);\n}"
Line 3275
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3275 always 3275
  "[test.cpp:2]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hu in format string (no. 2) requires 'unsigned short' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hu in format string (no. 3) requires 'unsigned short' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hu in format string (no. 5) requires 'unsigned short' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hu in format string (no. 6) requires 'unsigned short' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hu in format string (no. 7) requires 'unsigned short' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hu in format string (no. 8) requires 'unsigned short' but the argument type is 'unsigned long'.\n" always "[test.cpp:2]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hu in format string (no. 2) requires 'unsigned short' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hu in format string (no. 3) requires 'unsigned short' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hu in format string (no. 5) requires 'unsigned short' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hu in format string (no. 6) requires 'unsigned short' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hu in format string (no. 7) requires 'unsigned short' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hu in format string (no. 8) requires 'unsigned short' but the argument type is 'unsigned long'.\n"
Line 3283
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3283 always 3283
  "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hx %hx %hx %hx %hx %hx %hx %hx\", c, uc, s, us, i, ui, l, ul);\n}" always "void foo(char c, unsigned char uc, short s, unsigned short us, int i, unsigned int ui, long l, unsigned long ul) {\n    printf(\"%hx %hx %hx %hx %hx %hx %hx %hx\", c, uc, s, us, i, ui, l, ul);\n}"
Line 3286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3286 always 3286
  "[test.cpp:2]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hx in format string (no. 2) requires 'unsigned short' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hx in format string (no. 3) requires 'unsigned short' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hx in format string (no. 5) requires 'unsigned short' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hx in format string (no. 6) requires 'unsigned short' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hx in format string (no. 7) requires 'unsigned short' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hx in format string (no. 8) requires 'unsigned short' but the argument type is 'unsigned long'.\n" always "[test.cpp:2]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n[test.cpp:2]: (warning) %hx in format string (no. 2) requires 'unsigned short' but the argument type is 'unsigned char'.\n[test.cpp:2]: (warning) %hx in format string (no. 3) requires 'unsigned short' but the argument type is 'signed short'.\n[test.cpp:2]: (warning) %hx in format string (no. 5) requires 'unsigned short' but the argument type is 'signed int'.\n[test.cpp:2]: (warning) %hx in format string (no. 6) requires 'unsigned short' but the argument type is 'unsigned int'.\n[test.cpp:2]: (warning) %hx in format string (no. 7) requires 'unsigned short' but the argument type is 'signed long'.\n[test.cpp:2]: (warning) %hx in format string (no. 8) requires 'unsigned short' but the argument type is 'unsigned long'.\n"
Line 3295
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3295 always 3295
  "struct S {\n  double (* f)(double);\n};\n\nvoid foo(struct S x) {\n  printf(\"%f\", x.f(4.0));\n}" always "struct S {\n  double (* f)(double);\n};\n\nvoid foo(struct S x) {\n  printf(\"%f\", x.f(4.0));\n}"
Line 3302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3302 always 3302
  "" always ""
Line 3304
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3304 always 3304
  "void f() {\n    printf(\"%lu\", sizeof(char));\n}\n" always "void f() {\n    printf(\"%lu\", sizeof(char));\n}\n"
  false always 0
  true always 1
Line 3307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3307 always 3307
  "[test.cpp:2]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:2]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3312
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3312 always 3312
  "void f(bool x){printf(\"%u\", x);}" always "void f(bool x){printf(\"%u\", x);}"
Line 3313
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3313 always 3313
  "void f(char x){printf(\"%u\", x);}" always "void f(char x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'char'.\n"
Line 3314
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3314 always 3314
  "void f(signed char x){printf(\"%u\", x);}" always "void f(signed char x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed char'.\n"
Line 3315
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3315 always 3315
  "void f(unsigned char x){printf(\"%u\", x);}" always "void f(unsigned char x){printf(\"%u\", x);}"
Line 3316
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3316 always 3316
  "void f(signed short x){printf(\"%u\", x);}" always "void f(signed short x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed short'.\n"
Line 3317
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3317 always 3317
  "void f(unsigned short x){printf(\"%u\", x);}" always "void f(unsigned short x){printf(\"%u\", x);}"
Line 3318
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3318 always 3318
  "void f(signed int x){printf(\"%u\", x);}" always "void f(signed int x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'.\n"
Line 3319
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3319 always 3319
  "void f(unsigned int x){printf(\"%u\", x);}" always "void f(unsigned int x){printf(\"%u\", x);}"
Line 3320
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3320 always 3320
  "void f(signed long x){printf(\"%u\", x);}" always "void f(signed long x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n"
Line 3321
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3321 always 3321
  "void f(unsigned long x){printf(\"%u\", x);}" always "void f(unsigned long x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n"
Line 3322
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3322 always 3322
  "void f(signed long long x){printf(\"%u\", x);}" always "void f(signed long long x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n"
Line 3323
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3323 always 3323
  "void f(unsigned long long x){printf(\"%u\", x);}" always "void f(unsigned long long x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n"
Line 3324
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3324 always 3324
  "void f(float x){printf(\"%u\", x);}" always "void f(float x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n"
Line 3325
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3325 always 3325
  "void f(double x){printf(\"%u\", x);}" always "void f(double x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n"
Line 3326
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3326 always 3326
  "void f(long double x){printf(\"%u\", x);}" always "void f(long double x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'long double'.\n"
Line 3327
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3327 always 3327
  "void f(void * x){printf(\"%u\", x);}" always "void f(void * x){printf(\"%u\", x);}"
  "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'void *'.\n"
Line 3328
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3328 always 3328
  "void f(size_t x){printf(\"%u\", x);}" always "void f(size_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3329
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3329 always 3329
  "void f(ssize_t x){printf(\"%u\", x);}" always "void f(ssize_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3330
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3330 always 3330
  "void f(ptrdiff_t x){printf(\"%u\", x);}" always "void f(ptrdiff_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3331
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3331 always 3331
  "void f(unsigned ptrdiff_t x){printf(\"%u\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3332
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3332 always 3332
  "void f(intmax_t x){printf(\"%u\", x);}" always "void f(intmax_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3333
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3333 always 3333
  "void f(uintmax_t x){printf(\"%u\", x);}" always "void f(uintmax_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3334
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3334 always 3334
  "void f(intptr_t x){printf(\"%u\", x);}" always "void f(intptr_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3335
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3335 always 3335
  "void f(uintptr_t x){printf(\"%u\", x);}" always "void f(uintptr_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"
Line 3336
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3336 always 3336
  "void f(std::size_t x){printf(\"%u\", x);}" always "void f(std::size_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3337
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3337 always 3337
  "void f(std::ssize_t x){printf(\"%u\", x);}" always "void f(std::ssize_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3338
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3338 always 3338
  "void f(std::ptrdiff_t x){printf(\"%u\", x);}" always "void f(std::ptrdiff_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3339
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3339 always 3339
  "void f(std::intmax_t x){printf(\"%u\", x);}" always "void f(std::intmax_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3340
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3340 always 3340
  "void f(std::uintmax_t x){printf(\"%u\", x);}" always "void f(std::uintmax_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"
Line 3341
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3341 always 3341
  "void f(std::intptr_t x){printf(\"%u\", x);}" always "void f(std::intptr_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3342
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3342 always 3342
  "void f(std::uintptr_t x){printf(\"%u\", x);}" always "void f(std::uintptr_t x){printf(\"%u\", x);}"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %u in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3344
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3344 always 3344
  "void f(bool x){printf(\"%x\", x);}" always "void f(bool x){printf(\"%x\", x);}"
Line 3347
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3347 always 3347
  "void f(unsigned char x){printf(\"%x\", x);}" always "void f(unsigned char x){printf(\"%x\", x);}"
Line 3349
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3349 always 3349
  "void f(unsigned short x){printf(\"%x\", x);}" always "void f(unsigned short x){printf(\"%x\", x);}"
Line 3351
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3351 always 3351
  "void f(unsigned int x){printf(\"%x\", x);}" always "void f(unsigned int x){printf(\"%x\", x);}"
Line 3352
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3352 always 3352
  "void f(signed long x){printf(\"%x\", x);}" always "void f(signed long x){printf(\"%x\", x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long'.\n"
Line 3353
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3353 always 3353
  "void f(unsigned long x){printf(\"%x\", x);}" always "void f(unsigned long x){printf(\"%x\", x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long'.\n"
Line 3354
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3354 always 3354
  "void f(signed long long x){printf(\"%x\", x);}" always "void f(signed long long x){printf(\"%x\", x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'signed long long'.\n"
Line 3355
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3355 always 3355
  "void f(unsigned long long x){printf(\"%x\", x);}" always "void f(unsigned long long x){printf(\"%x\", x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned long long'.\n"
Line 3356
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3356 always 3356
  "void f(float x){printf(\"%x\", x);}" always "void f(float x){printf(\"%x\", x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'float'.\n"
Line 3357
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3357 always 3357
  "void f(double x){printf(\"%x\", x);}" always "void f(double x){printf(\"%x\", x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'double'.\n"
Line 3358
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3358 always 3358
  "void f(long double x){printf(\"%x\", x);}" always "void f(long double x){printf(\"%x\", x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'long double'.\n"
Line 3359
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3359 always 3359
  "void f(void * x){printf(\"%x\", x);}" always "void f(void * x){printf(\"%x\", x);}"
  "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'void *'.\n"
Line 3360
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3360 always 3360
  "void f(size_t x){printf(\"%x\", x);}" always "void f(size_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3361
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3361 always 3361
  "void f(ssize_t x){printf(\"%x\", x);}" always "void f(ssize_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3362
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3362 always 3362
  "void f(ptrdiff_t x){printf(\"%x\", x);}" always "void f(ptrdiff_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3363
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3363 always 3363
  "void f(unsigned ptrdiff_t x){printf(\"%x\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3364
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3364 always 3364
  "void f(intmax_t x){printf(\"%x\", x);}" always "void f(intmax_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3365
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3365 always 3365
  "void f(uintmax_t x){printf(\"%x\", x);}" always "void f(uintmax_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3366
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3366 always 3366
  "void f(intptr_t x){printf(\"%x\", x);}" always "void f(intptr_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3367
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3367 always 3367
  "void f(uintptr_t x){printf(\"%x\", x);}" always "void f(uintptr_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"
Line 3368
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3368 always 3368
  "void f(std::size_t x){printf(\"%x\", x);}" always "void f(std::size_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3369
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3369 always 3369
  "void f(std::ssize_t x){printf(\"%x\", x);}" always "void f(std::ssize_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3370
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3370 always 3370
  "void f(std::ptrdiff_t x){printf(\"%x\", x);}" always "void f(std::ptrdiff_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3371
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3371 always 3371
  "void f(std::intmax_t x){printf(\"%x\", x);}" always "void f(std::intmax_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3372
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3372 always 3372
  "void f(std::uintmax_t x){printf(\"%x\", x);}" always "void f(std::uintmax_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"
Line 3373
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3373 always 3373
  "void f(std::intptr_t x){printf(\"%x\", x);}" always "void f(std::intptr_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3374
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3374 always 3374
  "void f(std::uintptr_t x){printf(\"%x\", x);}" always "void f(std::uintptr_t x){printf(\"%x\", x);}"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %x in format string (no. 1) requires 'unsigned int' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3376
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3376 always 3376
  "void f(bool x){printf(\"%lu\", x);}" always "void f(bool x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'bool'.\n"
Line 3377
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3377 always 3377
  "void f(char x){printf(\"%lu\", x);}" always "void f(char x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'char'.\n"
Line 3378
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3378 always 3378
  "void f(signed char x){printf(\"%lu\", x);}" always "void f(signed char x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed char'.\n"
Line 3379
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3379 always 3379
  "void f(unsigned char x){printf(\"%lu\", x);}" always "void f(unsigned char x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned char'.\n"
Line 3380
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3380 always 3380
  "void f(signed short x){printf(\"%lu\", x);}" always "void f(signed short x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed short'.\n"
Line 3381
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3381 always 3381
  "void f(unsigned short x){printf(\"%lu\", x);}" always "void f(unsigned short x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned short'.\n"
Line 3382
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3382 always 3382
  "void f(signed int x){printf(\"%lu\", x);}" always "void f(signed int x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed int'.\n"
Line 3383
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3383 always 3383
  "void f(unsigned int x){printf(\"%lu\", x);}" always "void f(unsigned int x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n"
Line 3384
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3384 always 3384
  "void f(signed long x){printf(\"%lu\", x);}" always "void f(signed long x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long'.\n"
Line 3385
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3385 always 3385
  "void f(unsigned long x){printf(\"%lu\", x);}" always "void f(unsigned long x){printf(\"%lu\", x);}"
Line 3386
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3386 always 3386
  "void f(signed long long x){printf(\"%lu\", x);}" always "void f(signed long long x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long long'.\n"
Line 3387
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3387 always 3387
  "void f(unsigned long long x){printf(\"%lu\", x);}" always "void f(unsigned long long x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned long long'.\n"
Line 3388
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3388 always 3388
  "void f(float x){printf(\"%lu\", x);}" always "void f(float x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'float'.\n"
Line 3389
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3389 always 3389
  "void f(double x){printf(\"%lu\", x);}" always "void f(double x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'double'.\n"
Line 3390
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3390 always 3390
  "void f(long double x){printf(\"%lu\", x);}" always "void f(long double x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'long double'.\n"
Line 3391
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3391 always 3391
  "void f(void * x){printf(\"%lu\", x);}" always "void f(void * x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'void *'.\n"
Line 3392
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3392 always 3392
  "void f(size_t x){printf(\"%lu\", x);}" always "void f(size_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3393
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3393 always 3393
  "void f(ssize_t x){printf(\"%lu\", x);}" always "void f(ssize_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3394
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3394 always 3394
  "void f(ptrdiff_t x){printf(\"%lu\", x);}" always "void f(ptrdiff_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3395
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3395 always 3395
  "void f(unsigned ptrdiff_t x){printf(\"%lu\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3396
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3396 always 3396
  "void f(intmax_t x){printf(\"%lu\", x);}" always "void f(intmax_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3397
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3397 always 3397
  "void f(uintmax_t x){printf(\"%lu\", x);}" always "void f(uintmax_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3398
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3398 always 3398
  "void f(intptr_t x){printf(\"%lu\", x);}" always "void f(intptr_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3399
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3399 always 3399
  "void f(uintptr_t x){printf(\"%lu\", x);}" always "void f(uintptr_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"
Line 3400
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3400 always 3400
  "void f(std::size_t x){printf(\"%lu\", x);}" always "void f(std::size_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3401
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3401 always 3401
  "void f(std::ssize_t x){printf(\"%lu\", x);}" always "void f(std::ssize_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3402
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3402 always 3402
  "void f(std::ptrdiff_t x){printf(\"%lu\", x);}" always "void f(std::ptrdiff_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3403
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3403 always 3403
  "void f(std::intmax_t x){printf(\"%lu\", x);}" always "void f(std::intmax_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3404
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3404 always 3404
  "void f(std::uintmax_t x){printf(\"%lu\", x);}" always "void f(std::uintmax_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"
Line 3405
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3405 always 3405
  "void f(std::intptr_t x){printf(\"%lu\", x);}" always "void f(std::intptr_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3406
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3406 always 3406
  "void f(std::uintptr_t x){printf(\"%lu\", x);}" always "void f(std::uintptr_t x){printf(\"%lu\", x);}"
  "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3408
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3408 always 3408
  "void f(bool x){printf(\"%lx\", x);}" always "void f(bool x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'bool'.\n"
Line 3409
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3409 always 3409
  "void f(char x){printf(\"%lx\", x);}" always "void f(char x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'char'.\n"
Line 3410
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3410 always 3410
  "void f(signed char x){printf(\"%lx\", x);}" always "void f(signed char x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed char'.\n"
Line 3411
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3411 always 3411
  "void f(unsigned char x){printf(\"%lx\", x);}" always "void f(unsigned char x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned char'.\n"
Line 3412
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3412 always 3412
  "void f(signed short x){printf(\"%lx\", x);}" always "void f(signed short x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed short'.\n"
Line 3413
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3413 always 3413
  "void f(unsigned short x){printf(\"%lx\", x);}" always "void f(unsigned short x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned short'.\n"
Line 3414
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3414 always 3414
  "void f(signed int x){printf(\"%lx\", x);}" always "void f(signed int x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed int'.\n"
Line 3415
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3415 always 3415
  "void f(unsigned int x){printf(\"%lx\", x);}" always "void f(unsigned int x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'.\n"
Line 3417
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3417 always 3417
  "void f(unsigned long x){printf(\"%lx\", x);}" always "void f(unsigned long x){printf(\"%lx\", x);}"
Line 3418
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3418 always 3418
  "void f(signed long long x){printf(\"%lx\", x);}" always "void f(signed long long x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long long'.\n"
Line 3419
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3419 always 3419
  "void f(unsigned long long x){printf(\"%lx\", x);}" always "void f(unsigned long long x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned long long'.\n"
Line 3420
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3420 always 3420
  "void f(float x){printf(\"%lx\", x);}" always "void f(float x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'float'.\n"
Line 3421
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3421 always 3421
  "void f(double x){printf(\"%lx\", x);}" always "void f(double x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'double'.\n"
Line 3422
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3422 always 3422
  "void f(long double x){printf(\"%lx\", x);}" always "void f(long double x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'long double'.\n"
Line 3423
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3423 always 3423
  "void f(void * x){printf(\"%lx\", x);}" always "void f(void * x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'void *'.\n"
Line 3424
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3424 always 3424
  "void f(size_t x){printf(\"%lx\", x);}" always "void f(size_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3425
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3425 always 3425
  "void f(ssize_t x){printf(\"%lx\", x);}" always "void f(ssize_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3426
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3426 always 3426
  "void f(ptrdiff_t x){printf(\"%lx\", x);}" always "void f(ptrdiff_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3427
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3427 always 3427
  "void f(unsigned ptrdiff_t x){printf(\"%lx\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3428
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3428 always 3428
  "void f(intmax_t x){printf(\"%lx\", x);}" always "void f(intmax_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3429
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3429 always 3429
  "void f(uintmax_t x){printf(\"%lx\", x);}" always "void f(uintmax_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3430
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3430 always 3430
  "void f(intptr_t x){printf(\"%lx\", x);}" always "void f(intptr_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3431
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3431 always 3431
  "void f(uintptr_t x){printf(\"%lx\", x);}" always "void f(uintptr_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"
Line 3432
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3432 always 3432
  "void f(std::size_t x){printf(\"%lx\", x);}" always "void f(std::size_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3433
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3433 always 3433
  "void f(std::ssize_t x){printf(\"%lx\", x);}" always "void f(std::ssize_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3434
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3434 always 3434
  "void f(std::ptrdiff_t x){printf(\"%lx\", x);}" always "void f(std::ptrdiff_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3435
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3435 always 3435
  "void f(std::intmax_t x){printf(\"%lx\", x);}" always "void f(std::intmax_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3436
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3436 always 3436
  "void f(std::uintmax_t x){printf(\"%lx\", x);}" always "void f(std::uintmax_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"
Line 3437
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3437 always 3437
  "void f(std::intptr_t x){printf(\"%lx\", x);}" always "void f(std::intptr_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3438
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3438 always 3438
  "void f(std::uintptr_t x){printf(\"%lx\", x);}" always "void f(std::uintptr_t x){printf(\"%lx\", x);}"
  "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %lx in format string (no. 1) requires 'unsigned long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3440
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3440 always 3440
  "void f(bool x){printf(\"%llu\", x);}" always "void f(bool x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'bool'.\n"
Line 3441
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3441 always 3441
  "void f(char x){printf(\"%llu\", x);}" always "void f(char x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'char'.\n"
Line 3442
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3442 always 3442
  "void f(signed char x){printf(\"%llu\", x);}" always "void f(signed char x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed char'.\n"
Line 3443
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3443 always 3443
  "void f(unsigned char x){printf(\"%llu\", x);}" always "void f(unsigned char x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned char'.\n"
Line 3444
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3444 always 3444
  "void f(signed short x){printf(\"%llu\", x);}" always "void f(signed short x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed short'.\n"
Line 3445
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3445 always 3445
  "void f(unsigned short x){printf(\"%llu\", x);}" always "void f(unsigned short x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned short'.\n"
Line 3446
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3446 always 3446
  "void f(signed int x){printf(\"%llu\", x);}" always "void f(signed int x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed int'.\n"
Line 3447
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3447 always 3447
  "void f(unsigned int x){printf(\"%llu\", x);}" always "void f(unsigned int x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n"
Line 3448
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3448 always 3448
  "void f(signed long x){printf(\"%llu\", x);}" always "void f(signed long x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n"
Line 3449
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3449 always 3449
  "void f(unsigned long x){printf(\"%llu\", x);}" always "void f(unsigned long x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n"
Line 3450
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3450 always 3450
  "void f(signed long long x){printf(\"%llu\", x);}" always "void f(signed long long x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long long'.\n"
Line 3451
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3451 always 3451
  "void f(unsigned long long x){printf(\"%llu\", x);}" always "void f(unsigned long long x){printf(\"%llu\", x);}"
Line 3452
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3452 always 3452
  "void f(float x){printf(\"%llu\", x);}" always "void f(float x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n"
Line 3453
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3453 always 3453
  "void f(double x){printf(\"%llu\", x);}" always "void f(double x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n"
Line 3454
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3454 always 3454
  "void f(long double x){printf(\"%llu\", x);}" always "void f(long double x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n"
Line 3455
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3455 always 3455
  "void f(void * x){printf(\"%llu\", x);}" always "void f(void * x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n"
Line 3456
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3456 always 3456
  "void f(size_t x){printf(\"%llu\", x);}" always "void f(size_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3457
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3457 always 3457
  "void f(ssize_t x){printf(\"%llu\", x);}" always "void f(ssize_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3458
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3458 always 3458
  "void f(ptrdiff_t x){printf(\"%llu\", x);}" always "void f(ptrdiff_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3459
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3459 always 3459
  "void f(unsigned ptrdiff_t x){printf(\"%llu\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
Line 3460
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3460 always 3460
  "void f(intmax_t x){printf(\"%llu\", x);}" always "void f(intmax_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3461
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3461 always 3461
  "void f(uintmax_t x){printf(\"%llu\", x);}" always "void f(uintmax_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3462
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3462 always 3462
  "void f(intptr_t x){printf(\"%llu\", x);}" always "void f(intptr_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3463
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3463 always 3463
  "void f(uintptr_t x){printf(\"%llu\", x);}" always "void f(uintptr_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
Line 3464
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3464 always 3464
  "void f(std::size_t x){printf(\"%llu\", x);}" always "void f(std::size_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3465
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3465 always 3465
  "void f(std::ssize_t x){printf(\"%llu\", x);}" always "void f(std::ssize_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3466
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3466 always 3466
  "void f(std::ptrdiff_t x){printf(\"%llu\", x);}" always "void f(std::ptrdiff_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3467
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3467 always 3467
  "void f(std::intmax_t x){printf(\"%llu\", x);}" always "void f(std::intmax_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3468
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3468 always 3468
  "void f(std::uintmax_t x){printf(\"%llu\", x);}" always "void f(std::uintmax_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
Line 3469
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3469 always 3469
  "void f(std::intptr_t x){printf(\"%llu\", x);}" always "void f(std::intptr_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3470
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3470 always 3470
  "void f(std::uintptr_t x){printf(\"%llu\", x);}" always "void f(std::uintptr_t x){printf(\"%llu\", x);}"
  "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
Line 3472
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3472 always 3472
  "void f(bool x){printf(\"%llx\", x);}" always "void f(bool x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'bool'.\n"
Line 3473
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3473 always 3473
  "void f(char x){printf(\"%llx\", x);}" always "void f(char x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'char'.\n"
Line 3474
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3474 always 3474
  "void f(signed char x){printf(\"%llx\", x);}" always "void f(signed char x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed char'.\n"
Line 3475
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3475 always 3475
  "void f(unsigned char x){printf(\"%llx\", x);}" always "void f(unsigned char x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned char'.\n"
Line 3476
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3476 always 3476
  "void f(signed short x){printf(\"%llx\", x);}" always "void f(signed short x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed short'.\n"
Line 3477
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3477 always 3477
  "void f(unsigned short x){printf(\"%llx\", x);}" always "void f(unsigned short x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned short'.\n"
Line 3478
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3478 always 3478
  "void f(signed int x){printf(\"%llx\", x);}" always "void f(signed int x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed int'.\n"
Line 3479
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3479 always 3479
  "void f(unsigned int x){printf(\"%llx\", x);}" always "void f(unsigned int x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n"
Line 3480
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3480 always 3480
  "void f(signed long x){printf(\"%llx\", x);}" always "void f(signed long x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n"
Line 3481
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3481 always 3481
  "void f(unsigned long x){printf(\"%llx\", x);}" always "void f(unsigned long x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n"
Line 3483
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3483 always 3483
  "void f(unsigned long long x){printf(\"%llx\", x);}" always "void f(unsigned long long x){printf(\"%llx\", x);}"
Line 3484
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3484 always 3484
  "void f(float x){printf(\"%llx\", x);}" always "void f(float x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n"
Line 3485
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3485 always 3485
  "void f(double x){printf(\"%llx\", x);}" always "void f(double x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n"
Line 3486
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3486 always 3486
  "void f(long double x){printf(\"%llx\", x);}" always "void f(long double x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n"
Line 3487
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3487 always 3487
  "void f(void * x){printf(\"%llx\", x);}" always "void f(void * x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n"
Line 3488
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3488 always 3488
  "void f(size_t x){printf(\"%llx\", x);}" always "void f(size_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3489
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3489 always 3489
  "void f(ssize_t x){printf(\"%llx\", x);}" always "void f(ssize_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n"
Line 3490
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3490 always 3490
  "void f(ptrdiff_t x){printf(\"%llx\", x);}" always "void f(ptrdiff_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
Line 3491
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3491 always 3491
  "void f(unsigned ptrdiff_t x){printf(\"%llx\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
Line 3492
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3492 always 3492
  "void f(intmax_t x){printf(\"%llx\", x);}" always "void f(intmax_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n"
Line 3493
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3493 always 3493
  "void f(uintmax_t x){printf(\"%llx\", x);}" always "void f(uintmax_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3494
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3494 always 3494
  "void f(intptr_t x){printf(\"%llx\", x);}" always "void f(intptr_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n"
Line 3495
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3495 always 3495
  "void f(uintptr_t x){printf(\"%llx\", x);}" always "void f(uintptr_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
Line 3496
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3496 always 3496
  "void f(std::size_t x){printf(\"%llx\", x);}" always "void f(std::size_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3497
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3497 always 3497
  "void f(std::ssize_t x){printf(\"%llx\", x);}" always "void f(std::ssize_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n"
Line 3498
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3498 always 3498
  "void f(std::ptrdiff_t x){printf(\"%llx\", x);}" always "void f(std::ptrdiff_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
Line 3499
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3499 always 3499
  "void f(std::intmax_t x){printf(\"%llx\", x);}" always "void f(std::intmax_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n"
Line 3500
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3500 always 3500
  "void f(std::uintmax_t x){printf(\"%llx\", x);}" always "void f(std::uintmax_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
Line 3501
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3501 always 3501
  "void f(std::intptr_t x){printf(\"%llx\", x);}" always "void f(std::intptr_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n"
Line 3502
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3502 always 3502
  "void f(std::uintptr_t x){printf(\"%llx\", x);}" always "void f(std::uintptr_t x){printf(\"%llx\", x);}"
  "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %llx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
Line 3504
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3504 always 3504
  "void f(bool x){printf(\"%hu\", x);}" always "void f(bool x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'bool'.\n"
Line 3505
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3505 always 3505
  "void f(char x){printf(\"%hu\", x);}" always "void f(char x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n"
Line 3506
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3506 always 3506
  "void f(signed char x){printf(\"%hu\", x);}" always "void f(signed char x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed char'.\n"
Line 3507
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3507 always 3507
  "void f(unsigned char x){printf(\"%hu\", x);}" always "void f(unsigned char x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned char'.\n"
Line 3508
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3508 always 3508
  "void f(signed short x){printf(\"%hu\", x);}" always "void f(signed short x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed short'.\n"
Line 3509
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3509 always 3509
  "void f(unsigned short x){printf(\"%hu\", x);}" always "void f(unsigned short x){printf(\"%hu\", x);}"
Line 3510
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3510 always 3510
  "void f(signed int x){printf(\"%hu\", x);}" always "void f(signed int x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed int'.\n"
Line 3511
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3511 always 3511
  "void f(unsigned int x){printf(\"%hu\", x);}" always "void f(unsigned int x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned int'.\n"
Line 3512
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3512 always 3512
  "void f(signed long x){printf(\"%hu\", x);}" always "void f(signed long x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long'.\n"
Line 3513
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3513 always 3513
  "void f(unsigned long x){printf(\"%hu\", x);}" always "void f(unsigned long x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long'.\n"
Line 3514
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3514 always 3514
  "void f(signed long long x){printf(\"%hu\", x);}" always "void f(signed long long x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long long'.\n"
Line 3515
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3515 always 3515
  "void f(unsigned long long x){printf(\"%hu\", x);}" always "void f(unsigned long long x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long long'.\n"
Line 3516
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3516 always 3516
  "void f(float x){printf(\"%hu\", x);}" always "void f(float x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'float'.\n"
Line 3517
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3517 always 3517
  "void f(double x){printf(\"%hu\", x);}" always "void f(double x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'double'.\n"
Line 3518
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3518 always 3518
  "void f(long double x){printf(\"%hu\", x);}" always "void f(long double x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'long double'.\n"
Line 3519
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3519 always 3519
  "void f(void * x){printf(\"%hu\", x);}" always "void f(void * x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'void *'.\n"
Line 3520
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3520 always 3520
  "void f(size_t x){printf(\"%hu\", x);}" always "void f(size_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3521
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3521 always 3521
  "void f(ssize_t x){printf(\"%hu\", x);}" always "void f(ssize_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3522
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3522 always 3522
  "void f(ptrdiff_t x){printf(\"%hu\", x);}" always "void f(ptrdiff_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3523
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3523 always 3523
  "void f(unsigned ptrdiff_t x){printf(\"%hu\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3524
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3524 always 3524
  "void f(intmax_t x){printf(\"%hu\", x);}" always "void f(intmax_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3525
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3525 always 3525
  "void f(uintmax_t x){printf(\"%hu\", x);}" always "void f(uintmax_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3526
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3526 always 3526
  "void f(std::size_t x){printf(\"%hu\", x);}" always "void f(std::size_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3527
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3527 always 3527
  "void f(std::ssize_t x){printf(\"%hu\", x);}" always "void f(std::ssize_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3528
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3528 always 3528
  "void f(std::ptrdiff_t x){printf(\"%hu\", x);}" always "void f(std::ptrdiff_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3529
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3529 always 3529
  "void f(std::intptr_t x){printf(\"%hu\", x);}" always "void f(std::intptr_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3530
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3530 always 3530
  "void f(std::uintptr_t x){printf(\"%hu\", x);}" always "void f(std::uintptr_t x){printf(\"%hu\", x);}"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hu in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3532
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3532 always 3532
  "void f(bool x){printf(\"%hx\", x);}" always "void f(bool x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'bool'.\n"
Line 3533
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3533 always 3533
  "void f(char x){printf(\"%hx\", x);}" always "void f(char x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'char'.\n"
Line 3534
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3534 always 3534
  "void f(signed char x){printf(\"%hx\", x);}" always "void f(signed char x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed char'.\n"
Line 3535
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3535 always 3535
  "void f(unsigned char x){printf(\"%hx\", x);}" always "void f(unsigned char x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned char'.\n"
Line 3536
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3536 always 3536
  "void f(signed short x){printf(\"%hx\", x);}" always "void f(signed short x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed short'.\n"
Line 3537
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3537 always 3537
  "void f(unsigned short x){printf(\"%hx\", x);}" always "void f(unsigned short x){printf(\"%hx\", x);}"
Line 3538
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3538 always 3538
  "void f(signed int x){printf(\"%hx\", x);}" always "void f(signed int x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed int'.\n"
Line 3539
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3539 always 3539
  "void f(unsigned int x){printf(\"%hx\", x);}" always "void f(unsigned int x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned int'.\n"
Line 3540
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3540 always 3540
  "void f(signed long x){printf(\"%hx\", x);}" always "void f(signed long x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long'.\n"
Line 3541
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3541 always 3541
  "void f(unsigned long x){printf(\"%hx\", x);}" always "void f(unsigned long x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long'.\n"
Line 3542
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3542 always 3542
  "void f(signed long long x){printf(\"%hx\", x);}" always "void f(signed long long x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed long long'.\n"
Line 3543
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3543 always 3543
  "void f(unsigned long long x){printf(\"%hx\", x);}" always "void f(unsigned long long x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned long long'.\n"
Line 3544
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3544 always 3544
  "void f(float x){printf(\"%hx\", x);}" always "void f(float x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'float'.\n"
Line 3545
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3545 always 3545
  "void f(double x){printf(\"%hx\", x);}" always "void f(double x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'double'.\n"
Line 3546
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3546 always 3546
  "void f(long double x){printf(\"%hx\", x);}" always "void f(long double x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'long double'.\n"
Line 3547
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3547 always 3547
  "void f(void * x){printf(\"%hx\", x);}" always "void f(void * x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'void *'.\n"
Line 3548
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3548 always 3548
  "void f(size_t x){printf(\"%hx\", x);}" always "void f(size_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3549
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3549 always 3549
  "void f(ssize_t x){printf(\"%hx\", x);}" always "void f(ssize_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3550
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3550 always 3550
  "void f(ptrdiff_t x){printf(\"%hx\", x);}" always "void f(ptrdiff_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3551
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3551 always 3551
  "void f(unsigned ptrdiff_t x){printf(\"%hx\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3552
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3552 always 3552
  "void f(intmax_t x){printf(\"%hx\", x);}" always "void f(intmax_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3553
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3553 always 3553
  "void f(uintmax_t x){printf(\"%hx\", x);}" always "void f(uintmax_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3554
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3554 always 3554
  "void f(std::size_t x){printf(\"%hx\", x);}" always "void f(std::size_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3555
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3555 always 3555
  "void f(std::ssize_t x){printf(\"%hx\", x);}" always "void f(std::ssize_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3556
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3556 always 3556
  "void f(std::ptrdiff_t x){printf(\"%hx\", x);}" always "void f(std::ptrdiff_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3557
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3557 always 3557
  "void f(std::intptr_t x){printf(\"%hx\", x);}" always "void f(std::intptr_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3558
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3558 always 3558
  "void f(std::uintptr_t x){printf(\"%hx\", x);}" always "void f(std::uintptr_t x){printf(\"%hx\", x);}"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3560
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3560 always 3560
  "void f(bool x){printf(\"%hhu\", x);}" always "void f(bool x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'bool'.\n"
Line 3561
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3561 always 3561
  "void f(char x){printf(\"%hhu\", x);}" always "void f(char x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n"
Line 3562
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3562 always 3562
  "void f(signed char x){printf(\"%hhu\", x);}" always "void f(signed char x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed char'.\n"
Line 3563
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3563 always 3563
  "void f(unsigned char x){printf(\"%hhu\", x);}" always "void f(unsigned char x){printf(\"%hhu\", x);}"
Line 3564
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3564 always 3564
  "void f(signed short x){printf(\"%hhu\", x);}" always "void f(signed short x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed short'.\n"
Line 3565
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3565 always 3565
  "void f(unsigned short x){printf(\"%hhu\", x);}" always "void f(unsigned short x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned short'.\n"
Line 3566
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3566 always 3566
  "void f(signed int x){printf(\"%hhu\", x);}" always "void f(signed int x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed int'.\n"
Line 3567
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3567 always 3567
  "void f(unsigned int x){printf(\"%hhu\", x);}" always "void f(unsigned int x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned int'.\n"
Line 3568
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3568 always 3568
  "void f(signed long x){printf(\"%hhu\", x);}" always "void f(signed long x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long'.\n"
Line 3569
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3569 always 3569
  "void f(unsigned long x){printf(\"%hhu\", x);}" always "void f(unsigned long x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long'.\n"
Line 3570
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3570 always 3570
  "void f(signed long long x){printf(\"%hhu\", x);}" always "void f(signed long long x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long long'.\n"
Line 3571
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3571 always 3571
  "void f(unsigned long long x){printf(\"%hhu\", x);}" always "void f(unsigned long long x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long long'.\n"
Line 3572
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3572 always 3572
  "void f(float x){printf(\"%hhu\", x);}" always "void f(float x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'float'.\n"
Line 3573
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3573 always 3573
  "void f(double x){printf(\"%hhu\", x);}" always "void f(double x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'double'.\n"
Line 3574
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3574 always 3574
  "void f(long double x){printf(\"%hhu\", x);}" always "void f(long double x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'long double'.\n"
Line 3575
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3575 always 3575
  "void f(void * x){printf(\"%hhu\", x);}" always "void f(void * x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'void *'.\n"
Line 3576
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3576 always 3576
  "void f(size_t x){printf(\"%hhu\", x);}" always "void f(size_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3577
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3577 always 3577
  "void f(ssize_t x){printf(\"%hhu\", x);}" always "void f(ssize_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3578
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3578 always 3578
  "void f(ptrdiff_t x){printf(\"%hhu\", x);}" always "void f(ptrdiff_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3579
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3579 always 3579
  "void f(unsigned ptrdiff_t x){printf(\"%hhu\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3580
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3580 always 3580
  "void f(intmax_t x){printf(\"%hhu\", x);}" always "void f(intmax_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3581
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3581 always 3581
  "void f(uintmax_t x){printf(\"%hhu\", x);}" always "void f(uintmax_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3582
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3582 always 3582
  "void f(std::size_t x){printf(\"%hhu\", x);}" always "void f(std::size_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3583
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3583 always 3583
  "void f(std::ssize_t x){printf(\"%hhu\", x);}" always "void f(std::ssize_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3584
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3584 always 3584
  "void f(std::ptrdiff_t x){printf(\"%hhu\", x);}" always "void f(std::ptrdiff_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3585
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3585 always 3585
  "void f(std::intptr_t x){printf(\"%hhu\", x);}" always "void f(std::intptr_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3586
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3586 always 3586
  "void f(std::uintptr_t x){printf(\"%hhu\", x);}" always "void f(std::uintptr_t x){printf(\"%hhu\", x);}"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhu in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3588
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3588 always 3588
  "void f(bool x){printf(\"%hhx\", x);}" always "void f(bool x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'bool'.\n"
Line 3589
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3589 always 3589
  "void f(char x){printf(\"%hhx\", x);}" always "void f(char x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'char'.\n"
Line 3590
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3590 always 3590
  "void f(signed char x){printf(\"%hhx\", x);}" always "void f(signed char x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed char'.\n"
Line 3591
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3591 always 3591
  "void f(unsigned char x){printf(\"%hhx\", x);}" always "void f(unsigned char x){printf(\"%hhx\", x);}"
Line 3592
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3592 always 3592
  "void f(signed short x){printf(\"%hhx\", x);}" always "void f(signed short x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed short'.\n"
Line 3593
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3593 always 3593
  "void f(unsigned short x){printf(\"%hhx\", x);}" always "void f(unsigned short x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned short'.\n"
Line 3594
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3594 always 3594
  "void f(signed int x){printf(\"%hhx\", x);}" always "void f(signed int x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed int'.\n"
Line 3595
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3595 always 3595
  "void f(unsigned int x){printf(\"%hhx\", x);}" always "void f(unsigned int x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned int'.\n"
Line 3596
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3596 always 3596
  "void f(signed long x){printf(\"%hhx\", x);}" always "void f(signed long x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long'.\n"
Line 3597
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3597 always 3597
  "void f(unsigned long x){printf(\"%hhx\", x);}" always "void f(unsigned long x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long'.\n"
Line 3598
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3598 always 3598
  "void f(signed long long x){printf(\"%hhx\", x);}" always "void f(signed long long x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'signed long long'.\n"
Line 3599
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3599 always 3599
  "void f(unsigned long long x){printf(\"%hhx\", x);}" always "void f(unsigned long long x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned long long'.\n"
Line 3600
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3600 always 3600
  "void f(float x){printf(\"%hhx\", x);}" always "void f(float x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'float'.\n"
Line 3601
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3601 always 3601
  "void f(double x){printf(\"%hhx\", x);}" always "void f(double x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'double'.\n"
Line 3602
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3602 always 3602
  "void f(long double x){printf(\"%hhx\", x);}" always "void f(long double x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'long double'.\n"
Line 3603
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3603 always 3603
  "void f(void * x){printf(\"%hhx\", x);}" always "void f(void * x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'void *'.\n"
Line 3604
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3604 always 3604
  "void f(size_t x){printf(\"%hhx\", x);}" always "void f(size_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3605
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3605 always 3605
  "void f(ssize_t x){printf(\"%hhx\", x);}" always "void f(ssize_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3606
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3606 always 3606
  "void f(ptrdiff_t x){printf(\"%hhx\", x);}" always "void f(ptrdiff_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3607
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3607 always 3607
  "void f(unsigned ptrdiff_t x){printf(\"%hhx\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3608
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3608 always 3608
  "void f(intmax_t x){printf(\"%hhx\", x);}" always "void f(intmax_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3609
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3609 always 3609
  "void f(uintmax_t x){printf(\"%hhx\", x);}" always "void f(uintmax_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3610
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3610 always 3610
  "void f(std::size_t x){printf(\"%hhx\", x);}" always "void f(std::size_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3611
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3611 always 3611
  "void f(std::ssize_t x){printf(\"%hhx\", x);}" always "void f(std::ssize_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3612
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3612 always 3612
  "void f(std::ptrdiff_t x){printf(\"%hhx\", x);}" always "void f(std::ptrdiff_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3613
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3613 always 3613
  "void f(std::intptr_t x){printf(\"%hhx\", x);}" always "void f(std::intptr_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3614
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3614 always 3614
  "void f(std::uintptr_t x){printf(\"%hhx\", x);}" always "void f(std::uintptr_t x){printf(\"%hhx\", x);}"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %hhx in format string (no. 1) requires 'unsigned char' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3616
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3616 always 3616
  "void f(bool x){printf(\"%Lu\", x);}" always "void f(bool x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'bool'.\n"
Line 3617
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3617 always 3617
  "void f(char x){printf(\"%Lu\", x);}" always "void f(char x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'char'.\n"
Line 3618
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3618 always 3618
  "void f(signed char x){printf(\"%Lu\", x);}" always "void f(signed char x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed char'.\n"
Line 3619
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3619 always 3619
  "void f(unsigned char x){printf(\"%Lu\", x);}" always "void f(unsigned char x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned char'.\n"
Line 3620
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3620 always 3620
  "void f(signed short x){printf(\"%Lu\", x);}" always "void f(signed short x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed short'.\n"
Line 3621
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3621 always 3621
  "void f(unsigned short x){printf(\"%Lu\", x);}" always "void f(unsigned short x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned short'.\n"
Line 3622
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3622 always 3622
  "void f(signed int x){printf(\"%Lu\", x);}" always "void f(signed int x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed int'.\n"
Line 3623
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3623 always 3623
  "void f(unsigned int x){printf(\"%Lu\", x);}" always "void f(unsigned int x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned int'.\n"
Line 3624
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3624 always 3624
  "void f(signed long x){printf(\"%Lu\", x);}" always "void f(signed long x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n"
Line 3625
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3625 always 3625
  "void f(unsigned long x){printf(\"%Lu\", x);}" always "void f(unsigned long x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n"
Line 3626
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3626 always 3626
  "void f(signed long long x){printf(\"%Lu\", x);}" always "void f(signed long long x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long long'.\n"
Line 3627
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3627 always 3627
  "void f(unsigned long long x){printf(\"%Lu\", x);}" always "void f(unsigned long long x){printf(\"%Lu\", x);}"
Line 3628
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3628 always 3628
  "void f(float x){printf(\"%Lu\", x);}" always "void f(float x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n"
Line 3629
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3629 always 3629
  "void f(double x){printf(\"%Lu\", x);}" always "void f(double x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n"
Line 3630
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3630 always 3630
  "void f(long double x){printf(\"%Lu\", x);}" always "void f(long double x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n"
Line 3631
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3631 always 3631
  "void f(void * x){printf(\"%Lu\", x);}" always "void f(void * x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n"
Line 3632
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3632 always 3632
  "void f(size_t x){printf(\"%Lu\", x);}" always "void f(size_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n"
Line 3633
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3633 always 3633
  "void f(ssize_t x){printf(\"%Lu\", x);}" always "void f(ssize_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3634
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3634 always 3634
  "void f(ptrdiff_t x){printf(\"%Lu\", x);}" always "void f(ptrdiff_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3635
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3635 always 3635
  "void f(unsigned ptrdiff_t x){printf(\"%Lu\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
Line 3636
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3636 always 3636
  "void f(intmax_t x){printf(\"%Lu\", x);}" always "void f(intmax_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3637
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3637 always 3637
  "void f(uintmax_t x){printf(\"%Lu\", x);}" always "void f(uintmax_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
Line 3638
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3638 always 3638
  "void f(intptr_t x){printf(\"%Lu\", x);}" always "void f(intptr_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3639
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3639 always 3639
  "void f(uintptr_t x){printf(\"%Lu\", x);}" always "void f(uintptr_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
Line 3640
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3640 always 3640
  "void f(std::size_t x){printf(\"%Lu\", x);}" always "void f(std::size_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n"
Line 3641
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3641 always 3641
  "void f(std::ssize_t x){printf(\"%Lu\", x);}" always "void f(std::ssize_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3642
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3642 always 3642
  "void f(std::ptrdiff_t x){printf(\"%Lu\", x);}" always "void f(std::ptrdiff_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3643
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3643 always 3643
  "void f(std::intmax_t x){printf(\"%Lu\", x);}" always "void f(std::intmax_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3644
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3644 always 3644
  "void f(std::uintmax_t x){printf(\"%Lu\", x);}" always "void f(std::uintmax_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
Line 3645
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3645 always 3645
  "void f(std::intptr_t x){printf(\"%Lu\", x);}" always "void f(std::intptr_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3646
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3646 always 3646
  "void f(std::uintptr_t x){printf(\"%Lu\", x);}" always "void f(std::uintptr_t x){printf(\"%Lu\", x);}"
  "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lu in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
Line 3656
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3656 always 3656
  "void f(signed long x){printf(\"%Lx\", x);}" always "void f(signed long x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long'.\n"
Line 3657
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3657 always 3657
  "void f(unsigned long x){printf(\"%Lx\", x);}" always "void f(unsigned long x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned long'.\n"
Line 3658
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3658 always 3658
  "void f(signed long long x){printf(\"%Lx\", x);}" always "void f(signed long long x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'signed long long'.\n"
Line 3660
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3660 always 3660
  "void f(float x){printf(\"%Lx\", x);}" always "void f(float x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'float'.\n"
Line 3661
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3661 always 3661
  "void f(double x){printf(\"%Lx\", x);}" always "void f(double x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'double'.\n"
Line 3662
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3662 always 3662
  "void f(long double x){printf(\"%Lx\", x);}" always "void f(long double x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'long double'.\n"
Line 3663
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3663 always 3663
  "void f(void * x){printf(\"%Lx\", x);}" always "void f(void * x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'void *'.\n"
Line 3664
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3664 always 3664
  "void f(size_t x){printf(\"%Lx\", x);}" always "void f(size_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3665
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3665 always 3665
  "void f(ssize_t x){printf(\"%Lx\", x);}" always "void f(ssize_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3666
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3666 always 3666
  "void f(ptrdiff_t x){printf(\"%Lx\", x);}" always "void f(ptrdiff_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3667
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3667 always 3667
  "void f(unsigned ptrdiff_t x){printf(\"%Lx\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3668
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3668 always 3668
  "void f(intmax_t x){printf(\"%Lx\", x);}" always "void f(intmax_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3669
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3669 always 3669
  "void f(uintmax_t x){printf(\"%Lx\", x);}" always "void f(uintmax_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3670
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3670 always 3670
  "void f(intptr_t x){printf(\"%Lx\", x);}" always "void f(intptr_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3671
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3671 always 3671
  "void f(uintptr_t x){printf(\"%Lx\", x);}" always "void f(uintptr_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"
Line 3672
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3672 always 3672
  "void f(std::size_t x){printf(\"%Lx\", x);}" always "void f(std::size_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3673
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3673 always 3673
  "void f(std::ssize_t x){printf(\"%Lx\", x);}" always "void f(std::ssize_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3674
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3674 always 3674
  "void f(std::ptrdiff_t x){printf(\"%Lx\", x);}" always "void f(std::ptrdiff_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3675
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3675 always 3675
  "void f(std::intmax_t x){printf(\"%Lx\", x);}" always "void f(std::intmax_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3676
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3676 always 3676
  "void f(std::uintmax_t x){printf(\"%Lx\", x);}" always "void f(std::uintmax_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"
Line 3677
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3677 always 3677
  "void f(std::intptr_t x){printf(\"%Lx\", x);}" always "void f(std::intptr_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3678
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3678 always 3678
  "void f(std::uintptr_t x){printf(\"%Lx\", x);}" always "void f(std::uintptr_t x){printf(\"%Lx\", x);}"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Lx in format string (no. 1) requires 'unsigned long long' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3680
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3680 always 3680
  "void f(bool x){printf(\"%ju\", x);}" always "void f(bool x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'bool'.\n"
Line 3681
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3681 always 3681
  "void f(char x){printf(\"%ju\", x);}" always "void f(char x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'char'.\n"
Line 3682
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3682 always 3682
  "void f(signed char x){printf(\"%ju\", x);}" always "void f(signed char x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed char'.\n"
Line 3683
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3683 always 3683
  "void f(unsigned char x){printf(\"%ju\", x);}" always "void f(unsigned char x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned char'.\n"
Line 3684
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3684 always 3684
  "void f(signed short x){printf(\"%ju\", x);}" always "void f(signed short x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed short'.\n"
Line 3685
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3685 always 3685
  "void f(unsigned short x){printf(\"%ju\", x);}" always "void f(unsigned short x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned short'.\n"
Line 3686
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3686 always 3686
  "void f(signed int x){printf(\"%ju\", x);}" always "void f(signed int x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n"
Line 3687
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3687 always 3687
  "void f(unsigned int x){printf(\"%ju\", x);}" always "void f(unsigned int x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned int'.\n"
Line 3688
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3688 always 3688
  "void f(signed long x){printf(\"%ju\", x);}" always "void f(signed long x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long'.\n"
Line 3689
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3689 always 3689
  "void f(unsigned long x){printf(\"%ju\", x);}" always "void f(unsigned long x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long'.\n"
Line 3690
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3690 always 3690
  "void f(signed long long x){printf(\"%ju\", x);}" always "void f(signed long long x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long long'.\n"
Line 3691
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3691 always 3691
  "void f(unsigned long long x){printf(\"%ju\", x);}" always "void f(unsigned long long x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long long'.\n"
Line 3692
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3692 always 3692
  "void f(float x){printf(\"%ju\", x);}" always "void f(float x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'float'.\n"
Line 3693
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3693 always 3693
  "void f(double x){printf(\"%ju\", x);}" always "void f(double x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'double'.\n"
Line 3694
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3694 always 3694
  "void f(long double x){printf(\"%ju\", x);}" always "void f(long double x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'long double'.\n"
Line 3695
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3695 always 3695
  "void f(void * x){printf(\"%ju\", x);}" always "void f(void * x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'void *'.\n"
Line 3696
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3696 always 3696
  "void f(size_t x){printf(\"%ju\", x);}" always "void f(size_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3697
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3697 always 3697
  "void f(ssize_t x){printf(\"%ju\", x);}" always "void f(ssize_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3698
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3698 always 3698
  "void f(ptrdiff_t x){printf(\"%ju\", x);}" always "void f(ptrdiff_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3699
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3699 always 3699
  "void f(unsigned ptrdiff_t x){printf(\"%ju\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3700
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3700 always 3700
  "void f(intmax_t x){printf(\"%ju\", x);}" always "void f(intmax_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3701
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3701 always 3701
  "void f(uintmax_t x){printf(\"%ju\", x);}" always "void f(uintmax_t x){printf(\"%ju\", x);}"
Line 3702
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3702 always 3702
  "void f(std::size_t x){printf(\"%ju\", x);}" always "void f(std::size_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3703
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3703 always 3703
  "void f(std::ssize_t x){printf(\"%ju\", x);}" always "void f(std::ssize_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3704
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3704 always 3704
  "void f(std::ptrdiff_t x){printf(\"%ju\", x);}" always "void f(std::ptrdiff_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3705
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3705 always 3705
  "void f(std::intptr_t x){printf(\"%ju\", x);}" always "void f(std::intptr_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3706
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3706 always 3706
  "void f(std::uintptr_t x){printf(\"%ju\", x);}" always "void f(std::uintptr_t x){printf(\"%ju\", x);}"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %ju in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3708
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3708 always 3708
  "void f(bool x){printf(\"%jx\", x);}" always "void f(bool x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'bool'.\n"
Line 3709
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3709 always 3709
  "void f(char x){printf(\"%jx\", x);}" always "void f(char x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'char'.\n"
Line 3710
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3710 always 3710
  "void f(signed char x){printf(\"%jx\", x);}" always "void f(signed char x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed char'.\n"
Line 3711
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3711 always 3711
  "void f(unsigned char x){printf(\"%jx\", x);}" always "void f(unsigned char x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned char'.\n"
Line 3712
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3712 always 3712
  "void f(signed short x){printf(\"%jx\", x);}" always "void f(signed short x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed short'.\n"
Line 3713
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3713 always 3713
  "void f(unsigned short x){printf(\"%jx\", x);}" always "void f(unsigned short x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned short'.\n"
Line 3714
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3714 always 3714
  "void f(signed int x){printf(\"%jx\", x);}" always "void f(signed int x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed int'.\n"
Line 3715
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3715 always 3715
  "void f(unsigned int x){printf(\"%jx\", x);}" always "void f(unsigned int x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned int'.\n"
Line 3716
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3716 always 3716
  "void f(signed long x){printf(\"%jx\", x);}" always "void f(signed long x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long'.\n"
Line 3717
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3717 always 3717
  "void f(unsigned long x){printf(\"%jx\", x);}" always "void f(unsigned long x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long'.\n"
Line 3718
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3718 always 3718
  "void f(signed long long x){printf(\"%jx\", x);}" always "void f(signed long long x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'signed long long'.\n"
Line 3719
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3719 always 3719
  "void f(unsigned long long x){printf(\"%jx\", x);}" always "void f(unsigned long long x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned long long'.\n"
Line 3720
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3720 always 3720
  "void f(float x){printf(\"%jx\", x);}" always "void f(float x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'float'.\n"
Line 3721
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3721 always 3721
  "void f(double x){printf(\"%jx\", x);}" always "void f(double x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'double'.\n"
Line 3722
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3722 always 3722
  "void f(long double x){printf(\"%jx\", x);}" always "void f(long double x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'long double'.\n"
Line 3723
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3723 always 3723
  "void f(void * x){printf(\"%jx\", x);}" always "void f(void * x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'void *'.\n"
Line 3724
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3724 always 3724
  "void f(size_t x){printf(\"%jx\", x);}" always "void f(size_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3725
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3725 always 3725
  "void f(ssize_t x){printf(\"%jx\", x);}" always "void f(ssize_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3726
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3726 always 3726
  "void f(ptrdiff_t x){printf(\"%jx\", x);}" always "void f(ptrdiff_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3727
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3727 always 3727
  "void f(unsigned ptrdiff_t x){printf(\"%jx\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3728
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3728 always 3728
  "void f(intmax_t x){printf(\"%jx\", x);}" always "void f(intmax_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3729
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3729 always 3729
  "void f(uintmax_t x){printf(\"%jx\", x);}" always "void f(uintmax_t x){printf(\"%jx\", x);}"
Line 3730
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3730 always 3730
  "void f(std::size_t x){printf(\"%jx\", x);}" always "void f(std::size_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3731
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3731 always 3731
  "void f(std::ssize_t x){printf(\"%jx\", x);}" always "void f(std::ssize_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3732
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3732 always 3732
  "void f(std::ptrdiff_t x){printf(\"%jx\", x);}" always "void f(std::ptrdiff_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3733
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3733 always 3733
  "void f(std::intptr_t x){printf(\"%jx\", x);}" always "void f(std::intptr_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3734
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3734 always 3734
  "void f(std::uintptr_t x){printf(\"%jx\", x);}" always "void f(std::uintptr_t x){printf(\"%jx\", x);}"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %jx in format string (no. 1) requires 'uintmax_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3736
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3736 always 3736
  "void f(size_t x){printf(\"%zd\", x);}" always "void f(size_t x){printf(\"%zd\", x);}"
  "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3737
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3737 always 3737
  "void f(size_t x){printf(\"%zi\", x);}" always "void f(size_t x){printf(\"%zi\", x);}"
  "[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %zi in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3739
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3739 always 3739
  "void f(bool x){printf(\"%zu\", x);}" always "void f(bool x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n"
Line 3740
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3740 always 3740
  "void f(char x){printf(\"%zu\", x);}" always "void f(char x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n"
Line 3741
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3741 always 3741
  "void f(signed char x){printf(\"%zu\", x);}" always "void f(signed char x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n"
Line 3742
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3742 always 3742
  "void f(unsigned char x){printf(\"%zu\", x);}" always "void f(unsigned char x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n"
Line 3743
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3743 always 3743
  "void f(signed short x){printf(\"%zu\", x);}" always "void f(signed short x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n"
Line 3744
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3744 always 3744
  "void f(unsigned short x){printf(\"%zu\", x);}" always "void f(unsigned short x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n"
Line 3745
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3745 always 3745
  "void f(signed int x){printf(\"%zu\", x);}" always "void f(signed int x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n"
Line 3746
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3746 always 3746
  "void f(unsigned int x){printf(\"%zu\", x);}" always "void f(unsigned int x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n"
Line 3747
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3747 always 3747
  "void f(signed long x){printf(\"%zu\", x);}" always "void f(signed long x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n"
Line 3748
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3748 always 3748
  "void f(unsigned long x){printf(\"%zu\", x);}" always "void f(unsigned long x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n"
Line 3749
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3749 always 3749
  "void f(signed long long x){printf(\"%zu\", x);}" always "void f(signed long long x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n"
Line 3750
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3750 always 3750
  "void f(unsigned long long x){printf(\"%zu\", x);}" always "void f(unsigned long long x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n"
Line 3751
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3751 always 3751
  "void f(float x){printf(\"%zu\", x);}" always "void f(float x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n"
Line 3752
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3752 always 3752
  "void f(double x){printf(\"%zu\", x);}" always "void f(double x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n"
Line 3753
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3753 always 3753
  "void f(long double x){printf(\"%zu\", x);}" always "void f(long double x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n"
Line 3754
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3754 always 3754
  "void f(void * x){printf(\"%zu\", x);}" always "void f(void * x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %zu in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n"
Line 3755
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3755 always 3755
  "void f(size_t x){printf(\"%zu\", x);}" always "void f(size_t x){printf(\"%zu\", x);}"
Line 3756
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3756 always 3756
  "void f(ssize_t x){printf(\"%zu\", x);}" always "void f(ssize_t x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3757
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3757 always 3757
  "void f(ptrdiff_t x){printf(\"%zu\", x);}" always "void f(ptrdiff_t x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3758
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3758 always 3758
  "void f(unsigned ptrdiff_t x){printf(\"%zu\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3759
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3759 always 3759
  "void f(intmax_t x){printf(\"%zu\", x);}" always "void f(intmax_t x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3760
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3760 always 3760
  "void f(uintmax_t x){printf(\"%zu\", x);}" always "void f(uintmax_t x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3761
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3761 always 3761
  "void f(std::size_t x){printf(\"%zu\", x);}" always "void f(std::size_t x){printf(\"%zu\", x);}"
Line 3762
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3762 always 3762
  "void f(std::ssize_t x){printf(\"%zu\", x);}" always "void f(std::ssize_t x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3763
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3763 always 3763
  "void f(std::ptrdiff_t x){printf(\"%zu\", x);}" always "void f(std::ptrdiff_t x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3764
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3764 always 3764
  "void f(std::intptr_t x){printf(\"%zu\", x);}" always "void f(std::intptr_t x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3765
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3765 always 3765
  "void f(std::uintptr_t x){printf(\"%zu\", x);}" always "void f(std::uintptr_t x){printf(\"%zu\", x);}"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3767
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3767 always 3767
  "void f(bool x){printf(\"%zx\", x);}" always "void f(bool x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n"
Line 3768
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3768 always 3768
  "void f(char x){printf(\"%zx\", x);}" always "void f(char x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n"
Line 3769
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3769 always 3769
  "void f(signed char x){printf(\"%zx\", x);}" always "void f(signed char x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n"
Line 3770
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3770 always 3770
  "void f(unsigned char x){printf(\"%zx\", x);}" always "void f(unsigned char x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n"
Line 3771
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3771 always 3771
  "void f(signed short x){printf(\"%zx\", x);}" always "void f(signed short x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n"
Line 3772
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3772 always 3772
  "void f(unsigned short x){printf(\"%zx\", x);}" always "void f(unsigned short x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n"
Line 3773
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3773 always 3773
  "void f(signed int x){printf(\"%zx\", x);}" always "void f(signed int x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n"
Line 3774
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3774 always 3774
  "void f(unsigned int x){printf(\"%zx\", x);}" always "void f(unsigned int x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n"
Line 3775
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3775 always 3775
  "void f(signed long x){printf(\"%zx\", x);}" always "void f(signed long x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n"
Line 3776
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3776 always 3776
  "void f(unsigned long x){printf(\"%zx\", x);}" always "void f(unsigned long x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n"
Line 3777
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3777 always 3777
  "void f(signed long long x){printf(\"%zx\", x);}" always "void f(signed long long x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n"
Line 3778
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3778 always 3778
  "void f(unsigned long long x){printf(\"%zx\", x);}" always "void f(unsigned long long x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n"
Line 3779
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3779 always 3779
  "void f(float x){printf(\"%zx\", x);}" always "void f(float x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n"
Line 3780
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3780 always 3780
  "void f(double x){printf(\"%zx\", x);}" always "void f(double x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n"
Line 3781
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3781 always 3781
  "void f(long double x){printf(\"%zx\", x);}" always "void f(long double x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n"
Line 3782
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3782 always 3782
  "void f(void * x){printf(\"%zx\", x);}" always "void f(void * x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %zx in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n"
Line 3783
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3783 always 3783
  "void f(size_t x){printf(\"%zx\", x);}" always "void f(size_t x){printf(\"%zx\", x);}"
Line 3784
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3784 always 3784
  "void f(ssize_t x){printf(\"%zx\", x);}" always "void f(ssize_t x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3785
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3785 always 3785
  "void f(ptrdiff_t x){printf(\"%zx\", x);}" always "void f(ptrdiff_t x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3786
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3786 always 3786
  "void f(unsigned ptrdiff_t x){printf(\"%zx\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3787
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3787 always 3787
  "void f(intmax_t x){printf(\"%zx\", x);}" always "void f(intmax_t x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3788
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3788 always 3788
  "void f(uintmax_t x){printf(\"%zx\", x);}" always "void f(uintmax_t x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3789
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3789 always 3789
  "void f(std::size_t x){printf(\"%zx\", x);}" always "void f(std::size_t x){printf(\"%zx\", x);}"
Line 3790
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3790 always 3790
  "void f(std::ssize_t x){printf(\"%zx\", x);}" always "void f(std::ssize_t x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3791
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3791 always 3791
  "void f(std::ptrdiff_t x){printf(\"%zx\", x);}" always "void f(std::ptrdiff_t x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3792
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3792 always 3792
  "void f(std::intptr_t x){printf(\"%zx\", x);}" always "void f(std::intptr_t x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3793
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3793 always 3793
  "void f(std::uintptr_t x){printf(\"%zx\", x);}" always "void f(std::uintptr_t x){printf(\"%zx\", x);}"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %zx in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3795
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3795 always 3795
  "void f(bool x){printf(\"%tu\", x);}" always "void f(bool x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'bool'.\n"
Line 3796
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3796 always 3796
  "void f(char x){printf(\"%tu\", x);}" always "void f(char x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'char'.\n"
Line 3797
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3797 always 3797
  "void f(signed char x){printf(\"%tu\", x);}" always "void f(signed char x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed char'.\n"
Line 3798
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3798 always 3798
  "void f(unsigned char x){printf(\"%tu\", x);}" always "void f(unsigned char x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned char'.\n"
Line 3799
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3799 always 3799
  "void f(signed short x){printf(\"%tu\", x);}" always "void f(signed short x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed short'.\n"
Line 3800
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3800 always 3800
  "void f(unsigned short x){printf(\"%tu\", x);}" always "void f(unsigned short x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned short'.\n"
Line 3801
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3801 always 3801
  "void f(signed int x){printf(\"%tu\", x);}" always "void f(signed int x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed int'.\n"
Line 3802
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3802 always 3802
  "void f(unsigned int x){printf(\"%tu\", x);}" always "void f(unsigned int x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned int'.\n"
Line 3803
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3803 always 3803
  "void f(signed long x){printf(\"%tu\", x);}" always "void f(signed long x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long'.\n"
Line 3804
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3804 always 3804
  "void f(unsigned long x){printf(\"%tu\", x);}" always "void f(unsigned long x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long'.\n"
Line 3805
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3805 always 3805
  "void f(signed long long x){printf(\"%tu\", x);}" always "void f(signed long long x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long long'.\n"
Line 3806
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3806 always 3806
  "void f(unsigned long long x){printf(\"%tu\", x);}" always "void f(unsigned long long x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long long'.\n"
Line 3807
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3807 always 3807
  "void f(float x){printf(\"%tu\", x);}" always "void f(float x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'float'.\n"
Line 3808
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3808 always 3808
  "void f(double x){printf(\"%tu\", x);}" always "void f(double x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'double'.\n"
Line 3809
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3809 always 3809
  "void f(long double x){printf(\"%tu\", x);}" always "void f(long double x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'long double'.\n"
Line 3810
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3810 always 3810
  "void f(void * x){printf(\"%tu\", x);}" always "void f(void * x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'void *'.\n"
Line 3811
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3811 always 3811
  "void f(size_t x){printf(\"%tu\", x);}" always "void f(size_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3812
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3812 always 3812
  "void f(ssize_t x){printf(\"%tu\", x);}" always "void f(ssize_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3813
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3813 always 3813
  "void f(ptrdiff_t x){printf(\"%tu\", x);}" always "void f(ptrdiff_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3814
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3814 always 3814
  "void f(unsigned ptrdiff_t x){printf(\"%tu\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%tu\", x);}"
Line 3815
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3815 always 3815
  "void f(intmax_t x){printf(\"%tu\", x);}" always "void f(intmax_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3816
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3816 always 3816
  "void f(uintmax_t x){printf(\"%tu\", x);}" always "void f(uintmax_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3817
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3817 always 3817
  "void f(std::size_t x){printf(\"%tu\", x);}" always "void f(std::size_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3818
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3818 always 3818
  "void f(std::ssize_t x){printf(\"%tu\", x);}" always "void f(std::ssize_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3819
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3819 always 3819
  "void f(std::ptrdiff_t x){printf(\"%tu\", x);}" always "void f(std::ptrdiff_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3820
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3820 always 3820
  "void f(std::intptr_t x){printf(\"%tu\", x);}" always "void f(std::intptr_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3821
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3821 always 3821
  "void f(std::uintptr_t x){printf(\"%tu\", x);}" always "void f(std::uintptr_t x){printf(\"%tu\", x);}"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %tu in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3823
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3823 always 3823
  "void f(bool x){printf(\"%tx\", x);}" always "void f(bool x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'bool'.\n"
Line 3824
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3824 always 3824
  "void f(char x){printf(\"%tx\", x);}" always "void f(char x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'char'.\n"
Line 3825
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3825 always 3825
  "void f(signed char x){printf(\"%tx\", x);}" always "void f(signed char x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed char'.\n"
Line 3826
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3826 always 3826
  "void f(unsigned char x){printf(\"%tx\", x);}" always "void f(unsigned char x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned char'.\n"
Line 3827
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3827 always 3827
  "void f(signed short x){printf(\"%tx\", x);}" always "void f(signed short x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed short'.\n"
Line 3828
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3828 always 3828
  "void f(unsigned short x){printf(\"%tx\", x);}" always "void f(unsigned short x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned short'.\n"
Line 3829
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3829 always 3829
  "void f(signed int x){printf(\"%tx\", x);}" always "void f(signed int x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed int'.\n"
Line 3830
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3830 always 3830
  "void f(unsigned int x){printf(\"%tx\", x);}" always "void f(unsigned int x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned int'.\n"
Line 3831
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3831 always 3831
  "void f(signed long x){printf(\"%tx\", x);}" always "void f(signed long x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long'.\n"
Line 3832
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3832 always 3832
  "void f(unsigned long x){printf(\"%tx\", x);}" always "void f(unsigned long x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long'.\n"
Line 3833
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3833 always 3833
  "void f(signed long long x){printf(\"%tx\", x);}" always "void f(signed long long x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'signed long long'.\n"
Line 3834
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3834 always 3834
  "void f(unsigned long long x){printf(\"%tx\", x);}" always "void f(unsigned long long x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'unsigned long long'.\n"
Line 3835
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3835 always 3835
  "void f(float x){printf(\"%tx\", x);}" always "void f(float x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'float'.\n"
Line 3836
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3836 always 3836
  "void f(double x){printf(\"%tx\", x);}" always "void f(double x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'double'.\n"
Line 3837
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3837 always 3837
  "void f(long double x){printf(\"%tx\", x);}" always "void f(long double x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'long double'.\n"
Line 3838
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3838 always 3838
  "void f(void * x){printf(\"%tx\", x);}" always "void f(void * x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'void *'.\n"
Line 3839
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3839 always 3839
  "void f(size_t x){printf(\"%tx\", x);}" always "void f(size_t x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 3840
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3840 always 3840
  "void f(ssize_t x){printf(\"%tx\", x);}" always "void f(ssize_t x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3842
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3842 always 3842
  "void f(unsigned ptrdiff_t x){printf(\"%tx\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%tx\", x);}"
Line 3843
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3843 always 3843
  "void f(intmax_t x){printf(\"%tx\", x);}" always "void f(intmax_t x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3844
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3844 always 3844
  "void f(uintmax_t x){printf(\"%tx\", x);}" always "void f(uintmax_t x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3845
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3845 always 3845
  "void f(std::size_t x){printf(\"%tx\", x);}" always "void f(std::size_t x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 3846
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3846 always 3846
  "void f(std::ssize_t x){printf(\"%tx\", x);}" always "void f(std::ssize_t x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3848
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3848 always 3848
  "void f(std::intptr_t x){printf(\"%tx\", x);}" always "void f(std::intptr_t x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3849
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3849 always 3849
  "void f(std::uintptr_t x){printf(\"%tx\", x);}" always "void f(std::uintptr_t x){printf(\"%tx\", x);}"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %tx in format string (no. 1) requires 'unsigned ptrdiff_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3851
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3851 always 3851
  "void f(bool x){printf(\"%Iu\", x);}" always "void f(bool x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n"
Line 3852
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3852 always 3852
  "void f(char x){printf(\"%Iu\", x);}" always "void f(char x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n"
Line 3853
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3853 always 3853
  "void f(signed char x){printf(\"%Iu\", x);}" always "void f(signed char x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n"
Line 3854
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3854 always 3854
  "void f(unsigned char x){printf(\"%Iu\", x);}" always "void f(unsigned char x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n"
Line 3855
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3855 always 3855
  "void f(signed short x){printf(\"%Iu\", x);}" always "void f(signed short x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n"
Line 3856
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3856 always 3856
  "void f(unsigned short x){printf(\"%Iu\", x);}" always "void f(unsigned short x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n"
Line 3857
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3857 always 3857
  "void f(signed int x){printf(\"%Iu\", x);}" always "void f(signed int x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n"
Line 3858
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3858 always 3858
  "void f(unsigned int x){printf(\"%Iu\", x);}" always "void f(unsigned int x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n"
Line 3859
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3859 always 3859
  "void f(signed long x){printf(\"%Iu\", x);}" always "void f(signed long x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n"
Line 3860
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3860 always 3860
  "void f(unsigned long x){printf(\"%Iu\", x);}" always "void f(unsigned long x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n"
Line 3861
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3861 always 3861
  "void f(signed long long x){printf(\"%Iu\", x);}" always "void f(signed long long x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n"
Line 3862
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3862 always 3862
  "void f(unsigned long long x){printf(\"%Iu\", x);}" always "void f(unsigned long long x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n"
Line 3863
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3863 always 3863
  "void f(float x){printf(\"%Iu\", x);}" always "void f(float x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n"
Line 3864
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3864 always 3864
  "void f(double x){printf(\"%Iu\", x);}" always "void f(double x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n"
Line 3865
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3865 always 3865
  "void f(long double x){printf(\"%Iu\", x);}" always "void f(long double x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n"
Line 3866
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3866 always 3866
  "void f(void * x){printf(\"%Iu\", x);}" always "void f(void * x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n"
Line 3867
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3867 always 3867
  "void f(size_t x){printf(\"%Iu\", x);}" always "void f(size_t x){printf(\"%Iu\", x);}"
Line 3868
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3868 always 3868
  "void f(ssize_t x){printf(\"%Iu\", x);}" always "void f(ssize_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3869
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3869 always 3869
  "void f(ptrdiff_t x){printf(\"%Iu\", x);}" always "void f(ptrdiff_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3870
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3870 always 3870
  "void f(unsigned ptrdiff_t x){printf(\"%Iu\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3871
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3871 always 3871
  "void f(intmax_t x){printf(\"%Iu\", x);}" always "void f(intmax_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3872
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3872 always 3872
  "void f(uintmax_t x){printf(\"%Iu\", x);}" always "void f(uintmax_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3873
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3873 always 3873
  "void f(intptr_t x){printf(\"%Iu\", x);}" always "void f(intptr_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3874
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3874 always 3874
  "void f(uintptr_t x){printf(\"%Iu\", x);}" always "void f(uintptr_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"
Line 3875
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3875 always 3875
  "void f(std::size_t x){printf(\"%Iu\", x);}" always "void f(std::size_t x){printf(\"%Iu\", x);}"
Line 3876
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3876 always 3876
  "void f(std::ssize_t x){printf(\"%Iu\", x);}" always "void f(std::ssize_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3877
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3877 always 3877
  "void f(std::ptrdiff_t x){printf(\"%Iu\", x);}" always "void f(std::ptrdiff_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3878
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3878 always 3878
  "void f(std::intmax_t x){printf(\"%Iu\", x);}" always "void f(std::intmax_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3879
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3879 always 3879
  "void f(std::uintmax_t x){printf(\"%Iu\", x);}" always "void f(std::uintmax_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"
Line 3880
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3880 always 3880
  "void f(std::intptr_t x){printf(\"%Iu\", x);}" always "void f(std::intptr_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3881
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3881 always 3881
  "void f(std::uintptr_t x){printf(\"%Iu\", x);}" always "void f(std::uintptr_t x){printf(\"%Iu\", x);}"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Iu in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3883
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3883 always 3883
  "void f(bool x){printf(\"%Ix\", x);}" always "void f(bool x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'bool'.\n"
Line 3884
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3884 always 3884
  "void f(char x){printf(\"%Ix\", x);}" always "void f(char x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'char'.\n"
Line 3885
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3885 always 3885
  "void f(signed char x){printf(\"%Ix\", x);}" always "void f(signed char x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed char'.\n"
Line 3886
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3886 always 3886
  "void f(unsigned char x){printf(\"%Ix\", x);}" always "void f(unsigned char x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned char'.\n"
Line 3887
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3887 always 3887
  "void f(signed short x){printf(\"%Ix\", x);}" always "void f(signed short x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed short'.\n"
Line 3888
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3888 always 3888
  "void f(unsigned short x){printf(\"%Ix\", x);}" always "void f(unsigned short x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned short'.\n"
Line 3889
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3889 always 3889
  "void f(signed int x){printf(\"%Ix\", x);}" always "void f(signed int x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed int'.\n"
Line 3890
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3890 always 3890
  "void f(unsigned int x){printf(\"%Ix\", x);}" always "void f(unsigned int x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned int'.\n"
Line 3891
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3891 always 3891
  "void f(signed long x){printf(\"%Ix\", x);}" always "void f(signed long x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed long'.\n"
Line 3892
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3892 always 3892
  "void f(unsigned long x){printf(\"%Ix\", x);}" always "void f(unsigned long x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long'.\n"
Line 3893
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3893 always 3893
  "void f(signed long long x){printf(\"%Ix\", x);}" always "void f(signed long long x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'signed long long'.\n"
Line 3894
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3894 always 3894
  "void f(unsigned long long x){printf(\"%Ix\", x);}" always "void f(unsigned long long x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned long long'.\n"
Line 3895
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3895 always 3895
  "void f(float x){printf(\"%Ix\", x);}" always "void f(float x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'float'.\n"
Line 3896
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3896 always 3896
  "void f(double x){printf(\"%Ix\", x);}" always "void f(double x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'double'.\n"
Line 3897
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3897 always 3897
  "void f(long double x){printf(\"%Ix\", x);}" always "void f(long double x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'long double'.\n"
Line 3898
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3898 always 3898
  "void f(void * x){printf(\"%Ix\", x);}" always "void f(void * x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'void *'.\n"
Line 3899
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3899 always 3899
  "void f(size_t x){printf(\"%Ix\", x);}" always "void f(size_t x){printf(\"%Ix\", x);}"
Line 3900
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3900 always 3900
  "void f(ssize_t x){printf(\"%Ix\", x);}" always "void f(ssize_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3901
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3901 always 3901
  "void f(ptrdiff_t x){printf(\"%Ix\", x);}" always "void f(ptrdiff_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3902
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3902 always 3902
  "void f(unsigned ptrdiff_t x){printf(\"%Ix\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 3903
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3903 always 3903
  "void f(intmax_t x){printf(\"%Ix\", x);}" always "void f(intmax_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3904
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3904 always 3904
  "void f(uintmax_t x){printf(\"%Ix\", x);}" always "void f(uintmax_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 3905
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3905 always 3905
  "void f(intptr_t x){printf(\"%Ix\", x);}" always "void f(intptr_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3906
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3906 always 3906
  "void f(uintptr_t x){printf(\"%Ix\", x);}" always "void f(uintptr_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"
Line 3907
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3907 always 3907
  "void f(std::size_t x){printf(\"%Ix\", x);}" always "void f(std::size_t x){printf(\"%Ix\", x);}"
Line 3908
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3908 always 3908
  "void f(std::ssize_t x){printf(\"%Ix\", x);}" always "void f(std::ssize_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3909
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3909 always 3909
  "void f(std::ptrdiff_t x){printf(\"%Ix\", x);}" always "void f(std::ptrdiff_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3910
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3910 always 3910
  "void f(std::intmax_t x){printf(\"%Ix\", x);}" always "void f(std::intmax_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3911
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3911 always 3911
  "void f(std::uintmax_t x){printf(\"%Ix\", x);}" always "void f(std::uintmax_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"
Line 3912
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3912 always 3912
  "void f(std::intptr_t x){printf(\"%Ix\", x);}" always "void f(std::intptr_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3913
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3913 always 3913
  "void f(std::uintptr_t x){printf(\"%Ix\", x);}" always "void f(std::uintptr_t x){printf(\"%Ix\", x);}"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %Ix in format string (no. 1) requires 'size_t' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 3915
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3915 always 3915
  "void f(bool x){printf(\"%I64u\", x);}" always "void f(bool x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'bool'.\n"
Line 3916
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3916 always 3916
  "void f(char x){printf(\"%I64u\", x);}" always "void f(char x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'char'.\n"
Line 3917
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3917 always 3917
  "void f(signed char x){printf(\"%I64u\", x);}" always "void f(signed char x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed char'.\n"
Line 3918
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3918 always 3918
  "void f(unsigned char x){printf(\"%I64u\", x);}" always "void f(unsigned char x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned char'.\n"
Line 3919
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3919 always 3919
  "void f(signed short x){printf(\"%I64u\", x);}" always "void f(signed short x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed short'.\n"
Line 3920
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3920 always 3920
  "void f(unsigned short x){printf(\"%I64u\", x);}" always "void f(unsigned short x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned short'.\n"
Line 3921
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3921 always 3921
  "void f(signed int x){printf(\"%I64u\", x);}" always "void f(signed int x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed int'.\n"
Line 3922
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3922 always 3922
  "void f(unsigned int x){printf(\"%I64u\", x);}" always "void f(unsigned int x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned int'.\n"
Line 3923
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3923 always 3923
  "void f(signed long x){printf(\"%I64u\", x);}" always "void f(signed long x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed long'.\n"
Line 3924
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3924 always 3924
  "void f(unsigned long x){printf(\"%I64u\", x);}" always "void f(unsigned long x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned long'.\n"
Line 3925
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3925 always 3925
  "void f(signed long long x){printf(\"%I64u\", x);}" always "void f(signed long long x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed long long'.\n"
Line 3926
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3926 always 3926
  "void f(unsigned long long x){printf(\"%I64u\", x);}" always "void f(unsigned long long x){printf(\"%I64u\", x);}"
Line 3927
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3927 always 3927
  "void f(float x){printf(\"%I64u\", x);}" always "void f(float x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'float'.\n"
Line 3928
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3928 always 3928
  "void f(double x){printf(\"%I64u\", x);}" always "void f(double x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'double'.\n"
Line 3929
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3929 always 3929
  "void f(long double x){printf(\"%I64u\", x);}" always "void f(long double x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'long double'.\n"
Line 3930
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3930 always 3930
  "void f(void * x){printf(\"%I64u\", x);}" always "void f(void * x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'void *'.\n"
Line 3931
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3931 always 3931
  "void f(size_t x){printf(\"%I64u\", x);}" always "void f(size_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'size_t {aka unsigned long}'.\n"
Line 3932
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3932 always 3932
  "void f(ssize_t x){printf(\"%I64u\", x);}" always "void f(ssize_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 3933
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3933 always 3933
  "void f(ptrdiff_t x){printf(\"%I64u\", x);}" always "void f(ptrdiff_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 3934
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3934 always 3934
  "void f(unsigned ptrdiff_t x){printf(\"%I64u\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
Line 3935
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3935 always 3935
  "void f(intmax_t x){printf(\"%I64u\", x);}" always "void f(intmax_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 3936
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3936 always 3936
  "void f(uintmax_t x){printf(\"%I64u\", x);}" always "void f(uintmax_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
Line 3937
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3937 always 3937
  "void f(intptr_t x){printf(\"%I64u\", x);}" always "void f(intptr_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 3938
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3938 always 3938
  "void f(uintptr_t x){printf(\"%I64u\", x);}" always "void f(uintptr_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
Line 3939
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3939 always 3939
  "void f(std::size_t x){printf(\"%I64u\", x);}" always "void f(std::size_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::size_t {aka unsigned long}'.\n"
Line 3940
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3940 always 3940
  "void f(std::ssize_t x){printf(\"%I64u\", x);}" always "void f(std::ssize_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 3941
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3941 always 3941
  "void f(std::ptrdiff_t x){printf(\"%I64u\", x);}" always "void f(std::ptrdiff_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 3942
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3942 always 3942
  "void f(std::intmax_t x){printf(\"%I64u\", x);}" always "void f(std::intmax_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 3943
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3943 always 3943
  "void f(std::uintmax_t x){printf(\"%I64u\", x);}" always "void f(std::uintmax_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
Line 3944
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3944 always 3944
  "void f(std::intptr_t x){printf(\"%I64u\", x);}" always "void f(std::intptr_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 3945
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3945 always 3945
  "void f(std::uintptr_t x){printf(\"%I64u\", x);}" always "void f(std::uintptr_t x){printf(\"%I64u\", x);}"
  "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64u in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
Line 3947
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3947 always 3947
  "void f(bool x){printf(\"%I64x\", x);}" always "void f(bool x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'bool'.\n"
Line 3948
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3948 always 3948
  "void f(char x){printf(\"%I64x\", x);}" always "void f(char x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'char'.\n"
Line 3949
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3949 always 3949
  "void f(signed char x){printf(\"%I64x\", x);}" always "void f(signed char x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed char'.\n"
Line 3950
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3950 always 3950
  "void f(unsigned char x){printf(\"%I64x\", x);}" always "void f(unsigned char x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned char'.\n"
Line 3951
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3951 always 3951
  "void f(signed short x){printf(\"%I64x\", x);}" always "void f(signed short x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed short'.\n"
Line 3952
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3952 always 3952
  "void f(unsigned short x){printf(\"%I64x\", x);}" always "void f(unsigned short x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned short'.\n"
Line 3953
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3953 always 3953
  "void f(signed int x){printf(\"%I64x\", x);}" always "void f(signed int x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed int'.\n"
Line 3954
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3954 always 3954
  "void f(unsigned int x){printf(\"%I64x\", x);}" always "void f(unsigned int x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned int'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned int'.\n"
Line 3955
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3955 always 3955
  "void f(signed long x){printf(\"%I64x\", x);}" always "void f(signed long x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'signed long'.\n"
Line 3956
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3956 always 3956
  "void f(unsigned long x){printf(\"%I64x\", x);}" always "void f(unsigned long x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned long'.\n"
Line 3958
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3958 always 3958
  "void f(unsigned long long x){printf(\"%I64x\", x);}" always "void f(unsigned long long x){printf(\"%I64x\", x);}"
Line 3959
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3959 always 3959
  "void f(float x){printf(\"%I64x\", x);}" always "void f(float x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'float'.\n"
Line 3960
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3960 always 3960
  "void f(double x){printf(\"%I64x\", x);}" always "void f(double x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'double'.\n"
Line 3961
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3961 always 3961
  "void f(long double x){printf(\"%I64x\", x);}" always "void f(long double x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'long double'.\n"
Line 3962
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3962 always 3962
  "void f(void * x){printf(\"%I64x\", x);}" always "void f(void * x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'void *'.\n"
Line 3964
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3964 always 3964
  "void f(ssize_t x){printf(\"%I64x\", x);}" always "void f(ssize_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ssize_t {aka signed long}'.\n"
Line 3965
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3965 always 3965
  "void f(ptrdiff_t x){printf(\"%I64x\", x);}" always "void f(ptrdiff_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
Line 3968
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3968 always 3968
  "void f(unsigned ptrdiff_t x){printf(\"%I64x\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
Line 3969
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3969 always 3969
  "void f(intmax_t x){printf(\"%I64x\", x);}" always "void f(intmax_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intmax_t {aka signed long}'.\n"
Line 3970
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3970 always 3970
  "void f(uintmax_t x){printf(\"%I64x\", x);}" always "void f(uintmax_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
Line 3971
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3971 always 3971
  "void f(intptr_t x){printf(\"%I64x\", x);}" always "void f(intptr_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'intptr_t {aka signed long}'.\n"
Line 3972
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3972 always 3972
  "void f(uintptr_t x){printf(\"%I64x\", x);}" always "void f(uintptr_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
Line 3973
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3973 always 3973
  "void f(std::size_t x){printf(\"%I64x\", x);}" always "void f(std::size_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::size_t {aka unsigned long}'.\n"
Line 3974
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3974 always 3974
  "void f(std::ssize_t x){printf(\"%I64x\", x);}" always "void f(std::ssize_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ssize_t {aka signed long}'.\n"
Line 3975
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3975 always 3975
  "void f(std::ptrdiff_t x){printf(\"%I64x\", x);}" always "void f(std::ptrdiff_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
Line 3976
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3976 always 3976
  "void f(std::intmax_t x){printf(\"%I64x\", x);}" always "void f(std::intmax_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intmax_t {aka signed long}'.\n"
Line 3977
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3977 always 3977
  "void f(std::uintmax_t x){printf(\"%I64x\", x);}" always "void f(std::uintmax_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
Line 3978
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3978 always 3978
  "void f(std::intptr_t x){printf(\"%I64x\", x);}" always "void f(std::intptr_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::intptr_t {aka signed long}'.\n"
Line 3979
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3979 always 3979
  "void f(std::uintptr_t x){printf(\"%I64x\", x);}" always "void f(std::uintptr_t x){printf(\"%I64x\", x);}"
  "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I64x in format string (no. 1) requires 'unsigned __int64' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
Line 3981
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3981 always 3981
  "void f(bool x){printf(\"%I64d\", x);}" always "void f(bool x){printf(\"%I64d\", x);}"
  "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'bool'.\n"
Line 3982
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3982 always 3982
  "void f(signed char x){printf(\"%I64d\", x);}" always "void f(signed char x){printf(\"%I64d\", x);}"
  "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'signed char'.\n"
Line 3983
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3983 always 3983
  "void f(unsigned char x){printf(\"%I64d\", x);}" always "void f(unsigned char x){printf(\"%I64d\", x);}"
  "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'unsigned char'.\n"
Line 3984
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3984 always 3984
  "void f(void * x){printf(\"%I64d\", x);}" always "void f(void * x){printf(\"%I64d\", x);}"
  "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %I64d in format string (no. 1) requires '__int64' but the argument type is 'void *'.\n"
Line 3986
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3986 always 3986
  "void f(intmax_t x){printf(\"%I64d\", x);}" always "void f(intmax_t x){printf(\"%I64d\", x);}"
  "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'intmax_t {aka signed long}'.\n"
Line 3987
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3987 always 3987
  "void f(ssize_t x){printf(\"%I64d\", x);}" always "void f(ssize_t x){printf(\"%I64d\", x);}"
  "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'ssize_t {aka signed long}'.\n"
Line 3988
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3988 always 3988
  "void f(ptrdiff_t x){printf(\"%I64d\", x);}" always "void f(ptrdiff_t x){printf(\"%I64d\", x);}"
  "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
Line 3989
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3989 always 3989
  "void f(__int64 x){printf(\"%I64d\", x);}" always "void f(__int64 x){printf(\"%I64d\", x);}"
Line 3991
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3991 always 3991
  "void f(bool x){printf(\"%I32u\", x);}" always "void f(bool x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'bool'.\n"
Line 3992
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3992 always 3992
  "void f(char x){printf(\"%I32u\", x);}" always "void f(char x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'char'.\n"
Line 3993
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3993 always 3993
  "void f(signed char x){printf(\"%I32u\", x);}" always "void f(signed char x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed char'.\n"
Line 3994
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3994 always 3994
  "void f(unsigned char x){printf(\"%I32u\", x);}" always "void f(unsigned char x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned char'.\n"
Line 3995
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3995 always 3995
  "void f(signed short x){printf(\"%I32u\", x);}" always "void f(signed short x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed short'.\n"
Line 3996
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3996 always 3996
  "void f(unsigned short x){printf(\"%I32u\", x);}" always "void f(unsigned short x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned short'.\n"
Line 3997
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3997 always 3997
  "void f(signed int x){printf(\"%I32u\", x);}" always "void f(signed int x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed int'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed int'.\n"
Line 3998
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3998 always 3998
  "void f(unsigned int x){printf(\"%I32u\", x);}" always "void f(unsigned int x){printf(\"%I32u\", x);}"
Line 3999
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  3999 always 3999
  "void f(signed long x){printf(\"%I32u\", x);}" always "void f(signed long x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long'.\n"
Line 4000
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4000 always 4000
  "void f(unsigned long x){printf(\"%I32u\", x);}" always "void f(unsigned long x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long'.\n"
Line 4001
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4001 always 4001
  "void f(signed long long x){printf(\"%I32u\", x);}" always "void f(signed long long x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long long'.\n"
Line 4002
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4002 always 4002
  "void f(unsigned long long x){printf(\"%I32u\", x);}" always "void f(unsigned long long x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n"
Line 4003
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4003 always 4003
  "void f(float x){printf(\"%I32u\", x);}" always "void f(float x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'float'.\n"
Line 4004
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4004 always 4004
  "void f(double x){printf(\"%I32u\", x);}" always "void f(double x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'double'.\n"
Line 4005
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4005 always 4005
  "void f(long double x){printf(\"%I32u\", x);}" always "void f(long double x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'long double'.\n"
Line 4006
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4006 always 4006
  "void f(void * x){printf(\"%I32u\", x);}" always "void f(void * x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'void *'.\n"
Line 4007
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4007 always 4007
  "void f(size_t x){printf(\"%I32u\", x);}" always "void f(size_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 4008
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4008 always 4008
  "void f(ssize_t x){printf(\"%I32u\", x);}" always "void f(ssize_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 4009
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4009 always 4009
  "void f(ptrdiff_t x){printf(\"%I32u\", x);}" always "void f(ptrdiff_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 4010
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4010 always 4010
  "void f(unsigned ptrdiff_t x){printf(\"%I32u\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 4011
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4011 always 4011
  "void f(intmax_t x){printf(\"%I32u\", x);}" always "void f(intmax_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 4012
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4012 always 4012
  "void f(uintmax_t x){printf(\"%I32u\", x);}" always "void f(uintmax_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 4013
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4013 always 4013
  "void f(intptr_t x){printf(\"%I32u\", x);}" always "void f(intptr_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 4014
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4014 always 4014
  "void f(uintptr_t x){printf(\"%I32u\", x);}" always "void f(uintptr_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"
Line 4015
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4015 always 4015
  "void f(std::size_t x){printf(\"%I32u\", x);}" always "void f(std::size_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 4016
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4016 always 4016
  "void f(std::ssize_t x){printf(\"%I32u\", x);}" always "void f(std::ssize_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 4017
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4017 always 4017
  "void f(std::ptrdiff_t x){printf(\"%I32u\", x);}" always "void f(std::ptrdiff_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 4018
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4018 always 4018
  "void f(std::intmax_t x){printf(\"%I32u\", x);}" always "void f(std::intmax_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 4019
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4019 always 4019
  "void f(std::uintmax_t x){printf(\"%I32u\", x);}" always "void f(std::uintmax_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"
Line 4020
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4020 always 4020
  "void f(std::intptr_t x){printf(\"%I32u\", x);}" always "void f(std::intptr_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 4021
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4021 always 4021
  "void f(std::uintptr_t x){printf(\"%I32u\", x);}" always "void f(std::uintptr_t x){printf(\"%I32u\", x);}"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32u in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 4023
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4023 always 4023
  "void f(bool x){printf(\"%I32x\", x);}" always "void f(bool x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'bool'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'bool'.\n"
Line 4024
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4024 always 4024
  "void f(char x){printf(\"%I32x\", x);}" always "void f(char x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'char'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'char'.\n"
Line 4025
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4025 always 4025
  "void f(signed char x){printf(\"%I32x\", x);}" always "void f(signed char x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed char'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed char'.\n"
Line 4026
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4026 always 4026
  "void f(unsigned char x){printf(\"%I32x\", x);}" always "void f(unsigned char x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned char'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned char'.\n"
Line 4027
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4027 always 4027
  "void f(signed short x){printf(\"%I32x\", x);}" always "void f(signed short x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed short'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed short'.\n"
Line 4028
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4028 always 4028
  "void f(unsigned short x){printf(\"%I32x\", x);}" always "void f(unsigned short x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned short'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned short'.\n"
Line 4030
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4030 always 4030
  "void f(unsigned int x){printf(\"%I32x\", x);}" always "void f(unsigned int x){printf(\"%I32x\", x);}"
Line 4031
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4031 always 4031
  "void f(signed long x){printf(\"%I32x\", x);}" always "void f(signed long x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long'.\n"
Line 4032
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4032 always 4032
  "void f(unsigned long x){printf(\"%I32x\", x);}" always "void f(unsigned long x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long'.\n"
Line 4033
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4033 always 4033
  "void f(signed long long x){printf(\"%I32x\", x);}" always "void f(signed long long x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long long'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'signed long long'.\n"
Line 4034
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4034 always 4034
  "void f(unsigned long long x){printf(\"%I32x\", x);}" always "void f(unsigned long long x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned long long'.\n"
Line 4035
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4035 always 4035
  "void f(float x){printf(\"%I32x\", x);}" always "void f(float x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'float'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'float'.\n"
Line 4036
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4036 always 4036
  "void f(double x){printf(\"%I32x\", x);}" always "void f(double x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'double'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'double'.\n"
Line 4037
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4037 always 4037
  "void f(long double x){printf(\"%I32x\", x);}" always "void f(long double x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'long double'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'long double'.\n"
Line 4038
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4038 always 4038
  "void f(void * x){printf(\"%I32x\", x);}" always "void f(void * x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'void *'.\n" always "[test.cpp:1]: (warning) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'void *'.\n"
Line 4039
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4039 always 4039
  "void f(size_t x){printf(\"%I32x\", x);}" always "void f(size_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'size_t {aka unsigned long long}'.\n"
Line 4040
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4040 always 4040
  "void f(ssize_t x){printf(\"%I32x\", x);}" always "void f(ssize_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ssize_t {aka signed long long}'.\n"
Line 4041
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4041 always 4041
  "void f(ptrdiff_t x){printf(\"%I32x\", x);}" always "void f(ptrdiff_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'ptrdiff_t {aka signed long long}'.\n"
Line 4042
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4042 always 4042
  "void f(unsigned ptrdiff_t x){printf(\"%I32x\", x);}" always "void f(unsigned ptrdiff_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'unsigned ptrdiff_t {aka unsigned long long}'.\n"
Line 4043
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4043 always 4043
  "void f(intmax_t x){printf(\"%I32x\", x);}" always "void f(intmax_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intmax_t {aka signed long long}'.\n"
Line 4044
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4044 always 4044
  "void f(uintmax_t x){printf(\"%I32x\", x);}" always "void f(uintmax_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintmax_t {aka unsigned long long}'.\n"
Line 4045
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4045 always 4045
  "void f(intptr_t x){printf(\"%I32x\", x);}" always "void f(intptr_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'intptr_t {aka signed long long}'.\n"
Line 4046
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4046 always 4046
  "void f(uintptr_t x){printf(\"%I32x\", x);}" always "void f(uintptr_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'uintptr_t {aka unsigned long long}'.\n"
Line 4047
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4047 always 4047
  "void f(std::size_t x){printf(\"%I32x\", x);}" always "void f(std::size_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::size_t {aka unsigned long long}'.\n"
Line 4048
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4048 always 4048
  "void f(std::ssize_t x){printf(\"%I32x\", x);}" always "void f(std::ssize_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ssize_t {aka signed long long}'.\n"
Line 4049
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4049 always 4049
  "void f(std::ptrdiff_t x){printf(\"%I32x\", x);}" always "void f(std::ptrdiff_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::ptrdiff_t {aka signed long long}'.\n"
Line 4050
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4050 always 4050
  "void f(std::intmax_t x){printf(\"%I32x\", x);}" always "void f(std::intmax_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intmax_t {aka signed long long}'.\n"
Line 4051
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4051 always 4051
  "void f(std::uintmax_t x){printf(\"%I32x\", x);}" always "void f(std::uintmax_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintmax_t {aka unsigned long long}'.\n"
Line 4052
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4052 always 4052
  "void f(std::intptr_t x){printf(\"%I32x\", x);}" always "void f(std::intptr_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::intptr_t {aka signed long long}'.\n"
Line 4053
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4053 always 4053
  "void f(std::uintptr_t x){printf(\"%I32x\", x);}" always "void f(std::uintptr_t x){printf(\"%I32x\", x);}"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long}'.\n"
  "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n" always "[test.cpp:1]: (portability) %I32x in format string (no. 1) requires 'unsigned __int32' but the argument type is 'std::uintptr_t {aka unsigned long long}'.\n"
Line 4057
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4057 always 4057
  "void foo() {  int bar;  printf(\"%1$d\", 1);  printf(\"%1$d, %d, %1$d\", 1, 2);  scanf(\"%1$d\", &bar);}" always "void foo() {  int bar;  printf(\"%1$d\", 1);  printf(\"%1$d, %d, %1$d\", 1, 2);  scanf(\"%1$d\", &bar);}"
Line 4063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4063 always 4063
  "" always ""
Line 4065
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4065 always 4065
  "void foo() {\n  int bar;\n  printf(\"%1$d\");\n  printf(\"%1$d, %d, %4$d\", 1, 2, 3);\n  scanf(\"%2$d\", &bar);\n  printf(\"%0$f\", 0.0);\n}" always "void foo() {\n  int bar;\n  printf(\"%1$d\");\n  printf(\"%1$d, %d, %4$d\", 1, 2, 3);\n  scanf(\"%2$d\", &bar);\n  printf(\"%0$f\", 0.0);\n}"
Line 4072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4072 always 4072
  "[test.cpp:3]: (error) printf format string requires 1 parameter but only 0 are given.\n[test.cpp:4]: (warning) printf: referencing parameter 4 while 3 arguments given\n[test.cpp:5]: (warning) scanf: referencing parameter 2 while 1 arguments given\n[test.cpp:6]: (warning) printf: parameter positions start at 1, not 0\n" always "[test.cpp:3]: (error) printf format string requires 1 parameter but only 0 are given.\n[test.cpp:4]: (warning) printf: referencing parameter 4 while 3 arguments given\n[test.cpp:5]: (warning) scanf: referencing parameter 2 while 1 arguments given\n[test.cpp:6]: (warning) printf: parameter positions start at 1, not 0\n"
Line 4081
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4081 always 4081
  "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    printf(\"%Id %Iu %Ix\", s, s, s);\n    printf(\"%Id %Iu %Ix\", p, p, p);\n    printf(\"%I32d %I32u %I32x\", i32, i32, i32);\n    printf(\"%I32d %I32u %I32x\", u32, u32, u32);\n    printf(\"%I64d %I64u %I64x\", i64, i64, i64);\n    printf(\"%I64d %I64u %I64x\", u64, u64, u64);\n}" always "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    printf(\"%Id %Iu %Ix\", s, s, s);\n    printf(\"%Id %Iu %Ix\", p, p, p);\n    printf(\"%I32d %I32u %I32x\", i32, i32, i32);\n    printf(\"%I32d %I32u %I32x\", u32, u32, u32);\n    printf(\"%I64d %I64u %I64x\", i64, i64, i64);\n    printf(\"%I64d %I64u %I64x\", u64, u64, u64);\n}"
  false always 0
  true always 1
Line 4095
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4095 always 4095
  "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is '__int32 {aka signed int}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is '__int64 {aka signed long long}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'unsigned __int64 {aka unsigned long long}'.\n" always "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'size_t {aka unsigned long}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is '__int32 {aka signed int}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is '__int64 {aka signed long long}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'unsigned __int64 {aka unsigned long long}'.\n"
Line 4103
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4103 always 4103
  "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    printf(\"%Id %Iu %Ix\", s, s, s);\n    printf(\"%Id %Iu %Ix\", p, p, p);\n    printf(\"%I32d %I32u %I32x\", i32, i32, i32);\n    printf(\"%I32d %I32u %I32x\", u32, u32, u32);\n    printf(\"%I64d %I64u %I64x\", i64, i64, i64);\n    printf(\"%I64d %I64u %I64x\", u64, u64, u64);\n}" always "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    printf(\"%Id %Iu %Ix\", s, s, s);\n    printf(\"%Id %Iu %Ix\", p, p, p);\n    printf(\"%I32d %I32u %I32x\", i32, i32, i32);\n    printf(\"%I32d %I32u %I32x\", u32, u32, u32);\n    printf(\"%I64d %I64u %I64x\", i64, i64, i64);\n    printf(\"%I64d %I64u %I64x\", u64, u64, u64);\n}"
  false always 0
  true always 1
Line 4117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4117 always 4117
  "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is '__int32 {aka signed int}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is '__int64 {aka signed long long}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'unsigned __int64 {aka unsigned long long}'.\n" always "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t' but the argument type is 'size_t {aka unsigned long long}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t' but the argument type is 'ptrdiff_t {aka signed long long}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32' but the argument type is '__int32 {aka signed int}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64' but the argument type is '__int64 {aka signed long long}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64' but the argument type is 'unsigned __int64 {aka unsigned long long}'.\n"
Line 4125
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4125 always 4125
  "void foo() {\n    size_t s;\n    int i;\n    printf(\"%I\", s);\n    printf(\"%I6\", s);\n    printf(\"%I6x\", s);\n    printf(\"%I16\", s);\n    printf(\"%I16x\", s);\n    printf(\"%I32\", s);\n    printf(\"%I64\", s);\n    printf(\"%I%i\", s, i);\n    printf(\"%I6%i\", s, i);\n    printf(\"%I6x%i\", s, i);\n    printf(\"%I16%i\", s, i);\n    printf(\"%I16x%i\", s, i);\n    printf(\"%I32%i\", s, i);\n    printf(\"%I64%i\", s, i);\n}" always "void foo() {\n    size_t s;\n    int i;\n    printf(\"%I\", s);\n    printf(\"%I6\", s);\n    printf(\"%I6x\", s);\n    printf(\"%I16\", s);\n    printf(\"%I16x\", s);\n    printf(\"%I32\", s);\n    printf(\"%I64\", s);\n    printf(\"%I%i\", s, i);\n    printf(\"%I6%i\", s, i);\n    printf(\"%I6x%i\", s, i);\n    printf(\"%I16%i\", s, i);\n    printf(\"%I16x%i\", s, i);\n    printf(\"%I32%i\", s, i);\n    printf(\"%I64%i\", s, i);\n}"
Line 4143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4143 always 4143
  "[test.cpp:4]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:11]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:12]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:13]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:14]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:15]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:16]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:17]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n" always "[test.cpp:4]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:11]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:12]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:13]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:14]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:15]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:16]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:17]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n"
Line 4159
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4159 always 4159
  "void foo(LPARAM lp, WPARAM wp, LRESULT lr) {\n    printf(\"%Ix %Ix %Ix\", lp, wp, lr);\n}\n" always "void foo(LPARAM lp, WPARAM wp, LRESULT lr) {\n    printf(\"%Ix %Ix %Ix\", lp, wp, lr);\n}\n"
  false always 0
  true always 1
Line 4162
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4162 always 4162
  "" always ""
Line 4164
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4164 always 4164
  "void foo(LPARAM lp, WPARAM wp, LRESULT lr) {\n    printf(\"%Ix %Ix %Ix\", lp, wp, lr);\n}\n" always "void foo(LPARAM lp, WPARAM wp, LRESULT lr) {\n    printf(\"%Ix %Ix %Ix\", lp, wp, lr);\n}\n"
  false always 0
  true always 1
Line 4167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4167 always 4167
  "" always ""
Line 4169
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4169 always 4169
  "void foo(UINT32 a, ::UINT32 b, Fred::UINT32 c) {\n    printf(\"%d %d %d\", a, b, c);\n};\n" always "void foo(UINT32 a, ::UINT32 b, Fred::UINT32 c) {\n    printf(\"%d %d %d\", a, b, c);\n};\n"
  false always 0
  true always 1
Line 4172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4172 always 4172
  "[test.cpp:2]: (portability) %d in format string (no. 1) requires 'int' but the argument type is 'UINT32 {aka unsigned int}'.\n[test.cpp:2]: (portability) %d in format string (no. 2) requires 'int' but the argument type is 'UINT32 {aka unsigned int}'.\n" always "[test.cpp:2]: (portability) %d in format string (no. 1) requires 'int' but the argument type is 'UINT32 {aka unsigned int}'.\n[test.cpp:2]: (portability) %d in format string (no. 2) requires 'int' but the argument type is 'UINT32 {aka unsigned int}'.\n"
Line 4175
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4175 always 4175
  "void foo(LPCVOID a, ::LPCVOID b, Fred::LPCVOID c) {\n    printf(\"%d %d %d\", a, b, c);\n};\n" always "void foo(LPCVOID a, ::LPCVOID b, Fred::LPCVOID c) {\n    printf(\"%d %d %d\", a, b, c);\n};\n"
  false always 0
  true always 1
Line 4178
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4178 always 4178
  "[test.cpp:2]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const void *'.\n[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const void *'.\n" always "[test.cpp:2]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'const void *'.\n[test.cpp:2]: (warning) %d in format string (no. 2) requires 'int' but the argument type is 'const void *'.\n"
Line 4181
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4181 always 4181
  "void foo() {\n    SSIZE_T s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}" always "void foo() {\n    SSIZE_T s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}"
  false always 0
  true always 1
Line 4188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4188 always 4188
  "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'SSIZE_T {aka signed long}'.\n" always "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'SSIZE_T {aka signed long}'.\n"
Line 4190
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4190 always 4190
  "void foo() {\n    SSIZE_T s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}" always "void foo() {\n    SSIZE_T s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}"
  false always 0
  true always 1
Line 4197
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4197 always 4197
  "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'SSIZE_T {aka signed long long}'.\n" always "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'SSIZE_T {aka signed long long}'.\n"
Line 4199
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4199 always 4199
  "void foo() {\n    SSIZE_T s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}" always "void foo() {\n    SSIZE_T s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}"
  false always 0
  true always 1
Line 4206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4206 always 4206
  "" always ""
Line 4208
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4208 always 4208
  "void foo() {\n    typedef SSIZE_T ssize_t;\n    ssize_t s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}" always "void foo() {\n    typedef SSIZE_T ssize_t;\n    ssize_t s = -2;\n    int i;\n    printf(\"%zd\", s);\n    printf(\"%zd%i\", s, i);\n    printf(\"%zu\", s);\n}"
  false always 0
  true always 1
Line 4216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4216 always 4216
  "[test.cpp:7]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'SSIZE_T {aka signed long long}'.\n" always "[test.cpp:7]: (portability) %zu in format string (no. 1) requires 'size_t' but the argument type is 'SSIZE_T {aka signed long long}'.\n"
Line 4221
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4221 always 4221
  "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    scanf(\"%Id %Iu %Ix\", &s, &s, &s);\n    scanf(\"%Id %Iu %Ix\", &p, &p, &p);\n    scanf(\"%I32d %I32u %I32x\", &i32, &i32, &i32);\n    scanf(\"%I32d %I32u %I32x\", &u32, &u32, &u32);\n    scanf(\"%I64d %I64u %I64x\", &i64, &i64, &i64);\n    scanf(\"%I64d %I64u %I64x\", &u64, &u64, &u64);\n}" always "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    scanf(\"%Id %Iu %Ix\", &s, &s, &s);\n    scanf(\"%Id %Iu %Ix\", &p, &p, &p);\n    scanf(\"%I32d %I32u %I32x\", &i32, &i32, &i32);\n    scanf(\"%I32d %I32u %I32x\", &u32, &u32, &u32);\n    scanf(\"%I64d %I64u %I64x\", &i64, &i64, &i64);\n    scanf(\"%I64d %I64u %I64x\", &u64, &u64, &u64);\n}"
  false always 0
  true always 1
Line 4235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4235 always 4235
  "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:10]: (portability) %I32x in format string (no. 3) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'unsigned __int32 * {aka unsigned int *}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:12]: (portability) %I64x in format string (no. 3) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'unsigned __int64 * {aka unsigned long long *}'.\n" always "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long *}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long *}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:10]: (portability) %I32x in format string (no. 3) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'unsigned __int32 * {aka unsigned int *}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:12]: (portability) %I64x in format string (no. 3) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'unsigned __int64 * {aka unsigned long long *}'.\n"
Line 4245
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4245 always 4245
  "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    scanf(\"%Id %Iu %Ix\", &s, &s, &s);\n    scanf(\"%Id %Iu %Ix\", &p, &p, &p);\n    scanf(\"%I32d %I32u %I32x\", &i32, &i32, &i32);\n    scanf(\"%I32d %I32u %I32x\", &u32, &u32, &u32);\n    scanf(\"%I64d %I64u %I64x\", &i64, &i64, &i64);\n    scanf(\"%I64d %I64u %I64x\", &u64, &u64, &u64);\n}" always "void foo() {\n    size_t s;\n    ptrdiff_t p;\n    __int32 i32;\n    unsigned __int32 u32;\n    __int64 i64;\n    unsigned __int64 u64;\n    scanf(\"%Id %Iu %Ix\", &s, &s, &s);\n    scanf(\"%Id %Iu %Ix\", &p, &p, &p);\n    scanf(\"%I32d %I32u %I32x\", &i32, &i32, &i32);\n    scanf(\"%I32d %I32u %I32x\", &u32, &u32, &u32);\n    scanf(\"%I64d %I64u %I64x\", &i64, &i64, &i64);\n    scanf(\"%I64d %I64u %I64x\", &u64, &u64, &u64);\n}"
  false always 0
  true always 1
Line 4259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4259 always 4259
  "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:10]: (portability) %I32x in format string (no. 3) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'unsigned __int32 * {aka unsigned int *}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:12]: (portability) %I64x in format string (no. 3) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'unsigned __int64 * {aka unsigned long long *}'.\n" always "[test.cpp:8]: (portability) %Id in format string (no. 1) requires 'ptrdiff_t *' but the argument type is 'size_t * {aka unsigned long long *}'.\n[test.cpp:9]: (portability) %Iu in format string (no. 2) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n[test.cpp:9]: (portability) %Ix in format string (no. 3) requires 'size_t *' but the argument type is 'ptrdiff_t * {aka signed long long *}'.\n[test.cpp:10]: (portability) %I32u in format string (no. 2) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:10]: (portability) %I32x in format string (no. 3) requires 'unsigned __int32 *' but the argument type is '__int32 * {aka signed int *}'.\n[test.cpp:11]: (portability) %I32d in format string (no. 1) requires '__int32 *' but the argument type is 'unsigned __int32 * {aka unsigned int *}'.\n[test.cpp:12]: (portability) %I64u in format string (no. 2) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:12]: (portability) %I64x in format string (no. 3) requires 'unsigned __int64 *' but the argument type is '__int64 * {aka signed long long *}'.\n[test.cpp:13]: (portability) %I64d in format string (no. 1) requires '__int64 *' but the argument type is 'unsigned __int64 * {aka unsigned long long *}'.\n"
Line 4269
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4269 always 4269
  "void foo() {\n    size_t s;\n    int i;\n    scanf(\"%I\", &s);\n    scanf(\"%I6\", &s);\n    scanf(\"%I6x\", &s);\n    scanf(\"%I16\", &s);\n    scanf(\"%I16x\", &s);\n    scanf(\"%I32\", &s);\n    scanf(\"%I64\", &s);\n    scanf(\"%I%i\", &s, &i);\n    scanf(\"%I6%i\", &s, &i);\n    scanf(\"%I6x%i\", &s, &i);\n    scanf(\"%I16%i\", &s, &i);\n    scanf(\"%I16x%i\", &s, &i);\n    scanf(\"%I32%i\", &s, &i);\n    scanf(\"%I64%i\", &s, &i);\n}" always "void foo() {\n    size_t s;\n    int i;\n    scanf(\"%I\", &s);\n    scanf(\"%I6\", &s);\n    scanf(\"%I6x\", &s);\n    scanf(\"%I16\", &s);\n    scanf(\"%I16x\", &s);\n    scanf(\"%I32\", &s);\n    scanf(\"%I64\", &s);\n    scanf(\"%I%i\", &s, &i);\n    scanf(\"%I6%i\", &s, &i);\n    scanf(\"%I6x%i\", &s, &i);\n    scanf(\"%I16%i\", &s, &i);\n    scanf(\"%I16x%i\", &s, &i);\n    scanf(\"%I32%i\", &s, &i);\n    scanf(\"%I64%i\", &s, &i);\n}"
Line 4287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4287 always 4287
  "[test.cpp:4]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:11]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:12]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:13]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:14]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:15]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:16]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:17]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n" always "[test.cpp:4]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:5]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:6]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:7]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:8]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:9]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:10]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:11]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:12]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:13]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:14]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:15]: (warning) 'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:16]: (warning) 'I32' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n[test.cpp:17]: (warning) 'I64' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.\n"
Line 4302
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4302 always 4302
  "void foo() {\n    SSIZE_T s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}" always "void foo() {\n    SSIZE_T s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}"
  false always 0
  true always 1
Line 4309
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4309 always 4309
  "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'SSIZE_T * {aka signed long *}'.\n" always "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'SSIZE_T * {aka signed long *}'.\n"
Line 4311
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4311 always 4311
  "void foo() {\n    SSIZE_T s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}" always "void foo() {\n    SSIZE_T s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}"
  false always 0
  true always 1
Line 4318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4318 always 4318
  "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'SSIZE_T * {aka signed long long *}'.\n" always "[test.cpp:6]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'SSIZE_T * {aka signed long long *}'.\n"
Line 4320
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4320 always 4320
  "void foo() {\n    SSIZE_T s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}" always "void foo() {\n    SSIZE_T s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}"
  false always 0
  true always 1
Line 4327
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4327 always 4327
  "" always ""
Line 4329
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4329 always 4329
  "void foo() {\n    typedef SSIZE_T ssize_t;\n    ssize_t s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}" always "void foo() {\n    typedef SSIZE_T ssize_t;\n    ssize_t s;\n    int i;\n    scanf(\"%zd\", &s);\n    scanf(\"%zd%i\", &s, &i);\n    scanf(\"%zu\", &s);\n}"
  false always 0
  true always 1
Line 4337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4337 always 4337
  "[test.cpp:7]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'SSIZE_T * {aka signed long long *}'.\n" always "[test.cpp:7]: (portability) %zu in format string (no. 1) requires 'size_t *' but the argument type is 'SSIZE_T * {aka signed long long *}'.\n"
Line 4342
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4342 always 4342
  "void foo() {\n    unsigned __int32 u32;\n    String string;\n    string.Format(\"%I32d\", u32);\n    string.AppendFormat(\"%I32d\", u32);\n}" always "void foo() {\n    unsigned __int32 u32;\n    String string;\n    string.Format(\"%I32d\", u32);\n    string.AppendFormat(\"%I32d\", u32);\n}"
  false always 0
  true always 1
Line 4348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4348 always 4348
  "" always ""
Line 4350
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4350 always 4350
  "void foo() {\n    unsigned __int32 u32;\n    CString string;\n    string.Format(\"%I32d\", u32);\n    string.AppendFormat(\"%I32d\", u32);\n}" always "void foo() {\n    unsigned __int32 u32;\n    CString string;\n    string.Format(\"%I32d\", u32);\n    string.AppendFormat(\"%I32d\", u32);\n}"
  false always 0
  true always 1
Line 4356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4356 always 4356
  "" always ""
Line 4358
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4358 always 4358
  "void foo() {\n    unsigned __int32 u32;\n    CString string;\n    string.Format(\"%I32d\", u32);\n    string.AppendFormat(\"%I32d\", u32);\n    CString::Format(\"%I32d\", u32);\n}" always "void foo() {\n    unsigned __int32 u32;\n    CString string;\n    string.Format(\"%I32d\", u32);\n    string.AppendFormat(\"%I32d\", u32);\n    CString::Format(\"%I32d\", u32);\n}"
  false always 0
  true always 1
Line 4365
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4365 always 4365
  "[test.cpp:4]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:5]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:6]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n" always "[test.cpp:4]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:5]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n[test.cpp:6]: (portability) %I32d in format string (no. 1) requires '__int32' but the argument type is 'unsigned __int32 {aka unsigned int}'.\n"
Line 4371
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4371 always 4371
  "void foo() {\n    int i;\n    unsigned int u;\n    _tprintf_s(_T(\"%d %u\"), u, i, 0);\n}\n" always "void foo() {\n    int i;\n    unsigned int u;\n    _tprintf_s(_T(\"%d %u\"), u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4376 always 4376
  "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _tprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _tprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4380
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4380 always 4380
  "void foo() {\n    int i;\n    unsigned int u;\n    _tprintf_s(_T(\"%d %u\"), u, i, 0);\n}\n" always "void foo() {\n    int i;\n    unsigned int u;\n    _tprintf_s(_T(\"%d %u\"), u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4385 always 4385
  "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _tprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _tprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4389
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4389 always 4389
  "void foo() {\n    int i;\n    unsigned int u;\n    printf_s(\"%d %u\", u, i, 0);\n}\n" always "void foo() {\n    int i;\n    unsigned int u;\n    printf_s(\"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4394 always 4394
  "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) printf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) printf_s format string requires 2 parameters but 3 are given.\n"
Line 4398
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4398 always 4398
  "void foo() {\n    int i;\n    unsigned int u;\n    wprintf_s(L\"%d %u\", u, i, 0);\n}\n" always "void foo() {\n    int i;\n    unsigned int u;\n    wprintf_s(L\"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4403
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4403 always 4403
  "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) wprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) wprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4407
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4407 always 4407
  "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _stprintf_s(str, sizeof(str) / sizeof(TCHAR), _T(\"%d %u\"), u, i, 0);\n}\n" always "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _stprintf_s(str, sizeof(str) / sizeof(TCHAR), _T(\"%d %u\"), u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4413 always 4413
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _stprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _stprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4417
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4417 always 4417
  "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _stprintf_s(str, sizeof(str) / sizeof(TCHAR), _T(\"%d %u\"), u, i, 0);\n}\n" always "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _stprintf_s(str, sizeof(str) / sizeof(TCHAR), _T(\"%d %u\"), u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4423 always 4423
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _stprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _stprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4427
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4427 always 4427
  "void foo() {\n    char str[10];\n    int i;\n    unsigned int u;\n    sprintf_s(str, sizeof(str), \"%d %u\", u, i, 0);\n}\n" always "void foo() {\n    char str[10];\n    int i;\n    unsigned int u;\n    sprintf_s(str, sizeof(str), \"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4433
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4433 always 4433
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) sprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) sprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4437
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4437 always 4437
  "void foo() {\n    char str[10];\n    int i;\n    unsigned int u;\n    sprintf_s(str, \"%d %u\", u, i, 0);\n}\n" always "void foo() {\n    char str[10];\n    int i;\n    unsigned int u;\n    sprintf_s(str, \"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4443 always 4443
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) sprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) sprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4447
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4447 always 4447
  "void foo() {\n    wchar_t str[10];\n    int i;\n    unsigned int u;\n    swprintf_s(str, sizeof(str) / sizeof(wchar_t), L\"%d %u\", u, i, 0);\n}\n" always "void foo() {\n    wchar_t str[10];\n    int i;\n    unsigned int u;\n    swprintf_s(str, sizeof(str) / sizeof(wchar_t), L\"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4453 always 4453
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) swprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) swprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4457
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4457 always 4457
  "void foo() {\n    wchar_t str[10];\n    int i;\n    unsigned int u;\n    swprintf_s(str, L\"%d %u\", u, i, 0);\n}\n" always "void foo() {\n    wchar_t str[10];\n    int i;\n    unsigned int u;\n    swprintf_s(str, L\"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4463 always 4463
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) swprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) swprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4467
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4467 always 4467
  "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _sntprintf_s(str, sizeof(str) / sizeof(TCHAR), _TRUNCATE, _T(\"%d %u\"), u, i, 0);\n}\n" always "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _sntprintf_s(str, sizeof(str) / sizeof(TCHAR), _TRUNCATE, _T(\"%d %u\"), u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4473 always 4473
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _sntprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _sntprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4477
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4477 always 4477
  "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _sntprintf_s(str, sizeof(str) / sizeof(TCHAR), _TRUNCATE, _T(\"%d %u\"), u, i, 0);\n}\n" always "void foo() {\n    TCHAR str[10];\n    int i;\n    unsigned int u;\n    _sntprintf_s(str, sizeof(str) / sizeof(TCHAR), _TRUNCATE, _T(\"%d %u\"), u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4483 always 4483
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _sntprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _sntprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4487
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4487 always 4487
  "void foo() {\n    char str[10];\n    int i;\n    unsigned int u;\n    _snprintf_s(str, sizeof(str), _TRUNCATE, \"%d %u\", u, i, 0);\n}\n" always "void foo() {\n    char str[10];\n    int i;\n    unsigned int u;\n    _snprintf_s(str, sizeof(str), _TRUNCATE, \"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4493 always 4493
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _snprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _snprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4497
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4497 always 4497
  "void foo() {\n    wchar_t str[10];\n    int i;\n    unsigned int u;\n    _snwprintf_s(str, sizeof(str) / sizeof(wchar_t), _TRUNCATE, L\"%d %u\", u, i, 0);\n}\n" always "void foo() {\n    wchar_t str[10];\n    int i;\n    unsigned int u;\n    _snwprintf_s(str, sizeof(str) / sizeof(wchar_t), _TRUNCATE, L\"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4503 always 4503
  "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _snwprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:5]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:5]: (warning) _snwprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4507
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4507 always 4507
  "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    _ftprintf_s(fp, _T(\"%d %u\"), u, i, 0);\n}\n" always "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    _ftprintf_s(fp, _T(\"%d %u\"), u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4512 always 4512
  "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _ftprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _ftprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4516
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4516 always 4516
  "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    _ftprintf_s(fp, _T(\"%d %u\"), u, i, 0);\n}\n" always "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    _ftprintf_s(fp, _T(\"%d %u\"), u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4521
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4521 always 4521
  "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _ftprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) _ftprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4525
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4525 always 4525
  "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    fprintf_s(fp, \"%d %u\", u, i, 0);\n}\n" always "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    fprintf_s(fp, \"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4530
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4530 always 4530
  "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) fprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) fprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4534
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4534 always 4534
  "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    fwprintf_s(fp, L\"%d %u\", u, i, 0);\n}\n" always "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    fwprintf_s(fp, L\"%d %u\", u, i, 0);\n}\n"
  false always 0
  false always 0
Line 4539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4539 always 4539
  "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) fwprintf_s format string requires 2 parameters but 3 are given.\n" always "[test.cpp:4]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'.\n[test.cpp:4]: (warning) %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'.\n[test.cpp:4]: (warning) fwprintf_s format string requires 2 parameters but 3 are given.\n"
Line 4543
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4543 always 4543
  "void foo() {\n    char lineBuffer [600];\n    const char * const format = \"%15s%17s%17s%17s%17s\";\n    sprintf_s(lineBuffer, 600, format, \"type\", \"sum\", \"avg\", \"min\", \"max\");\n    sprintf_s(lineBuffer, format, \"type\", \"sum\", \"avg\", \"min\", \"max\");\n}\n" always "void foo() {\n    char lineBuffer [600];\n    const char * const format = \"%15s%17s%17s%17s%17s\";\n    sprintf_s(lineBuffer, 600, format, \"type\", \"sum\", \"avg\", \"min\", \"max\");\n    sprintf_s(lineBuffer, format, \"type\", \"sum\", \"avg\", \"min\", \"max\");\n}\n"
  false always 0
  false always 0
Line 4549
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4549 always 4549
  "" always ""
Line 4551
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4551 always 4551
  "void foo() {\n    const char * const format1 = \"%15s%17s%17s%17s%17s\";\n    const char format2[] = \"%15s%17s%17s%17s%17s\";\n    const char * const format3 = format1;\n    int i = 0;\n    sprintf_s(lineBuffer, format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf(lineBuffer, format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf(lineBuffer, format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf(lineBuffer, format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    printf(format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    printf(format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    printf(format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, 100, format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, 100, format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, 100, format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n}\n" always "void foo() {\n    const char * const format1 = \"%15s%17s%17s%17s%17s\";\n    const char format2[] = \"%15s%17s%17s%17s%17s\";\n    const char * const format3 = format1;\n    int i = 0;\n    sprintf_s(lineBuffer, format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf(lineBuffer, format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf(lineBuffer, format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf(lineBuffer, format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    printf(format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    printf(format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    printf(format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, 100, format1, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, 100, format2, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n    sprintf_s(lineBuffer, 100, format3, \"type\", \"sum\", \"avg\", \"min\", i, 0);\n}\n"
  true always 1
  false always 0
Line 4569
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4569 always 4569
  "[test.cpp:6]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:6]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:7]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:7]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:8]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:8]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:9]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:9]: (warning) sprintf format string requires 5 parameters but 6 are given.\n[test.cpp:10]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:10]: (warning) sprintf format string requires 5 parameters but 6 are given.\n[test.cpp:11]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:11]: (warning) sprintf format string requires 5 parameters but 6 are given.\n[test.cpp:12]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:12]: (warning) printf format string requires 5 parameters but 6 are given.\n[test.cpp:13]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:13]: (warning) printf format string requires 5 parameters but 6 are given.\n[test.cpp:14]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:14]: (warning) printf format string requires 5 parameters but 6 are given.\n[test.cpp:15]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:15]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:16]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:16]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:17]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:17]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n" always "[test.cpp:6]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:6]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:7]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:7]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:8]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:8]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:9]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:9]: (warning) sprintf format string requires 5 parameters but 6 are given.\n[test.cpp:10]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:10]: (warning) sprintf format string requires 5 parameters but 6 are given.\n[test.cpp:11]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:11]: (warning) sprintf format string requires 5 parameters but 6 are given.\n[test.cpp:12]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:12]: (warning) printf format string requires 5 parameters but 6 are given.\n[test.cpp:13]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:13]: (warning) printf format string requires 5 parameters but 6 are given.\n[test.cpp:14]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:14]: (warning) printf format string requires 5 parameters but 6 are given.\n[test.cpp:15]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:15]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:16]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:16]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n[test.cpp:17]: (warning) %s in format string (no. 5) requires 'char *' but the argument type is 'signed int'.\n[test.cpp:17]: (warning) sprintf_s format string requires 5 parameters but 6 are given.\n"
Line 4597
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4597 always 4597
  "void foo() {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _tscanf_s(_T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo() {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _tscanf_s(_T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4603 always 4603
  "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _tscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _tscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4607
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4607 always 4607
  "void foo() {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _tscanf_s(_T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo() {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _tscanf_s(_T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4613
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4613 always 4613
  "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _tscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _tscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4617
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4617 always 4617
  "void foo() {\n    int i;\n    unsigned int u;\n    char str[10];\n    scanf_s(\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo() {\n    int i;\n    unsigned int u;\n    char str[10];\n    scanf_s(\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4623 always 4623
  "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) scanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) scanf_s format string requires 6 parameters but 7 are given.\n"
Line 4627
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4627 always 4627
  "void foo() {\n    int i;\n    unsigned int u;\n    wchar_t str[10];\n    wscanf_s(L\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo() {\n    int i;\n    unsigned int u;\n    wchar_t str[10];\n    wscanf_s(L\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4633 always 4633
  "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) wscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) wscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4637
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4637 always 4637
  "void f() {\n  char str[8];\n  scanf_s(\"%8c\", str, sizeof(str));\n  scanf_s(\"%9c\", str, sizeof(str));\n}\n" always "void f() {\n  char str[8];\n  scanf_s(\"%8c\", str, sizeof(str));\n  scanf_s(\"%9c\", str, sizeof(str));\n}\n"
  false always 0
  false always 0
Line 4645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4645 always 4645
  "[test.cpp:4]: (error) Width 9 given in format string (no. 1) is larger than destination buffer 'str[8]', use %8c to prevent overflowing it.\n" always "[test.cpp:4]: (error) Width 9 given in format string (no. 1) is larger than destination buffer 'str[8]', use %8c to prevent overflowing it.\n"
Line 4647
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4647 always 4647
  "void foo() {\n    TCHAR txt[100];\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _stscanf_s(txt, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo() {\n    TCHAR txt[100];\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _stscanf_s(txt, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4654
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4654 always 4654
  "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) _stscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) _stscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4658
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4658 always 4658
  "void foo() {\n    TCHAR txt[100];\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _stscanf_s(txt, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo() {\n    TCHAR txt[100];\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _stscanf_s(txt, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4665
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4665 always 4665
  "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) _stscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) _stscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4669
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4669 always 4669
  "void foo() {\n    char txt[100];\n    int i;\n    unsigned int u;\n    char str[10];\n    sscanf_s(txt, \"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo() {\n    char txt[100];\n    int i;\n    unsigned int u;\n    char str[10];\n    sscanf_s(txt, \"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4676
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4676 always 4676
  "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) sscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) sscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4680
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4680 always 4680
  "void foo() {\n    wchar_t txt[100];\n    int i;\n    unsigned int u;\n    wchar_t str[10];\n    swscanf_s(txt, L\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo() {\n    wchar_t txt[100];\n    int i;\n    unsigned int u;\n    wchar_t str[10];\n    swscanf_s(txt, L\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4687
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4687 always 4687
  "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) swscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:6]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:6]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:6]: (warning) swscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4691
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4691 always 4691
  "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _ftscanf_s(fp, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _ftscanf_s(fp, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4697 always 4697
  "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _ftscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _ftscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4701
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4701 always 4701
  "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _ftscanf_s(fp, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    TCHAR str[10];\n    _ftscanf_s(fp, _T(\"%s %d %u %[a-z]\"), str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4707
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4707 always 4707
  "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _ftscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) _ftscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4711
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4711 always 4711
  "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    char str[10];\n    fscanf_s(fp, \"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    char str[10];\n    fscanf_s(fp, \"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4717
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4717 always 4717
  "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) fscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) fscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4721
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4721 always 4721
  "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    wchar_t str[10];\n    fwscanf_s(fp, L\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n" always "void foo(FILE * fp) {\n    int i;\n    unsigned int u;\n    wchar_t str[10];\n    fwscanf_s(fp, L\"%s %d %u %[a-z]\", str, 10, &u, &i, str, 10, 0)\n}\n"
  false always 0
  false always 0
Line 4727
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4727 always 4727
  "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) fwscanf_s format string requires 6 parameters but 7 are given.\n" always "[test.cpp:5]: (warning) %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'.\n[test.cpp:5]: (warning) %u in format string (no. 3) requires 'unsigned int *' but the argument type is 'signed int *'.\n[test.cpp:5]: (warning) fwscanf_s format string requires 6 parameters but 7 are given.\n"
Line 4731
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4731 always 4731
  "void foo() {\n    WCHAR msStr1[5] = {0};\n    wscanf_s(L\"%4[^-]\", msStr1, _countof(msStr1));\n}\n" always "void foo() {\n    WCHAR msStr1[5] = {0};\n    wscanf_s(L\"%4[^-]\", msStr1, _countof(msStr1));\n}\n"
  false always 0
  false always 0
Line 4735
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4735 always 4735
  "" always ""
Line 4739
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4739 always 4739
  "void foo(float f) {\n    QString string;\n    string.sprintf(\"%d\", f);\n}" always "void foo(float f) {\n    QString string;\n    string.sprintf(\"%d\", f);\n}"
  false always 0
  false always 0
Line 4743
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4743 always 4743
  "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'float'.\n" always "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'float'.\n"
Line 4745
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4745 always 4745
  "void foo(float f) {\n    QString string;\n    string = QString::asprintf(\"%d\", f);\n}" always "void foo(float f) {\n    QString string;\n    string = QString::asprintf(\"%d\", f);\n}"
  false always 0
  false always 0
Line 4749
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4749 always 4749
  "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'float'.\n" always "[test.cpp:3]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'float'.\n"
Line 4753
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4753 always 4753
  "void test(const std::string &val) {\n    printf(\"%s\", val.empty() ? \"I like to eat bananas\" : val.c_str());\n}" always "void test(const std::string &val) {\n    printf(\"%s\", val.empty() ? \"I like to eat bananas\" : val.c_str());\n}"
Line 4756
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4756 always 4756
  "" always ""
Line 4760
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4760 always 4760
  "void test() {\n    unsigned const x = 5;\n    printf(\"%u\", x);\n}" always "void test() {\n    unsigned const x = 5;\n    printf(\"%u\", x);\n}"
Line 4764
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4764 always 4764
  "" always ""
Line 4768
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4768 always 4768
  "void test() {\n    printf(\"%c\", \"hello\"[0]);\n}" always "void test() {\n    printf(\"%c\", \"hello\"[0]);\n}"
Line 4771
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4771 always 4771
  "" always ""
Line 4773
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4773 always 4773
  "void test() {\n    printf(\"%lld\", (long long)1);\n}" always "void test() {\n    printf(\"%lld\", (long long)1);\n}"
Line 4776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4776 always 4776
  "" always ""
Line 4778
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4778 always 4778
  "void test() {\n    printf(\"%i\", (short *)x);\n}" always "void test() {\n    printf(\"%i\", (short *)x);\n}"
Line 4781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4781 always 4781
  "[test.cpp:2]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'signed short *'.\n" always "[test.cpp:2]: (warning) %i in format string (no. 1) requires 'int' but the argument type is 'signed short *'.\n"
Line 4783
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4783 always 4783
  "int (*fp)();\nvoid test() {\n    printf(\"%i\", fp());\n}" always "int (*fp)();\nvoid test() {\n    printf(\"%i\", fp());\n}"
Line 4787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4787 always 4787
  "" always ""
Line 4791
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4791 always 4791
  "void foo() {\n    printf(\"%u %lu %llu\", 0U, 0UL, 0ULL);\n    printf(\"%u %lu %llu\", 0u, 0ul, 0ull);\n}" always "void foo() {\n    printf(\"%u %lu %llu\", 0U, 0UL, 0ULL);\n    printf(\"%u %lu %llu\", 0u, 0ul, 0ull);\n}"
Line 4795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4795 always 4795
  "" always ""
Line 4799
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4799 always 4799
  "void f() {\n   const char *s = \"0\";\n   printf(\"%ld%lld\", atol(s), atoll(s));\n}" always "void f() {\n   const char *s = \"0\";\n   printf(\"%ld%lld\", atol(s), atoll(s));\n}"
Line 4803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4803 always 4803
  "" always ""
Line 4806
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4806 always 4806
  "void f(int i) {\n   printf(\"%f\", imaxabs(i));\n}\n" always "void f(int i) {\n   printf(\"%f\", imaxabs(i));\n}\n"
  false always 0
  true always 1
Line 4809
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4809 always 4809
  "[test.cpp:2]: (portability) %f in format string (no. 1) requires 'double' but the argument type is 'intmax_t {aka signed long}'.\n" always "[test.cpp:2]: (portability) %f in format string (no. 1) requires 'double' but the argument type is 'intmax_t {aka signed long}'.\n"
Line 4813
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4813 always 4813
  "using INT = int;\n\nusing PINT = INT *;\nusing PCINT = const PINT;\nINT i;\nPINT pi;\nPCINT pci;void foo() {\n    printf(\"%d %p %p\", i, pi, pci);\n};" always "using INT = int;\n\nusing PINT = INT *;\nusing PCINT = const PINT;\nINT i;\nPINT pi;\nPCINT pci;void foo() {\n    printf(\"%d %p %p\", i, pi, pci);\n};"
Line 4822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4822 always 4822
  "" always ""
Line 4824
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4824 always 4824
  "using INT = int;\n\nusing PINT = INT *;\nusing PCINT = const PINT;\nINT i;\nPINT pi;\nPCINT pci;void foo() {\n    printf(\"%f %f %f\", i, pi, pci);\n};" always "using INT = int;\n\nusing PINT = INT *;\nusing PCINT = const PINT;\nINT i;\nPINT pi;\nPCINT pci;void foo() {\n    printf(\"%f %f %f\", i, pi, pci);\n};"
Line 4833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4833 always 4833
  "[test.cpp:8]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n[test.cpp:8]: (warning) %f in format string (no. 2) requires 'double' but the argument type is 'signed int *'.\n[test.cpp:8]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'const signed int *'.\n" always "[test.cpp:8]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n[test.cpp:8]: (warning) %f in format string (no. 2) requires 'double' but the argument type is 'signed int *'.\n[test.cpp:8]: (warning) %f in format string (no. 3) requires 'double' but the argument type is 'const signed int *'.\n"
Line 4839
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4839 always 4839
  "void f() {\n    auto s = sizeof(int);\n    printf(\"%zu\", s);\n    printf(\"%f\", s);\n}\n" always "void f() {\n    auto s = sizeof(int);\n    printf(\"%zu\", s);\n    printf(\"%f\", s);\n}\n"
  false always 0
  true always 1
Line 4844
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4844 always 4844
  "[test.cpp:4]: (portability) %f in format string (no. 1) requires 'double' but the argument type is 'size_t {aka unsigned long}'.\n" always "[test.cpp:4]: (portability) %f in format string (no. 1) requires 'double' but the argument type is 'size_t {aka unsigned long}'.\n"
Line 4848
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4848 always 4848
  "void f(int a) {\n    printf(\"%f\", (a >> 24) & 0xff);\n}" always "void f(int a) {\n    printf(\"%f\", (a >> 24) & 0xff);\n}"
Line 4851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4851 always 4851
  "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n"
Line 4853
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4853 always 4853
  "void f(int a) {\n    printf(\"%f\", 0xff & (a >> 24));\n}" always "void f(int a) {\n    printf(\"%f\", 0xff & (a >> 24));\n}"
Line 4856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4856 always 4856
  "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n"
Line 4858
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4858 always 4858
  "void f(int a) {\n    printf(\"%f\", ((a >> 24) + 1) & 0xff);\n}" always "void f(int a) {\n    printf(\"%f\", ((a >> 24) + 1) & 0xff);\n}"
Line 4861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4861 always 4861
  "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n" always "[test.cpp:2]: (warning) %f in format string (no. 1) requires 'double' but the argument type is 'signed int'.\n"
Line 4865
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4865 always 4865
  "void foo(const std::vector<int>& IO, const int* pio) {\nconst auto Idx = std::distance(&IO.front(), pio);\nprintf(\"Idx = %td\", Idx);\n}" always "void foo(const std::vector<int>& IO, const int* pio) {\nconst auto Idx = std::distance(&IO.front(), pio);\nprintf(\"Idx = %td\", Idx);\n}"
  false always 0
  true always 1
Line 4869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testio.cpp" always "cppcheck-2.8/test/testio.cpp"
  4869 always 4869
  "" always ""
