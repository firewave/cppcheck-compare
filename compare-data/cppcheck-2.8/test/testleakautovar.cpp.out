

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741996 expected@var22 !=@expr1073741997 actual@var23 ) {
62: std ::@expr1073741998 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741999 expected@var22 ;
64: std ::@expr1073742000 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742001 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742002 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742003 str (@expr1073742004 ) , actualStr@var26 .@expr1073742005 str (@expr1073742006 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742007 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742008 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742009 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742010 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testleakautovar.cpp

1:
|
36:
37: class TestLeakAutoVarStrcpy ;
38: class TestLeakAutoVarWindows ;
39:
40: class TestLeakAutoVar : public TestFixture {
41: public:
42: TestLeakAutoVar ( ) : TestFixture ( "TestLeakAutoVar" ) { }
43:
44: private:
45: Settings settings@var102 ;
46:
47: void run ( ) override {
48: int id@var103 ; id@var103 =@expr1073742012 0 ;
49: while (@expr1073742013 !@expr1073742014 Library ::@expr1073742015 ismemory (@expr1073742016 ++@expr1073742017 id@var103 ) ) { ; }
50: settings@var102 .@expr194 library@var104 .@expr195 setalloc (@expr1073742020 "malloc" , id@var103 , -1 ) ;
51: settings@var102 .@expr194 library@var104 .@expr198 setrealloc (@expr1073742023 "realloc" , id@var103 , -1 ) ;
52: settings@var102 .@expr194 library@var104 .@expr201 setdealloc (@expr1073742026 "free" , id@var103 , 1 ) ;
53: while (@expr1073742027 !@expr1073742028 Library ::@expr205 isresource (@expr1073742030 ++@expr1073742031 id@var103 ) ) { ; }
54: settings@var102 .@expr194 library@var104 .@expr195 setalloc (@expr1073742034 "socket" , id@var103 , -1 ) ;
55: settings@var102 .@expr194 library@var104 .@expr201 setdealloc (@expr1073742037 "close" , id@var103 , 1 ) ;
56: while (@expr1073742038 !@expr1073742039 Library ::@expr205 isresource (@expr1073742041 ++@expr1073742042 id@var103 ) ) { ; }
57: settings@var102 .@expr194 library@var104 .@expr195 setalloc (@expr1073742045 "fopen" , id@var103 , -1 ) ;
58: settings@var102 .@expr194 library@var104 .@expr198 setrealloc (@expr1073742048 "freopen" , id@var103 , -1 , 3 ) ;
59: settings@var102 .@expr194 library@var104 .@expr201 setdealloc (@expr1073742051 "fclose" , id@var103 , 1 ) ;
60: settings@var102 .@expr194 library@var104 .@expr229 smartPointers@var105 [@expr1073742054 "std::shared_ptr" ] ;
61: settings@var102 .@expr194 library@var104 .@expr229 smartPointers@var105 [@expr233 "std::unique_ptr" ] ;
62: settings@var102 .@expr194 library@var104 .@expr229 smartPointers@var105 [@expr233 "std::unique_ptr" ] .@expr1073742061 unique@expr1073742011 =@expr1073742062 true ;
63:
64: const char xmldata@var106 [@expr1073742063 81 ] =@expr1073742064 "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"uint8_t\" sign=\"u\" size=\"1\"/>\n</def>"
65:
66:
67: ;
68: tinyxml2 ::@expr1073742065 XMLDocument doc@var107 ;
69: doc@var107 .@expr1073742066 Parse (@expr1073742067 xmldata@var106 , sizeof (@expr1073742068 xmldata@var106 ) ) ;
70: settings@var102 .@expr194 library@var104 .@expr1073742070 load (@expr1073742071 doc@var107 ) ;
71:
72:
73: $do ${ $if $(@expr1073742072 $prepareTest $(@expr1073742073 "assign1" $) $) ${ $setVerbose $(@expr1073742074 $false $) $; assign1 $(@expr1073742075 $) $; $} $} $while $(@expr1073742076 $false $) ;
74: $do ${ $if $(@expr1073742077 $prepareTest $(@expr1073742078 "assign2" $) $) ${ $setVerbose $(@expr1073742079 $false $) $; assign2 $(@expr1073742080 $) $; $} $} $while $(@expr1073742081 $false $) ;
75: $do ${ $if $(@expr1073742082 $prepareTest $(@expr1073742083 "assign3" $) $) ${ $setVerbose $(@expr1073742084 $false $) $; assign3 $(@expr1073742085 $) $; $} $} $while $(@expr1073742086 $false $) ;
76: $do ${ $if $(@expr1073742087 $prepareTest $(@expr1073742088 "assign4" $) $) ${ $setVerbose $(@expr1073742089 $false $) $; assign4 $(@expr1073742090 $) $; $} $} $while $(@expr1073742091 $false $) ;
77: $do ${ $if $(@expr1073742092 $prepareTest $(@expr1073742093 "assign5" $) $) ${ $setVerbose $(@expr1073742094 $false $) $; assign5 $(@expr1073742095 $) $; $} $} $while $(@expr1073742096 $false $) ;
78: $do ${ $if $(@expr1073742097 $prepareTest $(@expr1073742098 "assign6" $) $) ${ $setVerbose $(@expr1073742099 $false $) $; assign6 $(@expr1073742100 $) $; $} $} $while $(@expr1073742101 $false $) ;
79: $do ${ $if $(@expr1073742102 $prepareTest $(@expr1073742103 "assign7" $) $) ${ $setVerbose $(@expr1073742104 $false $) $; assign7 $(@expr1073742105 $) $; $} $} $while $(@expr1073742106 $false $) ;
80: $do ${ $if $(@expr1073742107 $prepareTest $(@expr1073742108 "assign8" $) $) ${ $setVerbose $(@expr1073742109 $false $) $; assign8 $(@expr1073742110 $) $; $} $} $while $(@expr1073742111 $false $) ;
81: $do ${ $if $(@expr1073742112 $prepareTest $(@expr1073742113 "assign9" $) $) ${ $setVerbose $(@expr1073742114 $false $) $; assign9 $(@expr1073742115 $) $; $} $} $while $(@expr1073742116 $false $) ;
82: $do ${ $if $(@expr1073742117 $prepareTest $(@expr1073742118 "assign10" $) $) ${ $setVerbose $(@expr1073742119 $false $) $; assign10 $(@expr1073742120 $) $; $} $} $while $(@expr1073742121 $false $) ;
83: $do ${ $if $(@expr1073742122 $prepareTest $(@expr1073742123 "assign11" $) $) ${ $setVerbose $(@expr1073742124 $false $) $; assign11 $(@expr1073742125 $) $; $} $} $while $(@expr1073742126 $false $) ;
84: $do ${ $if $(@expr1073742127 $prepareTest $(@expr1073742128 "assign12" $) $) ${ $setVerbose $(@expr1073742129 $false $) $; assign12 $(@expr1073742130 $) $; $} $} $while $(@expr1073742131 $false $) ;
85: $do ${ $if $(@expr1073742132 $prepareTest $(@expr1073742133 "assign13" $) $) ${ $setVerbose $(@expr1073742134 $false $) $; assign13 $(@expr1073742135 $) $; $} $} $while $(@expr1073742136 $false $) ;
86: $do ${ $if $(@expr1073742137 $prepareTest $(@expr1073742138 "assign14" $) $) ${ $setVerbose $(@expr1073742139 $false $) $; assign14 $(@expr1073742140 $) $; $} $} $while $(@expr1073742141 $false $) ;
87: $do ${ $if $(@expr1073742142 $prepareTest $(@expr1073742143 "assign15" $) $) ${ $setVerbose $(@expr1073742144 $false $) $; assign15 $(@expr1073742145 $) $; $} $} $while $(@expr1073742146 $false $) ;
88: $do ${ $if $(@expr1073742147 $prepareTest $(@expr1073742148 "assign16" $) $) ${ $setVerbose $(@expr1073742149 $false $) $; assign16 $(@expr1073742150 $) $; $} $} $while $(@expr1073742151 $false $) ;
89: $do ${ $if $(@expr1073742152 $prepareTest $(@expr1073742153 "assign17" $) $) ${ $setVerbose $(@expr1073742154 $false $) $; assign17 $(@expr1073742155 $) $; $} $} $while $(@expr1073742156 $false $) ;
90: $do ${ $if $(@expr1073742157 $prepareTest $(@expr1073742158 "assign18" $) $) ${ $setVerbose $(@expr1073742159 $false $) $; assign18 $(@expr1073742160 $) $; $} $} $while $(@expr1073742161 $false $) ;
91: $do ${ $if $(@expr1073742162 $prepareTest $(@expr1073742163 "assign19" $) $) ${ $setVerbose $(@expr1073742164 $false $) $; assign19 $(@expr1073742165 $) $; $} $} $while $(@expr1073742166 $false $) ;
92: $do ${ $if $(@expr1073742167 $prepareTest $(@expr1073742168 "assign20" $) $) ${ $setVerbose $(@expr1073742169 $false $) $; assign20 $(@expr1073742170 $) $; $} $} $while $(@expr1073742171 $false $) ;
93: $do ${ $if $(@expr1073742172 $prepareTest $(@expr1073742173 "assign21" $) $) ${ $setVerbose $(@expr1073742174 $false $) $; assign21 $(@expr1073742175 $) $; $} $} $while $(@expr1073742176 $false $) ;
94: $do ${ $if $(@expr1073742177 $prepareTest $(@expr1073742178 "assign22" $) $) ${ $setVerbose $(@expr1073742179 $false $) $; assign22 $(@expr1073742180 $) $; $} $} $while $(@expr1073742181 $false $) ;
95: $do ${ $if $(@expr1073742182 $prepareTest $(@expr1073742183 "assign23" $) $) ${ $setVerbose $(@expr1073742184 $false $) $; assign23 $(@expr1073742185 $) $; $} $} $while $(@expr1073742186 $false $) ;
96:
97: $do ${ $if $(@expr1073742187 $prepareTest $(@expr1073742188 "isAutoDealloc" $) $) ${ $setVerbose $(@expr1073742189 $false $) $; isAutoDealloc $(@expr1073742190 $) $; $} $} $while $(@expr1073742191 $false $) ;
98:
99: $do ${ $if $(@expr1073742192 $prepareTest $(@expr1073742193 "realloc1" $) $) ${ $setVerbose $(@expr1073742194 $false $) $; realloc1 $(@expr1073742195 $) $; $} $} $while $(@expr1073742196 $false $) ;
100: $do ${ $if $(@expr1073742197 $prepareTest $(@expr1073742198 "realloc2" $) $) ${ $setVerbose $(@expr1073742199 $false $) $; realloc2 $(@expr1073742200 $) $; $} $} $while $(@expr1073742201 $false $) ;
101: $do ${ $if $(@expr1073742202 $prepareTest $(@expr1073742203 "realloc3" $) $) ${ $setVerbose $(@expr1073742204 $false $) $; realloc3 $(@expr1073742205 $) $; $} $} $while $(@expr1073742206 $false $) ;
102: $do ${ $if $(@expr1073742207 $prepareTest $(@expr1073742208 "realloc4" $) $) ${ $setVerbose $(@expr1073742209 $false $) $; realloc4 $(@expr1073742210 $) $; $} $} $while $(@expr1073742211 $false $) ;
103: $do ${ $if $(@expr1073742212 $prepareTest $(@expr1073742213 "realloc5" $) $) ${ $setVerbose $(@expr1073742214 $false $) $; realloc5 $(@expr1073742215 $) $; $} $} $while $(@expr1073742216 $false $) ;
104: $do ${ $if $(@expr1073742217 $prepareTest $(@expr1073742218 "freopen1" $) $) ${ $setVerbose $(@expr1073742219 $false $) $; freopen1 $(@expr1073742220 $) $; $} $} $while $(@expr1073742221 $false $) ;
105: $do ${ $if $(@expr1073742222 $prepareTest $(@expr1073742223 "freopen2" $) $) ${ $setVerbose $(@expr1073742224 $false $) $; freopen2 $(@expr1073742225 $) $; $} $} $while $(@expr1073742226 $false $) ;
106:
107: $do ${ $if $(@expr1073742227 $prepareTest $(@expr1073742228 "deallocuse1" $) $) ${ $setVerbose $(@expr1073742229 $false $) $; deallocuse1 $(@expr1073742230 $) $; $} $} $while $(@expr1073742231 $false $) ;
108: $do ${ $if $(@expr1073742232 $prepareTest $(@expr1073742233 "deallocuse2" $) $) ${ $setVerbose $(@expr1073742234 $false $) $; deallocuse2 $(@expr1073742235 $) $; $} $} $while $(@expr1073742236 $false $) ;
109: $do ${ $if $(@expr1073742237 $prepareTest $(@expr1073742238 "deallocuse3" $) $) ${ $setVerbose $(@expr1073742239 $false $) $; deallocuse3 $(@expr1073742240 $) $; $} $} $while $(@expr1073742241 $false $) ;
110: $do ${ $if $(@expr1073742242 $prepareTest $(@expr1073742243 "deallocuse4" $) $) ${ $setVerbose $(@expr1073742244 $false $) $; deallocuse4 $(@expr1073742245 $) $; $} $} $while $(@expr1073742246 $false $) ;
111: $do ${ $if $(@expr1073742247 $prepareTest $(@expr1073742248 "deallocuse5" $) $) ${ $setVerbose $(@expr1073742249 $false $) $; deallocuse5 $(@expr1073742250 $) $; $} $} $while $(@expr1073742251 $false $) ;
112: $do ${ $if $(@expr1073742252 $prepareTest $(@expr1073742253 "deallocuse6" $) $) ${ $setVerbose $(@expr1073742254 $false $) $; deallocuse6 $(@expr1073742255 $) $; $} $} $while $(@expr1073742256 $false $) ;
113: $do ${ $if $(@expr1073742257 $prepareTest $(@expr1073742258 "deallocuse7" $) $) ${ $setVerbose $(@expr1073742259 $false $) $; deallocuse7 $(@expr1073742260 $) $; $} $} $while $(@expr1073742261 $false $) ;
114: $do ${ $if $(@expr1073742262 $prepareTest $(@expr1073742263 "deallocuse8" $) $) ${ $setVerbose $(@expr1073742264 $false $) $; deallocuse8 $(@expr1073742265 $) $; $} $} $while $(@expr1073742266 $false $) ;
115: $do ${ $if $(@expr1073742267 $prepareTest $(@expr1073742268 "deallocuse9" $) $) ${ $setVerbose $(@expr1073742269 $false $) $; deallocuse9 $(@expr1073742270 $) $; $} $} $while $(@expr1073742271 $false $) ;
116:
117: $do ${ $if $(@expr1073742272 $prepareTest $(@expr1073742273 "doublefree1" $) $) ${ $setVerbose $(@expr1073742274 $false $) $; doublefree1 $(@expr1073742275 $) $; $} $} $while $(@expr1073742276 $false $) ;
118: $do ${ $if $(@expr1073742277 $prepareTest $(@expr1073742278 "doublefree2" $) $) ${ $setVerbose $(@expr1073742279 $false $) $; doublefree2 $(@expr1073742280 $) $; $} $} $while $(@expr1073742281 $false $) ;
119: $do ${ $if $(@expr1073742282 $prepareTest $(@expr1073742283 "doublefree3" $) $) ${ $setVerbose $(@expr1073742284 $false $) $; doublefree3 $(@expr1073742285 $) $; $} $} $while $(@expr1073742286 $false $) ;
120: $do ${ $if $(@expr1073742287 $prepareTest $(@expr1073742288 "doublefree4" $) $) ${ $setVerbose $(@expr1073742289 $false $) $; doublefree4 $(@expr1073742290 $) $; $} $} $while $(@expr1073742291 $false $) ;
121: $do ${ $if $(@expr1073742292 $prepareTest $(@expr1073742293 "doublefree5" $) $) ${ $setVerbose $(@expr1073742294 $false $) $; doublefree5 $(@expr1073742295 $) $; $} $} $while $(@expr1073742296 $false $) ;
122: $do ${ $if $(@expr1073742297 $prepareTest $(@expr1073742298 "doublefree6" $) $) ${ $setVerbose $(@expr1073742299 $false $) $; doublefree6 $(@expr1073742300 $) $; $} $} $while $(@expr1073742301 $false $) ;
123: $do ${ $if $(@expr1073742302 $prepareTest $(@expr1073742303 "doublefree7" $) $) ${ $setVerbose $(@expr1073742304 $false $) $; doublefree7 $(@expr1073742305 $) $; $} $} $while $(@expr1073742306 $false $) ;
124: $do ${ $if $(@expr1073742307 $prepareTest $(@expr1073742308 "doublefree8" $) $) ${ $setVerbose $(@expr1073742309 $false $) $; doublefree8 $(@expr1073742310 $) $; $} $} $while $(@expr1073742311 $false $) ;
125: $do ${ $if $(@expr1073742312 $prepareTest $(@expr1073742313 "doublefree9" $) $) ${ $setVerbose $(@expr1073742314 $false $) $; doublefree9 $(@expr1073742315 $) $; $} $} $while $(@expr1073742316 $false $) ;
126: $do ${ $if $(@expr1073742317 $prepareTest $(@expr1073742318 "doublefree10" $) $) ${ $setVerbose $(@expr1073742319 $false $) $; doublefree10 $(@expr1073742320 $) $; $} $} $while $(@expr1073742321 $false $) ;
127: $do ${ $if $(@expr1073742322 $prepareTest $(@expr1073742323 "doublefree11" $) $) ${ $setVerbose $(@expr1073742324 $false $) $; doublefree11 $(@expr1073742325 $) $; $} $} $while $(@expr1073742326 $false $) ;
128: $do ${ $if $(@expr1073742327 $prepareTest $(@expr1073742328 "doublefree12" $) $) ${ $setVerbose $(@expr1073742329 $false $) $; doublefree12 $(@expr1073742330 $) $; $} $} $while $(@expr1073742331 $false $) ;
129:
130:
131: $do ${ $if $(@expr1073742332 $prepareTest $(@expr1073742333 "exit1" $) $) ${ $setVerbose $(@expr1073742334 $false $) $; exit1 $(@expr1073742335 $) $; $} $} $while $(@expr1073742336 $false $) ;
132: $do ${ $if $(@expr1073742337 $prepareTest $(@expr1073742338 "exit2" $) $) ${ $setVerbose $(@expr1073742339 $false $) $; exit2 $(@expr1073742340 $) $; $} $} $while $(@expr1073742341 $false $) ;
133: $do ${ $if $(@expr1073742342 $prepareTest $(@expr1073742343 "exit3" $) $) ${ $setVerbose $(@expr1073742344 $false $) $; exit3 $(@expr1073742345 $) $; $} $} $while $(@expr1073742346 $false $) ;
134:
135:
136: $do ${ $if $(@expr1073742347 $prepareTest $(@expr1073742348 "functioncall1" $) $) ${ $setVerbose $(@expr1073742349 $false $) $; functioncall1 $(@expr1073742350 $) $; $} $} $while $(@expr1073742351 $false $) ;
137:
138:
139: $do ${ $if $(@expr1073742352 $prepareTest $(@expr1073742353 "goto1" $) $) ${ $setVerbose $(@expr1073742354 $false $) $; goto1 $(@expr1073742355 $) $; $} $} $while $(@expr1073742356 $false $) ;
140: $do ${ $if $(@expr1073742357 $prepareTest $(@expr1073742358 "goto2" $) $) ${ $setVerbose $(@expr1073742359 $false $) $; goto2 $(@expr1073742360 $) $; $} $} $while $(@expr1073742361 $false $) ;
141:
142:
143: $do ${ $if $(@expr1073742362 $prepareTest $(@expr1073742363 "ifelse1" $) $) ${ $setVerbose $(@expr1073742364 $false $) $; ifelse1 $(@expr1073742365 $) $; $} $} $while $(@expr1073742366 $false $) ;
144: $do ${ $if $(@expr1073742367 $prepareTest $(@expr1073742368 "ifelse2" $) $) ${ $setVerbose $(@expr1073742369 $false $) $; ifelse2 $(@expr1073742370 $) $; $} $} $while $(@expr1073742371 $false $) ;
145: $do ${ $if $(@expr1073742372 $prepareTest $(@expr1073742373 "ifelse3" $) $) ${ $setVerbose $(@expr1073742374 $false $) $; ifelse3 $(@expr1073742375 $) $; $} $} $while $(@expr1073742376 $false $) ;
146: $do ${ $if $(@expr1073742377 $prepareTest $(@expr1073742378 "ifelse4" $) $) ${ $setVerbose $(@expr1073742379 $false $) $; ifelse4 $(@expr1073742380 $) $; $} $} $while $(@expr1073742381 $false $) ;
147: $do ${ $if $(@expr1073742382 $prepareTest $(@expr1073742383 "ifelse5" $) $) ${ $setVerbose $(@expr1073742384 $false $) $; ifelse5 $(@expr1073742385 $) $; $} $} $while $(@expr1073742386 $false $) ;
148: $do ${ $if $(@expr1073742387 $prepareTest $(@expr1073742388 "ifelse6" $) $) ${ $setVerbose $(@expr1073742389 $false $) $; ifelse6 $(@expr1073742390 $) $; $} $} $while $(@expr1073742391 $false $) ;
149: $do ${ $if $(@expr1073742392 $prepareTest $(@expr1073742393 "ifelse7" $) $) ${ $setVerbose $(@expr1073742394 $false $) $; ifelse7 $(@expr1073742395 $) $; $} $} $while $(@expr1073742396 $false $) ;
150: $do ${ $if $(@expr1073742397 $prepareTest $(@expr1073742398 "ifelse8" $) $) ${ $setVerbose $(@expr1073742399 $false $) $; ifelse8 $(@expr1073742400 $) $; $} $} $while $(@expr1073742401 $false $) ;
151: $do ${ $if $(@expr1073742402 $prepareTest $(@expr1073742403 "ifelse9" $) $) ${ $setVerbose $(@expr1073742404 $false $) $; ifelse9 $(@expr1073742405 $) $; $} $} $while $(@expr1073742406 $false $) ;
152: $do ${ $if $(@expr1073742407 $prepareTest $(@expr1073742408 "ifelse10" $) $) ${ $setVerbose $(@expr1073742409 $false $) $; ifelse10 $(@expr1073742410 $) $; $} $} $while $(@expr1073742411 $false $) ;
153: $do ${ $if $(@expr1073742412 $prepareTest $(@expr1073742413 "ifelse11" $) $) ${ $setVerbose $(@expr1073742414 $false $) $; ifelse11 $(@expr1073742415 $) $; $} $} $while $(@expr1073742416 $false $) ;
154: $do ${ $if $(@expr1073742417 $prepareTest $(@expr1073742418 "ifelse12" $) $) ${ $setVerbose $(@expr1073742419 $false $) $; ifelse12 $(@expr1073742420 $) $; $} $} $while $(@expr1073742421 $false $) ;
155: $do ${ $if $(@expr1073742422 $prepareTest $(@expr1073742423 "ifelse13" $) $) ${ $setVerbose $(@expr1073742424 $false $) $; ifelse13 $(@expr1073742425 $) $; $} $} $while $(@expr1073742426 $false $) ;
156: $do ${ $if $(@expr1073742427 $prepareTest $(@expr1073742428 "ifelse14" $) $) ${ $setVerbose $(@expr1073742429 $false $) $; ifelse14 $(@expr1073742430 $) $; $} $} $while $(@expr1073742431 $false $) ;
157: $do ${ $if $(@expr1073742432 $prepareTest $(@expr1073742433 "ifelse15" $) $) ${ $setVerbose $(@expr1073742434 $false $) $; ifelse15 $(@expr1073742435 $) $; $} $} $while $(@expr1073742436 $false $) ;
158: $do ${ $if $(@expr1073742437 $prepareTest $(@expr1073742438 "ifelse16" $) $) ${ $setVerbose $(@expr1073742439 $false $) $; ifelse16 $(@expr1073742440 $) $; $} $} $while $(@expr1073742441 $false $) ;
159: $do ${ $if $(@expr1073742442 $prepareTest $(@expr1073742443 "ifelse17" $) $) ${ $setVerbose $(@expr1073742444 $false $) $; ifelse17 $(@expr1073742445 $) $; $} $} $while $(@expr1073742446 $false $) ;
160: $do ${ $if $(@expr1073742447 $prepareTest $(@expr1073742448 "ifelse18" $) $) ${ $setVerbose $(@expr1073742449 $false $) $; ifelse18 $(@expr1073742450 $) $; $} $} $while $(@expr1073742451 $false $) ;
161: $do ${ $if $(@expr1073742452 $prepareTest $(@expr1073742453 "ifelse19" $) $) ${ $setVerbose $(@expr1073742454 $false $) $; ifelse19 $(@expr1073742455 $) $; $} $} $while $(@expr1073742456 $false $) ;
162: $do ${ $if $(@expr1073742457 $prepareTest $(@expr1073742458 "ifelse20" $) $) ${ $setVerbose $(@expr1073742459 $false $) $; ifelse20 $(@expr1073742460 $) $; $} $} $while $(@expr1073742461 $false $) ;
163: $do ${ $if $(@expr1073742462 $prepareTest $(@expr1073742463 "ifelse21" $) $) ${ $setVerbose $(@expr1073742464 $false $) $; ifelse21 $(@expr1073742465 $) $; $} $} $while $(@expr1073742466 $false $) ;
164: $do ${ $if $(@expr1073742467 $prepareTest $(@expr1073742468 "ifelse22" $) $) ${ $setVerbose $(@expr1073742469 $false $) $; ifelse22 $(@expr1073742470 $) $; $} $} $while $(@expr1073742471 $false $) ;
165: $do ${ $if $(@expr1073742472 $prepareTest $(@expr1073742473 "ifelse23" $) $) ${ $setVerbose $(@expr1073742474 $false $) $; ifelse23 $(@expr1073742475 $) $; $} $} $while $(@expr1073742476 $false $) ;
166: $do ${ $if $(@expr1073742477 $prepareTest $(@expr1073742478 "ifelse24" $) $) ${ $setVerbose $(@expr1073742479 $false $) $; ifelse24 $(@expr1073742480 $) $; $} $} $while $(@expr1073742481 $false $) ;
167:
168:
169: $do ${ $if $(@expr1073742482 $prepareTest $(@expr1073742483 "switch1" $) $) ${ $setVerbose $(@expr1073742484 $false $) $; switch1 $(@expr1073742485 $) $; $} $} $while $(@expr1073742486 $false $) ;
170:
171:
172: $do ${ $if $(@expr1073742487 $prepareTest $(@expr1073742488 "loop1" $) $) ${ $setVerbose $(@expr1073742489 $false $) $; loop1 $(@expr1073742490 $) $; $} $} $while $(@expr1073742491 $false $) ;
173:
174:
175: $do ${ $if $(@expr1073742492 $prepareTest $(@expr1073742493 "mismatchAllocDealloc" $) $) ${ $setVerbose $(@expr1073742494 $false $) $; mismatchAllocDealloc $(@expr1073742495 $) $; $} $} $while $(@expr1073742496 $false $) ;
176:
177: $do ${ $if $(@expr1073742497 $prepareTest $(@expr1073742498 "smartPointerDeleter" $) $) ${ $setVerbose $(@expr1073742499 $false $) $; smartPointerDeleter $(@expr1073742500 $) $; $} $} $while $(@expr1073742501 $false $) ;
178: $do ${ $if $(@expr1073742502 $prepareTest $(@expr1073742503 "smartPointerRelease" $) $) ${ $setVerbose $(@expr1073742504 $false $) $; smartPointerRelease $(@expr1073742505 $) $; $} $} $while $(@expr1073742506 $false $) ;
179:
180:
181: $do ${ $if $(@expr1073742507 $prepareTest $(@expr1073742508 "return1" $) $) ${ $setVerbose $(@expr1073742509 $false $) $; return1 $(@expr1073742510 $) $; $} $} $while $(@expr1073742511 $false $) ;
182: $do ${ $if $(@expr1073742512 $prepareTest $(@expr1073742513 "return2" $) $) ${ $setVerbose $(@expr1073742514 $false $) $; return2 $(@expr1073742515 $) $; $} $} $while $(@expr1073742516 $false $) ;
183: $do ${ $if $(@expr1073742517 $prepareTest $(@expr1073742518 "return3" $) $) ${ $setVerbose $(@expr1073742519 $false $) $; return3 $(@expr1073742520 $) $; $} $} $while $(@expr1073742521 $false $) ;
184: $do ${ $if $(@expr1073742522 $prepareTest $(@expr1073742523 "return4" $) $) ${ $setVerbose $(@expr1073742524 $false $) $; return4 $(@expr1073742525 $) $; $} $} $while $(@expr1073742526 $false $) ;
185: $do ${ $if $(@expr1073742527 $prepareTest $(@expr1073742528 "return5" $) $) ${ $setVerbose $(@expr1073742529 $false $) $; return5 $(@expr1073742530 $) $; $} $} $while $(@expr1073742531 $false $) ;
186: $do ${ $if $(@expr1073742532 $prepareTest $(@expr1073742533 "return6" $) $) ${ $setVerbose $(@expr1073742534 $false $) $; return6 $(@expr1073742535 $) $; $} $} $while $(@expr1073742536 $false $) ;
187: $do ${ $if $(@expr1073742537 $prepareTest $(@expr1073742538 "return7" $) $) ${ $setVerbose $(@expr1073742539 $false $) $; return7 $(@expr1073742540 $) $; $} $} $while $(@expr1073742541 $false $) ;
188: $do ${ $if $(@expr1073742542 $prepareTest $(@expr1073742543 "return8" $) $) ${ $setVerbose $(@expr1073742544 $false $) $; return8 $(@expr1073742545 $) $; $} $} $while $(@expr1073742546 $false $) ;
189: $do ${ $if $(@expr1073742547 $prepareTest $(@expr1073742548 "return9" $) $) ${ $setVerbose $(@expr1073742549 $false $) $; return9 $(@expr1073742550 $) $; $} $} $while $(@expr1073742551 $false $) ;
190:
191:
192: $do ${ $if $(@expr1073742552 $prepareTest $(@expr1073742553 "test1" $) $) ${ $setVerbose $(@expr1073742554 $false $) $; test1 $(@expr1073742555 $) $; $} $} $while $(@expr1073742556 $false $) ;
193: $do ${ $if $(@expr1073742557 $prepareTest $(@expr1073742558 "test2" $) $) ${ $setVerbose $(@expr1073742559 $false $) $; test2 $(@expr1073742560 $) $; $} $} $while $(@expr1073742561 $false $) ;
194: $do ${ $if $(@expr1073742562 $prepareTest $(@expr1073742563 "test3" $) $) ${ $setVerbose $(@expr1073742564 $false $) $; test3 $(@expr1073742565 $) $; $} $} $while $(@expr1073742566 $false $) ;
195: $do ${ $if $(@expr1073742567 $prepareTest $(@expr1073742568 "test4" $) $) ${ $setVerbose $(@expr1073742569 $false $) $; test4 $(@expr1073742570 $) $; $} $} $while $(@expr1073742571 $false $) ;
196: $do ${ $if $(@expr1073742572 $prepareTest $(@expr1073742573 "test5" $) $) ${ $setVerbose $(@expr1073742574 $false $) $; test5 $(@expr1073742575 $) $; $} $} $while $(@expr1073742576 $false $) ;
197:
198:
199: $do ${ $if $(@expr1073742577 $prepareTest $(@expr1073742578 "throw1" $) $) ${ $setVerbose $(@expr1073742579 $false $) $; throw1 $(@expr1073742580 $) $; $} $} $while $(@expr1073742581 $false $) ;
200: $do ${ $if $(@expr1073742582 $prepareTest $(@expr1073742583 "throw2" $) $) ${ $setVerbose $(@expr1073742584 $false $) $; throw2 $(@expr1073742585 $) $; $} $} $while $(@expr1073742586 $false $) ;
201:
202:
203: $do ${ $if $(@expr1073742587 $prepareTest $(@expr1073742588 "configuration1" $) $) ${ $setVerbose $(@expr1073742589 $false $) $; configuration1 $(@expr1073742590 $) $; $} $} $while $(@expr1073742591 $false $) ;
204: $do ${ $if $(@expr1073742592 $prepareTest $(@expr1073742593 "configuration2" $) $) ${ $setVerbose $(@expr1073742594 $false $) $; configuration2 $(@expr1073742595 $) $; $} $} $while $(@expr1073742596 $false $) ;
205: $do ${ $if $(@expr1073742597 $prepareTest $(@expr1073742598 "configuration3" $) $) ${ $setVerbose $(@expr1073742599 $false $) $; configuration3 $(@expr1073742600 $) $; $} $} $while $(@expr1073742601 $false $) ;
206: $do ${ $if $(@expr1073742602 $prepareTest $(@expr1073742603 "configuration4" $) $) ${ $setVerbose $(@expr1073742604 $false $) $; configuration4 $(@expr1073742605 $) $; $} $} $while $(@expr1073742606 $false $) ;
207:
208: $do ${ $if $(@expr1073742607 $prepareTest $(@expr1073742608 "ptrptr" $) $) ${ $setVerbose $(@expr1073742609 $false $) $; ptrptr $(@expr1073742610 $) $; $} $} $while $(@expr1073742611 $false $) ;
209:
210: $do ${ $if $(@expr1073742612 $prepareTest $(@expr1073742613 "nestedAllocation" $) $) ${ $setVerbose $(@expr1073742614 $false $) $; nestedAllocation $(@expr1073742615 $) $; $} $} $while $(@expr1073742616 $false $) ;
211: $do ${ $if $(@expr1073742617 $prepareTest $(@expr1073742618 "testKeywords" $) $) ${ $setVerbose $(@expr1073742619 $false $) $; testKeywords $(@expr1073742620 $) $; $} $} $while $(@expr1073742621 $false $) ;
212:
213: $do ${ $if $(@expr1073742622 $prepareTest $(@expr1073742623 "inlineFunction" $) $) ${ $setVerbose $(@expr1073742624 $false $) $; inlineFunction $(@expr1073742625 $) $; $} $} $while $(@expr1073742626 $false $) ;
214:
215: $do ${ $if $(@expr1073742627 $prepareTest $(@expr1073742628 "smartPtrInContainer" $) $) ${ $setVerbose $(@expr1073742629 $false $) $; smartPtrInContainer $(@expr1073742630 $) $; $} $} $while $(@expr1073742631 $false $) ;
216:
217: $do ${ $if $(@expr1073742632 $prepareTest $(@expr1073742633 "functionCallCastConfig" $) $) ${ $setVerbose $(@expr1073742634 $false $) $; functionCallCastConfig $(@expr1073742635 $) $; $} $} $while $(@expr1073742636 $false $) ;
218: $do ${ $if $(@expr1073742637 $prepareTest $(@expr1073742638 "functionCallLeakIgnoreConfig" $) $) ${ $setVerbose $(@expr1073742639 $false $) $; functionCallLeakIgnoreConfig $(@expr1073742640 $) $; $} $} $while $(@expr1073742641 $false $) ;
219: }
220:
221:
222: void check_ ( const char * file@var108 , int line@var109 , const char code@var110 [ ] , bool cpp@var111 = false ) {
223:
224: errout@var100 .@expr1073742643 str (@expr1073742644 "" ) ;
225:
226:
227: Tokenizer tokenizer@var112 (@expr1073742645 &@expr822 settings@var102 , this@expr823 ) ;
228: std ::@expr1073742648 istringstream istr@var113 (@expr1073742649 code@var110 ) ;
229: $assert_ $(@expr1073742650 file@var108 $, line@var109 $, $(@expr1073742651 tokenizer@var112 .@expr1073742652 tokenize (@expr1073742653 istr@var113 , cpp@var111 ?@expr1073742654 "test.cpp" :@expr1073742655 "test.c" ) $) $) ;
230:
231:
232: CheckLeakAutoVar c@var114 ;
233: settings@var102 .@expr1073742656 checkLibrary@var115 =@expr1073742657 true ;
234: settings@var102 .@expr1073742658 severity@var116 .@expr1073742659 enable (@expr1073742660 Severity ::@expr1073742661 information@expr1073742642 ) ;
235: c@var114 .@expr1073742662 runChecks (@expr1073742663 &@expr1073742664 tokenizer@var112 , &@expr822 settings@var102 , this@expr823 ) ;
236: }
237:
238: void check_ ( const char * file@var117 , int line@var118 , const char code@var119 [ ] , Settings & settings_@var120 ) {
239:
240: errout@var100 .@expr1073742667 str (@expr1073742668 "" ) ;
241:
242:
243: Tokenizer tokenizer@var121 (@expr1073742669 &@expr846 settings_@var120 , this@expr847 ) ;
244: std ::@expr1073742672 istringstream istr@var122 (@expr1073742673 code@var119 ) ;
245: $assert_ $(@expr1073742674 file@var117 $, line@var118 $, $(@expr1073742675 tokenizer@var121 .@expr1073742676 tokenize (@expr1073742677 istr@var122 , "test.cpp" ) $) $) ;
246:
247:
248: CheckLeakAutoVar c@var123 ;
249: settings_@var120 .@expr1073742678 checkLibrary@var124 =@expr1073742679 true ;
250: settings_@var120 .@expr1073742680 severity@var125 .@expr1073742681 enable (@expr1073742682 Severity ::@expr1073742683 information@expr1073742666 ) ;
251: c@var123 .@expr1073742684 runChecks (@expr1073742685 &@expr1073742686 tokenizer@var121 , &@expr846 settings_@var120 , this@expr847 ) ;
252: }
253:
254: void assign1 ( ) {
255: $check_ $(@expr1073742688 "cppcheck-2.8/test/testleakautovar.cpp" $, 255 $, "void f() {\n    char *p = malloc(10);\n    p = NULL;\n    free(p);\n}" $)
256:
257:
258:
259: ;
260: $if $(@expr1073742689 $!@expr1073742690 $assertEquals $(@expr1073742691 "cppcheck-2.8/test/testleakautovar.cpp" $, 260 $, "[test.c:3]: (error) Memory leak: p\n" $, errout@var100 .@expr1073742692 str (@expr1073742693 ) $) $) { $return ; }
261: }
262:
263: void assign2 ( ) {
264: $check_ $(@expr1073742694 "cppcheck-2.8/test/testleakautovar.cpp" $, 264 $, "void f() {\n    char *p = malloc(10);\n    char *q = p;\n    free(q);\n}" $)
265:
266:
267:
268: ;
269: $if $(@expr1073742695 $!@expr1073742696 $assertEquals $(@expr1073742697 "cppcheck-2.8/test/testleakautovar.cpp" $, 269 $, "" $, errout@var100 .@expr1073742698 str (@expr1073742699 ) $) $) { $return ; }
270: }
271:
272: void assign3 ( ) {
273: $check_ $(@expr1073742700 "cppcheck-2.8/test/testleakautovar.cpp" $, 273 $, "void f() {\n    char *p = malloc(10);\n    char *q = p + 1;\n    free(q - 1);\n}" $)
274:
275:
276:
277: ;
278: $if $(@expr1073742701 $!@expr1073742702 $assertEquals $(@expr1073742703 "cppcheck-2.8/test/testleakautovar.cpp" $, 278 $, "" $, errout@var100 .@expr1073742704 str (@expr1073742705 ) $) $) { $return ; }
279: }
280:
281: void assign4 ( ) {
282: $check_ $(@expr1073742706 "cppcheck-2.8/test/testleakautovar.cpp" $, 282 $, "void f() {\n    char *a = malloc(10);\n    a += 10;\n    free(a - 10);\n}" $)
283:
284:
285:
286: ;
287: $if $(@expr1073742707 $!@expr1073742708 $assertEquals $(@expr1073742709 "cppcheck-2.8/test/testleakautovar.cpp" $, 287 $, "" $, errout@var100 .@expr1073742710 str (@expr1073742711 ) $) $) { $return ; }
288: }
289:
290: void assign5 ( ) {
291: $check_ $(@expr1073742712 "cppcheck-2.8/test/testleakautovar.cpp" $, 291 $, "void foo()\n{\n    char *p = new char[100];\n    list += p;\n}" $)
292:
293:
294:
295: ;
296: $if $(@expr1073742713 $!@expr1073742714 $assertEquals $(@expr1073742715 "cppcheck-2.8/test/testleakautovar.cpp" $, 296 $, "" $, errout@var100 .@expr1073742716 str (@expr1073742717 ) $) $) { $return ; }
297: }
298:
299: void assign6 ( ) {
300: $check_ $(@expr1073742718 "cppcheck-2.8/test/testleakautovar.cpp" $, 300 $, "void foo() {\n    char *p = malloc(10);\n    p = strcpy(p,q);\n    free(p);\n}" $)
301:
302:
303:
304: ;
305: $if $(@expr1073742719 $!@expr1073742720 $assertEquals $(@expr1073742721 "cppcheck-2.8/test/testleakautovar.cpp" $, 305 $, "" $, errout@var100 .@expr1073742722 str (@expr1073742723 ) $) $) { $return ; }
306: }
307:
308: void assign7 ( ) {
309: $check_ $(@expr1073742724 "cppcheck-2.8/test/testleakautovar.cpp" $, 309 $, "void foo(struct str *d) {\n    struct str *p = malloc(10);\n    d->p = p;\n}" $)
310:
311:
312: ;
313: $if $(@expr1073742725 $!@expr1073742726 $assertEquals $(@expr1073742727 "cppcheck-2.8/test/testleakautovar.cpp" $, 313 $, "" $, errout@var100 .@expr1073742728 str (@expr1073742729 ) $) $) { $return ; }
314: }
315:
316: void assign8 ( ) {
317: $check_ $(@expr1073742730 "cppcheck-2.8/test/testleakautovar.cpp" $, 317 $, "void foo(struct str *d) {\n    struct str *p = malloc(10);\n    d->p = &p->x;\n}" $)
318:
319:
320: ;
321: $if $(@expr1073742731 $!@expr1073742732 $assertEquals $(@expr1073742733 "cppcheck-2.8/test/testleakautovar.cpp" $, 321 $, "" $, errout@var100 .@expr1073742734 str (@expr1073742735 ) $) $) { $return ; }
322: }
323:
324: void assign9 ( ) {
325: $check_ $(@expr1073742736 "cppcheck-2.8/test/testleakautovar.cpp" $, 325 $, "void foo() {\n    char *p = x();\n    free(p);\n    p = NULL;\n}" $)
326:
327:
328:
329: ;
330: $if $(@expr1073742737 $!@expr1073742738 $assertEquals $(@expr1073742739 "cppcheck-2.8/test/testleakautovar.cpp" $, 330 $, "" $, errout@var100 .@expr1073742740 str (@expr1073742741 ) $) $) { $return ; }
331: }
332:
333: void assign10 ( ) {
334: $check_ $(@expr1073742742 "cppcheck-2.8/test/testleakautovar.cpp" $, 334 $, "void foo() {\n    char *p;\n    if (x) { p = malloc(10); }\n    if (!x) { p = NULL; }\n    free(p);\n}" $)
335:
|
338:
339: ;
340: $if $(@expr1073742743 $!@expr1073742744 $assertEquals $(@expr1073742745 "cppcheck-2.8/test/testleakautovar.cpp" $, 340 $, "" $, errout@var100 .@expr1073742746 str (@expr1073742747 ) $) $) { $return ; }
341: }
342:
343: void assign11 ( ) {
344: $check_ $(@expr1073742748 "cppcheck-2.8/test/testleakautovar.cpp" $, 344 $, "void f() {\n    char *p = malloc(10);\n    x = a(b(p));\n}" $)
345:
346:
347: ;
348: $if $(@expr1073742749 $!@expr1073742750 $assertEquals $(@expr1073742751 "cppcheck-2.8/test/testleakautovar.cpp" $, 348 $, "[test.c:4]: (information) --check-library: Function b() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr1073742752 str (@expr1073742753 ) $) $) { $return ; }
349: }
350:
351: void assign12 ( ) {
352: $check_ $(@expr1073742754 "cppcheck-2.8/test/testleakautovar.cpp" $, 352 $, "void f() {\n    char *p = malloc(10);\n    free(p);\n    bar(&p);\n    free(p);\n}" $)
353:
|
356:
357: ;
358: $if $(@expr1073742755 $!@expr1073742756 $assertEquals $(@expr1073742757 "cppcheck-2.8/test/testleakautovar.cpp" $, 358 $, "" $, errout@var100 .@expr1073742758 str (@expr1073742759 ) $) $) { $return ; }
359: }
360:
361: void assign13 ( ) {
362: $check_ $(@expr1073742760 "cppcheck-2.8/test/testleakautovar.cpp" $, 362 $, "void f() {\n    char *p;\n    char * &ref = p;\n    p = malloc(10);\n    free(ref);\n}" $)
363:
|
366:
367: ;
368: $todoAssertEquals $(@expr1073742761 "cppcheck-2.8/test/testleakautovar.cpp" $, 368 $, "" $, "[test.c:6]: (error) Memory leak: p\n" $, errout@var100 .@expr1073742762 str (@expr1073742763 ) $) ;
369: }
370:
371: void assign14 ( ) {
372: $check_ $(@expr1073742764 "cppcheck-2.8/test/testleakautovar.cpp" $, 372 $, "void f(int x) {\n    char *p;\n    if (x && (p = malloc(10))) { }}" $)
373:
374:
375: ;
376: $if $(@expr1073742765 $!@expr1073742766 $assertEquals $(@expr1073742767 "cppcheck-2.8/test/testleakautovar.cpp" $, 376 $, "[test.c:3]: (error) Memory leak: p\n" $, errout@var100 .@expr944 str (@expr945 ) $) $) { $return ; }
377:
378: $check_ $(@expr1073742770 "cppcheck-2.8/test/testleakautovar.cpp" $, 378 $, "void f(int x) {\n    char *p;\n    if (x && (p = new char[10])) { }}" , true $)
379:
380:
381: ;
382: $if $(@expr1073742771 $!@expr1073742772 $assertEquals $(@expr1073742773 "cppcheck-2.8/test/testleakautovar.cpp" $, 382 $, "[test.cpp:3]: (error) Memory leak: p\n" $, errout@var100 .@expr944 str (@expr945 ) $) $) { $return ; }
383: }
384:
385: void assign15 ( ) {
386:
387: $check_ $(@expr1073742776 "cppcheck-2.8/test/testleakautovar.cpp" $, 387 $, "void f() {\n   baz *p;\n   p = malloc(sizeof *p);\n   free(p);\n   p = malloc(sizeof *p);\n   free(p);\n}" $)
388:
|
392:
393: ;
394: $if $(@expr1073742777 $!@expr1073742778 $assertEquals $(@expr1073742779 "cppcheck-2.8/test/testleakautovar.cpp" $, 394 $, "" $, errout@var100 .@expr1073742780 str (@expr1073742781 ) $) $) { $return ; }
395: }
396:
397: void assign16 ( ) {
398: $check_ $(@expr1073742782 "cppcheck-2.8/test/testleakautovar.cpp" $, 398 $, "void f() {\n   char *p = malloc(10);\n   free(p);\n   if (p=dostuff()) *p = 0;\n}" $)
399:
400:
401:
402: ;
403: $if $(@expr1073742783 $!@expr1073742784 $assertEquals $(@expr1073742785 "cppcheck-2.8/test/testleakautovar.cpp" $, 403 $, "" $, errout@var100 .@expr1073742786 str (@expr1073742787 ) $) $) { $return ; }
404: }
405:
406: void assign17 ( ) {
407: $check_ $(@expr1073742788 "cppcheck-2.8/test/testleakautovar.cpp" $, 407 $, "void f() {\n    char *p = (char*)malloc(10);\n}" $)
408:
409: ;
410: $if $(@expr1073742789 $!@expr1073742790 $assertEquals $(@expr1073742791 "cppcheck-2.8/test/testleakautovar.cpp" $, 410 $, "[test.c:3]: (error) Memory leak: p\n" $, errout@var100 .@expr968 str (@expr969 ) $) $) { $return ; }
411:
412: $check_ $(@expr1073742794 "cppcheck-2.8/test/testleakautovar.cpp" $, 412 $, "void f() {\n    char *p = (char*)(int*)malloc(10);\n}" $)
413:
414: ;
415: $if $(@expr1073742795 $!@expr1073742796 $assertEquals $(@expr1073742797 "cppcheck-2.8/test/testleakautovar.cpp" $, 415 $, "[test.c:3]: (error) Memory leak: p\n" $, errout@var100 .@expr968 str (@expr969 ) $) $) { $return ; }
416: }
417:
418: void assign18 ( ) {
419: $check_ $(@expr1073742800 "cppcheck-2.8/test/testleakautovar.cpp" $, 419 $, "void f(int x) {\n    char *p;\n    if (x && (p = (char*)malloc(10))) { }}" $)
420:
421:
422: ;
423: $if $(@expr1073742801 $!@expr1073742802 $assertEquals $(@expr1073742803 "cppcheck-2.8/test/testleakautovar.cpp" $, 423 $, "[test.c:3]: (error) Memory leak: p\n" $, errout@var100 .@expr980 str (@expr981 ) $) $) { $return ; }
424:
425: $check_ $(@expr1073742806 "cppcheck-2.8/test/testleakautovar.cpp" $, 425 $, "void f(int x) {\n    char *p;\n    if (x && (p = (char*)(int*)malloc(10))) { }}" $)
426:
427:
428: ;
429: $if $(@expr1073742807 $!@expr1073742808 $assertEquals $(@expr1073742809 "cppcheck-2.8/test/testleakautovar.cpp" $, 429 $, "[test.c:3]: (error) Memory leak: p\n" $, errout@var100 .@expr980 str (@expr981 ) $) $) { $return ; }
430: }
431:
432: void assign19 ( ) {
433: $check_ $(@expr1073742812 "cppcheck-2.8/test/testleakautovar.cpp" $, 433 $, "void f() {\n    char *p = malloc(10);\n    free((void*)p);\n}" $)
434:
435:
436: ;
437: $if $(@expr1073742813 $!@expr1073742814 $assertEquals $(@expr1073742815 "cppcheck-2.8/test/testleakautovar.cpp" $, 437 $, "" $, errout@var100 .@expr1073742816 str (@expr1073742817 ) $) $) { $return ; }
438: }
439:
440: void assign20 ( ) {
441: $check_ $(@expr1073742818 "cppcheck-2.8/test/testleakautovar.cpp" $, 441 $, "void f() {\n    char *p = static_cast<int>(malloc(10));\n}" , true $)
442:
443: ;
444: $if $(@expr1073742819 $!@expr1073742820 $assertEquals $(@expr1073742821 "cppcheck-2.8/test/testleakautovar.cpp" $, 444 $, "[test.cpp:3]: (error) Memory leak: p\n" $, errout@var100 .@expr1073742822 str (@expr1073742823 ) $) $) { $return ; }
445: }
446:
447: void assign21 ( ) {
448: $check_ $(@expr1073742824 "cppcheck-2.8/test/testleakautovar.cpp" $, 448 $, "void f(int **x) {\n    void *p = malloc(10);\n    *x = (int*)p;\n}" , true $)
449:
450:
451: ;
452: $if $(@expr1073742825 $!@expr1073742826 $assertEquals $(@expr1073742827 "cppcheck-2.8/test/testleakautovar.cpp" $, 452 $, "" $, errout@var100 .@expr1073742828 str (@expr1073742829 ) $) $) { $return ; }
453: }
454:
455: void assign22 ( ) {
456: $check_ $(@expr1073742830 "cppcheck-2.8/test/testleakautovar.cpp" $, 456 $, "void f(char tempFileName[256]) {\n    const int fd = socket(AF_INET, SOCK_PACKET, 0 );\n}" , true $)
457:
458: ;
459: $if $(@expr1073742831 $!@expr1073742832 $assertEquals $(@expr1073742833 "cppcheck-2.8/test/testleakautovar.cpp" $, 459 $, "[test.cpp:3]: (error) Resource leak: fd\n" $, errout@var100 .@expr1010 str (@expr1011 ) $) $) { $return ; }
460:
461: $check_ $(@expr1073742836 "cppcheck-2.8/test/testleakautovar.cpp" $, 461 $, "void f() {\n    const void * const p = malloc(10);\n}" , true $)
462:
463: ;
464: $if $(@expr1073742837 $!@expr1073742838 $assertEquals $(@expr1073742839 "cppcheck-2.8/test/testleakautovar.cpp" $, 464 $, "[test.cpp:3]: (error) Memory leak: p\n" $, errout@var100 .@expr1010 str (@expr1011 ) $) $) { $return ; }
465: }
466:
467: void assign23 ( ) {
468: Settings s@var126 ; s@var126 =@expr1073742842 settings@var102 ;
469: $do ${ $if $(@expr1073742843 settings@var102 .@expr1073742844 library@var104 $.@expr1073742845 $load $(@expr1073742846 $exename@var11 $.@expr1073742847 $c_str $(@expr1073742848 $) $, "posix.cfg" $) $.@expr1073742849 $errorcode $!=@expr1073742850 $Library $::@expr1073742851 $ErrorCode $::@expr1073742852 $OK $) ${ $complainMissingLib $(@expr1073742853 "posix.cfg" $) $; $return $; $} $} $while $(@expr1073742854 $false $) ;
470: $check_ $(@expr1073742855 "cppcheck-2.8/test/testleakautovar.cpp" $, 470 $, "void f() {\n    int n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14;\n    *&n1 = open(\"xx.log\", O_RDONLY);\n    *&(n2) = open(\"xx.log\", O_RDONLY);\n    *(&n3) = open(\"xx.log\", O_RDONLY);\n    *&*&n4 = open(\"xx.log\", O_RDONLY);\n    *&*&*&(n5) = open(\"xx.log\", O_RDONLY);\n    *&*&(*&n6) = open(\"xx.log\", O_RDONLY);\n    *&*(&*&n7) = open(\"xx.log\", O_RDONLY);\n    *(&*&n8) = open(\"xx.log\", O_RDONLY);\n    *&(*&*&(*&n9)) = open(\"xx.log\", O_RDONLY);\n    (n10) = open(\"xx.log\", O_RDONLY);\n    ((n11)) = open(\"xx.log\", O_RDONLY);\n    ((*&n12)) = open(\"xx.log\", O_RDONLY);\n    *(&(*&n13)) = open(\"xx.log\", O_RDONLY);\n    ((*&(*&n14))) = open(\"xx.log\", O_RDONLY);\n}\n" , true $)
471:
|
485:
486: ;
487: $if $(@expr1073742856 $!@expr1073742857 $assertEquals $(@expr1073742858 "cppcheck-2.8/test/testleakautovar.cpp" $, 487 $, "[test.cpp:17]: (error) Resource leak: n1\n[test.cpp:17]: (error) Resource leak: n2\n[test.cpp:17]: (error) Resource leak: n3\n[test.cpp:17]: (error) Resource leak: n4\n[test.cpp:17]: (error) Resource leak: n5\n[test.cpp:17]: (error) Resource leak: n6\n[test.cpp:17]: (error) Resource leak: n7\n[test.cpp:17]: (error) Resource leak: n8\n[test.cpp:17]: (error) Resource leak: n9\n[test.cpp:17]: (error) Resource leak: n10\n[test.cpp:17]: (error) Resource leak: n11\n[test.cpp:17]: (error) Resource leak: n12\n[test.cpp:17]: (error) Resource leak: n13\n[test.cpp:17]: (error) Resource leak: n14\n" $, errout@var100 .@expr1073742859 str (@expr1073742860 ) $) $) { $return
488:
|
500:
501: ; }
502: settings@var102 =@expr1073742861 s@var126 ;
503: }
504:
505: void isAutoDealloc ( ) {
506: $check_ $(@expr1073742862 "cppcheck-2.8/test/testleakautovar.cpp" $, 506 $, "void f() {\n    char *p = new char[100];}" , true $)
507:
508: ;
509: $if $(@expr1073742863 $!@expr1073742864 $assertEquals $(@expr1073742865 "cppcheck-2.8/test/testleakautovar.cpp" $, 509 $, "[test.cpp:2]: (error) Memory leak: p\n" $, errout@var100 .@expr1042 str (@expr1043 ) $) $) { $return ; }
510:
511: $check_ $(@expr1073742868 "cppcheck-2.8/test/testleakautovar.cpp" $, 511 $, "void f() {\n    Fred *fred = new Fred;}" , true $)
512:
513: ;
514: $if $(@expr1073742869 $!@expr1073742870 $assertEquals $(@expr1073742871 "cppcheck-2.8/test/testleakautovar.cpp" $, 514 $, "" $, errout@var100 .@expr1042 str (@expr1043 ) $) $) { $return ; }
515:
516: $check_ $(@expr1073742874 "cppcheck-2.8/test/testleakautovar.cpp" $, 516 $, "void f() {\n    std::string *str = new std::string;}" , true $)
517:
518: ;
519: $todoAssertEquals $(@expr1073742875 "cppcheck-2.8/test/testleakautovar.cpp" $, 519 $, "[test.cpp:2]: (error) Memory leak: str\n" $, "" $, errout@var100 .@expr1042 str (@expr1043 ) $) ;
520:
521: $check_ $(@expr1073742878 "cppcheck-2.8/test/testleakautovar.cpp" $, 521 $, "class TestType {\npublic:\n    char ca[12];\n};\nvoid f() {\n    TestType *tt = new TestType();\n}" , true $)
522:
|
526:
527: ;
528: $if $(@expr1073742879 $!@expr1073742880 $assertEquals $(@expr1073742881 "cppcheck-2.8/test/testleakautovar.cpp" $, 528 $, "[test.cpp:7]: (error) Memory leak: tt\n" $, errout@var100 .@expr1042 str (@expr1043 ) $) $) { $return ; }
529:
530: $check_ $(@expr1073742884 "cppcheck-2.8/test/testleakautovar.cpp" $, 530 $, "void f(Bar& b) {\n    char* data = new char[10];\n    b = Bar(*new Foo(data));\n}" , true $)
531:
532:
533: ;
534: $if $(@expr1073742885 $!@expr1073742886 $assertEquals $(@expr1073742887 "cppcheck-2.8/test/testleakautovar.cpp" $, 534 $, "[test.cpp:4]: (information) --check-library: Function Foo() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr1042 str (@expr1043 ) $) $) { $return ; }
535: }
536:
537: void realloc1 ( ) {
538: $check_ $(@expr1073742890 "cppcheck-2.8/test/testleakautovar.cpp" $, 538 $, "void f() {\n    void *p = malloc(10);\n    void *q = realloc(p, 20);\n    free(q)\n}" $)
539:
540:
541:
542: ;
543: $if $(@expr1073742891 $!@expr1073742892 $assertEquals $(@expr1073742893 "cppcheck-2.8/test/testleakautovar.cpp" $, 543 $, "" $, errout@var100 .@expr1073742894 str (@expr1073742895 ) $) $) { $return ; }
544: }
545:
546: void realloc2 ( ) {
547: $check_ $(@expr1073742896 "cppcheck-2.8/test/testleakautovar.cpp" $, 547 $, "void f() {\n    void *p = malloc(10);\n    void *q = realloc(p, 20);\n}" $)
548:
549:
550: ;
551: $if $(@expr1073742897 $!@expr1073742898 $assertEquals $(@expr1073742899 "cppcheck-2.8/test/testleakautovar.cpp" $, 551 $, "[test.c:4]: (error) Memory leak: q\n" $, errout@var100 .@expr1073742900 str (@expr1073742901 ) $) $) { $return ; }
552: }
553:
554: void realloc3 ( ) {
555: $check_ $(@expr1073742902 "cppcheck-2.8/test/testleakautovar.cpp" $, 555 $, "void f() {\n    char *p = malloc(10);\n    char *q = (char*) realloc(p, 20);\n}" $)
556:
557:
558: ;
559: $if $(@expr1073742903 $!@expr1073742904 $assertEquals $(@expr1073742905 "cppcheck-2.8/test/testleakautovar.cpp" $, 559 $, "[test.c:4]: (error) Memory leak: q\n" $, errout@var100 .@expr1073742906 str (@expr1073742907 ) $) $) { $return ; }
560: }
561:
562: void realloc4 ( ) {
563: $check_ $(@expr1073742908 "cppcheck-2.8/test/testleakautovar.cpp" $, 563 $, "void f(void *p) {\n    void * q = realloc(p, 10);\n    if (q == NULL)\n        return;\n}" $)
564:
565:
566:
567: ;
568: $if $(@expr1073742909 $!@expr1073742910 $assertEquals $(@expr1073742911 "cppcheck-2.8/test/testleakautovar.cpp" $, 568 $, "[test.c:5]: (error) Memory leak: q\n" $, errout@var100 .@expr1073742912 str (@expr1073742913 ) $) $) { $return ; }
569: }
570:
571: void realloc5 ( ) {
572:
573: $check_ $(@expr1073742914 "cppcheck-2.8/test/testleakautovar.cpp" $, 573 $, "void * f(void * ptr, size_t size) {\n    void *datap = realloc(ptr, size);\n    if (size && !datap)\n        free(ptr);\n    return datap;\n}" $)
574:
|
577:
578: ;
579: $if $(@expr1073742915 $!@expr1073742916 $assertEquals $(@expr1073742917 "cppcheck-2.8/test/testleakautovar.cpp" $, 579 $, "" $, errout@var100 .@expr1094 str (@expr1095 ) $) $) { $return ; }
580:
581:
582: $check_ $(@expr1073742920 "cppcheck-2.8/test/testleakautovar.cpp" $, 582 $, "void f() {\n    void * p1 = malloc(10);\n    if (!p1)\n        return;\n    void * p2 = realloc(p1, 42);\n    if (!p2) {\n        free(p1);\n        return;\n    }\n    free(p2);\n}" $)
583:
|
591:
592: ;
593: $if $(@expr1073742921 $!@expr1073742922 $assertEquals $(@expr1073742923 "cppcheck-2.8/test/testleakautovar.cpp" $, 593 $, "" $, errout@var100 .@expr1094 str (@expr1095 ) $) $) { $return ; }
594: }
595:
596: void freopen1 ( ) {
597: $check_ $(@expr1073742926 "cppcheck-2.8/test/testleakautovar.cpp" $, 597 $, "void f() {\n    void *p = fopen(name,a);\n    void *q = freopen(name, b, p);\n    fclose(q)\n}" $)
598:
599:
600:
601: ;
602: $if $(@expr1073742927 $!@expr1073742928 $assertEquals $(@expr1073742929 "cppcheck-2.8/test/testleakautovar.cpp" $, 602 $, "" $, errout@var100 .@expr1073742930 str (@expr1073742931 ) $) $) { $return ; }
603: }
604:
605: void freopen2 ( ) {
606: $check_ $(@expr1073742932 "cppcheck-2.8/test/testleakautovar.cpp" $, 606 $, "void f() {\n    void *p = fopen(name,a);\n    void *q = freopen(name, b, p);\n}" $)
607:
608:
609: ;
610: $if $(@expr1073742933 $!@expr1073742934 $assertEquals $(@expr1073742935 "cppcheck-2.8/test/testleakautovar.cpp" $, 610 $, "[test.c:4]: (error) Resource leak: q\n" $, errout@var100 .@expr1073742936 str (@expr1073742937 ) $) $) { $return ; }
611: }
612:
613: void deallocuse1 ( ) {
614: $check_ $(@expr1073742938 "cppcheck-2.8/test/testleakautovar.cpp" $, 614 $, "void f(char *p) {\n    free(p);\n    *p = 0;\n}" $)
615:
616:
617: ;
618: $if $(@expr1073742939 $!@expr1073742940 $assertEquals $(@expr1073742941 "cppcheck-2.8/test/testleakautovar.cpp" $, 618 $, "[test.c:3]: (error) Dereferencing 'p' after it is deallocated / released\n" $, errout@var100 .@expr1118 str (@expr1119 ) $) $) { $return ; }
619:
620: $check_ $(@expr1073742944 "cppcheck-2.8/test/testleakautovar.cpp" $, 620 $, "void f(char *p) {\n    free(p);\n    char c = *p;\n}" $)
621:
622:
623: ;
624: $if $(@expr1073742945 $!@expr1073742946 $assertEquals $(@expr1073742947 "cppcheck-2.8/test/testleakautovar.cpp" $, 624 $, "[test.c:3]: (error) Dereferencing 'p' after it is deallocated / released\n" $, errout@var100 .@expr1118 str (@expr1119 ) $) $) { $return ; }
625: }
626:
627: void deallocuse2 ( ) {
628: $check_ $(@expr1073742950 "cppcheck-2.8/test/testleakautovar.cpp" $, 628 $, "void f(char *p) {\n    free(p);\n    strcpy(a, p);\n}" $)
629:
630:
631: ;
632: $todoAssertEquals $(@expr1073742951 "cppcheck-2.8/test/testleakautovar.cpp" $, 632 $, "error (free,use)" $, "[test.c:3]: (information) --check-library: Function strcpy() should have <noreturn> configuration\n" $, errout@var100 .@expr1128 str (@expr1129 ) $) ;
633:
634: $check_ $(@expr1073742954 "cppcheck-2.8/test/testleakautovar.cpp" $, 634 $, "void f(char *p) {\n    free(p);\n    strcpy(a, p=b());\n}" $)
635:
636:
637: ;
638: $todoAssertEquals $(@expr1073742955 "cppcheck-2.8/test/testleakautovar.cpp" $, 638 $, "" $, "[test.c:3]: (information) --check-library: Function strcpy() should have <noreturn> configuration\n" $, errout@var100 .@expr1128 str (@expr1129 ) $) ;
639: }
640:
641: void deallocuse3 ( ) {
642: $check_ $(@expr1073742958 "cppcheck-2.8/test/testleakautovar.cpp" $, 642 $, "void f(struct str *p) {\n    free(p);\n    p = p->next;\n}" $)
643:
644:
645: ;
646: $if $(@expr1073742959 $!@expr1073742960 $assertEquals $(@expr1073742961 "cppcheck-2.8/test/testleakautovar.cpp" $, 646 $, "[test.c:3]: (error) Dereferencing 'p' after it is deallocated / released\n" $, errout@var100 .@expr1073742962 str (@expr1073742963 ) $) $) { $return ; }
647: }
648:
649: void deallocuse4 ( ) {
650: $check_ $(@expr1073742964 "cppcheck-2.8/test/testleakautovar.cpp" $, 650 $, "void f(char *p) {\n    free(p);\n    return p;\n}" $)
651:
652:
653: ;
654: $if $(@expr1073742965 $!@expr1073742966 $assertEquals $(@expr1073742967 "cppcheck-2.8/test/testleakautovar.cpp" $, 654 $, "[test.c:2] -> [test.c:3]: (error) Returning/dereferencing 'p' after it is deallocated / released\n" $, errout@var100 .@expr1144 str (@expr1145 ) $) $) { $return ; }
655:
656: $check_ $(@expr1073742970 "cppcheck-2.8/test/testleakautovar.cpp" $, 656 $, "void f(char *p) {\n  if (!p) free(p);\n  return p;\n}" $)
657:
658:
659: ;
660: $if $(@expr1073742971 $!@expr1073742972 $assertEquals $(@expr1073742973 "cppcheck-2.8/test/testleakautovar.cpp" $, 660 $, "" $, errout@var100 .@expr1144 str (@expr1145 ) $) $) { $return ; }
661:
662: $check_ $(@expr1073742976 "cppcheck-2.8/test/testleakautovar.cpp" $, 662 $, "void f(char *p) {\n  if (!p) delete p;\n  return p;\n}" , true $)
663:
664:
665: ;
666: $if $(@expr1073742977 $!@expr1073742978 $assertEquals $(@expr1073742979 "cppcheck-2.8/test/testleakautovar.cpp" $, 666 $, "" $, errout@var100 .@expr1144 str (@expr1145 ) $) $) { $return ; }
667:
668: $check_ $(@expr1073742982 "cppcheck-2.8/test/testleakautovar.cpp" $, 668 $, "void f(char *p) {\n  if (!p) delete [] p;\n  return p;\n}" , true $)
669:
670:
671: ;
672: $if $(@expr1073742983 $!@expr1073742984 $assertEquals $(@expr1073742985 "cppcheck-2.8/test/testleakautovar.cpp" $, 672 $, "" $, errout@var100 .@expr1144 str (@expr1145 ) $) $) { $return ; }
673:
674: $check_ $(@expr1073742988 "cppcheck-2.8/test/testleakautovar.cpp" $, 674 $, "void f(void* p) {\n   if (a) {\n      free(p);\n       return;\n   }\n   g(p);\n   return;\n}" $)
675:
|
680:
681: ;
682: $if $(@expr1073742989 $!@expr1073742990 $assertEquals $(@expr1073742991 "cppcheck-2.8/test/testleakautovar.cpp" $, 682 $, "" $, errout@var100 .@expr1144 str (@expr1145 ) $) $) { $return ; }
683: }
684:
685: void deallocuse5 ( ) {
686: $check_ $(@expr1073742994 "cppcheck-2.8/test/testleakautovar.cpp" $, 686 $, "void f(char *p) {\n    free(p), p = 0;\n    *p = 0;\n}" $)
687:
688:
689: ;
690: $if $(@expr1073742995 $!@expr1073742996 $assertEquals $(@expr1073742997 "cppcheck-2.8/test/testleakautovar.cpp" $, 690 $, "" $, errout@var100 .@expr1073742998 str (@expr1073742999 ) $) $) { $return ; }
691: }
692:
693: void deallocuse6 ( ) {
694: $check_ $(@expr1073743000 "cppcheck-2.8/test/testleakautovar.cpp" $, 694 $, "void f(char *p) {\n    free(p);\n    x = p = foo();\n}" $)
695:
696:
697: ;
698: $if $(@expr1073743001 $!@expr1073743002 $assertEquals $(@expr1073743003 "cppcheck-2.8/test/testleakautovar.cpp" $, 698 $, "" $, errout@var100 .@expr1073743004 str (@expr1073743005 ) $) $) { $return ; }
699: }
700:
701: void deallocuse7 ( ) {
702: $check_ $(@expr1073743006 "cppcheck-2.8/test/testleakautovar.cpp" $, 702 $, "struct Foo { int* ptr; };\nvoid f(Foo* foo) {\n    delete foo->ptr;\n    foo->ptr = new Foo;\n}" , true $)
703:
704:
705:
706: ;
707: $if $(@expr1073743007 $!@expr1073743008 $assertEquals $(@expr1073743009 "cppcheck-2.8/test/testleakautovar.cpp" $, 707 $, "" $, errout@var100 .@expr1186 str (@expr1187 ) $) $) { $return ; }
708:
709: $check_ $(@expr1073743012 "cppcheck-2.8/test/testleakautovar.cpp" $, 709 $, "struct Foo { int* ptr; };\nvoid f(Foo* foo) {\n    delete foo->ptr;\n    x = *foo->ptr;\n}" , true $)
710:
711:
712:
713: ;
714: $if $(@expr1073743013 $!@expr1073743014 $assertEquals $(@expr1073743015 "cppcheck-2.8/test/testleakautovar.cpp" $, 714 $, "[test.cpp:4]: (error) Dereferencing 'ptr' after it is deallocated / released\n" $, errout@var100 .@expr1186 str (@expr1187 ) $) $) { $return ; }
715:
716: $check_ $(@expr1073743018 "cppcheck-2.8/test/testleakautovar.cpp" $, 716 $, "void parse() {\n    struct Buf {\n        Buf(uint32_t len) : m_buf(new uint8_t[len]) {}\n        ~Buf() { delete[]m_buf; }\n        uint8_t *m_buf;\n    };\n}" , true $)
717:
|
721:
722: ;
723: $if $(@expr1073743019 $!@expr1073743020 $assertEquals $(@expr1073743021 "cppcheck-2.8/test/testleakautovar.cpp" $, 723 $, "" $, errout@var100 .@expr1186 str (@expr1187 ) $) $) { $return ; }
724:
725: $check_ $(@expr1073743024 "cppcheck-2.8/test/testleakautovar.cpp" $, 725 $, "struct Foo {\n    Foo();\n    Foo* ptr;\n    void func();\n};\nvoid bar(Foo* foo) {\n    delete foo->ptr;\n    foo->ptr = new Foo;\n    foo->ptr->func();\n}" , true $)
726:
|
733:
734: ;
735: $if $(@expr1073743025 $!@expr1073743026 $assertEquals $(@expr1073743027 "cppcheck-2.8/test/testleakautovar.cpp" $, 735 $, "" $, errout@var100 .@expr1186 str (@expr1187 ) $) $) { $return ; }
736:
737: $check_ $(@expr1073743030 "cppcheck-2.8/test/testleakautovar.cpp" $, 737 $, "void foo(void (*conv)(char**)) {\n  char * ptr=(char*)malloc(42);\n  free(ptr);\n  (*conv)(&ptr);\n}" $)
738:
739:
740:
741: ;
742: $if $(@expr1073743031 $!@expr1073743032 $assertEquals $(@expr1073743033 "cppcheck-2.8/test/testleakautovar.cpp" $, 742 $, "" $, errout@var100 .@expr1186 str (@expr1187 ) $) $) { $return ; }
743: }
744:
745: void deallocuse8 ( ) {
746: $check_ $(@expr1073743036 "cppcheck-2.8/test/testleakautovar.cpp" $, 746 $, "void f() {\n    int *ptr = new int;\n    delete(ptr);\n    *ptr = 0;\n}" , true $)
747:
748:
749:
750: ;
751: $if $(@expr1073743037 $!@expr1073743038 $assertEquals $(@expr1073743039 "cppcheck-2.8/test/testleakautovar.cpp" $, 751 $, "[test.cpp:4]: (error) Dereferencing 'ptr' after it is deallocated / released\n" $, errout@var100 .@expr1073743040 str (@expr1073743041 ) $) $) { $return ; }
752: }
753:
754: void deallocuse9 ( ) {
755: $check_ $(@expr1073743042 "cppcheck-2.8/test/testleakautovar.cpp" $, 755 $, "void f(Type* p) {\n  std::shared_ptr<Type> sp(p);\n  bool b = p->foo();\n  return b;\n}\n" , true $)
756:
757:
758:
759: ;
760: $if $(@expr1073743043 $!@expr1073743044 $assertEquals $(@expr1073743045 "cppcheck-2.8/test/testleakautovar.cpp" $, 760 $, "" $, errout@var100 .@expr1222 str (@expr1223 ) $) $) { $return ; }
761:
762: $check_ $(@expr1073743048 "cppcheck-2.8/test/testleakautovar.cpp" $, 762 $, "struct A {\n    std::vector<std::unique_ptr<A>> array_;\n    A* foo() {\n        A* a = new A();\n        array_.push_back(std::unique_ptr<A>(a));\n        return a;\n    }\n};\n" , true $)
763:
|
768:
769: ;
770: $if $(@expr1073743049 $!@expr1073743050 $assertEquals $(@expr1073743051 "cppcheck-2.8/test/testleakautovar.cpp" $, 770 $, "" $, errout@var100 .@expr1222 str (@expr1223 ) $) $) { $return ; }
771:
772: $check_ $(@expr1073743054 "cppcheck-2.8/test/testleakautovar.cpp" $, 772 $, "int g(int *p) {\n    std::unique_ptr<int> temp(p);\n    return DoSomething(p);\n}\nint f() {\n    return g(new int(3));\n}\n" , true $)
773:
|
777:
778: ;
779: $if $(@expr1073743055 $!@expr1073743056 $assertEquals $(@expr1073743057 "cppcheck-2.8/test/testleakautovar.cpp" $, 779 $, "" $, errout@var100 .@expr1222 str (@expr1223 ) $) $) { $return ; }
780: }
781:
782: void doublefree1 ( ) {
783: $check_ $(@expr1073743060 "cppcheck-2.8/test/testleakautovar.cpp" $, 783 $, "void f(char *p) {\n    if (x)\n        free(p);\n    else\n        p = 0;\n    free(p);\n}" $)
784:
|
788:
789: ;
790: $if $(@expr1073743061 $!@expr1073743062 $assertEquals $(@expr1073743063 "cppcheck-2.8/test/testleakautovar.cpp" $, 790 $, "[test.c:3] -> [test.c:6]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
791:
792: $check_ $(@expr1073743066 "cppcheck-2.8/test/testleakautovar.cpp" $, 792 $, "void foo(char *p) {\n  free(p);\n  free(p);\n}" $)
793:
794:
795:
796: ;
797: $if $(@expr1073743067 $!@expr1073743068 $assertEquals $(@expr1073743069 "cppcheck-2.8/test/testleakautovar.cpp" $, 797 $, "[test.c:2] -> [test.c:3]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
798:
799: $check_ $(@expr1073743072 "cppcheck-2.8/test/testleakautovar.cpp" $, 799 $, "void foo(char *p, char *r) {\n  free(p);\n  free(r);\n}" $)
800:
801:
802:
803: ;
804: $if $(@expr1073743073 $!@expr1073743074 $assertEquals $(@expr1073743075 "cppcheck-2.8/test/testleakautovar.cpp" $, 804 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
805:
806: $check_ $(@expr1073743078 "cppcheck-2.8/test/testleakautovar.cpp" $, 806 $, "void foo() {\n  free(p);\n  free(r);\n}" $)
807:
808:
809:
810: ;
811: $if $(@expr1073743079 $!@expr1073743080 $assertEquals $(@expr1073743081 "cppcheck-2.8/test/testleakautovar.cpp" $, 811 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
812:
813: $check_ $(@expr1073743084 "cppcheck-2.8/test/testleakautovar.cpp" $, 813 $, "void foo(char *p) {\n  if (x < 3) free(p);\n  else { if (x > 9) free(p); }\n}" $)
814:
815:
816:
817: ;
818: $if $(@expr1073743085 $!@expr1073743086 $assertEquals $(@expr1073743087 "cppcheck-2.8/test/testleakautovar.cpp" $, 818 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
819:
820: $check_ $(@expr1073743090 "cppcheck-2.8/test/testleakautovar.cpp" $, 820 $, "void foo(char *p) {\n  free(p);\n  getNext(&p);\n  free(p);\n}" $)
821:
|
824:
825: ;
826: $if $(@expr1073743091 $!@expr1073743092 $assertEquals $(@expr1073743093 "cppcheck-2.8/test/testleakautovar.cpp" $, 826 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
827:
828: $check_ $(@expr1073743096 "cppcheck-2.8/test/testleakautovar.cpp" $, 828 $, "void foo(char *p) {\n  free(p);\n  bar();\n  free(p);\n}" $)
829:
|
832:
833: ;
834: $if $(@expr1073743097 $!@expr1073743098 $assertEquals $(@expr1073743099 "cppcheck-2.8/test/testleakautovar.cpp" $, 834 $, "[test.c:2] -> [test.c:4]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
835:
836: $check_ $(@expr1073743102 "cppcheck-2.8/test/testleakautovar.cpp" $, 836 $, "void foo(char *p) {\n  free(p);\n  printf(\"Freed memory at location %x\", p);\n  free(p);\n}" $)
837:
|
840:
841: ;
842: $if $(@expr1073743103 $!@expr1073743104 $assertEquals $(@expr1073743105 "cppcheck-2.8/test/testleakautovar.cpp" $, 842 $, "[test.c:2] -> [test.c:4]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
843:
844: $check_ $(@expr1073743108 "cppcheck-2.8/test/testleakautovar.cpp" $, 844 $, "void foo(FILE *p) {\n  fclose(p);\n  fclose(p);\n}" $)
845:
846:
847:
848: ;
849: $if $(@expr1073743109 $!@expr1073743110 $assertEquals $(@expr1073743111 "cppcheck-2.8/test/testleakautovar.cpp" $, 849 $, "[test.c:2] -> [test.c:3]: (error) Resource handle 'p' freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
850:
851: $check_ $(@expr1073743114 "cppcheck-2.8/test/testleakautovar.cpp" $, 851 $, "void foo(FILE *p, FILE *r) {\n  fclose(p);\n  fclose(r);\n}" $)
852:
853:
854:
855: ;
856: $if $(@expr1073743115 $!@expr1073743116 $assertEquals $(@expr1073743117 "cppcheck-2.8/test/testleakautovar.cpp" $, 856 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
857:
858: $check_ $(@expr1073743120 "cppcheck-2.8/test/testleakautovar.cpp" $, 858 $, "void foo(FILE *p) {\n  if (x < 3) fclose(p);\n  else { if (x > 9) fclose(p); }\n}" $)
859:
860:
861:
862: ;
863: $if $(@expr1073743121 $!@expr1073743122 $assertEquals $(@expr1073743123 "cppcheck-2.8/test/testleakautovar.cpp" $, 863 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
864:
865: $check_ $(@expr1073743126 "cppcheck-2.8/test/testleakautovar.cpp" $, 865 $, "void foo(FILE *p) {\n  fclose(p);\n  gethandle(&p);\n  fclose(p);\n}" $)
866:
|
869:
870: ;
871: $if $(@expr1073743127 $!@expr1073743128 $assertEquals $(@expr1073743129 "cppcheck-2.8/test/testleakautovar.cpp" $, 871 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
872:
873: $check_ $(@expr1073743132 "cppcheck-2.8/test/testleakautovar.cpp" $, 873 $, "void foo(FILE *p) {\n  fclose(p);\n  gethandle();\n  fclose(p);\n}" $)
874:
|
877:
878: ;
879: $if $(@expr1073743133 $!@expr1073743134 $assertEquals $(@expr1073743135 "cppcheck-2.8/test/testleakautovar.cpp" $, 879 $, "[test.c:2] -> [test.c:4]: (error) Resource handle 'p' freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
880:
881: $check_ $(@expr1073743138 "cppcheck-2.8/test/testleakautovar.cpp" $, 881 $, "void foo(Data* p) {\n  free(p->a);\n  free(p->b);\n}" $)
882:
883:
884:
885: ;
886: $if $(@expr1073743139 $!@expr1073743140 $assertEquals $(@expr1073743141 "cppcheck-2.8/test/testleakautovar.cpp" $, 886 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
887:
888: $check_ $(@expr1073743144 "cppcheck-2.8/test/testleakautovar.cpp" $, 888 $, "void f() {\n    char *p; p = malloc(100);\n    if (x) {\n        free(p);\n        exit();\n    }\n    free(p);\n}" $)
889:
|
895:
896: ;
897: $if $(@expr1073743145 $!@expr1073743146 $assertEquals $(@expr1073743147 "cppcheck-2.8/test/testleakautovar.cpp" $, 897 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
898:
899: $check_ $(@expr1073743150 "cppcheck-2.8/test/testleakautovar.cpp" $, 899 $, "void f() {\n    char *p; p = malloc(100);\n    if (x) {\n        free(p);\n        x = 0;\n    }\n    free(p);\n}" $)
900:
|
906:
907: ;
908: $if $(@expr1073743151 $!@expr1073743152 $assertEquals $(@expr1073743153 "cppcheck-2.8/test/testleakautovar.cpp" $, 908 $, "[test.c:4] -> [test.c:7]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
909:
910: $check_ $(@expr1073743156 "cppcheck-2.8/test/testleakautovar.cpp" $, 910 $, "void f() {\n    char *p; p = do_something();\n    free(p);\n    p = do_something();\n    free(p);\n}" $)
911:
|
915:
916: ;
917: $if $(@expr1073743157 $!@expr1073743158 $assertEquals $(@expr1073743159 "cppcheck-2.8/test/testleakautovar.cpp" $, 917 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
918:
919: $check_ $(@expr1073743162 "cppcheck-2.8/test/testleakautovar.cpp" $, 919 $, "void foo(char *p) {\n  delete p;\n  delete p;\n}" , true $)
920:
921:
922:
923: ;
924: $if $(@expr1073743163 $!@expr1073743164 $assertEquals $(@expr1073743165 "cppcheck-2.8/test/testleakautovar.cpp" $, 924 $, "[test.cpp:2] -> [test.cpp:3]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
925:
926: $check_ $(@expr1073743168 "cppcheck-2.8/test/testleakautovar.cpp" $, 926 $, "void foo(char *p, char *r) {\n  delete p;\n  delete r;\n}" , true $)
927:
928:
929:
930: ;
931: $if $(@expr1073743169 $!@expr1073743170 $assertEquals $(@expr1073743171 "cppcheck-2.8/test/testleakautovar.cpp" $, 931 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
932:
933: $check_ $(@expr1073743174 "cppcheck-2.8/test/testleakautovar.cpp" $, 933 $, "void foo(P p) {\n  delete p.x;\n  delete p;\n}" , true $)
934:
935:
936:
937: ;
938: $if $(@expr1073743175 $!@expr1073743176 $assertEquals $(@expr1073743177 "cppcheck-2.8/test/testleakautovar.cpp" $, 938 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
939:
940: $check_ $(@expr1073743180 "cppcheck-2.8/test/testleakautovar.cpp" $, 940 $, "void foo(char **p) {\n  delete p[0];\n  delete p[1];\n}" , true $)
941:
942:
943:
944: ;
945: $if $(@expr1073743181 $!@expr1073743182 $assertEquals $(@expr1073743183 "cppcheck-2.8/test/testleakautovar.cpp" $, 945 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
946:
947: $check_ $(@expr1073743186 "cppcheck-2.8/test/testleakautovar.cpp" $, 947 $, "void foo(char *p) {\n  delete p;\n  getNext(&p);\n  delete p;\n}" , true $)
948:
|
951:
952: ;
953: $if $(@expr1073743187 $!@expr1073743188 $assertEquals $(@expr1073743189 "cppcheck-2.8/test/testleakautovar.cpp" $, 953 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
954:
955: $check_ $(@expr1073743192 "cppcheck-2.8/test/testleakautovar.cpp" $, 955 $, "void foo(char *p) {\n  delete p;\n  bar();\n  delete p;\n}" , true $)
956:
|
959:
960: ;
961: $if $(@expr1073743193 $!@expr1073743194 $assertEquals $(@expr1073743195 "cppcheck-2.8/test/testleakautovar.cpp" $, 961 $, "[test.cpp:2] -> [test.cpp:4]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
962:
963: $check_ $(@expr1073743198 "cppcheck-2.8/test/testleakautovar.cpp" $, 963 $, "void foo(char *p) {\n  delete[] p;\n  delete[] p;\n}" , true $)
964:
965:
966:
967: ;
968: $if $(@expr1073743199 $!@expr1073743200 $assertEquals $(@expr1073743201 "cppcheck-2.8/test/testleakautovar.cpp" $, 968 $, "[test.cpp:2] -> [test.cpp:3]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
969:
970: $check_ $(@expr1073743204 "cppcheck-2.8/test/testleakautovar.cpp" $, 970 $, "void foo(char *p, char *r) {\n  delete[] p;\n  delete[] r;\n}" , true $)
971:
972:
973:
974: ;
975: $if $(@expr1073743205 $!@expr1073743206 $assertEquals $(@expr1073743207 "cppcheck-2.8/test/testleakautovar.cpp" $, 975 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
976:
977: $check_ $(@expr1073743210 "cppcheck-2.8/test/testleakautovar.cpp" $, 977 $, "void foo(char *p) {\n  delete[] p;\n  getNext(&p);\n  delete[] p;\n}" , true $)
978:
|
981:
982: ;
983: $if $(@expr1073743211 $!@expr1073743212 $assertEquals $(@expr1073743213 "cppcheck-2.8/test/testleakautovar.cpp" $, 983 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
984:
985: $check_ $(@expr1073743216 "cppcheck-2.8/test/testleakautovar.cpp" $, 985 $, "void foo(char *p) {\n  delete[] p;\n  bar();\n  delete[] p;\n}" , true $)
986:
|
989:
990: ;
991: $if $(@expr1073743217 $!@expr1073743218 $assertEquals $(@expr1073743219 "cppcheck-2.8/test/testleakautovar.cpp" $, 991 $, "[test.cpp:2] -> [test.cpp:4]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
992:
993: $check_ $(@expr1073743222 "cppcheck-2.8/test/testleakautovar.cpp" $, 993 $, "LineMarker::~LineMarker() {\n  delete pxpm;\n}\nLineMarker &LineMarker::operator=(const LineMarker &) {\n  delete pxpm;\n  pxpm = NULL;\n  return *this;\n}" , true $)
994:
|
1000:
1001: ;
1002: $if $(@expr1073743223 $!@expr1073743224 $assertEquals $(@expr1073743225 "cppcheck-2.8/test/testleakautovar.cpp" $, 1002 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1003:
1004: $check_ $(@expr1073743228 "cppcheck-2.8/test/testleakautovar.cpp" $, 1004 $, "void foo()\n{\n  int* ptr; ptr = NULL;\n  try\n    {\n      ptr = new int(4);\n    }\n  catch(...)\n    {\n      delete ptr;\n      throw;\n    }\n  delete ptr;\n}" , true $)
1005:
|
1017:
1018: ;
1019: $if $(@expr1073743229 $!@expr1073743230 $assertEquals $(@expr1073743231 "cppcheck-2.8/test/testleakautovar.cpp" $, 1019 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1020:
1021: $check_ $(@expr1073743234 "cppcheck-2.8/test/testleakautovar.cpp" $, 1021 $, "int foo()\n{\n   int* a; a = new int;\n   bool doDelete; doDelete = true;\n   if (a != 0)\n   {\n       doDelete = false;\n       delete a;\n   }\n   if(doDelete)\n       delete a;\n   return 0;\n}" , true $)
1022:
|
1033:
1034: ;
1035: $todoAssertEquals $(@expr1073743235 "cppcheck-2.8/test/testleakautovar.cpp" $, 1035 $, "" $, "[test.cpp:8] -> [test.cpp:11]: (error) Memory pointed to by 'a' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) ;
1036:
1037: $check_ $(@expr1073743238 "cppcheck-2.8/test/testleakautovar.cpp" $, 1037 $, "void foo(int y)\n{\n    char * x; x = NULL;\n    while(true) {\n        x = new char[100];\n        if (y++ > 100)\n            break;\n        delete[] x;\n    }\n    delete[] x;\n}" , true $)
1038:
|
1047:
1048: ;
1049: $if $(@expr1073743239 $!@expr1073743240 $assertEquals $(@expr1073743241 "cppcheck-2.8/test/testleakautovar.cpp" $, 1049 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1050:
1051: $check_ $(@expr1073743244 "cppcheck-2.8/test/testleakautovar.cpp" $, 1051 $, "void foo(int y)\n{\n    char * x; x = NULL;\n    for (int i = 0; i < 10000; i++) {\n        x = new char[100];\n        delete[] x;\n    }\n    delete[] x;\n}" , true $)
1052:
|
1059:
1060: ;
1061: $todoAssertEquals $(@expr1073743245 "cppcheck-2.8/test/testleakautovar.cpp" $, 1061 $, "[test.cpp:8]: (error) Memory pointed to by 'x' is freed twice.\n" $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) ;
1062:
1063: $check_ $(@expr1073743248 "cppcheck-2.8/test/testleakautovar.cpp" $, 1063 $, "void foo(int y)\n{\n    char * x; x = NULL;\n    while (isRunning()) {\n        x = new char[100];\n        delete[] x;\n    }\n    delete[] x;\n}" , true $)
1064:
|
1071:
1072: ;
1073: $todoAssertEquals $(@expr1073743249 "cppcheck-2.8/test/testleakautovar.cpp" $, 1073 $, "[test.cpp:8]: (error) Memory pointed to by 'x' is freed twice.\n" $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) ;
1074:
1075: $check_ $(@expr1073743252 "cppcheck-2.8/test/testleakautovar.cpp" $, 1075 $, "void foo(int y)\n{\n    char * x; x = NULL;\n    while (isRunning()) {\n        x = malloc(100);\n        free(x);\n    }\n    free(x);\n}" $)
1076:
|
1083:
1084: ;
1085: $todoAssertEquals $(@expr1073743253 "cppcheck-2.8/test/testleakautovar.cpp" $, 1085 $, "[test.c:8]: (error) Memory pointed to by 'x' is freed twice.\n" $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) ;
1086:
1087: $check_ $(@expr1073743256 "cppcheck-2.8/test/testleakautovar.cpp" $, 1087 $, "void foo(int y)\n{\n    char * x; x = NULL;\n    for (;;) {\n        x = new char[100];\n        if (y++ > 100)\n            break;\n        delete[] x;\n    }\n    delete[] x;\n}" , true $)
1088:
|
1097:
1098: ;
1099: $if $(@expr1073743257 $!@expr1073743258 $assertEquals $(@expr1073743259 "cppcheck-2.8/test/testleakautovar.cpp" $, 1099 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1100:
1101: $check_ $(@expr1073743262 "cppcheck-2.8/test/testleakautovar.cpp" $, 1101 $, "void foo(int y)\n{\n    char * x; x = NULL;\n    do {\n        x = new char[100];\n        if (y++ > 100)\n            break;\n        delete[] x;\n    } while (true);\n    delete[] x;\n}" , true $)
1102:
|
1111:
1112: ;
1113: $if $(@expr1073743263 $!@expr1073743264 $assertEquals $(@expr1073743265 "cppcheck-2.8/test/testleakautovar.cpp" $, 1113 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1114:
1115: $check_ $(@expr1073743268 "cppcheck-2.8/test/testleakautovar.cpp" $, 1115 $, "void f()\n{\n    char *p; p = 0;\n    if (x < 100) {\n        p = malloc(10);\n        free(p);\n    }\n    free(p);\n}" $)
1116:
|
1123:
1124: ;
1125: $if $(@expr1073743269 $!@expr1073743270 $assertEquals $(@expr1073743271 "cppcheck-2.8/test/testleakautovar.cpp" $, 1125 $, "[test.c:6] -> [test.c:8]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1126:
1127: $check_ $(@expr1073743274 "cppcheck-2.8/test/testleakautovar.cpp" $, 1127 $, "void MyFunction()\n{\n    char* data; data = new char[100];\n    try\n    {\n    }\n    catch(err)\n    {\n        delete[] data;\n        MyThrow(err);\n    }\n    delete[] data;\n}\nvoid MyThrow(err)\n{\n    throw(err);\n}" , true $)
1128:
|
1144:
1145: ;
1146: $if $(@expr1073743275 $!@expr1073743276 $assertEquals $(@expr1073743277 "cppcheck-2.8/test/testleakautovar.cpp" $, 1146 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1147:
1148: $check_ $(@expr1073743280 "cppcheck-2.8/test/testleakautovar.cpp" $, 1148 $, "void MyFunction()\n{\n    char* data; data = new char[100];\n    try\n    {\n    }\n    catch(err)\n    {\n        delete[] data;\n        MyExit(err);\n    }\n    delete[] data;\n}\nvoid MyExit(err)\n{\n    exit(err);\n}" , true $)
1149:
|
1165:
1166: ;
1167: $if $(@expr1073743281 $!@expr1073743282 $assertEquals $(@expr1073743283 "cppcheck-2.8/test/testleakautovar.cpp" $, 1167 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1168:
1169: $check_ $(@expr1073743286 "cppcheck-2.8/test/testleakautovar.cpp" $, 1169 $, "struct Wrapper {\n    Thing* m_thing;\n    Wrapper() : m_thing(0) {\n    }\n    ~Wrapper() {\n        delete m_thing;\n    }\n    void changeThing() {\n        delete m_thing;\n        m_thing = new Thing;\n    }\n};" , true $)
1170:
|
1180:
1181: ;
1182: $if $(@expr1073743287 $!@expr1073743288 $assertEquals $(@expr1073743289 "cppcheck-2.8/test/testleakautovar.cpp" $, 1182 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1183:
1184:
1185: $check_ $(@expr1073743292 "cppcheck-2.8/test/testleakautovar.cpp" $, 1185 $, "void pCodeLabelDestruct(pCode *pc) {\n    free(PCL(pc)->label);\n    free(pc);\n}" $)
1186:
1187:
1188: ;
1189: $if $(@expr1073743293 $!@expr1073743294 $assertEquals $(@expr1073743295 "cppcheck-2.8/test/testleakautovar.cpp" $, 1189 $, "" $, errout@var100 .@expr1240 str (@expr1241 ) $) $) { $return ; }
1190: }
1191:
1192: void doublefree2 ( ) {
1193: $check_ $(@expr1073743298 "cppcheck-2.8/test/testleakautovar.cpp" $, 1193 $, "void *f(int a) {\n    char *p = malloc(10);\n    if (a == 2) { free(p); return ((void*)1); }\n    free(p);\n    return 0;\n}" $)
1194:
|
1197:
1198: ;
1199: $if $(@expr1073743299 $!@expr1073743300 $assertEquals $(@expr1073743301 "cppcheck-2.8/test/testleakautovar.cpp" $, 1199 $, "" $, errout@var100 .@expr1073743302 str (@expr1073743303 ) $) $) { $return ; }
1200: }
1201:
1202: void doublefree3 ( ) {
1203: $check_ $(@expr1073743304 "cppcheck-2.8/test/testleakautovar.cpp" $, 1203 $, "void foo() {\n   bool done = false;\n   do {\n       char *bar = malloc(10)\n       if(condition()) {\n           free(bar);\n           continue;\n       }\n       done = true;\n       free(bar)\n   } while(!done);\n   return;}" $)
1204:
|
1215:
1216: ;
1217: $if $(@expr1073743305 $!@expr1073743306 $assertEquals $(@expr1073743307 "cppcheck-2.8/test/testleakautovar.cpp" $, 1217 $, "" $, errout@var100 .@expr1073743308 str (@expr1073743309 ) $) $) { $return ; }
1218: }
1219:
1220: void doublefree4 ( ) {
1221: $check_ $(@expr1073743310 "cppcheck-2.8/test/testleakautovar.cpp" $, 1221 $, "void f(char *p) {\n  if (x) {\n    free(p);\n    exit(1);\n  }\n  free(p);\n}" $)
1222:
|
1226:
1227: ;
1228: $if $(@expr1073743311 $!@expr1073743312 $assertEquals $(@expr1073743313 "cppcheck-2.8/test/testleakautovar.cpp" $, 1228 $, "" $, errout@var100 .@expr1073743314 str (@expr1073743315 ) $) $) { $return ; }
1229: }
1230:
1231: void doublefree5 ( ) {
1232: $check_ $(@expr1073743316 "cppcheck-2.8/test/testleakautovar.cpp" $, 1232 $, "void f(char *p) {\n  free(p);\n  x = (q == p);\n  free(p);\n}" $)
1233:
1234:
1235:
1236: ;
1237: $if $(@expr1073743317 $!@expr1073743318 $assertEquals $(@expr1073743319 "cppcheck-2.8/test/testleakautovar.cpp" $, 1237 $, "[test.c:2] -> [test.c:4]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1073743320 str (@expr1073743321 ) $) $) { $return ; }
1238: }
1239:
1240: void doublefree6 ( ) {
1241: $check_ $(@expr1073743322 "cppcheck-2.8/test/testleakautovar.cpp" $, 1241 $, "void do_wordexp(FILE *f) {\n  free(getword(f));\n  fclose(f);\n}" , false $)
1242:
1243:
1244: ;
1245: $if $(@expr1073743323 $!@expr1073743324 $assertEquals $(@expr1073743325 "cppcheck-2.8/test/testleakautovar.cpp" $, 1245 $, "" $, errout@var100 .@expr1073743326 str (@expr1073743327 ) $) $) { $return ; }
1246: }
1247:
1248: void doublefree7 ( ) {
1249: $check_ $(@expr1073743328 "cppcheck-2.8/test/testleakautovar.cpp" $, 1249 $, "void f(char *p, int x) {\n    free(p);\n    if (x && (p = malloc(10)))\n        free(p);\n}" $)
1250:
1251:
1252:
1253: ;
1254: $if $(@expr1073743329 $!@expr1073743330 $assertEquals $(@expr1073743331 "cppcheck-2.8/test/testleakautovar.cpp" $, 1254 $, "" $, errout@var100 .@expr1508 str (@expr1509 ) $) $) { $return ; }
1255:
1256: $check_ $(@expr1073743334 "cppcheck-2.8/test/testleakautovar.cpp" $, 1256 $, "void f(char *p, int x) {\n    delete[] p;\n    if (x && (p = new char[10]))\n        delete[] p;\n}" $)
1257:
1258:
1259:
1260: ;
1261: $if $(@expr1073743335 $!@expr1073743336 $assertEquals $(@expr1073743337 "cppcheck-2.8/test/testleakautovar.cpp" $, 1261 $, "" $, errout@var100 .@expr1508 str (@expr1509 ) $) $) { $return ; }
1262: }
1263:
1264: void doublefree8 ( ) {
1265: $check_ $(@expr1073743340 "cppcheck-2.8/test/testleakautovar.cpp" $, 1265 $, "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x(i);\n    delete i;\n}\n" , true $)
1266:
1267:
1268:
1269: ;
1270: $if $(@expr1073743341 $!@expr1073743342 $assertEquals $(@expr1073743343 "cppcheck-2.8/test/testleakautovar.cpp" $, 1270 $, "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" $, errout@var100 .@expr1520 str (@expr1521 ) $) $) { $return ; }
1271:
1272: $check_ $(@expr1073743346 "cppcheck-2.8/test/testleakautovar.cpp" $, 1272 $, "void f() {\n    int * i = new int;\n    delete i;\n    std::unique_ptr<int> x(i);\n}\n" , true $)
1273:
1274:
1275:
1276: ;
1277: $if $(@expr1073743347 $!@expr1073743348 $assertEquals $(@expr1073743349 "cppcheck-2.8/test/testleakautovar.cpp" $, 1277 $, "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" $, errout@var100 .@expr1520 str (@expr1521 ) $) $) { $return ; }
1278:
1279: $check_ $(@expr1073743352 "cppcheck-2.8/test/testleakautovar.cpp" $, 1279 $, "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x{i};\n    delete i;\n}\n" , true $)
1280:
1281:
1282:
1283: ;
1284: $if $(@expr1073743353 $!@expr1073743354 $assertEquals $(@expr1073743355 "cppcheck-2.8/test/testleakautovar.cpp" $, 1284 $, "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" $, errout@var100 .@expr1520 str (@expr1521 ) $) $) { $return ; }
1285:
1286: $check_ $(@expr1073743358 "cppcheck-2.8/test/testleakautovar.cpp" $, 1286 $, "void f() {\n    int * i = new int;\n    std::shared_ptr<int> x(i);\n    delete i;\n}\n" , true $)
1287:
1288:
1289:
1290: ;
1291: $if $(@expr1073743359 $!@expr1073743360 $assertEquals $(@expr1073743361 "cppcheck-2.8/test/testleakautovar.cpp" $, 1291 $, "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" $, errout@var100 .@expr1520 str (@expr1521 ) $) $) { $return ; }
1292:
1293: $check_ $(@expr1073743364 "cppcheck-2.8/test/testleakautovar.cpp" $, 1293 $, "void f() {\n    int * i = new int;\n    std::shared_ptr<int> x{i};\n    delete i;\n}\n" , true $)
1294:
1295:
1296:
1297: ;
1298: $if $(@expr1073743365 $!@expr1073743366 $assertEquals $(@expr1073743367 "cppcheck-2.8/test/testleakautovar.cpp" $, 1298 $, "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" $, errout@var100 .@expr1520 str (@expr1521 ) $) $) { $return ; }
1299:
1300:
1301: $check_ $(@expr1073743370 "cppcheck-2.8/test/testleakautovar.cpp" $, 1301 $, "void f() {\n    int * i = new int;\n    std::shared_ptr<int> x{i};\n    *i = 123;\n}\n" , true $)
1302:
1303:
1304:
1305: ;
1306: $if $(@expr1073743371 $!@expr1073743372 $assertEquals $(@expr1073743373 "cppcheck-2.8/test/testleakautovar.cpp" $, 1306 $, "" $, errout@var100 .@expr1520 str (@expr1521 ) $) $) { $return ; }
1307:
1308: $check_ $(@expr1073743376 "cppcheck-2.8/test/testleakautovar.cpp" $, 1308 $, "void f() {\n    int * i = new int[1];\n    std::unique_ptr<int[]> x(i);\n    delete i;\n}\n" , true $)
1309:
1310:
1311:
1312: ;
1313: $if $(@expr1073743377 $!@expr1073743378 $assertEquals $(@expr1073743379 "cppcheck-2.8/test/testleakautovar.cpp" $, 1313 $, "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" $, errout@var100 .@expr1520 str (@expr1521 ) $) $) { $return ; }
1314: }
1315:
1316: void doublefree9 ( ) {
1317: $check_ $(@expr1073743382 "cppcheck-2.8/test/testleakautovar.cpp" $, 1317 $, "struct foo {\n    int* get(int) { return new int(); }\n};\nvoid f(foo* b) {\n    std::unique_ptr<int> x(b->get(0));\n    std::unique_ptr<int> y(b->get(1));\n}\n" , true $)
1318:
|
1322:
1323: ;
1324: $if $(@expr1073743383 $!@expr1073743384 $assertEquals $(@expr1073743385 "cppcheck-2.8/test/testleakautovar.cpp" $, 1324 $, "" $, errout@var100 .@expr1073743386 str (@expr1073743387 ) $) $) { $return ; }
1325: }
1326:
1327: void doublefree10 ( ) {
1328: $check_ $(@expr1073743388 "cppcheck-2.8/test/testleakautovar.cpp" $, 1328 $, "void f(char* s) {\n    char *p = malloc(strlen(s));\n    if (p != NULL) {\n        strcat(p, s);\n        if (strlen(s) != 10)\n            free(p); p = NULL;\n    }\n    if (p != NULL)\n        free(p);\n}\n" , true $)
1329:
|
1336:
1337: ;
1338: $if $(@expr1073743389 $!@expr1073743390 $assertEquals $(@expr1073743391 "cppcheck-2.8/test/testleakautovar.cpp" $, 1338 $, "" $, errout@var100 .@expr1568 str (@expr1569 ) $) $) { $return ; }
1339:
1340: $check_ $(@expr1073743394 "cppcheck-2.8/test/testleakautovar.cpp" $, 1340 $, "void f(char* s) {\n    char *p = malloc(strlen(s));\n    if (p != NULL) {\n        strcat(p, s);\n        if (strlen(s) != 10)\n            free(p), p = NULL;\n    }\n    if (p != NULL)\n        free(p);\n}\n" , true $)
1341:
|
1348:
1349: ;
1350: $if $(@expr1073743395 $!@expr1073743396 $assertEquals $(@expr1073743397 "cppcheck-2.8/test/testleakautovar.cpp" $, 1350 $, "" $, errout@var100 .@expr1568 str (@expr1569 ) $) $) { $return ; }
1351: }
1352:
1353: void doublefree11 ( ) {
1354: $check_ $(@expr1073743400 "cppcheck-2.8/test/testleakautovar.cpp" $, 1354 $, "void f() {\n    void * p = malloc(5);\n    void * q = realloc(p, 10);\n    if (q == NULL) {\n        free(p);\n        return;\n    }\n    free(p);\n    if (q == NULL)\n        return;\n    free(q)\n}" $)
1355:
|
1364:
1365: ;
1366: $if $(@expr1073743401 $!@expr1073743402 $assertEquals $(@expr1073743403 "cppcheck-2.8/test/testleakautovar.cpp" $, 1366 $, "[test.c:3] -> [test.c:8]: (error) Memory pointed to by 'p' is freed twice.\n" $, errout@var100 .@expr1073743404 str (@expr1073743405 ) $) $) { $return ; }
1367: }
1368:
1369: void doublefree12 ( ) {
1370: $check_ $(@expr1073743406 "cppcheck-2.8/test/testleakautovar.cpp" $, 1370 $, "int f(FILE *fp, const bool b) {\n    if (b)\n        return fclose(fp);\n    fclose(fp);\n    return 0;\n}\n" $)
1371:
|
1374:
1375: ;
1376: $if $(@expr1073743407 $!@expr1073743408 $assertEquals $(@expr1073743409 "cppcheck-2.8/test/testleakautovar.cpp" $, 1376 $, "" $, errout@var100 .@expr1073743410 str (@expr1073743411 ) $) $) { $return ; }
1377: }
1378:
1379: void exit1 ( ) {
1380: $check_ $(@expr1073743412 "cppcheck-2.8/test/testleakautovar.cpp" $, 1380 $, "void f() {\n    char *p = malloc(10);\n    exit(0);\n}" $)
1381:
1382:
1383: ;
1384: $if $(@expr1073743413 $!@expr1073743414 $assertEquals $(@expr1073743415 "cppcheck-2.8/test/testleakautovar.cpp" $, 1384 $, "" $, errout@var100 .@expr1073743416 str (@expr1073743417 ) $) $) { $return ; }
1385: }
1386:
1387: void exit2 ( ) {
1388: $check_ $(@expr1073743418 "cppcheck-2.8/test/testleakautovar.cpp" $, 1388 $, "void f() {\n    char *p = malloc(10);\n    fatal_error();\n}" $)
1389:
1390:
1391: ;
1392: $if $(@expr1073743419 $!@expr1073743420 $assertEquals $(@expr1073743421 "cppcheck-2.8/test/testleakautovar.cpp" $, 1392 $, "[test.c:3]: (information) --check-library: Function fatal_error() should have <noreturn> configuration\n[test.c:4]: (information) --check-library: Function fatal_error() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr1073743422 str (@expr1073743423 ) $) $) { $return
1393:
1394: ; }
1395: }
1396:
1397: void exit3 ( ) {
1398: $check_ $(@expr1073743424 "cppcheck-2.8/test/testleakautovar.cpp" $, 1398 $, "void f() {\n  char *p = malloc(100);\n  if (x) {\n    free(p);\n    ::exit(0);\n  }  free(p);\n}" , true $)
1399:
|
1404:
1405: ;
1406: $if $(@expr1073743425 $!@expr1073743426 $assertEquals $(@expr1073743427 "cppcheck-2.8/test/testleakautovar.cpp" $, 1406 $, "" $, errout@var100 .@expr1604 str (@expr1605 ) $) $) { $return ; }
1407:
1408: $check_ $(@expr1073743430 "cppcheck-2.8/test/testleakautovar.cpp" $, 1408 $, "void f() {\n  char *p = malloc(100);\n  if (x) {\n    free(p);\n    std::exit(0);\n  }  free(p);\n}" , true $)
1409:
|
1414:
1415: ;
1416: $if $(@expr1073743431 $!@expr1073743432 $assertEquals $(@expr1073743433 "cppcheck-2.8/test/testleakautovar.cpp" $, 1416 $, "" $, errout@var100 .@expr1604 str (@expr1605 ) $) $) { $return ; }
1417: }
1418:
1419: void functioncall1 ( ) {
1420: $check_ $(@expr1073743436 "cppcheck-2.8/test/testleakautovar.cpp" $, 1420 $, "void f(struct S *p) {\n  p->x = malloc(10);\n  free(p->x);\n  p->x = 0;\n}" $)
1421:
1422:
1423:
1424: ;
1425: $if $(@expr1073743437 $!@expr1073743438 $assertEquals $(@expr1073743439 "cppcheck-2.8/test/testleakautovar.cpp" $, 1425 $, "" $, errout@var100 .@expr1073743440 str (@expr1073743441 ) $) $) { $return ; }
1426: }
1427:
1428: void goto1 ( ) {
1429: $check_ $(@expr1073743442 "cppcheck-2.8/test/testleakautovar.cpp" $, 1429 $, "static void f() {\n    int err = -ENOMEM;\n    char *reg = malloc(100);\n    if (err) {\n        free(reg);\n    }\n}" $)
1430:
|
1434:
1435: ;
1436: $if $(@expr1073743443 $!@expr1073743444 $assertEquals $(@expr1073743445 "cppcheck-2.8/test/testleakautovar.cpp" $, 1436 $, "" $, errout@var100 .@expr1073743446 str (@expr1073743447 ) $) $) { $return ; }
1437: }
1438:
1439: void goto2 ( ) {
1440: $check_ $(@expr1073743448 "cppcheck-2.8/test/testleakautovar.cpp" $, 1440 $, "static char * f() {\nx:\n    char *p = malloc(100);\n    if (err) {\n        free(p);\n        goto x;\n    }\n    return p;\n}" $)
1441:
|
1447:
1448: ;
1449: $if $(@expr1073743449 $!@expr1073743450 $assertEquals $(@expr1073743451 "cppcheck-2.8/test/testleakautovar.cpp" $, 1449 $, "" $, errout@var100 .@expr1073743452 str (@expr1073743453 ) $) $) { $return ; }
1450: }
1451:
1452: void ifelse1 ( ) {
1453: $check_ $(@expr1073743454 "cppcheck-2.8/test/testleakautovar.cpp" $, 1453 $, "int f() {\n    char *p = NULL;\n    if (x) { p = malloc(10); }\n    else { return 0; }\n    free(p);\n}" $)
1454:
|
1457:
1458: ;
1459: $if $(@expr1073743455 $!@expr1073743456 $assertEquals $(@expr1073743457 "cppcheck-2.8/test/testleakautovar.cpp" $, 1459 $, "" $, errout@var100 .@expr1073743458 str (@expr1073743459 ) $) $) { $return ; }
1460: }
1461:
1462: void ifelse2 ( ) {
1463: $check_ $(@expr1073743460 "cppcheck-2.8/test/testleakautovar.cpp" $, 1463 $, "int f() {\n    char *p = NULL;\n    if (x) { p = malloc(10); }\n    else { return 0; }\n}" $)
1464:
1465:
1466:
1467: ;
1468: $if $(@expr1073743461 $!@expr1073743462 $assertEquals $(@expr1073743463 "cppcheck-2.8/test/testleakautovar.cpp" $, 1468 $, "[test.c:5]: (error) Memory leak: p\n" $, errout@var100 .@expr1073743464 str (@expr1073743465 ) $) $) { $return ; }
1469: }
1470:
1471: void ifelse3 ( ) {
1472: $check_ $(@expr1073743466 "cppcheck-2.8/test/testleakautovar.cpp" $, 1472 $, "void f() {\n    char *p = malloc(10);\n    if (!p) { return; }\n    free(p);\n}" $)
1473:
1474:
1475:
1476: ;
1477: $if $(@expr1073743467 $!@expr1073743468 $assertEquals $(@expr1073743469 "cppcheck-2.8/test/testleakautovar.cpp" $, 1477 $, "" $, errout@var100 .@expr1646 str (@expr1647 ) $) $) { $return ; }
1478:
1479: $check_ $(@expr1073743472 "cppcheck-2.8/test/testleakautovar.cpp" $, 1479 $, "char * f(size_t size) {    void *p = malloc(1);    if (!p && size != 0)        return NULL;    return p;}" $)
1480:
|
1483:
1484: ;
1485: $if $(@expr1073743473 $!@expr1073743474 $assertEquals $(@expr1073743475 "cppcheck-2.8/test/testleakautovar.cpp" $, 1485 $, "" $, errout@var100 .@expr1646 str (@expr1647 ) $) $) { $return ; }
1486:
1487: $check_ $(@expr1073743478 "cppcheck-2.8/test/testleakautovar.cpp" $, 1487 $, "void f() {\n    char *p = malloc(10);\n    if (p) { } else { return; }\n    free(p);\n}" $)
1488:
1489:
1490:
1491: ;
1492: $if $(@expr1073743479 $!@expr1073743480 $assertEquals $(@expr1073743481 "cppcheck-2.8/test/testleakautovar.cpp" $, 1492 $, "" $, errout@var100 .@expr1646 str (@expr1647 ) $) $) { $return ; }
1493:
1494:
1495: $check_ $(@expr1073743484 "cppcheck-2.8/test/testleakautovar.cpp" $, 1495 $, "void f() {\n    char *p = malloc(10);\n    if (UNLIKELY(!p)) { return; }\n    free(p);\n}" $)
1496:
1497:
1498:
1499: ;
1500: $if $(@expr1073743485 $!@expr1073743486 $assertEquals $(@expr1073743487 "cppcheck-2.8/test/testleakautovar.cpp" $, 1500 $, "" $, errout@var100 .@expr1646 str (@expr1647 ) $) $) { $return ; }
1501: }
1502:
1503: void ifelse4 ( ) {
1504: $check_ $(@expr1073743490 "cppcheck-2.8/test/testleakautovar.cpp" $, 1504 $, "void f(int x) {\n    char *p;\n    if (x) { p = malloc(10); }\n    if (x) { free(p); }\n}" $)
1505:
1506:
1507:
1508: ;
1509: $if $(@expr1073743491 $!@expr1073743492 $assertEquals $(@expr1073743493 "cppcheck-2.8/test/testleakautovar.cpp" $, 1509 $, "" $, errout@var100 .@expr1670 str (@expr1671 ) $) $) { $return ; }
1510:
1511: $check_ $(@expr1073743496 "cppcheck-2.8/test/testleakautovar.cpp" $, 1511 $, "void f(int x) {\n    char *p;\n    if (x) { p = malloc(10); }\n    if (!x) { return; }\n    free(p);\n}" $)
1512:
|
1515:
1516: ;
1517: $if $(@expr1073743497 $!@expr1073743498 $assertEquals $(@expr1073743499 "cppcheck-2.8/test/testleakautovar.cpp" $, 1517 $, "" $, errout@var100 .@expr1670 str (@expr1671 ) $) $) { $return ; }
1518: }
1519:
1520: void ifelse5 ( ) {
1521: $check_ $(@expr1073743502 "cppcheck-2.8/test/testleakautovar.cpp" $, 1521 $, "void f() {\n    char *p = malloc(10);\n    if (!p && x) { p = malloc(10); }\n    free(p);\n}" $)
1522:
1523:
1524:
1525: ;
1526: $if $(@expr1073743503 $!@expr1073743504 $assertEquals $(@expr1073743505 "cppcheck-2.8/test/testleakautovar.cpp" $, 1526 $, "" $, errout@var100 .@expr1073743506 str (@expr1073743507 ) $) $) { $return ; }
1527: }
1528:
1529: void ifelse6 ( ) {
1530: $check_ $(@expr1073743508 "cppcheck-2.8/test/testleakautovar.cpp" $, 1530 $, "void f(int x) {\n    int *a = malloc(20);\n    if (x)\n        free(a);\n    else\n        a = 0;\n}" $)
1531:
|
1535:
1536: ;
1537: $if $(@expr1073743509 $!@expr1073743510 $assertEquals $(@expr1073743511 "cppcheck-2.8/test/testleakautovar.cpp" $, 1537 $, "[test.c:6]: (error) Memory leak: a\n" $, errout@var100 .@expr1073743512 str (@expr1073743513 ) $) $) { $return ; }
1538: }
1539:
1540: void ifelse7 ( ) {
1541: $check_ $(@expr1073743514 "cppcheck-2.8/test/testleakautovar.cpp" $, 1541 $, "void f() {\n    int x = malloc(20);\n    if (x < 0)\n        return;\n    free(x);\n}" $)
1542:
|
1545:
1546: ;
1547: $if $(@expr1073743515 $!@expr1073743516 $assertEquals $(@expr1073743517 "cppcheck-2.8/test/testleakautovar.cpp" $, 1547 $, "" $, errout@var100 .@expr1073743518 str (@expr1073743519 ) $) $) { $return ; }
1548: }
1549:
1550: void ifelse8 ( ) {
1551: $check_ $(@expr1073743520 "cppcheck-2.8/test/testleakautovar.cpp" $, 1551 $, "int f() {\n    int fd = socket(AF_INET, SOCK_PACKET, 0 );\n    if (fd == -1)\n        return -1;\n    return fd;\n}" $)
1552:
|
1555:
1556: ;
1557: $if $(@expr1073743521 $!@expr1073743522 $assertEquals $(@expr1073743523 "cppcheck-2.8/test/testleakautovar.cpp" $, 1557 $, "" $, errout@var100 .@expr1700 str (@expr1701 ) $) $) { $return ; }
1558:
1559: $check_ $(@expr1073743526 "cppcheck-2.8/test/testleakautovar.cpp" $, 1559 $, "int f() {\n    int fd = socket(AF_INET, SOCK_PACKET, 0 );\n    if (fd != -1)\n        return fd;\n    return -1;\n}" $)
1560:
|
1563:
1564: ;
1565: $if $(@expr1073743527 $!@expr1073743528 $assertEquals $(@expr1073743529 "cppcheck-2.8/test/testleakautovar.cpp" $, 1565 $, "" $, errout@var100 .@expr1700 str (@expr1701 ) $) $) { $return ; }
1566: }
1567:
1568: void ifelse9 ( ) {
1569: $check_ $(@expr1073743532 "cppcheck-2.8/test/testleakautovar.cpp" $, 1569 $, "void f() {\n    char *p = malloc(100);\n    if (dostuff(p==NULL,0))\n        return;\n    free(p);\n}" $)
1570:
|
1573:
1574: ;
1575: $if $(@expr1073743533 $!@expr1073743534 $assertEquals $(@expr1073743535 "cppcheck-2.8/test/testleakautovar.cpp" $, 1575 $, "" $, errout@var100 .@expr1073743536 str (@expr1073743537 ) $) $) { $return ; }
1576: }
1577:
1578: void ifelse10 ( ) {
1579: $check_ $(@expr1073743538 "cppcheck-2.8/test/testleakautovar.cpp" $, 1579 $, "void f() {\n    void *x = malloc(1U);\n    if (!(x != NULL))\n        return;\n    free(x);\n}" $)
1580:
|
1583:
1584: ;
1585: $if $(@expr1073743539 $!@expr1073743540 $assertEquals $(@expr1073743541 "cppcheck-2.8/test/testleakautovar.cpp" $, 1585 $, "" $, errout@var100 .@expr1073743542 str (@expr1073743543 ) $) $) { $return ; }
1586: }
1587:
1588: void ifelse11 ( ) {
1589: $check_ $(@expr1073743544 "cppcheck-2.8/test/testleakautovar.cpp" $, 1589 $, "void f() {\n    void *p;\n    if (NULL == (p = malloc(4)))\n        return;\n    free(p);\n}" $)
1590:
|
1593:
1594: ;
1595: $if $(@expr1073743545 $!@expr1073743546 $assertEquals $(@expr1073743547 "cppcheck-2.8/test/testleakautovar.cpp" $, 1595 $, "" $, errout@var100 .@expr1073743548 str (@expr1073743549 ) $) $) { $return ; }
1596: }
1597:
1598: void ifelse12 ( ) {
1599: $check_ $(@expr1073743550 "cppcheck-2.8/test/testleakautovar.cpp" $, 1599 $, "void f(char **p) {\n    if ((*p = malloc(4)) == NULL)\n        return;\n}" $)
1600:
1601:
1602: ;
1603: $if $(@expr1073743551 $!@expr1073743552 $assertEquals $(@expr1073743553 "cppcheck-2.8/test/testleakautovar.cpp" $, 1603 $, "" $, errout@var100 .@expr1073743554 str (@expr1073743555 ) $) $) { $return ; }
1604: }
1605:
1606: void ifelse13 ( ) {
1607: $check_ $(@expr1073743556 "cppcheck-2.8/test/testleakautovar.cpp" $, 1607 $, "int f(int fd, const char *mode) {\n    char *path;\n    if (fd == -1 || (path = (char *)malloc(10)) == NULL)\n        return 1;\n    free(path);\n    return 0;\n}" $)
1608:
|
1612:
1613: ;
1614: $if $(@expr1073743557 $!@expr1073743558 $assertEquals $(@expr1073743559 "cppcheck-2.8/test/testleakautovar.cpp" $, 1614 $, "" $, errout@var100 .@expr1736 str (@expr1737 ) $) $) { $return ; }
1615:
1616: $check_ $(@expr1073743562 "cppcheck-2.8/test/testleakautovar.cpp" $, 1616 $, "int f(int fd, const char *mode) {\n    char *path;\n    if ((path = (char *)malloc(10)) == NULL || fd == -1)\n        return 1;\n    free(path);\n    return 0;\n}" $)
1617:
|
1621:
1622: ;
1623: $todoAssertEquals $(@expr1073743563 "cppcheck-2.8/test/testleakautovar.cpp" $, 1623 $, "[test.cpp:4] memory leak" $, "" $, errout@var100 .@expr1736 str (@expr1737 ) $) ;
1624: }
1625:
1626: void ifelse14 ( ) {
1627: $check_ $(@expr1073743566 "cppcheck-2.8/test/testleakautovar.cpp" $, 1627 $, "char* f() {\n    char* buf = malloc(10);\n    if (buf == (char*)NULL)\n        return NULL;\n    return buf;\n}" $)
1628:
|
1631:
1632: ;
1633: $if $(@expr1073743567 $!@expr1073743568 $assertEquals $(@expr1073743569 "cppcheck-2.8/test/testleakautovar.cpp" $, 1633 $, "" $, errout@var100 .@expr1073743570 str (@expr1073743571 ) $) $) { $return ; }
1634: }
1635:
1636: void ifelse15 ( ) {
1637: $check_ $(@expr1073743572 "cppcheck-2.8/test/testleakautovar.cpp" $, 1637 $, "struct SSS { int a; };\nSSS* global_ptr;\nvoid test_alloc() {\n   if ( global_ptr = new SSS()) {}\n   return;\n}" , true $)
1638:
|
1641:
1642: ;
1643: $if $(@expr1073743573 $!@expr1073743574 $assertEquals $(@expr1073743575 "cppcheck-2.8/test/testleakautovar.cpp" $, 1643 $, "" $, errout@var100 .@expr1752 str (@expr1753 ) $) $) { $return ; }
1644:
1645: $check_ $(@expr1073743578 "cppcheck-2.8/test/testleakautovar.cpp" $, 1645 $, "FILE* hFile;\nint openFile( void ) {\n   if ((hFile = fopen(\"1.txt\", \"wb\" )) == NULL) return 0;\n   return 1;\n}" $)
1646:
1647:
1648:
1649: ;
1650: $if $(@expr1073743579 $!@expr1073743580 $assertEquals $(@expr1073743581 "cppcheck-2.8/test/testleakautovar.cpp" $, 1650 $, "" $, errout@var100 .@expr1752 str (@expr1753 ) $) $) { $return ; }
1651: }
1652:
1653: void ifelse16 ( ) {
1654: $check_ $(@expr1073743584 "cppcheck-2.8/test/testleakautovar.cpp" $, 1654 $, "void f(void) {\n    char *p;\n    if(p = malloc(4), p == NULL)\n        return;\n    free(p);\n    return;\n}" $)
1655:
|
1659:
1660: ;
1661: $if $(@expr1073743585 $!@expr1073743586 $assertEquals $(@expr1073743587 "cppcheck-2.8/test/testleakautovar.cpp" $, 1661 $, "" $, errout@var100 .@expr1764 str (@expr1765 ) $) $) { $return ; }
1662:
1663: $check_ $(@expr1073743590 "cppcheck-2.8/test/testleakautovar.cpp" $, 1663 $, "void f(void) {\n    char *p, q;\n    if(p = malloc(4), q = 1, p == NULL)\n        return;\n    free(p);\n    return;\n}" $)
1664:
|
1668:
1669: ;
1670: $if $(@expr1073743591 $!@expr1073743592 $assertEquals $(@expr1073743593 "cppcheck-2.8/test/testleakautovar.cpp" $, 1670 $, "" $, errout@var100 .@expr1764 str (@expr1765 ) $) $) { $return ; }
1671: }
1672:
1673: void ifelse17 ( ) {
1674: $check_ $(@expr1073743596 "cppcheck-2.8/test/testleakautovar.cpp" $, 1674 $, "int *f() {\n    int *p = realloc(nullptr, 10);\n    if (!p)\n        return NULL;\n    return p;\n}" $)
1675:
|
1678:
1679: ;
1680: $if $(@expr1073743597 $!@expr1073743598 $assertEquals $(@expr1073743599 "cppcheck-2.8/test/testleakautovar.cpp" $, 1680 $, "" $, errout@var100 .@expr1776 str (@expr1777 ) $) $) { $return ; }
1681:
1682: $check_ $(@expr1073743602 "cppcheck-2.8/test/testleakautovar.cpp" $, 1682 $, "int *f() {\n    int *p = realloc(nullptr, 10);\n    if (!!(!p))\n        return NULL;\n    return p;\n}" $)
1683:
|
1686:
1687: ;
1688: $if $(@expr1073743603 $!@expr1073743604 $assertEquals $(@expr1073743605 "cppcheck-2.8/test/testleakautovar.cpp" $, 1688 $, "" $, errout@var100 .@expr1776 str (@expr1777 ) $) $) { $return ; }
1689: }
1690:
1691: void ifelse18 ( ) {
1692: $check_ $(@expr1073743608 "cppcheck-2.8/test/testleakautovar.cpp" $, 1692 $, "void f() {\n    void * p = malloc(10);\n    void * q = realloc(p, 20);\n    if (q == 0)\n        return;\n    free(q);\n}" $)
1693:
|
1697:
1698: ;
1699: $if $(@expr1073743609 $!@expr1073743610 $assertEquals $(@expr1073743611 "cppcheck-2.8/test/testleakautovar.cpp" $, 1699 $, "[test.c:5]: (error) Memory leak: p\n" $, errout@var100 .@expr1788 str (@expr1789 ) $) $) { $return ; }
1700:
1701: $check_ $(@expr1073743614 "cppcheck-2.8/test/testleakautovar.cpp" $, 1701 $, "void f() {\n    void * p = malloc(10);\n    void * q = realloc(p, 20);\n    if (q != 0) {\n        free(q);\n        return;\n    } else\n        return;\n}" $)
1702:
|
1708:
1709: ;
1710: $if $(@expr1073743615 $!@expr1073743616 $assertEquals $(@expr1073743617 "cppcheck-2.8/test/testleakautovar.cpp" $, 1710 $, "[test.c:8]: (error) Memory leak: p\n" $, errout@var100 .@expr1788 str (@expr1789 ) $) $) { $return ; }
1711: }
1712:
1713: void ifelse19 ( ) {
1714: $check_ $(@expr1073743620 "cppcheck-2.8/test/testleakautovar.cpp" $, 1714 $, "void f() {\n    static char * a;\n    char * b = realloc(a, 10);\n    if (!b)\n        return;\n    a = b;\n}" $)
1715:
|
1719:
1720: ;
1721: $if $(@expr1073743621 $!@expr1073743622 $assertEquals $(@expr1073743623 "cppcheck-2.8/test/testleakautovar.cpp" $, 1721 $, "" $, errout@var100 .@expr1073743624 str (@expr1073743625 ) $) $) { $return ; }
1722: }
1723:
1724: void ifelse20 ( ) {
1725: $check_ $(@expr1073743626 "cppcheck-2.8/test/testleakautovar.cpp" $, 1725 $, "void f() {\n    if (x > 0)\n        void * p1 = malloc(5);\n    else\n        void * p2 = malloc(2);\n    return;\n}" $)
1726:
|
1730:
1731: ;
1732: $if $(@expr1073743627 $!@expr1073743628 $assertEquals $(@expr1073743629 "cppcheck-2.8/test/testleakautovar.cpp" $, 1732 $, "[test.c:3]: (error) Memory leak: p1\n[test.c:5]: (error) Memory leak: p2\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return
1733: ; }
1734:
1735: $check_ $(@expr1073743632 "cppcheck-2.8/test/testleakautovar.cpp" $, 1735 $, "void f() {\n    if (x > 0)\n        void * p1 = malloc(5);\n    else\n        void * p2 = malloc(2);\n}" $)
1736:
|
1739:
1740: ;
1741: $if $(@expr1073743633 $!@expr1073743634 $assertEquals $(@expr1073743635 "cppcheck-2.8/test/testleakautovar.cpp" $, 1741 $, "[test.c:3]: (error) Memory leak: p1\n[test.c:5]: (error) Memory leak: p2\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return
1742: ; }
1743: }
1744:
1745: void ifelse21 ( ) {
1746: $check_ $(@expr1073743638 "cppcheck-2.8/test/testleakautovar.cpp" $, 1746 $, "void f() {\n    if (y) {\n        void * p;\n        if (x > 0)\n            p = malloc(5);\n    }\n    return;\n}" $)
1747:
|
1752:
1753: ;
1754: $if $(@expr1073743639 $!@expr1073743640 $assertEquals $(@expr1073743641 "cppcheck-2.8/test/testleakautovar.cpp" $, 1754 $, "[test.c:6]: (error) Memory leak: p\n" $, errout@var100 .@expr1073743642 str (@expr1073743643 ) $) $) { $return ; }
1755: }
1756:
1757: void ifelse22 ( ) {
1758: $check_ $(@expr1073743644 "cppcheck-2.8/test/testleakautovar.cpp" $, 1758 $, "int f(const char * pathname, int flags) {\n    int fd = socket(pathname, flags);\n    if (fd >= 0)\n        return fd;\n    return -1;\n}" $)
1759:
|
1762:
1763: ;
1764: $if $(@expr1073743645 $!@expr1073743646 $assertEquals $(@expr1073743647 "cppcheck-2.8/test/testleakautovar.cpp" $, 1764 $, "" $, errout@var100 .@expr1824 str (@expr1825 ) $) $) { $return ; }
1765:
1766: $check_ $(@expr1073743650 "cppcheck-2.8/test/testleakautovar.cpp" $, 1766 $, "int f(const char * pathname, int flags) {\n    int fd = socket(pathname, flags);\n    if (fd <= -1)\n        return -1;\n    return fd;\n}" $)
1767:
|
1770:
1771: ;
1772: $if $(@expr1073743651 $!@expr1073743652 $assertEquals $(@expr1073743653 "cppcheck-2.8/test/testleakautovar.cpp" $, 1772 $, "" $, errout@var100 .@expr1824 str (@expr1825 ) $) $) { $return ; }
1773: }
1774:
1775: void ifelse23 ( ) {
1776: $check_ $(@expr1073743656 "cppcheck-2.8/test/testleakautovar.cpp" $, 1776 $, "void f() {\n    if (FILE* fp = fopen(\"x\", \"r\")) {}\n}\n" $)
1777:
1778: ;
1779: $if $(@expr1073743657 $!@expr1073743658 $assertEquals $(@expr1073743659 "cppcheck-2.8/test/testleakautovar.cpp" $, 1779 $, "[test.c:2]: (error) Resource leak: fp\n" $, errout@var100 .@expr1073743660 str (@expr1073743661 ) $) $) { $return ; }
1780: }
1781:
1782: void ifelse24 ( ) {
1783: Settings s@var127 ;
1784: $do ${ $if $(@expr1073743662 s@var127 .@expr1839 library@var128 $.@expr1073743664 $load $(@expr1073743665 $exename@var11 $.@expr1073743666 $c_str $(@expr1073743667 $) $, "std.cfg" $) $.@expr1073743668 $errorcode $!=@expr1073743669 $Library $::@expr1073743670 $ErrorCode $::@expr1073743671 $OK $) ${ $complainMissingLib $(@expr1073743672 "std.cfg" $) $; $return $; $} $} $while $(@expr1073743673 $false $) ;
1785: $do ${ $if $(@expr1073743674 s@var127 .@expr1839 library@var128 $.@expr1073743676 $load $(@expr1073743677 $exename@var11 $.@expr1073743678 $c_str $(@expr1073743679 $) $, "posix.cfg" $) $.@expr1073743680 $errorcode $!=@expr1073743681 $Library $::@expr1073743682 $ErrorCode $::@expr1073743683 $OK $) ${ $complainMissingLib $(@expr1073743684 "posix.cfg" $) $; $return $; $} $} $while $(@expr1073743685 $false $) ;
1786:
1787: $check_ $(@expr1073743686 "cppcheck-2.8/test/testleakautovar.cpp" $, 1787 $, "void f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp;\n    if (NULL == x || NULL == (fp = fopen(temp, \"rt\")))\n        return;\n}\n" , s@var127 $)
1788:
|
1791:
1792: ;
1793: $if $(@expr1073743687 $!@expr1073743688 $assertEquals $(@expr1073743689 "cppcheck-2.8/test/testleakautovar.cpp" $, 1793 $, "[test.cpp:5]: (error) Memory leak: temp\n[test.cpp:6]: (error) Memory leak: temp\n[test.cpp:6]: (error) Resource leak: fp\n" $, errout@var100 .@expr1866 str (@expr1867 ) $) $) { $return
1794:
1795:
1796: ; }
1797:
1798: $check_ $(@expr1073743692 "cppcheck-2.8/test/testleakautovar.cpp" $, 1798 $, "FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = fopen(temp, \"rt\");\n    return fp;\n}\n" , s@var127 $)
1799:
1800:
1801:
1802: ;
1803: $if $(@expr1073743693 $!@expr1073743694 $assertEquals $(@expr1073743695 "cppcheck-2.8/test/testleakautovar.cpp" $, 1803 $, "[test.cpp:4]: (error) Memory leak: temp\n" $, errout@var100 .@expr1866 str (@expr1867 ) $) $) { $return ; }
1804:
1805: $check_ $(@expr1073743698 "cppcheck-2.8/test/testleakautovar.cpp" $, 1805 $, "FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = NULL;\n    fopen_s(&fp, temp, \"rt\");\n    return fp;\n}\n" , s@var127 $)
1806:
|
1809:
1810: ;
1811: $if $(@expr1073743699 $!@expr1073743700 $assertEquals $(@expr1073743701 "cppcheck-2.8/test/testleakautovar.cpp" $, 1811 $, "[test.cpp:5]: (error) Memory leak: temp\n" $, errout@var100 .@expr1866 str (@expr1867 ) $) $) { $return ; }
1812:
1813: $check_ $(@expr1073743704 "cppcheck-2.8/test/testleakautovar.cpp" $, 1813 $, "void f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = fopen(\"a.txt\", \"rb\");\n    if (fp)\n        freopen(temp, \"rt\", fp);\n}\n" , s@var127 $)
1814:
|
1817:
1818: ;
1819: $if $(@expr1073743705 $!@expr1073743706 $assertEquals $(@expr1073743707 "cppcheck-2.8/test/testleakautovar.cpp" $, 1819 $, "[test.cpp:6]: (error) Memory leak: temp\n[test.cpp:6]: (error) Resource leak: fp\n" $, errout@var100 .@expr1866 str (@expr1867 ) $) $) { $return
1820:
1821: ; }
1822:
1823: $check_ $(@expr1073743710 "cppcheck-2.8/test/testleakautovar.cpp" $, 1823 $, "FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    return fopen(temp, \"rt\");\n}\n" , s@var127 $)
1824:
1825:
1826: ;
1827: $todoAssertEquals $(@expr1073743711 "cppcheck-2.8/test/testleakautovar.cpp" $, 1827 $, "[test.cpp:3]: (error) Memory leak: temp\n" $, "" $, errout@var100 .@expr1866 str (@expr1867 ) $) ;
1828: }
1829:
1830: void switch1 ( ) {
1831: $check_ $(@expr1073743714 "cppcheck-2.8/test/testleakautovar.cpp" $, 1831 $, "void f() {\n    char *p = 0;\n    switch (x) {\n    case 123: p = malloc(100); break;\n    default: return;\n    }\n    free(p);\n}" $)
1832:
|
1837:
1838: ;
1839: $if $(@expr1073743715 $!@expr1073743716 $assertEquals $(@expr1073743717 "cppcheck-2.8/test/testleakautovar.cpp" $, 1839 $, "" $, errout@var100 .@expr1073743718 str (@expr1073743719 ) $) $) { $return ; }
1840: }
1841:
1842: void loop1 ( ) {
1843:
1844: $check_ $(@expr1073743720 "cppcheck-2.8/test/testleakautovar.cpp" $, 1844 $, "void f() {\n    char *p;\n    for (i=0;i<5;i++) { }\n    if (x) { free(p) }\n    else { a = p; }\n}" $)
1845:
|
1848:
1849: ;
1850: $if $(@expr1073743721 $!@expr1073743722 $assertEquals $(@expr1073743723 "cppcheck-2.8/test/testleakautovar.cpp" $, 1850 $, "" $, errout@var100 .@expr1073743724 str (@expr1073743725 ) $) $) { $return ; }
1851: }
1852:
1853: void mismatchAllocDealloc ( ) {
1854: $check_ $(@expr1073743726 "cppcheck-2.8/test/testleakautovar.cpp" $, 1854 $, "void f() {\n    FILE*f=fopen(fname,a);\n    free(f);\n}" $)
1855:
1856:
1857: ;
1858: $if $(@expr1073743727 $!@expr1073743728 $assertEquals $(@expr1073743729 "cppcheck-2.8/test/testleakautovar.cpp" $, 1858 $, "[test.c:2] -> [test.c:3]: (error) Mismatching allocation and deallocation: f\n" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return ; }
1859:
1860: $check_ $(@expr1073743732 "cppcheck-2.8/test/testleakautovar.cpp" $, 1860 $, "void f() {\n    FILE*f=fopen(fname,a);\n    free((void*)f);\n}" $)
1861:
1862:
1863: ;
1864: $if $(@expr1073743733 $!@expr1073743734 $assertEquals $(@expr1073743735 "cppcheck-2.8/test/testleakautovar.cpp" $, 1864 $, "[test.c:2] -> [test.c:3]: (error) Mismatching allocation and deallocation: f\n" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return ; }
1865:
1866: $check_ $(@expr1073743738 "cppcheck-2.8/test/testleakautovar.cpp" $, 1866 $, "void f() {\n    char *cPtr = new char[100];\n    delete[] cPtr;\n    cPtr = new char[100]('x');\n    delete[] cPtr;\n    cPtr = new char[100];\n    delete cPtr;\n}" , true $)
1867:
|
1872:
1873: ;
1874: $if $(@expr1073743739 $!@expr1073743740 $assertEquals $(@expr1073743741 "cppcheck-2.8/test/testleakautovar.cpp" $, 1874 $, "[test.cpp:6] -> [test.cpp:7]: (error) Mismatching allocation and deallocation: cPtr\n" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return ; }
1875:
1876: $check_ $(@expr1073743744 "cppcheck-2.8/test/testleakautovar.cpp" $, 1876 $, "void f() {\n    char *cPtr = new char[100];\n    free(cPtr);\n}" , true $)
1877:
1878:
1879: ;
1880: $if $(@expr1073743745 $!@expr1073743746 $assertEquals $(@expr1073743747 "cppcheck-2.8/test/testleakautovar.cpp" $, 1880 $, "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: cPtr\n" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return ; }
1881:
1882: $check_ $(@expr1073743750 "cppcheck-2.8/test/testleakautovar.cpp" $, 1882 $, "void f() {\n    char *cPtr = new (buf) char[100];\n}" , true $)
1883:
1884: ;
1885: $if $(@expr1073743751 $!@expr1073743752 $assertEquals $(@expr1073743753 "cppcheck-2.8/test/testleakautovar.cpp" $, 1885 $, "" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return ; }
1886:
1887: $check_ $(@expr1073743756 "cppcheck-2.8/test/testleakautovar.cpp" $, 1887 $, "void f() {\n    int * i = new int[1];\n    std::unique_ptr<int> x(i);\n}\n" , true $)
1888:
1889:
1890: ;
1891: $if $(@expr1073743757 $!@expr1073743758 $assertEquals $(@expr1073743759 "cppcheck-2.8/test/testleakautovar.cpp" $, 1891 $, "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: i\n" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return ; }
1892:
1893: $check_ $(@expr1073743762 "cppcheck-2.8/test/testleakautovar.cpp" $, 1893 $, "void f() {\n    int * i = new int;\n    std::unique_ptr<int[]> x(i);\n}\n" , true $)
1894:
1895:
1896: ;
1897: $if $(@expr1073743763 $!@expr1073743764 $assertEquals $(@expr1073743765 "cppcheck-2.8/test/testleakautovar.cpp" $, 1897 $, "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: i\n" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return ; }
1898:
1899: $check_ $(@expr1073743768 "cppcheck-2.8/test/testleakautovar.cpp" $, 1899 $, "void f() {\n   void* a = malloc(1);\n   void* b = freopen(f, p, a);\n   free(b);\n}" $)
1900:
1901:
1902:
1903: ;
1904: $if $(@expr1073743769 $!@expr1073743770 $assertEquals $(@expr1073743771 "cppcheck-2.8/test/testleakautovar.cpp" $, 1904 $, "[test.c:2] -> [test.c:3]: (error) Mismatching allocation and deallocation: a\n[test.c:3] -> [test.c:4]: (error) Mismatching allocation and deallocation: b\n" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return
1905: ; }
1906:
1907: $check_ $(@expr1073743774 "cppcheck-2.8/test/testleakautovar.cpp" $, 1907 $, "void f() {\n   void* a;\n   void* b = realloc(a, 10);\n   free(b);\n}" $)
1908:
1909:
1910:
1911: ;
1912: $if $(@expr1073743775 $!@expr1073743776 $assertEquals $(@expr1073743777 "cppcheck-2.8/test/testleakautovar.cpp" $, 1912 $, "" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return ; }
1913:
1914: $check_ $(@expr1073743780 "cppcheck-2.8/test/testleakautovar.cpp" $, 1914 $, "void f() {\n   int * i = new int;\n   int * j = realloc(i, 2 * sizeof(int));\n   delete[] j;\n}" , true $)
1915:
1916:
1917:
1918: ;
1919: $if $(@expr1073743781 $!@expr1073743782 $assertEquals $(@expr1073743783 "cppcheck-2.8/test/testleakautovar.cpp" $, 1919 $, "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: i\n[test.cpp:3] -> [test.cpp:4]: (error) Mismatching allocation and deallocation: j\n" $, errout@var100 .@expr1906 str (@expr1907 ) $) $) { $return
1920: ; }
1921: }
1922:
1923: void smartPointerDeleter ( ) {
1924: $check_ $(@expr1073743786 "cppcheck-2.8/test/testleakautovar.cpp" $, 1924 $, "void f() {\n    FILE*f=fopen(fname,a);\n    std::unique_ptr<FILE> fp{f};\n}" , true $)
1925:
1926:
1927: ;
1928: $if $(@expr1073743787 $!@expr1073743788 $assertEquals $(@expr1073743789 "cppcheck-2.8/test/testleakautovar.cpp" $, 1928 $, "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: f\n" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
1929:
1930: $check_ $(@expr1073743792 "cppcheck-2.8/test/testleakautovar.cpp" $, 1930 $, "void f() {\n    FILE*f=fopen(fname,a);\n    std::unique_ptr<FILE, decltype(&fclose)> fp{f, &fclose};\n}" , true $)
1931:
1932:
1933: ;
1934: $if $(@expr1073743793 $!@expr1073743794 $assertEquals $(@expr1073743795 "cppcheck-2.8/test/testleakautovar.cpp" $, 1934 $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
1935:
1936: $check_ $(@expr1073743798 "cppcheck-2.8/test/testleakautovar.cpp" $, 1936 $, "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, &fclose};\n}" , true $)
1937:
1938:
1939: ;
1940: $if $(@expr1073743799 $!@expr1073743800 $assertEquals $(@expr1073743801 "cppcheck-2.8/test/testleakautovar.cpp" $, 1940 $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
1941:
1942: $check_ $(@expr1073743804 "cppcheck-2.8/test/testleakautovar.cpp" $, 1942 $, "struct deleter { void operator()(FILE* f) { fclose(f); }};\nvoid f() {\n    FILE*f=fopen(fname,a);\n    std::unique_ptr<FILE, deleter> fp{f};\n}" , true $)
1943:
1944:
1945:
1946: ;
1947: $if $(@expr1073743805 $!@expr1073743806 $assertEquals $(@expr1073743807 "cppcheck-2.8/test/testleakautovar.cpp" $, 1947 $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
1948:
1949: $check_ $(@expr1073743810 "cppcheck-2.8/test/testleakautovar.cpp" $, 1949 $, "int * create();\nvoid destroy(int * x);\nvoid f() {\n    int x * = create()\n    std::unique_ptr<int, decltype(&destroy)> xp{x, &destroy()};\n}\n" , true $)
1950:
|
1953:
1954: ;
1955: $if $(@expr1073743811 $!@expr1073743812 $assertEquals $(@expr1073743813 "cppcheck-2.8/test/testleakautovar.cpp" $, 1955 $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
1956:
1957: $check_ $(@expr1073743816 "cppcheck-2.8/test/testleakautovar.cpp" $, 1957 $, "int * create();\nvoid destroy(int * x);\nvoid f() {\n    int x * = create()\n    std::unique_ptr<int, decltype(&destroy)> xp(x, &destroy());\n}\n" , true $)
1958:
|
1961:
1962: ;
1963: $if $(@expr1073743817 $!@expr1073743818 $assertEquals $(@expr1073743819 "cppcheck-2.8/test/testleakautovar.cpp" $, 1963 $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
1964:
1965: $check_ $(@expr1073743822 "cppcheck-2.8/test/testleakautovar.cpp" $, 1965 $, "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, [](FILE* x) { fclose(x); }};\n}" , true $)
1966:
1967:
1968: ;
1969: $if $(@expr1073743823 $!@expr1073743824 $assertEquals $(@expr1073743825 "cppcheck-2.8/test/testleakautovar.cpp" $, 1969 $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
1970:
1971: $check_ $(@expr1073743828 "cppcheck-2.8/test/testleakautovar.cpp" $, 1971 $, "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, +[](FILE* x) { fclose(x); }};\n}" , true $)
1972:
1973:
1974: ;
1975: $if $(@expr1073743829 $!@expr1073743830 $assertEquals $(@expr1073743831 "cppcheck-2.8/test/testleakautovar.cpp" $, 1975 $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
1976:
1977: $check_ $(@expr1073743834 "cppcheck-2.8/test/testleakautovar.cpp" $, 1977 $, "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, [](FILE* x) { free(f); }};\n}" , true $)
1978:
1979:
1980: ;
1981: $todoAssertEquals $(@expr1073743835 "cppcheck-2.8/test/testleakautovar.cpp" $, 1981 $, "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: f\n" $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $)
1982: ;
1983:
1984: $check_ $(@expr1073743838 "cppcheck-2.8/test/testleakautovar.cpp" $, 1984 $, "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, [](FILE* x) {}};\n}" , true $)
1985:
1986:
1987: ;
1988: $todoAssertEquals $(@expr1073743839 "cppcheck-2.8/test/testleakautovar.cpp" $, 1988 $, "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: f\n" $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $)
1989: ;
1990:
1991: $check_ $(@expr1073743842 "cppcheck-2.8/test/testleakautovar.cpp" $, 1991 $, "class C;\nvoid f() {\n  C* c = new C{};\n  std::shared_ptr<C> a{c, [](C*) {}};\n}" , true $)
1992:
1993:
1994:
1995: ;
1996: $if $(@expr1073743843 $!@expr1073743844 $assertEquals $(@expr1073743845 "cppcheck-2.8/test/testleakautovar.cpp" $, 1996 $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
1997:
1998: $check_ $(@expr1073743848 "cppcheck-2.8/test/testleakautovar.cpp" $, 1998 $, "class C;\nvoid f() {\n  C* c = new C{};\n  std::shared_ptr<C> a{c, [](C* x) { delete x; }};\n}" , true $)
1999:
2000:
2001:
2002: ;
2003: $if $(@expr1073743849 $!@expr1073743850 $assertEquals $(@expr1073743851 "cppcheck-2.8/test/testleakautovar.cpp" $, 2003 $, "" $, errout@var100 .@expr1966 str (@expr1967 ) $) $) { $return ; }
2004: }
2005: void smartPointerRelease ( ) {
2006: $check_ $(@expr1073743854 "cppcheck-2.8/test/testleakautovar.cpp" $, 2006 $, "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x(i);\n    x.release();\n    delete i;\n}\n" , true $)
2007:
|
2010:
2011: ;
2012: $if $(@expr1073743855 $!@expr1073743856 $assertEquals $(@expr1073743857 "cppcheck-2.8/test/testleakautovar.cpp" $, 2012 $, "" $, errout@var100 .@expr2034 str (@expr2035 ) $) $) { $return ; }
2013:
2014: $check_ $(@expr1073743860 "cppcheck-2.8/test/testleakautovar.cpp" $, 2014 $, "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x(i);\n    x.release();\n}\n" , true $)
2015:
2016:
2017:
2018: ;
2019: $if $(@expr1073743861 $!@expr1073743862 $assertEquals $(@expr1073743863 "cppcheck-2.8/test/testleakautovar.cpp" $, 2019 $, "[test.cpp:5]: (error) Memory leak: i\n" $, errout@var100 .@expr2034 str (@expr2035 ) $) $) { $return ; }
2020: }
2021:
2022: void return1 ( ) {
2023: $check_ $(@expr1073743866 "cppcheck-2.8/test/testleakautovar.cpp" $, 2023 $, "int f() {\n    char *p = malloc(100);\n    return 123;\n}" $)
2024:
2025:
2026: ;
2027: $if $(@expr1073743867 $!@expr1073743868 $assertEquals $(@expr1073743869 "cppcheck-2.8/test/testleakautovar.cpp" $, 2027 $, "[test.c:3]: (error) Memory leak: p\n" $, errout@var100 .@expr1073743870 str (@expr1073743871 ) $) $) { $return ; }
2028: }
2029:
2030: void return2 ( ) {
2031: $check_ $(@expr1073743872 "cppcheck-2.8/test/testleakautovar.cpp" $, 2031 $, "char *f() {\n    char *p = malloc(100);\n    return p;\n}" $)
2032:
2033:
2034: ;
2035: $if $(@expr1073743873 $!@expr1073743874 $assertEquals $(@expr1073743875 "cppcheck-2.8/test/testleakautovar.cpp" $, 2035 $, "" $, errout@var100 .@expr1073743876 str (@expr1073743877 ) $) $) { $return ; }
2036: }
2037:
2038: void return3 ( ) {
2039: $check_ $(@expr1073743878 "cppcheck-2.8/test/testleakautovar.cpp" $, 2039 $, "struct dev * f() {\n    struct ABC *abc = malloc(100);\n    return &abc->dev;\n}" $)
2040:
2041:
2042: ;
2043: $if $(@expr1073743879 $!@expr1073743880 $assertEquals $(@expr1073743881 "cppcheck-2.8/test/testleakautovar.cpp" $, 2043 $, "" $, errout@var100 .@expr1073743882 str (@expr1073743883 ) $) $) { $return ; }
2044: }
2045:
2046: void return4 ( ) {
2047:
2048: $check_ $(@expr1073743884 "cppcheck-2.8/test/testleakautovar.cpp" $, 2048 $, "void f(char *p, int x) {\n    if (x==12) {\n        free(p);\n        throw 1;\n    }\n    free(p);\n}" , true $)
2049:
|
2053:
2054: ;
2055: $if $(@expr1073743885 $!@expr1073743886 $assertEquals $(@expr1073743887 "cppcheck-2.8/test/testleakautovar.cpp" $, 2055 $, "" $, errout@var100 .@expr2064 str (@expr2065 ) $) $) { $return ; }
2056:
2057: $check_ $(@expr1073743890 "cppcheck-2.8/test/testleakautovar.cpp" $, 2057 $, "void f(char *p, int x) {\n    if (x==12) {\n        delete p;\n        throw 1;\n    }\n    delete p;\n}" , true $)
2058:
|
2062:
2063: ;
2064: $if $(@expr1073743891 $!@expr1073743892 $assertEquals $(@expr1073743893 "cppcheck-2.8/test/testleakautovar.cpp" $, 2064 $, "" $, errout@var100 .@expr2064 str (@expr2065 ) $) $) { $return ; }
2065:
2066: $check_ $(@expr1073743896 "cppcheck-2.8/test/testleakautovar.cpp" $, 2066 $, "void f(char *p, int x) {\n    if (x==12) {\n        delete [] p;\n        throw 1;\n    }\n    delete [] p;\n}" , true $)
2067:
|
2071:
2072: ;
2073: $if $(@expr1073743897 $!@expr1073743898 $assertEquals $(@expr1073743899 "cppcheck-2.8/test/testleakautovar.cpp" $, 2073 $, "" $, errout@var100 .@expr2064 str (@expr2065 ) $) $) { $return ; }
2074: }
2075:
2076: void return5 ( ) {
2077:
2078: $check_ $(@expr1073743902 "cppcheck-2.8/test/testleakautovar.cpp" $, 2078 $, "void f(int *p, int x) {\n    if (x != 0) {\n        free(p);\n    }\n    if (x != 0) {\n        return;\n    }\n    *p = 0;\n}" , true $)
2079:
|
2085:
2086: ;
2087: $if $(@expr1073743903 $!@expr1073743904 $assertEquals $(@expr1073743905 "cppcheck-2.8/test/testleakautovar.cpp" $, 2087 $, "" $, errout@var100 .@expr1073743906 str (@expr1073743907 ) $) $) { $return ; }
2088: }
2089:
2090: void return6 ( ) {
2091: $check_ $(@expr1073743908 "cppcheck-2.8/test/testleakautovar.cpp" $, 2091 $, "std::pair<char*, char*> f(size_t n) {\n   char* p = (char* )malloc(n);\n   return {p, p};\n}" , true $)
2092:
2093:
2094: ;
2095: $if $(@expr1073743909 $!@expr1073743910 $assertEquals $(@expr1073743911 "cppcheck-2.8/test/testleakautovar.cpp" $, 2095 $, "" $, errout@var100 .@expr1073743912 str (@expr1073743913 ) $) $) { $return ; }
2096: }
2097:
2098: void return7 ( ) {
2099: $check_ $(@expr1073743914 "cppcheck-2.8/test/testleakautovar.cpp" $, 2099 $, "uint8_t *f() {\n    void *x = malloc(1);\n    return (uint8_t *)x;\n}" , true $)
2100:
2101:
2102: ;
2103: $if $(@expr1073743915 $!@expr1073743916 $assertEquals $(@expr1073743917 "cppcheck-2.8/test/testleakautovar.cpp" $, 2103 $, "" $, errout@var100 .@expr2094 str (@expr2095 ) $) $) { $return ; }
2104:
2105: $check_ $(@expr1073743920 "cppcheck-2.8/test/testleakautovar.cpp" $, 2105 $, "uint8_t f() {\n    void *x = malloc(1);\n    return (uint8_t)x;\n}" , true $)
2106:
2107:
2108: ;
2109: $if $(@expr1073743921 $!@expr1073743922 $assertEquals $(@expr1073743923 "cppcheck-2.8/test/testleakautovar.cpp" $, 2109 $, "[test.cpp:3]: (error) Memory leak: x\n" $, errout@var100 .@expr2094 str (@expr2095 ) $) $) { $return ; }
2110:
2111: $check_ $(@expr1073743926 "cppcheck-2.8/test/testleakautovar.cpp" $, 2111 $, "void** f() {\n    void *x = malloc(1);\n    return (void**)x;\n}" , true $)
2112:
2113:
2114: ;
2115: $if $(@expr1073743927 $!@expr1073743928 $assertEquals $(@expr1073743929 "cppcheck-2.8/test/testleakautovar.cpp" $, 2115 $, "" $, errout@var100 .@expr2094 str (@expr2095 ) $) $) { $return ; }
2116:
2117: $check_ $(@expr1073743932 "cppcheck-2.8/test/testleakautovar.cpp" $, 2117 $, "void* f() {\n    void *x = malloc(1);\n    return (long long)x;\n}" , true $)
2118:
2119:
2120: ;
2121: $if $(@expr1073743933 $!@expr1073743934 $assertEquals $(@expr1073743935 "cppcheck-2.8/test/testleakautovar.cpp" $, 2121 $, "" $, errout@var100 .@expr2094 str (@expr2095 ) $) $) { $return ; }
2122:
2123: $check_ $(@expr1073743938 "cppcheck-2.8/test/testleakautovar.cpp" $, 2123 $, "void* f() {\n    void *x = malloc(1);\n    return (void*)(short)x;\n}" , true $)
2124:
2125:
2126: ;
2127: $if $(@expr1073743939 $!@expr1073743940 $assertEquals $(@expr1073743941 "cppcheck-2.8/test/testleakautovar.cpp" $, 2127 $, "[test.cpp:3]: (error) Memory leak: x\n" $, errout@var100 .@expr2094 str (@expr2095 ) $) $) { $return ; }
2128:
2129: $check_ $(@expr1073743944 "cppcheck-2.8/test/testleakautovar.cpp" $, 2129 $, "void* f() {\n    void *x = malloc(1);\n    return (mytype)x;\n}" , true $)
2130:
2131:
2132: ;
2133: $if $(@expr1073743945 $!@expr1073743946 $assertEquals $(@expr1073743947 "cppcheck-2.8/test/testleakautovar.cpp" $, 2133 $, "" $, errout@var100 .@expr2094 str (@expr2095 ) $) $) { $return ; }
2134:
2135: $check_ $(@expr1073743950 "cppcheck-2.8/test/testleakautovar.cpp" $, 2135 $, "void* f() {\n    void *x = malloc(1);\n    return (mytype)y;\n}" , true $)
2136:
2137:
2138: ;
2139: $if $(@expr1073743951 $!@expr1073743952 $assertEquals $(@expr1073743953 "cppcheck-2.8/test/testleakautovar.cpp" $, 2139 $, "[test.cpp:3]: (error) Memory leak: x\n" $, errout@var100 .@expr2094 str (@expr2095 ) $) $) { $return ; }
2140: }
2141:
2142: void return8 ( ) {
2143: $check_ $(@expr1073743956 "cppcheck-2.8/test/testleakautovar.cpp" $, 2143 $, "void* f() {\n    void *x = malloc(1);\n    return (x);\n}" , true $)
2144:
2145:
2146: ;
2147: $if $(@expr1073743957 $!@expr1073743958 $assertEquals $(@expr1073743959 "cppcheck-2.8/test/testleakautovar.cpp" $, 2147 $, "" $, errout@var100 .@expr2136 str (@expr2137 ) $) $) { $return ; }
2148:
2149: $check_ $(@expr1073743962 "cppcheck-2.8/test/testleakautovar.cpp" $, 2149 $, "void* f() {\n    void *x = malloc(1);\n    return ((x));\n}" , true $)
2150:
2151:
2152: ;
2153: $if $(@expr1073743963 $!@expr1073743964 $assertEquals $(@expr1073743965 "cppcheck-2.8/test/testleakautovar.cpp" $, 2153 $, "" $, errout@var100 .@expr2136 str (@expr2137 ) $) $) { $return ; }
2154:
2155: $check_ $(@expr1073743968 "cppcheck-2.8/test/testleakautovar.cpp" $, 2155 $, "void* f() {\n    void *x = malloc(1);\n    return ((((x))));\n}" , true $)
2156:
2157:
2158: ;
2159: $if $(@expr1073743969 $!@expr1073743970 $assertEquals $(@expr1073743971 "cppcheck-2.8/test/testleakautovar.cpp" $, 2159 $, "" $, errout@var100 .@expr2136 str (@expr2137 ) $) $) { $return ; }
2160:
2161: $check_ $(@expr1073743974 "cppcheck-2.8/test/testleakautovar.cpp" $, 2161 $, "char* f() {\n    void *x = malloc(1);\n    return (char*)(x);\n}" , true $)
2162:
2163:
2164: ;
2165: $if $(@expr1073743975 $!@expr1073743976 $assertEquals $(@expr1073743977 "cppcheck-2.8/test/testleakautovar.cpp" $, 2165 $, "" $, errout@var100 .@expr2136 str (@expr2137 ) $) $) { $return ; }
2166: }
2167:
2168: void return9 ( ) {
2169: $check_ $(@expr1073743980 "cppcheck-2.8/test/testleakautovar.cpp" $, 2169 $, "void* f() {\n    void *x = malloc (sizeof (struct alloc));\n    return x + sizeof (struct alloc);\n}" , true $)
2170:
2171:
2172: ;
2173: $if $(@expr1073743981 $!@expr1073743982 $assertEquals $(@expr1073743983 "cppcheck-2.8/test/testleakautovar.cpp" $, 2173 $, "" $, errout@var100 .@expr1073743984 str (@expr1073743985 ) $) $) { $return ; }
2174: }
2175:
2176: void test1 ( ) {
2177: $check_ $(@expr1073743986 "cppcheck-2.8/test/testleakautovar.cpp" $, 2177 $, "void f(double*&p) {\n    p = malloc(0x100);\n}" $)
2178:
2179: ;
2180: $if $(@expr1073743987 $!@expr1073743988 $assertEquals $(@expr1073743989 "cppcheck-2.8/test/testleakautovar.cpp" $, 2180 $, "" $, errout@var100 .@expr1073743990 str (@expr1073743991 ) $) $) { $return ; }
2181: }
2182:
2183: void test2 ( ) {
2184: $check_ $(@expr1073743992 "cppcheck-2.8/test/testleakautovar.cpp" $, 2184 $, "struct Fred {\n    char *p;\n    void f1() { free(p); }\n};" $)
2185:
2186:
2187: ;
2188: $if $(@expr1073743993 $!@expr1073743994 $assertEquals $(@expr1073743995 "cppcheck-2.8/test/testleakautovar.cpp" $, 2188 $, "" $, errout@var100 .@expr1073743996 str (@expr1073743997 ) $) $) { $return ; }
2189: }
2190:
2191: void test3 ( ) {
2192: $check_ $(@expr1073743998 "cppcheck-2.8/test/testleakautovar.cpp" $, 2192 $, "void f() {\n    char *&p = x();\n    p = malloc(10);\n};" $)
2193:
2194:
2195: ;
2196: $if $(@expr1073743999 $!@expr1073744000 $assertEquals $(@expr1073744001 "cppcheck-2.8/test/testleakautovar.cpp" $, 2196 $, "" $, errout@var100 .@expr1073744002 str (@expr1073744003 ) $) $) { $return ; }
2197: }
2198:
2199: void test4 ( ) {
2200: $check_ $(@expr1073744004 "cppcheck-2.8/test/testleakautovar.cpp" $, 2200 $, "void f() {\n    static char *p;\n    if (!p) p = malloc(10);\n    if (x) { free(p); p = 0; }\n};" $)
2201:
2202:
2203:
2204: ;
2205: $if $(@expr1073744005 $!@expr1073744006 $assertEquals $(@expr1073744007 "cppcheck-2.8/test/testleakautovar.cpp" $, 2205 $, "" $, errout@var100 .@expr1073744008 str (@expr1073744009 ) $) $) { $return ; }
2206: }
2207:
2208: void test5 ( ) {
2209: $check_ $(@expr1073744010 "cppcheck-2.8/test/testleakautovar.cpp" $, 2209 $, "void f() { Fred *p = malloc(10); }" , true $) ;
2210: $if $(@expr1073744011 $!@expr1073744012 $assertEquals $(@expr1073744013 "cppcheck-2.8/test/testleakautovar.cpp" $, 2210 $, "[test.cpp:1]: (error) Memory leak: p\n" $, errout@var100 .@expr2190 str (@expr2191 ) $) $) { $return ; }
2211:
2212: $check_ $(@expr1073744016 "cppcheck-2.8/test/testleakautovar.cpp" $, 2212 $, "void f() { Fred *p = malloc(10); }" , false $) ;
2213: $if $(@expr1073744017 $!@expr1073744018 $assertEquals $(@expr1073744019 "cppcheck-2.8/test/testleakautovar.cpp" $, 2213 $, "[test.c:1]: (error) Memory leak: p\n" $, errout@var100 .@expr2190 str (@expr2191 ) $) $) { $return ; }
2214:
2215: $check_ $(@expr1073744022 "cppcheck-2.8/test/testleakautovar.cpp" $, 2215 $, "void f() { Fred *p = new Fred; }" , true $) ;
2216: $if $(@expr1073744023 $!@expr1073744024 $assertEquals $(@expr1073744025 "cppcheck-2.8/test/testleakautovar.cpp" $, 2216 $, "" $, errout@var100 .@expr2190 str (@expr2191 ) $) $) { $return ; }
2217:
2218: $check_ $(@expr1073744028 "cppcheck-2.8/test/testleakautovar.cpp" $, 2218 $, "void f() { Fred fred = malloc(10); }" , true $) ;
2219: $if $(@expr1073744029 $!@expr1073744030 $assertEquals $(@expr1073744031 "cppcheck-2.8/test/testleakautovar.cpp" $, 2219 $, "" $, errout@var100 .@expr2190 str (@expr2191 ) $) $) { $return ; }
2220: }
2221:
2222: void throw1 ( ) {
2223: $check_ $(@expr1073744034 "cppcheck-2.8/test/testleakautovar.cpp" $, 2223 $, "void f() {\n    char *p = malloc(10);\n    throw 123;\n}" , true $)
2224:
2225:
2226: ;
2227: $if $(@expr1073744035 $!@expr1073744036 $assertEquals $(@expr1073744037 "cppcheck-2.8/test/testleakautovar.cpp" $, 2227 $, "[test.cpp:3]: (error) Memory leak: p\n" $, errout@var100 .@expr2214 str (@expr2215 ) $) $) { $return ; }
2228:
2229: $check_ $(@expr1073744040 "cppcheck-2.8/test/testleakautovar.cpp" $, 2229 $, "void f() {\n    char *p;\n    try {\n        p = malloc(10);\n        throw 123;\n    } catch (...) { }\n    free(p);\n}" , true $)
2230:
|
2235:
2236: ;
2237: $if $(@expr1073744041 $!@expr1073744042 $assertEquals $(@expr1073744043 "cppcheck-2.8/test/testleakautovar.cpp" $, 2237 $, "" $, errout@var100 .@expr2214 str (@expr2215 ) $) $) { $return ; }
2238: }
2239:
2240: void throw2 ( ) {
2241: $check_ $(@expr1073744046 "cppcheck-2.8/test/testleakautovar.cpp" $, 2241 $, "namespace NS {\n    class Except {\n    };\n}\nvoid foo(int i)\n{\n    int *pi = new int;\n    if (i == 42) {\n        delete pi;\n        throw ::NS::Except();\n    }\n    delete pi;\n}" , true $)
2242:
|
2252:
2253: ;
2254: $if $(@expr1073744047 $!@expr1073744048 $assertEquals $(@expr1073744049 "cppcheck-2.8/test/testleakautovar.cpp" $, 2254 $, "" $, errout@var100 .@expr1073744050 str (@expr1073744051 ) $) $) { $return ; }
2255: }
2256:
2257: void configuration1 ( ) {
2258:
|
2262:
2263: $check_ $(@expr1073744052 "cppcheck-2.8/test/testleakautovar.cpp" $, 2263 $, "void f() {\n    char *p = malloc(10);\n    x(p);\n}" $)
2264:
2265:
2266: ;
2267: $if $(@expr1073744053 $!@expr1073744054 $assertEquals $(@expr1073744055 "cppcheck-2.8/test/testleakautovar.cpp" $, 2267 $, "[test.c:3]: (information) --check-library: Function x() should have <noreturn> configuration\n[test.c:4]: (information) --check-library: Function x() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr1073744056 str (@expr1073744057 ) $) $) { $return
2268:
2269: ; }
2270: }
2271:
2272: void configuration2 ( ) {
2273:
2274:
2275: $check_ $(@expr1073744058 "cppcheck-2.8/test/testleakautovar.cpp" $, 2275 $, "void f() {\n    char *p = malloc(10);\n    x(&p);\n}" $)
2276:
2277:
2278: ;
2279: $if $(@expr1073744059 $!@expr1073744060 $assertEquals $(@expr1073744061 "cppcheck-2.8/test/testleakautovar.cpp" $, 2279 $, "[test.c:3]: (information) --check-library: Function x() should have <noreturn> configuration\n[test.c:4]: (information) --check-library: Function x() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr1073744062 str (@expr1073744063 ) $) $) { $return
2280:
2281: ; }
2282: }
2283:
2284: void configuration3 ( ) {
2285: const char * code@var129 ; code@var129 =@expr1073744064 "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { }\n}"
2286:
2287:
2288: ;
2289: $check_ $(@expr1073744065 "cppcheck-2.8/test/testleakautovar.cpp" $, 2289 $, code@var129 $) ;
2290: $if $(@expr1073744066 $!@expr1073744067 $assertEquals $(@expr1073744068 "cppcheck-2.8/test/testleakautovar.cpp" $, 2290 $, "[test.c:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr2245 str (@expr2246 ) $) $) { $return ; }
2291: $check_ $(@expr1073744071 "cppcheck-2.8/test/testleakautovar.cpp" $, 2291 $, code@var129 , true $) ;
2292: $if $(@expr1073744072 $!@expr1073744073 $assertEquals $(@expr1073744074 "cppcheck-2.8/test/testleakautovar.cpp" $, 2292 $, "[test.cpp:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr2245 str (@expr2246 ) $) $) { $return ; }
2293:
2294: code@var129 =@expr1073744077 "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { return; }\n}"
2295:
2296:
2297: ;
2298: $check_ $(@expr1073744078 "cppcheck-2.8/test/testleakautovar.cpp" $, 2298 $, code@var129 $) ;
2299: $if $(@expr1073744079 $!@expr1073744080 $assertEquals $(@expr1073744081 "cppcheck-2.8/test/testleakautovar.cpp" $, 2299 $, "[test.c:3]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n[test.c:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr2245 str (@expr2246 ) $) $) { $return
2300:
2301: ; }
2302: $check_ $(@expr1073744084 "cppcheck-2.8/test/testleakautovar.cpp" $, 2302 $, code@var129 , true $) ;
2303: $if $(@expr1073744085 $!@expr1073744086 $assertEquals $(@expr1073744087 "cppcheck-2.8/test/testleakautovar.cpp" $, 2303 $, "[test.cpp:3]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n[test.cpp:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr2245 str (@expr2246 ) $) $) { $return
2304:
2305: ; }
2306: }
2307:
2308: void configuration4 ( ) {
2309: $check_ $(@expr1073744090 "cppcheck-2.8/test/testleakautovar.cpp" $, 2309 $, "void f() {\n    char *p = malloc(10);\n    int ret = set_data(p);\n    return ret;\n}" $)
2310:
2311:
2312:
2313: ;
2314: $if $(@expr1073744091 $!@expr1073744092 $assertEquals $(@expr1073744093 "cppcheck-2.8/test/testleakautovar.cpp" $, 2314 $, "[test.c:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr1073744094 str (@expr1073744095 ) $) $) { $return ; }
2315: }
2316:
2317: void ptrptr ( ) {
2318: $check_ $(@expr1073744096 "cppcheck-2.8/test/testleakautovar.cpp" $, 2318 $, "void f() {\n    char **p = malloc(10);\n}" $)
2319:
2320: ;
2321: $if $(@expr1073744097 $!@expr1073744098 $assertEquals $(@expr1073744099 "cppcheck-2.8/test/testleakautovar.cpp" $, 2321 $, "[test.c:3]: (error) Memory leak: p\n" $, errout@var100 .@expr1073744100 str (@expr1073744101 ) $) $) { $return ; }
2322: }
2323:
2324: void nestedAllocation ( ) {
2325: $check_ $(@expr1073744102 "cppcheck-2.8/test/testleakautovar.cpp" $, 2325 $, "void QueueDSMCCPacket(unsigned char *data, int length) {\n    unsigned char *dataCopy = malloc(length * sizeof(unsigned char));\n    m_dsmccQueue.enqueue(new DSMCCPacket(dataCopy));\n}" , true $)
2326:
2327:
2328: ;
2329: $if $(@expr1073744103 $!@expr1073744104 $assertEquals $(@expr1073744105 "cppcheck-2.8/test/testleakautovar.cpp" $, 2329 $, "[test.cpp:4]: (information) --check-library: Function DSMCCPacket() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr2282 str (@expr2283 ) $) $) { $return ; }
2330:
2331: $check_ $(@expr1073744108 "cppcheck-2.8/test/testleakautovar.cpp" $, 2331 $, "void QueueDSMCCPacket(unsigned char *data, int length) {\n    unsigned char *dataCopy = malloc(length * sizeof(unsigned char));\n    m_dsmccQueue.enqueue(new DSMCCPacket(somethingunrelated));\n}" , true $)
2332:
2333:
2334: ;
2335: $if $(@expr1073744109 $!@expr1073744110 $assertEquals $(@expr1073744111 "cppcheck-2.8/test/testleakautovar.cpp" $, 2335 $, "[test.cpp:4]: (error) Memory leak: dataCopy\n" $, errout@var100 .@expr2282 str (@expr2283 ) $) $) { $return ; }
2336:
2337: $check_ $(@expr1073744114 "cppcheck-2.8/test/testleakautovar.cpp" $, 2337 $, "void f() {\n  char *buf = new char[1000];\n  clist.push_back(new (std::nothrow) C(buf));\n}" , true $)
2338:
2339:
2340: ;
2341: $if $(@expr1073744115 $!@expr1073744116 $assertEquals $(@expr1073744117 "cppcheck-2.8/test/testleakautovar.cpp" $, 2341 $, "[test.cpp:4]: (information) --check-library: Function C() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr2282 str (@expr2283 ) $) $) { $return ; }
2342: }
2343:
2344: void testKeywords ( ) {
2345: $check_ $(@expr1073744120 "cppcheck-2.8/test/testleakautovar.cpp" $, 2345 $, "int main(int argc, char **argv) {\n  double *new = malloc(1*sizeof(double));\n  free(new);\n  return 0;\n}" , false $)
2346:
2347:
2348:
2349: ;
2350: $if $(@expr1073744121 $!@expr1073744122 $assertEquals $(@expr1073744123 "cppcheck-2.8/test/testleakautovar.cpp" $, 2350 $, "" $, errout@var100 .@expr1073744124 str (@expr1073744125 ) $) $) { $return ; }
2351: }
2352:
2353: void inlineFunction ( ) {
2354: $check_ $(@expr1073744126 "cppcheck-2.8/test/testleakautovar.cpp" $, 2354 $, "int test() {\n  char *c;\n  int ret() {\n        free(c);\n        return 0;\n    }\n    c = malloc(128);\n    return ret();\n}" $)
2355:
|
2361:
2362: ;
2363: $if $(@expr1073744127 $!@expr1073744128 $assertEquals $(@expr1073744129 "cppcheck-2.8/test/testleakautovar.cpp" $, 2363 $, "" $, errout@var100 .@expr1073744130 str (@expr1073744131 ) $) $) { $return ; }
2364: }
2365:
2366:
2367: void smartPtrInContainer ( ) {
2368: $check_ $(@expr1073744132 "cppcheck-2.8/test/testleakautovar.cpp" $, 2368 $, "std::list< std::shared_ptr<int> > mList;\nvoid test(){\n  int *pt = new int(1);\n  mList.push_back(std::shared_ptr<int>(pt));\n}\n" , true $)
2369:
|
2373:
2374: ;
2375: $if $(@expr1073744133 $!@expr1073744134 $assertEquals $(@expr1073744135 "cppcheck-2.8/test/testleakautovar.cpp" $, 2375 $, "" $, errout@var100 .@expr1073744136 str (@expr1073744137 ) $) $) { $return ; }
2376: }
2377:
2378: void functionCallCastConfig ( ) {
2379: Settings settingsFunctionCall@var130 ; settingsFunctionCall@var130 =@expr1073744138 settings@var102 ;
2380:
2381: const char xmldata@var131 [@expr1073744139 217 ] =@expr1073744140 "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"free_func\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <not-uninit/>\n    </arg>\n    <arg nr=\"2\">\n      <not-uninit/>\n    </arg>\n  </function>\n</def>"
2382:
|
2391:
2392: ;
2393: tinyxml2 ::@expr1073744141 XMLDocument doc@var132 ;
2394: doc@var132 .@expr1073744142 Parse (@expr1073744143 xmldata@var131 , sizeof (@expr1073744144 xmldata@var131 ) ) ;
2395: settingsFunctionCall@var130 .@expr1073744145 library@var133 .@expr1073744146 load (@expr1073744147 doc@var132 ) ;
2396: $check_ $(@expr1073744148 "cppcheck-2.8/test/testleakautovar.cpp" $, 2396 $, "void test_func()\n{\n    char * buf = malloc(4);\n    free_func((void *)(1), buf);\n}" , settingsFunctionCall@var130 $)
2397:
2398:
2399:
2400: ;
2401: $if $(@expr1073744149 $!@expr1073744150 $assertEquals $(@expr1073744151 "cppcheck-2.8/test/testleakautovar.cpp" $, 2401 $, "[test.cpp:5]: (information) --check-library: Function free_func() should have <use>/<leak-ignore> configuration\n" $, errout@var100 .@expr1073744152 str (@expr1073744153 ) $) $) { $return ; }
2402: }
2403:
2404: void functionCallLeakIgnoreConfig ( ) {
2405: Settings settingsLeakIgnore@var134 ; settingsLeakIgnore@var134 =@expr1073744154 settings@var102 ;
2406:
2407: const char xmldata@var135 [@expr1073744155 186 ] =@expr1073744156 "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"SomeClass::someMethod\">\n    <leak-ignore/>\n    <noreturn>false</noreturn>\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n</def>\n"
2408:
|
2413:
2414: ;
2415: tinyxml2 ::@expr1073744157 XMLDocument doc@var136 ;
2416: doc@var136 .@expr1073744158 Parse (@expr1073744159 xmldata@var135 , sizeof (@expr1073744160 xmldata@var135 ) ) ;
2417: settingsLeakIgnore@var134 .@expr1073744161 library@var137 .@expr1073744162 load (@expr1073744163 doc@var136 ) ;
2418: $check_ $(@expr1073744164 "cppcheck-2.8/test/testleakautovar.cpp" $, 2418 $, "void f() {\n    double* a = new double[1024];\n    SomeClass::someMethod(a);\n}\n" , settingsLeakIgnore@var134 $)
2419:
2420:
2421: ;
2422: $if $(@expr1073744165 $!@expr1073744166 $assertEquals $(@expr1073744167 "cppcheck-2.8/test/testleakautovar.cpp" $, 2422 $, "[test.cpp:4]: (error) Memory leak: a\n" $, errout@var100 .@expr1073744168 str (@expr1073744169 ) $) $) { $return ; }
2423: }
2424: } ;
2425:
2426: $namespace ${ TestLeakAutoVar instance_TestLeakAutoVar@var138 $; $}
2427:
2428: class TestLeakAutoVarRecursiveCountLimit : public TestFixture {
2429: public:
2430: TestLeakAutoVarRecursiveCountLimit ( ) : TestFixture ( "TestLeakAutoVarRecursiveCountLimit" ) { }
2431:
2432: private:
2433: Settings settings@var139 ;
2434:
2435: void checkP ( const char code@var140 [ ] , bool cpp@var141 = false ) {
2436:
2437: errout@var100 .@expr1073744170 str (@expr1073744171 "" ) ;
2438:
2439:
2440: std ::@expr1073744172 vector < std ::@expr2349 string > files@var142 (@expr1073744174 1 , cpp@var141 ?@expr1073744175 "test.cpp" :@expr1073744176 "test.c" ) ;
2441: std ::@expr1073744177 istringstream istr@var143 (@expr1073744178 code@var140 ) ;
2442: const simplecpp ::@expr1073744179 TokenList tokens1@var144 (@expr1073744180 istr@var143 , files@var142 , files@var142 [@expr1073744181 0 ] ) ;
2443:
2444:
2445: simplecpp ::@expr1073744182 TokenList tokens2@var145 (@expr1073744183 files@var142 ) ;
2446: std ::@expr1073744184 map < std ::@expr2349 string , simplecpp ::@expr2349 TokenList *@expr1073744187 > filedata@var146 ;
2447: simplecpp ::@expr1073744188 preprocess (@expr1073744189 tokens2@var145 , tokens1@var144 , files@var142 , filedata@var146 , simplecpp ::@expr1073744190 DUI (@expr1073744191 ) ) ;
2448:
2449:
2450: Tokenizer tokenizer@var147 (@expr1073744192 &@expr2369 settings@var139 , this@expr2370 ) ;
2451: tokenizer@var147 .@expr1073744195 createTokens (@expr1073744196 std ::@expr1073744197 move (@expr1073744198 tokens2@var145 ) ) ;
2452: tokenizer@var147 .@expr1073744199 simplifyTokens1 (@expr1073744200 "" ) ;
2453:
2454:
2455: CheckLeakAutoVar c@var148 ;
2456: settings@var139 .@expr1073744201 checkLibrary@var149 =@expr1073744202 true ;
2457: settings@var139 .@expr1073744203 addEnabled (@expr1073744204 "information" ) ;
2458: c@var148 .@expr1073744205 runChecks (@expr1073744206 &@expr1073744207 tokenizer@var147 , &@expr2369 settings@var139 , this@expr2370 ) ;
2459: }
2460:
2461: void run ( ) override {
2462: $do ${ $if $(@expr1073744209 settings@var139 .@expr1073744210 library@var150 $.@expr1073744211 $load $(@expr1073744212 $exename@var11 $.@expr1073744213 $c_str $(@expr1073744214 $) $, "std.cfg" $) $.@expr1073744215 $errorcode $!=@expr1073744216 $Library $::@expr1073744217 $ErrorCode $::@expr1073744218 $OK $) ${ $complainMissingLib $(@expr1073744219 "std.cfg" $) $; $return $; $} $} $while $(@expr1073744220 $false $) ;
2463:
2464: $do ${ $if $(@expr1073744221 $prepareTest $(@expr1073744222 "recursiveCountLimit" $) $) ${ $setVerbose $(@expr1073744223 $false $) $; recursiveCountLimit $(@expr1073744224 $) $; $} $} $while $(@expr1073744225 $false $) ;
2465: }
2466:
2467: void recursiveCountLimit ( ) {
2468: $do ${ $try ${ checkP (@expr1073744226 "#define ONE     else if (0) { }\n#define TEN     ONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n#define HUN     TEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n#define THOU    HUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\nvoid foo() {\n  if (0) { }\n  THOU THOU\n}" ) $; $assertThrowFail $(@expr1073744227 "cppcheck-2.8/test/testleakautovar.cpp" $, 2468 $) $; $} $catch $(@expr1073744228 $const InternalError $&@expr1073744229 $) ${ $} $catch $(@expr1073744230 $... $) ${ $assertThrowFail $(@expr1073744231 "cppcheck-2.8/test/testleakautovar.cpp" $, 2468 $) $; $} $} $while $(@expr1073744232 $false $)
2469:
|
2474:
2475: ;
2476: $do ${ $try ${ checkP (@expr1073744233 "#define ONE     if (0) { }\n#define TEN     ONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n#define HUN     TEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n#define THOU    HUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\nvoid foo() {\n  if (0) { }\n  THOU THOU\n}" ) $; $} $catch $(@expr1073744234 $... $) ${ $assertNoThrowFail $(@expr1073744235 "cppcheck-2.8/test/testleakautovar.cpp" $, 2476 $) $; $} $} $while $(@expr1073744236 $false $)
2477:
|
2482:
2483: ;
2484: }
2485: } ;
2486:
2487: $namespace ${ TestLeakAutoVarRecursiveCountLimit instance_TestLeakAutoVarRecursiveCountLimit@var151 $; $}
2488:
2489: class TestLeakAutoVarStrcpy : public TestFixture {
2490: public:
2491: TestLeakAutoVarStrcpy ( ) : TestFixture ( "TestLeakAutoVarStrcpy" ) { }
2492:
2493: private:
2494: Settings settings@var152 ;
2495:
2496: void check_ ( const char * file@var153 , int line@var154 , const char code@var155 [ ] ) {
2497:
2498: errout@var100 .@expr1073744238 str (@expr1073744239 "" ) ;
2499:
2500:
2501: Tokenizer tokenizer@var156 (@expr1073744240 &@expr2417 settings@var152 , this@expr2418 ) ;
2502: std ::@expr1073744243 istringstream istr@var157 (@expr1073744244 code@var155 ) ;
2503: $assert_ $(@expr1073744245 file@var153 $, line@var154 $, $(@expr1073744246 tokenizer@var156 .@expr1073744247 tokenize (@expr1073744248 istr@var157 , "test.cpp" ) $) $) ;
2504:
2505:
2506: CheckLeakAutoVar checkLeak@var158 ;
2507: settings@var152 .@expr1073744249 checkLibrary@var159 =@expr1073744250 true ;
2508: settings@var152 .@expr1073744251 severity@var160 .@expr1073744252 enable (@expr1073744253 Severity ::@expr1073744254 information@expr1073744237 ) ;
2509: checkLeak@var158 .@expr1073744255 runChecks (@expr1073744256 &@expr1073744257 tokenizer@var156 , &@expr2417 settings@var152 , this@expr2418 ) ;
2510: }
2511:
2512: void run ( ) override {
2513: $do ${ $if $(@expr1073744259 settings@var152 .@expr1073744260 library@var161 $.@expr1073744261 $load $(@expr1073744262 $exename@var11 $.@expr1073744263 $c_str $(@expr1073744264 $) $, "std.cfg" $) $.@expr1073744265 $errorcode $!=@expr1073744266 $Library $::@expr1073744267 $ErrorCode $::@expr1073744268 $OK $) ${ $complainMissingLib $(@expr1073744269 "std.cfg" $) $; $return $; $} $} $while $(@expr1073744270 $false $) ;
2514:
2515: $do ${ $if $(@expr1073744271 $prepareTest $(@expr1073744272 "returnedValue" $) $) ${ $setVerbose $(@expr1073744273 $false $) $; returnedValue $(@expr1073744274 $) $; $} $} $while $(@expr1073744275 $false $) ;
2516: $do ${ $if $(@expr1073744276 $prepareTest $(@expr1073744277 "fclose_false_positive" $) $) ${ $setVerbose $(@expr1073744278 $false $) $; fclose_false_positive $(@expr1073744279 $) $; $} $} $while $(@expr1073744280 $false $) ;
2517: }
2518:
2519: void returnedValue ( ) {
2520: $check_ $(@expr1073744281 "cppcheck-2.8/test/testleakautovar.cpp" $, 2520 $, "char *m;\nvoid strcpy_returnedvalue(const char* str)\n{\n    char* ptr = new char[strlen(str)+1];\n    m = strcpy(ptr, str);\n}" $)
2521:
|
2524:
2525: ;
2526: $if $(@expr1073744282 $!@expr1073744283 $assertEquals $(@expr1073744284 "cppcheck-2.8/test/testleakautovar.cpp" $, 2526 $, "" $, errout@var100 .@expr1073744285 str (@expr1073744286 ) $) $) { $return ; }
2527: }
2528:
2529: void fclose_false_positive ( ) {
2530: $check_ $(@expr1073744287 "cppcheck-2.8/test/testleakautovar.cpp" $, 2530 $, "int  f(FILE *fp) { return fclose(fp); }" $) ;
2531: $if $(@expr1073744288 $!@expr1073744289 $assertEquals $(@expr1073744290 "cppcheck-2.8/test/testleakautovar.cpp" $, 2531 $, "" $, errout@var100 .@expr1073744291 str (@expr1073744292 ) $) $) { $return ; }
2532: }
2533:
2534: } ;
2535:
2536: $namespace ${ TestLeakAutoVarStrcpy instance_TestLeakAutoVarStrcpy@var162 $; $}
2537:
2538:
2539: class TestLeakAutoVarWindows : public TestFixture {
2540: public:
2541: TestLeakAutoVarWindows ( ) : TestFixture ( "TestLeakAutoVarWindows" ) { }
2542:
2543: private:
2544: Settings settings@var163 ;
2545:
2546: void check_ ( const char * file@var164 , int line@var165 , const char code@var166 [ ] ) {
2547:
2548: errout@var100 .@expr1073744293 str (@expr1073744294 "" ) ;
2549:
2550:
2551: Tokenizer tokenizer@var167 (@expr1073744295 &@expr2472 settings@var163 , this@expr2473 ) ;
2552: std ::@expr1073744298 istringstream istr@var168 (@expr1073744299 code@var166 ) ;
2553: $assert_ $(@expr1073744300 file@var164 $, line@var165 $, $(@expr1073744301 tokenizer@var167 .@expr1073744302 tokenize (@expr1073744303 istr@var168 , "test.c" ) $) $) ;
2554:
2555:
2556: CheckLeakAutoVar checkLeak@var169 ;
2557: checkLeak@var169 .@expr1073744304 runChecks (@expr1073744305 &@expr1073744306 tokenizer@var167 , &@expr2472 settings@var163 , this@expr2473 ) ;
2558: }
2559:
2560: void run ( ) override {
2561: $do ${ $if $(@expr1073744308 settings@var163 .@expr1073744309 library@var170 $.@expr1073744310 $load $(@expr1073744311 $exename@var11 $.@expr1073744312 $c_str $(@expr1073744313 $) $, "windows.cfg" $) $.@expr1073744314 $errorcode $!=@expr1073744315 $Library $::@expr1073744316 $ErrorCode $::@expr1073744317 $OK $) ${ $complainMissingLib $(@expr1073744318 "windows.cfg" $) $; $return $; $} $} $while $(@expr1073744319 $false $) ;
2562:
2563: $do ${ $if $(@expr1073744320 $prepareTest $(@expr1073744321 "heapDoubleFree" $) $) ${ $setVerbose $(@expr1073744322 $false $) $; heapDoubleFree $(@expr1073744323 $) $; $} $} $while $(@expr1073744324 $false $) ;
2564: }
2565:
2566: void heapDoubleFree ( ) {
2567: $check_ $(@expr1073744325 "cppcheck-2.8/test/testleakautovar.cpp" $, 2567 $, "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapFree(MyHeap, 0, b);  HeapDestroy(MyHeap);}" $)
2568:
|
2573:
2574: ;
2575: $if $(@expr1073744326 $!@expr1073744327 $assertEquals $(@expr1073744328 "cppcheck-2.8/test/testleakautovar.cpp" $, 2575 $, "" $, errout@var100 .@expr2505 str (@expr2506 ) $) $) { $return ; }
2576:
2577: $check_ $(@expr1073744331 "cppcheck-2.8/test/testleakautovar.cpp" $, 2577 $, "void f() {  int *a = HeapAlloc(GetProcessHeap(), 0, sizeof(int));  int *b = HeapAlloc(GetProcessHeap(), 0, sizeof(int));  HeapFree(GetProcessHeap(), 0, a);  HeapFree(GetProcessHeap(), 0, b);}" $)
2578:
|
2581:
2582: ;
2583: $if $(@expr1073744332 $!@expr1073744333 $assertEquals $(@expr1073744334 "cppcheck-2.8/test/testleakautovar.cpp" $, 2583 $, "" $, errout@var100 .@expr2505 str (@expr2506 ) $) $) { $return ; }
2584:
2585: $check_ $(@expr1073744337 "cppcheck-2.8/test/testleakautovar.cpp" $, 2585 $, "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapDestroy(MyHeap);}" $)
2586:
|
2590:
2591: ;
2592: $if $(@expr1073744338 $!@expr1073744339 $assertEquals $(@expr1073744340 "cppcheck-2.8/test/testleakautovar.cpp" $, 2592 $, "[test.c:1]: (error) Memory leak: b\n" $, errout@var100 .@expr2505 str (@expr2506 ) $) $) { $return ; }
2593:
2594: $check_ $(@expr1073744343 "cppcheck-2.8/test/testleakautovar.cpp" $, 2594 $, "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapFree(MyHeap, 0, b);}" $)
2595:
|
2599:
2600: ;
2601: $todoAssertEquals $(@expr1073744344 "cppcheck-2.8/test/testleakautovar.cpp" $, 2601 $, "[test.c:1] (error) Resource leak: MyHeap" $, "" $, errout@var100 .@expr2505 str (@expr2506 ) $)
2602: ;
2603:
2604: $check_ $(@expr1073744347 "cppcheck-2.8/test/testleakautovar.cpp" $, 2604 $, "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);}" $)
2605:
|
2608:
2609: ;
2610: $todoAssertEquals $(@expr1073744348 "cppcheck-2.8/test/testleakautovar.cpp" $, 2610 $, "[test.c:1] (error) Memory leak: MyHeap\n[test.c:1] (error) Memory leak: b" $, "[test.c:1]: (error) Memory leak: b\n" $, errout@var100 .@expr2505 str (@expr2506 ) $)
2611:
2612: ;
2613: }
2614: } ;
2615:
2616: $namespace ${ TestLeakAutoVarWindows instance_TestLeakAutoVarWindows@var171 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@6}
  v {!<=-1,!>=2,0@6}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 42
  "TestLeakAutoVar" always "TestLeakAutoVar"
Line 48
  = always 0
  0 always 0
Line 49
  ! always {!<=-1,!>=2}
Line 50
  "malloc" always "malloc"
  -1 always -1
Line 51
  "realloc" always "realloc"
  -1 always -1
Line 52
  "free" always "free"
  1 always 1
Line 53
  ! always {!<=-1,!>=2}
Line 54
  "socket" always "socket"
  -1 always -1
Line 55
  "close" always "close"
  1 always 1
Line 56
  ! always {!<=-1,!>=2}
Line 57
  "fopen" always "fopen"
  -1 always -1
Line 58
  "freopen" always "freopen"
  -1 always -1
  3 always 3
Line 59
  "fclose" always "fclose"
  1 always 1
Line 60
  "std::shared_ptr" always "std::shared_ptr"
Line 61
  "std::unique_ptr" always "std::unique_ptr"
Line 62
  "std::unique_ptr" always "std::unique_ptr"
  = always 1
  true always 1
Line 64
  81 always 81
  = always "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"uint8_t\" sign=\"u\" size=\"1\"/>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"uint8_t\" sign=\"u\" size=\"1\"/>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"uint8_t\" sign=\"u\" size=\"1\"/>\n</def>"
Line 69
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"uint8_t\" sign=\"u\" size=\"1\"/>\n</def>"
  sizeof always 81
  ( always 81
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"uint8_t\" sign=\"u\" size=\"1\"/>\n</def>"
Line 73
  ( always {!<=-1,!>=2}
  "assign1" always "assign1"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "assign2" always "assign2"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "assign3" always "assign3"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "assign4" always "assign4"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "assign5" always "assign5"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "assign6" always "assign6"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "assign7" always "assign7"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "assign8" always "assign8"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "assign9" always "assign9"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "assign10" always "assign10"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "assign11" always "assign11"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "assign12" always "assign12"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "assign13" always "assign13"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "assign14" always "assign14"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "assign15" always "assign15"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "assign16" always "assign16"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "assign17" always "assign17"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "assign18" always "assign18"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "assign19" always "assign19"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "assign20" always "assign20"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "assign21" always "assign21"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "assign22" always "assign22"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "assign23" always "assign23"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "isAutoDealloc" always "isAutoDealloc"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "realloc1" always "realloc1"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "realloc2" always "realloc2"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "realloc3" always "realloc3"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "realloc4" always "realloc4"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "realloc5" always "realloc5"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "freopen1" always "freopen1"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "freopen2" always "freopen2"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "deallocuse1" always "deallocuse1"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "deallocuse2" always "deallocuse2"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "deallocuse3" always "deallocuse3"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "deallocuse4" always "deallocuse4"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "deallocuse5" always "deallocuse5"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "deallocuse6" always "deallocuse6"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "deallocuse7" always "deallocuse7"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "deallocuse8" always "deallocuse8"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "deallocuse9" always "deallocuse9"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "doublefree1" always "doublefree1"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "doublefree2" always "doublefree2"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "doublefree3" always "doublefree3"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "doublefree4" always "doublefree4"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "doublefree5" always "doublefree5"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "doublefree6" always "doublefree6"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "doublefree7" always "doublefree7"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "doublefree8" always "doublefree8"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "doublefree9" always "doublefree9"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "doublefree10" always "doublefree10"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "doublefree11" always "doublefree11"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "doublefree12" always "doublefree12"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "exit1" always "exit1"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "exit2" always "exit2"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "exit3" always "exit3"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "functioncall1" always "functioncall1"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "goto1" always "goto1"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "goto2" always "goto2"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "ifelse1" always "ifelse1"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "ifelse2" always "ifelse2"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "ifelse3" always "ifelse3"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "ifelse4" always "ifelse4"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "ifelse5" always "ifelse5"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "ifelse6" always "ifelse6"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "ifelse7" always "ifelse7"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "ifelse8" always "ifelse8"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "ifelse9" always "ifelse9"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "ifelse10" always "ifelse10"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "ifelse11" always "ifelse11"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "ifelse12" always "ifelse12"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "ifelse13" always "ifelse13"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "ifelse14" always "ifelse14"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "ifelse15" always "ifelse15"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "ifelse16" always "ifelse16"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "ifelse17" always "ifelse17"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "ifelse18" always "ifelse18"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "ifelse19" always "ifelse19"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "ifelse20" always "ifelse20"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "ifelse21" always "ifelse21"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "ifelse22" always "ifelse22"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "ifelse23" always "ifelse23"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "ifelse24" always "ifelse24"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "switch1" always "switch1"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "loop1" always "loop1"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "mismatchAllocDealloc" always "mismatchAllocDealloc"
  false always 0
  false always 0
Line 177
  ( always {!<=-1,!>=2}
  "smartPointerDeleter" always "smartPointerDeleter"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "smartPointerRelease" always "smartPointerRelease"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "return1" always "return1"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "return2" always "return2"
  false always 0
  false always 0
Line 183
  ( always {!<=-1,!>=2}
  "return3" always "return3"
  false always 0
  false always 0
Line 184
  ( always {!<=-1,!>=2}
  "return4" always "return4"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "return5" always "return5"
  false always 0
  false always 0
Line 186
  ( always {!<=-1,!>=2}
  "return6" always "return6"
  false always 0
  false always 0
Line 187
  ( always {!<=-1,!>=2}
  "return7" always "return7"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "return8" always "return8"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "return9" always "return9"
  false always 0
  false always 0
Line 192
  ( always {!<=-1,!>=2}
  "test1" always "test1"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "test2" always "test2"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "test3" always "test3"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "test4" always "test4"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "test5" always "test5"
  false always 0
  false always 0
Line 199
  ( always {!<=-1,!>=2}
  "throw1" always "throw1"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "throw2" always "throw2"
  false always 0
  false always 0
Line 203
  ( always {!<=-1,!>=2}
  "configuration1" always "configuration1"
  false always 0
  false always 0
Line 204
  ( always {!<=-1,!>=2}
  "configuration2" always "configuration2"
  false always 0
  false always 0
Line 205
  ( always {!<=-1,!>=2}
  "configuration3" always "configuration3"
  false always 0
  false always 0
Line 206
  ( always {!<=-1,!>=2}
  "configuration4" always "configuration4"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "ptrptr" always "ptrptr"
  false always 0
  false always 0
Line 210
  ( always {!<=-1,!>=2}
  "nestedAllocation" always "nestedAllocation"
  false always 0
  false always 0
Line 211
  ( always {!<=-1,!>=2}
  "testKeywords" always "testKeywords"
  false always 0
  false always 0
Line 213
  ( always {!<=-1,!>=2}
  "inlineFunction" always "inlineFunction"
  false always 0
  false always 0
Line 215
  ( always {!<=-1,!>=2}
  "smartPtrInContainer" always "smartPtrInContainer"
  false always 0
  false always 0
Line 217
  ( always {!<=-1,!>=2}
  "functionCallCastConfig" always "functionCallCastConfig"
  false always 0
  false always 0
Line 218
  ( always {!<=-1,!>=2}
  "functionCallLeakIgnoreConfig" always "functionCallLeakIgnoreConfig"
  false always 0
  false always 0
Line 222
  , always 0
  cpp always {!<=-1,!>=2}
  = always 0
  false always 0
Line 224
  "" always ""
Line 227
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 228
  code possible {"std::list< std::shared_ptr<int> > mList;\nvoid test(){\n  int *pt = new int(1);\n  mList.push_back(std::shared_ptr<int>(pt));\n}\n"@20,"int test() {\n  char *c;\n  int ret() {\n        free(c);\n        return 0;\n    }\n    c = malloc(128);\n    return ret();\n}"@21,"int main(int argc, char **argv) {\n  double *new = malloc(1*sizeof(double));\n  free(new);\n  return 0;\n}"@22,"void QueueDSMCCPacket(unsigned char *data, int length) {\n    unsigned char *dataCopy = malloc(length * sizeof(unsigned char));\n    m_dsmccQueue.enqueue(new DSMCCPacket(dataCopy));\n}"@23,"void QueueDSMCCPacket(unsigned char *data, int length) {\n    unsigned char *dataCopy = malloc(length * sizeof(unsigned char));\n    m_dsmccQueue.enqueue(new DSMCCPacket(somethingunrelated));\n}"@24,"void f() {\n  char *buf = new char[1000];\n  clist.push_back(new (std::nothrow) C(buf));\n}"@25,"void f() {\n    char **p = malloc(10);\n}"@26,"void f() {\n    char *p = malloc(10);\n    int ret = set_data(p);\n    return ret;\n}"@27,"void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { }\n}"@28,"void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { return; }\n}"@30}
Line 229
  ( always {!<=-1,!>=2}
  file {"cppcheck-2.8/test/testleakautovar.cpp"@20,"cppcheck-2.8/test/testleakautovar.cpp"@21,"cppcheck-2.8/test/testleakautovar.cpp"@22,"cppcheck-2.8/test/testleakautovar.cpp"@23,"cppcheck-2.8/test/testleakautovar.cpp"@24,"cppcheck-2.8/test/testleakautovar.cpp"@25,"cppcheck-2.8/test/testleakautovar.cpp"@26,"cppcheck-2.8/test/testleakautovar.cpp"@27,"cppcheck-2.8/test/testleakautovar.cpp"@28,"cppcheck-2.8/test/testleakautovar.cpp"@29}
  line {2368@20,2354@21,2345@22,2325@23,2331@24,2337@25,2318@26,2309@27,2289@28,2291@29}
  cpp {!<=-1,!>=2,1@29,0@22}
  ? possible {"test.cpp","test.c"}
  "test.cpp" always "test.cpp"
  : always "test.c"
  "test.c" always "test.c"
Line 233
  = always 1
  true always 1
Line 235
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 240
  "" always ""
Line 243
  & {lifetime[Address]=(settings_),!0}
  this always !0
Line 244
  code possible {"void f() {\n    double* a = new double[1024];\n    SomeClass::someMethod(a);\n}\n"@18,"void test_func()\n{\n    char * buf = malloc(4);\n    free_func((void *)(1), buf);\n}"@19,"void f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp;\n    if (NULL == x || NULL == (fp = fopen(temp, \"rt\")))\n        return;\n}\n"@91,"FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = fopen(temp, \"rt\");\n    return fp;\n}\n"@92,"FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = NULL;\n    fopen_s(&fp, temp, \"rt\");\n    return fp;\n}\n"@93,"void f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = fopen(\"a.txt\", \"rb\");\n    if (fp)\n        freopen(temp, \"rt\", fp);\n}\n"@94,"FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    return fopen(temp, \"rt\");\n}\n"@95}
Line 245
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testleakautovar.cpp"@18,"cppcheck-2.8/test/testleakautovar.cpp"@19,"cppcheck-2.8/test/testleakautovar.cpp"@91,"cppcheck-2.8/test/testleakautovar.cpp"@92,"cppcheck-2.8/test/testleakautovar.cpp"@93,"cppcheck-2.8/test/testleakautovar.cpp"@94,"cppcheck-2.8/test/testleakautovar.cpp"@95}
  line inconclusive {2418@18,2396@19,1787@91,1798@92,1805@93,1813@94,1823@95}
  "test.cpp" always "test.cpp"
Line 249
  = always 1
  true always 1
Line 251
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings_),!0}
  this always !0
Line 255
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  255 always 255
  "void f() {\n    char *p = malloc(10);\n    p = NULL;\n    free(p);\n}" always "void f() {\n    char *p = malloc(10);\n    p = NULL;\n    free(p);\n}"
Line 260
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  260 always 260
  "[test.c:3]: (error) Memory leak: p\n" always "[test.c:3]: (error) Memory leak: p\n"
Line 264
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  264 always 264
  "void f() {\n    char *p = malloc(10);\n    char *q = p;\n    free(q);\n}" always "void f() {\n    char *p = malloc(10);\n    char *q = p;\n    free(q);\n}"
Line 269
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  269 always 269
  "" always ""
Line 273
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  273 always 273
  "void f() {\n    char *p = malloc(10);\n    char *q = p + 1;\n    free(q - 1);\n}" always "void f() {\n    char *p = malloc(10);\n    char *q = p + 1;\n    free(q - 1);\n}"
Line 278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  278 always 278
  "" always ""
Line 282
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  282 always 282
  "void f() {\n    char *a = malloc(10);\n    a += 10;\n    free(a - 10);\n}" always "void f() {\n    char *a = malloc(10);\n    a += 10;\n    free(a - 10);\n}"
Line 287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  287 always 287
  "" always ""
Line 291
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  291 always 291
  "void foo()\n{\n    char *p = new char[100];\n    list += p;\n}" always "void foo()\n{\n    char *p = new char[100];\n    list += p;\n}"
Line 296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  296 always 296
  "" always ""
Line 300
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  300 always 300
  "void foo() {\n    char *p = malloc(10);\n    p = strcpy(p,q);\n    free(p);\n}" always "void foo() {\n    char *p = malloc(10);\n    p = strcpy(p,q);\n    free(p);\n}"
Line 305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  305 always 305
  "" always ""
Line 309
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  309 always 309
  "void foo(struct str *d) {\n    struct str *p = malloc(10);\n    d->p = p;\n}" always "void foo(struct str *d) {\n    struct str *p = malloc(10);\n    d->p = p;\n}"
Line 313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  313 always 313
  "" always ""
Line 317
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  317 always 317
  "void foo(struct str *d) {\n    struct str *p = malloc(10);\n    d->p = &p->x;\n}" always "void foo(struct str *d) {\n    struct str *p = malloc(10);\n    d->p = &p->x;\n}"
Line 321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  321 always 321
  "" always ""
Line 325
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  325 always 325
  "void foo() {\n    char *p = x();\n    free(p);\n    p = NULL;\n}" always "void foo() {\n    char *p = x();\n    free(p);\n    p = NULL;\n}"
Line 330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  330 always 330
  "" always ""
Line 334
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  334 always 334
  "void foo() {\n    char *p;\n    if (x) { p = malloc(10); }\n    if (!x) { p = NULL; }\n    free(p);\n}" always "void foo() {\n    char *p;\n    if (x) { p = malloc(10); }\n    if (!x) { p = NULL; }\n    free(p);\n}"
Line 340
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  340 always 340
  "" always ""
Line 344
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  344 always 344
  "void f() {\n    char *p = malloc(10);\n    x = a(b(p));\n}" always "void f() {\n    char *p = malloc(10);\n    x = a(b(p));\n}"
Line 348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  348 always 348
  "[test.c:4]: (information) --check-library: Function b() should have <use>/<leak-ignore> configuration\n" always "[test.c:4]: (information) --check-library: Function b() should have <use>/<leak-ignore> configuration\n"
Line 352
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  352 always 352
  "void f() {\n    char *p = malloc(10);\n    free(p);\n    bar(&p);\n    free(p);\n}" always "void f() {\n    char *p = malloc(10);\n    free(p);\n    bar(&p);\n    free(p);\n}"
Line 358
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  358 always 358
  "" always ""
Line 362
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  362 always 362
  "void f() {\n    char *p;\n    char * &ref = p;\n    p = malloc(10);\n    free(ref);\n}" always "void f() {\n    char *p;\n    char * &ref = p;\n    p = malloc(10);\n    free(ref);\n}"
Line 368
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  368 always 368
  "" always ""
  "[test.c:6]: (error) Memory leak: p\n" always "[test.c:6]: (error) Memory leak: p\n"
Line 372
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  372 always 372
  "void f(int x) {\n    char *p;\n    if (x && (p = malloc(10))) { }}" always "void f(int x) {\n    char *p;\n    if (x && (p = malloc(10))) { }}"
Line 376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  376 always 376
  "[test.c:3]: (error) Memory leak: p\n" always "[test.c:3]: (error) Memory leak: p\n"
Line 378
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  378 always 378
  "void f(int x) {\n    char *p;\n    if (x && (p = new char[10])) { }}" always "void f(int x) {\n    char *p;\n    if (x && (p = new char[10])) { }}"
  true always 1
Line 382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  382 always 382
  "[test.cpp:3]: (error) Memory leak: p\n" always "[test.cpp:3]: (error) Memory leak: p\n"
Line 387
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  387 always 387
  "void f() {\n   baz *p;\n   p = malloc(sizeof *p);\n   free(p);\n   p = malloc(sizeof *p);\n   free(p);\n}" always "void f() {\n   baz *p;\n   p = malloc(sizeof *p);\n   free(p);\n   p = malloc(sizeof *p);\n   free(p);\n}"
Line 394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  394 always 394
  "" always ""
Line 398
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  398 always 398
  "void f() {\n   char *p = malloc(10);\n   free(p);\n   if (p=dostuff()) *p = 0;\n}" always "void f() {\n   char *p = malloc(10);\n   free(p);\n   if (p=dostuff()) *p = 0;\n}"
Line 403
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  403 always 403
  "" always ""
Line 407
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  407 always 407
  "void f() {\n    char *p = (char*)malloc(10);\n}" always "void f() {\n    char *p = (char*)malloc(10);\n}"
Line 410
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  410 always 410
  "[test.c:3]: (error) Memory leak: p\n" always "[test.c:3]: (error) Memory leak: p\n"
Line 412
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  412 always 412
  "void f() {\n    char *p = (char*)(int*)malloc(10);\n}" always "void f() {\n    char *p = (char*)(int*)malloc(10);\n}"
Line 415
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  415 always 415
  "[test.c:3]: (error) Memory leak: p\n" always "[test.c:3]: (error) Memory leak: p\n"
Line 419
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  419 always 419
  "void f(int x) {\n    char *p;\n    if (x && (p = (char*)malloc(10))) { }}" always "void f(int x) {\n    char *p;\n    if (x && (p = (char*)malloc(10))) { }}"
Line 423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  423 always 423
  "[test.c:3]: (error) Memory leak: p\n" always "[test.c:3]: (error) Memory leak: p\n"
Line 425
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  425 always 425
  "void f(int x) {\n    char *p;\n    if (x && (p = (char*)(int*)malloc(10))) { }}" always "void f(int x) {\n    char *p;\n    if (x && (p = (char*)(int*)malloc(10))) { }}"
Line 429
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  429 always 429
  "[test.c:3]: (error) Memory leak: p\n" always "[test.c:3]: (error) Memory leak: p\n"
Line 433
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  433 always 433
  "void f() {\n    char *p = malloc(10);\n    free((void*)p);\n}" always "void f() {\n    char *p = malloc(10);\n    free((void*)p);\n}"
Line 437
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  437 always 437
  "" always ""
Line 441
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  441 always 441
  "void f() {\n    char *p = static_cast<int>(malloc(10));\n}" always "void f() {\n    char *p = static_cast<int>(malloc(10));\n}"
  true always 1
Line 444
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  444 always 444
  "[test.cpp:3]: (error) Memory leak: p\n" always "[test.cpp:3]: (error) Memory leak: p\n"
Line 448
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  448 always 448
  "void f(int **x) {\n    void *p = malloc(10);\n    *x = (int*)p;\n}" always "void f(int **x) {\n    void *p = malloc(10);\n    *x = (int*)p;\n}"
  true always 1
Line 452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  452 always 452
  "" always ""
Line 456
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  456 always 456
  "void f(char tempFileName[256]) {\n    const int fd = socket(AF_INET, SOCK_PACKET, 0 );\n}" always "void f(char tempFileName[256]) {\n    const int fd = socket(AF_INET, SOCK_PACKET, 0 );\n}"
  true always 1
Line 459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  459 always 459
  "[test.cpp:3]: (error) Resource leak: fd\n" always "[test.cpp:3]: (error) Resource leak: fd\n"
Line 461
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  461 always 461
  "void f() {\n    const void * const p = malloc(10);\n}" always "void f() {\n    const void * const p = malloc(10);\n}"
  true always 1
Line 464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  464 always 464
  "[test.cpp:3]: (error) Memory leak: p\n" always "[test.cpp:3]: (error) Memory leak: p\n"
Line 469
  settings always symbolic=(s)
  ( {lifetime[Object]=(exename),!0}
  "posix.cfg" always "posix.cfg"
  != always {!<=-1,!>=2}
  "posix.cfg" always "posix.cfg"
  false always 0
Line 470
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  470 always 470
  "void f() {\n    int n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14;\n    *&n1 = open(\"xx.log\", O_RDONLY);\n    *&(n2) = open(\"xx.log\", O_RDONLY);\n    *(&n3) = open(\"xx.log\", O_RDONLY);\n    *&*&n4 = open(\"xx.log\", O_RDONLY);\n    *&*&*&(n5) = open(\"xx.log\", O_RDONLY);\n    *&*&(*&n6) = open(\"xx.log\", O_RDONLY);\n    *&*(&*&n7) = open(\"xx.log\", O_RDONLY);\n    *(&*&n8) = open(\"xx.log\", O_RDONLY);\n    *&(*&*&(*&n9)) = open(\"xx.log\", O_RDONLY);\n    (n10) = open(\"xx.log\", O_RDONLY);\n    ((n11)) = open(\"xx.log\", O_RDONLY);\n    ((*&n12)) = open(\"xx.log\", O_RDONLY);\n    *(&(*&n13)) = open(\"xx.log\", O_RDONLY);\n    ((*&(*&n14))) = open(\"xx.log\", O_RDONLY);\n}\n" always "void f() {\n    int n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14;\n    *&n1 = open(\"xx.log\", O_RDONLY);\n    *&(n2) = open(\"xx.log\", O_RDONLY);\n    *(&n3) = open(\"xx.log\", O_RDONLY);\n    *&*&n4 = open(\"xx.log\", O_RDONLY);\n    *&*&*&(n5) = open(\"xx.log\", O_RDONLY);\n    *&*&(*&n6) = open(\"xx.log\", O_RDONLY);\n    *&*(&*&n7) = open(\"xx.log\", O_RDONLY);\n    *(&*&n8) = open(\"xx.log\", O_RDONLY);\n    *&(*&*&(*&n9)) = open(\"xx.log\", O_RDONLY);\n    (n10) = open(\"xx.log\", O_RDONLY);\n    ((n11)) = open(\"xx.log\", O_RDONLY);\n    ((*&n12)) = open(\"xx.log\", O_RDONLY);\n    *(&(*&n13)) = open(\"xx.log\", O_RDONLY);\n    ((*&(*&n14))) = open(\"xx.log\", O_RDONLY);\n}\n"
  true always 1
Line 487
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  487 always 487
  "[test.cpp:17]: (error) Resource leak: n1\n[test.cpp:17]: (error) Resource leak: n2\n[test.cpp:17]: (error) Resource leak: n3\n[test.cpp:17]: (error) Resource leak: n4\n[test.cpp:17]: (error) Resource leak: n5\n[test.cpp:17]: (error) Resource leak: n6\n[test.cpp:17]: (error) Resource leak: n7\n[test.cpp:17]: (error) Resource leak: n8\n[test.cpp:17]: (error) Resource leak: n9\n[test.cpp:17]: (error) Resource leak: n10\n[test.cpp:17]: (error) Resource leak: n11\n[test.cpp:17]: (error) Resource leak: n12\n[test.cpp:17]: (error) Resource leak: n13\n[test.cpp:17]: (error) Resource leak: n14\n" always "[test.cpp:17]: (error) Resource leak: n1\n[test.cpp:17]: (error) Resource leak: n2\n[test.cpp:17]: (error) Resource leak: n3\n[test.cpp:17]: (error) Resource leak: n4\n[test.cpp:17]: (error) Resource leak: n5\n[test.cpp:17]: (error) Resource leak: n6\n[test.cpp:17]: (error) Resource leak: n7\n[test.cpp:17]: (error) Resource leak: n8\n[test.cpp:17]: (error) Resource leak: n9\n[test.cpp:17]: (error) Resource leak: n10\n[test.cpp:17]: (error) Resource leak: n11\n[test.cpp:17]: (error) Resource leak: n12\n[test.cpp:17]: (error) Resource leak: n13\n[test.cpp:17]: (error) Resource leak: n14\n"
Line 506
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  506 always 506
  "void f() {\n    char *p = new char[100];}" always "void f() {\n    char *p = new char[100];}"
  true always 1
Line 509
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  509 always 509
  "[test.cpp:2]: (error) Memory leak: p\n" always "[test.cpp:2]: (error) Memory leak: p\n"
Line 511
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  511 always 511
  "void f() {\n    Fred *fred = new Fred;}" always "void f() {\n    Fred *fred = new Fred;}"
  true always 1
Line 514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  514 always 514
  "" always ""
Line 516
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  516 always 516
  "void f() {\n    std::string *str = new std::string;}" always "void f() {\n    std::string *str = new std::string;}"
  true always 1
Line 519
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  519 always 519
  "[test.cpp:2]: (error) Memory leak: str\n" always "[test.cpp:2]: (error) Memory leak: str\n"
  "" always ""
Line 521
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  521 always 521
  "class TestType {\npublic:\n    char ca[12];\n};\nvoid f() {\n    TestType *tt = new TestType();\n}" always "class TestType {\npublic:\n    char ca[12];\n};\nvoid f() {\n    TestType *tt = new TestType();\n}"
  true always 1
Line 528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  528 always 528
  "[test.cpp:7]: (error) Memory leak: tt\n" always "[test.cpp:7]: (error) Memory leak: tt\n"
Line 530
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  530 always 530
  "void f(Bar& b) {\n    char* data = new char[10];\n    b = Bar(*new Foo(data));\n}" always "void f(Bar& b) {\n    char* data = new char[10];\n    b = Bar(*new Foo(data));\n}"
  true always 1
Line 534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  534 always 534
  "[test.cpp:4]: (information) --check-library: Function Foo() should have <use>/<leak-ignore> configuration\n" always "[test.cpp:4]: (information) --check-library: Function Foo() should have <use>/<leak-ignore> configuration\n"
Line 538
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  538 always 538
  "void f() {\n    void *p = malloc(10);\n    void *q = realloc(p, 20);\n    free(q)\n}" always "void f() {\n    void *p = malloc(10);\n    void *q = realloc(p, 20);\n    free(q)\n}"
Line 543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  543 always 543
  "" always ""
Line 547
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  547 always 547
  "void f() {\n    void *p = malloc(10);\n    void *q = realloc(p, 20);\n}" always "void f() {\n    void *p = malloc(10);\n    void *q = realloc(p, 20);\n}"
Line 551
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  551 always 551
  "[test.c:4]: (error) Memory leak: q\n" always "[test.c:4]: (error) Memory leak: q\n"
Line 555
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  555 always 555
  "void f() {\n    char *p = malloc(10);\n    char *q = (char*) realloc(p, 20);\n}" always "void f() {\n    char *p = malloc(10);\n    char *q = (char*) realloc(p, 20);\n}"
Line 559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  559 always 559
  "[test.c:4]: (error) Memory leak: q\n" always "[test.c:4]: (error) Memory leak: q\n"
Line 563
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  563 always 563
  "void f(void *p) {\n    void * q = realloc(p, 10);\n    if (q == NULL)\n        return;\n}" always "void f(void *p) {\n    void * q = realloc(p, 10);\n    if (q == NULL)\n        return;\n}"
Line 568
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  568 always 568
  "[test.c:5]: (error) Memory leak: q\n" always "[test.c:5]: (error) Memory leak: q\n"
Line 573
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  573 always 573
  "void * f(void * ptr, size_t size) {\n    void *datap = realloc(ptr, size);\n    if (size && !datap)\n        free(ptr);\n    return datap;\n}" always "void * f(void * ptr, size_t size) {\n    void *datap = realloc(ptr, size);\n    if (size && !datap)\n        free(ptr);\n    return datap;\n}"
Line 579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  579 always 579
  "" always ""
Line 582
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  582 always 582
  "void f() {\n    void * p1 = malloc(10);\n    if (!p1)\n        return;\n    void * p2 = realloc(p1, 42);\n    if (!p2) {\n        free(p1);\n        return;\n    }\n    free(p2);\n}" always "void f() {\n    void * p1 = malloc(10);\n    if (!p1)\n        return;\n    void * p2 = realloc(p1, 42);\n    if (!p2) {\n        free(p1);\n        return;\n    }\n    free(p2);\n}"
Line 593
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  593 always 593
  "" always ""
Line 597
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  597 always 597
  "void f() {\n    void *p = fopen(name,a);\n    void *q = freopen(name, b, p);\n    fclose(q)\n}" always "void f() {\n    void *p = fopen(name,a);\n    void *q = freopen(name, b, p);\n    fclose(q)\n}"
Line 602
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  602 always 602
  "" always ""
Line 606
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  606 always 606
  "void f() {\n    void *p = fopen(name,a);\n    void *q = freopen(name, b, p);\n}" always "void f() {\n    void *p = fopen(name,a);\n    void *q = freopen(name, b, p);\n}"
Line 610
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  610 always 610
  "[test.c:4]: (error) Resource leak: q\n" always "[test.c:4]: (error) Resource leak: q\n"
Line 614
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  614 always 614
  "void f(char *p) {\n    free(p);\n    *p = 0;\n}" always "void f(char *p) {\n    free(p);\n    *p = 0;\n}"
Line 618
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  618 always 618
  "[test.c:3]: (error) Dereferencing 'p' after it is deallocated / released\n" always "[test.c:3]: (error) Dereferencing 'p' after it is deallocated / released\n"
Line 620
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  620 always 620
  "void f(char *p) {\n    free(p);\n    char c = *p;\n}" always "void f(char *p) {\n    free(p);\n    char c = *p;\n}"
Line 624
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  624 always 624
  "[test.c:3]: (error) Dereferencing 'p' after it is deallocated / released\n" always "[test.c:3]: (error) Dereferencing 'p' after it is deallocated / released\n"
Line 628
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  628 always 628
  "void f(char *p) {\n    free(p);\n    strcpy(a, p);\n}" always "void f(char *p) {\n    free(p);\n    strcpy(a, p);\n}"
Line 632
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  632 always 632
  "error (free,use)" always "error (free,use)"
  "[test.c:3]: (information) --check-library: Function strcpy() should have <noreturn> configuration\n" always "[test.c:3]: (information) --check-library: Function strcpy() should have <noreturn> configuration\n"
Line 634
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  634 always 634
  "void f(char *p) {\n    free(p);\n    strcpy(a, p=b());\n}" always "void f(char *p) {\n    free(p);\n    strcpy(a, p=b());\n}"
Line 638
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  638 always 638
  "" always ""
  "[test.c:3]: (information) --check-library: Function strcpy() should have <noreturn> configuration\n" always "[test.c:3]: (information) --check-library: Function strcpy() should have <noreturn> configuration\n"
Line 642
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  642 always 642
  "void f(struct str *p) {\n    free(p);\n    p = p->next;\n}" always "void f(struct str *p) {\n    free(p);\n    p = p->next;\n}"
Line 646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  646 always 646
  "[test.c:3]: (error) Dereferencing 'p' after it is deallocated / released\n" always "[test.c:3]: (error) Dereferencing 'p' after it is deallocated / released\n"
Line 650
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  650 always 650
  "void f(char *p) {\n    free(p);\n    return p;\n}" always "void f(char *p) {\n    free(p);\n    return p;\n}"
Line 654
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  654 always 654
  "[test.c:2] -> [test.c:3]: (error) Returning/dereferencing 'p' after it is deallocated / released\n" always "[test.c:2] -> [test.c:3]: (error) Returning/dereferencing 'p' after it is deallocated / released\n"
Line 656
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  656 always 656
  "void f(char *p) {\n  if (!p) free(p);\n  return p;\n}" always "void f(char *p) {\n  if (!p) free(p);\n  return p;\n}"
Line 660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  660 always 660
  "" always ""
Line 662
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  662 always 662
  "void f(char *p) {\n  if (!p) delete p;\n  return p;\n}" always "void f(char *p) {\n  if (!p) delete p;\n  return p;\n}"
  true always 1
Line 666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  666 always 666
  "" always ""
Line 668
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  668 always 668
  "void f(char *p) {\n  if (!p) delete [] p;\n  return p;\n}" always "void f(char *p) {\n  if (!p) delete [] p;\n  return p;\n}"
  true always 1
Line 672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  672 always 672
  "" always ""
Line 674
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  674 always 674
  "void f(void* p) {\n   if (a) {\n      free(p);\n       return;\n   }\n   g(p);\n   return;\n}" always "void f(void* p) {\n   if (a) {\n      free(p);\n       return;\n   }\n   g(p);\n   return;\n}"
Line 682
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  682 always 682
  "" always ""
Line 686
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  686 always 686
  "void f(char *p) {\n    free(p), p = 0;\n    *p = 0;\n}" always "void f(char *p) {\n    free(p), p = 0;\n    *p = 0;\n}"
Line 690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  690 always 690
  "" always ""
Line 694
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  694 always 694
  "void f(char *p) {\n    free(p);\n    x = p = foo();\n}" always "void f(char *p) {\n    free(p);\n    x = p = foo();\n}"
Line 698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  698 always 698
  "" always ""
Line 702
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  702 always 702
  "struct Foo { int* ptr; };\nvoid f(Foo* foo) {\n    delete foo->ptr;\n    foo->ptr = new Foo;\n}" always "struct Foo { int* ptr; };\nvoid f(Foo* foo) {\n    delete foo->ptr;\n    foo->ptr = new Foo;\n}"
  true always 1
Line 707
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  707 always 707
  "" always ""
Line 709
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  709 always 709
  "struct Foo { int* ptr; };\nvoid f(Foo* foo) {\n    delete foo->ptr;\n    x = *foo->ptr;\n}" always "struct Foo { int* ptr; };\nvoid f(Foo* foo) {\n    delete foo->ptr;\n    x = *foo->ptr;\n}"
  true always 1
Line 714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  714 always 714
  "[test.cpp:4]: (error) Dereferencing 'ptr' after it is deallocated / released\n" always "[test.cpp:4]: (error) Dereferencing 'ptr' after it is deallocated / released\n"
Line 716
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  716 always 716
  "void parse() {\n    struct Buf {\n        Buf(uint32_t len) : m_buf(new uint8_t[len]) {}\n        ~Buf() { delete[]m_buf; }\n        uint8_t *m_buf;\n    };\n}" always "void parse() {\n    struct Buf {\n        Buf(uint32_t len) : m_buf(new uint8_t[len]) {}\n        ~Buf() { delete[]m_buf; }\n        uint8_t *m_buf;\n    };\n}"
  true always 1
Line 723
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  723 always 723
  "" always ""
Line 725
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  725 always 725
  "struct Foo {\n    Foo();\n    Foo* ptr;\n    void func();\n};\nvoid bar(Foo* foo) {\n    delete foo->ptr;\n    foo->ptr = new Foo;\n    foo->ptr->func();\n}" always "struct Foo {\n    Foo();\n    Foo* ptr;\n    void func();\n};\nvoid bar(Foo* foo) {\n    delete foo->ptr;\n    foo->ptr = new Foo;\n    foo->ptr->func();\n}"
  true always 1
Line 735
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  735 always 735
  "" always ""
Line 737
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  737 always 737
  "void foo(void (*conv)(char**)) {\n  char * ptr=(char*)malloc(42);\n  free(ptr);\n  (*conv)(&ptr);\n}" always "void foo(void (*conv)(char**)) {\n  char * ptr=(char*)malloc(42);\n  free(ptr);\n  (*conv)(&ptr);\n}"
Line 742
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  742 always 742
  "" always ""
Line 746
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  746 always 746
  "void f() {\n    int *ptr = new int;\n    delete(ptr);\n    *ptr = 0;\n}" always "void f() {\n    int *ptr = new int;\n    delete(ptr);\n    *ptr = 0;\n}"
  true always 1
Line 751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  751 always 751
  "[test.cpp:4]: (error) Dereferencing 'ptr' after it is deallocated / released\n" always "[test.cpp:4]: (error) Dereferencing 'ptr' after it is deallocated / released\n"
Line 755
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  755 always 755
  "void f(Type* p) {\n  std::shared_ptr<Type> sp(p);\n  bool b = p->foo();\n  return b;\n}\n" always "void f(Type* p) {\n  std::shared_ptr<Type> sp(p);\n  bool b = p->foo();\n  return b;\n}\n"
  true always 1
Line 760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  760 always 760
  "" always ""
Line 762
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  762 always 762
  "struct A {\n    std::vector<std::unique_ptr<A>> array_;\n    A* foo() {\n        A* a = new A();\n        array_.push_back(std::unique_ptr<A>(a));\n        return a;\n    }\n};\n" always "struct A {\n    std::vector<std::unique_ptr<A>> array_;\n    A* foo() {\n        A* a = new A();\n        array_.push_back(std::unique_ptr<A>(a));\n        return a;\n    }\n};\n"
  true always 1
Line 770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  770 always 770
  "" always ""
Line 772
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  772 always 772
  "int g(int *p) {\n    std::unique_ptr<int> temp(p);\n    return DoSomething(p);\n}\nint f() {\n    return g(new int(3));\n}\n" always "int g(int *p) {\n    std::unique_ptr<int> temp(p);\n    return DoSomething(p);\n}\nint f() {\n    return g(new int(3));\n}\n"
  true always 1
Line 779
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  779 always 779
  "" always ""
Line 783
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  783 always 783
  "void f(char *p) {\n    if (x)\n        free(p);\n    else\n        p = 0;\n    free(p);\n}" always "void f(char *p) {\n    if (x)\n        free(p);\n    else\n        p = 0;\n    free(p);\n}"
Line 790
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  790 always 790
  "[test.c:3] -> [test.c:6]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.c:3] -> [test.c:6]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 792
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  792 always 792
  "void foo(char *p) {\n  free(p);\n  free(p);\n}" always "void foo(char *p) {\n  free(p);\n  free(p);\n}"
Line 797
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  797 always 797
  "[test.c:2] -> [test.c:3]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.c:2] -> [test.c:3]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 799
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  799 always 799
  "void foo(char *p, char *r) {\n  free(p);\n  free(r);\n}" always "void foo(char *p, char *r) {\n  free(p);\n  free(r);\n}"
Line 804
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  804 always 804
  "" always ""
Line 806
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  806 always 806
  "void foo() {\n  free(p);\n  free(r);\n}" always "void foo() {\n  free(p);\n  free(r);\n}"
Line 811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  811 always 811
  "" always ""
Line 813
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  813 always 813
  "void foo(char *p) {\n  if (x < 3) free(p);\n  else { if (x > 9) free(p); }\n}" always "void foo(char *p) {\n  if (x < 3) free(p);\n  else { if (x > 9) free(p); }\n}"
Line 818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  818 always 818
  "" always ""
Line 820
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  820 always 820
  "void foo(char *p) {\n  free(p);\n  getNext(&p);\n  free(p);\n}" always "void foo(char *p) {\n  free(p);\n  getNext(&p);\n  free(p);\n}"
Line 826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  826 always 826
  "" always ""
Line 828
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  828 always 828
  "void foo(char *p) {\n  free(p);\n  bar();\n  free(p);\n}" always "void foo(char *p) {\n  free(p);\n  bar();\n  free(p);\n}"
Line 834
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  834 always 834
  "[test.c:2] -> [test.c:4]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.c:2] -> [test.c:4]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 836
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  836 always 836
  "void foo(char *p) {\n  free(p);\n  printf(\"Freed memory at location %x\", p);\n  free(p);\n}" always "void foo(char *p) {\n  free(p);\n  printf(\"Freed memory at location %x\", p);\n  free(p);\n}"
Line 842
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  842 always 842
  "[test.c:2] -> [test.c:4]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.c:2] -> [test.c:4]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 844
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  844 always 844
  "void foo(FILE *p) {\n  fclose(p);\n  fclose(p);\n}" always "void foo(FILE *p) {\n  fclose(p);\n  fclose(p);\n}"
Line 849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  849 always 849
  "[test.c:2] -> [test.c:3]: (error) Resource handle 'p' freed twice.\n" always "[test.c:2] -> [test.c:3]: (error) Resource handle 'p' freed twice.\n"
Line 851
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  851 always 851
  "void foo(FILE *p, FILE *r) {\n  fclose(p);\n  fclose(r);\n}" always "void foo(FILE *p, FILE *r) {\n  fclose(p);\n  fclose(r);\n}"
Line 856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  856 always 856
  "" always ""
Line 858
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  858 always 858
  "void foo(FILE *p) {\n  if (x < 3) fclose(p);\n  else { if (x > 9) fclose(p); }\n}" always "void foo(FILE *p) {\n  if (x < 3) fclose(p);\n  else { if (x > 9) fclose(p); }\n}"
Line 863
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  863 always 863
  "" always ""
Line 865
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  865 always 865
  "void foo(FILE *p) {\n  fclose(p);\n  gethandle(&p);\n  fclose(p);\n}" always "void foo(FILE *p) {\n  fclose(p);\n  gethandle(&p);\n  fclose(p);\n}"
Line 871
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  871 always 871
  "" always ""
Line 873
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  873 always 873
  "void foo(FILE *p) {\n  fclose(p);\n  gethandle();\n  fclose(p);\n}" always "void foo(FILE *p) {\n  fclose(p);\n  gethandle();\n  fclose(p);\n}"
Line 879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  879 always 879
  "[test.c:2] -> [test.c:4]: (error) Resource handle 'p' freed twice.\n" always "[test.c:2] -> [test.c:4]: (error) Resource handle 'p' freed twice.\n"
Line 881
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  881 always 881
  "void foo(Data* p) {\n  free(p->a);\n  free(p->b);\n}" always "void foo(Data* p) {\n  free(p->a);\n  free(p->b);\n}"
Line 886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  886 always 886
  "" always ""
Line 888
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  888 always 888
  "void f() {\n    char *p; p = malloc(100);\n    if (x) {\n        free(p);\n        exit();\n    }\n    free(p);\n}" always "void f() {\n    char *p; p = malloc(100);\n    if (x) {\n        free(p);\n        exit();\n    }\n    free(p);\n}"
Line 897
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  897 always 897
  "" always ""
Line 899
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  899 always 899
  "void f() {\n    char *p; p = malloc(100);\n    if (x) {\n        free(p);\n        x = 0;\n    }\n    free(p);\n}" always "void f() {\n    char *p; p = malloc(100);\n    if (x) {\n        free(p);\n        x = 0;\n    }\n    free(p);\n}"
Line 908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  908 always 908
  "[test.c:4] -> [test.c:7]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.c:4] -> [test.c:7]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 910
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  910 always 910
  "void f() {\n    char *p; p = do_something();\n    free(p);\n    p = do_something();\n    free(p);\n}" always "void f() {\n    char *p; p = do_something();\n    free(p);\n    p = do_something();\n    free(p);\n}"
Line 917
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  917 always 917
  "" always ""
Line 919
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  919 always 919
  "void foo(char *p) {\n  delete p;\n  delete p;\n}" always "void foo(char *p) {\n  delete p;\n  delete p;\n}"
  true always 1
Line 924
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  924 always 924
  "[test.cpp:2] -> [test.cpp:3]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.cpp:2] -> [test.cpp:3]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 926
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  926 always 926
  "void foo(char *p, char *r) {\n  delete p;\n  delete r;\n}" always "void foo(char *p, char *r) {\n  delete p;\n  delete r;\n}"
  true always 1
Line 931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  931 always 931
  "" always ""
Line 933
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  933 always 933
  "void foo(P p) {\n  delete p.x;\n  delete p;\n}" always "void foo(P p) {\n  delete p.x;\n  delete p;\n}"
  true always 1
Line 938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  938 always 938
  "" always ""
Line 940
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  940 always 940
  "void foo(char **p) {\n  delete p[0];\n  delete p[1];\n}" always "void foo(char **p) {\n  delete p[0];\n  delete p[1];\n}"
  true always 1
Line 945
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  945 always 945
  "" always ""
Line 947
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  947 always 947
  "void foo(char *p) {\n  delete p;\n  getNext(&p);\n  delete p;\n}" always "void foo(char *p) {\n  delete p;\n  getNext(&p);\n  delete p;\n}"
  true always 1
Line 953
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  953 always 953
  "" always ""
Line 955
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  955 always 955
  "void foo(char *p) {\n  delete p;\n  bar();\n  delete p;\n}" always "void foo(char *p) {\n  delete p;\n  bar();\n  delete p;\n}"
  true always 1
Line 961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  961 always 961
  "[test.cpp:2] -> [test.cpp:4]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.cpp:2] -> [test.cpp:4]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 963
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  963 always 963
  "void foo(char *p) {\n  delete[] p;\n  delete[] p;\n}" always "void foo(char *p) {\n  delete[] p;\n  delete[] p;\n}"
  true always 1
Line 968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  968 always 968
  "[test.cpp:2] -> [test.cpp:3]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.cpp:2] -> [test.cpp:3]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 970
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  970 always 970
  "void foo(char *p, char *r) {\n  delete[] p;\n  delete[] r;\n}" always "void foo(char *p, char *r) {\n  delete[] p;\n  delete[] r;\n}"
  true always 1
Line 975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  975 always 975
  "" always ""
Line 977
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  977 always 977
  "void foo(char *p) {\n  delete[] p;\n  getNext(&p);\n  delete[] p;\n}" always "void foo(char *p) {\n  delete[] p;\n  getNext(&p);\n  delete[] p;\n}"
  true always 1
Line 983
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  983 always 983
  "" always ""
Line 985
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  985 always 985
  "void foo(char *p) {\n  delete[] p;\n  bar();\n  delete[] p;\n}" always "void foo(char *p) {\n  delete[] p;\n  bar();\n  delete[] p;\n}"
  true always 1
Line 991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  991 always 991
  "[test.cpp:2] -> [test.cpp:4]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.cpp:2] -> [test.cpp:4]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 993
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  993 always 993
  "LineMarker::~LineMarker() {\n  delete pxpm;\n}\nLineMarker &LineMarker::operator=(const LineMarker &) {\n  delete pxpm;\n  pxpm = NULL;\n  return *this;\n}" always "LineMarker::~LineMarker() {\n  delete pxpm;\n}\nLineMarker &LineMarker::operator=(const LineMarker &) {\n  delete pxpm;\n  pxpm = NULL;\n  return *this;\n}"
  true always 1
Line 1002
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1002 always 1002
  "" always ""
Line 1004
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1004 always 1004
  "void foo()\n{\n  int* ptr; ptr = NULL;\n  try\n    {\n      ptr = new int(4);\n    }\n  catch(...)\n    {\n      delete ptr;\n      throw;\n    }\n  delete ptr;\n}" always "void foo()\n{\n  int* ptr; ptr = NULL;\n  try\n    {\n      ptr = new int(4);\n    }\n  catch(...)\n    {\n      delete ptr;\n      throw;\n    }\n  delete ptr;\n}"
  true always 1
Line 1019
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1019 always 1019
  "" always ""
Line 1021
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1021 always 1021
  "int foo()\n{\n   int* a; a = new int;\n   bool doDelete; doDelete = true;\n   if (a != 0)\n   {\n       doDelete = false;\n       delete a;\n   }\n   if(doDelete)\n       delete a;\n   return 0;\n}" always "int foo()\n{\n   int* a; a = new int;\n   bool doDelete; doDelete = true;\n   if (a != 0)\n   {\n       doDelete = false;\n       delete a;\n   }\n   if(doDelete)\n       delete a;\n   return 0;\n}"
  true always 1
Line 1035
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1035 always 1035
  "" always ""
  "[test.cpp:8] -> [test.cpp:11]: (error) Memory pointed to by 'a' is freed twice.\n" always "[test.cpp:8] -> [test.cpp:11]: (error) Memory pointed to by 'a' is freed twice.\n"
Line 1037
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1037 always 1037
  "void foo(int y)\n{\n    char * x; x = NULL;\n    while(true) {\n        x = new char[100];\n        if (y++ > 100)\n            break;\n        delete[] x;\n    }\n    delete[] x;\n}" always "void foo(int y)\n{\n    char * x; x = NULL;\n    while(true) {\n        x = new char[100];\n        if (y++ > 100)\n            break;\n        delete[] x;\n    }\n    delete[] x;\n}"
  true always 1
Line 1049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1049 always 1049
  "" always ""
Line 1051
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1051 always 1051
  "void foo(int y)\n{\n    char * x; x = NULL;\n    for (int i = 0; i < 10000; i++) {\n        x = new char[100];\n        delete[] x;\n    }\n    delete[] x;\n}" always "void foo(int y)\n{\n    char * x; x = NULL;\n    for (int i = 0; i < 10000; i++) {\n        x = new char[100];\n        delete[] x;\n    }\n    delete[] x;\n}"
  true always 1
Line 1061
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1061 always 1061
  "[test.cpp:8]: (error) Memory pointed to by 'x' is freed twice.\n" always "[test.cpp:8]: (error) Memory pointed to by 'x' is freed twice.\n"
  "" always ""
Line 1063
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1063 always 1063
  "void foo(int y)\n{\n    char * x; x = NULL;\n    while (isRunning()) {\n        x = new char[100];\n        delete[] x;\n    }\n    delete[] x;\n}" always "void foo(int y)\n{\n    char * x; x = NULL;\n    while (isRunning()) {\n        x = new char[100];\n        delete[] x;\n    }\n    delete[] x;\n}"
  true always 1
Line 1073
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1073 always 1073
  "[test.cpp:8]: (error) Memory pointed to by 'x' is freed twice.\n" always "[test.cpp:8]: (error) Memory pointed to by 'x' is freed twice.\n"
  "" always ""
Line 1075
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1075 always 1075
  "void foo(int y)\n{\n    char * x; x = NULL;\n    while (isRunning()) {\n        x = malloc(100);\n        free(x);\n    }\n    free(x);\n}" always "void foo(int y)\n{\n    char * x; x = NULL;\n    while (isRunning()) {\n        x = malloc(100);\n        free(x);\n    }\n    free(x);\n}"
Line 1085
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1085 always 1085
  "[test.c:8]: (error) Memory pointed to by 'x' is freed twice.\n" always "[test.c:8]: (error) Memory pointed to by 'x' is freed twice.\n"
  "" always ""
Line 1087
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1087 always 1087
  "void foo(int y)\n{\n    char * x; x = NULL;\n    for (;;) {\n        x = new char[100];\n        if (y++ > 100)\n            break;\n        delete[] x;\n    }\n    delete[] x;\n}" always "void foo(int y)\n{\n    char * x; x = NULL;\n    for (;;) {\n        x = new char[100];\n        if (y++ > 100)\n            break;\n        delete[] x;\n    }\n    delete[] x;\n}"
  true always 1
Line 1099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1099 always 1099
  "" always ""
Line 1101
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1101 always 1101
  "void foo(int y)\n{\n    char * x; x = NULL;\n    do {\n        x = new char[100];\n        if (y++ > 100)\n            break;\n        delete[] x;\n    } while (true);\n    delete[] x;\n}" always "void foo(int y)\n{\n    char * x; x = NULL;\n    do {\n        x = new char[100];\n        if (y++ > 100)\n            break;\n        delete[] x;\n    } while (true);\n    delete[] x;\n}"
  true always 1
Line 1113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1113 always 1113
  "" always ""
Line 1115
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1115 always 1115
  "void f()\n{\n    char *p; p = 0;\n    if (x < 100) {\n        p = malloc(10);\n        free(p);\n    }\n    free(p);\n}" always "void f()\n{\n    char *p; p = 0;\n    if (x < 100) {\n        p = malloc(10);\n        free(p);\n    }\n    free(p);\n}"
Line 1125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1125 always 1125
  "[test.c:6] -> [test.c:8]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.c:6] -> [test.c:8]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 1127
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1127 always 1127
  "void MyFunction()\n{\n    char* data; data = new char[100];\n    try\n    {\n    }\n    catch(err)\n    {\n        delete[] data;\n        MyThrow(err);\n    }\n    delete[] data;\n}\nvoid MyThrow(err)\n{\n    throw(err);\n}" always "void MyFunction()\n{\n    char* data; data = new char[100];\n    try\n    {\n    }\n    catch(err)\n    {\n        delete[] data;\n        MyThrow(err);\n    }\n    delete[] data;\n}\nvoid MyThrow(err)\n{\n    throw(err);\n}"
  true always 1
Line 1146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1146 always 1146
  "" always ""
Line 1148
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1148 always 1148
  "void MyFunction()\n{\n    char* data; data = new char[100];\n    try\n    {\n    }\n    catch(err)\n    {\n        delete[] data;\n        MyExit(err);\n    }\n    delete[] data;\n}\nvoid MyExit(err)\n{\n    exit(err);\n}" always "void MyFunction()\n{\n    char* data; data = new char[100];\n    try\n    {\n    }\n    catch(err)\n    {\n        delete[] data;\n        MyExit(err);\n    }\n    delete[] data;\n}\nvoid MyExit(err)\n{\n    exit(err);\n}"
  true always 1
Line 1167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1167 always 1167
  "" always ""
Line 1169
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1169 always 1169
  "struct Wrapper {\n    Thing* m_thing;\n    Wrapper() : m_thing(0) {\n    }\n    ~Wrapper() {\n        delete m_thing;\n    }\n    void changeThing() {\n        delete m_thing;\n        m_thing = new Thing;\n    }\n};" always "struct Wrapper {\n    Thing* m_thing;\n    Wrapper() : m_thing(0) {\n    }\n    ~Wrapper() {\n        delete m_thing;\n    }\n    void changeThing() {\n        delete m_thing;\n        m_thing = new Thing;\n    }\n};"
  true always 1
Line 1182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1182 always 1182
  "" always ""
Line 1185
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1185 always 1185
  "void pCodeLabelDestruct(pCode *pc) {\n    free(PCL(pc)->label);\n    free(pc);\n}" always "void pCodeLabelDestruct(pCode *pc) {\n    free(PCL(pc)->label);\n    free(pc);\n}"
Line 1189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1189 always 1189
  "" always ""
Line 1193
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1193 always 1193
  "void *f(int a) {\n    char *p = malloc(10);\n    if (a == 2) { free(p); return ((void*)1); }\n    free(p);\n    return 0;\n}" always "void *f(int a) {\n    char *p = malloc(10);\n    if (a == 2) { free(p); return ((void*)1); }\n    free(p);\n    return 0;\n}"
Line 1199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1199 always 1199
  "" always ""
Line 1203
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1203 always 1203
  "void foo() {\n   bool done = false;\n   do {\n       char *bar = malloc(10)\n       if(condition()) {\n           free(bar);\n           continue;\n       }\n       done = true;\n       free(bar)\n   } while(!done);\n   return;}" always "void foo() {\n   bool done = false;\n   do {\n       char *bar = malloc(10)\n       if(condition()) {\n           free(bar);\n           continue;\n       }\n       done = true;\n       free(bar)\n   } while(!done);\n   return;}"
Line 1217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1217 always 1217
  "" always ""
Line 1221
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1221 always 1221
  "void f(char *p) {\n  if (x) {\n    free(p);\n    exit(1);\n  }\n  free(p);\n}" always "void f(char *p) {\n  if (x) {\n    free(p);\n    exit(1);\n  }\n  free(p);\n}"
Line 1228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1228 always 1228
  "" always ""
Line 1232
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1232 always 1232
  "void f(char *p) {\n  free(p);\n  x = (q == p);\n  free(p);\n}" always "void f(char *p) {\n  free(p);\n  x = (q == p);\n  free(p);\n}"
Line 1237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1237 always 1237
  "[test.c:2] -> [test.c:4]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.c:2] -> [test.c:4]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 1241
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1241 always 1241
  "void do_wordexp(FILE *f) {\n  free(getword(f));\n  fclose(f);\n}" always "void do_wordexp(FILE *f) {\n  free(getword(f));\n  fclose(f);\n}"
  false always 0
Line 1245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1245 always 1245
  "" always ""
Line 1249
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1249 always 1249
  "void f(char *p, int x) {\n    free(p);\n    if (x && (p = malloc(10)))\n        free(p);\n}" always "void f(char *p, int x) {\n    free(p);\n    if (x && (p = malloc(10)))\n        free(p);\n}"
Line 1254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1254 always 1254
  "" always ""
Line 1256
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1256 always 1256
  "void f(char *p, int x) {\n    delete[] p;\n    if (x && (p = new char[10]))\n        delete[] p;\n}" always "void f(char *p, int x) {\n    delete[] p;\n    if (x && (p = new char[10]))\n        delete[] p;\n}"
Line 1261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1261 always 1261
  "" always ""
Line 1265
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1265 always 1265
  "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x(i);\n    delete i;\n}\n" always "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x(i);\n    delete i;\n}\n"
  true always 1
Line 1270
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1270 always 1270
  "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n"
Line 1272
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1272 always 1272
  "void f() {\n    int * i = new int;\n    delete i;\n    std::unique_ptr<int> x(i);\n}\n" always "void f() {\n    int * i = new int;\n    delete i;\n    std::unique_ptr<int> x(i);\n}\n"
  true always 1
Line 1277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1277 always 1277
  "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n"
Line 1279
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1279 always 1279
  "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x{i};\n    delete i;\n}\n" always "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x{i};\n    delete i;\n}\n"
  true always 1
Line 1284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1284 always 1284
  "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n"
Line 1286
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1286 always 1286
  "void f() {\n    int * i = new int;\n    std::shared_ptr<int> x(i);\n    delete i;\n}\n" always "void f() {\n    int * i = new int;\n    std::shared_ptr<int> x(i);\n    delete i;\n}\n"
  true always 1
Line 1291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1291 always 1291
  "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n"
Line 1293
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1293 always 1293
  "void f() {\n    int * i = new int;\n    std::shared_ptr<int> x{i};\n    delete i;\n}\n" always "void f() {\n    int * i = new int;\n    std::shared_ptr<int> x{i};\n    delete i;\n}\n"
  true always 1
Line 1298
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1298 always 1298
  "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n"
Line 1301
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1301 always 1301
  "void f() {\n    int * i = new int;\n    std::shared_ptr<int> x{i};\n    *i = 123;\n}\n" always "void f() {\n    int * i = new int;\n    std::shared_ptr<int> x{i};\n    *i = 123;\n}\n"
  true always 1
Line 1306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1306 always 1306
  "" always ""
Line 1308
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1308 always 1308
  "void f() {\n    int * i = new int[1];\n    std::unique_ptr<int[]> x(i);\n    delete i;\n}\n" always "void f() {\n    int * i = new int[1];\n    std::unique_ptr<int[]> x(i);\n    delete i;\n}\n"
  true always 1
Line 1313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1313 always 1313
  "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Memory pointed to by 'i' is freed twice.\n"
Line 1317
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1317 always 1317
  "struct foo {\n    int* get(int) { return new int(); }\n};\nvoid f(foo* b) {\n    std::unique_ptr<int> x(b->get(0));\n    std::unique_ptr<int> y(b->get(1));\n}\n" always "struct foo {\n    int* get(int) { return new int(); }\n};\nvoid f(foo* b) {\n    std::unique_ptr<int> x(b->get(0));\n    std::unique_ptr<int> y(b->get(1));\n}\n"
  true always 1
Line 1324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1324 always 1324
  "" always ""
Line 1328
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1328 always 1328
  "void f(char* s) {\n    char *p = malloc(strlen(s));\n    if (p != NULL) {\n        strcat(p, s);\n        if (strlen(s) != 10)\n            free(p); p = NULL;\n    }\n    if (p != NULL)\n        free(p);\n}\n" always "void f(char* s) {\n    char *p = malloc(strlen(s));\n    if (p != NULL) {\n        strcat(p, s);\n        if (strlen(s) != 10)\n            free(p); p = NULL;\n    }\n    if (p != NULL)\n        free(p);\n}\n"
  true always 1
Line 1338
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1338 always 1338
  "" always ""
Line 1340
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1340 always 1340
  "void f(char* s) {\n    char *p = malloc(strlen(s));\n    if (p != NULL) {\n        strcat(p, s);\n        if (strlen(s) != 10)\n            free(p), p = NULL;\n    }\n    if (p != NULL)\n        free(p);\n}\n" always "void f(char* s) {\n    char *p = malloc(strlen(s));\n    if (p != NULL) {\n        strcat(p, s);\n        if (strlen(s) != 10)\n            free(p), p = NULL;\n    }\n    if (p != NULL)\n        free(p);\n}\n"
  true always 1
Line 1350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1350 always 1350
  "" always ""
Line 1354
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1354 always 1354
  "void f() {\n    void * p = malloc(5);\n    void * q = realloc(p, 10);\n    if (q == NULL) {\n        free(p);\n        return;\n    }\n    free(p);\n    if (q == NULL)\n        return;\n    free(q)\n}" always "void f() {\n    void * p = malloc(5);\n    void * q = realloc(p, 10);\n    if (q == NULL) {\n        free(p);\n        return;\n    }\n    free(p);\n    if (q == NULL)\n        return;\n    free(q)\n}"
Line 1366
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1366 always 1366
  "[test.c:3] -> [test.c:8]: (error) Memory pointed to by 'p' is freed twice.\n" always "[test.c:3] -> [test.c:8]: (error) Memory pointed to by 'p' is freed twice.\n"
Line 1370
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1370 always 1370
  "int f(FILE *fp, const bool b) {\n    if (b)\n        return fclose(fp);\n    fclose(fp);\n    return 0;\n}\n" always "int f(FILE *fp, const bool b) {\n    if (b)\n        return fclose(fp);\n    fclose(fp);\n    return 0;\n}\n"
Line 1376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1376 always 1376
  "" always ""
Line 1380
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1380 always 1380
  "void f() {\n    char *p = malloc(10);\n    exit(0);\n}" always "void f() {\n    char *p = malloc(10);\n    exit(0);\n}"
Line 1384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1384 always 1384
  "" always ""
Line 1388
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1388 always 1388
  "void f() {\n    char *p = malloc(10);\n    fatal_error();\n}" always "void f() {\n    char *p = malloc(10);\n    fatal_error();\n}"
Line 1392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1392 always 1392
  "[test.c:3]: (information) --check-library: Function fatal_error() should have <noreturn> configuration\n[test.c:4]: (information) --check-library: Function fatal_error() should have <use>/<leak-ignore> configuration\n" always "[test.c:3]: (information) --check-library: Function fatal_error() should have <noreturn> configuration\n[test.c:4]: (information) --check-library: Function fatal_error() should have <use>/<leak-ignore> configuration\n"
Line 1398
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1398 always 1398
  "void f() {\n  char *p = malloc(100);\n  if (x) {\n    free(p);\n    ::exit(0);\n  }  free(p);\n}" always "void f() {\n  char *p = malloc(100);\n  if (x) {\n    free(p);\n    ::exit(0);\n  }  free(p);\n}"
  true always 1
Line 1406
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1406 always 1406
  "" always ""
Line 1408
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1408 always 1408
  "void f() {\n  char *p = malloc(100);\n  if (x) {\n    free(p);\n    std::exit(0);\n  }  free(p);\n}" always "void f() {\n  char *p = malloc(100);\n  if (x) {\n    free(p);\n    std::exit(0);\n  }  free(p);\n}"
  true always 1
Line 1416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1416 always 1416
  "" always ""
Line 1420
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1420 always 1420
  "void f(struct S *p) {\n  p->x = malloc(10);\n  free(p->x);\n  p->x = 0;\n}" always "void f(struct S *p) {\n  p->x = malloc(10);\n  free(p->x);\n  p->x = 0;\n}"
Line 1425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1425 always 1425
  "" always ""
Line 1429
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1429 always 1429
  "static void f() {\n    int err = -ENOMEM;\n    char *reg = malloc(100);\n    if (err) {\n        free(reg);\n    }\n}" always "static void f() {\n    int err = -ENOMEM;\n    char *reg = malloc(100);\n    if (err) {\n        free(reg);\n    }\n}"
Line 1436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1436 always 1436
  "" always ""
Line 1440
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1440 always 1440
  "static char * f() {\nx:\n    char *p = malloc(100);\n    if (err) {\n        free(p);\n        goto x;\n    }\n    return p;\n}" always "static char * f() {\nx:\n    char *p = malloc(100);\n    if (err) {\n        free(p);\n        goto x;\n    }\n    return p;\n}"
Line 1449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1449 always 1449
  "" always ""
Line 1453
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1453 always 1453
  "int f() {\n    char *p = NULL;\n    if (x) { p = malloc(10); }\n    else { return 0; }\n    free(p);\n}" always "int f() {\n    char *p = NULL;\n    if (x) { p = malloc(10); }\n    else { return 0; }\n    free(p);\n}"
Line 1459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1459 always 1459
  "" always ""
Line 1463
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1463 always 1463
  "int f() {\n    char *p = NULL;\n    if (x) { p = malloc(10); }\n    else { return 0; }\n}" always "int f() {\n    char *p = NULL;\n    if (x) { p = malloc(10); }\n    else { return 0; }\n}"
Line 1468
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1468 always 1468
  "[test.c:5]: (error) Memory leak: p\n" always "[test.c:5]: (error) Memory leak: p\n"
Line 1472
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1472 always 1472
  "void f() {\n    char *p = malloc(10);\n    if (!p) { return; }\n    free(p);\n}" always "void f() {\n    char *p = malloc(10);\n    if (!p) { return; }\n    free(p);\n}"
Line 1477
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1477 always 1477
  "" always ""
Line 1479
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1479 always 1479
  "char * f(size_t size) {    void *p = malloc(1);    if (!p && size != 0)        return NULL;    return p;}" always "char * f(size_t size) {    void *p = malloc(1);    if (!p && size != 0)        return NULL;    return p;}"
Line 1485
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1485 always 1485
  "" always ""
Line 1487
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1487 always 1487
  "void f() {\n    char *p = malloc(10);\n    if (p) { } else { return; }\n    free(p);\n}" always "void f() {\n    char *p = malloc(10);\n    if (p) { } else { return; }\n    free(p);\n}"
Line 1492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1492 always 1492
  "" always ""
Line 1495
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1495 always 1495
  "void f() {\n    char *p = malloc(10);\n    if (UNLIKELY(!p)) { return; }\n    free(p);\n}" always "void f() {\n    char *p = malloc(10);\n    if (UNLIKELY(!p)) { return; }\n    free(p);\n}"
Line 1500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1500 always 1500
  "" always ""
Line 1504
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1504 always 1504
  "void f(int x) {\n    char *p;\n    if (x) { p = malloc(10); }\n    if (x) { free(p); }\n}" always "void f(int x) {\n    char *p;\n    if (x) { p = malloc(10); }\n    if (x) { free(p); }\n}"
Line 1509
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1509 always 1509
  "" always ""
Line 1511
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1511 always 1511
  "void f(int x) {\n    char *p;\n    if (x) { p = malloc(10); }\n    if (!x) { return; }\n    free(p);\n}" always "void f(int x) {\n    char *p;\n    if (x) { p = malloc(10); }\n    if (!x) { return; }\n    free(p);\n}"
Line 1517
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1517 always 1517
  "" always ""
Line 1521
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1521 always 1521
  "void f() {\n    char *p = malloc(10);\n    if (!p && x) { p = malloc(10); }\n    free(p);\n}" always "void f() {\n    char *p = malloc(10);\n    if (!p && x) { p = malloc(10); }\n    free(p);\n}"
Line 1526
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1526 always 1526
  "" always ""
Line 1530
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1530 always 1530
  "void f(int x) {\n    int *a = malloc(20);\n    if (x)\n        free(a);\n    else\n        a = 0;\n}" always "void f(int x) {\n    int *a = malloc(20);\n    if (x)\n        free(a);\n    else\n        a = 0;\n}"
Line 1537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1537 always 1537
  "[test.c:6]: (error) Memory leak: a\n" always "[test.c:6]: (error) Memory leak: a\n"
Line 1541
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1541 always 1541
  "void f() {\n    int x = malloc(20);\n    if (x < 0)\n        return;\n    free(x);\n}" always "void f() {\n    int x = malloc(20);\n    if (x < 0)\n        return;\n    free(x);\n}"
Line 1547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1547 always 1547
  "" always ""
Line 1551
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1551 always 1551
  "int f() {\n    int fd = socket(AF_INET, SOCK_PACKET, 0 );\n    if (fd == -1)\n        return -1;\n    return fd;\n}" always "int f() {\n    int fd = socket(AF_INET, SOCK_PACKET, 0 );\n    if (fd == -1)\n        return -1;\n    return fd;\n}"
Line 1557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1557 always 1557
  "" always ""
Line 1559
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1559 always 1559
  "int f() {\n    int fd = socket(AF_INET, SOCK_PACKET, 0 );\n    if (fd != -1)\n        return fd;\n    return -1;\n}" always "int f() {\n    int fd = socket(AF_INET, SOCK_PACKET, 0 );\n    if (fd != -1)\n        return fd;\n    return -1;\n}"
Line 1565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1565 always 1565
  "" always ""
Line 1569
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1569 always 1569
  "void f() {\n    char *p = malloc(100);\n    if (dostuff(p==NULL,0))\n        return;\n    free(p);\n}" always "void f() {\n    char *p = malloc(100);\n    if (dostuff(p==NULL,0))\n        return;\n    free(p);\n}"
Line 1575
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1575 always 1575
  "" always ""
Line 1579
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1579 always 1579
  "void f() {\n    void *x = malloc(1U);\n    if (!(x != NULL))\n        return;\n    free(x);\n}" always "void f() {\n    void *x = malloc(1U);\n    if (!(x != NULL))\n        return;\n    free(x);\n}"
Line 1585
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1585 always 1585
  "" always ""
Line 1589
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1589 always 1589
  "void f() {\n    void *p;\n    if (NULL == (p = malloc(4)))\n        return;\n    free(p);\n}" always "void f() {\n    void *p;\n    if (NULL == (p = malloc(4)))\n        return;\n    free(p);\n}"
Line 1595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1595 always 1595
  "" always ""
Line 1599
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1599 always 1599
  "void f(char **p) {\n    if ((*p = malloc(4)) == NULL)\n        return;\n}" always "void f(char **p) {\n    if ((*p = malloc(4)) == NULL)\n        return;\n}"
Line 1603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1603 always 1603
  "" always ""
Line 1607
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1607 always 1607
  "int f(int fd, const char *mode) {\n    char *path;\n    if (fd == -1 || (path = (char *)malloc(10)) == NULL)\n        return 1;\n    free(path);\n    return 0;\n}" always "int f(int fd, const char *mode) {\n    char *path;\n    if (fd == -1 || (path = (char *)malloc(10)) == NULL)\n        return 1;\n    free(path);\n    return 0;\n}"
Line 1614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1614 always 1614
  "" always ""
Line 1616
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1616 always 1616
  "int f(int fd, const char *mode) {\n    char *path;\n    if ((path = (char *)malloc(10)) == NULL || fd == -1)\n        return 1;\n    free(path);\n    return 0;\n}" always "int f(int fd, const char *mode) {\n    char *path;\n    if ((path = (char *)malloc(10)) == NULL || fd == -1)\n        return 1;\n    free(path);\n    return 0;\n}"
Line 1623
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1623 always 1623
  "[test.cpp:4] memory leak" always "[test.cpp:4] memory leak"
  "" always ""
Line 1627
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1627 always 1627
  "char* f() {\n    char* buf = malloc(10);\n    if (buf == (char*)NULL)\n        return NULL;\n    return buf;\n}" always "char* f() {\n    char* buf = malloc(10);\n    if (buf == (char*)NULL)\n        return NULL;\n    return buf;\n}"
Line 1633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1633 always 1633
  "" always ""
Line 1637
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1637 always 1637
  "struct SSS { int a; };\nSSS* global_ptr;\nvoid test_alloc() {\n   if ( global_ptr = new SSS()) {}\n   return;\n}" always "struct SSS { int a; };\nSSS* global_ptr;\nvoid test_alloc() {\n   if ( global_ptr = new SSS()) {}\n   return;\n}"
  true always 1
Line 1643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1643 always 1643
  "" always ""
Line 1645
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1645 always 1645
  "FILE* hFile;\nint openFile( void ) {\n   if ((hFile = fopen(\"1.txt\", \"wb\" )) == NULL) return 0;\n   return 1;\n}" always "FILE* hFile;\nint openFile( void ) {\n   if ((hFile = fopen(\"1.txt\", \"wb\" )) == NULL) return 0;\n   return 1;\n}"
Line 1650
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1650 always 1650
  "" always ""
Line 1654
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1654 always 1654
  "void f(void) {\n    char *p;\n    if(p = malloc(4), p == NULL)\n        return;\n    free(p);\n    return;\n}" always "void f(void) {\n    char *p;\n    if(p = malloc(4), p == NULL)\n        return;\n    free(p);\n    return;\n}"
Line 1661
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1661 always 1661
  "" always ""
Line 1663
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1663 always 1663
  "void f(void) {\n    char *p, q;\n    if(p = malloc(4), q = 1, p == NULL)\n        return;\n    free(p);\n    return;\n}" always "void f(void) {\n    char *p, q;\n    if(p = malloc(4), q = 1, p == NULL)\n        return;\n    free(p);\n    return;\n}"
Line 1670
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1670 always 1670
  "" always ""
Line 1674
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1674 always 1674
  "int *f() {\n    int *p = realloc(nullptr, 10);\n    if (!p)\n        return NULL;\n    return p;\n}" always "int *f() {\n    int *p = realloc(nullptr, 10);\n    if (!p)\n        return NULL;\n    return p;\n}"
Line 1680
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1680 always 1680
  "" always ""
Line 1682
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1682 always 1682
  "int *f() {\n    int *p = realloc(nullptr, 10);\n    if (!!(!p))\n        return NULL;\n    return p;\n}" always "int *f() {\n    int *p = realloc(nullptr, 10);\n    if (!!(!p))\n        return NULL;\n    return p;\n}"
Line 1688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1688 always 1688
  "" always ""
Line 1692
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1692 always 1692
  "void f() {\n    void * p = malloc(10);\n    void * q = realloc(p, 20);\n    if (q == 0)\n        return;\n    free(q);\n}" always "void f() {\n    void * p = malloc(10);\n    void * q = realloc(p, 20);\n    if (q == 0)\n        return;\n    free(q);\n}"
Line 1699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1699 always 1699
  "[test.c:5]: (error) Memory leak: p\n" always "[test.c:5]: (error) Memory leak: p\n"
Line 1701
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1701 always 1701
  "void f() {\n    void * p = malloc(10);\n    void * q = realloc(p, 20);\n    if (q != 0) {\n        free(q);\n        return;\n    } else\n        return;\n}" always "void f() {\n    void * p = malloc(10);\n    void * q = realloc(p, 20);\n    if (q != 0) {\n        free(q);\n        return;\n    } else\n        return;\n}"
Line 1710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1710 always 1710
  "[test.c:8]: (error) Memory leak: p\n" always "[test.c:8]: (error) Memory leak: p\n"
Line 1714
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1714 always 1714
  "void f() {\n    static char * a;\n    char * b = realloc(a, 10);\n    if (!b)\n        return;\n    a = b;\n}" always "void f() {\n    static char * a;\n    char * b = realloc(a, 10);\n    if (!b)\n        return;\n    a = b;\n}"
Line 1721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1721 always 1721
  "" always ""
Line 1725
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1725 always 1725
  "void f() {\n    if (x > 0)\n        void * p1 = malloc(5);\n    else\n        void * p2 = malloc(2);\n    return;\n}" always "void f() {\n    if (x > 0)\n        void * p1 = malloc(5);\n    else\n        void * p2 = malloc(2);\n    return;\n}"
Line 1732
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1732 always 1732
  "[test.c:3]: (error) Memory leak: p1\n[test.c:5]: (error) Memory leak: p2\n" always "[test.c:3]: (error) Memory leak: p1\n[test.c:5]: (error) Memory leak: p2\n"
Line 1735
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1735 always 1735
  "void f() {\n    if (x > 0)\n        void * p1 = malloc(5);\n    else\n        void * p2 = malloc(2);\n}" always "void f() {\n    if (x > 0)\n        void * p1 = malloc(5);\n    else\n        void * p2 = malloc(2);\n}"
Line 1741
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1741 always 1741
  "[test.c:3]: (error) Memory leak: p1\n[test.c:5]: (error) Memory leak: p2\n" always "[test.c:3]: (error) Memory leak: p1\n[test.c:5]: (error) Memory leak: p2\n"
Line 1746
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1746 always 1746
  "void f() {\n    if (y) {\n        void * p;\n        if (x > 0)\n            p = malloc(5);\n    }\n    return;\n}" always "void f() {\n    if (y) {\n        void * p;\n        if (x > 0)\n            p = malloc(5);\n    }\n    return;\n}"
Line 1754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1754 always 1754
  "[test.c:6]: (error) Memory leak: p\n" always "[test.c:6]: (error) Memory leak: p\n"
Line 1758
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1758 always 1758
  "int f(const char * pathname, int flags) {\n    int fd = socket(pathname, flags);\n    if (fd >= 0)\n        return fd;\n    return -1;\n}" always "int f(const char * pathname, int flags) {\n    int fd = socket(pathname, flags);\n    if (fd >= 0)\n        return fd;\n    return -1;\n}"
Line 1764
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1764 always 1764
  "" always ""
Line 1766
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1766 always 1766
  "int f(const char * pathname, int flags) {\n    int fd = socket(pathname, flags);\n    if (fd <= -1)\n        return -1;\n    return fd;\n}" always "int f(const char * pathname, int flags) {\n    int fd = socket(pathname, flags);\n    if (fd <= -1)\n        return -1;\n    return fd;\n}"
Line 1772
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1772 always 1772
  "" always ""
Line 1776
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1776 always 1776
  "void f() {\n    if (FILE* fp = fopen(\"x\", \"r\")) {}\n}\n" always "void f() {\n    if (FILE* fp = fopen(\"x\", \"r\")) {}\n}\n"
Line 1779
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1779 always 1779
  "[test.c:2]: (error) Resource leak: fp\n" always "[test.c:2]: (error) Resource leak: fp\n"
Line 1784
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 1785
  ( {lifetime[Object]=(exename),!0}
  "posix.cfg" always "posix.cfg"
  != always {!<=-1,!>=2}
  "posix.cfg" always "posix.cfg"
  false always 0
Line 1787
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1787 always 1787
  "void f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp;\n    if (NULL == x || NULL == (fp = fopen(temp, \"rt\")))\n        return;\n}\n" always "void f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp;\n    if (NULL == x || NULL == (fp = fopen(temp, \"rt\")))\n        return;\n}\n"
Line 1793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1793 always 1793
  "[test.cpp:5]: (error) Memory leak: temp\n[test.cpp:6]: (error) Memory leak: temp\n[test.cpp:6]: (error) Resource leak: fp\n" always "[test.cpp:5]: (error) Memory leak: temp\n[test.cpp:6]: (error) Memory leak: temp\n[test.cpp:6]: (error) Resource leak: fp\n"
Line 1798
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1798 always 1798
  "FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = fopen(temp, \"rt\");\n    return fp;\n}\n" always "FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = fopen(temp, \"rt\");\n    return fp;\n}\n"
Line 1803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1803 always 1803
  "[test.cpp:4]: (error) Memory leak: temp\n" always "[test.cpp:4]: (error) Memory leak: temp\n"
Line 1805
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1805 always 1805
  "FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = NULL;\n    fopen_s(&fp, temp, \"rt\");\n    return fp;\n}\n" always "FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = NULL;\n    fopen_s(&fp, temp, \"rt\");\n    return fp;\n}\n"
Line 1811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1811 always 1811
  "[test.cpp:5]: (error) Memory leak: temp\n" always "[test.cpp:5]: (error) Memory leak: temp\n"
Line 1813
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1813 always 1813
  "void f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = fopen(\"a.txt\", \"rb\");\n    if (fp)\n        freopen(temp, \"rt\", fp);\n}\n" always "void f() {\n    char* temp = strdup(\"temp.txt\");\n    FILE* fp = fopen(\"a.txt\", \"rb\");\n    if (fp)\n        freopen(temp, \"rt\", fp);\n}\n"
Line 1819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1819 always 1819
  "[test.cpp:6]: (error) Memory leak: temp\n[test.cpp:6]: (error) Resource leak: fp\n" always "[test.cpp:6]: (error) Memory leak: temp\n[test.cpp:6]: (error) Resource leak: fp\n"
Line 1823
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1823 always 1823
  "FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    return fopen(temp, \"rt\");\n}\n" always "FILE* f() {\n    char* temp = strdup(\"temp.txt\");\n    return fopen(temp, \"rt\");\n}\n"
Line 1827
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1827 always 1827
  "[test.cpp:3]: (error) Memory leak: temp\n" always "[test.cpp:3]: (error) Memory leak: temp\n"
  "" always ""
Line 1831
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1831 always 1831
  "void f() {\n    char *p = 0;\n    switch (x) {\n    case 123: p = malloc(100); break;\n    default: return;\n    }\n    free(p);\n}" always "void f() {\n    char *p = 0;\n    switch (x) {\n    case 123: p = malloc(100); break;\n    default: return;\n    }\n    free(p);\n}"
Line 1839
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1839 always 1839
  "" always ""
Line 1844
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1844 always 1844
  "void f() {\n    char *p;\n    for (i=0;i<5;i++) { }\n    if (x) { free(p) }\n    else { a = p; }\n}" always "void f() {\n    char *p;\n    for (i=0;i<5;i++) { }\n    if (x) { free(p) }\n    else { a = p; }\n}"
Line 1850
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1850 always 1850
  "" always ""
Line 1854
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1854 always 1854
  "void f() {\n    FILE*f=fopen(fname,a);\n    free(f);\n}" always "void f() {\n    FILE*f=fopen(fname,a);\n    free(f);\n}"
Line 1858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1858 always 1858
  "[test.c:2] -> [test.c:3]: (error) Mismatching allocation and deallocation: f\n" always "[test.c:2] -> [test.c:3]: (error) Mismatching allocation and deallocation: f\n"
Line 1860
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1860 always 1860
  "void f() {\n    FILE*f=fopen(fname,a);\n    free((void*)f);\n}" always "void f() {\n    FILE*f=fopen(fname,a);\n    free((void*)f);\n}"
Line 1864
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1864 always 1864
  "[test.c:2] -> [test.c:3]: (error) Mismatching allocation and deallocation: f\n" always "[test.c:2] -> [test.c:3]: (error) Mismatching allocation and deallocation: f\n"
Line 1866
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1866 always 1866
  "void f() {\n    char *cPtr = new char[100];\n    delete[] cPtr;\n    cPtr = new char[100]('x');\n    delete[] cPtr;\n    cPtr = new char[100];\n    delete cPtr;\n}" always "void f() {\n    char *cPtr = new char[100];\n    delete[] cPtr;\n    cPtr = new char[100]('x');\n    delete[] cPtr;\n    cPtr = new char[100];\n    delete cPtr;\n}"
  true always 1
Line 1874
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1874 always 1874
  "[test.cpp:6] -> [test.cpp:7]: (error) Mismatching allocation and deallocation: cPtr\n" always "[test.cpp:6] -> [test.cpp:7]: (error) Mismatching allocation and deallocation: cPtr\n"
Line 1876
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1876 always 1876
  "void f() {\n    char *cPtr = new char[100];\n    free(cPtr);\n}" always "void f() {\n    char *cPtr = new char[100];\n    free(cPtr);\n}"
  true always 1
Line 1880
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1880 always 1880
  "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: cPtr\n" always "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: cPtr\n"
Line 1882
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1882 always 1882
  "void f() {\n    char *cPtr = new (buf) char[100];\n}" always "void f() {\n    char *cPtr = new (buf) char[100];\n}"
  true always 1
Line 1885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1885 always 1885
  "" always ""
Line 1887
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1887 always 1887
  "void f() {\n    int * i = new int[1];\n    std::unique_ptr<int> x(i);\n}\n" always "void f() {\n    int * i = new int[1];\n    std::unique_ptr<int> x(i);\n}\n"
  true always 1
Line 1891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1891 always 1891
  "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: i\n" always "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: i\n"
Line 1893
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1893 always 1893
  "void f() {\n    int * i = new int;\n    std::unique_ptr<int[]> x(i);\n}\n" always "void f() {\n    int * i = new int;\n    std::unique_ptr<int[]> x(i);\n}\n"
  true always 1
Line 1897
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1897 always 1897
  "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: i\n" always "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: i\n"
Line 1899
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1899 always 1899
  "void f() {\n   void* a = malloc(1);\n   void* b = freopen(f, p, a);\n   free(b);\n}" always "void f() {\n   void* a = malloc(1);\n   void* b = freopen(f, p, a);\n   free(b);\n}"
Line 1904
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1904 always 1904
  "[test.c:2] -> [test.c:3]: (error) Mismatching allocation and deallocation: a\n[test.c:3] -> [test.c:4]: (error) Mismatching allocation and deallocation: b\n" always "[test.c:2] -> [test.c:3]: (error) Mismatching allocation and deallocation: a\n[test.c:3] -> [test.c:4]: (error) Mismatching allocation and deallocation: b\n"
Line 1907
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1907 always 1907
  "void f() {\n   void* a;\n   void* b = realloc(a, 10);\n   free(b);\n}" always "void f() {\n   void* a;\n   void* b = realloc(a, 10);\n   free(b);\n}"
Line 1912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1912 always 1912
  "" always ""
Line 1914
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1914 always 1914
  "void f() {\n   int * i = new int;\n   int * j = realloc(i, 2 * sizeof(int));\n   delete[] j;\n}" always "void f() {\n   int * i = new int;\n   int * j = realloc(i, 2 * sizeof(int));\n   delete[] j;\n}"
  true always 1
Line 1919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1919 always 1919
  "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: i\n[test.cpp:3] -> [test.cpp:4]: (error) Mismatching allocation and deallocation: j\n" always "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: i\n[test.cpp:3] -> [test.cpp:4]: (error) Mismatching allocation and deallocation: j\n"
Line 1924
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1924 always 1924
  "void f() {\n    FILE*f=fopen(fname,a);\n    std::unique_ptr<FILE> fp{f};\n}" always "void f() {\n    FILE*f=fopen(fname,a);\n    std::unique_ptr<FILE> fp{f};\n}"
  true always 1
Line 1928
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1928 always 1928
  "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: f\n" always "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: f\n"
Line 1930
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1930 always 1930
  "void f() {\n    FILE*f=fopen(fname,a);\n    std::unique_ptr<FILE, decltype(&fclose)> fp{f, &fclose};\n}" always "void f() {\n    FILE*f=fopen(fname,a);\n    std::unique_ptr<FILE, decltype(&fclose)> fp{f, &fclose};\n}"
  true always 1
Line 1934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1934 always 1934
  "" always ""
Line 1936
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1936 always 1936
  "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, &fclose};\n}" always "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, &fclose};\n}"
  true always 1
Line 1940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1940 always 1940
  "" always ""
Line 1942
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1942 always 1942
  "struct deleter { void operator()(FILE* f) { fclose(f); }};\nvoid f() {\n    FILE*f=fopen(fname,a);\n    std::unique_ptr<FILE, deleter> fp{f};\n}" always "struct deleter { void operator()(FILE* f) { fclose(f); }};\nvoid f() {\n    FILE*f=fopen(fname,a);\n    std::unique_ptr<FILE, deleter> fp{f};\n}"
  true always 1
Line 1947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1947 always 1947
  "" always ""
Line 1949
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1949 always 1949
  "int * create();\nvoid destroy(int * x);\nvoid f() {\n    int x * = create()\n    std::unique_ptr<int, decltype(&destroy)> xp{x, &destroy()};\n}\n" always "int * create();\nvoid destroy(int * x);\nvoid f() {\n    int x * = create()\n    std::unique_ptr<int, decltype(&destroy)> xp{x, &destroy()};\n}\n"
  true always 1
Line 1955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1955 always 1955
  "" always ""
Line 1957
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1957 always 1957
  "int * create();\nvoid destroy(int * x);\nvoid f() {\n    int x * = create()\n    std::unique_ptr<int, decltype(&destroy)> xp(x, &destroy());\n}\n" always "int * create();\nvoid destroy(int * x);\nvoid f() {\n    int x * = create()\n    std::unique_ptr<int, decltype(&destroy)> xp(x, &destroy());\n}\n"
  true always 1
Line 1963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1963 always 1963
  "" always ""
Line 1965
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1965 always 1965
  "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, [](FILE* x) { fclose(x); }};\n}" always "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, [](FILE* x) { fclose(x); }};\n}"
  true always 1
Line 1969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1969 always 1969
  "" always ""
Line 1971
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1971 always 1971
  "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, +[](FILE* x) { fclose(x); }};\n}" always "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, +[](FILE* x) { fclose(x); }};\n}"
  true always 1
Line 1975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1975 always 1975
  "" always ""
Line 1977
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1977 always 1977
  "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, [](FILE* x) { free(f); }};\n}" always "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, [](FILE* x) { free(f); }};\n}"
  true always 1
Line 1981
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1981 always 1981
  "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: f\n" always "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: f\n"
  "" always ""
Line 1984
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1984 always 1984
  "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, [](FILE* x) {}};\n}" always "void f() {\n    FILE*f=fopen(fname,a);\n    std::shared_ptr<FILE> fp{f, [](FILE* x) {}};\n}"
  true always 1
Line 1988
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1988 always 1988
  "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: f\n" always "[test.cpp:2] -> [test.cpp:3]: (error) Mismatching allocation and deallocation: f\n"
  "" always ""
Line 1991
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1991 always 1991
  "class C;\nvoid f() {\n  C* c = new C{};\n  std::shared_ptr<C> a{c, [](C*) {}};\n}" always "class C;\nvoid f() {\n  C* c = new C{};\n  std::shared_ptr<C> a{c, [](C*) {}};\n}"
  true always 1
Line 1996
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1996 always 1996
  "" always ""
Line 1998
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  1998 always 1998
  "class C;\nvoid f() {\n  C* c = new C{};\n  std::shared_ptr<C> a{c, [](C* x) { delete x; }};\n}" always "class C;\nvoid f() {\n  C* c = new C{};\n  std::shared_ptr<C> a{c, [](C* x) { delete x; }};\n}"
  true always 1
Line 2003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2003 always 2003
  "" always ""
Line 2006
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2006 always 2006
  "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x(i);\n    x.release();\n    delete i;\n}\n" always "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x(i);\n    x.release();\n    delete i;\n}\n"
  true always 1
Line 2012
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2012 always 2012
  "" always ""
Line 2014
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2014 always 2014
  "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x(i);\n    x.release();\n}\n" always "void f() {\n    int * i = new int;\n    std::unique_ptr<int> x(i);\n    x.release();\n}\n"
  true always 1
Line 2019
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2019 always 2019
  "[test.cpp:5]: (error) Memory leak: i\n" always "[test.cpp:5]: (error) Memory leak: i\n"
Line 2023
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2023 always 2023
  "int f() {\n    char *p = malloc(100);\n    return 123;\n}" always "int f() {\n    char *p = malloc(100);\n    return 123;\n}"
Line 2027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2027 always 2027
  "[test.c:3]: (error) Memory leak: p\n" always "[test.c:3]: (error) Memory leak: p\n"
Line 2031
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2031 always 2031
  "char *f() {\n    char *p = malloc(100);\n    return p;\n}" always "char *f() {\n    char *p = malloc(100);\n    return p;\n}"
Line 2035
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2035 always 2035
  "" always ""
Line 2039
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2039 always 2039
  "struct dev * f() {\n    struct ABC *abc = malloc(100);\n    return &abc->dev;\n}" always "struct dev * f() {\n    struct ABC *abc = malloc(100);\n    return &abc->dev;\n}"
Line 2043
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2043 always 2043
  "" always ""
Line 2048
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2048 always 2048
  "void f(char *p, int x) {\n    if (x==12) {\n        free(p);\n        throw 1;\n    }\n    free(p);\n}" always "void f(char *p, int x) {\n    if (x==12) {\n        free(p);\n        throw 1;\n    }\n    free(p);\n}"
  true always 1
Line 2055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2055 always 2055
  "" always ""
Line 2057
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2057 always 2057
  "void f(char *p, int x) {\n    if (x==12) {\n        delete p;\n        throw 1;\n    }\n    delete p;\n}" always "void f(char *p, int x) {\n    if (x==12) {\n        delete p;\n        throw 1;\n    }\n    delete p;\n}"
  true always 1
Line 2064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2064 always 2064
  "" always ""
Line 2066
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2066 always 2066
  "void f(char *p, int x) {\n    if (x==12) {\n        delete [] p;\n        throw 1;\n    }\n    delete [] p;\n}" always "void f(char *p, int x) {\n    if (x==12) {\n        delete [] p;\n        throw 1;\n    }\n    delete [] p;\n}"
  true always 1
Line 2073
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2073 always 2073
  "" always ""
Line 2078
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2078 always 2078
  "void f(int *p, int x) {\n    if (x != 0) {\n        free(p);\n    }\n    if (x != 0) {\n        return;\n    }\n    *p = 0;\n}" always "void f(int *p, int x) {\n    if (x != 0) {\n        free(p);\n    }\n    if (x != 0) {\n        return;\n    }\n    *p = 0;\n}"
  true always 1
Line 2087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2087 always 2087
  "" always ""
Line 2091
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2091 always 2091
  "std::pair<char*, char*> f(size_t n) {\n   char* p = (char* )malloc(n);\n   return {p, p};\n}" always "std::pair<char*, char*> f(size_t n) {\n   char* p = (char* )malloc(n);\n   return {p, p};\n}"
  true always 1
Line 2095
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2095 always 2095
  "" always ""
Line 2099
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2099 always 2099
  "uint8_t *f() {\n    void *x = malloc(1);\n    return (uint8_t *)x;\n}" always "uint8_t *f() {\n    void *x = malloc(1);\n    return (uint8_t *)x;\n}"
  true always 1
Line 2103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2103 always 2103
  "" always ""
Line 2105
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2105 always 2105
  "uint8_t f() {\n    void *x = malloc(1);\n    return (uint8_t)x;\n}" always "uint8_t f() {\n    void *x = malloc(1);\n    return (uint8_t)x;\n}"
  true always 1
Line 2109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2109 always 2109
  "[test.cpp:3]: (error) Memory leak: x\n" always "[test.cpp:3]: (error) Memory leak: x\n"
Line 2111
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2111 always 2111
  "void** f() {\n    void *x = malloc(1);\n    return (void**)x;\n}" always "void** f() {\n    void *x = malloc(1);\n    return (void**)x;\n}"
  true always 1
Line 2115
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2115 always 2115
  "" always ""
Line 2117
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2117 always 2117
  "void* f() {\n    void *x = malloc(1);\n    return (long long)x;\n}" always "void* f() {\n    void *x = malloc(1);\n    return (long long)x;\n}"
  true always 1
Line 2121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2121 always 2121
  "" always ""
Line 2123
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2123 always 2123
  "void* f() {\n    void *x = malloc(1);\n    return (void*)(short)x;\n}" always "void* f() {\n    void *x = malloc(1);\n    return (void*)(short)x;\n}"
  true always 1
Line 2127
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2127 always 2127
  "[test.cpp:3]: (error) Memory leak: x\n" always "[test.cpp:3]: (error) Memory leak: x\n"
Line 2129
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2129 always 2129
  "void* f() {\n    void *x = malloc(1);\n    return (mytype)x;\n}" always "void* f() {\n    void *x = malloc(1);\n    return (mytype)x;\n}"
  true always 1
Line 2133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2133 always 2133
  "" always ""
Line 2135
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2135 always 2135
  "void* f() {\n    void *x = malloc(1);\n    return (mytype)y;\n}" always "void* f() {\n    void *x = malloc(1);\n    return (mytype)y;\n}"
  true always 1
Line 2139
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2139 always 2139
  "[test.cpp:3]: (error) Memory leak: x\n" always "[test.cpp:3]: (error) Memory leak: x\n"
Line 2143
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2143 always 2143
  "void* f() {\n    void *x = malloc(1);\n    return (x);\n}" always "void* f() {\n    void *x = malloc(1);\n    return (x);\n}"
  true always 1
Line 2147
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2147 always 2147
  "" always ""
Line 2149
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2149 always 2149
  "void* f() {\n    void *x = malloc(1);\n    return ((x));\n}" always "void* f() {\n    void *x = malloc(1);\n    return ((x));\n}"
  true always 1
Line 2153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2153 always 2153
  "" always ""
Line 2155
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2155 always 2155
  "void* f() {\n    void *x = malloc(1);\n    return ((((x))));\n}" always "void* f() {\n    void *x = malloc(1);\n    return ((((x))));\n}"
  true always 1
Line 2159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2159 always 2159
  "" always ""
Line 2161
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2161 always 2161
  "char* f() {\n    void *x = malloc(1);\n    return (char*)(x);\n}" always "char* f() {\n    void *x = malloc(1);\n    return (char*)(x);\n}"
  true always 1
Line 2165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2165 always 2165
  "" always ""
Line 2169
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2169 always 2169
  "void* f() {\n    void *x = malloc (sizeof (struct alloc));\n    return x + sizeof (struct alloc);\n}" always "void* f() {\n    void *x = malloc (sizeof (struct alloc));\n    return x + sizeof (struct alloc);\n}"
  true always 1
Line 2173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2173 always 2173
  "" always ""
Line 2177
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2177 always 2177
  "void f(double*&p) {\n    p = malloc(0x100);\n}" always "void f(double*&p) {\n    p = malloc(0x100);\n}"
Line 2180
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2180 always 2180
  "" always ""
Line 2184
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2184 always 2184
  "struct Fred {\n    char *p;\n    void f1() { free(p); }\n};" always "struct Fred {\n    char *p;\n    void f1() { free(p); }\n};"
Line 2188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2188 always 2188
  "" always ""
Line 2192
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2192 always 2192
  "void f() {\n    char *&p = x();\n    p = malloc(10);\n};" always "void f() {\n    char *&p = x();\n    p = malloc(10);\n};"
Line 2196
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2196 always 2196
  "" always ""
Line 2200
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2200 always 2200
  "void f() {\n    static char *p;\n    if (!p) p = malloc(10);\n    if (x) { free(p); p = 0; }\n};" always "void f() {\n    static char *p;\n    if (!p) p = malloc(10);\n    if (x) { free(p); p = 0; }\n};"
Line 2205
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2205 always 2205
  "" always ""
Line 2209
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2209 always 2209
  "void f() { Fred *p = malloc(10); }" always "void f() { Fred *p = malloc(10); }"
  true always 1
Line 2210
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2210 always 2210
  "[test.cpp:1]: (error) Memory leak: p\n" always "[test.cpp:1]: (error) Memory leak: p\n"
Line 2212
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2212 always 2212
  "void f() { Fred *p = malloc(10); }" always "void f() { Fred *p = malloc(10); }"
  false always 0
Line 2213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2213 always 2213
  "[test.c:1]: (error) Memory leak: p\n" always "[test.c:1]: (error) Memory leak: p\n"
Line 2215
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2215 always 2215
  "void f() { Fred *p = new Fred; }" always "void f() { Fred *p = new Fred; }"
  true always 1
Line 2216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2216 always 2216
  "" always ""
Line 2218
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2218 always 2218
  "void f() { Fred fred = malloc(10); }" always "void f() { Fred fred = malloc(10); }"
  true always 1
Line 2219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2219 always 2219
  "" always ""
Line 2223
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2223 always 2223
  "void f() {\n    char *p = malloc(10);\n    throw 123;\n}" always "void f() {\n    char *p = malloc(10);\n    throw 123;\n}"
  true always 1
Line 2227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2227 always 2227
  "[test.cpp:3]: (error) Memory leak: p\n" always "[test.cpp:3]: (error) Memory leak: p\n"
Line 2229
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2229 always 2229
  "void f() {\n    char *p;\n    try {\n        p = malloc(10);\n        throw 123;\n    } catch (...) { }\n    free(p);\n}" always "void f() {\n    char *p;\n    try {\n        p = malloc(10);\n        throw 123;\n    } catch (...) { }\n    free(p);\n}"
  true always 1
Line 2237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2237 always 2237
  "" always ""
Line 2241
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2241 always 2241
  "namespace NS {\n    class Except {\n    };\n}\nvoid foo(int i)\n{\n    int *pi = new int;\n    if (i == 42) {\n        delete pi;\n        throw ::NS::Except();\n    }\n    delete pi;\n}" always "namespace NS {\n    class Except {\n    };\n}\nvoid foo(int i)\n{\n    int *pi = new int;\n    if (i == 42) {\n        delete pi;\n        throw ::NS::Except();\n    }\n    delete pi;\n}"
  true always 1
Line 2254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2254 always 2254
  "" always ""
Line 2263
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2263 always 2263
  "void f() {\n    char *p = malloc(10);\n    x(p);\n}" always "void f() {\n    char *p = malloc(10);\n    x(p);\n}"
Line 2267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2267 always 2267
  "[test.c:3]: (information) --check-library: Function x() should have <noreturn> configuration\n[test.c:4]: (information) --check-library: Function x() should have <use>/<leak-ignore> configuration\n" always "[test.c:3]: (information) --check-library: Function x() should have <noreturn> configuration\n[test.c:4]: (information) --check-library: Function x() should have <use>/<leak-ignore> configuration\n"
Line 2275
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2275 always 2275
  "void f() {\n    char *p = malloc(10);\n    x(&p);\n}" always "void f() {\n    char *p = malloc(10);\n    x(&p);\n}"
Line 2279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2279 always 2279
  "[test.c:3]: (information) --check-library: Function x() should have <noreturn> configuration\n[test.c:4]: (information) --check-library: Function x() should have <use>/<leak-ignore> configuration\n" always "[test.c:3]: (information) --check-library: Function x() should have <noreturn> configuration\n[test.c:4]: (information) --check-library: Function x() should have <use>/<leak-ignore> configuration\n"
Line 2285
  = always "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { }\n}"
  "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { }\n}" always "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { }\n}"
Line 2289
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2289 always 2289
  code always "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { }\n}"
Line 2290
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2290 always 2290
  "[test.c:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" always "[test.c:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n"
Line 2291
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2291 always 2291
  true always 1
Line 2292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2292 always 2292
  "[test.cpp:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" always "[test.cpp:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n"
Line 2294
  = always "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { return; }\n}"
  "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { return; }\n}" always "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { return; }\n}"
Line 2298
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2298 always 2298
  code always "void f() {\n    char *p = malloc(10);\n    if (set_data(p)) { return; }\n}"
Line 2299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2299 always 2299
  "[test.c:3]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n[test.c:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" always "[test.c:3]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n[test.c:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n"
Line 2302
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2302 always 2302
  true always 1
Line 2303
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2303 always 2303
  "[test.cpp:3]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n[test.cpp:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" always "[test.cpp:3]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n[test.cpp:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n"
Line 2309
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2309 always 2309
  "void f() {\n    char *p = malloc(10);\n    int ret = set_data(p);\n    return ret;\n}" always "void f() {\n    char *p = malloc(10);\n    int ret = set_data(p);\n    return ret;\n}"
Line 2314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2314 always 2314
  "[test.c:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n" always "[test.c:4]: (information) --check-library: Function set_data() should have <use>/<leak-ignore> configuration\n"
Line 2318
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2318 always 2318
  "void f() {\n    char **p = malloc(10);\n}" always "void f() {\n    char **p = malloc(10);\n}"
Line 2321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2321 always 2321
  "[test.c:3]: (error) Memory leak: p\n" always "[test.c:3]: (error) Memory leak: p\n"
Line 2325
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2325 always 2325
  "void QueueDSMCCPacket(unsigned char *data, int length) {\n    unsigned char *dataCopy = malloc(length * sizeof(unsigned char));\n    m_dsmccQueue.enqueue(new DSMCCPacket(dataCopy));\n}" always "void QueueDSMCCPacket(unsigned char *data, int length) {\n    unsigned char *dataCopy = malloc(length * sizeof(unsigned char));\n    m_dsmccQueue.enqueue(new DSMCCPacket(dataCopy));\n}"
  true always 1
Line 2329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2329 always 2329
  "[test.cpp:4]: (information) --check-library: Function DSMCCPacket() should have <use>/<leak-ignore> configuration\n" always "[test.cpp:4]: (information) --check-library: Function DSMCCPacket() should have <use>/<leak-ignore> configuration\n"
Line 2331
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2331 always 2331
  "void QueueDSMCCPacket(unsigned char *data, int length) {\n    unsigned char *dataCopy = malloc(length * sizeof(unsigned char));\n    m_dsmccQueue.enqueue(new DSMCCPacket(somethingunrelated));\n}" always "void QueueDSMCCPacket(unsigned char *data, int length) {\n    unsigned char *dataCopy = malloc(length * sizeof(unsigned char));\n    m_dsmccQueue.enqueue(new DSMCCPacket(somethingunrelated));\n}"
  true always 1
Line 2335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2335 always 2335
  "[test.cpp:4]: (error) Memory leak: dataCopy\n" always "[test.cpp:4]: (error) Memory leak: dataCopy\n"
Line 2337
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2337 always 2337
  "void f() {\n  char *buf = new char[1000];\n  clist.push_back(new (std::nothrow) C(buf));\n}" always "void f() {\n  char *buf = new char[1000];\n  clist.push_back(new (std::nothrow) C(buf));\n}"
  true always 1
Line 2341
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2341 always 2341
  "[test.cpp:4]: (information) --check-library: Function C() should have <use>/<leak-ignore> configuration\n" always "[test.cpp:4]: (information) --check-library: Function C() should have <use>/<leak-ignore> configuration\n"
Line 2345
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2345 always 2345
  "int main(int argc, char **argv) {\n  double *new = malloc(1*sizeof(double));\n  free(new);\n  return 0;\n}" always "int main(int argc, char **argv) {\n  double *new = malloc(1*sizeof(double));\n  free(new);\n  return 0;\n}"
  false always 0
Line 2350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2350 always 2350
  "" always ""
Line 2354
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2354 always 2354
  "int test() {\n  char *c;\n  int ret() {\n        free(c);\n        return 0;\n    }\n    c = malloc(128);\n    return ret();\n}" always "int test() {\n  char *c;\n  int ret() {\n        free(c);\n        return 0;\n    }\n    c = malloc(128);\n    return ret();\n}"
Line 2363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2363 always 2363
  "" always ""
Line 2368
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2368 always 2368
  "std::list< std::shared_ptr<int> > mList;\nvoid test(){\n  int *pt = new int(1);\n  mList.push_back(std::shared_ptr<int>(pt));\n}\n" always "std::list< std::shared_ptr<int> > mList;\nvoid test(){\n  int *pt = new int(1);\n  mList.push_back(std::shared_ptr<int>(pt));\n}\n"
  true always 1
Line 2375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2375 always 2375
  "" always ""
Line 2381
  217 always 217
  = always "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"free_func\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <not-uninit/>\n    </arg>\n    <arg nr=\"2\">\n      <not-uninit/>\n    </arg>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"free_func\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <not-uninit/>\n    </arg>\n    <arg nr=\"2\">\n      <not-uninit/>\n    </arg>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"free_func\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <not-uninit/>\n    </arg>\n    <arg nr=\"2\">\n      <not-uninit/>\n    </arg>\n  </function>\n</def>"
Line 2394
  xmldata always "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"free_func\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <not-uninit/>\n    </arg>\n    <arg nr=\"2\">\n      <not-uninit/>\n    </arg>\n  </function>\n</def>"
  sizeof always 217
  ( always 217
  xmldata always "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"free_func\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <not-uninit/>\n    </arg>\n    <arg nr=\"2\">\n      <not-uninit/>\n    </arg>\n  </function>\n</def>"
Line 2395
  settingsFunctionCall always symbolic=(settings)
Line 2396
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2396 always 2396
  "void test_func()\n{\n    char * buf = malloc(4);\n    free_func((void *)(1), buf);\n}" always "void test_func()\n{\n    char * buf = malloc(4);\n    free_func((void *)(1), buf);\n}"
Line 2401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2401 always 2401
  "[test.cpp:5]: (information) --check-library: Function free_func() should have <use>/<leak-ignore> configuration\n" always "[test.cpp:5]: (information) --check-library: Function free_func() should have <use>/<leak-ignore> configuration\n"
Line 2407
  186 always 186
  = always "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"SomeClass::someMethod\">\n    <leak-ignore/>\n    <noreturn>false</noreturn>\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n</def>\n"
  "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"SomeClass::someMethod\">\n    <leak-ignore/>\n    <noreturn>false</noreturn>\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n</def>\n" always "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"SomeClass::someMethod\">\n    <leak-ignore/>\n    <noreturn>false</noreturn>\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n</def>\n"
Line 2416
  xmldata always "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"SomeClass::someMethod\">\n    <leak-ignore/>\n    <noreturn>false</noreturn>\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n</def>\n"
  sizeof always 186
  ( always 186
  xmldata always "<?xml version=\"1.0\"?>\n<def format=\"2\">\n  <function name=\"SomeClass::someMethod\">\n    <leak-ignore/>\n    <noreturn>false</noreturn>\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n</def>\n"
Line 2417
  settingsLeakIgnore always symbolic=(settings)
Line 2418
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2418 always 2418
  "void f() {\n    double* a = new double[1024];\n    SomeClass::someMethod(a);\n}\n" always "void f() {\n    double* a = new double[1024];\n    SomeClass::someMethod(a);\n}\n"
Line 2422
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2422 always 2422
  "[test.cpp:4]: (error) Memory leak: a\n" always "[test.cpp:4]: (error) Memory leak: a\n"
Line 2430
  "TestLeakAutoVarRecursiveCountLimit" always "TestLeakAutoVarRecursiveCountLimit"
Line 2435
  , always 0
  cpp always {!<=-1,!>=2}
  = always 0
  false always 0
Line 2437
  "" always ""
Line 2440
  1 always 1
  cpp always {!<=-1,!>=2}
  ? possible {"test.cpp","test.c"}
  "test.cpp" always "test.cpp"
  : always "test.c"
  "test.c" always "test.c"
Line 2441
  code possible {"#define ONE     else if (0) { }\n#define TEN     ONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n#define HUN     TEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n#define THOU    HUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\nvoid foo() {\n  if (0) { }\n  THOU THOU\n}"@14,"#define ONE     if (0) { }\n#define TEN     ONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n#define HUN     TEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n#define THOU    HUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\nvoid foo() {\n  if (0) { }\n  THOU THOU\n}"@15}
Line 2442
  files always size=1
  0 always 0
Line 2447
  filedata always size=0
Line 2450
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 2452
  "" always ""
Line 2456
  = always 1
  true always 1
Line 2457
  "information" always "information"
Line 2458
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 2462
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 2464
  ( always {!<=-1,!>=2}
  "recursiveCountLimit" always "recursiveCountLimit"
  false always 0
  false always 0
Line 2468
  "#define ONE     else if (0) { }\n#define TEN     ONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n#define HUN     TEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n#define THOU    HUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\nvoid foo() {\n  if (0) { }\n  THOU THOU\n}" always "#define ONE     else if (0) { }\n#define TEN     ONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n#define HUN     TEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n#define THOU    HUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\nvoid foo() {\n  if (0) { }\n  THOU THOU\n}"
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2468 always 2468
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2468 always 2468
  false always 0
Line 2476
  "#define ONE     if (0) { }\n#define TEN     ONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n#define HUN     TEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n#define THOU    HUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\nvoid foo() {\n  if (0) { }\n  THOU THOU\n}" always "#define ONE     if (0) { }\n#define TEN     ONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n#define HUN     TEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n#define THOU    HUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\nvoid foo() {\n  if (0) { }\n  THOU THOU\n}"
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2476 always 2476
  false always 0
Line 2491
  "TestLeakAutoVarStrcpy" always "TestLeakAutoVarStrcpy"
Line 2498
  "" always ""
Line 2501
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 2502
  code possible {"int  f(FILE *fp) { return fclose(fp); }"@8,"char *m;\nvoid strcpy_returnedvalue(const char* str)\n{\n    char* ptr = new char[strlen(str)+1];\n    m = strcpy(ptr, str);\n}"@9}
Line 2503
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testleakautovar.cpp"@8,"cppcheck-2.8/test/testleakautovar.cpp"@9}
  line inconclusive {2530@8,2520@9}
  "test.cpp" always "test.cpp"
Line 2507
  = always 1
  true always 1
Line 2509
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 2513
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 2515
  ( always {!<=-1,!>=2}
  "returnedValue" always "returnedValue"
  false always 0
  false always 0
Line 2516
  ( always {!<=-1,!>=2}
  "fclose_false_positive" always "fclose_false_positive"
  false always 0
  false always 0
Line 2520
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2520 always 2520
  "char *m;\nvoid strcpy_returnedvalue(const char* str)\n{\n    char* ptr = new char[strlen(str)+1];\n    m = strcpy(ptr, str);\n}" always "char *m;\nvoid strcpy_returnedvalue(const char* str)\n{\n    char* ptr = new char[strlen(str)+1];\n    m = strcpy(ptr, str);\n}"
Line 2526
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2526 always 2526
  "" always ""
Line 2530
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2530 always 2530
  "int  f(FILE *fp) { return fclose(fp); }" always "int  f(FILE *fp) { return fclose(fp); }"
Line 2531
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2531 always 2531
  "" always ""
Line 2541
  "TestLeakAutoVarWindows" always "TestLeakAutoVarWindows"
Line 2548
  "" always ""
Line 2551
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 2552
  code possible {"void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapFree(MyHeap, 0, b);  HeapDestroy(MyHeap);}"@1,"void f() {  int *a = HeapAlloc(GetProcessHeap(), 0, sizeof(int));  int *b = HeapAlloc(GetProcessHeap(), 0, sizeof(int));  HeapFree(GetProcessHeap(), 0, a);  HeapFree(GetProcessHeap(), 0, b);}"@2,"void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapDestroy(MyHeap);}"@3,"void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapFree(MyHeap, 0, b);}"@4,"void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);}"@5}
Line 2553
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testleakautovar.cpp"@1,"cppcheck-2.8/test/testleakautovar.cpp"@2,"cppcheck-2.8/test/testleakautovar.cpp"@3,"cppcheck-2.8/test/testleakautovar.cpp"@4,"cppcheck-2.8/test/testleakautovar.cpp"@5}
  line inconclusive {2567@1,2577@2,2585@3,2594@4,2604@5}
  "test.c" always "test.c"
Line 2557
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 2561
  ( {lifetime[Object]=(exename),!0}
  "windows.cfg" always "windows.cfg"
  != always {!<=-1,!>=2}
  "windows.cfg" always "windows.cfg"
  false always 0
Line 2563
  ( always {!<=-1,!>=2}
  "heapDoubleFree" always "heapDoubleFree"
  false always 0
  false always 0
Line 2567
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2567 always 2567
  "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapFree(MyHeap, 0, b);  HeapDestroy(MyHeap);}" always "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapFree(MyHeap, 0, b);  HeapDestroy(MyHeap);}"
Line 2575
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2575 always 2575
  "" always ""
Line 2577
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2577 always 2577
  "void f() {  int *a = HeapAlloc(GetProcessHeap(), 0, sizeof(int));  int *b = HeapAlloc(GetProcessHeap(), 0, sizeof(int));  HeapFree(GetProcessHeap(), 0, a);  HeapFree(GetProcessHeap(), 0, b);}" always "void f() {  int *a = HeapAlloc(GetProcessHeap(), 0, sizeof(int));  int *b = HeapAlloc(GetProcessHeap(), 0, sizeof(int));  HeapFree(GetProcessHeap(), 0, a);  HeapFree(GetProcessHeap(), 0, b);}"
Line 2583
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2583 always 2583
  "" always ""
Line 2585
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2585 always 2585
  "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapDestroy(MyHeap);}" always "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapDestroy(MyHeap);}"
Line 2592
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2592 always 2592
  "[test.c:1]: (error) Memory leak: b\n" always "[test.c:1]: (error) Memory leak: b\n"
Line 2594
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2594 always 2594
  "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapFree(MyHeap, 0, b);}" always "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);  HeapFree(MyHeap, 0, b);}"
Line 2601
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2601 always 2601
  "[test.c:1] (error) Resource leak: MyHeap" always "[test.c:1] (error) Resource leak: MyHeap"
  "" always ""
Line 2604
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2604 always 2604
  "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);}" always "void f() {  HANDLE MyHeap = HeapCreate(0, 0, 0);  int *a = HeapAlloc(MyHeap, 0, sizeof(int));  int *b = HeapAlloc(MyHeap, 0, sizeof(int));  HeapFree(MyHeap, 0, a);}"
Line 2610
  "cppcheck-2.8/test/testleakautovar.cpp" always "cppcheck-2.8/test/testleakautovar.cpp"
  2610 always 2610
  "[test.c:1] (error) Memory leak: MyHeap\n[test.c:1] (error) Memory leak: b" always "[test.c:1] (error) Memory leak: MyHeap\n[test.c:1] (error) Memory leak: b"
  "[test.c:1]: (error) Memory leak: b\n" always "[test.c:1]: (error) Memory leak: b\n"
