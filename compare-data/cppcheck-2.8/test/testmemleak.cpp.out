

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741993 expected@var22 !=@expr1073741994 actual@var23 ) {
62: std ::@expr1073741995 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741996 expected@var22 ;
64: std ::@expr1073741997 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741998 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741999 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742000 str (@expr1073742001 ) , actualStr@var26 .@expr1073742002 str (@expr1073742003 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742004 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742005 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742006 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742007 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testmemleak.cpp

1:
|
31:
32: class TestMemleakInClass ;
33: class TestMemleakNoVar ;
34: class TestMemleakStructMember ;
35:
36:
37: class TestMemleak : private TestFixture {
38: public:
39: TestMemleak ( ) : TestFixture ( "TestMemleak" ) { }
40:
41: private:
42: Settings settings@var102 ;
43:
44: void run ( ) override {
45: $do ${ $if $(@expr1073742008 $prepareTest $(@expr1073742009 "testFunctionReturnType" $) $) ${ $setVerbose $(@expr1073742010 $false $) $; testFunctionReturnType $(@expr1073742011 $) $; $} $} $while $(@expr1073742012 $false $) ;
46: $do ${ $if $(@expr1073742013 $prepareTest $(@expr1073742014 "open" $) $) ${ $setVerbose $(@expr1073742015 $false $) $; open $(@expr1073742016 $) $; $} $} $while $(@expr1073742017 $false $) ;
47: }
48:
49:
50: CheckMemoryLeak :: AllocType functionReturnType_ ( const char code@var103 [ ] , const char * file@var104 , int line@var105 ) {
51:
52: errout@var100 .@expr1073742018 str (@expr1073742019 "" ) ;
53:
54:
55: Tokenizer tokenizer@var106 (@expr1073742020 &@expr197 settings@var102 , this@expr198 ) ;
56: std ::@expr1073742023 istringstream istr@var107 (@expr1073742024 code@var103 ) ;
57: $assert_ $(@expr1073742025 file@var104 $, line@var105 $, $(@expr1073742026 tokenizer@var106 .@expr1073742027 tokenize (@expr1073742028 istr@var107 , "test.cpp" ) $) $) ;
58:
59: const CheckMemoryLeak c@var108 (@expr1073742029 &@expr1073742030 tokenizer@var106 , this@expr198 , &@expr197 settings@var102 ) ;
60:
61: return (@expr1073742032 c@var108 .@expr1073742033 functionReturnType@var109 ) (@expr1073742034 &@expr1073742035 tokenizer@var106 .@expr1073742036 getSymbolDatabase (@expr1073742037 ) .@expr1073742038 scopeList .@expr1073742039 front (@expr1073742040 ) .@expr1073742041 functionList .@expr1073742042 front (@expr1073742043 ) ) ;
62: }
63:
64: void testFunctionReturnType ( ) {
65: {
66: const char code@var110 [@expr1073742044 32 ] =@expr1073742045 "const char *foo()\n{ return 0; }"
67: ;
68: $if $(@expr1073742046 $!@expr1073742047 $assertEquals $(@expr1073742048 "cppcheck-2.8/test/testmemleak.cpp" $, 68 $, CheckMemoryLeak ::@expr1073742049 No $, $functionReturnType_ $(@expr1073742050 code@var110 $, "cppcheck-2.8/test/testmemleak.cpp" $, 68 $) $) $) { $return ; }
69: }
70:
71: {
72: const char code@var111 [@expr1073742051 37 ] =@expr1073742052 "Fred *newFred()\n{ return new Fred; }"
73: ;
74: $if $(@expr1073742053 $!@expr1073742054 $assertEquals $(@expr1073742055 "cppcheck-2.8/test/testmemleak.cpp" $, 74 $, CheckMemoryLeak ::@expr1073742056 New $, $functionReturnType_ $(@expr1073742057 code@var111 $, "cppcheck-2.8/test/testmemleak.cpp" $, 74 $) $) $) { $return ; }
75: }
76:
77: {
78: const char code@var112 [@expr1073742058 38 ] =@expr1073742059 "char *foo()\n{ return new char[100]; }"
79: ;
80: $if $(@expr1073742060 $!@expr1073742061 $assertEquals $(@expr1073742062 "cppcheck-2.8/test/testmemleak.cpp" $, 80 $, CheckMemoryLeak ::@expr239 NewArray $, $functionReturnType_ $(@expr1073742064 code@var112 $, "cppcheck-2.8/test/testmemleak.cpp" $, 80 $) $) $) { $return ; }
81: }
82:
83: {
84: const char code@var113 [@expr1073742065 59 ] =@expr1073742066 "char *foo()\n{\n    char *p = new char[100];\n    return p;\n}"
85:
86:
87:
88: ;
89: $if $(@expr1073742067 $!@expr1073742068 $assertEquals $(@expr1073742069 "cppcheck-2.8/test/testmemleak.cpp" $, 89 $, CheckMemoryLeak ::@expr239 NewArray $, $functionReturnType_ $(@expr1073742071 code@var113 $, "cppcheck-2.8/test/testmemleak.cpp" $, 89 $) $) $) { $return ; }
90: }
91: }
92:
93: void open ( ) {
94: const char code@var114 [@expr1073742073 89 ] =@expr1073742074 "class A {\n  static int open() {\n    return 1;\n  }\n\n  A() {\n    int ret = open();\n  }\n};\n"
95:
|
101:
102: ;
103:
104:
105: errout@var100 .@expr1073742075 str (@expr1073742076 "" ) ;
106:
107: Tokenizer tokenizer@var115 (@expr1073742077 &@expr254 settings@var102 , this@expr1073742079 ) ;
108: std ::@expr1073742080 istringstream istr@var116 (@expr1073742081 code@var114 ) ;
109: $if $(@expr1073742082 $!@expr1073742083 $assert_ $(@expr1073742084 "cppcheck-2.8/test/testmemleak.cpp" $, 109 $, $(@expr1073742085 tokenizer@var115 .@expr1073742086 tokenize (@expr1073742087 istr@var116 , "test.cpp" ) $) $) $) { $return ; }
110:
111:
112: const Token * tok@var117 ; tok@var117 =@expr1073742088 Token ::@expr1073742089 findsimplematch (@expr1073742090 tokenizer@var115 .@expr1073742091 tokens (@expr1073742092 ) , "ret =" ) ;
113: const CheckMemoryLeak check@var118 (@expr1073742093 &@expr1073742094 tokenizer@var115 , nullptr , &@expr254 settings@var102 ) ;
114: $if $(@expr1073742096 $!@expr1073742097 $assertEquals $(@expr1073742098 "cppcheck-2.8/test/testmemleak.cpp" $, 114 $, CheckMemoryLeak ::@expr1073742099 No@expr1073742072 $, $(@expr1073742100 check@var118 .@expr1073742101 getAllocationType (@expr1073742102 tok@var117 .@expr1073742103 tokAt (@expr1073742104 2 ) , 1 ) $) $) $) { $return ; }
115: }
116: } ;
117:
118: $namespace ${ TestMemleak instance_TestMemleak@var119 $; $}
119:
|
123:
124: class TestMemleakInFunction : public TestFixture {
125: public:
126: TestMemleakInFunction ( ) : TestFixture ( "TestMemleakInFunction" ) { }
127:
128: private:
129: Settings settings0@var120 ;
130: Settings settings1@var121 ;
131: Settings settings2@var122 ;
132:
133:
134: void check_ ( const char * file@var123 , int line@var124 , const char code@var125 [ ] ) {
135:
136: errout@var100 .@expr1073742105 str (@expr1073742106 "" ) ;
137:
138: Settings * settings@var126 ; settings@var126 =@expr1073742107 &@expr1073742108 settings1@var121 ;
139:
140:
141: Tokenizer tokenizer@var127 (@expr1073742109 settings@var126 , this@expr286 ) ;
142: std ::@expr1073742111 istringstream istr@var128 (@expr1073742112 code@var125 ) ;
143: $assert_ $(@expr1073742113 file@var123 $, line@var124 $, $(@expr1073742114 tokenizer@var127 .@expr1073742115 tokenize (@expr1073742116 istr@var128 , "test.cpp" ) $) $) ;
144:
145:
146: CheckMemoryLeakInFunction checkMemoryLeak@var129 (@expr1073742117 &@expr1073742118 tokenizer@var127 , settings@var126 , this@expr286 ) ;
147: checkMemoryLeak@var129 .@expr1073742119 checkReallocUsage (@expr1073742120 ) ;
148: }
149:
150:
151: void run ( ) override {
152: $do ${ $if $(@expr1073742121 settings1@var121 .@expr298 library@var130 $.@expr1073742123 $load $(@expr1073742124 $exename@var11 $.@expr1073742125 $c_str $(@expr1073742126 $) $, "std.cfg" $) $.@expr1073742127 $errorcode $!=@expr1073742128 $Library $::@expr1073742129 $ErrorCode $::@expr1073742130 $OK $) ${ $complainMissingLib $(@expr1073742131 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742132 $false $) ;
153: $do ${ $if $(@expr1073742133 settings1@var121 .@expr298 library@var130 $.@expr1073742135 $load $(@expr1073742136 $exename@var11 $.@expr1073742137 $c_str $(@expr1073742138 $) $, "posix.cfg" $) $.@expr1073742139 $errorcode $!=@expr1073742140 $Library $::@expr1073742141 $ErrorCode $::@expr1073742142 $OK $) ${ $complainMissingLib $(@expr1073742143 "posix.cfg" $) $; $return $; $} $} $while $(@expr1073742144 $false $) ;
154: $do ${ $if $(@expr1073742145 settings2@var122 .@expr1073742146 library@var131 $.@expr1073742147 $load $(@expr1073742148 $exename@var11 $.@expr1073742149 $c_str $(@expr1073742150 $) $, "std.cfg" $) $.@expr1073742151 $errorcode $!=@expr1073742152 $Library $::@expr1073742153 $ErrorCode $::@expr1073742154 $OK $) ${ $complainMissingLib $(@expr1073742155 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742156 $false $) ;
155:
156: $do ${ $if $(@expr1073742157 $prepareTest $(@expr1073742158 "realloc1" $) $) ${ $setVerbose $(@expr1073742159 $false $) $; realloc1 $(@expr1073742160 $) $; $} $} $while $(@expr1073742161 $false $) ;
157: $do ${ $if $(@expr1073742162 $prepareTest $(@expr1073742163 "realloc2" $) $) ${ $setVerbose $(@expr1073742164 $false $) $; realloc2 $(@expr1073742165 $) $; $} $} $while $(@expr1073742166 $false $) ;
158: $do ${ $if $(@expr1073742167 $prepareTest $(@expr1073742168 "realloc3" $) $) ${ $setVerbose $(@expr1073742169 $false $) $; realloc3 $(@expr1073742170 $) $; $} $} $while $(@expr1073742171 $false $) ;
159: $do ${ $if $(@expr1073742172 $prepareTest $(@expr1073742173 "realloc4" $) $) ${ $setVerbose $(@expr1073742174 $false $) $; realloc4 $(@expr1073742175 $) $; $} $} $while $(@expr1073742176 $false $) ;
160: $do ${ $if $(@expr1073742177 $prepareTest $(@expr1073742178 "realloc5" $) $) ${ $setVerbose $(@expr1073742179 $false $) $; realloc5 $(@expr1073742180 $) $; $} $} $while $(@expr1073742181 $false $) ;
161: $do ${ $if $(@expr1073742182 $prepareTest $(@expr1073742183 "realloc7" $) $) ${ $setVerbose $(@expr1073742184 $false $) $; realloc7 $(@expr1073742185 $) $; $} $} $while $(@expr1073742186 $false $) ;
162: $do ${ $if $(@expr1073742187 $prepareTest $(@expr1073742188 "realloc8" $) $) ${ $setVerbose $(@expr1073742189 $false $) $; realloc8 $(@expr1073742190 $) $; $} $} $while $(@expr1073742191 $false $) ;
163: $do ${ $if $(@expr1073742192 $prepareTest $(@expr1073742193 "realloc9" $) $) ${ $setVerbose $(@expr1073742194 $false $) $; realloc9 $(@expr1073742195 $) $; $} $} $while $(@expr1073742196 $false $) ;
164: $do ${ $if $(@expr1073742197 $prepareTest $(@expr1073742198 "realloc10" $) $) ${ $setVerbose $(@expr1073742199 $false $) $; realloc10 $(@expr1073742200 $) $; $} $} $while $(@expr1073742201 $false $) ;
165: $do ${ $if $(@expr1073742202 $prepareTest $(@expr1073742203 "realloc11" $) $) ${ $setVerbose $(@expr1073742204 $false $) $; realloc11 $(@expr1073742205 $) $; $} $} $while $(@expr1073742206 $false $) ;
166: $do ${ $if $(@expr1073742207 $prepareTest $(@expr1073742208 "realloc12" $) $) ${ $setVerbose $(@expr1073742209 $false $) $; realloc12 $(@expr1073742210 $) $; $} $} $while $(@expr1073742211 $false $) ;
167: $do ${ $if $(@expr1073742212 $prepareTest $(@expr1073742213 "realloc13" $) $) ${ $setVerbose $(@expr1073742214 $false $) $; realloc13 $(@expr1073742215 $) $; $} $} $while $(@expr1073742216 $false $) ;
168: $do ${ $if $(@expr1073742217 $prepareTest $(@expr1073742218 "realloc14" $) $) ${ $setVerbose $(@expr1073742219 $false $) $; realloc14 $(@expr1073742220 $) $; $} $} $while $(@expr1073742221 $false $) ;
169: $do ${ $if $(@expr1073742222 $prepareTest $(@expr1073742223 "realloc15" $) $) ${ $setVerbose $(@expr1073742224 $false $) $; realloc15 $(@expr1073742225 $) $; $} $} $while $(@expr1073742226 $false $) ;
170: $do ${ $if $(@expr1073742227 $prepareTest $(@expr1073742228 "realloc16" $) $) ${ $setVerbose $(@expr1073742229 $false $) $; realloc16 $(@expr1073742230 $) $; $} $} $while $(@expr1073742231 $false $) ;
171: $do ${ $if $(@expr1073742232 $prepareTest $(@expr1073742233 "realloc17" $) $) ${ $setVerbose $(@expr1073742234 $false $) $; realloc17 $(@expr1073742235 $) $; $} $} $while $(@expr1073742236 $false $) ;
172: $do ${ $if $(@expr1073742237 $prepareTest $(@expr1073742238 "realloc18" $) $) ${ $setVerbose $(@expr1073742239 $false $) $; realloc18 $(@expr1073742240 $) $; $} $} $while $(@expr1073742241 $false $) ;
173: $do ${ $if $(@expr1073742242 $prepareTest $(@expr1073742243 "realloc19" $) $) ${ $setVerbose $(@expr1073742244 $false $) $; realloc19 $(@expr1073742245 $) $; $} $} $while $(@expr1073742246 $false $) ;
174: $do ${ $if $(@expr1073742247 $prepareTest $(@expr1073742248 "realloc20" $) $) ${ $setVerbose $(@expr1073742249 $false $) $; realloc20 $(@expr1073742250 $) $; $} $} $while $(@expr1073742251 $false $) ;
175: $do ${ $if $(@expr1073742252 $prepareTest $(@expr1073742253 "realloc21" $) $) ${ $setVerbose $(@expr1073742254 $false $) $; realloc21 $(@expr1073742255 $) $; $} $} $while $(@expr1073742256 $false $) ;
176: $do ${ $if $(@expr1073742257 $prepareTest $(@expr1073742258 "realloc22" $) $) ${ $setVerbose $(@expr1073742259 $false $) $; realloc22 $(@expr1073742260 $) $; $} $} $while $(@expr1073742261 $false $) ;
177: $do ${ $if $(@expr1073742262 $prepareTest $(@expr1073742263 "realloc23" $) $) ${ $setVerbose $(@expr1073742264 $false $) $; realloc23 $(@expr1073742265 $) $; $} $} $while $(@expr1073742266 $false $) ;
178: $do ${ $if $(@expr1073742267 $prepareTest $(@expr1073742268 "realloc24" $) $) ${ $setVerbose $(@expr1073742269 $false $) $; realloc24 $(@expr1073742270 $) $; $} $} $while $(@expr1073742271 $false $) ;
179: $do ${ $if $(@expr1073742272 $prepareTest $(@expr1073742273 "reallocarray1" $) $) ${ $setVerbose $(@expr1073742274 $false $) $; reallocarray1 $(@expr1073742275 $) $; $} $} $while $(@expr1073742276 $false $) ;
180: }
181:
182: void realloc1 ( ) {
183: $check_ $(@expr1073742277 "cppcheck-2.8/test/testmemleak.cpp" $, 183 $, "void foo()\n{\n    char *a = (char *)malloc(10);\n    a = realloc(a, 100);\n}" $)
184:
185:
186:
187: ;
188: $if $(@expr1073742278 $!@expr1073742279 $assertEquals $(@expr1073742280 "cppcheck-2.8/test/testmemleak.cpp" $, 188 $, "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" $, errout@var100 .@expr1073742281 str (@expr1073742282 ) $) $) { $return ; }
189: }
190:
191: void realloc2 ( ) {
192: $check_ $(@expr1073742283 "cppcheck-2.8/test/testmemleak.cpp" $, 192 $, "void foo()\n{\n    char *a = (char *)malloc(10);\n    a = (char *)realloc(a, 100);\n    free(a);\n}" $)
193:
|
196:
197: ;
198:
199: $if $(@expr1073742284 $!@expr1073742285 $assertEquals $(@expr1073742286 "cppcheck-2.8/test/testmemleak.cpp" $, 199 $, "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" $, errout@var100 .@expr1073742287 str (@expr1073742288 ) $) $) { $return ; }
200: }
201:
202: void realloc3 ( ) {
203: $check_ $(@expr1073742289 "cppcheck-2.8/test/testmemleak.cpp" $, 203 $, "void foo()\n{\n    char *a = 0;\n    if ((a = realloc(a, 100)) == NULL)\n        return;\n    free(a);\n}" $)
204:
|
208:
209: ;
210:
211: $if $(@expr1073742290 $!@expr1073742291 $assertEquals $(@expr1073742292 "cppcheck-2.8/test/testmemleak.cpp" $, 211 $, "" $, errout@var100 .@expr1073742293 str (@expr1073742294 ) $) $) { $return ; }
212: }
213:
214: void realloc4 ( ) {
215: $check_ $(@expr1073742295 "cppcheck-2.8/test/testmemleak.cpp" $, 215 $, "void foo()\n{\n    static char *a = 0;\n    if ((a = realloc(a, 100)) == NULL)\n        return;\n    free(a);\n}" $)
216:
|
220:
221: ;
222:
223: $todoAssertEquals $(@expr1073742296 "cppcheck-2.8/test/testmemleak.cpp" $, 223 $, "[test.cpp:5]: (error) Memory leak: a\n" $, "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" $, errout@var100 .@expr1073742297 str (@expr1073742298 ) $)
224:
225: ;
226: }
227:
228: void realloc5 ( ) {
229: $check_ $(@expr1073742299 "cppcheck-2.8/test/testmemleak.cpp" $, 229 $, "void foo()\n{\n    char *buf;\n    char *new_buf;\n    buf = calloc( 10 );\n    new_buf = realloc ( buf, 20);\n    if ( !new_buf )\n        free(buf);\n    else\n        free(new_buf);\n}" $)
230:
|
238:
239: ;
240: $if $(@expr1073742300 $!@expr1073742301 $assertEquals $(@expr1073742302 "cppcheck-2.8/test/testmemleak.cpp" $, 240 $, "" $, errout@var100 .@expr1073742303 str (@expr1073742304 ) $) $) { $return ; }
241: }
242:
243: void realloc7 ( ) {
244: $check_ $(@expr1073742305 "cppcheck-2.8/test/testmemleak.cpp" $, 244 $, "bool foo(size_t nLen, char* pData)\n{\n    pData = (char*) realloc(pData, sizeof(char) + (nLen + 1)*sizeof(char));\n    if ( pData == NULL )\n    {\n        return false;\n    }\n    free(pData);\n    return true;\n}" $)
245:
|
252:
253: ;
254: $if $(@expr1073742306 $!@expr1073742307 $assertEquals $(@expr1073742308 "cppcheck-2.8/test/testmemleak.cpp" $, 254 $, "" $, errout@var100 .@expr1073742309 str (@expr1073742310 ) $) $) { $return ; }
255: }
256:
257: void realloc8 ( ) {
258: $check_ $(@expr1073742311 "cppcheck-2.8/test/testmemleak.cpp" $, 258 $, "void foo()\n{\n    char *origBuf = m_buf;\n    m_buf = (char *) realloc (m_buf, m_capacity + growBy);\n    if (!m_buf) {\n        m_buf = origBuf;\n    }\n}" $)
259:
|
264:
265: ;
266: $if $(@expr1073742312 $!@expr1073742313 $assertEquals $(@expr1073742314 "cppcheck-2.8/test/testmemleak.cpp" $, 266 $, "" $, errout@var100 .@expr1073742315 str (@expr1073742316 ) $) $) { $return ; }
267: }
268:
269: void realloc9 ( ) {
270: $check_ $(@expr1073742317 "cppcheck-2.8/test/testmemleak.cpp" $, 270 $, "void foo()\n{\n    x = realloc(x,100);\n}" $)
271:
272:
273: ;
274: $if $(@expr1073742318 $!@expr1073742319 $assertEquals $(@expr1073742320 "cppcheck-2.8/test/testmemleak.cpp" $, 274 $, "" $, errout@var100 .@expr1073742321 str (@expr1073742322 ) $) $) { $return ; }
275: }
276:
277: void realloc10 ( ) {
278: $check_ $(@expr1073742323 "cppcheck-2.8/test/testmemleak.cpp" $, 278 $, "void foo() {\n    char *pa, *pb;\n    pa = pb = malloc(10);\n    pa = realloc(pa, 20);    exit();\n}" $)
279:
|
282:
283: ;
284: $if $(@expr1073742324 $!@expr1073742325 $assertEquals $(@expr1073742326 "cppcheck-2.8/test/testmemleak.cpp" $, 284 $, "" $, errout@var100 .@expr1073742327 str (@expr1073742328 ) $) $) { $return ; }
285: }
286:
287: void realloc11 ( ) {
288: $check_ $(@expr1073742329 "cppcheck-2.8/test/testmemleak.cpp" $, 288 $, "void foo() {\n    char *p;\n    p = realloc(p, size);\n    if (!p)\n        error();\n    usep(p);\n}" $)
289:
|
293:
294: ;
295: $if $(@expr1073742330 $!@expr1073742331 $assertEquals $(@expr1073742332 "cppcheck-2.8/test/testmemleak.cpp" $, 295 $, "" $, errout@var100 .@expr1073742333 str (@expr1073742334 ) $) $) { $return ; }
296: }
297:
298: void realloc12 ( ) {
299: $check_ $(@expr1073742335 "cppcheck-2.8/test/testmemleak.cpp" $, 299 $, "void foo(int x)\n{\n    char *a = 0;\n    if ((a = realloc(a, x + 100)) == NULL)\n        return;\n    free(a);\n}" $)
300:
|
304:
305: ;
306: $if $(@expr1073742336 $!@expr1073742337 $assertEquals $(@expr1073742338 "cppcheck-2.8/test/testmemleak.cpp" $, 306 $, "" $, errout@var100 .@expr1073742339 str (@expr1073742340 ) $) $) { $return ; }
307: }
308:
309: void realloc13 ( ) {
310: $check_ $(@expr1073742341 "cppcheck-2.8/test/testmemleak.cpp" $, 310 $, "void foo()\n{\n    char **str;\n    *str = realloc(*str,100);\n    free (*str);\n}" $)
311:
|
314:
315: ;
316: $if $(@expr1073742342 $!@expr1073742343 $assertEquals $(@expr1073742344 "cppcheck-2.8/test/testmemleak.cpp" $, 316 $, "[test.cpp:4]: (error) Common realloc mistake: \'str\' nulled but not freed upon failure\n" $, errout@var100 .@expr1073742345 str (@expr1073742346 ) $) $) { $return ; }
317: }
318:
319: void realloc14 ( ) {
320: $check_ $(@expr1073742347 "cppcheck-2.8/test/testmemleak.cpp" $, 320 $, "void foo() {\n    char *p;\n    p = realloc(p, size + 1);\n    if (!p)\n        error();\n    usep(p);\n}" $)
321:
|
325:
326: ;
327: $if $(@expr1073742348 $!@expr1073742349 $assertEquals $(@expr1073742350 "cppcheck-2.8/test/testmemleak.cpp" $, 327 $, "" $, errout@var100 .@expr1073742351 str (@expr1073742352 ) $) $) { $return ; }
328: }
329:
330: void realloc15 ( ) {
331: $check_ $(@expr1073742353 "cppcheck-2.8/test/testmemleak.cpp" $, 331 $, "bool foo() {\n    char ** m_options;\n    m_options = (char**)realloc( m_options, 2 * sizeof(char*));\n    if( m_options == NULL )\n        return false;\n    return true;\n}" $)
332:
|
336:
337: ;
338: $if $(@expr1073742354 $!@expr1073742355 $assertEquals $(@expr1073742356 "cppcheck-2.8/test/testmemleak.cpp" $, 338 $, "[test.cpp:3]: (error) Common realloc mistake: \'m_options\' nulled but not freed upon failure\n" $, errout@var100 .@expr1073742357 str (@expr1073742358 ) $) $) { $return ; }
339: }
340:
341: void realloc16 ( ) {
342: $check_ $(@expr1073742359 "cppcheck-2.8/test/testmemleak.cpp" $, 342 $, "void f(char *zLine) {\n  zLine = realloc(zLine, 42);\n  if (zLine) {\n    free(zLine);\n  }\n}" $)
343:
|
346:
347: ;
348: $if $(@expr1073742360 $!@expr1073742361 $assertEquals $(@expr1073742362 "cppcheck-2.8/test/testmemleak.cpp" $, 348 $, "" $, errout@var100 .@expr1073742363 str (@expr1073742364 ) $) $) { $return ; }
349: }
350:
351: void realloc17 ( ) {
352: $check_ $(@expr1073742365 "cppcheck-2.8/test/testmemleak.cpp" $, 352 $, "void foo()\n{\n    void ***a = malloc(sizeof(a));\n    ***a = realloc(***(a), sizeof(a) * 2);\n}" $)
353:
354:
355:
356: ;
357: $if $(@expr1073742366 $!@expr1073742367 $assertEquals $(@expr1073742368 "cppcheck-2.8/test/testmemleak.cpp" $, 357 $, "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" $, errout@var100 .@expr1073742369 str (@expr1073742370 ) $) $) { $return ; }
358: }
359:
360: void realloc18 ( ) {
361: $check_ $(@expr1073742371 "cppcheck-2.8/test/testmemleak.cpp" $, 361 $, "void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = realloc((void*)a, sizeof(a) * 2);\n}" $)
362:
363:
364:
365: ;
366: $if $(@expr1073742372 $!@expr1073742373 $assertEquals $(@expr1073742374 "cppcheck-2.8/test/testmemleak.cpp" $, 366 $, "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" $, errout@var100 .@expr1073742375 str (@expr1073742376 ) $) $) { $return ; }
367: }
368:
369: void realloc19 ( ) {
370: $check_ $(@expr1073742377 "cppcheck-2.8/test/testmemleak.cpp" $, 370 $, "void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = (realloc((void*)((a)), sizeof(a) * 2));\n}" $)
371:
372:
373:
374: ;
375: $if $(@expr1073742378 $!@expr1073742379 $assertEquals $(@expr1073742380 "cppcheck-2.8/test/testmemleak.cpp" $, 375 $, "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" $, errout@var100 .@expr1073742381 str (@expr1073742382 ) $) $) { $return ; }
376: }
377:
378: void realloc20 ( ) {
379: $check_ $(@expr1073742383 "cppcheck-2.8/test/testmemleak.cpp" $, 379 $, "void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = realloc((a) + 1, sizeof(a) * 2);\n}" $)
380:
381:
382:
383: ;
384: $if $(@expr1073742384 $!@expr1073742385 $assertEquals $(@expr1073742386 "cppcheck-2.8/test/testmemleak.cpp" $, 384 $, "" $, errout@var100 .@expr1073742387 str (@expr1073742388 ) $) $) { $return ; }
385: }
386:
387: void realloc21 ( ) {
388: $check_ $(@expr1073742389 "cppcheck-2.8/test/testmemleak.cpp" $, 388 $, "char *foo(char *bs0)\n{\n    char *bs = bs0;\n    bs = realloc(bs, 100);\n    if (bs == NULL) return bs0;\n    return bs;\n}" $)
389:
|
393:
394: ;
395: $if $(@expr1073742390 $!@expr1073742391 $assertEquals $(@expr1073742392 "cppcheck-2.8/test/testmemleak.cpp" $, 395 $, "" $, errout@var100 .@expr1073742393 str (@expr1073742394 ) $) $) { $return ; }
396: }
397:
398: void realloc22 ( ) {
399: $check_ $(@expr1073742395 "cppcheck-2.8/test/testmemleak.cpp" $, 399 $, "void foo(char **bsp)\n{\n    char *bs = *bsp;\n    bs = realloc(bs, 100);\n    if (bs == NULL) return;\n    *bsp = bs;\n}" $)
400:
|
404:
405: ;
406: $if $(@expr1073742396 $!@expr1073742397 $assertEquals $(@expr1073742398 "cppcheck-2.8/test/testmemleak.cpp" $, 406 $, "" $, errout@var100 .@expr1073742399 str (@expr1073742400 ) $) $) { $return ; }
407: }
408:
409: void realloc23 ( ) {
410: $check_ $(@expr1073742401 "cppcheck-2.8/test/testmemleak.cpp" $, 410 $, "void foo(struct ABC *s)\n{\n    uint32_t *cigar = s->cigar;\n    if (!(cigar = realloc(cigar, 100 * sizeof(*cigar))))\n        return;\n    s->cigar = cigar;\n}" $)
411:
|
415:
416: ;
417: $if $(@expr1073742402 $!@expr1073742403 $assertEquals $(@expr1073742404 "cppcheck-2.8/test/testmemleak.cpp" $, 417 $, "" $, errout@var100 .@expr1073742405 str (@expr1073742406 ) $) $) { $return ; }
418: }
419:
420: void realloc24 ( ) {
421: $check_ $(@expr1073742407 "cppcheck-2.8/test/testmemleak.cpp" $, 421 $, "void f() {\nvoid *a = NULL;\na = realloc(a, 20);\n}" $)
422:
423:
424: ;
425: $if $(@expr1073742408 $!@expr1073742409 $assertEquals $(@expr1073742410 "cppcheck-2.8/test/testmemleak.cpp" $, 425 $, "" $, errout@var100 .@expr587 str (@expr588 ) $) $) { $return ; }
426:
427: $check_ $(@expr1073742413 "cppcheck-2.8/test/testmemleak.cpp" $, 427 $, "void f() {\nvoid *a = NULL;\na = malloc(10);\na = realloc(a, 20);\n}" $)
428:
429:
430:
431: ;
432: $if $(@expr1073742414 $!@expr1073742415 $assertEquals $(@expr1073742416 "cppcheck-2.8/test/testmemleak.cpp" $, 432 $, "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" $, errout@var100 .@expr587 str (@expr588 ) $) $) { $return ; }
433:
434: $check_ $(@expr1073742419 "cppcheck-2.8/test/testmemleak.cpp" $, 434 $, "void f() {\nvoid *a = std::nullptr;\na = malloc(10);\na = realloc(a, 20);\n}" $)
435:
436:
437:
438: ;
439: $if $(@expr1073742420 $!@expr1073742421 $assertEquals $(@expr1073742422 "cppcheck-2.8/test/testmemleak.cpp" $, 439 $, "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" $, errout@var100 .@expr587 str (@expr588 ) $) $) { $return ; }
440:
441: $check_ $(@expr1073742425 "cppcheck-2.8/test/testmemleak.cpp" $, 441 $, "void f(char *b) {\nvoid *a = NULL;\na = b;\na = realloc(a, 20);\n}" $)
442:
443:
444:
445: ;
446: $if $(@expr1073742426 $!@expr1073742427 $assertEquals $(@expr1073742428 "cppcheck-2.8/test/testmemleak.cpp" $, 446 $, "" $, errout@var100 .@expr587 str (@expr588 ) $) $) { $return ; }
447: }
448:
449: void reallocarray1 ( ) {
450: $check_ $(@expr1073742431 "cppcheck-2.8/test/testmemleak.cpp" $, 450 $, "void foo()\n{\n    char *a = (char *)malloc(10);\n    a = reallocarray(a, 100, 2);\n}" $)
451:
452:
453:
454: ;
455: $if $(@expr1073742432 $!@expr1073742433 $assertEquals $(@expr1073742434 "cppcheck-2.8/test/testmemleak.cpp" $, 455 $, "[test.cpp:4]: (error) Common reallocarray mistake: \'a\' nulled but not freed upon failure\n" $, errout@var100 .@expr1073742435 str (@expr1073742436 ) $) $) { $return ; }
456: }
457: } ;
458:
459: $namespace ${ TestMemleakInFunction instance_TestMemleakInFunction@var132 $; $}
460:
|
467:
468: class TestMemleakInClass : public TestFixture {
469: public:
470: TestMemleakInClass ( ) : TestFixture ( "TestMemleakInClass" ) { }
471:
472: private:
473: Settings settings@var133 ;
474:
|
478:
479: void check_ ( const char * file@var134 , int line@var135 , const char code@var136 [ ] ) {
480:
481: errout@var100 .@expr1073742437 str (@expr1073742438 "" ) ;
482:
483:
484: Tokenizer tokenizer@var137 (@expr1073742439 &@expr616 settings@var133 , this@expr617 ) ;
485: std ::@expr1073742442 istringstream istr@var138 (@expr1073742443 code@var136 ) ;
486: $assert_ $(@expr1073742444 file@var134 $, line@var135 $, $(@expr1073742445 tokenizer@var137 .@expr1073742446 tokenize (@expr1073742447 istr@var138 , "test.cpp" ) $) $) ;
487:
488:
489: CheckMemoryLeakInClass checkMemoryLeak@var139 (@expr1073742448 &@expr1073742449 tokenizer@var137 , &@expr616 settings@var133 , this@expr617 ) ;
490: checkMemoryLeak@var139 .@expr1073742451 check (@expr1073742452 ) ;
491: }
492:
493: void run ( ) override {
494: settings@var133 .@expr631 severity@var140 .@expr632 enable (@expr1073742457 Severity ::@expr1073742458 warning@expr1073742453 ) ;
495: settings@var133 .@expr631 severity@var140 .@expr632 enable (@expr1073742461 Severity ::@expr1073742462 style@expr1073742454 ) ;
496:
497: $do ${ $if $(@expr1073742463 settings@var133 .@expr1073742464 library@var141 $.@expr1073742465 $load $(@expr1073742466 $exename@var11 $.@expr1073742467 $c_str $(@expr1073742468 $) $, "std.cfg" $) $.@expr1073742469 $errorcode $!=@expr1073742470 $Library $::@expr1073742471 $ErrorCode $::@expr1073742472 $OK $) ${ $complainMissingLib $(@expr1073742473 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742474 $false $) ;
498:
499: $do ${ $if $(@expr1073742475 $prepareTest $(@expr1073742476 "class1" $) $) ${ $setVerbose $(@expr1073742477 $false $) $; class1 $(@expr1073742478 $) $; $} $} $while $(@expr1073742479 $false $) ;
500: $do ${ $if $(@expr1073742480 $prepareTest $(@expr1073742481 "class2" $) $) ${ $setVerbose $(@expr1073742482 $false $) $; class2 $(@expr1073742483 $) $; $} $} $while $(@expr1073742484 $false $) ;
501: $do ${ $if $(@expr1073742485 $prepareTest $(@expr1073742486 "class3" $) $) ${ $setVerbose $(@expr1073742487 $false $) $; class3 $(@expr1073742488 $) $; $} $} $while $(@expr1073742489 $false $) ;
502: $do ${ $if $(@expr1073742490 $prepareTest $(@expr1073742491 "class4" $) $) ${ $setVerbose $(@expr1073742492 $false $) $; class4 $(@expr1073742493 $) $; $} $} $while $(@expr1073742494 $false $) ;
503: $do ${ $if $(@expr1073742495 $prepareTest $(@expr1073742496 "class6" $) $) ${ $setVerbose $(@expr1073742497 $false $) $; class6 $(@expr1073742498 $) $; $} $} $while $(@expr1073742499 $false $) ;
504: $do ${ $if $(@expr1073742500 $prepareTest $(@expr1073742501 "class7" $) $) ${ $setVerbose $(@expr1073742502 $false $) $; class7 $(@expr1073742503 $) $; $} $} $while $(@expr1073742504 $false $) ;
505: $do ${ $if $(@expr1073742505 $prepareTest $(@expr1073742506 "class8" $) $) ${ $setVerbose $(@expr1073742507 $false $) $; class8 $(@expr1073742508 $) $; $} $} $while $(@expr1073742509 $false $) ;
506: $do ${ $if $(@expr1073742510 $prepareTest $(@expr1073742511 "class9" $) $) ${ $setVerbose $(@expr1073742512 $false $) $; class9 $(@expr1073742513 $) $; $} $} $while $(@expr1073742514 $false $) ;
507: $do ${ $if $(@expr1073742515 $prepareTest $(@expr1073742516 "class10" $) $) ${ $setVerbose $(@expr1073742517 $false $) $; class10 $(@expr1073742518 $) $; $} $} $while $(@expr1073742519 $false $) ;
508: $do ${ $if $(@expr1073742520 $prepareTest $(@expr1073742521 "class11" $) $) ${ $setVerbose $(@expr1073742522 $false $) $; class11 $(@expr1073742523 $) $; $} $} $while $(@expr1073742524 $false $) ;
509: $do ${ $if $(@expr1073742525 $prepareTest $(@expr1073742526 "class12" $) $) ${ $setVerbose $(@expr1073742527 $false $) $; class12 $(@expr1073742528 $) $; $} $} $while $(@expr1073742529 $false $) ;
510: $do ${ $if $(@expr1073742530 $prepareTest $(@expr1073742531 "class13" $) $) ${ $setVerbose $(@expr1073742532 $false $) $; class13 $(@expr1073742533 $) $; $} $} $while $(@expr1073742534 $false $) ;
511: $do ${ $if $(@expr1073742535 $prepareTest $(@expr1073742536 "class14" $) $) ${ $setVerbose $(@expr1073742537 $false $) $; class14 $(@expr1073742538 $) $; $} $} $while $(@expr1073742539 $false $) ;
512: $do ${ $if $(@expr1073742540 $prepareTest $(@expr1073742541 "class15" $) $) ${ $setVerbose $(@expr1073742542 $false $) $; class15 $(@expr1073742543 $) $; $} $} $while $(@expr1073742544 $false $) ;
513: $do ${ $if $(@expr1073742545 $prepareTest $(@expr1073742546 "class16" $) $) ${ $setVerbose $(@expr1073742547 $false $) $; class16 $(@expr1073742548 $) $; $} $} $while $(@expr1073742549 $false $) ;
514: $do ${ $if $(@expr1073742550 $prepareTest $(@expr1073742551 "class17" $) $) ${ $setVerbose $(@expr1073742552 $false $) $; class17 $(@expr1073742553 $) $; $} $} $while $(@expr1073742554 $false $) ;
515: $do ${ $if $(@expr1073742555 $prepareTest $(@expr1073742556 "class18" $) $) ${ $setVerbose $(@expr1073742557 $false $) $; class18 $(@expr1073742558 $) $; $} $} $while $(@expr1073742559 $false $) ;
516: $do ${ $if $(@expr1073742560 $prepareTest $(@expr1073742561 "class19" $) $) ${ $setVerbose $(@expr1073742562 $false $) $; class19 $(@expr1073742563 $) $; $} $} $while $(@expr1073742564 $false $) ;
517: $do ${ $if $(@expr1073742565 $prepareTest $(@expr1073742566 "class20" $) $) ${ $setVerbose $(@expr1073742567 $false $) $; class20 $(@expr1073742568 $) $; $} $} $while $(@expr1073742569 $false $) ;
518: $do ${ $if $(@expr1073742570 $prepareTest $(@expr1073742571 "class21" $) $) ${ $setVerbose $(@expr1073742572 $false $) $; class21 $(@expr1073742573 $) $; $} $} $while $(@expr1073742574 $false $) ;
519: $do ${ $if $(@expr1073742575 $prepareTest $(@expr1073742576 "class22" $) $) ${ $setVerbose $(@expr1073742577 $false $) $; class22 $(@expr1073742578 $) $; $} $} $while $(@expr1073742579 $false $) ;
520: $do ${ $if $(@expr1073742580 $prepareTest $(@expr1073742581 "class23" $) $) ${ $setVerbose $(@expr1073742582 $false $) $; class23 $(@expr1073742583 $) $; $} $} $while $(@expr1073742584 $false $) ;
521: $do ${ $if $(@expr1073742585 $prepareTest $(@expr1073742586 "class24" $) $) ${ $setVerbose $(@expr1073742587 $false $) $; class24 $(@expr1073742588 $) $; $} $} $while $(@expr1073742589 $false $) ;
522: $do ${ $if $(@expr1073742590 $prepareTest $(@expr1073742591 "class25" $) $) ${ $setVerbose $(@expr1073742592 $false $) $; class25 $(@expr1073742593 $) $; $} $} $while $(@expr1073742594 $false $) ;
523: $do ${ $if $(@expr1073742595 $prepareTest $(@expr1073742596 "class26" $) $) ${ $setVerbose $(@expr1073742597 $false $) $; class26 $(@expr1073742598 $) $; $} $} $while $(@expr1073742599 $false $) ;
524: $do ${ $if $(@expr1073742600 $prepareTest $(@expr1073742601 "class27" $) $) ${ $setVerbose $(@expr1073742602 $false $) $; class27 $(@expr1073742603 $) $; $} $} $while $(@expr1073742604 $false $) ;
525:
526: $do ${ $if $(@expr1073742605 $prepareTest $(@expr1073742606 "staticvar" $) $) ${ $setVerbose $(@expr1073742607 $false $) $; staticvar $(@expr1073742608 $) $; $} $} $while $(@expr1073742609 $false $) ;
527:
528: $do ${ $if $(@expr1073742610 $prepareTest $(@expr1073742611 "free_member_in_sub_func" $) $) ${ $setVerbose $(@expr1073742612 $false $) $; free_member_in_sub_func $(@expr1073742613 $) $; $} $} $while $(@expr1073742614 $false $) ;
529:
530: $do ${ $if $(@expr1073742615 $prepareTest $(@expr1073742616 "mismatch1" $) $) ${ $setVerbose $(@expr1073742617 $false $) $; mismatch1 $(@expr1073742618 $) $; $} $} $while $(@expr1073742619 $false $) ;
531: $do ${ $if $(@expr1073742620 $prepareTest $(@expr1073742621 "mismatch2" $) $) ${ $setVerbose $(@expr1073742622 $false $) $; mismatch2 $(@expr1073742623 $) $; $} $} $while $(@expr1073742624 $false $) ;
532:
533:
534: $do ${ $if $(@expr1073742625 $prepareTest $(@expr1073742626 "func1" $) $) ${ $setVerbose $(@expr1073742627 $false $) $; func1 $(@expr1073742628 $) $; $} $} $while $(@expr1073742629 $false $) ;
535: $do ${ $if $(@expr1073742630 $prepareTest $(@expr1073742631 "func2" $) $) ${ $setVerbose $(@expr1073742632 $false $) $; func2 $(@expr1073742633 $) $; $} $} $while $(@expr1073742634 $false $) ;
536: }
537:
538:
539: void class1 ( ) {
540: $check_ $(@expr1073742635 "cppcheck-2.8/test/testmemleak.cpp" $, 540 $, "class Fred\n{\nprivate:\n    char *str1;\n    char *str2;\npublic:\n    Fred();\n    ~Fred();\n};\n\nFred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nFred::~Fred()\n{\n    delete [] str2;\n}" $)
541:
|
558:
559: ;
560: $if $(@expr1073742636 $!@expr1073742637 $assertEquals $(@expr1073742638 "cppcheck-2.8/test/testmemleak.cpp" $, 560 $, "[test.cpp:4]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" $, errout@var100 .@expr815 str (@expr816 ) $) $) { $return ; }
561:
562: $check_ $(@expr1073742641 "cppcheck-2.8/test/testmemleak.cpp" $, 562 $, "class Fred\n{\nprivate:\n    char *str1;\n    char *str2;\npublic:\n    Fred()\n    {\n        str1 = new char[10];\n        str2 = new char[10];\n    }\n    ~Fred()\n    {\n        delete [] str2;\n    }\n};" $)
563:
|
576:
577: ;
578: $if $(@expr1073742642 $!@expr1073742643 $assertEquals $(@expr1073742644 "cppcheck-2.8/test/testmemleak.cpp" $, 578 $, "[test.cpp:4]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" $, errout@var100 .@expr815 str (@expr816 ) $) $) { $return ; }
579: }
580:
581: void class2 ( ) {
582: $check_ $(@expr1073742647 "cppcheck-2.8/test/testmemleak.cpp" $, 582 $, "class Fred\n{\nprivate:\n    char *str1;\npublic:\n    Fred();\n    ~Fred();\n};\n\nFred::Fred()\n{\n    str1 = new char[10];\n}\n\nFred::~Fred()\n{\n    free(str1);\n}" $)
583:
|
598:
599: ;
600: $if $(@expr1073742648 $!@expr1073742649 $assertEquals $(@expr1073742650 "cppcheck-2.8/test/testmemleak.cpp" $, 600 $, "[test.cpp:17]: (error) Mismatching allocation and deallocation: Fred::str1\n" $, errout@var100 .@expr827 str (@expr828 ) $) $) { $return ; }
601:
602: $check_ $(@expr1073742653 "cppcheck-2.8/test/testmemleak.cpp" $, 602 $, "class Fred\n{\nprivate:\n    char *str1;\npublic:\n    Fred()\n    {\n        str1 = new char[10];\n    }\n    ~Fred()\n    {\n        free(str1);\n    }\n};" $)
603:
|
614:
615: ;
616: $if $(@expr1073742654 $!@expr1073742655 $assertEquals $(@expr1073742656 "cppcheck-2.8/test/testmemleak.cpp" $, 616 $, "[test.cpp:12]: (error) Mismatching allocation and deallocation: Fred::str1\n" $, errout@var100 .@expr827 str (@expr828 ) $) $) { $return ; }
617: }
618:
619: void class3 ( ) {
620: $check_ $(@expr1073742659 "cppcheck-2.8/test/testmemleak.cpp" $, 620 $, "class Token;\n\nclass Tokenizer\n{\nprivate:\n    Token *_tokens;\n\npublic:\n    Tokenizer();\n    ~Tokenizer();\n    void deleteTokens(Token *tok);\n};\n\nTokenizer::Tokenizer()\n{\n    _tokens = new Token;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n}\n\nvoid Tokenizer::deleteTokens(Token *tok)\n{\n    while (tok)\n    {\n        Token *next = tok->next();\n        delete tok;\n        tok = next;\n    }\n}" $)
621:
|
650:
651: ;
652:
653: $if $(@expr1073742660 $!@expr1073742661 $assertEquals $(@expr1073742662 "cppcheck-2.8/test/testmemleak.cpp" $, 653 $, "" $, errout@var100 .@expr839 str (@expr840 ) $) $) { $return ; }
654:
655: $check_ $(@expr1073742665 "cppcheck-2.8/test/testmemleak.cpp" $, 655 $, "class Token;\n\nclass Tokenizer\n{\nprivate:\n    Token *_tokens;\n\npublic:\n    Tokenizer()\n    {\n        _tokens = new Token;\n    }\n    ~Tokenizer()\n    {\n        deleteTokens(_tokens);\n    }\n    void deleteTokens(Token *tok)\n    {\n        while (tok)\n        {\n            Token *next = tok->next();\n            delete tok;\n            tok = next;\n        }\n    }\n};" $)
656:
|
679:
680: ;
681:
682: $if $(@expr1073742666 $!@expr1073742667 $assertEquals $(@expr1073742668 "cppcheck-2.8/test/testmemleak.cpp" $, 682 $, "" $, errout@var100 .@expr839 str (@expr840 ) $) $) { $return ; }
683: }
684:
685: void class4 ( ) {
686: $check_ $(@expr1073742671 "cppcheck-2.8/test/testmemleak.cpp" $, 686 $, "struct ABC;\nclass Fred\n{\nprivate:\n    void addAbc(ABC *abc);\npublic:\n    void click();\n};\n\nvoid Fred::addAbc(ABC* abc)\n{\n    AbcPosts->Add(abc);\n}\n\nvoid Fred::click()\n{\n    ABC *p = new ABC;\n    addAbc( p );\n}" $)
687:
|
703:
704: ;
705: $if $(@expr1073742672 $!@expr1073742673 $assertEquals $(@expr1073742674 "cppcheck-2.8/test/testmemleak.cpp" $, 705 $, "" $, errout@var100 .@expr851 str (@expr852 ) $) $) { $return ; }
706:
707: $check_ $(@expr1073742677 "cppcheck-2.8/test/testmemleak.cpp" $, 707 $, "struct ABC;\nclass Fred\n{\nprivate:\n    void addAbc(ABC* abc)\n    {\n        AbcPosts->Add(abc);\n    }\npublic:\n    void click()\n    {\n        ABC *p = new ABC;\n        addAbc( p );\n    }\n};" $)
708:
|
720:
721: ;
722: $if $(@expr1073742678 $!@expr1073742679 $assertEquals $(@expr1073742680 "cppcheck-2.8/test/testmemleak.cpp" $, 722 $, "" $, errout@var100 .@expr851 str (@expr852 ) $) $) { $return ; }
723: }
724:
725: void class6 ( ) {
726: $check_ $(@expr1073742683 "cppcheck-2.8/test/testmemleak.cpp" $, 726 $, "class Fred\n{\npublic:\n    void foo();\n};\n\nvoid Fred::foo()\n{\n    char *str = new char[100];\n    delete [] str;\n    hello();\n}" $)
727:
|
736:
737: ;
738: $if $(@expr1073742684 $!@expr1073742685 $assertEquals $(@expr1073742686 "cppcheck-2.8/test/testmemleak.cpp" $, 738 $, "" $, errout@var100 .@expr863 str (@expr864 ) $) $) { $return ; }
739:
740: $check_ $(@expr1073742689 "cppcheck-2.8/test/testmemleak.cpp" $, 740 $, "class Fred\n{\npublic:\n    void foo()\n    {\n        char *str = new char[100];\n        delete [] str;\n        hello();\n    }\n};" $)
741:
|
748:
749: ;
750: $if $(@expr1073742690 $!@expr1073742691 $assertEquals $(@expr1073742692 "cppcheck-2.8/test/testmemleak.cpp" $, 750 $, "" $, errout@var100 .@expr863 str (@expr864 ) $) $) { $return ; }
751: }
752:
753: void class7 ( ) {
754: $check_ $(@expr1073742695 "cppcheck-2.8/test/testmemleak.cpp" $, 754 $, "class Fred\n{\npublic:\n    int *i;\n    Fred();\n    ~Fred();\n};\n\nFred::Fred()\n{\n    this->i = new int;\n}\nFred::~Fred()\n{\n    delete this->i;\n}" $)
755:
|
768:
769: ;
770: $if $(@expr1073742696 $!@expr1073742697 $assertEquals $(@expr1073742698 "cppcheck-2.8/test/testmemleak.cpp" $, 770 $, "" $, errout@var100 .@expr875 str (@expr876 ) $) $) { $return ; }
771:
772: $check_ $(@expr1073742701 "cppcheck-2.8/test/testmemleak.cpp" $, 772 $, "class Fred\n{\npublic:\n    int *i;\n    Fred()\n    {\n        this->i = new int;\n    }\n    ~Fred()\n    {\n        delete this->i;\n    }\n};" $)
773:
|
783:
784: ;
785: $if $(@expr1073742702 $!@expr1073742703 $assertEquals $(@expr1073742704 "cppcheck-2.8/test/testmemleak.cpp" $, 785 $, "" $, errout@var100 .@expr875 str (@expr876 ) $) $) { $return ; }
786: }
787:
788: void class8 ( ) {
789: $check_ $(@expr1073742707 "cppcheck-2.8/test/testmemleak.cpp" $, 789 $, "class A\n{\npublic:\n    void a();\n    void doNothing() { }\n};\n\nvoid A::a()\n{\n    int* c = new int(1);\n    delete c;\n    doNothing(c);\n}" $)
790:
|
800:
801: ;
802: $if $(@expr1073742708 $!@expr1073742709 $assertEquals $(@expr1073742710 "cppcheck-2.8/test/testmemleak.cpp" $, 802 $, "" $, errout@var100 .@expr887 str (@expr888 ) $) $) { $return ; }
803:
804: $check_ $(@expr1073742713 "cppcheck-2.8/test/testmemleak.cpp" $, 804 $, "class A\n{\npublic:\n    void a()\n    {\n        int* c = new int(1);\n        delete c;\n        doNothing(c);\n    }\n    void doNothing() { }\n};" $)
805:
|
813:
814: ;
815: $if $(@expr1073742714 $!@expr1073742715 $assertEquals $(@expr1073742716 "cppcheck-2.8/test/testmemleak.cpp" $, 815 $, "" $, errout@var100 .@expr887 str (@expr888 ) $) $) { $return ; }
816: }
817:
818: void class9 ( ) {
819: $check_ $(@expr1073742719 "cppcheck-2.8/test/testmemleak.cpp" $, 819 $, "class A\n{\npublic:\n    int * p;\n    A();\n    ~A();\n};\n\nA::A()\n{ p = new int; }\n\nA::~A()\n{ delete (p); }" $)
820:
|
830:
831: ;
832: $if $(@expr1073742720 $!@expr1073742721 $assertEquals $(@expr1073742722 "cppcheck-2.8/test/testmemleak.cpp" $, 832 $, "" $, errout@var100 .@expr899 str (@expr900 ) $) $) { $return ; }
833:
834: $check_ $(@expr1073742725 "cppcheck-2.8/test/testmemleak.cpp" $, 834 $, "class A\n{\npublic:\n    int * p;\n    A()\n    { p = new int; }\n    ~A()\n    { delete (p); }\n};" $)
835:
|
841:
842: ;
843: $if $(@expr1073742726 $!@expr1073742727 $assertEquals $(@expr1073742728 "cppcheck-2.8/test/testmemleak.cpp" $, 843 $, "" $, errout@var100 .@expr899 str (@expr900 ) $) $) { $return ; }
844: }
845:
846: void class10 ( ) {
847: $check_ $(@expr1073742731 "cppcheck-2.8/test/testmemleak.cpp" $, 847 $, "class A\n{\npublic:\n    int * p;\n    A();\n};\nA::A()\n{ p = new int; }" $)
848:
|
853:
854: ;
855: $if $(@expr1073742732 $!@expr1073742733 $assertEquals $(@expr1073742734 "cppcheck-2.8/test/testmemleak.cpp" $, 855 $, "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr911 str (@expr912 ) $) $) { $return ; }
856:
857: $check_ $(@expr1073742737 "cppcheck-2.8/test/testmemleak.cpp" $, 857 $, "class A\n{\npublic:\n    int * p;\n    A() { p = new int; }\n};" $)
858:
|
861:
862: ;
863: $if $(@expr1073742738 $!@expr1073742739 $assertEquals $(@expr1073742740 "cppcheck-2.8/test/testmemleak.cpp" $, 863 $, "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr911 str (@expr912 ) $) $) { $return ; }
864: }
865:
866: void class11 ( ) {
867: $check_ $(@expr1073742743 "cppcheck-2.8/test/testmemleak.cpp" $, 867 $, "class A\n{\npublic:\n    int * p;\n    A() : p(new int[10])\n    { }};" $)
868:
|
872:
873: ;
874: $if $(@expr1073742744 $!@expr1073742745 $assertEquals $(@expr1073742746 "cppcheck-2.8/test/testmemleak.cpp" $, 874 $, "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr923 str (@expr924 ) $) $) { $return ; }
875:
876: $check_ $(@expr1073742749 "cppcheck-2.8/test/testmemleak.cpp" $, 876 $, "class A\n{\npublic:\n    int * p;\n    A();\n};\nA::A() : p(new int[10])\n{ }" $)
877:
|
882:
883: ;
884: $if $(@expr1073742750 $!@expr1073742751 $assertEquals $(@expr1073742752 "cppcheck-2.8/test/testmemleak.cpp" $, 884 $, "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr923 str (@expr924 ) $) $) { $return ; }
885: }
886:
887: void class12 ( ) {
888: $check_ $(@expr1073742755 "cppcheck-2.8/test/testmemleak.cpp" $, 888 $, "class A\n{\nprivate:\n    int *p;\npublic:\n    A();\n    ~A();\n    void cleanup();};\n\nA::A()\n{ p = new int[10]; }\n\nA::~A()\n{ }\n\nvoid A::cleanup()\n{ delete [] p; }" $)
889:
|
904:
905: ;
906: $if $(@expr1073742756 $!@expr1073742757 $assertEquals $(@expr1073742758 "cppcheck-2.8/test/testmemleak.cpp" $, 906 $, "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr935 str (@expr936 ) $) $) { $return ; }
907:
908: $check_ $(@expr1073742761 "cppcheck-2.8/test/testmemleak.cpp" $, 908 $, "class A\n{\nprivate:\n    int *p;\npublic:\n    A()\n    { p = new int[10]; }\n    ~A()\n    { }\n    void cleanup()\n    { delete [] p; }\n};" $)
909:
|
918:
919: ;
920: $if $(@expr1073742762 $!@expr1073742763 $assertEquals $(@expr1073742764 "cppcheck-2.8/test/testmemleak.cpp" $, 920 $, "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr935 str (@expr936 ) $) $) { $return ; }
921: }
922:
923: void class13 ( ) {
924: $check_ $(@expr1073742767 "cppcheck-2.8/test/testmemleak.cpp" $, 924 $, "class A\n{\nprivate:\n    int *p;\npublic:\n    A();\n    ~A();\n    void foo();};\n\nA::A()\n{ }\n\nA::~A()\n{ }\n\nvoid A::foo()\n{ p = new int[10]; delete [] p; }" $)
925:
|
940:
941: ;
942: $if $(@expr1073742768 $!@expr1073742769 $assertEquals $(@expr1073742770 "cppcheck-2.8/test/testmemleak.cpp" $, 942 $, "[test.cpp:17]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n" $, errout@var100 .@expr947 str (@expr948 ) $) $) { $return ; }
943:
944: $check_ $(@expr1073742773 "cppcheck-2.8/test/testmemleak.cpp" $, 944 $, "class A\n{\nprivate:\n    int *p;\npublic:\n    A()\n    { }\n    ~A()\n    { }\n    void foo()\n    { p = new int[10]; delete [] p; }\n};" $)
945:
|
954:
955: ;
956: $if $(@expr1073742774 $!@expr1073742775 $assertEquals $(@expr1073742776 "cppcheck-2.8/test/testmemleak.cpp" $, 956 $, "[test.cpp:11]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n" $, errout@var100 .@expr947 str (@expr948 ) $) $) { $return ; }
957: }
958:
959: void class14 ( ) {
960: $check_ $(@expr1073742779 "cppcheck-2.8/test/testmemleak.cpp" $, 960 $, "class A\n{\n    int *p;\npublic:\n    void init();\n};\n\nvoid A::init()\n{ p = new int[10]; }" $)
961:
|
967:
968: ;
969: $if $(@expr1073742780 $!@expr1073742781 $assertEquals $(@expr1073742782 "cppcheck-2.8/test/testmemleak.cpp" $, 969 $, "[test.cpp:9]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr959 str (@expr960 ) $) $) { $return
970: ; }
971:
972: $check_ $(@expr1073742785 "cppcheck-2.8/test/testmemleak.cpp" $, 972 $, "class A\n{\n    int *p;\npublic:\n    void init()\n    { p = new int[10]; }\n};" $)
973:
|
977:
978: ;
979: $if $(@expr1073742786 $!@expr1073742787 $assertEquals $(@expr1073742788 "cppcheck-2.8/test/testmemleak.cpp" $, 979 $, "[test.cpp:6]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr959 str (@expr960 ) $) $) { $return
980: ; }
981:
982:
983: $check_ $(@expr1073742791 "cppcheck-2.8/test/testmemleak.cpp" $, 983 $, "class A\n{\n    int *p;\npublic:\n    void init();\n};\n\nvoid A::init()\n{ p = new int; }" $)
984:
|
990:
991: ;
992: $if $(@expr1073742792 $!@expr1073742793 $assertEquals $(@expr1073742794 "cppcheck-2.8/test/testmemleak.cpp" $, 992 $, "[test.cpp:9]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr959 str (@expr960 ) $) $) { $return
993: ; }
994:
995: $check_ $(@expr1073742797 "cppcheck-2.8/test/testmemleak.cpp" $, 995 $, "class A\n{\n    int *p;\npublic:\n    void init()\n    { p = new int; }\n};" $)
996:
|
1000:
1001: ;
1002: $if $(@expr1073742798 $!@expr1073742799 $assertEquals $(@expr1073742800 "cppcheck-2.8/test/testmemleak.cpp" $, 1002 $, "[test.cpp:6]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr959 str (@expr960 ) $) $) { $return
1003: ; }
1004:
1005:
1006: $check_ $(@expr1073742803 "cppcheck-2.8/test/testmemleak.cpp" $, 1006 $, "class A\n{\n    int *p;\npublic:\n    void init();\n};\n\nvoid A::init()\n{ p = malloc(sizeof(int)*10); }" $)
1007:
|
1013:
1014: ;
1015: $if $(@expr1073742804 $!@expr1073742805 $assertEquals $(@expr1073742806 "cppcheck-2.8/test/testmemleak.cpp" $, 1015 $, "[test.cpp:9]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr959 str (@expr960 ) $) $) { $return
1016: ; }
1017:
1018: $check_ $(@expr1073742809 "cppcheck-2.8/test/testmemleak.cpp" $, 1018 $, "class A\n{\n    int *p;\npublic:\n    void init()\n    { p = malloc(sizeof(int)*10); }\n};" $)
1019:
|
1023:
1024: ;
1025: $if $(@expr1073742810 $!@expr1073742811 $assertEquals $(@expr1073742812 "cppcheck-2.8/test/testmemleak.cpp" $, 1025 $, "[test.cpp:6]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" $, errout@var100 .@expr959 str (@expr960 ) $) $) { $return
1026: ; }
1027: }
1028:
1029: void class15 ( ) {
1030: $check_ $(@expr1073742815 "cppcheck-2.8/test/testmemleak.cpp" $, 1030 $, "class A\n{\n    int *p;\npublic:\n    A();\n    ~A() { delete [] p; }\n};\nA::A()\n{ p = new int[10]; }" $)
1031:
|
1037:
1038: ;
1039: $if $(@expr1073742816 $!@expr1073742817 $assertEquals $(@expr1073742818 "cppcheck-2.8/test/testmemleak.cpp" $, 1039 $, "" $, errout@var100 .@expr995 str (@expr996 ) $) $) { $return ; }
1040:
1041: $check_ $(@expr1073742821 "cppcheck-2.8/test/testmemleak.cpp" $, 1041 $, "class A\n{\n    int *p;\npublic:\n    A()\n    { p = new int[10]; }\n    ~A() { delete [] p; }\n};" $)
1042:
|
1047:
1048: ;
1049: $if $(@expr1073742822 $!@expr1073742823 $assertEquals $(@expr1073742824 "cppcheck-2.8/test/testmemleak.cpp" $, 1049 $, "" $, errout@var100 .@expr995 str (@expr996 ) $) $) { $return ; }
1050:
1051:
1052: $check_ $(@expr1073742827 "cppcheck-2.8/test/testmemleak.cpp" $, 1052 $, "class A\n{\n    int *p;\npublic:\n    A();\n    ~A() { delete p; }\n};\nA::A()\n{ p = new int; }" $)
1053:
|
1059:
1060: ;
1061: $if $(@expr1073742828 $!@expr1073742829 $assertEquals $(@expr1073742830 "cppcheck-2.8/test/testmemleak.cpp" $, 1061 $, "" $, errout@var100 .@expr995 str (@expr996 ) $) $) { $return ; }
1062:
1063: $check_ $(@expr1073742833 "cppcheck-2.8/test/testmemleak.cpp" $, 1063 $, "class A\n{\n    int *p;\npublic:\n    A()\n    { p = new int; }\n    ~A() { delete p; }\n};" $)
1064:
|
1069:
1070: ;
1071: $if $(@expr1073742834 $!@expr1073742835 $assertEquals $(@expr1073742836 "cppcheck-2.8/test/testmemleak.cpp" $, 1071 $, "" $, errout@var100 .@expr995 str (@expr996 ) $) $) { $return ; }
1072:
1073:
1074: $check_ $(@expr1073742839 "cppcheck-2.8/test/testmemleak.cpp" $, 1074 $, "class A\n{\n    int *p;\npublic:\n    A();\n    ~A() { free(p); }\n};\nA::A()\n{ p = malloc(sizeof(int)*10); }" $)
1075:
|
1081:
1082: ;
1083: $if $(@expr1073742840 $!@expr1073742841 $assertEquals $(@expr1073742842 "cppcheck-2.8/test/testmemleak.cpp" $, 1083 $, "" $, errout@var100 .@expr995 str (@expr996 ) $) $) { $return ; }
1084:
1085: $check_ $(@expr1073742845 "cppcheck-2.8/test/testmemleak.cpp" $, 1085 $, "class A\n{\n    int *p;\npublic:\n    A()\n    { p = malloc(sizeof(int)*10); }\n    ~A() { free(p); }\n};" $)
1086:
|
1091:
1092: ;
1093: $if $(@expr1073742846 $!@expr1073742847 $assertEquals $(@expr1073742848 "cppcheck-2.8/test/testmemleak.cpp" $, 1093 $, "" $, errout@var100 .@expr995 str (@expr996 ) $) $) { $return ; }
1094: }
1095:
1096: void class16 ( ) {
1097:
1098: $check_ $(@expr1073742851 "cppcheck-2.8/test/testmemleak.cpp" $, 1098 $, "class A\n{\n    int *a;\n    int *b;\npublic:\n    A() { a = b = new int[10]; }\n    ~A() { delete [] a; }\n};" $)
1099:
|
1104:
1105: ;
1106: $if $(@expr1073742852 $!@expr1073742853 $assertEquals $(@expr1073742854 "cppcheck-2.8/test/testmemleak.cpp" $, 1106 $, "" $, errout@var100 .@expr1073742855 str (@expr1073742856 ) $) $) { $return ; }
1107: }
1108:
1109: void class17 ( ) {
1110:
1111: $check_ $(@expr1073742857 "cppcheck-2.8/test/testmemleak.cpp" $, 1111 $, "class A {\nprivate:\n    char *pd;\npublic:\n    void foo();\n};\n\nvoid A::foo()\n{\n    A::pd = new char[12];\n    delete [] A::pd;\n}" $)
1112:
|
1121:
1122: ;
1123: $if $(@expr1073742858 $!@expr1073742859 $assertEquals $(@expr1073742860 "cppcheck-2.8/test/testmemleak.cpp" $, 1123 $, "[test.cpp:10]: (warning) Possible leak in public function. The pointer 'pd' is not deallocated before it is allocated.\n" $, errout@var100 .@expr1037 str (@expr1038 ) $) $) { $return ; }
1124:
1125: $check_ $(@expr1073742863 "cppcheck-2.8/test/testmemleak.cpp" $, 1125 $, "class A {\nprivate:\n    char *pd;\npublic:\n    void foo()\n    {\n        pd = new char[12];\n        delete [] pd;\n    }\n};" $)
1126:
|
1133:
1134: ;
1135: $if $(@expr1073742864 $!@expr1073742865 $assertEquals $(@expr1073742866 "cppcheck-2.8/test/testmemleak.cpp" $, 1135 $, "[test.cpp:7]: (warning) Possible leak in public function. The pointer 'pd' is not deallocated before it is allocated.\n" $, errout@var100 .@expr1037 str (@expr1038 ) $) $) { $return ; }
1136:
1137: $check_ $(@expr1073742869 "cppcheck-2.8/test/testmemleak.cpp" $, 1137 $, "class A {\nprivate:\n    char *pd;\npublic:\n    void foo();\n};\n\nvoid A::foo()\n{\n    pd = new char[12];\n    delete [] pd;\n}" $)
1138:
|
1147:
1148: ;
1149: $if $(@expr1073742870 $!@expr1073742871 $assertEquals $(@expr1073742872 "cppcheck-2.8/test/testmemleak.cpp" $, 1149 $, "[test.cpp:10]: (warning) Possible leak in public function. The pointer 'pd' is not deallocated before it is allocated.\n" $, errout@var100 .@expr1037 str (@expr1038 ) $) $) { $return ; }
1150: }
1151:
1152: void class18 ( ) {
1153:
1154: $check_ $(@expr1073742875 "cppcheck-2.8/test/testmemleak.cpp" $, 1154 $, "class  A : public x\n{\npublic:\n  A()\n  {\n    a = new char[10];\n    foo(a);\n  }\nprivate:\n  char *a;\n};" $)
1155:
|
1163:
1164: ;
1165: $if $(@expr1073742876 $!@expr1073742877 $assertEquals $(@expr1073742878 "cppcheck-2.8/test/testmemleak.cpp" $, 1165 $, "" $, errout@var100 .@expr1055 str (@expr1056 ) $) $) { $return ; }
1166:
1167: $check_ $(@expr1073742881 "cppcheck-2.8/test/testmemleak.cpp" $, 1167 $, "class  A : public x\n{\npublic:\n  A();\nprivate:\n  char *a;\n};\nA::A()\n{\n  a = new char[10];\n  foo(a);\n}" $)
1168:
|
1177:
1178: ;
1179: $if $(@expr1073742882 $!@expr1073742883 $assertEquals $(@expr1073742884 "cppcheck-2.8/test/testmemleak.cpp" $, 1179 $, "" $, errout@var100 .@expr1055 str (@expr1056 ) $) $) { $return ; }
1180: }
1181:
1182: void class19 ( ) {
1183:
1184: $check_ $(@expr1073742887 "cppcheck-2.8/test/testmemleak.cpp" $, 1184 $, "class Foo\n{\nprivate:\n    TRadioButton* rp1;\n    TRadioButton* rp2;\npublic:\n    Foo();\n};\nFoo::Foo()\n{\n    rp1 = new TRadioButton(this);\n    rp2 = new TRadioButton(this);\n}" $)
1185:
|
1195:
1196: ;
1197: $if $(@expr1073742888 $!@expr1073742889 $assertEquals $(@expr1073742890 "cppcheck-2.8/test/testmemleak.cpp" $, 1197 $, "" $, errout@var100 .@expr1067 str (@expr1068 ) $) $) { $return ; }
1198:
1199: $check_ $(@expr1073742893 "cppcheck-2.8/test/testmemleak.cpp" $, 1199 $, "class TRadioButton { };\nclass Foo\n{\nprivate:\n    TRadioButton* rp1;\n    TRadioButton* rp2;\npublic:\n    Foo();\n};\nFoo::Foo()\n{\n    rp1 = new TRadioButton;\n    rp2 = new TRadioButton;\n}" $)
1200:
|
1211:
1212: ;
1213: $if $(@expr1073742894 $!@expr1073742895 $assertEquals $(@expr1073742896 "cppcheck-2.8/test/testmemleak.cpp" $, 1213 $, "[test.cpp:5]: (style) Class 'Foo' is unsafe, 'Foo::rp1' can leak by wrong usage.\n[test.cpp:6]: (style) Class 'Foo' is unsafe, 'Foo::rp2' can leak by wrong usage.\n" $, errout@var100 .@expr1067 str (@expr1068 ) $) $) { $return
1214: ; }
1215:
1216: $check_ $(@expr1073742899 "cppcheck-2.8/test/testmemleak.cpp" $, 1216 $, "class TRadioButton { };\nclass Foo\n{\nprivate:\n    TRadioButton* rp1;\n    TRadioButton* rp2;\npublic:\n    Foo();\n    ~Foo();\n};\nFoo::Foo()\n{\n    rp1 = new TRadioButton;\n    rp2 = new TRadioButton;\n}\nFoo::~Foo()\n{\n    delete rp1;\n    delete rp2;\n}" $)
1217:
|
1234:
1235: ;
1236: $if $(@expr1073742900 $!@expr1073742901 $assertEquals $(@expr1073742902 "cppcheck-2.8/test/testmemleak.cpp" $, 1236 $, "" $, errout@var100 .@expr1067 str (@expr1068 ) $) $) { $return ; }
1237: }
1238:
1239: void class20 ( ) {
1240: $check_ $(@expr1073742905 "cppcheck-2.8/test/testmemleak.cpp" $, 1240 $, "namespace ns1 {\n    class Fred\n    {\n    private:\n        char *str1;\n        char *str2;\n    public:\n        Fred()\n        {\n            str1 = new char[10];\n            str2 = new char[10];\n        }\n        ~Fred()\n        {\n            delete [] str2;\n        }\n    };\n}" $)
1241:
|
1256:
1257: ;
1258: $if $(@expr1073742906 $!@expr1073742907 $assertEquals $(@expr1073742908 "cppcheck-2.8/test/testmemleak.cpp" $, 1258 $, "[test.cpp:5]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" $, errout@var100 .@expr1085 str (@expr1086 ) $) $) { $return ; }
1259:
1260: $check_ $(@expr1073742911 "cppcheck-2.8/test/testmemleak.cpp" $, 1260 $, "namespace ns1 {\n    class Fred\n    {\n    private:\n        char *str1;\n        char *str2;\n    public:\n        Fred();\n        ~Fred();\n    };\n\n    Fred::Fred()\n    {\n        str1 = new char[10];\n        str2 = new char[10];\n    }\n\n    Fred::~Fred()\n    {\n        delete [] str2;\n    }\n}" $)
1261:
|
1280:
1281: ;
1282: $if $(@expr1073742912 $!@expr1073742913 $assertEquals $(@expr1073742914 "cppcheck-2.8/test/testmemleak.cpp" $, 1282 $, "[test.cpp:5]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" $, errout@var100 .@expr1085 str (@expr1086 ) $) $) { $return ; }
1283:
1284: $check_ $(@expr1073742917 "cppcheck-2.8/test/testmemleak.cpp" $, 1284 $, "namespace ns1 {\n    class Fred\n    {\n    private:\n        char *str1;\n        char *str2;\n    public:\n        Fred();\n        ~Fred();\n    };\n}\nns1::Fred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nns1::Fred::~Fred()\n{\n    delete [] str2;\n}" $)
1285:
|
1303:
1304: ;
1305: $if $(@expr1073742918 $!@expr1073742919 $assertEquals $(@expr1073742920 "cppcheck-2.8/test/testmemleak.cpp" $, 1305 $, "[test.cpp:5]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" $, errout@var100 .@expr1085 str (@expr1086 ) $) $) { $return ; }
1306:
1307: $check_ $(@expr1073742923 "cppcheck-2.8/test/testmemleak.cpp" $, 1307 $, "namespace ns1 {\n    namespace ns2 {\n        class Fred\n        {\n        private:\n            char *str1;\n            char *str2;\n        public:\n            Fred();\n            ~Fred();\n        };\n    }\n}\nns1::ns2::Fred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nns1::ns2::Fred::~Fred()\n{\n    delete [] str2;\n}" $)
1308:
|
1328:
1329: ;
1330: $if $(@expr1073742924 $!@expr1073742925 $assertEquals $(@expr1073742926 "cppcheck-2.8/test/testmemleak.cpp" $, 1330 $, "[test.cpp:6]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" $, errout@var100 .@expr1085 str (@expr1086 ) $) $) { $return ; }
1331:
1332: $check_ $(@expr1073742929 "cppcheck-2.8/test/testmemleak.cpp" $, 1332 $, "namespace ns1 {\n    namespace ns2 {\n        namespace ns3 {\n            class Fred\n            {\n            private:\n                char *str1;\n                char *str2;\n            public:\n                Fred();\n                ~Fred();\n            };\n        }\n    }\n}\nns1::ns2::ns3::Fred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nns1::ns2::ns3::Fred::~Fred()\n{\n    delete [] str2;\n}" $)
1333:
|
1355:
1356: ;
1357: $if $(@expr1073742930 $!@expr1073742931 $assertEquals $(@expr1073742932 "cppcheck-2.8/test/testmemleak.cpp" $, 1357 $, "[test.cpp:7]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" $, errout@var100 .@expr1085 str (@expr1086 ) $) $) { $return ; }
1358: }
1359:
1360: void class21 ( ) {
1361: $check_ $(@expr1073742935 "cppcheck-2.8/test/testmemleak.cpp" $, 1361 $, "struct B { };\nstruct C\n{\n    B * b;\n    C(B * x) : b(x) { }\n};\nclass A\n{\n    B *b;\n    C *c;\npublic:\n    A() : b(new B()), c(new C(b)) { }\n}" $)
1362:
|
1372:
1373: ;
1374: $todoAssertEquals $(@expr1073742936 "cppcheck-2.8/test/testmemleak.cpp" $, 1374 $, "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n[test.cpp:10]: (style) Class 'A' is unsafe, 'A::c' can leak by wrong usage.\n" $, "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n" $, errout@var100 .@expr1113 str (@expr1114 ) $)
1375:
1376:
1377: ;
1378:
1379: $check_ $(@expr1073742939 "cppcheck-2.8/test/testmemleak.cpp" $, 1379 $, "struct B { };\nstruct C\n{\n    B * b;\n    C(B * x) : b(x) { }\n};\nclass A\n{\n    B *b;\n    C *c;\npublic:\n    A()\n    {\n       b = new B();\n       c = new C(b);\n    }\n}" $)
1380:
|
1394:
1395: ;
1396: $todoAssertEquals $(@expr1073742940 "cppcheck-2.8/test/testmemleak.cpp" $, 1396 $, "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n[test.cpp:10]: (style) Class 'A' is unsafe, 'A::c' can leak by wrong usage.\n" $, "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n" $, errout@var100 .@expr1113 str (@expr1114 ) $)
1397:
1398:
1399: ;
1400: }
1401:
1402: void class22 ( ) {
1403: $check_ $(@expr1073742943 "cppcheck-2.8/test/testmemleak.cpp" $, 1403 $, "class Fred {\nprivate:\n    int * a;\nprivate:\n    Fred() { a = new int; }\n    ~Fred() { (delete(a), (a)=NULL); }\n};" $)
1404:
|
1408:
1409: ;
1410: $if $(@expr1073742944 $!@expr1073742945 $assertEquals $(@expr1073742946 "cppcheck-2.8/test/testmemleak.cpp" $, 1410 $, "" $, errout@var100 .@expr1073742947 str (@expr1073742948 ) $) $) { $return ; }
1411: }
1412:
1413: void class23 ( ) {
1414: $check_ $(@expr1073742949 "cppcheck-2.8/test/testmemleak.cpp" $, 1414 $, "class CDataImpl {\npublic:\n    CDataImpl() { m_refcount = 1; }\n    void Release() { if (--m_refcount == 0) delete this; }\nprivate:\n    int m_refcount;\n};\n\nclass CData {\npublic:\n    CData() : m_impl(new CDataImpl()) { }\n    ~CData() { if (m_impl) m_impl->Release(); }\nprivate:\n    CDataImpl *m_impl;\n};" $)
1415:
|
1427:
1428: ;
1429: $if $(@expr1073742950 $!@expr1073742951 $assertEquals $(@expr1073742952 "cppcheck-2.8/test/testmemleak.cpp" $, 1429 $, "" $, errout@var100 .@expr1073742953 str (@expr1073742954 ) $) $) { $return ; }
1430: }
1431:
1432: void class24 ( ) {
1433: $check_ $(@expr1073742955 "cppcheck-2.8/test/testmemleak.cpp" $, 1433 $, "class Fred {\nprivate:\n    int * a;\npublic:\n    Fred(const Fred &fred) { a = new int; }\n    ~Fred() { delete a; }\n};" $)
1434:
|
1438:
1439: ;
1440: $if $(@expr1073742956 $!@expr1073742957 $assertEquals $(@expr1073742958 "cppcheck-2.8/test/testmemleak.cpp" $, 1440 $, "" $, errout@var100 .@expr1073742959 str (@expr1073742960 ) $) $) { $return ; }
1441: }
1442:
1443: void class25 ( ) {
1444: $check_ $(@expr1073742961 "cppcheck-2.8/test/testmemleak.cpp" $, 1444 $, "class Fred {\nprivate:\n    int * a;\npublic:\n    Fred() { a = new int; }\n    ~Fred();\n};" $)
1445:
|
1449:
1450: ;
1451: $if $(@expr1073742962 $!@expr1073742963 $assertEquals $(@expr1073742964 "cppcheck-2.8/test/testmemleak.cpp" $, 1451 $, "" $, errout@var100 .@expr1073742965 str (@expr1073742966 ) $) $) { $return ; }
1452: }
1453:
1454: void class26 ( ) {
1455: $check_ $(@expr1073742967 "cppcheck-2.8/test/testmemleak.cpp" $, 1455 $, "class C;\nstruct S {\n    S() { p = new C; }\n    ~S();\n    C* p;\n};\nS::~S() = default;\n" $)
1456:
|
1460:
1461: ;
1462: $if $(@expr1073742968 $!@expr1073742969 $assertEquals $(@expr1073742970 "cppcheck-2.8/test/testmemleak.cpp" $, 1462 $, "[test.cpp:5]: (style) Class 'S' is unsafe, 'S::p' can leak by wrong usage.\n" $, errout@var100 .@expr1073742971 str (@expr1073742972 ) $) $) { $return ; }
1463: }
1464:
1465: void class27 ( ) {
1466: $check_ $(@expr1073742973 "cppcheck-2.8/test/testmemleak.cpp" $, 1466 $, "struct S {\n    S() {\n        for (int i = 0; i < 5; i++)\n            a[i] = new char[3];\n    }\n    char* a[5];\n};\n" $)
1467:
|
1471:
1472: ;
1473: $if $(@expr1073742974 $!@expr1073742975 $assertEquals $(@expr1073742976 "cppcheck-2.8/test/testmemleak.cpp" $, 1473 $, "[test.cpp:6]: (style) Class 'S' is unsafe, 'S::a' can leak by wrong usage.\n" $, errout@var100 .@expr1073742977 str (@expr1073742978 ) $) $) { $return ; }
1474: }
1475:
1476: void staticvar ( ) {
1477: $check_ $(@expr1073742979 "cppcheck-2.8/test/testmemleak.cpp" $, 1477 $, "class A\n{\nprivate:\n    static int * p;\npublic:    A()\n    {\n        if (!p)\n            p = new int[100];\n    }\n};" $)
1478:
|
1486:
1487: ;
1488: $if $(@expr1073742980 $!@expr1073742981 $assertEquals $(@expr1073742982 "cppcheck-2.8/test/testmemleak.cpp" $, 1488 $, "" $, errout@var100 .@expr1073742983 str (@expr1073742984 ) $) $) { $return ; }
1489: }
1490:
1491:
1492: void free_member_in_sub_func ( ) {
1493:
1494: $check_ $(@expr1073742985 "cppcheck-2.8/test/testmemleak.cpp" $, 1494 $, "class Tokenizer\n{\npublic:\n    Tokenizer();\n    ~Tokenizer();\n\nprivate:\n    int *_tokens;\n    static void deleteTokens(int *tok);\n};\n\nTokenizer::Tokenizer()\n{\n     _tokens = new int;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n    _tokens = 0;\n}\n\nvoid Tokenizer::deleteTokens(int *tok)\n{\n    delete tok;\n}" $)
1495:
|
1518:
1519: ;
1520: $if $(@expr1073742986 $!@expr1073742987 $assertEquals $(@expr1073742988 "cppcheck-2.8/test/testmemleak.cpp" $, 1520 $, "" $, errout@var100 .@expr1165 str (@expr1166 ) $) $) { $return ; }
1521:
1522:
1523: $check_ $(@expr1073742991 "cppcheck-2.8/test/testmemleak.cpp" $, 1523 $, "void deleteTokens(int *tok)\n{\n    delete tok;\n}\nclass Tokenizer\n{\npublic:\n    Tokenizer();\n    ~Tokenizer();\n\nprivate:\n    int *_tokens;\n};\n\nTokenizer::Tokenizer()\n{\n     _tokens = new int;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n    _tokens = 0;\n}" $)
1524:
|
1545:
1546: ;
1547: $if $(@expr1073742992 $!@expr1073742993 $assertEquals $(@expr1073742994 "cppcheck-2.8/test/testmemleak.cpp" $, 1547 $, "" $, errout@var100 .@expr1165 str (@expr1166 ) $) $) { $return ; }
1548: }
1549:
1550: void mismatch1 ( ) {
1551: $check_ $(@expr1073742997 "cppcheck-2.8/test/testmemleak.cpp" $, 1551 $, "class A\n{\npublic:\n    A(int i);\n    ~A();\nprivate:\n    char* pkt_buffer;\n};\n\nA::A(int i)\n{\n    pkt_buffer = new char[8192];\n    if (i != 1) {\n        delete pkt_buffer;\n        pkt_buffer = 0;\n    }\n}\n\nA::~A() {\n    delete [] pkt_buffer;\n}" $)
1552:
|
1570:
1571: ;
1572: $if $(@expr1073742998 $!@expr1073742999 $assertEquals $(@expr1073743000 "cppcheck-2.8/test/testmemleak.cpp" $, 1572 $, "[test.cpp:14]: (error) Mismatching allocation and deallocation: A::pkt_buffer\n" $, errout@var100 .@expr1073743001 str (@expr1073743002 ) $) $) { $return ; }
1573: }
1574:
1575: void mismatch2 ( ) {
1576: $check_ $(@expr1073743003 "cppcheck-2.8/test/testmemleak.cpp" $, 1576 $, "namespace NS\n{\nclass Foo\n{\npublic:\n  void fct();\n\nprivate:\n  char* data_;\n};\n}\n\nusing namespace NS;\n\nvoid Foo::fct()\n{\n  data_ = new char[42];\n  delete data_;\n  data_ = 0;\n}" $)
1577:
|
1594:
1595: ;
1596: $if $(@expr1073743004 $!@expr1073743005 $assertEquals $(@expr1073743006 "cppcheck-2.8/test/testmemleak.cpp" $, 1596 $, "[test.cpp:17]: (warning) Possible leak in public function. The pointer 'data_' is not deallocated before it is allocated.\n[test.cpp:18]: (error) Mismatching allocation and deallocation: Foo::data_\n" $, errout@var100 .@expr1183 str (@expr1184 ) $) $) { $return
1597: ; }
1598:
1599: $check_ $(@expr1073743009 "cppcheck-2.8/test/testmemleak.cpp" $, 1599 $, "namespace NS\n{\nclass Foo\n{\npublic:\n  void fct(int i);\n\nprivate:\n  char* data_;\n};\n}\n\nusing namespace NS;\n\nvoid Foo::fct(int i)\n{\n  data_ = new char[42];\n  delete data_;\n  data_ = 0;\n}" $)
1600:
|
1617:
1618: ;
1619: $if $(@expr1073743010 $!@expr1073743011 $assertEquals $(@expr1073743012 "cppcheck-2.8/test/testmemleak.cpp" $, 1619 $, "[test.cpp:17]: (warning) Possible leak in public function. The pointer 'data_' is not deallocated before it is allocated.\n[test.cpp:18]: (error) Mismatching allocation and deallocation: Foo::data_\n" $, errout@var100 .@expr1183 str (@expr1184 ) $) $) { $return
1620: ; }
1621: }
1622:
1623: void func1 ( ) {
1624: $check_ $(@expr1073743015 "cppcheck-2.8/test/testmemleak.cpp" $, 1624 $, "class Fred\n{\nprivate:\n    char *s;\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    void xy()\n    { s = malloc(100); }\n};" $)
1625:
|
1632:
1633: ;
1634: $if $(@expr1073743016 $!@expr1073743017 $assertEquals $(@expr1073743018 "cppcheck-2.8/test/testmemleak.cpp" $, 1634 $, "[test.cpp:9]: (warning) Possible leak in public function. The pointer 's' is not deallocated before it is allocated.\n" $, errout@var100 .@expr1195 str (@expr1196 ) $) $) { $return ; }
1635:
1636: $check_ $(@expr1073743021 "cppcheck-2.8/test/testmemleak.cpp" $, 1636 $, "class Fred\n{\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    void xy()\n    { s = malloc(100); }\nprivate:\n    char *s;\n};" $)
1637:
|
1644:
1645: ;
1646: $if $(@expr1073743022 $!@expr1073743023 $assertEquals $(@expr1073743024 "cppcheck-2.8/test/testmemleak.cpp" $, 1646 $, "[test.cpp:7]: (warning) Possible leak in public function. The pointer 's' is not deallocated before it is allocated.\n" $, errout@var100 .@expr1195 str (@expr1196 ) $) $) { $return ; }
1647: }
1648:
1649: void func2 ( ) {
1650: $check_ $(@expr1073743027 "cppcheck-2.8/test/testmemleak.cpp" $, 1650 $, "class Fred\n{\nprivate:\n    char *s;\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    const Fred & operator = (const Fred &f)\n    { s = malloc(100); }\n};" $)
1651:
|
1658:
1659: ;
1660: $if $(@expr1073743028 $!@expr1073743029 $assertEquals $(@expr1073743030 "cppcheck-2.8/test/testmemleak.cpp" $, 1660 $, "[test.cpp:9]: (warning) Possible leak in public function. The pointer 's' is not deallocated before it is allocated.\n" $, errout@var100 .@expr1073743031 str (@expr1073743032 ) $) $) { $return ; }
1661: }
1662: } ;
1663:
1664: $namespace ${ TestMemleakInClass instance_TestMemleakInClass@var142 $; $}
1665:
|
1671:
1672: class TestMemleakStructMember : public TestFixture {
1673: public:
1674: TestMemleakStructMember ( ) : TestFixture ( "TestMemleakStructMember" ) { }
1675:
1676: private:
1677: Settings settings@var143 ;
1678:
1679: void check_ ( const char * file@var144 , int line@var145 , const char code@var146 [ ] , bool isCPP@var147 = true ) {
1680:
1681: errout@var100 .@expr1073743033 str (@expr1073743034 "" ) ;
1682:
1683:
1684: Tokenizer tokenizer@var148 (@expr1073743035 &@expr1212 settings@var143 , this@expr1213 ) ;
1685: std ::@expr1073743038 istringstream istr@var149 (@expr1073743039 code@var146 ) ;
1686: $assert_ $(@expr1073743040 file@var144 $, line@var145 $, $(@expr1073743041 tokenizer@var148 .@expr1073743042 tokenize (@expr1073743043 istr@var149 , isCPP@var147 ?@expr1073743044 "test.cpp" :@expr1073743045 "test.c" ) $) $) ;
1687:
1688:
1689: CheckMemoryLeakStructMember checkMemoryLeakStructMember@var150 (@expr1073743046 &@expr1073743047 tokenizer@var148 , &@expr1212 settings@var143 , this@expr1213 ) ;
1690: checkMemoryLeakStructMember@var150 .@expr1073743049 check (@expr1073743050 ) ;
1691: }
1692:
1693: void run ( ) override {
1694: $do ${ $if $(@expr1073743051 settings@var143 .@expr1228 library@var151 $.@expr1073743053 $load $(@expr1073743054 $exename@var11 $.@expr1073743055 $c_str $(@expr1073743056 $) $, "std.cfg" $) $.@expr1073743057 $errorcode $!=@expr1073743058 $Library $::@expr1073743059 $ErrorCode $::@expr1073743060 $OK $) ${ $complainMissingLib $(@expr1073743061 "std.cfg" $) $; $return $; $} $} $while $(@expr1073743062 $false $) ;
1695: $do ${ $if $(@expr1073743063 settings@var143 .@expr1228 library@var151 $.@expr1073743065 $load $(@expr1073743066 $exename@var11 $.@expr1073743067 $c_str $(@expr1073743068 $) $, "posix.cfg" $) $.@expr1073743069 $errorcode $!=@expr1073743070 $Library $::@expr1073743071 $ErrorCode $::@expr1073743072 $OK $) ${ $complainMissingLib $(@expr1073743073 "posix.cfg" $) $; $return $; $} $} $while $(@expr1073743074 $false $) ;
1696:
1697:
1698: $do ${ $if $(@expr1073743075 $prepareTest $(@expr1073743076 "err" $) $) ${ $setVerbose $(@expr1073743077 $false $) $; err $(@expr1073743078 $) $; $} $} $while $(@expr1073743079 $false $) ;
1699:
1700:
1701: $do ${ $if $(@expr1073743080 $prepareTest $(@expr1073743081 "goto_" $) $) ${ $setVerbose $(@expr1073743082 $false $) $; goto_ $(@expr1073743083 $) $; $} $} $while $(@expr1073743084 $false $) ;
1702:
1703:
1704: $do ${ $if $(@expr1073743085 $prepareTest $(@expr1073743086 "ret1" $) $) ${ $setVerbose $(@expr1073743087 $false $) $; ret1 $(@expr1073743088 $) $; $} $} $while $(@expr1073743089 $false $) ;
1705: $do ${ $if $(@expr1073743090 $prepareTest $(@expr1073743091 "ret2" $) $) ${ $setVerbose $(@expr1073743092 $false $) $; ret2 $(@expr1073743093 $) $; $} $} $while $(@expr1073743094 $false $) ;
1706:
1707:
1708: $do ${ $if $(@expr1073743095 $prepareTest $(@expr1073743096 "assign1" $) $) ${ $setVerbose $(@expr1073743097 $false $) $; assign1 $(@expr1073743098 $) $; $} $} $while $(@expr1073743099 $false $) ;
1709: $do ${ $if $(@expr1073743100 $prepareTest $(@expr1073743101 "assign2" $) $) ${ $setVerbose $(@expr1073743102 $false $) $; assign2 $(@expr1073743103 $) $; $} $} $while $(@expr1073743104 $false $) ;
1710: $do ${ $if $(@expr1073743105 $prepareTest $(@expr1073743106 "assign3" $) $) ${ $setVerbose $(@expr1073743107 $false $) $; assign3 $(@expr1073743108 $) $; $} $} $while $(@expr1073743109 $false $) ;
1711:
1712:
1713: $do ${ $if $(@expr1073743110 $prepareTest $(@expr1073743111 "failedAllocation" $) $) ${ $setVerbose $(@expr1073743112 $false $) $; failedAllocation $(@expr1073743113 $) $; $} $} $while $(@expr1073743114 $false $) ;
1714:
1715: $do ${ $if $(@expr1073743115 $prepareTest $(@expr1073743116 "function1" $) $) ${ $setVerbose $(@expr1073743117 $false $) $; function1 $(@expr1073743118 $) $; $} $} $while $(@expr1073743119 $false $) ;
1716: $do ${ $if $(@expr1073743120 $prepareTest $(@expr1073743121 "function2" $) $) ${ $setVerbose $(@expr1073743122 $false $) $; function2 $(@expr1073743123 $) $; $} $} $while $(@expr1073743124 $false $) ;
1717: $do ${ $if $(@expr1073743125 $prepareTest $(@expr1073743126 "function3" $) $) ${ $setVerbose $(@expr1073743127 $false $) $; function3 $(@expr1073743128 $) $; $} $} $while $(@expr1073743129 $false $) ;
1718: $do ${ $if $(@expr1073743130 $prepareTest $(@expr1073743131 "function4" $) $) ${ $setVerbose $(@expr1073743132 $false $) $; function4 $(@expr1073743133 $) $; $} $} $while $(@expr1073743134 $false $) ;
1719: $do ${ $if $(@expr1073743135 $prepareTest $(@expr1073743136 "function5" $) $) ${ $setVerbose $(@expr1073743137 $false $) $; function5 $(@expr1073743138 $) $; $} $} $while $(@expr1073743139 $false $) ;
1720:
1721:
1722: $do ${ $if $(@expr1073743140 $prepareTest $(@expr1073743141 "ifelse" $) $) ${ $setVerbose $(@expr1073743142 $false $) $; ifelse $(@expr1073743143 $) $; $} $} $while $(@expr1073743144 $false $) ;
1723:
1724:
1725: $do ${ $if $(@expr1073743145 $prepareTest $(@expr1073743146 "linkedlist" $) $) ${ $setVerbose $(@expr1073743147 $false $) $; linkedlist $(@expr1073743148 $) $; $} $} $while $(@expr1073743149 $false $) ;
1726:
1727:
1728: $do ${ $if $(@expr1073743150 $prepareTest $(@expr1073743151 "globalvar" $) $) ${ $setVerbose $(@expr1073743152 $false $) $; globalvar $(@expr1073743153 $) $; $} $} $while $(@expr1073743154 $false $) ;
1729:
1730:
1731: $do ${ $if $(@expr1073743155 $prepareTest $(@expr1073743156 "localvars" $) $) ${ $setVerbose $(@expr1073743157 $false $) $; localvars $(@expr1073743158 $) $; $} $} $while $(@expr1073743159 $false $) ;
1732:
1733:
1734: $do ${ $if $(@expr1073743160 $prepareTest $(@expr1073743161 "refvar" $) $) ${ $setVerbose $(@expr1073743162 $false $) $; refvar $(@expr1073743163 $) $; $} $} $while $(@expr1073743164 $false $) ;
1735:
1736:
1737: $do ${ $if $(@expr1073743165 $prepareTest $(@expr1073743166 "trac5030" $) $) ${ $setVerbose $(@expr1073743167 $false $) $; trac5030 $(@expr1073743168 $) $; $} $} $while $(@expr1073743169 $false $) ;
1738:
1739: $do ${ $if $(@expr1073743170 $prepareTest $(@expr1073743171 "varid" $) $) ${ $setVerbose $(@expr1073743172 $false $) $; varid $(@expr1073743173 $) $; $} $} $while $(@expr1073743174 $false $) ;
1740: $do ${ $if $(@expr1073743175 $prepareTest $(@expr1073743176 "varid_2" $) $) ${ $setVerbose $(@expr1073743177 $false $) $; varid_2 $(@expr1073743178 $) $; $} $} $while $(@expr1073743179 $false $) ;
1741:
1742: $do ${ $if $(@expr1073743180 $prepareTest $(@expr1073743181 "customAllocation" $) $) ${ $setVerbose $(@expr1073743182 $false $) $; customAllocation $(@expr1073743183 $) $; $} $} $while $(@expr1073743184 $false $) ;
1743:
1744: $do ${ $if $(@expr1073743185 $prepareTest $(@expr1073743186 "lambdaInForLoop" $) $) ${ $setVerbose $(@expr1073743187 $false $) $; lambdaInForLoop $(@expr1073743188 $) $; $} $} $while $(@expr1073743189 $false $) ;
1745: }
1746:
1747: void err ( ) {
1748: $check_ $(@expr1073743190 "cppcheck-2.8/test/testmemleak.cpp" $, 1748 $, "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    free(abc);\n}" $)
1749:
|
1752:
1753: ;
1754: $if $(@expr1073743191 $!@expr1073743192 $assertEquals $(@expr1073743193 "cppcheck-2.8/test/testmemleak.cpp" $, 1754 $, "[test.cpp:5]: (error) Memory leak: abc.a\n" $, errout@var100 .@expr1370 str (@expr1371 ) $) $) { $return ; }
1755:
1756: $check_ $(@expr1073743196 "cppcheck-2.8/test/testmemleak.cpp" $, 1756 $, "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n}" $)
1757:
1758:
1759:
1760: ;
1761: $if $(@expr1073743197 $!@expr1073743198 $assertEquals $(@expr1073743199 "cppcheck-2.8/test/testmemleak.cpp" $, 1761 $, "[test.cpp:5]: (error) Memory leak: abc.a\n" $, errout@var100 .@expr1370 str (@expr1371 ) $) $) { $return ; }
1762:
1763: $check_ $(@expr1073743202 "cppcheck-2.8/test/testmemleak.cpp" $, 1763 $, "static ABC * foo()\n{\n    ABC *abc = malloc(sizeof(ABC));\n    abc->a = malloc(10);\n    abc->b = malloc(10);\n    if (abc->b == 0)\n    {\n        return 0;\n    }\n    return abc;\n}" $)
1764:
|
1772:
1773: ;
1774: $if $(@expr1073743203 $!@expr1073743204 $assertEquals $(@expr1073743205 "cppcheck-2.8/test/testmemleak.cpp" $, 1774 $, "[test.cpp:8]: (error) Memory leak: abc.a\n" $, errout@var100 .@expr1370 str (@expr1371 ) $) $) { $return ; }
1775:
1776: $check_ $(@expr1073743208 "cppcheck-2.8/test/testmemleak.cpp" $, 1776 $, "static void foo(int a)\n{\n    ABC *abc = malloc(sizeof(ABC));\n    abc->a = malloc(10);\n    if (a == 1)\n    {\n        free(abc->a);\n        return;\n    }\n}" $)
1777:
|
1784:
1785: ;
1786: $if $(@expr1073743209 $!@expr1073743210 $assertEquals $(@expr1073743211 "cppcheck-2.8/test/testmemleak.cpp" $, 1786 $, "[test.cpp:10]: (error) Memory leak: abc.a\n" $, errout@var100 .@expr1370 str (@expr1371 ) $) $) { $return ; }
1787: }
1788:
1789: void goto_ ( ) {
1790: $check_ $(@expr1073743214 "cppcheck-2.8/test/testmemleak.cpp" $, 1790 $, "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    if (abc->a)\n    { goto out; }\n    free(abc);\n    return;\nout:\n    free(abc->a);\n    free(abc);\n}" $)
1791:
|
1800:
1801: ;
1802: $if $(@expr1073743215 $!@expr1073743216 $assertEquals $(@expr1073743217 "cppcheck-2.8/test/testmemleak.cpp" $, 1802 $, "" $, errout@var100 .@expr1073743218 str (@expr1073743219 ) $) $) { $return ; }
1803: }
1804:
1805: void ret1 ( ) {
1806: $check_ $(@expr1073743220 "cppcheck-2.8/test/testmemleak.cpp" $, 1806 $, "static ABC * foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    return abc;\n}" $)
1807:
|
1810:
1811: ;
1812: $if $(@expr1073743221 $!@expr1073743222 $assertEquals $(@expr1073743223 "cppcheck-2.8/test/testmemleak.cpp" $, 1812 $, "" $, errout@var100 .@expr1400 str (@expr1401 ) $) $) { $return ; }
1813:
1814: $check_ $(@expr1073743226 "cppcheck-2.8/test/testmemleak.cpp" $, 1814 $, "static void foo(struct ABC *abc)\n{\n    abc->a = malloc(10);\n}" $)
1815:
1816:
1817: ;
1818: $if $(@expr1073743227 $!@expr1073743228 $assertEquals $(@expr1073743229 "cppcheck-2.8/test/testmemleak.cpp" $, 1818 $, "" $, errout@var100 .@expr1400 str (@expr1401 ) $) $) { $return ; }
1819:
1820:
1821: $check_ $(@expr1073743232 "cppcheck-2.8/test/testmemleak.cpp" $, 1821 $, "void* foo() {\n    struct ABC abc;\n    abc.a = malloc(10);\n    return abc.a;\n}" , false $)
1822:
1823:
1824:
1825: ;
1826: $if $(@expr1073743233 $!@expr1073743234 $assertEquals $(@expr1073743235 "cppcheck-2.8/test/testmemleak.cpp" $, 1826 $, "" $, errout@var100 .@expr1400 str (@expr1401 ) $) $) { $return ; }
1827:
1828: $check_ $(@expr1073743238 "cppcheck-2.8/test/testmemleak.cpp" $, 1828 $, "void* foo() {\n    struct ABC abc;\n    abc.a = malloc(10);\n    return abc.b;\n}" , false $)
1829:
1830:
1831:
1832: ;
1833: $if $(@expr1073743239 $!@expr1073743240 $assertEquals $(@expr1073743241 "cppcheck-2.8/test/testmemleak.cpp" $, 1833 $, "[test.c:4]: (error) Memory leak: abc.a\n" $, errout@var100 .@expr1400 str (@expr1401 ) $) $) { $return ; }
1834: }
1835:
1836: void ret2 ( ) {
1837: $check_ $(@expr1073743244 "cppcheck-2.8/test/testmemleak.cpp" $, 1837 $, "static ABC * foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    return &abc->self;\n}" $)
1838:
|
1841:
1842: ;
1843: $if $(@expr1073743245 $!@expr1073743246 $assertEquals $(@expr1073743247 "cppcheck-2.8/test/testmemleak.cpp" $, 1843 $, "" $, errout@var100 .@expr1073743248 str (@expr1073743249 ) $) $) { $return ; }
1844: }
1845:
1846: void assign1 ( ) {
1847: $check_ $(@expr1073743250 "cppcheck-2.8/test/testmemleak.cpp" $, 1847 $, "static void foo()\n{\n    struct ABC *abc = abc1;\n    abc->a = malloc(10);\n}" $)
1848:
1849:
1850:
1851: ;
1852: $if $(@expr1073743251 $!@expr1073743252 $assertEquals $(@expr1073743253 "cppcheck-2.8/test/testmemleak.cpp" $, 1852 $, "" $, errout@var100 .@expr1430 str (@expr1431 ) $) $) { $return ; }
1853:
1854: $check_ $(@expr1073743256 "cppcheck-2.8/test/testmemleak.cpp" $, 1854 $, "static void foo()\n{\n    struct ABC *abc;\n    abc1 = abc = malloc(sizeof(ABC));\n    abc->a = malloc(10);\n}" $)
1855:
|
1858:
1859: ;
1860: $if $(@expr1073743257 $!@expr1073743258 $assertEquals $(@expr1073743259 "cppcheck-2.8/test/testmemleak.cpp" $, 1860 $, "" $, errout@var100 .@expr1430 str (@expr1431 ) $) $) { $return ; }
1861:
1862: $check_ $(@expr1073743262 "cppcheck-2.8/test/testmemleak.cpp" $, 1862 $, "static void foo()\n{\n struct msn_entry *ptr;\n ptr = malloc(sizeof(struct msn_entry));\n ptr->msn = malloc(100);\n back = ptr;\n}" $)
1863:
|
1867:
1868: ;
1869: $if $(@expr1073743263 $!@expr1073743264 $assertEquals $(@expr1073743265 "cppcheck-2.8/test/testmemleak.cpp" $, 1869 $, "" $, errout@var100 .@expr1430 str (@expr1431 ) $) $) { $return ; }
1870:
1871: }
1872:
1873: void assign2 ( ) {
1874: $check_ $(@expr1073743268 "cppcheck-2.8/test/testmemleak.cpp" $, 1874 $, "static void foo() {\n    struct ABC *abc = malloc(123);\n    abc->a = abc->b = malloc(10);\n}" $)
1875:
1876:
1877: ;
1878: $if $(@expr1073743269 $!@expr1073743270 $assertEquals $(@expr1073743271 "cppcheck-2.8/test/testmemleak.cpp" $, 1878 $, "" $, errout@var100 .@expr1073743272 str (@expr1073743273 ) $) $) { $return ; }
1879: }
1880:
1881: void assign3 ( ) {
1882: $check_ $(@expr1073743274 "cppcheck-2.8/test/testmemleak.cpp" $, 1882 $, "void f(struct s *f1) {\n    struct s f2;\n    f2.a = malloc(100);\n    *f1 = f2;\n}" , false $)
1883:
1884:
1885:
1886: ;
1887: $if $(@expr1073743275 $!@expr1073743276 $assertEquals $(@expr1073743277 "cppcheck-2.8/test/testmemleak.cpp" $, 1887 $, "" $, errout@var100 .@expr1073743278 str (@expr1073743279 ) $) $) { $return ; }
1888: }
1889:
1890: void failedAllocation ( ) {
1891: $check_ $(@expr1073743280 "cppcheck-2.8/test/testmemleak.cpp" $, 1891 $, "static struct ABC * foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    if (!abc->a)\n    {\n        free(abc);\n        return 0;\n    }\n    return abc;\n}" $)
1892:
|
1900:
1901: ;
1902: $if $(@expr1073743281 $!@expr1073743282 $assertEquals $(@expr1073743283 "cppcheck-2.8/test/testmemleak.cpp" $, 1902 $, "" $, errout@var100 .@expr1073743284 str (@expr1073743285 ) $) $) { $return ; }
1903: }
1904:
1905: void function1 ( ) {
1906:
1907: $check_ $(@expr1073743286 "cppcheck-2.8/test/testmemleak.cpp" $, 1907 $, "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    func(abc);\n}" $)
1908:
|
1911:
1912: ;
1913: $if $(@expr1073743287 $!@expr1073743288 $assertEquals $(@expr1073743289 "cppcheck-2.8/test/testmemleak.cpp" $, 1913 $, "" $, errout@var100 .@expr1466 str (@expr1467 ) $) $) { $return ; }
1914:
1915: $check_ $(@expr1073743292 "cppcheck-2.8/test/testmemleak.cpp" $, 1915 $, "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abclist.push_back(abc);\n    abc->a = malloc(10);\n}" $)
1916:
|
1919:
1920: ;
1921: $if $(@expr1073743293 $!@expr1073743294 $assertEquals $(@expr1073743295 "cppcheck-2.8/test/testmemleak.cpp" $, 1921 $, "" $, errout@var100 .@expr1466 str (@expr1467 ) $) $) { $return ; }
1922: }
1923:
1924:
1925: void function2 ( ) {
1926: $check_ $(@expr1073743298 "cppcheck-2.8/test/testmemleak.cpp" $, 1926 $, "void f() {\n  A a = { 0 };\n  a.foo = (char *) malloc(10);\n  assign(&a);\n}" , false $)
1927:
1928:
1929:
1930: ;
1931: $if $(@expr1073743299 $!@expr1073743300 $assertEquals $(@expr1073743301 "cppcheck-2.8/test/testmemleak.cpp" $, 1931 $, "" $, errout@var100 .@expr1073743302 str (@expr1073743303 ) $) $) { $return ; }
1932: }
1933:
1934:
1935: void function3 ( ) {
1936: $check_ $(@expr1073743304 "cppcheck-2.8/test/testmemleak.cpp" $, 1936 $, "void f() {\n  struct ABC *abc = malloc(100);\n  abc.a = (char *) malloc(10);\n  list_add_tail(&abc->list, head);\n}" , false $)
1937:
1938:
1939:
1940: ;
1941: $if $(@expr1073743305 $!@expr1073743306 $assertEquals $(@expr1073743307 "cppcheck-2.8/test/testmemleak.cpp" $, 1941 $, "" $, errout@var100 .@expr1073743308 str (@expr1073743309 ) $) $) { $return ; }
1942: }
1943:
1944:
1945: void function4 ( ) {
1946: $check_ $(@expr1073743310 "cppcheck-2.8/test/testmemleak.cpp" $, 1946 $, "void a(char *p) { char *x = p; free(x); }\nvoid b() {\n  struct ABC abc;\n  abc.a = (char *) malloc(10);\n  a(abc.a);\n}" , false $)
1947:
|
1950:
1951: ;
1952: $if $(@expr1073743311 $!@expr1073743312 $assertEquals $(@expr1073743313 "cppcheck-2.8/test/testmemleak.cpp" $, 1952 $, "" $, errout@var100 .@expr1073743314 str (@expr1073743315 ) $) $) { $return ; }
1953: }
1954:
1955: void function5 ( ) {
1956: $check_ $(@expr1073743316 "cppcheck-2.8/test/testmemleak.cpp" $, 1956 $, "struct s f() {\n    struct s s1;\n    s1->x = malloc(1);\n    return (s1);\n}" $)
1957:
1958:
1959:
1960: ;
1961: $if $(@expr1073743317 $!@expr1073743318 $assertEquals $(@expr1073743319 "cppcheck-2.8/test/testmemleak.cpp" $, 1961 $, "" $, errout@var100 .@expr1496 str (@expr1497 ) $) $) { $return ; }
1962:
1963: $check_ $(@expr1073743322 "cppcheck-2.8/test/testmemleak.cpp" $, 1963 $, "struct nc_rpc nc_rpc_getconfig() {\n    struct nc_rpc rpc;\n    rpc->filter = malloc(1);\n    return (nc_rpc)rpc;\n}" $)
1964:
1965:
1966:
1967: ;
1968: $if $(@expr1073743323 $!@expr1073743324 $assertEquals $(@expr1073743325 "cppcheck-2.8/test/testmemleak.cpp" $, 1968 $, "" $, errout@var100 .@expr1496 str (@expr1497 ) $) $) { $return ; }
1969:
1970: $check_ $(@expr1073743328 "cppcheck-2.8/test/testmemleak.cpp" $, 1970 $, "T* f(const char *str) {\n    S* s = malloc(sizeof(S));\n    s->str = strdup(str);\n    return NewT(s);\n}\n" $)
1971:
1972:
1973:
1974: ;
1975: $if $(@expr1073743329 $!@expr1073743330 $assertEquals $(@expr1073743331 "cppcheck-2.8/test/testmemleak.cpp" $, 1975 $, "" $, errout@var100 .@expr1496 str (@expr1497 ) $) $) { $return ; }
1976: }
1977:
1978: void ifelse ( ) {
1979: $check_ $(@expr1073743334 "cppcheck-2.8/test/testmemleak.cpp" $, 1979 $, "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    if (x)    {\n        abc->a = malloc(10);\n    }\n    else\n    {\n        free(abc);\n        return;\n    }\n    free(abc->a);\n    free(abc);\n}" $)
1980:
|
1992:
1993: ;
1994: $if $(@expr1073743335 $!@expr1073743336 $assertEquals $(@expr1073743337 "cppcheck-2.8/test/testmemleak.cpp" $, 1994 $, "" $, errout@var100 .@expr1073743338 str (@expr1073743339 ) $) $) { $return ; }
1995: }
1996:
1997: void linkedlist ( ) {
1998:
1999: $check_ $(@expr1073743340 "cppcheck-2.8/test/testmemleak.cpp" $, 1999 $, "static void foo() {\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->next = malloc(sizeof(struct ABC));\n    abc->next->next = NULL;\n\n    while (abc) {\n        struct ABC *next = abc->next;\n        free(abc);\n        abc = next;\n    }\n}" $)
2000:
|
2008:
2009: ;
2010: $if $(@expr1073743341 $!@expr1073743342 $assertEquals $(@expr1073743343 "cppcheck-2.8/test/testmemleak.cpp" $, 2010 $, "" $, errout@var100 .@expr1073743344 str (@expr1073743345 ) $) $) { $return ; }
2011: }
2012:
2013: void globalvar ( ) {
2014: $check_ $(@expr1073743346 "cppcheck-2.8/test/testmemleak.cpp" $, 2014 $, "struct ABC *abc;\n\nstatic void foo()\n{\n    abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    return;\n}" $)
2015:
|
2020:
2021: ;
2022: $if $(@expr1073743347 $!@expr1073743348 $assertEquals $(@expr1073743349 "cppcheck-2.8/test/testmemleak.cpp" $, 2022 $, "" $, errout@var100 .@expr1073743350 str (@expr1073743351 ) $) $) { $return ; }
2023: }
2024:
2025:
2026: void localvars ( ) {
2027:
2028: const char code1@var152 [@expr1073743352 162 ] =@expr1073743353 "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n}"
2029:
|
2038:
2039: ;
2040:
2041: $check_ $(@expr1073743354 "cppcheck-2.8/test/testmemleak.cpp" $, 2041 $, code1@var152 , true $) ;
2042: $if $(@expr1073743355 $!@expr1073743356 $assertEquals $(@expr1073743357 "cppcheck-2.8/test/testmemleak.cpp" $, 2042 $, "[test.cpp:12]: (error) Memory leak: a.f\n[test.cpp:12]: (error) Memory leak: a.c\n[test.cpp:12]: (error) Memory leak: a.m\n" $, errout@var100 .@expr1534 str (@expr1535 ) $) $) { $return
2043:
2044: ; }
2045: $check_ $(@expr1073743360 "cppcheck-2.8/test/testmemleak.cpp" $, 2045 $, code1@var152 , false $) ;
2046: $if $(@expr1073743361 $!@expr1073743362 $assertEquals $(@expr1073743363 "cppcheck-2.8/test/testmemleak.cpp" $, 2046 $, "[test.c:12]: (error) Memory leak: a.f\n[test.c:12]: (error) Memory leak: a.m\n" $, errout@var100 .@expr1534 str (@expr1535 ) $) $) { $return
2047: ; }
2048:
2049:
2050: const char code2@var153 [@expr1073743366 213 ] =@expr1073743367 "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n    fclose(a.f);\n    delete [] a.c;\n    free(a.m);\n}"
2051:
|
2063:
2064: ;
2065:
2066: $check_ $(@expr1073743368 "cppcheck-2.8/test/testmemleak.cpp" $, 2066 $, code2@var153 , true $) ;
2067: $if $(@expr1073743369 $!@expr1073743370 $assertEquals $(@expr1073743371 "cppcheck-2.8/test/testmemleak.cpp" $, 2067 $, "" $, errout@var100 .@expr1534 str (@expr1535 ) $) $) { $return ; }
2068: $check_ $(@expr1073743374 "cppcheck-2.8/test/testmemleak.cpp" $, 2068 $, code2@var153 , false $) ;
2069: $if $(@expr1073743375 $!@expr1073743376 $assertEquals $(@expr1073743377 "cppcheck-2.8/test/testmemleak.cpp" $, 2069 $, "" $, errout@var100 .@expr1534 str (@expr1535 ) $) $) { $return ; }
2070:
2071:
2072: const char code3@var154 [@expr1073743380 62 ] =@expr1073743381 "void func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"
2073:
2074:
2075: ;
2076:
2077: $check_ $(@expr1073743382 "cppcheck-2.8/test/testmemleak.cpp" $, 2077 $, code3@var154 , true $) ;
2078: $if $(@expr1073743383 $!@expr1073743384 $assertEquals $(@expr1073743385 "cppcheck-2.8/test/testmemleak.cpp" $, 2078 $, "" $, errout@var100 .@expr1534 str (@expr1535 ) $) $) { $return ; }
2079: $check_ $(@expr1073743388 "cppcheck-2.8/test/testmemleak.cpp" $, 2079 $, code3@var154 , false $) ;
2080: $if $(@expr1073743389 $!@expr1073743390 $assertEquals $(@expr1073743391 "cppcheck-2.8/test/testmemleak.cpp" $, 2080 $, "[test.c:4]: (error) Memory leak: a.f\n" $, errout@var100 .@expr1534 str (@expr1535 ) $) $) { $return ; }
2081:
2082:
2083: const char code4@var155 [@expr1073743394 99 ] =@expr1073743395 "struct A {\n    FILE* f;\n    ~A();\n};\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"
2084:
|
2089:
2090: ;
2091:
2092: $check_ $(@expr1073743396 "cppcheck-2.8/test/testmemleak.cpp" $, 2092 $, code4@var155 , true $) ;
2093: $if $(@expr1073743397 $!@expr1073743398 $assertEquals $(@expr1073743399 "cppcheck-2.8/test/testmemleak.cpp" $, 2093 $, "" $, errout@var100 .@expr1534 str (@expr1535 ) $) $) { $return ; }
2094: }
2095:
2096: void refvar ( ) {
2097: $check_ $(@expr1073743402 "cppcheck-2.8/test/testmemleak.cpp" $, 2097 $, "struct Test\n{\n  int* data;\n};\n\nvoid foo(Test* x)\n{\n  Test& y = *x;\n  y.data = malloc(10);\n}" $)
2098:
|
2105:
2106: ;
2107: $if $(@expr1073743403 $!@expr1073743404 $assertEquals $(@expr1073743405 "cppcheck-2.8/test/testmemleak.cpp" $, 2107 $, "" $, errout@var100 .@expr1073743406 str (@expr1073743407 ) $) $) { $return ; }
2108: }
2109:
2110:
2111: void trac5030 ( ) {
2112: $check_ $(@expr1073743408 "cppcheck-2.8/test/testmemleak.cpp" $, 2112 $, "bool bob( char const **column_ptrs ) {\nunique_ptr<char[]>otherbuffer{new char[otherbufsize+1]};\nchar *const oldbuffer = otherbuffer.get();\nint const oldbufsize = otherbufsize;\n}" $)
2113:
2114:
2115:
2116: ;
2117: $if $(@expr1073743409 $!@expr1073743410 $assertEquals $(@expr1073743411 "cppcheck-2.8/test/testmemleak.cpp" $, 2117 $, "" $, errout@var100 .@expr1073743412 str (@expr1073743413 ) $) $) { $return ; }
2118: }
2119:
2120: void varid ( ) {
2121: $check_ $(@expr1073743414 "cppcheck-2.8/test/testmemleak.cpp" $, 2121 $, "struct S {\n  void *state_check_buff;\n};\nvoid f() {\n  S s;\n  (s).state_check_buff = (void* )malloc(1);\n  if (s.state_check_buff == 0)\n    return;\n}" , false $)
2122:
|
2128:
2129: ;
2130: $if $(@expr1073743415 $!@expr1073743416 $assertEquals $(@expr1073743417 "cppcheck-2.8/test/testmemleak.cpp" $, 2130 $, "[test.c:9]: (error) Memory leak: s.state_check_buff\n" $, errout@var100 .@expr1073743418 str (@expr1073743419 ) $) $) { $return ; }
2131: }
2132:
2133: void varid_2 ( ) {
2134: $check_ $(@expr1073743420 "cppcheck-2.8/test/testmemleak.cpp" $, 2134 $, "typedef struct foo { char *realm; } foo;\nvoid build_principal() {\n  foo f;\n  ((f)->realm) = strdup(realm);\n  if(f->realm == NULL) {}\n}" , false $)
2135:
|
2138:
2139: ;
2140: $todoAssertEquals $(@expr1073743421 "cppcheck-2.8/test/testmemleak.cpp" $, 2140 $, "[test.c:6]: (error) Memory leak: f.realm\n" $, "" $, errout@var100 .@expr1073743422 str (@expr1073743423 ) $) ;
2141: }
2142:
2143: void customAllocation ( ) {
2144: $check_ $(@expr1073743424 "cppcheck-2.8/test/testmemleak.cpp" $, 2144 $, "char *myalloc(void) {\n    return malloc(100);\n}\nvoid func() {\n    struct ABC abc;\n    abc.a = myalloc();\n}" , false $)
2145:
|
2149:
2150: ;
2151: $if $(@expr1073743425 $!@expr1073743426 $assertEquals $(@expr1073743427 "cppcheck-2.8/test/testmemleak.cpp" $, 2151 $, "[test.c:7]: (error) Memory leak: abc.a\n" $, errout@var100 .@expr1073743428 str (@expr1073743429 ) $) $) { $return ; }
2152: }
2153:
2154: void lambdaInForLoop ( ) {
2155: $check_ $(@expr1073743430 "cppcheck-2.8/test/testmemleak.cpp" $, 2155 $, "struct S { int * p{nullptr}; };\nint main()\n{\n    S s;\n    s.p = new int[10];\n    for (int i = 0; i < 10; ++i) {\n        s.p[i] = []() { return 1; }();\n    }\n    delete[] s.p;\n    return 0;\n}" , true $)
2156:
|
2165:
2166: ;
2167: $if $(@expr1073743431 $!@expr1073743432 $assertEquals $(@expr1073743433 "cppcheck-2.8/test/testmemleak.cpp" $, 2167 $, "" $, errout@var100 .@expr1073743434 str (@expr1073743435 ) $) $) { $return ; }
2168: }
2169: } ;
2170:
2171: $namespace ${ TestMemleakStructMember instance_TestMemleakStructMember@var156 $; $}
2172:
|
2176:
2177: class TestMemleakNoVar : public TestFixture {
2178: public:
2179: TestMemleakNoVar ( ) : TestFixture ( "TestMemleakNoVar" ) { }
2180:
2181: private:
2182: Settings settings@var157 ;
2183:
2184: void check_ ( const char * file@var158 , int line@var159 , const char code@var160 [ ] ) {
2185:
2186: errout@var100 .@expr1073743436 str (@expr1073743437 "" ) ;
2187:
2188:
2189: Tokenizer tokenizer@var161 (@expr1073743438 &@expr1615 settings@var157 , this@expr1616 ) ;
2190: std ::@expr1073743441 istringstream istr@var162 (@expr1073743442 code@var160 ) ;
2191: $assert_ $(@expr1073743443 file@var158 $, line@var159 $, $(@expr1073743444 tokenizer@var161 .@expr1073743445 tokenize (@expr1073743446 istr@var162 , "test.cpp" ) $) $) ;
2192:
2193:
2194: CheckMemoryLeakNoVar checkMemoryLeakNoVar@var163 (@expr1073743447 &@expr1073743448 tokenizer@var161 , &@expr1615 settings@var157 , this@expr1616 ) ;
2195: checkMemoryLeakNoVar@var163 .@expr1073743450 check (@expr1073743451 ) ;
2196: }
2197:
2198: void run ( ) override {
2199: settings@var157 .@expr1073743453 certainty@var164 .@expr1073743454 setEnabled (@expr1073743455 Certainty ::@expr1073743456 inconclusive , true ) ;
2200: settings@var157 .@expr1073743457 libraries@var165 .@expr1073743458 emplace_back (@expr1073743459 "posix" ) ;
2201: settings@var157 .@expr1073743460 severity@var166 .@expr1073743461 enable (@expr1073743462 Severity ::@expr1073743463 warning@expr1073743452 ) ;
2202:
2203: $do ${ $if $(@expr1073743464 settings@var157 .@expr1641 library@var167 $.@expr1073743466 $load $(@expr1073743467 $exename@var11 $.@expr1073743468 $c_str $(@expr1073743469 $) $, "std.cfg" $) $.@expr1073743470 $errorcode $!=@expr1073743471 $Library $::@expr1073743472 $ErrorCode $::@expr1073743473 $OK $) ${ $complainMissingLib $(@expr1073743474 "std.cfg" $) $; $return $; $} $} $while $(@expr1073743475 $false $) ;
2204: $do ${ $if $(@expr1073743476 settings@var157 .@expr1641 library@var167 $.@expr1073743478 $load $(@expr1073743479 $exename@var11 $.@expr1073743480 $c_str $(@expr1073743481 $) $, "posix.cfg" $) $.@expr1073743482 $errorcode $!=@expr1073743483 $Library $::@expr1073743484 $ErrorCode $::@expr1073743485 $OK $) ${ $complainMissingLib $(@expr1073743486 "posix.cfg" $) $; $return $; $} $} $while $(@expr1073743487 $false $) ;
2205:
2206:
2207: $do ${ $if $(@expr1073743488 $prepareTest $(@expr1073743489 "functionParameter" $) $) ${ $setVerbose $(@expr1073743490 $false $) $; functionParameter $(@expr1073743491 $) $; $} $} $while $(@expr1073743492 $false $) ;
2208:
2209:
2210: $do ${ $if $(@expr1073743493 $prepareTest $(@expr1073743494 "missingAssignment" $) $) ${ $setVerbose $(@expr1073743495 $false $) $; missingAssignment $(@expr1073743496 $) $; $} $} $while $(@expr1073743497 $false $) ;
2211:
2212:
2213: $do ${ $if $(@expr1073743498 $prepareTest $(@expr1073743499 "smartPointerFunctionParam" $) $) ${ $setVerbose $(@expr1073743500 $false $) $; smartPointerFunctionParam $(@expr1073743501 $) $; $} $} $while $(@expr1073743502 $false $) ;
2214: $do ${ $if $(@expr1073743503 $prepareTest $(@expr1073743504 "resourceLeak" $) $) ${ $setVerbose $(@expr1073743505 $false $) $; resourceLeak $(@expr1073743506 $) $; $} $} $while $(@expr1073743507 $false $) ;
2215:
2216:
2217: $do ${ $if $(@expr1073743508 $prepareTest $(@expr1073743509 "getAllocationType" $) $) ${ $setVerbose $(@expr1073743510 $false $) $; getAllocationType $(@expr1073743511 $) $; $} $} $while $(@expr1073743512 $false $) ;
2218:
2219: $do ${ $if $(@expr1073743513 $prepareTest $(@expr1073743514 "crash1" $) $) ${ $setVerbose $(@expr1073743515 $false $) $; crash1 $(@expr1073743516 $) $; $} $} $while $(@expr1073743517 $false $) ;
2220: }
2221:
2222: void functionParameter ( ) {
2223:
2224: $check_ $(@expr1073743518 "cppcheck-2.8/test/testmemleak.cpp" $, 2224 $, "void x() {\n    strcpy(a, strdup(p));\n}" $)
2225:
2226: ;
2227: $if $(@expr1073743519 $!@expr1073743520 $assertEquals $(@expr1073743521 "cppcheck-2.8/test/testmemleak.cpp" $, 2227 $, "[test.cpp:2]: (error) Allocation with strdup, strcpy doesn't release it.\n" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2228:
2229: $check_ $(@expr1073743524 "cppcheck-2.8/test/testmemleak.cpp" $, 2229 $, "char *x() {\n    char *ret = strcpy(malloc(10), \"abc\");\n    return ret;\n}" $)
2230:
2231:
2232: ;
2233: $if $(@expr1073743525 $!@expr1073743526 $assertEquals $(@expr1073743527 "cppcheck-2.8/test/testmemleak.cpp" $, 2233 $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2234:
2235: $check_ $(@expr1073743530 "cppcheck-2.8/test/testmemleak.cpp" $, 2235 $, "char *x() {\n    return strcpy(malloc(10), \"abc\");\n}" $)
2236:
2237: ;
2238: $if $(@expr1073743531 $!@expr1073743532 $assertEquals $(@expr1073743533 "cppcheck-2.8/test/testmemleak.cpp" $, 2238 $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2239:
2240: $check_ $(@expr1073743536 "cppcheck-2.8/test/testmemleak.cpp" $, 2240 $, "void x() {\n    free(malloc(10));\n}" $)
2241:
2242: ;
2243: $if $(@expr1073743537 $!@expr1073743538 $assertEquals $(@expr1073743539 "cppcheck-2.8/test/testmemleak.cpp" $, 2243 $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2244:
2245:
2246: $check_ $(@expr1073743542 "cppcheck-2.8/test/testmemleak.cpp" $, 2246 $, "void set_error(const char *msg) {\n}\n\nvoid x() {\n    set_error(strdup(p));\n}" $)
2247:
|
2250:
2251: ;
2252: $todoAssertEquals $(@expr1073743543 "cppcheck-2.8/test/testmemleak.cpp" $, 2252 $, "[test.cpp:5]: (error) Allocation with strdup, set_error doesn't release it.\n" $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) ;
2253:
2254: $check_ $(@expr1073743546 "cppcheck-2.8/test/testmemleak.cpp" $, 2254 $, "void f()\n{\n    int fd;\n    fd = mkstemp(strdup(\"/tmp/file.XXXXXXXX\"));\n    close(fd);\n}" $)
2255:
|
2258:
2259: ;
2260: $todoAssertEquals $(@expr1073743547 "cppcheck-2.8/test/testmemleak.cpp" $, 2260 $, "[test.cpp:4]: (error) Allocation with strdup, mkstemp doesn't release it.\n" $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) ;
2261:
2262: $check_ $(@expr1073743550 "cppcheck-2.8/test/testmemleak.cpp" $, 2262 $, "void f()\n{\n    if(TRUE || strcmp(strdup(a), b));\n}" $)
2263:
2264:
2265: ;
2266: $if $(@expr1073743551 $!@expr1073743552 $assertEquals $(@expr1073743553 "cppcheck-2.8/test/testmemleak.cpp" $, 2266 $, "[test.cpp:3]: (error) Allocation with strdup, strcmp doesn't release it.\n" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2267:
2268: $check_ $(@expr1073743556 "cppcheck-2.8/test/testmemleak.cpp" $, 2268 $, "void f()\n{\n    if(!strcmp(strdup(a), b) == 0);\n}" $)
2269:
2270:
2271: ;
2272: $if $(@expr1073743557 $!@expr1073743558 $assertEquals $(@expr1073743559 "cppcheck-2.8/test/testmemleak.cpp" $, 2272 $, "[test.cpp:3]: (error) Allocation with strdup, strcmp doesn't release it.\n" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2273:
2274: $check_ $(@expr1073743562 "cppcheck-2.8/test/testmemleak.cpp" $, 2274 $, "void f()\n{\n    42, strcmp(strdup(a), b);\n}" $)
2275:
2276:
2277: ;
2278: $if $(@expr1073743563 $!@expr1073743564 $assertEquals $(@expr1073743565 "cppcheck-2.8/test/testmemleak.cpp" $, 2278 $, "[test.cpp:3]: (error) Allocation with strdup, strcmp doesn't release it.\n" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2279:
2280: $check_ $(@expr1073743568 "cppcheck-2.8/test/testmemleak.cpp" $, 2280 $, "void f() {\n   assert(freopen(\"/dev/null\", \"r\", stdin));\n}" $)
2281:
2282: ;
2283: $if $(@expr1073743569 $!@expr1073743570 $assertEquals $(@expr1073743571 "cppcheck-2.8/test/testmemleak.cpp" $, 2283 $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2284:
2285: $check_ $(@expr1073743574 "cppcheck-2.8/test/testmemleak.cpp" $, 2285 $, "void x() {\n    strcpy(a, (void*)strdup(p));\n}" $)
2286:
2287: ;
2288: $if $(@expr1073743575 $!@expr1073743576 $assertEquals $(@expr1073743577 "cppcheck-2.8/test/testmemleak.cpp" $, 2288 $, "[test.cpp:2]: (error) Allocation with strdup, strcpy doesn't release it.\n" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2289:
2290: $check_ $(@expr1073743580 "cppcheck-2.8/test/testmemleak.cpp" $, 2290 $, "void* malloc1() {\n    return (malloc(1));\n}" $)
2291:
2292: ;
2293: $if $(@expr1073743581 $!@expr1073743582 $assertEquals $(@expr1073743583 "cppcheck-2.8/test/testmemleak.cpp" $, 2293 $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2294:
2295: $check_ $(@expr1073743586 "cppcheck-2.8/test/testmemleak.cpp" $, 2295 $, "char *x() {\n    char *ret = (char*)strcpy(malloc(10), \"abc\");\n    return ret;\n}" $)
2296:
2297:
2298: ;
2299: $if $(@expr1073743587 $!@expr1073743588 $assertEquals $(@expr1073743589 "cppcheck-2.8/test/testmemleak.cpp" $, 2299 $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2300:
2301: $check_ $(@expr1073743592 "cppcheck-2.8/test/testmemleak.cpp" $, 2301 $, "void f() {\n    free(malloc(1));\n    strcpy(a, strdup(p));\n}" $)
2302:
2303:
2304: ;
2305: $if $(@expr1073743593 $!@expr1073743594 $assertEquals $(@expr1073743595 "cppcheck-2.8/test/testmemleak.cpp" $, 2305 $, "[test.cpp:3]: (error) Allocation with strdup, strcpy doesn't release it.\n" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2306:
2307: $check_ $(@expr1073743598 "cppcheck-2.8/test/testmemleak.cpp" $, 2307 $, "void f() {\n    memcmp(calloc(10, 10), strdup(q), 100);\n}" $)
2308:
2309: ;
2310: $if $(@expr1073743599 $!@expr1073743600 $assertEquals $(@expr1073743601 "cppcheck-2.8/test/testmemleak.cpp" $, 2310 $, "[test.cpp:2]: (error) Allocation with calloc, memcmp doesn't release it.\n[test.cpp:2]: (error) Allocation with strdup, memcmp doesn't release it.\n" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return
2311: ; }
2312:
2313: $check_ $(@expr1073743604 "cppcheck-2.8/test/testmemleak.cpp" $, 2313 $, "void* f(int size) {\n    return (void*) malloc(size);\n}" $)
2314:
2315: ;
2316: $if $(@expr1073743605 $!@expr1073743606 $assertEquals $(@expr1073743607 "cppcheck-2.8/test/testmemleak.cpp" $, 2316 $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2317:
2318: $check_ $(@expr1073743610 "cppcheck-2.8/test/testmemleak.cpp" $, 2318 $, "int* f(int size) {\n    return static_cast<int*>(malloc(size));\n}" $)
2319:
2320: ;
2321: $if $(@expr1073743611 $!@expr1073743612 $assertEquals $(@expr1073743613 "cppcheck-2.8/test/testmemleak.cpp" $, 2321 $, "" $, errout@var100 .@expr1698 str (@expr1699 ) $) $) { $return ; }
2322: }
2323:
2324: void missingAssignment ( ) {
2325: $check_ $(@expr1073743616 "cppcheck-2.8/test/testmemleak.cpp" $, 2325 $, "void x()\n{\n    malloc(10);\n}" $)
2326:
2327:
2328: ;
2329: $if $(@expr1073743617 $!@expr1073743618 $assertEquals $(@expr1073743619 "cppcheck-2.8/test/testmemleak.cpp" $, 2329 $, "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2330:
2331: $check_ $(@expr1073743622 "cppcheck-2.8/test/testmemleak.cpp" $, 2331 $, "void x()\n{\n    calloc(10, 1);\n}" $)
2332:
2333:
2334: ;
2335: $if $(@expr1073743623 $!@expr1073743624 $assertEquals $(@expr1073743625 "cppcheck-2.8/test/testmemleak.cpp" $, 2335 $, "[test.cpp:3]: (error) Return value of allocation function 'calloc' is not stored.\n" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2336:
2337: $check_ $(@expr1073743628 "cppcheck-2.8/test/testmemleak.cpp" $, 2337 $, "void x()\n{\n    strdup(\"Test\");\n}" $)
2338:
2339:
2340: ;
2341: $if $(@expr1073743629 $!@expr1073743630 $assertEquals $(@expr1073743631 "cppcheck-2.8/test/testmemleak.cpp" $, 2341 $, "[test.cpp:3]: (error) Return value of allocation function 'strdup' is not stored.\n" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2342:
2343: $check_ $(@expr1073743634 "cppcheck-2.8/test/testmemleak.cpp" $, 2343 $, "void x()\n{\n    reallocarray(NULL, 10, 10);\n}" $)
2344:
2345:
2346: ;
2347: $if $(@expr1073743635 $!@expr1073743636 $assertEquals $(@expr1073743637 "cppcheck-2.8/test/testmemleak.cpp" $, 2347 $, "[test.cpp:3]: (error) Return value of allocation function 'reallocarray' is not stored.\n" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2348:
2349: $check_ $(@expr1073743640 "cppcheck-2.8/test/testmemleak.cpp" $, 2349 $, "void x()\n{\n    (char*) malloc(10);\n}" $)
2350:
2351:
2352: ;
2353: $if $(@expr1073743641 $!@expr1073743642 $assertEquals $(@expr1073743643 "cppcheck-2.8/test/testmemleak.cpp" $, 2353 $, "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2354:
2355: $check_ $(@expr1073743646 "cppcheck-2.8/test/testmemleak.cpp" $, 2355 $, "void x()\n{\n    char* ptr = malloc(10);\n    foo(ptr);\n    free(ptr);\n}" $)
2356:
|
2359:
2360: ;
2361: $if $(@expr1073743647 $!@expr1073743648 $assertEquals $(@expr1073743649 "cppcheck-2.8/test/testmemleak.cpp" $, 2361 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2362:
2363: $check_ $(@expr1073743652 "cppcheck-2.8/test/testmemleak.cpp" $, 2363 $, "char** x(const char* str) {\n    char* ptr[] = { malloc(10), malloc(5), strdup(str) };\n    return ptr;\n}" $)
2364:
2365:
2366: ;
2367: $if $(@expr1073743653 $!@expr1073743654 $assertEquals $(@expr1073743655 "cppcheck-2.8/test/testmemleak.cpp" $, 2367 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2368:
2369: $check_ $(@expr1073743658 "cppcheck-2.8/test/testmemleak.cpp" $, 2369 $, "void x()\n{\n    42,malloc(42);\n}" $)
2370:
2371:
2372: ;
2373: $todoAssertEquals $(@expr1073743659 "cppcheck-2.8/test/testmemleak.cpp" $, 2373 $, "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n" $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) ;
2374:
2375: $check_ $(@expr1073743662 "cppcheck-2.8/test/testmemleak.cpp" $, 2375 $, "void *f()\n{\n    return malloc(10);\n}\nvoid x()\n{\n    f();\n}" $)
2376:
|
2381:
2382: ;
2383: $if $(@expr1073743663 $!@expr1073743664 $assertEquals $(@expr1073743665 "cppcheck-2.8/test/testmemleak.cpp" $, 2383 $, "[test.cpp:7]: (error) Return value of allocation function 'f' is not stored.\n" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2384:
2385: $check_ $(@expr1073743668 "cppcheck-2.8/test/testmemleak.cpp" $, 2385 $, "void f()\n{\n    auto lambda = [](){return malloc(10);};\n}\nvoid x()\n{\n    f();\n}" $)
2386:
|
2391:
2392: ;
2393: $if $(@expr1073743669 $!@expr1073743670 $assertEquals $(@expr1073743671 "cppcheck-2.8/test/testmemleak.cpp" $, 2393 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2394:
2395: $check_ $(@expr1073743674 "cppcheck-2.8/test/testmemleak.cpp" $, 2395 $, "void *f() {\n    struct S { void *alloc() { return malloc(10); } };\n}\nvoid x()\n{\n    f();\n}" $)
2396:
|
2400:
2401: ;
2402: $if $(@expr1073743675 $!@expr1073743676 $assertEquals $(@expr1073743677 "cppcheck-2.8/test/testmemleak.cpp" $, 2402 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2403:
2404: $check_ $(@expr1073743680 "cppcheck-2.8/test/testmemleak.cpp" $, 2404 $, "void x()\n{\n    if(!malloc(5)) fail();\n}" $)
2405:
2406:
2407: ;
2408: $if $(@expr1073743681 $!@expr1073743682 $assertEquals $(@expr1073743683 "cppcheck-2.8/test/testmemleak.cpp" $, 2408 $, "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2409:
2410: $check_ $(@expr1073743686 "cppcheck-2.8/test/testmemleak.cpp" $, 2410 $, "FOO* factory() {\n    FOO* foo = new (std::nothrow) FOO;\n    return foo;\n}" $)
2411:
2412:
2413: ;
2414: $if $(@expr1073743687 $!@expr1073743688 $assertEquals $(@expr1073743689 "cppcheck-2.8/test/testmemleak.cpp" $, 2414 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2415:
2416:
2417: $check_ $(@expr1073743692 "cppcheck-2.8/test/testmemleak.cpp" $, 2417 $, "struct S { S(int) {} };\nvoid foo(int i) {\n  S socket(i);\n}" $)
2418:
2419:
2420: ;
2421: $if $(@expr1073743693 $!@expr1073743694 $assertEquals $(@expr1073743695 "cppcheck-2.8/test/testmemleak.cpp" $, 2421 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2422:
2423:
2424: $check_ $(@expr1073743698 "cppcheck-2.8/test/testmemleak.cpp" $, 2424 $, "struct CTest {\n    void Initialise();\n    void malloc();\n};\nvoid CTest::Initialise() {\n    malloc();\n}" $)
2425:
|
2429:
2430: ;
2431: $if $(@expr1073743699 $!@expr1073743700 $assertEquals $(@expr1073743701 "cppcheck-2.8/test/testmemleak.cpp" $, 2431 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2432:
2433: $check_ $(@expr1073743704 "cppcheck-2.8/test/testmemleak.cpp" $, 2433 $, "void foo() {\n    p = (::X*)malloc(42);\n}" $)
2434:
2435: ;
2436: $if $(@expr1073743705 $!@expr1073743706 $assertEquals $(@expr1073743707 "cppcheck-2.8/test/testmemleak.cpp" $, 2436 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2437:
2438:
2439: $check_ $(@expr1073743710 "cppcheck-2.8/test/testmemleak.cpp" $, 2439 $, "template<typename... Ts> auto unary_right_comma (Ts... ts) { return (ts , ...); }\ntemplate<typename T, typename... Ts> auto binary_left_comma (T x, Ts... ts) { return (x , ... , ts); }\nint main() {\n  unary_right_comma (a);\n}" $)
2440:
2441:
2442:
2443: ;
2444: $if $(@expr1073743711 $!@expr1073743712 $assertEquals $(@expr1073743713 "cppcheck-2.8/test/testmemleak.cpp" $, 2444 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2445:
2446: $check_ $(@expr1073743716 "cppcheck-2.8/test/testmemleak.cpp" $, 2446 $, "void f() {\n    new int[10];\n    new int[10][5];\n    new int[10]();\n    new int[10]{};\n    new int[] { 1, 2, 3 };\n    new std::string;\n    new int;\n    new int();\n    new int(1);\n    new int{};\n    new int{ 1 };\n    new uint8_t[4];\n}" $)
2447:
|
2458:
2459: ;
2460: $if $(@expr1073743717 $!@expr1073743718 $assertEquals $(@expr1073743719 "cppcheck-2.8/test/testmemleak.cpp" $, 2460 $, "[test.cpp:2]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:3]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:4]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:5]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:6]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:7]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:8]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:9]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:10]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:11]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:12]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:13]: (error) Return value of allocation function 'new' is not stored.\n" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return
2461:
|
2471:
2472: ; }
2473:
2474: $check_ $(@expr1073743722 "cppcheck-2.8/test/testmemleak.cpp" $, 2474 $, "void f(int* p) {\n    new auto('c');\n    new(p) int;\n}" $)
2475:
2476:
2477: ;
2478: $todoAssertEquals $(@expr1073743723 "cppcheck-2.8/test/testmemleak.cpp" $, 2478 $, "[test.cpp:2]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:3]: (error) Return value of allocation function 'new' is not stored.\n" $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $)
2479:
2480:
2481: ;
2482:
2483: $check_ $(@expr1073743726 "cppcheck-2.8/test/testmemleak.cpp" $, 2483 $, "void g(int* p) {\n    new QWidget;\n    new QWidget();\n    new QWidget{ this };\n    h(new int[10], 1);\n    h(new int[10][5], 1);\n    h(new int[10](), 1);\n    h(new int[10]{}, 1);\n    h(new int[] { 1, 2, 3 }, 1);\n    h(new auto('c'), 1);\n    h(new std::string, 1);\n    h(new int, 1);\n    h(new int{}, 1);\n    h(new int(), 1);\n    h(new int{ 1 }, 1);\n    h(new int(1), 1);\n    h(new(p) int, 1);\n    h(new QWidget, 1);\n    C{ new int[10], 1 };\n    C{ new int[10](), 1 };\n    C{ new int[10]{}, 1 };\n    C{ new int[] { 1, 2, 3 }, 1 };\n    C{ new auto('c'), 1 };\n    C{ new std::string, 1 };\n    C{ new int, 1 };\n    C{ new int{}, 1 };\n    C{ new int(), 1 };\n    C{ new int{ 1 }, 1 };\n    C{ new int(1), 1 };\n    C{ new(p) int, 1 };\n    C{ new QWidget, 1 };\n}" $)
2484:
|
2513:
2514: ;
2515: $if $(@expr1073743727 $!@expr1073743728 $assertEquals $(@expr1073743729 "cppcheck-2.8/test/testmemleak.cpp" $, 2515 $, "" $, errout@var100 .@expr1796 str (@expr1797 ) $) $) { $return ; }
2516: }
2517:
2518: void smartPointerFunctionParam ( ) {
2519: $check_ $(@expr1073743732 "cppcheck-2.8/test/testmemleak.cpp" $, 2519 $, "void x() {\n    f(shared_ptr<int>(new int(42)), g());\n}" $)
2520:
2521: ;
2522: $if $(@expr1073743733 $!@expr1073743734 $assertEquals $(@expr1073743735 "cppcheck-2.8/test/testmemleak.cpp" $, 2522 $, "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_shared<int>() instead.\n" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2523:
2524: $check_ $(@expr1073743738 "cppcheck-2.8/test/testmemleak.cpp" $, 2524 $, "void x() {\n    h(12, f(shared_ptr<int>(new int(42)), g()));\n}" $)
2525:
2526: ;
2527: $if $(@expr1073743739 $!@expr1073743740 $assertEquals $(@expr1073743741 "cppcheck-2.8/test/testmemleak.cpp" $, 2527 $, "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_shared<int>() instead.\n" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2528:
2529: $check_ $(@expr1073743744 "cppcheck-2.8/test/testmemleak.cpp" $, 2529 $, "void x() {\n    f(unique_ptr<int>(new int(42)), g());\n}" $)
2530:
2531: ;
2532: $if $(@expr1073743745 $!@expr1073743746 $assertEquals $(@expr1073743747 "cppcheck-2.8/test/testmemleak.cpp" $, 2532 $, "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_unique<int>() instead.\n" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2533:
2534: $check_ $(@expr1073743750 "cppcheck-2.8/test/testmemleak.cpp" $, 2534 $, "void x() {\n    f(g(), shared_ptr<int>(new int(42)));\n}" $)
2535:
2536: ;
2537: $if $(@expr1073743751 $!@expr1073743752 $assertEquals $(@expr1073743753 "cppcheck-2.8/test/testmemleak.cpp" $, 2537 $, "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_shared<int>() instead.\n" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2538:
2539: $check_ $(@expr1073743756 "cppcheck-2.8/test/testmemleak.cpp" $, 2539 $, "void x() {\n    f(g(), unique_ptr<int>(new int(42)));\n}" $)
2540:
2541: ;
2542: $if $(@expr1073743757 $!@expr1073743758 $assertEquals $(@expr1073743759 "cppcheck-2.8/test/testmemleak.cpp" $, 2542 $, "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_unique<int>() instead.\n" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2543:
2544: $check_ $(@expr1073743762 "cppcheck-2.8/test/testmemleak.cpp" $, 2544 $, "void x() {\n    f(shared_ptr<char>(new char), make_unique<int>(32));\n}" $)
2545:
2546: ;
2547: $if $(@expr1073743763 $!@expr1073743764 $assertEquals $(@expr1073743765 "cppcheck-2.8/test/testmemleak.cpp" $, 2547 $, "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If make_unique<int>() throws, memory could be leaked. Use make_shared<char>() instead.\n" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2548:
2549: $check_ $(@expr1073743768 "cppcheck-2.8/test/testmemleak.cpp" $, 2549 $, "void x() {\n    f(g(124), h(\"test\", 234), shared_ptr<char>(new char));\n}" $)
2550:
2551: ;
2552: $if $(@expr1073743769 $!@expr1073743770 $assertEquals $(@expr1073743771 "cppcheck-2.8/test/testmemleak.cpp" $, 2552 $, "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If h() throws, memory could be leaked. Use make_shared<char>() instead.\n" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2553:
2554: $check_ $(@expr1073743774 "cppcheck-2.8/test/testmemleak.cpp" $, 2554 $, "void x() {\n    f(shared_ptr<std::string>(new std::string(\"\")), g<std::string>());\n}" $)
2555:
2556: ;
2557: $if $(@expr1073743775 $!@expr1073743776 $assertEquals $(@expr1073743777 "cppcheck-2.8/test/testmemleak.cpp" $, 2557 $, "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g<std::string>() throws, memory could be leaked. Use make_shared<std::string>() instead.\n" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2558:
2559: $check_ $(@expr1073743780 "cppcheck-2.8/test/testmemleak.cpp" $, 2559 $, "void g(int x) throw() { }\nvoid x() {\n    f(g(124), shared_ptr<char>(new char));\n}" $)
2560:
2561:
2562: ;
2563: $if $(@expr1073743781 $!@expr1073743782 $assertEquals $(@expr1073743783 "cppcheck-2.8/test/testmemleak.cpp" $, 2563 $, "" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2564:
2565: $check_ $(@expr1073743786 "cppcheck-2.8/test/testmemleak.cpp" $, 2565 $, "void __declspec(nothrow) g(int x) { }\nvoid x() {\n    f(g(124), shared_ptr<char>(new char));\n}" $)
2566:
2567:
2568: ;
2569: $if $(@expr1073743787 $!@expr1073743788 $assertEquals $(@expr1073743789 "cppcheck-2.8/test/testmemleak.cpp" $, 2569 $, "" $, errout@var100 .@expr1912 str (@expr1913 ) $) $) { $return ; }
2570: }
2571: void resourceLeak ( ) {
2572: $check_ $(@expr1073743792 "cppcheck-2.8/test/testmemleak.cpp" $, 2572 $, "void foo() {\n  fopen(\"file.txt\", \"r\");\n}" $)
2573:
2574: ;
2575: $if $(@expr1073743793 $!@expr1073743794 $assertEquals $(@expr1073743795 "cppcheck-2.8/test/testmemleak.cpp" $, 2575 $, "[test.cpp:2]: (error) Return value of allocation function 'fopen' is not stored.\n" $, errout@var100 .@expr1972 str (@expr1973 ) $) $) { $return ; }
2576:
2577: $check_ $(@expr1073743798 "cppcheck-2.8/test/testmemleak.cpp" $, 2577 $, "void foo() {\n  FILE f* = fopen(\"file.txt\", \"r\");\n  freopen(\"file.txt\", \"r\", f);\n}" $)
2578:
2579:
2580: ;
2581: $if $(@expr1073743799 $!@expr1073743800 $assertEquals $(@expr1073743801 "cppcheck-2.8/test/testmemleak.cpp" $, 2581 $, "[test.cpp:3]: (error) Return value of allocation function 'freopen' is not stored.\n" $, errout@var100 .@expr1972 str (@expr1973 ) $) $) { $return ; }
2582:
2583: $check_ $(@expr1073743804 "cppcheck-2.8/test/testmemleak.cpp" $, 2583 $, "void foo() {\n  freopen(\"file.txt\", \"r\", stdin);\n}" $)
2584:
2585: ;
2586: $if $(@expr1073743805 $!@expr1073743806 $assertEquals $(@expr1073743807 "cppcheck-2.8/test/testmemleak.cpp" $, 2586 $, "" $, errout@var100 .@expr1972 str (@expr1973 ) $) $) { $return ; }
2587:
2588: $check_ $(@expr1073743810 "cppcheck-2.8/test/testmemleak.cpp" $, 2588 $, "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h ( fopen(\"file.txt\", \"r\"));\n}" $)
2589:
|
2594:
2595: ;
2596: $if $(@expr1073743811 $!@expr1073743812 $assertEquals $(@expr1073743813 "cppcheck-2.8/test/testmemleak.cpp" $, 2596 $, "" $, errout@var100 .@expr1972 str (@expr1973 ) $) $) { $return ; }
2597:
2598: $check_ $(@expr1073743816 "cppcheck-2.8/test/testmemleak.cpp" $, 2598 $, "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder ( fopen(\"file.txt\", \"r\"));\n}" $)
2599:
|
2604:
2605: ;
2606: $if $(@expr1073743817 $!@expr1073743818 $assertEquals $(@expr1073743819 "cppcheck-2.8/test/testmemleak.cpp" $, 2606 $, "" $, errout@var100 .@expr1972 str (@expr1973 ) $) $) { $return ; }
2607:
2608: $check_ $(@expr1073743822 "cppcheck-2.8/test/testmemleak.cpp" $, 2608 $, "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h { fopen(\"file.txt\", \"r\")};\n}" $)
2609:
|
2614:
2615: ;
2616: $if $(@expr1073743823 $!@expr1073743824 $assertEquals $(@expr1073743825 "cppcheck-2.8/test/testmemleak.cpp" $, 2616 $, "" $, errout@var100 .@expr1972 str (@expr1973 ) $) $) { $return ; }
2617:
2618: $check_ $(@expr1073743828 "cppcheck-2.8/test/testmemleak.cpp" $, 2618 $, "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h = fopen(\"file.txt\", \"r\");\n}" $)
2619:
|
2624:
2625: ;
2626: $if $(@expr1073743829 $!@expr1073743830 $assertEquals $(@expr1073743831 "cppcheck-2.8/test/testmemleak.cpp" $, 2626 $, "" $, errout@var100 .@expr1972 str (@expr1973 ) $) $) { $return ; }
2627:
2628: $check_ $(@expr1073743834 "cppcheck-2.8/test/testmemleak.cpp" $, 2628 $, "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder { fopen(\"file.txt\", \"r\")};\n}" $)
2629:
|
2634:
2635: ;
2636: $if $(@expr1073743835 $!@expr1073743836 $assertEquals $(@expr1073743837 "cppcheck-2.8/test/testmemleak.cpp" $, 2636 $, "" $, errout@var100 .@expr1972 str (@expr1973 ) $) $) { $return ; }
2637:
2638: $check_ $(@expr1073743840 "cppcheck-2.8/test/testmemleak.cpp" $, 2638 $, "struct Holder {\n  Holder(int i, FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder { 0, fopen(\"file.txt\", \"r\")};\n}" $)
2639:
|
2644:
2645: ;
2646: $if $(@expr1073743841 $!@expr1073743842 $assertEquals $(@expr1073743843 "cppcheck-2.8/test/testmemleak.cpp" $, 2646 $, "" $, errout@var100 .@expr1972 str (@expr1973 ) $) $) { $return ; }
2647: }
2648:
2649: void getAllocationType ( ) {
2650:
2651: $check_ $(@expr1073743846 "cppcheck-2.8/test/testmemleak.cpp" $, 2651 $, "class Thing { Thing(); };\nThing * makeThing() { Thing *thing = new Thing; return thing; }\n\nvoid f() {\n  makeThing();\n}" $)
2652:
|
2655:
2656: ;
2657: $if $(@expr1073743847 $!@expr1073743848 $assertEquals $(@expr1073743849 "cppcheck-2.8/test/testmemleak.cpp" $, 2657 $, "" $, errout@var100 .@expr2026 str (@expr2027 ) $) $) { $return ; }
2658:
2659:
2660: $check_ $(@expr1073743852 "cppcheck-2.8/test/testmemleak.cpp" $, 2660 $, "struct Thing {\n    Thing();\n};\nstd::vector<Thing*> g_things;\nThing* makeThing() {\n    Thing* n = new Thing();\n    return n;\n}\nThing::Thing() {\n    g_things.push_back(this);\n}\nvoid f() {\n    makeThing();\n    for(Thing* t : g_things) {\n        delete t;\n    }\n}\n" $)
2661:
|
2675:
2676: ;
2677: $if $(@expr1073743853 $!@expr1073743854 $assertEquals $(@expr1073743855 "cppcheck-2.8/test/testmemleak.cpp" $, 2677 $, "" $, errout@var100 .@expr2026 str (@expr2027 ) $) $) { $return ; }
2678: }
2679:
2680: void crash1 ( ) {
2681: $check_ $(@expr1073743858 "cppcheck-2.8/test/testmemleak.cpp" $, 2681 $, "void foo() {\n    extern void *realloc (void *ptr, size_t size);\n}" $)
2682:
2683: ;
2684: $if $(@expr1073743859 $!@expr1073743860 $assertEquals $(@expr1073743861 "cppcheck-2.8/test/testmemleak.cpp" $, 2684 $, "" $, errout@var100 .@expr2038 str (@expr2039 ) $) $) { $return ; }
2685:
2686: $check_ $(@expr1073743864 "cppcheck-2.8/test/testmemleak.cpp" $, 2686 $, "void foo() {\n    extern void *malloc (size_t size);\n}" $)
2687:
2688: ;
2689: $if $(@expr1073743865 $!@expr1073743866 $assertEquals $(@expr1073743867 "cppcheck-2.8/test/testmemleak.cpp" $, 2689 $, "" $, errout@var100 .@expr2038 str (@expr2039 ) $) $) { $return ; }
2690: }
2691: } ;
2692: $namespace ${ TestMemleakNoVar instance_TestMemleakNoVar@var168 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@61}
  v {!<=-1,!>=2,0@61}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 39
  "TestMemleak" always "TestMemleak"
Line 45
  ( always {!<=-1,!>=2}
  "testFunctionReturnType" always "testFunctionReturnType"
  false always 0
  false always 0
Line 46
  ( always {!<=-1,!>=2}
  "open" always "open"
  false always 0
  false always 0
Line 52
  "" always ""
Line 55
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 56
  code possible {"const char *foo()\n{ return 0; }"@109,"Fred *newFred()\n{ return new Fred; }"@110,"char *foo()\n{ return new char[100]; }"@111,"char *foo()\n{\n    char *p = new char[100];\n    return p;\n}"@112}
Line 57
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testmemleak.cpp"@109,"cppcheck-2.8/test/testmemleak.cpp"@110,"cppcheck-2.8/test/testmemleak.cpp"@111,"cppcheck-2.8/test/testmemleak.cpp"@112}
  line inconclusive {68@109,74@110,80@111,89@112}
  "test.cpp" always "test.cpp"
Line 59
  & {lifetime[Address]=(tokenizer),!0}
  this always !0
  & {lifetime[Address]=(settings),!0}
Line 61
  & {lifetime[Address]=(tokenizer.getSymbolDatabase()->scopeList.front().functionList.front()),!0}
Line 66
  32 always 32
  = always "const char *foo()\n{ return 0; }"
  "const char *foo()\n{ return 0; }" always "const char *foo()\n{ return 0; }"
Line 68
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  68 always 68
  code always "const char *foo()\n{ return 0; }"
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  68 always 68
Line 72
  37 always 37
  = always "Fred *newFred()\n{ return new Fred; }"
  "Fred *newFred()\n{ return new Fred; }" always "Fred *newFred()\n{ return new Fred; }"
Line 74
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  74 always 74
  code always "Fred *newFred()\n{ return new Fred; }"
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  74 always 74
Line 78
  38 always 38
  = always "char *foo()\n{ return new char[100]; }"
  "char *foo()\n{ return new char[100]; }" always "char *foo()\n{ return new char[100]; }"
Line 80
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  80 always 80
  code always "char *foo()\n{ return new char[100]; }"
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  80 always 80
Line 84
  59 always 59
  = always "char *foo()\n{\n    char *p = new char[100];\n    return p;\n}"
  "char *foo()\n{\n    char *p = new char[100];\n    return p;\n}" always "char *foo()\n{\n    char *p = new char[100];\n    return p;\n}"
Line 89
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  89 always 89
  code always "char *foo()\n{\n    char *p = new char[100];\n    return p;\n}"
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  89 always 89
Line 94
  89 always 89
  = always "class A {\n  static int open() {\n    return 1;\n  }\n\n  A() {\n    int ret = open();\n  }\n};\n"
  "class A {\n  static int open() {\n    return 1;\n  }\n\n  A() {\n    int ret = open();\n  }\n};\n" always "class A {\n  static int open() {\n    return 1;\n  }\n\n  A() {\n    int ret = open();\n  }\n};\n"
Line 105
  "" always ""
Line 107
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 108
  code always "class A {\n  static int open() {\n    return 1;\n  }\n\n  A() {\n    int ret = open();\n  }\n};\n"
Line 109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  109 always 109
  "test.cpp" always "test.cpp"
Line 112
  "ret =" always "ret ="
Line 113
  & {lifetime[Address]=(tokenizer),!0}
  nullptr always 0
  & {lifetime[Address]=(settings),!0}
Line 114
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  114 always 114
  2 always 2
  1 always 1
Line 126
  "TestMemleakInFunction" always "TestMemleakInFunction"
Line 136
  "" always ""
Line 138
  = {&,lifetime[Address]=(settings1),!0}
  & {&,lifetime[Address]=(settings1),!0}
Line 141
  settings {lifetime[Address]=(settings1),symbolic=(&settings1),&,!0}
  this always !0
Line 142
  code possible {"void foo()\n{\n    char *a = (char *)malloc(10);\n    a = reallocarray(a, 100, 2);\n}"@34,"void f() {\nvoid *a = NULL;\na = realloc(a, 20);\n}"@35,"void f() {\nvoid *a = NULL;\na = malloc(10);\na = realloc(a, 20);\n}"@36,"void f() {\nvoid *a = std::nullptr;\na = malloc(10);\na = realloc(a, 20);\n}"@37,"void f(char *b) {\nvoid *a = NULL;\na = b;\na = realloc(a, 20);\n}"@38,"void foo(struct ABC *s)\n{\n    uint32_t *cigar = s->cigar;\n    if (!(cigar = realloc(cigar, 100 * sizeof(*cigar))))\n        return;\n    s->cigar = cigar;\n}"@39,"void foo(char **bsp)\n{\n    char *bs = *bsp;\n    bs = realloc(bs, 100);\n    if (bs == NULL) return;\n    *bsp = bs;\n}"@40,"char *foo(char *bs0)\n{\n    char *bs = bs0;\n    bs = realloc(bs, 100);\n    if (bs == NULL) return bs0;\n    return bs;\n}"@41,"void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = realloc((a) + 1, sizeof(a) * 2);\n}"@42,"void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = (realloc((void*)((a)), sizeof(a) * 2));\n}"@43}
Line 143
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testmemleak.cpp"@34,"cppcheck-2.8/test/testmemleak.cpp"@35,"cppcheck-2.8/test/testmemleak.cpp"@36,"cppcheck-2.8/test/testmemleak.cpp"@37,"cppcheck-2.8/test/testmemleak.cpp"@38,"cppcheck-2.8/test/testmemleak.cpp"@39,"cppcheck-2.8/test/testmemleak.cpp"@40,"cppcheck-2.8/test/testmemleak.cpp"@41,"cppcheck-2.8/test/testmemleak.cpp"@42,"cppcheck-2.8/test/testmemleak.cpp"@43}
  line inconclusive {450@34,421@35,427@36,434@37,441@38,410@39,399@40,388@41,379@42,370@43}
  "test.cpp" always "test.cpp"
Line 146
  & {lifetime[Address]=(tokenizer),!0}
  settings inconclusive {lifetime[Address]=(settings1),&}
  this always !0
Line 152
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 153
  ( {lifetime[Object]=(exename),!0}
  "posix.cfg" always "posix.cfg"
  != always {!<=-1,!>=2}
  "posix.cfg" always "posix.cfg"
  false always 0
Line 154
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "realloc1" always "realloc1"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "realloc2" always "realloc2"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "realloc3" always "realloc3"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "realloc4" always "realloc4"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "realloc5" always "realloc5"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "realloc7" always "realloc7"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "realloc8" always "realloc8"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "realloc9" always "realloc9"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "realloc10" always "realloc10"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "realloc11" always "realloc11"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "realloc12" always "realloc12"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "realloc13" always "realloc13"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "realloc14" always "realloc14"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "realloc15" always "realloc15"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "realloc16" always "realloc16"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "realloc17" always "realloc17"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "realloc18" always "realloc18"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "realloc19" always "realloc19"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "realloc20" always "realloc20"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "realloc21" always "realloc21"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "realloc22" always "realloc22"
  false always 0
  false always 0
Line 177
  ( always {!<=-1,!>=2}
  "realloc23" always "realloc23"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "realloc24" always "realloc24"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "reallocarray1" always "reallocarray1"
  false always 0
  false always 0
Line 183
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  183 always 183
  "void foo()\n{\n    char *a = (char *)malloc(10);\n    a = realloc(a, 100);\n}" always "void foo()\n{\n    char *a = (char *)malloc(10);\n    a = realloc(a, 100);\n}"
Line 188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  188 always 188
  "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n"
Line 192
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  192 always 192
  "void foo()\n{\n    char *a = (char *)malloc(10);\n    a = (char *)realloc(a, 100);\n    free(a);\n}" always "void foo()\n{\n    char *a = (char *)malloc(10);\n    a = (char *)realloc(a, 100);\n    free(a);\n}"
Line 199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  199 always 199
  "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n"
Line 203
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  203 always 203
  "void foo()\n{\n    char *a = 0;\n    if ((a = realloc(a, 100)) == NULL)\n        return;\n    free(a);\n}" always "void foo()\n{\n    char *a = 0;\n    if ((a = realloc(a, 100)) == NULL)\n        return;\n    free(a);\n}"
Line 211
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  211 always 211
  "" always ""
Line 215
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  215 always 215
  "void foo()\n{\n    static char *a = 0;\n    if ((a = realloc(a, 100)) == NULL)\n        return;\n    free(a);\n}" always "void foo()\n{\n    static char *a = 0;\n    if ((a = realloc(a, 100)) == NULL)\n        return;\n    free(a);\n}"
Line 223
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  223 always 223
  "[test.cpp:5]: (error) Memory leak: a\n" always "[test.cpp:5]: (error) Memory leak: a\n"
  "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n"
Line 229
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  229 always 229
  "void foo()\n{\n    char *buf;\n    char *new_buf;\n    buf = calloc( 10 );\n    new_buf = realloc ( buf, 20);\n    if ( !new_buf )\n        free(buf);\n    else\n        free(new_buf);\n}" always "void foo()\n{\n    char *buf;\n    char *new_buf;\n    buf = calloc( 10 );\n    new_buf = realloc ( buf, 20);\n    if ( !new_buf )\n        free(buf);\n    else\n        free(new_buf);\n}"
Line 240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  240 always 240
  "" always ""
Line 244
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  244 always 244
  "bool foo(size_t nLen, char* pData)\n{\n    pData = (char*) realloc(pData, sizeof(char) + (nLen + 1)*sizeof(char));\n    if ( pData == NULL )\n    {\n        return false;\n    }\n    free(pData);\n    return true;\n}" always "bool foo(size_t nLen, char* pData)\n{\n    pData = (char*) realloc(pData, sizeof(char) + (nLen + 1)*sizeof(char));\n    if ( pData == NULL )\n    {\n        return false;\n    }\n    free(pData);\n    return true;\n}"
Line 254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  254 always 254
  "" always ""
Line 258
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  258 always 258
  "void foo()\n{\n    char *origBuf = m_buf;\n    m_buf = (char *) realloc (m_buf, m_capacity + growBy);\n    if (!m_buf) {\n        m_buf = origBuf;\n    }\n}" always "void foo()\n{\n    char *origBuf = m_buf;\n    m_buf = (char *) realloc (m_buf, m_capacity + growBy);\n    if (!m_buf) {\n        m_buf = origBuf;\n    }\n}"
Line 266
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  266 always 266
  "" always ""
Line 270
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  270 always 270
  "void foo()\n{\n    x = realloc(x,100);\n}" always "void foo()\n{\n    x = realloc(x,100);\n}"
Line 274
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  274 always 274
  "" always ""
Line 278
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  278 always 278
  "void foo() {\n    char *pa, *pb;\n    pa = pb = malloc(10);\n    pa = realloc(pa, 20);    exit();\n}" always "void foo() {\n    char *pa, *pb;\n    pa = pb = malloc(10);\n    pa = realloc(pa, 20);    exit();\n}"
Line 284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  284 always 284
  "" always ""
Line 288
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  288 always 288
  "void foo() {\n    char *p;\n    p = realloc(p, size);\n    if (!p)\n        error();\n    usep(p);\n}" always "void foo() {\n    char *p;\n    p = realloc(p, size);\n    if (!p)\n        error();\n    usep(p);\n}"
Line 295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  295 always 295
  "" always ""
Line 299
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  299 always 299
  "void foo(int x)\n{\n    char *a = 0;\n    if ((a = realloc(a, x + 100)) == NULL)\n        return;\n    free(a);\n}" always "void foo(int x)\n{\n    char *a = 0;\n    if ((a = realloc(a, x + 100)) == NULL)\n        return;\n    free(a);\n}"
Line 306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  306 always 306
  "" always ""
Line 310
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  310 always 310
  "void foo()\n{\n    char **str;\n    *str = realloc(*str,100);\n    free (*str);\n}" always "void foo()\n{\n    char **str;\n    *str = realloc(*str,100);\n    free (*str);\n}"
Line 316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  316 always 316
  "[test.cpp:4]: (error) Common realloc mistake: \'str\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common realloc mistake: \'str\' nulled but not freed upon failure\n"
Line 320
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  320 always 320
  "void foo() {\n    char *p;\n    p = realloc(p, size + 1);\n    if (!p)\n        error();\n    usep(p);\n}" always "void foo() {\n    char *p;\n    p = realloc(p, size + 1);\n    if (!p)\n        error();\n    usep(p);\n}"
Line 327
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  327 always 327
  "" always ""
Line 331
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  331 always 331
  "bool foo() {\n    char ** m_options;\n    m_options = (char**)realloc( m_options, 2 * sizeof(char*));\n    if( m_options == NULL )\n        return false;\n    return true;\n}" always "bool foo() {\n    char ** m_options;\n    m_options = (char**)realloc( m_options, 2 * sizeof(char*));\n    if( m_options == NULL )\n        return false;\n    return true;\n}"
Line 338
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  338 always 338
  "[test.cpp:3]: (error) Common realloc mistake: \'m_options\' nulled but not freed upon failure\n" always "[test.cpp:3]: (error) Common realloc mistake: \'m_options\' nulled but not freed upon failure\n"
Line 342
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  342 always 342
  "void f(char *zLine) {\n  zLine = realloc(zLine, 42);\n  if (zLine) {\n    free(zLine);\n  }\n}" always "void f(char *zLine) {\n  zLine = realloc(zLine, 42);\n  if (zLine) {\n    free(zLine);\n  }\n}"
Line 348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  348 always 348
  "" always ""
Line 352
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  352 always 352
  "void foo()\n{\n    void ***a = malloc(sizeof(a));\n    ***a = realloc(***(a), sizeof(a) * 2);\n}" always "void foo()\n{\n    void ***a = malloc(sizeof(a));\n    ***a = realloc(***(a), sizeof(a) * 2);\n}"
Line 357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  357 always 357
  "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n"
Line 361
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  361 always 361
  "void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = realloc((void*)a, sizeof(a) * 2);\n}" always "void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = realloc((void*)a, sizeof(a) * 2);\n}"
Line 366
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  366 always 366
  "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n"
Line 370
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  370 always 370
  "void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = (realloc((void*)((a)), sizeof(a) * 2));\n}" always "void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = (realloc((void*)((a)), sizeof(a) * 2));\n}"
Line 375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  375 always 375
  "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n"
Line 379
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  379 always 379
  "void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = realloc((a) + 1, sizeof(a) * 2);\n}" always "void foo()\n{\n    void *a = malloc(sizeof(a));\n    a = realloc((a) + 1, sizeof(a) * 2);\n}"
Line 384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  384 always 384
  "" always ""
Line 388
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  388 always 388
  "char *foo(char *bs0)\n{\n    char *bs = bs0;\n    bs = realloc(bs, 100);\n    if (bs == NULL) return bs0;\n    return bs;\n}" always "char *foo(char *bs0)\n{\n    char *bs = bs0;\n    bs = realloc(bs, 100);\n    if (bs == NULL) return bs0;\n    return bs;\n}"
Line 395
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  395 always 395
  "" always ""
Line 399
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  399 always 399
  "void foo(char **bsp)\n{\n    char *bs = *bsp;\n    bs = realloc(bs, 100);\n    if (bs == NULL) return;\n    *bsp = bs;\n}" always "void foo(char **bsp)\n{\n    char *bs = *bsp;\n    bs = realloc(bs, 100);\n    if (bs == NULL) return;\n    *bsp = bs;\n}"
Line 406
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  406 always 406
  "" always ""
Line 410
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  410 always 410
  "void foo(struct ABC *s)\n{\n    uint32_t *cigar = s->cigar;\n    if (!(cigar = realloc(cigar, 100 * sizeof(*cigar))))\n        return;\n    s->cigar = cigar;\n}" always "void foo(struct ABC *s)\n{\n    uint32_t *cigar = s->cigar;\n    if (!(cigar = realloc(cigar, 100 * sizeof(*cigar))))\n        return;\n    s->cigar = cigar;\n}"
Line 417
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  417 always 417
  "" always ""
Line 421
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  421 always 421
  "void f() {\nvoid *a = NULL;\na = realloc(a, 20);\n}" always "void f() {\nvoid *a = NULL;\na = realloc(a, 20);\n}"
Line 425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  425 always 425
  "" always ""
Line 427
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  427 always 427
  "void f() {\nvoid *a = NULL;\na = malloc(10);\na = realloc(a, 20);\n}" always "void f() {\nvoid *a = NULL;\na = malloc(10);\na = realloc(a, 20);\n}"
Line 432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  432 always 432
  "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n"
Line 434
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  434 always 434
  "void f() {\nvoid *a = std::nullptr;\na = malloc(10);\na = realloc(a, 20);\n}" always "void f() {\nvoid *a = std::nullptr;\na = malloc(10);\na = realloc(a, 20);\n}"
Line 439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  439 always 439
  "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common realloc mistake: \'a\' nulled but not freed upon failure\n"
Line 441
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  441 always 441
  "void f(char *b) {\nvoid *a = NULL;\na = b;\na = realloc(a, 20);\n}" always "void f(char *b) {\nvoid *a = NULL;\na = b;\na = realloc(a, 20);\n}"
Line 446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  446 always 446
  "" always ""
Line 450
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  450 always 450
  "void foo()\n{\n    char *a = (char *)malloc(10);\n    a = reallocarray(a, 100, 2);\n}" always "void foo()\n{\n    char *a = (char *)malloc(10);\n    a = reallocarray(a, 100, 2);\n}"
Line 455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  455 always 455
  "[test.cpp:4]: (error) Common reallocarray mistake: \'a\' nulled but not freed upon failure\n" always "[test.cpp:4]: (error) Common reallocarray mistake: \'a\' nulled but not freed upon failure\n"
Line 470
  "TestMemleakInClass" always "TestMemleakInClass"
Line 481
  "" always ""
Line 484
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 485
  code possible {"class Fred\n{\nprivate:\n    char *s;\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    const Fred & operator = (const Fred &f)\n    { s = malloc(100); }\n};"@159,"class Fred\n{\nprivate:\n    char *s;\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    void xy()\n    { s = malloc(100); }\n};"@160,"class Fred\n{\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    void xy()\n    { s = malloc(100); }\nprivate:\n    char *s;\n};"@161,"namespace NS\n{\nclass Foo\n{\npublic:\n  void fct();\n\nprivate:\n  char* data_;\n};\n}\n\nusing namespace NS;\n\nvoid Foo::fct()\n{\n  data_ = new char[42];\n  delete data_;\n  data_ = 0;\n}"@162,"namespace NS\n{\nclass Foo\n{\npublic:\n  void fct(int i);\n\nprivate:\n  char* data_;\n};\n}\n\nusing namespace NS;\n\nvoid Foo::fct(int i)\n{\n  data_ = new char[42];\n  delete data_;\n  data_ = 0;\n}"@163,"class A\n{\npublic:\n    A(int i);\n    ~A();\nprivate:\n    char* pkt_buffer;\n};\n\nA::A(int i)\n{\n    pkt_buffer = new char[8192];\n    if (i != 1) {\n        delete pkt_buffer;\n        pkt_buffer = 0;\n    }\n}\n\nA::~A() {\n    delete [] pkt_buffer;\n}"@164,"class Tokenizer\n{\npublic:\n    Tokenizer();\n    ~Tokenizer();\n\nprivate:\n    int *_tokens;\n    static void deleteTokens(int *tok);\n};\n\nTokenizer::Tokenizer()\n{\n     _tokens = new int;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n    _tokens = 0;\n}\n\nvoid Tokenizer::deleteTokens(int *tok)\n{\n    delete tok;\n}"@165,"void deleteTokens(int *tok)\n{\n    delete tok;\n}\nclass Tokenizer\n{\npublic:\n    Tokenizer();\n    ~Tokenizer();\n\nprivate:\n    int *_tokens;\n};\n\nTokenizer::Tokenizer()\n{\n     _tokens = new int;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n    _tokens = 0;\n}"@166,"class A\n{\nprivate:\n    static int * p;\npublic:    A()\n    {\n        if (!p)\n            p = new int[100];\n    }\n};"@167,"struct S {\n    S() {\n        for (int i = 0; i < 5; i++)\n            a[i] = new char[3];\n    }\n    char* a[5];\n};\n"@168}
Line 486
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testmemleak.cpp"@159,"cppcheck-2.8/test/testmemleak.cpp"@160,"cppcheck-2.8/test/testmemleak.cpp"@161,"cppcheck-2.8/test/testmemleak.cpp"@162,"cppcheck-2.8/test/testmemleak.cpp"@163,"cppcheck-2.8/test/testmemleak.cpp"@164,"cppcheck-2.8/test/testmemleak.cpp"@165,"cppcheck-2.8/test/testmemleak.cpp"@166,"cppcheck-2.8/test/testmemleak.cpp"@167,"cppcheck-2.8/test/testmemleak.cpp"@168}
  line inconclusive {1650@159,1624@160,1636@161,1576@162,1599@163,1551@164,1494@165,1523@166,1477@167,1466@168}
  "test.cpp" always "test.cpp"
Line 489
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 497
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 499
  ( always {!<=-1,!>=2}
  "class1" always "class1"
  false always 0
  false always 0
Line 500
  ( always {!<=-1,!>=2}
  "class2" always "class2"
  false always 0
  false always 0
Line 501
  ( always {!<=-1,!>=2}
  "class3" always "class3"
  false always 0
  false always 0
Line 502
  ( always {!<=-1,!>=2}
  "class4" always "class4"
  false always 0
  false always 0
Line 503
  ( always {!<=-1,!>=2}
  "class6" always "class6"
  false always 0
  false always 0
Line 504
  ( always {!<=-1,!>=2}
  "class7" always "class7"
  false always 0
  false always 0
Line 505
  ( always {!<=-1,!>=2}
  "class8" always "class8"
  false always 0
  false always 0
Line 506
  ( always {!<=-1,!>=2}
  "class9" always "class9"
  false always 0
  false always 0
Line 507
  ( always {!<=-1,!>=2}
  "class10" always "class10"
  false always 0
  false always 0
Line 508
  ( always {!<=-1,!>=2}
  "class11" always "class11"
  false always 0
  false always 0
Line 509
  ( always {!<=-1,!>=2}
  "class12" always "class12"
  false always 0
  false always 0
Line 510
  ( always {!<=-1,!>=2}
  "class13" always "class13"
  false always 0
  false always 0
Line 511
  ( always {!<=-1,!>=2}
  "class14" always "class14"
  false always 0
  false always 0
Line 512
  ( always {!<=-1,!>=2}
  "class15" always "class15"
  false always 0
  false always 0
Line 513
  ( always {!<=-1,!>=2}
  "class16" always "class16"
  false always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
  "class17" always "class17"
  false always 0
  false always 0
Line 515
  ( always {!<=-1,!>=2}
  "class18" always "class18"
  false always 0
  false always 0
Line 516
  ( always {!<=-1,!>=2}
  "class19" always "class19"
  false always 0
  false always 0
Line 517
  ( always {!<=-1,!>=2}
  "class20" always "class20"
  false always 0
  false always 0
Line 518
  ( always {!<=-1,!>=2}
  "class21" always "class21"
  false always 0
  false always 0
Line 519
  ( always {!<=-1,!>=2}
  "class22" always "class22"
  false always 0
  false always 0
Line 520
  ( always {!<=-1,!>=2}
  "class23" always "class23"
  false always 0
  false always 0
Line 521
  ( always {!<=-1,!>=2}
  "class24" always "class24"
  false always 0
  false always 0
Line 522
  ( always {!<=-1,!>=2}
  "class25" always "class25"
  false always 0
  false always 0
Line 523
  ( always {!<=-1,!>=2}
  "class26" always "class26"
  false always 0
  false always 0
Line 524
  ( always {!<=-1,!>=2}
  "class27" always "class27"
  false always 0
  false always 0
Line 526
  ( always {!<=-1,!>=2}
  "staticvar" always "staticvar"
  false always 0
  false always 0
Line 528
  ( always {!<=-1,!>=2}
  "free_member_in_sub_func" always "free_member_in_sub_func"
  false always 0
  false always 0
Line 530
  ( always {!<=-1,!>=2}
  "mismatch1" always "mismatch1"
  false always 0
  false always 0
Line 531
  ( always {!<=-1,!>=2}
  "mismatch2" always "mismatch2"
  false always 0
  false always 0
Line 534
  ( always {!<=-1,!>=2}
  "func1" always "func1"
  false always 0
  false always 0
Line 535
  ( always {!<=-1,!>=2}
  "func2" always "func2"
  false always 0
  false always 0
Line 540
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  540 always 540
  "class Fred\n{\nprivate:\n    char *str1;\n    char *str2;\npublic:\n    Fred();\n    ~Fred();\n};\n\nFred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nFred::~Fred()\n{\n    delete [] str2;\n}" always "class Fred\n{\nprivate:\n    char *str1;\n    char *str2;\npublic:\n    Fred();\n    ~Fred();\n};\n\nFred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nFred::~Fred()\n{\n    delete [] str2;\n}"
Line 560
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  560 always 560
  "[test.cpp:4]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" always "[test.cpp:4]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n"
Line 562
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  562 always 562
  "class Fred\n{\nprivate:\n    char *str1;\n    char *str2;\npublic:\n    Fred()\n    {\n        str1 = new char[10];\n        str2 = new char[10];\n    }\n    ~Fred()\n    {\n        delete [] str2;\n    }\n};" always "class Fred\n{\nprivate:\n    char *str1;\n    char *str2;\npublic:\n    Fred()\n    {\n        str1 = new char[10];\n        str2 = new char[10];\n    }\n    ~Fred()\n    {\n        delete [] str2;\n    }\n};"
Line 578
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  578 always 578
  "[test.cpp:4]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" always "[test.cpp:4]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n"
Line 582
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  582 always 582
  "class Fred\n{\nprivate:\n    char *str1;\npublic:\n    Fred();\n    ~Fred();\n};\n\nFred::Fred()\n{\n    str1 = new char[10];\n}\n\nFred::~Fred()\n{\n    free(str1);\n}" always "class Fred\n{\nprivate:\n    char *str1;\npublic:\n    Fred();\n    ~Fred();\n};\n\nFred::Fred()\n{\n    str1 = new char[10];\n}\n\nFred::~Fred()\n{\n    free(str1);\n}"
Line 600
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  600 always 600
  "[test.cpp:17]: (error) Mismatching allocation and deallocation: Fred::str1\n" always "[test.cpp:17]: (error) Mismatching allocation and deallocation: Fred::str1\n"
Line 602
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  602 always 602
  "class Fred\n{\nprivate:\n    char *str1;\npublic:\n    Fred()\n    {\n        str1 = new char[10];\n    }\n    ~Fred()\n    {\n        free(str1);\n    }\n};" always "class Fred\n{\nprivate:\n    char *str1;\npublic:\n    Fred()\n    {\n        str1 = new char[10];\n    }\n    ~Fred()\n    {\n        free(str1);\n    }\n};"
Line 616
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  616 always 616
  "[test.cpp:12]: (error) Mismatching allocation and deallocation: Fred::str1\n" always "[test.cpp:12]: (error) Mismatching allocation and deallocation: Fred::str1\n"
Line 620
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  620 always 620
  "class Token;\n\nclass Tokenizer\n{\nprivate:\n    Token *_tokens;\n\npublic:\n    Tokenizer();\n    ~Tokenizer();\n    void deleteTokens(Token *tok);\n};\n\nTokenizer::Tokenizer()\n{\n    _tokens = new Token;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n}\n\nvoid Tokenizer::deleteTokens(Token *tok)\n{\n    while (tok)\n    {\n        Token *next = tok->next();\n        delete tok;\n        tok = next;\n    }\n}" always "class Token;\n\nclass Tokenizer\n{\nprivate:\n    Token *_tokens;\n\npublic:\n    Tokenizer();\n    ~Tokenizer();\n    void deleteTokens(Token *tok);\n};\n\nTokenizer::Tokenizer()\n{\n    _tokens = new Token;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n}\n\nvoid Tokenizer::deleteTokens(Token *tok)\n{\n    while (tok)\n    {\n        Token *next = tok->next();\n        delete tok;\n        tok = next;\n    }\n}"
Line 653
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  653 always 653
  "" always ""
Line 655
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  655 always 655
  "class Token;\n\nclass Tokenizer\n{\nprivate:\n    Token *_tokens;\n\npublic:\n    Tokenizer()\n    {\n        _tokens = new Token;\n    }\n    ~Tokenizer()\n    {\n        deleteTokens(_tokens);\n    }\n    void deleteTokens(Token *tok)\n    {\n        while (tok)\n        {\n            Token *next = tok->next();\n            delete tok;\n            tok = next;\n        }\n    }\n};" always "class Token;\n\nclass Tokenizer\n{\nprivate:\n    Token *_tokens;\n\npublic:\n    Tokenizer()\n    {\n        _tokens = new Token;\n    }\n    ~Tokenizer()\n    {\n        deleteTokens(_tokens);\n    }\n    void deleteTokens(Token *tok)\n    {\n        while (tok)\n        {\n            Token *next = tok->next();\n            delete tok;\n            tok = next;\n        }\n    }\n};"
Line 682
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  682 always 682
  "" always ""
Line 686
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  686 always 686
  "struct ABC;\nclass Fred\n{\nprivate:\n    void addAbc(ABC *abc);\npublic:\n    void click();\n};\n\nvoid Fred::addAbc(ABC* abc)\n{\n    AbcPosts->Add(abc);\n}\n\nvoid Fred::click()\n{\n    ABC *p = new ABC;\n    addAbc( p );\n}" always "struct ABC;\nclass Fred\n{\nprivate:\n    void addAbc(ABC *abc);\npublic:\n    void click();\n};\n\nvoid Fred::addAbc(ABC* abc)\n{\n    AbcPosts->Add(abc);\n}\n\nvoid Fred::click()\n{\n    ABC *p = new ABC;\n    addAbc( p );\n}"
Line 705
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  705 always 705
  "" always ""
Line 707
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  707 always 707
  "struct ABC;\nclass Fred\n{\nprivate:\n    void addAbc(ABC* abc)\n    {\n        AbcPosts->Add(abc);\n    }\npublic:\n    void click()\n    {\n        ABC *p = new ABC;\n        addAbc( p );\n    }\n};" always "struct ABC;\nclass Fred\n{\nprivate:\n    void addAbc(ABC* abc)\n    {\n        AbcPosts->Add(abc);\n    }\npublic:\n    void click()\n    {\n        ABC *p = new ABC;\n        addAbc( p );\n    }\n};"
Line 722
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  722 always 722
  "" always ""
Line 726
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  726 always 726
  "class Fred\n{\npublic:\n    void foo();\n};\n\nvoid Fred::foo()\n{\n    char *str = new char[100];\n    delete [] str;\n    hello();\n}" always "class Fred\n{\npublic:\n    void foo();\n};\n\nvoid Fred::foo()\n{\n    char *str = new char[100];\n    delete [] str;\n    hello();\n}"
Line 738
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  738 always 738
  "" always ""
Line 740
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  740 always 740
  "class Fred\n{\npublic:\n    void foo()\n    {\n        char *str = new char[100];\n        delete [] str;\n        hello();\n    }\n};" always "class Fred\n{\npublic:\n    void foo()\n    {\n        char *str = new char[100];\n        delete [] str;\n        hello();\n    }\n};"
Line 750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  750 always 750
  "" always ""
Line 754
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  754 always 754
  "class Fred\n{\npublic:\n    int *i;\n    Fred();\n    ~Fred();\n};\n\nFred::Fred()\n{\n    this->i = new int;\n}\nFred::~Fred()\n{\n    delete this->i;\n}" always "class Fred\n{\npublic:\n    int *i;\n    Fred();\n    ~Fred();\n};\n\nFred::Fred()\n{\n    this->i = new int;\n}\nFred::~Fred()\n{\n    delete this->i;\n}"
Line 770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  770 always 770
  "" always ""
Line 772
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  772 always 772
  "class Fred\n{\npublic:\n    int *i;\n    Fred()\n    {\n        this->i = new int;\n    }\n    ~Fred()\n    {\n        delete this->i;\n    }\n};" always "class Fred\n{\npublic:\n    int *i;\n    Fred()\n    {\n        this->i = new int;\n    }\n    ~Fred()\n    {\n        delete this->i;\n    }\n};"
Line 785
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  785 always 785
  "" always ""
Line 789
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  789 always 789
  "class A\n{\npublic:\n    void a();\n    void doNothing() { }\n};\n\nvoid A::a()\n{\n    int* c = new int(1);\n    delete c;\n    doNothing(c);\n}" always "class A\n{\npublic:\n    void a();\n    void doNothing() { }\n};\n\nvoid A::a()\n{\n    int* c = new int(1);\n    delete c;\n    doNothing(c);\n}"
Line 802
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  802 always 802
  "" always ""
Line 804
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  804 always 804
  "class A\n{\npublic:\n    void a()\n    {\n        int* c = new int(1);\n        delete c;\n        doNothing(c);\n    }\n    void doNothing() { }\n};" always "class A\n{\npublic:\n    void a()\n    {\n        int* c = new int(1);\n        delete c;\n        doNothing(c);\n    }\n    void doNothing() { }\n};"
Line 815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  815 always 815
  "" always ""
Line 819
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  819 always 819
  "class A\n{\npublic:\n    int * p;\n    A();\n    ~A();\n};\n\nA::A()\n{ p = new int; }\n\nA::~A()\n{ delete (p); }" always "class A\n{\npublic:\n    int * p;\n    A();\n    ~A();\n};\n\nA::A()\n{ p = new int; }\n\nA::~A()\n{ delete (p); }"
Line 832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  832 always 832
  "" always ""
Line 834
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  834 always 834
  "class A\n{\npublic:\n    int * p;\n    A()\n    { p = new int; }\n    ~A()\n    { delete (p); }\n};" always "class A\n{\npublic:\n    int * p;\n    A()\n    { p = new int; }\n    ~A()\n    { delete (p); }\n};"
Line 843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  843 always 843
  "" always ""
Line 847
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  847 always 847
  "class A\n{\npublic:\n    int * p;\n    A();\n};\nA::A()\n{ p = new int; }" always "class A\n{\npublic:\n    int * p;\n    A();\n};\nA::A()\n{ p = new int; }"
Line 855
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  855 always 855
  "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 857
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  857 always 857
  "class A\n{\npublic:\n    int * p;\n    A() { p = new int; }\n};" always "class A\n{\npublic:\n    int * p;\n    A() { p = new int; }\n};"
Line 863
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  863 always 863
  "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 867
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  867 always 867
  "class A\n{\npublic:\n    int * p;\n    A() : p(new int[10])\n    { }};" always "class A\n{\npublic:\n    int * p;\n    A() : p(new int[10])\n    { }};"
Line 874
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  874 always 874
  "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 876
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  876 always 876
  "class A\n{\npublic:\n    int * p;\n    A();\n};\nA::A() : p(new int[10])\n{ }" always "class A\n{\npublic:\n    int * p;\n    A();\n};\nA::A() : p(new int[10])\n{ }"
Line 884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  884 always 884
  "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 888
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  888 always 888
  "class A\n{\nprivate:\n    int *p;\npublic:\n    A();\n    ~A();\n    void cleanup();};\n\nA::A()\n{ p = new int[10]; }\n\nA::~A()\n{ }\n\nvoid A::cleanup()\n{ delete [] p; }" always "class A\n{\nprivate:\n    int *p;\npublic:\n    A();\n    ~A();\n    void cleanup();};\n\nA::A()\n{ p = new int[10]; }\n\nA::~A()\n{ }\n\nvoid A::cleanup()\n{ delete [] p; }"
Line 906
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  906 always 906
  "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 908
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  908 always 908
  "class A\n{\nprivate:\n    int *p;\npublic:\n    A()\n    { p = new int[10]; }\n    ~A()\n    { }\n    void cleanup()\n    { delete [] p; }\n};" always "class A\n{\nprivate:\n    int *p;\npublic:\n    A()\n    { p = new int[10]; }\n    ~A()\n    { }\n    void cleanup()\n    { delete [] p; }\n};"
Line 920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  920 always 920
  "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:4]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 924
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  924 always 924
  "class A\n{\nprivate:\n    int *p;\npublic:\n    A();\n    ~A();\n    void foo();};\n\nA::A()\n{ }\n\nA::~A()\n{ }\n\nvoid A::foo()\n{ p = new int[10]; delete [] p; }" always "class A\n{\nprivate:\n    int *p;\npublic:\n    A();\n    ~A();\n    void foo();};\n\nA::A()\n{ }\n\nA::~A()\n{ }\n\nvoid A::foo()\n{ p = new int[10]; delete [] p; }"
Line 942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  942 always 942
  "[test.cpp:17]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n" always "[test.cpp:17]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n"
Line 944
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  944 always 944
  "class A\n{\nprivate:\n    int *p;\npublic:\n    A()\n    { }\n    ~A()\n    { }\n    void foo()\n    { p = new int[10]; delete [] p; }\n};" always "class A\n{\nprivate:\n    int *p;\npublic:\n    A()\n    { }\n    ~A()\n    { }\n    void foo()\n    { p = new int[10]; delete [] p; }\n};"
Line 956
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  956 always 956
  "[test.cpp:11]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n" always "[test.cpp:11]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n"
Line 960
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  960 always 960
  "class A\n{\n    int *p;\npublic:\n    void init();\n};\n\nvoid A::init()\n{ p = new int[10]; }" always "class A\n{\n    int *p;\npublic:\n    void init();\n};\n\nvoid A::init()\n{ p = new int[10]; }"
Line 969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  969 always 969
  "[test.cpp:9]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:9]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 972
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  972 always 972
  "class A\n{\n    int *p;\npublic:\n    void init()\n    { p = new int[10]; }\n};" always "class A\n{\n    int *p;\npublic:\n    void init()\n    { p = new int[10]; }\n};"
Line 979
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  979 always 979
  "[test.cpp:6]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:6]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 983
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  983 always 983
  "class A\n{\n    int *p;\npublic:\n    void init();\n};\n\nvoid A::init()\n{ p = new int; }" always "class A\n{\n    int *p;\npublic:\n    void init();\n};\n\nvoid A::init()\n{ p = new int; }"
Line 992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  992 always 992
  "[test.cpp:9]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:9]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 995
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  995 always 995
  "class A\n{\n    int *p;\npublic:\n    void init()\n    { p = new int; }\n};" always "class A\n{\n    int *p;\npublic:\n    void init()\n    { p = new int; }\n};"
Line 1002
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1002 always 1002
  "[test.cpp:6]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:6]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 1006
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1006 always 1006
  "class A\n{\n    int *p;\npublic:\n    void init();\n};\n\nvoid A::init()\n{ p = malloc(sizeof(int)*10); }" always "class A\n{\n    int *p;\npublic:\n    void init();\n};\n\nvoid A::init()\n{ p = malloc(sizeof(int)*10); }"
Line 1015
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1015 always 1015
  "[test.cpp:9]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:9]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 1018
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1018 always 1018
  "class A\n{\n    int *p;\npublic:\n    void init()\n    { p = malloc(sizeof(int)*10); }\n};" always "class A\n{\n    int *p;\npublic:\n    void init()\n    { p = malloc(sizeof(int)*10); }\n};"
Line 1025
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1025 always 1025
  "[test.cpp:6]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n" always "[test.cpp:6]: (warning) Possible leak in public function. The pointer 'p' is not deallocated before it is allocated.\n[test.cpp:3]: (style) Class 'A' is unsafe, 'A::p' can leak by wrong usage.\n"
Line 1030
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1030 always 1030
  "class A\n{\n    int *p;\npublic:\n    A();\n    ~A() { delete [] p; }\n};\nA::A()\n{ p = new int[10]; }" always "class A\n{\n    int *p;\npublic:\n    A();\n    ~A() { delete [] p; }\n};\nA::A()\n{ p = new int[10]; }"
Line 1039
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1039 always 1039
  "" always ""
Line 1041
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1041 always 1041
  "class A\n{\n    int *p;\npublic:\n    A()\n    { p = new int[10]; }\n    ~A() { delete [] p; }\n};" always "class A\n{\n    int *p;\npublic:\n    A()\n    { p = new int[10]; }\n    ~A() { delete [] p; }\n};"
Line 1049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1049 always 1049
  "" always ""
Line 1052
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1052 always 1052
  "class A\n{\n    int *p;\npublic:\n    A();\n    ~A() { delete p; }\n};\nA::A()\n{ p = new int; }" always "class A\n{\n    int *p;\npublic:\n    A();\n    ~A() { delete p; }\n};\nA::A()\n{ p = new int; }"
Line 1061
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1061 always 1061
  "" always ""
Line 1063
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1063 always 1063
  "class A\n{\n    int *p;\npublic:\n    A()\n    { p = new int; }\n    ~A() { delete p; }\n};" always "class A\n{\n    int *p;\npublic:\n    A()\n    { p = new int; }\n    ~A() { delete p; }\n};"
Line 1071
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1071 always 1071
  "" always ""
Line 1074
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1074 always 1074
  "class A\n{\n    int *p;\npublic:\n    A();\n    ~A() { free(p); }\n};\nA::A()\n{ p = malloc(sizeof(int)*10); }" always "class A\n{\n    int *p;\npublic:\n    A();\n    ~A() { free(p); }\n};\nA::A()\n{ p = malloc(sizeof(int)*10); }"
Line 1083
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1083 always 1083
  "" always ""
Line 1085
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1085 always 1085
  "class A\n{\n    int *p;\npublic:\n    A()\n    { p = malloc(sizeof(int)*10); }\n    ~A() { free(p); }\n};" always "class A\n{\n    int *p;\npublic:\n    A()\n    { p = malloc(sizeof(int)*10); }\n    ~A() { free(p); }\n};"
Line 1093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1093 always 1093
  "" always ""
Line 1098
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1098 always 1098
  "class A\n{\n    int *a;\n    int *b;\npublic:\n    A() { a = b = new int[10]; }\n    ~A() { delete [] a; }\n};" always "class A\n{\n    int *a;\n    int *b;\npublic:\n    A() { a = b = new int[10]; }\n    ~A() { delete [] a; }\n};"
Line 1106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1106 always 1106
  "" always ""
Line 1111
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1111 always 1111
  "class A {\nprivate:\n    char *pd;\npublic:\n    void foo();\n};\n\nvoid A::foo()\n{\n    A::pd = new char[12];\n    delete [] A::pd;\n}" always "class A {\nprivate:\n    char *pd;\npublic:\n    void foo();\n};\n\nvoid A::foo()\n{\n    A::pd = new char[12];\n    delete [] A::pd;\n}"
Line 1123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1123 always 1123
  "[test.cpp:10]: (warning) Possible leak in public function. The pointer 'pd' is not deallocated before it is allocated.\n" always "[test.cpp:10]: (warning) Possible leak in public function. The pointer 'pd' is not deallocated before it is allocated.\n"
Line 1125
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1125 always 1125
  "class A {\nprivate:\n    char *pd;\npublic:\n    void foo()\n    {\n        pd = new char[12];\n        delete [] pd;\n    }\n};" always "class A {\nprivate:\n    char *pd;\npublic:\n    void foo()\n    {\n        pd = new char[12];\n        delete [] pd;\n    }\n};"
Line 1135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1135 always 1135
  "[test.cpp:7]: (warning) Possible leak in public function. The pointer 'pd' is not deallocated before it is allocated.\n" always "[test.cpp:7]: (warning) Possible leak in public function. The pointer 'pd' is not deallocated before it is allocated.\n"
Line 1137
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1137 always 1137
  "class A {\nprivate:\n    char *pd;\npublic:\n    void foo();\n};\n\nvoid A::foo()\n{\n    pd = new char[12];\n    delete [] pd;\n}" always "class A {\nprivate:\n    char *pd;\npublic:\n    void foo();\n};\n\nvoid A::foo()\n{\n    pd = new char[12];\n    delete [] pd;\n}"
Line 1149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1149 always 1149
  "[test.cpp:10]: (warning) Possible leak in public function. The pointer 'pd' is not deallocated before it is allocated.\n" always "[test.cpp:10]: (warning) Possible leak in public function. The pointer 'pd' is not deallocated before it is allocated.\n"
Line 1154
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1154 always 1154
  "class  A : public x\n{\npublic:\n  A()\n  {\n    a = new char[10];\n    foo(a);\n  }\nprivate:\n  char *a;\n};" always "class  A : public x\n{\npublic:\n  A()\n  {\n    a = new char[10];\n    foo(a);\n  }\nprivate:\n  char *a;\n};"
Line 1165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1165 always 1165
  "" always ""
Line 1167
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1167 always 1167
  "class  A : public x\n{\npublic:\n  A();\nprivate:\n  char *a;\n};\nA::A()\n{\n  a = new char[10];\n  foo(a);\n}" always "class  A : public x\n{\npublic:\n  A();\nprivate:\n  char *a;\n};\nA::A()\n{\n  a = new char[10];\n  foo(a);\n}"
Line 1179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1179 always 1179
  "" always ""
Line 1184
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1184 always 1184
  "class Foo\n{\nprivate:\n    TRadioButton* rp1;\n    TRadioButton* rp2;\npublic:\n    Foo();\n};\nFoo::Foo()\n{\n    rp1 = new TRadioButton(this);\n    rp2 = new TRadioButton(this);\n}" always "class Foo\n{\nprivate:\n    TRadioButton* rp1;\n    TRadioButton* rp2;\npublic:\n    Foo();\n};\nFoo::Foo()\n{\n    rp1 = new TRadioButton(this);\n    rp2 = new TRadioButton(this);\n}"
Line 1197
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1197 always 1197
  "" always ""
Line 1199
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1199 always 1199
  "class TRadioButton { };\nclass Foo\n{\nprivate:\n    TRadioButton* rp1;\n    TRadioButton* rp2;\npublic:\n    Foo();\n};\nFoo::Foo()\n{\n    rp1 = new TRadioButton;\n    rp2 = new TRadioButton;\n}" always "class TRadioButton { };\nclass Foo\n{\nprivate:\n    TRadioButton* rp1;\n    TRadioButton* rp2;\npublic:\n    Foo();\n};\nFoo::Foo()\n{\n    rp1 = new TRadioButton;\n    rp2 = new TRadioButton;\n}"
Line 1213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1213 always 1213
  "[test.cpp:5]: (style) Class 'Foo' is unsafe, 'Foo::rp1' can leak by wrong usage.\n[test.cpp:6]: (style) Class 'Foo' is unsafe, 'Foo::rp2' can leak by wrong usage.\n" always "[test.cpp:5]: (style) Class 'Foo' is unsafe, 'Foo::rp1' can leak by wrong usage.\n[test.cpp:6]: (style) Class 'Foo' is unsafe, 'Foo::rp2' can leak by wrong usage.\n"
Line 1216
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1216 always 1216
  "class TRadioButton { };\nclass Foo\n{\nprivate:\n    TRadioButton* rp1;\n    TRadioButton* rp2;\npublic:\n    Foo();\n    ~Foo();\n};\nFoo::Foo()\n{\n    rp1 = new TRadioButton;\n    rp2 = new TRadioButton;\n}\nFoo::~Foo()\n{\n    delete rp1;\n    delete rp2;\n}" always "class TRadioButton { };\nclass Foo\n{\nprivate:\n    TRadioButton* rp1;\n    TRadioButton* rp2;\npublic:\n    Foo();\n    ~Foo();\n};\nFoo::Foo()\n{\n    rp1 = new TRadioButton;\n    rp2 = new TRadioButton;\n}\nFoo::~Foo()\n{\n    delete rp1;\n    delete rp2;\n}"
Line 1236
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1236 always 1236
  "" always ""
Line 1240
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1240 always 1240
  "namespace ns1 {\n    class Fred\n    {\n    private:\n        char *str1;\n        char *str2;\n    public:\n        Fred()\n        {\n            str1 = new char[10];\n            str2 = new char[10];\n        }\n        ~Fred()\n        {\n            delete [] str2;\n        }\n    };\n}" always "namespace ns1 {\n    class Fred\n    {\n    private:\n        char *str1;\n        char *str2;\n    public:\n        Fred()\n        {\n            str1 = new char[10];\n            str2 = new char[10];\n        }\n        ~Fred()\n        {\n            delete [] str2;\n        }\n    };\n}"
Line 1258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1258 always 1258
  "[test.cpp:5]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" always "[test.cpp:5]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n"
Line 1260
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1260 always 1260
  "namespace ns1 {\n    class Fred\n    {\n    private:\n        char *str1;\n        char *str2;\n    public:\n        Fred();\n        ~Fred();\n    };\n\n    Fred::Fred()\n    {\n        str1 = new char[10];\n        str2 = new char[10];\n    }\n\n    Fred::~Fred()\n    {\n        delete [] str2;\n    }\n}" always "namespace ns1 {\n    class Fred\n    {\n    private:\n        char *str1;\n        char *str2;\n    public:\n        Fred();\n        ~Fred();\n    };\n\n    Fred::Fred()\n    {\n        str1 = new char[10];\n        str2 = new char[10];\n    }\n\n    Fred::~Fred()\n    {\n        delete [] str2;\n    }\n}"
Line 1282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1282 always 1282
  "[test.cpp:5]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" always "[test.cpp:5]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n"
Line 1284
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1284 always 1284
  "namespace ns1 {\n    class Fred\n    {\n    private:\n        char *str1;\n        char *str2;\n    public:\n        Fred();\n        ~Fred();\n    };\n}\nns1::Fred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nns1::Fred::~Fred()\n{\n    delete [] str2;\n}" always "namespace ns1 {\n    class Fred\n    {\n    private:\n        char *str1;\n        char *str2;\n    public:\n        Fred();\n        ~Fred();\n    };\n}\nns1::Fred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nns1::Fred::~Fred()\n{\n    delete [] str2;\n}"
Line 1305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1305 always 1305
  "[test.cpp:5]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" always "[test.cpp:5]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n"
Line 1307
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1307 always 1307
  "namespace ns1 {\n    namespace ns2 {\n        class Fred\n        {\n        private:\n            char *str1;\n            char *str2;\n        public:\n            Fred();\n            ~Fred();\n        };\n    }\n}\nns1::ns2::Fred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nns1::ns2::Fred::~Fred()\n{\n    delete [] str2;\n}" always "namespace ns1 {\n    namespace ns2 {\n        class Fred\n        {\n        private:\n            char *str1;\n            char *str2;\n        public:\n            Fred();\n            ~Fred();\n        };\n    }\n}\nns1::ns2::Fred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nns1::ns2::Fred::~Fred()\n{\n    delete [] str2;\n}"
Line 1330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1330 always 1330
  "[test.cpp:6]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" always "[test.cpp:6]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n"
Line 1332
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1332 always 1332
  "namespace ns1 {\n    namespace ns2 {\n        namespace ns3 {\n            class Fred\n            {\n            private:\n                char *str1;\n                char *str2;\n            public:\n                Fred();\n                ~Fred();\n            };\n        }\n    }\n}\nns1::ns2::ns3::Fred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nns1::ns2::ns3::Fred::~Fred()\n{\n    delete [] str2;\n}" always "namespace ns1 {\n    namespace ns2 {\n        namespace ns3 {\n            class Fred\n            {\n            private:\n                char *str1;\n                char *str2;\n            public:\n                Fred();\n                ~Fred();\n            };\n        }\n    }\n}\nns1::ns2::ns3::Fred::Fred()\n{\n    str1 = new char[10];\n    str2 = new char[10];\n}\n\nns1::ns2::ns3::Fred::~Fred()\n{\n    delete [] str2;\n}"
Line 1357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1357 always 1357
  "[test.cpp:7]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n" always "[test.cpp:7]: (style) Class 'Fred' is unsafe, 'Fred::str1' can leak by wrong usage.\n"
Line 1361
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1361 always 1361
  "struct B { };\nstruct C\n{\n    B * b;\n    C(B * x) : b(x) { }\n};\nclass A\n{\n    B *b;\n    C *c;\npublic:\n    A() : b(new B()), c(new C(b)) { }\n}" always "struct B { };\nstruct C\n{\n    B * b;\n    C(B * x) : b(x) { }\n};\nclass A\n{\n    B *b;\n    C *c;\npublic:\n    A() : b(new B()), c(new C(b)) { }\n}"
Line 1374
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1374 always 1374
  "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n[test.cpp:10]: (style) Class 'A' is unsafe, 'A::c' can leak by wrong usage.\n" always "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n[test.cpp:10]: (style) Class 'A' is unsafe, 'A::c' can leak by wrong usage.\n"
  "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n" always "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n"
Line 1379
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1379 always 1379
  "struct B { };\nstruct C\n{\n    B * b;\n    C(B * x) : b(x) { }\n};\nclass A\n{\n    B *b;\n    C *c;\npublic:\n    A()\n    {\n       b = new B();\n       c = new C(b);\n    }\n}" always "struct B { };\nstruct C\n{\n    B * b;\n    C(B * x) : b(x) { }\n};\nclass A\n{\n    B *b;\n    C *c;\npublic:\n    A()\n    {\n       b = new B();\n       c = new C(b);\n    }\n}"
Line 1396
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1396 always 1396
  "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n[test.cpp:10]: (style) Class 'A' is unsafe, 'A::c' can leak by wrong usage.\n" always "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n[test.cpp:10]: (style) Class 'A' is unsafe, 'A::c' can leak by wrong usage.\n"
  "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n" always "[test.cpp:9]: (style) Class 'A' is unsafe, 'A::b' can leak by wrong usage.\n"
Line 1403
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1403 always 1403
  "class Fred {\nprivate:\n    int * a;\nprivate:\n    Fred() { a = new int; }\n    ~Fred() { (delete(a), (a)=NULL); }\n};" always "class Fred {\nprivate:\n    int * a;\nprivate:\n    Fred() { a = new int; }\n    ~Fred() { (delete(a), (a)=NULL); }\n};"
Line 1410
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1410 always 1410
  "" always ""
Line 1414
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1414 always 1414
  "class CDataImpl {\npublic:\n    CDataImpl() { m_refcount = 1; }\n    void Release() { if (--m_refcount == 0) delete this; }\nprivate:\n    int m_refcount;\n};\n\nclass CData {\npublic:\n    CData() : m_impl(new CDataImpl()) { }\n    ~CData() { if (m_impl) m_impl->Release(); }\nprivate:\n    CDataImpl *m_impl;\n};" always "class CDataImpl {\npublic:\n    CDataImpl() { m_refcount = 1; }\n    void Release() { if (--m_refcount == 0) delete this; }\nprivate:\n    int m_refcount;\n};\n\nclass CData {\npublic:\n    CData() : m_impl(new CDataImpl()) { }\n    ~CData() { if (m_impl) m_impl->Release(); }\nprivate:\n    CDataImpl *m_impl;\n};"
Line 1429
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1429 always 1429
  "" always ""
Line 1433
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1433 always 1433
  "class Fred {\nprivate:\n    int * a;\npublic:\n    Fred(const Fred &fred) { a = new int; }\n    ~Fred() { delete a; }\n};" always "class Fred {\nprivate:\n    int * a;\npublic:\n    Fred(const Fred &fred) { a = new int; }\n    ~Fred() { delete a; }\n};"
Line 1440
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1440 always 1440
  "" always ""
Line 1444
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1444 always 1444
  "class Fred {\nprivate:\n    int * a;\npublic:\n    Fred() { a = new int; }\n    ~Fred();\n};" always "class Fred {\nprivate:\n    int * a;\npublic:\n    Fred() { a = new int; }\n    ~Fred();\n};"
Line 1451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1451 always 1451
  "" always ""
Line 1455
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1455 always 1455
  "class C;\nstruct S {\n    S() { p = new C; }\n    ~S();\n    C* p;\n};\nS::~S() = default;\n" always "class C;\nstruct S {\n    S() { p = new C; }\n    ~S();\n    C* p;\n};\nS::~S() = default;\n"
Line 1462
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1462 always 1462
  "[test.cpp:5]: (style) Class 'S' is unsafe, 'S::p' can leak by wrong usage.\n" always "[test.cpp:5]: (style) Class 'S' is unsafe, 'S::p' can leak by wrong usage.\n"
Line 1466
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1466 always 1466
  "struct S {\n    S() {\n        for (int i = 0; i < 5; i++)\n            a[i] = new char[3];\n    }\n    char* a[5];\n};\n" always "struct S {\n    S() {\n        for (int i = 0; i < 5; i++)\n            a[i] = new char[3];\n    }\n    char* a[5];\n};\n"
Line 1473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1473 always 1473
  "[test.cpp:6]: (style) Class 'S' is unsafe, 'S::a' can leak by wrong usage.\n" always "[test.cpp:6]: (style) Class 'S' is unsafe, 'S::a' can leak by wrong usage.\n"
Line 1477
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1477 always 1477
  "class A\n{\nprivate:\n    static int * p;\npublic:    A()\n    {\n        if (!p)\n            p = new int[100];\n    }\n};" always "class A\n{\nprivate:\n    static int * p;\npublic:    A()\n    {\n        if (!p)\n            p = new int[100];\n    }\n};"
Line 1488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1488 always 1488
  "" always ""
Line 1494
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1494 always 1494
  "class Tokenizer\n{\npublic:\n    Tokenizer();\n    ~Tokenizer();\n\nprivate:\n    int *_tokens;\n    static void deleteTokens(int *tok);\n};\n\nTokenizer::Tokenizer()\n{\n     _tokens = new int;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n    _tokens = 0;\n}\n\nvoid Tokenizer::deleteTokens(int *tok)\n{\n    delete tok;\n}" always "class Tokenizer\n{\npublic:\n    Tokenizer();\n    ~Tokenizer();\n\nprivate:\n    int *_tokens;\n    static void deleteTokens(int *tok);\n};\n\nTokenizer::Tokenizer()\n{\n     _tokens = new int;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n    _tokens = 0;\n}\n\nvoid Tokenizer::deleteTokens(int *tok)\n{\n    delete tok;\n}"
Line 1520
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1520 always 1520
  "" always ""
Line 1523
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1523 always 1523
  "void deleteTokens(int *tok)\n{\n    delete tok;\n}\nclass Tokenizer\n{\npublic:\n    Tokenizer();\n    ~Tokenizer();\n\nprivate:\n    int *_tokens;\n};\n\nTokenizer::Tokenizer()\n{\n     _tokens = new int;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n    _tokens = 0;\n}" always "void deleteTokens(int *tok)\n{\n    delete tok;\n}\nclass Tokenizer\n{\npublic:\n    Tokenizer();\n    ~Tokenizer();\n\nprivate:\n    int *_tokens;\n};\n\nTokenizer::Tokenizer()\n{\n     _tokens = new int;\n}\n\nTokenizer::~Tokenizer()\n{\n    deleteTokens(_tokens);\n    _tokens = 0;\n}"
Line 1547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1547 always 1547
  "" always ""
Line 1551
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1551 always 1551
  "class A\n{\npublic:\n    A(int i);\n    ~A();\nprivate:\n    char* pkt_buffer;\n};\n\nA::A(int i)\n{\n    pkt_buffer = new char[8192];\n    if (i != 1) {\n        delete pkt_buffer;\n        pkt_buffer = 0;\n    }\n}\n\nA::~A() {\n    delete [] pkt_buffer;\n}" always "class A\n{\npublic:\n    A(int i);\n    ~A();\nprivate:\n    char* pkt_buffer;\n};\n\nA::A(int i)\n{\n    pkt_buffer = new char[8192];\n    if (i != 1) {\n        delete pkt_buffer;\n        pkt_buffer = 0;\n    }\n}\n\nA::~A() {\n    delete [] pkt_buffer;\n}"
Line 1572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1572 always 1572
  "[test.cpp:14]: (error) Mismatching allocation and deallocation: A::pkt_buffer\n" always "[test.cpp:14]: (error) Mismatching allocation and deallocation: A::pkt_buffer\n"
Line 1576
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1576 always 1576
  "namespace NS\n{\nclass Foo\n{\npublic:\n  void fct();\n\nprivate:\n  char* data_;\n};\n}\n\nusing namespace NS;\n\nvoid Foo::fct()\n{\n  data_ = new char[42];\n  delete data_;\n  data_ = 0;\n}" always "namespace NS\n{\nclass Foo\n{\npublic:\n  void fct();\n\nprivate:\n  char* data_;\n};\n}\n\nusing namespace NS;\n\nvoid Foo::fct()\n{\n  data_ = new char[42];\n  delete data_;\n  data_ = 0;\n}"
Line 1596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1596 always 1596
  "[test.cpp:17]: (warning) Possible leak in public function. The pointer 'data_' is not deallocated before it is allocated.\n[test.cpp:18]: (error) Mismatching allocation and deallocation: Foo::data_\n" always "[test.cpp:17]: (warning) Possible leak in public function. The pointer 'data_' is not deallocated before it is allocated.\n[test.cpp:18]: (error) Mismatching allocation and deallocation: Foo::data_\n"
Line 1599
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1599 always 1599
  "namespace NS\n{\nclass Foo\n{\npublic:\n  void fct(int i);\n\nprivate:\n  char* data_;\n};\n}\n\nusing namespace NS;\n\nvoid Foo::fct(int i)\n{\n  data_ = new char[42];\n  delete data_;\n  data_ = 0;\n}" always "namespace NS\n{\nclass Foo\n{\npublic:\n  void fct(int i);\n\nprivate:\n  char* data_;\n};\n}\n\nusing namespace NS;\n\nvoid Foo::fct(int i)\n{\n  data_ = new char[42];\n  delete data_;\n  data_ = 0;\n}"
Line 1619
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1619 always 1619
  "[test.cpp:17]: (warning) Possible leak in public function. The pointer 'data_' is not deallocated before it is allocated.\n[test.cpp:18]: (error) Mismatching allocation and deallocation: Foo::data_\n" always "[test.cpp:17]: (warning) Possible leak in public function. The pointer 'data_' is not deallocated before it is allocated.\n[test.cpp:18]: (error) Mismatching allocation and deallocation: Foo::data_\n"
Line 1624
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1624 always 1624
  "class Fred\n{\nprivate:\n    char *s;\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    void xy()\n    { s = malloc(100); }\n};" always "class Fred\n{\nprivate:\n    char *s;\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    void xy()\n    { s = malloc(100); }\n};"
Line 1634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1634 always 1634
  "[test.cpp:9]: (warning) Possible leak in public function. The pointer 's' is not deallocated before it is allocated.\n" always "[test.cpp:9]: (warning) Possible leak in public function. The pointer 's' is not deallocated before it is allocated.\n"
Line 1636
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1636 always 1636
  "class Fred\n{\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    void xy()\n    { s = malloc(100); }\nprivate:\n    char *s;\n};" always "class Fred\n{\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    void xy()\n    { s = malloc(100); }\nprivate:\n    char *s;\n};"
Line 1646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1646 always 1646
  "[test.cpp:7]: (warning) Possible leak in public function. The pointer 's' is not deallocated before it is allocated.\n" always "[test.cpp:7]: (warning) Possible leak in public function. The pointer 's' is not deallocated before it is allocated.\n"
Line 1650
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1650 always 1650
  "class Fred\n{\nprivate:\n    char *s;\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    const Fred & operator = (const Fred &f)\n    { s = malloc(100); }\n};" always "class Fred\n{\nprivate:\n    char *s;\npublic:\n    Fred() { s = 0; }\n    ~Fred() { free(s); }\n    const Fred & operator = (const Fred &f)\n    { s = malloc(100); }\n};"
Line 1660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1660 always 1660
  "[test.cpp:9]: (warning) Possible leak in public function. The pointer 's' is not deallocated before it is allocated.\n" always "[test.cpp:9]: (warning) Possible leak in public function. The pointer 's' is not deallocated before it is allocated.\n"
Line 1674
  "TestMemleakStructMember" always "TestMemleakStructMember"
Line 1679
  , always 1
  isCPP always {!<=-1,!>=2}
  = always 1
  true always 1
Line 1681
  "" always ""
Line 1684
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 1685
  code possible {"struct S { int * p{nullptr}; };\nint main()\n{\n    S s;\n    s.p = new int[10];\n    for (int i = 0; i < 10; ++i) {\n        s.p[i] = []() { return 1; }();\n    }\n    delete[] s.p;\n    return 0;\n}"@73,"char *myalloc(void) {\n    return malloc(100);\n}\nvoid func() {\n    struct ABC abc;\n    abc.a = myalloc();\n}"@74,"typedef struct foo { char *realm; } foo;\nvoid build_principal() {\n  foo f;\n  ((f)->realm) = strdup(realm);\n  if(f->realm == NULL) {}\n}"@75,"struct S {\n  void *state_check_buff;\n};\nvoid f() {\n  S s;\n  (s).state_check_buff = (void* )malloc(1);\n  if (s.state_check_buff == 0)\n    return;\n}"@76,"bool bob( char const **column_ptrs ) {\nunique_ptr<char[]>otherbuffer{new char[otherbufsize+1]};\nchar *const oldbuffer = otherbuffer.get();\nint const oldbufsize = otherbufsize;\n}"@77,"struct Test\n{\n  int* data;\n};\n\nvoid foo(Test* x)\n{\n  Test& y = *x;\n  y.data = malloc(10);\n}"@78,"struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n}"@79,"struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n    fclose(a.f);\n    delete [] a.c;\n    free(a.m);\n}"@81,"void func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"@83,"struct A {\n    FILE* f;\n    ~A();\n};\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"@85}
Line 1686
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testmemleak.cpp"@73,"cppcheck-2.8/test/testmemleak.cpp"@74,"cppcheck-2.8/test/testmemleak.cpp"@75,"cppcheck-2.8/test/testmemleak.cpp"@76,"cppcheck-2.8/test/testmemleak.cpp"@77,"cppcheck-2.8/test/testmemleak.cpp"@78,"cppcheck-2.8/test/testmemleak.cpp"@79,"cppcheck-2.8/test/testmemleak.cpp"@80,"cppcheck-2.8/test/testmemleak.cpp"@81,"cppcheck-2.8/test/testmemleak.cpp"@82}
  line inconclusive {2155@73,2144@74,2134@75,2121@76,2112@77,2097@78,2041@79,2045@80,2066@81,2068@82}
  isCPP {!<=-1,!>=2,1@73,0@74}
  ? possible {"test.cpp","test.c"}
  "test.cpp" always "test.cpp"
  : always "test.c"
  "test.c" always "test.c"
Line 1689
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 1694
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 1695
  ( {lifetime[Object]=(exename),!0}
  "posix.cfg" always "posix.cfg"
  != always {!<=-1,!>=2}
  "posix.cfg" always "posix.cfg"
  false always 0
Line 1698
  ( always {!<=-1,!>=2}
  "err" always "err"
  false always 0
  false always 0
Line 1701
  ( always {!<=-1,!>=2}
  "goto_" always "goto_"
  false always 0
  false always 0
Line 1704
  ( always {!<=-1,!>=2}
  "ret1" always "ret1"
  false always 0
  false always 0
Line 1705
  ( always {!<=-1,!>=2}
  "ret2" always "ret2"
  false always 0
  false always 0
Line 1708
  ( always {!<=-1,!>=2}
  "assign1" always "assign1"
  false always 0
  false always 0
Line 1709
  ( always {!<=-1,!>=2}
  "assign2" always "assign2"
  false always 0
  false always 0
Line 1710
  ( always {!<=-1,!>=2}
  "assign3" always "assign3"
  false always 0
  false always 0
Line 1713
  ( always {!<=-1,!>=2}
  "failedAllocation" always "failedAllocation"
  false always 0
  false always 0
Line 1715
  ( always {!<=-1,!>=2}
  "function1" always "function1"
  false always 0
  false always 0
Line 1716
  ( always {!<=-1,!>=2}
  "function2" always "function2"
  false always 0
  false always 0
Line 1717
  ( always {!<=-1,!>=2}
  "function3" always "function3"
  false always 0
  false always 0
Line 1718
  ( always {!<=-1,!>=2}
  "function4" always "function4"
  false always 0
  false always 0
Line 1719
  ( always {!<=-1,!>=2}
  "function5" always "function5"
  false always 0
  false always 0
Line 1722
  ( always {!<=-1,!>=2}
  "ifelse" always "ifelse"
  false always 0
  false always 0
Line 1725
  ( always {!<=-1,!>=2}
  "linkedlist" always "linkedlist"
  false always 0
  false always 0
Line 1728
  ( always {!<=-1,!>=2}
  "globalvar" always "globalvar"
  false always 0
  false always 0
Line 1731
  ( always {!<=-1,!>=2}
  "localvars" always "localvars"
  false always 0
  false always 0
Line 1734
  ( always {!<=-1,!>=2}
  "refvar" always "refvar"
  false always 0
  false always 0
Line 1737
  ( always {!<=-1,!>=2}
  "trac5030" always "trac5030"
  false always 0
  false always 0
Line 1739
  ( always {!<=-1,!>=2}
  "varid" always "varid"
  false always 0
  false always 0
Line 1740
  ( always {!<=-1,!>=2}
  "varid_2" always "varid_2"
  false always 0
  false always 0
Line 1742
  ( always {!<=-1,!>=2}
  "customAllocation" always "customAllocation"
  false always 0
  false always 0
Line 1744
  ( always {!<=-1,!>=2}
  "lambdaInForLoop" always "lambdaInForLoop"
  false always 0
  false always 0
Line 1748
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1748 always 1748
  "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    free(abc);\n}" always "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    free(abc);\n}"
Line 1754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1754 always 1754
  "[test.cpp:5]: (error) Memory leak: abc.a\n" always "[test.cpp:5]: (error) Memory leak: abc.a\n"
Line 1756
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1756 always 1756
  "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n}" always "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n}"
Line 1761
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1761 always 1761
  "[test.cpp:5]: (error) Memory leak: abc.a\n" always "[test.cpp:5]: (error) Memory leak: abc.a\n"
Line 1763
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1763 always 1763
  "static ABC * foo()\n{\n    ABC *abc = malloc(sizeof(ABC));\n    abc->a = malloc(10);\n    abc->b = malloc(10);\n    if (abc->b == 0)\n    {\n        return 0;\n    }\n    return abc;\n}" always "static ABC * foo()\n{\n    ABC *abc = malloc(sizeof(ABC));\n    abc->a = malloc(10);\n    abc->b = malloc(10);\n    if (abc->b == 0)\n    {\n        return 0;\n    }\n    return abc;\n}"
Line 1774
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1774 always 1774
  "[test.cpp:8]: (error) Memory leak: abc.a\n" always "[test.cpp:8]: (error) Memory leak: abc.a\n"
Line 1776
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1776 always 1776
  "static void foo(int a)\n{\n    ABC *abc = malloc(sizeof(ABC));\n    abc->a = malloc(10);\n    if (a == 1)\n    {\n        free(abc->a);\n        return;\n    }\n}" always "static void foo(int a)\n{\n    ABC *abc = malloc(sizeof(ABC));\n    abc->a = malloc(10);\n    if (a == 1)\n    {\n        free(abc->a);\n        return;\n    }\n}"
Line 1786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1786 always 1786
  "[test.cpp:10]: (error) Memory leak: abc.a\n" always "[test.cpp:10]: (error) Memory leak: abc.a\n"
Line 1790
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1790 always 1790
  "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    if (abc->a)\n    { goto out; }\n    free(abc);\n    return;\nout:\n    free(abc->a);\n    free(abc);\n}" always "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    if (abc->a)\n    { goto out; }\n    free(abc);\n    return;\nout:\n    free(abc->a);\n    free(abc);\n}"
Line 1802
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1802 always 1802
  "" always ""
Line 1806
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1806 always 1806
  "static ABC * foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    return abc;\n}" always "static ABC * foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    return abc;\n}"
Line 1812
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1812 always 1812
  "" always ""
Line 1814
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1814 always 1814
  "static void foo(struct ABC *abc)\n{\n    abc->a = malloc(10);\n}" always "static void foo(struct ABC *abc)\n{\n    abc->a = malloc(10);\n}"
Line 1818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1818 always 1818
  "" always ""
Line 1821
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1821 always 1821
  "void* foo() {\n    struct ABC abc;\n    abc.a = malloc(10);\n    return abc.a;\n}" always "void* foo() {\n    struct ABC abc;\n    abc.a = malloc(10);\n    return abc.a;\n}"
  false always 0
Line 1826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1826 always 1826
  "" always ""
Line 1828
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1828 always 1828
  "void* foo() {\n    struct ABC abc;\n    abc.a = malloc(10);\n    return abc.b;\n}" always "void* foo() {\n    struct ABC abc;\n    abc.a = malloc(10);\n    return abc.b;\n}"
  false always 0
Line 1833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1833 always 1833
  "[test.c:4]: (error) Memory leak: abc.a\n" always "[test.c:4]: (error) Memory leak: abc.a\n"
Line 1837
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1837 always 1837
  "static ABC * foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    return &abc->self;\n}" always "static ABC * foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    return &abc->self;\n}"
Line 1843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1843 always 1843
  "" always ""
Line 1847
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1847 always 1847
  "static void foo()\n{\n    struct ABC *abc = abc1;\n    abc->a = malloc(10);\n}" always "static void foo()\n{\n    struct ABC *abc = abc1;\n    abc->a = malloc(10);\n}"
Line 1852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1852 always 1852
  "" always ""
Line 1854
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1854 always 1854
  "static void foo()\n{\n    struct ABC *abc;\n    abc1 = abc = malloc(sizeof(ABC));\n    abc->a = malloc(10);\n}" always "static void foo()\n{\n    struct ABC *abc;\n    abc1 = abc = malloc(sizeof(ABC));\n    abc->a = malloc(10);\n}"
Line 1860
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1860 always 1860
  "" always ""
Line 1862
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1862 always 1862
  "static void foo()\n{\n struct msn_entry *ptr;\n ptr = malloc(sizeof(struct msn_entry));\n ptr->msn = malloc(100);\n back = ptr;\n}" always "static void foo()\n{\n struct msn_entry *ptr;\n ptr = malloc(sizeof(struct msn_entry));\n ptr->msn = malloc(100);\n back = ptr;\n}"
Line 1869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1869 always 1869
  "" always ""
Line 1874
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1874 always 1874
  "static void foo() {\n    struct ABC *abc = malloc(123);\n    abc->a = abc->b = malloc(10);\n}" always "static void foo() {\n    struct ABC *abc = malloc(123);\n    abc->a = abc->b = malloc(10);\n}"
Line 1878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1878 always 1878
  "" always ""
Line 1882
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1882 always 1882
  "void f(struct s *f1) {\n    struct s f2;\n    f2.a = malloc(100);\n    *f1 = f2;\n}" always "void f(struct s *f1) {\n    struct s f2;\n    f2.a = malloc(100);\n    *f1 = f2;\n}"
  false always 0
Line 1887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1887 always 1887
  "" always ""
Line 1891
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1891 always 1891
  "static struct ABC * foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    if (!abc->a)\n    {\n        free(abc);\n        return 0;\n    }\n    return abc;\n}" always "static struct ABC * foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    if (!abc->a)\n    {\n        free(abc);\n        return 0;\n    }\n    return abc;\n}"
Line 1902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1902 always 1902
  "" always ""
Line 1907
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1907 always 1907
  "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    func(abc);\n}" always "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    func(abc);\n}"
Line 1913
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1913 always 1913
  "" always ""
Line 1915
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1915 always 1915
  "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abclist.push_back(abc);\n    abc->a = malloc(10);\n}" always "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abclist.push_back(abc);\n    abc->a = malloc(10);\n}"
Line 1921
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1921 always 1921
  "" always ""
Line 1926
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1926 always 1926
  "void f() {\n  A a = { 0 };\n  a.foo = (char *) malloc(10);\n  assign(&a);\n}" always "void f() {\n  A a = { 0 };\n  a.foo = (char *) malloc(10);\n  assign(&a);\n}"
  false always 0
Line 1931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1931 always 1931
  "" always ""
Line 1936
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1936 always 1936
  "void f() {\n  struct ABC *abc = malloc(100);\n  abc.a = (char *) malloc(10);\n  list_add_tail(&abc->list, head);\n}" always "void f() {\n  struct ABC *abc = malloc(100);\n  abc.a = (char *) malloc(10);\n  list_add_tail(&abc->list, head);\n}"
  false always 0
Line 1941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1941 always 1941
  "" always ""
Line 1946
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1946 always 1946
  "void a(char *p) { char *x = p; free(x); }\nvoid b() {\n  struct ABC abc;\n  abc.a = (char *) malloc(10);\n  a(abc.a);\n}" always "void a(char *p) { char *x = p; free(x); }\nvoid b() {\n  struct ABC abc;\n  abc.a = (char *) malloc(10);\n  a(abc.a);\n}"
  false always 0
Line 1952
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1952 always 1952
  "" always ""
Line 1956
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1956 always 1956
  "struct s f() {\n    struct s s1;\n    s1->x = malloc(1);\n    return (s1);\n}" always "struct s f() {\n    struct s s1;\n    s1->x = malloc(1);\n    return (s1);\n}"
Line 1961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1961 always 1961
  "" always ""
Line 1963
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1963 always 1963
  "struct nc_rpc nc_rpc_getconfig() {\n    struct nc_rpc rpc;\n    rpc->filter = malloc(1);\n    return (nc_rpc)rpc;\n}" always "struct nc_rpc nc_rpc_getconfig() {\n    struct nc_rpc rpc;\n    rpc->filter = malloc(1);\n    return (nc_rpc)rpc;\n}"
Line 1968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1968 always 1968
  "" always ""
Line 1970
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1970 always 1970
  "T* f(const char *str) {\n    S* s = malloc(sizeof(S));\n    s->str = strdup(str);\n    return NewT(s);\n}\n" always "T* f(const char *str) {\n    S* s = malloc(sizeof(S));\n    s->str = strdup(str);\n    return NewT(s);\n}\n"
Line 1975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1975 always 1975
  "" always ""
Line 1979
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1979 always 1979
  "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    if (x)    {\n        abc->a = malloc(10);\n    }\n    else\n    {\n        free(abc);\n        return;\n    }\n    free(abc->a);\n    free(abc);\n}" always "static void foo()\n{\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    if (x)    {\n        abc->a = malloc(10);\n    }\n    else\n    {\n        free(abc);\n        return;\n    }\n    free(abc->a);\n    free(abc);\n}"
Line 1994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1994 always 1994
  "" always ""
Line 1999
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  1999 always 1999
  "static void foo() {\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->next = malloc(sizeof(struct ABC));\n    abc->next->next = NULL;\n\n    while (abc) {\n        struct ABC *next = abc->next;\n        free(abc);\n        abc = next;\n    }\n}" always "static void foo() {\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    abc->next = malloc(sizeof(struct ABC));\n    abc->next->next = NULL;\n\n    while (abc) {\n        struct ABC *next = abc->next;\n        free(abc);\n        abc = next;\n    }\n}"
Line 2010
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2010 always 2010
  "" always ""
Line 2014
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2014 always 2014
  "struct ABC *abc;\n\nstatic void foo()\n{\n    abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    return;\n}" always "struct ABC *abc;\n\nstatic void foo()\n{\n    abc = malloc(sizeof(struct ABC));\n    abc->a = malloc(10);\n    return;\n}"
Line 2022
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2022 always 2022
  "" always ""
Line 2028
  162 always 162
  = always "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n}"
  "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n}" always "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n}"
Line 2041
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2041 always 2041
  code1 always "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n}"
  true always 1
Line 2042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2042 always 2042
  "[test.cpp:12]: (error) Memory leak: a.f\n[test.cpp:12]: (error) Memory leak: a.c\n[test.cpp:12]: (error) Memory leak: a.m\n" always "[test.cpp:12]: (error) Memory leak: a.f\n[test.cpp:12]: (error) Memory leak: a.c\n[test.cpp:12]: (error) Memory leak: a.m\n"
Line 2045
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2045 always 2045
  code1 always "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n}"
  false always 0
Line 2046
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2046 always 2046
  "[test.c:12]: (error) Memory leak: a.f\n[test.c:12]: (error) Memory leak: a.m\n" always "[test.c:12]: (error) Memory leak: a.f\n[test.c:12]: (error) Memory leak: a.m\n"
Line 2050
  213 always 213
  = always "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n    fclose(a.f);\n    delete [] a.c;\n    free(a.m);\n}"
  "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n    fclose(a.f);\n    delete [] a.c;\n    free(a.m);\n}" always "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n    fclose(a.f);\n    delete [] a.c;\n    free(a.m);\n}"
Line 2066
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2066 always 2066
  code2 always "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n    fclose(a.f);\n    delete [] a.c;\n    free(a.m);\n}"
  true always 1
Line 2067
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2067 always 2067
  "" always ""
Line 2068
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2068 always 2068
  code2 always "struct A {\n    FILE* f;\n    char* c;\n    void* m;\n};\n\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n    a.c = new char[12];\n    a.m = malloc(12);\n    fclose(a.f);\n    delete [] a.c;\n    free(a.m);\n}"
  false always 0
Line 2069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2069 always 2069
  "" always ""
Line 2072
  62 always 62
  = always "void func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"
  "void func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}" always "void func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"
Line 2077
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2077 always 2077
  code3 always "void func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"
  true always 1
Line 2078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2078 always 2078
  "" always ""
Line 2079
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2079 always 2079
  code3 always "void func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"
  false always 0
Line 2080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2080 always 2080
  "[test.c:4]: (error) Memory leak: a.f\n" always "[test.c:4]: (error) Memory leak: a.f\n"
Line 2083
  99 always 99
  = always "struct A {\n    FILE* f;\n    ~A();\n};\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"
  "struct A {\n    FILE* f;\n    ~A();\n};\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}" always "struct A {\n    FILE* f;\n    ~A();\n};\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"
Line 2092
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2092 always 2092
  code4 always "struct A {\n    FILE* f;\n    ~A();\n};\nvoid func() {\n    struct A a;\n    a.f = fopen(\"test\", \"r\");\n}"
  true always 1
Line 2093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2093 always 2093
  "" always ""
Line 2097
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2097 always 2097
  "struct Test\n{\n  int* data;\n};\n\nvoid foo(Test* x)\n{\n  Test& y = *x;\n  y.data = malloc(10);\n}" always "struct Test\n{\n  int* data;\n};\n\nvoid foo(Test* x)\n{\n  Test& y = *x;\n  y.data = malloc(10);\n}"
Line 2107
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2107 always 2107
  "" always ""
Line 2112
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2112 always 2112
  "bool bob( char const **column_ptrs ) {\nunique_ptr<char[]>otherbuffer{new char[otherbufsize+1]};\nchar *const oldbuffer = otherbuffer.get();\nint const oldbufsize = otherbufsize;\n}" always "bool bob( char const **column_ptrs ) {\nunique_ptr<char[]>otherbuffer{new char[otherbufsize+1]};\nchar *const oldbuffer = otherbuffer.get();\nint const oldbufsize = otherbufsize;\n}"
Line 2117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2117 always 2117
  "" always ""
Line 2121
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2121 always 2121
  "struct S {\n  void *state_check_buff;\n};\nvoid f() {\n  S s;\n  (s).state_check_buff = (void* )malloc(1);\n  if (s.state_check_buff == 0)\n    return;\n}" always "struct S {\n  void *state_check_buff;\n};\nvoid f() {\n  S s;\n  (s).state_check_buff = (void* )malloc(1);\n  if (s.state_check_buff == 0)\n    return;\n}"
  false always 0
Line 2130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2130 always 2130
  "[test.c:9]: (error) Memory leak: s.state_check_buff\n" always "[test.c:9]: (error) Memory leak: s.state_check_buff\n"
Line 2134
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2134 always 2134
  "typedef struct foo { char *realm; } foo;\nvoid build_principal() {\n  foo f;\n  ((f)->realm) = strdup(realm);\n  if(f->realm == NULL) {}\n}" always "typedef struct foo { char *realm; } foo;\nvoid build_principal() {\n  foo f;\n  ((f)->realm) = strdup(realm);\n  if(f->realm == NULL) {}\n}"
  false always 0
Line 2140
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2140 always 2140
  "[test.c:6]: (error) Memory leak: f.realm\n" always "[test.c:6]: (error) Memory leak: f.realm\n"
  "" always ""
Line 2144
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2144 always 2144
  "char *myalloc(void) {\n    return malloc(100);\n}\nvoid func() {\n    struct ABC abc;\n    abc.a = myalloc();\n}" always "char *myalloc(void) {\n    return malloc(100);\n}\nvoid func() {\n    struct ABC abc;\n    abc.a = myalloc();\n}"
  false always 0
Line 2151
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2151 always 2151
  "[test.c:7]: (error) Memory leak: abc.a\n" always "[test.c:7]: (error) Memory leak: abc.a\n"
Line 2155
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2155 always 2155
  "struct S { int * p{nullptr}; };\nint main()\n{\n    S s;\n    s.p = new int[10];\n    for (int i = 0; i < 10; ++i) {\n        s.p[i] = []() { return 1; }();\n    }\n    delete[] s.p;\n    return 0;\n}" always "struct S { int * p{nullptr}; };\nint main()\n{\n    S s;\n    s.p = new int[10];\n    for (int i = 0; i < 10; ++i) {\n        s.p[i] = []() { return 1; }();\n    }\n    delete[] s.p;\n    return 0;\n}"
  true always 1
Line 2167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2167 always 2167
  "" always ""
Line 2179
  "TestMemleakNoVar" always "TestMemleakNoVar"
Line 2186
  "" always ""
Line 2189
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 2190
  code possible {"void foo() {\n    extern void *realloc (void *ptr, size_t size);\n}"@1,"void foo() {\n    extern void *malloc (size_t size);\n}"@2,"class Thing { Thing(); };\nThing * makeThing() { Thing *thing = new Thing; return thing; }\n\nvoid f() {\n  makeThing();\n}"@3,"struct Thing {\n    Thing();\n};\nstd::vector<Thing*> g_things;\nThing* makeThing() {\n    Thing* n = new Thing();\n    return n;\n}\nThing::Thing() {\n    g_things.push_back(this);\n}\nvoid f() {\n    makeThing();\n    for(Thing* t : g_things) {\n        delete t;\n    }\n}\n"@4,"void foo() {\n  fopen(\"file.txt\", \"r\");\n}"@5,"void foo() {\n  FILE f* = fopen(\"file.txt\", \"r\");\n  freopen(\"file.txt\", \"r\", f);\n}"@6,"void foo() {\n  freopen(\"file.txt\", \"r\", stdin);\n}"@7,"struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h ( fopen(\"file.txt\", \"r\"));\n}"@8,"struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder ( fopen(\"file.txt\", \"r\"));\n}"@9,"struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h { fopen(\"file.txt\", \"r\")};\n}"@10}
Line 2191
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testmemleak.cpp"@1,"cppcheck-2.8/test/testmemleak.cpp"@2,"cppcheck-2.8/test/testmemleak.cpp"@3,"cppcheck-2.8/test/testmemleak.cpp"@4,"cppcheck-2.8/test/testmemleak.cpp"@5,"cppcheck-2.8/test/testmemleak.cpp"@6,"cppcheck-2.8/test/testmemleak.cpp"@7,"cppcheck-2.8/test/testmemleak.cpp"@8,"cppcheck-2.8/test/testmemleak.cpp"@9,"cppcheck-2.8/test/testmemleak.cpp"@10}
  line inconclusive {2681@1,2686@2,2651@3,2660@4,2572@5,2577@6,2583@7,2588@8,2598@9,2608@10}
  "test.cpp" always "test.cpp"
Line 2194
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 2199
  true always 1
Line 2200
  "posix" always "posix"
Line 2203
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 2204
  ( {lifetime[Object]=(exename),!0}
  "posix.cfg" always "posix.cfg"
  != always {!<=-1,!>=2}
  "posix.cfg" always "posix.cfg"
  false always 0
Line 2207
  ( always {!<=-1,!>=2}
  "functionParameter" always "functionParameter"
  false always 0
  false always 0
Line 2210
  ( always {!<=-1,!>=2}
  "missingAssignment" always "missingAssignment"
  false always 0
  false always 0
Line 2213
  ( always {!<=-1,!>=2}
  "smartPointerFunctionParam" always "smartPointerFunctionParam"
  false always 0
  false always 0
Line 2214
  ( always {!<=-1,!>=2}
  "resourceLeak" always "resourceLeak"
  false always 0
  false always 0
Line 2217
  ( always {!<=-1,!>=2}
  "getAllocationType" always "getAllocationType"
  false always 0
  false always 0
Line 2219
  ( always {!<=-1,!>=2}
  "crash1" always "crash1"
  false always 0
  false always 0
Line 2224
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2224 always 2224
  "void x() {\n    strcpy(a, strdup(p));\n}" always "void x() {\n    strcpy(a, strdup(p));\n}"
Line 2227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2227 always 2227
  "[test.cpp:2]: (error) Allocation with strdup, strcpy doesn't release it.\n" always "[test.cpp:2]: (error) Allocation with strdup, strcpy doesn't release it.\n"
Line 2229
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2229 always 2229
  "char *x() {\n    char *ret = strcpy(malloc(10), \"abc\");\n    return ret;\n}" always "char *x() {\n    char *ret = strcpy(malloc(10), \"abc\");\n    return ret;\n}"
Line 2233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2233 always 2233
  "" always ""
Line 2235
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2235 always 2235
  "char *x() {\n    return strcpy(malloc(10), \"abc\");\n}" always "char *x() {\n    return strcpy(malloc(10), \"abc\");\n}"
Line 2238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2238 always 2238
  "" always ""
Line 2240
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2240 always 2240
  "void x() {\n    free(malloc(10));\n}" always "void x() {\n    free(malloc(10));\n}"
Line 2243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2243 always 2243
  "" always ""
Line 2246
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2246 always 2246
  "void set_error(const char *msg) {\n}\n\nvoid x() {\n    set_error(strdup(p));\n}" always "void set_error(const char *msg) {\n}\n\nvoid x() {\n    set_error(strdup(p));\n}"
Line 2252
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2252 always 2252
  "[test.cpp:5]: (error) Allocation with strdup, set_error doesn't release it.\n" always "[test.cpp:5]: (error) Allocation with strdup, set_error doesn't release it.\n"
  "" always ""
Line 2254
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2254 always 2254
  "void f()\n{\n    int fd;\n    fd = mkstemp(strdup(\"/tmp/file.XXXXXXXX\"));\n    close(fd);\n}" always "void f()\n{\n    int fd;\n    fd = mkstemp(strdup(\"/tmp/file.XXXXXXXX\"));\n    close(fd);\n}"
Line 2260
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2260 always 2260
  "[test.cpp:4]: (error) Allocation with strdup, mkstemp doesn't release it.\n" always "[test.cpp:4]: (error) Allocation with strdup, mkstemp doesn't release it.\n"
  "" always ""
Line 2262
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2262 always 2262
  "void f()\n{\n    if(TRUE || strcmp(strdup(a), b));\n}" always "void f()\n{\n    if(TRUE || strcmp(strdup(a), b));\n}"
Line 2266
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2266 always 2266
  "[test.cpp:3]: (error) Allocation with strdup, strcmp doesn't release it.\n" always "[test.cpp:3]: (error) Allocation with strdup, strcmp doesn't release it.\n"
Line 2268
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2268 always 2268
  "void f()\n{\n    if(!strcmp(strdup(a), b) == 0);\n}" always "void f()\n{\n    if(!strcmp(strdup(a), b) == 0);\n}"
Line 2272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2272 always 2272
  "[test.cpp:3]: (error) Allocation with strdup, strcmp doesn't release it.\n" always "[test.cpp:3]: (error) Allocation with strdup, strcmp doesn't release it.\n"
Line 2274
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2274 always 2274
  "void f()\n{\n    42, strcmp(strdup(a), b);\n}" always "void f()\n{\n    42, strcmp(strdup(a), b);\n}"
Line 2278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2278 always 2278
  "[test.cpp:3]: (error) Allocation with strdup, strcmp doesn't release it.\n" always "[test.cpp:3]: (error) Allocation with strdup, strcmp doesn't release it.\n"
Line 2280
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2280 always 2280
  "void f() {\n   assert(freopen(\"/dev/null\", \"r\", stdin));\n}" always "void f() {\n   assert(freopen(\"/dev/null\", \"r\", stdin));\n}"
Line 2283
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2283 always 2283
  "" always ""
Line 2285
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2285 always 2285
  "void x() {\n    strcpy(a, (void*)strdup(p));\n}" always "void x() {\n    strcpy(a, (void*)strdup(p));\n}"
Line 2288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2288 always 2288
  "[test.cpp:2]: (error) Allocation with strdup, strcpy doesn't release it.\n" always "[test.cpp:2]: (error) Allocation with strdup, strcpy doesn't release it.\n"
Line 2290
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2290 always 2290
  "void* malloc1() {\n    return (malloc(1));\n}" always "void* malloc1() {\n    return (malloc(1));\n}"
Line 2293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2293 always 2293
  "" always ""
Line 2295
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2295 always 2295
  "char *x() {\n    char *ret = (char*)strcpy(malloc(10), \"abc\");\n    return ret;\n}" always "char *x() {\n    char *ret = (char*)strcpy(malloc(10), \"abc\");\n    return ret;\n}"
Line 2299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2299 always 2299
  "" always ""
Line 2301
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2301 always 2301
  "void f() {\n    free(malloc(1));\n    strcpy(a, strdup(p));\n}" always "void f() {\n    free(malloc(1));\n    strcpy(a, strdup(p));\n}"
Line 2305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2305 always 2305
  "[test.cpp:3]: (error) Allocation with strdup, strcpy doesn't release it.\n" always "[test.cpp:3]: (error) Allocation with strdup, strcpy doesn't release it.\n"
Line 2307
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2307 always 2307
  "void f() {\n    memcmp(calloc(10, 10), strdup(q), 100);\n}" always "void f() {\n    memcmp(calloc(10, 10), strdup(q), 100);\n}"
Line 2310
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2310 always 2310
  "[test.cpp:2]: (error) Allocation with calloc, memcmp doesn't release it.\n[test.cpp:2]: (error) Allocation with strdup, memcmp doesn't release it.\n" always "[test.cpp:2]: (error) Allocation with calloc, memcmp doesn't release it.\n[test.cpp:2]: (error) Allocation with strdup, memcmp doesn't release it.\n"
Line 2313
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2313 always 2313
  "void* f(int size) {\n    return (void*) malloc(size);\n}" always "void* f(int size) {\n    return (void*) malloc(size);\n}"
Line 2316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2316 always 2316
  "" always ""
Line 2318
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2318 always 2318
  "int* f(int size) {\n    return static_cast<int*>(malloc(size));\n}" always "int* f(int size) {\n    return static_cast<int*>(malloc(size));\n}"
Line 2321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2321 always 2321
  "" always ""
Line 2325
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2325 always 2325
  "void x()\n{\n    malloc(10);\n}" always "void x()\n{\n    malloc(10);\n}"
Line 2329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2329 always 2329
  "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n" always "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n"
Line 2331
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2331 always 2331
  "void x()\n{\n    calloc(10, 1);\n}" always "void x()\n{\n    calloc(10, 1);\n}"
Line 2335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2335 always 2335
  "[test.cpp:3]: (error) Return value of allocation function 'calloc' is not stored.\n" always "[test.cpp:3]: (error) Return value of allocation function 'calloc' is not stored.\n"
Line 2337
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2337 always 2337
  "void x()\n{\n    strdup(\"Test\");\n}" always "void x()\n{\n    strdup(\"Test\");\n}"
Line 2341
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2341 always 2341
  "[test.cpp:3]: (error) Return value of allocation function 'strdup' is not stored.\n" always "[test.cpp:3]: (error) Return value of allocation function 'strdup' is not stored.\n"
Line 2343
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2343 always 2343
  "void x()\n{\n    reallocarray(NULL, 10, 10);\n}" always "void x()\n{\n    reallocarray(NULL, 10, 10);\n}"
Line 2347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2347 always 2347
  "[test.cpp:3]: (error) Return value of allocation function 'reallocarray' is not stored.\n" always "[test.cpp:3]: (error) Return value of allocation function 'reallocarray' is not stored.\n"
Line 2349
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2349 always 2349
  "void x()\n{\n    (char*) malloc(10);\n}" always "void x()\n{\n    (char*) malloc(10);\n}"
Line 2353
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2353 always 2353
  "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n" always "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n"
Line 2355
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2355 always 2355
  "void x()\n{\n    char* ptr = malloc(10);\n    foo(ptr);\n    free(ptr);\n}" always "void x()\n{\n    char* ptr = malloc(10);\n    foo(ptr);\n    free(ptr);\n}"
Line 2361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2361 always 2361
  "" always ""
Line 2363
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2363 always 2363
  "char** x(const char* str) {\n    char* ptr[] = { malloc(10), malloc(5), strdup(str) };\n    return ptr;\n}" always "char** x(const char* str) {\n    char* ptr[] = { malloc(10), malloc(5), strdup(str) };\n    return ptr;\n}"
Line 2367
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2367 always 2367
  "" always ""
Line 2369
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2369 always 2369
  "void x()\n{\n    42,malloc(42);\n}" always "void x()\n{\n    42,malloc(42);\n}"
Line 2373
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2373 always 2373
  "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n" always "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n"
  "" always ""
Line 2375
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2375 always 2375
  "void *f()\n{\n    return malloc(10);\n}\nvoid x()\n{\n    f();\n}" always "void *f()\n{\n    return malloc(10);\n}\nvoid x()\n{\n    f();\n}"
Line 2383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2383 always 2383
  "[test.cpp:7]: (error) Return value of allocation function 'f' is not stored.\n" always "[test.cpp:7]: (error) Return value of allocation function 'f' is not stored.\n"
Line 2385
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2385 always 2385
  "void f()\n{\n    auto lambda = [](){return malloc(10);};\n}\nvoid x()\n{\n    f();\n}" always "void f()\n{\n    auto lambda = [](){return malloc(10);};\n}\nvoid x()\n{\n    f();\n}"
Line 2393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2393 always 2393
  "" always ""
Line 2395
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2395 always 2395
  "void *f() {\n    struct S { void *alloc() { return malloc(10); } };\n}\nvoid x()\n{\n    f();\n}" always "void *f() {\n    struct S { void *alloc() { return malloc(10); } };\n}\nvoid x()\n{\n    f();\n}"
Line 2402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2402 always 2402
  "" always ""
Line 2404
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2404 always 2404
  "void x()\n{\n    if(!malloc(5)) fail();\n}" always "void x()\n{\n    if(!malloc(5)) fail();\n}"
Line 2408
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2408 always 2408
  "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n" always "[test.cpp:3]: (error) Return value of allocation function 'malloc' is not stored.\n"
Line 2410
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2410 always 2410
  "FOO* factory() {\n    FOO* foo = new (std::nothrow) FOO;\n    return foo;\n}" always "FOO* factory() {\n    FOO* foo = new (std::nothrow) FOO;\n    return foo;\n}"
Line 2414
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2414 always 2414
  "" always ""
Line 2417
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2417 always 2417
  "struct S { S(int) {} };\nvoid foo(int i) {\n  S socket(i);\n}" always "struct S { S(int) {} };\nvoid foo(int i) {\n  S socket(i);\n}"
Line 2421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2421 always 2421
  "" always ""
Line 2424
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2424 always 2424
  "struct CTest {\n    void Initialise();\n    void malloc();\n};\nvoid CTest::Initialise() {\n    malloc();\n}" always "struct CTest {\n    void Initialise();\n    void malloc();\n};\nvoid CTest::Initialise() {\n    malloc();\n}"
Line 2431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2431 always 2431
  "" always ""
Line 2433
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2433 always 2433
  "void foo() {\n    p = (::X*)malloc(42);\n}" always "void foo() {\n    p = (::X*)malloc(42);\n}"
Line 2436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2436 always 2436
  "" always ""
Line 2439
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2439 always 2439
  "template<typename... Ts> auto unary_right_comma (Ts... ts) { return (ts , ...); }\ntemplate<typename T, typename... Ts> auto binary_left_comma (T x, Ts... ts) { return (x , ... , ts); }\nint main() {\n  unary_right_comma (a);\n}" always "template<typename... Ts> auto unary_right_comma (Ts... ts) { return (ts , ...); }\ntemplate<typename T, typename... Ts> auto binary_left_comma (T x, Ts... ts) { return (x , ... , ts); }\nint main() {\n  unary_right_comma (a);\n}"
Line 2444
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2444 always 2444
  "" always ""
Line 2446
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2446 always 2446
  "void f() {\n    new int[10];\n    new int[10][5];\n    new int[10]();\n    new int[10]{};\n    new int[] { 1, 2, 3 };\n    new std::string;\n    new int;\n    new int();\n    new int(1);\n    new int{};\n    new int{ 1 };\n    new uint8_t[4];\n}" always "void f() {\n    new int[10];\n    new int[10][5];\n    new int[10]();\n    new int[10]{};\n    new int[] { 1, 2, 3 };\n    new std::string;\n    new int;\n    new int();\n    new int(1);\n    new int{};\n    new int{ 1 };\n    new uint8_t[4];\n}"
Line 2460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2460 always 2460
  "[test.cpp:2]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:3]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:4]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:5]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:6]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:7]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:8]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:9]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:10]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:11]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:12]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:13]: (error) Return value of allocation function 'new' is not stored.\n" always "[test.cpp:2]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:3]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:4]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:5]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:6]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:7]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:8]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:9]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:10]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:11]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:12]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:13]: (error) Return value of allocation function 'new' is not stored.\n"
Line 2474
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2474 always 2474
  "void f(int* p) {\n    new auto('c');\n    new(p) int;\n}" always "void f(int* p) {\n    new auto('c');\n    new(p) int;\n}"
Line 2478
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2478 always 2478
  "[test.cpp:2]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:3]: (error) Return value of allocation function 'new' is not stored.\n" always "[test.cpp:2]: (error) Return value of allocation function 'new' is not stored.\n[test.cpp:3]: (error) Return value of allocation function 'new' is not stored.\n"
  "" always ""
Line 2483
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2483 always 2483
  "void g(int* p) {\n    new QWidget;\n    new QWidget();\n    new QWidget{ this };\n    h(new int[10], 1);\n    h(new int[10][5], 1);\n    h(new int[10](), 1);\n    h(new int[10]{}, 1);\n    h(new int[] { 1, 2, 3 }, 1);\n    h(new auto('c'), 1);\n    h(new std::string, 1);\n    h(new int, 1);\n    h(new int{}, 1);\n    h(new int(), 1);\n    h(new int{ 1 }, 1);\n    h(new int(1), 1);\n    h(new(p) int, 1);\n    h(new QWidget, 1);\n    C{ new int[10], 1 };\n    C{ new int[10](), 1 };\n    C{ new int[10]{}, 1 };\n    C{ new int[] { 1, 2, 3 }, 1 };\n    C{ new auto('c'), 1 };\n    C{ new std::string, 1 };\n    C{ new int, 1 };\n    C{ new int{}, 1 };\n    C{ new int(), 1 };\n    C{ new int{ 1 }, 1 };\n    C{ new int(1), 1 };\n    C{ new(p) int, 1 };\n    C{ new QWidget, 1 };\n}" always "void g(int* p) {\n    new QWidget;\n    new QWidget();\n    new QWidget{ this };\n    h(new int[10], 1);\n    h(new int[10][5], 1);\n    h(new int[10](), 1);\n    h(new int[10]{}, 1);\n    h(new int[] { 1, 2, 3 }, 1);\n    h(new auto('c'), 1);\n    h(new std::string, 1);\n    h(new int, 1);\n    h(new int{}, 1);\n    h(new int(), 1);\n    h(new int{ 1 }, 1);\n    h(new int(1), 1);\n    h(new(p) int, 1);\n    h(new QWidget, 1);\n    C{ new int[10], 1 };\n    C{ new int[10](), 1 };\n    C{ new int[10]{}, 1 };\n    C{ new int[] { 1, 2, 3 }, 1 };\n    C{ new auto('c'), 1 };\n    C{ new std::string, 1 };\n    C{ new int, 1 };\n    C{ new int{}, 1 };\n    C{ new int(), 1 };\n    C{ new int{ 1 }, 1 };\n    C{ new int(1), 1 };\n    C{ new(p) int, 1 };\n    C{ new QWidget, 1 };\n}"
Line 2515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2515 always 2515
  "" always ""
Line 2519
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2519 always 2519
  "void x() {\n    f(shared_ptr<int>(new int(42)), g());\n}" always "void x() {\n    f(shared_ptr<int>(new int(42)), g());\n}"
Line 2522
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2522 always 2522
  "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_shared<int>() instead.\n" always "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_shared<int>() instead.\n"
Line 2524
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2524 always 2524
  "void x() {\n    h(12, f(shared_ptr<int>(new int(42)), g()));\n}" always "void x() {\n    h(12, f(shared_ptr<int>(new int(42)), g()));\n}"
Line 2527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2527 always 2527
  "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_shared<int>() instead.\n" always "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_shared<int>() instead.\n"
Line 2529
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2529 always 2529
  "void x() {\n    f(unique_ptr<int>(new int(42)), g());\n}" always "void x() {\n    f(unique_ptr<int>(new int(42)), g());\n}"
Line 2532
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2532 always 2532
  "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_unique<int>() instead.\n" always "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_unique<int>() instead.\n"
Line 2534
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2534 always 2534
  "void x() {\n    f(g(), shared_ptr<int>(new int(42)));\n}" always "void x() {\n    f(g(), shared_ptr<int>(new int(42)));\n}"
Line 2537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2537 always 2537
  "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_shared<int>() instead.\n" always "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_shared<int>() instead.\n"
Line 2539
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2539 always 2539
  "void x() {\n    f(g(), unique_ptr<int>(new int(42)));\n}" always "void x() {\n    f(g(), unique_ptr<int>(new int(42)));\n}"
Line 2542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2542 always 2542
  "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_unique<int>() instead.\n" always "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g() throws, memory could be leaked. Use make_unique<int>() instead.\n"
Line 2544
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2544 always 2544
  "void x() {\n    f(shared_ptr<char>(new char), make_unique<int>(32));\n}" always "void x() {\n    f(shared_ptr<char>(new char), make_unique<int>(32));\n}"
Line 2547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2547 always 2547
  "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If make_unique<int>() throws, memory could be leaked. Use make_shared<char>() instead.\n" always "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If make_unique<int>() throws, memory could be leaked. Use make_shared<char>() instead.\n"
Line 2549
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2549 always 2549
  "void x() {\n    f(g(124), h(\"test\", 234), shared_ptr<char>(new char));\n}" always "void x() {\n    f(g(124), h(\"test\", 234), shared_ptr<char>(new char));\n}"
Line 2552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2552 always 2552
  "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If h() throws, memory could be leaked. Use make_shared<char>() instead.\n" always "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If h() throws, memory could be leaked. Use make_shared<char>() instead.\n"
Line 2554
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2554 always 2554
  "void x() {\n    f(shared_ptr<std::string>(new std::string(\"\")), g<std::string>());\n}" always "void x() {\n    f(shared_ptr<std::string>(new std::string(\"\")), g<std::string>());\n}"
Line 2557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2557 always 2557
  "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g<std::string>() throws, memory could be leaked. Use make_shared<std::string>() instead.\n" always "[test.cpp:2]: (warning, inconclusive) Unsafe allocation. If g<std::string>() throws, memory could be leaked. Use make_shared<std::string>() instead.\n"
Line 2559
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2559 always 2559
  "void g(int x) throw() { }\nvoid x() {\n    f(g(124), shared_ptr<char>(new char));\n}" always "void g(int x) throw() { }\nvoid x() {\n    f(g(124), shared_ptr<char>(new char));\n}"
Line 2563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2563 always 2563
  "" always ""
Line 2565
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2565 always 2565
  "void __declspec(nothrow) g(int x) { }\nvoid x() {\n    f(g(124), shared_ptr<char>(new char));\n}" always "void __declspec(nothrow) g(int x) { }\nvoid x() {\n    f(g(124), shared_ptr<char>(new char));\n}"
Line 2569
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2569 always 2569
  "" always ""
Line 2572
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2572 always 2572
  "void foo() {\n  fopen(\"file.txt\", \"r\");\n}" always "void foo() {\n  fopen(\"file.txt\", \"r\");\n}"
Line 2575
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2575 always 2575
  "[test.cpp:2]: (error) Return value of allocation function 'fopen' is not stored.\n" always "[test.cpp:2]: (error) Return value of allocation function 'fopen' is not stored.\n"
Line 2577
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2577 always 2577
  "void foo() {\n  FILE f* = fopen(\"file.txt\", \"r\");\n  freopen(\"file.txt\", \"r\", f);\n}" always "void foo() {\n  FILE f* = fopen(\"file.txt\", \"r\");\n  freopen(\"file.txt\", \"r\", f);\n}"
Line 2581
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2581 always 2581
  "[test.cpp:3]: (error) Return value of allocation function 'freopen' is not stored.\n" always "[test.cpp:3]: (error) Return value of allocation function 'freopen' is not stored.\n"
Line 2583
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2583 always 2583
  "void foo() {\n  freopen(\"file.txt\", \"r\", stdin);\n}" always "void foo() {\n  freopen(\"file.txt\", \"r\", stdin);\n}"
Line 2586
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2586 always 2586
  "" always ""
Line 2588
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2588 always 2588
  "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h ( fopen(\"file.txt\", \"r\"));\n}" always "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h ( fopen(\"file.txt\", \"r\"));\n}"
Line 2596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2596 always 2596
  "" always ""
Line 2598
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2598 always 2598
  "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder ( fopen(\"file.txt\", \"r\"));\n}" always "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder ( fopen(\"file.txt\", \"r\"));\n}"
Line 2606
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2606 always 2606
  "" always ""
Line 2608
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2608 always 2608
  "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h { fopen(\"file.txt\", \"r\")};\n}" always "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h { fopen(\"file.txt\", \"r\")};\n}"
Line 2616
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2616 always 2616
  "" always ""
Line 2618
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2618 always 2618
  "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h = fopen(\"file.txt\", \"r\");\n}" always "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder h = fopen(\"file.txt\", \"r\");\n}"
Line 2626
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2626 always 2626
  "" always ""
Line 2628
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2628 always 2628
  "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder { fopen(\"file.txt\", \"r\")};\n}" always "struct Holder {\n  Holder(FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder { fopen(\"file.txt\", \"r\")};\n}"
Line 2636
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2636 always 2636
  "" always ""
Line 2638
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2638 always 2638
  "struct Holder {\n  Holder(int i, FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder { 0, fopen(\"file.txt\", \"r\")};\n}" always "struct Holder {\n  Holder(int i, FILE* f) : file(f) {}\n  ~Holder() { fclose(file); }\n  FILE* file;\n};\nvoid foo() {\n  Holder { 0, fopen(\"file.txt\", \"r\")};\n}"
Line 2646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2646 always 2646
  "" always ""
Line 2651
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2651 always 2651
  "class Thing { Thing(); };\nThing * makeThing() { Thing *thing = new Thing; return thing; }\n\nvoid f() {\n  makeThing();\n}" always "class Thing { Thing(); };\nThing * makeThing() { Thing *thing = new Thing; return thing; }\n\nvoid f() {\n  makeThing();\n}"
Line 2657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2657 always 2657
  "" always ""
Line 2660
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2660 always 2660
  "struct Thing {\n    Thing();\n};\nstd::vector<Thing*> g_things;\nThing* makeThing() {\n    Thing* n = new Thing();\n    return n;\n}\nThing::Thing() {\n    g_things.push_back(this);\n}\nvoid f() {\n    makeThing();\n    for(Thing* t : g_things) {\n        delete t;\n    }\n}\n" always "struct Thing {\n    Thing();\n};\nstd::vector<Thing*> g_things;\nThing* makeThing() {\n    Thing* n = new Thing();\n    return n;\n}\nThing::Thing() {\n    g_things.push_back(this);\n}\nvoid f() {\n    makeThing();\n    for(Thing* t : g_things) {\n        delete t;\n    }\n}\n"
Line 2677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2677 always 2677
  "" always ""
Line 2681
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2681 always 2681
  "void foo() {\n    extern void *realloc (void *ptr, size_t size);\n}" always "void foo() {\n    extern void *realloc (void *ptr, size_t size);\n}"
Line 2684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2684 always 2684
  "" always ""
Line 2686
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2686 always 2686
  "void foo() {\n    extern void *malloc (size_t size);\n}" always "void foo() {\n    extern void *malloc (size_t size);\n}"
Line 2689
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testmemleak.cpp" always "cppcheck-2.8/test/testmemleak.cpp"
  2689 always 2689
  "" always ""
