

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741973 expected@var22 !=@expr1073741974 actual@var23 ) {
62: std ::@expr1073741975 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741976 expected@var22 ;
64: std ::@expr1073741977 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741978 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741979 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741980 str (@expr1073741981 ) , actualStr@var26 .@expr1073741982 str (@expr1073741983 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741984 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741985 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741986 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741987 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testnullpointer.cpp

1:
|
38:
39: class TestNullPointer : public TestFixture {
40: public:
41: TestNullPointer ( ) : TestFixture ( "TestNullPointer" ) { }
42:
43: private:
44: Settings settings@var102 ;
45:
46: void run ( ) override {
47: $do ${ $if $(@expr1073741989 settings@var102 .@expr1073741990 library@var103 $.@expr1073741991 $load $(@expr1073741992 $exename@var11 $.@expr1073741993 $c_str $(@expr1073741994 $) $, "std.cfg" $) $.@expr1073741995 $errorcode $!=@expr1073741996 $Library $::@expr1073741997 $ErrorCode $::@expr1073741998 $OK $) ${ $complainMissingLib $(@expr1073741999 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742000 $false $) ;
48: settings@var102 .@expr1073742001 severity@var104 .@expr1073742002 enable (@expr1073742003 Severity ::@expr1073742004 warning@expr1073741988 ) ;
49:
50: $do ${ $if $(@expr1073742005 $prepareTest $(@expr1073742006 "nullpointerAfterLoop" $) $) ${ $setVerbose $(@expr1073742007 $false $) $; nullpointerAfterLoop $(@expr1073742008 $) $; $} $} $while $(@expr1073742009 $false $) ;
51: $do ${ $if $(@expr1073742010 $prepareTest $(@expr1073742011 "nullpointer1" $) $) ${ $setVerbose $(@expr1073742012 $false $) $; nullpointer1 $(@expr1073742013 $) $; $} $} $while $(@expr1073742014 $false $) ;
52: $do ${ $if $(@expr1073742015 $prepareTest $(@expr1073742016 "nullpointer2" $) $) ${ $setVerbose $(@expr1073742017 $false $) $; nullpointer2 $(@expr1073742018 $) $; $} $} $while $(@expr1073742019 $false $) ;
53: $do ${ $if $(@expr1073742020 $prepareTest $(@expr1073742021 "structDerefAndCheck" $) $) ${ $setVerbose $(@expr1073742022 $false $) $; structDerefAndCheck $(@expr1073742023 $) $; $} $} $while $(@expr1073742024 $false $) ;
54: $do ${ $if $(@expr1073742025 $prepareTest $(@expr1073742026 "pointerDerefAndCheck" $) $) ${ $setVerbose $(@expr1073742027 $false $) $; pointerDerefAndCheck $(@expr1073742028 $) $; $} $} $while $(@expr1073742029 $false $) ;
55: $do ${ $if $(@expr1073742030 $prepareTest $(@expr1073742031 "nullpointer5" $) $) ${ $setVerbose $(@expr1073742032 $false $) $; nullpointer5 $(@expr1073742033 $) $; $} $} $while $(@expr1073742034 $false $) ;
56: $do ${ $if $(@expr1073742035 $prepareTest $(@expr1073742036 "nullpointerExecutionPaths" $) $) ${ $setVerbose $(@expr1073742037 $false $) $; nullpointerExecutionPaths $(@expr1073742038 $) $; $} $} $while $(@expr1073742039 $false $) ;
57: $do ${ $if $(@expr1073742040 $prepareTest $(@expr1073742041 "nullpointerExecutionPathsLoop" $) $) ${ $setVerbose $(@expr1073742042 $false $) $; nullpointerExecutionPathsLoop $(@expr1073742043 $) $; $} $} $while $(@expr1073742044 $false $) ;
58: $do ${ $if $(@expr1073742045 $prepareTest $(@expr1073742046 "nullpointer7" $) $) ${ $setVerbose $(@expr1073742047 $false $) $; nullpointer7 $(@expr1073742048 $) $; $} $} $while $(@expr1073742049 $false $) ;
59: $do ${ $if $(@expr1073742050 $prepareTest $(@expr1073742051 "nullpointer9" $) $) ${ $setVerbose $(@expr1073742052 $false $) $; nullpointer9 $(@expr1073742053 $) $; $} $} $while $(@expr1073742054 $false $) ;
60: $do ${ $if $(@expr1073742055 $prepareTest $(@expr1073742056 "nullpointer10" $) $) ${ $setVerbose $(@expr1073742057 $false $) $; nullpointer10 $(@expr1073742058 $) $; $} $} $while $(@expr1073742059 $false $) ;
61: $do ${ $if $(@expr1073742060 $prepareTest $(@expr1073742061 "nullpointer11" $) $) ${ $setVerbose $(@expr1073742062 $false $) $; nullpointer11 $(@expr1073742063 $) $; $} $} $while $(@expr1073742064 $false $) ;
62: $do ${ $if $(@expr1073742065 $prepareTest $(@expr1073742066 "nullpointer12" $) $) ${ $setVerbose $(@expr1073742067 $false $) $; nullpointer12 $(@expr1073742068 $) $; $} $} $while $(@expr1073742069 $false $) ;
63: $do ${ $if $(@expr1073742070 $prepareTest $(@expr1073742071 "nullpointer15" $) $) ${ $setVerbose $(@expr1073742072 $false $) $; nullpointer15 $(@expr1073742073 $) $; $} $} $while $(@expr1073742074 $false $) ;
64: $do ${ $if $(@expr1073742075 $prepareTest $(@expr1073742076 "nullpointer16" $) $) ${ $setVerbose $(@expr1073742077 $false $) $; nullpointer16 $(@expr1073742078 $) $; $} $} $while $(@expr1073742079 $false $) ;
65: $do ${ $if $(@expr1073742080 $prepareTest $(@expr1073742081 "nullpointer17" $) $) ${ $setVerbose $(@expr1073742082 $false $) $; nullpointer17 $(@expr1073742083 $) $; $} $} $while $(@expr1073742084 $false $) ;
66: $do ${ $if $(@expr1073742085 $prepareTest $(@expr1073742086 "nullpointer18" $) $) ${ $setVerbose $(@expr1073742087 $false $) $; nullpointer18 $(@expr1073742088 $) $; $} $} $while $(@expr1073742089 $false $) ;
67: $do ${ $if $(@expr1073742090 $prepareTest $(@expr1073742091 "nullpointer19" $) $) ${ $setVerbose $(@expr1073742092 $false $) $; nullpointer19 $(@expr1073742093 $) $; $} $} $while $(@expr1073742094 $false $) ;
68: $do ${ $if $(@expr1073742095 $prepareTest $(@expr1073742096 "nullpointer20" $) $) ${ $setVerbose $(@expr1073742097 $false $) $; nullpointer20 $(@expr1073742098 $) $; $} $} $while $(@expr1073742099 $false $) ;
69: $do ${ $if $(@expr1073742100 $prepareTest $(@expr1073742101 "nullpointer21" $) $) ${ $setVerbose $(@expr1073742102 $false $) $; nullpointer21 $(@expr1073742103 $) $; $} $} $while $(@expr1073742104 $false $) ;
70: $do ${ $if $(@expr1073742105 $prepareTest $(@expr1073742106 "nullpointer23" $) $) ${ $setVerbose $(@expr1073742107 $false $) $; nullpointer23 $(@expr1073742108 $) $; $} $} $while $(@expr1073742109 $false $) ;
71: $do ${ $if $(@expr1073742110 $prepareTest $(@expr1073742111 "nullpointer24" $) $) ${ $setVerbose $(@expr1073742112 $false $) $; nullpointer24 $(@expr1073742113 $) $; $} $} $while $(@expr1073742114 $false $) ;
72: $do ${ $if $(@expr1073742115 $prepareTest $(@expr1073742116 "nullpointer25" $) $) ${ $setVerbose $(@expr1073742117 $false $) $; nullpointer25 $(@expr1073742118 $) $; $} $} $while $(@expr1073742119 $false $) ;
73: $do ${ $if $(@expr1073742120 $prepareTest $(@expr1073742121 "nullpointer26" $) $) ${ $setVerbose $(@expr1073742122 $false $) $; nullpointer26 $(@expr1073742123 $) $; $} $} $while $(@expr1073742124 $false $) ;
74: $do ${ $if $(@expr1073742125 $prepareTest $(@expr1073742126 "nullpointer27" $) $) ${ $setVerbose $(@expr1073742127 $false $) $; nullpointer27 $(@expr1073742128 $) $; $} $} $while $(@expr1073742129 $false $) ;
75: $do ${ $if $(@expr1073742130 $prepareTest $(@expr1073742131 "nullpointer28" $) $) ${ $setVerbose $(@expr1073742132 $false $) $; nullpointer28 $(@expr1073742133 $) $; $} $} $while $(@expr1073742134 $false $) ;
76: $do ${ $if $(@expr1073742135 $prepareTest $(@expr1073742136 "nullpointer30" $) $) ${ $setVerbose $(@expr1073742137 $false $) $; nullpointer30 $(@expr1073742138 $) $; $} $} $while $(@expr1073742139 $false $) ;
77: $do ${ $if $(@expr1073742140 $prepareTest $(@expr1073742141 "nullpointer31" $) $) ${ $setVerbose $(@expr1073742142 $false $) $; nullpointer31 $(@expr1073742143 $) $; $} $} $while $(@expr1073742144 $false $) ;
78: $do ${ $if $(@expr1073742145 $prepareTest $(@expr1073742146 "nullpointer32" $) $) ${ $setVerbose $(@expr1073742147 $false $) $; nullpointer32 $(@expr1073742148 $) $; $} $} $while $(@expr1073742149 $false $) ;
79: $do ${ $if $(@expr1073742150 $prepareTest $(@expr1073742151 "nullpointer33" $) $) ${ $setVerbose $(@expr1073742152 $false $) $; nullpointer33 $(@expr1073742153 $) $; $} $} $while $(@expr1073742154 $false $) ;
80: $do ${ $if $(@expr1073742155 $prepareTest $(@expr1073742156 "nullpointer34" $) $) ${ $setVerbose $(@expr1073742157 $false $) $; nullpointer34 $(@expr1073742158 $) $; $} $} $while $(@expr1073742159 $false $) ;
81: $do ${ $if $(@expr1073742160 $prepareTest $(@expr1073742161 "nullpointer35" $) $) ${ $setVerbose $(@expr1073742162 $false $) $; nullpointer35 $(@expr1073742163 $) $; $} $} $while $(@expr1073742164 $false $) ;
82: $do ${ $if $(@expr1073742165 $prepareTest $(@expr1073742166 "nullpointer36" $) $) ${ $setVerbose $(@expr1073742167 $false $) $; nullpointer36 $(@expr1073742168 $) $; $} $} $while $(@expr1073742169 $false $) ;
83: $do ${ $if $(@expr1073742170 $prepareTest $(@expr1073742171 "nullpointer37" $) $) ${ $setVerbose $(@expr1073742172 $false $) $; nullpointer37 $(@expr1073742173 $) $; $} $} $while $(@expr1073742174 $false $) ;
84: $do ${ $if $(@expr1073742175 $prepareTest $(@expr1073742176 "nullpointer38" $) $) ${ $setVerbose $(@expr1073742177 $false $) $; nullpointer38 $(@expr1073742178 $) $; $} $} $while $(@expr1073742179 $false $) ;
85: $do ${ $if $(@expr1073742180 $prepareTest $(@expr1073742181 "nullpointer39" $) $) ${ $setVerbose $(@expr1073742182 $false $) $; nullpointer39 $(@expr1073742183 $) $; $} $} $while $(@expr1073742184 $false $) ;
86: $do ${ $if $(@expr1073742185 $prepareTest $(@expr1073742186 "nullpointer40" $) $) ${ $setVerbose $(@expr1073742187 $false $) $; nullpointer40 $(@expr1073742188 $) $; $} $} $while $(@expr1073742189 $false $) ;
87: $do ${ $if $(@expr1073742190 $prepareTest $(@expr1073742191 "nullpointer41" $) $) ${ $setVerbose $(@expr1073742192 $false $) $; nullpointer41 $(@expr1073742193 $) $; $} $} $while $(@expr1073742194 $false $) ;
88: $do ${ $if $(@expr1073742195 $prepareTest $(@expr1073742196 "nullpointer42" $) $) ${ $setVerbose $(@expr1073742197 $false $) $; nullpointer42 $(@expr1073742198 $) $; $} $} $while $(@expr1073742199 $false $) ;
89: $do ${ $if $(@expr1073742200 $prepareTest $(@expr1073742201 "nullpointer43" $) $) ${ $setVerbose $(@expr1073742202 $false $) $; nullpointer43 $(@expr1073742203 $) $; $} $} $while $(@expr1073742204 $false $) ;
90: $do ${ $if $(@expr1073742205 $prepareTest $(@expr1073742206 "nullpointer44" $) $) ${ $setVerbose $(@expr1073742207 $false $) $; nullpointer44 $(@expr1073742208 $) $; $} $} $while $(@expr1073742209 $false $) ;
91: $do ${ $if $(@expr1073742210 $prepareTest $(@expr1073742211 "nullpointer45" $) $) ${ $setVerbose $(@expr1073742212 $false $) $; nullpointer45 $(@expr1073742213 $) $; $} $} $while $(@expr1073742214 $false $) ;
92: $do ${ $if $(@expr1073742215 $prepareTest $(@expr1073742216 "nullpointer46" $) $) ${ $setVerbose $(@expr1073742217 $false $) $; nullpointer46 $(@expr1073742218 $) $; $} $} $while $(@expr1073742219 $false $) ;
93: $do ${ $if $(@expr1073742220 $prepareTest $(@expr1073742221 "nullpointer47" $) $) ${ $setVerbose $(@expr1073742222 $false $) $; nullpointer47 $(@expr1073742223 $) $; $} $} $while $(@expr1073742224 $false $) ;
94: $do ${ $if $(@expr1073742225 $prepareTest $(@expr1073742226 "nullpointer48" $) $) ${ $setVerbose $(@expr1073742227 $false $) $; nullpointer48 $(@expr1073742228 $) $; $} $} $while $(@expr1073742229 $false $) ;
95: $do ${ $if $(@expr1073742230 $prepareTest $(@expr1073742231 "nullpointer49" $) $) ${ $setVerbose $(@expr1073742232 $false $) $; nullpointer49 $(@expr1073742233 $) $; $} $} $while $(@expr1073742234 $false $) ;
96: $do ${ $if $(@expr1073742235 $prepareTest $(@expr1073742236 "nullpointer50" $) $) ${ $setVerbose $(@expr1073742237 $false $) $; nullpointer50 $(@expr1073742238 $) $; $} $} $while $(@expr1073742239 $false $) ;
97: $do ${ $if $(@expr1073742240 $prepareTest $(@expr1073742241 "nullpointer51" $) $) ${ $setVerbose $(@expr1073742242 $false $) $; nullpointer51 $(@expr1073742243 $) $; $} $} $while $(@expr1073742244 $false $) ;
98: $do ${ $if $(@expr1073742245 $prepareTest $(@expr1073742246 "nullpointer52" $) $) ${ $setVerbose $(@expr1073742247 $false $) $; nullpointer52 $(@expr1073742248 $) $; $} $} $while $(@expr1073742249 $false $) ;
99: $do ${ $if $(@expr1073742250 $prepareTest $(@expr1073742251 "nullpointer53" $) $) ${ $setVerbose $(@expr1073742252 $false $) $; nullpointer53 $(@expr1073742253 $) $; $} $} $while $(@expr1073742254 $false $) ;
100: $do ${ $if $(@expr1073742255 $prepareTest $(@expr1073742256 "nullpointer54" $) $) ${ $setVerbose $(@expr1073742257 $false $) $; nullpointer54 $(@expr1073742258 $) $; $} $} $while $(@expr1073742259 $false $) ;
101: $do ${ $if $(@expr1073742260 $prepareTest $(@expr1073742261 "nullpointer55" $) $) ${ $setVerbose $(@expr1073742262 $false $) $; nullpointer55 $(@expr1073742263 $) $; $} $} $while $(@expr1073742264 $false $) ;
102: $do ${ $if $(@expr1073742265 $prepareTest $(@expr1073742266 "nullpointer56" $) $) ${ $setVerbose $(@expr1073742267 $false $) $; nullpointer56 $(@expr1073742268 $) $; $} $} $while $(@expr1073742269 $false $) ;
103: $do ${ $if $(@expr1073742270 $prepareTest $(@expr1073742271 "nullpointer57" $) $) ${ $setVerbose $(@expr1073742272 $false $) $; nullpointer57 $(@expr1073742273 $) $; $} $} $while $(@expr1073742274 $false $) ;
104: $do ${ $if $(@expr1073742275 $prepareTest $(@expr1073742276 "nullpointer58" $) $) ${ $setVerbose $(@expr1073742277 $false $) $; nullpointer58 $(@expr1073742278 $) $; $} $} $while $(@expr1073742279 $false $) ;
105: $do ${ $if $(@expr1073742280 $prepareTest $(@expr1073742281 "nullpointer59" $) $) ${ $setVerbose $(@expr1073742282 $false $) $; nullpointer59 $(@expr1073742283 $) $; $} $} $while $(@expr1073742284 $false $) ;
106: $do ${ $if $(@expr1073742285 $prepareTest $(@expr1073742286 "nullpointer60" $) $) ${ $setVerbose $(@expr1073742287 $false $) $; nullpointer60 $(@expr1073742288 $) $; $} $} $while $(@expr1073742289 $false $) ;
107: $do ${ $if $(@expr1073742290 $prepareTest $(@expr1073742291 "nullpointer61" $) $) ${ $setVerbose $(@expr1073742292 $false $) $; nullpointer61 $(@expr1073742293 $) $; $} $} $while $(@expr1073742294 $false $) ;
108: $do ${ $if $(@expr1073742295 $prepareTest $(@expr1073742296 "nullpointer62" $) $) ${ $setVerbose $(@expr1073742297 $false $) $; nullpointer62 $(@expr1073742298 $) $; $} $} $while $(@expr1073742299 $false $) ;
109: $do ${ $if $(@expr1073742300 $prepareTest $(@expr1073742301 "nullpointer63" $) $) ${ $setVerbose $(@expr1073742302 $false $) $; nullpointer63 $(@expr1073742303 $) $; $} $} $while $(@expr1073742304 $false $) ;
110: $do ${ $if $(@expr1073742305 $prepareTest $(@expr1073742306 "nullpointer64" $) $) ${ $setVerbose $(@expr1073742307 $false $) $; nullpointer64 $(@expr1073742308 $) $; $} $} $while $(@expr1073742309 $false $) ;
111: $do ${ $if $(@expr1073742310 $prepareTest $(@expr1073742311 "nullpointer65" $) $) ${ $setVerbose $(@expr1073742312 $false $) $; nullpointer65 $(@expr1073742313 $) $; $} $} $while $(@expr1073742314 $false $) ;
112: $do ${ $if $(@expr1073742315 $prepareTest $(@expr1073742316 "nullpointer66" $) $) ${ $setVerbose $(@expr1073742317 $false $) $; nullpointer66 $(@expr1073742318 $) $; $} $} $while $(@expr1073742319 $false $) ;
113: $do ${ $if $(@expr1073742320 $prepareTest $(@expr1073742321 "nullpointer67" $) $) ${ $setVerbose $(@expr1073742322 $false $) $; nullpointer67 $(@expr1073742323 $) $; $} $} $while $(@expr1073742324 $false $) ;
114: $do ${ $if $(@expr1073742325 $prepareTest $(@expr1073742326 "nullpointer68" $) $) ${ $setVerbose $(@expr1073742327 $false $) $; nullpointer68 $(@expr1073742328 $) $; $} $} $while $(@expr1073742329 $false $) ;
115: $do ${ $if $(@expr1073742330 $prepareTest $(@expr1073742331 "nullpointer69" $) $) ${ $setVerbose $(@expr1073742332 $false $) $; nullpointer69 $(@expr1073742333 $) $; $} $} $while $(@expr1073742334 $false $) ;
116: $do ${ $if $(@expr1073742335 $prepareTest $(@expr1073742336 "nullpointer70" $) $) ${ $setVerbose $(@expr1073742337 $false $) $; nullpointer70 $(@expr1073742338 $) $; $} $} $while $(@expr1073742339 $false $) ;
117: $do ${ $if $(@expr1073742340 $prepareTest $(@expr1073742341 "nullpointer71" $) $) ${ $setVerbose $(@expr1073742342 $false $) $; nullpointer71 $(@expr1073742343 $) $; $} $} $while $(@expr1073742344 $false $) ;
118: $do ${ $if $(@expr1073742345 $prepareTest $(@expr1073742346 "nullpointer72" $) $) ${ $setVerbose $(@expr1073742347 $false $) $; nullpointer72 $(@expr1073742348 $) $; $} $} $while $(@expr1073742349 $false $) ;
119: $do ${ $if $(@expr1073742350 $prepareTest $(@expr1073742351 "nullpointer73" $) $) ${ $setVerbose $(@expr1073742352 $false $) $; nullpointer73 $(@expr1073742353 $) $; $} $} $while $(@expr1073742354 $false $) ;
120: $do ${ $if $(@expr1073742355 $prepareTest $(@expr1073742356 "nullpointer74" $) $) ${ $setVerbose $(@expr1073742357 $false $) $; nullpointer74 $(@expr1073742358 $) $; $} $} $while $(@expr1073742359 $false $) ;
121: $do ${ $if $(@expr1073742360 $prepareTest $(@expr1073742361 "nullpointer75" $) $) ${ $setVerbose $(@expr1073742362 $false $) $; nullpointer75 $(@expr1073742363 $) $; $} $} $while $(@expr1073742364 $false $) ;
122: $do ${ $if $(@expr1073742365 $prepareTest $(@expr1073742366 "nullpointer76" $) $) ${ $setVerbose $(@expr1073742367 $false $) $; nullpointer76 $(@expr1073742368 $) $; $} $} $while $(@expr1073742369 $false $) ;
123: $do ${ $if $(@expr1073742370 $prepareTest $(@expr1073742371 "nullpointer77" $) $) ${ $setVerbose $(@expr1073742372 $false $) $; nullpointer77 $(@expr1073742373 $) $; $} $} $while $(@expr1073742374 $false $) ;
124: $do ${ $if $(@expr1073742375 $prepareTest $(@expr1073742376 "nullpointer78" $) $) ${ $setVerbose $(@expr1073742377 $false $) $; nullpointer78 $(@expr1073742378 $) $; $} $} $while $(@expr1073742379 $false $) ;
125: $do ${ $if $(@expr1073742380 $prepareTest $(@expr1073742381 "nullpointer79" $) $) ${ $setVerbose $(@expr1073742382 $false $) $; nullpointer79 $(@expr1073742383 $) $; $} $} $while $(@expr1073742384 $false $) ;
126: $do ${ $if $(@expr1073742385 $prepareTest $(@expr1073742386 "nullpointer80" $) $) ${ $setVerbose $(@expr1073742387 $false $) $; nullpointer80 $(@expr1073742388 $) $; $} $} $while $(@expr1073742389 $false $) ;
127: $do ${ $if $(@expr1073742390 $prepareTest $(@expr1073742391 "nullpointer81" $) $) ${ $setVerbose $(@expr1073742392 $false $) $; nullpointer81 $(@expr1073742393 $) $; $} $} $while $(@expr1073742394 $false $) ;
128: $do ${ $if $(@expr1073742395 $prepareTest $(@expr1073742396 "nullpointer82" $) $) ${ $setVerbose $(@expr1073742397 $false $) $; nullpointer82 $(@expr1073742398 $) $; $} $} $while $(@expr1073742399 $false $) ;
129: $do ${ $if $(@expr1073742400 $prepareTest $(@expr1073742401 "nullpointer83" $) $) ${ $setVerbose $(@expr1073742402 $false $) $; nullpointer83 $(@expr1073742403 $) $; $} $} $while $(@expr1073742404 $false $) ;
130: $do ${ $if $(@expr1073742405 $prepareTest $(@expr1073742406 "nullpointer84" $) $) ${ $setVerbose $(@expr1073742407 $false $) $; nullpointer84 $(@expr1073742408 $) $; $} $} $while $(@expr1073742409 $false $) ;
131: $do ${ $if $(@expr1073742410 $prepareTest $(@expr1073742411 "nullpointer85" $) $) ${ $setVerbose $(@expr1073742412 $false $) $; nullpointer85 $(@expr1073742413 $) $; $} $} $while $(@expr1073742414 $false $) ;
132: $do ${ $if $(@expr1073742415 $prepareTest $(@expr1073742416 "nullpointer86" $) $) ${ $setVerbose $(@expr1073742417 $false $) $; nullpointer86 $(@expr1073742418 $) $; $} $} $while $(@expr1073742419 $false $) ;
133: $do ${ $if $(@expr1073742420 $prepareTest $(@expr1073742421 "nullpointer87" $) $) ${ $setVerbose $(@expr1073742422 $false $) $; nullpointer87 $(@expr1073742423 $) $; $} $} $while $(@expr1073742424 $false $) ;
134: $do ${ $if $(@expr1073742425 $prepareTest $(@expr1073742426 "nullpointer88" $) $) ${ $setVerbose $(@expr1073742427 $false $) $; nullpointer88 $(@expr1073742428 $) $; $} $} $while $(@expr1073742429 $false $) ;
135: $do ${ $if $(@expr1073742430 $prepareTest $(@expr1073742431 "nullpointer89" $) $) ${ $setVerbose $(@expr1073742432 $false $) $; nullpointer89 $(@expr1073742433 $) $; $} $} $while $(@expr1073742434 $false $) ;
136: $do ${ $if $(@expr1073742435 $prepareTest $(@expr1073742436 "nullpointer90" $) $) ${ $setVerbose $(@expr1073742437 $false $) $; nullpointer90 $(@expr1073742438 $) $; $} $} $while $(@expr1073742439 $false $) ;
137: $do ${ $if $(@expr1073742440 $prepareTest $(@expr1073742441 "nullpointer91" $) $) ${ $setVerbose $(@expr1073742442 $false $) $; nullpointer91 $(@expr1073742443 $) $; $} $} $while $(@expr1073742444 $false $) ;
138: $do ${ $if $(@expr1073742445 $prepareTest $(@expr1073742446 "nullpointer92" $) $) ${ $setVerbose $(@expr1073742447 $false $) $; nullpointer92 $(@expr1073742448 $) $; $} $} $while $(@expr1073742449 $false $) ;
139: $do ${ $if $(@expr1073742450 $prepareTest $(@expr1073742451 "nullpointer93" $) $) ${ $setVerbose $(@expr1073742452 $false $) $; nullpointer93 $(@expr1073742453 $) $; $} $} $while $(@expr1073742454 $false $) ;
140: $do ${ $if $(@expr1073742455 $prepareTest $(@expr1073742456 "nullpointer94" $) $) ${ $setVerbose $(@expr1073742457 $false $) $; nullpointer94 $(@expr1073742458 $) $; $} $} $while $(@expr1073742459 $false $) ;
141: $do ${ $if $(@expr1073742460 $prepareTest $(@expr1073742461 "nullpointer_addressOf" $) $) ${ $setVerbose $(@expr1073742462 $false $) $; nullpointer_addressOf $(@expr1073742463 $) $; $} $} $while $(@expr1073742464 $false $) ;
142: $do ${ $if $(@expr1073742465 $prepareTest $(@expr1073742466 "nullpointerSwitch" $) $) ${ $setVerbose $(@expr1073742467 $false $) $; nullpointerSwitch $(@expr1073742468 $) $; $} $} $while $(@expr1073742469 $false $) ;
143: $do ${ $if $(@expr1073742470 $prepareTest $(@expr1073742471 "nullpointer_cast" $) $) ${ $setVerbose $(@expr1073742472 $false $) $; nullpointer_cast $(@expr1073742473 $) $; $} $} $while $(@expr1073742474 $false $) ;
144: $do ${ $if $(@expr1073742475 $prepareTest $(@expr1073742476 "nullpointer_castToVoid" $) $) ${ $setVerbose $(@expr1073742477 $false $) $; nullpointer_castToVoid $(@expr1073742478 $) $; $} $} $while $(@expr1073742479 $false $) ;
145: $do ${ $if $(@expr1073742480 $prepareTest $(@expr1073742481 "nullpointer_subfunction" $) $) ${ $setVerbose $(@expr1073742482 $false $) $; nullpointer_subfunction $(@expr1073742483 $) $; $} $} $while $(@expr1073742484 $false $) ;
146: $do ${ $if $(@expr1073742485 $prepareTest $(@expr1073742486 "pointerCheckAndDeRef" $) $) ${ $setVerbose $(@expr1073742487 $false $) $; pointerCheckAndDeRef $(@expr1073742488 $) $; $} $} $while $(@expr1073742489 $false $) ;
147: $do ${ $if $(@expr1073742490 $prepareTest $(@expr1073742491 "nullConstantDereference" $) $) ${ $setVerbose $(@expr1073742492 $false $) $; nullConstantDereference $(@expr1073742493 $) $; $} $} $while $(@expr1073742494 $false $) ;
148: $do ${ $if $(@expr1073742495 $prepareTest $(@expr1073742496 "gcc_statement_expression" $) $) ${ $setVerbose $(@expr1073742497 $false $) $; gcc_statement_expression $(@expr1073742498 $) $; $} $} $while $(@expr1073742499 $false $) ;
149: $do ${ $if $(@expr1073742500 $prepareTest $(@expr1073742501 "snprintf_with_zero_size" $) $) ${ $setVerbose $(@expr1073742502 $false $) $; snprintf_with_zero_size $(@expr1073742503 $) $; $} $} $while $(@expr1073742504 $false $) ;
150: $do ${ $if $(@expr1073742505 $prepareTest $(@expr1073742506 "snprintf_with_non_zero_size" $) $) ${ $setVerbose $(@expr1073742507 $false $) $; snprintf_with_non_zero_size $(@expr1073742508 $) $; $} $} $while $(@expr1073742509 $false $) ;
151: $do ${ $if $(@expr1073742510 $prepareTest $(@expr1073742511 "printf_with_invalid_va_argument" $) $) ${ $setVerbose $(@expr1073742512 $false $) $; printf_with_invalid_va_argument $(@expr1073742513 $) $; $} $} $while $(@expr1073742514 $false $) ;
152: $do ${ $if $(@expr1073742515 $prepareTest $(@expr1073742516 "scanf_with_invalid_va_argument" $) $) ${ $setVerbose $(@expr1073742517 $false $) $; scanf_with_invalid_va_argument $(@expr1073742518 $) $; $} $} $while $(@expr1073742519 $false $) ;
153: $do ${ $if $(@expr1073742520 $prepareTest $(@expr1073742521 "nullpointer_in_return" $) $) ${ $setVerbose $(@expr1073742522 $false $) $; nullpointer_in_return $(@expr1073742523 $) $; $} $} $while $(@expr1073742524 $false $) ;
154: $do ${ $if $(@expr1073742525 $prepareTest $(@expr1073742526 "nullpointer_in_typeid" $) $) ${ $setVerbose $(@expr1073742527 $false $) $; nullpointer_in_typeid $(@expr1073742528 $) $; $} $} $while $(@expr1073742529 $false $) ;
155: $do ${ $if $(@expr1073742530 $prepareTest $(@expr1073742531 "nullpointer_in_for_loop" $) $) ${ $setVerbose $(@expr1073742532 $false $) $; nullpointer_in_for_loop $(@expr1073742533 $) $; $} $} $while $(@expr1073742534 $false $) ;
156: $do ${ $if $(@expr1073742535 $prepareTest $(@expr1073742536 "nullpointerDelete" $) $) ${ $setVerbose $(@expr1073742537 $false $) $; nullpointerDelete $(@expr1073742538 $) $; $} $} $while $(@expr1073742539 $false $) ;
157: $do ${ $if $(@expr1073742540 $prepareTest $(@expr1073742541 "nullpointerSubFunction" $) $) ${ $setVerbose $(@expr1073742542 $false $) $; nullpointerSubFunction $(@expr1073742543 $) $; $} $} $while $(@expr1073742544 $false $) ;
158: $do ${ $if $(@expr1073742545 $prepareTest $(@expr1073742546 "nullpointerExit" $) $) ${ $setVerbose $(@expr1073742547 $false $) $; nullpointerExit $(@expr1073742548 $) $; $} $} $while $(@expr1073742549 $false $) ;
159: $do ${ $if $(@expr1073742550 $prepareTest $(@expr1073742551 "nullpointerStdString" $) $) ${ $setVerbose $(@expr1073742552 $false $) $; nullpointerStdString $(@expr1073742553 $) $; $} $} $while $(@expr1073742554 $false $) ;
160: $do ${ $if $(@expr1073742555 $prepareTest $(@expr1073742556 "nullpointerStdStream" $) $) ${ $setVerbose $(@expr1073742557 $false $) $; nullpointerStdStream $(@expr1073742558 $) $; $} $} $while $(@expr1073742559 $false $) ;
161: $do ${ $if $(@expr1073742560 $prepareTest $(@expr1073742561 "nullpointerSmartPointer" $) $) ${ $setVerbose $(@expr1073742562 $false $) $; nullpointerSmartPointer $(@expr1073742563 $) $; $} $} $while $(@expr1073742564 $false $) ;
162: $do ${ $if $(@expr1073742565 $prepareTest $(@expr1073742566 "functioncall" $) $) ${ $setVerbose $(@expr1073742567 $false $) $; functioncall $(@expr1073742568 $) $; $} $} $while $(@expr1073742569 $false $) ;
163: $do ${ $if $(@expr1073742570 $prepareTest $(@expr1073742571 "functioncalllibrary" $) $) ${ $setVerbose $(@expr1073742572 $false $) $; functioncalllibrary $(@expr1073742573 $) $; $} $} $while $(@expr1073742574 $false $) ;
164: $do ${ $if $(@expr1073742575 $prepareTest $(@expr1073742576 "functioncallDefaultArguments" $) $) ${ $setVerbose $(@expr1073742577 $false $) $; functioncallDefaultArguments $(@expr1073742578 $) $; $} $} $while $(@expr1073742579 $false $) ;
165: $do ${ $if $(@expr1073742580 $prepareTest $(@expr1073742581 "nullpointer_internal_error" $) $) ${ $setVerbose $(@expr1073742582 $false $) $; nullpointer_internal_error $(@expr1073742583 $) $; $} $} $while $(@expr1073742584 $false $) ;
166: $do ${ $if $(@expr1073742585 $prepareTest $(@expr1073742586 "ticket6505" $) $) ${ $setVerbose $(@expr1073742587 $false $) $; ticket6505 $(@expr1073742588 $) $; $} $} $while $(@expr1073742589 $false $) ;
167: $do ${ $if $(@expr1073742590 $prepareTest $(@expr1073742591 "subtract" $) $) ${ $setVerbose $(@expr1073742592 $false $) $; subtract $(@expr1073742593 $) $; $} $} $while $(@expr1073742594 $false $) ;
168: $do ${ $if $(@expr1073742595 $prepareTest $(@expr1073742596 "addNull" $) $) ${ $setVerbose $(@expr1073742597 $false $) $; addNull $(@expr1073742598 $) $; $} $} $while $(@expr1073742599 $false $) ;
169: $do ${ $if $(@expr1073742600 $prepareTest $(@expr1073742601 "isPointerDeRefFunctionDecl" $) $) ${ $setVerbose $(@expr1073742602 $false $) $; isPointerDeRefFunctionDecl $(@expr1073742603 $) $; $} $} $while $(@expr1073742604 $false $) ;
170:
171: $do ${ $if $(@expr1073742605 $prepareTest $(@expr1073742606 "ctuTest" $) $) ${ $setVerbose $(@expr1073742607 $false $) $; ctuTest $(@expr1073742608 $) $; $} $} $while $(@expr1073742609 $false $) ;
172: }
173:
174:
175: void check_ ( const char * file@var105 , int line@var106 , const char code@var107 [ ] , bool inconclusive@var108 = false , const char filename@var109 [ 9 ] = "test.cpp" ) {
176:
177: errout@var100 .@expr1073742611 str (@expr1073742612 "" ) ;
178:
179: settings@var102 .@expr1073742613 certainty@var110 .@expr1073742614 setEnabled (@expr1073742615 Certainty ::@expr1073742616 inconclusive@expr1073742610 , inconclusive@var108 ) ;
180:
181:
182: Tokenizer tokenizer@var111 (@expr1073742617 &@expr794 settings@var102 , this@expr795 ) ;
183: std ::@expr1073742620 istringstream istr@var112 (@expr1073742621 code@var107 ) ;
184: $assert_ $(@expr1073742622 file@var105 $, line@var106 $, $(@expr1073742623 tokenizer@var111 .@expr1073742624 tokenize (@expr1073742625 istr@var112 , filename@var109 ) $) $) ;
185:
186:
187: CheckNullPointer checkNullPointer@var113 ;
188: checkNullPointer@var113 .@expr1073742626 runChecks (@expr1073742627 &@expr1073742628 tokenizer@var111 , &@expr794 settings@var102 , this@expr795 ) ;
189: }
190:
191: void checkP ( const char code@var114 [ ] ) {
192:
193: errout@var100 .@expr1073742630 str (@expr1073742631 "" ) ;
194:
195: settings@var102 .@expr1073742632 certainty@var110 .@expr1073742633 setEnabled (@expr1073742634 Certainty ::@expr1073742635 inconclusive , false ) ;
196:
197:
198: std ::@expr1073742636 vector < std ::@expr813 string > files@var115 (@expr1073742638 1 , "test.cpp" ) ;
199: std ::@expr1073742639 istringstream istr@var116 (@expr1073742640 code@var114 ) ;
200: const simplecpp ::@expr1073742641 TokenList tokens1@var117 (@expr1073742642 istr@var116 , files@var115 , files@var115 [@expr1073742643 0 ] ) ;
201:
202:
203: simplecpp ::@expr1073742644 TokenList tokens2@var118 (@expr1073742645 files@var115 ) ;
204: std ::@expr1073742646 map < std ::@expr813 string , simplecpp ::@expr813 TokenList *@expr1073742649 > filedata@var119 ;
205: simplecpp ::@expr1073742650 preprocess (@expr1073742651 tokens2@var118 , tokens1@var117 , files@var115 , filedata@var119 , simplecpp ::@expr1073742652 DUI (@expr1073742653 ) ) ;
206:
207:
208: Tokenizer tokenizer@var120 (@expr1073742654 &@expr831 settings@var102 , this@expr832 ) ;
209: tokenizer@var120 .@expr1073742657 createTokens (@expr1073742658 std ::@expr1073742659 move (@expr1073742660 tokens2@var118 ) ) ;
210: tokenizer@var120 .@expr1073742661 simplifyTokens1 (@expr1073742662 "" ) ;
211:
212:
213: CheckNullPointer checkNullPointer@var121 ;
214: checkNullPointer@var121 .@expr1073742663 runChecks (@expr1073742664 &@expr1073742665 tokenizer@var120 , &@expr831 settings@var102 , this@expr832 ) ;
215: }
216:
217:
218:
219: void nullpointerAfterLoop ( ) {
220:
221: $check_ $(@expr1073742667 "cppcheck-2.8/test/testnullpointer.cpp" $, 221 $, "void foo(const Token *tok)\n{\n    while (tok);\n    tok = tok->next();\n}" , true $)
222:
223:
224:
225: ;
226: $if $(@expr1073742668 $!@expr1073742669 $assertEquals $(@expr1073742670 "cppcheck-2.8/test/testnullpointer.cpp" $, 226 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'tok' is redundant or there is possible null pointer dereference: tok.\n" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
227:
228:
229: {
230: const char code@var122 [@expr1073742673 134 ] =@expr1073742674 "void foo(const Token *tok)\n{\n    while (tok && tok->str() == \"=\")\n        tok = tok->next();\n\n    if (tok->str() != \";\")\n        ;\n}\n"
231:
|
236:
237: ;
238:
239: $check_ $(@expr1073742675 "cppcheck-2.8/test/testnullpointer.cpp" $, 239 $, code@var122 $) ;
240: $if $(@expr1073742676 $!@expr1073742677 $assertEquals $(@expr1073742678 "cppcheck-2.8/test/testnullpointer.cpp" $, 240 $, "[test.cpp:3] -> [test.cpp:6]: (warning) Either the condition 'tok' is redundant or there is possible null pointer dereference: tok.\n" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
241: }
242:
243: $check_ $(@expr1073742681 "cppcheck-2.8/test/testnullpointer.cpp" $, 243 $, "void foo()\n{\n    for (const Token *tok = tokens; tok; tok = tok->next())\n    {\n        while (tok && tok->str() != \";\")\n            tok = tok->next();\n    }\n}" $)
244:
|
249:
250: ;
251: $todoAssertEquals $(@expr1073742682 "cppcheck-2.8/test/testnullpointer.cpp" $, 251 $, "[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition 'while' is redundant or there is possible null pointer dereference: tok.\n" $, "" $, errout@var100 .@expr847 str (@expr848 ) $) ;
252:
253: $check_ $(@expr1073742685 "cppcheck-2.8/test/testnullpointer.cpp" $, 253 $, "void foo(Token &tok)\n{\n    for (int i = 0; i < tok.size(); i++ )\n    {\n        while (!tok)\n            char c = tok.read();\n    }\n}" $)
254:
|
259:
260: ;
261: $if $(@expr1073742686 $!@expr1073742687 $assertEquals $(@expr1073742688 "cppcheck-2.8/test/testnullpointer.cpp" $, 261 $, "" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
262:
263: $check_ $(@expr1073742691 "cppcheck-2.8/test/testnullpointer.cpp" $, 263 $, "void foo()\n{\n    for (const Token *tok = tokens; tok; tok = tok->next())\n    {\n        while (tok && tok->str() != \";\")\n            tok = tok->next();\n        if( !tok ) break;\n    }\n}" $)
264:
|
270:
271: ;
272: $if $(@expr1073742692 $!@expr1073742693 $assertEquals $(@expr1073742694 "cppcheck-2.8/test/testnullpointer.cpp" $, 272 $, "" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
273:
274: $check_ $(@expr1073742697 "cppcheck-2.8/test/testnullpointer.cpp" $, 274 $, "void foo()\n{\n    for (const Token *tok = tokens; tok; tok = tok ? tok->next() : NULL)\n    {\n        while (tok && tok->str() != \";\")\n            tok = tok->next();\n    }\n}" $)
275:
|
280:
281: ;
282: $if $(@expr1073742698 $!@expr1073742699 $assertEquals $(@expr1073742700 "cppcheck-2.8/test/testnullpointer.cpp" $, 282 $, "" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
283:
284: $check_ $(@expr1073742703 "cppcheck-2.8/test/testnullpointer.cpp" $, 284 $, "void foo(A*a)\n{\n  switch (a->b()) {\n    case 1:\n      while( a ){\n        a = a->next;\n      }\n    break;\n    case 2:\n      a->b();\n      break;\n  }\n}" $)
285:
|
295:
296: ;
297: $if $(@expr1073742704 $!@expr1073742705 $assertEquals $(@expr1073742706 "cppcheck-2.8/test/testnullpointer.cpp" $, 297 $, "" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
298:
299:
300: $check_ $(@expr1073742709 "cppcheck-2.8/test/testnullpointer.cpp" $, 300 $, "void foo(int x, const Token *tok) {\n    if (x == 123) {\n        while (tok) tok = tok->next();\n    }\n    tok->str();\n}" $)
301:
|
304:
305: ;
306: $if $(@expr1073742710 $!@expr1073742711 $assertEquals $(@expr1073742712 "cppcheck-2.8/test/testnullpointer.cpp" $, 306 $, "[test.cpp:3] -> [test.cpp:5]: (warning) Either the condition 'tok' is redundant or there is possible null pointer dereference: tok.\n" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
307:
308: $check_ $(@expr1073742715 "cppcheck-2.8/test/testnullpointer.cpp" $, 308 $, "int foo(const Token *tok)\n{\n    while (tok){;}\n}\n" , true $)
309:
310:
311: ;
312: $if $(@expr1073742716 $!@expr1073742717 $assertEquals $(@expr1073742718 "cppcheck-2.8/test/testnullpointer.cpp" $, 312 $, "" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
313:
314: $check_ $(@expr1073742721 "cppcheck-2.8/test/testnullpointer.cpp" $, 314 $, "int foo(const Token *tok)\n{\n    while (tok){;}\n    char a[2] = {0,0};\n}\n" , true $)
315:
316:
317:
318: ;
319: $if $(@expr1073742722 $!@expr1073742723 $assertEquals $(@expr1073742724 "cppcheck-2.8/test/testnullpointer.cpp" $, 319 $, "" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
320:
321: $check_ $(@expr1073742727 "cppcheck-2.8/test/testnullpointer.cpp" $, 321 $, "struct b {\n    b * c;\n    int i;\n}\nvoid a(b * e) {\n  for (b *d = e;d; d = d->c)\n    while (d && d->i == 0)\n      d = d->c;\n  if (!d) throw;\n}" $)
322:
|
329:
330: ;
331: $if $(@expr1073742728 $!@expr1073742729 $assertEquals $(@expr1073742730 "cppcheck-2.8/test/testnullpointer.cpp" $, 331 $, "" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
332:
333: $check_ $(@expr1073742733 "cppcheck-2.8/test/testnullpointer.cpp" $, 333 $, "struct b {\n    b * c;\n    int i;\n};\nvoid f(b* e1, b* e2) {\n    for (const b* d = e1; d != e2; d = d->c) {\n        if (d && d->i != 0) {}\n    }\n}\n" $)
334:
|
340:
341: ;
342: $if $(@expr1073742734 $!@expr1073742735 $assertEquals $(@expr1073742736 "cppcheck-2.8/test/testnullpointer.cpp" $, 342 $, "[test.cpp:7] -> [test.cpp:6]: (warning) Either the condition 'd' is redundant or there is possible null pointer dereference: d.\n" $, errout@var100 .@expr847 str (@expr848 ) $) $) { $return ; }
343: }
344:
345: void nullpointer1 ( ) {
346:
347: $check_ $(@expr1073742739 "cppcheck-2.8/test/testnullpointer.cpp" $, 347 $, "void f(A *a)\n{\n    if (a->x == 1)\n    {\n        a = a->next;\n    }\n    else if (a->x == 2) { }\n    if (a) { }\n}" $)
348:
|
354:
355: ;
356: $if $(@expr1073742740 $!@expr1073742741 $assertEquals $(@expr1073742742 "cppcheck-2.8/test/testnullpointer.cpp" $, 356 $, "" $, errout@var100 .@expr919 str (@expr920 ) $) $) { $return ; }
357:
358:
359: $check_ $(@expr1073742745 "cppcheck-2.8/test/testnullpointer.cpp" $, 359 $, "void f() {\n    int c = 1;\n    int *list = NULL;\n    sizeof(*list);\n    if (!list)\n        ;\n}" , true $)
360:
|
364:
365: ;
366: $if $(@expr1073742746 $!@expr1073742747 $assertEquals $(@expr1073742748 "cppcheck-2.8/test/testnullpointer.cpp" $, 366 $, "" $, errout@var100 .@expr919 str (@expr920 ) $) $) { $return ; }
367:
368:
369: $check_ $(@expr1073742751 "cppcheck-2.8/test/testnullpointer.cpp" $, 369 $, "void f(Bar *p) {\n    if (!p) {\n        int sz = sizeof(p->x);\n    }\n}" , true $)
370:
371:
372:
373: ;
374: $if $(@expr1073742752 $!@expr1073742753 $assertEquals $(@expr1073742754 "cppcheck-2.8/test/testnullpointer.cpp" $, 374 $, "" $, errout@var100 .@expr919 str (@expr920 ) $) $) { $return ; }
375:
376: }
377:
378: void nullpointer2 ( ) {
379:
380: $check_ $(@expr1073742757 "cppcheck-2.8/test/testnullpointer.cpp" $, 380 $, "void foo()\n{\n    Fred fred;\n    while (fred);\n    fred.hello();\n}" , true $)
381:
|
384:
385: ;
386: $if $(@expr1073742758 $!@expr1073742759 $assertEquals $(@expr1073742760 "cppcheck-2.8/test/testnullpointer.cpp" $, 386 $, "" $, errout@var100 .@expr1073742761 str (@expr1073742762 ) $) $) { $return ; }
387: }
388:
|
391:
392: void structDerefAndCheck ( ) {
393:
394:
395:
396: $check_ $(@expr1073742763 "cppcheck-2.8/test/testnullpointer.cpp" $, 396 $, "void foo(struct ABC *abc)\n{\n    int a = abc->a;\n    if (!abc)\n        ;\n}" $)
397:
|
400:
401: ;
402: $if $(@expr1073742764 $!@expr1073742765 $assertEquals $(@expr1073742766 "cppcheck-2.8/test/testnullpointer.cpp" $, 402 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
403:
404: $check_ $(@expr1073742769 "cppcheck-2.8/test/testnullpointer.cpp" $, 404 $, "void foo(struct ABC *abc) {\n    bar(abc->a);\n    bar(x, abc->a);\n    bar(x, y, abc->a);\n    if (!abc)\n        ;\n}" $)
405:
|
409:
410: ;
411: $if $(@expr1073742770 $!@expr1073742771 $assertEquals $(@expr1073742772 "cppcheck-2.8/test/testnullpointer.cpp" $, 411 $, "[test.cpp:5] -> [test.cpp:2]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n[test.cpp:5] -> [test.cpp:4]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return
412:
413: ; }
414:
415: $check_ $(@expr1073742775 "cppcheck-2.8/test/testnullpointer.cpp" $, 415 $, "void foo(ABC *abc) {\n    if (abc->a == 3) {\n        return;\n    }\n    if (abc) {}\n}" $)
416:
|
419:
420: ;
421: $if $(@expr1073742776 $!@expr1073742777 $assertEquals $(@expr1073742778 "cppcheck-2.8/test/testnullpointer.cpp" $, 421 $, "[test.cpp:5] -> [test.cpp:2]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return
422:
423: ; }
424:
425: $check_ $(@expr1073742781 "cppcheck-2.8/test/testnullpointer.cpp" $, 425 $, "void f(ABC *abc) {\n    if (abc->x == 0) {\n        return;\n    }\n    if (!abc);\n}" $)
426:
|
429:
430: ;
431: $if $(@expr1073742782 $!@expr1073742783 $assertEquals $(@expr1073742784 "cppcheck-2.8/test/testnullpointer.cpp" $, 431 $, "[test.cpp:5] -> [test.cpp:2]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
432:
433:
434: $check_ $(@expr1073742787 "cppcheck-2.8/test/testnullpointer.cpp" $, 434 $, "void foo(ABC *abc) {\n    abc->next->a = 0;\n    if (abc->next)\n        ;\n}" $)
435:
436:
437:
438: ;
439: $todoAssertEquals $(@expr1073742788 "cppcheck-2.8/test/testnullpointer.cpp" $, 439 $, "[test.cpp:3] -> [test.cpp:2]: (warning) Possible null pointer dereference: abc - otherwise it is redundant to check it against null.\n" $, "" $, errout@var100 .@expr943 str (@expr944 ) $) ;
440:
441: $check_ $(@expr1073742791 "cppcheck-2.8/test/testnullpointer.cpp" $, 441 $, "void foo(ABC *abc) {\n    abc->a = 0;\n    if (abc && abc->b == 0)\n        ;\n}" $)
442:
443:
444:
445: ;
446: $if $(@expr1073742792 $!@expr1073742793 $assertEquals $(@expr1073742794 "cppcheck-2.8/test/testnullpointer.cpp" $, 446 $, "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return
447:
448: ; }
449:
450:
451: $check_ $(@expr1073742797 "cppcheck-2.8/test/testnullpointer.cpp" $, 451 $, "void foo(struct ABC *abc)\n{\n    if (abc && abc->a);\n    if (!abc)\n        ;\n}" $)
452:
|
455:
456: ;
457: $if $(@expr1073742798 $!@expr1073742799 $assertEquals $(@expr1073742800 "cppcheck-2.8/test/testnullpointer.cpp" $, 457 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
458:
459: $check_ $(@expr1073742803 "cppcheck-2.8/test/testnullpointer.cpp" $, 459 $, "void f(struct ABC *abc) {\n    int x = abc && a(abc->x);\n    if (abc) { }\n}" $)
460:
461:
462: ;
463: $if $(@expr1073742804 $!@expr1073742805 $assertEquals $(@expr1073742806 "cppcheck-2.8/test/testnullpointer.cpp" $, 463 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
464:
465:
466: $check_ $(@expr1073742809 "cppcheck-2.8/test/testnullpointer.cpp" $, 466 $, "void foo(struct ABC *abc)\n{\n    abc = abc->next;\n    if (!abc)\n        ;\n}" , true $)
467:
|
470:
471: ;
472: $if $(@expr1073742810 $!@expr1073742811 $assertEquals $(@expr1073742812 "cppcheck-2.8/test/testnullpointer.cpp" $, 472 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
473:
474: $check_ $(@expr1073742815 "cppcheck-2.8/test/testnullpointer.cpp" $, 474 $, "void f(struct ABC *abc) {\n    abc = (ABC *)(abc->_next);\n    if (abc) { }}" , true $)
475:
476:
477: ;
478: $if $(@expr1073742816 $!@expr1073742817 $assertEquals $(@expr1073742818 "cppcheck-2.8/test/testnullpointer.cpp" $, 478 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
479:
480:
481: $check_ $(@expr1073742821 "cppcheck-2.8/test/testnullpointer.cpp" $, 481 $, "void foo(struct ABC *abc)\n{\n    int a = abc->a;\n    abc = abc->next;\n    if (!abc)\n        ;\n}" , true $)
482:
|
486:
487: ;
488: $if $(@expr1073742822 $!@expr1073742823 $assertEquals $(@expr1073742824 "cppcheck-2.8/test/testnullpointer.cpp" $, 488 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
489:
490: $check_ $(@expr1073742827 "cppcheck-2.8/test/testnullpointer.cpp" $, 490 $, "void foo(struct ABC *abc)\n{\n    int a = abc->a;\n    f(&abc);\n    if (!abc)\n        ;\n}" , true $)
491:
|
495:
496: ;
497: $if $(@expr1073742828 $!@expr1073742829 $assertEquals $(@expr1073742830 "cppcheck-2.8/test/testnullpointer.cpp" $, 497 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
498:
499:
500: $check_ $(@expr1073742833 "cppcheck-2.8/test/testnullpointer.cpp" $, 500 $, "void foo(struct ABC *abc)\n{\n    int a;\n    if (!abc)\n        goto out;    a = abc->a;\n    return;\nout:\n    if (!abc)\n        ;\n}" $)
501:
|
509:
510: ;
511: $if $(@expr1073742834 $!@expr1073742835 $assertEquals $(@expr1073742836 "cppcheck-2.8/test/testnullpointer.cpp" $, 511 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
512:
513:
514: $check_ $(@expr1073742839 "cppcheck-2.8/test/testnullpointer.cpp" $, 514 $, "void foo(struct ABC *abc)\n{\n    int a = abc->a;    do\n    {\n        if (abc)\n            abc = abc->next;\n        --a;\n    }\n    while (a > 0);\n}" $)
515:
|
523:
524: ;
525: $if $(@expr1073742840 $!@expr1073742841 $assertEquals $(@expr1073742842 "cppcheck-2.8/test/testnullpointer.cpp" $, 525 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
526:
527: $check_ $(@expr1073742845 "cppcheck-2.8/test/testnullpointer.cpp" $, 527 $, "void f()\n{\n    for (const Token *tok = _tokenizer->tokens(); tok; tok = tok->next())\n    {\n        while (tok && tok->str() != \"{\")\n            tok = tok->next();\n        if (!tok)\n            return;\n    }\n}" $)
528:
|
535:
536: ;
537: $if $(@expr1073742846 $!@expr1073742847 $assertEquals $(@expr1073742848 "cppcheck-2.8/test/testnullpointer.cpp" $, 537 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
538:
539:
540: $check_ $(@expr1073742851 "cppcheck-2.8/test/testnullpointer.cpp" $, 540 $, "void foo(ABC *abc)\n{\n    int a = abc->a;\n    if (!dynamic_cast<DEF *>(abc))\n        ;\n}" $)
541:
|
544:
545: ;
546: $if $(@expr1073742852 $!@expr1073742853 $assertEquals $(@expr1073742854 "cppcheck-2.8/test/testnullpointer.cpp" $, 546 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
547:
548:
549: $check_ $(@expr1073742857 "cppcheck-2.8/test/testnullpointer.cpp" $, 549 $, "ABC *abc;\nvoid f() {\n    abc->a = 0;\n    do_stuff();\n    if (abc) { }\n}" $)
550:
|
553:
554: ;
555: $if $(@expr1073742858 $!@expr1073742859 $assertEquals $(@expr1073742860 "cppcheck-2.8/test/testnullpointer.cpp" $, 555 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
556:
557: $check_ $(@expr1073742863 "cppcheck-2.8/test/testnullpointer.cpp" $, 557 $, "Fred *fred;\nvoid f() {\n    fred->foo();\n    if (fred) { }\n}" $)
558:
559:
560:
561: ;
562: $if $(@expr1073742864 $!@expr1073742865 $assertEquals $(@expr1073742866 "cppcheck-2.8/test/testnullpointer.cpp" $, 562 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
563:
564:
565: $check_ $(@expr1073742869 "cppcheck-2.8/test/testnullpointer.cpp" $, 565 $, "void f() {\n    ABC *abc = abc1;\n    abc->a = 0;\n    do_stuff();\n    if (abc) { }\n}" $)
566:
|
569:
570: ;
571: $if $(@expr1073742870 $!@expr1073742871 $assertEquals $(@expr1073742872 "cppcheck-2.8/test/testnullpointer.cpp" $, 571 $, "[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return
572:
573: ; }
574:
575:
576: $check_ $(@expr1073742875 "cppcheck-2.8/test/testnullpointer.cpp" $, 576 $, "void f(ABC *abc) {\n    abc->a = 0;\n    do_stuff();\n    if (abc) { }\n}" $)
577:
578:
579:
580: ;
581: $if $(@expr1073742876 $!@expr1073742877 $assertEquals $(@expr1073742878 "cppcheck-2.8/test/testnullpointer.cpp" $, 581 $, "[test.cpp:4] -> [test.cpp:2]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return
582:
583: ; }
584:
585:
586: $check_ $(@expr1073742881 "cppcheck-2.8/test/testnullpointer.cpp" $, 586 $, "void f(ABC *abc) {\n    switch ( x ) {\n        case 14:\n            sprintf(buf, \"%d\", abc->a);\n            break;\n        case 15:\n            if ( abc ) {}\n            break;\n    }\n}" $)
587:
|
594:
595: ;
596: $if $(@expr1073742882 $!@expr1073742883 $assertEquals $(@expr1073742884 "cppcheck-2.8/test/testnullpointer.cpp" $, 596 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
597:
598:
599: $check_ $(@expr1073742887 "cppcheck-2.8/test/testnullpointer.cpp" $, 599 $, "void f(ABC *abc) {\n    x(!abc || y(abc->a));\n    if (abc) {}\n}" $)
600:
601:
602: ;
603: $if $(@expr1073742888 $!@expr1073742889 $assertEquals $(@expr1073742890 "cppcheck-2.8/test/testnullpointer.cpp" $, 603 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
604:
605: $check_ $(@expr1073742893 "cppcheck-2.8/test/testnullpointer.cpp" $, 605 $, "void f(ABC *abc) {\n  x(def || !abc || y(def, abc->a));\n  if (abc) {}\n}" $)
606:
607:
608: ;
609: $if $(@expr1073742894 $!@expr1073742895 $assertEquals $(@expr1073742896 "cppcheck-2.8/test/testnullpointer.cpp" $, 609 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
610:
611: $check_ $(@expr1073742899 "cppcheck-2.8/test/testnullpointer.cpp" $, 611 $, "void f(ABC *abc) {\n  x(abc && y(def, abc->a));\n  if (abc) {}\n}" $)
612:
613:
614: ;
615: $if $(@expr1073742900 $!@expr1073742901 $assertEquals $(@expr1073742902 "cppcheck-2.8/test/testnullpointer.cpp" $, 615 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
616:
617: $check_ $(@expr1073742905 "cppcheck-2.8/test/testnullpointer.cpp" $, 617 $, "void f(ABC *abc) {\n    x(def && abc && y(def, abc->a));\n    if (abc) {}\n}" $)
618:
619:
620: ;
621: $if $(@expr1073742906 $!@expr1073742907 $assertEquals $(@expr1073742908 "cppcheck-2.8/test/testnullpointer.cpp" $, 621 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
622:
623:
624: {
625: const char code@var123 [@expr1073742911 56 ] =@expr1073742912 "void f(Fred *fred) {\n    fred->x();\n    if (fred) { }\n}"
626:
627:
628: ;
629: $check_ $(@expr1073742913 "cppcheck-2.8/test/testnullpointer.cpp" $, 629 $, code@var123 $) ;
630: $if $(@expr1073742914 $!@expr1073742915 $assertEquals $(@expr1073742916 "cppcheck-2.8/test/testnullpointer.cpp" $, 630 $, "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'fred' is redundant or there is possible null pointer dereference: fred.\n" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return
631:
632: ; }
633: }
634:
635:
636: checkP (@expr1073742919 "#define IF if\nvoid f(struct FRED *fred) {\n    fred->x = 0;\n    IF(!fred){}\n}"
637:
638:
639:
640: ) ;
641: $if $(@expr1073742920 $!@expr1073742921 $assertEquals $(@expr1073742922 "cppcheck-2.8/test/testnullpointer.cpp" $, 641 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
642:
643: $check_ $(@expr1073742925 "cppcheck-2.8/test/testnullpointer.cpp" $, 643 $, "void foo() {\n  BUFFER *buffer = get_buffer();\n  if (!buffer)\n    uv_fatal_error();\n  buffer->x = 11;\n}" $)
644:
|
647:
648: ;
649: $if $(@expr1073742926 $!@expr1073742927 $assertEquals $(@expr1073742928 "cppcheck-2.8/test/testnullpointer.cpp" $, 649 $, "" $, errout@var100 .@expr943 str (@expr944 ) $) $) { $return ; }
650: }
651:
652:
653: void pointerDerefAndCheck ( ) {
654:
655:
656:
657: $check_ $(@expr1073742931 "cppcheck-2.8/test/testnullpointer.cpp" $, 657 $, "void foo(int *p)\n{\n    *p = 0;\n    if (!p)\n        ;\n}" $)
658:
|
661:
662: ;
663: $if $(@expr1073742932 $!@expr1073742933 $assertEquals $(@expr1073742934 "cppcheck-2.8/test/testnullpointer.cpp" $, 663 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
664:
665: $check_ $(@expr1073742937 "cppcheck-2.8/test/testnullpointer.cpp" $, 665 $, "void foo(int *p)\n{\n    *p = 0;\n    if (p) { }\n}" $)
666:
667:
668:
669: ;
670: $if $(@expr1073742938 $!@expr1073742939 $assertEquals $(@expr1073742940 "cppcheck-2.8/test/testnullpointer.cpp" $, 670 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return
671:
672: ; }
673:
674: $check_ $(@expr1073742943 "cppcheck-2.8/test/testnullpointer.cpp" $, 674 $, "void foo(int *p)\n{\n    *p = 0;\n    if (p || q) { }\n}" $)
675:
676:
677:
678: ;
679: $if $(@expr1073742944 $!@expr1073742945 $assertEquals $(@expr1073742946 "cppcheck-2.8/test/testnullpointer.cpp" $, 679 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return
680:
681: ; }
682:
683: $check_ $(@expr1073742949 "cppcheck-2.8/test/testnullpointer.cpp" $, 683 $, "void foo(int *p)\n{\n    bar(*p);\n    if (!p)\n        ;\n}" $)
684:
|
687:
688: ;
689: $if $(@expr1073742950 $!@expr1073742951 $assertEquals $(@expr1073742952 "cppcheck-2.8/test/testnullpointer.cpp" $, 689 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
690:
691: $check_ $(@expr1073742955 "cppcheck-2.8/test/testnullpointer.cpp" $, 691 $, "void foo(char *p)\n{\n    strcpy(p, \"abc\");\n    if (!p)\n        ;\n}" $)
692:
|
695:
696: ;
697: $if $(@expr1073742956 $!@expr1073742957 $assertEquals $(@expr1073742958 "cppcheck-2.8/test/testnullpointer.cpp" $, 697 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
698:
699: $check_ $(@expr1073742961 "cppcheck-2.8/test/testnullpointer.cpp" $, 699 $, "void foo(char *p)\n{\n    if (*p == 0) { }\n    if (!p) { }\n}" $)
700:
701:
702:
703: ;
704: $if $(@expr1073742962 $!@expr1073742963 $assertEquals $(@expr1073742964 "cppcheck-2.8/test/testnullpointer.cpp" $, 704 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
705:
706:
707: $check_ $(@expr1073742967 "cppcheck-2.8/test/testnullpointer.cpp" $, 707 $, "void foo()\n{\n    int *p;\n    f(&p);\n    if (!p)\n        ;\n}" $)
708:
|
712:
713: ;
714: $if $(@expr1073742968 $!@expr1073742969 $assertEquals $(@expr1073742970 "cppcheck-2.8/test/testnullpointer.cpp" $, 714 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
715:
716: $check_ $(@expr1073742973 "cppcheck-2.8/test/testnullpointer.cpp" $, 716 $, "void foo()\n{\n    int **p = f();\n    if (!p)\n        ;\n}" , true $)
717:
|
720:
721: ;
722: $if $(@expr1073742974 $!@expr1073742975 $assertEquals $(@expr1073742976 "cppcheck-2.8/test/testnullpointer.cpp" $, 722 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
723:
724: $check_ $(@expr1073742979 "cppcheck-2.8/test/testnullpointer.cpp" $, 724 $, "void foo(int *p)\n{\n    if (x)\n        p = 0;\n    else\n        *p = 0;\n    if (!p)\n        ;\n}" $)
725:
|
731:
732: ;
733: $if $(@expr1073742980 $!@expr1073742981 $assertEquals $(@expr1073742982 "cppcheck-2.8/test/testnullpointer.cpp" $, 733 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
734:
735: $check_ $(@expr1073742985 "cppcheck-2.8/test/testnullpointer.cpp" $, 735 $, "void foo(int x)\n{\n    int a = 2 * x;    if (x == 0)\n        ;\n}" , true $)
736:
|
739:
740: ;
741: $if $(@expr1073742986 $!@expr1073742987 $assertEquals $(@expr1073742988 "cppcheck-2.8/test/testnullpointer.cpp" $, 741 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
742:
743: $check_ $(@expr1073742991 "cppcheck-2.8/test/testnullpointer.cpp" $, 743 $, "void foo(int *p)\n{\n    int var1 = p ? *p : 0;\n    if (!p)\n        ;\n}" $)
744:
|
747:
748: ;
749: $if $(@expr1073742992 $!@expr1073742993 $assertEquals $(@expr1073742994 "cppcheck-2.8/test/testnullpointer.cpp" $, 749 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
750:
751: $check_ $(@expr1073742997 "cppcheck-2.8/test/testnullpointer.cpp" $, 751 $, "void foo(int *p, bool x)\n{\n    int var1 = x ? *p : 5;\n    if (!p)\n        ;\n}" $)
752:
|
755:
756: ;
757: $if $(@expr1073742998 $!@expr1073742999 $assertEquals $(@expr1073743000 "cppcheck-2.8/test/testnullpointer.cpp" $, 757 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return
758:
759: ; }
760:
761:
762: $check_ $(@expr1073743003 "cppcheck-2.8/test/testnullpointer.cpp" $, 762 $, "void f(int *p) {\n    *p = 0;\n    while (p) { p = 0; }\n}" $)
763:
764:
765: ;
766: $if $(@expr1073743004 $!@expr1073743005 $assertEquals $(@expr1073743006 "cppcheck-2.8/test/testnullpointer.cpp" $, 766 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
767:
768: $check_ $(@expr1073743009 "cppcheck-2.8/test/testnullpointer.cpp" $, 768 $, "void f(int *p) {\n    *p = 0;\n    while (p) { }\n}" $)
769:
770:
771: ;
772: $if $(@expr1073743010 $!@expr1073743011 $assertEquals $(@expr1073743012 "cppcheck-2.8/test/testnullpointer.cpp" $, 772 $, "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return
773:
774: ; }
775:
776:
777: $check_ $(@expr1073743015 "cppcheck-2.8/test/testnullpointer.cpp" $, 777 $, "void foo(ABC *p)\n{\n    int var1 = p ? (p->a) : 0;\n    if (!p)\n        ;\n}" $)
778:
|
781:
782: ;
783: $if $(@expr1073743016 $!@expr1073743017 $assertEquals $(@expr1073743018 "cppcheck-2.8/test/testnullpointer.cpp" $, 783 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
784:
785: $check_ $(@expr1073743021 "cppcheck-2.8/test/testnullpointer.cpp" $, 785 $, "void foo(ABC *p)\n{\n    int var1 = p ? (1 + p->a) : 0;\n    if (!p)\n        ;\n}" $)
786:
|
789:
790: ;
791: $if $(@expr1073743022 $!@expr1073743023 $assertEquals $(@expr1073743024 "cppcheck-2.8/test/testnullpointer.cpp" $, 791 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
792:
793: $check_ $(@expr1073743027 "cppcheck-2.8/test/testnullpointer.cpp" $, 793 $, "void f() {\n    int * a=0;\n    if (!a) {};\n    int c = a ? 0 : 1;\n}\n" , true $)
794:
795:
796:
797: ;
798: $if $(@expr1073743028 $!@expr1073743029 $assertEquals $(@expr1073743030 "cppcheck-2.8/test/testnullpointer.cpp" $, 798 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
799:
800:
801: $check_ $(@expr1073743033 "cppcheck-2.8/test/testnullpointer.cpp" $, 801 $, "void f() {\n    int * a=0;\n    if (!a) {};\n    int c = a ? b : b+1;\n}\n" , true $)
802:
803:
804:
805: ;
806: $if $(@expr1073743034 $!@expr1073743035 $assertEquals $(@expr1073743036 "cppcheck-2.8/test/testnullpointer.cpp" $, 806 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
807:
808: $check_ $(@expr1073743039 "cppcheck-2.8/test/testnullpointer.cpp" $, 808 $, "void f() {\n    int * a=0;\n    if (!a) {};\n    int c = (a) ? b : b+1;\n}\n" , true $)
809:
810:
811:
812: ;
813: $if $(@expr1073743040 $!@expr1073743041 $assertEquals $(@expr1073743042 "cppcheck-2.8/test/testnullpointer.cpp" $, 813 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
814:
815: $check_ $(@expr1073743045 "cppcheck-2.8/test/testnullpointer.cpp" $, 815 $, "void foo(P *p)\n{\n  while (p)\n    if (p->check())\n      break;\n    else\n      p = p->next();\n}" $)
816:
|
821:
822: ;
823: $if $(@expr1073743046 $!@expr1073743047 $assertEquals $(@expr1073743048 "cppcheck-2.8/test/testnullpointer.cpp" $, 823 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
824:
825: $check_ $(@expr1073743051 "cppcheck-2.8/test/testnullpointer.cpp" $, 825 $, "void f(Document *doc) {\n    int x = doc && doc->x;\n    if (!doc) {\n        return;\n    }\n}" $)
826:
|
829:
830: ;
831: $if $(@expr1073743052 $!@expr1073743053 $assertEquals $(@expr1073743054 "cppcheck-2.8/test/testnullpointer.cpp" $, 831 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
832:
833:
834: $check_ $(@expr1073743057 "cppcheck-2.8/test/testnullpointer.cpp" $, 834 $, "void f(int *p) {\n    assert(!p || (*p<=6));\n    if (p) { *p = 0; }\n}" $)
835:
836:
837: ;
838: $if $(@expr1073743058 $!@expr1073743059 $assertEquals $(@expr1073743060 "cppcheck-2.8/test/testnullpointer.cpp" $, 838 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
839:
840: $check_ $(@expr1073743063 "cppcheck-2.8/test/testnullpointer.cpp" $, 840 $, "void f(int *p) {\n    assert(p && (*p<=6));\n    if (p) { *p = 0; }\n}" $)
841:
842:
843: ;
844: $if $(@expr1073743064 $!@expr1073743065 $assertEquals $(@expr1073743066 "cppcheck-2.8/test/testnullpointer.cpp" $, 844 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
845:
846: $check_ $(@expr1073743069 "cppcheck-2.8/test/testnullpointer.cpp" $, 846 $, "void f(int *p) {\n    *p = 12;\n    assert(p && (*p<=6));\n    if (p) { *p = 0; }\n}" $)
847:
848:
849:
850: ;
851: $if $(@expr1073743070 $!@expr1073743071 $assertEquals $(@expr1073743072 "cppcheck-2.8/test/testnullpointer.cpp" $, 851 $, "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return
852:
853: ; }
854:
855: $check_ $(@expr1073743075 "cppcheck-2.8/test/testnullpointer.cpp" $, 855 $, "void foo(x *p)\n{\n    p = p->next;\n    if (!p)\n        ;\n}" $)
856:
|
859:
860: ;
861: $if $(@expr1073743076 $!@expr1073743077 $assertEquals $(@expr1073743078 "cppcheck-2.8/test/testnullpointer.cpp" $, 861 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
862:
863: $check_ $(@expr1073743081 "cppcheck-2.8/test/testnullpointer.cpp" $, 863 $, "void foo(x *p)\n{\n    p = bar(p->next);\n    if (!p)\n        ;\n}" $)
864:
|
867:
868: ;
869: $if $(@expr1073743082 $!@expr1073743083 $assertEquals $(@expr1073743084 "cppcheck-2.8/test/testnullpointer.cpp" $, 869 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
870:
871: $check_ $(@expr1073743087 "cppcheck-2.8/test/testnullpointer.cpp" $, 871 $, "void foo(x *p)\n{\n    p = aa->bar(p->next);\n    if (!p)\n        ;\n}" $)
872:
|
875:
876: ;
877: $if $(@expr1073743088 $!@expr1073743089 $assertEquals $(@expr1073743090 "cppcheck-2.8/test/testnullpointer.cpp" $, 877 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
878:
879: $check_ $(@expr1073743093 "cppcheck-2.8/test/testnullpointer.cpp" $, 879 $, "void foo(x *p)\n{\n    p = *p2 = p->next;\n    if (!p)\n        ;\n}" $)
880:
|
883:
884: ;
885: $if $(@expr1073743094 $!@expr1073743095 $assertEquals $(@expr1073743096 "cppcheck-2.8/test/testnullpointer.cpp" $, 885 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
886:
887: $check_ $(@expr1073743099 "cppcheck-2.8/test/testnullpointer.cpp" $, 887 $, "void foo(struct ABC *abc)\n{\n    abc = abc ? abc->next : 0;\n    if (!abc)\n        ;\n}" $)
888:
|
891:
892: ;
893: $if $(@expr1073743100 $!@expr1073743101 $assertEquals $(@expr1073743102 "cppcheck-2.8/test/testnullpointer.cpp" $, 893 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
894:
895: $check_ $(@expr1073743105 "cppcheck-2.8/test/testnullpointer.cpp" $, 895 $, "void f(struct ABC *abc) {\n    abc = (*abc).next;\n    if (abc) { }\n}" $)
896:
897:
898: ;
899: $if $(@expr1073743106 $!@expr1073743107 $assertEquals $(@expr1073743108 "cppcheck-2.8/test/testnullpointer.cpp" $, 899 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
900:
901: $check_ $(@expr1073743111 "cppcheck-2.8/test/testnullpointer.cpp" $, 901 $, "void f(struct ABC *abc) {\n    abc = (*abc->ptr);\n    if (abc) { }\n}" $)
902:
903:
904: ;
905: $if $(@expr1073743112 $!@expr1073743113 $assertEquals $(@expr1073743114 "cppcheck-2.8/test/testnullpointer.cpp" $, 905 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
906:
907: $check_ $(@expr1073743117 "cppcheck-2.8/test/testnullpointer.cpp" $, 907 $, "int f(Item *item) {\n    x = item ? ab(item->x) : 0;\n    if (item) { }\n}" $)
908:
909:
910: ;
911: $if $(@expr1073743118 $!@expr1073743119 $assertEquals $(@expr1073743120 "cppcheck-2.8/test/testnullpointer.cpp" $, 911 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
912:
913: $check_ $(@expr1073743123 "cppcheck-2.8/test/testnullpointer.cpp" $, 913 $, "int f(Item *item) {\n    item->x = 0;\n    a = b ? c : d;\n    if (item) { }\n}" $)
914:
915:
916:
917: ;
918: $if $(@expr1073743124 $!@expr1073743125 $assertEquals $(@expr1073743126 "cppcheck-2.8/test/testnullpointer.cpp" $, 918 $, "[test.cpp:4] -> [test.cpp:2]: (warning) Either the condition 'item' is redundant or there is possible null pointer dereference: item.\n" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return
919:
920: ; }
921:
922: $check_ $(@expr1073743129 "cppcheck-2.8/test/testnullpointer.cpp" $, 922 $, "BOOL GotoFlyAnchor()\n{\n    const SwFrm* pFrm = GetCurrFrm();\n    do {\n        pFrm = pFrm->GetUpper();\n    } while( pFrm && !pFrm->IsFlyFrm() );\n\n    if( !pFrm )\n        return FALSE;\n}" $)
923:
|
930:
931: ;
932: $if $(@expr1073743130 $!@expr1073743131 $assertEquals $(@expr1073743132 "cppcheck-2.8/test/testnullpointer.cpp" $, 932 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
933:
934:
935: $check_ $(@expr1073743135 "cppcheck-2.8/test/testnullpointer.cpp" $, 935 $, "struct A\n{\n    B* W;\n\n    void f() {\n        switch (InData) {\n            case 2:\n                if (!W) return;\n                W->foo();\n                break;\n            case 3:\n                f();\n                if (!W) return;\n                break;\n        }\n    }\n}" $)
936:
|
950:
951: ;
952: $if $(@expr1073743136 $!@expr1073743137 $assertEquals $(@expr1073743138 "cppcheck-2.8/test/testnullpointer.cpp" $, 952 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
953:
954:
955: $check_ $(@expr1073743141 "cppcheck-2.8/test/testnullpointer.cpp" $, 955 $, "void f() {\n    int *test = NULL;\n    int c = sizeof(test[0]);\n    if (!test)\n        ;\n}" , true $)
956:
|
959:
960: ;
961: $if $(@expr1073743142 $!@expr1073743143 $assertEquals $(@expr1073743144 "cppcheck-2.8/test/testnullpointer.cpp" $, 961 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
962:
963: $check_ $(@expr1073743147 "cppcheck-2.8/test/testnullpointer.cpp" $, 963 $, "void f(type* p) {\n    x(sizeof p[0]);\n    if (!p)\n        ;\n}" $)
964:
965:
966:
967: ;
968: $if $(@expr1073743148 $!@expr1073743149 $assertEquals $(@expr1073743150 "cppcheck-2.8/test/testnullpointer.cpp" $, 968 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
969:
970:
971: $check_ $(@expr1073743153 "cppcheck-2.8/test/testnullpointer.cpp" $, 971 $, "void f(struct ABC *abc) {\n  WARN_ON(!abc || abc->x == 0);\n  if (!abc) { }\n}" $)
972:
973:
974: ;
975: $if $(@expr1073743154 $!@expr1073743155 $assertEquals $(@expr1073743156 "cppcheck-2.8/test/testnullpointer.cpp" $, 975 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
976: $check_ $(@expr1073743159 "cppcheck-2.8/test/testnullpointer.cpp" $, 976 $, "void f(struct ABC *abc) {\n  WARN_ON(!abc || abc->x == 7);\n  if (!abc) { }\n}" $)
977:
978:
979: ;
980: $if $(@expr1073743160 $!@expr1073743161 $assertEquals $(@expr1073743162 "cppcheck-2.8/test/testnullpointer.cpp" $, 980 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
981:
982:
983: checkP (@expr1073743165 "#define IF if\nvoid f(int *p) {\n    *p = 0;\n    IF(!p){}\n}"
984:
985:
986:
987: ) ;
988: $if $(@expr1073743166 $!@expr1073743167 $assertEquals $(@expr1073743168 "cppcheck-2.8/test/testnullpointer.cpp" $, 988 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
989:
990: $check_ $(@expr1073743171 "cppcheck-2.8/test/testnullpointer.cpp" $, 990 $, "void f() {\n    int *p;\n    ((p=ret()) && (x=*p));\n    if (p);\n}" $)
991:
992:
993:
994: ;
995: $if $(@expr1073743172 $!@expr1073743173 $assertEquals $(@expr1073743174 "cppcheck-2.8/test/testnullpointer.cpp" $, 995 $, "" $, errout@var100 .@expr1111 str (@expr1112 ) $) $) { $return ; }
996: }
997:
998: void nullpointer5 ( ) {
999:
1000: $check_ $(@expr1073743177 "cppcheck-2.8/test/testnullpointer.cpp" $, 1000 $, "void foo(A &a)\n{\n char c = a.c();\n if (!a)\n   return;\n}" $)
1001:
|
1004:
1005: ;
1006: $if $(@expr1073743178 $!@expr1073743179 $assertEquals $(@expr1073743180 "cppcheck-2.8/test/testnullpointer.cpp" $, 1006 $, "" $, errout@var100 .@expr1073743181 str (@expr1073743182 ) $) $) { $return ; }
1007: }
1008:
1009:
1010: void nullpointerExecutionPaths ( ) {
1011:
1012: $check_ $(@expr1073743183 "cppcheck-2.8/test/testnullpointer.cpp" $, 1012 $, "static void foo()\n{\n    Foo *p = 0;\n    if (a == 1) {\n        p = new FooBar;\n    } else { if (a == 2) {\n        p = new FooCar; } }\n    p->abcd();\n}" $)
1013:
|
1019:
1020: ;
1021: $todoAssertEquals $(@expr1073743184 "cppcheck-2.8/test/testnullpointer.cpp" $, 1021 $, "[test.cpp:8]: (error) Possible null pointer dereference: p\n" $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $)
1022: ;
1023:
1024: $check_ $(@expr1073743187 "cppcheck-2.8/test/testnullpointer.cpp" $, 1024 $, "static void foo() {\n    int &r = *(int*)0;\n}" $)
1025:
1026: ;
1027: $if $(@expr1073743188 $!@expr1073743189 $assertEquals $(@expr1073743190 "cppcheck-2.8/test/testnullpointer.cpp" $, 1027 $, "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1028:
1029: $check_ $(@expr1073743193 "cppcheck-2.8/test/testnullpointer.cpp" $, 1029 $, "static void foo(int x) {\n    int y = 5 + *(int*)0;\n}" $)
1030:
1031: ;
1032: $if $(@expr1073743194 $!@expr1073743195 $assertEquals $(@expr1073743196 "cppcheck-2.8/test/testnullpointer.cpp" $, 1032 $, "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1033:
1034: {
1035: const char code@var124 [@expr1073743199 60 ] =@expr1073743200 "static void foo() {\n    Foo<int> *abc = 0;\n    abc->a();\n}\n"
1036:
1037:
1038: ;
1039:
1040: $check_ $(@expr1073743201 "cppcheck-2.8/test/testnullpointer.cpp" $, 1040 $, code@var124 $) ;
1041: $if $(@expr1073743202 $!@expr1073743203 $assertEquals $(@expr1073743204 "cppcheck-2.8/test/testnullpointer.cpp" $, 1041 $, "[test.cpp:3]: (error) Null pointer dereference: abc\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1042: }
1043:
1044: $check_ $(@expr1073743207 "cppcheck-2.8/test/testnullpointer.cpp" $, 1044 $, "static void foo() {\n    std::cout << *(int*)0;}" $)
1045:
1046: ;
1047: $if $(@expr1073743208 $!@expr1073743209 $assertEquals $(@expr1073743210 "cppcheck-2.8/test/testnullpointer.cpp" $, 1047 $, "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1048:
1049: $check_ $(@expr1073743213 "cppcheck-2.8/test/testnullpointer.cpp" $, 1049 $, "void f()\n{\n    char *c = 0;\n    {\n        delete c;\n    }\n    c[0] = 0;\n}" $)
1050:
|
1055:
1056: ;
1057: $if $(@expr1073743214 $!@expr1073743215 $assertEquals $(@expr1073743216 "cppcheck-2.8/test/testnullpointer.cpp" $, 1057 $, "[test.cpp:7]: (error) Null pointer dereference: c\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1058:
1059: $check_ $(@expr1073743219 "cppcheck-2.8/test/testnullpointer.cpp" $, 1059 $, "static void foo() {\n    if (3 > *(int*)0);\n}" $)
1060:
1061: ;
1062: $if $(@expr1073743220 $!@expr1073743221 $assertEquals $(@expr1073743222 "cppcheck-2.8/test/testnullpointer.cpp" $, 1062 $, "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1063:
1064:
1065: $check_ $(@expr1073743225 "cppcheck-2.8/test/testnullpointer.cpp" $, 1065 $, "static void foo()\n{\n    Foo *p = 0;\n    p = new Foo;\n    p->abcd();\n}" $)
1066:
|
1069:
1070: ;
1071: $if $(@expr1073743226 $!@expr1073743227 $assertEquals $(@expr1073743228 "cppcheck-2.8/test/testnullpointer.cpp" $, 1071 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1072:
1073: $check_ $(@expr1073743231 "cppcheck-2.8/test/testnullpointer.cpp" $, 1073 $, "void foo()\n{\n    int sz = sizeof((*(struct dummy *)0).x);\n}" $)
1074:
1075:
1076: ;
1077: $if $(@expr1073743232 $!@expr1073743233 $assertEquals $(@expr1073743234 "cppcheck-2.8/test/testnullpointer.cpp" $, 1077 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1078:
1079: $check_ $(@expr1073743237 "cppcheck-2.8/test/testnullpointer.cpp" $, 1079 $, "void get_offset(long &offset)\n{\n    mystruct * temp; temp = 0;\n    offset = (long)(&(temp->z));\n}" $)
1080:
1081:
1082:
1083: ;
1084: $if $(@expr1073743238 $!@expr1073743239 $assertEquals $(@expr1073743240 "cppcheck-2.8/test/testnullpointer.cpp" $, 1084 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1085:
1086:
1087: $check_ $(@expr1073743243 "cppcheck-2.8/test/testnullpointer.cpp" $, 1087 $, "int *test(int *Z)\n{\n    int *Q=NULL;\n    if (Z) {\n        Q = Z;\n    }\n    else {\n        Z = new int;\n        try {\n        } catch(...) {\n        }\n        Q = Z;\n    }\n    *Q=1;\n    return Q;\n}" $)
1088:
|
1101:
1102: ;
1103: $if $(@expr1073743244 $!@expr1073743245 $assertEquals $(@expr1073743246 "cppcheck-2.8/test/testnullpointer.cpp" $, 1103 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1104:
1105: $check_ $(@expr1073743249 "cppcheck-2.8/test/testnullpointer.cpp" $, 1105 $, "int *test(int *Z)\n{\n    int *Q=NULL;\n    if (Z) {\n        Q = Z;\n    }\n    else {\n        try {\n        } catch(...) {\n        }\n    }\n    *Q=1;\n    return Q;\n}" $)
1106:
|
1117:
1118: ;
1119: $if $(@expr1073743250 $!@expr1073743251 $assertEquals $(@expr1073743252 "cppcheck-2.8/test/testnullpointer.cpp" $, 1119 $, "[test.cpp:12]: (warning) Possible null pointer dereference: Q\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1120:
1121:
1122: $check_ $(@expr1073743255 "cppcheck-2.8/test/testnullpointer.cpp" $, 1122 $, "void f() {\n    for (int x = 0; x < 5; ++x) {        int *p = 0;\n        if (a(x)) p=b(x);\n        else continue;\n        *p = 0;\n    }\n}" $)
1123:
|
1128:
1129: ;
1130: $if $(@expr1073743256 $!@expr1073743257 $assertEquals $(@expr1073743258 "cppcheck-2.8/test/testnullpointer.cpp" $, 1130 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1131:
1132:
1133: $check_ $(@expr1073743261 "cppcheck-2.8/test/testnullpointer.cpp" $, 1133 $, "void foo()\n{\n    void (*f)();\n    f = 0;\n    f();\n}" $)
1134:
|
1137:
1138: ;
1139: $if $(@expr1073743262 $!@expr1073743263 $assertEquals $(@expr1073743264 "cppcheck-2.8/test/testnullpointer.cpp" $, 1139 $, "[test.cpp:5]: (error) Null pointer dereference: f\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1140:
1141: $check_ $(@expr1073743267 "cppcheck-2.8/test/testnullpointer.cpp" $, 1141 $, "int* g();\nint* f() {\n    static int* (*fun)() = 0;\n    if (!fun)\n        fun = g;\n    return fun();\n}\n" $)
1142:
|
1146:
1147: ;
1148: $if $(@expr1073743268 $!@expr1073743269 $assertEquals $(@expr1073743270 "cppcheck-2.8/test/testnullpointer.cpp" $, 1148 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1149:
1150:
1151: $check_ $(@expr1073743273 "cppcheck-2.8/test/testnullpointer.cpp" $, 1151 $, "void f() {\n    int *p = 0;\n    for (int i = 0; i < 10; ++i) {\n        int x = *p + 1;\n    }\n}" $)
1152:
|
1155:
1156: ;
1157: $if $(@expr1073743274 $!@expr1073743275 $assertEquals $(@expr1073743276 "cppcheck-2.8/test/testnullpointer.cpp" $, 1157 $, "[test.cpp:4]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1158:
1159: $check_ $(@expr1073743279 "cppcheck-2.8/test/testnullpointer.cpp" $, 1159 $, "void f(int a) {\n    const char *p = 0;\n    if (a) {\n        p = \"abcd\";\n    }\n    for (int i = 0; i < 3; i++) {\n        if (a && (p[i] == '1'));\n    }\n}" , true $)
1160:
|
1166:
1167: ;
1168: $if $(@expr1073743280 $!@expr1073743281 $assertEquals $(@expr1073743282 "cppcheck-2.8/test/testnullpointer.cpp" $, 1168 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1169:
1170:
1171: $check_ $(@expr1073743285 "cppcheck-2.8/test/testnullpointer.cpp" $, 1171 $, "void f() {\n    Fred *fred = 0;\n    int x = &fred->x;\n}" , true $)
1172:
1173:
1174: ;
1175: $if $(@expr1073743286 $!@expr1073743287 $assertEquals $(@expr1073743288 "cppcheck-2.8/test/testnullpointer.cpp" $, 1175 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1176:
1177:
1178: $check_ $(@expr1073743291 "cppcheck-2.8/test/testnullpointer.cpp" $, 1178 $, "void f() {\n    Fred *fred = NULL;\n    fred->do_something();\n}" $)
1179:
1180:
1181: ;
1182: $if $(@expr1073743292 $!@expr1073743293 $assertEquals $(@expr1073743294 "cppcheck-2.8/test/testnullpointer.cpp" $, 1182 $, "[test.cpp:3]: (error) Null pointer dereference: fred\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1183:
1184:
1185: {
1186: $check_ $(@expr1073743297 "cppcheck-2.8/test/testnullpointer.cpp" $, 1186 $, "void f() {\n    int *p = NULL;\n    if (x)\n        p = q;\n    if (p && *p) { }\n}" , true $)
1187:
|
1190:
1191: ;
1192: $if $(@expr1073743298 $!@expr1073743299 $assertEquals $(@expr1073743300 "cppcheck-2.8/test/testnullpointer.cpp" $, 1192 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1193: $check_ $(@expr1073743303 "cppcheck-2.8/test/testnullpointer.cpp" $, 1193 $, "void f() {\n    int *p = NULL;\n    if (x)\n        p = q;\n    if (!p || *p) { }\n}" , true $)
1194:
|
1197:
1198: ;
1199: $if $(@expr1073743304 $!@expr1073743305 $assertEquals $(@expr1073743306 "cppcheck-2.8/test/testnullpointer.cpp" $, 1199 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1200: $check_ $(@expr1073743309 "cppcheck-2.8/test/testnullpointer.cpp" $, 1200 $, "void f() {\n    int *p = NULL;\n    if (x)\n        p = q;\n    if (p || *p) { }\n}" $)
1201:
|
1204:
1205: ;
1206: $if $(@expr1073743310 $!@expr1073743311 $assertEquals $(@expr1073743312 "cppcheck-2.8/test/testnullpointer.cpp" $, 1206 $, "[test.cpp:5]: (warning) Possible null pointer dereference: p\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1207: }
1208:
1209:
1210: {
1211: $check_ $(@expr1073743315 "cppcheck-2.8/test/testnullpointer.cpp" $, 1211 $, "void f(int *p, int *q) {\n    if (p == NULL)\n        return;\n    else if (q == NULL)\n        return;\n    *q = 0;\n}\n\nvoid g() {\n    f(NULL, NULL);\n}" , true $)
1212:
|
1220:
1221: ;
1222: $if $(@expr1073743316 $!@expr1073743317 $assertEquals $(@expr1073743318 "cppcheck-2.8/test/testnullpointer.cpp" $, 1222 $, "" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1223: }
1224:
1225: $check_ $(@expr1073743321 "cppcheck-2.8/test/testnullpointer.cpp" $, 1225 $, "void f() {\n    int* const crash = 0;\n    *crash = 0;\n}\n" $)
1226:
1227:
1228: ;
1229: $if $(@expr1073743322 $!@expr1073743323 $assertEquals $(@expr1073743324 "cppcheck-2.8/test/testnullpointer.cpp" $, 1229 $, "[test.cpp:3]: (error) Null pointer dereference: crash\n" $, errout@var100 .@expr1361 str (@expr1362 ) $) $) { $return ; }
1230: }
1231:
1232:
1233: void nullpointerExecutionPathsLoop ( ) {
1234:
1235: $check_ $(@expr1073743327 "cppcheck-2.8/test/testnullpointer.cpp" $, 1235 $, "void foo() {\n    int n;\n    int *argv32 = p;\n    if (x) {\n        n = 0;\n        argv32 = 0;\n    }\n\n    for (int i = 0; i < n; i++) {\n        argv32[i] = 0;\n    }\n}" $)
1236:
|
1245:
1246: ;
1247: $if $(@expr1073743328 $!@expr1073743329 $assertEquals $(@expr1073743330 "cppcheck-2.8/test/testnullpointer.cpp" $, 1247 $, "" $, errout@var100 .@expr1507 str (@expr1508 ) $) $) { $return ; }
1248:
1249:
1250: $check_ $(@expr1073743333 "cppcheck-2.8/test/testnullpointer.cpp" $, 1250 $, "void foo() {\n    int n;\n    int *argv32;\n    if (x) {\n        n = 10;\n        argv32 = 0;\n    }\n\n    for (int i = 0; i < n; i++) {\n        argv32[i] = 0;\n    }\n}" $)
1251:
|
1260:
1261: ;
1262: $if $(@expr1073743334 $!@expr1073743335 $assertEquals $(@expr1073743336 "cppcheck-2.8/test/testnullpointer.cpp" $, 1262 $, "[test.cpp:10]: (warning) Possible null pointer dereference: argv32\n" $, errout@var100 .@expr1507 str (@expr1508 ) $) $) { $return ; }
1263:
1264:
1265:
1266: $check_ $(@expr1073743339 "cppcheck-2.8/test/testnullpointer.cpp" $, 1266 $, "void f() {\n    char *p = 0;\n\n    for (int x = 0; x < 3; ++x) {\n        if (y[x] == 0) {\n            p = (char *)malloc(10);\n            break;\n        }\n    }\n\n    *p = 0;\n}" $)
1267:
|
1276:
1277: ;
1278: $if $(@expr1073743340 $!@expr1073743341 $assertEquals $(@expr1073743342 "cppcheck-2.8/test/testnullpointer.cpp" $, 1278 $, "[test.cpp:11]: (warning) Possible null pointer dereference: p\n" $, errout@var100 .@expr1507 str (@expr1508 ) $) $) { $return ; }
1279: }
1280:
1281: void nullpointer7 ( ) {
1282: $check_ $(@expr1073743345 "cppcheck-2.8/test/testnullpointer.cpp" $, 1282 $, "void foo()\n{\n  wxLongLong x = 0;\n  int y = x.GetValue();\n}" , true $)
1283:
1284:
1285:
1286: ;
1287: $if $(@expr1073743346 $!@expr1073743347 $assertEquals $(@expr1073743348 "cppcheck-2.8/test/testnullpointer.cpp" $, 1287 $, "" $, errout@var100 .@expr1073743349 str (@expr1073743350 ) $) $) { $return ; }
1288: }
1289:
1290: void nullpointer9 ( ) {
1291: $check_ $(@expr1073743351 "cppcheck-2.8/test/testnullpointer.cpp" $, 1291 $, "void foo()\n{\n  std::string * x = 0;\n  *x = \"test\";\n}" $)
1292:
1293:
1294:
1295: ;
1296: $if $(@expr1073743352 $!@expr1073743353 $assertEquals $(@expr1073743354 "cppcheck-2.8/test/testnullpointer.cpp" $, 1296 $, "[test.cpp:4]: (error) Null pointer dereference: x\n" $, errout@var100 .@expr1073743355 str (@expr1073743356 ) $) $) { $return ; }
1297: }
1298:
1299: void nullpointer10 ( ) {
1300:
1301: $check_ $(@expr1073743357 "cppcheck-2.8/test/testnullpointer.cpp" $, 1301 $, "void foo()\n{\n  struct my_type* p = 0;\n  p->x = 0;\n}" $)
1302:
1303:
1304:
1305: ;
1306: $if $(@expr1073743358 $!@expr1073743359 $assertEquals $(@expr1073743360 "cppcheck-2.8/test/testnullpointer.cpp" $, 1306 $, "[test.cpp:4]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr1073743361 str (@expr1073743362 ) $) $) { $return ; }
1307: }
1308:
1309: void nullpointer11 ( ) {
1310:
1311:
1312: $check_ $(@expr1073743363 "cppcheck-2.8/test/testnullpointer.cpp" $, 1312 $, "int foo()\n{\n  struct my_type* p;\n  p = 0;\n  return p->x;\n}" $)
1313:
|
1316:
1317: ;
1318: $if $(@expr1073743364 $!@expr1073743365 $assertEquals $(@expr1073743366 "cppcheck-2.8/test/testnullpointer.cpp" $, 1318 $, "[test.cpp:5]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr1073743367 str (@expr1073743368 ) $) $) { $return ; }
1319: }
1320:
1321: void nullpointer12 ( ) {
1322: const char code@var125 [@expr1073743369 48 ] =@expr1073743370 "int foo()\n{\n  int* i = nullptr;\n  return *i;\n}\n"
1323:
1324:
1325:
1326: ;
1327:
1328: $check_ $(@expr1073743371 "cppcheck-2.8/test/testnullpointer.cpp" $, 1328 $, code@var125 , false , "test.cpp" $) ;
1329: $if $(@expr1073743372 $!@expr1073743373 $assertEquals $(@expr1073743374 "cppcheck-2.8/test/testnullpointer.cpp" $, 1329 $, "[test.cpp:4]: (error) Null pointer dereference: i\n" $, errout@var100 .@expr1551 str (@expr1552 ) $) $) { $return ; }
1330:
1331: $check_ $(@expr1073743377 "cppcheck-2.8/test/testnullpointer.cpp" $, 1331 $, code@var125 , false , "test.c" $) ;
1332: $if $(@expr1073743378 $!@expr1073743379 $assertEquals $(@expr1073743380 "cppcheck-2.8/test/testnullpointer.cpp" $, 1332 $, "" $, errout@var100 .@expr1551 str (@expr1552 ) $) $) { $return ; }
1333: }
1334:
1335: void nullpointer15 ( ) {
1336: $check_ $(@expr1073743383 "cppcheck-2.8/test/testnullpointer.cpp" $, 1336 $, "void f() {\n    char *p = 0;\n    if (x) p = \"abcd\";\n    return p ? f(*p) : f(0);\n}" $)
1337:
1338:
1339:
1340: ;
1341: $if $(@expr1073743384 $!@expr1073743385 $assertEquals $(@expr1073743386 "cppcheck-2.8/test/testnullpointer.cpp" $, 1341 $, "" $, errout@var100 .@expr1073743387 str (@expr1073743388 ) $) $) { $return ; }
1342: }
1343:
1344: void nullpointer16 ( ) {
1345: $check_ $(@expr1073743389 "cppcheck-2.8/test/testnullpointer.cpp" $, 1345 $, "void foo() {\n    int *p = 0;\n    bar(&p);\n    *p = 0;\n}" , true $)
1346:
1347:
1348:
1349: ;
1350: $if $(@expr1073743390 $!@expr1073743391 $assertEquals $(@expr1073743392 "cppcheck-2.8/test/testnullpointer.cpp" $, 1350 $, "" $, errout@var100 .@expr1073743393 str (@expr1073743394 ) $) $) { $return ; }
1351: }
1352:
1353: void nullpointer17 ( ) {
1354: $check_ $(@expr1073743395 "cppcheck-2.8/test/testnullpointer.cpp" $, 1354 $, "int foo() {\n    int *p = 0;\n    if (x) { return 0; }\n    return !p || *p;\n}" , true $)
1355:
1356:
1357:
1358: ;
1359: $if $(@expr1073743396 $!@expr1073743397 $assertEquals $(@expr1073743398 "cppcheck-2.8/test/testnullpointer.cpp" $, 1359 $, "" $, errout@var100 .@expr1575 str (@expr1576 ) $) $) { $return ; }
1360:
1361: $check_ $(@expr1073743401 "cppcheck-2.8/test/testnullpointer.cpp" $, 1361 $, "int foo() {\n    int *p = 0;\n    if (x) { return 0; }\n    return p && *p;\n}" , true $)
1362:
1363:
1364:
1365: ;
1366: $if $(@expr1073743402 $!@expr1073743403 $assertEquals $(@expr1073743404 "cppcheck-2.8/test/testnullpointer.cpp" $, 1366 $, "" $, errout@var100 .@expr1575 str (@expr1576 ) $) $) { $return ; }
1367: }
1368:
1369: void nullpointer18 ( ) {
1370: $check_ $(@expr1073743407 "cppcheck-2.8/test/testnullpointer.cpp" $, 1370 $, "void f ()\n{\n  int i=0;\n  char *str=NULL;\n  while (str[i])\n  {\n    i++;\n  };\n}" $)
1371:
|
1377:
1378: ;
1379: $if $(@expr1073743408 $!@expr1073743409 $assertEquals $(@expr1073743410 "cppcheck-2.8/test/testnullpointer.cpp" $, 1379 $, "[test.cpp:5]: (error) Null pointer dereference: str\n" $, errout@var100 .@expr1073743411 str (@expr1073743412 ) $) $) { $return ; }
1380: }
1381:
1382: void nullpointer19 ( ) {
1383: $check_ $(@expr1073743413 "cppcheck-2.8/test/testnullpointer.cpp" $, 1383 $, "int foo() {\n    perror(0);\n}" , true $)
1384:
1385: ;
1386: $if $(@expr1073743414 $!@expr1073743415 $assertEquals $(@expr1073743416 "cppcheck-2.8/test/testnullpointer.cpp" $, 1386 $, "" $, errout@var100 .@expr1073743417 str (@expr1073743418 ) $) $) { $return ; }
1387: }
1388:
1389: void nullpointer20 ( ) {
1390: $check_ $(@expr1073743419 "cppcheck-2.8/test/testnullpointer.cpp" $, 1390 $, "void f(int x) {\n    struct xy *p = 0;\n    if (x) p = q;\n    if (p ? p->x || p->y : 0) { }\n}" $)
1391:
1392:
1393:
1394: ;
1395: $if $(@expr1073743420 $!@expr1073743421 $assertEquals $(@expr1073743422 "cppcheck-2.8/test/testnullpointer.cpp" $, 1395 $, "" $, errout@var100 .@expr1599 str (@expr1600 ) $) $) { $return ; }
1396:
1397: $check_ $(@expr1073743425 "cppcheck-2.8/test/testnullpointer.cpp" $, 1397 $, "void f(int x) {\n    struct xy *p = 0;\n    if (x) p = q;\n    if (y ? p->x : p->y) { }\n}" $)
1398:
1399:
1400:
1401: ;
1402: $todoAssertEquals $(@expr1073743426 "cppcheck-2.8/test/testnullpointer.cpp" $, 1402 $, "[test.cpp:4]: (warning) Possible null pointer dereference: p\n" $, "" $, errout@var100 .@expr1599 str (@expr1600 ) $) ;
1403: }
1404:
1405: void nullpointer21 ( ) {
1406: $check_ $(@expr1073743429 "cppcheck-2.8/test/testnullpointer.cpp" $, 1406 $, "void f(int x) {\n    int *p = 0;\n    if (x) p = q;\n    else return;\n    *p = 0;\n}" $)
1407:
|
1410:
1411: ;
1412: $if $(@expr1073743430 $!@expr1073743431 $assertEquals $(@expr1073743432 "cppcheck-2.8/test/testnullpointer.cpp" $, 1412 $, "" $, errout@var100 .@expr1073743433 str (@expr1073743434 ) $) $) { $return ; }
1413: }
1414:
1415: void nullpointer23 ( ) {
1416: $check_ $(@expr1073743435 "cppcheck-2.8/test/testnullpointer.cpp" $, 1416 $, "void f(){\n    char *c = NULL;\n    char cBuf[10];\n    sprintf(cBuf, \"%s\", c ? c : \"0\" );\n}" $)
1417:
1418:
1419:
1420: ;
1421: $if $(@expr1073743436 $!@expr1073743437 $assertEquals $(@expr1073743438 "cppcheck-2.8/test/testnullpointer.cpp" $, 1421 $, "" $, errout@var100 .@expr1073743439 str (@expr1073743440 ) $) $) { $return ; }
1422: }
1423:
1424: void nullpointer24 ( ) {
1425: $check_ $(@expr1073743441 "cppcheck-2.8/test/testnullpointer.cpp" $, 1425 $, "void f(){\n    char *c = NULL;\n    x = c = new char[10];\n    *c = 0;\n}" $)
1426:
1427:
1428:
1429: ;
1430: $if $(@expr1073743442 $!@expr1073743443 $assertEquals $(@expr1073743444 "cppcheck-2.8/test/testnullpointer.cpp" $, 1430 $, "" $, errout@var100 .@expr1073743445 str (@expr1073743446 ) $) $) { $return ; }
1431: }
1432:
1433: void nullpointer25 ( ) {
1434: $check_ $(@expr1073743447 "cppcheck-2.8/test/testnullpointer.cpp" $, 1434 $, "void f(int *data, int i)\n{\n    int *array = NULL;\n    if (data == 1 && array[i] == 0)\n        std::cout << \"test\";\n}" $)
1435:
|
1438:
1439: ;
1440: $if $(@expr1073743448 $!@expr1073743449 $assertEquals $(@expr1073743450 "cppcheck-2.8/test/testnullpointer.cpp" $, 1440 $, "[test.cpp:4]: (error) Null pointer dereference: array\n" $, errout@var100 .@expr1073743451 str (@expr1073743452 ) $) $) { $return ; }
1441: }
1442:
1443: void nullpointer26 ( ) {
1444: $check_ $(@expr1073743453 "cppcheck-2.8/test/testnullpointer.cpp" $, 1444 $, "double foo() {\n    sk *t1 = foo();\n    sk *t2 = foo();\n    if ((!t1) && (!t2))\n        return 0.0;\n    if (t1 && (!t2))\n        return t1->Inter();\n    if (t2->GetT() == t)\n        return t2->Inter();\n    if (t2 && (!t1))\n        return 0.0;\n    return 0;\n}" $)
1445:
|
1455:
1456: ;
1457: $if $(@expr1073743454 $!@expr1073743455 $assertEquals $(@expr1073743456 "cppcheck-2.8/test/testnullpointer.cpp" $, 1457 $, "" $, errout@var100 .@expr1073743457 str (@expr1073743458 ) $) $) { $return ; }
1458: }
1459:
1460: void nullpointer27 ( ) {
1461: $check_ $(@expr1073743459 "cppcheck-2.8/test/testnullpointer.cpp" $, 1461 $, "template<class Type>\nclass Foo {\n    Foo<Type>& operator = ( Type* );\n};\ntemplate<class Type>\nFoo<Type>& Foo<Type>::operator = ( Type* pointer_ ) {\n    pointer_=NULL;\n    *pointer_=0;\n    return *this;\n}" $)
1462:
|
1469:
1470: ;
1471: $if $(@expr1073743460 $!@expr1073743461 $assertEquals $(@expr1073743462 "cppcheck-2.8/test/testnullpointer.cpp" $, 1471 $, "[test.cpp:8]: (error) Null pointer dereference: pointer_\n" $, errout@var100 .@expr1073743463 str (@expr1073743464 ) $) $) { $return ; }
1472: }
1473:
1474: void nullpointer28 ( ) {
1475: $check_ $(@expr1073743465 "cppcheck-2.8/test/testnullpointer.cpp" $, 1475 $, "typedef struct { int value; } S;\nint f(const S *s) {\n  int i = s ? s->value + 1\n            : s->value - 1; // <-- null ptr dereference\n  return i;\n}" $)
1476:
|
1479:
1480: ;
1481: $if $(@expr1073743466 $!@expr1073743467 $assertEquals $(@expr1073743468 "cppcheck-2.8/test/testnullpointer.cpp" $, 1481 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 's' is redundant or there is possible null pointer dereference: s.\n" $, errout@var100 .@expr1073743469 str (@expr1073743470 ) $) $) { $return
1482:
1483: ; }
1484: }
1485:
1486: void nullpointer30 ( ) {
1487: $check_ $(@expr1073743471 "cppcheck-2.8/test/testnullpointer.cpp" $, 1487 $, "void f(std::vector<std::string> *values)\n{\n  values->clear();\n  if (values)\n  {\n    for (int i = 0; i < values->size(); ++i)\n    {\n      values->push_back(\"test\");\n    }\n  }\n}\n" , true $)
1488:
|
1496:
1497: ;
1498: $if $(@expr1073743472 $!@expr1073743473 $assertEquals $(@expr1073743474 "cppcheck-2.8/test/testnullpointer.cpp" $, 1498 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'values' is redundant or there is possible null pointer dereference: values.\n" $, errout@var100 .@expr1073743475 str (@expr1073743476 ) $) $) { $return
1499:
1500: ; }
1501: }
1502:
1503: void nullpointer31 ( ) {
1504: $check_ $(@expr1073743477 "cppcheck-2.8/test/testnullpointer.cpp" $, 1504 $, "struct F\n{\n    int x;\n};\n\nstatic void foo(F* f)\n{\n    if( f ) {}\n    else { return; }\n    (void)f->x;\n}\n" , true $)
1505:
|
1513:
1514: ;
1515: $if $(@expr1073743478 $!@expr1073743479 $assertEquals $(@expr1073743480 "cppcheck-2.8/test/testnullpointer.cpp" $, 1515 $, "" $, errout@var100 .@expr1657 str (@expr1658 ) $) $) { $return ; }
1516:
1517: $check_ $(@expr1073743483 "cppcheck-2.8/test/testnullpointer.cpp" $, 1517 $, "typedef struct\n{\n    int x;\n} F;\n\nstatic void foo(F* f)\n{\n    if( !f || f->x == 0 )\n    {\n        if( !f )\n            return;\n    }\n\n    (void)f->x;\n}" , true $)
1518:
|
1530:
1531: ;
1532: $if $(@expr1073743484 $!@expr1073743485 $assertEquals $(@expr1073743486 "cppcheck-2.8/test/testnullpointer.cpp" $, 1532 $, "" $, errout@var100 .@expr1657 str (@expr1658 ) $) $) { $return ; }
1533: }
1534:
1535: void nullpointer32 ( ) {
1536: $check_ $(@expr1073743489 "cppcheck-2.8/test/testnullpointer.cpp" $, 1536 $, "int f(int * ptr) {\n  if(ptr)\n  { return 0;}\n  else{\n    int *p1 = ptr;\n    return *p1;\n  }\n}\n" , true $)
1537:
|
1542:
1543: ;
1544: $if $(@expr1073743490 $!@expr1073743491 $assertEquals $(@expr1073743492 "cppcheck-2.8/test/testnullpointer.cpp" $, 1544 $, "[test.cpp:2] -> [test.cpp:6]: (warning) Either the condition 'ptr' is redundant or there is possible null pointer dereference: p1.\n" $, errout@var100 .@expr1073743493 str (@expr1073743494 ) $) $) { $return ; }
1545: }
1546:
1547: void nullpointer33 ( ) {
1548: $check_ $(@expr1073743495 "cppcheck-2.8/test/testnullpointer.cpp" $, 1548 $, "void f(int * x) {\n    if (x != nullptr)\n        *x = 2;\n    else\n        *x = 3;\n}\n" , true $)
1549:
|
1552:
1553: ;
1554: $if $(@expr1073743496 $!@expr1073743497 $assertEquals $(@expr1073743498 "cppcheck-2.8/test/testnullpointer.cpp" $, 1554 $, "[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'x!=nullptr' is redundant or there is possible null pointer dereference: x.\n" $, errout@var100 .@expr1073743499 str (@expr1073743500 ) $) $) { $return ; }
1555: }
1556:
1557: void nullpointer34 ( ) {
1558: $check_ $(@expr1073743501 "cppcheck-2.8/test/testnullpointer.cpp" $, 1558 $, "void g() {\n    throw ;\n}\nbool f(int * x) {\n    if (x) *x += 1;\n    if (!x) g();\n    return *x;\n}\n" , true $)
1559:
|
1564:
1565: ;
1566: $if $(@expr1073743502 $!@expr1073743503 $assertEquals $(@expr1073743504 "cppcheck-2.8/test/testnullpointer.cpp" $, 1566 $, "" $, errout@var100 .@expr1073743505 str (@expr1073743506 ) $) $) { $return ; }
1567: }
1568:
1569: void nullpointer35 ( ) {
1570: $check_ $(@expr1073743507 "cppcheck-2.8/test/testnullpointer.cpp" $, 1570 $, "bool f(int*);\nvoid g(int* x) {\n    if (f(x)) {\n        *x = 1;\n    }\n}\nvoid h() {\n    g(0);\n}\n" , true $)
1571:
|
1577:
1578: ;
1579: $if $(@expr1073743508 $!@expr1073743509 $assertEquals $(@expr1073743510 "cppcheck-2.8/test/testnullpointer.cpp" $, 1579 $, "" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return ; }
1580:
1581: $check_ $(@expr1073743513 "cppcheck-2.8/test/testnullpointer.cpp" $, 1581 $, "bool f(int*);\nvoid g(int* x) {\n    bool b = f(x);\n    if (b) {\n        *x = 1;\n    }\n}\nvoid h() {\n    g(0);\n}\n" , true $)
1582:
|
1590:
1591: ;
1592: $if $(@expr1073743514 $!@expr1073743515 $assertEquals $(@expr1073743516 "cppcheck-2.8/test/testnullpointer.cpp" $, 1592 $, "" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return ; }
1593: }
1594:
1595: void nullpointer36 ( ) {
1596: $check_ $(@expr1073743519 "cppcheck-2.8/test/testnullpointer.cpp" $, 1596 $, "char* f(char* s) {\n    char* start = s;\n    if (!s)\n        return (s);\n    while (isspace(*start))\n        start++;\n    return (start);\n}\n" , true $)
1597:
|
1602:
1603: ;
1604: $if $(@expr1073743520 $!@expr1073743521 $assertEquals $(@expr1073743522 "cppcheck-2.8/test/testnullpointer.cpp" $, 1604 $, "" $, errout@var100 .@expr1073743523 str (@expr1073743524 ) $) $) { $return ; }
1605: }
1606:
1607: void nullpointer37 ( ) {
1608: $check_ $(@expr1073743525 "cppcheck-2.8/test/testnullpointer.cpp" $, 1608 $, "void f(int value, char *string) {\n    char *ptr1 = NULL, *ptr2 = NULL;\n    unsigned long count = 0;\n    if(!string)\n        return;\n    ptr1 = string;\n    ptr2 = strrchr(string, 'a');\n    if(ptr2 == NULL)\n        return;\n    while(ptr1 < ptr2) {\n        count++;\n        ptr1++;\n    }\n}\n" , true $)
1609:
|
1621:
1622: ;
1623: $if $(@expr1073743526 $!@expr1073743527 $assertEquals $(@expr1073743528 "cppcheck-2.8/test/testnullpointer.cpp" $, 1623 $, "" $, errout@var100 .@expr1073743529 str (@expr1073743530 ) $) $) { $return ; }
1624: }
1625:
1626: void nullpointer38 ( ) {
1627: $check_ $(@expr1073743531 "cppcheck-2.8/test/testnullpointer.cpp" $, 1627 $, "void f(int * x) {\n    std::vector<int*> v;\n    if (x) {\n        v.push_back(x);\n        *x;\n    }\n}\n" , true $)
1628:
|
1633:
1634: ;
1635: $if $(@expr1073743532 $!@expr1073743533 $assertEquals $(@expr1073743534 "cppcheck-2.8/test/testnullpointer.cpp" $, 1635 $, "" $, errout@var100 .@expr1073743535 str (@expr1073743536 ) $) $) { $return ; }
1636: }
1637:
1638: void nullpointer39 ( ) {
1639: $check_ $(@expr1073743537 "cppcheck-2.8/test/testnullpointer.cpp" $, 1639 $, "struct A { int * x; };\nvoid f(struct A *a) {\n    if (a->x == NULL) {}\n    *(a->x);\n}" $)
1640:
1641:
1642:
1643: ;
1644: $if $(@expr1073743538 $!@expr1073743539 $assertEquals $(@expr1073743540 "cppcheck-2.8/test/testnullpointer.cpp" $, 1644 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->x==NULL' is redundant or there is possible null pointer dereference: a->x.\n" $, errout@var100 .@expr1073743541 str (@expr1073743542 ) $) $) { $return
1645:
1646: ; }
1647: }
1648:
1649: void nullpointer40 ( ) {
1650: $check_ $(@expr1073743543 "cppcheck-2.8/test/testnullpointer.cpp" $, 1650 $, "struct A { std::unique_ptr<int> x; };\nvoid f(struct A *a) {\n    if (a->x == nullptr) {}\n    *(a->x);\n}" $)
1651:
1652:
1653:
1654: ;
1655: $if $(@expr1073743544 $!@expr1073743545 $assertEquals $(@expr1073743546 "cppcheck-2.8/test/testnullpointer.cpp" $, 1655 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->x==nullptr' is redundant or there is possible null pointer dereference: a->x.\n" $, errout@var100 .@expr1073743547 str (@expr1073743548 ) $) $) { $return
1656:
1657: ; }
1658: }
1659:
1660: void nullpointer41 ( ) {
1661: $check_ $(@expr1073743549 "cppcheck-2.8/test/testnullpointer.cpp" $, 1661 $, "struct A { int * g() const; };\nvoid f(struct A *a) {\n    if (a->g() == nullptr) {}\n    *(a->g());\n}" $)
1662:
1663:
1664:
1665: ;
1666: $if $(@expr1073743550 $!@expr1073743551 $assertEquals $(@expr1073743552 "cppcheck-2.8/test/testnullpointer.cpp" $, 1666 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->g()==nullptr' is redundant or there is possible null pointer dereference: a->g().\n" $, errout@var100 .@expr1729 str (@expr1730 ) $) $) { $return
1667:
1668: ; }
1669:
1670: $check_ $(@expr1073743555 "cppcheck-2.8/test/testnullpointer.cpp" $, 1670 $, "struct A { int * g(); };\nvoid f(struct A *a) {\n    if (a->g() == nullptr) {}\n    *(a->g());\n}" $)
1671:
1672:
1673:
1674: ;
1675: $if $(@expr1073743556 $!@expr1073743557 $assertEquals $(@expr1073743558 "cppcheck-2.8/test/testnullpointer.cpp" $, 1675 $, "" $, errout@var100 .@expr1729 str (@expr1730 ) $) $) { $return ; }
1676: }
1677:
1678: void nullpointer42 ( ) {
1679: $check_ $(@expr1073743561 "cppcheck-2.8/test/testnullpointer.cpp" $, 1679 $, "struct A { std::unique_ptr<int> g() const; };\nvoid f(struct A *a) {\n    if (a->g() == nullptr) {}\n    *(a->g());\n}" $)
1680:
1681:
1682:
1683: ;
1684: $if $(@expr1073743562 $!@expr1073743563 $assertEquals $(@expr1073743564 "cppcheck-2.8/test/testnullpointer.cpp" $, 1684 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->g()==nullptr' is redundant or there is possible null pointer dereference: a->g().\n" $, errout@var100 .@expr1073743565 str (@expr1073743566 ) $) $) { $return
1685:
1686: ; }
1687: }
1688:
1689: void nullpointer43 ( ) {
1690: $check_ $(@expr1073743567 "cppcheck-2.8/test/testnullpointer.cpp" $, 1690 $, "struct A { int* x; };\nvoid f(A* a) {\n    int * x = a->x;\n    if (x) {\n        (void)*a->x;\n    }\n}" $)
1691:
|
1695:
1696: ;
1697: $if $(@expr1073743568 $!@expr1073743569 $assertEquals $(@expr1073743570 "cppcheck-2.8/test/testnullpointer.cpp" $, 1697 $, "" $, errout@var100 .@expr1073743571 str (@expr1073743572 ) $) $) { $return ; }
1698: }
1699:
1700: void nullpointer44 ( ) {
1701:
1702: $check_ $(@expr1073743573 "cppcheck-2.8/test/testnullpointer.cpp" $, 1702 $, "int foo( ) {\n    const B* b = getB();\n    const double w = ( nullptr != b) ? 42. : 0.0;\n    if ( w == 0.0 )\n        return 0;\n    return b->get();\n}" $)
1703:
|
1707:
1708: ;
1709: $if $(@expr1073743574 $!@expr1073743575 $assertEquals $(@expr1073743576 "cppcheck-2.8/test/testnullpointer.cpp" $, 1709 $, "" $, errout@var100 .@expr1753 str (@expr1754 ) $) $) { $return ; }
1710:
1711: $check_ $(@expr1073743579 "cppcheck-2.8/test/testnullpointer.cpp" $, 1711 $, "extern F* GetF();\nextern L* GetL();\nvoid Foo() {\n    const F* const fPtr = GetF();\n    const bool fPtrOk = fPtr != NULL;\n    assert(fPtrOk);\n    if (!fPtrOk)\n        return;\n    L* const lPtr = fPtr->l;\n    const bool lPtrOk = lPtr != NULL;\n    assert(lPtrOk);\n    if (!lPtrOk)\n        return;\n    lPtr->Clear();\n}" $)
1712:
|
1724:
1725: ;
1726: $if $(@expr1073743580 $!@expr1073743581 $assertEquals $(@expr1073743582 "cppcheck-2.8/test/testnullpointer.cpp" $, 1726 $, "" $, errout@var100 .@expr1753 str (@expr1754 ) $) $) { $return ; }
1727: }
1728:
1729: void nullpointer45 ( ) {
1730: $check_ $(@expr1073743585 "cppcheck-2.8/test/testnullpointer.cpp" $, 1730 $, "struct a {\n  a *b() const;\n};\nvoid g() { throw 0; }\na h(a * c) {\n  if (c && c->b()) {}\n  if (!c)\n    g();\n  if (!c->b())\n    g();\n  a d = *c->b();\n  return d;\n}" $)
1731:
|
1741:
1742: ;
1743: $if $(@expr1073743586 $!@expr1073743587 $assertEquals $(@expr1073743588 "cppcheck-2.8/test/testnullpointer.cpp" $, 1743 $, "" $, errout@var100 .@expr1765 str (@expr1766 ) $) $) { $return ; }
1744:
1745: $check_ $(@expr1073743591 "cppcheck-2.8/test/testnullpointer.cpp" $, 1745 $, "struct a {\n  a *b() const;\n};\nvoid e() { throw 0; }\na f() {\n  a *c = 0;\n  if (0 && c->b()) {}\n  if (!c)\n    e();\n  if (!c->b())\n    e();\n  a d = *c->b();\n  return d;\n}" $)
1746:
|
1757:
1758: ;
1759: $if $(@expr1073743592 $!@expr1073743593 $assertEquals $(@expr1073743594 "cppcheck-2.8/test/testnullpointer.cpp" $, 1759 $, "" $, errout@var100 .@expr1765 str (@expr1766 ) $) $) { $return ; }
1760: }
1761:
1762: void nullpointer46 ( ) {
1763: $check_ $(@expr1073743597 "cppcheck-2.8/test/testnullpointer.cpp" $, 1763 $, "void f() {\n    char* p = new(std::nothrow) char[1];\n    if( p ) {}\n}" $)
1764:
1765:
1766: ;
1767: $if $(@expr1073743598 $!@expr1073743599 $assertEquals $(@expr1073743600 "cppcheck-2.8/test/testnullpointer.cpp" $, 1767 $, "" $, errout@var100 .@expr1073743601 str (@expr1073743602 ) $) $) { $return ; }
1768: }
1769:
1770: void nullpointer47 ( ) {
1771: $check_ $(@expr1073743603 "cppcheck-2.8/test/testnullpointer.cpp" $, 1771 $, "void f(int *p) {\n   if(!p[0]) {}\n   const int *const a = p;\n   if(!a){}\n}" $)
1772:
1773:
1774:
1775: ;
1776: $if $(@expr1073743604 $!@expr1073743605 $assertEquals $(@expr1073743606 "cppcheck-2.8/test/testnullpointer.cpp" $, 1776 $, "[test.cpp:4] -> [test.cpp:2]: (warning) Either the condition '!a' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1073743607 str (@expr1073743608 ) $) $) { $return ; }
1777: }
1778:
1779: void nullpointer48 ( ) {
1780: $check_ $(@expr1073743609 "cppcheck-2.8/test/testnullpointer.cpp" $, 1780 $, "template<class T>\nauto f(T& x) -> decltype(x);\nint& g(int* x) {\n    return f(*x);\n}" $)
1781:
1782:
1783:
1784: ;
1785: $if $(@expr1073743610 $!@expr1073743611 $assertEquals $(@expr1073743612 "cppcheck-2.8/test/testnullpointer.cpp" $, 1785 $, "" $, errout@var100 .@expr1073743613 str (@expr1073743614 ) $) $) { $return ; }
1786: }
1787:
1788: void nullpointer49 ( ) {
1789: $check_ $(@expr1073743615 "cppcheck-2.8/test/testnullpointer.cpp" $, 1789 $, "void f(int *p, int n) {\n    int *q = 0;\n    if(n > 10) q = p;\n    *p +=2;\n    if(n < 120) *q+=12;\n}" $)
1790:
|
1793:
1794: ;
1795: $if $(@expr1073743616 $!@expr1073743617 $assertEquals $(@expr1073743618 "cppcheck-2.8/test/testnullpointer.cpp" $, 1795 $, "[test.cpp:5]: (warning) Possible null pointer dereference: q\n" $, errout@var100 .@expr1795 str (@expr1796 ) $) $) { $return ; }
1796:
1797: $check_ $(@expr1073743621 "cppcheck-2.8/test/testnullpointer.cpp" $, 1797 $, "void f(int *p, int n) {\n    int *q = 0;\n    if(n > 10) q = p;\n    *p +=2;\n    if(n > 10) *q+=12;\n}" $)
1798:
|
1801:
1802: ;
1803: $if $(@expr1073743622 $!@expr1073743623 $assertEquals $(@expr1073743624 "cppcheck-2.8/test/testnullpointer.cpp" $, 1803 $, "" $, errout@var100 .@expr1795 str (@expr1796 ) $) $) { $return ; }
1804: }
1805:
1806: void nullpointer50 ( ) {
1807: $check_ $(@expr1073743627 "cppcheck-2.8/test/testnullpointer.cpp" $, 1807 $, "void f(int *p, int a) {\n    if(!p) {\n        if(a > 0) {\n            if(a > 10){}\n            else {\n                *p = 0;\n            }\n        }\n    }\n}" $)
1808:
|
1815:
1816: ;
1817: $if $(@expr1073743628 $!@expr1073743629 $assertEquals $(@expr1073743630 "cppcheck-2.8/test/testnullpointer.cpp" $, 1817 $, "[test.cpp:2] -> [test.cpp:6]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr1073743631 str (@expr1073743632 ) $) $) { $return
1818:
1819: ; }
1820: }
1821:
1822: void nullpointer51 ( ) {
1823: $check_ $(@expr1073743633 "cppcheck-2.8/test/testnullpointer.cpp" $, 1823 $, "struct a {\n  a *b();\n};\nbool c(a *, const char *);\na *d(a *e) {\n  if (e) {}\n  if (c(e, \"\"))\n    return nullptr;\n  return e->b();\n}" $)
1824:
|
1831:
1832: ;
1833: $if $(@expr1073743634 $!@expr1073743635 $assertEquals $(@expr1073743636 "cppcheck-2.8/test/testnullpointer.cpp" $, 1833 $, "" $, errout@var100 .@expr1073743637 str (@expr1073743638 ) $) $) { $return ; }
1834: }
1835:
1836: void nullpointer52 ( ) {
1837: $check_ $(@expr1073743639 "cppcheck-2.8/test/testnullpointer.cpp" $, 1837 $, "int f(int a, int* b) {\n    int* c = nullptr;\n    if(b) c = b;\n    if (!c) c = &a;\n    return *c;\n}" $)
1838:
|
1841:
1842: ;
1843: $if $(@expr1073743640 $!@expr1073743641 $assertEquals $(@expr1073743642 "cppcheck-2.8/test/testnullpointer.cpp" $, 1843 $, "" $, errout@var100 .@expr1819 str (@expr1820 ) $) $) { $return ; }
1844:
1845: $check_ $(@expr1073743645 "cppcheck-2.8/test/testnullpointer.cpp" $, 1845 $, "int f(int a, int* b) {\n    int* c = nullptr;\n    if(b) c = b;\n    bool d = !c;\n    if (d) c = &a;\n    return *c;\n}" $)
1846:
|
1850:
1851: ;
1852: $if $(@expr1073743646 $!@expr1073743647 $assertEquals $(@expr1073743648 "cppcheck-2.8/test/testnullpointer.cpp" $, 1852 $, "" $, errout@var100 .@expr1819 str (@expr1820 ) $) $) { $return ; }
1853:
1854: $check_ $(@expr1073743651 "cppcheck-2.8/test/testnullpointer.cpp" $, 1854 $, "struct A { int* x; };\nint f(int a, int* b) {\n    A c;\n    c.x = nullptr;\n    if(b) c.x = b;\n    if (!c.x) c.x = &a;\n    return *c.x;\n}" $)
1855:
|
1860:
1861: ;
1862: $if $(@expr1073743652 $!@expr1073743653 $assertEquals $(@expr1073743654 "cppcheck-2.8/test/testnullpointer.cpp" $, 1862 $, "" $, errout@var100 .@expr1819 str (@expr1820 ) $) $) { $return ; }
1863:
1864: $check_ $(@expr1073743657 "cppcheck-2.8/test/testnullpointer.cpp" $, 1864 $, "struct A { int* x; };\nint f(int a, int* b) {\n    A c;\n    c.x = nullptr;\n    if(b) c.x = b;\n    bool d = !c.x;\n    if (d) c.x = &a;\n    return *c.x;\n}" $)
1865:
|
1871:
1872: ;
1873: $if $(@expr1073743658 $!@expr1073743659 $assertEquals $(@expr1073743660 "cppcheck-2.8/test/testnullpointer.cpp" $, 1873 $, "" $, errout@var100 .@expr1819 str (@expr1820 ) $) $) { $return ; }
1874:
1875: $check_ $(@expr1073743663 "cppcheck-2.8/test/testnullpointer.cpp" $, 1875 $, "struct A { int* x; };\nint f(int a, int* b) {\n    A c;\n    c.x = nullptr;\n    if(b) c.x = b;\n    bool d = !c.x;\n    if (!d) c.x = &a;\n    return *c.x;\n}\n" $)
1876:
|
1882:
1883: ;
1884: $if $(@expr1073743664 $!@expr1073743665 $assertEquals $(@expr1073743666 "cppcheck-2.8/test/testnullpointer.cpp" $, 1884 $, "[test.cpp:8]: (warning) Possible null pointer dereference: c.x\n" $, errout@var100 .@expr1819 str (@expr1820 ) $) $) { $return ; }
1885: }
1886:
1887: void nullpointer53 ( ) {
1888: $check_ $(@expr1073743669 "cppcheck-2.8/test/testnullpointer.cpp" $, 1888 $, "void f(int nParams, int* params) {\n  for (int n=1; n<nParams+10; ++n) {\n    params[n]=42;\n  }\n}\nvoid bar() {\n  f(0, 0);\n}" $)
1889:
|
1894:
1895: ;
1896: $if $(@expr1073743670 $!@expr1073743671 $assertEquals $(@expr1073743672 "cppcheck-2.8/test/testnullpointer.cpp" $, 1896 $, "[test.cpp:3]: (warning) Possible null pointer dereference: params\n" $, errout@var100 .@expr1073743673 str (@expr1073743674 ) $) $) { $return ; }
1897: }
1898:
1899: void nullpointer54 ( ) {
1900: $check_ $(@expr1073743675 "cppcheck-2.8/test/testnullpointer.cpp" $, 1900 $, "int foo (int **array, size_t n_array) {\n    size_t i;\n    for (i = 0; i < n_array; ++i) {\n        if (*array[i] == 1)\n            return 1;\n    }\n    return 0;\n}\nint bar() {\n    int **array = NULL;\n    foo (array, 0);\n}" $)
1901:
|
1910:
1911: ;
1912: $if $(@expr1073743676 $!@expr1073743677 $assertEquals $(@expr1073743678 "cppcheck-2.8/test/testnullpointer.cpp" $, 1912 $, "" $, errout@var100 .@expr1073743679 str (@expr1073743680 ) $) $) { $return ; }
1913: }
1914:
1915: void nullpointer55 ( ) {
1916: $check_ $(@expr1073743681 "cppcheck-2.8/test/testnullpointer.cpp" $, 1916 $, "void f(const Token* tok) {\n    const Token* tok3 = tok;\n    while (tok3->astParent() && tok3->str() == \",\")\n        tok3 = tok3->astParent();\n    if (tok3 && tok3->str() == \"(\") {}\n}" $)
1917:
|
1920:
1921: ;
1922: $if $(@expr1073743682 $!@expr1073743683 $assertEquals $(@expr1073743684 "cppcheck-2.8/test/testnullpointer.cpp" $, 1922 $, "[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition 'tok3' is redundant or there is possible null pointer dereference: tok3.\n" $, errout@var100 .@expr1861 str (@expr1862 ) $) $) { $return
1923:
1924: ; }
1925:
1926: $check_ $(@expr1073743687 "cppcheck-2.8/test/testnullpointer.cpp" $, 1926 $, "void f(int* t1, int* t2) {\n    while (t1 && t2 &&\n       *t1 == *t2) {\n        t1 = nullptr;\n        t2 = nullptr;\n    }\n    if (!t1 || !t2)\n        return;\n}" $)
1927:
|
1933:
1934: ;
1935: $if $(@expr1073743688 $!@expr1073743689 $assertEquals $(@expr1073743690 "cppcheck-2.8/test/testnullpointer.cpp" $, 1935 $, "" $, errout@var100 .@expr1861 str (@expr1862 ) $) $) { $return ; }
1936:
1937: $check_ $(@expr1073743693 "cppcheck-2.8/test/testnullpointer.cpp" $, 1937 $, "bool f(int* i);\nvoid g(int* i) {\n    while(f(i) && *i == 0)\n        i++;\n    if (!i) {}\n}" $)
1938:
|
1941:
1942: ;
1943: $if $(@expr1073743694 $!@expr1073743695 $assertEquals $(@expr1073743696 "cppcheck-2.8/test/testnullpointer.cpp" $, 1943 $, "" $, errout@var100 .@expr1861 str (@expr1862 ) $) $) { $return ; }
1944: }
1945:
1946: void nullpointer56 ( ) {
1947: $check_ $(@expr1073743699 "cppcheck-2.8/test/testnullpointer.cpp" $, 1947 $, "struct ListEntry {\n    struct ListEntry *next;\n};\nstatic void dostuff(ListEntry * listHead) {\n    ListEntry *prev = NULL;\n    for (ListEntry *cursor = listHead; cursor != NULL; prev = cursor, cursor = cursor->next) {}\n    if (prev) {}\n}" $)
1948:
|
1953:
1954: ;
1955: $if $(@expr1073743700 $!@expr1073743701 $assertEquals $(@expr1073743702 "cppcheck-2.8/test/testnullpointer.cpp" $, 1955 $, "" $, errout@var100 .@expr1073743703 str (@expr1073743704 ) $) $) { $return ; }
1956: }
1957:
1958: void nullpointer57 ( ) {
1959: $check_ $(@expr1073743705 "cppcheck-2.8/test/testnullpointer.cpp" $, 1959 $, "void f() {\n    FILE* fptr = fopen(\"test\", \"r\");\n    if (fptr != nullptr) {\n        std::function<void()> fn([&] {\n            fclose(fptr);\n            fptr = NULL;\n        });\n        fgetc(fptr);\n        fn();\n    }\n}\n" $)
1960:
|
1968:
1969: ;
1970: $if $(@expr1073743706 $!@expr1073743707 $assertEquals $(@expr1073743708 "cppcheck-2.8/test/testnullpointer.cpp" $, 1970 $, "" $, errout@var100 .@expr1073743709 str (@expr1073743710 ) $) $) { $return ; }
1971: }
1972:
1973: void nullpointer58 ( ) {
1974: $check_ $(@expr1073743711 "cppcheck-2.8/test/testnullpointer.cpp" $, 1974 $, "struct myStruct { char entry[0]; };\nvoid f() {\n    struct myStruct* sPtr = NULL;\n    int sz = (!*(&sPtr) || ((*(&sPtr))->entry[0] > 15)) ?\n        sizeof((*(&sPtr))->entry[0]) : 123456789;\n}\n" $)
1975:
|
1978:
1979: ;
1980: $if $(@expr1073743712 $!@expr1073743713 $assertEquals $(@expr1073743714 "cppcheck-2.8/test/testnullpointer.cpp" $, 1980 $, "" $, errout@var100 .@expr1073743715 str (@expr1073743716 ) $) $) { $return ; }
1981: }
1982:
1983: void nullpointer59 ( ) {
1984: $check_ $(@expr1073743717 "cppcheck-2.8/test/testnullpointer.cpp" $, 1984 $, "struct Box {\n    struct Box* prev;\n    struct Box* next;\n};\nvoid foo(Box** pfreeboxes) {\n    Box *b = *pfreeboxes;\n    *pfreeboxes = b->next;\n    if( *pfreeboxes )\n        (*pfreeboxes)->prev = nullptr;\n    b->next = nullptr;\n}\n" $)
1985:
|
1993:
1994: ;
1995: $if $(@expr1073743718 $!@expr1073743719 $assertEquals $(@expr1073743720 "cppcheck-2.8/test/testnullpointer.cpp" $, 1995 $, "" $, errout@var100 .@expr1073743721 str (@expr1073743722 ) $) $) { $return ; }
1996: }
1997:
1998: void nullpointer60 ( ) {
1999: $check_ $(@expr1073743723 "cppcheck-2.8/test/testnullpointer.cpp" $, 1999 $, "void f(){\n    char uuid[128];\n    char *s1;\n    memset(uuid, 0, sizeof(uuid));\n    s1 = strchr(uuid, '=');\n    s1 = s1 ? s1 + 1 : &uuid[5];\n    if (!strcmp(\"00000000000000000000000000000000\", s1) )\n        return;\n}\n" $)
2000:
|
2006:
2007: ;
2008: $if $(@expr1073743724 $!@expr1073743725 $assertEquals $(@expr1073743726 "cppcheck-2.8/test/testnullpointer.cpp" $, 2008 $, "" $, errout@var100 .@expr1073743727 str (@expr1073743728 ) $) $) { $return ; }
2009: }
2010:
2011: void nullpointer61 ( ) {
2012: $check_ $(@expr1073743729 "cppcheck-2.8/test/testnullpointer.cpp" $, 2012 $, "struct a {\n  int *e;\n};\nstruct f {\n  a *g() const;\n};\nvoid h() {\n  for (f b;;) {\n    a *c = b.g();\n    int *d = c->e;\n    if (d)\n      ;\n  }\n}\n" $)
2013:
|
2024:
2025: ;
2026: $if $(@expr1073743730 $!@expr1073743731 $assertEquals $(@expr1073743732 "cppcheck-2.8/test/testnullpointer.cpp" $, 2026 $, "" $, errout@var100 .@expr1909 str (@expr1910 ) $) $) { $return ; }
2027:
2028: $check_ $(@expr1073743735 "cppcheck-2.8/test/testnullpointer.cpp" $, 2028 $, "struct A {\n  A* g() const;\n  A* h() const;\n};\nvoid f(A* a) {\n  if (!a->h())\n    return;\n  const A *b = a;\n  while (b && !b->h())\n      b = b->g();\n  if (!b || b == b->g()->h())\n      return;\n}\n" $)
2029:
|
2039:
2040: ;
2041: $if $(@expr1073743736 $!@expr1073743737 $assertEquals $(@expr1073743738 "cppcheck-2.8/test/testnullpointer.cpp" $, 2041 $, "" $, errout@var100 .@expr1909 str (@expr1910 ) $) $) { $return ; }
2042: }
2043:
2044: void nullpointer62 ( ) {
2045: $check_ $(@expr1073743741 "cppcheck-2.8/test/testnullpointer.cpp" $, 2045 $, "struct A {\n  bool f()() const;\n};\nvoid a(A *x) {\n  std::string b = x && x->f() ? \"\" : \"\";\n  if (x) {}\n}\n" $)
2046:
|
2050:
2051: ;
2052: $if $(@expr1073743742 $!@expr1073743743 $assertEquals $(@expr1073743744 "cppcheck-2.8/test/testnullpointer.cpp" $, 2052 $, "" $, errout@var100 .@expr1921 str (@expr1922 ) $) $) { $return ; }
2053:
2054: $check_ $(@expr1073743747 "cppcheck-2.8/test/testnullpointer.cpp" $, 2054 $, "struct A {\n  bool f()() const;\n};\nvoid a(A *x) {\n  std::string b = (!x || x->f()) ? \"\" : \"\";\n  if (x) {}\n}\n" $)
2055:
|
2059:
2060: ;
2061: $if $(@expr1073743748 $!@expr1073743749 $assertEquals $(@expr1073743750 "cppcheck-2.8/test/testnullpointer.cpp" $, 2061 $, "" $, errout@var100 .@expr1921 str (@expr1922 ) $) $) { $return ; }
2062:
2063: $check_ $(@expr1073743753 "cppcheck-2.8/test/testnullpointer.cpp" $, 2063 $, "struct A {\n  A * aa;\n};\nvoid b(A*);\nvoid a(A *x) {\n  b(x ? x->aa : nullptr);\n  if (!x) {}\n}\n" $)
2064:
|
2069:
2070: ;
2071: $if $(@expr1073743754 $!@expr1073743755 $assertEquals $(@expr1073743756 "cppcheck-2.8/test/testnullpointer.cpp" $, 2071 $, "" $, errout@var100 .@expr1921 str (@expr1922 ) $) $) { $return ; }
2072: }
2073:
2074: void nullpointer63 ( ) {
2075: $check_ $(@expr1073743759 "cppcheck-2.8/test/testnullpointer.cpp" $, 2075 $, "struct A {\n    A* a() const;\n    A* b() const;\n};\nA* f(A*);\nvoid g(const A* x) {\n    A *d = x->a();\n    d = f(d->b()) ? d->a() : nullptr;\n    if (d && f(d->b())) {}\n}\n" $)
2076:
|
2083:
2084: ;
2085: $if $(@expr1073743760 $!@expr1073743761 $assertEquals $(@expr1073743762 "cppcheck-2.8/test/testnullpointer.cpp" $, 2085 $, "" $, errout@var100 .@expr1073743763 str (@expr1073743764 ) $) $) { $return ; }
2086: }
2087:
2088: void nullpointer64 ( ) {
2089: $check_ $(@expr1073743765 "cppcheck-2.8/test/testnullpointer.cpp" $, 2089 $, "struct A {\n  A* f() const;\n  int g() const;\n};\nbool a;\nbool b(A* c) {\n    if (c->g() == 0)\n      ;\n    A *aq = c;\n    if (c->g() == 0)\n      c = c->f();\n    if (c)\n      for (A *d = c; d != aq; d = d->f()) {}\n}\n" $)
2090:
|
2101:
2102: ;
2103: $if $(@expr1073743766 $!@expr1073743767 $assertEquals $(@expr1073743768 "cppcheck-2.8/test/testnullpointer.cpp" $, 2103 $, "" $, errout@var100 .@expr1945 str (@expr1946 ) $) $) { $return ; }
2104:
2105: $check_ $(@expr1073743771 "cppcheck-2.8/test/testnullpointer.cpp" $, 2105 $, "struct A {\n  A* g() const;\n  A* h() const;\n};\nbool i(A*);\nvoid f(A* x) {\n  if (i(x->g())) {\n    A *y = x->g();\n    x = x->g()->h();\n    if (x && x->g()) {\n        y = x->g()->h();\n    }\n    if (!y) {}\n  }\n}\n" $)
2106:
|
2118:
2119: ;
2120: $if $(@expr1073743772 $!@expr1073743773 $assertEquals $(@expr1073743774 "cppcheck-2.8/test/testnullpointer.cpp" $, 2120 $, "" $, errout@var100 .@expr1945 str (@expr1946 ) $) $) { $return ; }
2121: }
2122:
2123: void nullpointer65 ( ) {
2124: $check_ $(@expr1073743777 "cppcheck-2.8/test/testnullpointer.cpp" $, 2124 $, "struct A {\n    double get();\n};\ndouble x;\ndouble run(A** begin, A** end) {\n    A* a = nullptr;\n    while (begin != end) {\n        a = *begin;\n        x = a->get();\n        ++begin;\n    }\n    x = 0;\n    if (a)\n        return a->get();\n    return 0;\n}\n" $)
2125:
|
2138:
2139: ;
2140: $if $(@expr1073743778 $!@expr1073743779 $assertEquals $(@expr1073743780 "cppcheck-2.8/test/testnullpointer.cpp" $, 2140 $, "" $, errout@var100 .@expr1073743781 str (@expr1073743782 ) $) $) { $return ; }
2141: }
2142:
2143: void nullpointer66 ( ) {
2144: $check_ $(@expr1073743783 "cppcheck-2.8/test/testnullpointer.cpp" $, 2144 $, "int f() {\n    int ret = 0;\n    int *v = nullptr;\n    if (!MyAlloc(&v)) {\n        ret = -1;\n        goto done;\n    }\n    DoSomething(*v);\ndone:\n    if (v)\n      MyFree(&v);\n    return ret;\n}\n" $)
2145:
|
2155:
2156: ;
2157: $if $(@expr1073743784 $!@expr1073743785 $assertEquals $(@expr1073743786 "cppcheck-2.8/test/testnullpointer.cpp" $, 2157 $, "" $, errout@var100 .@expr1073743787 str (@expr1073743788 ) $) $) { $return ; }
2158: }
2159:
2160: void nullpointer67 ( ) {
2161: $check_ $(@expr1073743789 "cppcheck-2.8/test/testnullpointer.cpp" $, 2161 $, "int result;\n\nint test_b(void) {\n    char **string = NULL;\n\n    /* The bug disappears if \"result =\" is omitted. */\n    result = some_other_call(&string);\n    if (string && string[0])\n        return 0;\n    return -1;\n}\n" $)
2162:
|
2170:
2171: ;
2172: $if $(@expr1073743790 $!@expr1073743791 $assertEquals $(@expr1073743792 "cppcheck-2.8/test/testnullpointer.cpp" $, 2172 $, "" $, errout@var100 .@expr1969 str (@expr1970 ) $) $) { $return ; }
2173:
2174: $check_ $(@expr1073743795 "cppcheck-2.8/test/testnullpointer.cpp" $, 2174 $, "int result;\n\nint test_b(void) {\n    char **string = NULL;\n\n    some_other_call(&string);\n    if (string && string[0])\n        return 0;\n    return -1;\n}\n" $)
2175:
|
2182:
2183: ;
2184: $if $(@expr1073743796 $!@expr1073743797 $assertEquals $(@expr1073743798 "cppcheck-2.8/test/testnullpointer.cpp" $, 2184 $, "" $, errout@var100 .@expr1969 str (@expr1970 ) $) $) { $return ; }
2185: }
2186:
2187: void nullpointer68 ( ) {
2188: $check_ $(@expr1073743801 "cppcheck-2.8/test/testnullpointer.cpp" $, 2188 $, "struct A {\n    A* b;\n};\nvoid f(A* c) {\n    c = c->b;\n    if (c->b) {}\n}\n" $)
2189:
|
2193:
2194: ;
2195: $if $(@expr1073743802 $!@expr1073743803 $assertEquals $(@expr1073743804 "cppcheck-2.8/test/testnullpointer.cpp" $, 2195 $, "" $, errout@var100 .@expr1981 str (@expr1982 ) $) $) { $return ; }
2196:
2197: $check_ $(@expr1073743807 "cppcheck-2.8/test/testnullpointer.cpp" $, 2197 $, "struct A {\n    A* b;\n};\nvoid f(A* c) {\n    A* d = c->b;\n    A *e = c;\n    while (nullptr != (e = e->b)) {}\n}\n" $)
2198:
|
2203:
2204: ;
2205: $if $(@expr1073743808 $!@expr1073743809 $assertEquals $(@expr1073743810 "cppcheck-2.8/test/testnullpointer.cpp" $, 2205 $, "" $, errout@var100 .@expr1981 str (@expr1982 ) $) $) { $return ; }
2206: }
2207:
2208: void nullpointer69 ( ) {
2209: $check_ $(@expr1073743813 "cppcheck-2.8/test/testnullpointer.cpp" $, 2209 $, "void f(const Scope *scope) {\n    if (scope->definedType) {}\n    while (scope) {\n        scope = scope->nestedIn;\n        enumerator = scope->findEnumerator();\n    }\n}\n" $)
2210:
|
2214:
2215: ;
2216: $if $(@expr1073743814 $!@expr1073743815 $assertEquals $(@expr1073743816 "cppcheck-2.8/test/testnullpointer.cpp" $, 2216 $, "[test.cpp:3] -> [test.cpp:5]: (warning) Either the condition 'scope' is redundant or there is possible null pointer dereference: scope.\n" $, errout@var100 .@expr1993 str (@expr1994 ) $) $) { $return
2217:
2218: ; }
2219:
2220: $check_ $(@expr1073743819 "cppcheck-2.8/test/testnullpointer.cpp" $, 2220 $, "void f(const Scope *scope) {\n    if (scope->definedType) {}\n    while (scope && scope->nestedIn) {\n        if (scope->type == Scope::eFunction && scope->functionOf)\n            scope = scope->functionOf;\n        else\n            scope = scope->nestedIn;\n        enumerator = scope->findEnumerator();\n    }\n}\n" $)
2221:
|
2228:
2229: ;
2230: $if $(@expr1073743820 $!@expr1073743821 $assertEquals $(@expr1073743822 "cppcheck-2.8/test/testnullpointer.cpp" $, 2230 $, "[test.cpp:3] -> [test.cpp:8]: (warning) Either the condition 'scope' is redundant or there is possible null pointer dereference: scope.\n" $, errout@var100 .@expr1993 str (@expr1994 ) $) $) { $return
2231:
2232: ; }
2233:
2234: $check_ $(@expr1073743825 "cppcheck-2.8/test/testnullpointer.cpp" $, 2234 $, "struct a {\n  a *b() const;\n  void c();\n};\nvoid d() {\n  for (a *e;;) {\n    e->b()->c();\n    while (e)\n      e = e->b();\n  }\n}\n" $)
2235:
|
2243:
2244: ;
2245: $if $(@expr1073743826 $!@expr1073743827 $assertEquals $(@expr1073743828 "cppcheck-2.8/test/testnullpointer.cpp" $, 2245 $, "" $, errout@var100 .@expr1993 str (@expr1994 ) $) $) { $return ; }
2246: }
2247:
2248: void nullpointer70 ( ) {
2249: $check_ $(@expr1073743831 "cppcheck-2.8/test/testnullpointer.cpp" $, 2249 $, "struct Token {\n    const Token* nextArgument() const;\n    const Token* next() const;\n    int varId() const;\n};\nint f(const Token *first, const Token* second) {\n    first = first->nextArgument();\n    if (first)\n        first = first->next();\n    if (second->next()->varId() == 0) {\n        second = second->nextArgument();\n        if (!first || !second)\n            return 0;\n    } else if (!first) {\n        return 0;\n    }\n    return first->varId();\n}\n" $)
2250:
|
2265:
2266: ;
2267: $if $(@expr1073743832 $!@expr1073743833 $assertEquals $(@expr1073743834 "cppcheck-2.8/test/testnullpointer.cpp" $, 2267 $, "" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
2268:
2269: $check_ $(@expr1073743837 "cppcheck-2.8/test/testnullpointer.cpp" $, 2269 $, "struct Token {\n    const Token* nextArgument() const;\n    const Token* next() const;\n    int varId() const;\n    void str() const;};\nvoid f(const Token *first) {\n    first = first->nextArgument();\n    if (first)\n        first = first->next();\n    first->str();\n}\n" $)
2270:
|
2279:
2280: ;
2281: $todoAssertEquals $(@expr1073743838 "cppcheck-2.8/test/testnullpointer.cpp" $, 2281 $, "[test.cpp:8] -> [test.cpp:10]: (warning) Either the condition 'first' is redundant or there is possible null pointer dereference: first.\n" $, "" $, errout@var100 .@expr2011 str (@expr2012 ) $)
2282:
2283:
2284: ;
2285: }
2286:
2287: void nullpointer71 ( ) {
2288: $check_ $(@expr1073743841 "cppcheck-2.8/test/testnullpointer.cpp" $, 2288 $, "void f() {\n  Device* dev = Get();\n  SetCount(dev == nullptr ? 0 : dev->size());\n  if (dev)\n    DoSomething(dev);\n}\n" $)
2289:
|
2292:
2293: ;
2294: $if $(@expr1073743842 $!@expr1073743843 $assertEquals $(@expr1073743844 "cppcheck-2.8/test/testnullpointer.cpp" $, 2294 $, "" $, errout@var100 .@expr2021 str (@expr2022 ) $) $) { $return ; }
2295:
2296: $check_ $(@expr1073743847 "cppcheck-2.8/test/testnullpointer.cpp" $, 2296 $, "void f() {\n  Device* dev = Get();\n  SetCount(dev != nullptr ? dev->size() : 0);\n  if (dev)\n    DoSomething(dev);\n}\n" $)
2297:
|
2300:
2301: ;
2302: $if $(@expr1073743848 $!@expr1073743849 $assertEquals $(@expr1073743850 "cppcheck-2.8/test/testnullpointer.cpp" $, 2302 $, "" $, errout@var100 .@expr2021 str (@expr2022 ) $) $) { $return ; }
2303: }
2304:
2305: void nullpointer72 ( ) {
2306: $check_ $(@expr1073743853 "cppcheck-2.8/test/testnullpointer.cpp" $, 2306 $, "int test() {\n  int* p0 = nullptr, *p1 = nullptr;\n  getFoo(p0);\n  getBar(p1);\n  if (!(p0 != nullptr && p1 != nullptr))\n    return {};\n  return *p0 + *p1;\n}\n" , true $)
2307:
|
2312:
2313: ;
2314: $if $(@expr1073743854 $!@expr1073743855 $assertEquals $(@expr1073743856 "cppcheck-2.8/test/testnullpointer.cpp" $, 2314 $, "" $, errout@var100 .@expr2033 str (@expr2034 ) $) $) { $return ; }
2315:
2316: $check_ $(@expr1073743859 "cppcheck-2.8/test/testnullpointer.cpp" $, 2316 $, "int test2() {\n  int* p0 = nullptr;\n  if (!(getBaz(p0) && p0 != nullptr))\n    return 0;\n  return *p0;\n}\n" , true $)
2317:
|
2320:
2321: ;
2322: $if $(@expr1073743860 $!@expr1073743861 $assertEquals $(@expr1073743862 "cppcheck-2.8/test/testnullpointer.cpp" $, 2322 $, "" $, errout@var100 .@expr2033 str (@expr2034 ) $) $) { $return ; }
2323:
2324: $check_ $(@expr1073743865 "cppcheck-2.8/test/testnullpointer.cpp" $, 2324 $, "int test3() {\n  Obj* PObj = nullptr;\n  if (!(GetObj(PObj) && PObj != nullptr))\n    return 1;\n  if (!PObj->foo())\n    test();\n  PObj->bar();\n}\n" , true $)
2325:
|
2330:
2331: ;
2332: $if $(@expr1073743866 $!@expr1073743867 $assertEquals $(@expr1073743868 "cppcheck-2.8/test/testnullpointer.cpp" $, 2332 $, "" $, errout@var100 .@expr2033 str (@expr2034 ) $) $) { $return ; }
2333: }
2334:
2335: void nullpointer73 ( ) {
2336: $check_ $(@expr1073743871 "cppcheck-2.8/test/testnullpointer.cpp" $, 2336 $, "void f(bool flag2, int* ptr) {\n    bool flag1 = true;\n    if (flag2) {\n        if (ptr != nullptr)\n            (*ptr)++;\n        else\n            flag1 = false;\n    }\n    if (flag1 && flag2)\n        (*ptr)++;\n}\n" $)
2337:
|
2345:
2346: ;
2347: $if $(@expr1073743872 $!@expr1073743873 $assertEquals $(@expr1073743874 "cppcheck-2.8/test/testnullpointer.cpp" $, 2347 $, "" $, errout@var100 .@expr2051 str (@expr2052 ) $) $) { $return ; }
2348:
2349: $check_ $(@expr1073743877 "cppcheck-2.8/test/testnullpointer.cpp" $, 2349 $, "void f(bool flag2, int* ptr) {\n    bool flag1 = true;\n    if (flag2) {\n        if (ptr != nullptr)\n            (*ptr)++;\n        else\n            flag1 = false;\n    }\n    if (!flag1 && flag2)\n        (*ptr)++;\n}\n" $)
2350:
|
2358:
2359: ;
2360: $if $(@expr1073743878 $!@expr1073743879 $assertEquals $(@expr1073743880 "cppcheck-2.8/test/testnullpointer.cpp" $, 2360 $, "[test.cpp:4] -> [test.cpp:10]: (warning) Either the condition 'ptr!=nullptr' is redundant or there is possible null pointer dereference: ptr.\n" $, errout@var100 .@expr2051 str (@expr2052 ) $) $) { $return ; }
2361: }
2362:
2363: void nullpointer74 ( ) {
2364: $check_ $(@expr1073743883 "cppcheck-2.8/test/testnullpointer.cpp" $, 2364 $, "struct d {\n  d* e();\n};\nvoid g(d* f) {\n  do {\n    f = f->e();\n    if (f) {}\n  } while (0);\n}\n" $)
2365:
|
2371:
2372: ;
2373: $if $(@expr1073743884 $!@expr1073743885 $assertEquals $(@expr1073743886 "cppcheck-2.8/test/testnullpointer.cpp" $, 2373 $, "" $, errout@var100 .@expr2063 str (@expr2064 ) $) $) { $return ; }
2374:
2375: $check_ $(@expr1073743889 "cppcheck-2.8/test/testnullpointer.cpp" $, 2375 $, "struct d {\n  d* e();\n};\nvoid g(d* f, int i) {\n  do {\n    i--;\n    f = f->e();\n    if (f) {}\n  } while (i > 0);\n}\n" $)
2376:
|
2383:
2384: ;
2385: $if $(@expr1073743890 $!@expr1073743891 $assertEquals $(@expr1073743892 "cppcheck-2.8/test/testnullpointer.cpp" $, 2385 $, "[test.cpp:8] -> [test.cpp:7]: (warning) Either the condition 'f' is redundant or there is possible null pointer dereference: f.\n" $, errout@var100 .@expr2063 str (@expr2064 ) $) $) { $return
2386:
2387: ; }
2388:
2389: $check_ $(@expr1073743895 "cppcheck-2.8/test/testnullpointer.cpp" $, 2389 $, "struct d {\n  d* e();\n};\nvoid g(d* f, int i) {\n  do {\n    i--;\n    f = f->e();\n    if (f) {}\n  } while (f && i > 0);\n}\n" $)
2390:
|
2397:
2398: ;
2399: $if $(@expr1073743896 $!@expr1073743897 $assertEquals $(@expr1073743898 "cppcheck-2.8/test/testnullpointer.cpp" $, 2399 $, "" $, errout@var100 .@expr2063 str (@expr2064 ) $) $) { $return ; }
2400: }
2401:
2402: void nullpointer75 ( ) {
2403: $check_ $(@expr1073743901 "cppcheck-2.8/test/testnullpointer.cpp" $, 2403 $, "struct a {\n  a *b() const;\n  void c();\n  int d() const;\n};\nvoid e(a *x) {\n  while (x->b()->d() == 0)\n    x->c();\n  x->c();\n  if (x->b()) {}\n}\n" $)
2404:
|
2412:
2413: ;
2414: $if $(@expr1073743902 $!@expr1073743903 $assertEquals $(@expr1073743904 "cppcheck-2.8/test/testnullpointer.cpp" $, 2414 $, "" $, errout@var100 .@expr1073743905 str (@expr1073743906 ) $) $) { $return ; }
2415: }
2416:
2417: void nullpointer76 ( )
2418: {
2419: $check_ $(@expr1073743907 "cppcheck-2.8/test/testnullpointer.cpp" $, 2419 $, "int* foo(int y) {\n    std::unique_ptr<int> x = std::make_unique<int>(0);\n    if( y == 0 )\n        return x.release();\n    (*x) ++;\n    return x.release();\n}\n" $)
2420:
|
2424:
2425: ;
2426: $if $(@expr1073743908 $!@expr1073743909 $assertEquals $(@expr1073743910 "cppcheck-2.8/test/testnullpointer.cpp" $, 2426 $, "" $, errout@var100 .@expr1073743911 str (@expr1073743912 ) $) $) { $return ; }
2427: }
2428:
2429: void nullpointer77 ( )
2430: {
2431: $check_ $(@expr1073743913 "cppcheck-2.8/test/testnullpointer.cpp" $, 2431 $, "bool h(int*);\nvoid f(int* i) {\n    int* i = nullptr;\n    if (h(i) && *i == 1) {}\n}\n" $)
2432:
2433:
2434:
2435: ;
2436: $if $(@expr1073743914 $!@expr1073743915 $assertEquals $(@expr1073743916 "cppcheck-2.8/test/testnullpointer.cpp" $, 2436 $, "" $, errout@var100 .@expr2093 str (@expr2094 ) $) $) { $return ; }
2437:
2438: $check_ $(@expr1073743919 "cppcheck-2.8/test/testnullpointer.cpp" $, 2438 $, "bool h(int*);\nvoid f(int* i) {\n    int* i = nullptr;\n    if (h(i))\n        if (*i == 1) {}\n}\n" $)
2439:
|
2442:
2443: ;
2444: $if $(@expr1073743920 $!@expr1073743921 $assertEquals $(@expr1073743922 "cppcheck-2.8/test/testnullpointer.cpp" $, 2444 $, "" $, errout@var100 .@expr2093 str (@expr2094 ) $) $) { $return ; }
2445:
2446: $check_ $(@expr1073743925 "cppcheck-2.8/test/testnullpointer.cpp" $, 2446 $, "bool h(int*);\nvoid f(int* x) {\n    int* i = x;\n    if (h(i))\n        i = nullptr;\n    if (h(i) && *i == 1) {}\n}\n" $)
2447:
|
2451:
2452: ;
2453: $if $(@expr1073743926 $!@expr1073743927 $assertEquals $(@expr1073743928 "cppcheck-2.8/test/testnullpointer.cpp" $, 2453 $, "" $, errout@var100 .@expr2093 str (@expr2094 ) $) $) { $return ; }
2454: }
2455:
2456: void nullpointer78 ( )
2457: {
2458: $check_ $(@expr1073743931 "cppcheck-2.8/test/testnullpointer.cpp" $, 2458 $, "void f()\n{\n    int **pp;\n    int *p = 0;\n    pp = &p;\n    **pp = 1;\n}" $)
2459:
|
2463:
2464: ;
2465: $if $(@expr1073743932 $!@expr1073743933 $assertEquals $(@expr1073743934 "cppcheck-2.8/test/testnullpointer.cpp" $, 2465 $, "[test.cpp:6]: (error) Null pointer dereference: *pp\n" $, errout@var100 .@expr1073743935 str (@expr1073743936 ) $) $) { $return ; }
2466: }
2467:
2468: void nullpointer79 ( )
2469: {
2470: $check_ $(@expr1073743937 "cppcheck-2.8/test/testnullpointer.cpp" $, 2470 $, "void resize(size_t nF, size_t nT) {\n    double* pValues = nullptr;\n    if (nF > 0 && nT > 0)\n        pValues = new double[nF * nT];\n    for (size_t cc = 0; cc < nF * nT; ++cc)\n        pValues[cc] = 42;\n}\n" $)
2471:
|
2475:
2476: ;
2477: $if $(@expr1073743938 $!@expr1073743939 $assertEquals $(@expr1073743940 "cppcheck-2.8/test/testnullpointer.cpp" $, 2477 $, "" $, errout@var100 .@expr1073743941 str (@expr1073743942 ) $) $) { $return ; }
2478: }
2479:
2480: void nullpointer80 ( )
2481: {
2482: $check_ $(@expr1073743943 "cppcheck-2.8/test/testnullpointer.cpp" $, 2482 $, "int f(int* a, int* b) {\n    if( a || b ) {\n        int n = a ? *a : *b;\n        if( b )\n            n++;\n        return n;\n    }\n    return 0;\n}\n" $)
2483:
|
2489:
2490: ;
2491: $if $(@expr1073743944 $!@expr1073743945 $assertEquals $(@expr1073743946 "cppcheck-2.8/test/testnullpointer.cpp" $, 2491 $, "" $, errout@var100 .@expr1073743947 str (@expr1073743948 ) $) $) { $return ; }
2492: }
2493:
2494: void nullpointer81 ( )
2495: {
2496: $check_ $(@expr1073743949 "cppcheck-2.8/test/testnullpointer.cpp" $, 2496 $, "void f(A **list) {\n  A *tmp_List = NULL;\n  *list = NULL;\n  while (1) {\n    if (*list == NULL) {\n      tmp_List = malloc (sizeof (ArchiveList_struct));\n      *list = tmp_List;\n    } else {\n      tmp_List->next = malloc (sizeof (ArchiveList_struct));\n    }\n  }\n}\n" $)
2497:
|
2506:
2507: ;
2508: $if $(@expr1073743950 $!@expr1073743951 $assertEquals $(@expr1073743952 "cppcheck-2.8/test/testnullpointer.cpp" $, 2508 $, "" $, errout@var100 .@expr1073743953 str (@expr1073743954 ) $) $) { $return ; }
2509: }
2510:
2511: void nullpointer82 ( )
2512: {
2513: $check_ $(@expr1073743955 "cppcheck-2.8/test/testnullpointer.cpp" $, 2513 $, "bool g();\nint* h();\nvoid f(int* ptr) {\n    if (!ptr) {\n        if (g())\n            goto done;\n        ptr = h();\n        if (!ptr)\n            return;\n    }\n    if (*ptr == 1)\n        return;\n\ndone:\n}\n" $)
2514:
|
2526:
2527: ;
2528: $if $(@expr1073743956 $!@expr1073743957 $assertEquals $(@expr1073743958 "cppcheck-2.8/test/testnullpointer.cpp" $, 2528 $, "" $, errout@var100 .@expr1073743959 str (@expr1073743960 ) $) $) { $return ; }
2529: }
2530:
2531: void nullpointer83 ( )
2532: {
2533: $check_ $(@expr1073743961 "cppcheck-2.8/test/testnullpointer.cpp" $, 2533 $, "int* qux();\nint* f7c2(int *x) {\n  int* p = 0;\n  if (nullptr == x)\n    p = qux();\n  if (nullptr == x)\n    return x;\n  *p = 1;\n  return x;\n}\n" $)
2534:
|
2541:
2542: ;
2543: $if $(@expr1073743962 $!@expr1073743963 $assertEquals $(@expr1073743964 "cppcheck-2.8/test/testnullpointer.cpp" $, 2543 $, "[test.cpp:8]: (warning) Possible null pointer dereference: p\n" $, errout@var100 .@expr1073743965 str (@expr1073743966 ) $) $) { $return ; }
2544: }
2545:
2546: void nullpointer84 ( )
2547: {
2548: $check_ $(@expr1073743967 "cppcheck-2.8/test/testnullpointer.cpp" $, 2548 $, "void f(std::unique_ptr<A> P) {\n  A *RP = P.get();\n  if (!RP) {\n    P->foo();\n  }\n}\n" $)
2549:
|
2552:
2553: ;
2554: $if $(@expr1073743968 $!@expr1073743969 $assertEquals $(@expr1073743970 "cppcheck-2.8/test/testnullpointer.cpp" $, 2554 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition '!RP' is redundant or there is possible null pointer dereference: P.\n" $, errout@var100 .@expr1073743971 str (@expr1073743972 ) $) $) { $return
2555:
2556: ; }
2557: }
2558:
2559: void nullpointer85 ( )
2560: {
2561: $check_ $(@expr1073743973 "cppcheck-2.8/test/testnullpointer.cpp" $, 2561 $, "struct MyStruct {\n  int GetId() const {\n      int id = 0;\n      int page = m_notebook->GetSelection();\n      if (m_notebook && (m_notebook->GetPageCount() > 0))\n        id = page;\n      return id;\n  }\n  wxNoteBook *m_notebook = nullptr;\n};\nint f() {\n  const MyStruct &s = Get();\n  return s.GetId();\n}\n" $)
2562:
|
2573:
2574: ;
2575: $if $(@expr1073743974 $!@expr1073743975 $assertEquals $(@expr1073743976 "cppcheck-2.8/test/testnullpointer.cpp" $, 2575 $, "[test.cpp:5] -> [test.cpp:4]: (warning) Either the condition 'm_notebook' is redundant or there is possible null pointer dereference: m_notebook.\n" $, errout@var100 .@expr1073743977 str (@expr1073743978 ) $) $) { $return
2576:
2577: ; }
2578: }
2579:
2580: void nullpointer86 ( )
2581: {
2582: $check_ $(@expr1073743979 "cppcheck-2.8/test/testnullpointer.cpp" $, 2582 $, "struct A {\n    A* a() const;\n    int b() const;\n};\nA* f(A* t) {\n    if (t->b() == 0) {\n        return t;\n    }\n    return t->a();\n}\nvoid g(A* t) {\n    t = f(t->a());\n    if (!t->a()) {}\n}\n" $)
2583:
|
2594:
2595: ;
2596: $if $(@expr1073743980 $!@expr1073743981 $assertEquals $(@expr1073743982 "cppcheck-2.8/test/testnullpointer.cpp" $, 2596 $, "" $, errout@var100 .@expr1073743983 str (@expr1073743984 ) $) $) { $return ; }
2597: }
2598:
2599: void nullpointer87 ( )
2600: {
2601: $check_ $(@expr1073743985 "cppcheck-2.8/test/testnullpointer.cpp" $, 2601 $, "int f(bool b, int* x) {\n    if (b && x == nullptr)\n        return 0;\n    else if (!b && x == nullptr)\n        return 1;\n    else if (!b && x != nullptr)\n        return *x;\n    else\n        return *x + 1;\n}\n" $)
2602:
|
2609:
2610: ;
2611: $todoAssertEquals $(@expr1073743986 "cppcheck-2.8/test/testnullpointer.cpp" $, 2611 $, "" $, "[test.cpp:6] -> [test.cpp:9]: (warning) Either the condition 'x!=nullptr' is redundant or there is possible null pointer dereference: x.\n" $, errout@var100 .@expr2163 str (@expr2164 ) $) ;
2612:
2613: $check_ $(@expr1073743989 "cppcheck-2.8/test/testnullpointer.cpp" $, 2613 $, "void f(int n, int* p) {\n    int* r = nullptr;\n    if (n < 0)\n        return;\n    if (n == 0)\n        r = p;\n    else if (n > 0)\n        r = p + 1;\n    *r;\n}\n" $)
2614:
|
2621:
2622: ;
2623: $if $(@expr1073743990 $!@expr1073743991 $assertEquals $(@expr1073743992 "cppcheck-2.8/test/testnullpointer.cpp" $, 2623 $, "" $, errout@var100 .@expr2163 str (@expr2164 ) $) $) { $return ; }
2624: }
2625:
2626: void nullpointer88 ( )
2627: {
2628: $check_ $(@expr1073743995 "cppcheck-2.8/test/testnullpointer.cpp" $, 2628 $, "struct S { char **ppc; };\nint alloc(struct S* s) {\n    char** ppc = malloc(4096);\n    if (ppc != NULL) {\n        s->ppc = ppc;\n        return 1;\n    }\n    return 0;\n}\nvoid f() {\n    struct S* s = malloc(sizeof(struct S));\n    s->ppc = NULL;\n    if (alloc(s))\n        s->ppc[0] = \"\";\n}\n" , false , "test.c" $)
2629:
|
2641:
2642: ;
2643: $if $(@expr1073743996 $!@expr1073743997 $assertEquals $(@expr1073743998 "cppcheck-2.8/test/testnullpointer.cpp" $, 2643 $, "" $, errout@var100 .@expr1073743999 str (@expr1073744000 ) $) $) { $return ; }
2644: }
2645:
2646: void nullpointer89 ( )
2647: {
2648: $check_ $(@expr1073744001 "cppcheck-2.8/test/testnullpointer.cpp" $, 2648 $, "typedef struct {\n    int x;\n} foo_t;\ntypedef struct {\n    foo_t *y;\n} bar_t;\nvoid f(bar_t *ptr) {\n    if(ptr->y->x)\n        if(ptr->y != nullptr) {}\n}\n" $)
2649:
|
2656:
2657: ;
2658: $if $(@expr1073744002 $!@expr1073744003 $assertEquals $(@expr1073744004 "cppcheck-2.8/test/testnullpointer.cpp" $, 2658 $, "[test.cpp:9] -> [test.cpp:8]: (warning) Either the condition 'ptr->y!=nullptr' is redundant or there is possible null pointer dereference: ptr->y.\n" $, errout@var100 .@expr1073744005 str (@expr1073744006 ) $) $) { $return
2659:
2660: ; }
2661: }
2662:
2663: void nullpointer90 ( )
2664: {
2665: $check_ $(@expr1073744007 "cppcheck-2.8/test/testnullpointer.cpp" $, 2665 $, "std::string definitionToName(Definition *ctx)\n{\n  if (ctx->definitionType()==Definition::TypeMember)\n  {\n     return \"y\";\n  }\n  else if (ctx)\n  {\n    if(ctx->definitionType()!=Definition::TypeMember)\n    {\n       return \"x\";\n    }\n  }\n  return \"unknown\";\n}" $)
2666:
|
2678:
2679: ;
2680: $if $(@expr1073744008 $!@expr1073744009 $assertEquals $(@expr1073744010 "cppcheck-2.8/test/testnullpointer.cpp" $, 2680 $, "[test.cpp:7] -> [test.cpp:3]: (warning) Either the condition 'ctx' is redundant or there is possible null pointer dereference: ctx.\n" $, errout@var100 .@expr1073744011 str (@expr1073744012 ) $) $) { $return
2681:
2682: ; }
2683: }
2684:
2685: void nullpointer91 ( )
2686: {
2687: $check_ $(@expr1073744013 "cppcheck-2.8/test/testnullpointer.cpp" $, 2687 $, "void f(const char* PBeg, const char* PEnd) {\n  while (PEnd != nullptr) {\n    const int N = h(PEnd);\n    PEnd = g();\n    const int Length = PEnd == nullptr ? 0 : PEnd - PBeg;\n  };\n}\n" $)
2688:
|
2692:
2693: ;
2694: $if $(@expr1073744014 $!@expr1073744015 $assertEquals $(@expr1073744016 "cppcheck-2.8/test/testnullpointer.cpp" $, 2694 $, "" $, errout@var100 .@expr1073744017 str (@expr1073744018 ) $) $) { $return ; }
2695: }
2696:
2697: void nullpointer92 ( )
2698: {
2699: $check_ $(@expr1073744019 "cppcheck-2.8/test/testnullpointer.cpp" $, 2699 $, "bool g(bool);\nint f(int* i) {\n    if (!g(!!i)) return 0;\n    return *i;\n}\n" $)
2700:
2701:
2702:
2703: ;
2704: $if $(@expr1073744020 $!@expr1073744021 $assertEquals $(@expr1073744022 "cppcheck-2.8/test/testnullpointer.cpp" $, 2704 $, "" $, errout@var100 .@expr2199 str (@expr2200 ) $) $) { $return ; }
2705:
2706: $check_ $(@expr1073744025 "cppcheck-2.8/test/testnullpointer.cpp" $, 2706 $, "bool g(bool);\nint f(int* i) {\n    if (!g(!i)) return 0;\n    return *i;\n}\n" $)
2707:
2708:
2709:
2710: ;
2711: $if $(@expr1073744026 $!@expr1073744027 $assertEquals $(@expr1073744028 "cppcheck-2.8/test/testnullpointer.cpp" $, 2711 $, "" $, errout@var100 .@expr2199 str (@expr2200 ) $) $) { $return ; }
2712: }
2713:
2714: void nullpointer93 ( )
2715: {
2716: $check_ $(@expr1073744031 "cppcheck-2.8/test/testnullpointer.cpp" $, 2716 $, "int* GetThing( ) { return 0; }\nint main() {\n        int* myNull = GetThing();\n        *myNull=42;\n        return 0;\n}" $)
2717:
|
2720:
2721: ;
2722: $if $(@expr1073744032 $!@expr1073744033 $assertEquals $(@expr1073744034 "cppcheck-2.8/test/testnullpointer.cpp" $, 2722 $, "[test.cpp:4]: (error) Null pointer dereference: myNull\n" $, errout@var100 .@expr2211 str (@expr2212 ) $) $) { $return ; }
2723:
2724: $check_ $(@expr1073744037 "cppcheck-2.8/test/testnullpointer.cpp" $, 2724 $, "struct foo {\n    int* GetThing(void) { return 0; }\n};\nint main(void) {\n        foo myFoo;\n        int* myNull = myFoo.GetThing();\n        *myNull=42;\n        return 0;\n}" $)
2725:
|
2731:
2732: ;
2733: $if $(@expr1073744038 $!@expr1073744039 $assertEquals $(@expr1073744040 "cppcheck-2.8/test/testnullpointer.cpp" $, 2733 $, "[test.cpp:7]: (error) Null pointer dereference: myNull\n" $, errout@var100 .@expr2211 str (@expr2212 ) $) $) { $return ; }
2734: }
2735:
2736: void nullpointer94 ( )
2737: {
2738: $check_ $(@expr1073744043 "cppcheck-2.8/test/testnullpointer.cpp" $, 2738 $, "struct entry { struct entry* next; size_t len; };\nvoid f(struct entry **kep, size_t slen) {\n    while (*kep)\n        kep = &(*kep)->next;\n    *kep = (struct entry*)malloc(sizeof(**kep));\n    (*kep)->next = 0;\n    (*kep)->len = slen;\n}\n" $)
2739:
|
2744:
2745: ;
2746: $if $(@expr1073744044 $!@expr1073744045 $assertEquals $(@expr1073744046 "cppcheck-2.8/test/testnullpointer.cpp" $, 2746 $, "" $, errout@var100 .@expr1073744047 str (@expr1073744048 ) $) $) { $return ; }
2747: }
2748:
2749: void nullpointer_addressOf ( ) {
2750: $check_ $(@expr1073744049 "cppcheck-2.8/test/testnullpointer.cpp" $, 2750 $, "void f() {\n  struct X *x = 0;\n  if (addr == &x->y) {}\n}" $)
2751:
2752:
2753: ;
2754: $if $(@expr1073744050 $!@expr1073744051 $assertEquals $(@expr1073744052 "cppcheck-2.8/test/testnullpointer.cpp" $, 2754 $, "" $, errout@var100 .@expr2229 str (@expr2230 ) $) $) { $return ; }
2755:
2756: $check_ $(@expr1073744055 "cppcheck-2.8/test/testnullpointer.cpp" $, 2756 $, "void f() {\n  struct X *x = 0;\n  if (addr == &x->y.z[0]) {}\n}" $)
2757:
2758:
2759: ;
2760: $if $(@expr1073744056 $!@expr1073744057 $assertEquals $(@expr1073744058 "cppcheck-2.8/test/testnullpointer.cpp" $, 2760 $, "" $, errout@var100 .@expr2229 str (@expr2230 ) $) $) { $return ; }
2761:
2762: checkP (@expr1073744061 "typedef int Count;\n#define offsetof(TYPE, MEMBER) ((Count) & ((TYPE*)0)->MEMBER)\nstruct S {\n    int a[20];\n};\nint g(int i) {\n    return offsetof(S, a[i]);\n}\n"
2763:
|
2768:
2769: ) ;
2770: $if $(@expr1073744062 $!@expr1073744063 $assertEquals $(@expr1073744064 "cppcheck-2.8/test/testnullpointer.cpp" $, 2770 $, "" $, errout@var100 .@expr2229 str (@expr2230 ) $) $) { $return ; }
2771: }
2772:
2773: void nullpointerSwitch ( ) {
2774:
2775: $check_ $(@expr1073744067 "cppcheck-2.8/test/testnullpointer.cpp" $, 2775 $, "char *f(int x) {\n    char *p = do_something();\n    switch (x) {\n      case 1:\n        p = 0;\n      case 2:\n        *p = 0;\n        break;\n    }\n    return p;\n}" , true $)
2776:
|
2784:
2785: ;
2786: $if $(@expr1073744068 $!@expr1073744069 $assertEquals $(@expr1073744070 "cppcheck-2.8/test/testnullpointer.cpp" $, 2786 $, "[test.cpp:7]: (warning) Possible null pointer dereference: p\n" $, errout@var100 .@expr1073744071 str (@expr1073744072 ) $) $) { $return ; }
2787: }
2788:
2789: void nullpointer_cast ( ) {
2790: $check_ $(@expr1073744073 "cppcheck-2.8/test/testnullpointer.cpp" $, 2790 $, "char *nasm_skip_spaces(const char *p) {\n    if (p)\n        while (*p && nasm_isspace(*p))\n            p++;\n    return p;\n}" $)
2791:
|
2794:
2795: ;
2796: $if $(@expr1073744074 $!@expr1073744075 $assertEquals $(@expr1073744076 "cppcheck-2.8/test/testnullpointer.cpp" $, 2796 $, "" $, errout@var100 .@expr1073744077 str (@expr1073744078 ) $) $) { $return ; }
2797: }
2798:
2799: void nullpointer_castToVoid ( ) {
2800: $check_ $(@expr1073744079 "cppcheck-2.8/test/testnullpointer.cpp" $, 2800 $, "void f () {\n    int *buf; buf = NULL;\n    buf;\n}" , true $)
2801:
2802:
2803: ;
2804: $if $(@expr1073744080 $!@expr1073744081 $assertEquals $(@expr1073744082 "cppcheck-2.8/test/testnullpointer.cpp" $, 2804 $, "" $, errout@var100 .@expr1073744083 str (@expr1073744084 ) $) $) { $return ; }
2805: }
2806:
2807: void nullpointer_subfunction ( ) {
2808: $check_ $(@expr1073744085 "cppcheck-2.8/test/testnullpointer.cpp" $, 2808 $, "int f(int* x, int* y) {\n    if (!x)\n        return;\n    return *x + *y;\n}\nvoid g() {\n    f(nullptr, nullptr);\n}\n" , true $)
2809:
|
2814:
2815: ;
2816: $if $(@expr1073744086 $!@expr1073744087 $assertEquals $(@expr1073744088 "cppcheck-2.8/test/testnullpointer.cpp" $, 2816 $, "" $, errout@var100 .@expr1073744089 str (@expr1073744090 ) $) $) { $return ; }
2817: }
2818:
2819:
2820: void pointerCheckAndDeRef ( ) {
2821: $check_ $(@expr1073744091 "cppcheck-2.8/test/testnullpointer.cpp" $, 2821 $, "void foo(char *p) {\n    if (!p) {\n    }\n    *p = 0;\n}" $)
2822:
2823:
2824:
2825: ;
2826: $if $(@expr1073744092 $!@expr1073744093 $assertEquals $(@expr1073744094 "cppcheck-2.8/test/testnullpointer.cpp" $, 2826 $, "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2827:
2828: $check_ $(@expr1073744097 "cppcheck-2.8/test/testnullpointer.cpp" $, 2828 $, "void foo(char *p) {\n    if (p && *p == 0) {\n    }\n    printf(\"%c\", *p);\n}" $)
2829:
2830:
2831:
2832: ;
2833: $if $(@expr1073744098 $!@expr1073744099 $assertEquals $(@expr1073744100 "cppcheck-2.8/test/testnullpointer.cpp" $, 2833 $, "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2834:
2835: $check_ $(@expr1073744103 "cppcheck-2.8/test/testnullpointer.cpp" $, 2835 $, "void foo(char *p) {\n    if (p && *p == 0) {\n    } else { *p = 0; }\n}" $)
2836:
2837:
2838: ;
2839: $if $(@expr1073744104 $!@expr1073744105 $assertEquals $(@expr1073744106 "cppcheck-2.8/test/testnullpointer.cpp" $, 2839 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2840:
2841: $check_ $(@expr1073744109 "cppcheck-2.8/test/testnullpointer.cpp" $, 2841 $, "void foo(char *p) {\n    if (p) {\n    }\n    strcpy(p, \"abc\");\n}" $)
2842:
2843:
2844:
2845: ;
2846: $if $(@expr1073744110 $!@expr1073744111 $assertEquals $(@expr1073744112 "cppcheck-2.8/test/testnullpointer.cpp" $, 2846 $, "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2847:
2848: $check_ $(@expr1073744115 "cppcheck-2.8/test/testnullpointer.cpp" $, 2848 $, "void foo(char *p) {\n    if (p) {\n    }\n    bar();\n    strcpy(p, \"abc\");\n}" $)
2849:
|
2852:
2853: ;
2854: $if $(@expr1073744116 $!@expr1073744117 $assertEquals $(@expr1073744118 "cppcheck-2.8/test/testnullpointer.cpp" $, 2854 $, "[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2855:
2856: $check_ $(@expr1073744121 "cppcheck-2.8/test/testnullpointer.cpp" $, 2856 $, "void foo(abc *p) {\n    if (!p) {\n    }\n    else { if (!p->x) {\n    } }\n}" $)
2857:
|
2860:
2861: ;
2862: $if $(@expr1073744122 $!@expr1073744123 $assertEquals $(@expr1073744124 "cppcheck-2.8/test/testnullpointer.cpp" $, 2862 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2863:
2864: {
2865: static const char code@var126 [@expr1073744127 71 ] =@expr1073744128
2866: "void foo(char *p) {\n    if (!p) {\n        abort();\n    }\n    *p = 0;\n}"
2867:
|
2870:
2871: ;
2872: $check_ $(@expr1073744129 "cppcheck-2.8/test/testnullpointer.cpp" $, 2872 $, code@var126 , false $) ;
2873: $if $(@expr1073744130 $!@expr1073744131 $assertEquals $(@expr1073744132 "cppcheck-2.8/test/testnullpointer.cpp" $, 2873 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2874:
2875: $check_ $(@expr1073744135 "cppcheck-2.8/test/testnullpointer.cpp" $, 2875 $, code@var126 , true $) ;
2876: $if $(@expr1073744136 $!@expr1073744137 $assertEquals $(@expr1073744138 "cppcheck-2.8/test/testnullpointer.cpp" $, 2876 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2877: }
2878:
2879: $check_ $(@expr1073744141 "cppcheck-2.8/test/testnullpointer.cpp" $, 2879 $, "void foo(char *p) {\n    if (!p) {\n        (*bail)();\n    }\n    *p = 0;\n}" $)
2880:
|
2883:
2884: ;
2885: $if $(@expr1073744142 $!@expr1073744143 $assertEquals $(@expr1073744144 "cppcheck-2.8/test/testnullpointer.cpp" $, 2885 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2886:
2887: $check_ $(@expr1073744147 "cppcheck-2.8/test/testnullpointer.cpp" $, 2887 $, "void foo(char *p) {\n    if (!p) {\n        throw x;\n    }\n    *p = 0;\n}" $)
2888:
|
2891:
2892: ;
2893: $if $(@expr1073744148 $!@expr1073744149 $assertEquals $(@expr1073744150 "cppcheck-2.8/test/testnullpointer.cpp" $, 2893 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2894:
2895: $check_ $(@expr1073744153 "cppcheck-2.8/test/testnullpointer.cpp" $, 2895 $, "void foo(char *p) {\n    if (!p) {\n        ab.abort();\n    }\n    *p = 0;\n}" $)
2896:
|
2899:
2900: ;
2901: $if $(@expr1073744154 $!@expr1073744155 $assertEquals $(@expr1073744156 "cppcheck-2.8/test/testnullpointer.cpp" $, 2901 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2902:
2903: $check_ $(@expr1073744159 "cppcheck-2.8/test/testnullpointer.cpp" $, 2903 $, "void foo(char *p) {\n    if (!p) {\n        switch (x) { }\n    }\n}" , true $)
2904:
2905:
2906:
2907: ;
2908: $if $(@expr1073744160 $!@expr1073744161 $assertEquals $(@expr1073744162 "cppcheck-2.8/test/testnullpointer.cpp" $, 2908 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2909:
2910: $check_ $(@expr1073744165 "cppcheck-2.8/test/testnullpointer.cpp" $, 2910 $, "void foo(char *p) {\n    if (!p) {\n    }\n    return *x;\n}" , true $)
2911:
2912:
2913:
2914: ;
2915: $if $(@expr1073744166 $!@expr1073744167 $assertEquals $(@expr1073744168 "cppcheck-2.8/test/testnullpointer.cpp" $, 2915 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2916:
2917: $check_ $(@expr1073744171 "cppcheck-2.8/test/testnullpointer.cpp" $, 2917 $, "int foo(int *p) {\n    if (!p) {\n        x = *p;\n        return 5+*p;\n    }\n}" $)
2918:
|
2921:
2922: ;
2923: $if $(@expr1073744172 $!@expr1073744173 $assertEquals $(@expr1073744174 "cppcheck-2.8/test/testnullpointer.cpp" $, 2923 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return
2924: ; }
2925:
2926:
2927: $check_ $(@expr1073744177 "cppcheck-2.8/test/testnullpointer.cpp" $, 2927 $, "void f() {\n    A a;\n    if (!a) {\n        a.x();\n    }\n}" $)
2928:
|
2931:
2932: ;
2933: $if $(@expr1073744178 $!@expr1073744179 $assertEquals $(@expr1073744180 "cppcheck-2.8/test/testnullpointer.cpp" $, 2933 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2934:
2935:
2936: $check_ $(@expr1073744183 "cppcheck-2.8/test/testnullpointer.cpp" $, 2936 $, "void f(Foo *foo) {\n    if (!dynamic_cast<bar *>(foo)) {\n        *foo = 0;\n    }\n}" $)
2937:
2938:
2939:
2940: ;
2941: $if $(@expr1073744184 $!@expr1073744185 $assertEquals $(@expr1073744186 "cppcheck-2.8/test/testnullpointer.cpp" $, 2941 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2942:
2943:
2944: $check_ $(@expr1073744189 "cppcheck-2.8/test/testnullpointer.cpp" $, 2944 $, "Fred *fred;\nvoid a() {\n    if (!fred) {\n        initfred();\n        fred->x = 0;\n    }\n}" $)
2945:
|
2949:
2950: ;
2951: $if $(@expr1073744190 $!@expr1073744191 $assertEquals $(@expr1073744192 "cppcheck-2.8/test/testnullpointer.cpp" $, 2951 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2952:
2953:
2954: $check_ $(@expr1073744195 "cppcheck-2.8/test/testnullpointer.cpp" $, 2954 $, "void foo(char *p) {\n    if (p) {\n        return;\n    }\n    *p = 0;\n}" $)
2955:
|
2958:
2959: ;
2960: $if $(@expr1073744196 $!@expr1073744197 $assertEquals $(@expr1073744198 "cppcheck-2.8/test/testnullpointer.cpp" $, 2960 $, "[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2961:
2962:
2963: $check_ $(@expr1073744201 "cppcheck-2.8/test/testnullpointer.cpp" $, 2963 $, "void f(Fred *fred) {\n    if (fred == NULL) {\n        MACRO;\n    }\n    fred->a();\n}" $)
2964:
|
2967:
2968: ;
2969: $if $(@expr1073744202 $!@expr1073744203 $assertEquals $(@expr1073744204 "cppcheck-2.8/test/testnullpointer.cpp" $, 2969 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2970:
2971:
2972: $check_ $(@expr1073744207 "cppcheck-2.8/test/testnullpointer.cpp" $, 2972 $, "void f(Fred *fred) {\n    if (fred == NULL) {\n        x = 0;\n    }\n    switch (x) {\n        case 1:\n            fred->a();\n            break;\n    };\n}" $)
2973:
|
2980:
2981: ;
2982: $if $(@expr1073744208 $!@expr1073744209 $assertEquals $(@expr1073744210 "cppcheck-2.8/test/testnullpointer.cpp" $, 2982 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2983:
2984:
2985: $check_ $(@expr1073744213 "cppcheck-2.8/test/testnullpointer.cpp" $, 2985 $, "void f(char *p) {\n    int x = 1;\n    if (!p) x = 0;\n    if (x) *p = 0;\n}" $)
2986:
2987:
2988:
2989: ;
2990: $if $(@expr1073744214 $!@expr1073744215 $assertEquals $(@expr1073744216 "cppcheck-2.8/test/testnullpointer.cpp" $, 2990 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
2991:
2992:
2993: $check_ $(@expr1073744219 "cppcheck-2.8/test/testnullpointer.cpp" $, 2993 $, "class Fred {\npublic:\n    Wilma *wilma;\n    void a();\n    void b();\n};\n\nvoid Fred::a() {\n    if ( wilma ) { }\n}\n\nvoid Fred::b() {\n    wilma->Reload();\n}" , true $)
2994:
|
3005:
3006: ;
3007: $if $(@expr1073744220 $!@expr1073744221 $assertEquals $(@expr1073744222 "cppcheck-2.8/test/testnullpointer.cpp" $, 3007 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3008:
3009: $check_ $(@expr1073744225 "cppcheck-2.8/test/testnullpointer.cpp" $, 3009 $, "void test(int *i) {\n  if(i == NULL) { }\n  else {\n    int b = *i;\n  }\n}" , true $)
3010:
|
3013:
3014: ;
3015: $if $(@expr1073744226 $!@expr1073744227 $assertEquals $(@expr1073744228 "cppcheck-2.8/test/testnullpointer.cpp" $, 3015 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3016:
3017:
3018: $check_ $(@expr1073744231 "cppcheck-2.8/test/testnullpointer.cpp" $, 3018 $, "void f()\n{\n   struct foo *pFoo = NULL;\n   size_t len;\n\n   len = sizeof(*pFoo) - sizeof(pFoo->data);\n\n   if (pFoo)\n      bar();\n}" , true $)
3019:
|
3026:
3027: ;
3028: $if $(@expr1073744232 $!@expr1073744233 $assertEquals $(@expr1073744234 "cppcheck-2.8/test/testnullpointer.cpp" $, 3028 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3029:
3030:
3031: $check_ $(@expr1073744237 "cppcheck-2.8/test/testnullpointer.cpp" $, 3031 $, "void f()\n{\n   struct foo *pFoo = NULL;\n   size_t len;\n\n   while (pFoo)\n      pFoo = pFoo->next;\n\n   len = sizeof(pFoo->data);\n}" , true $)
3032:
|
3039:
3040: ;
3041: $if $(@expr1073744238 $!@expr1073744239 $assertEquals $(@expr1073744240 "cppcheck-2.8/test/testnullpointer.cpp" $, 3041 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3042:
3043:
3044: $check_ $(@expr1073744243 "cppcheck-2.8/test/testnullpointer.cpp" $, 3044 $, "void f()\n{\n   struct foo *pFoo = NULL;\n   size_t len;\n\n   while (pFoo)\n      pFoo = pFoo->next;\n\n   len = decltype(*pFoo);\n}" , true $)
3045:
|
3052:
3053: ;
3054: $if $(@expr1073744244 $!@expr1073744245 $assertEquals $(@expr1073744246 "cppcheck-2.8/test/testnullpointer.cpp" $, 3054 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3055:
3056: $check_ $(@expr1073744249 "cppcheck-2.8/test/testnullpointer.cpp" $, 3056 $, "int foo(struct Fred *fred) {\n    if (fred) { }\n    return fred->a;\n}" $)
3057:
3058:
3059: ;
3060: $if $(@expr1073744250 $!@expr1073744251 $assertEquals $(@expr1073744252 "cppcheck-2.8/test/testnullpointer.cpp" $, 3060 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'fred' is redundant or there is possible null pointer dereference: fred.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3061:
3062:
3063: $check_ $(@expr1073744255 "cppcheck-2.8/test/testnullpointer.cpp" $, 3063 $, "void f() {\n    char *p; p = x();\n    if (!p) { }\n    *p = 0;\n}" $)
3064:
3065:
3066:
3067: ;
3068: $if $(@expr1073744256 $!@expr1073744257 $assertEquals $(@expr1073744258 "cppcheck-2.8/test/testnullpointer.cpp" $, 3068 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3069:
3070:
3071: $check_ $(@expr1073744261 "cppcheck-2.8/test/testnullpointer.cpp" $, 3071 $, "void f() {\n    char *p;\n    if (p == 0 && (p = malloc(10)) != 0) {\n        *p = 0;\n    }\n}" $)
3072:
|
3075:
3076: ;
3077: $if $(@expr1073744262 $!@expr1073744263 $assertEquals $(@expr1073744264 "cppcheck-2.8/test/testnullpointer.cpp" $, 3077 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3078:
3079:
3080: $check_ $(@expr1073744267 "cppcheck-2.8/test/testnullpointer.cpp" $, 3080 $, "void f() {\n    char *p;\n    if (p == 0 && (p = malloc(10)) != a && (*p = a)) {\n        *p = 0;\n    }\n}" $)
3081:
|
3084:
3085: ;
3086: $if $(@expr1073744268 $!@expr1073744269 $assertEquals $(@expr1073744270 "cppcheck-2.8/test/testnullpointer.cpp" $, 3086 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3087:
3088:
3089: $check_ $(@expr1073744273 "cppcheck-2.8/test/testnullpointer.cpp" $, 3089 $, "void f() {\n    char *p;\n    if (p == 0 && (*p = 0)) {\n        return;\n    }\n}" $)
3090:
|
3093:
3094: ;
3095: $if $(@expr1073744274 $!@expr1073744275 $assertEquals $(@expr1073744276 "cppcheck-2.8/test/testnullpointer.cpp" $, 3095 $, "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3096:
3097:
3098: $check_ $(@expr1073744279 "cppcheck-2.8/test/testnullpointer.cpp" $, 3098 $, "void f() {\n    struct foo *p;\n    if (p == 0 && p->x == 10) {\n        return;\n    }\n}" $)
3099:
|
3102:
3103: ;
3104: $if $(@expr1073744280 $!@expr1073744281 $assertEquals $(@expr1073744282 "cppcheck-2.8/test/testnullpointer.cpp" $, 3104 $, "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3105:
3106:
3107: $check_ $(@expr1073744285 "cppcheck-2.8/test/testnullpointer.cpp" $, 3107 $, "void f() {\n    struct foo *p;\n    if (p == 0 || p->x == 10) {\n        return;\n    }\n}" $)
3108:
|
3111:
3112: ;
3113: $if $(@expr1073744286 $!@expr1073744287 $assertEquals $(@expr1073744288 "cppcheck-2.8/test/testnullpointer.cpp" $, 3113 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3114:
3115:
3116: $check_ $(@expr1073744291 "cppcheck-2.8/test/testnullpointer.cpp" $, 3116 $, "void f() {\n    char *p; p = malloc(10);\n    if (p == NULL && (*p = a)) {\n        return;\n    }\n}" $)
3117:
|
3120:
3121: ;
3122: $if $(@expr1073744292 $!@expr1073744293 $assertEquals $(@expr1073744294 "cppcheck-2.8/test/testnullpointer.cpp" $, 3122 $, "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'p==NULL' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3123:
3124:
3125: $check_ $(@expr1073744297 "cppcheck-2.8/test/testnullpointer.cpp" $, 3125 $, "void f(struct X *p, int x) {\n    if (!p && x==1 || p && p->x==0) {\n        return;\n    }\n}" $)
3126:
3127:
3128:
3129: ;
3130: $if $(@expr1073744298 $!@expr1073744299 $assertEquals $(@expr1073744300 "cppcheck-2.8/test/testnullpointer.cpp" $, 3130 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3131:
3132: {
3133: const char code@var127 [@expr1073744303 64 ] =@expr1073744304 "void f(Fred *fred) {\n    if (fred == NULL) { }\n    fred->x();\n}"
3134:
3135:
3136: ;
3137:
3138: $check_ $(@expr1073744305 "cppcheck-2.8/test/testnullpointer.cpp" $, 3138 $, code@var127 $) ;
3139: $if $(@expr1073744306 $!@expr1073744307 $assertEquals $(@expr1073744308 "cppcheck-2.8/test/testnullpointer.cpp" $, 3139 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'fred==NULL' is redundant or there is possible null pointer dereference: fred.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3140: }
3141:
3142: $check_ $(@expr1073744311 "cppcheck-2.8/test/testnullpointer.cpp" $, 3142 $, "void f(char *s) {\n    if (s==0);\n    strcpy(a, s?b:c);\n}" $)
3143:
3144:
3145: ;
3146: $if $(@expr1073744312 $!@expr1073744313 $assertEquals $(@expr1073744314 "cppcheck-2.8/test/testnullpointer.cpp" $, 3146 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3147:
3148:
3149: $check_ $(@expr1073744317 "cppcheck-2.8/test/testnullpointer.cpp" $, 3149 $, "void f(struct fred_t *fred) {\n    if (!fred)\n        int sz = sizeof(fred->x);\n}" , true $)
3150:
3151:
3152: ;
3153: $if $(@expr1073744318 $!@expr1073744319 $assertEquals $(@expr1073744320 "cppcheck-2.8/test/testnullpointer.cpp" $, 3153 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3154:
3155:
3156: $check_ $(@expr1073744323 "cppcheck-2.8/test/testnullpointer.cpp" $, 3156 $, "void f(int *x) {\n    $if (!x) {}\n    *x = 0;\n}" $)
3157:
3158:
3159: ;
3160: $if $(@expr1073744324 $!@expr1073744325 $assertEquals $(@expr1073744326 "cppcheck-2.8/test/testnullpointer.cpp" $, 3160 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3161:
3162:
3163: $check_ $(@expr1073744329 "cppcheck-2.8/test/testnullpointer.cpp" $, 3163 $, "int f(ABC *p) {\n    if (!p) {}\n    return p ? p->x : 0;\n}" $)
3164:
3165:
3166: ;
3167: $if $(@expr1073744330 $!@expr1073744331 $assertEquals $(@expr1073744332 "cppcheck-2.8/test/testnullpointer.cpp" $, 3167 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3168: $check_ $(@expr1073744335 "cppcheck-2.8/test/testnullpointer.cpp" $, 3168 $, "int f(ABC *p) {\n    if (!p) {}\n    return q ? p->x : 0;\n}" $)
3169:
3170:
3171: ;
3172: $todoAssertEquals $(@expr1073744336 "cppcheck-2.8/test/testnullpointer.cpp" $, 3172 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) ;
3173:
3174: $check_ $(@expr1073744339 "cppcheck-2.8/test/testnullpointer.cpp" $, 3174 $, "int f(ABC *p) {\n    if (!p) {}\n    return p && p->x;\n}" $)
3175:
3176:
3177: ;
3178: $if $(@expr1073744340 $!@expr1073744341 $assertEquals $(@expr1073744342 "cppcheck-2.8/test/testnullpointer.cpp" $, 3178 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3179:
3180: $check_ $(@expr1073744345 "cppcheck-2.8/test/testnullpointer.cpp" $, 3180 $, "void f(int x, int *p) {\n    if (x || !p) {}\n    *p = 0;\n}" $)
3181:
3182:
3183: ;
3184: $if $(@expr1073744346 $!@expr1073744347 $assertEquals $(@expr1073744348 "cppcheck-2.8/test/testnullpointer.cpp" $, 3184 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3185:
3186:
3187: $check_ $(@expr1073744351 "cppcheck-2.8/test/testnullpointer.cpp" $, 3187 $, "void f() {\n  int *pointer = NULL;\n  pointer = func(sizeof pointer[0]);\n}" $)
3188:
3189:
3190: ;
3191: $if $(@expr1073744352 $!@expr1073744353 $assertEquals $(@expr1073744354 "cppcheck-2.8/test/testnullpointer.cpp" $, 3191 $, "" $, errout@var100 .@expr2271 str (@expr2272 ) $) $) { $return ; }
3192: }
3193:
3194:
3195: void nullConstantDereference ( ) {
3196: $check_ $(@expr1073744357 "cppcheck-2.8/test/testnullpointer.cpp" $, 3196 $, "int f() {\n    int* p = 0;\n    return p[4];\n}" $)
3197:
3198:
3199: ;
3200: $if $(@expr1073744358 $!@expr1073744359 $assertEquals $(@expr1073744360 "cppcheck-2.8/test/testnullpointer.cpp" $, 3200 $, "[test.cpp:3]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr2537 str (@expr2538 ) $) $) { $return ; }
3201:
3202: $check_ $(@expr1073744363 "cppcheck-2.8/test/testnullpointer.cpp" $, 3202 $, "void f() {\n    typeof(*NULL) y;\n}" , true $)
3203:
3204: ;
3205: $if $(@expr1073744364 $!@expr1073744365 $assertEquals $(@expr1073744366 "cppcheck-2.8/test/testnullpointer.cpp" $, 3205 $, "" $, errout@var100 .@expr2537 str (@expr2538 ) $) $) { $return ; }
3206:
3207: $check_ $(@expr1073744369 "cppcheck-2.8/test/testnullpointer.cpp" $, 3207 $, "int * f() {\n    return NULL;\n}\nint main() {\n  return *f();\n}" $)
3208:
|
3211:
3212: ;
3213: $if $(@expr1073744370 $!@expr1073744371 $assertEquals $(@expr1073744372 "cppcheck-2.8/test/testnullpointer.cpp" $, 3213 $, "[test.cpp:5]: (error) Null pointer dereference: f()\n" $, errout@var100 .@expr2537 str (@expr2538 ) $) $) { $return ; }
3214: }
3215:
3216: void gcc_statement_expression ( ) {
3217:
3218: $check_ $(@expr1073744375 "cppcheck-2.8/test/testnullpointer.cpp" $, 3218 $, "void f(struct ABC *abc) {\n    ({ if (abc) dbg(); })\n}" $)
3219:
3220: ;
3221: $if $(@expr1073744376 $!@expr1073744377 $assertEquals $(@expr1073744378 "cppcheck-2.8/test/testnullpointer.cpp" $, 3221 $, "" $, errout@var100 .@expr1073744379 str (@expr1073744380 ) $) $) { $return ; }
3222: }
3223:
3224: void snprintf_with_zero_size ( ) {
3225:
3226: $check_ $(@expr1073744381 "cppcheck-2.8/test/testnullpointer.cpp" $, 3226 $, "void f() {\n    int bytes = snprintf(0, 0, \"%u\", 1);\n}" , true $)
3227:
3228: ;
3229: $if $(@expr1073744382 $!@expr1073744383 $assertEquals $(@expr1073744384 "cppcheck-2.8/test/testnullpointer.cpp" $, 3229 $, "" $, errout@var100 .@expr1073744385 str (@expr1073744386 ) $) $) { $return ; }
3230: }
3231:
3232: void snprintf_with_non_zero_size ( ) {
3233:
3234: $check_ $(@expr1073744387 "cppcheck-2.8/test/testnullpointer.cpp" $, 3234 $, "void f() {\n    int bytes = snprintf(0, 10, \"%u\", 1);\n}" $)
3235:
3236: ;
3237: $if $(@expr1073744388 $!@expr1073744389 $assertEquals $(@expr1073744390 "cppcheck-2.8/test/testnullpointer.cpp" $, 3237 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr1073744391 str (@expr1073744392 ) $) $) { $return ; }
3238: }
3239:
3240: void printf_with_invalid_va_argument ( ) {
3241: $check_ $(@expr1073744393 "cppcheck-2.8/test/testnullpointer.cpp" $, 3241 $, "void f() {\n    printf(\"%s\", 0);\n}" $)
3242:
3243: ;
3244: $if $(@expr1073744394 $!@expr1073744395 $assertEquals $(@expr1073744396 "cppcheck-2.8/test/testnullpointer.cpp" $, 3244 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3245:
3246: $check_ $(@expr1073744399 "cppcheck-2.8/test/testnullpointer.cpp" $, 3246 $, "void f(char* s) {\n    printf(\"%s\", s);\n}" $)
3247:
3248: ;
3249: $if $(@expr1073744400 $!@expr1073744401 $assertEquals $(@expr1073744402 "cppcheck-2.8/test/testnullpointer.cpp" $, 3249 $, "" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3250:
3251: $check_ $(@expr1073744405 "cppcheck-2.8/test/testnullpointer.cpp" $, 3251 $, "void f() {\n    char* s = 0;\n    printf(\"%s\", s);\n}" $)
3252:
3253:
3254: ;
3255: $if $(@expr1073744406 $!@expr1073744407 $assertEquals $(@expr1073744408 "cppcheck-2.8/test/testnullpointer.cpp" $, 3255 $, "[test.cpp:3]: (error) Null pointer dereference: s\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3256:
3257: $check_ $(@expr1073744411 "cppcheck-2.8/test/testnullpointer.cpp" $, 3257 $, "void f() {\n    char *s = 0;\n    printf(\"%s\", s == 0 ? a : s);\n}" $)
3258:
3259:
3260: ;
3261: $if $(@expr1073744412 $!@expr1073744413 $assertEquals $(@expr1073744414 "cppcheck-2.8/test/testnullpointer.cpp" $, 3261 $, "" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3262:
3263: $check_ $(@expr1073744417 "cppcheck-2.8/test/testnullpointer.cpp" $, 3263 $, "void f() {\n    printf(\"%u%s\", 0, 0);\n}" $)
3264:
3265: ;
3266: $if $(@expr1073744418 $!@expr1073744419 $assertEquals $(@expr1073744420 "cppcheck-2.8/test/testnullpointer.cpp" $, 3266 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3267:
3268: $check_ $(@expr1073744423 "cppcheck-2.8/test/testnullpointer.cpp" $, 3268 $, "void f(char* s) {\n    printf(\"%u%s\", 0, s);\n}" $)
3269:
3270: ;
3271: $if $(@expr1073744424 $!@expr1073744425 $assertEquals $(@expr1073744426 "cppcheck-2.8/test/testnullpointer.cpp" $, 3271 $, "" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3272:
3273: $check_ $(@expr1073744429 "cppcheck-2.8/test/testnullpointer.cpp" $, 3273 $, "void f() {\n    char* s = 0;\n    printf(\"%u%s\", 123, s);\n}" $)
3274:
3275:
3276: ;
3277: $if $(@expr1073744430 $!@expr1073744431 $assertEquals $(@expr1073744432 "cppcheck-2.8/test/testnullpointer.cpp" $, 3277 $, "[test.cpp:3]: (error) Null pointer dereference: s\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3278:
3279:
3280: $check_ $(@expr1073744435 "cppcheck-2.8/test/testnullpointer.cpp" $, 3280 $, "void f() {\n    printf(\"%%%s%%\", 0);\n}" $)
3281:
3282: ;
3283: $if $(@expr1073744436 $!@expr1073744437 $assertEquals $(@expr1073744438 "cppcheck-2.8/test/testnullpointer.cpp" $, 3283 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3284:
3285: $check_ $(@expr1073744441 "cppcheck-2.8/test/testnullpointer.cpp" $, 3285 $, "void f(char* s) {\n    printf(\"text: %s, %s\", s, 0);\n}" $)
3286:
3287: ;
3288: $if $(@expr1073744442 $!@expr1073744443 $assertEquals $(@expr1073744444 "cppcheck-2.8/test/testnullpointer.cpp" $, 3288 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3289:
3290:
3291: $check_ $(@expr1073744447 "cppcheck-2.8/test/testnullpointer.cpp" $, 3291 $, "void f() {\n    char* s = \"blabla\";\n    printf(\"%s\", s);\n}" $)
3292:
3293:
3294: ;
3295: $if $(@expr1073744448 $!@expr1073744449 $assertEquals $(@expr1073744450 "cppcheck-2.8/test/testnullpointer.cpp" $, 3295 $, "" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3296:
3297:
3298: $check_ $(@expr1073744453 "cppcheck-2.8/test/testnullpointer.cpp" $, 3298 $, "void f(char* s) {\n    printf(\"text: %m%s, %s\", s, 0);\n}" $)
3299:
3300: ;
3301: $if $(@expr1073744454 $!@expr1073744455 $assertEquals $(@expr1073744456 "cppcheck-2.8/test/testnullpointer.cpp" $, 3301 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3302:
3303: $check_ $(@expr1073744459 "cppcheck-2.8/test/testnullpointer.cpp" $, 3303 $, "void f(char* s) {\n    printf(\"text: %*s, %s\", s, 0);\n}" $)
3304:
3305: ;
3306: $if $(@expr1073744460 $!@expr1073744461 $assertEquals $(@expr1073744462 "cppcheck-2.8/test/testnullpointer.cpp" $, 3306 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3307:
3308:
3309: $check_ $(@expr1073744465 "cppcheck-2.8/test/testnullpointer.cpp" $, 3309 $, "void f() {\n    printf(\"%-*.*s\", s, 0);\n    sprintf(\"%*\", s);\n}" $)
3310:
3311:
3312: ;
3313: $if $(@expr1073744466 $!@expr1073744467 $assertEquals $(@expr1073744468 "cppcheck-2.8/test/testnullpointer.cpp" $, 3313 $, "" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
3314: }
3315:
3316: void scanf_with_invalid_va_argument ( ) {
3317: $check_ $(@expr1073744471 "cppcheck-2.8/test/testnullpointer.cpp" $, 3317 $, "void f(char* s) {\n    sscanf(s, \"%s\", 0);\n}" $)
3318:
3319: ;
3320: $if $(@expr1073744472 $!@expr1073744473 $assertEquals $(@expr1073744474 "cppcheck-2.8/test/testnullpointer.cpp" $, 3320 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr2651 str (@expr2652 ) $) $) { $return ; }
3321:
3322: $check_ $(@expr1073744477 "cppcheck-2.8/test/testnullpointer.cpp" $, 3322 $, "void f() {\n    scanf(\"%d\", 0);\n}" $)
3323:
3324: ;
3325: $if $(@expr1073744478 $!@expr1073744479 $assertEquals $(@expr1073744480 "cppcheck-2.8/test/testnullpointer.cpp" $, 3325 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr2651 str (@expr2652 ) $) $) { $return ; }
3326:
3327: $check_ $(@expr1073744483 "cppcheck-2.8/test/testnullpointer.cpp" $, 3327 $, "void f(char* foo) {\n    char location[200];\n    int width, height;\n    sscanf(imgInfo, \"%s %d %d\", location, &width, &height);\n}" $)
3328:
3329:
3330:
3331: ;
3332: $if $(@expr1073744484 $!@expr1073744485 $assertEquals $(@expr1073744486 "cppcheck-2.8/test/testnullpointer.cpp" $, 3332 $, "" $, errout@var100 .@expr2651 str (@expr2652 ) $) $) { $return ; }
3333:
3334: $check_ $(@expr1073744489 "cppcheck-2.8/test/testnullpointer.cpp" $, 3334 $, "void f(char *dummy) {\n    int iVal;\n    sscanf(dummy, \"%d%c\", &iVal);\n}" $)
3335:
3336:
3337: ;
3338: $if $(@expr1073744490 $!@expr1073744491 $assertEquals $(@expr1073744492 "cppcheck-2.8/test/testnullpointer.cpp" $, 3338 $, "" $, errout@var100 .@expr2651 str (@expr2652 ) $) $) { $return ; }
3339:
3340: $check_ $(@expr1073744495 "cppcheck-2.8/test/testnullpointer.cpp" $, 3340 $, "void f(char *dummy) {\n    int* iVal = 0;\n    sscanf(dummy, \"%d\", iVal);\n}" $)
3341:
3342:
3343: ;
3344: $if $(@expr1073744496 $!@expr1073744497 $assertEquals $(@expr1073744498 "cppcheck-2.8/test/testnullpointer.cpp" $, 3344 $, "[test.cpp:3]: (error) Null pointer dereference: iVal\n" $, errout@var100 .@expr2651 str (@expr2652 ) $) $) { $return ; }
3345:
3346: $check_ $(@expr1073744501 "cppcheck-2.8/test/testnullpointer.cpp" $, 3346 $, "void f(char *dummy) {\n    int* iVal;\n    sscanf(dummy, \"%d\", foo(iVal));\n}" $)
3347:
3348:
3349: ;
3350: $if $(@expr1073744502 $!@expr1073744503 $assertEquals $(@expr1073744504 "cppcheck-2.8/test/testnullpointer.cpp" $, 3350 $, "" $, errout@var100 .@expr2651 str (@expr2652 ) $) $) { $return ; }
3351:
3352: $check_ $(@expr1073744507 "cppcheck-2.8/test/testnullpointer.cpp" $, 3352 $, "void f(char *dummy) {\n    int* iVal = 0;\n    sscanf(dummy, \"%d%d\", foo(iVal), iVal);\n}" $)
3353:
3354:
3355: ;
3356: $if $(@expr1073744508 $!@expr1073744509 $assertEquals $(@expr1073744510 "cppcheck-2.8/test/testnullpointer.cpp" $, 3356 $, "" $, errout@var100 .@expr2651 str (@expr2652 ) $) $) { $return ; }
3357:
3358: $check_ $(@expr1073744513 "cppcheck-2.8/test/testnullpointer.cpp" $, 3358 $, "void f(char* dummy) {\n    sscanf(dummy, \"%*d%u\", 0);\n}" $)
3359:
3360: ;
3361: $if $(@expr1073744514 $!@expr1073744515 $assertEquals $(@expr1073744516 "cppcheck-2.8/test/testnullpointer.cpp" $, 3361 $, "[test.cpp:2]: (error) Null pointer dereference\n" $, errout@var100 .@expr2651 str (@expr2652 ) $) $) { $return ; }
3362: }
3363:
3364: void nullpointer_in_return ( ) {
3365:
3366: $check_ $(@expr1073744519 "cppcheck-2.8/test/testnullpointer.cpp" $, 3366 $, "int foo() {\n    int* iVal = 0;\n    if(maybe()) iVal = g();\n    return iVal[0];\n}" $)
3367:
3368:
3369:
3370: ;
3371: $if $(@expr1073744520 $!@expr1073744521 $assertEquals $(@expr1073744522 "cppcheck-2.8/test/testnullpointer.cpp" $, 3371 $, "[test.cpp:4]: (warning) Possible null pointer dereference: iVal\n" $, errout@var100 .@expr2699 str (@expr2700 ) $) $) { $return ; }
3372:
3373: $check_ $(@expr1073744525 "cppcheck-2.8/test/testnullpointer.cpp" $, 3373 $, "int foo(int* iVal) {\n    return iVal[0];\n}" , true $)
3374:
3375: ;
3376: $if $(@expr1073744526 $!@expr1073744527 $assertEquals $(@expr1073744528 "cppcheck-2.8/test/testnullpointer.cpp" $, 3376 $, "" $, errout@var100 .@expr2699 str (@expr2700 ) $) $) { $return ; }
3377: }
3378:
3379: void nullpointer_in_typeid ( ) {
3380:
3381: $check_ $(@expr1073744531 "cppcheck-2.8/test/testnullpointer.cpp" $, 3381 $, "struct PolymorphicA { virtual ~A() {} };\nbool foo() {\n     PolymorphicA* a = 0;\n     return typeid(*a) == typeid(*a);\n}" , true $)
3382:
3383:
3384:
3385: ;
3386: $if $(@expr1073744532 $!@expr1073744533 $assertEquals $(@expr1073744534 "cppcheck-2.8/test/testnullpointer.cpp" $, 3386 $, "" $, errout@var100 .@expr2711 str (@expr2712 ) $) $) { $return ; }
3387:
3388: $check_ $(@expr1073744537 "cppcheck-2.8/test/testnullpointer.cpp" $, 3388 $, "struct NonPolymorphicA { ~A() {} };\nbool foo() {\n     NonPolymorphicA* a = 0;\n     return typeid(*a) == typeid(*a);\n}" , true $)
3389:
3390:
3391:
3392: ;
3393: $if $(@expr1073744538 $!@expr1073744539 $assertEquals $(@expr1073744540 "cppcheck-2.8/test/testnullpointer.cpp" $, 3393 $, "" $, errout@var100 .@expr2711 str (@expr2712 ) $) $) { $return ; }
3394:
3395: $check_ $(@expr1073744543 "cppcheck-2.8/test/testnullpointer.cpp" $, 3395 $, "bool foo() {\n     char* c = 0;\n     return typeid(*c) == typeid(*c);\n}" , true $)
3396:
3397:
3398: ;
3399: $if $(@expr1073744544 $!@expr1073744545 $assertEquals $(@expr1073744546 "cppcheck-2.8/test/testnullpointer.cpp" $, 3399 $, "" $, errout@var100 .@expr2711 str (@expr2712 ) $) $) { $return ; }
3400:
3401: }
3402:
3403: void nullpointer_in_for_loop ( ) {
3404:
3405: $check_ $(@expr1073744549 "cppcheck-2.8/test/testnullpointer.cpp" $, 3405 $, "void f(int* ptr, int cnt){\n if (!ptr)\n  cnt = 0;\n for (int i = 0; i < cnt; ++i)\n  *ptr++ = 0;\n}" $)
3406:
|
3409:
3410: ;
3411: $if $(@expr1073744550 $!@expr1073744551 $assertEquals $(@expr1073744552 "cppcheck-2.8/test/testnullpointer.cpp" $, 3411 $, "" $, errout@var100 .@expr1073744553 str (@expr1073744554 ) $) $) { $return ; }
3412: }
3413:
3414: void nullpointerDelete ( ) {
3415: $check_ $(@expr1073744555 "cppcheck-2.8/test/testnullpointer.cpp" $, 3415 $, "void f() {\n  K *k = getK();\n  if (k)\n     k->doStuff();\n  delete k;\n}\n" , true $)
3416:
|
3419:
3420: ;
3421: $if $(@expr1073744556 $!@expr1073744557 $assertEquals $(@expr1073744558 "cppcheck-2.8/test/testnullpointer.cpp" $, 3421 $, "" $, errout@var100 .@expr2735 str (@expr2736 ) $) $) { $return ; }
3422:
3423: $check_ $(@expr1073744561 "cppcheck-2.8/test/testnullpointer.cpp" $, 3423 $, "void f() {\n  K *k = getK();\n  if (k)\n     k[0] = ptr;\n  delete [] k;\n  k = new K[10];\n}\n" , true $)
3424:
|
3428:
3429: ;
3430: $if $(@expr1073744562 $!@expr1073744563 $assertEquals $(@expr1073744564 "cppcheck-2.8/test/testnullpointer.cpp" $, 3430 $, "" $, errout@var100 .@expr2735 str (@expr2736 ) $) $) { $return ; }
3431: }
3432:
3433: void nullpointerSubFunction ( ) {
3434: $check_ $(@expr1073744567 "cppcheck-2.8/test/testnullpointer.cpp" $, 3434 $, "void g(int* x) { *x; }\nvoid f(int* x) {\n    if (x)\n        g(x);\n}" $)
3435:
3436:
3437:
3438: ;
3439: $if $(@expr1073744568 $!@expr1073744569 $assertEquals $(@expr1073744570 "cppcheck-2.8/test/testnullpointer.cpp" $, 3439 $, "" $, errout@var100 .@expr1073744571 str (@expr1073744572 ) $) $) { $return ; }
3440: }
3441:
3442: void nullpointerExit ( ) {
3443: $check_ $(@expr1073744573 "cppcheck-2.8/test/testnullpointer.cpp" $, 3443 $, "void f() {\n  K *k = getK();\n  if (!k)\n     exit(1);\n  k->f();\n}\n" , true $)
3444:
|
3447:
3448: ;
3449: $if $(@expr1073744574 $!@expr1073744575 $assertEquals $(@expr1073744576 "cppcheck-2.8/test/testnullpointer.cpp" $, 3449 $, "" $, errout@var100 .@expr1073744577 str (@expr1073744578 ) $) $) { $return ; }
3450: }
3451:
3452: void nullpointerStdString ( ) {
3453: $check_ $(@expr1073744579 "cppcheck-2.8/test/testnullpointer.cpp" $, 3453 $, "void f(std::string s1) {\n    void* p = 0;\n    s1 = 0;\n    s1 = '\\0';\n    std::string s2 = 0;\n    std::string s2 = '\\0';\n    std::string s3(0);\n    foo(std::string(0));\n    s1 = p;\n    std::string s4 = p;\n    std::string s5(p);\n    foo(std::string(p));\n}" , true $)
3454:
|
3464:
3465: ;
3466: $if $(@expr1073744580 $!@expr1073744581 $assertEquals $(@expr1073744582 "cppcheck-2.8/test/testnullpointer.cpp" $, 3466 $, "[test.cpp:9]: (error) Null pointer dereference: p\n[test.cpp:10]: (error) Null pointer dereference: p\n[test.cpp:11]: (error) Null pointer dereference: p\n[test.cpp:12]: (warning, inconclusive) Possible null pointer dereference: p\n[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n[test.cpp:7]: (error) Null pointer dereference\n[test.cpp:8]: (error) Null pointer dereference\n" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return
3467:
|
3473:
3474: ; }
3475:
3476: $check_ $(@expr1073744585 "cppcheck-2.8/test/testnullpointer.cpp" $, 3476 $, "void f(std::string s1) {\n    s1 = nullptr;\n    std::string s2 = nullptr;\n    std::string s3(nullptr);\n    foo(std::string(nullptr));\n}" , true $)
3477:
|
3480:
3481: ;
3482: $if $(@expr1073744586 $!@expr1073744587 $assertEquals $(@expr1073744588 "cppcheck-2.8/test/testnullpointer.cpp" $, 3482 $, "[test.cpp:2]: (error) Null pointer dereference\n[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:4]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return
3483:
3484:
3485:
3486: ; }
3487:
3488: $check_ $(@expr1073744591 "cppcheck-2.8/test/testnullpointer.cpp" $, 3488 $, "void f(std::string s1) {\n    s1 = NULL;\n    std::string s2 = NULL;\n    std::string s3(NULL);\n    foo(std::string(NULL));\n}" , true $)
3489:
|
3492:
3493: ;
3494: $if $(@expr1073744592 $!@expr1073744593 $assertEquals $(@expr1073744594 "cppcheck-2.8/test/testnullpointer.cpp" $, 3494 $, "[test.cpp:2]: (error) Null pointer dereference\n[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:4]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return
3495:
3496:
3497:
3498: ; }
3499:
3500: $check_ $(@expr1073744597 "cppcheck-2.8/test/testnullpointer.cpp" $, 3500 $, "void f(std::string s1, const std::string& s2, const std::string* s3) {\n    void* p = 0;\n    if (x) { return; }\n    foo(s1 == p);\n    foo(s2 == p);\n    foo(s3 == p);\n    foo(p == s1);\n    foo(p == s2);\n    foo(p == s3);\n}" , true $)
3501:
|
3508:
3509: ;
3510: $if $(@expr1073744598 $!@expr1073744599 $assertEquals $(@expr1073744600 "cppcheck-2.8/test/testnullpointer.cpp" $, 3510 $, "[test.cpp:4]: (error) Null pointer dereference: p\n[test.cpp:5]: (error) Null pointer dereference: p\n[test.cpp:7]: (error) Null pointer dereference: p\n[test.cpp:8]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return
3511:
3512:
3513: ; }
3514:
3515: $check_ $(@expr1073744603 "cppcheck-2.8/test/testnullpointer.cpp" $, 3515 $, "void f(std::string s1, const std::string& s2, const std::string* s3) {\n    void* p = 0;\n    if (x) { return; }\n    foo(0 == s1.size());\n    foo(0 == s2.size());\n    foo(0 == s3->size());\n    foo(s1.size() == 0);\n    foo(s2.size() == 0);\n    foo(s3->size() == 0);\n}" , true $)
3516:
|
3523:
3524: ;
3525: $if $(@expr1073744604 $!@expr1073744605 $assertEquals $(@expr1073744606 "cppcheck-2.8/test/testnullpointer.cpp" $, 3525 $, "" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return ; }
3526:
3527: $check_ $(@expr1073744609 "cppcheck-2.8/test/testnullpointer.cpp" $, 3527 $, "void f(std::string s1, const std::string& s2) {\n    if (x) { return; }\n    foo(0 == s1[0]);\n    foo(0 == s2[0]);\n    foo(s1[0] == 0);\n    foo(s2[0] == 0);\n}" , true $)
3528:
|
3532:
3533: ;
3534: $if $(@expr1073744610 $!@expr1073744611 $assertEquals $(@expr1073744612 "cppcheck-2.8/test/testnullpointer.cpp" $, 3534 $, "" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return ; }
3535:
3536: $check_ $(@expr1073744615 "cppcheck-2.8/test/testnullpointer.cpp" $, 3536 $, "void f(std::string s1, const std::string& s2) {\n    if (x) { return; }\n    foo(s1 == '\\0');\n    foo(s2 == '\\0');\n    foo('\\0' == s1);\n    foo('\\0' == s2);\n}" , true $)
3537:
|
3541:
3542: ;
3543: $if $(@expr1073744616 $!@expr1073744617 $assertEquals $(@expr1073744618 "cppcheck-2.8/test/testnullpointer.cpp" $, 3543 $, "" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return ; }
3544:
3545: $check_ $(@expr1073744621 "cppcheck-2.8/test/testnullpointer.cpp" $, 3545 $, "class Bar {\n    std::string s;\n    Bar() : s(0) {}\n};\nclass Foo {\n    std::string s;\n    Foo();\n};\nFoo::Foo() : s(0) {}" $)
3546:
|
3552:
3553: ;
3554: $if $(@expr1073744622 $!@expr1073744623 $assertEquals $(@expr1073744624 "cppcheck-2.8/test/testnullpointer.cpp" $, 3554 $, "[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:9]: (error) Null pointer dereference\n" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return
3555: ; }
3556:
3557: $check_ $(@expr1073744627 "cppcheck-2.8/test/testnullpointer.cpp" $, 3557 $, "void f() {\n    std::string s = 0 == x ? \"a\" : \"b\";\n}" , true $)
3558:
3559: ;
3560: $if $(@expr1073744628 $!@expr1073744629 $assertEquals $(@expr1073744630 "cppcheck-2.8/test/testnullpointer.cpp" $, 3560 $, "" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return ; }
3561:
3562: $check_ $(@expr1073744633 "cppcheck-2.8/test/testnullpointer.cpp" $, 3562 $, "void f() {\n  const std::string s = g();\n  ASSERT_MESSAGE(\"Error on s\", 0 == s.compare(\"Some text\"));\n}" $)
3563:
3564:
3565: ;
3566: $if $(@expr1073744634 $!@expr1073744635 $assertEquals $(@expr1073744636 "cppcheck-2.8/test/testnullpointer.cpp" $, 3566 $, "" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return ; }
3567:
3568: $check_ $(@expr1073744639 "cppcheck-2.8/test/testnullpointer.cpp" $, 3568 $, "void foo(int i, std::string s);\nvoid bar() {\n  foo(0, \"\");\n  foo(0, 0);\n  foo(var, 0);\n  foo(var, NULL);\n  foo(var, nullptr);\n  foo(0, var);\n}" $)
3569:
|
3575:
3576: ;
3577: $if $(@expr1073744640 $!@expr1073744641 $assertEquals $(@expr1073744642 "cppcheck-2.8/test/testnullpointer.cpp" $, 3577 $, "[test.cpp:4]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n[test.cpp:6]: (error) Null pointer dereference\n[test.cpp:7]: (error) Null pointer dereference\n" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return
3578:
3579:
3580: ; }
3581:
3582: $check_ $(@expr1073744645 "cppcheck-2.8/test/testnullpointer.cpp" $, 3582 $, "std::string f() {\n  char* p = NULL;\n  int r = g(p);\n  if (!r)\n    return \"\";\n  std::string s(p);\n  return s;\n}\n" , true $)
3583:
|
3588:
3589: ;
3590: $if $(@expr1073744646 $!@expr1073744647 $assertEquals $(@expr1073744648 "cppcheck-2.8/test/testnullpointer.cpp" $, 3590 $, "" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return ; }
3591:
3592: $check_ $(@expr1073744651 "cppcheck-2.8/test/testnullpointer.cpp" $, 3592 $, "void f() {\n    const char* p = nullptr;\n    std::string s1{ p };\n    std::string s2{ nullptr };\n}\n" $)
3593:
3594:
3595:
3596: ;
3597: $if $(@expr1073744652 $!@expr1073744653 $assertEquals $(@expr1073744654 "cppcheck-2.8/test/testnullpointer.cpp" $, 3597 $, "[test.cpp:3]: (error) Null pointer dereference: p\n[test.cpp:4]: (error) Null pointer dereference\n" $, errout@var100 .@expr2759 str (@expr2760 ) $) $) { $return
3598:
3599: ; }
3600: }
3601:
3602: void nullpointerStdStream ( ) {
3603: $check_ $(@expr1073744657 "cppcheck-2.8/test/testnullpointer.cpp" $, 3603 $, "void f(std::ifstream& is) {\n    char* p = 0;\n    is >> p;\n}" $)
3604:
3605:
3606: ;
3607: $todoAssertEquals $(@expr1073744658 "cppcheck-2.8/test/testnullpointer.cpp" $, 3607 $, "[test.cpp:3]: (error) Possible null pointer dereference: p\n" $, "" $, errout@var100 .@expr2835 str (@expr2836 ) $) ;
3608:
3609: $check_ $(@expr1073744661 "cppcheck-2.8/test/testnullpointer.cpp" $, 3609 $, "void f(const std::ostringstream& oss, char* q) {\n    char const* p = 0;\n    oss << p;\n    oss << foo << p;\n    if(q == 0)\n        oss << foo << q;\n}" , false $)
3610:
|
3614:
3615: ;
3616: $if $(@expr1073744662 $!@expr1073744663 $assertEquals $(@expr1073744664 "cppcheck-2.8/test/testnullpointer.cpp" $, 3616 $, "[test.cpp:3]: (error) Null pointer dereference: p\n[test.cpp:4]: (error) Null pointer dereference: p\n[test.cpp:5] -> [test.cpp:6]: (warning) Either the condition 'q==0' is redundant or there is possible null pointer dereference: q.\n" $, errout@var100 .@expr2835 str (@expr2836 ) $) $) { $return
3617:
3618: ; }
3619:
3620: $check_ $(@expr1073744667 "cppcheck-2.8/test/testnullpointer.cpp" $, 3620 $, "void f(const char* p) {\n    if(p == 0) {\n        std::cout << p;\n        std::cerr << p;\n        std::cin >> p;\n        std::cout << abc << p;\n    }\n}" , false $)
3621:
|
3626:
3627: ;
3628: $todoAssertEquals $(@expr1073744668 "cppcheck-2.8/test/testnullpointer.cpp" $, 3628 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:6]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n" $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2835 str (@expr2836 ) $)
3629:
|
3633:
3634: ;
3635:
3636: $check_ $(@expr1073744671 "cppcheck-2.8/test/testnullpointer.cpp" $, 3636 $, "void f() {\n    void* p1 = 0;\n    std::cout << p1;\n    char* p2 = 0;\n    std::cin >> (int)p;\n    std::cout << (int)p;\n}" , true $)
3637:
|
3641:
3642: ;
3643: $if $(@expr1073744672 $!@expr1073744673 $assertEquals $(@expr1073744674 "cppcheck-2.8/test/testnullpointer.cpp" $, 3643 $, "" $, errout@var100 .@expr2835 str (@expr2836 ) $) $) { $return ; }
3644:
3645: $check_ $(@expr1073744677 "cppcheck-2.8/test/testnullpointer.cpp" $, 3645 $, "void f(const std::string& str) {\n    long long ret = 0;\n    std::istringstream istr(str);\n    istr >> std::hex >> ret;\n    return ret;\n}" , true $)
3646:
|
3649:
3650: ;
3651: $if $(@expr1073744678 $!@expr1073744679 $assertEquals $(@expr1073744680 "cppcheck-2.8/test/testnullpointer.cpp" $, 3651 $, "" $, errout@var100 .@expr2835 str (@expr2836 ) $) $) { $return ; }
3652:
3653: $check_ $(@expr1073744683 "cppcheck-2.8/test/testnullpointer.cpp" $, 3653 $, "void f(int* i) {\n    if(i) return;\n    std::cout << i;\n}" , true $)
3654:
3655:
3656: ;
3657: $if $(@expr1073744684 $!@expr1073744685 $assertEquals $(@expr1073744686 "cppcheck-2.8/test/testnullpointer.cpp" $, 3657 $, "" $, errout@var100 .@expr2835 str (@expr2836 ) $) $) { $return ; }
3658:
3659:
3660: $check_ $(@expr1073744689 "cppcheck-2.8/test/testnullpointer.cpp" $, 3660 $, "using namespace std;\nstd::string itoip(int ip) {\n    stringstream out;\n    out << ((ip >> 0) & 0xFF);\n    return out.str();\n}" , true $)
3661:
|
3664:
3665: ;
3666: $if $(@expr1073744690 $!@expr1073744691 $assertEquals $(@expr1073744692 "cppcheck-2.8/test/testnullpointer.cpp" $, 3666 $, "" $, errout@var100 .@expr2835 str (@expr2836 ) $) $) { $return ; }
3667:
3668: $check_ $(@expr1073744695 "cppcheck-2.8/test/testnullpointer.cpp" $, 3668 $, "void deserialize(const std::string &data) {\nstd::istringstream iss(data);\nunsigned int len = 0;\nif (!(iss >> len))\n    return;\n}\n" , true $)
3669:
|
3672:
3673: ;
3674: $if $(@expr1073744696 $!@expr1073744697 $assertEquals $(@expr1073744698 "cppcheck-2.8/test/testnullpointer.cpp" $, 3674 $, "" $, errout@var100 .@expr2835 str (@expr2836 ) $) $) { $return ; }
3675:
3676: }
3677:
3678: void nullpointerSmartPointer ( ) {
3679:
3680:
3681: $check_ $(@expr1073744701 "cppcheck-2.8/test/testnullpointer.cpp" $, 3681 $, "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  if (p) {}\n  dostuff(p->x);\n}" $)
3682:
3683:
3684:
3685: ;
3686: $if $(@expr1073744702 $!@expr1073744703 $assertEquals $(@expr1073744704 "cppcheck-2.8/test/testnullpointer.cpp" $, 3686 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3687:
3688: $check_ $(@expr1073744707 "cppcheck-2.8/test/testnullpointer.cpp" $, 3688 $, "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  p = nullptr;\n  dostuff(p->x);\n}" $)
3689:
3690:
3691:
3692: ;
3693: $if $(@expr1073744708 $!@expr1073744709 $assertEquals $(@expr1073744710 "cppcheck-2.8/test/testnullpointer.cpp" $, 3693 $, "[test.cpp:4]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3694:
3695: $check_ $(@expr1073744713 "cppcheck-2.8/test/testnullpointer.cpp" $, 3695 $, "struct Fred { int x; };\nvoid f(std::unique_ptr<Fred> p) {\n  if (p) {}\n  dostuff(p->x);\n}" $)
3696:
3697:
3698:
3699: ;
3700: $if $(@expr1073744714 $!@expr1073744715 $assertEquals $(@expr1073744716 "cppcheck-2.8/test/testnullpointer.cpp" $, 3700 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3701:
3702: $check_ $(@expr1073744719 "cppcheck-2.8/test/testnullpointer.cpp" $, 3702 $, "struct Fred { int x; };\nvoid f(std::unique_ptr<Fred> p) {\n  p = nullptr;\n  dostuff(p->x);\n}" $)
3703:
3704:
3705:
3706: ;
3707: $if $(@expr1073744720 $!@expr1073744721 $assertEquals $(@expr1073744722 "cppcheck-2.8/test/testnullpointer.cpp" $, 3707 $, "[test.cpp:4]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3708:
3709: $check_ $(@expr1073744725 "cppcheck-2.8/test/testnullpointer.cpp" $, 3709 $, "struct Fred { int x; };\nvoid f() {\n  std::shared_ptr<Fred> p;\n  dostuff(p->x);\n}" $)
3710:
3711:
3712:
3713: ;
3714: $if $(@expr1073744726 $!@expr1073744727 $assertEquals $(@expr1073744728 "cppcheck-2.8/test/testnullpointer.cpp" $, 3714 $, "[test.cpp:4]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3715:
3716: $check_ $(@expr1073744731 "cppcheck-2.8/test/testnullpointer.cpp" $, 3716 $, "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  p.reset();\n  dostuff(p->x);\n}" $)
3717:
3718:
3719:
3720: ;
3721: $if $(@expr1073744732 $!@expr1073744733 $assertEquals $(@expr1073744734 "cppcheck-2.8/test/testnullpointer.cpp" $, 3721 $, "[test.cpp:4]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3722:
3723: $check_ $(@expr1073744737 "cppcheck-2.8/test/testnullpointer.cpp" $, 3723 $, "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  Fred * pp = nullptr;\n  p.reset(pp);\n  dostuff(p->x);\n}" $)
3724:
|
3727:
3728: ;
3729: $if $(@expr1073744738 $!@expr1073744739 $assertEquals $(@expr1073744740 "cppcheck-2.8/test/testnullpointer.cpp" $, 3729 $, "[test.cpp:5]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3730:
3731: $check_ $(@expr1073744743 "cppcheck-2.8/test/testnullpointer.cpp" $, 3731 $, "struct Fred { int x; };\nvoid f(Fred& f) {\n  std::shared_ptr<Fred> p;\n  p.reset(&f);\n  dostuff(p->x);\n}" $)
3732:
|
3735:
3736: ;
3737: $if $(@expr1073744744 $!@expr1073744745 $assertEquals $(@expr1073744746 "cppcheck-2.8/test/testnullpointer.cpp" $, 3737 $, "" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3738:
3739: $check_ $(@expr1073744749 "cppcheck-2.8/test/testnullpointer.cpp" $, 3739 $, "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  p.reset();\n  dostuff(p->x);\n}" $)
3740:
3741:
3742:
3743: ;
3744: $if $(@expr1073744750 $!@expr1073744751 $assertEquals $(@expr1073744752 "cppcheck-2.8/test/testnullpointer.cpp" $, 3744 $, "[test.cpp:4]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3745:
3746: $check_ $(@expr1073744755 "cppcheck-2.8/test/testnullpointer.cpp" $, 3746 $, "struct Fred { int x; };\nvoid f() {\n  std::shared_ptr<Fred> p(nullptr);\n  dostuff(p->x);\n}" $)
3747:
3748:
3749:
3750: ;
3751: $if $(@expr1073744756 $!@expr1073744757 $assertEquals $(@expr1073744758 "cppcheck-2.8/test/testnullpointer.cpp" $, 3751 $, "[test.cpp:4]: (error) Null pointer dereference: p\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3752:
3753: $check_ $(@expr1073744761 "cppcheck-2.8/test/testnullpointer.cpp" $, 3753 $, "struct A {};\nvoid f(int n) {\n    std::unique_ptr<const A*[]> p;\n    p.reset(new const A*[n]);\n}" $)
3754:
3755:
3756:
3757: ;
3758: $if $(@expr1073744762 $!@expr1073744763 $assertEquals $(@expr1073744764 "cppcheck-2.8/test/testnullpointer.cpp" $, 3758 $, "" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3759:
3760:
3761: $check_ $(@expr1073744767 "cppcheck-2.8/test/testnullpointer.cpp" $, 3761 $, "struct A {\n    void reset();\n    void f();\n};\nvoid g(std::unique_ptr<A> var) {\n    var->reset();\n    var->f();\n}" $)
3762:
|
3767:
3768: ;
3769: $if $(@expr1073744768 $!@expr1073744769 $assertEquals $(@expr1073744770 "cppcheck-2.8/test/testnullpointer.cpp" $, 3769 $, "" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3770:
3771:
3772: $check_ $(@expr1073744773 "cppcheck-2.8/test/testnullpointer.cpp" $, 3772 $, "char* g();\nchar* f() {\n    std::unique_ptr<char> x(g());\n    if( x ) {}\n    return x.release();\n}\n" , true $)
3773:
|
3776:
3777: ;
3778: $if $(@expr1073744774 $!@expr1073744775 $assertEquals $(@expr1073744776 "cppcheck-2.8/test/testnullpointer.cpp" $, 3778 $, "" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3779:
3780:
3781: $check_ $(@expr1073744779 "cppcheck-2.8/test/testnullpointer.cpp" $, 3781 $, "std::shared_ptr<int> f() {\n    return std::shared_ptr<int>(nullptr);\n}\nvoid g() {\n    int a = *f();\n}\n" , true $)
3782:
|
3786:
3787: ;
3788: $if $(@expr1073744780 $!@expr1073744781 $assertEquals $(@expr1073744782 "cppcheck-2.8/test/testnullpointer.cpp" $, 3788 $, "[test.cpp:5]: (error) Null pointer dereference: f()\n" $, errout@var100 .@expr2881 str (@expr2882 ) $) $) { $return ; }
3789: }
3790:
3791: void functioncall ( ) {
3792:
3793: {
3794:
3795: $check_ $(@expr1073744785 "cppcheck-2.8/test/testnullpointer.cpp" $, 3795 $, "void f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" $)
3796:
3797:
3798:
3799: ;
3800: $if $(@expr1073744786 $!@expr1073744787 $assertEquals $(@expr1073744788 "cppcheck-2.8/test/testnullpointer.cpp" $, 3800 $, "" $, errout@var100 .@expr2965 str (@expr2966 ) $) $) { $return ; }
3801:
3802:
3803: $check_ $(@expr1073744791 "cppcheck-2.8/test/testnullpointer.cpp" $, 3803 $, "void foo(int *p) { }\n\nvoid f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" $)
3804:
|
3808:
3809: ;
3810: $if $(@expr1073744792 $!@expr1073744793 $assertEquals $(@expr1073744794 "cppcheck-2.8/test/testnullpointer.cpp" $, 3810 $, "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2965 str (@expr2966 ) $) $) { $return
3811:
3812: ; }
3813:
3814:
3815: $check_ $(@expr1073744797 "cppcheck-2.8/test/testnullpointer.cpp" $, 3815 $, "void foo(int *&p) { }\n\nvoid f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" , true $)
3816:
|
3820:
3821: ;
3822: $if $(@expr1073744798 $!@expr1073744799 $assertEquals $(@expr1073744800 "cppcheck-2.8/test/testnullpointer.cpp" $, 3822 $, "" $, errout@var100 .@expr2965 str (@expr2966 ) $) $) { $return ; }
3823:
3824:
3825: $check_ $(@expr1073744803 "cppcheck-2.8/test/testnullpointer.cpp" $, 3825 $, "void foo(int *p);\n\nvoid f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" $)
3826:
|
3830:
3831: ;
3832: $if $(@expr1073744804 $!@expr1073744805 $assertEquals $(@expr1073744806 "cppcheck-2.8/test/testnullpointer.cpp" $, 3832 $, "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2965 str (@expr2966 ) $) $) { $return
3833:
3834: ; }
3835:
3836:
3837: $check_ $(@expr1073744809 "cppcheck-2.8/test/testnullpointer.cpp" $, 3837 $, "void f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" , true $)
3838:
3839:
3840:
3841: ;
3842: $if $(@expr1073744810 $!@expr1073744811 $assertEquals $(@expr1073744812 "cppcheck-2.8/test/testnullpointer.cpp" $, 3842 $, "[test.cpp:4] -> [test.cpp:2]: (warning, inconclusive) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" $, errout@var100 .@expr2965 str (@expr2966 ) $) $) { $return
3843:
3844: ; }
3845: }
3846:
3847:
3848: {
3849:
3850: $check_ $(@expr1073744815 "cppcheck-2.8/test/testnullpointer.cpp" $, 3850 $, "void f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}" $)
3851:
3852:
3853:
3854: ;
3855: $if $(@expr1073744816 $!@expr1073744817 $assertEquals $(@expr1073744818 "cppcheck-2.8/test/testnullpointer.cpp" $, 3855 $, "" $, errout@var100 .@expr2965 str (@expr2966 ) $) $) { $return ; }
3856:
3857:
3858: $check_ $(@expr1073744821 "cppcheck-2.8/test/testnullpointer.cpp" $, 3858 $, "void foo(struct ABC *abc) { }\n\nvoid f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}" $)
3859:
|
3863:
3864: ;
3865: $if $(@expr1073744822 $!@expr1073744823 $assertEquals $(@expr1073744824 "cppcheck-2.8/test/testnullpointer.cpp" $, 3865 $, "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr2965 str (@expr2966 ) $) $) { $return
3866:
3867: ; }
3868:
3869:
3870: $check_ $(@expr1073744827 "cppcheck-2.8/test/testnullpointer.cpp" $, 3870 $, "void foo(struct ABC *abc);\n\nvoid f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}" $)
3871:
|
3875:
3876: ;
3877: $if $(@expr1073744828 $!@expr1073744829 $assertEquals $(@expr1073744830 "cppcheck-2.8/test/testnullpointer.cpp" $, 3877 $, "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr2965 str (@expr2966 ) $) $) { $return
3878:
3879: ; }
3880:
3881:
3882: $check_ $(@expr1073744833 "cppcheck-2.8/test/testnullpointer.cpp" $, 3882 $, "void f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}" , true $)
3883:
3884:
3885:
3886: ;
3887: $if $(@expr1073744834 $!@expr1073744835 $assertEquals $(@expr1073744836 "cppcheck-2.8/test/testnullpointer.cpp" $, 3887 $, "[test.cpp:4] -> [test.cpp:2]: (warning, inconclusive) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" $, errout@var100 .@expr2965 str (@expr2966 ) $) $) { $return
3888:
3889: ; }
3890: }
3891: }
3892:
3893: void functioncalllibrary ( ) {
3894: Settings settings1@var128 ;
3895: Tokenizer tokenizer@var129 (@expr1073744841 &@expr1073744842 settings1@var128 , this@expr1073744843 ) ;
3896: std ::@expr1073744844 istringstream code@var130 (@expr1073744845 "void f() { int a,b,c; x(a,b,c); }" ) ;
3897: $if $(@expr1073744846 $!@expr1073744847 $assertEquals $(@expr1073744848 "cppcheck-2.8/test/testnullpointer.cpp" $, 3897 $, true $, $(@expr1073744849 tokenizer@var129 .@expr1073744850 tokenize (@expr1073744851 code@var130 , "test.c" ) $) $) $) { $return ; }
3898: const Token * xtok@var131 ; xtok@var131 =@expr1073744852 Token ::@expr1073744853 findsimplematch (@expr1073744854 tokenizer@var129 .@expr1073744855 tokens (@expr1073744856 ) , "x" ) ;
3899:
3900:
3901: {
3902: Library library@var132 ;
3903: Library ::@expr1073744857 ArgumentChecks arg@var133 ;
3904: library@var132 .@expr3034 functions@var134 [@expr3035 "x" ] .@expr3036 argumentChecks@expr3015 [@expr1073744861 1 ] =@expr1073744862 arg@var133 ;
3905: library@var132 .@expr3034 functions@var134 [@expr3035 "x" ] .@expr3036 argumentChecks@expr3015 [@expr1073744866 2 ] =@expr1073744867 arg@var133 ;
3906: library@var132 .@expr3034 functions@var134 [@expr3035 "x" ] .@expr3036 argumentChecks@expr3015 [@expr1073744871 3 ] =@expr1073744872 arg@var133 ;
3907:
3908: std ::@expr1073744873 list < const Token *@expr3050 > null@var135 ;
3909: CheckNullPointer ::@expr3051 parseFunctionCall (@expr1073744876 *@expr3053 xtok@var131 , null@var135 , &@expr1073744878 library@var132 ) ;
3910: $if $(@expr1073744879 $!@expr1073744880 $assertEquals $(@expr1073744881 "cppcheck-2.8/test/testnullpointer.cpp" $, 3910 $, 0U $, null@var135 .@expr1073744882 size (@expr1073744883 ) $) $) { $return ; }
3911: }
3912:
3913:
3914: {
3915: Library library@var136 ;
3916: Library ::@expr1073744884 ArgumentChecks arg@var137 ;
3917: library@var136 .@expr3061 functions@var138 [@expr3062 "x" ] .@expr3063 argumentChecks@expr3015 [@expr3064 1 ] =@expr1073744889 arg@var137 ;
3918: library@var136 .@expr3061 functions@var138 [@expr3062 "x" ] .@expr3063 argumentChecks@expr3015 [@expr1073744893 2 ] =@expr1073744894 arg@var137 ;
3919: library@var136 .@expr3061 functions@var138 [@expr3062 "x" ] .@expr3063 argumentChecks@expr3015 [@expr1073744898 3 ] =@expr1073744899 arg@var137 ;
3920: library@var136 .@expr3061 functions@var138 [@expr3062 "x" ] .@expr3063 argumentChecks@expr3015 [@expr3064 1 ] .@expr1073744904 notnull@expr1073744840 =@expr1073744905 true ;
3921:
3922: std ::@expr1073744906 list < const Token *@expr3050 > null@var139 ;
3923: CheckNullPointer ::@expr3051 parseFunctionCall (@expr1073744909 *@expr3053 xtok@var131 , null@var139 , &@expr1073744911 library@var136 ) ;
3924: $if $(@expr1073744912 $!@expr1073744913 $assertEquals $(@expr1073744914 "cppcheck-2.8/test/testnullpointer.cpp" $, 3924 $, 1U $, null@var139 .@expr1073744915 size (@expr1073744916 ) $) $) { $return ; }
3925: $if $(@expr1073744917 $!@expr1073744918 $assertEquals $(@expr1073744919 "cppcheck-2.8/test/testnullpointer.cpp" $, 3925 $, "a" $, null@var139 .@expr1073744920 front (@expr1073744921 ) .@expr1073744922 str (@expr1073744923 ) $) $) { $return ; }
3926: }
3927: }
3928:
3929: void functioncallDefaultArguments ( ) {
3930:
3931: $check_ $(@expr1073744924 "cppcheck-2.8/test/testnullpointer.cpp" $, 3931 $, "void f(int *p = 0) {\n    *p = 0;\n}" $)
3932:
3933: ;
3934: $if $(@expr1073744925 $!@expr1073744926 $assertEquals $(@expr1073744927 "cppcheck-2.8/test/testnullpointer.cpp" $, 3934 $, "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3935:
3936: $check_ $(@expr1073744930 "cppcheck-2.8/test/testnullpointer.cpp" $, 3936 $, "void f(int *p = 0) {\n    if (!p)\n        return;\n    *p = 0;\n}" $)
3937:
3938:
3939:
3940: ;
3941: $if $(@expr1073744931 $!@expr1073744932 $assertEquals $(@expr1073744933 "cppcheck-2.8/test/testnullpointer.cpp" $, 3941 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3942:
3943: $check_ $(@expr1073744936 "cppcheck-2.8/test/testnullpointer.cpp" $, 3943 $, "void f(char a, int *p = 0) {\n    *p = 0;\n}" $)
3944:
3945: ;
3946: $if $(@expr1073744937 $!@expr1073744938 $assertEquals $(@expr1073744939 "cppcheck-2.8/test/testnullpointer.cpp" $, 3946 $, "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3947:
3948: $check_ $(@expr1073744942 "cppcheck-2.8/test/testnullpointer.cpp" $, 3948 $, "void f(int *p = 0) {\n    printf(\"p = %d\", *p);\n}" $)
3949:
3950: ;
3951: $if $(@expr1073744943 $!@expr1073744944 $assertEquals $(@expr1073744945 "cppcheck-2.8/test/testnullpointer.cpp" $, 3951 $, "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3952:
3953: $check_ $(@expr1073744948 "cppcheck-2.8/test/testnullpointer.cpp" $, 3953 $, "void f(int *p = 0) {\n    printf(\"p[1] = %d\", p[1]);\n}" $)
3954:
3955: ;
3956: $if $(@expr1073744949 $!@expr1073744950 $assertEquals $(@expr1073744951 "cppcheck-2.8/test/testnullpointer.cpp" $, 3956 $, "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3957:
3958: $check_ $(@expr1073744954 "cppcheck-2.8/test/testnullpointer.cpp" $, 3958 $, "void f(int *p = 0) {\n    buf[p] = 0;\n}" $)
3959:
3960: ;
3961: $if $(@expr1073744955 $!@expr1073744956 $assertEquals $(@expr1073744957 "cppcheck-2.8/test/testnullpointer.cpp" $, 3961 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3962:
3963: $check_ $(@expr1073744960 "cppcheck-2.8/test/testnullpointer.cpp" $, 3963 $, "void f(int *p = 0) {\n    if (p != 0 && bar())\n      *p = 0;\n}" $)
3964:
3965:
3966: ;
3967: $if $(@expr1073744961 $!@expr1073744962 $assertEquals $(@expr1073744963 "cppcheck-2.8/test/testnullpointer.cpp" $, 3967 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3968:
3969: $check_ $(@expr1073744966 "cppcheck-2.8/test/testnullpointer.cpp" $, 3969 $, "void f(int *p) {\n    *p = 0;\n}" $)
3970:
3971: ;
3972: $if $(@expr1073744967 $!@expr1073744968 $assertEquals $(@expr1073744969 "cppcheck-2.8/test/testnullpointer.cpp" $, 3972 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3973:
3974: $check_ $(@expr1073744972 "cppcheck-2.8/test/testnullpointer.cpp" $, 3974 $, "void f(int *p = 0) {\n    if (p != 0)\n      *p = 0;\n}" $)
3975:
3976:
3977: ;
3978: $if $(@expr1073744973 $!@expr1073744974 $assertEquals $(@expr1073744975 "cppcheck-2.8/test/testnullpointer.cpp" $, 3978 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3979:
3980: $check_ $(@expr1073744978 "cppcheck-2.8/test/testnullpointer.cpp" $, 3980 $, "void f(int *p = 0) {\n    int y;\n    if (p == 0)\n      p = &y;\n    *p = 0;\n}" $)
3981:
|
3984:
3985: ;
3986: $if $(@expr1073744979 $!@expr1073744980 $assertEquals $(@expr1073744981 "cppcheck-2.8/test/testnullpointer.cpp" $, 3986 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
3987:
3988: $check_ $(@expr1073744984 "cppcheck-2.8/test/testnullpointer.cpp" $, 3988 $, "void f(int a, int *p = 0) {\n    if (a != 0)\n      *p = 0;\n}" , true $)
3989:
3990:
3991: ;
3992: $if $(@expr1073744985 $!@expr1073744986 $assertEquals $(@expr1073744987 "cppcheck-2.8/test/testnullpointer.cpp" $, 3992 $, "[test.cpp:3]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return
3993:
3994: ; }
3995:
3996: $check_ $(@expr1073744990 "cppcheck-2.8/test/testnullpointer.cpp" $, 3996 $, "void f(int *p = 0) {\n    p = a;\n    *p = 0;\n}" $)
3997:
3998:
3999: ;
4000: $if $(@expr1073744991 $!@expr1073744992 $assertEquals $(@expr1073744993 "cppcheck-2.8/test/testnullpointer.cpp" $, 4000 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4001:
4002: $check_ $(@expr1073744996 "cppcheck-2.8/test/testnullpointer.cpp" $, 4002 $, "void f(int *p = 0) {\n    p += a;\n    *p = 0;\n}" $)
4003:
4004:
4005: ;
4006: $if $(@expr1073744997 $!@expr1073744998 $assertEquals $(@expr1073744999 "cppcheck-2.8/test/testnullpointer.cpp" $, 4006 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4007:
4008: $check_ $(@expr1073745002 "cppcheck-2.8/test/testnullpointer.cpp" $, 4008 $, "int f(int *p = 0) {\n    if (p == 0) {\n        return 0;\n    }\n    return *p;\n}" $)
4009:
|
4012:
4013: ;
4014: $if $(@expr1073745003 $!@expr1073745004 $assertEquals $(@expr1073745005 "cppcheck-2.8/test/testnullpointer.cpp" $, 4014 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4015:
4016: $check_ $(@expr1073745008 "cppcheck-2.8/test/testnullpointer.cpp" $, 4016 $, "void f(int *p = 0) {\n    std::cout << p ? *p : 0;\n}" $)
4017:
4018: ;
4019: $if $(@expr1073745009 $!@expr1073745010 $assertEquals $(@expr1073745011 "cppcheck-2.8/test/testnullpointer.cpp" $, 4019 $, "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4020:
4021: $check_ $(@expr1073745014 "cppcheck-2.8/test/testnullpointer.cpp" $, 4021 $, "void f(char *p = 0) {\n    std::cout << p ? *p : 0;\n}" $)
4022:
4023: ;
4024: $if $(@expr1073745015 $!@expr1073745016 $assertEquals $(@expr1073745017 "cppcheck-2.8/test/testnullpointer.cpp" $, 4024 $, "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4025:
4026: $check_ $(@expr1073745020 "cppcheck-2.8/test/testnullpointer.cpp" $, 4026 $, "void f(int *p = 0) {\n    std::cout << (p ? *p : 0);\n}" $)
4027:
4028: ;
4029: $if $(@expr1073745021 $!@expr1073745022 $assertEquals $(@expr1073745023 "cppcheck-2.8/test/testnullpointer.cpp" $, 4029 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4030:
4031: $check_ $(@expr1073745026 "cppcheck-2.8/test/testnullpointer.cpp" $, 4031 $, "void f(int *p = 0) {\n    std::cout << p;\n}" $)
4032:
4033: ;
4034: $if $(@expr1073745027 $!@expr1073745028 $assertEquals $(@expr1073745029 "cppcheck-2.8/test/testnullpointer.cpp" $, 4034 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4035:
4036: $check_ $(@expr1073745032 "cppcheck-2.8/test/testnullpointer.cpp" $, 4036 $, "void f(int *p = 0) {\n    std::cout << (p && p[0] ? *p : 42);\n}" $)
4037:
4038: ;
4039: $if $(@expr1073745033 $!@expr1073745034 $assertEquals $(@expr1073745035 "cppcheck-2.8/test/testnullpointer.cpp" $, 4039 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4040:
4041: $check_ $(@expr1073745038 "cppcheck-2.8/test/testnullpointer.cpp" $, 4041 $, "void isEmpty(int *p = 0) {\n    return p && *p;\n}" $)
4042:
4043: ;
4044: $if $(@expr1073745039 $!@expr1073745040 $assertEquals $(@expr1073745041 "cppcheck-2.8/test/testnullpointer.cpp" $, 4044 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4045:
4046: $check_ $(@expr1073745044 "cppcheck-2.8/test/testnullpointer.cpp" $, 4046 $, "void g(int *p = 0) {\n    return !p || *p;\n}" $)
4047:
4048: ;
4049: $if $(@expr1073745045 $!@expr1073745046 $assertEquals $(@expr1073745047 "cppcheck-2.8/test/testnullpointer.cpp" $, 4049 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4050:
|
4053:
4054: $check_ $(@expr1073745050 "cppcheck-2.8/test/testnullpointer.cpp" $, 4054 $, "void f(int *p = 0) {\n    bar(p);\n    *p = 0;\n}" $)
4055:
4056:
4057: ;
4058: $if $(@expr1073745051 $!@expr1073745052 $assertEquals $(@expr1073745053 "cppcheck-2.8/test/testnullpointer.cpp" $, 4058 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4059:
4060: $check_ $(@expr1073745056 "cppcheck-2.8/test/testnullpointer.cpp" $, 4060 $, "void f(int *p = 0) {\n    printf(\"%p\", p);\n    *p = 0;\n}" , true $)
4061:
4062:
4063: ;
4064: $if $(@expr1073745057 $!@expr1073745058 $assertEquals $(@expr1073745059 "cppcheck-2.8/test/testnullpointer.cpp" $, 4064 $, "[test.cpp:3]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4065:
|
4068:
4069: $check_ $(@expr1073745062 "cppcheck-2.8/test/testnullpointer.cpp" $, 4069 $, "void f(int *p = 0) {\n    init(&p);\n    *p = 0;\n}" $)
4070:
4071:
4072: ;
4073: $if $(@expr1073745063 $!@expr1073745064 $assertEquals $(@expr1073745065 "cppcheck-2.8/test/testnullpointer.cpp" $, 4073 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4074:
4075: $check_ $(@expr1073745068 "cppcheck-2.8/test/testnullpointer.cpp" $, 4075 $, "void init(int* &g);\nvoid f(int *p = 0) {\n    init(p);\n    *p = 0;\n}" $)
4076:
4077:
4078:
4079: ;
4080: $if $(@expr1073745069 $!@expr1073745070 $assertEquals $(@expr1073745071 "cppcheck-2.8/test/testnullpointer.cpp" $, 4080 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4081:
4082: $check_ $(@expr1073745074 "cppcheck-2.8/test/testnullpointer.cpp" $, 4082 $, "void f(int *p = 0) {\n    if (p == 0) {\n        init(&p);\n    }\n    *p = 0;\n}" $)
4083:
|
4086:
4087: ;
4088: $if $(@expr1073745075 $!@expr1073745076 $assertEquals $(@expr1073745077 "cppcheck-2.8/test/testnullpointer.cpp" $, 4088 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4089:
4090: $check_ $(@expr1073745080 "cppcheck-2.8/test/testnullpointer.cpp" $, 4090 $, "void f(int *p = 0) {\n    if (p == 0) {\n        throw SomeException;\n    }\n    *p = 0;\n}" $)
4091:
|
4094:
4095: ;
4096: $if $(@expr1073745081 $!@expr1073745082 $assertEquals $(@expr1073745083 "cppcheck-2.8/test/testnullpointer.cpp" $, 4096 $, "" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4097:
4098: $check_ $(@expr1073745086 "cppcheck-2.8/test/testnullpointer.cpp" $, 4098 $, "void foo(int x, int *p = 0) {\n    int var1 = x ? *p : 5;\n}" $)
4099:
4100: ;
4101: $if $(@expr1073745087 $!@expr1073745088 $assertEquals $(@expr1073745089 "cppcheck-2.8/test/testnullpointer.cpp" $, 4101 $, "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" $, errout@var100 .@expr3104 str (@expr3105 ) $) $) { $return ; }
4102: }
4103:
4104: void nullpointer_internal_error ( ) {
4105: $check_ $(@expr1073745092 "cppcheck-2.8/test/testnullpointer.cpp" $, 4105 $, "struct A { unsigned int size; };\nstruct B { struct A *a; };\nvoid f(struct B *b) {\n    unsigned int j;\n    for (j = 0; j < b[0].a->size; ++j) {\n    }\n}" $)
4106:
|
4110:
4111: ;
4112: $if $(@expr1073745093 $!@expr1073745094 $assertEquals $(@expr1073745095 "cppcheck-2.8/test/testnullpointer.cpp" $, 4112 $, "" $, errout@var100 .@expr1073745096 str (@expr1073745097 ) $) $) { $return ; }
4113: }
4114:
4115: void ticket6505 ( ) {
4116: $check_ $(@expr1073745098 "cppcheck-2.8/test/testnullpointer.cpp" $, 4116 $, "void foo(MythSocket *socket) {\n  bool do_write=0;\n  if (socket) {\n    do_write=something();\n  }\n  if (do_write) {\n    socket->func();\n  }\n}\nvoid bar() {\n  foo(0);\n}\n" , true , "test.c" $)
4117:
|
4126:
4127: ;
4128: $if $(@expr1073745099 $!@expr1073745100 $assertEquals $(@expr1073745101 "cppcheck-2.8/test/testnullpointer.cpp" $, 4128 $, "" $, errout@var100 .@expr1073745102 str (@expr1073745103 ) $) $) { $return ; }
4129: }
4130:
4131: void subtract ( ) {
4132: $check_ $(@expr1073745104 "cppcheck-2.8/test/testnullpointer.cpp" $, 4132 $, "void foo(char *s) {\n  char *p = s - 20;\n}\nvoid bar() { foo(0); }" $)
4133:
4134:
4135: ;
4136: $if $(@expr1073745105 $!@expr1073745106 $assertEquals $(@expr1073745107 "cppcheck-2.8/test/testnullpointer.cpp" $, 4136 $, "[test.cpp:2]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n" $, errout@var100 .@expr3284 str (@expr3285 ) $) $) { $return
4137: ; }
4138:
4139: $check_ $(@expr1073745110 "cppcheck-2.8/test/testnullpointer.cpp" $, 4139 $, "void foo(char *s) {\n  if (!s) {}\n  char *p = s - 20;\n}" $)
4140:
4141:
4142: ;
4143: $if $(@expr1073745111 $!@expr1073745112 $assertEquals $(@expr1073745113 "cppcheck-2.8/test/testnullpointer.cpp" $, 4143 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is overflow in pointer subtraction.\n" $, errout@var100 .@expr3284 str (@expr3285 ) $) $) { $return ; }
4144:
4145: $check_ $(@expr1073745116 "cppcheck-2.8/test/testnullpointer.cpp" $, 4145 $, "void foo(char *s) {\n  s -= 20;\n}\nvoid bar() { foo(0); }" $)
4146:
4147:
4148: ;
4149: $if $(@expr1073745117 $!@expr1073745118 $assertEquals $(@expr1073745119 "cppcheck-2.8/test/testnullpointer.cpp" $, 4149 $, "[test.cpp:2]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n" $, errout@var100 .@expr3284 str (@expr3285 ) $) $) { $return
4150: ; }
4151:
4152: $check_ $(@expr1073745122 "cppcheck-2.8/test/testnullpointer.cpp" $, 4152 $, "void foo(char *s) {\n  if (!s) {}\n  s -= 20;\n}" $)
4153:
4154:
4155: ;
4156: $if $(@expr1073745123 $!@expr1073745124 $assertEquals $(@expr1073745125 "cppcheck-2.8/test/testnullpointer.cpp" $, 4156 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is overflow in pointer subtraction.\n" $, errout@var100 .@expr3284 str (@expr3285 ) $) $) { $return ; }
4157:
4158: $check_ $(@expr1073745128 "cppcheck-2.8/test/testnullpointer.cpp" $, 4158 $, "int* f8() { int *x = NULL; return --x; }" $) ;
4159: $if $(@expr1073745129 $!@expr1073745130 $assertEquals $(@expr1073745131 "cppcheck-2.8/test/testnullpointer.cpp" $, 4159 $, "[test.cpp:1]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n" $, errout@var100 .@expr3284 str (@expr3285 ) $) $) { $return ; }
4160:
4161: $check_ $(@expr1073745134 "cppcheck-2.8/test/testnullpointer.cpp" $, 4161 $, "int* f9() { int *x = NULL; return x--; }" $) ;
4162: $if $(@expr1073745135 $!@expr1073745136 $assertEquals $(@expr1073745137 "cppcheck-2.8/test/testnullpointer.cpp" $, 4162 $, "[test.cpp:1]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n" $, errout@var100 .@expr3284 str (@expr3285 ) $) $) { $return ; }
4163: }
4164:
4165: void addNull ( ) {
4166: $check_ $(@expr1073745140 "cppcheck-2.8/test/testnullpointer.cpp" $, 4166 $, "void foo(char *s) {\n  char * p = s + 20;\n}\nvoid bar() { foo(0); }" $)
4167:
4168:
4169: ;
4170: $if $(@expr1073745141 $!@expr1073745142 $assertEquals $(@expr1073745143 "cppcheck-2.8/test/testnullpointer.cpp" $, 4170 $, "[test.cpp:2]: (error) Pointer addition with NULL pointer.\n" $, errout@var100 .@expr3320 str (@expr3321 ) $) $) { $return ; }
4171:
4172: $check_ $(@expr1073745146 "cppcheck-2.8/test/testnullpointer.cpp" $, 4172 $, "void foo(char *s) {\n  if (!s) {}\n  char * p = s + 20;\n}" $)
4173:
4174:
4175: ;
4176: $if $(@expr1073745147 $!@expr1073745148 $assertEquals $(@expr1073745149 "cppcheck-2.8/test/testnullpointer.cpp" $, 4176 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is pointer arithmetic with NULL pointer.\n" $, errout@var100 .@expr3320 str (@expr3321 ) $) $) { $return ; }
4177:
4178: $check_ $(@expr1073745152 "cppcheck-2.8/test/testnullpointer.cpp" $, 4178 $, "void foo(char *s) {\n  char * p = 20 + s;\n}\nvoid bar() { foo(0); }" $)
4179:
4180:
4181: ;
4182: $if $(@expr1073745153 $!@expr1073745154 $assertEquals $(@expr1073745155 "cppcheck-2.8/test/testnullpointer.cpp" $, 4182 $, "[test.cpp:2]: (error) Pointer addition with NULL pointer.\n" $, errout@var100 .@expr3320 str (@expr3321 ) $) $) { $return ; }
4183:
4184: $check_ $(@expr1073745158 "cppcheck-2.8/test/testnullpointer.cpp" $, 4184 $, "void foo(char *s) {\n  if (!s) {}\n  char * p = 20 + s;\n}" $)
4185:
4186:
4187: ;
4188: $if $(@expr1073745159 $!@expr1073745160 $assertEquals $(@expr1073745161 "cppcheck-2.8/test/testnullpointer.cpp" $, 4188 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is pointer arithmetic with NULL pointer.\n" $, errout@var100 .@expr3320 str (@expr3321 ) $) $) { $return ; }
4189:
4190: $check_ $(@expr1073745164 "cppcheck-2.8/test/testnullpointer.cpp" $, 4190 $, "void foo(char *s) {\n  s += 20;\n}\nvoid bar() { foo(0); }" $)
4191:
4192:
4193: ;
4194: $if $(@expr1073745165 $!@expr1073745166 $assertEquals $(@expr1073745167 "cppcheck-2.8/test/testnullpointer.cpp" $, 4194 $, "[test.cpp:2]: (error) Pointer addition with NULL pointer.\n" $, errout@var100 .@expr3320 str (@expr3321 ) $) $) { $return ; }
4195:
4196: $check_ $(@expr1073745170 "cppcheck-2.8/test/testnullpointer.cpp" $, 4196 $, "void foo(char *s) {\n  if (!s) {}\n  s += 20;\n}" $)
4197:
4198:
4199: ;
4200: $if $(@expr1073745171 $!@expr1073745172 $assertEquals $(@expr1073745173 "cppcheck-2.8/test/testnullpointer.cpp" $, 4200 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is pointer arithmetic with NULL pointer.\n" $, errout@var100 .@expr3320 str (@expr3321 ) $) $) { $return ; }
4201:
4202: $check_ $(@expr1073745176 "cppcheck-2.8/test/testnullpointer.cpp" $, 4202 $, "int* f7() { int *x = NULL; return ++x; }" $) ;
4203: $if $(@expr1073745177 $!@expr1073745178 $assertEquals $(@expr1073745179 "cppcheck-2.8/test/testnullpointer.cpp" $, 4203 $, "[test.cpp:1]: (error) Pointer addition with NULL pointer.\n" $, errout@var100 .@expr3320 str (@expr3321 ) $) $) { $return ; }
4204:
4205: $check_ $(@expr1073745182 "cppcheck-2.8/test/testnullpointer.cpp" $, 4205 $, "int* f10() { int *x = NULL; return x++; }" $) ;
4206: $if $(@expr1073745183 $!@expr1073745184 $assertEquals $(@expr1073745185 "cppcheck-2.8/test/testnullpointer.cpp" $, 4206 $, "[test.cpp:1]: (error) Pointer addition with NULL pointer.\n" $, errout@var100 .@expr3320 str (@expr3321 ) $) $) { $return ; }
4207:
4208: $check_ $(@expr1073745188 "cppcheck-2.8/test/testnullpointer.cpp" $, 4208 $, "class foo {};\nconst char* get() const { return 0; }\nvoid f(foo x) { if (get()) x += get(); }" $)
4209:
4210: ;
4211: $if $(@expr1073745189 $!@expr1073745190 $assertEquals $(@expr1073745191 "cppcheck-2.8/test/testnullpointer.cpp" $, 4211 $, "" $, errout@var100 .@expr3320 str (@expr3321 ) $) $) { $return ; }
4212: }
4213:
4214: void isPointerDeRefFunctionDecl ( ) {
4215: $check_ $(@expr1073745194 "cppcheck-2.8/test/testnullpointer.cpp" $, 4215 $, "const char** get() { return 0; }" $) ;
4216: $if $(@expr1073745195 $!@expr1073745196 $assertEquals $(@expr1073745197 "cppcheck-2.8/test/testnullpointer.cpp" $, 4216 $, "" $, errout@var100 .@expr1073745198 str (@expr1073745199 ) $) $) { $return ; }
4217: }
4218:
4219:
4220: void ctu_ ( const char code@var140 [ ] , const char * file@var141 , int line@var142 ) {
4221:
4222: errout@var100 .@expr1073745200 str (@expr1073745201 "" ) ;
4223:
4224:
4225: Tokenizer tokenizer@var143 (@expr1073745202 &@expr3379 settings@var102 , this@expr3380 ) ;
4226: std ::@expr1073745205 istringstream istr@var144 (@expr1073745206 code@var140 ) ;
4227: $assert_ $(@expr1073745207 file@var141 $, line@var142 $, $(@expr1073745208 tokenizer@var143 .@expr1073745209 tokenize (@expr1073745210 istr@var144 , "test.cpp" ) $) $) ;
4228:
4229: CTU ::@expr1073745211 FileInfo * ctu@var145 ; ctu@var145 =@expr1073745212 CTU ::@expr1073745213 getFileInfo (@expr1073745214 &@expr3391 tokenizer@var143 ) ;
4230:
4231:
4232: std ::@expr1073745216 list < Check ::@expr1073745217 FileInfo *@expr1073745218 > fileInfo@var146 ;
4233: CheckNullPointer checkNullPointer@var147 (@expr1073745219 &@expr3391 tokenizer@var143 , &@expr3379 settings@var102 , this@expr3380 ) ;
4234: fileInfo@var146 .@expr1073745222 push_back (@expr1073745223 checkNullPointer@var147 .@expr1073745224 getFileInfo (@expr1073745225 &@expr3391 tokenizer@var143 , &@expr3379 settings@var102 ) ) ;
4235: checkNullPointer@var147 .@expr1073745228 analyseWholeProgram (@expr1073745229 ctu@var145 , fileInfo@var146 , settings@var102 , *@expr1073745230 this@expr3380 ) ;
4236: while (@expr1073745231 !@expr1073745232 fileInfo@var146 .@expr1073745233 empty (@expr1073745234 ) ) {
4237: delete fileInfo@var146 .@expr1073745235 back (@expr1073745236 ) ;
4238: fileInfo@var146 .@expr1073745237 pop_back (@expr1073745238 ) ;
4239: }
4240: delete ctu@var145 ;
4241: }
4242:
4243: void ctuTest ( ) {
4244: setMultiline (@expr1073745239 ) ;
4245:
4246: $ctu_ $(@expr1073745240 "void f(int *fp) {\n    a = *fp;\n}\nint main() {\n  int *p = 0;\n  f(p);\n}" $, "cppcheck-2.8/test/testnullpointer.cpp" $, 4246 $)
4247:
|
4251:
4252: ;
4253: $if $(@expr1073745241 $!@expr1073745242 $assertEquals $(@expr1073745243 "cppcheck-2.8/test/testnullpointer.cpp" $, 4253 $, "test.cpp:2:error:Null pointer dereference: fp\ntest.cpp:5:note:Assignment 'p=0', assigned value is 0\ntest.cpp:6:note:Calling function f, 1st argument is null\ntest.cpp:2:note:Dereferencing argument fp that is null\n" $, errout@var100 .@expr3420 str (@expr3421 ) $) $) { $return
4254:
4255:
4256: ; }
4257:
4258: $ctu_ $(@expr1073745246 "void use(int *p) { a = *p + 3; }\nvoid call(int x, int *p) { x++; use(p); }\nint main() {\n  call(4,0);\n}" $, "cppcheck-2.8/test/testnullpointer.cpp" $, 4258 $)
4259:
4260:
4261:
4262: ;
4263: $if $(@expr1073745247 $!@expr1073745248 $assertEquals $(@expr1073745249 "cppcheck-2.8/test/testnullpointer.cpp" $, 4263 $, "test.cpp:1:error:Null pointer dereference: p\ntest.cpp:4:note:Calling function call, 2nd argument is null\ntest.cpp:2:note:Calling function use, 1st argument is null\ntest.cpp:1:note:Dereferencing argument p that is null\n" $, errout@var100 .@expr3420 str (@expr3421 ) $) $) { $return
4264:
4265:
4266: ; }
4267:
4268: $ctu_ $(@expr1073745252 "void dostuff(int *x, int *y) {\n  if (!var)\n    return -1;\n  *x = *y;\n}\n\nvoid f() {\n  dostuff(a, 0);\n}" $, "cppcheck-2.8/test/testnullpointer.cpp" $, 4268 $)
4269:
|
4275:
4276: ;
4277: $if $(@expr1073745253 $!@expr1073745254 $assertEquals $(@expr1073745255 "cppcheck-2.8/test/testnullpointer.cpp" $, 4277 $, "" $, errout@var100 .@expr3420 str (@expr3421 ) $) $) { $return ; }
4278:
4279: $ctu_ $(@expr1073745258 "void dostuff(int *x, int *y) {\n  if (cond)\n    *y = -1;\n  *x = *y;\n}\n\nvoid f() {\n  dostuff(a, 0);\n}" $, "cppcheck-2.8/test/testnullpointer.cpp" $, 4279 $)
4280:
|
4286:
4287: ;
4288: $if $(@expr1073745259 $!@expr1073745260 $assertEquals $(@expr1073745261 "cppcheck-2.8/test/testnullpointer.cpp" $, 4288 $, "" $, errout@var100 .@expr3420 str (@expr3421 ) $) $) { $return ; }
4289:
4290:
4291: $ctu_ $(@expr1073745264 "void dostuff(int mask, int *p) {\n  if (mask == 13) ;\n  else *p = 45;\n}\n\nvoid f() {\n  dostuff(0, 0);\n}" $, "cppcheck-2.8/test/testnullpointer.cpp" $, 4291 $)
4292:
|
4297:
4298: ;
4299: $if $(@expr1073745265 $!@expr1073745266 $assertEquals $(@expr1073745267 "cppcheck-2.8/test/testnullpointer.cpp" $, 4299 $, "" $, errout@var100 .@expr3420 str (@expr3421 ) $) $) { $return ; }
4300:
4301:
4302: $ctu_ $(@expr1073745270 "void dostuff(int mask, int *p) {\n  x = (mask & 1) ? *p : 0;\n}\n\nvoid f() {\n  dostuff(0, 0);\n}" $, "cppcheck-2.8/test/testnullpointer.cpp" $, 4302 $)
4303:
|
4307:
4308: ;
4309: $if $(@expr1073745271 $!@expr1073745272 $assertEquals $(@expr1073745273 "cppcheck-2.8/test/testnullpointer.cpp" $, 4309 $, "" $, errout@var100 .@expr3420 str (@expr3421 ) $) $) { $return ; }
4310:
4311: $ctu_ $(@expr1073745276 "void g(int* x) { *x; }\nvoid f(int* x) {\n    if (x)\n        g(x);\n}" $, "cppcheck-2.8/test/testnullpointer.cpp" $, 4311 $)
4312:
4313:
4314:
4315: ;
4316: $if $(@expr1073745277 $!@expr1073745278 $assertEquals $(@expr1073745279 "cppcheck-2.8/test/testnullpointer.cpp" $, 4316 $, "" $, errout@var100 .@expr3420 str (@expr3421 ) $) $) { $return ; }
4317: }
4318: } ;
4319:
4320: $namespace ${ TestNullPointer instance_TestNullPointer@var148 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@162}
  v {!<=-1,!>=2,0@162}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 41
  "TestNullPointer" always "TestNullPointer"
Line 47
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "nullpointerAfterLoop" always "nullpointerAfterLoop"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "nullpointer1" always "nullpointer1"
  false always 0
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "nullpointer2" always "nullpointer2"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "structDerefAndCheck" always "structDerefAndCheck"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "pointerDerefAndCheck" always "pointerDerefAndCheck"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "nullpointer5" always "nullpointer5"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "nullpointerExecutionPaths" always "nullpointerExecutionPaths"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "nullpointerExecutionPathsLoop" always "nullpointerExecutionPathsLoop"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "nullpointer7" always "nullpointer7"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "nullpointer9" always "nullpointer9"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "nullpointer10" always "nullpointer10"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "nullpointer11" always "nullpointer11"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "nullpointer12" always "nullpointer12"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "nullpointer15" always "nullpointer15"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "nullpointer16" always "nullpointer16"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "nullpointer17" always "nullpointer17"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "nullpointer18" always "nullpointer18"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "nullpointer19" always "nullpointer19"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "nullpointer20" always "nullpointer20"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "nullpointer21" always "nullpointer21"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "nullpointer23" always "nullpointer23"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "nullpointer24" always "nullpointer24"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "nullpointer25" always "nullpointer25"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "nullpointer26" always "nullpointer26"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "nullpointer27" always "nullpointer27"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "nullpointer28" always "nullpointer28"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "nullpointer30" always "nullpointer30"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "nullpointer31" always "nullpointer31"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "nullpointer32" always "nullpointer32"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "nullpointer33" always "nullpointer33"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "nullpointer34" always "nullpointer34"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "nullpointer35" always "nullpointer35"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "nullpointer36" always "nullpointer36"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "nullpointer37" always "nullpointer37"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "nullpointer38" always "nullpointer38"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "nullpointer39" always "nullpointer39"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "nullpointer40" always "nullpointer40"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "nullpointer41" always "nullpointer41"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "nullpointer42" always "nullpointer42"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "nullpointer43" always "nullpointer43"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "nullpointer44" always "nullpointer44"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "nullpointer45" always "nullpointer45"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "nullpointer46" always "nullpointer46"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "nullpointer47" always "nullpointer47"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "nullpointer48" always "nullpointer48"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "nullpointer49" always "nullpointer49"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "nullpointer50" always "nullpointer50"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "nullpointer51" always "nullpointer51"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "nullpointer52" always "nullpointer52"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "nullpointer53" always "nullpointer53"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "nullpointer54" always "nullpointer54"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "nullpointer55" always "nullpointer55"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "nullpointer56" always "nullpointer56"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "nullpointer57" always "nullpointer57"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "nullpointer58" always "nullpointer58"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "nullpointer59" always "nullpointer59"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "nullpointer60" always "nullpointer60"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "nullpointer61" always "nullpointer61"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "nullpointer62" always "nullpointer62"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "nullpointer63" always "nullpointer63"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "nullpointer64" always "nullpointer64"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "nullpointer65" always "nullpointer65"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "nullpointer66" always "nullpointer66"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "nullpointer67" always "nullpointer67"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "nullpointer68" always "nullpointer68"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "nullpointer69" always "nullpointer69"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "nullpointer70" always "nullpointer70"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "nullpointer71" always "nullpointer71"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "nullpointer72" always "nullpointer72"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "nullpointer73" always "nullpointer73"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "nullpointer74" always "nullpointer74"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "nullpointer75" always "nullpointer75"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "nullpointer76" always "nullpointer76"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "nullpointer77" always "nullpointer77"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "nullpointer78" always "nullpointer78"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "nullpointer79" always "nullpointer79"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "nullpointer80" always "nullpointer80"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "nullpointer81" always "nullpointer81"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "nullpointer82" always "nullpointer82"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "nullpointer83" always "nullpointer83"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "nullpointer84" always "nullpointer84"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "nullpointer85" always "nullpointer85"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "nullpointer86" always "nullpointer86"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "nullpointer87" always "nullpointer87"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "nullpointer88" always "nullpointer88"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "nullpointer89" always "nullpointer89"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "nullpointer90" always "nullpointer90"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "nullpointer91" always "nullpointer91"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "nullpointer92" always "nullpointer92"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "nullpointer93" always "nullpointer93"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "nullpointer94" always "nullpointer94"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "nullpointer_addressOf" always "nullpointer_addressOf"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "nullpointerSwitch" always "nullpointerSwitch"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "nullpointer_cast" always "nullpointer_cast"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "nullpointer_castToVoid" always "nullpointer_castToVoid"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "nullpointer_subfunction" always "nullpointer_subfunction"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "pointerCheckAndDeRef" always "pointerCheckAndDeRef"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "nullConstantDereference" always "nullConstantDereference"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "gcc_statement_expression" always "gcc_statement_expression"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "snprintf_with_zero_size" always "snprintf_with_zero_size"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "snprintf_with_non_zero_size" always "snprintf_with_non_zero_size"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "printf_with_invalid_va_argument" always "printf_with_invalid_va_argument"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "scanf_with_invalid_va_argument" always "scanf_with_invalid_va_argument"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "nullpointer_in_return" always "nullpointer_in_return"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "nullpointer_in_typeid" always "nullpointer_in_typeid"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "nullpointer_in_for_loop" always "nullpointer_in_for_loop"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "nullpointerDelete" always "nullpointerDelete"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "nullpointerSubFunction" always "nullpointerSubFunction"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "nullpointerExit" always "nullpointerExit"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "nullpointerStdString" always "nullpointerStdString"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "nullpointerStdStream" always "nullpointerStdStream"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "nullpointerSmartPointer" always "nullpointerSmartPointer"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "functioncall" always "functioncall"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "functioncalllibrary" always "functioncalllibrary"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "functioncallDefaultArguments" always "functioncallDefaultArguments"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "nullpointer_internal_error" always "nullpointer_internal_error"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "ticket6505" always "ticket6505"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "subtract" always "subtract"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "addNull" always "addNull"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "isPointerDeRefFunctionDecl" always "isPointerDeRefFunctionDecl"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "ctuTest" always "ctuTest"
  false always 0
  false always 0
Line 175
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 177
  "" always ""
Line 179
  inconclusive {!<=-1,!>=2,1@25,0@79}
Line 182
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 183
  code possible {"const char** get() { return 0; }"@9,"void foo(char *s) {\n  char * p = s + 20;\n}\nvoid bar() { foo(0); }"@10,"void foo(char *s) {\n  if (!s) {}\n  char * p = s + 20;\n}"@11,"void foo(char *s) {\n  char * p = 20 + s;\n}\nvoid bar() { foo(0); }"@12,"void foo(char *s) {\n  if (!s) {}\n  char * p = 20 + s;\n}"@13,"void foo(char *s) {\n  s += 20;\n}\nvoid bar() { foo(0); }"@14,"void foo(char *s) {\n  if (!s) {}\n  s += 20;\n}"@15,"int* f7() { int *x = NULL; return ++x; }"@16,"int* f10() { int *x = NULL; return x++; }"@17,"class foo {};\nconst char* get() const { return 0; }\nvoid f(foo x) { if (get()) x += get(); }"@18}
Line 184
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testnullpointer.cpp"@9,"cppcheck-2.8/test/testnullpointer.cpp"@10,"cppcheck-2.8/test/testnullpointer.cpp"@11,"cppcheck-2.8/test/testnullpointer.cpp"@12,"cppcheck-2.8/test/testnullpointer.cpp"@13,"cppcheck-2.8/test/testnullpointer.cpp"@14,"cppcheck-2.8/test/testnullpointer.cpp"@15,"cppcheck-2.8/test/testnullpointer.cpp"@16,"cppcheck-2.8/test/testnullpointer.cpp"@17,"cppcheck-2.8/test/testnullpointer.cpp"@18}
  line inconclusive {4215@9,4166@10,4172@11,4178@12,4184@13,4190@14,4196@15,4202@16,4205@17,4208@18}
  filename inconclusive {"test.c"@25,"test.c"@195,"test.cpp"@43,"test.c"@44}
Line 188
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 193
  "" always ""
Line 195
  false always 0
Line 198
  1 always 1
  "test.cpp" always "test.cpp"
Line 199
  code possible {"typedef int Count;\n#define offsetof(TYPE, MEMBER) ((Count) & ((TYPE*)0)->MEMBER)\nstruct S {\n    int a[20];\n};\nint g(int i) {\n    return offsetof(S, a[i]);\n}\n"@186,"#define IF if\nvoid f(int *p) {\n    *p = 0;\n    IF(!p){}\n}"@116,"#define IF if\nvoid f(struct FRED *fred) {\n    fred->x = 0;\n    IF(!fred){}\n}"@144}
Line 200
  files always size=1
  0 always 0
Line 205
  filedata always size=0
Line 208
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 210
  "" always ""
Line 214
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 221
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  221 always 221
  "void foo(const Token *tok)\n{\n    while (tok);\n    tok = tok->next();\n}" always "void foo(const Token *tok)\n{\n    while (tok);\n    tok = tok->next();\n}"
  true always 1
Line 226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  226 always 226
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'tok' is redundant or there is possible null pointer dereference: tok.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'tok' is redundant or there is possible null pointer dereference: tok.\n"
Line 230
  134 always 134
  = always "void foo(const Token *tok)\n{\n    while (tok && tok->str() == \"=\")\n        tok = tok->next();\n\n    if (tok->str() != \";\")\n        ;\n}\n"
  "void foo(const Token *tok)\n{\n    while (tok && tok->str() == \"=\")\n        tok = tok->next();\n\n    if (tok->str() != \";\")\n        ;\n}\n" always "void foo(const Token *tok)\n{\n    while (tok && tok->str() == \"=\")\n        tok = tok->next();\n\n    if (tok->str() != \";\")\n        ;\n}\n"
Line 239
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  239 always 239
  code always "void foo(const Token *tok)\n{\n    while (tok && tok->str() == \"=\")\n        tok = tok->next();\n\n    if (tok->str() != \";\")\n        ;\n}\n"
Line 240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  240 always 240
  "[test.cpp:3] -> [test.cpp:6]: (warning) Either the condition 'tok' is redundant or there is possible null pointer dereference: tok.\n" always "[test.cpp:3] -> [test.cpp:6]: (warning) Either the condition 'tok' is redundant or there is possible null pointer dereference: tok.\n"
Line 243
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  243 always 243
  "void foo()\n{\n    for (const Token *tok = tokens; tok; tok = tok->next())\n    {\n        while (tok && tok->str() != \";\")\n            tok = tok->next();\n    }\n}" always "void foo()\n{\n    for (const Token *tok = tokens; tok; tok = tok->next())\n    {\n        while (tok && tok->str() != \";\")\n            tok = tok->next();\n    }\n}"
Line 251
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  251 always 251
  "[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition 'while' is redundant or there is possible null pointer dereference: tok.\n" always "[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition 'while' is redundant or there is possible null pointer dereference: tok.\n"
  "" always ""
Line 253
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  253 always 253
  "void foo(Token &tok)\n{\n    for (int i = 0; i < tok.size(); i++ )\n    {\n        while (!tok)\n            char c = tok.read();\n    }\n}" always "void foo(Token &tok)\n{\n    for (int i = 0; i < tok.size(); i++ )\n    {\n        while (!tok)\n            char c = tok.read();\n    }\n}"
Line 261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  261 always 261
  "" always ""
Line 263
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  263 always 263
  "void foo()\n{\n    for (const Token *tok = tokens; tok; tok = tok->next())\n    {\n        while (tok && tok->str() != \";\")\n            tok = tok->next();\n        if( !tok ) break;\n    }\n}" always "void foo()\n{\n    for (const Token *tok = tokens; tok; tok = tok->next())\n    {\n        while (tok && tok->str() != \";\")\n            tok = tok->next();\n        if( !tok ) break;\n    }\n}"
Line 272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  272 always 272
  "" always ""
Line 274
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  274 always 274
  "void foo()\n{\n    for (const Token *tok = tokens; tok; tok = tok ? tok->next() : NULL)\n    {\n        while (tok && tok->str() != \";\")\n            tok = tok->next();\n    }\n}" always "void foo()\n{\n    for (const Token *tok = tokens; tok; tok = tok ? tok->next() : NULL)\n    {\n        while (tok && tok->str() != \";\")\n            tok = tok->next();\n    }\n}"
Line 282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  282 always 282
  "" always ""
Line 284
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  284 always 284
  "void foo(A*a)\n{\n  switch (a->b()) {\n    case 1:\n      while( a ){\n        a = a->next;\n      }\n    break;\n    case 2:\n      a->b();\n      break;\n  }\n}" always "void foo(A*a)\n{\n  switch (a->b()) {\n    case 1:\n      while( a ){\n        a = a->next;\n      }\n    break;\n    case 2:\n      a->b();\n      break;\n  }\n}"
Line 297
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  297 always 297
  "" always ""
Line 300
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  300 always 300
  "void foo(int x, const Token *tok) {\n    if (x == 123) {\n        while (tok) tok = tok->next();\n    }\n    tok->str();\n}" always "void foo(int x, const Token *tok) {\n    if (x == 123) {\n        while (tok) tok = tok->next();\n    }\n    tok->str();\n}"
Line 306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  306 always 306
  "[test.cpp:3] -> [test.cpp:5]: (warning) Either the condition 'tok' is redundant or there is possible null pointer dereference: tok.\n" always "[test.cpp:3] -> [test.cpp:5]: (warning) Either the condition 'tok' is redundant or there is possible null pointer dereference: tok.\n"
Line 308
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  308 always 308
  "int foo(const Token *tok)\n{\n    while (tok){;}\n}\n" always "int foo(const Token *tok)\n{\n    while (tok){;}\n}\n"
  true always 1
Line 312
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  312 always 312
  "" always ""
Line 314
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  314 always 314
  "int foo(const Token *tok)\n{\n    while (tok){;}\n    char a[2] = {0,0};\n}\n" always "int foo(const Token *tok)\n{\n    while (tok){;}\n    char a[2] = {0,0};\n}\n"
  true always 1
Line 319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  319 always 319
  "" always ""
Line 321
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  321 always 321
  "struct b {\n    b * c;\n    int i;\n}\nvoid a(b * e) {\n  for (b *d = e;d; d = d->c)\n    while (d && d->i == 0)\n      d = d->c;\n  if (!d) throw;\n}" always "struct b {\n    b * c;\n    int i;\n}\nvoid a(b * e) {\n  for (b *d = e;d; d = d->c)\n    while (d && d->i == 0)\n      d = d->c;\n  if (!d) throw;\n}"
Line 331
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  331 always 331
  "" always ""
Line 333
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  333 always 333
  "struct b {\n    b * c;\n    int i;\n};\nvoid f(b* e1, b* e2) {\n    for (const b* d = e1; d != e2; d = d->c) {\n        if (d && d->i != 0) {}\n    }\n}\n" always "struct b {\n    b * c;\n    int i;\n};\nvoid f(b* e1, b* e2) {\n    for (const b* d = e1; d != e2; d = d->c) {\n        if (d && d->i != 0) {}\n    }\n}\n"
Line 342
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  342 always 342
  "[test.cpp:7] -> [test.cpp:6]: (warning) Either the condition 'd' is redundant or there is possible null pointer dereference: d.\n" always "[test.cpp:7] -> [test.cpp:6]: (warning) Either the condition 'd' is redundant or there is possible null pointer dereference: d.\n"
Line 347
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  347 always 347
  "void f(A *a)\n{\n    if (a->x == 1)\n    {\n        a = a->next;\n    }\n    else if (a->x == 2) { }\n    if (a) { }\n}" always "void f(A *a)\n{\n    if (a->x == 1)\n    {\n        a = a->next;\n    }\n    else if (a->x == 2) { }\n    if (a) { }\n}"
Line 356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  356 always 356
  "" always ""
Line 359
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  359 always 359
  "void f() {\n    int c = 1;\n    int *list = NULL;\n    sizeof(*list);\n    if (!list)\n        ;\n}" always "void f() {\n    int c = 1;\n    int *list = NULL;\n    sizeof(*list);\n    if (!list)\n        ;\n}"
  true always 1
Line 366
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  366 always 366
  "" always ""
Line 369
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  369 always 369
  "void f(Bar *p) {\n    if (!p) {\n        int sz = sizeof(p->x);\n    }\n}" always "void f(Bar *p) {\n    if (!p) {\n        int sz = sizeof(p->x);\n    }\n}"
  true always 1
Line 374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  374 always 374
  "" always ""
Line 380
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  380 always 380
  "void foo()\n{\n    Fred fred;\n    while (fred);\n    fred.hello();\n}" always "void foo()\n{\n    Fred fred;\n    while (fred);\n    fred.hello();\n}"
  true always 1
Line 386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  386 always 386
  "" always ""
Line 396
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  396 always 396
  "void foo(struct ABC *abc)\n{\n    int a = abc->a;\n    if (!abc)\n        ;\n}" always "void foo(struct ABC *abc)\n{\n    int a = abc->a;\n    if (!abc)\n        ;\n}"
Line 402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  402 always 402
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 404
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  404 always 404
  "void foo(struct ABC *abc) {\n    bar(abc->a);\n    bar(x, abc->a);\n    bar(x, y, abc->a);\n    if (!abc)\n        ;\n}" always "void foo(struct ABC *abc) {\n    bar(abc->a);\n    bar(x, abc->a);\n    bar(x, y, abc->a);\n    if (!abc)\n        ;\n}"
Line 411
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  411 always 411
  "[test.cpp:5] -> [test.cpp:2]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n[test.cpp:5] -> [test.cpp:4]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:5] -> [test.cpp:2]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n[test.cpp:5] -> [test.cpp:4]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 415
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  415 always 415
  "void foo(ABC *abc) {\n    if (abc->a == 3) {\n        return;\n    }\n    if (abc) {}\n}" always "void foo(ABC *abc) {\n    if (abc->a == 3) {\n        return;\n    }\n    if (abc) {}\n}"
Line 421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  421 always 421
  "[test.cpp:5] -> [test.cpp:2]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:5] -> [test.cpp:2]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 425
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  425 always 425
  "void f(ABC *abc) {\n    if (abc->x == 0) {\n        return;\n    }\n    if (!abc);\n}" always "void f(ABC *abc) {\n    if (abc->x == 0) {\n        return;\n    }\n    if (!abc);\n}"
Line 431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  431 always 431
  "[test.cpp:5] -> [test.cpp:2]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:5] -> [test.cpp:2]: (warning) Either the condition '!abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 434
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  434 always 434
  "void foo(ABC *abc) {\n    abc->next->a = 0;\n    if (abc->next)\n        ;\n}" always "void foo(ABC *abc) {\n    abc->next->a = 0;\n    if (abc->next)\n        ;\n}"
Line 439
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  439 always 439
  "[test.cpp:3] -> [test.cpp:2]: (warning) Possible null pointer dereference: abc - otherwise it is redundant to check it against null.\n" always "[test.cpp:3] -> [test.cpp:2]: (warning) Possible null pointer dereference: abc - otherwise it is redundant to check it against null.\n"
  "" always ""
Line 441
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  441 always 441
  "void foo(ABC *abc) {\n    abc->a = 0;\n    if (abc && abc->b == 0)\n        ;\n}" always "void foo(ABC *abc) {\n    abc->a = 0;\n    if (abc && abc->b == 0)\n        ;\n}"
Line 446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  446 always 446
  "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 451
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  451 always 451
  "void foo(struct ABC *abc)\n{\n    if (abc && abc->a);\n    if (!abc)\n        ;\n}" always "void foo(struct ABC *abc)\n{\n    if (abc && abc->a);\n    if (!abc)\n        ;\n}"
Line 457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  457 always 457
  "" always ""
Line 459
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  459 always 459
  "void f(struct ABC *abc) {\n    int x = abc && a(abc->x);\n    if (abc) { }\n}" always "void f(struct ABC *abc) {\n    int x = abc && a(abc->x);\n    if (abc) { }\n}"
Line 463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  463 always 463
  "" always ""
Line 466
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  466 always 466
  "void foo(struct ABC *abc)\n{\n    abc = abc->next;\n    if (!abc)\n        ;\n}" always "void foo(struct ABC *abc)\n{\n    abc = abc->next;\n    if (!abc)\n        ;\n}"
  true always 1
Line 472
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  472 always 472
  "" always ""
Line 474
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  474 always 474
  "void f(struct ABC *abc) {\n    abc = (ABC *)(abc->_next);\n    if (abc) { }}" always "void f(struct ABC *abc) {\n    abc = (ABC *)(abc->_next);\n    if (abc) { }}"
  true always 1
Line 478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  478 always 478
  "" always ""
Line 481
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  481 always 481
  "void foo(struct ABC *abc)\n{\n    int a = abc->a;\n    abc = abc->next;\n    if (!abc)\n        ;\n}" always "void foo(struct ABC *abc)\n{\n    int a = abc->a;\n    abc = abc->next;\n    if (!abc)\n        ;\n}"
  true always 1
Line 488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  488 always 488
  "" always ""
Line 490
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  490 always 490
  "void foo(struct ABC *abc)\n{\n    int a = abc->a;\n    f(&abc);\n    if (!abc)\n        ;\n}" always "void foo(struct ABC *abc)\n{\n    int a = abc->a;\n    f(&abc);\n    if (!abc)\n        ;\n}"
  true always 1
Line 497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  497 always 497
  "" always ""
Line 500
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  500 always 500
  "void foo(struct ABC *abc)\n{\n    int a;\n    if (!abc)\n        goto out;    a = abc->a;\n    return;\nout:\n    if (!abc)\n        ;\n}" always "void foo(struct ABC *abc)\n{\n    int a;\n    if (!abc)\n        goto out;    a = abc->a;\n    return;\nout:\n    if (!abc)\n        ;\n}"
Line 511
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  511 always 511
  "" always ""
Line 514
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  514 always 514
  "void foo(struct ABC *abc)\n{\n    int a = abc->a;    do\n    {\n        if (abc)\n            abc = abc->next;\n        --a;\n    }\n    while (a > 0);\n}" always "void foo(struct ABC *abc)\n{\n    int a = abc->a;    do\n    {\n        if (abc)\n            abc = abc->next;\n        --a;\n    }\n    while (a > 0);\n}"
Line 525
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  525 always 525
  "" always ""
Line 527
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  527 always 527
  "void f()\n{\n    for (const Token *tok = _tokenizer->tokens(); tok; tok = tok->next())\n    {\n        while (tok && tok->str() != \"{\")\n            tok = tok->next();\n        if (!tok)\n            return;\n    }\n}" always "void f()\n{\n    for (const Token *tok = _tokenizer->tokens(); tok; tok = tok->next())\n    {\n        while (tok && tok->str() != \"{\")\n            tok = tok->next();\n        if (!tok)\n            return;\n    }\n}"
Line 537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  537 always 537
  "" always ""
Line 540
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  540 always 540
  "void foo(ABC *abc)\n{\n    int a = abc->a;\n    if (!dynamic_cast<DEF *>(abc))\n        ;\n}" always "void foo(ABC *abc)\n{\n    int a = abc->a;\n    if (!dynamic_cast<DEF *>(abc))\n        ;\n}"
Line 546
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  546 always 546
  "" always ""
Line 549
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  549 always 549
  "ABC *abc;\nvoid f() {\n    abc->a = 0;\n    do_stuff();\n    if (abc) { }\n}" always "ABC *abc;\nvoid f() {\n    abc->a = 0;\n    do_stuff();\n    if (abc) { }\n}"
Line 555
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  555 always 555
  "" always ""
Line 557
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  557 always 557
  "Fred *fred;\nvoid f() {\n    fred->foo();\n    if (fred) { }\n}" always "Fred *fred;\nvoid f() {\n    fred->foo();\n    if (fred) { }\n}"
Line 562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  562 always 562
  "" always ""
Line 565
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  565 always 565
  "void f() {\n    ABC *abc = abc1;\n    abc->a = 0;\n    do_stuff();\n    if (abc) { }\n}" always "void f() {\n    ABC *abc = abc1;\n    abc->a = 0;\n    do_stuff();\n    if (abc) { }\n}"
Line 571
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  571 always 571
  "[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 576
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  576 always 576
  "void f(ABC *abc) {\n    abc->a = 0;\n    do_stuff();\n    if (abc) { }\n}" always "void f(ABC *abc) {\n    abc->a = 0;\n    do_stuff();\n    if (abc) { }\n}"
Line 581
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  581 always 581
  "[test.cpp:4] -> [test.cpp:2]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:4] -> [test.cpp:2]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 586
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  586 always 586
  "void f(ABC *abc) {\n    switch ( x ) {\n        case 14:\n            sprintf(buf, \"%d\", abc->a);\n            break;\n        case 15:\n            if ( abc ) {}\n            break;\n    }\n}" always "void f(ABC *abc) {\n    switch ( x ) {\n        case 14:\n            sprintf(buf, \"%d\", abc->a);\n            break;\n        case 15:\n            if ( abc ) {}\n            break;\n    }\n}"
Line 596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  596 always 596
  "" always ""
Line 599
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  599 always 599
  "void f(ABC *abc) {\n    x(!abc || y(abc->a));\n    if (abc) {}\n}" always "void f(ABC *abc) {\n    x(!abc || y(abc->a));\n    if (abc) {}\n}"
Line 603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  603 always 603
  "" always ""
Line 605
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  605 always 605
  "void f(ABC *abc) {\n  x(def || !abc || y(def, abc->a));\n  if (abc) {}\n}" always "void f(ABC *abc) {\n  x(def || !abc || y(def, abc->a));\n  if (abc) {}\n}"
Line 609
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  609 always 609
  "" always ""
Line 611
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  611 always 611
  "void f(ABC *abc) {\n  x(abc && y(def, abc->a));\n  if (abc) {}\n}" always "void f(ABC *abc) {\n  x(abc && y(def, abc->a));\n  if (abc) {}\n}"
Line 615
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  615 always 615
  "" always ""
Line 617
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  617 always 617
  "void f(ABC *abc) {\n    x(def && abc && y(def, abc->a));\n    if (abc) {}\n}" always "void f(ABC *abc) {\n    x(def && abc && y(def, abc->a));\n    if (abc) {}\n}"
Line 621
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  621 always 621
  "" always ""
Line 625
  56 always 56
  = always "void f(Fred *fred) {\n    fred->x();\n    if (fred) { }\n}"
  "void f(Fred *fred) {\n    fred->x();\n    if (fred) { }\n}" always "void f(Fred *fred) {\n    fred->x();\n    if (fred) { }\n}"
Line 629
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  629 always 629
  code always "void f(Fred *fred) {\n    fred->x();\n    if (fred) { }\n}"
Line 630
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  630 always 630
  "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'fred' is redundant or there is possible null pointer dereference: fred.\n" always "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'fred' is redundant or there is possible null pointer dereference: fred.\n"
Line 636
  "#define IF if\nvoid f(struct FRED *fred) {\n    fred->x = 0;\n    IF(!fred){}\n}" always "#define IF if\nvoid f(struct FRED *fred) {\n    fred->x = 0;\n    IF(!fred){}\n}"
Line 641
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  641 always 641
  "" always ""
Line 643
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  643 always 643
  "void foo() {\n  BUFFER *buffer = get_buffer();\n  if (!buffer)\n    uv_fatal_error();\n  buffer->x = 11;\n}" always "void foo() {\n  BUFFER *buffer = get_buffer();\n  if (!buffer)\n    uv_fatal_error();\n  buffer->x = 11;\n}"
Line 649
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  649 always 649
  "" always ""
Line 657
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  657 always 657
  "void foo(int *p)\n{\n    *p = 0;\n    if (!p)\n        ;\n}" always "void foo(int *p)\n{\n    *p = 0;\n    if (!p)\n        ;\n}"
Line 663
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  663 always 663
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 665
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  665 always 665
  "void foo(int *p)\n{\n    *p = 0;\n    if (p) { }\n}" always "void foo(int *p)\n{\n    *p = 0;\n    if (p) { }\n}"
Line 670
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  670 always 670
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 674
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  674 always 674
  "void foo(int *p)\n{\n    *p = 0;\n    if (p || q) { }\n}" always "void foo(int *p)\n{\n    *p = 0;\n    if (p || q) { }\n}"
Line 679
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  679 always 679
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 683
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  683 always 683
  "void foo(int *p)\n{\n    bar(*p);\n    if (!p)\n        ;\n}" always "void foo(int *p)\n{\n    bar(*p);\n    if (!p)\n        ;\n}"
Line 689
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  689 always 689
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 691
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  691 always 691
  "void foo(char *p)\n{\n    strcpy(p, \"abc\");\n    if (!p)\n        ;\n}" always "void foo(char *p)\n{\n    strcpy(p, \"abc\");\n    if (!p)\n        ;\n}"
Line 697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  697 always 697
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 699
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  699 always 699
  "void foo(char *p)\n{\n    if (*p == 0) { }\n    if (!p) { }\n}" always "void foo(char *p)\n{\n    if (*p == 0) { }\n    if (!p) { }\n}"
Line 704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  704 always 704
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 707
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  707 always 707
  "void foo()\n{\n    int *p;\n    f(&p);\n    if (!p)\n        ;\n}" always "void foo()\n{\n    int *p;\n    f(&p);\n    if (!p)\n        ;\n}"
Line 714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  714 always 714
  "" always ""
Line 716
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  716 always 716
  "void foo()\n{\n    int **p = f();\n    if (!p)\n        ;\n}" always "void foo()\n{\n    int **p = f();\n    if (!p)\n        ;\n}"
  true always 1
Line 722
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  722 always 722
  "" always ""
Line 724
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  724 always 724
  "void foo(int *p)\n{\n    if (x)\n        p = 0;\n    else\n        *p = 0;\n    if (!p)\n        ;\n}" always "void foo(int *p)\n{\n    if (x)\n        p = 0;\n    else\n        *p = 0;\n    if (!p)\n        ;\n}"
Line 733
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  733 always 733
  "" always ""
Line 735
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  735 always 735
  "void foo(int x)\n{\n    int a = 2 * x;    if (x == 0)\n        ;\n}" always "void foo(int x)\n{\n    int a = 2 * x;    if (x == 0)\n        ;\n}"
  true always 1
Line 741
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  741 always 741
  "" always ""
Line 743
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  743 always 743
  "void foo(int *p)\n{\n    int var1 = p ? *p : 0;\n    if (!p)\n        ;\n}" always "void foo(int *p)\n{\n    int var1 = p ? *p : 0;\n    if (!p)\n        ;\n}"
Line 749
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  749 always 749
  "" always ""
Line 751
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  751 always 751
  "void foo(int *p, bool x)\n{\n    int var1 = x ? *p : 5;\n    if (!p)\n        ;\n}" always "void foo(int *p, bool x)\n{\n    int var1 = x ? *p : 5;\n    if (!p)\n        ;\n}"
Line 757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  757 always 757
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 762
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  762 always 762
  "void f(int *p) {\n    *p = 0;\n    while (p) { p = 0; }\n}" always "void f(int *p) {\n    *p = 0;\n    while (p) { p = 0; }\n}"
Line 766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  766 always 766
  "" always ""
Line 768
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  768 always 768
  "void f(int *p) {\n    *p = 0;\n    while (p) { }\n}" always "void f(int *p) {\n    *p = 0;\n    while (p) { }\n}"
Line 772
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  772 always 772
  "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 777
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  777 always 777
  "void foo(ABC *p)\n{\n    int var1 = p ? (p->a) : 0;\n    if (!p)\n        ;\n}" always "void foo(ABC *p)\n{\n    int var1 = p ? (p->a) : 0;\n    if (!p)\n        ;\n}"
Line 783
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  783 always 783
  "" always ""
Line 785
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  785 always 785
  "void foo(ABC *p)\n{\n    int var1 = p ? (1 + p->a) : 0;\n    if (!p)\n        ;\n}" always "void foo(ABC *p)\n{\n    int var1 = p ? (1 + p->a) : 0;\n    if (!p)\n        ;\n}"
Line 791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  791 always 791
  "" always ""
Line 793
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  793 always 793
  "void f() {\n    int * a=0;\n    if (!a) {};\n    int c = a ? 0 : 1;\n}\n" always "void f() {\n    int * a=0;\n    if (!a) {};\n    int c = a ? 0 : 1;\n}\n"
  true always 1
Line 798
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  798 always 798
  "" always ""
Line 801
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  801 always 801
  "void f() {\n    int * a=0;\n    if (!a) {};\n    int c = a ? b : b+1;\n}\n" always "void f() {\n    int * a=0;\n    if (!a) {};\n    int c = a ? b : b+1;\n}\n"
  true always 1
Line 806
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  806 always 806
  "" always ""
Line 808
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  808 always 808
  "void f() {\n    int * a=0;\n    if (!a) {};\n    int c = (a) ? b : b+1;\n}\n" always "void f() {\n    int * a=0;\n    if (!a) {};\n    int c = (a) ? b : b+1;\n}\n"
  true always 1
Line 813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  813 always 813
  "" always ""
Line 815
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  815 always 815
  "void foo(P *p)\n{\n  while (p)\n    if (p->check())\n      break;\n    else\n      p = p->next();\n}" always "void foo(P *p)\n{\n  while (p)\n    if (p->check())\n      break;\n    else\n      p = p->next();\n}"
Line 823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  823 always 823
  "" always ""
Line 825
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  825 always 825
  "void f(Document *doc) {\n    int x = doc && doc->x;\n    if (!doc) {\n        return;\n    }\n}" always "void f(Document *doc) {\n    int x = doc && doc->x;\n    if (!doc) {\n        return;\n    }\n}"
Line 831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  831 always 831
  "" always ""
Line 834
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  834 always 834
  "void f(int *p) {\n    assert(!p || (*p<=6));\n    if (p) { *p = 0; }\n}" always "void f(int *p) {\n    assert(!p || (*p<=6));\n    if (p) { *p = 0; }\n}"
Line 838
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  838 always 838
  "" always ""
Line 840
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  840 always 840
  "void f(int *p) {\n    assert(p && (*p<=6));\n    if (p) { *p = 0; }\n}" always "void f(int *p) {\n    assert(p && (*p<=6));\n    if (p) { *p = 0; }\n}"
Line 844
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  844 always 844
  "" always ""
Line 846
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  846 always 846
  "void f(int *p) {\n    *p = 12;\n    assert(p && (*p<=6));\n    if (p) { *p = 0; }\n}" always "void f(int *p) {\n    *p = 12;\n    assert(p && (*p<=6));\n    if (p) { *p = 0; }\n}"
Line 851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  851 always 851
  "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 855
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  855 always 855
  "void foo(x *p)\n{\n    p = p->next;\n    if (!p)\n        ;\n}" always "void foo(x *p)\n{\n    p = p->next;\n    if (!p)\n        ;\n}"
Line 861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  861 always 861
  "" always ""
Line 863
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  863 always 863
  "void foo(x *p)\n{\n    p = bar(p->next);\n    if (!p)\n        ;\n}" always "void foo(x *p)\n{\n    p = bar(p->next);\n    if (!p)\n        ;\n}"
Line 869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  869 always 869
  "" always ""
Line 871
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  871 always 871
  "void foo(x *p)\n{\n    p = aa->bar(p->next);\n    if (!p)\n        ;\n}" always "void foo(x *p)\n{\n    p = aa->bar(p->next);\n    if (!p)\n        ;\n}"
Line 877
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  877 always 877
  "" always ""
Line 879
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  879 always 879
  "void foo(x *p)\n{\n    p = *p2 = p->next;\n    if (!p)\n        ;\n}" always "void foo(x *p)\n{\n    p = *p2 = p->next;\n    if (!p)\n        ;\n}"
Line 885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  885 always 885
  "" always ""
Line 887
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  887 always 887
  "void foo(struct ABC *abc)\n{\n    abc = abc ? abc->next : 0;\n    if (!abc)\n        ;\n}" always "void foo(struct ABC *abc)\n{\n    abc = abc ? abc->next : 0;\n    if (!abc)\n        ;\n}"
Line 893
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  893 always 893
  "" always ""
Line 895
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  895 always 895
  "void f(struct ABC *abc) {\n    abc = (*abc).next;\n    if (abc) { }\n}" always "void f(struct ABC *abc) {\n    abc = (*abc).next;\n    if (abc) { }\n}"
Line 899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  899 always 899
  "" always ""
Line 901
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  901 always 901
  "void f(struct ABC *abc) {\n    abc = (*abc->ptr);\n    if (abc) { }\n}" always "void f(struct ABC *abc) {\n    abc = (*abc->ptr);\n    if (abc) { }\n}"
Line 905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  905 always 905
  "" always ""
Line 907
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  907 always 907
  "int f(Item *item) {\n    x = item ? ab(item->x) : 0;\n    if (item) { }\n}" always "int f(Item *item) {\n    x = item ? ab(item->x) : 0;\n    if (item) { }\n}"
Line 911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  911 always 911
  "" always ""
Line 913
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  913 always 913
  "int f(Item *item) {\n    item->x = 0;\n    a = b ? c : d;\n    if (item) { }\n}" always "int f(Item *item) {\n    item->x = 0;\n    a = b ? c : d;\n    if (item) { }\n}"
Line 918
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  918 always 918
  "[test.cpp:4] -> [test.cpp:2]: (warning) Either the condition 'item' is redundant or there is possible null pointer dereference: item.\n" always "[test.cpp:4] -> [test.cpp:2]: (warning) Either the condition 'item' is redundant or there is possible null pointer dereference: item.\n"
Line 922
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  922 always 922
  "BOOL GotoFlyAnchor()\n{\n    const SwFrm* pFrm = GetCurrFrm();\n    do {\n        pFrm = pFrm->GetUpper();\n    } while( pFrm && !pFrm->IsFlyFrm() );\n\n    if( !pFrm )\n        return FALSE;\n}" always "BOOL GotoFlyAnchor()\n{\n    const SwFrm* pFrm = GetCurrFrm();\n    do {\n        pFrm = pFrm->GetUpper();\n    } while( pFrm && !pFrm->IsFlyFrm() );\n\n    if( !pFrm )\n        return FALSE;\n}"
Line 932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  932 always 932
  "" always ""
Line 935
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  935 always 935
  "struct A\n{\n    B* W;\n\n    void f() {\n        switch (InData) {\n            case 2:\n                if (!W) return;\n                W->foo();\n                break;\n            case 3:\n                f();\n                if (!W) return;\n                break;\n        }\n    }\n}" always "struct A\n{\n    B* W;\n\n    void f() {\n        switch (InData) {\n            case 2:\n                if (!W) return;\n                W->foo();\n                break;\n            case 3:\n                f();\n                if (!W) return;\n                break;\n        }\n    }\n}"
Line 952
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  952 always 952
  "" always ""
Line 955
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  955 always 955
  "void f() {\n    int *test = NULL;\n    int c = sizeof(test[0]);\n    if (!test)\n        ;\n}" always "void f() {\n    int *test = NULL;\n    int c = sizeof(test[0]);\n    if (!test)\n        ;\n}"
  true always 1
Line 961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  961 always 961
  "" always ""
Line 963
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  963 always 963
  "void f(type* p) {\n    x(sizeof p[0]);\n    if (!p)\n        ;\n}" always "void f(type* p) {\n    x(sizeof p[0]);\n    if (!p)\n        ;\n}"
Line 968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  968 always 968
  "" always ""
Line 971
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  971 always 971
  "void f(struct ABC *abc) {\n  WARN_ON(!abc || abc->x == 0);\n  if (!abc) { }\n}" always "void f(struct ABC *abc) {\n  WARN_ON(!abc || abc->x == 0);\n  if (!abc) { }\n}"
Line 975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  975 always 975
  "" always ""
Line 976
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  976 always 976
  "void f(struct ABC *abc) {\n  WARN_ON(!abc || abc->x == 7);\n  if (!abc) { }\n}" always "void f(struct ABC *abc) {\n  WARN_ON(!abc || abc->x == 7);\n  if (!abc) { }\n}"
Line 980
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  980 always 980
  "" always ""
Line 983
  "#define IF if\nvoid f(int *p) {\n    *p = 0;\n    IF(!p){}\n}" always "#define IF if\nvoid f(int *p) {\n    *p = 0;\n    IF(!p){}\n}"
Line 988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  988 always 988
  "" always ""
Line 990
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  990 always 990
  "void f() {\n    int *p;\n    ((p=ret()) && (x=*p));\n    if (p);\n}" always "void f() {\n    int *p;\n    ((p=ret()) && (x=*p));\n    if (p);\n}"
Line 995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  995 always 995
  "" always ""
Line 1000
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1000 always 1000
  "void foo(A &a)\n{\n char c = a.c();\n if (!a)\n   return;\n}" always "void foo(A &a)\n{\n char c = a.c();\n if (!a)\n   return;\n}"
Line 1006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1006 always 1006
  "" always ""
Line 1012
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1012 always 1012
  "static void foo()\n{\n    Foo *p = 0;\n    if (a == 1) {\n        p = new FooBar;\n    } else { if (a == 2) {\n        p = new FooCar; } }\n    p->abcd();\n}" always "static void foo()\n{\n    Foo *p = 0;\n    if (a == 1) {\n        p = new FooBar;\n    } else { if (a == 2) {\n        p = new FooCar; } }\n    p->abcd();\n}"
Line 1021
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1021 always 1021
  "[test.cpp:8]: (error) Possible null pointer dereference: p\n" always "[test.cpp:8]: (error) Possible null pointer dereference: p\n"
  "" always ""
Line 1024
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1024 always 1024
  "static void foo() {\n    int &r = *(int*)0;\n}" always "static void foo() {\n    int &r = *(int*)0;\n}"
Line 1027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1027 always 1027
  "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n" always "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n"
Line 1029
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1029 always 1029
  "static void foo(int x) {\n    int y = 5 + *(int*)0;\n}" always "static void foo(int x) {\n    int y = 5 + *(int*)0;\n}"
Line 1032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1032 always 1032
  "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n" always "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n"
Line 1035
  60 always 60
  = always "static void foo() {\n    Foo<int> *abc = 0;\n    abc->a();\n}\n"
  "static void foo() {\n    Foo<int> *abc = 0;\n    abc->a();\n}\n" always "static void foo() {\n    Foo<int> *abc = 0;\n    abc->a();\n}\n"
Line 1040
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1040 always 1040
  code always "static void foo() {\n    Foo<int> *abc = 0;\n    abc->a();\n}\n"
Line 1041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1041 always 1041
  "[test.cpp:3]: (error) Null pointer dereference: abc\n" always "[test.cpp:3]: (error) Null pointer dereference: abc\n"
Line 1044
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1044 always 1044
  "static void foo() {\n    std::cout << *(int*)0;}" always "static void foo() {\n    std::cout << *(int*)0;}"
Line 1047
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1047 always 1047
  "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n" always "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n"
Line 1049
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1049 always 1049
  "void f()\n{\n    char *c = 0;\n    {\n        delete c;\n    }\n    c[0] = 0;\n}" always "void f()\n{\n    char *c = 0;\n    {\n        delete c;\n    }\n    c[0] = 0;\n}"
Line 1057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1057 always 1057
  "[test.cpp:7]: (error) Null pointer dereference: c\n" always "[test.cpp:7]: (error) Null pointer dereference: c\n"
Line 1059
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1059 always 1059
  "static void foo() {\n    if (3 > *(int*)0);\n}" always "static void foo() {\n    if (3 > *(int*)0);\n}"
Line 1062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1062 always 1062
  "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n" always "[test.cpp:2]: (error) Null pointer dereference: (int*)0\n"
Line 1065
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1065 always 1065
  "static void foo()\n{\n    Foo *p = 0;\n    p = new Foo;\n    p->abcd();\n}" always "static void foo()\n{\n    Foo *p = 0;\n    p = new Foo;\n    p->abcd();\n}"
Line 1071
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1071 always 1071
  "" always ""
Line 1073
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1073 always 1073
  "void foo()\n{\n    int sz = sizeof((*(struct dummy *)0).x);\n}" always "void foo()\n{\n    int sz = sizeof((*(struct dummy *)0).x);\n}"
Line 1077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1077 always 1077
  "" always ""
Line 1079
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1079 always 1079
  "void get_offset(long &offset)\n{\n    mystruct * temp; temp = 0;\n    offset = (long)(&(temp->z));\n}" always "void get_offset(long &offset)\n{\n    mystruct * temp; temp = 0;\n    offset = (long)(&(temp->z));\n}"
Line 1084
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1084 always 1084
  "" always ""
Line 1087
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1087 always 1087
  "int *test(int *Z)\n{\n    int *Q=NULL;\n    if (Z) {\n        Q = Z;\n    }\n    else {\n        Z = new int;\n        try {\n        } catch(...) {\n        }\n        Q = Z;\n    }\n    *Q=1;\n    return Q;\n}" always "int *test(int *Z)\n{\n    int *Q=NULL;\n    if (Z) {\n        Q = Z;\n    }\n    else {\n        Z = new int;\n        try {\n        } catch(...) {\n        }\n        Q = Z;\n    }\n    *Q=1;\n    return Q;\n}"
Line 1103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1103 always 1103
  "" always ""
Line 1105
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1105 always 1105
  "int *test(int *Z)\n{\n    int *Q=NULL;\n    if (Z) {\n        Q = Z;\n    }\n    else {\n        try {\n        } catch(...) {\n        }\n    }\n    *Q=1;\n    return Q;\n}" always "int *test(int *Z)\n{\n    int *Q=NULL;\n    if (Z) {\n        Q = Z;\n    }\n    else {\n        try {\n        } catch(...) {\n        }\n    }\n    *Q=1;\n    return Q;\n}"
Line 1119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1119 always 1119
  "[test.cpp:12]: (warning) Possible null pointer dereference: Q\n" always "[test.cpp:12]: (warning) Possible null pointer dereference: Q\n"
Line 1122
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1122 always 1122
  "void f() {\n    for (int x = 0; x < 5; ++x) {        int *p = 0;\n        if (a(x)) p=b(x);\n        else continue;\n        *p = 0;\n    }\n}" always "void f() {\n    for (int x = 0; x < 5; ++x) {        int *p = 0;\n        if (a(x)) p=b(x);\n        else continue;\n        *p = 0;\n    }\n}"
Line 1130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1130 always 1130
  "" always ""
Line 1133
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1133 always 1133
  "void foo()\n{\n    void (*f)();\n    f = 0;\n    f();\n}" always "void foo()\n{\n    void (*f)();\n    f = 0;\n    f();\n}"
Line 1139
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1139 always 1139
  "[test.cpp:5]: (error) Null pointer dereference: f\n" always "[test.cpp:5]: (error) Null pointer dereference: f\n"
Line 1141
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1141 always 1141
  "int* g();\nint* f() {\n    static int* (*fun)() = 0;\n    if (!fun)\n        fun = g;\n    return fun();\n}\n" always "int* g();\nint* f() {\n    static int* (*fun)() = 0;\n    if (!fun)\n        fun = g;\n    return fun();\n}\n"
Line 1148
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1148 always 1148
  "" always ""
Line 1151
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1151 always 1151
  "void f() {\n    int *p = 0;\n    for (int i = 0; i < 10; ++i) {\n        int x = *p + 1;\n    }\n}" always "void f() {\n    int *p = 0;\n    for (int i = 0; i < 10; ++i) {\n        int x = *p + 1;\n    }\n}"
Line 1157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1157 always 1157
  "[test.cpp:4]: (error) Null pointer dereference: p\n" always "[test.cpp:4]: (error) Null pointer dereference: p\n"
Line 1159
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1159 always 1159
  "void f(int a) {\n    const char *p = 0;\n    if (a) {\n        p = \"abcd\";\n    }\n    for (int i = 0; i < 3; i++) {\n        if (a && (p[i] == '1'));\n    }\n}" always "void f(int a) {\n    const char *p = 0;\n    if (a) {\n        p = \"abcd\";\n    }\n    for (int i = 0; i < 3; i++) {\n        if (a && (p[i] == '1'));\n    }\n}"
  true always 1
Line 1168
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1168 always 1168
  "" always ""
Line 1171
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1171 always 1171
  "void f() {\n    Fred *fred = 0;\n    int x = &fred->x;\n}" always "void f() {\n    Fred *fred = 0;\n    int x = &fred->x;\n}"
  true always 1
Line 1175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1175 always 1175
  "" always ""
Line 1178
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1178 always 1178
  "void f() {\n    Fred *fred = NULL;\n    fred->do_something();\n}" always "void f() {\n    Fred *fred = NULL;\n    fred->do_something();\n}"
Line 1182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1182 always 1182
  "[test.cpp:3]: (error) Null pointer dereference: fred\n" always "[test.cpp:3]: (error) Null pointer dereference: fred\n"
Line 1186
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1186 always 1186
  "void f() {\n    int *p = NULL;\n    if (x)\n        p = q;\n    if (p && *p) { }\n}" always "void f() {\n    int *p = NULL;\n    if (x)\n        p = q;\n    if (p && *p) { }\n}"
  true always 1
Line 1192
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1192 always 1192
  "" always ""
Line 1193
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1193 always 1193
  "void f() {\n    int *p = NULL;\n    if (x)\n        p = q;\n    if (!p || *p) { }\n}" always "void f() {\n    int *p = NULL;\n    if (x)\n        p = q;\n    if (!p || *p) { }\n}"
  true always 1
Line 1199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1199 always 1199
  "" always ""
Line 1200
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1200 always 1200
  "void f() {\n    int *p = NULL;\n    if (x)\n        p = q;\n    if (p || *p) { }\n}" always "void f() {\n    int *p = NULL;\n    if (x)\n        p = q;\n    if (p || *p) { }\n}"
Line 1206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1206 always 1206
  "[test.cpp:5]: (warning) Possible null pointer dereference: p\n" always "[test.cpp:5]: (warning) Possible null pointer dereference: p\n"
Line 1211
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1211 always 1211
  "void f(int *p, int *q) {\n    if (p == NULL)\n        return;\n    else if (q == NULL)\n        return;\n    *q = 0;\n}\n\nvoid g() {\n    f(NULL, NULL);\n}" always "void f(int *p, int *q) {\n    if (p == NULL)\n        return;\n    else if (q == NULL)\n        return;\n    *q = 0;\n}\n\nvoid g() {\n    f(NULL, NULL);\n}"
  true always 1
Line 1222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1222 always 1222
  "" always ""
Line 1225
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1225 always 1225
  "void f() {\n    int* const crash = 0;\n    *crash = 0;\n}\n" always "void f() {\n    int* const crash = 0;\n    *crash = 0;\n}\n"
Line 1229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1229 always 1229
  "[test.cpp:3]: (error) Null pointer dereference: crash\n" always "[test.cpp:3]: (error) Null pointer dereference: crash\n"
Line 1235
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1235 always 1235
  "void foo() {\n    int n;\n    int *argv32 = p;\n    if (x) {\n        n = 0;\n        argv32 = 0;\n    }\n\n    for (int i = 0; i < n; i++) {\n        argv32[i] = 0;\n    }\n}" always "void foo() {\n    int n;\n    int *argv32 = p;\n    if (x) {\n        n = 0;\n        argv32 = 0;\n    }\n\n    for (int i = 0; i < n; i++) {\n        argv32[i] = 0;\n    }\n}"
Line 1247
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1247 always 1247
  "" always ""
Line 1250
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1250 always 1250
  "void foo() {\n    int n;\n    int *argv32;\n    if (x) {\n        n = 10;\n        argv32 = 0;\n    }\n\n    for (int i = 0; i < n; i++) {\n        argv32[i] = 0;\n    }\n}" always "void foo() {\n    int n;\n    int *argv32;\n    if (x) {\n        n = 10;\n        argv32 = 0;\n    }\n\n    for (int i = 0; i < n; i++) {\n        argv32[i] = 0;\n    }\n}"
Line 1262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1262 always 1262
  "[test.cpp:10]: (warning) Possible null pointer dereference: argv32\n" always "[test.cpp:10]: (warning) Possible null pointer dereference: argv32\n"
Line 1266
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1266 always 1266
  "void f() {\n    char *p = 0;\n\n    for (int x = 0; x < 3; ++x) {\n        if (y[x] == 0) {\n            p = (char *)malloc(10);\n            break;\n        }\n    }\n\n    *p = 0;\n}" always "void f() {\n    char *p = 0;\n\n    for (int x = 0; x < 3; ++x) {\n        if (y[x] == 0) {\n            p = (char *)malloc(10);\n            break;\n        }\n    }\n\n    *p = 0;\n}"
Line 1278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1278 always 1278
  "[test.cpp:11]: (warning) Possible null pointer dereference: p\n" always "[test.cpp:11]: (warning) Possible null pointer dereference: p\n"
Line 1282
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1282 always 1282
  "void foo()\n{\n  wxLongLong x = 0;\n  int y = x.GetValue();\n}" always "void foo()\n{\n  wxLongLong x = 0;\n  int y = x.GetValue();\n}"
  true always 1
Line 1287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1287 always 1287
  "" always ""
Line 1291
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1291 always 1291
  "void foo()\n{\n  std::string * x = 0;\n  *x = \"test\";\n}" always "void foo()\n{\n  std::string * x = 0;\n  *x = \"test\";\n}"
Line 1296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1296 always 1296
  "[test.cpp:4]: (error) Null pointer dereference: x\n" always "[test.cpp:4]: (error) Null pointer dereference: x\n"
Line 1301
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1301 always 1301
  "void foo()\n{\n  struct my_type* p = 0;\n  p->x = 0;\n}" always "void foo()\n{\n  struct my_type* p = 0;\n  p->x = 0;\n}"
Line 1306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1306 always 1306
  "[test.cpp:4]: (error) Null pointer dereference: p\n" always "[test.cpp:4]: (error) Null pointer dereference: p\n"
Line 1312
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1312 always 1312
  "int foo()\n{\n  struct my_type* p;\n  p = 0;\n  return p->x;\n}" always "int foo()\n{\n  struct my_type* p;\n  p = 0;\n  return p->x;\n}"
Line 1318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1318 always 1318
  "[test.cpp:5]: (error) Null pointer dereference: p\n" always "[test.cpp:5]: (error) Null pointer dereference: p\n"
Line 1322
  48 always 48
  = always "int foo()\n{\n  int* i = nullptr;\n  return *i;\n}\n"
  "int foo()\n{\n  int* i = nullptr;\n  return *i;\n}\n" always "int foo()\n{\n  int* i = nullptr;\n  return *i;\n}\n"
Line 1328
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1328 always 1328
  code always "int foo()\n{\n  int* i = nullptr;\n  return *i;\n}\n"
  false always 0
  "test.cpp" always "test.cpp"
Line 1329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1329 always 1329
  "[test.cpp:4]: (error) Null pointer dereference: i\n" always "[test.cpp:4]: (error) Null pointer dereference: i\n"
Line 1331
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1331 always 1331
  code always "int foo()\n{\n  int* i = nullptr;\n  return *i;\n}\n"
  false always 0
  "test.c" always "test.c"
Line 1332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1332 always 1332
  "" always ""
Line 1336
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1336 always 1336
  "void f() {\n    char *p = 0;\n    if (x) p = \"abcd\";\n    return p ? f(*p) : f(0);\n}" always "void f() {\n    char *p = 0;\n    if (x) p = \"abcd\";\n    return p ? f(*p) : f(0);\n}"
Line 1341
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1341 always 1341
  "" always ""
Line 1345
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1345 always 1345
  "void foo() {\n    int *p = 0;\n    bar(&p);\n    *p = 0;\n}" always "void foo() {\n    int *p = 0;\n    bar(&p);\n    *p = 0;\n}"
  true always 1
Line 1350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1350 always 1350
  "" always ""
Line 1354
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1354 always 1354
  "int foo() {\n    int *p = 0;\n    if (x) { return 0; }\n    return !p || *p;\n}" always "int foo() {\n    int *p = 0;\n    if (x) { return 0; }\n    return !p || *p;\n}"
  true always 1
Line 1359
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1359 always 1359
  "" always ""
Line 1361
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1361 always 1361
  "int foo() {\n    int *p = 0;\n    if (x) { return 0; }\n    return p && *p;\n}" always "int foo() {\n    int *p = 0;\n    if (x) { return 0; }\n    return p && *p;\n}"
  true always 1
Line 1366
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1366 always 1366
  "" always ""
Line 1370
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1370 always 1370
  "void f ()\n{\n  int i=0;\n  char *str=NULL;\n  while (str[i])\n  {\n    i++;\n  };\n}" always "void f ()\n{\n  int i=0;\n  char *str=NULL;\n  while (str[i])\n  {\n    i++;\n  };\n}"
Line 1379
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1379 always 1379
  "[test.cpp:5]: (error) Null pointer dereference: str\n" always "[test.cpp:5]: (error) Null pointer dereference: str\n"
Line 1383
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1383 always 1383
  "int foo() {\n    perror(0);\n}" always "int foo() {\n    perror(0);\n}"
  true always 1
Line 1386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1386 always 1386
  "" always ""
Line 1390
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1390 always 1390
  "void f(int x) {\n    struct xy *p = 0;\n    if (x) p = q;\n    if (p ? p->x || p->y : 0) { }\n}" always "void f(int x) {\n    struct xy *p = 0;\n    if (x) p = q;\n    if (p ? p->x || p->y : 0) { }\n}"
Line 1395
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1395 always 1395
  "" always ""
Line 1397
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1397 always 1397
  "void f(int x) {\n    struct xy *p = 0;\n    if (x) p = q;\n    if (y ? p->x : p->y) { }\n}" always "void f(int x) {\n    struct xy *p = 0;\n    if (x) p = q;\n    if (y ? p->x : p->y) { }\n}"
Line 1402
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1402 always 1402
  "[test.cpp:4]: (warning) Possible null pointer dereference: p\n" always "[test.cpp:4]: (warning) Possible null pointer dereference: p\n"
  "" always ""
Line 1406
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1406 always 1406
  "void f(int x) {\n    int *p = 0;\n    if (x) p = q;\n    else return;\n    *p = 0;\n}" always "void f(int x) {\n    int *p = 0;\n    if (x) p = q;\n    else return;\n    *p = 0;\n}"
Line 1412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1412 always 1412
  "" always ""
Line 1416
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1416 always 1416
  "void f(){\n    char *c = NULL;\n    char cBuf[10];\n    sprintf(cBuf, \"%s\", c ? c : \"0\" );\n}" always "void f(){\n    char *c = NULL;\n    char cBuf[10];\n    sprintf(cBuf, \"%s\", c ? c : \"0\" );\n}"
Line 1421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1421 always 1421
  "" always ""
Line 1425
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1425 always 1425
  "void f(){\n    char *c = NULL;\n    x = c = new char[10];\n    *c = 0;\n}" always "void f(){\n    char *c = NULL;\n    x = c = new char[10];\n    *c = 0;\n}"
Line 1430
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1430 always 1430
  "" always ""
Line 1434
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1434 always 1434
  "void f(int *data, int i)\n{\n    int *array = NULL;\n    if (data == 1 && array[i] == 0)\n        std::cout << \"test\";\n}" always "void f(int *data, int i)\n{\n    int *array = NULL;\n    if (data == 1 && array[i] == 0)\n        std::cout << \"test\";\n}"
Line 1440
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1440 always 1440
  "[test.cpp:4]: (error) Null pointer dereference: array\n" always "[test.cpp:4]: (error) Null pointer dereference: array\n"
Line 1444
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1444 always 1444
  "double foo() {\n    sk *t1 = foo();\n    sk *t2 = foo();\n    if ((!t1) && (!t2))\n        return 0.0;\n    if (t1 && (!t2))\n        return t1->Inter();\n    if (t2->GetT() == t)\n        return t2->Inter();\n    if (t2 && (!t1))\n        return 0.0;\n    return 0;\n}" always "double foo() {\n    sk *t1 = foo();\n    sk *t2 = foo();\n    if ((!t1) && (!t2))\n        return 0.0;\n    if (t1 && (!t2))\n        return t1->Inter();\n    if (t2->GetT() == t)\n        return t2->Inter();\n    if (t2 && (!t1))\n        return 0.0;\n    return 0;\n}"
Line 1457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1457 always 1457
  "" always ""
Line 1461
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1461 always 1461
  "template<class Type>\nclass Foo {\n    Foo<Type>& operator = ( Type* );\n};\ntemplate<class Type>\nFoo<Type>& Foo<Type>::operator = ( Type* pointer_ ) {\n    pointer_=NULL;\n    *pointer_=0;\n    return *this;\n}" always "template<class Type>\nclass Foo {\n    Foo<Type>& operator = ( Type* );\n};\ntemplate<class Type>\nFoo<Type>& Foo<Type>::operator = ( Type* pointer_ ) {\n    pointer_=NULL;\n    *pointer_=0;\n    return *this;\n}"
Line 1471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1471 always 1471
  "[test.cpp:8]: (error) Null pointer dereference: pointer_\n" always "[test.cpp:8]: (error) Null pointer dereference: pointer_\n"
Line 1475
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1475 always 1475
  "typedef struct { int value; } S;\nint f(const S *s) {\n  int i = s ? s->value + 1\n            : s->value - 1; // <-- null ptr dereference\n  return i;\n}" always "typedef struct { int value; } S;\nint f(const S *s) {\n  int i = s ? s->value + 1\n            : s->value - 1; // <-- null ptr dereference\n  return i;\n}"
Line 1481
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1481 always 1481
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 's' is redundant or there is possible null pointer dereference: s.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 's' is redundant or there is possible null pointer dereference: s.\n"
Line 1487
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1487 always 1487
  "void f(std::vector<std::string> *values)\n{\n  values->clear();\n  if (values)\n  {\n    for (int i = 0; i < values->size(); ++i)\n    {\n      values->push_back(\"test\");\n    }\n  }\n}\n" always "void f(std::vector<std::string> *values)\n{\n  values->clear();\n  if (values)\n  {\n    for (int i = 0; i < values->size(); ++i)\n    {\n      values->push_back(\"test\");\n    }\n  }\n}\n"
  true always 1
Line 1498
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1498 always 1498
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'values' is redundant or there is possible null pointer dereference: values.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'values' is redundant or there is possible null pointer dereference: values.\n"
Line 1504
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1504 always 1504
  "struct F\n{\n    int x;\n};\n\nstatic void foo(F* f)\n{\n    if( f ) {}\n    else { return; }\n    (void)f->x;\n}\n" always "struct F\n{\n    int x;\n};\n\nstatic void foo(F* f)\n{\n    if( f ) {}\n    else { return; }\n    (void)f->x;\n}\n"
  true always 1
Line 1515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1515 always 1515
  "" always ""
Line 1517
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1517 always 1517
  "typedef struct\n{\n    int x;\n} F;\n\nstatic void foo(F* f)\n{\n    if( !f || f->x == 0 )\n    {\n        if( !f )\n            return;\n    }\n\n    (void)f->x;\n}" always "typedef struct\n{\n    int x;\n} F;\n\nstatic void foo(F* f)\n{\n    if( !f || f->x == 0 )\n    {\n        if( !f )\n            return;\n    }\n\n    (void)f->x;\n}"
  true always 1
Line 1532
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1532 always 1532
  "" always ""
Line 1536
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1536 always 1536
  "int f(int * ptr) {\n  if(ptr)\n  { return 0;}\n  else{\n    int *p1 = ptr;\n    return *p1;\n  }\n}\n" always "int f(int * ptr) {\n  if(ptr)\n  { return 0;}\n  else{\n    int *p1 = ptr;\n    return *p1;\n  }\n}\n"
  true always 1
Line 1544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1544 always 1544
  "[test.cpp:2] -> [test.cpp:6]: (warning) Either the condition 'ptr' is redundant or there is possible null pointer dereference: p1.\n" always "[test.cpp:2] -> [test.cpp:6]: (warning) Either the condition 'ptr' is redundant or there is possible null pointer dereference: p1.\n"
Line 1548
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1548 always 1548
  "void f(int * x) {\n    if (x != nullptr)\n        *x = 2;\n    else\n        *x = 3;\n}\n" always "void f(int * x) {\n    if (x != nullptr)\n        *x = 2;\n    else\n        *x = 3;\n}\n"
  true always 1
Line 1554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1554 always 1554
  "[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'x!=nullptr' is redundant or there is possible null pointer dereference: x.\n" always "[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'x!=nullptr' is redundant or there is possible null pointer dereference: x.\n"
Line 1558
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1558 always 1558
  "void g() {\n    throw ;\n}\nbool f(int * x) {\n    if (x) *x += 1;\n    if (!x) g();\n    return *x;\n}\n" always "void g() {\n    throw ;\n}\nbool f(int * x) {\n    if (x) *x += 1;\n    if (!x) g();\n    return *x;\n}\n"
  true always 1
Line 1566
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1566 always 1566
  "" always ""
Line 1570
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1570 always 1570
  "bool f(int*);\nvoid g(int* x) {\n    if (f(x)) {\n        *x = 1;\n    }\n}\nvoid h() {\n    g(0);\n}\n" always "bool f(int*);\nvoid g(int* x) {\n    if (f(x)) {\n        *x = 1;\n    }\n}\nvoid h() {\n    g(0);\n}\n"
  true always 1
Line 1579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1579 always 1579
  "" always ""
Line 1581
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1581 always 1581
  "bool f(int*);\nvoid g(int* x) {\n    bool b = f(x);\n    if (b) {\n        *x = 1;\n    }\n}\nvoid h() {\n    g(0);\n}\n" always "bool f(int*);\nvoid g(int* x) {\n    bool b = f(x);\n    if (b) {\n        *x = 1;\n    }\n}\nvoid h() {\n    g(0);\n}\n"
  true always 1
Line 1592
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1592 always 1592
  "" always ""
Line 1596
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1596 always 1596
  "char* f(char* s) {\n    char* start = s;\n    if (!s)\n        return (s);\n    while (isspace(*start))\n        start++;\n    return (start);\n}\n" always "char* f(char* s) {\n    char* start = s;\n    if (!s)\n        return (s);\n    while (isspace(*start))\n        start++;\n    return (start);\n}\n"
  true always 1
Line 1604
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1604 always 1604
  "" always ""
Line 1608
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1608 always 1608
  "void f(int value, char *string) {\n    char *ptr1 = NULL, *ptr2 = NULL;\n    unsigned long count = 0;\n    if(!string)\n        return;\n    ptr1 = string;\n    ptr2 = strrchr(string, 'a');\n    if(ptr2 == NULL)\n        return;\n    while(ptr1 < ptr2) {\n        count++;\n        ptr1++;\n    }\n}\n" always "void f(int value, char *string) {\n    char *ptr1 = NULL, *ptr2 = NULL;\n    unsigned long count = 0;\n    if(!string)\n        return;\n    ptr1 = string;\n    ptr2 = strrchr(string, 'a');\n    if(ptr2 == NULL)\n        return;\n    while(ptr1 < ptr2) {\n        count++;\n        ptr1++;\n    }\n}\n"
  true always 1
Line 1623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1623 always 1623
  "" always ""
Line 1627
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1627 always 1627
  "void f(int * x) {\n    std::vector<int*> v;\n    if (x) {\n        v.push_back(x);\n        *x;\n    }\n}\n" always "void f(int * x) {\n    std::vector<int*> v;\n    if (x) {\n        v.push_back(x);\n        *x;\n    }\n}\n"
  true always 1
Line 1635
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1635 always 1635
  "" always ""
Line 1639
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1639 always 1639
  "struct A { int * x; };\nvoid f(struct A *a) {\n    if (a->x == NULL) {}\n    *(a->x);\n}" always "struct A { int * x; };\nvoid f(struct A *a) {\n    if (a->x == NULL) {}\n    *(a->x);\n}"
Line 1644
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1644 always 1644
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->x==NULL' is redundant or there is possible null pointer dereference: a->x.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->x==NULL' is redundant or there is possible null pointer dereference: a->x.\n"
Line 1650
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1650 always 1650
  "struct A { std::unique_ptr<int> x; };\nvoid f(struct A *a) {\n    if (a->x == nullptr) {}\n    *(a->x);\n}" always "struct A { std::unique_ptr<int> x; };\nvoid f(struct A *a) {\n    if (a->x == nullptr) {}\n    *(a->x);\n}"
Line 1655
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1655 always 1655
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->x==nullptr' is redundant or there is possible null pointer dereference: a->x.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->x==nullptr' is redundant or there is possible null pointer dereference: a->x.\n"
Line 1661
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1661 always 1661
  "struct A { int * g() const; };\nvoid f(struct A *a) {\n    if (a->g() == nullptr) {}\n    *(a->g());\n}" always "struct A { int * g() const; };\nvoid f(struct A *a) {\n    if (a->g() == nullptr) {}\n    *(a->g());\n}"
Line 1666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1666 always 1666
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->g()==nullptr' is redundant or there is possible null pointer dereference: a->g().\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->g()==nullptr' is redundant or there is possible null pointer dereference: a->g().\n"
Line 1670
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1670 always 1670
  "struct A { int * g(); };\nvoid f(struct A *a) {\n    if (a->g() == nullptr) {}\n    *(a->g());\n}" always "struct A { int * g(); };\nvoid f(struct A *a) {\n    if (a->g() == nullptr) {}\n    *(a->g());\n}"
Line 1675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1675 always 1675
  "" always ""
Line 1679
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1679 always 1679
  "struct A { std::unique_ptr<int> g() const; };\nvoid f(struct A *a) {\n    if (a->g() == nullptr) {}\n    *(a->g());\n}" always "struct A { std::unique_ptr<int> g() const; };\nvoid f(struct A *a) {\n    if (a->g() == nullptr) {}\n    *(a->g());\n}"
Line 1684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1684 always 1684
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->g()==nullptr' is redundant or there is possible null pointer dereference: a->g().\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'a->g()==nullptr' is redundant or there is possible null pointer dereference: a->g().\n"
Line 1690
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1690 always 1690
  "struct A { int* x; };\nvoid f(A* a) {\n    int * x = a->x;\n    if (x) {\n        (void)*a->x;\n    }\n}" always "struct A { int* x; };\nvoid f(A* a) {\n    int * x = a->x;\n    if (x) {\n        (void)*a->x;\n    }\n}"
Line 1697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1697 always 1697
  "" always ""
Line 1702
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1702 always 1702
  "int foo( ) {\n    const B* b = getB();\n    const double w = ( nullptr != b) ? 42. : 0.0;\n    if ( w == 0.0 )\n        return 0;\n    return b->get();\n}" always "int foo( ) {\n    const B* b = getB();\n    const double w = ( nullptr != b) ? 42. : 0.0;\n    if ( w == 0.0 )\n        return 0;\n    return b->get();\n}"
Line 1709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1709 always 1709
  "" always ""
Line 1711
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1711 always 1711
  "extern F* GetF();\nextern L* GetL();\nvoid Foo() {\n    const F* const fPtr = GetF();\n    const bool fPtrOk = fPtr != NULL;\n    assert(fPtrOk);\n    if (!fPtrOk)\n        return;\n    L* const lPtr = fPtr->l;\n    const bool lPtrOk = lPtr != NULL;\n    assert(lPtrOk);\n    if (!lPtrOk)\n        return;\n    lPtr->Clear();\n}" always "extern F* GetF();\nextern L* GetL();\nvoid Foo() {\n    const F* const fPtr = GetF();\n    const bool fPtrOk = fPtr != NULL;\n    assert(fPtrOk);\n    if (!fPtrOk)\n        return;\n    L* const lPtr = fPtr->l;\n    const bool lPtrOk = lPtr != NULL;\n    assert(lPtrOk);\n    if (!lPtrOk)\n        return;\n    lPtr->Clear();\n}"
Line 1726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1726 always 1726
  "" always ""
Line 1730
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1730 always 1730
  "struct a {\n  a *b() const;\n};\nvoid g() { throw 0; }\na h(a * c) {\n  if (c && c->b()) {}\n  if (!c)\n    g();\n  if (!c->b())\n    g();\n  a d = *c->b();\n  return d;\n}" always "struct a {\n  a *b() const;\n};\nvoid g() { throw 0; }\na h(a * c) {\n  if (c && c->b()) {}\n  if (!c)\n    g();\n  if (!c->b())\n    g();\n  a d = *c->b();\n  return d;\n}"
Line 1743
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1743 always 1743
  "" always ""
Line 1745
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1745 always 1745
  "struct a {\n  a *b() const;\n};\nvoid e() { throw 0; }\na f() {\n  a *c = 0;\n  if (0 && c->b()) {}\n  if (!c)\n    e();\n  if (!c->b())\n    e();\n  a d = *c->b();\n  return d;\n}" always "struct a {\n  a *b() const;\n};\nvoid e() { throw 0; }\na f() {\n  a *c = 0;\n  if (0 && c->b()) {}\n  if (!c)\n    e();\n  if (!c->b())\n    e();\n  a d = *c->b();\n  return d;\n}"
Line 1759
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1759 always 1759
  "" always ""
Line 1763
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1763 always 1763
  "void f() {\n    char* p = new(std::nothrow) char[1];\n    if( p ) {}\n}" always "void f() {\n    char* p = new(std::nothrow) char[1];\n    if( p ) {}\n}"
Line 1767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1767 always 1767
  "" always ""
Line 1771
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1771 always 1771
  "void f(int *p) {\n   if(!p[0]) {}\n   const int *const a = p;\n   if(!a){}\n}" always "void f(int *p) {\n   if(!p[0]) {}\n   const int *const a = p;\n   if(!a){}\n}"
Line 1776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1776 always 1776
  "[test.cpp:4] -> [test.cpp:2]: (warning) Either the condition '!a' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:4] -> [test.cpp:2]: (warning) Either the condition '!a' is redundant or there is possible null pointer dereference: p.\n"
Line 1780
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1780 always 1780
  "template<class T>\nauto f(T& x) -> decltype(x);\nint& g(int* x) {\n    return f(*x);\n}" always "template<class T>\nauto f(T& x) -> decltype(x);\nint& g(int* x) {\n    return f(*x);\n}"
Line 1785
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1785 always 1785
  "" always ""
Line 1789
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1789 always 1789
  "void f(int *p, int n) {\n    int *q = 0;\n    if(n > 10) q = p;\n    *p +=2;\n    if(n < 120) *q+=12;\n}" always "void f(int *p, int n) {\n    int *q = 0;\n    if(n > 10) q = p;\n    *p +=2;\n    if(n < 120) *q+=12;\n}"
Line 1795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1795 always 1795
  "[test.cpp:5]: (warning) Possible null pointer dereference: q\n" always "[test.cpp:5]: (warning) Possible null pointer dereference: q\n"
Line 1797
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1797 always 1797
  "void f(int *p, int n) {\n    int *q = 0;\n    if(n > 10) q = p;\n    *p +=2;\n    if(n > 10) *q+=12;\n}" always "void f(int *p, int n) {\n    int *q = 0;\n    if(n > 10) q = p;\n    *p +=2;\n    if(n > 10) *q+=12;\n}"
Line 1803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1803 always 1803
  "" always ""
Line 1807
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1807 always 1807
  "void f(int *p, int a) {\n    if(!p) {\n        if(a > 0) {\n            if(a > 10){}\n            else {\n                *p = 0;\n            }\n        }\n    }\n}" always "void f(int *p, int a) {\n    if(!p) {\n        if(a > 0) {\n            if(a > 10){}\n            else {\n                *p = 0;\n            }\n        }\n    }\n}"
Line 1817
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1817 always 1817
  "[test.cpp:2] -> [test.cpp:6]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:6]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 1823
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1823 always 1823
  "struct a {\n  a *b();\n};\nbool c(a *, const char *);\na *d(a *e) {\n  if (e) {}\n  if (c(e, \"\"))\n    return nullptr;\n  return e->b();\n}" always "struct a {\n  a *b();\n};\nbool c(a *, const char *);\na *d(a *e) {\n  if (e) {}\n  if (c(e, \"\"))\n    return nullptr;\n  return e->b();\n}"
Line 1833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1833 always 1833
  "" always ""
Line 1837
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1837 always 1837
  "int f(int a, int* b) {\n    int* c = nullptr;\n    if(b) c = b;\n    if (!c) c = &a;\n    return *c;\n}" always "int f(int a, int* b) {\n    int* c = nullptr;\n    if(b) c = b;\n    if (!c) c = &a;\n    return *c;\n}"
Line 1843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1843 always 1843
  "" always ""
Line 1845
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1845 always 1845
  "int f(int a, int* b) {\n    int* c = nullptr;\n    if(b) c = b;\n    bool d = !c;\n    if (d) c = &a;\n    return *c;\n}" always "int f(int a, int* b) {\n    int* c = nullptr;\n    if(b) c = b;\n    bool d = !c;\n    if (d) c = &a;\n    return *c;\n}"
Line 1852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1852 always 1852
  "" always ""
Line 1854
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1854 always 1854
  "struct A { int* x; };\nint f(int a, int* b) {\n    A c;\n    c.x = nullptr;\n    if(b) c.x = b;\n    if (!c.x) c.x = &a;\n    return *c.x;\n}" always "struct A { int* x; };\nint f(int a, int* b) {\n    A c;\n    c.x = nullptr;\n    if(b) c.x = b;\n    if (!c.x) c.x = &a;\n    return *c.x;\n}"
Line 1862
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1862 always 1862
  "" always ""
Line 1864
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1864 always 1864
  "struct A { int* x; };\nint f(int a, int* b) {\n    A c;\n    c.x = nullptr;\n    if(b) c.x = b;\n    bool d = !c.x;\n    if (d) c.x = &a;\n    return *c.x;\n}" always "struct A { int* x; };\nint f(int a, int* b) {\n    A c;\n    c.x = nullptr;\n    if(b) c.x = b;\n    bool d = !c.x;\n    if (d) c.x = &a;\n    return *c.x;\n}"
Line 1873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1873 always 1873
  "" always ""
Line 1875
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1875 always 1875
  "struct A { int* x; };\nint f(int a, int* b) {\n    A c;\n    c.x = nullptr;\n    if(b) c.x = b;\n    bool d = !c.x;\n    if (!d) c.x = &a;\n    return *c.x;\n}\n" always "struct A { int* x; };\nint f(int a, int* b) {\n    A c;\n    c.x = nullptr;\n    if(b) c.x = b;\n    bool d = !c.x;\n    if (!d) c.x = &a;\n    return *c.x;\n}\n"
Line 1884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1884 always 1884
  "[test.cpp:8]: (warning) Possible null pointer dereference: c.x\n" always "[test.cpp:8]: (warning) Possible null pointer dereference: c.x\n"
Line 1888
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1888 always 1888
  "void f(int nParams, int* params) {\n  for (int n=1; n<nParams+10; ++n) {\n    params[n]=42;\n  }\n}\nvoid bar() {\n  f(0, 0);\n}" always "void f(int nParams, int* params) {\n  for (int n=1; n<nParams+10; ++n) {\n    params[n]=42;\n  }\n}\nvoid bar() {\n  f(0, 0);\n}"
Line 1896
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1896 always 1896
  "[test.cpp:3]: (warning) Possible null pointer dereference: params\n" always "[test.cpp:3]: (warning) Possible null pointer dereference: params\n"
Line 1900
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1900 always 1900
  "int foo (int **array, size_t n_array) {\n    size_t i;\n    for (i = 0; i < n_array; ++i) {\n        if (*array[i] == 1)\n            return 1;\n    }\n    return 0;\n}\nint bar() {\n    int **array = NULL;\n    foo (array, 0);\n}" always "int foo (int **array, size_t n_array) {\n    size_t i;\n    for (i = 0; i < n_array; ++i) {\n        if (*array[i] == 1)\n            return 1;\n    }\n    return 0;\n}\nint bar() {\n    int **array = NULL;\n    foo (array, 0);\n}"
Line 1912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1912 always 1912
  "" always ""
Line 1916
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1916 always 1916
  "void f(const Token* tok) {\n    const Token* tok3 = tok;\n    while (tok3->astParent() && tok3->str() == \",\")\n        tok3 = tok3->astParent();\n    if (tok3 && tok3->str() == \"(\") {}\n}" always "void f(const Token* tok) {\n    const Token* tok3 = tok;\n    while (tok3->astParent() && tok3->str() == \",\")\n        tok3 = tok3->astParent();\n    if (tok3 && tok3->str() == \"(\") {}\n}"
Line 1922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1922 always 1922
  "[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition 'tok3' is redundant or there is possible null pointer dereference: tok3.\n" always "[test.cpp:5] -> [test.cpp:3]: (warning) Either the condition 'tok3' is redundant or there is possible null pointer dereference: tok3.\n"
Line 1926
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1926 always 1926
  "void f(int* t1, int* t2) {\n    while (t1 && t2 &&\n       *t1 == *t2) {\n        t1 = nullptr;\n        t2 = nullptr;\n    }\n    if (!t1 || !t2)\n        return;\n}" always "void f(int* t1, int* t2) {\n    while (t1 && t2 &&\n       *t1 == *t2) {\n        t1 = nullptr;\n        t2 = nullptr;\n    }\n    if (!t1 || !t2)\n        return;\n}"
Line 1935
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1935 always 1935
  "" always ""
Line 1937
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1937 always 1937
  "bool f(int* i);\nvoid g(int* i) {\n    while(f(i) && *i == 0)\n        i++;\n    if (!i) {}\n}" always "bool f(int* i);\nvoid g(int* i) {\n    while(f(i) && *i == 0)\n        i++;\n    if (!i) {}\n}"
Line 1943
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1943 always 1943
  "" always ""
Line 1947
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1947 always 1947
  "struct ListEntry {\n    struct ListEntry *next;\n};\nstatic void dostuff(ListEntry * listHead) {\n    ListEntry *prev = NULL;\n    for (ListEntry *cursor = listHead; cursor != NULL; prev = cursor, cursor = cursor->next) {}\n    if (prev) {}\n}" always "struct ListEntry {\n    struct ListEntry *next;\n};\nstatic void dostuff(ListEntry * listHead) {\n    ListEntry *prev = NULL;\n    for (ListEntry *cursor = listHead; cursor != NULL; prev = cursor, cursor = cursor->next) {}\n    if (prev) {}\n}"
Line 1955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1955 always 1955
  "" always ""
Line 1959
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1959 always 1959
  "void f() {\n    FILE* fptr = fopen(\"test\", \"r\");\n    if (fptr != nullptr) {\n        std::function<void()> fn([&] {\n            fclose(fptr);\n            fptr = NULL;\n        });\n        fgetc(fptr);\n        fn();\n    }\n}\n" always "void f() {\n    FILE* fptr = fopen(\"test\", \"r\");\n    if (fptr != nullptr) {\n        std::function<void()> fn([&] {\n            fclose(fptr);\n            fptr = NULL;\n        });\n        fgetc(fptr);\n        fn();\n    }\n}\n"
Line 1970
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1970 always 1970
  "" always ""
Line 1974
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1974 always 1974
  "struct myStruct { char entry[0]; };\nvoid f() {\n    struct myStruct* sPtr = NULL;\n    int sz = (!*(&sPtr) || ((*(&sPtr))->entry[0] > 15)) ?\n        sizeof((*(&sPtr))->entry[0]) : 123456789;\n}\n" always "struct myStruct { char entry[0]; };\nvoid f() {\n    struct myStruct* sPtr = NULL;\n    int sz = (!*(&sPtr) || ((*(&sPtr))->entry[0] > 15)) ?\n        sizeof((*(&sPtr))->entry[0]) : 123456789;\n}\n"
Line 1980
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1980 always 1980
  "" always ""
Line 1984
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1984 always 1984
  "struct Box {\n    struct Box* prev;\n    struct Box* next;\n};\nvoid foo(Box** pfreeboxes) {\n    Box *b = *pfreeboxes;\n    *pfreeboxes = b->next;\n    if( *pfreeboxes )\n        (*pfreeboxes)->prev = nullptr;\n    b->next = nullptr;\n}\n" always "struct Box {\n    struct Box* prev;\n    struct Box* next;\n};\nvoid foo(Box** pfreeboxes) {\n    Box *b = *pfreeboxes;\n    *pfreeboxes = b->next;\n    if( *pfreeboxes )\n        (*pfreeboxes)->prev = nullptr;\n    b->next = nullptr;\n}\n"
Line 1995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1995 always 1995
  "" always ""
Line 1999
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  1999 always 1999
  "void f(){\n    char uuid[128];\n    char *s1;\n    memset(uuid, 0, sizeof(uuid));\n    s1 = strchr(uuid, '=');\n    s1 = s1 ? s1 + 1 : &uuid[5];\n    if (!strcmp(\"00000000000000000000000000000000\", s1) )\n        return;\n}\n" always "void f(){\n    char uuid[128];\n    char *s1;\n    memset(uuid, 0, sizeof(uuid));\n    s1 = strchr(uuid, '=');\n    s1 = s1 ? s1 + 1 : &uuid[5];\n    if (!strcmp(\"00000000000000000000000000000000\", s1) )\n        return;\n}\n"
Line 2008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2008 always 2008
  "" always ""
Line 2012
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2012 always 2012
  "struct a {\n  int *e;\n};\nstruct f {\n  a *g() const;\n};\nvoid h() {\n  for (f b;;) {\n    a *c = b.g();\n    int *d = c->e;\n    if (d)\n      ;\n  }\n}\n" always "struct a {\n  int *e;\n};\nstruct f {\n  a *g() const;\n};\nvoid h() {\n  for (f b;;) {\n    a *c = b.g();\n    int *d = c->e;\n    if (d)\n      ;\n  }\n}\n"
Line 2026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2026 always 2026
  "" always ""
Line 2028
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2028 always 2028
  "struct A {\n  A* g() const;\n  A* h() const;\n};\nvoid f(A* a) {\n  if (!a->h())\n    return;\n  const A *b = a;\n  while (b && !b->h())\n      b = b->g();\n  if (!b || b == b->g()->h())\n      return;\n}\n" always "struct A {\n  A* g() const;\n  A* h() const;\n};\nvoid f(A* a) {\n  if (!a->h())\n    return;\n  const A *b = a;\n  while (b && !b->h())\n      b = b->g();\n  if (!b || b == b->g()->h())\n      return;\n}\n"
Line 2041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2041 always 2041
  "" always ""
Line 2045
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2045 always 2045
  "struct A {\n  bool f()() const;\n};\nvoid a(A *x) {\n  std::string b = x && x->f() ? \"\" : \"\";\n  if (x) {}\n}\n" always "struct A {\n  bool f()() const;\n};\nvoid a(A *x) {\n  std::string b = x && x->f() ? \"\" : \"\";\n  if (x) {}\n}\n"
Line 2052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2052 always 2052
  "" always ""
Line 2054
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2054 always 2054
  "struct A {\n  bool f()() const;\n};\nvoid a(A *x) {\n  std::string b = (!x || x->f()) ? \"\" : \"\";\n  if (x) {}\n}\n" always "struct A {\n  bool f()() const;\n};\nvoid a(A *x) {\n  std::string b = (!x || x->f()) ? \"\" : \"\";\n  if (x) {}\n}\n"
Line 2061
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2061 always 2061
  "" always ""
Line 2063
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2063 always 2063
  "struct A {\n  A * aa;\n};\nvoid b(A*);\nvoid a(A *x) {\n  b(x ? x->aa : nullptr);\n  if (!x) {}\n}\n" always "struct A {\n  A * aa;\n};\nvoid b(A*);\nvoid a(A *x) {\n  b(x ? x->aa : nullptr);\n  if (!x) {}\n}\n"
Line 2071
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2071 always 2071
  "" always ""
Line 2075
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2075 always 2075
  "struct A {\n    A* a() const;\n    A* b() const;\n};\nA* f(A*);\nvoid g(const A* x) {\n    A *d = x->a();\n    d = f(d->b()) ? d->a() : nullptr;\n    if (d && f(d->b())) {}\n}\n" always "struct A {\n    A* a() const;\n    A* b() const;\n};\nA* f(A*);\nvoid g(const A* x) {\n    A *d = x->a();\n    d = f(d->b()) ? d->a() : nullptr;\n    if (d && f(d->b())) {}\n}\n"
Line 2085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2085 always 2085
  "" always ""
Line 2089
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2089 always 2089
  "struct A {\n  A* f() const;\n  int g() const;\n};\nbool a;\nbool b(A* c) {\n    if (c->g() == 0)\n      ;\n    A *aq = c;\n    if (c->g() == 0)\n      c = c->f();\n    if (c)\n      for (A *d = c; d != aq; d = d->f()) {}\n}\n" always "struct A {\n  A* f() const;\n  int g() const;\n};\nbool a;\nbool b(A* c) {\n    if (c->g() == 0)\n      ;\n    A *aq = c;\n    if (c->g() == 0)\n      c = c->f();\n    if (c)\n      for (A *d = c; d != aq; d = d->f()) {}\n}\n"
Line 2103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2103 always 2103
  "" always ""
Line 2105
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2105 always 2105
  "struct A {\n  A* g() const;\n  A* h() const;\n};\nbool i(A*);\nvoid f(A* x) {\n  if (i(x->g())) {\n    A *y = x->g();\n    x = x->g()->h();\n    if (x && x->g()) {\n        y = x->g()->h();\n    }\n    if (!y) {}\n  }\n}\n" always "struct A {\n  A* g() const;\n  A* h() const;\n};\nbool i(A*);\nvoid f(A* x) {\n  if (i(x->g())) {\n    A *y = x->g();\n    x = x->g()->h();\n    if (x && x->g()) {\n        y = x->g()->h();\n    }\n    if (!y) {}\n  }\n}\n"
Line 2120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2120 always 2120
  "" always ""
Line 2124
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2124 always 2124
  "struct A {\n    double get();\n};\ndouble x;\ndouble run(A** begin, A** end) {\n    A* a = nullptr;\n    while (begin != end) {\n        a = *begin;\n        x = a->get();\n        ++begin;\n    }\n    x = 0;\n    if (a)\n        return a->get();\n    return 0;\n}\n" always "struct A {\n    double get();\n};\ndouble x;\ndouble run(A** begin, A** end) {\n    A* a = nullptr;\n    while (begin != end) {\n        a = *begin;\n        x = a->get();\n        ++begin;\n    }\n    x = 0;\n    if (a)\n        return a->get();\n    return 0;\n}\n"
Line 2140
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2140 always 2140
  "" always ""
Line 2144
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2144 always 2144
  "int f() {\n    int ret = 0;\n    int *v = nullptr;\n    if (!MyAlloc(&v)) {\n        ret = -1;\n        goto done;\n    }\n    DoSomething(*v);\ndone:\n    if (v)\n      MyFree(&v);\n    return ret;\n}\n" always "int f() {\n    int ret = 0;\n    int *v = nullptr;\n    if (!MyAlloc(&v)) {\n        ret = -1;\n        goto done;\n    }\n    DoSomething(*v);\ndone:\n    if (v)\n      MyFree(&v);\n    return ret;\n}\n"
Line 2157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2157 always 2157
  "" always ""
Line 2161
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2161 always 2161
  "int result;\n\nint test_b(void) {\n    char **string = NULL;\n\n    /* The bug disappears if \"result =\" is omitted. */\n    result = some_other_call(&string);\n    if (string && string[0])\n        return 0;\n    return -1;\n}\n" always "int result;\n\nint test_b(void) {\n    char **string = NULL;\n\n    /* The bug disappears if \"result =\" is omitted. */\n    result = some_other_call(&string);\n    if (string && string[0])\n        return 0;\n    return -1;\n}\n"
Line 2172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2172 always 2172
  "" always ""
Line 2174
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2174 always 2174
  "int result;\n\nint test_b(void) {\n    char **string = NULL;\n\n    some_other_call(&string);\n    if (string && string[0])\n        return 0;\n    return -1;\n}\n" always "int result;\n\nint test_b(void) {\n    char **string = NULL;\n\n    some_other_call(&string);\n    if (string && string[0])\n        return 0;\n    return -1;\n}\n"
Line 2184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2184 always 2184
  "" always ""
Line 2188
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2188 always 2188
  "struct A {\n    A* b;\n};\nvoid f(A* c) {\n    c = c->b;\n    if (c->b) {}\n}\n" always "struct A {\n    A* b;\n};\nvoid f(A* c) {\n    c = c->b;\n    if (c->b) {}\n}\n"
Line 2195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2195 always 2195
  "" always ""
Line 2197
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2197 always 2197
  "struct A {\n    A* b;\n};\nvoid f(A* c) {\n    A* d = c->b;\n    A *e = c;\n    while (nullptr != (e = e->b)) {}\n}\n" always "struct A {\n    A* b;\n};\nvoid f(A* c) {\n    A* d = c->b;\n    A *e = c;\n    while (nullptr != (e = e->b)) {}\n}\n"
Line 2205
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2205 always 2205
  "" always ""
Line 2209
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2209 always 2209
  "void f(const Scope *scope) {\n    if (scope->definedType) {}\n    while (scope) {\n        scope = scope->nestedIn;\n        enumerator = scope->findEnumerator();\n    }\n}\n" always "void f(const Scope *scope) {\n    if (scope->definedType) {}\n    while (scope) {\n        scope = scope->nestedIn;\n        enumerator = scope->findEnumerator();\n    }\n}\n"
Line 2216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2216 always 2216
  "[test.cpp:3] -> [test.cpp:5]: (warning) Either the condition 'scope' is redundant or there is possible null pointer dereference: scope.\n" always "[test.cpp:3] -> [test.cpp:5]: (warning) Either the condition 'scope' is redundant or there is possible null pointer dereference: scope.\n"
Line 2220
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2220 always 2220
  "void f(const Scope *scope) {\n    if (scope->definedType) {}\n    while (scope && scope->nestedIn) {\n        if (scope->type == Scope::eFunction && scope->functionOf)\n            scope = scope->functionOf;\n        else\n            scope = scope->nestedIn;\n        enumerator = scope->findEnumerator();\n    }\n}\n" always "void f(const Scope *scope) {\n    if (scope->definedType) {}\n    while (scope && scope->nestedIn) {\n        if (scope->type == Scope::eFunction && scope->functionOf)\n            scope = scope->functionOf;\n        else\n            scope = scope->nestedIn;\n        enumerator = scope->findEnumerator();\n    }\n}\n"
Line 2230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2230 always 2230
  "[test.cpp:3] -> [test.cpp:8]: (warning) Either the condition 'scope' is redundant or there is possible null pointer dereference: scope.\n" always "[test.cpp:3] -> [test.cpp:8]: (warning) Either the condition 'scope' is redundant or there is possible null pointer dereference: scope.\n"
Line 2234
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2234 always 2234
  "struct a {\n  a *b() const;\n  void c();\n};\nvoid d() {\n  for (a *e;;) {\n    e->b()->c();\n    while (e)\n      e = e->b();\n  }\n}\n" always "struct a {\n  a *b() const;\n  void c();\n};\nvoid d() {\n  for (a *e;;) {\n    e->b()->c();\n    while (e)\n      e = e->b();\n  }\n}\n"
Line 2245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2245 always 2245
  "" always ""
Line 2249
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2249 always 2249
  "struct Token {\n    const Token* nextArgument() const;\n    const Token* next() const;\n    int varId() const;\n};\nint f(const Token *first, const Token* second) {\n    first = first->nextArgument();\n    if (first)\n        first = first->next();\n    if (second->next()->varId() == 0) {\n        second = second->nextArgument();\n        if (!first || !second)\n            return 0;\n    } else if (!first) {\n        return 0;\n    }\n    return first->varId();\n}\n" always "struct Token {\n    const Token* nextArgument() const;\n    const Token* next() const;\n    int varId() const;\n};\nint f(const Token *first, const Token* second) {\n    first = first->nextArgument();\n    if (first)\n        first = first->next();\n    if (second->next()->varId() == 0) {\n        second = second->nextArgument();\n        if (!first || !second)\n            return 0;\n    } else if (!first) {\n        return 0;\n    }\n    return first->varId();\n}\n"
Line 2267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2267 always 2267
  "" always ""
Line 2269
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2269 always 2269
  "struct Token {\n    const Token* nextArgument() const;\n    const Token* next() const;\n    int varId() const;\n    void str() const;};\nvoid f(const Token *first) {\n    first = first->nextArgument();\n    if (first)\n        first = first->next();\n    first->str();\n}\n" always "struct Token {\n    const Token* nextArgument() const;\n    const Token* next() const;\n    int varId() const;\n    void str() const;};\nvoid f(const Token *first) {\n    first = first->nextArgument();\n    if (first)\n        first = first->next();\n    first->str();\n}\n"
Line 2281
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2281 always 2281
  "[test.cpp:8] -> [test.cpp:10]: (warning) Either the condition 'first' is redundant or there is possible null pointer dereference: first.\n" always "[test.cpp:8] -> [test.cpp:10]: (warning) Either the condition 'first' is redundant or there is possible null pointer dereference: first.\n"
  "" always ""
Line 2288
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2288 always 2288
  "void f() {\n  Device* dev = Get();\n  SetCount(dev == nullptr ? 0 : dev->size());\n  if (dev)\n    DoSomething(dev);\n}\n" always "void f() {\n  Device* dev = Get();\n  SetCount(dev == nullptr ? 0 : dev->size());\n  if (dev)\n    DoSomething(dev);\n}\n"
Line 2294
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2294 always 2294
  "" always ""
Line 2296
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2296 always 2296
  "void f() {\n  Device* dev = Get();\n  SetCount(dev != nullptr ? dev->size() : 0);\n  if (dev)\n    DoSomething(dev);\n}\n" always "void f() {\n  Device* dev = Get();\n  SetCount(dev != nullptr ? dev->size() : 0);\n  if (dev)\n    DoSomething(dev);\n}\n"
Line 2302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2302 always 2302
  "" always ""
Line 2306
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2306 always 2306
  "int test() {\n  int* p0 = nullptr, *p1 = nullptr;\n  getFoo(p0);\n  getBar(p1);\n  if (!(p0 != nullptr && p1 != nullptr))\n    return {};\n  return *p0 + *p1;\n}\n" always "int test() {\n  int* p0 = nullptr, *p1 = nullptr;\n  getFoo(p0);\n  getBar(p1);\n  if (!(p0 != nullptr && p1 != nullptr))\n    return {};\n  return *p0 + *p1;\n}\n"
  true always 1
Line 2314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2314 always 2314
  "" always ""
Line 2316
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2316 always 2316
  "int test2() {\n  int* p0 = nullptr;\n  if (!(getBaz(p0) && p0 != nullptr))\n    return 0;\n  return *p0;\n}\n" always "int test2() {\n  int* p0 = nullptr;\n  if (!(getBaz(p0) && p0 != nullptr))\n    return 0;\n  return *p0;\n}\n"
  true always 1
Line 2322
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2322 always 2322
  "" always ""
Line 2324
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2324 always 2324
  "int test3() {\n  Obj* PObj = nullptr;\n  if (!(GetObj(PObj) && PObj != nullptr))\n    return 1;\n  if (!PObj->foo())\n    test();\n  PObj->bar();\n}\n" always "int test3() {\n  Obj* PObj = nullptr;\n  if (!(GetObj(PObj) && PObj != nullptr))\n    return 1;\n  if (!PObj->foo())\n    test();\n  PObj->bar();\n}\n"
  true always 1
Line 2332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2332 always 2332
  "" always ""
Line 2336
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2336 always 2336
  "void f(bool flag2, int* ptr) {\n    bool flag1 = true;\n    if (flag2) {\n        if (ptr != nullptr)\n            (*ptr)++;\n        else\n            flag1 = false;\n    }\n    if (flag1 && flag2)\n        (*ptr)++;\n}\n" always "void f(bool flag2, int* ptr) {\n    bool flag1 = true;\n    if (flag2) {\n        if (ptr != nullptr)\n            (*ptr)++;\n        else\n            flag1 = false;\n    }\n    if (flag1 && flag2)\n        (*ptr)++;\n}\n"
Line 2347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2347 always 2347
  "" always ""
Line 2349
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2349 always 2349
  "void f(bool flag2, int* ptr) {\n    bool flag1 = true;\n    if (flag2) {\n        if (ptr != nullptr)\n            (*ptr)++;\n        else\n            flag1 = false;\n    }\n    if (!flag1 && flag2)\n        (*ptr)++;\n}\n" always "void f(bool flag2, int* ptr) {\n    bool flag1 = true;\n    if (flag2) {\n        if (ptr != nullptr)\n            (*ptr)++;\n        else\n            flag1 = false;\n    }\n    if (!flag1 && flag2)\n        (*ptr)++;\n}\n"
Line 2360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2360 always 2360
  "[test.cpp:4] -> [test.cpp:10]: (warning) Either the condition 'ptr!=nullptr' is redundant or there is possible null pointer dereference: ptr.\n" always "[test.cpp:4] -> [test.cpp:10]: (warning) Either the condition 'ptr!=nullptr' is redundant or there is possible null pointer dereference: ptr.\n"
Line 2364
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2364 always 2364
  "struct d {\n  d* e();\n};\nvoid g(d* f) {\n  do {\n    f = f->e();\n    if (f) {}\n  } while (0);\n}\n" always "struct d {\n  d* e();\n};\nvoid g(d* f) {\n  do {\n    f = f->e();\n    if (f) {}\n  } while (0);\n}\n"
Line 2373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2373 always 2373
  "" always ""
Line 2375
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2375 always 2375
  "struct d {\n  d* e();\n};\nvoid g(d* f, int i) {\n  do {\n    i--;\n    f = f->e();\n    if (f) {}\n  } while (i > 0);\n}\n" always "struct d {\n  d* e();\n};\nvoid g(d* f, int i) {\n  do {\n    i--;\n    f = f->e();\n    if (f) {}\n  } while (i > 0);\n}\n"
Line 2385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2385 always 2385
  "[test.cpp:8] -> [test.cpp:7]: (warning) Either the condition 'f' is redundant or there is possible null pointer dereference: f.\n" always "[test.cpp:8] -> [test.cpp:7]: (warning) Either the condition 'f' is redundant or there is possible null pointer dereference: f.\n"
Line 2389
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2389 always 2389
  "struct d {\n  d* e();\n};\nvoid g(d* f, int i) {\n  do {\n    i--;\n    f = f->e();\n    if (f) {}\n  } while (f && i > 0);\n}\n" always "struct d {\n  d* e();\n};\nvoid g(d* f, int i) {\n  do {\n    i--;\n    f = f->e();\n    if (f) {}\n  } while (f && i > 0);\n}\n"
Line 2399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2399 always 2399
  "" always ""
Line 2403
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2403 always 2403
  "struct a {\n  a *b() const;\n  void c();\n  int d() const;\n};\nvoid e(a *x) {\n  while (x->b()->d() == 0)\n    x->c();\n  x->c();\n  if (x->b()) {}\n}\n" always "struct a {\n  a *b() const;\n  void c();\n  int d() const;\n};\nvoid e(a *x) {\n  while (x->b()->d() == 0)\n    x->c();\n  x->c();\n  if (x->b()) {}\n}\n"
Line 2414
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2414 always 2414
  "" always ""
Line 2419
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2419 always 2419
  "int* foo(int y) {\n    std::unique_ptr<int> x = std::make_unique<int>(0);\n    if( y == 0 )\n        return x.release();\n    (*x) ++;\n    return x.release();\n}\n" always "int* foo(int y) {\n    std::unique_ptr<int> x = std::make_unique<int>(0);\n    if( y == 0 )\n        return x.release();\n    (*x) ++;\n    return x.release();\n}\n"
Line 2426
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2426 always 2426
  "" always ""
Line 2431
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2431 always 2431
  "bool h(int*);\nvoid f(int* i) {\n    int* i = nullptr;\n    if (h(i) && *i == 1) {}\n}\n" always "bool h(int*);\nvoid f(int* i) {\n    int* i = nullptr;\n    if (h(i) && *i == 1) {}\n}\n"
Line 2436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2436 always 2436
  "" always ""
Line 2438
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2438 always 2438
  "bool h(int*);\nvoid f(int* i) {\n    int* i = nullptr;\n    if (h(i))\n        if (*i == 1) {}\n}\n" always "bool h(int*);\nvoid f(int* i) {\n    int* i = nullptr;\n    if (h(i))\n        if (*i == 1) {}\n}\n"
Line 2444
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2444 always 2444
  "" always ""
Line 2446
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2446 always 2446
  "bool h(int*);\nvoid f(int* x) {\n    int* i = x;\n    if (h(i))\n        i = nullptr;\n    if (h(i) && *i == 1) {}\n}\n" always "bool h(int*);\nvoid f(int* x) {\n    int* i = x;\n    if (h(i))\n        i = nullptr;\n    if (h(i) && *i == 1) {}\n}\n"
Line 2453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2453 always 2453
  "" always ""
Line 2458
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2458 always 2458
  "void f()\n{\n    int **pp;\n    int *p = 0;\n    pp = &p;\n    **pp = 1;\n}" always "void f()\n{\n    int **pp;\n    int *p = 0;\n    pp = &p;\n    **pp = 1;\n}"
Line 2465
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2465 always 2465
  "[test.cpp:6]: (error) Null pointer dereference: *pp\n" always "[test.cpp:6]: (error) Null pointer dereference: *pp\n"
Line 2470
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2470 always 2470
  "void resize(size_t nF, size_t nT) {\n    double* pValues = nullptr;\n    if (nF > 0 && nT > 0)\n        pValues = new double[nF * nT];\n    for (size_t cc = 0; cc < nF * nT; ++cc)\n        pValues[cc] = 42;\n}\n" always "void resize(size_t nF, size_t nT) {\n    double* pValues = nullptr;\n    if (nF > 0 && nT > 0)\n        pValues = new double[nF * nT];\n    for (size_t cc = 0; cc < nF * nT; ++cc)\n        pValues[cc] = 42;\n}\n"
Line 2477
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2477 always 2477
  "" always ""
Line 2482
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2482 always 2482
  "int f(int* a, int* b) {\n    if( a || b ) {\n        int n = a ? *a : *b;\n        if( b )\n            n++;\n        return n;\n    }\n    return 0;\n}\n" always "int f(int* a, int* b) {\n    if( a || b ) {\n        int n = a ? *a : *b;\n        if( b )\n            n++;\n        return n;\n    }\n    return 0;\n}\n"
Line 2491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2491 always 2491
  "" always ""
Line 2496
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2496 always 2496
  "void f(A **list) {\n  A *tmp_List = NULL;\n  *list = NULL;\n  while (1) {\n    if (*list == NULL) {\n      tmp_List = malloc (sizeof (ArchiveList_struct));\n      *list = tmp_List;\n    } else {\n      tmp_List->next = malloc (sizeof (ArchiveList_struct));\n    }\n  }\n}\n" always "void f(A **list) {\n  A *tmp_List = NULL;\n  *list = NULL;\n  while (1) {\n    if (*list == NULL) {\n      tmp_List = malloc (sizeof (ArchiveList_struct));\n      *list = tmp_List;\n    } else {\n      tmp_List->next = malloc (sizeof (ArchiveList_struct));\n    }\n  }\n}\n"
Line 2508
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2508 always 2508
  "" always ""
Line 2513
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2513 always 2513
  "bool g();\nint* h();\nvoid f(int* ptr) {\n    if (!ptr) {\n        if (g())\n            goto done;\n        ptr = h();\n        if (!ptr)\n            return;\n    }\n    if (*ptr == 1)\n        return;\n\ndone:\n}\n" always "bool g();\nint* h();\nvoid f(int* ptr) {\n    if (!ptr) {\n        if (g())\n            goto done;\n        ptr = h();\n        if (!ptr)\n            return;\n    }\n    if (*ptr == 1)\n        return;\n\ndone:\n}\n"
Line 2528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2528 always 2528
  "" always ""
Line 2533
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2533 always 2533
  "int* qux();\nint* f7c2(int *x) {\n  int* p = 0;\n  if (nullptr == x)\n    p = qux();\n  if (nullptr == x)\n    return x;\n  *p = 1;\n  return x;\n}\n" always "int* qux();\nint* f7c2(int *x) {\n  int* p = 0;\n  if (nullptr == x)\n    p = qux();\n  if (nullptr == x)\n    return x;\n  *p = 1;\n  return x;\n}\n"
Line 2543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2543 always 2543
  "[test.cpp:8]: (warning) Possible null pointer dereference: p\n" always "[test.cpp:8]: (warning) Possible null pointer dereference: p\n"
Line 2548
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2548 always 2548
  "void f(std::unique_ptr<A> P) {\n  A *RP = P.get();\n  if (!RP) {\n    P->foo();\n  }\n}\n" always "void f(std::unique_ptr<A> P) {\n  A *RP = P.get();\n  if (!RP) {\n    P->foo();\n  }\n}\n"
Line 2554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2554 always 2554
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition '!RP' is redundant or there is possible null pointer dereference: P.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition '!RP' is redundant or there is possible null pointer dereference: P.\n"
Line 2561
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2561 always 2561
  "struct MyStruct {\n  int GetId() const {\n      int id = 0;\n      int page = m_notebook->GetSelection();\n      if (m_notebook && (m_notebook->GetPageCount() > 0))\n        id = page;\n      return id;\n  }\n  wxNoteBook *m_notebook = nullptr;\n};\nint f() {\n  const MyStruct &s = Get();\n  return s.GetId();\n}\n" always "struct MyStruct {\n  int GetId() const {\n      int id = 0;\n      int page = m_notebook->GetSelection();\n      if (m_notebook && (m_notebook->GetPageCount() > 0))\n        id = page;\n      return id;\n  }\n  wxNoteBook *m_notebook = nullptr;\n};\nint f() {\n  const MyStruct &s = Get();\n  return s.GetId();\n}\n"
Line 2575
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2575 always 2575
  "[test.cpp:5] -> [test.cpp:4]: (warning) Either the condition 'm_notebook' is redundant or there is possible null pointer dereference: m_notebook.\n" always "[test.cpp:5] -> [test.cpp:4]: (warning) Either the condition 'm_notebook' is redundant or there is possible null pointer dereference: m_notebook.\n"
Line 2582
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2582 always 2582
  "struct A {\n    A* a() const;\n    int b() const;\n};\nA* f(A* t) {\n    if (t->b() == 0) {\n        return t;\n    }\n    return t->a();\n}\nvoid g(A* t) {\n    t = f(t->a());\n    if (!t->a()) {}\n}\n" always "struct A {\n    A* a() const;\n    int b() const;\n};\nA* f(A* t) {\n    if (t->b() == 0) {\n        return t;\n    }\n    return t->a();\n}\nvoid g(A* t) {\n    t = f(t->a());\n    if (!t->a()) {}\n}\n"
Line 2596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2596 always 2596
  "" always ""
Line 2601
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2601 always 2601
  "int f(bool b, int* x) {\n    if (b && x == nullptr)\n        return 0;\n    else if (!b && x == nullptr)\n        return 1;\n    else if (!b && x != nullptr)\n        return *x;\n    else\n        return *x + 1;\n}\n" always "int f(bool b, int* x) {\n    if (b && x == nullptr)\n        return 0;\n    else if (!b && x == nullptr)\n        return 1;\n    else if (!b && x != nullptr)\n        return *x;\n    else\n        return *x + 1;\n}\n"
Line 2611
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2611 always 2611
  "" always ""
  "[test.cpp:6] -> [test.cpp:9]: (warning) Either the condition 'x!=nullptr' is redundant or there is possible null pointer dereference: x.\n" always "[test.cpp:6] -> [test.cpp:9]: (warning) Either the condition 'x!=nullptr' is redundant or there is possible null pointer dereference: x.\n"
Line 2613
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2613 always 2613
  "void f(int n, int* p) {\n    int* r = nullptr;\n    if (n < 0)\n        return;\n    if (n == 0)\n        r = p;\n    else if (n > 0)\n        r = p + 1;\n    *r;\n}\n" always "void f(int n, int* p) {\n    int* r = nullptr;\n    if (n < 0)\n        return;\n    if (n == 0)\n        r = p;\n    else if (n > 0)\n        r = p + 1;\n    *r;\n}\n"
Line 2623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2623 always 2623
  "" always ""
Line 2628
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2628 always 2628
  "struct S { char **ppc; };\nint alloc(struct S* s) {\n    char** ppc = malloc(4096);\n    if (ppc != NULL) {\n        s->ppc = ppc;\n        return 1;\n    }\n    return 0;\n}\nvoid f() {\n    struct S* s = malloc(sizeof(struct S));\n    s->ppc = NULL;\n    if (alloc(s))\n        s->ppc[0] = \"\";\n}\n" always "struct S { char **ppc; };\nint alloc(struct S* s) {\n    char** ppc = malloc(4096);\n    if (ppc != NULL) {\n        s->ppc = ppc;\n        return 1;\n    }\n    return 0;\n}\nvoid f() {\n    struct S* s = malloc(sizeof(struct S));\n    s->ppc = NULL;\n    if (alloc(s))\n        s->ppc[0] = \"\";\n}\n"
  false always 0
  "test.c" always "test.c"
Line 2643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2643 always 2643
  "" always ""
Line 2648
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2648 always 2648
  "typedef struct {\n    int x;\n} foo_t;\ntypedef struct {\n    foo_t *y;\n} bar_t;\nvoid f(bar_t *ptr) {\n    if(ptr->y->x)\n        if(ptr->y != nullptr) {}\n}\n" always "typedef struct {\n    int x;\n} foo_t;\ntypedef struct {\n    foo_t *y;\n} bar_t;\nvoid f(bar_t *ptr) {\n    if(ptr->y->x)\n        if(ptr->y != nullptr) {}\n}\n"
Line 2658
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2658 always 2658
  "[test.cpp:9] -> [test.cpp:8]: (warning) Either the condition 'ptr->y!=nullptr' is redundant or there is possible null pointer dereference: ptr->y.\n" always "[test.cpp:9] -> [test.cpp:8]: (warning) Either the condition 'ptr->y!=nullptr' is redundant or there is possible null pointer dereference: ptr->y.\n"
Line 2665
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2665 always 2665
  "std::string definitionToName(Definition *ctx)\n{\n  if (ctx->definitionType()==Definition::TypeMember)\n  {\n     return \"y\";\n  }\n  else if (ctx)\n  {\n    if(ctx->definitionType()!=Definition::TypeMember)\n    {\n       return \"x\";\n    }\n  }\n  return \"unknown\";\n}" always "std::string definitionToName(Definition *ctx)\n{\n  if (ctx->definitionType()==Definition::TypeMember)\n  {\n     return \"y\";\n  }\n  else if (ctx)\n  {\n    if(ctx->definitionType()!=Definition::TypeMember)\n    {\n       return \"x\";\n    }\n  }\n  return \"unknown\";\n}"
Line 2680
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2680 always 2680
  "[test.cpp:7] -> [test.cpp:3]: (warning) Either the condition 'ctx' is redundant or there is possible null pointer dereference: ctx.\n" always "[test.cpp:7] -> [test.cpp:3]: (warning) Either the condition 'ctx' is redundant or there is possible null pointer dereference: ctx.\n"
Line 2687
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2687 always 2687
  "void f(const char* PBeg, const char* PEnd) {\n  while (PEnd != nullptr) {\n    const int N = h(PEnd);\n    PEnd = g();\n    const int Length = PEnd == nullptr ? 0 : PEnd - PBeg;\n  };\n}\n" always "void f(const char* PBeg, const char* PEnd) {\n  while (PEnd != nullptr) {\n    const int N = h(PEnd);\n    PEnd = g();\n    const int Length = PEnd == nullptr ? 0 : PEnd - PBeg;\n  };\n}\n"
Line 2694
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2694 always 2694
  "" always ""
Line 2699
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2699 always 2699
  "bool g(bool);\nint f(int* i) {\n    if (!g(!!i)) return 0;\n    return *i;\n}\n" always "bool g(bool);\nint f(int* i) {\n    if (!g(!!i)) return 0;\n    return *i;\n}\n"
Line 2704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2704 always 2704
  "" always ""
Line 2706
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2706 always 2706
  "bool g(bool);\nint f(int* i) {\n    if (!g(!i)) return 0;\n    return *i;\n}\n" always "bool g(bool);\nint f(int* i) {\n    if (!g(!i)) return 0;\n    return *i;\n}\n"
Line 2711
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2711 always 2711
  "" always ""
Line 2716
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2716 always 2716
  "int* GetThing( ) { return 0; }\nint main() {\n        int* myNull = GetThing();\n        *myNull=42;\n        return 0;\n}" always "int* GetThing( ) { return 0; }\nint main() {\n        int* myNull = GetThing();\n        *myNull=42;\n        return 0;\n}"
Line 2722
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2722 always 2722
  "[test.cpp:4]: (error) Null pointer dereference: myNull\n" always "[test.cpp:4]: (error) Null pointer dereference: myNull\n"
Line 2724
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2724 always 2724
  "struct foo {\n    int* GetThing(void) { return 0; }\n};\nint main(void) {\n        foo myFoo;\n        int* myNull = myFoo.GetThing();\n        *myNull=42;\n        return 0;\n}" always "struct foo {\n    int* GetThing(void) { return 0; }\n};\nint main(void) {\n        foo myFoo;\n        int* myNull = myFoo.GetThing();\n        *myNull=42;\n        return 0;\n}"
Line 2733
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2733 always 2733
  "[test.cpp:7]: (error) Null pointer dereference: myNull\n" always "[test.cpp:7]: (error) Null pointer dereference: myNull\n"
Line 2738
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2738 always 2738
  "struct entry { struct entry* next; size_t len; };\nvoid f(struct entry **kep, size_t slen) {\n    while (*kep)\n        kep = &(*kep)->next;\n    *kep = (struct entry*)malloc(sizeof(**kep));\n    (*kep)->next = 0;\n    (*kep)->len = slen;\n}\n" always "struct entry { struct entry* next; size_t len; };\nvoid f(struct entry **kep, size_t slen) {\n    while (*kep)\n        kep = &(*kep)->next;\n    *kep = (struct entry*)malloc(sizeof(**kep));\n    (*kep)->next = 0;\n    (*kep)->len = slen;\n}\n"
Line 2746
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2746 always 2746
  "" always ""
Line 2750
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2750 always 2750
  "void f() {\n  struct X *x = 0;\n  if (addr == &x->y) {}\n}" always "void f() {\n  struct X *x = 0;\n  if (addr == &x->y) {}\n}"
Line 2754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2754 always 2754
  "" always ""
Line 2756
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2756 always 2756
  "void f() {\n  struct X *x = 0;\n  if (addr == &x->y.z[0]) {}\n}" always "void f() {\n  struct X *x = 0;\n  if (addr == &x->y.z[0]) {}\n}"
Line 2760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2760 always 2760
  "" always ""
Line 2762
  "typedef int Count;\n#define offsetof(TYPE, MEMBER) ((Count) & ((TYPE*)0)->MEMBER)\nstruct S {\n    int a[20];\n};\nint g(int i) {\n    return offsetof(S, a[i]);\n}\n" always "typedef int Count;\n#define offsetof(TYPE, MEMBER) ((Count) & ((TYPE*)0)->MEMBER)\nstruct S {\n    int a[20];\n};\nint g(int i) {\n    return offsetof(S, a[i]);\n}\n"
Line 2770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2770 always 2770
  "" always ""
Line 2775
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2775 always 2775
  "char *f(int x) {\n    char *p = do_something();\n    switch (x) {\n      case 1:\n        p = 0;\n      case 2:\n        *p = 0;\n        break;\n    }\n    return p;\n}" always "char *f(int x) {\n    char *p = do_something();\n    switch (x) {\n      case 1:\n        p = 0;\n      case 2:\n        *p = 0;\n        break;\n    }\n    return p;\n}"
  true always 1
Line 2786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2786 always 2786
  "[test.cpp:7]: (warning) Possible null pointer dereference: p\n" always "[test.cpp:7]: (warning) Possible null pointer dereference: p\n"
Line 2790
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2790 always 2790
  "char *nasm_skip_spaces(const char *p) {\n    if (p)\n        while (*p && nasm_isspace(*p))\n            p++;\n    return p;\n}" always "char *nasm_skip_spaces(const char *p) {\n    if (p)\n        while (*p && nasm_isspace(*p))\n            p++;\n    return p;\n}"
Line 2796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2796 always 2796
  "" always ""
Line 2800
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2800 always 2800
  "void f () {\n    int *buf; buf = NULL;\n    buf;\n}" always "void f () {\n    int *buf; buf = NULL;\n    buf;\n}"
  true always 1
Line 2804
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2804 always 2804
  "" always ""
Line 2808
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2808 always 2808
  "int f(int* x, int* y) {\n    if (!x)\n        return;\n    return *x + *y;\n}\nvoid g() {\n    f(nullptr, nullptr);\n}\n" always "int f(int* x, int* y) {\n    if (!x)\n        return;\n    return *x + *y;\n}\nvoid g() {\n    f(nullptr, nullptr);\n}\n"
  true always 1
Line 2816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2816 always 2816
  "" always ""
Line 2821
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2821 always 2821
  "void foo(char *p) {\n    if (!p) {\n    }\n    *p = 0;\n}" always "void foo(char *p) {\n    if (!p) {\n    }\n    *p = 0;\n}"
Line 2826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2826 always 2826
  "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 2828
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2828 always 2828
  "void foo(char *p) {\n    if (p && *p == 0) {\n    }\n    printf(\"%c\", *p);\n}" always "void foo(char *p) {\n    if (p && *p == 0) {\n    }\n    printf(\"%c\", *p);\n}"
Line 2833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2833 always 2833
  "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 2835
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2835 always 2835
  "void foo(char *p) {\n    if (p && *p == 0) {\n    } else { *p = 0; }\n}" always "void foo(char *p) {\n    if (p && *p == 0) {\n    } else { *p = 0; }\n}"
Line 2839
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2839 always 2839
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 2841
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2841 always 2841
  "void foo(char *p) {\n    if (p) {\n    }\n    strcpy(p, \"abc\");\n}" always "void foo(char *p) {\n    if (p) {\n    }\n    strcpy(p, \"abc\");\n}"
Line 2846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2846 always 2846
  "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 2848
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2848 always 2848
  "void foo(char *p) {\n    if (p) {\n    }\n    bar();\n    strcpy(p, \"abc\");\n}" always "void foo(char *p) {\n    if (p) {\n    }\n    bar();\n    strcpy(p, \"abc\");\n}"
Line 2854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2854 always 2854
  "[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 2856
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2856 always 2856
  "void foo(abc *p) {\n    if (!p) {\n    }\n    else { if (!p->x) {\n    } }\n}" always "void foo(abc *p) {\n    if (!p) {\n    }\n    else { if (!p->x) {\n    } }\n}"
Line 2862
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2862 always 2862
  "" always ""
Line 2865
  71 always 71
  = always "void foo(char *p) {\n    if (!p) {\n        abort();\n    }\n    *p = 0;\n}"
Line 2866
  "void foo(char *p) {\n    if (!p) {\n        abort();\n    }\n    *p = 0;\n}" always "void foo(char *p) {\n    if (!p) {\n        abort();\n    }\n    *p = 0;\n}"
Line 2872
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2872 always 2872
  code always "void foo(char *p) {\n    if (!p) {\n        abort();\n    }\n    *p = 0;\n}"
  false always 0
Line 2873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2873 always 2873
  "" always ""
Line 2875
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2875 always 2875
  code always "void foo(char *p) {\n    if (!p) {\n        abort();\n    }\n    *p = 0;\n}"
  true always 1
Line 2876
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2876 always 2876
  "" always ""
Line 2879
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2879 always 2879
  "void foo(char *p) {\n    if (!p) {\n        (*bail)();\n    }\n    *p = 0;\n}" always "void foo(char *p) {\n    if (!p) {\n        (*bail)();\n    }\n    *p = 0;\n}"
Line 2885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2885 always 2885
  "" always ""
Line 2887
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2887 always 2887
  "void foo(char *p) {\n    if (!p) {\n        throw x;\n    }\n    *p = 0;\n}" always "void foo(char *p) {\n    if (!p) {\n        throw x;\n    }\n    *p = 0;\n}"
Line 2893
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2893 always 2893
  "" always ""
Line 2895
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2895 always 2895
  "void foo(char *p) {\n    if (!p) {\n        ab.abort();\n    }\n    *p = 0;\n}" always "void foo(char *p) {\n    if (!p) {\n        ab.abort();\n    }\n    *p = 0;\n}"
Line 2901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2901 always 2901
  "" always ""
Line 2903
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2903 always 2903
  "void foo(char *p) {\n    if (!p) {\n        switch (x) { }\n    }\n}" always "void foo(char *p) {\n    if (!p) {\n        switch (x) { }\n    }\n}"
  true always 1
Line 2908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2908 always 2908
  "" always ""
Line 2910
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2910 always 2910
  "void foo(char *p) {\n    if (!p) {\n    }\n    return *x;\n}" always "void foo(char *p) {\n    if (!p) {\n    }\n    return *x;\n}"
  true always 1
Line 2915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2915 always 2915
  "" always ""
Line 2917
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2917 always 2917
  "int foo(int *p) {\n    if (!p) {\n        x = *p;\n        return 5+*p;\n    }\n}" always "int foo(int *p) {\n    if (!p) {\n        x = *p;\n        return 5+*p;\n    }\n}"
Line 2923
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2923 always 2923
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 2927
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2927 always 2927
  "void f() {\n    A a;\n    if (!a) {\n        a.x();\n    }\n}" always "void f() {\n    A a;\n    if (!a) {\n        a.x();\n    }\n}"
Line 2933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2933 always 2933
  "" always ""
Line 2936
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2936 always 2936
  "void f(Foo *foo) {\n    if (!dynamic_cast<bar *>(foo)) {\n        *foo = 0;\n    }\n}" always "void f(Foo *foo) {\n    if (!dynamic_cast<bar *>(foo)) {\n        *foo = 0;\n    }\n}"
Line 2941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2941 always 2941
  "" always ""
Line 2944
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2944 always 2944
  "Fred *fred;\nvoid a() {\n    if (!fred) {\n        initfred();\n        fred->x = 0;\n    }\n}" always "Fred *fred;\nvoid a() {\n    if (!fred) {\n        initfred();\n        fred->x = 0;\n    }\n}"
Line 2951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2951 always 2951
  "" always ""
Line 2954
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2954 always 2954
  "void foo(char *p) {\n    if (p) {\n        return;\n    }\n    *p = 0;\n}" always "void foo(char *p) {\n    if (p) {\n        return;\n    }\n    *p = 0;\n}"
Line 2960
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2960 always 2960
  "[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 2963
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2963 always 2963
  "void f(Fred *fred) {\n    if (fred == NULL) {\n        MACRO;\n    }\n    fred->a();\n}" always "void f(Fred *fred) {\n    if (fred == NULL) {\n        MACRO;\n    }\n    fred->a();\n}"
Line 2969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2969 always 2969
  "" always ""
Line 2972
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2972 always 2972
  "void f(Fred *fred) {\n    if (fred == NULL) {\n        x = 0;\n    }\n    switch (x) {\n        case 1:\n            fred->a();\n            break;\n    };\n}" always "void f(Fred *fred) {\n    if (fred == NULL) {\n        x = 0;\n    }\n    switch (x) {\n        case 1:\n            fred->a();\n            break;\n    };\n}"
Line 2982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2982 always 2982
  "" always ""
Line 2985
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2985 always 2985
  "void f(char *p) {\n    int x = 1;\n    if (!p) x = 0;\n    if (x) *p = 0;\n}" always "void f(char *p) {\n    int x = 1;\n    if (!p) x = 0;\n    if (x) *p = 0;\n}"
Line 2990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2990 always 2990
  "" always ""
Line 2993
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  2993 always 2993
  "class Fred {\npublic:\n    Wilma *wilma;\n    void a();\n    void b();\n};\n\nvoid Fred::a() {\n    if ( wilma ) { }\n}\n\nvoid Fred::b() {\n    wilma->Reload();\n}" always "class Fred {\npublic:\n    Wilma *wilma;\n    void a();\n    void b();\n};\n\nvoid Fred::a() {\n    if ( wilma ) { }\n}\n\nvoid Fred::b() {\n    wilma->Reload();\n}"
  true always 1
Line 3007
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3007 always 3007
  "" always ""
Line 3009
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3009 always 3009
  "void test(int *i) {\n  if(i == NULL) { }\n  else {\n    int b = *i;\n  }\n}" always "void test(int *i) {\n  if(i == NULL) { }\n  else {\n    int b = *i;\n  }\n}"
  true always 1
Line 3015
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3015 always 3015
  "" always ""
Line 3018
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3018 always 3018
  "void f()\n{\n   struct foo *pFoo = NULL;\n   size_t len;\n\n   len = sizeof(*pFoo) - sizeof(pFoo->data);\n\n   if (pFoo)\n      bar();\n}" always "void f()\n{\n   struct foo *pFoo = NULL;\n   size_t len;\n\n   len = sizeof(*pFoo) - sizeof(pFoo->data);\n\n   if (pFoo)\n      bar();\n}"
  true always 1
Line 3028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3028 always 3028
  "" always ""
Line 3031
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3031 always 3031
  "void f()\n{\n   struct foo *pFoo = NULL;\n   size_t len;\n\n   while (pFoo)\n      pFoo = pFoo->next;\n\n   len = sizeof(pFoo->data);\n}" always "void f()\n{\n   struct foo *pFoo = NULL;\n   size_t len;\n\n   while (pFoo)\n      pFoo = pFoo->next;\n\n   len = sizeof(pFoo->data);\n}"
  true always 1
Line 3041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3041 always 3041
  "" always ""
Line 3044
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3044 always 3044
  "void f()\n{\n   struct foo *pFoo = NULL;\n   size_t len;\n\n   while (pFoo)\n      pFoo = pFoo->next;\n\n   len = decltype(*pFoo);\n}" always "void f()\n{\n   struct foo *pFoo = NULL;\n   size_t len;\n\n   while (pFoo)\n      pFoo = pFoo->next;\n\n   len = decltype(*pFoo);\n}"
  true always 1
Line 3054
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3054 always 3054
  "" always ""
Line 3056
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3056 always 3056
  "int foo(struct Fred *fred) {\n    if (fred) { }\n    return fred->a;\n}" always "int foo(struct Fred *fred) {\n    if (fred) { }\n    return fred->a;\n}"
Line 3060
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3060 always 3060
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'fred' is redundant or there is possible null pointer dereference: fred.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'fred' is redundant or there is possible null pointer dereference: fred.\n"
Line 3063
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3063 always 3063
  "void f() {\n    char *p; p = x();\n    if (!p) { }\n    *p = 0;\n}" always "void f() {\n    char *p; p = x();\n    if (!p) { }\n    *p = 0;\n}"
Line 3068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3068 always 3068
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 3071
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3071 always 3071
  "void f() {\n    char *p;\n    if (p == 0 && (p = malloc(10)) != 0) {\n        *p = 0;\n    }\n}" always "void f() {\n    char *p;\n    if (p == 0 && (p = malloc(10)) != 0) {\n        *p = 0;\n    }\n}"
Line 3077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3077 always 3077
  "" always ""
Line 3080
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3080 always 3080
  "void f() {\n    char *p;\n    if (p == 0 && (p = malloc(10)) != a && (*p = a)) {\n        *p = 0;\n    }\n}" always "void f() {\n    char *p;\n    if (p == 0 && (p = malloc(10)) != a && (*p = a)) {\n        *p = 0;\n    }\n}"
Line 3086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3086 always 3086
  "" always ""
Line 3089
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3089 always 3089
  "void f() {\n    char *p;\n    if (p == 0 && (*p = 0)) {\n        return;\n    }\n}" always "void f() {\n    char *p;\n    if (p == 0 && (*p = 0)) {\n        return;\n    }\n}"
Line 3095
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3095 always 3095
  "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n"
Line 3098
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3098 always 3098
  "void f() {\n    struct foo *p;\n    if (p == 0 && p->x == 10) {\n        return;\n    }\n}" always "void f() {\n    struct foo *p;\n    if (p == 0 && p->x == 10) {\n        return;\n    }\n}"
Line 3104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3104 always 3104
  "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n"
Line 3107
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3107 always 3107
  "void f() {\n    struct foo *p;\n    if (p == 0 || p->x == 10) {\n        return;\n    }\n}" always "void f() {\n    struct foo *p;\n    if (p == 0 || p->x == 10) {\n        return;\n    }\n}"
Line 3113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3113 always 3113
  "" always ""
Line 3116
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3116 always 3116
  "void f() {\n    char *p; p = malloc(10);\n    if (p == NULL && (*p = a)) {\n        return;\n    }\n}" always "void f() {\n    char *p; p = malloc(10);\n    if (p == NULL && (*p = a)) {\n        return;\n    }\n}"
Line 3122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3122 always 3122
  "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'p==NULL' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'p==NULL' is redundant or there is possible null pointer dereference: p.\n"
Line 3125
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3125 always 3125
  "void f(struct X *p, int x) {\n    if (!p && x==1 || p && p->x==0) {\n        return;\n    }\n}" always "void f(struct X *p, int x) {\n    if (!p && x==1 || p && p->x==0) {\n        return;\n    }\n}"
Line 3130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3130 always 3130
  "" always ""
Line 3133
  64 always 64
  = always "void f(Fred *fred) {\n    if (fred == NULL) { }\n    fred->x();\n}"
  "void f(Fred *fred) {\n    if (fred == NULL) { }\n    fred->x();\n}" always "void f(Fred *fred) {\n    if (fred == NULL) { }\n    fred->x();\n}"
Line 3138
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3138 always 3138
  code always "void f(Fred *fred) {\n    if (fred == NULL) { }\n    fred->x();\n}"
Line 3139
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3139 always 3139
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'fred==NULL' is redundant or there is possible null pointer dereference: fred.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'fred==NULL' is redundant or there is possible null pointer dereference: fred.\n"
Line 3142
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3142 always 3142
  "void f(char *s) {\n    if (s==0);\n    strcpy(a, s?b:c);\n}" always "void f(char *s) {\n    if (s==0);\n    strcpy(a, s?b:c);\n}"
Line 3146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3146 always 3146
  "" always ""
Line 3149
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3149 always 3149
  "void f(struct fred_t *fred) {\n    if (!fred)\n        int sz = sizeof(fred->x);\n}" always "void f(struct fred_t *fred) {\n    if (!fred)\n        int sz = sizeof(fred->x);\n}"
  true always 1
Line 3153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3153 always 3153
  "" always ""
Line 3156
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3156 always 3156
  "void f(int *x) {\n    $if (!x) {}\n    *x = 0;\n}" always "void f(int *x) {\n    $if (!x) {}\n    *x = 0;\n}"
Line 3160
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3160 always 3160
  "" always ""
Line 3163
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3163 always 3163
  "int f(ABC *p) {\n    if (!p) {}\n    return p ? p->x : 0;\n}" always "int f(ABC *p) {\n    if (!p) {}\n    return p ? p->x : 0;\n}"
Line 3167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3167 always 3167
  "" always ""
Line 3168
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3168 always 3168
  "int f(ABC *p) {\n    if (!p) {}\n    return q ? p->x : 0;\n}" always "int f(ABC *p) {\n    if (!p) {}\n    return q ? p->x : 0;\n}"
Line 3172
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3172 always 3172
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
  "" always ""
Line 3174
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3174 always 3174
  "int f(ABC *p) {\n    if (!p) {}\n    return p && p->x;\n}" always "int f(ABC *p) {\n    if (!p) {}\n    return p && p->x;\n}"
Line 3178
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3178 always 3178
  "" always ""
Line 3180
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3180 always 3180
  "void f(int x, int *p) {\n    if (x || !p) {}\n    *p = 0;\n}" always "void f(int x, int *p) {\n    if (x || !p) {}\n    *p = 0;\n}"
Line 3184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3184 always 3184
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!p' is redundant or there is possible null pointer dereference: p.\n"
Line 3187
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3187 always 3187
  "void f() {\n  int *pointer = NULL;\n  pointer = func(sizeof pointer[0]);\n}" always "void f() {\n  int *pointer = NULL;\n  pointer = func(sizeof pointer[0]);\n}"
Line 3191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3191 always 3191
  "" always ""
Line 3196
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3196 always 3196
  "int f() {\n    int* p = 0;\n    return p[4];\n}" always "int f() {\n    int* p = 0;\n    return p[4];\n}"
Line 3200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3200 always 3200
  "[test.cpp:3]: (error) Null pointer dereference: p\n" always "[test.cpp:3]: (error) Null pointer dereference: p\n"
Line 3202
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3202 always 3202
  "void f() {\n    typeof(*NULL) y;\n}" always "void f() {\n    typeof(*NULL) y;\n}"
  true always 1
Line 3205
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3205 always 3205
  "" always ""
Line 3207
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3207 always 3207
  "int * f() {\n    return NULL;\n}\nint main() {\n  return *f();\n}" always "int * f() {\n    return NULL;\n}\nint main() {\n  return *f();\n}"
Line 3213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3213 always 3213
  "[test.cpp:5]: (error) Null pointer dereference: f()\n" always "[test.cpp:5]: (error) Null pointer dereference: f()\n"
Line 3218
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3218 always 3218
  "void f(struct ABC *abc) {\n    ({ if (abc) dbg(); })\n}" always "void f(struct ABC *abc) {\n    ({ if (abc) dbg(); })\n}"
Line 3221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3221 always 3221
  "" always ""
Line 3226
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3226 always 3226
  "void f() {\n    int bytes = snprintf(0, 0, \"%u\", 1);\n}" always "void f() {\n    int bytes = snprintf(0, 0, \"%u\", 1);\n}"
  true always 1
Line 3229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3229 always 3229
  "" always ""
Line 3234
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3234 always 3234
  "void f() {\n    int bytes = snprintf(0, 10, \"%u\", 1);\n}" always "void f() {\n    int bytes = snprintf(0, 10, \"%u\", 1);\n}"
Line 3237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3237 always 3237
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3241
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3241 always 3241
  "void f() {\n    printf(\"%s\", 0);\n}" always "void f() {\n    printf(\"%s\", 0);\n}"
Line 3244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3244 always 3244
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3246
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3246 always 3246
  "void f(char* s) {\n    printf(\"%s\", s);\n}" always "void f(char* s) {\n    printf(\"%s\", s);\n}"
Line 3249
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3249 always 3249
  "" always ""
Line 3251
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3251 always 3251
  "void f() {\n    char* s = 0;\n    printf(\"%s\", s);\n}" always "void f() {\n    char* s = 0;\n    printf(\"%s\", s);\n}"
Line 3255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3255 always 3255
  "[test.cpp:3]: (error) Null pointer dereference: s\n" always "[test.cpp:3]: (error) Null pointer dereference: s\n"
Line 3257
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3257 always 3257
  "void f() {\n    char *s = 0;\n    printf(\"%s\", s == 0 ? a : s);\n}" always "void f() {\n    char *s = 0;\n    printf(\"%s\", s == 0 ? a : s);\n}"
Line 3261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3261 always 3261
  "" always ""
Line 3263
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3263 always 3263
  "void f() {\n    printf(\"%u%s\", 0, 0);\n}" always "void f() {\n    printf(\"%u%s\", 0, 0);\n}"
Line 3266
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3266 always 3266
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3268
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3268 always 3268
  "void f(char* s) {\n    printf(\"%u%s\", 0, s);\n}" always "void f(char* s) {\n    printf(\"%u%s\", 0, s);\n}"
Line 3271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3271 always 3271
  "" always ""
Line 3273
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3273 always 3273
  "void f() {\n    char* s = 0;\n    printf(\"%u%s\", 123, s);\n}" always "void f() {\n    char* s = 0;\n    printf(\"%u%s\", 123, s);\n}"
Line 3277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3277 always 3277
  "[test.cpp:3]: (error) Null pointer dereference: s\n" always "[test.cpp:3]: (error) Null pointer dereference: s\n"
Line 3280
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3280 always 3280
  "void f() {\n    printf(\"%%%s%%\", 0);\n}" always "void f() {\n    printf(\"%%%s%%\", 0);\n}"
Line 3283
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3283 always 3283
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3285
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3285 always 3285
  "void f(char* s) {\n    printf(\"text: %s, %s\", s, 0);\n}" always "void f(char* s) {\n    printf(\"text: %s, %s\", s, 0);\n}"
Line 3288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3288 always 3288
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3291
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3291 always 3291
  "void f() {\n    char* s = \"blabla\";\n    printf(\"%s\", s);\n}" always "void f() {\n    char* s = \"blabla\";\n    printf(\"%s\", s);\n}"
Line 3295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3295 always 3295
  "" always ""
Line 3298
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3298 always 3298
  "void f(char* s) {\n    printf(\"text: %m%s, %s\", s, 0);\n}" always "void f(char* s) {\n    printf(\"text: %m%s, %s\", s, 0);\n}"
Line 3301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3301 always 3301
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3303
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3303 always 3303
  "void f(char* s) {\n    printf(\"text: %*s, %s\", s, 0);\n}" always "void f(char* s) {\n    printf(\"text: %*s, %s\", s, 0);\n}"
Line 3306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3306 always 3306
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3309
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3309 always 3309
  "void f() {\n    printf(\"%-*.*s\", s, 0);\n    sprintf(\"%*\", s);\n}" always "void f() {\n    printf(\"%-*.*s\", s, 0);\n    sprintf(\"%*\", s);\n}"
Line 3313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3313 always 3313
  "" always ""
Line 3317
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3317 always 3317
  "void f(char* s) {\n    sscanf(s, \"%s\", 0);\n}" always "void f(char* s) {\n    sscanf(s, \"%s\", 0);\n}"
Line 3320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3320 always 3320
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3322
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3322 always 3322
  "void f() {\n    scanf(\"%d\", 0);\n}" always "void f() {\n    scanf(\"%d\", 0);\n}"
Line 3325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3325 always 3325
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3327
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3327 always 3327
  "void f(char* foo) {\n    char location[200];\n    int width, height;\n    sscanf(imgInfo, \"%s %d %d\", location, &width, &height);\n}" always "void f(char* foo) {\n    char location[200];\n    int width, height;\n    sscanf(imgInfo, \"%s %d %d\", location, &width, &height);\n}"
Line 3332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3332 always 3332
  "" always ""
Line 3334
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3334 always 3334
  "void f(char *dummy) {\n    int iVal;\n    sscanf(dummy, \"%d%c\", &iVal);\n}" always "void f(char *dummy) {\n    int iVal;\n    sscanf(dummy, \"%d%c\", &iVal);\n}"
Line 3338
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3338 always 3338
  "" always ""
Line 3340
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3340 always 3340
  "void f(char *dummy) {\n    int* iVal = 0;\n    sscanf(dummy, \"%d\", iVal);\n}" always "void f(char *dummy) {\n    int* iVal = 0;\n    sscanf(dummy, \"%d\", iVal);\n}"
Line 3344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3344 always 3344
  "[test.cpp:3]: (error) Null pointer dereference: iVal\n" always "[test.cpp:3]: (error) Null pointer dereference: iVal\n"
Line 3346
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3346 always 3346
  "void f(char *dummy) {\n    int* iVal;\n    sscanf(dummy, \"%d\", foo(iVal));\n}" always "void f(char *dummy) {\n    int* iVal;\n    sscanf(dummy, \"%d\", foo(iVal));\n}"
Line 3350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3350 always 3350
  "" always ""
Line 3352
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3352 always 3352
  "void f(char *dummy) {\n    int* iVal = 0;\n    sscanf(dummy, \"%d%d\", foo(iVal), iVal);\n}" always "void f(char *dummy) {\n    int* iVal = 0;\n    sscanf(dummy, \"%d%d\", foo(iVal), iVal);\n}"
Line 3356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3356 always 3356
  "" always ""
Line 3358
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3358 always 3358
  "void f(char* dummy) {\n    sscanf(dummy, \"%*d%u\", 0);\n}" always "void f(char* dummy) {\n    sscanf(dummy, \"%*d%u\", 0);\n}"
Line 3361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3361 always 3361
  "[test.cpp:2]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n"
Line 3366
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3366 always 3366
  "int foo() {\n    int* iVal = 0;\n    if(maybe()) iVal = g();\n    return iVal[0];\n}" always "int foo() {\n    int* iVal = 0;\n    if(maybe()) iVal = g();\n    return iVal[0];\n}"
Line 3371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3371 always 3371
  "[test.cpp:4]: (warning) Possible null pointer dereference: iVal\n" always "[test.cpp:4]: (warning) Possible null pointer dereference: iVal\n"
Line 3373
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3373 always 3373
  "int foo(int* iVal) {\n    return iVal[0];\n}" always "int foo(int* iVal) {\n    return iVal[0];\n}"
  true always 1
Line 3376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3376 always 3376
  "" always ""
Line 3381
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3381 always 3381
  "struct PolymorphicA { virtual ~A() {} };\nbool foo() {\n     PolymorphicA* a = 0;\n     return typeid(*a) == typeid(*a);\n}" always "struct PolymorphicA { virtual ~A() {} };\nbool foo() {\n     PolymorphicA* a = 0;\n     return typeid(*a) == typeid(*a);\n}"
  true always 1
Line 3386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3386 always 3386
  "" always ""
Line 3388
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3388 always 3388
  "struct NonPolymorphicA { ~A() {} };\nbool foo() {\n     NonPolymorphicA* a = 0;\n     return typeid(*a) == typeid(*a);\n}" always "struct NonPolymorphicA { ~A() {} };\nbool foo() {\n     NonPolymorphicA* a = 0;\n     return typeid(*a) == typeid(*a);\n}"
  true always 1
Line 3393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3393 always 3393
  "" always ""
Line 3395
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3395 always 3395
  "bool foo() {\n     char* c = 0;\n     return typeid(*c) == typeid(*c);\n}" always "bool foo() {\n     char* c = 0;\n     return typeid(*c) == typeid(*c);\n}"
  true always 1
Line 3399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3399 always 3399
  "" always ""
Line 3405
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3405 always 3405
  "void f(int* ptr, int cnt){\n if (!ptr)\n  cnt = 0;\n for (int i = 0; i < cnt; ++i)\n  *ptr++ = 0;\n}" always "void f(int* ptr, int cnt){\n if (!ptr)\n  cnt = 0;\n for (int i = 0; i < cnt; ++i)\n  *ptr++ = 0;\n}"
Line 3411
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3411 always 3411
  "" always ""
Line 3415
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3415 always 3415
  "void f() {\n  K *k = getK();\n  if (k)\n     k->doStuff();\n  delete k;\n}\n" always "void f() {\n  K *k = getK();\n  if (k)\n     k->doStuff();\n  delete k;\n}\n"
  true always 1
Line 3421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3421 always 3421
  "" always ""
Line 3423
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3423 always 3423
  "void f() {\n  K *k = getK();\n  if (k)\n     k[0] = ptr;\n  delete [] k;\n  k = new K[10];\n}\n" always "void f() {\n  K *k = getK();\n  if (k)\n     k[0] = ptr;\n  delete [] k;\n  k = new K[10];\n}\n"
  true always 1
Line 3430
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3430 always 3430
  "" always ""
Line 3434
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3434 always 3434
  "void g(int* x) { *x; }\nvoid f(int* x) {\n    if (x)\n        g(x);\n}" always "void g(int* x) { *x; }\nvoid f(int* x) {\n    if (x)\n        g(x);\n}"
Line 3439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3439 always 3439
  "" always ""
Line 3443
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3443 always 3443
  "void f() {\n  K *k = getK();\n  if (!k)\n     exit(1);\n  k->f();\n}\n" always "void f() {\n  K *k = getK();\n  if (!k)\n     exit(1);\n  k->f();\n}\n"
  true always 1
Line 3449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3449 always 3449
  "" always ""
Line 3453
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3453 always 3453
  "void f(std::string s1) {\n    void* p = 0;\n    s1 = 0;\n    s1 = '\\0';\n    std::string s2 = 0;\n    std::string s2 = '\\0';\n    std::string s3(0);\n    foo(std::string(0));\n    s1 = p;\n    std::string s4 = p;\n    std::string s5(p);\n    foo(std::string(p));\n}" always "void f(std::string s1) {\n    void* p = 0;\n    s1 = 0;\n    s1 = '\\0';\n    std::string s2 = 0;\n    std::string s2 = '\\0';\n    std::string s3(0);\n    foo(std::string(0));\n    s1 = p;\n    std::string s4 = p;\n    std::string s5(p);\n    foo(std::string(p));\n}"
  true always 1
Line 3466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3466 always 3466
  "[test.cpp:9]: (error) Null pointer dereference: p\n[test.cpp:10]: (error) Null pointer dereference: p\n[test.cpp:11]: (error) Null pointer dereference: p\n[test.cpp:12]: (warning, inconclusive) Possible null pointer dereference: p\n[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n[test.cpp:7]: (error) Null pointer dereference\n[test.cpp:8]: (error) Null pointer dereference\n" always "[test.cpp:9]: (error) Null pointer dereference: p\n[test.cpp:10]: (error) Null pointer dereference: p\n[test.cpp:11]: (error) Null pointer dereference: p\n[test.cpp:12]: (warning, inconclusive) Possible null pointer dereference: p\n[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n[test.cpp:7]: (error) Null pointer dereference\n[test.cpp:8]: (error) Null pointer dereference\n"
Line 3476
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3476 always 3476
  "void f(std::string s1) {\n    s1 = nullptr;\n    std::string s2 = nullptr;\n    std::string s3(nullptr);\n    foo(std::string(nullptr));\n}" always "void f(std::string s1) {\n    s1 = nullptr;\n    std::string s2 = nullptr;\n    std::string s3(nullptr);\n    foo(std::string(nullptr));\n}"
  true always 1
Line 3482
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3482 always 3482
  "[test.cpp:2]: (error) Null pointer dereference\n[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:4]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:4]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n"
Line 3488
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3488 always 3488
  "void f(std::string s1) {\n    s1 = NULL;\n    std::string s2 = NULL;\n    std::string s3(NULL);\n    foo(std::string(NULL));\n}" always "void f(std::string s1) {\n    s1 = NULL;\n    std::string s2 = NULL;\n    std::string s3(NULL);\n    foo(std::string(NULL));\n}"
  true always 1
Line 3494
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3494 always 3494
  "[test.cpp:2]: (error) Null pointer dereference\n[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:4]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n" always "[test.cpp:2]: (error) Null pointer dereference\n[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:4]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n"
Line 3500
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3500 always 3500
  "void f(std::string s1, const std::string& s2, const std::string* s3) {\n    void* p = 0;\n    if (x) { return; }\n    foo(s1 == p);\n    foo(s2 == p);\n    foo(s3 == p);\n    foo(p == s1);\n    foo(p == s2);\n    foo(p == s3);\n}" always "void f(std::string s1, const std::string& s2, const std::string* s3) {\n    void* p = 0;\n    if (x) { return; }\n    foo(s1 == p);\n    foo(s2 == p);\n    foo(s3 == p);\n    foo(p == s1);\n    foo(p == s2);\n    foo(p == s3);\n}"
  true always 1
Line 3510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3510 always 3510
  "[test.cpp:4]: (error) Null pointer dereference: p\n[test.cpp:5]: (error) Null pointer dereference: p\n[test.cpp:7]: (error) Null pointer dereference: p\n[test.cpp:8]: (error) Null pointer dereference: p\n" always "[test.cpp:4]: (error) Null pointer dereference: p\n[test.cpp:5]: (error) Null pointer dereference: p\n[test.cpp:7]: (error) Null pointer dereference: p\n[test.cpp:8]: (error) Null pointer dereference: p\n"
Line 3515
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3515 always 3515
  "void f(std::string s1, const std::string& s2, const std::string* s3) {\n    void* p = 0;\n    if (x) { return; }\n    foo(0 == s1.size());\n    foo(0 == s2.size());\n    foo(0 == s3->size());\n    foo(s1.size() == 0);\n    foo(s2.size() == 0);\n    foo(s3->size() == 0);\n}" always "void f(std::string s1, const std::string& s2, const std::string* s3) {\n    void* p = 0;\n    if (x) { return; }\n    foo(0 == s1.size());\n    foo(0 == s2.size());\n    foo(0 == s3->size());\n    foo(s1.size() == 0);\n    foo(s2.size() == 0);\n    foo(s3->size() == 0);\n}"
  true always 1
Line 3525
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3525 always 3525
  "" always ""
Line 3527
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3527 always 3527
  "void f(std::string s1, const std::string& s2) {\n    if (x) { return; }\n    foo(0 == s1[0]);\n    foo(0 == s2[0]);\n    foo(s1[0] == 0);\n    foo(s2[0] == 0);\n}" always "void f(std::string s1, const std::string& s2) {\n    if (x) { return; }\n    foo(0 == s1[0]);\n    foo(0 == s2[0]);\n    foo(s1[0] == 0);\n    foo(s2[0] == 0);\n}"
  true always 1
Line 3534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3534 always 3534
  "" always ""
Line 3536
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3536 always 3536
  "void f(std::string s1, const std::string& s2) {\n    if (x) { return; }\n    foo(s1 == '\\0');\n    foo(s2 == '\\0');\n    foo('\\0' == s1);\n    foo('\\0' == s2);\n}" always "void f(std::string s1, const std::string& s2) {\n    if (x) { return; }\n    foo(s1 == '\\0');\n    foo(s2 == '\\0');\n    foo('\\0' == s1);\n    foo('\\0' == s2);\n}"
  true always 1
Line 3543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3543 always 3543
  "" always ""
Line 3545
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3545 always 3545
  "class Bar {\n    std::string s;\n    Bar() : s(0) {}\n};\nclass Foo {\n    std::string s;\n    Foo();\n};\nFoo::Foo() : s(0) {}" always "class Bar {\n    std::string s;\n    Bar() : s(0) {}\n};\nclass Foo {\n    std::string s;\n    Foo();\n};\nFoo::Foo() : s(0) {}"
Line 3554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3554 always 3554
  "[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:9]: (error) Null pointer dereference\n" always "[test.cpp:3]: (error) Null pointer dereference\n[test.cpp:9]: (error) Null pointer dereference\n"
Line 3557
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3557 always 3557
  "void f() {\n    std::string s = 0 == x ? \"a\" : \"b\";\n}" always "void f() {\n    std::string s = 0 == x ? \"a\" : \"b\";\n}"
  true always 1
Line 3560
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3560 always 3560
  "" always ""
Line 3562
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3562 always 3562
  "void f() {\n  const std::string s = g();\n  ASSERT_MESSAGE(\"Error on s\", 0 == s.compare(\"Some text\"));\n}" always "void f() {\n  const std::string s = g();\n  ASSERT_MESSAGE(\"Error on s\", 0 == s.compare(\"Some text\"));\n}"
Line 3566
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3566 always 3566
  "" always ""
Line 3568
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3568 always 3568
  "void foo(int i, std::string s);\nvoid bar() {\n  foo(0, \"\");\n  foo(0, 0);\n  foo(var, 0);\n  foo(var, NULL);\n  foo(var, nullptr);\n  foo(0, var);\n}" always "void foo(int i, std::string s);\nvoid bar() {\n  foo(0, \"\");\n  foo(0, 0);\n  foo(var, 0);\n  foo(var, NULL);\n  foo(var, nullptr);\n  foo(0, var);\n}"
Line 3577
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3577 always 3577
  "[test.cpp:4]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n[test.cpp:6]: (error) Null pointer dereference\n[test.cpp:7]: (error) Null pointer dereference\n" always "[test.cpp:4]: (error) Null pointer dereference\n[test.cpp:5]: (error) Null pointer dereference\n[test.cpp:6]: (error) Null pointer dereference\n[test.cpp:7]: (error) Null pointer dereference\n"
Line 3582
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3582 always 3582
  "std::string f() {\n  char* p = NULL;\n  int r = g(p);\n  if (!r)\n    return \"\";\n  std::string s(p);\n  return s;\n}\n" always "std::string f() {\n  char* p = NULL;\n  int r = g(p);\n  if (!r)\n    return \"\";\n  std::string s(p);\n  return s;\n}\n"
  true always 1
Line 3590
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3590 always 3590
  "" always ""
Line 3592
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3592 always 3592
  "void f() {\n    const char* p = nullptr;\n    std::string s1{ p };\n    std::string s2{ nullptr };\n}\n" always "void f() {\n    const char* p = nullptr;\n    std::string s1{ p };\n    std::string s2{ nullptr };\n}\n"
Line 3597
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3597 always 3597
  "[test.cpp:3]: (error) Null pointer dereference: p\n[test.cpp:4]: (error) Null pointer dereference\n" always "[test.cpp:3]: (error) Null pointer dereference: p\n[test.cpp:4]: (error) Null pointer dereference\n"
Line 3603
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3603 always 3603
  "void f(std::ifstream& is) {\n    char* p = 0;\n    is >> p;\n}" always "void f(std::ifstream& is) {\n    char* p = 0;\n    is >> p;\n}"
Line 3607
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3607 always 3607
  "[test.cpp:3]: (error) Possible null pointer dereference: p\n" always "[test.cpp:3]: (error) Possible null pointer dereference: p\n"
  "" always ""
Line 3609
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3609 always 3609
  "void f(const std::ostringstream& oss, char* q) {\n    char const* p = 0;\n    oss << p;\n    oss << foo << p;\n    if(q == 0)\n        oss << foo << q;\n}" always "void f(const std::ostringstream& oss, char* q) {\n    char const* p = 0;\n    oss << p;\n    oss << foo << p;\n    if(q == 0)\n        oss << foo << q;\n}"
  false always 0
Line 3616
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3616 always 3616
  "[test.cpp:3]: (error) Null pointer dereference: p\n[test.cpp:4]: (error) Null pointer dereference: p\n[test.cpp:5] -> [test.cpp:6]: (warning) Either the condition 'q==0' is redundant or there is possible null pointer dereference: q.\n" always "[test.cpp:3]: (error) Null pointer dereference: p\n[test.cpp:4]: (error) Null pointer dereference: p\n[test.cpp:5] -> [test.cpp:6]: (warning) Either the condition 'q==0' is redundant or there is possible null pointer dereference: q.\n"
Line 3620
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3620 always 3620
  "void f(const char* p) {\n    if(p == 0) {\n        std::cout << p;\n        std::cerr << p;\n        std::cin >> p;\n        std::cout << abc << p;\n    }\n}" always "void f(const char* p) {\n    if(p == 0) {\n        std::cout << p;\n        std::cerr << p;\n        std::cin >> p;\n        std::cout << abc << p;\n    }\n}"
  false always 0
Line 3628
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3628 always 3628
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:6]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:5]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:6]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n"
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'p==0' is redundant or there is possible null pointer dereference: p.\n"
Line 3636
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3636 always 3636
  "void f() {\n    void* p1 = 0;\n    std::cout << p1;\n    char* p2 = 0;\n    std::cin >> (int)p;\n    std::cout << (int)p;\n}" always "void f() {\n    void* p1 = 0;\n    std::cout << p1;\n    char* p2 = 0;\n    std::cin >> (int)p;\n    std::cout << (int)p;\n}"
  true always 1
Line 3643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3643 always 3643
  "" always ""
Line 3645
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3645 always 3645
  "void f(const std::string& str) {\n    long long ret = 0;\n    std::istringstream istr(str);\n    istr >> std::hex >> ret;\n    return ret;\n}" always "void f(const std::string& str) {\n    long long ret = 0;\n    std::istringstream istr(str);\n    istr >> std::hex >> ret;\n    return ret;\n}"
  true always 1
Line 3651
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3651 always 3651
  "" always ""
Line 3653
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3653 always 3653
  "void f(int* i) {\n    if(i) return;\n    std::cout << i;\n}" always "void f(int* i) {\n    if(i) return;\n    std::cout << i;\n}"
  true always 1
Line 3657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3657 always 3657
  "" always ""
Line 3660
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3660 always 3660
  "using namespace std;\nstd::string itoip(int ip) {\n    stringstream out;\n    out << ((ip >> 0) & 0xFF);\n    return out.str();\n}" always "using namespace std;\nstd::string itoip(int ip) {\n    stringstream out;\n    out << ((ip >> 0) & 0xFF);\n    return out.str();\n}"
  true always 1
Line 3666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3666 always 3666
  "" always ""
Line 3668
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3668 always 3668
  "void deserialize(const std::string &data) {\nstd::istringstream iss(data);\nunsigned int len = 0;\nif (!(iss >> len))\n    return;\n}\n" always "void deserialize(const std::string &data) {\nstd::istringstream iss(data);\nunsigned int len = 0;\nif (!(iss >> len))\n    return;\n}\n"
  true always 1
Line 3674
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3674 always 3674
  "" always ""
Line 3681
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3681 always 3681
  "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  if (p) {}\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  if (p) {}\n  dostuff(p->x);\n}"
Line 3686
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3686 always 3686
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 3688
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3688 always 3688
  "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  p = nullptr;\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  p = nullptr;\n  dostuff(p->x);\n}"
Line 3693
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3693 always 3693
  "[test.cpp:4]: (error) Null pointer dereference: p\n" always "[test.cpp:4]: (error) Null pointer dereference: p\n"
Line 3695
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3695 always 3695
  "struct Fred { int x; };\nvoid f(std::unique_ptr<Fred> p) {\n  if (p) {}\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f(std::unique_ptr<Fred> p) {\n  if (p) {}\n  dostuff(p->x);\n}"
Line 3700
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3700 always 3700
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 3702
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3702 always 3702
  "struct Fred { int x; };\nvoid f(std::unique_ptr<Fred> p) {\n  p = nullptr;\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f(std::unique_ptr<Fred> p) {\n  p = nullptr;\n  dostuff(p->x);\n}"
Line 3707
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3707 always 3707
  "[test.cpp:4]: (error) Null pointer dereference: p\n" always "[test.cpp:4]: (error) Null pointer dereference: p\n"
Line 3709
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3709 always 3709
  "struct Fred { int x; };\nvoid f() {\n  std::shared_ptr<Fred> p;\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f() {\n  std::shared_ptr<Fred> p;\n  dostuff(p->x);\n}"
Line 3714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3714 always 3714
  "[test.cpp:4]: (error) Null pointer dereference: p\n" always "[test.cpp:4]: (error) Null pointer dereference: p\n"
Line 3716
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3716 always 3716
  "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  p.reset();\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  p.reset();\n  dostuff(p->x);\n}"
Line 3721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3721 always 3721
  "[test.cpp:4]: (error) Null pointer dereference: p\n" always "[test.cpp:4]: (error) Null pointer dereference: p\n"
Line 3723
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3723 always 3723
  "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  Fred * pp = nullptr;\n  p.reset(pp);\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  Fred * pp = nullptr;\n  p.reset(pp);\n  dostuff(p->x);\n}"
Line 3729
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3729 always 3729
  "[test.cpp:5]: (error) Null pointer dereference: p\n" always "[test.cpp:5]: (error) Null pointer dereference: p\n"
Line 3731
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3731 always 3731
  "struct Fred { int x; };\nvoid f(Fred& f) {\n  std::shared_ptr<Fred> p;\n  p.reset(&f);\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f(Fred& f) {\n  std::shared_ptr<Fred> p;\n  p.reset(&f);\n  dostuff(p->x);\n}"
Line 3737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3737 always 3737
  "" always ""
Line 3739
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3739 always 3739
  "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  p.reset();\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f(std::shared_ptr<Fred> p) {\n  p.reset();\n  dostuff(p->x);\n}"
Line 3744
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3744 always 3744
  "[test.cpp:4]: (error) Null pointer dereference: p\n" always "[test.cpp:4]: (error) Null pointer dereference: p\n"
Line 3746
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3746 always 3746
  "struct Fred { int x; };\nvoid f() {\n  std::shared_ptr<Fred> p(nullptr);\n  dostuff(p->x);\n}" always "struct Fred { int x; };\nvoid f() {\n  std::shared_ptr<Fred> p(nullptr);\n  dostuff(p->x);\n}"
Line 3751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3751 always 3751
  "[test.cpp:4]: (error) Null pointer dereference: p\n" always "[test.cpp:4]: (error) Null pointer dereference: p\n"
Line 3753
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3753 always 3753
  "struct A {};\nvoid f(int n) {\n    std::unique_ptr<const A*[]> p;\n    p.reset(new const A*[n]);\n}" always "struct A {};\nvoid f(int n) {\n    std::unique_ptr<const A*[]> p;\n    p.reset(new const A*[n]);\n}"
Line 3758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3758 always 3758
  "" always ""
Line 3761
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3761 always 3761
  "struct A {\n    void reset();\n    void f();\n};\nvoid g(std::unique_ptr<A> var) {\n    var->reset();\n    var->f();\n}" always "struct A {\n    void reset();\n    void f();\n};\nvoid g(std::unique_ptr<A> var) {\n    var->reset();\n    var->f();\n}"
Line 3769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3769 always 3769
  "" always ""
Line 3772
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3772 always 3772
  "char* g();\nchar* f() {\n    std::unique_ptr<char> x(g());\n    if( x ) {}\n    return x.release();\n}\n" always "char* g();\nchar* f() {\n    std::unique_ptr<char> x(g());\n    if( x ) {}\n    return x.release();\n}\n"
  true always 1
Line 3778
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3778 always 3778
  "" always ""
Line 3781
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3781 always 3781
  "std::shared_ptr<int> f() {\n    return std::shared_ptr<int>(nullptr);\n}\nvoid g() {\n    int a = *f();\n}\n" always "std::shared_ptr<int> f() {\n    return std::shared_ptr<int>(nullptr);\n}\nvoid g() {\n    int a = *f();\n}\n"
  true always 1
Line 3788
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3788 always 3788
  "[test.cpp:5]: (error) Null pointer dereference: f()\n" always "[test.cpp:5]: (error) Null pointer dereference: f()\n"
Line 3795
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3795 always 3795
  "void f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" always "void f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}"
Line 3800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3800 always 3800
  "" always ""
Line 3803
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3803 always 3803
  "void foo(int *p) { }\n\nvoid f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" always "void foo(int *p) { }\n\nvoid f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}"
Line 3810
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3810 always 3810
  "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 3815
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3815 always 3815
  "void foo(int *&p) { }\n\nvoid f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" always "void foo(int *&p) { }\n\nvoid f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}"
  true always 1
Line 3822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3822 always 3822
  "" always ""
Line 3825
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3825 always 3825
  "void foo(int *p);\n\nvoid f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" always "void foo(int *p);\n\nvoid f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}"
Line 3832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3832 always 3832
  "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 3837
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3837 always 3837
  "void f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}" always "void f(int *p) {\n    *p = 0;\n    foo(p);\n    if (p) { }\n}"
  true always 1
Line 3842
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3842 always 3842
  "[test.cpp:4] -> [test.cpp:2]: (warning, inconclusive) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n" always "[test.cpp:4] -> [test.cpp:2]: (warning, inconclusive) Either the condition 'p' is redundant or there is possible null pointer dereference: p.\n"
Line 3850
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3850 always 3850
  "void f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}" always "void f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}"
Line 3855
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3855 always 3855
  "" always ""
Line 3858
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3858 always 3858
  "void foo(struct ABC *abc) { }\n\nvoid f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}" always "void foo(struct ABC *abc) { }\n\nvoid f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}"
Line 3865
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3865 always 3865
  "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 3870
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3870 always 3870
  "void foo(struct ABC *abc);\n\nvoid f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}" always "void foo(struct ABC *abc);\n\nvoid f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}"
Line 3877
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3877 always 3877
  "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 3882
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3882 always 3882
  "void f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}" always "void f(struct ABC *abc) {\n    abc->a = 0;\n    foo(abc);\n    if (abc) { }\n}"
  true always 1
Line 3887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3887 always 3887
  "[test.cpp:4] -> [test.cpp:2]: (warning, inconclusive) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n" always "[test.cpp:4] -> [test.cpp:2]: (warning, inconclusive) Either the condition 'abc' is redundant or there is possible null pointer dereference: abc.\n"
Line 3895
  & {lifetime[Address]=(settings1),!0}
  this always !0
Line 3896
  "void f() { int a,b,c; x(a,b,c); }" always "void f() { int a,b,c; x(a,b,c); }"
Line 3897
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3897 always 3897
  true always 1
  "test.c" always "test.c"
Line 3898
  "x" always "x"
Line 3904
  "x" always "x"
  1 always 1
Line 3905
  "x" always "x"
  2 always 2
Line 3906
  "x" always "x"
  3 always 3
Line 3909
  null always size=0
  & {lifetime[Address]=(library),!0}
Line 3910
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3910 always 3910
  0U always 0
  ( always !<=-1
Line 3917
  "x" always "x"
  1 always 1
Line 3918
  "x" always "x"
  2 always 2
Line 3919
  "x" always "x"
  3 always 3
Line 3920
  "x" always "x"
  1 always 1
  = always 1
  true always 1
Line 3923
  null always size=0
  & {lifetime[Address]=(library),!0}
Line 3924
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3924 always 3924
  1U always 1
  ( always !<=-1
Line 3925
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3925 always 3925
  "a" always "a"
Line 3931
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3931 always 3931
  "void f(int *p = 0) {\n    *p = 0;\n}" always "void f(int *p = 0) {\n    *p = 0;\n}"
Line 3934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3934 always 3934
  "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" always "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n"
Line 3936
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3936 always 3936
  "void f(int *p = 0) {\n    if (!p)\n        return;\n    *p = 0;\n}" always "void f(int *p = 0) {\n    if (!p)\n        return;\n    *p = 0;\n}"
Line 3941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3941 always 3941
  "" always ""
Line 3943
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3943 always 3943
  "void f(char a, int *p = 0) {\n    *p = 0;\n}" always "void f(char a, int *p = 0) {\n    *p = 0;\n}"
Line 3946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3946 always 3946
  "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" always "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n"
Line 3948
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3948 always 3948
  "void f(int *p = 0) {\n    printf(\"p = %d\", *p);\n}" always "void f(int *p = 0) {\n    printf(\"p = %d\", *p);\n}"
Line 3951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3951 always 3951
  "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" always "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n"
Line 3953
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3953 always 3953
  "void f(int *p = 0) {\n    printf(\"p[1] = %d\", p[1]);\n}" always "void f(int *p = 0) {\n    printf(\"p[1] = %d\", p[1]);\n}"
Line 3956
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3956 always 3956
  "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" always "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n"
Line 3958
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3958 always 3958
  "void f(int *p = 0) {\n    buf[p] = 0;\n}" always "void f(int *p = 0) {\n    buf[p] = 0;\n}"
Line 3961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3961 always 3961
  "" always ""
Line 3963
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3963 always 3963
  "void f(int *p = 0) {\n    if (p != 0 && bar())\n      *p = 0;\n}" always "void f(int *p = 0) {\n    if (p != 0 && bar())\n      *p = 0;\n}"
Line 3967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3967 always 3967
  "" always ""
Line 3969
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3969 always 3969
  "void f(int *p) {\n    *p = 0;\n}" always "void f(int *p) {\n    *p = 0;\n}"
Line 3972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3972 always 3972
  "" always ""
Line 3974
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3974 always 3974
  "void f(int *p = 0) {\n    if (p != 0)\n      *p = 0;\n}" always "void f(int *p = 0) {\n    if (p != 0)\n      *p = 0;\n}"
Line 3978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3978 always 3978
  "" always ""
Line 3980
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3980 always 3980
  "void f(int *p = 0) {\n    int y;\n    if (p == 0)\n      p = &y;\n    *p = 0;\n}" always "void f(int *p = 0) {\n    int y;\n    if (p == 0)\n      p = &y;\n    *p = 0;\n}"
Line 3986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3986 always 3986
  "" always ""
Line 3988
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3988 always 3988
  "void f(int a, int *p = 0) {\n    if (a != 0)\n      *p = 0;\n}" always "void f(int a, int *p = 0) {\n    if (a != 0)\n      *p = 0;\n}"
  true always 1
Line 3992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3992 always 3992
  "[test.cpp:3]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" always "[test.cpp:3]: (warning) Possible null pointer dereference if the default parameter value is used: p\n"
Line 3996
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  3996 always 3996
  "void f(int *p = 0) {\n    p = a;\n    *p = 0;\n}" always "void f(int *p = 0) {\n    p = a;\n    *p = 0;\n}"
Line 4000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4000 always 4000
  "" always ""
Line 4002
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4002 always 4002
  "void f(int *p = 0) {\n    p += a;\n    *p = 0;\n}" always "void f(int *p = 0) {\n    p += a;\n    *p = 0;\n}"
Line 4006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4006 always 4006
  "" always ""
Line 4008
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4008 always 4008
  "int f(int *p = 0) {\n    if (p == 0) {\n        return 0;\n    }\n    return *p;\n}" always "int f(int *p = 0) {\n    if (p == 0) {\n        return 0;\n    }\n    return *p;\n}"
Line 4014
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4014 always 4014
  "" always ""
Line 4016
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4016 always 4016
  "void f(int *p = 0) {\n    std::cout << p ? *p : 0;\n}" always "void f(int *p = 0) {\n    std::cout << p ? *p : 0;\n}"
Line 4019
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4019 always 4019
  "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" always "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n"
Line 4021
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4021 always 4021
  "void f(char *p = 0) {\n    std::cout << p ? *p : 0;\n}" always "void f(char *p = 0) {\n    std::cout << p ? *p : 0;\n}"
Line 4024
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4024 always 4024
  "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" always "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n"
Line 4026
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4026 always 4026
  "void f(int *p = 0) {\n    std::cout << (p ? *p : 0);\n}" always "void f(int *p = 0) {\n    std::cout << (p ? *p : 0);\n}"
Line 4029
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4029 always 4029
  "" always ""
Line 4031
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4031 always 4031
  "void f(int *p = 0) {\n    std::cout << p;\n}" always "void f(int *p = 0) {\n    std::cout << p;\n}"
Line 4034
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4034 always 4034
  "" always ""
Line 4036
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4036 always 4036
  "void f(int *p = 0) {\n    std::cout << (p && p[0] ? *p : 42);\n}" always "void f(int *p = 0) {\n    std::cout << (p && p[0] ? *p : 42);\n}"
Line 4039
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4039 always 4039
  "" always ""
Line 4041
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4041 always 4041
  "void isEmpty(int *p = 0) {\n    return p && *p;\n}" always "void isEmpty(int *p = 0) {\n    return p && *p;\n}"
Line 4044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4044 always 4044
  "" always ""
Line 4046
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4046 always 4046
  "void g(int *p = 0) {\n    return !p || *p;\n}" always "void g(int *p = 0) {\n    return !p || *p;\n}"
Line 4049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4049 always 4049
  "" always ""
Line 4054
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4054 always 4054
  "void f(int *p = 0) {\n    bar(p);\n    *p = 0;\n}" always "void f(int *p = 0) {\n    bar(p);\n    *p = 0;\n}"
Line 4058
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4058 always 4058
  "" always ""
Line 4060
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4060 always 4060
  "void f(int *p = 0) {\n    printf(\"%p\", p);\n    *p = 0;\n}" always "void f(int *p = 0) {\n    printf(\"%p\", p);\n    *p = 0;\n}"
  true always 1
Line 4064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4064 always 4064
  "[test.cpp:3]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" always "[test.cpp:3]: (warning) Possible null pointer dereference if the default parameter value is used: p\n"
Line 4069
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4069 always 4069
  "void f(int *p = 0) {\n    init(&p);\n    *p = 0;\n}" always "void f(int *p = 0) {\n    init(&p);\n    *p = 0;\n}"
Line 4073
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4073 always 4073
  "" always ""
Line 4075
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4075 always 4075
  "void init(int* &g);\nvoid f(int *p = 0) {\n    init(p);\n    *p = 0;\n}" always "void init(int* &g);\nvoid f(int *p = 0) {\n    init(p);\n    *p = 0;\n}"
Line 4080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4080 always 4080
  "" always ""
Line 4082
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4082 always 4082
  "void f(int *p = 0) {\n    if (p == 0) {\n        init(&p);\n    }\n    *p = 0;\n}" always "void f(int *p = 0) {\n    if (p == 0) {\n        init(&p);\n    }\n    *p = 0;\n}"
Line 4088
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4088 always 4088
  "" always ""
Line 4090
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4090 always 4090
  "void f(int *p = 0) {\n    if (p == 0) {\n        throw SomeException;\n    }\n    *p = 0;\n}" always "void f(int *p = 0) {\n    if (p == 0) {\n        throw SomeException;\n    }\n    *p = 0;\n}"
Line 4096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4096 always 4096
  "" always ""
Line 4098
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4098 always 4098
  "void foo(int x, int *p = 0) {\n    int var1 = x ? *p : 5;\n}" always "void foo(int x, int *p = 0) {\n    int var1 = x ? *p : 5;\n}"
Line 4101
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4101 always 4101
  "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n" always "[test.cpp:2]: (warning) Possible null pointer dereference if the default parameter value is used: p\n"
Line 4105
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4105 always 4105
  "struct A { unsigned int size; };\nstruct B { struct A *a; };\nvoid f(struct B *b) {\n    unsigned int j;\n    for (j = 0; j < b[0].a->size; ++j) {\n    }\n}" always "struct A { unsigned int size; };\nstruct B { struct A *a; };\nvoid f(struct B *b) {\n    unsigned int j;\n    for (j = 0; j < b[0].a->size; ++j) {\n    }\n}"
Line 4112
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4112 always 4112
  "" always ""
Line 4116
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4116 always 4116
  "void foo(MythSocket *socket) {\n  bool do_write=0;\n  if (socket) {\n    do_write=something();\n  }\n  if (do_write) {\n    socket->func();\n  }\n}\nvoid bar() {\n  foo(0);\n}\n" always "void foo(MythSocket *socket) {\n  bool do_write=0;\n  if (socket) {\n    do_write=something();\n  }\n  if (do_write) {\n    socket->func();\n  }\n}\nvoid bar() {\n  foo(0);\n}\n"
  true always 1
  "test.c" always "test.c"
Line 4128
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4128 always 4128
  "" always ""
Line 4132
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4132 always 4132
  "void foo(char *s) {\n  char *p = s - 20;\n}\nvoid bar() { foo(0); }" always "void foo(char *s) {\n  char *p = s - 20;\n}\nvoid bar() { foo(0); }"
Line 4136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4136 always 4136
  "[test.cpp:2]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n" always "[test.cpp:2]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n"
Line 4139
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4139 always 4139
  "void foo(char *s) {\n  if (!s) {}\n  char *p = s - 20;\n}" always "void foo(char *s) {\n  if (!s) {}\n  char *p = s - 20;\n}"
Line 4143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4143 always 4143
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is overflow in pointer subtraction.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is overflow in pointer subtraction.\n"
Line 4145
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4145 always 4145
  "void foo(char *s) {\n  s -= 20;\n}\nvoid bar() { foo(0); }" always "void foo(char *s) {\n  s -= 20;\n}\nvoid bar() { foo(0); }"
Line 4149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4149 always 4149
  "[test.cpp:2]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n" always "[test.cpp:2]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n"
Line 4152
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4152 always 4152
  "void foo(char *s) {\n  if (!s) {}\n  s -= 20;\n}" always "void foo(char *s) {\n  if (!s) {}\n  s -= 20;\n}"
Line 4156
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4156 always 4156
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is overflow in pointer subtraction.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is overflow in pointer subtraction.\n"
Line 4158
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4158 always 4158
  "int* f8() { int *x = NULL; return --x; }" always "int* f8() { int *x = NULL; return --x; }"
Line 4159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4159 always 4159
  "[test.cpp:1]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n" always "[test.cpp:1]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n"
Line 4161
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4161 always 4161
  "int* f9() { int *x = NULL; return x--; }" always "int* f9() { int *x = NULL; return x--; }"
Line 4162
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4162 always 4162
  "[test.cpp:1]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n" always "[test.cpp:1]: (error) Overflow in pointer arithmetic, NULL pointer is subtracted.\n"
Line 4166
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4166 always 4166
  "void foo(char *s) {\n  char * p = s + 20;\n}\nvoid bar() { foo(0); }" always "void foo(char *s) {\n  char * p = s + 20;\n}\nvoid bar() { foo(0); }"
Line 4170
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4170 always 4170
  "[test.cpp:2]: (error) Pointer addition with NULL pointer.\n" always "[test.cpp:2]: (error) Pointer addition with NULL pointer.\n"
Line 4172
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4172 always 4172
  "void foo(char *s) {\n  if (!s) {}\n  char * p = s + 20;\n}" always "void foo(char *s) {\n  if (!s) {}\n  char * p = s + 20;\n}"
Line 4176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4176 always 4176
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is pointer arithmetic with NULL pointer.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is pointer arithmetic with NULL pointer.\n"
Line 4178
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4178 always 4178
  "void foo(char *s) {\n  char * p = 20 + s;\n}\nvoid bar() { foo(0); }" always "void foo(char *s) {\n  char * p = 20 + s;\n}\nvoid bar() { foo(0); }"
Line 4182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4182 always 4182
  "[test.cpp:2]: (error) Pointer addition with NULL pointer.\n" always "[test.cpp:2]: (error) Pointer addition with NULL pointer.\n"
Line 4184
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4184 always 4184
  "void foo(char *s) {\n  if (!s) {}\n  char * p = 20 + s;\n}" always "void foo(char *s) {\n  if (!s) {}\n  char * p = 20 + s;\n}"
Line 4188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4188 always 4188
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is pointer arithmetic with NULL pointer.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is pointer arithmetic with NULL pointer.\n"
Line 4190
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4190 always 4190
  "void foo(char *s) {\n  s += 20;\n}\nvoid bar() { foo(0); }" always "void foo(char *s) {\n  s += 20;\n}\nvoid bar() { foo(0); }"
Line 4194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4194 always 4194
  "[test.cpp:2]: (error) Pointer addition with NULL pointer.\n" always "[test.cpp:2]: (error) Pointer addition with NULL pointer.\n"
Line 4196
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4196 always 4196
  "void foo(char *s) {\n  if (!s) {}\n  s += 20;\n}" always "void foo(char *s) {\n  if (!s) {}\n  s += 20;\n}"
Line 4200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4200 always 4200
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is pointer arithmetic with NULL pointer.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition '!s' is redundant or there is pointer arithmetic with NULL pointer.\n"
Line 4202
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4202 always 4202
  "int* f7() { int *x = NULL; return ++x; }" always "int* f7() { int *x = NULL; return ++x; }"
Line 4203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4203 always 4203
  "[test.cpp:1]: (error) Pointer addition with NULL pointer.\n" always "[test.cpp:1]: (error) Pointer addition with NULL pointer.\n"
Line 4205
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4205 always 4205
  "int* f10() { int *x = NULL; return x++; }" always "int* f10() { int *x = NULL; return x++; }"
Line 4206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4206 always 4206
  "[test.cpp:1]: (error) Pointer addition with NULL pointer.\n" always "[test.cpp:1]: (error) Pointer addition with NULL pointer.\n"
Line 4208
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4208 always 4208
  "class foo {};\nconst char* get() const { return 0; }\nvoid f(foo x) { if (get()) x += get(); }" always "class foo {};\nconst char* get() const { return 0; }\nvoid f(foo x) { if (get()) x += get(); }"
Line 4211
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4211 always 4211
  "" always ""
Line 4215
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4215 always 4215
  "const char** get() { return 0; }" always "const char** get() { return 0; }"
Line 4216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4216 always 4216
  "" always ""
Line 4222
  "" always ""
Line 4225
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 4226
  code possible {"void f(int *fp) {\n    a = *fp;\n}\nint main() {\n  int *p = 0;\n  f(p);\n}"@2,"void use(int *p) { a = *p + 3; }\nvoid call(int x, int *p) { x++; use(p); }\nint main() {\n  call(4,0);\n}"@3,"void dostuff(int *x, int *y) {\n  if (!var)\n    return -1;\n  *x = *y;\n}\n\nvoid f() {\n  dostuff(a, 0);\n}"@4,"void dostuff(int *x, int *y) {\n  if (cond)\n    *y = -1;\n  *x = *y;\n}\n\nvoid f() {\n  dostuff(a, 0);\n}"@5,"void dostuff(int mask, int *p) {\n  if (mask == 13) ;\n  else *p = 45;\n}\n\nvoid f() {\n  dostuff(0, 0);\n}"@6,"void dostuff(int mask, int *p) {\n  x = (mask & 1) ? *p : 0;\n}\n\nvoid f() {\n  dostuff(0, 0);\n}"@7,"void g(int* x) { *x; }\nvoid f(int* x) {\n    if (x)\n        g(x);\n}"@8}
Line 4227
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testnullpointer.cpp"@2,"cppcheck-2.8/test/testnullpointer.cpp"@3,"cppcheck-2.8/test/testnullpointer.cpp"@4,"cppcheck-2.8/test/testnullpointer.cpp"@5,"cppcheck-2.8/test/testnullpointer.cpp"@6,"cppcheck-2.8/test/testnullpointer.cpp"@7,"cppcheck-2.8/test/testnullpointer.cpp"@8}
  line inconclusive {4246@2,4258@3,4268@4,4279@5,4291@6,4302@7,4311@8}
  "test.cpp" always "test.cpp"
Line 4229
  & {lifetime[Address]=(tokenizer),!0}
Line 4233
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 4234
  fileInfo always size=0
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
Line 4235
  fileInfo always size=1
  this always !0
Line 4236
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 4237
  fileInfo always !size=0
Line 4238
  fileInfo always !size=0
Line 4246
  "void f(int *fp) {\n    a = *fp;\n}\nint main() {\n  int *p = 0;\n  f(p);\n}" always "void f(int *fp) {\n    a = *fp;\n}\nint main() {\n  int *p = 0;\n  f(p);\n}"
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4246 always 4246
Line 4253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4253 always 4253
  "test.cpp:2:error:Null pointer dereference: fp\ntest.cpp:5:note:Assignment 'p=0', assigned value is 0\ntest.cpp:6:note:Calling function f, 1st argument is null\ntest.cpp:2:note:Dereferencing argument fp that is null\n" always "test.cpp:2:error:Null pointer dereference: fp\ntest.cpp:5:note:Assignment 'p=0', assigned value is 0\ntest.cpp:6:note:Calling function f, 1st argument is null\ntest.cpp:2:note:Dereferencing argument fp that is null\n"
Line 4258
  "void use(int *p) { a = *p + 3; }\nvoid call(int x, int *p) { x++; use(p); }\nint main() {\n  call(4,0);\n}" always "void use(int *p) { a = *p + 3; }\nvoid call(int x, int *p) { x++; use(p); }\nint main() {\n  call(4,0);\n}"
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4258 always 4258
Line 4263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4263 always 4263
  "test.cpp:1:error:Null pointer dereference: p\ntest.cpp:4:note:Calling function call, 2nd argument is null\ntest.cpp:2:note:Calling function use, 1st argument is null\ntest.cpp:1:note:Dereferencing argument p that is null\n" always "test.cpp:1:error:Null pointer dereference: p\ntest.cpp:4:note:Calling function call, 2nd argument is null\ntest.cpp:2:note:Calling function use, 1st argument is null\ntest.cpp:1:note:Dereferencing argument p that is null\n"
Line 4268
  "void dostuff(int *x, int *y) {\n  if (!var)\n    return -1;\n  *x = *y;\n}\n\nvoid f() {\n  dostuff(a, 0);\n}" always "void dostuff(int *x, int *y) {\n  if (!var)\n    return -1;\n  *x = *y;\n}\n\nvoid f() {\n  dostuff(a, 0);\n}"
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4268 always 4268
Line 4277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4277 always 4277
  "" always ""
Line 4279
  "void dostuff(int *x, int *y) {\n  if (cond)\n    *y = -1;\n  *x = *y;\n}\n\nvoid f() {\n  dostuff(a, 0);\n}" always "void dostuff(int *x, int *y) {\n  if (cond)\n    *y = -1;\n  *x = *y;\n}\n\nvoid f() {\n  dostuff(a, 0);\n}"
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4279 always 4279
Line 4288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4288 always 4288
  "" always ""
Line 4291
  "void dostuff(int mask, int *p) {\n  if (mask == 13) ;\n  else *p = 45;\n}\n\nvoid f() {\n  dostuff(0, 0);\n}" always "void dostuff(int mask, int *p) {\n  if (mask == 13) ;\n  else *p = 45;\n}\n\nvoid f() {\n  dostuff(0, 0);\n}"
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4291 always 4291
Line 4299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4299 always 4299
  "" always ""
Line 4302
  "void dostuff(int mask, int *p) {\n  x = (mask & 1) ? *p : 0;\n}\n\nvoid f() {\n  dostuff(0, 0);\n}" always "void dostuff(int mask, int *p) {\n  x = (mask & 1) ? *p : 0;\n}\n\nvoid f() {\n  dostuff(0, 0);\n}"
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4302 always 4302
Line 4309
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4309 always 4309
  "" always ""
Line 4311
  "void g(int* x) { *x; }\nvoid f(int* x) {\n    if (x)\n        g(x);\n}" always "void g(int* x) { *x; }\nvoid f(int* x) {\n    if (x)\n        g(x);\n}"
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4311 always 4311
Line 4316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testnullpointer.cpp" always "cppcheck-2.8/test/testnullpointer.cpp"
  4316 always 4316
  "" always ""
