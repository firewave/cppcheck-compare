

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742027 expected@var22 !=@expr1073742028 actual@var23 ) {
62: std ::@expr1073742029 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742030 expected@var22 ;
64: std ::@expr1073742031 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742032 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742033 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742034 str (@expr1073742035 ) , actualStr@var26 .@expr1073742036 str (@expr1073742037 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742038 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742039 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742040 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742041 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testother.cpp

1:
|
40:
41: class TestOther : public TestFixture {
42: public:
43: TestOther ( ) : TestFixture ( "TestOther" ) { }
44:
45: private:
46: Settings _settings@var102 ;
47:
48: void run ( ) override {
49: $do ${ $if $(@expr1073742042 _settings@var102 .@expr1073742043 library@var103 $.@expr1073742044 $load $(@expr1073742045 $exename@var11 $.@expr1073742046 $c_str $(@expr1073742047 $) $, "std.cfg" $) $.@expr1073742048 $errorcode $!=@expr1073742049 $Library $::@expr1073742050 $ErrorCode $::@expr1073742051 $OK $) ${ $complainMissingLib $(@expr1073742052 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742053 $false $) ;
50:
51:
52: $do ${ $if $(@expr1073742054 $prepareTest $(@expr1073742055 "emptyBrackets" $) $) ${ $setVerbose $(@expr1073742056 $false $) $; emptyBrackets $(@expr1073742057 $) $; $} $} $while $(@expr1073742058 $false $) ;
53:
54: $do ${ $if $(@expr1073742059 $prepareTest $(@expr1073742060 "zeroDiv1" $) $) ${ $setVerbose $(@expr1073742061 $false $) $; zeroDiv1 $(@expr1073742062 $) $; $} $} $while $(@expr1073742063 $false $) ;
55: $do ${ $if $(@expr1073742064 $prepareTest $(@expr1073742065 "zeroDiv2" $) $) ${ $setVerbose $(@expr1073742066 $false $) $; zeroDiv2 $(@expr1073742067 $) $; $} $} $while $(@expr1073742068 $false $) ;
56: $do ${ $if $(@expr1073742069 $prepareTest $(@expr1073742070 "zeroDiv3" $) $) ${ $setVerbose $(@expr1073742071 $false $) $; zeroDiv3 $(@expr1073742072 $) $; $} $} $while $(@expr1073742073 $false $) ;
57: $do ${ $if $(@expr1073742074 $prepareTest $(@expr1073742075 "zeroDiv4" $) $) ${ $setVerbose $(@expr1073742076 $false $) $; zeroDiv4 $(@expr1073742077 $) $; $} $} $while $(@expr1073742078 $false $) ;
58: $do ${ $if $(@expr1073742079 $prepareTest $(@expr1073742080 "zeroDiv5" $) $) ${ $setVerbose $(@expr1073742081 $false $) $; zeroDiv5 $(@expr1073742082 $) $; $} $} $while $(@expr1073742083 $false $) ;
59: $do ${ $if $(@expr1073742084 $prepareTest $(@expr1073742085 "zeroDiv6" $) $) ${ $setVerbose $(@expr1073742086 $false $) $; zeroDiv6 $(@expr1073742087 $) $; $} $} $while $(@expr1073742088 $false $) ;
60: $do ${ $if $(@expr1073742089 $prepareTest $(@expr1073742090 "zeroDiv7" $) $) ${ $setVerbose $(@expr1073742091 $false $) $; zeroDiv7 $(@expr1073742092 $) $; $} $} $while $(@expr1073742093 $false $) ;
61: $do ${ $if $(@expr1073742094 $prepareTest $(@expr1073742095 "zeroDiv8" $) $) ${ $setVerbose $(@expr1073742096 $false $) $; zeroDiv8 $(@expr1073742097 $) $; $} $} $while $(@expr1073742098 $false $) ;
62: $do ${ $if $(@expr1073742099 $prepareTest $(@expr1073742100 "zeroDiv9" $) $) ${ $setVerbose $(@expr1073742101 $false $) $; zeroDiv9 $(@expr1073742102 $) $; $} $} $while $(@expr1073742103 $false $) ;
63: $do ${ $if $(@expr1073742104 $prepareTest $(@expr1073742105 "zeroDiv10" $) $) ${ $setVerbose $(@expr1073742106 $false $) $; zeroDiv10 $(@expr1073742107 $) $; $} $} $while $(@expr1073742108 $false $) ;
64: $do ${ $if $(@expr1073742109 $prepareTest $(@expr1073742110 "zeroDiv11" $) $) ${ $setVerbose $(@expr1073742111 $false $) $; zeroDiv11 $(@expr1073742112 $) $; $} $} $while $(@expr1073742113 $false $) ;
65: $do ${ $if $(@expr1073742114 $prepareTest $(@expr1073742115 "zeroDiv12" $) $) ${ $setVerbose $(@expr1073742116 $false $) $; zeroDiv12 $(@expr1073742117 $) $; $} $} $while $(@expr1073742118 $false $) ;
66: $do ${ $if $(@expr1073742119 $prepareTest $(@expr1073742120 "zeroDiv13" $) $) ${ $setVerbose $(@expr1073742121 $false $) $; zeroDiv13 $(@expr1073742122 $) $; $} $} $while $(@expr1073742123 $false $) ;
67:
68: $do ${ $if $(@expr1073742124 $prepareTest $(@expr1073742125 "zeroDivCond" $) $) ${ $setVerbose $(@expr1073742126 $false $) $; zeroDivCond $(@expr1073742127 $) $; $} $} $while $(@expr1073742128 $false $) ;
69:
70: $do ${ $if $(@expr1073742129 $prepareTest $(@expr1073742130 "nanInArithmeticExpression" $) $) ${ $setVerbose $(@expr1073742131 $false $) $; nanInArithmeticExpression $(@expr1073742132 $) $; $} $} $while $(@expr1073742133 $false $) ;
71:
72: $do ${ $if $(@expr1073742134 $prepareTest $(@expr1073742135 "varScope1" $) $) ${ $setVerbose $(@expr1073742136 $false $) $; varScope1 $(@expr1073742137 $) $; $} $} $while $(@expr1073742138 $false $) ;
73: $do ${ $if $(@expr1073742139 $prepareTest $(@expr1073742140 "varScope2" $) $) ${ $setVerbose $(@expr1073742141 $false $) $; varScope2 $(@expr1073742142 $) $; $} $} $while $(@expr1073742143 $false $) ;
74: $do ${ $if $(@expr1073742144 $prepareTest $(@expr1073742145 "varScope3" $) $) ${ $setVerbose $(@expr1073742146 $false $) $; varScope3 $(@expr1073742147 $) $; $} $} $while $(@expr1073742148 $false $) ;
75: $do ${ $if $(@expr1073742149 $prepareTest $(@expr1073742150 "varScope4" $) $) ${ $setVerbose $(@expr1073742151 $false $) $; varScope4 $(@expr1073742152 $) $; $} $} $while $(@expr1073742153 $false $) ;
76: $do ${ $if $(@expr1073742154 $prepareTest $(@expr1073742155 "varScope5" $) $) ${ $setVerbose $(@expr1073742156 $false $) $; varScope5 $(@expr1073742157 $) $; $} $} $while $(@expr1073742158 $false $) ;
77: $do ${ $if $(@expr1073742159 $prepareTest $(@expr1073742160 "varScope6" $) $) ${ $setVerbose $(@expr1073742161 $false $) $; varScope6 $(@expr1073742162 $) $; $} $} $while $(@expr1073742163 $false $) ;
78: $do ${ $if $(@expr1073742164 $prepareTest $(@expr1073742165 "varScope7" $) $) ${ $setVerbose $(@expr1073742166 $false $) $; varScope7 $(@expr1073742167 $) $; $} $} $while $(@expr1073742168 $false $) ;
79: $do ${ $if $(@expr1073742169 $prepareTest $(@expr1073742170 "varScope8" $) $) ${ $setVerbose $(@expr1073742171 $false $) $; varScope8 $(@expr1073742172 $) $; $} $} $while $(@expr1073742173 $false $) ;
80: $do ${ $if $(@expr1073742174 $prepareTest $(@expr1073742175 "varScope9" $) $) ${ $setVerbose $(@expr1073742176 $false $) $; varScope9 $(@expr1073742177 $) $; $} $} $while $(@expr1073742178 $false $) ;
81: $do ${ $if $(@expr1073742179 $prepareTest $(@expr1073742180 "varScope10" $) $) ${ $setVerbose $(@expr1073742181 $false $) $; varScope10 $(@expr1073742182 $) $; $} $} $while $(@expr1073742183 $false $) ;
82: $do ${ $if $(@expr1073742184 $prepareTest $(@expr1073742185 "varScope11" $) $) ${ $setVerbose $(@expr1073742186 $false $) $; varScope11 $(@expr1073742187 $) $; $} $} $while $(@expr1073742188 $false $) ;
83: $do ${ $if $(@expr1073742189 $prepareTest $(@expr1073742190 "varScope12" $) $) ${ $setVerbose $(@expr1073742191 $false $) $; varScope12 $(@expr1073742192 $) $; $} $} $while $(@expr1073742193 $false $) ;
84: $do ${ $if $(@expr1073742194 $prepareTest $(@expr1073742195 "varScope13" $) $) ${ $setVerbose $(@expr1073742196 $false $) $; varScope13 $(@expr1073742197 $) $; $} $} $while $(@expr1073742198 $false $) ;
85: $do ${ $if $(@expr1073742199 $prepareTest $(@expr1073742200 "varScope14" $) $) ${ $setVerbose $(@expr1073742201 $false $) $; varScope14 $(@expr1073742202 $) $; $} $} $while $(@expr1073742203 $false $) ;
86: $do ${ $if $(@expr1073742204 $prepareTest $(@expr1073742205 "varScope15" $) $) ${ $setVerbose $(@expr1073742206 $false $) $; varScope15 $(@expr1073742207 $) $; $} $} $while $(@expr1073742208 $false $) ;
87: $do ${ $if $(@expr1073742209 $prepareTest $(@expr1073742210 "varScope16" $) $) ${ $setVerbose $(@expr1073742211 $false $) $; varScope16 $(@expr1073742212 $) $; $} $} $while $(@expr1073742213 $false $) ;
88: $do ${ $if $(@expr1073742214 $prepareTest $(@expr1073742215 "varScope17" $) $) ${ $setVerbose $(@expr1073742216 $false $) $; varScope17 $(@expr1073742217 $) $; $} $} $while $(@expr1073742218 $false $) ;
89: $do ${ $if $(@expr1073742219 $prepareTest $(@expr1073742220 "varScope18" $) $) ${ $setVerbose $(@expr1073742221 $false $) $; varScope18 $(@expr1073742222 $) $; $} $} $while $(@expr1073742223 $false $) ;
90: $do ${ $if $(@expr1073742224 $prepareTest $(@expr1073742225 "varScope20" $) $) ${ $setVerbose $(@expr1073742226 $false $) $; varScope20 $(@expr1073742227 $) $; $} $} $while $(@expr1073742228 $false $) ;
91: $do ${ $if $(@expr1073742229 $prepareTest $(@expr1073742230 "varScope21" $) $) ${ $setVerbose $(@expr1073742231 $false $) $; varScope21 $(@expr1073742232 $) $; $} $} $while $(@expr1073742233 $false $) ;
92: $do ${ $if $(@expr1073742234 $prepareTest $(@expr1073742235 "varScope22" $) $) ${ $setVerbose $(@expr1073742236 $false $) $; varScope22 $(@expr1073742237 $) $; $} $} $while $(@expr1073742238 $false $) ;
93: $do ${ $if $(@expr1073742239 $prepareTest $(@expr1073742240 "varScope23" $) $) ${ $setVerbose $(@expr1073742241 $false $) $; varScope23 $(@expr1073742242 $) $; $} $} $while $(@expr1073742243 $false $) ;
94: $do ${ $if $(@expr1073742244 $prepareTest $(@expr1073742245 "varScope24" $) $) ${ $setVerbose $(@expr1073742246 $false $) $; varScope24 $(@expr1073742247 $) $; $} $} $while $(@expr1073742248 $false $) ;
95: $do ${ $if $(@expr1073742249 $prepareTest $(@expr1073742250 "varScope25" $) $) ${ $setVerbose $(@expr1073742251 $false $) $; varScope25 $(@expr1073742252 $) $; $} $} $while $(@expr1073742253 $false $) ;
96: $do ${ $if $(@expr1073742254 $prepareTest $(@expr1073742255 "varScope26" $) $) ${ $setVerbose $(@expr1073742256 $false $) $; varScope26 $(@expr1073742257 $) $; $} $} $while $(@expr1073742258 $false $) ;
97: $do ${ $if $(@expr1073742259 $prepareTest $(@expr1073742260 "varScope27" $) $) ${ $setVerbose $(@expr1073742261 $false $) $; varScope27 $(@expr1073742262 $) $; $} $} $while $(@expr1073742263 $false $) ;
98: $do ${ $if $(@expr1073742264 $prepareTest $(@expr1073742265 "varScope28" $) $) ${ $setVerbose $(@expr1073742266 $false $) $; varScope28 $(@expr1073742267 $) $; $} $} $while $(@expr1073742268 $false $) ;
99: $do ${ $if $(@expr1073742269 $prepareTest $(@expr1073742270 "varScope29" $) $) ${ $setVerbose $(@expr1073742271 $false $) $; varScope29 $(@expr1073742272 $) $; $} $} $while $(@expr1073742273 $false $) ;
100: $do ${ $if $(@expr1073742274 $prepareTest $(@expr1073742275 "varScope30" $) $) ${ $setVerbose $(@expr1073742276 $false $) $; varScope30 $(@expr1073742277 $) $; $} $} $while $(@expr1073742278 $false $) ;
101:
102: $do ${ $if $(@expr1073742279 $prepareTest $(@expr1073742280 "oldStylePointerCast" $) $) ${ $setVerbose $(@expr1073742281 $false $) $; oldStylePointerCast $(@expr1073742282 $) $; $} $} $while $(@expr1073742283 $false $) ;
103: $do ${ $if $(@expr1073742284 $prepareTest $(@expr1073742285 "invalidPointerCast" $) $) ${ $setVerbose $(@expr1073742286 $false $) $; invalidPointerCast $(@expr1073742287 $) $; $} $} $while $(@expr1073742288 $false $) ;
104:
105: $do ${ $if $(@expr1073742289 $prepareTest $(@expr1073742290 "passedByValue" $) $) ${ $setVerbose $(@expr1073742291 $false $) $; passedByValue $(@expr1073742292 $) $; $} $} $while $(@expr1073742293 $false $) ;
106: $do ${ $if $(@expr1073742294 $prepareTest $(@expr1073742295 "passedByValue_nonConst" $) $) ${ $setVerbose $(@expr1073742296 $false $) $; passedByValue_nonConst $(@expr1073742297 $) $; $} $} $while $(@expr1073742298 $false $) ;
107: $do ${ $if $(@expr1073742299 $prepareTest $(@expr1073742300 "passedByValue_externC" $) $) ${ $setVerbose $(@expr1073742301 $false $) $; passedByValue_externC $(@expr1073742302 $) $; $} $} $while $(@expr1073742303 $false $) ;
108:
109: $do ${ $if $(@expr1073742304 $prepareTest $(@expr1073742305 "constVariable" $) $) ${ $setVerbose $(@expr1073742306 $false $) $; constVariable $(@expr1073742307 $) $; $} $} $while $(@expr1073742308 $false $) ;
110: $do ${ $if $(@expr1073742309 $prepareTest $(@expr1073742310 "constParameterCallback" $) $) ${ $setVerbose $(@expr1073742311 $false $) $; constParameterCallback $(@expr1073742312 $) $; $} $} $while $(@expr1073742313 $false $) ;
111: $do ${ $if $(@expr1073742314 $prepareTest $(@expr1073742315 "constPointer" $) $) ${ $setVerbose $(@expr1073742316 $false $) $; constPointer $(@expr1073742317 $) $; $} $} $while $(@expr1073742318 $false $) ;
112:
113: $do ${ $if $(@expr1073742319 $prepareTest $(@expr1073742320 "switchRedundantAssignmentTest" $) $) ${ $setVerbose $(@expr1073742321 $false $) $; switchRedundantAssignmentTest $(@expr1073742322 $) $; $} $} $while $(@expr1073742323 $false $) ;
114: $do ${ $if $(@expr1073742324 $prepareTest $(@expr1073742325 "switchRedundantOperationTest" $) $) ${ $setVerbose $(@expr1073742326 $false $) $; switchRedundantOperationTest $(@expr1073742327 $) $; $} $} $while $(@expr1073742328 $false $) ;
115: $do ${ $if $(@expr1073742329 $prepareTest $(@expr1073742330 "switchRedundantBitwiseOperationTest" $) $) ${ $setVerbose $(@expr1073742331 $false $) $; switchRedundantBitwiseOperationTest $(@expr1073742332 $) $; $} $} $while $(@expr1073742333 $false $) ;
116: $do ${ $if $(@expr1073742334 $prepareTest $(@expr1073742335 "unreachableCode" $) $) ${ $setVerbose $(@expr1073742336 $false $) $; unreachableCode $(@expr1073742337 $) $; $} $} $while $(@expr1073742338 $false $) ;
117:
118: $do ${ $if $(@expr1073742339 $prepareTest $(@expr1073742340 "suspiciousCase" $) $) ${ $setVerbose $(@expr1073742341 $false $) $; suspiciousCase $(@expr1073742342 $) $; $} $} $while $(@expr1073742343 $false $) ;
119: $do ${ $if $(@expr1073742344 $prepareTest $(@expr1073742345 "suspiciousEqualityComparison" $) $) ${ $setVerbose $(@expr1073742346 $false $) $; suspiciousEqualityComparison $(@expr1073742347 $) $; $} $} $while $(@expr1073742348 $false $) ;
120: $do ${ $if $(@expr1073742349 $prepareTest $(@expr1073742350 "suspiciousUnaryPlusMinus" $) $) ${ $setVerbose $(@expr1073742351 $false $) $; suspiciousUnaryPlusMinus $(@expr1073742352 $) $; $} $} $while $(@expr1073742353 $false $) ;
121:
122: $do ${ $if $(@expr1073742354 $prepareTest $(@expr1073742355 "selfAssignment" $) $) ${ $setVerbose $(@expr1073742356 $false $) $; selfAssignment $(@expr1073742357 $) $; $} $} $while $(@expr1073742358 $false $) ;
123: $do ${ $if $(@expr1073742359 $prepareTest $(@expr1073742360 "trac1132" $) $) ${ $setVerbose $(@expr1073742361 $false $) $; trac1132 $(@expr1073742362 $) $; $} $} $while $(@expr1073742363 $false $) ;
124: $do ${ $if $(@expr1073742364 $prepareTest $(@expr1073742365 "testMisusedScopeObjectDoesNotPickFunction1" $) $) ${ $setVerbose $(@expr1073742366 $false $) $; testMisusedScopeObjectDoesNotPickFunction1 $(@expr1073742367 $) $; $} $} $while $(@expr1073742368 $false $) ;
125: $do ${ $if $(@expr1073742369 $prepareTest $(@expr1073742370 "testMisusedScopeObjectDoesNotPickFunction2" $) $) ${ $setVerbose $(@expr1073742371 $false $) $; testMisusedScopeObjectDoesNotPickFunction2 $(@expr1073742372 $) $; $} $} $while $(@expr1073742373 $false $) ;
126: $do ${ $if $(@expr1073742374 $prepareTest $(@expr1073742375 "testMisusedScopeObjectPicksClass" $) $) ${ $setVerbose $(@expr1073742376 $false $) $; testMisusedScopeObjectPicksClass $(@expr1073742377 $) $; $} $} $while $(@expr1073742378 $false $) ;
127: $do ${ $if $(@expr1073742379 $prepareTest $(@expr1073742380 "testMisusedScopeObjectPicksStruct" $) $) ${ $setVerbose $(@expr1073742381 $false $) $; testMisusedScopeObjectPicksStruct $(@expr1073742382 $) $; $} $} $while $(@expr1073742383 $false $) ;
128: $do ${ $if $(@expr1073742384 $prepareTest $(@expr1073742385 "testMisusedScopeObjectDoesNotPickIf" $) $) ${ $setVerbose $(@expr1073742386 $false $) $; testMisusedScopeObjectDoesNotPickIf $(@expr1073742387 $) $; $} $} $while $(@expr1073742388 $false $) ;
129: $do ${ $if $(@expr1073742389 $prepareTest $(@expr1073742390 "testMisusedScopeObjectDoesNotPickConstructorDeclaration" $) $) ${ $setVerbose $(@expr1073742391 $false $) $; testMisusedScopeObjectDoesNotPickConstructorDeclaration $(@expr1073742392 $) $; $} $} $while $(@expr1073742393 $false $) ;
130: $do ${ $if $(@expr1073742394 $prepareTest $(@expr1073742395 "testMisusedScopeObjectDoesNotPickFunctor" $) $) ${ $setVerbose $(@expr1073742396 $false $) $; testMisusedScopeObjectDoesNotPickFunctor $(@expr1073742397 $) $; $} $} $while $(@expr1073742398 $false $) ;
131: $do ${ $if $(@expr1073742399 $prepareTest $(@expr1073742400 "testMisusedScopeObjectDoesNotPickLocalClassConstructors" $) $) ${ $setVerbose $(@expr1073742401 $false $) $; testMisusedScopeObjectDoesNotPickLocalClassConstructors $(@expr1073742402 $) $; $} $} $while $(@expr1073742403 $false $) ;
132: $do ${ $if $(@expr1073742404 $prepareTest $(@expr1073742405 "testMisusedScopeObjectDoesNotPickUsedObject" $) $) ${ $setVerbose $(@expr1073742406 $false $) $; testMisusedScopeObjectDoesNotPickUsedObject $(@expr1073742407 $) $; $} $} $while $(@expr1073742408 $false $) ;
133: $do ${ $if $(@expr1073742409 $prepareTest $(@expr1073742410 "testMisusedScopeObjectDoesNotPickPureC" $) $) ${ $setVerbose $(@expr1073742411 $false $) $; testMisusedScopeObjectDoesNotPickPureC $(@expr1073742412 $) $; $} $} $while $(@expr1073742413 $false $) ;
134: $do ${ $if $(@expr1073742414 $prepareTest $(@expr1073742415 "testMisusedScopeObjectDoesNotPickNestedClass" $) $) ${ $setVerbose $(@expr1073742416 $false $) $; testMisusedScopeObjectDoesNotPickNestedClass $(@expr1073742417 $) $; $} $} $while $(@expr1073742418 $false $) ;
135: $do ${ $if $(@expr1073742419 $prepareTest $(@expr1073742420 "testMisusedScopeObjectInConstructor" $) $) ${ $setVerbose $(@expr1073742421 $false $) $; testMisusedScopeObjectInConstructor $(@expr1073742422 $) $; $} $} $while $(@expr1073742423 $false $) ;
136: $do ${ $if $(@expr1073742424 $prepareTest $(@expr1073742425 "testMisusedScopeObjectNoCodeAfter" $) $) ${ $setVerbose $(@expr1073742426 $false $) $; testMisusedScopeObjectNoCodeAfter $(@expr1073742427 $) $; $} $} $while $(@expr1073742428 $false $) ;
137: $do ${ $if $(@expr1073742429 $prepareTest $(@expr1073742430 "trac2071" $) $) ${ $setVerbose $(@expr1073742431 $false $) $; trac2071 $(@expr1073742432 $) $; $} $} $while $(@expr1073742433 $false $) ;
138: $do ${ $if $(@expr1073742434 $prepareTest $(@expr1073742435 "trac2084" $) $) ${ $setVerbose $(@expr1073742436 $false $) $; trac2084 $(@expr1073742437 $) $; $} $} $while $(@expr1073742438 $false $) ;
139: $do ${ $if $(@expr1073742439 $prepareTest $(@expr1073742440 "trac3693" $) $) ${ $setVerbose $(@expr1073742441 $false $) $; trac3693 $(@expr1073742442 $) $; $} $} $while $(@expr1073742443 $false $) ;
140:
141: $do ${ $if $(@expr1073742444 $prepareTest $(@expr1073742445 "clarifyCalculation" $) $) ${ $setVerbose $(@expr1073742446 $false $) $; clarifyCalculation $(@expr1073742447 $) $; $} $} $while $(@expr1073742448 $false $) ;
142: $do ${ $if $(@expr1073742449 $prepareTest $(@expr1073742450 "clarifyStatement" $) $) ${ $setVerbose $(@expr1073742451 $false $) $; clarifyStatement $(@expr1073742452 $) $; $} $} $while $(@expr1073742453 $false $) ;
143:
144: $do ${ $if $(@expr1073742454 $prepareTest $(@expr1073742455 "duplicateBranch" $) $) ${ $setVerbose $(@expr1073742456 $false $) $; duplicateBranch $(@expr1073742457 $) $; $} $} $while $(@expr1073742458 $false $) ;
145: $do ${ $if $(@expr1073742459 $prepareTest $(@expr1073742460 "duplicateBranch1" $) $) ${ $setVerbose $(@expr1073742461 $false $) $; duplicateBranch1 $(@expr1073742462 $) $; $} $} $while $(@expr1073742463 $false $) ;
146: $do ${ $if $(@expr1073742464 $prepareTest $(@expr1073742465 "duplicateBranch2" $) $) ${ $setVerbose $(@expr1073742466 $false $) $; duplicateBranch2 $(@expr1073742467 $) $; $} $} $while $(@expr1073742468 $false $) ;
147: $do ${ $if $(@expr1073742469 $prepareTest $(@expr1073742470 "duplicateBranch3" $) $) ${ $setVerbose $(@expr1073742471 $false $) $; duplicateBranch3 $(@expr1073742472 $) $; $} $} $while $(@expr1073742473 $false $) ;
148: $do ${ $if $(@expr1073742474 $prepareTest $(@expr1073742475 "duplicateBranch4" $) $) ${ $setVerbose $(@expr1073742476 $false $) $; duplicateBranch4 $(@expr1073742477 $) $; $} $} $while $(@expr1073742478 $false $) ;
149: $do ${ $if $(@expr1073742479 $prepareTest $(@expr1073742480 "duplicateExpression1" $) $) ${ $setVerbose $(@expr1073742481 $false $) $; duplicateExpression1 $(@expr1073742482 $) $; $} $} $while $(@expr1073742483 $false $) ;
150: $do ${ $if $(@expr1073742484 $prepareTest $(@expr1073742485 "duplicateExpression2" $) $) ${ $setVerbose $(@expr1073742486 $false $) $; duplicateExpression2 $(@expr1073742487 $) $; $} $} $while $(@expr1073742488 $false $) ;
151: $do ${ $if $(@expr1073742489 $prepareTest $(@expr1073742490 "duplicateExpression3" $) $) ${ $setVerbose $(@expr1073742491 $false $) $; duplicateExpression3 $(@expr1073742492 $) $; $} $} $while $(@expr1073742493 $false $) ;
152: $do ${ $if $(@expr1073742494 $prepareTest $(@expr1073742495 "duplicateExpression4" $) $) ${ $setVerbose $(@expr1073742496 $false $) $; duplicateExpression4 $(@expr1073742497 $) $; $} $} $while $(@expr1073742498 $false $) ;
153: $do ${ $if $(@expr1073742499 $prepareTest $(@expr1073742500 "duplicateExpression5" $) $) ${ $setVerbose $(@expr1073742501 $false $) $; duplicateExpression5 $(@expr1073742502 $) $; $} $} $while $(@expr1073742503 $false $) ;
154: $do ${ $if $(@expr1073742504 $prepareTest $(@expr1073742505 "duplicateExpression6" $) $) ${ $setVerbose $(@expr1073742506 $false $) $; duplicateExpression6 $(@expr1073742507 $) $; $} $} $while $(@expr1073742508 $false $) ;
155: $do ${ $if $(@expr1073742509 $prepareTest $(@expr1073742510 "duplicateExpression7" $) $) ${ $setVerbose $(@expr1073742511 $false $) $; duplicateExpression7 $(@expr1073742512 $) $; $} $} $while $(@expr1073742513 $false $) ;
156: $do ${ $if $(@expr1073742514 $prepareTest $(@expr1073742515 "duplicateExpression8" $) $) ${ $setVerbose $(@expr1073742516 $false $) $; duplicateExpression8 $(@expr1073742517 $) $; $} $} $while $(@expr1073742518 $false $) ;
157: $do ${ $if $(@expr1073742519 $prepareTest $(@expr1073742520 "duplicateExpression9" $) $) ${ $setVerbose $(@expr1073742521 $false $) $; duplicateExpression9 $(@expr1073742522 $) $; $} $} $while $(@expr1073742523 $false $) ;
158: $do ${ $if $(@expr1073742524 $prepareTest $(@expr1073742525 "duplicateExpression10" $) $) ${ $setVerbose $(@expr1073742526 $false $) $; duplicateExpression10 $(@expr1073742527 $) $; $} $} $while $(@expr1073742528 $false $) ;
159: $do ${ $if $(@expr1073742529 $prepareTest $(@expr1073742530 "duplicateExpression11" $) $) ${ $setVerbose $(@expr1073742531 $false $) $; duplicateExpression11 $(@expr1073742532 $) $; $} $} $while $(@expr1073742533 $false $) ;
160: $do ${ $if $(@expr1073742534 $prepareTest $(@expr1073742535 "duplicateExpression12" $) $) ${ $setVerbose $(@expr1073742536 $false $) $; duplicateExpression12 $(@expr1073742537 $) $; $} $} $while $(@expr1073742538 $false $) ;
161: $do ${ $if $(@expr1073742539 $prepareTest $(@expr1073742540 "duplicateExpression13" $) $) ${ $setVerbose $(@expr1073742541 $false $) $; duplicateExpression13 $(@expr1073742542 $) $; $} $} $while $(@expr1073742543 $false $) ;
162: $do ${ $if $(@expr1073742544 $prepareTest $(@expr1073742545 "duplicateExpression14" $) $) ${ $setVerbose $(@expr1073742546 $false $) $; duplicateExpression14 $(@expr1073742547 $) $; $} $} $while $(@expr1073742548 $false $) ;
163: $do ${ $if $(@expr1073742549 $prepareTest $(@expr1073742550 "duplicateExpression15" $) $) ${ $setVerbose $(@expr1073742551 $false $) $; duplicateExpression15 $(@expr1073742552 $) $; $} $} $while $(@expr1073742553 $false $) ;
164: $do ${ $if $(@expr1073742554 $prepareTest $(@expr1073742555 "duplicateExpression16" $) $) ${ $setVerbose $(@expr1073742556 $false $) $; duplicateExpression16 $(@expr1073742557 $) $; $} $} $while $(@expr1073742558 $false $) ;
165: $do ${ $if $(@expr1073742559 $prepareTest $(@expr1073742560 "duplicateExpressionLoop" $) $) ${ $setVerbose $(@expr1073742561 $false $) $; duplicateExpressionLoop $(@expr1073742562 $) $; $} $} $while $(@expr1073742563 $false $) ;
166: $do ${ $if $(@expr1073742564 $prepareTest $(@expr1073742565 "duplicateValueTernary" $) $) ${ $setVerbose $(@expr1073742566 $false $) $; duplicateValueTernary $(@expr1073742567 $) $; $} $} $while $(@expr1073742568 $false $) ;
167: $do ${ $if $(@expr1073742569 $prepareTest $(@expr1073742570 "duplicateExpressionTernary" $) $) ${ $setVerbose $(@expr1073742571 $false $) $; duplicateExpressionTernary $(@expr1073742572 $) $; $} $} $while $(@expr1073742573 $false $) ;
168: $do ${ $if $(@expr1073742574 $prepareTest $(@expr1073742575 "duplicateExpressionTemplate" $) $) ${ $setVerbose $(@expr1073742576 $false $) $; duplicateExpressionTemplate $(@expr1073742577 $) $; $} $} $while $(@expr1073742578 $false $) ;
169: $do ${ $if $(@expr1073742579 $prepareTest $(@expr1073742580 "duplicateExpressionCompareWithZero" $) $) ${ $setVerbose $(@expr1073742581 $false $) $; duplicateExpressionCompareWithZero $(@expr1073742582 $) $; $} $} $while $(@expr1073742583 $false $) ;
170: $do ${ $if $(@expr1073742584 $prepareTest $(@expr1073742585 "oppositeExpression" $) $) ${ $setVerbose $(@expr1073742586 $false $) $; oppositeExpression $(@expr1073742587 $) $; $} $} $while $(@expr1073742588 $false $) ;
171: $do ${ $if $(@expr1073742589 $prepareTest $(@expr1073742590 "duplicateVarExpression" $) $) ${ $setVerbose $(@expr1073742591 $false $) $; duplicateVarExpression $(@expr1073742592 $) $; $} $} $while $(@expr1073742593 $false $) ;
172: $do ${ $if $(@expr1073742594 $prepareTest $(@expr1073742595 "duplicateVarExpressionUnique" $) $) ${ $setVerbose $(@expr1073742596 $false $) $; duplicateVarExpressionUnique $(@expr1073742597 $) $; $} $} $while $(@expr1073742598 $false $) ;
173: $do ${ $if $(@expr1073742599 $prepareTest $(@expr1073742600 "duplicateVarExpressionAssign" $) $) ${ $setVerbose $(@expr1073742601 $false $) $; duplicateVarExpressionAssign $(@expr1073742602 $) $; $} $} $while $(@expr1073742603 $false $) ;
174: $do ${ $if $(@expr1073742604 $prepareTest $(@expr1073742605 "duplicateVarExpressionCrash" $) $) ${ $setVerbose $(@expr1073742606 $false $) $; duplicateVarExpressionCrash $(@expr1073742607 $) $; $} $} $while $(@expr1073742608 $false $) ;
175: $do ${ $if $(@expr1073742609 $prepareTest $(@expr1073742610 "multiConditionSameExpression" $) $) ${ $setVerbose $(@expr1073742611 $false $) $; multiConditionSameExpression $(@expr1073742612 $) $; $} $} $while $(@expr1073742613 $false $) ;
176:
177: $do ${ $if $(@expr1073742614 $prepareTest $(@expr1073742615 "checkSignOfUnsignedVariable" $) $) ${ $setVerbose $(@expr1073742616 $false $) $; checkSignOfUnsignedVariable $(@expr1073742617 $) $; $} $} $while $(@expr1073742618 $false $) ;
178: $do ${ $if $(@expr1073742619 $prepareTest $(@expr1073742620 "checkSignOfPointer" $) $) ${ $setVerbose $(@expr1073742621 $false $) $; checkSignOfPointer $(@expr1073742622 $) $; $} $} $while $(@expr1073742623 $false $) ;
179:
180: $do ${ $if $(@expr1073742624 $prepareTest $(@expr1073742625 "checkSuspiciousSemicolon1" $) $) ${ $setVerbose $(@expr1073742626 $false $) $; checkSuspiciousSemicolon1 $(@expr1073742627 $) $; $} $} $while $(@expr1073742628 $false $) ;
181: $do ${ $if $(@expr1073742629 $prepareTest $(@expr1073742630 "checkSuspiciousSemicolon2" $) $) ${ $setVerbose $(@expr1073742631 $false $) $; checkSuspiciousSemicolon2 $(@expr1073742632 $) $; $} $} $while $(@expr1073742633 $false $) ;
182: $do ${ $if $(@expr1073742634 $prepareTest $(@expr1073742635 "checkSuspiciousSemicolon3" $) $) ${ $setVerbose $(@expr1073742636 $false $) $; checkSuspiciousSemicolon3 $(@expr1073742637 $) $; $} $} $while $(@expr1073742638 $false $) ;
183: $do ${ $if $(@expr1073742639 $prepareTest $(@expr1073742640 "checkSuspiciousComparison" $) $) ${ $setVerbose $(@expr1073742641 $false $) $; checkSuspiciousComparison $(@expr1073742642 $) $; $} $} $while $(@expr1073742643 $false $) ;
184:
185: $do ${ $if $(@expr1073742644 $prepareTest $(@expr1073742645 "checkInvalidFree" $) $) ${ $setVerbose $(@expr1073742646 $false $) $; checkInvalidFree $(@expr1073742647 $) $; $} $} $while $(@expr1073742648 $false $) ;
186:
187: $do ${ $if $(@expr1073742649 $prepareTest $(@expr1073742650 "checkRedundantCopy" $) $) ${ $setVerbose $(@expr1073742651 $false $) $; checkRedundantCopy $(@expr1073742652 $) $; $} $} $while $(@expr1073742653 $false $) ;
188:
189: $do ${ $if $(@expr1073742654 $prepareTest $(@expr1073742655 "checkNegativeShift" $) $) ${ $setVerbose $(@expr1073742656 $false $) $; checkNegativeShift $(@expr1073742657 $) $; $} $} $while $(@expr1073742658 $false $) ;
190:
191: $do ${ $if $(@expr1073742659 $prepareTest $(@expr1073742660 "incompleteArrayFill" $) $) ${ $setVerbose $(@expr1073742661 $false $) $; incompleteArrayFill $(@expr1073742662 $) $; $} $} $while $(@expr1073742663 $false $) ;
192:
193: $do ${ $if $(@expr1073742664 $prepareTest $(@expr1073742665 "redundantVarAssignment" $) $) ${ $setVerbose $(@expr1073742666 $false $) $; redundantVarAssignment $(@expr1073742667 $) $; $} $} $while $(@expr1073742668 $false $) ;
194: $do ${ $if $(@expr1073742669 $prepareTest $(@expr1073742670 "redundantVarAssignment_trivial" $) $) ${ $setVerbose $(@expr1073742671 $false $) $; redundantVarAssignment_trivial $(@expr1073742672 $) $; $} $} $while $(@expr1073742673 $false $) ;
195: $do ${ $if $(@expr1073742674 $prepareTest $(@expr1073742675 "redundantVarAssignment_struct" $) $) ${ $setVerbose $(@expr1073742676 $false $) $; redundantVarAssignment_struct $(@expr1073742677 $) $; $} $} $while $(@expr1073742678 $false $) ;
196: $do ${ $if $(@expr1073742679 $prepareTest $(@expr1073742680 "redundantVarAssignment_7133" $) $) ${ $setVerbose $(@expr1073742681 $false $) $; redundantVarAssignment_7133 $(@expr1073742682 $) $; $} $} $while $(@expr1073742683 $false $) ;
197: $do ${ $if $(@expr1073742684 $prepareTest $(@expr1073742685 "redundantVarAssignment_stackoverflow" $) $) ${ $setVerbose $(@expr1073742686 $false $) $; redundantVarAssignment_stackoverflow $(@expr1073742687 $) $; $} $} $while $(@expr1073742688 $false $) ;
198: $do ${ $if $(@expr1073742689 $prepareTest $(@expr1073742690 "redundantVarAssignment_lambda" $) $) ${ $setVerbose $(@expr1073742691 $false $) $; redundantVarAssignment_lambda $(@expr1073742692 $) $; $} $} $while $(@expr1073742693 $false $) ;
199: $do ${ $if $(@expr1073742694 $prepareTest $(@expr1073742695 "redundantVarAssignment_loop" $) $) ${ $setVerbose $(@expr1073742696 $false $) $; redundantVarAssignment_loop $(@expr1073742697 $) $; $} $} $while $(@expr1073742698 $false $) ;
200: $do ${ $if $(@expr1073742699 $prepareTest $(@expr1073742700 "redundantVarAssignment_after_switch" $) $) ${ $setVerbose $(@expr1073742701 $false $) $; redundantVarAssignment_after_switch $(@expr1073742702 $) $; $} $} $while $(@expr1073742703 $false $) ;
201: $do ${ $if $(@expr1073742704 $prepareTest $(@expr1073742705 "redundantVarAssignment_pointer" $) $) ${ $setVerbose $(@expr1073742706 $false $) $; redundantVarAssignment_pointer $(@expr1073742707 $) $; $} $} $while $(@expr1073742708 $false $) ;
202: $do ${ $if $(@expr1073742709 $prepareTest $(@expr1073742710 "redundantVarAssignment_pointer_parameter" $) $) ${ $setVerbose $(@expr1073742711 $false $) $; redundantVarAssignment_pointer_parameter $(@expr1073742712 $) $; $} $} $while $(@expr1073742713 $false $) ;
203: $do ${ $if $(@expr1073742714 $prepareTest $(@expr1073742715 "redundantVarAssignment_array" $) $) ${ $setVerbose $(@expr1073742716 $false $) $; redundantVarAssignment_array $(@expr1073742717 $) $; $} $} $while $(@expr1073742718 $false $) ;
204: $do ${ $if $(@expr1073742719 $prepareTest $(@expr1073742720 "redundantVarAssignment_switch_break" $) $) ${ $setVerbose $(@expr1073742721 $false $) $; redundantVarAssignment_switch_break $(@expr1073742722 $) $; $} $} $while $(@expr1073742723 $false $) ;
205: $do ${ $if $(@expr1073742724 $prepareTest $(@expr1073742725 "redundantInitialization" $) $) ${ $setVerbose $(@expr1073742726 $false $) $; redundantInitialization $(@expr1073742727 $) $; $} $} $while $(@expr1073742728 $false $) ;
206: $do ${ $if $(@expr1073742729 $prepareTest $(@expr1073742730 "redundantMemWrite" $) $) ${ $setVerbose $(@expr1073742731 $false $) $; redundantMemWrite $(@expr1073742732 $) $; $} $} $while $(@expr1073742733 $false $) ;
207:
208: $do ${ $if $(@expr1073742734 $prepareTest $(@expr1073742735 "varFuncNullUB" $) $) ${ $setVerbose $(@expr1073742736 $false $) $; varFuncNullUB $(@expr1073742737 $) $; $} $} $while $(@expr1073742738 $false $) ;
209:
210: $do ${ $if $(@expr1073742739 $prepareTest $(@expr1073742740 "checkPipeParameterSize" $) $) ${ $setVerbose $(@expr1073742741 $false $) $; checkPipeParameterSize $(@expr1073742742 $) $; $} $} $while $(@expr1073742743 $false $) ;
211:
212: $do ${ $if $(@expr1073742744 $prepareTest $(@expr1073742745 "checkCastIntToCharAndBack" $) $) ${ $setVerbose $(@expr1073742746 $false $) $; checkCastIntToCharAndBack $(@expr1073742747 $) $; $} $} $while $(@expr1073742748 $false $) ;
213:
214: $do ${ $if $(@expr1073742749 $prepareTest $(@expr1073742750 "checkCommaSeparatedReturn" $) $) ${ $setVerbose $(@expr1073742751 $false $) $; checkCommaSeparatedReturn $(@expr1073742752 $) $; $} $} $while $(@expr1073742753 $false $) ;
215: $do ${ $if $(@expr1073742754 $prepareTest $(@expr1073742755 "checkPassByReference" $) $) ${ $setVerbose $(@expr1073742756 $false $) $; checkPassByReference $(@expr1073742757 $) $; $} $} $while $(@expr1073742758 $false $) ;
216:
217: $do ${ $if $(@expr1073742759 $prepareTest $(@expr1073742760 "checkComparisonFunctionIsAlwaysTrueOrFalse" $) $) ${ $setVerbose $(@expr1073742761 $false $) $; checkComparisonFunctionIsAlwaysTrueOrFalse $(@expr1073742762 $) $; $} $} $while $(@expr1073742763 $false $) ;
218:
219: $do ${ $if $(@expr1073742764 $prepareTest $(@expr1073742765 "integerOverflow" $) $) ${ $setVerbose $(@expr1073742766 $false $) $; integerOverflow $(@expr1073742767 $) $; $} $} $while $(@expr1073742768 $false $) ;
220:
221: $do ${ $if $(@expr1073742769 $prepareTest $(@expr1073742770 "redundantPointerOp" $) $) ${ $setVerbose $(@expr1073742771 $false $) $; redundantPointerOp $(@expr1073742772 $) $; $} $} $while $(@expr1073742773 $false $) ;
222: $do ${ $if $(@expr1073742774 $prepareTest $(@expr1073742775 "test_isSameExpression" $) $) ${ $setVerbose $(@expr1073742776 $false $) $; test_isSameExpression $(@expr1073742777 $) $; $} $} $while $(@expr1073742778 $false $) ;
223: $do ${ $if $(@expr1073742779 $prepareTest $(@expr1073742780 "raceAfterInterlockedDecrement" $) $) ${ $setVerbose $(@expr1073742781 $false $) $; raceAfterInterlockedDecrement $(@expr1073742782 $) $; $} $} $while $(@expr1073742783 $false $) ;
224:
225: $do ${ $if $(@expr1073742784 $prepareTest $(@expr1073742785 "testUnusedLabel" $) $) ${ $setVerbose $(@expr1073742786 $false $) $; testUnusedLabel $(@expr1073742787 $) $; $} $} $while $(@expr1073742788 $false $) ;
226:
227: $do ${ $if $(@expr1073742789 $prepareTest $(@expr1073742790 "testEvaluationOrder" $) $) ${ $setVerbose $(@expr1073742791 $false $) $; testEvaluationOrder $(@expr1073742792 $) $; $} $} $while $(@expr1073742793 $false $) ;
228: $do ${ $if $(@expr1073742794 $prepareTest $(@expr1073742795 "testEvaluationOrderSelfAssignment" $) $) ${ $setVerbose $(@expr1073742796 $false $) $; testEvaluationOrderSelfAssignment $(@expr1073742797 $) $; $} $} $while $(@expr1073742798 $false $) ;
229: $do ${ $if $(@expr1073742799 $prepareTest $(@expr1073742800 "testEvaluationOrderMacro" $) $) ${ $setVerbose $(@expr1073742801 $false $) $; testEvaluationOrderMacro $(@expr1073742802 $) $; $} $} $while $(@expr1073742803 $false $) ;
230: $do ${ $if $(@expr1073742804 $prepareTest $(@expr1073742805 "testEvaluationOrderSequencePointsFunctionCall" $) $) ${ $setVerbose $(@expr1073742806 $false $) $; testEvaluationOrderSequencePointsFunctionCall $(@expr1073742807 $) $; $} $} $while $(@expr1073742808 $false $) ;
231: $do ${ $if $(@expr1073742809 $prepareTest $(@expr1073742810 "testEvaluationOrderSequencePointsComma" $) $) ${ $setVerbose $(@expr1073742811 $false $) $; testEvaluationOrderSequencePointsComma $(@expr1073742812 $) $; $} $} $while $(@expr1073742813 $false $) ;
232: $do ${ $if $(@expr1073742814 $prepareTest $(@expr1073742815 "testEvaluationOrderSizeof" $) $) ${ $setVerbose $(@expr1073742816 $false $) $; testEvaluationOrderSizeof $(@expr1073742817 $) $; $} $} $while $(@expr1073742818 $false $) ;
233:
234: $do ${ $if $(@expr1073742819 $prepareTest $(@expr1073742820 "testUnsignedLessThanZero" $) $) ${ $setVerbose $(@expr1073742821 $false $) $; testUnsignedLessThanZero $(@expr1073742822 $) $; $} $} $while $(@expr1073742823 $false $) ;
235:
236: $do ${ $if $(@expr1073742824 $prepareTest $(@expr1073742825 "doubleMove1" $) $) ${ $setVerbose $(@expr1073742826 $false $) $; doubleMove1 $(@expr1073742827 $) $; $} $} $while $(@expr1073742828 $false $) ;
237: $do ${ $if $(@expr1073742829 $prepareTest $(@expr1073742830 "doubleMoveMemberInitialization1" $) $) ${ $setVerbose $(@expr1073742831 $false $) $; doubleMoveMemberInitialization1 $(@expr1073742832 $) $; $} $} $while $(@expr1073742833 $false $) ;
238: $do ${ $if $(@expr1073742834 $prepareTest $(@expr1073742835 "doubleMoveMemberInitialization2" $) $) ${ $setVerbose $(@expr1073742836 $false $) $; doubleMoveMemberInitialization2 $(@expr1073742837 $) $; $} $} $while $(@expr1073742838 $false $) ;
239: $do ${ $if $(@expr1073742839 $prepareTest $(@expr1073742840 "doubleMoveMemberInitialization3" $) $) ${ $setVerbose $(@expr1073742841 $false $) $; doubleMoveMemberInitialization3 $(@expr1073742842 $) $; $} $} $while $(@expr1073742843 $false $) ;
240: $do ${ $if $(@expr1073742844 $prepareTest $(@expr1073742845 "moveAndAssign1" $) $) ${ $setVerbose $(@expr1073742846 $false $) $; moveAndAssign1 $(@expr1073742847 $) $; $} $} $while $(@expr1073742848 $false $) ;
241: $do ${ $if $(@expr1073742849 $prepareTest $(@expr1073742850 "moveAndAssign2" $) $) ${ $setVerbose $(@expr1073742851 $false $) $; moveAndAssign2 $(@expr1073742852 $) $; $} $} $while $(@expr1073742853 $false $) ;
242: $do ${ $if $(@expr1073742854 $prepareTest $(@expr1073742855 "moveAssignMoveAssign" $) $) ${ $setVerbose $(@expr1073742856 $false $) $; moveAssignMoveAssign $(@expr1073742857 $) $; $} $} $while $(@expr1073742858 $false $) ;
243: $do ${ $if $(@expr1073742859 $prepareTest $(@expr1073742860 "moveAndReset1" $) $) ${ $setVerbose $(@expr1073742861 $false $) $; moveAndReset1 $(@expr1073742862 $) $; $} $} $while $(@expr1073742863 $false $) ;
244: $do ${ $if $(@expr1073742864 $prepareTest $(@expr1073742865 "moveAndReset2" $) $) ${ $setVerbose $(@expr1073742866 $false $) $; moveAndReset2 $(@expr1073742867 $) $; $} $} $while $(@expr1073742868 $false $) ;
245: $do ${ $if $(@expr1073742869 $prepareTest $(@expr1073742870 "moveResetMoveReset" $) $) ${ $setVerbose $(@expr1073742871 $false $) $; moveResetMoveReset $(@expr1073742872 $) $; $} $} $while $(@expr1073742873 $false $) ;
246: $do ${ $if $(@expr1073742874 $prepareTest $(@expr1073742875 "moveAndFunctionParameter" $) $) ${ $setVerbose $(@expr1073742876 $false $) $; moveAndFunctionParameter $(@expr1073742877 $) $; $} $} $while $(@expr1073742878 $false $) ;
247: $do ${ $if $(@expr1073742879 $prepareTest $(@expr1073742880 "moveAndFunctionParameterReference" $) $) ${ $setVerbose $(@expr1073742881 $false $) $; moveAndFunctionParameterReference $(@expr1073742882 $) $; $} $} $while $(@expr1073742883 $false $) ;
248: $do ${ $if $(@expr1073742884 $prepareTest $(@expr1073742885 "moveAndFunctionParameterConstReference" $) $) ${ $setVerbose $(@expr1073742886 $false $) $; moveAndFunctionParameterConstReference $(@expr1073742887 $) $; $} $} $while $(@expr1073742888 $false $) ;
249: $do ${ $if $(@expr1073742889 $prepareTest $(@expr1073742890 "moveAndFunctionParameterUnknown" $) $) ${ $setVerbose $(@expr1073742891 $false $) $; moveAndFunctionParameterUnknown $(@expr1073742892 $) $; $} $} $while $(@expr1073742893 $false $) ;
250: $do ${ $if $(@expr1073742894 $prepareTest $(@expr1073742895 "moveAndReturn" $) $) ${ $setVerbose $(@expr1073742896 $false $) $; moveAndReturn $(@expr1073742897 $) $; $} $} $while $(@expr1073742898 $false $) ;
251: $do ${ $if $(@expr1073742899 $prepareTest $(@expr1073742900 "moveAndClear" $) $) ${ $setVerbose $(@expr1073742901 $false $) $; moveAndClear $(@expr1073742902 $) $; $} $} $while $(@expr1073742903 $false $) ;
252: $do ${ $if $(@expr1073742904 $prepareTest $(@expr1073742905 "movedPointer" $) $) ${ $setVerbose $(@expr1073742906 $false $) $; movedPointer $(@expr1073742907 $) $; $} $} $while $(@expr1073742908 $false $) ;
253: $do ${ $if $(@expr1073742909 $prepareTest $(@expr1073742910 "moveAndAddressOf" $) $) ${ $setVerbose $(@expr1073742911 $false $) $; moveAndAddressOf $(@expr1073742912 $) $; $} $} $while $(@expr1073742913 $false $) ;
254: $do ${ $if $(@expr1073742914 $prepareTest $(@expr1073742915 "partiallyMoved" $) $) ${ $setVerbose $(@expr1073742916 $false $) $; partiallyMoved $(@expr1073742917 $) $; $} $} $while $(@expr1073742918 $false $) ;
255: $do ${ $if $(@expr1073742919 $prepareTest $(@expr1073742920 "moveAndLambda" $) $) ${ $setVerbose $(@expr1073742921 $false $) $; moveAndLambda $(@expr1073742922 $) $; $} $} $while $(@expr1073742923 $false $) ;
256: $do ${ $if $(@expr1073742924 $prepareTest $(@expr1073742925 "forwardAndUsed" $) $) ${ $setVerbose $(@expr1073742926 $false $) $; forwardAndUsed $(@expr1073742927 $) $; $} $} $while $(@expr1073742928 $false $) ;
257:
258: $do ${ $if $(@expr1073742929 $prepareTest $(@expr1073742930 "funcArgNamesDifferent" $) $) ${ $setVerbose $(@expr1073742931 $false $) $; funcArgNamesDifferent $(@expr1073742932 $) $; $} $} $while $(@expr1073742933 $false $) ;
259: $do ${ $if $(@expr1073742934 $prepareTest $(@expr1073742935 "funcArgOrderDifferent" $) $) ${ $setVerbose $(@expr1073742936 $false $) $; funcArgOrderDifferent $(@expr1073742937 $) $; $} $} $while $(@expr1073742938 $false $) ;
260: $do ${ $if $(@expr1073742939 $prepareTest $(@expr1073742940 "cpp11FunctionArgInit" $) $) ${ $setVerbose $(@expr1073742941 $false $) $; cpp11FunctionArgInit $(@expr1073742942 $) $; $} $} $while $(@expr1073742943 $false $) ;
261:
262: $do ${ $if $(@expr1073742944 $prepareTest $(@expr1073742945 "shadowVariables" $) $) ${ $setVerbose $(@expr1073742946 $false $) $; shadowVariables $(@expr1073742947 $) $; $} $} $while $(@expr1073742948 $false $) ;
263: $do ${ $if $(@expr1073742949 $prepareTest $(@expr1073742950 "knownArgument" $) $) ${ $setVerbose $(@expr1073742951 $false $) $; knownArgument $(@expr1073742952 $) $; $} $} $while $(@expr1073742953 $false $) ;
264: $do ${ $if $(@expr1073742954 $prepareTest $(@expr1073742955 "knownArgumentHiddenVariableExpression" $) $) ${ $setVerbose $(@expr1073742956 $false $) $; knownArgumentHiddenVariableExpression $(@expr1073742957 $) $; $} $} $while $(@expr1073742958 $false $) ;
265: $do ${ $if $(@expr1073742959 $prepareTest $(@expr1073742960 "knownArgumentTernaryOperator" $) $) ${ $setVerbose $(@expr1073742961 $false $) $; knownArgumentTernaryOperator $(@expr1073742962 $) $; $} $} $while $(@expr1073742963 $false $) ;
266: $do ${ $if $(@expr1073742964 $prepareTest $(@expr1073742965 "checkComparePointers" $) $) ${ $setVerbose $(@expr1073742966 $false $) $; checkComparePointers $(@expr1073742967 $) $; $} $} $while $(@expr1073742968 $false $) ;
267:
268: $do ${ $if $(@expr1073742969 $prepareTest $(@expr1073742970 "unusedVariableValueTemplate" $) $) ${ $setVerbose $(@expr1073742971 $false $) $; unusedVariableValueTemplate $(@expr1073742972 $) $; $} $} $while $(@expr1073742973 $false $) ;
269:
270: $do ${ $if $(@expr1073742974 $prepareTest $(@expr1073742975 "moduloOfOne" $) $) ${ $setVerbose $(@expr1073742976 $false $) $; moduloOfOne $(@expr1073742977 $) $; $} $} $while $(@expr1073742978 $false $) ;
271:
272: $do ${ $if $(@expr1073742979 $prepareTest $(@expr1073742980 "sameExpressionPointers" $) $) ${ $setVerbose $(@expr1073742981 $false $) $; sameExpressionPointers $(@expr1073742982 $) $; $} $} $while $(@expr1073742983 $false $) ;
273:
274: $do ${ $if $(@expr1073742984 $prepareTest $(@expr1073742985 "checkOverlappingWrite" $) $) ${ $setVerbose $(@expr1073742986 $false $) $; checkOverlappingWrite $(@expr1073742987 $) $; $} $} $while $(@expr1073742988 $false $) ;
275:
276: $do ${ $if $(@expr1073742989 $prepareTest $(@expr1073742990 "constVariableArrayMember" $) $) ${ $setVerbose $(@expr1073742991 $false $) $; constVariableArrayMember $(@expr1073742992 $) $; $} $} $while $(@expr1073742993 $false $) ;
277: }
278:
279:
280: void check_ ( const char * file@var104 , int line@var105 , const char code@var106 [ ] , const char * filename@var107 = nullptr , bool experimental@var108 = false , bool inconclusive@var109 = true , bool runSimpleChecks@var110 = true , bool verbose@var111 = false , Settings * settings@var112 = nullptr ) {
281:
282: errout@var100 .@expr1073743002 str (@expr1073743003 "" ) ;
283:
284: if (@expr1073743004 !@expr1073743005 settings@var112 ) {
285: settings@var112 =@expr1073743006 &@expr1073743007 _settings@var102 ;
286: }
287: settings@var112 .@expr1184 severity@var113 .@expr1185 enable (@expr1073743010 Severity ::@expr1073743011 style@expr1073742994 ) ;
288: settings@var112 .@expr1184 severity@var113 .@expr1185 enable (@expr1073743014 Severity ::@expr1073743015 warning@expr1073742995 ) ;
289: settings@var112 .@expr1184 severity@var113 .@expr1185 enable (@expr1073743018 Severity ::@expr1073743019 portability@expr1073742996 ) ;
290: settings@var112 .@expr1184 severity@var113 .@expr1185 enable (@expr1073743022 Severity ::@expr1073743023 performance@expr1073742997 ) ;
291: settings@var112 .@expr1200 standards@var114 .@expr1073743025 c@var115 =@expr1073743026 Standards ::@expr1073743027 CLatest@expr1073742998 ;
292: settings@var112 .@expr1200 standards@var114 .@expr1073743029 cpp@var116 =@expr1073743030 Standards ::@expr1073743031 CPPLatest@expr1073742999 ;
293: settings@var112 .@expr1208 certainty@var117 .@expr1209 setEnabled (@expr1073743034 Certainty ::@expr1073743035 inconclusive@expr1073743000 , inconclusive@var109 ) ;
294: settings@var112 .@expr1208 certainty@var117 .@expr1209 setEnabled (@expr1073743038 Certainty ::@expr1073743039 experimental@expr1073743001 , experimental@var108 ) ;
295: settings@var112 .@expr1073743040 verbose@var118 =@expr1073743041 verbose@var111 ;
296:
297:
298: Tokenizer tokenizer@var119 (@expr1073743042 settings@var112 , this@expr1219 ) ;
299: std ::@expr1073743044 istringstream istr@var120 (@expr1073743045 code@var106 ) ;
300: $assert_ $(@expr1073743046 file@var104 $, line@var105 $, $(@expr1073743047 tokenizer@var119 .@expr1073743048 tokenize (@expr1073743049 istr@var120 , filename@var107 ?@expr1073743050 filename@var107 :@expr1073743051 "test.cpp" ) $) $) ;
301:
302:
303: CheckOther checkOther@var121 (@expr1073743052 &@expr1229 tokenizer@var119 , settings@var112 , this@expr1219 ) ;
304: checkOther@var121 .@expr1073743054 runChecks (@expr1073743055 &@expr1229 tokenizer@var119 , settings@var112 , this@expr1219 ) ;
305:
306: (@expr1073743057 void ) runSimpleChecks@var110 ;
307: }
308:
309: void check_ ( const char * file@var122 , int line@var123 , const char code@var124 [ ] , Settings * s@var125 ) {
310: check_ (@expr1073743058 file@var122 , line@var123 , code@var124 , "test.cpp" , false , true , true , false , s@var125 ) ;
311: }
312:
313: void checkP ( const char code@var126 [ ] , const char * filename@var127 = "test.cpp" ) {
314:
315: errout@var100 .@expr1073743067 str (@expr1073743068 "" ) ;
316:
317: Settings * settings@var128 ; settings@var128 =@expr1073743069 &@expr1073743070 _settings@var102 ;
318: settings@var128 .@expr1247 severity@var129 .@expr1248 enable (@expr1073743073 Severity ::@expr1073743074 style@expr1073743059 ) ;
319: settings@var128 .@expr1247 severity@var129 .@expr1248 enable (@expr1073743077 Severity ::@expr1073743078 warning@expr1073743060 ) ;
320: settings@var128 .@expr1247 severity@var129 .@expr1248 enable (@expr1073743081 Severity ::@expr1073743082 portability@expr1073743061 ) ;
321: settings@var128 .@expr1247 severity@var129 .@expr1248 enable (@expr1073743085 Severity ::@expr1073743086 performance@expr1073743062 ) ;
322: settings@var128 .@expr1263 standards@var130 .@expr1073743088 c@var131 =@expr1073743089 Standards ::@expr1073743090 CLatest@expr1073743063 ;
323: settings@var128 .@expr1263 standards@var130 .@expr1073743092 cpp@var132 =@expr1073743093 Standards ::@expr1073743094 CPPLatest@expr1073743064 ;
324: settings@var128 .@expr1271 certainty@var133 .@expr1073743096 enable (@expr1073743097 Certainty ::@expr1073743098 inconclusive@expr1073743065 ) ;
325: settings@var128 .@expr1271 certainty@var133 .@expr1073743100 disable (@expr1073743101 Certainty ::@expr1073743102 experimental@expr1073743066 ) ;
326:
327:
328: std ::@expr1073743103 vector < std ::@expr1280 string > files@var134 (@expr1073743105 1 , filename@var127 ) ;
329: std ::@expr1073743106 istringstream istr@var135 (@expr1073743107 code@var126 ) ;
330: const simplecpp ::@expr1073743108 TokenList tokens1@var136 (@expr1073743109 istr@var135 , files@var134 , files@var134 [@expr1073743110 0 ] ) ;
331:
332:
333: simplecpp ::@expr1073743111 TokenList tokens2@var137 (@expr1073743112 files@var134 ) ;
334: std ::@expr1073743113 map < std ::@expr1280 string , simplecpp ::@expr1280 TokenList *@expr1073743116 > filedata@var138 ;
335: simplecpp ::@expr1073743117 preprocess (@expr1073743118 tokens2@var137 , tokens1@var136 , files@var134 , filedata@var138 , simplecpp ::@expr1073743119 DUI (@expr1073743120 ) ) ;
336:
337: Preprocessor preprocessor@var139 (@expr1073743121 *@expr1073743122 settings@var128 , nullptr ) ;
338: preprocessor@var139 .@expr1073743123 setDirectives (@expr1073743124 tokens1@var136 ) ;
339:
340:
341: Tokenizer tokenizer@var140 (@expr1073743125 settings@var128 , this@expr1302 ) ;
342: tokenizer@var140 .@expr1073743127 createTokens (@expr1073743128 std ::@expr1073743129 move (@expr1073743130 tokens2@var137 ) ) ;
343: tokenizer@var140 .@expr1073743131 simplifyTokens1 (@expr1073743132 "" ) ;
344: tokenizer@var140 .@expr1073743133 setPreprocessor (@expr1073743134 &@expr1073743135 preprocessor@var139 ) ;
345:
346:
347: CheckOther checkOther@var141 (@expr1073743136 &@expr1313 tokenizer@var140 , settings@var128 , this@expr1302 ) ;
348: checkOther@var141 .@expr1073743138 runChecks (@expr1073743139 &@expr1313 tokenizer@var140 , settings@var128 , this@expr1302 ) ;
349: }
350:
351: void checkposix ( const char code@var142 [ ] ) {
352: static Settings settings@var143 ;
353: settings@var143 .@expr1073743142 severity@var144 .@expr1073743143 enable (@expr1073743144 Severity ::@expr1073743145 warning@expr1073743141 ) ;
354: settings@var143 .@expr1073743146 libraries@var145 .@expr1073743147 emplace_back (@expr1073743148 "posix" ) ;
355:
356: $check_ $(@expr1073743149 "cppcheck-2.8/test/testother.cpp" $, 356 $, code@var142 , nullptr , false , false , true , false , &@expr1073743150 settings@var143 $)
357:
|
361:
362: ;
363: }
364:
365: void checkInterlockedDecrement ( const char code@var146 [ ] ) {
366: static Settings settings@var147 ;
367: settings@var147 .@expr1073743152 platformType@var148 =@expr1073743153 Settings ::@expr1073743154 Win32A@expr1073743151 ;
368:
369: $check_ $(@expr1073743155 "cppcheck-2.8/test/testother.cpp" $, 369 $, code@var146 , nullptr , false , false , true , false , &@expr1073743156 settings@var147 $) ;
370: }
371:
372: void emptyBrackets ( ) {
373: $check_ $(@expr1073743157 "cppcheck-2.8/test/testother.cpp" $, 373 $, "{\n}" $)
374: ;
375: $if $(@expr1073743158 $!@expr1073743159 $assertEquals $(@expr1073743160 "cppcheck-2.8/test/testother.cpp" $, 375 $, "" $, errout@var100 .@expr1073743161 str (@expr1073743162 ) $) $) { $return ; }
376: }
377:
378:
379: void zeroDiv1 ( ) {
380: $check_ $(@expr1073743163 "cppcheck-2.8/test/testother.cpp" $, 380 $, "void foo() {\n    cout << 1. / 0;\n}" $)
381:
382: ;
383: $if $(@expr1073743164 $!@expr1073743165 $assertEquals $(@expr1073743166 "cppcheck-2.8/test/testother.cpp" $, 383 $, "" $, errout@var100 .@expr1343 str (@expr1344 ) $) $) { $return ; }
384:
385: $check_ $(@expr1073743169 "cppcheck-2.8/test/testother.cpp" $, 385 $, "void foo() {\n    cout << 42 / (double)0;\n}" $)
386:
387: ;
388: $if $(@expr1073743170 $!@expr1073743171 $assertEquals $(@expr1073743172 "cppcheck-2.8/test/testother.cpp" $, 388 $, "" $, errout@var100 .@expr1343 str (@expr1344 ) $) $) { $return ; }
389:
390: $check_ $(@expr1073743175 "cppcheck-2.8/test/testother.cpp" $, 390 $, "void foo() {\n    cout << 42 / (float)0;\n}" $)
391:
392: ;
393: $if $(@expr1073743176 $!@expr1073743177 $assertEquals $(@expr1073743178 "cppcheck-2.8/test/testother.cpp" $, 393 $, "" $, errout@var100 .@expr1343 str (@expr1344 ) $) $) { $return ; }
394:
395: $check_ $(@expr1073743181 "cppcheck-2.8/test/testother.cpp" $, 395 $, "void foo() {\n    cout << 42 / (int)0;\n}" $)
396:
397: ;
398: $if $(@expr1073743182 $!@expr1073743183 $assertEquals $(@expr1073743184 "cppcheck-2.8/test/testother.cpp" $, 398 $, "[test.cpp:2]: (error) Division by zero.\n" $, errout@var100 .@expr1343 str (@expr1344 ) $) $) { $return ; }
399: }
400:
401: void zeroDiv2 ( ) {
402: $check_ $(@expr1073743187 "cppcheck-2.8/test/testother.cpp" $, 402 $, "void foo()\n{\n    int sum = 0;\n    for(int i = 0; i < n; i ++)\n    {\n        sum += i;\n    }\n    cout<<b/sum;\n}" $)
403:
|
409:
410: ;
411: $if $(@expr1073743188 $!@expr1073743189 $assertEquals $(@expr1073743190 "cppcheck-2.8/test/testother.cpp" $, 411 $, "" $, errout@var100 .@expr1073743191 str (@expr1073743192 ) $) $) { $return ; }
412: }
413:
414: void zeroDiv3 ( ) {
415: $check_ $(@expr1073743193 "cppcheck-2.8/test/testother.cpp" $, 415 $, "int foo(int i) {\n    return i / 0;\n}" $)
416:
417: ;
418: $if $(@expr1073743194 $!@expr1073743195 $assertEquals $(@expr1073743196 "cppcheck-2.8/test/testother.cpp" $, 418 $, "[test.cpp:2]: (error) Division by zero.\n" $, errout@var100 .@expr1373 str (@expr1374 ) $) $) { $return ; }
419:
420: $check_ $(@expr1073743199 "cppcheck-2.8/test/testother.cpp" $, 420 $, "int foo(int i) {\n    return i % 0;\n}" $)
421:
422: ;
423: $if $(@expr1073743200 $!@expr1073743201 $assertEquals $(@expr1073743202 "cppcheck-2.8/test/testother.cpp" $, 423 $, "[test.cpp:2]: (error) Division by zero.\n" $, errout@var100 .@expr1373 str (@expr1374 ) $) $) { $return ; }
424:
425: $check_ $(@expr1073743205 "cppcheck-2.8/test/testother.cpp" $, 425 $, "void foo(int& i) {\n    i /= 0;\n}" $)
426:
427: ;
428: $if $(@expr1073743206 $!@expr1073743207 $assertEquals $(@expr1073743208 "cppcheck-2.8/test/testother.cpp" $, 428 $, "[test.cpp:2]: (error) Division by zero.\n" $, errout@var100 .@expr1373 str (@expr1374 ) $) $) { $return ; }
429:
430: $check_ $(@expr1073743211 "cppcheck-2.8/test/testother.cpp" $, 430 $, "void foo(int& i) {\n    i %= 0;\n}" $)
431:
432: ;
433: $if $(@expr1073743212 $!@expr1073743213 $assertEquals $(@expr1073743214 "cppcheck-2.8/test/testother.cpp" $, 433 $, "[test.cpp:2]: (error) Division by zero.\n" $, errout@var100 .@expr1373 str (@expr1374 ) $) $) { $return ; }
434:
435: $check_ $(@expr1073743217 "cppcheck-2.8/test/testother.cpp" $, 435 $, "uint8_t foo(uint8_t i) {\n    return i / 0;\n}" $)
436:
437: ;
438: $if $(@expr1073743218 $!@expr1073743219 $assertEquals $(@expr1073743220 "cppcheck-2.8/test/testother.cpp" $, 438 $, "[test.cpp:2]: (error) Division by zero.\n" $, errout@var100 .@expr1373 str (@expr1374 ) $) $) { $return ; }
439: }
440:
441: void zeroDiv4 ( ) {
442: $check_ $(@expr1073743223 "cppcheck-2.8/test/testother.cpp" $, 442 $, "void f()\n{\n   long a = b / 0x6;\n}" $)
443:
444:
445: ;
446: $if $(@expr1073743224 $!@expr1073743225 $assertEquals $(@expr1073743226 "cppcheck-2.8/test/testother.cpp" $, 446 $, "" $, errout@var100 .@expr1403 str (@expr1404 ) $) $) { $return ; }
447:
448: $check_ $(@expr1073743229 "cppcheck-2.8/test/testother.cpp" $, 448 $, "void f()\n{\n   long a = b / 0x0;\n}" $)
449:
450:
451: ;
452: $if $(@expr1073743230 $!@expr1073743231 $assertEquals $(@expr1073743232 "cppcheck-2.8/test/testother.cpp" $, 452 $, "" $, errout@var100 .@expr1403 str (@expr1404 ) $) $) { $return ; }
453: $check_ $(@expr1073743235 "cppcheck-2.8/test/testother.cpp" $, 453 $, "void f(long b)\n{\n   long a = b / 0x0;\n}" $)
454:
455:
456: ;
457: $if $(@expr1073743236 $!@expr1073743237 $assertEquals $(@expr1073743238 "cppcheck-2.8/test/testother.cpp" $, 457 $, "[test.cpp:3]: (error) Division by zero.\n" $, errout@var100 .@expr1403 str (@expr1404 ) $) $) { $return ; }
458:
459: $check_ $(@expr1073743241 "cppcheck-2.8/test/testother.cpp" $, 459 $, "void f()\n{\n   long a = b / 0L;\n}" $)
460:
461:
462: ;
463: $if $(@expr1073743242 $!@expr1073743243 $assertEquals $(@expr1073743244 "cppcheck-2.8/test/testother.cpp" $, 463 $, "" $, errout@var100 .@expr1403 str (@expr1404 ) $) $) { $return ; }
464: $check_ $(@expr1073743247 "cppcheck-2.8/test/testother.cpp" $, 464 $, "void f(long b)\n{\n   long a = b / 0L;\n}" $)
465:
466:
467: ;
468: $if $(@expr1073743248 $!@expr1073743249 $assertEquals $(@expr1073743250 "cppcheck-2.8/test/testother.cpp" $, 468 $, "[test.cpp:3]: (error) Division by zero.\n" $, errout@var100 .@expr1403 str (@expr1404 ) $) $) { $return ; }
469:
470: $check_ $(@expr1073743253 "cppcheck-2.8/test/testother.cpp" $, 470 $, "void f()\n{\n   long a = b / 0ul;\n}" $)
471:
472:
473: ;
474: $if $(@expr1073743254 $!@expr1073743255 $assertEquals $(@expr1073743256 "cppcheck-2.8/test/testother.cpp" $, 474 $, "" $, errout@var100 .@expr1403 str (@expr1404 ) $) $) { $return ; }
475: $check_ $(@expr1073743259 "cppcheck-2.8/test/testother.cpp" $, 475 $, "void f(long b)\n{\n   long a = b / 0ul;\n}" $)
476:
477:
478: ;
479: $if $(@expr1073743260 $!@expr1073743261 $assertEquals $(@expr1073743262 "cppcheck-2.8/test/testother.cpp" $, 479 $, "[test.cpp:3]: (error) Division by zero.\n" $, errout@var100 .@expr1403 str (@expr1404 ) $) $) { $return ; }
480:
481:
482:
483: $check_ $(@expr1073743265 "cppcheck-2.8/test/testother.cpp" $, 483 $, "void f()\n{\n   long a = b / 0.0;\n}" $)
484:
485:
486: ;
487: $if $(@expr1073743266 $!@expr1073743267 $assertEquals $(@expr1073743268 "cppcheck-2.8/test/testother.cpp" $, 487 $, "" $, errout@var100 .@expr1403 str (@expr1404 ) $) $) { $return ; }
488:
489: $check_ $(@expr1073743271 "cppcheck-2.8/test/testother.cpp" $, 489 $, "void f()\n{\n   long a = b / 0.5;\n}" $)
490:
491:
492: ;
493: $if $(@expr1073743272 $!@expr1073743273 $assertEquals $(@expr1073743274 "cppcheck-2.8/test/testother.cpp" $, 493 $, "" $, errout@var100 .@expr1403 str (@expr1404 ) $) $) { $return ; }
494: }
495:
496: void zeroDiv5 ( ) {
497: $check_ $(@expr1073743277 "cppcheck-2.8/test/testother.cpp" $, 497 $, "void f()\n{ { {\n   long a = b / 0;\n} } }" $)
498:
499:
500: ;
501: $if $(@expr1073743278 $!@expr1073743279 $assertEquals $(@expr1073743280 "cppcheck-2.8/test/testother.cpp" $, 501 $, "" $, errout@var100 .@expr1457 str (@expr1458 ) $) $) { $return ; }
502: $check_ $(@expr1073743283 "cppcheck-2.8/test/testother.cpp" $, 502 $, "void f(long b)\n{ { {\n   long a = b / 0;\n} } }" $)
503:
504:
505: ;
506: $if $(@expr1073743284 $!@expr1073743285 $assertEquals $(@expr1073743286 "cppcheck-2.8/test/testother.cpp" $, 506 $, "[test.cpp:3]: (error) Division by zero.\n" $, errout@var100 .@expr1457 str (@expr1458 ) $) $) { $return ; }
507: }
508:
509: void zeroDiv6 ( ) {
510: $check_ $(@expr1073743289 "cppcheck-2.8/test/testother.cpp" $, 510 $, "void f()\n{ { {\n   int a = b % 0;\n} } }" $)
511:
512:
513: ;
514: $if $(@expr1073743290 $!@expr1073743291 $assertEquals $(@expr1073743292 "cppcheck-2.8/test/testother.cpp" $, 514 $, "" $, errout@var100 .@expr1469 str (@expr1470 ) $) $) { $return ; }
515: $check_ $(@expr1073743295 "cppcheck-2.8/test/testother.cpp" $, 515 $, "void f(int b)\n{ { {\n   int a = b % 0;\n} } }" $)
516:
517:
518: ;
519: $if $(@expr1073743296 $!@expr1073743297 $assertEquals $(@expr1073743298 "cppcheck-2.8/test/testother.cpp" $, 519 $, "[test.cpp:3]: (error) Division by zero.\n" $, errout@var100 .@expr1469 str (@expr1470 ) $) $) { $return ; }
520: }
521:
522: void zeroDiv7 ( ) {
523:
524: $check_ $(@expr1073743301 "cppcheck-2.8/test/testother.cpp" $, 524 $, "void f() {\n  int a = x/2*3/0;\n  int b = y/2*3%0;\n}" $)
525:
526:
527: ;
528: $if $(@expr1073743302 $!@expr1073743303 $assertEquals $(@expr1073743304 "cppcheck-2.8/test/testother.cpp" $, 528 $, "" $, errout@var100 .@expr1481 str (@expr1482 ) $) $) { $return ; }
529: $check_ $(@expr1073743307 "cppcheck-2.8/test/testother.cpp" $, 529 $, "void f(int x, int y) {\n  int a = x/2*3/0;\n  int b = y/2*3%0;\n}" $)
530:
531:
532: ;
533: $if $(@expr1073743308 $!@expr1073743309 $assertEquals $(@expr1073743310 "cppcheck-2.8/test/testother.cpp" $, 533 $, "[test.cpp:2]: (error) Division by zero.\n[test.cpp:3]: (error) Division by zero.\n" $, errout@var100 .@expr1481 str (@expr1482 ) $) $) { $return
534: ; }
535: }
536:
537: void zeroDiv8 ( ) {
538:
539: $check_ $(@expr1073743313 "cppcheck-2.8/test/testother.cpp" $, 539 $, "void f() {\n  int a = 0;\n  do_something(a);\n  return 4 / a;\n}" $)
540:
541:
542:
543: ;
544: $if $(@expr1073743314 $!@expr1073743315 $assertEquals $(@expr1073743316 "cppcheck-2.8/test/testother.cpp" $, 544 $, "[test.cpp:4]: (error, inconclusive) Division by zero.\n" $, errout@var100 .@expr1073743317 str (@expr1073743318 ) $) $) { $return ; }
545: }
546:
547: void zeroDiv9 ( ) {
548:
549: $check_ $(@expr1073743319 "cppcheck-2.8/test/testother.cpp" $, 549 $, "void foo() {\n  double fStepHelp = 0;\n   if( (rOuterValue >>= fStepHelp) ) {\n     if( fStepHelp != 0.0) {\n       double fStepMain = 1;\n       sal_Int32 nIntervalCount = static_cast< sal_Int32 >(fStepMain / fStepHelp);\n    }\n  }\n}" $)
550:
|
556:
557: ;
558: $if $(@expr1073743320 $!@expr1073743321 $assertEquals $(@expr1073743322 "cppcheck-2.8/test/testother.cpp" $, 558 $, "" $, errout@var100 .@expr1073743323 str (@expr1073743324 ) $) $) { $return ; }
559: }
560:
561: void zeroDiv10 ( ) {
562:
563: $check_ $(@expr1073743325 "cppcheck-2.8/test/testother.cpp" $, 563 $, "int main() {\n  std::cout\n    << boost::format(\" %d :: %s <> %s\") % 0 % \"a\" % \"b\"\n    << std::endl;\n  return 0;\n}" $)
564:
|
567:
568: ;
569: $if $(@expr1073743326 $!@expr1073743327 $assertEquals $(@expr1073743328 "cppcheck-2.8/test/testother.cpp" $, 569 $, "" $, errout@var100 .@expr1073743329 str (@expr1073743330 ) $) $) { $return ; }
570: }
571:
572: void zeroDiv11 ( ) {
573: $check_ $(@expr1073743331 "cppcheck-2.8/test/testother.cpp" $, 573 $, "void f(int a) {\n  int res = (a+2)/0;\n  int res = (a*2)/0;\n}" $)
574:
575:
576: ;
577: $if $(@expr1073743332 $!@expr1073743333 $assertEquals $(@expr1073743334 "cppcheck-2.8/test/testother.cpp" $, 577 $, "[test.cpp:2]: (error) Division by zero.\n[test.cpp:3]: (error) Division by zero.\n" $, errout@var100 .@expr1511 str (@expr1512 ) $) $) { $return
578: ; }
579: $check_ $(@expr1073743337 "cppcheck-2.8/test/testother.cpp" $, 579 $, "void f() {\n  int res = (a+2)/0;\n  int res = (a*2)/0;\n}" $)
580:
581:
582: ;
583: $if $(@expr1073743338 $!@expr1073743339 $assertEquals $(@expr1073743340 "cppcheck-2.8/test/testother.cpp" $, 583 $, "" $, errout@var100 .@expr1511 str (@expr1512 ) $) $) { $return ; }
584: }
585:
586: void zeroDiv12 ( ) {
587:
588: $check_ $(@expr1073743343 "cppcheck-2.8/test/testother.cpp" $, 588 $, "intmax_t f() {\n  return 1 / imaxabs(0);\n}" $)
589:
590: ;
591: $if $(@expr1073743344 $!@expr1073743345 $assertEquals $(@expr1073743346 "cppcheck-2.8/test/testother.cpp" $, 591 $, "[test.cpp:2]: (error) Division by zero.\n" $, errout@var100 .@expr1073743347 str (@expr1073743348 ) $) $) { $return ; }
592: }
593: void zeroDiv13 ( ) {
594:
595: $check_ $(@expr1073743349 "cppcheck-2.8/test/testother.cpp" $, 595 $, "int f () {\n    int dividend = 10;\n        int divisor = 1;\n    dividend = dividend / (--divisor);\n    return dividend;\n}\n" $)
596:
|
599:
600: ;
601: $if $(@expr1073743350 $!@expr1073743351 $assertEquals $(@expr1073743352 "cppcheck-2.8/test/testother.cpp" $, 601 $, "[test.cpp:4]: (error) Division by zero.\n" $, errout@var100 .@expr1073743353 str (@expr1073743354 ) $) $) { $return ; }
602: }
603:
604: void zeroDivCond ( ) {
605: $check_ $(@expr1073743355 "cppcheck-2.8/test/testother.cpp" $, 605 $, "void f(unsigned int x) {\n  int y = 17 / x;\n  if (x > 0) {}\n}" $)
606:
607:
608: ;
609: $if $(@expr1073743356 $!@expr1073743357 $assertEquals $(@expr1073743358 "cppcheck-2.8/test/testother.cpp" $, 609 $, "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x>0' is redundant or there is division by zero at line 2.\n" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
610:
611: $check_ $(@expr1073743361 "cppcheck-2.8/test/testother.cpp" $, 611 $, "void f(unsigned int x) {\n  int y = 17 / x;\n  if (x >= 1) {}\n}" $)
612:
613:
614: ;
615: $if $(@expr1073743362 $!@expr1073743363 $assertEquals $(@expr1073743364 "cppcheck-2.8/test/testother.cpp" $, 615 $, "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x>=1' is redundant or there is division by zero at line 2.\n" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
616:
617: $check_ $(@expr1073743367 "cppcheck-2.8/test/testother.cpp" $, 617 $, "void f(int x) {\n  int y = 17 / x;\n  if (x == 0) {}\n}" $)
618:
619:
620: ;
621: $if $(@expr1073743368 $!@expr1073743369 $assertEquals $(@expr1073743370 "cppcheck-2.8/test/testother.cpp" $, 621 $, "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x==0' is redundant or there is division by zero at line 2.\n" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
622:
623: $check_ $(@expr1073743373 "cppcheck-2.8/test/testother.cpp" $, 623 $, "void f(unsigned int x) {\n  int y = 17 / x;\n  if (x != 0) {}\n}" $)
624:
625:
626: ;
627: $if $(@expr1073743374 $!@expr1073743375 $assertEquals $(@expr1073743376 "cppcheck-2.8/test/testother.cpp" $, 627 $, "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x!=0' is redundant or there is division by zero at line 2.\n" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
628:
629:
630: $check_ $(@expr1073743379 "cppcheck-2.8/test/testother.cpp" $, 630 $, "void f1(int x, int y) { c=x/y; }\nvoid f2(unsigned int y) {\n    f1(123,y);\n    if (y>0){}\n}" $)
631:
632:
633:
634: ;
635: $if $(@expr1073743380 $!@expr1073743381 $assertEquals $(@expr1073743382 "cppcheck-2.8/test/testother.cpp" $, 635 $, "[test.cpp:4] -> [test.cpp:1]: (warning) Either the condition 'y>0' is redundant or there is division by zero at line 1.\n" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return
636:
637: ; }
638:
639:
640: $check_ $(@expr1073743385 "cppcheck-2.8/test/testother.cpp" $, 640 $, "void f() {\n  unsigned int x = do_something();\n  int y = 17 / x;\n  x = some+calculation;\n  if (x != 0) {}\n}" $)
641:
|
644:
645: ;
646: $if $(@expr1073743386 $!@expr1073743387 $assertEquals $(@expr1073743388 "cppcheck-2.8/test/testother.cpp" $, 646 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
647:
648: {
649:
650: $check_ $(@expr1073743391 "cppcheck-2.8/test/testother.cpp" $, 650 $, "void do_something();\nint x;\nvoid f() {\n  int y = 17 / x;\n  do_something();\n  if (x != 0) {}\n}" $)
651:
|
655:
656: ;
657: $if $(@expr1073743392 $!@expr1073743393 $assertEquals $(@expr1073743394 "cppcheck-2.8/test/testother.cpp" $, 657 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
658:
659:
660: $check_ $(@expr1073743397 "cppcheck-2.8/test/testother.cpp" $, 660 $, "void do_something();\nvoid f() {\n  int x = some + calculation;\n  int y = 17 / x;\n  do_something();\n  if (x != 0) {}\n}" $)
661:
|
665:
666: ;
667: $if $(@expr1073743398 $!@expr1073743399 $assertEquals $(@expr1073743400 "cppcheck-2.8/test/testother.cpp" $, 667 $, "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'x!=0' is redundant or there is division by zero at line 4.\n" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
668: }
669:
670: $check_ $(@expr1073743403 "cppcheck-2.8/test/testother.cpp" $, 670 $, "void do_something(int value);\nvoid f(int x) {\n  int y = 17 / x;\n  do_something(x);\n}" $)
671:
672:
673:
674: ;
675: $if $(@expr1073743404 $!@expr1073743405 $assertEquals $(@expr1073743406 "cppcheck-2.8/test/testother.cpp" $, 675 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
676:
677: $check_ $(@expr1073743409 "cppcheck-2.8/test/testother.cpp" $, 677 $, "int x;\nvoid f() {\n  int y = 17 / x;\n  while (y || x == 0) { x--; }\n}" $)
678:
679:
680:
681: ;
682: $if $(@expr1073743410 $!@expr1073743411 $assertEquals $(@expr1073743412 "cppcheck-2.8/test/testother.cpp" $, 682 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
683:
684:
685: $check_ $(@expr1073743415 "cppcheck-2.8/test/testother.cpp" $, 685 $, "void f() {\ndouble* p1= new double[1];\ndouble* p2= new double[1];\ndouble* p3= new double[1];\ndouble* pp[3] = {p1,p2,p3};\n}" $)
686:
|
689:
690: ;
691: $if $(@expr1073743416 $!@expr1073743417 $assertEquals $(@expr1073743418 "cppcheck-2.8/test/testother.cpp" $, 691 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
692:
693:
694: $check_ $(@expr1073743421 "cppcheck-2.8/test/testother.cpp" $, 694 $, "int f(int a, int b) {\n  int r = a / b;\n  if (func(b)) {}\n}" $)
695:
696:
697: ;
698: $if $(@expr1073743422 $!@expr1073743423 $assertEquals $(@expr1073743424 "cppcheck-2.8/test/testother.cpp" $, 698 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
699:
700:
701: $check_ $(@expr1073743427 "cppcheck-2.8/test/testother.cpp" $, 701 $, "int f(int d) {\n  int r = (a?b:c) / d;\n  if (d == 0) {}\n}" $)
702:
703:
704: ;
705: $if $(@expr1073743428 $!@expr1073743429 $assertEquals $(@expr1073743430 "cppcheck-2.8/test/testother.cpp" $, 705 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
706:
707: $check_ $(@expr1073743433 "cppcheck-2.8/test/testother.cpp" $, 707 $, "int f(int a) {\n  int r = a ? 1 / a : 0;\n  if (a == 0) {}\n}" $)
708:
709:
710: ;
711: $if $(@expr1073743434 $!@expr1073743435 $assertEquals $(@expr1073743436 "cppcheck-2.8/test/testother.cpp" $, 711 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
712:
713: $check_ $(@expr1073743439 "cppcheck-2.8/test/testother.cpp" $, 713 $, "int f(int a) {\n  int r = (a == 0) ? 0 : 1 / a;\n  if (a == 0) {}\n}" $)
714:
715:
716: ;
717: $if $(@expr1073743440 $!@expr1073743441 $assertEquals $(@expr1073743442 "cppcheck-2.8/test/testother.cpp" $, 717 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
718:
719: $check_ $(@expr1073743445 "cppcheck-2.8/test/testother.cpp" $, 719 $, "int g();\nvoid f(int b) {\n  int x = g();\n  if (x == 0) {}\n  else if (x > 0) {}\n  else\n    a = b / -x;\n}" $)
720:
|
725:
726: ;
727: $if $(@expr1073743446 $!@expr1073743447 $assertEquals $(@expr1073743448 "cppcheck-2.8/test/testother.cpp" $, 727 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
728:
729: $check_ $(@expr1073743451 "cppcheck-2.8/test/testother.cpp" $, 729 $, "struct A {\n    int x;\n};\nint f(A* a) {\n    if (a->x == 0) \n        a->x = 1;\n    return 1/a->x;\n}\n" $)
730:
|
735:
736: ;
737: $if $(@expr1073743452 $!@expr1073743453 $assertEquals $(@expr1073743454 "cppcheck-2.8/test/testother.cpp" $, 737 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
738:
739:
740: $check_ $(@expr1073743457 "cppcheck-2.8/test/testother.cpp" $, 740 $, "int f(int argc) {\n    int quotient, remainder;\n    remainder = argc % 2;\n    argc = 2;\n    quotient = argc;\n    if (quotient != 0) \n        return quotient;\n    return remainder;\n}\n" $)
741:
|
747:
748: ;
749: $if $(@expr1073743458 $!@expr1073743459 $assertEquals $(@expr1073743460 "cppcheck-2.8/test/testother.cpp" $, 749 $, "" $, errout@var100 .@expr1535 str (@expr1536 ) $) $) { $return ; }
750: }
751:
752: void nanInArithmeticExpression ( ) {
753: $check_ $(@expr1073743463 "cppcheck-2.8/test/testother.cpp" $, 753 $, "void f()\n{\n   double x = 3.0 / 0.0 + 1.0;\n   printf(\"%f\", x);\n}" $)
754:
755:
756:
757: ;
758: $if $(@expr1073743464 $!@expr1073743465 $assertEquals $(@expr1073743466 "cppcheck-2.8/test/testother.cpp" $, 758 $, "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n" $, errout@var100 .@expr1643 str (@expr1644 ) $) $) { $return ; }
759:
760: $check_ $(@expr1073743469 "cppcheck-2.8/test/testother.cpp" $, 760 $, "void f()\n{\n   double x = 3.0 / 0.0 - 1.0;\n   printf(\"%f\", x);\n}" $)
761:
762:
763:
764: ;
765: $if $(@expr1073743470 $!@expr1073743471 $assertEquals $(@expr1073743472 "cppcheck-2.8/test/testother.cpp" $, 765 $, "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n" $, errout@var100 .@expr1643 str (@expr1644 ) $) $) { $return ; }
766:
767: $check_ $(@expr1073743475 "cppcheck-2.8/test/testother.cpp" $, 767 $, "void f()\n{\n   double x = 1.0 + 3.0 / 0.0;\n   printf(\"%f\", x);\n}" $)
768:
769:
770:
771: ;
772: $if $(@expr1073743476 $!@expr1073743477 $assertEquals $(@expr1073743478 "cppcheck-2.8/test/testother.cpp" $, 772 $, "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n" $, errout@var100 .@expr1643 str (@expr1644 ) $) $) { $return ; }
773:
774: $check_ $(@expr1073743481 "cppcheck-2.8/test/testother.cpp" $, 774 $, "void f()\n{\n   double x = 1.0 - 3.0 / 0.0;\n   printf(\"%f\", x);\n}" $)
775:
776:
777:
778: ;
779: $if $(@expr1073743482 $!@expr1073743483 $assertEquals $(@expr1073743484 "cppcheck-2.8/test/testother.cpp" $, 779 $, "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n" $, errout@var100 .@expr1643 str (@expr1644 ) $) $) { $return ; }
780:
781: $check_ $(@expr1073743487 "cppcheck-2.8/test/testother.cpp" $, 781 $, "void f()\n{\n   double x = 3.0 / 0.0;\n   printf(\"%f\", x);\n}" $)
782:
783:
784:
785: ;
786: $if $(@expr1073743488 $!@expr1073743489 $assertEquals $(@expr1073743490 "cppcheck-2.8/test/testother.cpp" $, 786 $, "" $, errout@var100 .@expr1643 str (@expr1644 ) $) $) { $return ; }
787:
788: }
789:
790: void varScope1 ( ) {
791: $check_ $(@expr1073743493 "cppcheck-2.8/test/testother.cpp" $, 791 $, "unsigned short foo()\n{\n    test_client CClient;\n    try\n    {\n        if (CClient.Open())\n        {\n            return 0;\n        }\n    }\n    catch (...)\n    {\n        return 2;\n    }\n\n    try\n    {\n        CClient.Close();\n    }\n    catch (...)\n    {\n        return 2;\n    }\n\n    return 1;\n}" $)
792:
|
815:
816: ;
817: $if $(@expr1073743494 $!@expr1073743495 $assertEquals $(@expr1073743496 "cppcheck-2.8/test/testother.cpp" $, 817 $, "" $, errout@var100 .@expr1073743497 str (@expr1073743498 ) $) $) { $return ; }
818: }
819:
820: void varScope2 ( ) {
821: $check_ $(@expr1073743499 "cppcheck-2.8/test/testother.cpp" $, 821 $, "int foo()\n{\n    Error e;\n    e.SetValue(12);\n    throw e;\n}" $)
822:
|
825:
826: ;
827: $if $(@expr1073743500 $!@expr1073743501 $assertEquals $(@expr1073743502 "cppcheck-2.8/test/testother.cpp" $, 827 $, "" $, errout@var100 .@expr1073743503 str (@expr1073743504 ) $) $) { $return ; }
828: }
829:
830: void varScope3 ( ) {
831: $check_ $(@expr1073743505 "cppcheck-2.8/test/testother.cpp" $, 831 $, "void foo()\n{\n    int i;\n    int *p = 0;\n    if (abc)\n    {\n        p = &i;\n    }\n    *p = 1;\n}" $)
832:
|
839:
840: ;
841: $if $(@expr1073743506 $!@expr1073743507 $assertEquals $(@expr1073743508 "cppcheck-2.8/test/testother.cpp" $, 841 $, "" $, errout@var100 .@expr1073743509 str (@expr1073743510 ) $) $) { $return ; }
842: }
843:
844: void varScope4 ( ) {
845: $check_ $(@expr1073743511 "cppcheck-2.8/test/testother.cpp" $, 845 $, "void foo()\n{\n    int i;\n}" $)
846:
847:
848: ;
849: $if $(@expr1073743512 $!@expr1073743513 $assertEquals $(@expr1073743514 "cppcheck-2.8/test/testother.cpp" $, 849 $, "" $, errout@var100 .@expr1073743515 str (@expr1073743516 ) $) $) { $return ; }
850: }
851:
852: void varScope5 ( ) {
853: $check_ $(@expr1073743517 "cppcheck-2.8/test/testother.cpp" $, 853 $, "void f(int x)\n{\n    int i = 0;\n    if (x) {\n        for ( ; i < 10; ++i) ;\n    }\n}" $)
854:
|
858:
859: ;
860: $if $(@expr1073743518 $!@expr1073743519 $assertEquals $(@expr1073743520 "cppcheck-2.8/test/testother.cpp" $, 860 $, "[test.cpp:3]: (style) The scope of the variable 'i' can be reduced.\n" $, errout@var100 .@expr1697 str (@expr1698 ) $) $) { $return ; }
861:
862: $check_ $(@expr1073743523 "cppcheck-2.8/test/testother.cpp" $, 862 $, "void f(int x) {\n    const unsigned char i = 0;\n    if (x) {\n        for ( ; i < 10; ++i) ;\n    }\n}" $)
863:
|
866:
867: ;
868: $if $(@expr1073743524 $!@expr1073743525 $assertEquals $(@expr1073743526 "cppcheck-2.8/test/testother.cpp" $, 868 $, "" $, errout@var100 .@expr1697 str (@expr1698 ) $) $) { $return ; }
869:
870: $check_ $(@expr1073743529 "cppcheck-2.8/test/testother.cpp" $, 870 $, "void f(int x)\n{\n    int i = 0;\n    if (x) {b()}\n    else {\n        for ( ; i < 10; ++i) ;\n    }\n}" $)
871:
|
876:
877: ;
878: $if $(@expr1073743530 $!@expr1073743531 $assertEquals $(@expr1073743532 "cppcheck-2.8/test/testother.cpp" $, 878 $, "[test.cpp:3]: (style) The scope of the variable 'i' can be reduced.\n" $, errout@var100 .@expr1697 str (@expr1698 ) $) $) { $return ; }
879: }
880:
881: void varScope6 ( ) {
882: $check_ $(@expr1073743535 "cppcheck-2.8/test/testother.cpp" $, 882 $, "void f(int x)\n{\n    int i = x;\n    if (a) {\n        x++;\n    }\n    if (b) {\n        c(i);\n    }\n}" $)
883:
|
890:
891: ;
892: $if $(@expr1073743536 $!@expr1073743537 $assertEquals $(@expr1073743538 "cppcheck-2.8/test/testother.cpp" $, 892 $, "" $, errout@var100 .@expr1715 str (@expr1716 ) $) $) { $return ; }
893:
894: $check_ $(@expr1073743541 "cppcheck-2.8/test/testother.cpp" $, 894 $, "void f() {\n    bool success = false;\n    int notReducable(someClass.getX(&success));\n    if (success) {\n        foo(notReducable);\n    }\n}" $)
895:
|
899:
900: ;
901: $if $(@expr1073743542 $!@expr1073743543 $assertEquals $(@expr1073743544 "cppcheck-2.8/test/testother.cpp" $, 901 $, "" $, errout@var100 .@expr1715 str (@expr1716 ) $) $) { $return ; }
902:
903: $check_ $(@expr1073743547 "cppcheck-2.8/test/testother.cpp" $, 903 $, "void foo(Test &test) {\n  int& x = test.getData();\n  if (test.process())\n    x = 0;\n}" $)
904:
905:
906:
907: ;
908: $if $(@expr1073743548 $!@expr1073743549 $assertEquals $(@expr1073743550 "cppcheck-2.8/test/testother.cpp" $, 908 $, "" $, errout@var100 .@expr1715 str (@expr1716 ) $) $) { $return ; }
909:
910: $check_ $(@expr1073743553 "cppcheck-2.8/test/testother.cpp" $, 910 $, "void f()\n{\nint foo = 0;\nstd::vector<int> vec(10);\nBOOST_FOREACH(int& i, vec)\n{\n foo += 1;\n if(foo == 10)\n {\n  return 0;\n }\n}\n}" $)
911:
|
921:
922: ;
923: $if $(@expr1073743554 $!@expr1073743555 $assertEquals $(@expr1073743556 "cppcheck-2.8/test/testother.cpp" $, 923 $, "" $, errout@var100 .@expr1715 str (@expr1716 ) $) $) { $return ; }
924:
925: $check_ $(@expr1073743559 "cppcheck-2.8/test/testother.cpp" $, 925 $, "void f(int &x)\n{\n  int n = 1;\n  do\n  {\n    ++n;\n    ++x;\n  } while (x);\n}" $)
926:
|
932:
933: ;
934: $if $(@expr1073743560 $!@expr1073743561 $assertEquals $(@expr1073743562 "cppcheck-2.8/test/testother.cpp" $, 934 $, "" $, errout@var100 .@expr1715 str (@expr1716 ) $) $) { $return ; }
935: }
936:
937: void varScope7 ( ) {
938: $check_ $(@expr1073743565 "cppcheck-2.8/test/testother.cpp" $, 938 $, "void f(int x)\n{\n    int y = 0;\n    b(y);\n    if (x) {\n        y++;\n    }\n}" $)
939:
|
944:
945: ;
946: $if $(@expr1073743566 $!@expr1073743567 $assertEquals $(@expr1073743568 "cppcheck-2.8/test/testother.cpp" $, 946 $, "" $, errout@var100 .@expr1073743569 str (@expr1073743570 ) $) $) { $return ; }
947: }
948:
949: void varScope8 ( ) {
950: $check_ $(@expr1073743571 "cppcheck-2.8/test/testother.cpp" $, 950 $, "void test() {\n    float edgeResistance=1;\n    std::vector<int> edges;\n    BOOST_FOREACH(int edge, edges) {\n        edgeResistance = (edge+1) / 2.0;\n    }\n}" $)
951:
|
955:
956: ;
957: $if $(@expr1073743572 $!@expr1073743573 $assertEquals $(@expr1073743574 "cppcheck-2.8/test/testother.cpp" $, 957 $, "[test.cpp:2]: (style) The scope of the variable 'edgeResistance' can be reduced.\n" $, errout@var100 .@expr1073743575 str (@expr1073743576 ) $) $) { $return ; }
958: }
959:
960: void varScope9 ( ) {
961:
962: $check_ $(@expr1073743577 "cppcheck-2.8/test/testother.cpp" $, 962 $, "class fred {\npublic:\n    void x();\n};\nvoid test(int a) {\n    fred f;\n    if (a == 2) {\n        f.x();\n    }\n}" $)
963:
|
970:
971: ;
972: $if $(@expr1073743578 $!@expr1073743579 $assertEquals $(@expr1073743580 "cppcheck-2.8/test/testother.cpp" $, 972 $, "" $, errout@var100 .@expr1073743581 str (@expr1073743582 ) $) $) { $return ; }
973: }
974:
975: void varScope10 ( ) {
976: $check_ $(@expr1073743583 "cppcheck-2.8/test/testother.cpp" $, 976 $, "int f()\n{\n    int x = 0;\n    FOR {\n        foo(x++);\n    }\n}" $)
977:
|
981:
982: ;
983: $if $(@expr1073743584 $!@expr1073743585 $assertEquals $(@expr1073743586 "cppcheck-2.8/test/testother.cpp" $, 983 $, "" $, errout@var100 .@expr1073743587 str (@expr1073743588 ) $) $) { $return ; }
984: }
985:
986: void varScope11 ( ) {
987: $check_ $(@expr1073743589 "cppcheck-2.8/test/testother.cpp" $, 987 $, "int f() {\n    int x = 0;\n    AB ab = { x, 0 };\n}" $)
988:
989:
990: ;
991: $if $(@expr1073743590 $!@expr1073743591 $assertEquals $(@expr1073743592 "cppcheck-2.8/test/testother.cpp" $, 991 $, "" $, errout@var100 .@expr1769 str (@expr1770 ) $) $) { $return ; }
992:
993: $check_ $(@expr1073743595 "cppcheck-2.8/test/testother.cpp" $, 993 $, "int f() {\n    int x = 0;\n    if (a == 0) { ++x; }\n    AB ab = { x, 0 };\n}" $)
994:
995:
996:
997: ;
998: $if $(@expr1073743596 $!@expr1073743597 $assertEquals $(@expr1073743598 "cppcheck-2.8/test/testother.cpp" $, 998 $, "" $, errout@var100 .@expr1769 str (@expr1770 ) $) $) { $return ; }
999:
1000: $check_ $(@expr1073743601 "cppcheck-2.8/test/testother.cpp" $, 1000 $, "int f() {\n    int x = 0;\n    if (a == 0) { ++x; }\n    if (a == 1) { AB ab = { x, 0 }; }\n}" $)
1001:
1002:
1003:
1004: ;
1005: $if $(@expr1073743602 $!@expr1073743603 $assertEquals $(@expr1073743604 "cppcheck-2.8/test/testother.cpp" $, 1005 $, "" $, errout@var100 .@expr1769 str (@expr1770 ) $) $) { $return ; }
1006: }
1007:
1008: void varScope12 ( ) {
1009: $check_ $(@expr1073743607 "cppcheck-2.8/test/testother.cpp" $, 1009 $, "void f(int x) {\n    int i[5];\n    int* j = y;\n    if (x)\n        foo(i);\n    foo(j);\n}" $)
1010:
|
1014:
1015: ;
1016: $if $(@expr1073743608 $!@expr1073743609 $assertEquals $(@expr1073743610 "cppcheck-2.8/test/testother.cpp" $, 1016 $, "[test.cpp:2]: (style) The scope of the variable 'i' can be reduced.\n" $, errout@var100 .@expr1787 str (@expr1788 ) $) $) { $return ; }
1017:
1018: $check_ $(@expr1073743613 "cppcheck-2.8/test/testother.cpp" $, 1018 $, "void f(int x) {\n    int i[5];\n    int* j;\n    if (x)\n        j = i;\n    foo(j);\n}" $)
1019:
|
1023:
1024: ;
1025: $if $(@expr1073743614 $!@expr1073743615 $assertEquals $(@expr1073743616 "cppcheck-2.8/test/testother.cpp" $, 1025 $, "" $, errout@var100 .@expr1787 str (@expr1788 ) $) $) { $return ; }
1026:
1027: $check_ $(@expr1073743619 "cppcheck-2.8/test/testother.cpp" $, 1027 $, "void f(int x) {\n    const bool b = true;\n    x++;\n    if (x == 5)\n        foo(b);\n}" $)
1028:
|
1031:
1032: ;
1033: $if $(@expr1073743620 $!@expr1073743621 $assertEquals $(@expr1073743622 "cppcheck-2.8/test/testother.cpp" $, 1033 $, "" $, errout@var100 .@expr1787 str (@expr1788 ) $) $) { $return ; }
1034:
1035: $check_ $(@expr1073743625 "cppcheck-2.8/test/testother.cpp" $, 1035 $, "void f(int x) {\n    const bool b = x;\n    x++;\n    if (x == 5)\n        foo(b);\n}" $)
1036:
|
1039:
1040: ;
1041: $if $(@expr1073743626 $!@expr1073743627 $assertEquals $(@expr1073743628 "cppcheck-2.8/test/testother.cpp" $, 1041 $, "" $, errout@var100 .@expr1787 str (@expr1788 ) $) $) { $return ; }
1042: }
1043:
1044: void varScope13 ( ) {
1045:
1046: $check_ $(@expr1073743631 "cppcheck-2.8/test/testother.cpp" $, 1046 $, "void f() {\n    int i = 0;\n    forever {\n        if (i++ == 42) { break; }\n    }\n}" $)
1047:
|
1050:
1051: ;
1052: $if $(@expr1073743632 $!@expr1073743633 $assertEquals $(@expr1073743634 "cppcheck-2.8/test/testother.cpp" $, 1052 $, "" $, errout@var100 .@expr1073743635 str (@expr1073743636 ) $) $) { $return ; }
1053: }
1054:
1055: void varScope14 ( ) {
1056:
1057: $check_ $(@expr1073743637 "cppcheck-2.8/test/testother.cpp" $, 1057 $, "void f() {\n    const int i( foo());\n    if(a) {\n        for ( ; i < 10; ++i) ;\n    }\n}" $)
1058:
|
1061:
1062: ;
1063: $if $(@expr1073743638 $!@expr1073743639 $assertEquals $(@expr1073743640 "cppcheck-2.8/test/testother.cpp" $, 1063 $, "" $, errout@var100 .@expr1073743641 str (@expr1073743642 ) $) $) { $return ; }
1064: }
1065:
1066: void varScope15 ( ) {
1067:
1068: $check_ $(@expr1073743643 "cppcheck-2.8/test/testother.cpp" $, 1068 $, "void f() {\n    int a,b,c;\n    if (a);\n    else if(b);\n    else if(c);\n    else;\n}" , nullptr , false , false $)
1069:
|
1073:
1074: ;
1075: $if $(@expr1073743644 $!@expr1073743645 $assertEquals $(@expr1073743646 "cppcheck-2.8/test/testother.cpp" $, 1075 $, "" $, errout@var100 .@expr1073743647 str (@expr1073743648 ) $) $) { $return ; }
1076: }
1077:
1078: void varScope16 ( ) {
1079: $check_ $(@expr1073743649 "cppcheck-2.8/test/testother.cpp" $, 1079 $, "void f() {\n    int a = 0;\n    while((++a) < 56) {\n        foo();\n    }\n}" $)
1080:
|
1083:
1084: ;
1085: $if $(@expr1073743650 $!@expr1073743651 $assertEquals $(@expr1073743652 "cppcheck-2.8/test/testother.cpp" $, 1085 $, "" $, errout@var100 .@expr1829 str (@expr1830 ) $) $) { $return ; }
1086:
1087: $check_ $(@expr1073743655 "cppcheck-2.8/test/testother.cpp" $, 1087 $, "void f() {\n    int a = 0;\n    do {\n        foo();\n    } while((++a) < 56);\n}" $)
1088:
|
1091:
1092: ;
1093: $if $(@expr1073743656 $!@expr1073743657 $assertEquals $(@expr1073743658 "cppcheck-2.8/test/testother.cpp" $, 1093 $, "" $, errout@var100 .@expr1829 str (@expr1830 ) $) $) { $return ; }
1094:
1095: $check_ $(@expr1073743661 "cppcheck-2.8/test/testother.cpp" $, 1095 $, "void f() {\n    int a = 0;\n    do {\n        a = 64;\n        foo(a);\n    } while((++a) < 56);\n}" $)
1096:
|
1100:
1101: ;
1102: $if $(@expr1073743662 $!@expr1073743663 $assertEquals $(@expr1073743664 "cppcheck-2.8/test/testother.cpp" $, 1102 $, "" $, errout@var100 .@expr1829 str (@expr1830 ) $) $) { $return ; }
1103:
1104: $check_ $(@expr1073743667 "cppcheck-2.8/test/testother.cpp" $, 1104 $, "void f() {\n    int a = 0;\n    do {\n        a = 64;\n        foo(a);\n    } while(z());\n}" $)
1105:
|
1109:
1110: ;
1111: $if $(@expr1073743668 $!@expr1073743669 $assertEquals $(@expr1073743670 "cppcheck-2.8/test/testother.cpp" $, 1111 $, "[test.cpp:2]: (style) The scope of the variable 'a' can be reduced.\n" $, errout@var100 .@expr1829 str (@expr1830 ) $) $) { $return ; }
1112: }
1113:
1114: void varScope17 ( ) {
1115: $check_ $(@expr1073743673 "cppcheck-2.8/test/testother.cpp" $, 1115 $, "void f() {\n    int x;\n    if (a) {\n        x = stuff(x);\n        morestuff(x);\n    }\n}" $)
1116:
|
1120:
1121: ;
1122: $if $(@expr1073743674 $!@expr1073743675 $assertEquals $(@expr1073743676 "cppcheck-2.8/test/testother.cpp" $, 1122 $, "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n" $, errout@var100 .@expr1853 str (@expr1854 ) $) $) { $return ; }
1123:
1124: $check_ $(@expr1073743679 "cppcheck-2.8/test/testother.cpp" $, 1124 $, "void f() {\n    int x;\n    if (a) {\n        x = stuff(x);\n        morestuff(x);\n    }\n    if (b) {}\n}" $)
1125:
|
1130:
1131: ;
1132: $if $(@expr1073743680 $!@expr1073743681 $assertEquals $(@expr1073743682 "cppcheck-2.8/test/testother.cpp" $, 1132 $, "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n" $, errout@var100 .@expr1853 str (@expr1854 ) $) $) { $return ; }
1133: }
1134:
1135: void varScope18 ( ) {
1136: $check_ $(@expr1073743685 "cppcheck-2.8/test/testother.cpp" $, 1136 $, "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            break;\n        case B:\n        default:\n            break;\n    }\n\n    if (c) {\n        x = foo();\n        do_something(x);\n    }\n}" $)
1137:
|
1150:
1151: ;
1152: $if $(@expr1073743686 $!@expr1073743687 $assertEquals $(@expr1073743688 "cppcheck-2.8/test/testother.cpp" $, 1152 $, "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n" $, errout@var100 .@expr1865 str (@expr1866 ) $) $) { $return ; }
1153:
1154: $check_ $(@expr1073743691 "cppcheck-2.8/test/testother.cpp" $, 1154 $, "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            x = 10;\n            break;\n        case B:\n        default:\n            break;\n    }\n\n    if (c) {\n        x = foo();\n        do_something(x);\n    }\n}" $)
1155:
|
1169:
1170: ;
1171: $if $(@expr1073743692 $!@expr1073743693 $assertEquals $(@expr1073743694 "cppcheck-2.8/test/testother.cpp" $, 1171 $, "" $, errout@var100 .@expr1865 str (@expr1866 ) $) $) { $return ; }
1172:
1173: $check_ $(@expr1073743697 "cppcheck-2.8/test/testother.cpp" $, 1173 $, "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            if(c)\n                do_something(x);\n            break;\n        case B:\n        default:\n            break;\n    }\n}" $)
1174:
|
1184:
1185: ;
1186: $if $(@expr1073743698 $!@expr1073743699 $assertEquals $(@expr1073743700 "cppcheck-2.8/test/testother.cpp" $, 1186 $, "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n" $, errout@var100 .@expr1865 str (@expr1866 ) $) $) { $return ; }
1187:
1188: $check_ $(@expr1073743703 "cppcheck-2.8/test/testother.cpp" $, 1188 $, "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            if(c)\n                do_something(x);\n            break;\n        case B:\n        default:\n            if(d)\n                do_something(x);\n            break;\n    }\n}" $)
1189:
|
1201:
1202: ;
1203: $if $(@expr1073743704 $!@expr1073743705 $assertEquals $(@expr1073743706 "cppcheck-2.8/test/testother.cpp" $, 1203 $, "" $, errout@var100 .@expr1865 str (@expr1866 ) $) $) { $return ; }
1204: }
1205:
1206: void varScope20 ( ) {
1207: $check_ $(@expr1073743709 "cppcheck-2.8/test/testother.cpp" $, 1207 $, "int f(int a) {\n  const int x = 234;\n  int b = a;\n  if (b > 32) b = x;\n  return b;\n}" $)
1208:
|
1211:
1212: ;
1213: $if $(@expr1073743710 $!@expr1073743711 $assertEquals $(@expr1073743712 "cppcheck-2.8/test/testother.cpp" $, 1213 $, "" $, errout@var100 .@expr1073743713 str (@expr1073743714 ) $) $) { $return ; }
1214: }
1215:
1216: void varScope21 ( ) {
1217: $check_ $(@expr1073743715 "cppcheck-2.8/test/testother.cpp" $, 1217 $, "int test() {\n    int test_value = 3;\n    int test_array[1][1] = { { test_value } };\n    return sizeof(test_array);\n}" $)
1218:
1219:
1220:
1221: ;
1222: $if $(@expr1073743716 $!@expr1073743717 $assertEquals $(@expr1073743718 "cppcheck-2.8/test/testother.cpp" $, 1222 $, "" $, errout@var100 .@expr1073743719 str (@expr1073743720 ) $) $) { $return ; }
1223: }
1224:
1225: void varScope22 ( ) {
1226: $check_ $(@expr1073743721 "cppcheck-2.8/test/testother.cpp" $, 1226 $, "void foo() {\n   int* p( 42 );\n   int i = 0;\n   while ( i != 100 ) {\n      *p = i;\n      ++p;\n      ++i;\n   }\n}" $)
1227:
|
1233:
1234: ;
1235: $if $(@expr1073743722 $!@expr1073743723 $assertEquals $(@expr1073743724 "cppcheck-2.8/test/testother.cpp" $, 1235 $, "" $, errout@var100 .@expr1901 str (@expr1902 ) $) $) { $return ; }
1236:
1237: $check_ $(@expr1073743727 "cppcheck-2.8/test/testother.cpp" $, 1237 $, "void foo() {\n   int* p( 42 );\n   int i = 0;\n   int dummy = 0;\n   while ( i != 100 ) {\n      p = & dummy;\n      *p = i;\n      ++p;\n      ++i;\n   }\n}" $)
1238:
|
1246:
1247: ;
1248: $if $(@expr1073743728 $!@expr1073743729 $assertEquals $(@expr1073743730 "cppcheck-2.8/test/testother.cpp" $, 1248 $, "[test.cpp:2]: (style) The scope of the variable 'p' can be reduced.\n" $, errout@var100 .@expr1901 str (@expr1902 ) $) $) { $return ; }
1249: }
1250:
1251: void varScope23 ( ) {
1252: $check_ $(@expr1073743733 "cppcheck-2.8/test/testother.cpp" $, 1252 $, "int main() {\n   size_t myCounter = 0;\n   Test myTest([&](size_t aX){\n       std::cout << myCounter += aX << std::endl;\n   });\n}" $)
1253:
|
1256:
1257: ;
1258: $if $(@expr1073743734 $!@expr1073743735 $assertEquals $(@expr1073743736 "cppcheck-2.8/test/testother.cpp" $, 1258 $, "" $, errout@var100 .@expr1073743737 str (@expr1073743738 ) $) $) { $return ; }
1259: }
1260:
1261: void varScope24 ( ) {
1262: $check_ $(@expr1073743739 "cppcheck-2.8/test/testother.cpp" $, 1262 $, "void f(Foo x) {\n   Foo &r = x;\n   if (cond) {\n       r.dostuff();\n   }\n}" $)
1263:
|
1266:
1267: ;
1268: $if $(@expr1073743740 $!@expr1073743741 $assertEquals $(@expr1073743742 "cppcheck-2.8/test/testother.cpp" $, 1268 $, "[test.cpp:2]: (style) The scope of the variable 'r' can be reduced.\n" $, errout@var100 .@expr1919 str (@expr1920 ) $) $) { $return ; }
1269:
1270: $check_ $(@expr1073743745 "cppcheck-2.8/test/testother.cpp" $, 1270 $, "void f(Foo x) {\n   Foo foo = x;\n   if (cond) {\n       foo.dostuff();\n   }\n}" $)
1271:
|
1274:
1275: ;
1276: $if $(@expr1073743746 $!@expr1073743747 $assertEquals $(@expr1073743748 "cppcheck-2.8/test/testother.cpp" $, 1276 $, "" $, errout@var100 .@expr1919 str (@expr1920 ) $) $) { $return ; }
1277: }
1278:
1279: void varScope25 ( ) {
1280: $check_ $(@expr1073743751 "cppcheck-2.8/test/testother.cpp" $, 1280 $, "void f() {\n    time_t currtime;\n    if (a) {\n        currtime = time(&dummy);\n        if (currtime > t) {}\n    }\n}" , "test.c" $)
1281:
|
1285:
1286: ;
1287: $if $(@expr1073743752 $!@expr1073743753 $assertEquals $(@expr1073743754 "cppcheck-2.8/test/testother.cpp" $, 1287 $, "[test.c:2]: (style) The scope of the variable 'currtime' can be reduced.\n" $, errout@var100 .@expr1073743755 str (@expr1073743756 ) $) $) { $return ; }
1288: }
1289:
1290: void varScope26 ( ) {
1291: $check_ $(@expr1073743757 "cppcheck-2.8/test/testother.cpp" $, 1291 $, "void f(const std::map<int,int> &m) {\n  for (auto it : m) {\n     if (cond1) {\n       int& key = it.first;\n       if (cond2) { dostuff(key); }\n     }\n  }\n}" $)
1292:
|
1297:
1298: ;
1299: $if $(@expr1073743758 $!@expr1073743759 $assertEquals $(@expr1073743760 "cppcheck-2.8/test/testother.cpp" $, 1299 $, "" $, errout@var100 .@expr1073743761 str (@expr1073743762 ) $) $) { $return ; }
1300: }
1301:
1302: void varScope27 ( ) {
1303: checkP (@expr1073743763 "void f() {\n  int x = 0;\n#ifdef X\n#endif\n  if (id == ABC) { return x; }\n}"
1304:
|
1307:
1308: ) ;
1309: $if $(@expr1073743764 $!@expr1073743765 $assertEquals $(@expr1073743766 "cppcheck-2.8/test/testother.cpp" $, 1309 $, "" $, errout@var100 .@expr1943 str (@expr1944 ) $) $) { $return ; }
1310:
1311: checkP (@expr1073743769 "void f() {\n#ifdef X\n#endif\n  int x = 0;\n  if (id == ABC) { return x; }\n}"
1312:
|
1315:
1316: ) ;
1317: $if $(@expr1073743770 $!@expr1073743771 $assertEquals $(@expr1073743772 "cppcheck-2.8/test/testother.cpp" $, 1317 $, "[test.cpp:4]: (style) The scope of the variable 'x' can be reduced.\n" $, errout@var100 .@expr1943 str (@expr1944 ) $) $) { $return ; }
1318: }
1319:
1320: void varScope28 ( ) {
1321: $check_ $(@expr1073743775 "cppcheck-2.8/test/testother.cpp" $, 1321 $, "void f() {\n    int i{};\n    if (double d = g(i); d == 1.0) {}\n}\n" $)
1322:
1323:
1324: ;
1325: $if $(@expr1073743776 $!@expr1073743777 $assertEquals $(@expr1073743778 "cppcheck-2.8/test/testother.cpp" $, 1325 $, "" $, errout@var100 .@expr1073743779 str (@expr1073743780 ) $) $) { $return ; }
1326: }
1327:
1328: void varScope29 ( ) {
1329: $check_ $(@expr1073743781 "cppcheck-2.8/test/testother.cpp" $, 1329 $, "enum E { E0 };\nstruct S { int i; };\nvoid f(int b) {\n    enum E e;\n    struct S s;\n    if (b) {\n        e = E0;\n        s.i = 0;\n        g(e, s);\n    }\n}\n" , "test.c" $)
1330:
|
1338:
1339: ;
1340: $if $(@expr1073743782 $!@expr1073743783 $assertEquals $(@expr1073743784 "cppcheck-2.8/test/testother.cpp" $, 1340 $, "[test.c:4]: (style) The scope of the variable 'e' can be reduced.\n[test.c:5]: (style) The scope of the variable 's' can be reduced.\n" $, errout@var100 .@expr1961 str (@expr1962 ) $) $) { $return
1341:
1342: ; }
1343:
1344: $check_ $(@expr1073743787 "cppcheck-2.8/test/testother.cpp" $, 1344 $, "void f(bool b) {\n    std::string s;\n    if (b) {\n        s = \"abc\";\n        g(s);\n    }\n}" $)
1345:
|
1349:
1350: ;
1351: $if $(@expr1073743788 $!@expr1073743789 $assertEquals $(@expr1073743790 "cppcheck-2.8/test/testother.cpp" $, 1351 $, "[test.cpp:2]: (style) The scope of the variable 's' can be reduced.\n" $, errout@var100 .@expr1961 str (@expr1962 ) $) $) { $return ; }
1352:
1353: $check_ $(@expr1073743793 "cppcheck-2.8/test/testother.cpp" $, 1353 $, "auto foo(std::vector<int>& vec, bool flag) {\n    std::vector<int> dummy;\n    std::vector<int>::iterator iter;\n    if (flag)\n        iter = vec.begin();\n    else {\n        dummy.push_back(42);\n        iter = dummy.begin();\n    }\n    return *iter;\n}" $)
1354:
|
1362:
1363: ;
1364: $if $(@expr1073743794 $!@expr1073743795 $assertEquals $(@expr1073743796 "cppcheck-2.8/test/testother.cpp" $, 1364 $, "" $, errout@var100 .@expr1961 str (@expr1962 ) $) $) { $return ; }
1365: }
1366:
1367: void varScope30 ( ) {
1368: $check_ $(@expr1073743799 "cppcheck-2.8/test/testother.cpp" $, 1368 $, "bool f(std::vector<int>& v, int i) {\n    int n = 0;\n    bool b = false;\n    std::for_each(v.begin(), v.end(), [&](int j) {\n        if (j == i) {\n            ++n;\n            if (n > 5)\n                b = true;\n        }\n    });\n    return b;\n}\n" $)
1369:
|
1378:
1379: ;
1380: $if $(@expr1073743800 $!@expr1073743801 $assertEquals $(@expr1073743802 "cppcheck-2.8/test/testother.cpp" $, 1380 $, "" $, errout@var100 .@expr1073743803 str (@expr1073743804 ) $) $) { $return ; }
1381: }
1382:
1383:
1384: void checkOldStylePointerCast_ ( const char code@var149 [ ] , const char * file@var150 , int line@var151 ) {
1385:
1386: errout@var100 .@expr1073743807 str (@expr1073743808 "" ) ;
1387:
1388: static Settings settings@var152 ;
1389: settings@var152 .@expr1073743809 severity@var153 .@expr1073743810 enable (@expr1073743811 Severity ::@expr1073743812 style@expr1073743805 ) ;
1390: settings@var152 .@expr1073743813 standards@var154 .@expr1073743814 cpp@var155 =@expr1073743815 Standards ::@expr1073743816 CPP03@expr1073743806 ;
1391:
1392:
1393: Tokenizer tokenizerCpp@var156 (@expr1073743817 &@expr1994 settings@var152 , this@expr1995 ) ;
1394: std ::@expr1073743820 istringstream istr@var157 (@expr1073743821 code@var149 ) ;
1395: $assert_ $(@expr1073743822 file@var150 $, line@var151 $, $(@expr1073743823 tokenizerCpp@var156 .@expr1073743824 tokenize (@expr1073743825 istr@var157 , "test.cpp" ) $) $) ;
1396:
1397: CheckOther checkOtherCpp@var158 (@expr1073743826 &@expr1073743827 tokenizerCpp@var156 , &@expr1994 settings@var152 , this@expr1995 ) ;
1398: checkOtherCpp@var158 .@expr1073743829 warningOldStylePointerCast (@expr1073743830 ) ;
1399: }
1400:
1401: void oldStylePointerCast ( ) {
1402: $checkOldStylePointerCast_ $(@expr1073743831 "class Base;\nvoid foo()\n{\n    Base * b = (Base *) derived;\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1402 $)
1403:
1404:
1405:
1406: ;
1407: $if $(@expr1073743832 $!@expr1073743833 $assertEquals $(@expr1073743834 "cppcheck-2.8/test/testother.cpp" $, 1407 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1408:
1409: $checkOldStylePointerCast_ $(@expr1073743837 "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) derived;\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1409 $)
1410:
1411:
1412:
1413: ;
1414: $if $(@expr1073743838 $!@expr1073743839 $assertEquals $(@expr1073743840 "cppcheck-2.8/test/testother.cpp" $, 1414 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1415:
1416: $checkOldStylePointerCast_ $(@expr1073743843 "class Base;\nvoid foo()\n{\n    Base * b = (const Base * const) derived;\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1416 $)
1417:
1418:
1419:
1420: ;
1421: $if $(@expr1073743844 $!@expr1073743845 $assertEquals $(@expr1073743846 "cppcheck-2.8/test/testother.cpp" $, 1421 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1422:
1423: $checkOldStylePointerCast_ $(@expr1073743849 "class Base;\nvoid foo()\n{\n    Base * b = (volatile Base *) derived;\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1423 $)
1424:
1425:
1426:
1427: ;
1428: $if $(@expr1073743850 $!@expr1073743851 $assertEquals $(@expr1073743852 "cppcheck-2.8/test/testother.cpp" $, 1428 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1429:
1430: $checkOldStylePointerCast_ $(@expr1073743855 "class Base;\nvoid foo()\n{\n    Base * b = (volatile Base * const) derived;\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1430 $)
1431:
1432:
1433:
1434: ;
1435: $if $(@expr1073743856 $!@expr1073743857 $assertEquals $(@expr1073743858 "cppcheck-2.8/test/testother.cpp" $, 1435 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1436:
1437: $checkOldStylePointerCast_ $(@expr1073743861 "class Base;\nvoid foo()\n{\n    Base * b = (const volatile Base *) derived;\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1437 $)
1438:
1439:
1440:
1441: ;
1442: $if $(@expr1073743862 $!@expr1073743863 $assertEquals $(@expr1073743864 "cppcheck-2.8/test/testother.cpp" $, 1442 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1443:
1444: $checkOldStylePointerCast_ $(@expr1073743867 "class Base;\nvoid foo()\n{\n    Base * b = (const volatile Base * const) derived;\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1444 $)
1445:
1446:
1447:
1448: ;
1449: $if $(@expr1073743868 $!@expr1073743869 $assertEquals $(@expr1073743870 "cppcheck-2.8/test/testother.cpp" $, 1449 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1450:
1451: $checkOldStylePointerCast_ $(@expr1073743873 "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) ( new Derived() );\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1451 $)
1452:
1453:
1454:
1455: ;
1456: $if $(@expr1073743874 $!@expr1073743875 $assertEquals $(@expr1073743876 "cppcheck-2.8/test/testother.cpp" $, 1456 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1457:
1458: $checkOldStylePointerCast_ $(@expr1073743879 "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) new Derived();\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1458 $)
1459:
1460:
1461:
1462: ;
1463: $if $(@expr1073743880 $!@expr1073743881 $assertEquals $(@expr1073743882 "cppcheck-2.8/test/testother.cpp" $, 1463 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1464:
1465: $checkOldStylePointerCast_ $(@expr1073743885 "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) new short[10];\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1465 $)
1466:
1467:
1468:
1469: ;
1470: $if $(@expr1073743886 $!@expr1073743887 $assertEquals $(@expr1073743888 "cppcheck-2.8/test/testother.cpp" $, 1470 $, "[test.cpp:4]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1471:
1472: $checkOldStylePointerCast_ $(@expr1073743891 "class B;\nclass A\n{\n  virtual void abc(B *) const = 0;\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1472 $)
1473:
1474:
1475:
1476: ;
1477: $if $(@expr1073743892 $!@expr1073743893 $assertEquals $(@expr1073743894 "cppcheck-2.8/test/testother.cpp" $, 1477 $, "" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1478:
1479: $checkOldStylePointerCast_ $(@expr1073743897 "class B;\nclass A\n{\n  virtual void abc(const B *) const = 0;\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1479 $)
1480:
1481:
1482:
1483: ;
1484: $if $(@expr1073743898 $!@expr1073743899 $assertEquals $(@expr1073743900 "cppcheck-2.8/test/testother.cpp" $, 1484 $, "" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1485:
1486:
1487: $checkOldStylePointerCast_ $(@expr1073743903 "class SomeType;\nclass X : public Base {\n    X() : Base((SomeType*)7) {}\n};" $, "cppcheck-2.8/test/testother.cpp" $, 1487 $)
1488:
1489:
1490: ;
1491: $if $(@expr1073743904 $!@expr1073743905 $assertEquals $(@expr1073743906 "cppcheck-2.8/test/testother.cpp" $, 1491 $, "[test.cpp:3]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1492:
1493: $checkOldStylePointerCast_ $(@expr1073743909 "class SomeType;\nclass X : public Base {\n    X() : Base((SomeType*)var) {}\n};" $, "cppcheck-2.8/test/testother.cpp" $, 1493 $)
1494:
1495:
1496: ;
1497: $if $(@expr1073743910 $!@expr1073743911 $assertEquals $(@expr1073743912 "cppcheck-2.8/test/testother.cpp" $, 1497 $, "[test.cpp:3]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1498:
1499: $checkOldStylePointerCast_ $(@expr1073743915 "class SomeType;\nclass X : public Base {\n    X() : Base((SomeType*)0) {}\n};" $, "cppcheck-2.8/test/testother.cpp" $, 1499 $)
1500:
1501:
1502: ;
1503: $if $(@expr1073743916 $!@expr1073743917 $assertEquals $(@expr1073743918 "cppcheck-2.8/test/testother.cpp" $, 1503 $, "" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1504:
1505:
1506: $checkOldStylePointerCast_ $(@expr1073743921 "class C;\n\nclass B\n{ virtual G* createGui(S*, C*) const = 0; };\n\nclass MS : public M\n{ virtual void addController(C*) override {} };" $, "cppcheck-2.8/test/testother.cpp" $, 1506 $)
1507:
|
1511:
1512: ;
1513: $if $(@expr1073743922 $!@expr1073743923 $assertEquals $(@expr1073743924 "cppcheck-2.8/test/testother.cpp" $, 1513 $, "" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1514:
1515:
1516: $checkOldStylePointerCast_ $(@expr1073743927 "class Base {};\nclass Derived: public Base {};\nvoid testCC() {\n  std::vector<Base*> v;\n  v.push_back((Base*)new Derived);\n}" $, "cppcheck-2.8/test/testother.cpp" $, 1516 $)
1517:
|
1520:
1521: ;
1522: $if $(@expr1073743928 $!@expr1073743929 $assertEquals $(@expr1073743930 "cppcheck-2.8/test/testother.cpp" $, 1522 $, "[test.cpp:5]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1523:
1524:
1525: $checkOldStylePointerCast_ $(@expr1073743933 "typedef struct S S;\ntypedef struct S SS;\ntypedef class C C;\ntypedef long LONG;\ntypedef long* LONGP;\nstruct T {};\ntypedef struct T TT;\ntypedef struct T2 {} TT2;\nvoid f(int* i) {\n    S* s = (S*)i;\n    SS* ss = (SS*)i;\n    struct S2* s2 = (struct S2*)i;\n    C* c = (C*)i;\n    class C2* c2 = (class C2*)i;\n    long* l = (long*)i;\n    LONG* l2 = (LONG*)i;\n    LONGP l3 = (LONGP)i;\n    TT* tt = (TT*)i;\n    TT2* tt2 = (TT2*)i;\n}\n" $, "cppcheck-2.8/test/testother.cpp" $, 1525 $)
1526:
|
1543:
1544: ;
1545: $if $(@expr1073743934 $!@expr1073743935 $assertEquals $(@expr1073743936 "cppcheck-2.8/test/testother.cpp" $, 1545 $, "[test.cpp:10]: (style) C-style pointer casting\n[test.cpp:11]: (style) C-style pointer casting\n[test.cpp:12]: (style) C-style pointer casting\n[test.cpp:13]: (style) C-style pointer casting\n[test.cpp:14]: (style) C-style pointer casting\n[test.cpp:15]: (style) C-style pointer casting\n[test.cpp:16]: (style) C-style pointer casting\n[test.cpp:17]: (style) C-style pointer casting\n[test.cpp:18]: (style) C-style pointer casting\n[test.cpp:19]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return
1546:
|
1554:
1555: ; }
1556:
1557:
1558: $checkOldStylePointerCast_ $(@expr1073743939 "struct S {};\nvoid g(S*& s);\nvoid f(int i) {\n    g((S*&)i);\n    S*& r = (S*&)i;\n}\n" $, "cppcheck-2.8/test/testother.cpp" $, 1558 $)
1559:
|
1562:
1563: ;
1564: $if $(@expr1073743940 $!@expr1073743941 $assertEquals $(@expr1073743942 "cppcheck-2.8/test/testother.cpp" $, 1564 $, "[test.cpp:4]: (style) C-style pointer casting\n[test.cpp:5]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return
1565:
1566: ; }
1567:
1568:
1569: $checkOldStylePointerCast_ $(@expr1073743945 "void f(void* p) {\n    auto h = reinterpret_cast<void (STDAPICALLTYPE*)(int)>(p);\n}\n" $, "cppcheck-2.8/test/testother.cpp" $, 1569 $)
1570:
1571: ;
1572: $if $(@expr1073743946 $!@expr1073743947 $assertEquals $(@expr1073743948 "cppcheck-2.8/test/testother.cpp" $, 1572 $, "" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return ; }
1573:
1574:
1575: $checkOldStylePointerCast_ $(@expr1073743951 "void f(void* v1, void* v2) {\n    T** p1 = (T**)v1;\n    T*** p2 = (T***)v2;\n}\n" $, "cppcheck-2.8/test/testother.cpp" $, 1575 $)
1576:
1577:
1578: ;
1579: $if $(@expr1073743952 $!@expr1073743953 $assertEquals $(@expr1073743954 "cppcheck-2.8/test/testother.cpp" $, 1579 $, "[test.cpp:2]: (style) C-style pointer casting\n[test.cpp:3]: (style) C-style pointer casting\n" $, errout@var100 .@expr2011 str (@expr2012 ) $) $) { $return
1580:
1581: ; }
1582: }
1583:
1584:
1585: void checkInvalidPointerCast_ ( const char * file@var159 , int line@var160 , const char code@var161 [ ] , bool portability@var162 = true , bool inconclusive@var163 = false ) {
1586:
1587: errout@var100 .@expr1073743960 str (@expr1073743961 "" ) ;
1588:
1589: Settings settings@var164 ;
1590: settings@var164 .@expr2138 severity@var165 .@expr2139 enable (@expr1073743964 Severity ::@expr1073743965 warning@expr1073743957 ) ;
1591: if (@expr1073743966 portability@var162 ) {
1592: settings@var164 .@expr2138 severity@var165 .@expr2139 enable (@expr1073743969 Severity ::@expr1073743970 portability@expr1073743958 ) ; }
1593: settings@var164 .@expr1073743971 certainty@var166 .@expr1073743972 setEnabled (@expr1073743973 Certainty ::@expr1073743974 inconclusive@expr1073743959 , inconclusive@var163 ) ;
1594:
1595: settings@var164 .@expr1073743975 defaultSign@var167 =@expr1073743976 's' ;
1596:
1597: Tokenizer tokenizer@var168 (@expr1073743977 &@expr2154 settings@var164 , this@expr2155 ) ;
1598: std ::@expr1073743980 istringstream istr@var169 (@expr1073743981 code@var161 ) ;
1599: $assert_ $(@expr1073743982 file@var159 $, line@var160 $, $(@expr1073743983 tokenizer@var168 .@expr1073743984 tokenize (@expr1073743985 istr@var169 , "test.cpp" ) $) $) ;
1600:
1601: CheckOther checkOtherCpp@var170 (@expr1073743986 &@expr1073743987 tokenizer@var168 , &@expr2154 settings@var164 , this@expr2155 ) ;
1602: checkOtherCpp@var170 .@expr1073743989 invalidPointerCast (@expr1073743990 ) ;
1603: }
1604:
1605:
1606: void invalidPointerCast ( ) {
1607: $checkInvalidPointerCast_ $(@expr1073743991 "cppcheck-2.8/test/testother.cpp" $, 1607 $, "void test() {\n    float *f = new float[10];\n    delete [] (double*)f;\n    delete [] (long double const*)(new float[10]);\n}" $)
1608:
1609:
1610:
1611: ;
1612: $if $(@expr1073743992 $!@expr1073743993 $assertEquals $(@expr1073743994 "cppcheck-2.8/test/testother.cpp" $, 1612 $, "[test.cpp:3]: (portability) Casting between float * and double * which have an incompatible binary data representation.\n[test.cpp:4]: (portability) Casting between float * and const long double * which have an incompatible binary data representation.\n" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return
1613: ; }
1614:
1615: $checkInvalidPointerCast_ $(@expr1073743997 "cppcheck-2.8/test/testother.cpp" $, 1615 $, "void test(const float* f) {\n    double *d = (double*)f;\n}" $)
1616:
1617: ;
1618: $if $(@expr1073743998 $!@expr1073743999 $assertEquals $(@expr1073744000 "cppcheck-2.8/test/testother.cpp" $, 1618 $, "[test.cpp:2]: (portability) Casting between const float * and double * which have an incompatible binary data representation.\n" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return ; }
1619:
1620: $checkInvalidPointerCast_ $(@expr1073744003 "cppcheck-2.8/test/testother.cpp" $, 1620 $, "void test(double* d1) {\n    long double *ld = (long double*)d1;\n    double *d2 = (double*)ld;\n}" $)
1621:
1622:
1623: ;
1624: $if $(@expr1073744004 $!@expr1073744005 $assertEquals $(@expr1073744006 "cppcheck-2.8/test/testother.cpp" $, 1624 $, "[test.cpp:2]: (portability) Casting between double * and long double * which have an incompatible binary data representation.\n[test.cpp:3]: (portability) Casting between long double * and double * which have an incompatible binary data representation.\n" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return
1625: ; }
1626:
1627: $checkInvalidPointerCast_ $(@expr1073744009 "cppcheck-2.8/test/testother.cpp" $, 1627 $, "char* test(int* i) {\n    long double *d = (long double*)(i);\n    double *d = (double*)(i);\n    float *f = reinterpret_cast<float*>(i);\n}" $)
1628:
1629:
1630:
1631: ;
1632: $if $(@expr1073744010 $!@expr1073744011 $assertEquals $(@expr1073744012 "cppcheck-2.8/test/testother.cpp" $, 1632 $, "[test.cpp:2]: (portability) Casting between signed int * and long double * which have an incompatible binary data representation.\n[test.cpp:3]: (portability) Casting between signed int * and double * which have an incompatible binary data representation.\n[test.cpp:4]: (portability) Casting between signed int * and float * which have an incompatible binary data representation.\n" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return
1633:
1634: ; }
1635:
1636: $checkInvalidPointerCast_ $(@expr1073744015 "cppcheck-2.8/test/testother.cpp" $, 1636 $, "float* test(unsigned int* i) {\n    return (float*)i;\n}" $)
1637:
1638: ;
1639: $if $(@expr1073744016 $!@expr1073744017 $assertEquals $(@expr1073744018 "cppcheck-2.8/test/testother.cpp" $, 1639 $, "[test.cpp:2]: (portability) Casting between unsigned int * and float * which have an incompatible binary data representation.\n" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return ; }
1640:
1641: $checkInvalidPointerCast_ $(@expr1073744021 "cppcheck-2.8/test/testother.cpp" $, 1641 $, "float* test(unsigned int* i) {\n    return (float*)i[0];\n}" $)
1642:
1643: ;
1644: $if $(@expr1073744022 $!@expr1073744023 $assertEquals $(@expr1073744024 "cppcheck-2.8/test/testother.cpp" $, 1644 $, "" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return ; }
1645:
1646: $checkInvalidPointerCast_ $(@expr1073744027 "cppcheck-2.8/test/testother.cpp" $, 1646 $, "float* test(double& d) {\n    return (float*)&d;\n}" $)
1647:
1648: ;
1649: $if $(@expr1073744028 $!@expr1073744029 $assertEquals $(@expr1073744030 "cppcheck-2.8/test/testother.cpp" $, 1649 $, "[test.cpp:2]: (portability) Casting between double * and float * which have an incompatible binary data representation.\n" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return ; }
1650:
1651: $checkInvalidPointerCast_ $(@expr1073744033 "cppcheck-2.8/test/testother.cpp" $, 1651 $, "void test(float* data) {\n    f.write((char*)data,sizeof(float));\n}" , true , false $)
1652:
1653: ;
1654: $if $(@expr1073744034 $!@expr1073744035 $assertEquals $(@expr1073744036 "cppcheck-2.8/test/testother.cpp" $, 1654 $, "" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return ; }
1655:
1656: $checkInvalidPointerCast_ $(@expr1073744039 "cppcheck-2.8/test/testother.cpp" $, 1656 $, "void test(float* data) {\n    f.write((char*)data,sizeof(float));\n}" , true , true $)
1657:
1658: ;
1659: $if $(@expr1073744040 $!@expr1073744041 $assertEquals $(@expr1073744042 "cppcheck-2.8/test/testother.cpp" $, 1659 $, "[test.cpp:2]: (portability, inconclusive) Casting from float * to signed char * is not portable due to different binary data representations on different platforms.\n" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return ; }
1660:
1661:
1662: $checkInvalidPointerCast_ $(@expr1073744045 "cppcheck-2.8/test/testother.cpp" $, 1662 $, "long long* test(float* f) {\n    return (long long*)f;\n}" , false $)
1663:
1664: ;
1665: $if $(@expr1073744046 $!@expr1073744047 $assertEquals $(@expr1073744048 "cppcheck-2.8/test/testother.cpp" $, 1665 $, "" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return ; }
1666:
1667: $checkInvalidPointerCast_ $(@expr1073744051 "cppcheck-2.8/test/testother.cpp" $, 1667 $, "long long* test(float* f, char* c) {\n    foo((long long*)f);\n    return reinterpret_cast<long long*>(c);\n}" , true $)
1668:
1669:
1670: ;
1671: $if $(@expr1073744052 $!@expr1073744053 $assertEquals $(@expr1073744054 "cppcheck-2.8/test/testother.cpp" $, 1671 $, "[test.cpp:2]: (portability) Casting from float * to signed long long * is not portable due to different binary data representations on different platforms.\n" $, errout@var100 .@expr2171 str (@expr2172 ) $) $) { $return ; }
1672:
1673: $checkInvalidPointerCast_ $(@expr1073744057 "cppcheck-2.8/test/testother.cpp" $, 1673 $, "Q_DECLARE_METATYPE(int*)" $) ;
1674: }
1675:
1676:
1677: void passedByValue ( ) {
1678: $check_ $(@expr1073744059 "cppcheck-2.8/test/testother.cpp" $, 1678 $, "void f(const std::string str) {}" $) ;
1679: $if $(@expr1073744060 $!@expr1073744061 $assertEquals $(@expr1073744062 "cppcheck-2.8/test/testother.cpp" $, 1679 $, "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1680:
1681: $check_ $(@expr1073744065 "cppcheck-2.8/test/testother.cpp" $, 1681 $, "void f(std::unique_ptr<std::string> ptr) {}" $) ;
1682: $if $(@expr1073744066 $!@expr1073744067 $assertEquals $(@expr1073744068 "cppcheck-2.8/test/testother.cpp" $, 1682 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1683:
1684: $check_ $(@expr1073744071 "cppcheck-2.8/test/testother.cpp" $, 1684 $, "void f(const std::shared_ptr<std::string> ptr) {}" $) ;
1685: $if $(@expr1073744072 $!@expr1073744073 $assertEquals $(@expr1073744074 "cppcheck-2.8/test/testother.cpp" $, 1685 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1686:
1687: $check_ $(@expr1073744077 "cppcheck-2.8/test/testother.cpp" $, 1687 $, "void f(const std::function<F> ptr) {}" $) ;
1688: $if $(@expr1073744078 $!@expr1073744079 $assertEquals $(@expr1073744080 "cppcheck-2.8/test/testother.cpp" $, 1688 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1689:
1690: {
1691: $check_ $(@expr1073744083 "cppcheck-2.8/test/testother.cpp" $, 1691 $, "void f(const std::pair<int,int> x) {}" $) ;
1692: $if $(@expr1073744084 $!@expr1073744085 $assertEquals $(@expr1073744086 "cppcheck-2.8/test/testother.cpp" $, 1692 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1693:
1694: $check_ $(@expr1073744089 "cppcheck-2.8/test/testother.cpp" $, 1694 $, "void f(const std::pair<std::string,std::string> x) {}" $) ;
1695: $todoAssertEquals $(@expr1073744090 "cppcheck-2.8/test/testother.cpp" $, 1695 $, "error" $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) ;
1696: }
1697:
1698: $check_ $(@expr1073744093 "cppcheck-2.8/test/testother.cpp" $, 1698 $, "void f(const std::string::size_type x) {}" $) ;
1699: $if $(@expr1073744094 $!@expr1073744095 $assertEquals $(@expr1073744096 "cppcheck-2.8/test/testother.cpp" $, 1699 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1700:
1701: $check_ $(@expr1073744099 "cppcheck-2.8/test/testother.cpp" $, 1701 $, "class Foo;\nvoid f(const Foo foo) {}" $) ;
1702: $if $(@expr1073744100 $!@expr1073744101 $assertEquals $(@expr1073744102 "cppcheck-2.8/test/testother.cpp" $, 1702 $, "[test.cpp:2]: (performance, inconclusive) Function parameter 'foo' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1703:
1704: $check_ $(@expr1073744105 "cppcheck-2.8/test/testother.cpp" $, 1704 $, "class Foo { std::vector<int> v; };\nvoid f(const Foo foo) {}" $) ;
1705: $if $(@expr1073744106 $!@expr1073744107 $assertEquals $(@expr1073744108 "cppcheck-2.8/test/testother.cpp" $, 1705 $, "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1706:
1707: $check_ $(@expr1073744111 "cppcheck-2.8/test/testother.cpp" $, 1707 $, "class Foo { int i; };\nvoid f(const Foo foo) {}" $) ;
1708: $if $(@expr1073744112 $!@expr1073744113 $assertEquals $(@expr1073744114 "cppcheck-2.8/test/testother.cpp" $, 1708 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1709:
1710: $check_ $(@expr1073744117 "cppcheck-2.8/test/testother.cpp" $, 1710 $, "class Foo { int i[6]; };\nvoid f(const Foo foo) {}" $) ;
1711: $if $(@expr1073744118 $!@expr1073744119 $assertEquals $(@expr1073744120 "cppcheck-2.8/test/testother.cpp" $, 1711 $, "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1712:
1713: $check_ $(@expr1073744123 "cppcheck-2.8/test/testother.cpp" $, 1713 $, "class Foo { std::string* s; };\nvoid f(const Foo foo) {}" $) ;
1714: $if $(@expr1073744124 $!@expr1073744125 $assertEquals $(@expr1073744126 "cppcheck-2.8/test/testother.cpp" $, 1714 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1715:
1716: $check_ $(@expr1073744129 "cppcheck-2.8/test/testother.cpp" $, 1716 $, "class Foo { static std::string s; };\nvoid f(const Foo foo) {}" $) ;
1717: $if $(@expr1073744130 $!@expr1073744131 $assertEquals $(@expr1073744132 "cppcheck-2.8/test/testother.cpp" $, 1717 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1718:
1719: $check_ $(@expr1073744135 "cppcheck-2.8/test/testother.cpp" $, 1719 $, "class X { std::string s; }; class Foo : X { };\nvoid f(const Foo foo) {}" $) ;
1720: $if $(@expr1073744136 $!@expr1073744137 $assertEquals $(@expr1073744138 "cppcheck-2.8/test/testother.cpp" $, 1720 $, "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1721:
1722: $check_ $(@expr1073744141 "cppcheck-2.8/test/testother.cpp" $, 1722 $, "class X { std::string s; }; class Foo { X x; };\nvoid f(const Foo foo) {}" $) ;
1723: $if $(@expr1073744142 $!@expr1073744143 $assertEquals $(@expr1073744144 "cppcheck-2.8/test/testother.cpp" $, 1723 $, "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1724:
1725: $check_ $(@expr1073744147 "cppcheck-2.8/test/testother.cpp" $, 1725 $, "void f(const std::string &str) {}" $) ;
1726: $if $(@expr1073744148 $!@expr1073744149 $assertEquals $(@expr1073744150 "cppcheck-2.8/test/testother.cpp" $, 1726 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1727:
1728:
1729: $check_ $(@expr1073744153 "cppcheck-2.8/test/testother.cpp" $, 1729 $, "void f(const std::string_view str) {}" $) ;
1730: $if $(@expr1073744154 $!@expr1073744155 $assertEquals $(@expr1073744156 "cppcheck-2.8/test/testother.cpp" $, 1730 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1731:
1732: $check_ $(@expr1073744159 "cppcheck-2.8/test/testother.cpp" $, 1732 $, "void f(std::string_view str) {}" $) ;
1733: $if $(@expr1073744160 $!@expr1073744161 $assertEquals $(@expr1073744162 "cppcheck-2.8/test/testother.cpp" $, 1733 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1734:
1735: $check_ $(@expr1073744165 "cppcheck-2.8/test/testother.cpp" $, 1735 $, "void f(const std::string_view &str) {}" $) ;
1736: $if $(@expr1073744166 $!@expr1073744167 $assertEquals $(@expr1073744168 "cppcheck-2.8/test/testother.cpp" $, 1736 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1737:
1738: $check_ $(@expr1073744171 "cppcheck-2.8/test/testother.cpp" $, 1738 $, "void f(const std::vector<int> v) {}" $) ;
1739: $if $(@expr1073744172 $!@expr1073744173 $assertEquals $(@expr1073744174 "cppcheck-2.8/test/testother.cpp" $, 1739 $, "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1740:
1741: $check_ $(@expr1073744177 "cppcheck-2.8/test/testother.cpp" $, 1741 $, "void f(const std::vector<std::string> v) {}" $) ;
1742: $if $(@expr1073744178 $!@expr1073744179 $assertEquals $(@expr1073744180 "cppcheck-2.8/test/testother.cpp" $, 1742 $, "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1743:
1744: $check_ $(@expr1073744183 "cppcheck-2.8/test/testother.cpp" $, 1744 $, "void f(const std::vector<std::string>::size_type s) {}" $) ;
1745: $if $(@expr1073744184 $!@expr1073744185 $assertEquals $(@expr1073744186 "cppcheck-2.8/test/testother.cpp" $, 1745 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1746:
1747: $check_ $(@expr1073744189 "cppcheck-2.8/test/testother.cpp" $, 1747 $, "void f(const std::vector<int> &v) {}" $) ;
1748: $if $(@expr1073744190 $!@expr1073744191 $assertEquals $(@expr1073744192 "cppcheck-2.8/test/testother.cpp" $, 1748 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1749:
1750: $check_ $(@expr1073744195 "cppcheck-2.8/test/testother.cpp" $, 1750 $, "void f(const std::map<int,int> &v) {}" $) ;
1751: $if $(@expr1073744196 $!@expr1073744197 $assertEquals $(@expr1073744198 "cppcheck-2.8/test/testother.cpp" $, 1751 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1752:
1753: $check_ $(@expr1073744201 "cppcheck-2.8/test/testother.cpp" $, 1753 $, "void f(const std::map<int,int> v) {}" $) ;
1754: $if $(@expr1073744202 $!@expr1073744203 $assertEquals $(@expr1073744204 "cppcheck-2.8/test/testother.cpp" $, 1754 $, "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1755:
1756: $check_ $(@expr1073744207 "cppcheck-2.8/test/testother.cpp" $, 1756 $, "void f(const std::map<std::string,std::string> v) {}" $) ;
1757: $if $(@expr1073744208 $!@expr1073744209 $assertEquals $(@expr1073744210 "cppcheck-2.8/test/testother.cpp" $, 1757 $, "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1758:
1759: $check_ $(@expr1073744213 "cppcheck-2.8/test/testother.cpp" $, 1759 $, "void f(const std::map<int,std::string> v) {}" $) ;
1760: $if $(@expr1073744214 $!@expr1073744215 $assertEquals $(@expr1073744216 "cppcheck-2.8/test/testother.cpp" $, 1760 $, "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1761:
1762: $check_ $(@expr1073744219 "cppcheck-2.8/test/testother.cpp" $, 1762 $, "void f(const std::map<std::string,int> v) {}" $) ;
1763: $if $(@expr1073744220 $!@expr1073744221 $assertEquals $(@expr1073744222 "cppcheck-2.8/test/testother.cpp" $, 1763 $, "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1764:
1765: $check_ $(@expr1073744225 "cppcheck-2.8/test/testother.cpp" $, 1765 $, "void f(const std::streamoff pos) {}" $) ;
1766: $if $(@expr1073744226 $!@expr1073744227 $assertEquals $(@expr1073744228 "cppcheck-2.8/test/testother.cpp" $, 1766 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1767:
1768: $check_ $(@expr1073744231 "cppcheck-2.8/test/testother.cpp" $, 1768 $, "void f(std::initializer_list<int> i) {}" $) ;
1769: $if $(@expr1073744232 $!@expr1073744233 $assertEquals $(@expr1073744234 "cppcheck-2.8/test/testother.cpp" $, 1769 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1770:
1771:
1772: $check_ $(@expr1073744237 "cppcheck-2.8/test/testother.cpp" $, 1772 $, "void log(const std::string& file, int line, const std::string& function, const std::string str, ...) {}" $) ;
1773: $if $(@expr1073744238 $!@expr1073744239 $assertEquals $(@expr1073744240 "cppcheck-2.8/test/testother.cpp" $, 1773 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1774:
1775:
1776: $check_ $(@expr1073744243 "cppcheck-2.8/test/testother.cpp" $, 1776 $, "struct float3 { };\ntypedef float3 vec;\nclass Plane {\n    vec Refract(vec &vec) const;\n    bool IntersectLinePlane(const vec &planeNormal);\n};" $)
1777:
|
1780:
1781: ;
1782: $if $(@expr1073744244 $!@expr1073744245 $assertEquals $(@expr1073744246 "cppcheck-2.8/test/testother.cpp" $, 1782 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1783:
1784: $check_ $(@expr1073744249 "cppcheck-2.8/test/testother.cpp" $, 1784 $, "class X {\n    virtual void func(const std::string str) {}\n};" $)
1785:
1786: ;
1787: $if $(@expr1073744250 $!@expr1073744251 $assertEquals $(@expr1073744252 "cppcheck-2.8/test/testother.cpp" $, 1787 $, "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1788:
1789: $check_ $(@expr1073744255 "cppcheck-2.8/test/testother.cpp" $, 1789 $, "enum X;\nvoid foo(X x1){}\n" $)
1790: ;
1791: $if $(@expr1073744256 $!@expr1073744257 $assertEquals $(@expr1073744258 "cppcheck-2.8/test/testother.cpp" $, 1791 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1792:
1793: $check_ $(@expr1073744261 "cppcheck-2.8/test/testother.cpp" $, 1793 $, "enum X { a, b, c };\nvoid foo(X x2){}\n" $)
1794: ;
1795: $if $(@expr1073744262 $!@expr1073744263 $assertEquals $(@expr1073744264 "cppcheck-2.8/test/testother.cpp" $, 1795 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1796:
1797: $check_ $(@expr1073744267 "cppcheck-2.8/test/testother.cpp" $, 1797 $, "enum X { a, b, c };\nenum X;void foo(X x3){}\n" $)
1798:
1799: ;
1800: $if $(@expr1073744268 $!@expr1073744269 $assertEquals $(@expr1073744270 "cppcheck-2.8/test/testother.cpp" $, 1800 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1801:
1802: $check_ $(@expr1073744273 "cppcheck-2.8/test/testother.cpp" $, 1802 $, "enum X;\nenum X { a, b, c };void foo(X x4){}\n" $)
1803:
1804: ;
1805: $if $(@expr1073744274 $!@expr1073744275 $assertEquals $(@expr1073744276 "cppcheck-2.8/test/testother.cpp" $, 1805 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1806:
1807: $check_ $(@expr1073744279 "cppcheck-2.8/test/testother.cpp" $, 1807 $, "union U {\n    char* pc;\n    short* ps;\n    int* pi;\n};\nvoid f(U u) {}\n" $)
1808:
|
1811:
1812: ;
1813: $if $(@expr1073744280 $!@expr1073744281 $assertEquals $(@expr1073744282 "cppcheck-2.8/test/testother.cpp" $, 1813 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1814:
1815: $check_ $(@expr1073744285 "cppcheck-2.8/test/testother.cpp" $, 1815 $, "struct S { char A[8][8]; };\nvoid f(S s) {}\n" $)
1816: ;
1817: $if $(@expr1073744286 $!@expr1073744287 $assertEquals $(@expr1073744288 "cppcheck-2.8/test/testother.cpp" $, 1817 $, "[test.cpp:2]: (performance) Function parameter 's' should be passed by const reference.\n" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1818:
1819: Settings settings1@var171 ;
1820: settings1@var171 .@expr1073744291 platform (@expr1073744292 Settings ::@expr1073744293 Win64@expr1073744058 ) ;
1821: $check_ $(@expr1073744294 "cppcheck-2.8/test/testother.cpp" $, 1821 $, "using ui64 = unsigned __int64;\nui64 Test(ui64 one, ui64 two) { return one + two; }\n" , nullptr , false , true , true , false , &@expr1073744295 settings1@var171 $)
1822:
1823: ;
1824: $if $(@expr1073744296 $!@expr1073744297 $assertEquals $(@expr1073744298 "cppcheck-2.8/test/testother.cpp" $, 1824 $, "" $, errout@var100 .@expr2239 str (@expr2240 ) $) $) { $return ; }
1825: }
1826:
1827: void passedByValue_nonConst ( ) {
1828: $check_ $(@expr1073744303 "cppcheck-2.8/test/testother.cpp" $, 1828 $, "void f(std::string str) {}" $) ;
1829: $if $(@expr1073744304 $!@expr1073744305 $assertEquals $(@expr1073744306 "cppcheck-2.8/test/testother.cpp" $, 1829 $, "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1830:
1831: $check_ $(@expr1073744309 "cppcheck-2.8/test/testother.cpp" $, 1831 $, "void f(std::string str) {\n    return str + x;\n}" $)
1832:
1833: ;
1834: $if $(@expr1073744310 $!@expr1073744311 $assertEquals $(@expr1073744312 "cppcheck-2.8/test/testother.cpp" $, 1834 $, "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1835:
1836: $check_ $(@expr1073744315 "cppcheck-2.8/test/testother.cpp" $, 1836 $, "void f(std::string str) {\n    std::cout << str;\n}" $)
1837:
1838: ;
1839: $if $(@expr1073744316 $!@expr1073744317 $assertEquals $(@expr1073744318 "cppcheck-2.8/test/testother.cpp" $, 1839 $, "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1840:
1841: $check_ $(@expr1073744321 "cppcheck-2.8/test/testother.cpp" $, 1841 $, "void f(std::string str) {\n    std::cin >> str;\n}" $)
1842:
1843: ;
1844: $if $(@expr1073744322 $!@expr1073744323 $assertEquals $(@expr1073744324 "cppcheck-2.8/test/testother.cpp" $, 1844 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1845:
1846: $check_ $(@expr1073744327 "cppcheck-2.8/test/testother.cpp" $, 1846 $, "void f(std::string str) {\n    std::string s2 = str;\n}" $)
1847:
1848: ;
1849: $if $(@expr1073744328 $!@expr1073744329 $assertEquals $(@expr1073744330 "cppcheck-2.8/test/testother.cpp" $, 1849 $, "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1850:
1851: $check_ $(@expr1073744333 "cppcheck-2.8/test/testother.cpp" $, 1851 $, "void f(std::string str) {\n    std::string& s2 = str;\n}" $)
1852:
1853: ;
1854: $if $(@expr1073744334 $!@expr1073744335 $assertEquals $(@expr1073744336 "cppcheck-2.8/test/testother.cpp" $, 1854 $, "[test.cpp:2]: (style) Variable 's2' can be declared with const\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1855:
1856: $check_ $(@expr1073744339 "cppcheck-2.8/test/testother.cpp" $, 1856 $, "void f(std::string str) {\n    const std::string& s2 = str;\n}" $)
1857:
1858: ;
1859: $if $(@expr1073744340 $!@expr1073744341 $assertEquals $(@expr1073744342 "cppcheck-2.8/test/testother.cpp" $, 1859 $, "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1860:
1861: $check_ $(@expr1073744345 "cppcheck-2.8/test/testother.cpp" $, 1861 $, "void f(std::string str) {\n    str = \"\";\n}" $)
1862:
1863: ;
1864: $if $(@expr1073744346 $!@expr1073744347 $assertEquals $(@expr1073744348 "cppcheck-2.8/test/testother.cpp" $, 1864 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1865:
1866: $check_ $(@expr1073744351 "cppcheck-2.8/test/testother.cpp" $, 1866 $, "void f(std::string str) {\n    foo(str);\n}" $)
1867:
1868: ;
1869: $if $(@expr1073744352 $!@expr1073744353 $assertEquals $(@expr1073744354 "cppcheck-2.8/test/testother.cpp" $, 1869 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1870:
1871: $check_ $(@expr1073744357 "cppcheck-2.8/test/testother.cpp" $, 1871 $, "void foo(const std::string& str);\nvoid f(std::string str) {\n    foo(str);\n}" $)
1872:
1873:
1874: ;
1875: $if $(@expr1073744358 $!@expr1073744359 $assertEquals $(@expr1073744360 "cppcheck-2.8/test/testother.cpp" $, 1875 $, "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1876:
1877: $check_ $(@expr1073744363 "cppcheck-2.8/test/testother.cpp" $, 1877 $, "void foo(std::string str);\nvoid f(std::string str) {\n    foo(str);\n}" $)
1878:
1879:
1880: ;
1881: $if $(@expr1073744364 $!@expr1073744365 $assertEquals $(@expr1073744366 "cppcheck-2.8/test/testother.cpp" $, 1881 $, "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1882:
1883: $check_ $(@expr1073744369 "cppcheck-2.8/test/testother.cpp" $, 1883 $, "void foo(std::string& str);\nvoid f(std::string str) {\n    foo(str);\n}" $)
1884:
1885:
1886: ;
1887: $if $(@expr1073744370 $!@expr1073744371 $assertEquals $(@expr1073744372 "cppcheck-2.8/test/testother.cpp" $, 1887 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1888:
1889: $check_ $(@expr1073744375 "cppcheck-2.8/test/testother.cpp" $, 1889 $, "void foo(std::string* str);\nvoid f(std::string str) {\n    foo(&str);\n}" $)
1890:
1891:
1892: ;
1893: $if $(@expr1073744376 $!@expr1073744377 $assertEquals $(@expr1073744378 "cppcheck-2.8/test/testother.cpp" $, 1893 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1894:
1895: $check_ $(@expr1073744381 "cppcheck-2.8/test/testother.cpp" $, 1895 $, "void foo(int& i1, const std::string& str, int& i2);\nvoid f(std::string str) {\n    foo((a+b)*c, str, x);\n}" $)
1896:
1897:
1898: ;
1899: $if $(@expr1073744382 $!@expr1073744383 $assertEquals $(@expr1073744384 "cppcheck-2.8/test/testother.cpp" $, 1899 $, "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1900:
1901: $check_ $(@expr1073744387 "cppcheck-2.8/test/testother.cpp" $, 1901 $, "std::string f(std::string str) {\n    str += x;\n    return str;\n}" $)
1902:
1903:
1904: ;
1905: $if $(@expr1073744388 $!@expr1073744389 $assertEquals $(@expr1073744390 "cppcheck-2.8/test/testother.cpp" $, 1905 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1906:
1907: $check_ $(@expr1073744393 "cppcheck-2.8/test/testother.cpp" $, 1907 $, "class X {\n    std::string s;\n    void func() const;\n};\nY f(X x) {\n    x.func();\n}" $)
1908:
|
1912:
1913: ;
1914: $if $(@expr1073744394 $!@expr1073744395 $assertEquals $(@expr1073744396 "cppcheck-2.8/test/testother.cpp" $, 1914 $, "[test.cpp:5]: (performance) Function parameter 'x' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1915:
1916: $check_ $(@expr1073744399 "cppcheck-2.8/test/testother.cpp" $, 1916 $, "class X {\n    void func();\n};\nY f(X x) {\n    x.func();\n}" $)
1917:
|
1920:
1921: ;
1922: $if $(@expr1073744400 $!@expr1073744401 $assertEquals $(@expr1073744402 "cppcheck-2.8/test/testother.cpp" $, 1922 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1923:
1924: $check_ $(@expr1073744405 "cppcheck-2.8/test/testother.cpp" $, 1924 $, "class X {\n    void func(std::string str) {}\n};" $)
1925:
1926: ;
1927: $if $(@expr1073744406 $!@expr1073744407 $assertEquals $(@expr1073744408 "cppcheck-2.8/test/testother.cpp" $, 1927 $, "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1928:
1929: $check_ $(@expr1073744411 "cppcheck-2.8/test/testother.cpp" $, 1929 $, "class X {\n    virtual void func(std::string str) {}\n};" $)
1930:
1931: ;
1932: $if $(@expr1073744412 $!@expr1073744413 $assertEquals $(@expr1073744414 "cppcheck-2.8/test/testother.cpp" $, 1932 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1933:
1934: $check_ $(@expr1073744417 "cppcheck-2.8/test/testother.cpp" $, 1934 $, "class X {\n    char a[1024];\n};\nclass Y : X {\n    char b;\n};\nvoid f(Y y) {\n}" $)
1935:
|
1940:
1941: ;
1942: $if $(@expr1073744418 $!@expr1073744419 $assertEquals $(@expr1073744420 "cppcheck-2.8/test/testother.cpp" $, 1942 $, "[test.cpp:7]: (performance) Function parameter 'y' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1943:
1944: $check_ $(@expr1073744423 "cppcheck-2.8/test/testother.cpp" $, 1944 $, "class X {\n    void* a;\n    void* b;\n};\nclass Y {\n    void* a;\n    void* b;\n    char c;\n};\nvoid f(X x, Y y) {\n}" $)
1945:
|
1953:
1954: ;
1955: $if $(@expr1073744424 $!@expr1073744425 $assertEquals $(@expr1073744426 "cppcheck-2.8/test/testother.cpp" $, 1955 $, "[test.cpp:10]: (performance) Function parameter 'y' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1956:
1957: {
1958:
1959: const char code@var172 [@expr1073744429 60 ] =@expr1073744430 "class X {\n    uint64_t a;\n    uint64_t b;\n};\nvoid f(X x) {}"
1960:
1961:
1962:
1963: ;
1964:
1965: Settings s32@var173 (@expr1073744431 _settings@var102 ) ;
1966: s32@var173 .@expr1073744432 platform (@expr1073744433 cppcheck ::@expr2610 Platform ::@expr1073744435 Unix32@expr1073744301 ) ;
1967: $check_ $(@expr1073744436 "cppcheck-2.8/test/testother.cpp" $, 1967 $, code@var172 , &@expr1073744437 s32@var173 $) ;
1968: $if $(@expr1073744438 $!@expr1073744439 $assertEquals $(@expr1073744440 "cppcheck-2.8/test/testother.cpp" $, 1968 $, "[test.cpp:5]: (performance) Function parameter 'x' should be passed by const reference.\n" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1969:
1970: Settings s64@var174 (@expr1073744443 _settings@var102 ) ;
1971: s64@var174 .@expr1073744444 platform (@expr1073744445 cppcheck ::@expr2610 Platform ::@expr1073744447 Unix64@expr1073744302 ) ;
1972: $check_ $(@expr1073744448 "cppcheck-2.8/test/testother.cpp" $, 1972 $, code@var172 , &@expr1073744449 s64@var174 $) ;
1973: $if $(@expr1073744450 $!@expr1073744451 $assertEquals $(@expr1073744452 "cppcheck-2.8/test/testother.cpp" $, 1973 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1974: }
1975:
1976: $check_ $(@expr1073744455 "cppcheck-2.8/test/testother.cpp" $, 1976 $, "Writer* getWriter();\n\nvoid foo(Buffer& buffer) {\n    getWriter()->operator<<(buffer);\n}" $)
1977:
1978:
1979:
1980: ;
1981: $if $(@expr1073744456 $!@expr1073744457 $assertEquals $(@expr1073744458 "cppcheck-2.8/test/testother.cpp" $, 1981 $, "" $, errout@var100 .@expr2483 str (@expr2484 ) $) $) { $return ; }
1982: }
1983:
1984: void passedByValue_externC ( ) {
1985: $check_ $(@expr1073744461 "cppcheck-2.8/test/testother.cpp" $, 1985 $, "struct X { int a[5]; }; void f(X v) { }" $) ;
1986: $if $(@expr1073744462 $!@expr1073744463 $assertEquals $(@expr1073744464 "cppcheck-2.8/test/testother.cpp" $, 1986 $, "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" $, errout@var100 .@expr2641 str (@expr2642 ) $) $) { $return ; }
1987:
1988: $check_ $(@expr1073744467 "cppcheck-2.8/test/testother.cpp" $, 1988 $, "extern \"C\" { struct X { int a[5]; }; void f(X v) { } }" $) ;
1989: $if $(@expr1073744468 $!@expr1073744469 $assertEquals $(@expr1073744470 "cppcheck-2.8/test/testother.cpp" $, 1989 $, "" $, errout@var100 .@expr2641 str (@expr2642 ) $) $) { $return ; }
1990:
1991: $check_ $(@expr1073744473 "cppcheck-2.8/test/testother.cpp" $, 1991 $, "struct X { int a[5]; }; extern \"C\" void f(X v) { }" $) ;
1992: $if $(@expr1073744474 $!@expr1073744475 $assertEquals $(@expr1073744476 "cppcheck-2.8/test/testother.cpp" $, 1992 $, "" $, errout@var100 .@expr2641 str (@expr2642 ) $) $) { $return ; }
1993:
1994: $check_ $(@expr1073744479 "cppcheck-2.8/test/testother.cpp" $, 1994 $, "struct X { int a[5]; }; void f(const X v);" $) ;
1995: $if $(@expr1073744480 $!@expr1073744481 $assertEquals $(@expr1073744482 "cppcheck-2.8/test/testother.cpp" $, 1995 $, "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" $, errout@var100 .@expr2641 str (@expr2642 ) $) $) { $return ; }
1996:
1997: $check_ $(@expr1073744485 "cppcheck-2.8/test/testother.cpp" $, 1997 $, "extern \"C\" { struct X { int a[5]; }; void f(const X v); }" $) ;
1998: $if $(@expr1073744486 $!@expr1073744487 $assertEquals $(@expr1073744488 "cppcheck-2.8/test/testother.cpp" $, 1998 $, "" $, errout@var100 .@expr2641 str (@expr2642 ) $) $) { $return ; }
1999:
2000: $check_ $(@expr1073744491 "cppcheck-2.8/test/testother.cpp" $, 2000 $, "struct X { int a[5]; }; extern \"C\" void f(const X v) { }" $) ;
2001: $if $(@expr1073744492 $!@expr1073744493 $assertEquals $(@expr1073744494 "cppcheck-2.8/test/testother.cpp" $, 2001 $, "" $, errout@var100 .@expr2641 str (@expr2642 ) $) $) { $return ; }
2002: }
2003:
2004: void constVariable ( ) {
2005: $check_ $(@expr1073744497 "cppcheck-2.8/test/testother.cpp" $, 2005 $, "int f(std::vector<int> x) {\n    int& i = x[0];\n    return i;\n}" $)
2006:
2007:
2008: ;
2009: $if $(@expr1073744498 $!@expr1073744499 $assertEquals $(@expr1073744500 "cppcheck-2.8/test/testother.cpp" $, 2009 $, "[test.cpp:2]: (style) Variable 'i' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2010:
2011: $check_ $(@expr1073744503 "cppcheck-2.8/test/testother.cpp" $, 2011 $, "int f(std::vector<int>& x) {\n    return x[0];\n}" $)
2012:
2013: ;
2014: $if $(@expr1073744504 $!@expr1073744505 $assertEquals $(@expr1073744506 "cppcheck-2.8/test/testother.cpp" $, 2014 $, "[test.cpp:1]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2015:
2016: $check_ $(@expr1073744509 "cppcheck-2.8/test/testother.cpp" $, 2016 $, "int f(std::vector<int> x) {\n    const int& i = x[0];\n    return i;\n}" $)
2017:
2018:
2019: ;
2020: $if $(@expr1073744510 $!@expr1073744511 $assertEquals $(@expr1073744512 "cppcheck-2.8/test/testother.cpp" $, 2020 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2021:
2022: $check_ $(@expr1073744515 "cppcheck-2.8/test/testother.cpp" $, 2022 $, "int f(std::vector<int> x) {\n    static int& i = x[0];\n    return i;\n}" $)
2023:
2024:
2025: ;
2026: $if $(@expr1073744516 $!@expr1073744517 $assertEquals $(@expr1073744518 "cppcheck-2.8/test/testother.cpp" $, 2026 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2027:
2028: $check_ $(@expr1073744521 "cppcheck-2.8/test/testother.cpp" $, 2028 $, "int f(std::vector<int> x) {\n    int& i = x[0];\n    i++;\n    return i;\n}" $)
2029:
2030:
2031:
2032: ;
2033: $if $(@expr1073744522 $!@expr1073744523 $assertEquals $(@expr1073744524 "cppcheck-2.8/test/testother.cpp" $, 2033 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2034:
2035: $check_ $(@expr1073744527 "cppcheck-2.8/test/testother.cpp" $, 2035 $, "int& f(std::vector<int>& x) {\n    x.push_back(1);\n    int& i = x[0];\n    return i;\n}" $)
2036:
2037:
2038:
2039: ;
2040: $if $(@expr1073744528 $!@expr1073744529 $assertEquals $(@expr1073744530 "cppcheck-2.8/test/testother.cpp" $, 2040 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2041:
2042: $check_ $(@expr1073744533 "cppcheck-2.8/test/testother.cpp" $, 2042 $, "int f(const std::vector<int>& x) {\n    return x[0];\n}" $)
2043:
2044: ;
2045: $if $(@expr1073744534 $!@expr1073744535 $assertEquals $(@expr1073744536 "cppcheck-2.8/test/testother.cpp" $, 2045 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2046:
2047: $check_ $(@expr1073744539 "cppcheck-2.8/test/testother.cpp" $, 2047 $, "int& f(std::vector<int>& x) {\n    return x[0];\n}" $)
2048:
2049: ;
2050: $if $(@expr1073744540 $!@expr1073744541 $assertEquals $(@expr1073744542 "cppcheck-2.8/test/testother.cpp" $, 2050 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2051:
2052: $check_ $(@expr1073744545 "cppcheck-2.8/test/testother.cpp" $, 2052 $, "const int& f(std::vector<int>& x) {\n    return x[0];\n}" $)
2053:
2054: ;
2055: $if $(@expr1073744546 $!@expr1073744547 $assertEquals $(@expr1073744548 "cppcheck-2.8/test/testother.cpp" $, 2055 $, "[test.cpp:1]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2056:
2057: $check_ $(@expr1073744551 "cppcheck-2.8/test/testother.cpp" $, 2057 $, "int f(std::vector<int>& x) {\n    x[0]++;\n    return x[0];\n}" $)
2058:
2059:
2060: ;
2061: $if $(@expr1073744552 $!@expr1073744553 $assertEquals $(@expr1073744554 "cppcheck-2.8/test/testother.cpp" $, 2061 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2062:
2063: $check_ $(@expr1073744557 "cppcheck-2.8/test/testother.cpp" $, 2063 $, "struct A { int a; };\nA f(std::vector<A>& x) {\n    x[0].a = 1;\n    return x[0];\n}" $)
2064:
2065:
2066:
2067: ;
2068: $if $(@expr1073744558 $!@expr1073744559 $assertEquals $(@expr1073744560 "cppcheck-2.8/test/testother.cpp" $, 2068 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2069:
2070: $check_ $(@expr1073744563 "cppcheck-2.8/test/testother.cpp" $, 2070 $, "struct A { int a(); };\nA f(std::vector<A>& x) {\n    x[0].a();\n    return x[0];\n}" $)
2071:
2072:
2073:
2074: ;
2075: $if $(@expr1073744564 $!@expr1073744565 $assertEquals $(@expr1073744566 "cppcheck-2.8/test/testother.cpp" $, 2075 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2076:
2077: $check_ $(@expr1073744569 "cppcheck-2.8/test/testother.cpp" $, 2077 $, "int g(int& x);\nint f(std::vector<int>& x) {\n    g(x[0]);\n    return x[0];\n}" $)
2078:
2079:
2080:
2081: ;
2082: $if $(@expr1073744570 $!@expr1073744571 $assertEquals $(@expr1073744572 "cppcheck-2.8/test/testother.cpp" $, 2082 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2083:
2084: $check_ $(@expr1073744575 "cppcheck-2.8/test/testother.cpp" $, 2084 $, "template<class T>\nT f(T& x) {\n    return x[0];\n}" $)
2085:
2086:
2087: ;
2088: $if $(@expr1073744576 $!@expr1073744577 $assertEquals $(@expr1073744578 "cppcheck-2.8/test/testother.cpp" $, 2088 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2089:
2090: $check_ $(@expr1073744581 "cppcheck-2.8/test/testother.cpp" $, 2090 $, "template<class T>\nT f(T&& x) {\n    return x[0];\n}" $)
2091:
2092:
2093: ;
2094: $if $(@expr1073744582 $!@expr1073744583 $assertEquals $(@expr1073744584 "cppcheck-2.8/test/testother.cpp" $, 2094 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2095:
2096: $check_ $(@expr1073744587 "cppcheck-2.8/test/testother.cpp" $, 2096 $, "template<class T>\nT f(T& x) {\n    return x[0];\n}\nvoid h() { std::vector<int> v; h(v); }" $)
2097:
2098:
2099:
2100: ;
2101: $if $(@expr1073744588 $!@expr1073744589 $assertEquals $(@expr1073744590 "cppcheck-2.8/test/testother.cpp" $, 2101 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2102:
2103: $check_ $(@expr1073744593 "cppcheck-2.8/test/testother.cpp" $, 2103 $, "int f(int& x) {\n    return std::move(x);\n}" $)
2104:
2105: ;
2106: $if $(@expr1073744594 $!@expr1073744595 $assertEquals $(@expr1073744596 "cppcheck-2.8/test/testother.cpp" $, 2106 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2107:
2108: $check_ $(@expr1073744599 "cppcheck-2.8/test/testother.cpp" $, 2108 $, "void f(std::ostream& os) {\n    os << \"Hello\";\n}" $)
2109:
2110: ;
2111: $if $(@expr1073744600 $!@expr1073744601 $assertEquals $(@expr1073744602 "cppcheck-2.8/test/testother.cpp" $, 2111 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2112:
2113: $check_ $(@expr1073744605 "cppcheck-2.8/test/testother.cpp" $, 2113 $, "void g(int*);\nvoid f(int& x) {\n    g(&x);\n}" $)
2114:
2115:
2116: ;
2117: $if $(@expr1073744606 $!@expr1073744607 $assertEquals $(@expr1073744608 "cppcheck-2.8/test/testother.cpp" $, 2117 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2118:
2119: $check_ $(@expr1073744611 "cppcheck-2.8/test/testother.cpp" $, 2119 $, "struct A { A(int*); };\nA f(int& x) {\n    return A(&x);\n}" $)
2120:
2121:
2122: ;
2123: $if $(@expr1073744612 $!@expr1073744613 $assertEquals $(@expr1073744614 "cppcheck-2.8/test/testother.cpp" $, 2123 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2124:
2125: $check_ $(@expr1073744617 "cppcheck-2.8/test/testother.cpp" $, 2125 $, "struct A { A(int*); };\nA f(int& x) {\n    return A{&x};\n}" $)
2126:
2127:
2128: ;
2129: $if $(@expr1073744618 $!@expr1073744619 $assertEquals $(@expr1073744620 "cppcheck-2.8/test/testother.cpp" $, 2129 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2130:
2131:
2132: $check_ $(@expr1073744623 "cppcheck-2.8/test/testother.cpp" $, 2132 $, "void f(int& x, int& y) {\n    y++;\n}" $)
2133:
2134: ;
2135: $if $(@expr1073744624 $!@expr1073744625 $assertEquals $(@expr1073744626 "cppcheck-2.8/test/testother.cpp" $, 2135 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2136:
2137: $check_ $(@expr1073744629 "cppcheck-2.8/test/testother.cpp" $, 2137 $, "struct A {\n    explicit A(int& y) : x(&y) {}\n    int * x = nullptr;\n};" $)
2138:
2139:
2140: ;
2141: $if $(@expr1073744630 $!@expr1073744631 $assertEquals $(@expr1073744632 "cppcheck-2.8/test/testother.cpp" $, 2141 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2142:
2143: $check_ $(@expr1073744635 "cppcheck-2.8/test/testother.cpp" $, 2143 $, "struct A {\n    std::vector<int> v;\n    void swap(A& a) {\n        v.swap(a.v);\n    }\n};" $)
2144:
|
2147:
2148: ;
2149: $if $(@expr1073744636 $!@expr1073744637 $assertEquals $(@expr1073744638 "cppcheck-2.8/test/testother.cpp" $, 2149 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2150:
2151: $check_ $(@expr1073744641 "cppcheck-2.8/test/testother.cpp" $, 2151 $, "struct A {\n    template<class T>\n    void f();\n    template<class T>\n    void f() const;\n};\nvoid g(A& a) {\n    a.f<int>();\n}" $)
2152:
|
2158:
2159: ;
2160: $if $(@expr1073744642 $!@expr1073744643 $assertEquals $(@expr1073744644 "cppcheck-2.8/test/testother.cpp" $, 2160 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2161:
2162: $check_ $(@expr1073744647 "cppcheck-2.8/test/testother.cpp" $, 2162 $, "void f(std::vector<int>& v) {\n    for(auto&& x:v)\n        x = 1;\n}" $)
2163:
2164:
2165: ;
2166: $if $(@expr1073744648 $!@expr1073744649 $assertEquals $(@expr1073744650 "cppcheck-2.8/test/testother.cpp" $, 2166 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2167:
2168: $check_ $(@expr1073744653 "cppcheck-2.8/test/testother.cpp" $, 2168 $, "void f(std::vector<int>& v) {\n    for(auto x:v)\n        x = 1;\n}" $)
2169:
2170:
2171: ;
2172: $if $(@expr1073744654 $!@expr1073744655 $assertEquals $(@expr1073744656 "cppcheck-2.8/test/testother.cpp" $, 2172 $, "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2173:
2174: $check_ $(@expr1073744659 "cppcheck-2.8/test/testother.cpp" $, 2174 $, "void f(std::vector<int>& v) {\n    for(auto& x:v) {}\n}" $)
2175:
2176: ;
2177: $if $(@expr1073744660 $!@expr1073744661 $assertEquals $(@expr1073744662 "cppcheck-2.8/test/testother.cpp" $, 2177 $, "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2178:
2179: $check_ $(@expr1073744665 "cppcheck-2.8/test/testother.cpp" $, 2179 $, "void f(std::vector<int>& v) {\n    for(const auto& x:v) {}\n}" $)
2180:
2181: ;
2182: $if $(@expr1073744666 $!@expr1073744667 $assertEquals $(@expr1073744668 "cppcheck-2.8/test/testother.cpp" $, 2182 $, "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2183:
2184: $check_ $(@expr1073744671 "cppcheck-2.8/test/testother.cpp" $, 2184 $, "void f(int& i) {\n    int& j = i;\n    j++;\n}" $)
2185:
2186:
2187: ;
2188: $if $(@expr1073744672 $!@expr1073744673 $assertEquals $(@expr1073744674 "cppcheck-2.8/test/testother.cpp" $, 2188 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2189:
2190: $check_ $(@expr1073744677 "cppcheck-2.8/test/testother.cpp" $, 2190 $, "void f(std::vector<int>& v) {\n    int& i = v[0];\n    i++;\n}" $)
2191:
2192:
2193: ;
2194: $if $(@expr1073744678 $!@expr1073744679 $assertEquals $(@expr1073744680 "cppcheck-2.8/test/testother.cpp" $, 2194 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2195:
2196: $check_ $(@expr1073744683 "cppcheck-2.8/test/testother.cpp" $, 2196 $, "void f(std::map<unsigned int, std::map<std::string, unsigned int> >& m, unsigned int i) {\n    std::map<std::string, unsigned int>& members = m[i];\n    members.clear();\n}" $)
2197:
2198:
2199: ;
2200: $if $(@expr1073744684 $!@expr1073744685 $assertEquals $(@expr1073744686 "cppcheck-2.8/test/testother.cpp" $, 2200 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2201:
2202: $check_ $(@expr1073744689 "cppcheck-2.8/test/testother.cpp" $, 2202 $, "struct A {\n    int& x;\n    A(int& y) : x(y)\n    {}\n};" $)
2203:
2204:
2205:
2206: ;
2207: $if $(@expr1073744690 $!@expr1073744691 $assertEquals $(@expr1073744692 "cppcheck-2.8/test/testother.cpp" $, 2207 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2208:
2209: $check_ $(@expr1073744695 "cppcheck-2.8/test/testother.cpp" $, 2209 $, "struct A {\n    A(int& x);\n};\nstruct B : A {\n    B(int& x) : A(x)\n    {}\n};" $)
2210:
|
2214:
2215: ;
2216: $if $(@expr1073744696 $!@expr1073744697 $assertEquals $(@expr1073744698 "cppcheck-2.8/test/testother.cpp" $, 2216 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2217:
2218: $check_ $(@expr1073744701 "cppcheck-2.8/test/testother.cpp" $, 2218 $, "void f(bool b, int& x, int& y) {\n  auto& z = x;\n  auto& w = b ? y : z;\n  w = 1;\n}" $)
2219:
2220:
2221:
2222: ;
2223: $if $(@expr1073744702 $!@expr1073744703 $assertEquals $(@expr1073744704 "cppcheck-2.8/test/testother.cpp" $, 2223 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2224:
2225: $check_ $(@expr1073744707 "cppcheck-2.8/test/testother.cpp" $, 2225 $, "struct S {\n  int i;\n};\nint& f(S& s) {\n  return s.i;\n}" $)
2226:
|
2229:
2230: ;
2231: $if $(@expr1073744708 $!@expr1073744709 $assertEquals $(@expr1073744710 "cppcheck-2.8/test/testother.cpp" $, 2231 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2232:
2233: $check_ $(@expr1073744713 "cppcheck-2.8/test/testother.cpp" $, 2233 $, "int* f(std::list<int>& x, unsigned int y) {\n    for (int& m : x) {\n        if (m == y)\n            return &m;\n    }\n    return nullptr;\n}" $)
2234:
|
2238:
2239: ;
2240: $if $(@expr1073744714 $!@expr1073744715 $assertEquals $(@expr1073744716 "cppcheck-2.8/test/testother.cpp" $, 2240 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2241:
2242: $check_ $(@expr1073744719 "cppcheck-2.8/test/testother.cpp" $, 2242 $, "int& f(std::list<int>& x, int& y) {\n    for (int& m : x) {\n        if (m == y)\n            return m;\n    }\n    return y;\n}" $)
2243:
|
2247:
2248: ;
2249: $if $(@expr1073744720 $!@expr1073744721 $assertEquals $(@expr1073744722 "cppcheck-2.8/test/testother.cpp" $, 2249 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2250:
2251: $check_ $(@expr1073744725 "cppcheck-2.8/test/testother.cpp" $, 2251 $, "bool from_string(int& t, const std::string& s) {\n    std::istringstream iss(s);\n    return !(iss >> t).fail();\n}\n" $)
2252:
2253:
2254: ;
2255: $if $(@expr1073744726 $!@expr1073744727 $assertEquals $(@expr1073744728 "cppcheck-2.8/test/testother.cpp" $, 2255 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2256:
2257:
2258: $check_ $(@expr1073744731 "cppcheck-2.8/test/testother.cpp" $, 2258 $, "class a {\n    void operator()(int& i) const {\n        i++;\n    }\n};\nvoid f(int& i) {\n    a()(i);\n}\n" $)
2259:
|
2264:
2265: ;
2266: $if $(@expr1073744732 $!@expr1073744733 $assertEquals $(@expr1073744734 "cppcheck-2.8/test/testother.cpp" $, 2266 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2267:
2268: $check_ $(@expr1073744737 "cppcheck-2.8/test/testother.cpp" $, 2268 $, "class a {\n    void operator()(int& i) const {\n        i++;\n    }\n};\nvoid f(int& i) {\n    a x;\n    x(i);\n}\n" $)
2269:
|
2275:
2276: ;
2277: $if $(@expr1073744738 $!@expr1073744739 $assertEquals $(@expr1073744740 "cppcheck-2.8/test/testother.cpp" $, 2277 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2278:
2279: $check_ $(@expr1073744743 "cppcheck-2.8/test/testother.cpp" $, 2279 $, "class a {\n    void operator()(const int& i) const;\n};\nvoid f(int& i) {\n    a x;\n    x(i);\n}\n" $)
2280:
|
2284:
2285: ;
2286: $if $(@expr1073744744 $!@expr1073744745 $assertEquals $(@expr1073744746 "cppcheck-2.8/test/testother.cpp" $, 2286 $, "[test.cpp:4]: (style) Parameter 'i' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2287:
2288:
2289: $check_ $(@expr1073744749 "cppcheck-2.8/test/testother.cpp" $, 2289 $, "struct T { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n}" $)
2290:
2291:
2292: ;
2293: $if $(@expr1073744750 $!@expr1073744751 $assertEquals $(@expr1073744752 "cppcheck-2.8/test/testother.cpp" $, 2293 $, "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2294: $check_ $(@expr1073744755 "cppcheck-2.8/test/testother.cpp" $, 2294 $, "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const T& z = x;\n    T& y = x\n    y.mutate();\n}" $)
2295:
|
2299:
2300: ;
2301: $if $(@expr1073744756 $!@expr1073744757 $assertEquals $(@expr1073744758 "cppcheck-2.8/test/testother.cpp" $, 2301 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2302: $check_ $(@expr1073744761 "cppcheck-2.8/test/testother.cpp" $, 2302 $, "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = x\n}" $)
2303:
2304:
2305:
2306: ;
2307: $if $(@expr1073744762 $!@expr1073744763 $assertEquals $(@expr1073744764 "cppcheck-2.8/test/testother.cpp" $, 2307 $, "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2308: $check_ $(@expr1073744767 "cppcheck-2.8/test/testother.cpp" $, 2308 $, "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = x\n    y.mutate();\n}" $)
2309:
|
2312:
2313: ;
2314: $if $(@expr1073744768 $!@expr1073744769 $assertEquals $(@expr1073744770 "cppcheck-2.8/test/testother.cpp" $, 2314 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2315: $check_ $(@expr1073744773 "cppcheck-2.8/test/testother.cpp" $, 2315 $, "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    my<fancy>::type& y = x\n    y.mutate();\n}" $)
2316:
|
2319:
2320: ;
2321: $if $(@expr1073744774 $!@expr1073744775 $assertEquals $(@expr1073744776 "cppcheck-2.8/test/testother.cpp" $, 2321 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2322: $check_ $(@expr1073744779 "cppcheck-2.8/test/testother.cpp" $, 2322 $, "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = static_cast<const U&>(x)\n    y.mutate();\n}" $)
2323:
|
2326:
2327: ;
2328: $if $(@expr1073744780 $!@expr1073744781 $assertEquals $(@expr1073744782 "cppcheck-2.8/test/testother.cpp" $, 2328 $, "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2329: $check_ $(@expr1073744785 "cppcheck-2.8/test/testother.cpp" $, 2329 $, "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = static_cast<U&>(x)\n    y.mutate();\n}" $)
2330:
|
2333:
2334: ;
2335: $if $(@expr1073744786 $!@expr1073744787 $assertEquals $(@expr1073744788 "cppcheck-2.8/test/testother.cpp" $, 2335 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2336: $check_ $(@expr1073744791 "cppcheck-2.8/test/testother.cpp" $, 2336 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<const U&>(x)\n}" $)
2337:
2338:
2339:
2340: ;
2341: $if $(@expr1073744792 $!@expr1073744793 $assertEquals $(@expr1073744794 "cppcheck-2.8/test/testother.cpp" $, 2341 $, "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2342: $check_ $(@expr1073744797 "cppcheck-2.8/test/testother.cpp" $, 2342 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<U const &>(x)\n}" $)
2343:
|
2347:
2348: ;
2349: $if $(@expr1073744798 $!@expr1073744799 $assertEquals $(@expr1073744800 "cppcheck-2.8/test/testother.cpp" $, 2349 $, "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2350: $check_ $(@expr1073744803 "cppcheck-2.8/test/testother.cpp" $, 2350 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<U & const>(x)\n}" $)
2351:
2352:
2353:
2354: ;
2355: $if $(@expr1073744804 $!@expr1073744805 $assertEquals $(@expr1073744806 "cppcheck-2.8/test/testother.cpp" $, 2355 $, "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2356: $check_ $(@expr1073744809 "cppcheck-2.8/test/testother.cpp" $, 2356 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = dynamic_cast<U&>(x)\n    y.mutate();\n}" $)
2357:
|
2360:
2361: ;
2362: $if $(@expr1073744810 $!@expr1073744811 $assertEquals $(@expr1073744812 "cppcheck-2.8/test/testother.cpp" $, 2362 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2363: $check_ $(@expr1073744815 "cppcheck-2.8/test/testother.cpp" $, 2363 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<typename const U&>(x)\n}" $)
2364:
2365:
2366:
2367: ;
2368: $if $(@expr1073744816 $!@expr1073744817 $assertEquals $(@expr1073744818 "cppcheck-2.8/test/testother.cpp" $, 2368 $, "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2369: $check_ $(@expr1073744821 "cppcheck-2.8/test/testother.cpp" $, 2369 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = dynamic_cast<typename U&>(x)\n    y.mutate();\n}" $)
2370:
|
2373:
2374: ;
2375: $if $(@expr1073744822 $!@expr1073744823 $assertEquals $(@expr1073744824 "cppcheck-2.8/test/testother.cpp" $, 2375 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2376: $check_ $(@expr1073744827 "cppcheck-2.8/test/testother.cpp" $, 2376 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U* y = dynamic_cast<U*>(&x)\n    y->mutate();\n}" $)
2377:
|
2380:
2381: ;
2382: $if $(@expr1073744828 $!@expr1073744829 $assertEquals $(@expr1073744830 "cppcheck-2.8/test/testother.cpp" $, 2382 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2383:
2384: $check_ $(@expr1073744833 "cppcheck-2.8/test/testother.cpp" $, 2384 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U * y = dynamic_cast<const U *>(&x)\n    y->mutate();\n}" $)
2385:
|
2388:
2389: ;
2390: $todoAssertEquals $(@expr1073744834 "cppcheck-2.8/test/testother.cpp" $, 2390 $, "can be const" $, errout@var100 .@expr2677 str (@expr2678 ) $, "" $) ;
2391: $check_ $(@expr1073744837 "cppcheck-2.8/test/testother.cpp" $, 2391 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U const * y = dynamic_cast<U const *>(&x)\n    y->mutate();\n}" $)
2392:
|
2395:
2396: ;
2397: $todoAssertEquals $(@expr1073744838 "cppcheck-2.8/test/testother.cpp" $, 2397 $, "can be const" $, errout@var100 .@expr2677 str (@expr2678 ) $, "" $) ;
2398: $check_ $(@expr1073744841 "cppcheck-2.8/test/testother.cpp" $, 2398 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U * const y = dynamic_cast<U * const>(&x)\n    y->mutate();\n}" $)
2399:
|
2402:
2403: ;
2404: $if $(@expr1073744842 $!@expr1073744843 $assertEquals $(@expr1073744844 "cppcheck-2.8/test/testother.cpp" $, 2404 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2405: $check_ $(@expr1073744847 "cppcheck-2.8/test/testother.cpp" $, 2405 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U const * const * const * const y = dynamic_cast<const U const * const * const * const>(&x)\n    y->mutate();\n}" $)
2406:
|
2409:
2410: ;
2411: $todoAssertEquals $(@expr1073744848 "cppcheck-2.8/test/testother.cpp" $, 2411 $, "can be const" $, errout@var100 .@expr2677 str (@expr2678 ) $, "" $) ;
2412: $check_ $(@expr1073744851 "cppcheck-2.8/test/testother.cpp" $, 2412 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U const * const *  * const y = dynamic_cast<const U const * const *  * const>(&x)\n    y->mutate();\n}" $)
2413:
|
2416:
2417: ;
2418: $if $(@expr1073744852 $!@expr1073744853 $assertEquals $(@expr1073744854 "cppcheck-2.8/test/testother.cpp" $, 2418 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2419: $check_ $(@expr1073744857 "cppcheck-2.8/test/testother.cpp" $, 2419 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    my::fancy<typename type const *> const * * const y = dynamic_cast<my::fancy<typename type const *> const * * const>(&x)\n    y->mutate();\n}" $)
2420:
|
2423:
2424: ;
2425: $if $(@expr1073744858 $!@expr1073744859 $assertEquals $(@expr1073744860 "cppcheck-2.8/test/testother.cpp" $, 2425 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2426: $check_ $(@expr1073744863 "cppcheck-2.8/test/testother.cpp" $, 2426 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    my::fancy<typename type const *> const * const  * const y = dynamic_cast<my::fancy<typename type const *> const * const  * const>(&x)\n    y->mutate();\n}" $)
2427:
|
2430:
2431: ;
2432: $if $(@expr1073744864 $!@expr1073744865 $assertEquals $(@expr1073744866 "cppcheck-2.8/test/testother.cpp" $, 2432 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2433:
2434: $check_ $(@expr1073744869 "cppcheck-2.8/test/testother.cpp" $, 2434 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = (const U&)(x)\n}" $)
2435:
2436:
2437:
2438: ;
2439: $if $(@expr1073744870 $!@expr1073744871 $assertEquals $(@expr1073744872 "cppcheck-2.8/test/testother.cpp" $, 2439 $, "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2440: $check_ $(@expr1073744875 "cppcheck-2.8/test/testother.cpp" $, 2440 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = (U&)(x)\n    y.mutate();\n}" $)
2441:
|
2444:
2445: ;
2446: $if $(@expr1073744876 $!@expr1073744877 $assertEquals $(@expr1073744878 "cppcheck-2.8/test/testother.cpp" $, 2446 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2447: $check_ $(@expr1073744881 "cppcheck-2.8/test/testother.cpp" $, 2447 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = (typename const U&)(x)\n}" $)
2448:
2449:
2450:
2451: ;
2452: $if $(@expr1073744882 $!@expr1073744883 $assertEquals $(@expr1073744884 "cppcheck-2.8/test/testother.cpp" $, 2452 $, "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2453: $check_ $(@expr1073744887 "cppcheck-2.8/test/testother.cpp" $, 2453 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = (typename U&)(x)\n    y.mutate();\n}" $)
2454:
|
2457:
2458: ;
2459: $if $(@expr1073744888 $!@expr1073744889 $assertEquals $(@expr1073744890 "cppcheck-2.8/test/testother.cpp" $, 2459 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2460: $check_ $(@expr1073744893 "cppcheck-2.8/test/testother.cpp" $, 2460 $, "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U* y = (U*)(&x)\n    y->mutate();\n}" $)
2461:
|
2464:
2465: ;
2466: $if $(@expr1073744894 $!@expr1073744895 $assertEquals $(@expr1073744896 "cppcheck-2.8/test/testother.cpp" $, 2466 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2467:
2468: $check_ $(@expr1073744899 "cppcheck-2.8/test/testother.cpp" $, 2468 $, "struct C { void f() const; };\n\nvoid foo(C& x) {\n   x.f();\n   foo( static_cast<U2>(0) );\n}" $)
2469:
|
2472:
2473: ;
2474: $if $(@expr1073744900 $!@expr1073744901 $assertEquals $(@expr1073744902 "cppcheck-2.8/test/testother.cpp" $, 2474 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2475:
2476: $check_ $(@expr1073744905 "cppcheck-2.8/test/testother.cpp" $, 2476 $, "class a {\n    void foo(const int& i) const;\n    void operator()(int& i) const;\n};\nvoid f(int& i) {\n    a()(i);\n}\n" $)
2477:
|
2481:
2482: ;
2483: $if $(@expr1073744906 $!@expr1073744907 $assertEquals $(@expr1073744908 "cppcheck-2.8/test/testother.cpp" $, 2483 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2484:
2485: $check_ $(@expr1073744911 "cppcheck-2.8/test/testother.cpp" $, 2485 $, "class a {\n    void operator()(const int& i) const;\n};\nvoid f(int& i) {\n    a()(i);\n}\n" $)
2486:
|
2489:
2490: ;
2491: $if $(@expr1073744912 $!@expr1073744913 $assertEquals $(@expr1073744914 "cppcheck-2.8/test/testother.cpp" $, 2491 $, "[test.cpp:4]: (style) Parameter 'i' can be declared with const\n" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2492:
2493:
2494: $check_ $(@expr1073744917 "cppcheck-2.8/test/testother.cpp" $, 2494 $, "void fct1(MyClass& object) {\n   fct2([&](void){}, object);\n}\nbool fct2(std::function<void()> lambdaExpression, MyClass& object) {\n   object.modify();\n}\n" $)
2495:
|
2498:
2499: ;
2500: $if $(@expr1073744918 $!@expr1073744919 $assertEquals $(@expr1073744920 "cppcheck-2.8/test/testother.cpp" $, 2500 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2501:
2502:
2503: $check_ $(@expr1073744923 "cppcheck-2.8/test/testother.cpp" $, 2503 $, "struct A {};\nstruct B : A {};\nB& f(A& x) {\n    return static_cast<B&>(x);\n}\n" $)
2504:
2505:
2506:
2507: ;
2508: $if $(@expr1073744924 $!@expr1073744925 $assertEquals $(@expr1073744926 "cppcheck-2.8/test/testother.cpp" $, 2508 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2509:
2510:
2511: $check_ $(@expr1073744929 "cppcheck-2.8/test/testother.cpp" $, 2511 $, "using A = int*;\nvoid f(const A& x) {\n    ++(*x);\n}\n" $)
2512:
2513:
2514: ;
2515: $if $(@expr1073744930 $!@expr1073744931 $assertEquals $(@expr1073744932 "cppcheck-2.8/test/testother.cpp" $, 2515 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2516:
2517:
2518: $check_ $(@expr1073744935 "cppcheck-2.8/test/testother.cpp" $, 2518 $, "struct V {\n    V& get(typename std::vector<V>::size_type i) {\n        std::vector<V>& arr = v;\n        return arr[i];\n    }\n    std::vector<V> v;\n};\n" $)
2519:
|
2523:
2524: ;
2525: $if $(@expr1073744936 $!@expr1073744937 $assertEquals $(@expr1073744938 "cppcheck-2.8/test/testother.cpp" $, 2525 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2526:
2527: $check_ $(@expr1073744941 "cppcheck-2.8/test/testother.cpp" $, 2527 $, "void e();\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid ai(void);\nvoid j(void);\nvoid e(void);\nvoid k(void);\nvoid l(void);\nvoid m(void);\nvoid n(void);\nvoid o(void);\nvoid q(void);\nvoid r(void);\nvoid t(void);\nvoid u(void);\nvoid v(void);\nvoid w(void);\nvoid z(void);\nvoid aj(void);\nvoid am(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid ao(wchar_t *d);\nvoid ah(void);\nvoid e(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid e(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid ah(void);\nvoid k(void);\nvoid an(void);\nvoid e(void);\nvoid e(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid k(void);\nvoid an(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid ah(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid an(void);\nvoid k(void);\nvoid e(void);\nvoid e(void);\nvoid e(void);\nvoid g(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid k(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid g(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid e(void);\nvoid ap(wchar_t *c, int d);\nvoid ah(void);\nvoid an(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid aq(char *b, size_t d, char *c, int a);\nvoid ar(char *b, size_t d, char *c, va_list a);\nvoid k(void);\nvoid g(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid k(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid g(void);\nvoid as(std::string s);\nvoid at(std::ifstream &f);\nvoid au(std::istream &f);\nvoid av(std::string &aa, std::wstring &ab);\nvoid aw(bool b, double x, double y);\nvoid ax(int i);\nvoid ay(std::string c, std::wstring a);\nvoid az(const std::locale &ac);\nvoid an();\nvoid ba(std::ifstream &f);\nvoid bb(std::istream &f) {\nf.read(NULL, 0);\n}\nvoid h(void) {\nstruct tm *tm = 0;\n(void)std::asctime(tm);\n(void)std::asctime(0);\n}\nvoid bc(size_t ae) {\nwchar_t *ad = 0, *af = 0;\nstruct tm *ag = 0;\n(void)std::wcsftime(ad, ae, af, ag);\n(void)std::wcsftime(0, ae, 0, 0);\n}\nvoid k(void) {}\nvoid bd(void);\nvoid be(void);\nvoid bf(int b);\nvoid e(void);\nvoid e(void);\nvoid bg(wchar_t *p);\nvoid bh(const std::list<int> &ak, const std::list<int> &al);\nvoid ah();\nvoid an();\nvoid h();" $)
2528:
|
2676:
2677: ;
2678: $if $(@expr1073744942 $!@expr1073744943 $assertEquals $(@expr1073744944 "cppcheck-2.8/test/testother.cpp" $, 2678 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2679:
2680: $check_ $(@expr1073744947 "cppcheck-2.8/test/testother.cpp" $, 2680 $, "class C\n{\npublic:\n  explicit C(int&);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(i)\n{\n}" $)
2681:
|
2697:
2698: ;
2699: $if $(@expr1073744948 $!@expr1073744949 $assertEquals $(@expr1073744950 "cppcheck-2.8/test/testother.cpp" $, 2699 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2700:
2701: $check_ $(@expr1073744953 "cppcheck-2.8/test/testother.cpp" $, 2701 $, "class C\n{\npublic:\n  explicit C(int&);\n};\n\nclass D\n{\npublic:\n  explicit D(int&) noexcept;\n\nprivate:\n  C c;\n};\n\nD::D(int& i) noexcept\n  : c(i)\n{}" $)
2702:
|
2717:
2718: ;
2719: $if $(@expr1073744954 $!@expr1073744955 $assertEquals $(@expr1073744956 "cppcheck-2.8/test/testother.cpp" $, 2719 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2720:
2721: $check_ $(@expr1073744959 "cppcheck-2.8/test/testother.cpp" $, 2721 $, "class C\n{\npublic:\n  explicit C(const int&);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(i)\n{\n}" $)
2722:
|
2738:
2739: ;
2740: $todoAssertEquals $(@expr1073744960 "cppcheck-2.8/test/testother.cpp" $, 2740 $, "[test.cpp:16]: (style) Parameter 'i' can be declared with const\n" $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) ;
2741:
2742: $check_ $(@expr1073744963 "cppcheck-2.8/test/testother.cpp" $, 2742 $, "class C\n{\npublic:\n  explicit C(int);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(i)\n{\n}" $)
2743:
|
2759:
2760: ;
2761: $todoAssertEquals $(@expr1073744964 "cppcheck-2.8/test/testother.cpp" $, 2761 $, "[test.cpp:16]: (style) Parameter 'i' can be declared with const\n" $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) ;
2762:
2763: $check_ $(@expr1073744967 "cppcheck-2.8/test/testother.cpp" $, 2763 $, "class C\n{\npublic:\n  explicit C(int, int);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(0, i)\n{\n}" $)
2764:
|
2780:
2781: ;
2782: $todoAssertEquals $(@expr1073744968 "cppcheck-2.8/test/testother.cpp" $, 2782 $, "[test.cpp:16]: (style) Parameter 'i' can be declared with const\n" $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) ;
2783:
2784: $check_ $(@expr1073744971 "cppcheck-2.8/test/testother.cpp" $, 2784 $, "void f(std::map<int, std::vector<int>> &map) {\n  for (auto &[slave, panels] : map)\n    panels.erase(it);\n}" $)
2785:
2786:
2787: ;
2788: $if $(@expr1073744972 $!@expr1073744973 $assertEquals $(@expr1073744974 "cppcheck-2.8/test/testother.cpp" $, 2788 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2789:
2790: $check_ $(@expr1073744977 "cppcheck-2.8/test/testother.cpp" $, 2790 $, "struct S { void f(); int i; };\nvoid call_f(S& s) { (s.*(&S::f))(); }\n" $)
2791: ;
2792: $if $(@expr1073744978 $!@expr1073744979 $assertEquals $(@expr1073744980 "cppcheck-2.8/test/testother.cpp" $, 2792 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2793:
2794: $check_ $(@expr1073744983 "cppcheck-2.8/test/testother.cpp" $, 2794 $, "struct S { int a[1]; };\nvoid f(S& s) { int* p = s.a; *p = 0; }\n" $)
2795: ;
2796: $if $(@expr1073744984 $!@expr1073744985 $assertEquals $(@expr1073744986 "cppcheck-2.8/test/testother.cpp" $, 2796 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2797:
2798: $check_ $(@expr1073744989 "cppcheck-2.8/test/testother.cpp" $, 2798 $, "struct Foo {\n    int* p{};\n    int* get() { return p; }\n    const int* get() const { return p; }\n};\nstruct Bar {\n    int j{};\n    void f(Foo& foo) const { int* q = foo.get(); *q = j; }\n};\n" $)
2799:
|
2805:
2806: ;
2807: $if $(@expr1073744990 $!@expr1073744991 $assertEquals $(@expr1073744992 "cppcheck-2.8/test/testother.cpp" $, 2807 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2808:
2809: $check_ $(@expr1073744995 "cppcheck-2.8/test/testother.cpp" $, 2809 $, "struct S {\n    void g(long L, const C*& PC) const;\n    void g(long L, C*& PC);\n};\nvoid f(S& s) {\n    C* PC{};\n    s.g(0, PC);\n};\n" $)
2810:
|
2815:
2816: ;
2817: $if $(@expr1073744996 $!@expr1073744997 $assertEquals $(@expr1073744998 "cppcheck-2.8/test/testother.cpp" $, 2817 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2818:
2819:
2820: $check_ $(@expr1073745001 "cppcheck-2.8/test/testother.cpp" $, 2820 $, "template <class T, class C>\nstruct d {\n    T& g(C& c, T C::*f) { return c.*f; }\n};\n" $)
2821:
2822:
2823: ;
2824: $if $(@expr1073745002 $!@expr1073745003 $assertEquals $(@expr1073745004 "cppcheck-2.8/test/testother.cpp" $, 2824 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2825:
2826: $check_ $(@expr1073745007 "cppcheck-2.8/test/testother.cpp" $, 2826 $, "void f(std::map<int, int>& m) {\n    std::cout << m[0] << std::endl;\n};\n" $)
2827:
2828: ;
2829: $if $(@expr1073745008 $!@expr1073745009 $assertEquals $(@expr1073745010 "cppcheck-2.8/test/testother.cpp" $, 2829 $, "" $, errout@var100 .@expr2677 str (@expr2678 ) $) $) { $return ; }
2830: }
2831:
2832: void constParameterCallback ( ) {
2833: $check_ $(@expr1073745013 "cppcheck-2.8/test/testother.cpp" $, 2833 $, "int callback(std::vector<int>& x) { return x[0]; }\nvoid f() { dostuff(callback); }" $)
2834: ;
2835: $if $(@expr1073745014 $!@expr1073745015 $assertEquals $(@expr1073745016 "cppcheck-2.8/test/testother.cpp" $, 2835 $, "[test.cpp:2] -> [test.cpp:1]: (style) Parameter 'x' can be declared with const. However it seems that 'callback' is a callback function, if 'x' is declared with const you might also need to cast function pointer(s).\n" $, errout@var100 .@expr3193 str (@expr3194 ) $) $) { $return ; }
2836:
2837:
2838: $check_ $(@expr1073745019 "cppcheck-2.8/test/testother.cpp" $, 2838 $, "class EventEngine : public IEventEngine {\npublic:\n    EventEngine();\n\nprivate:\n    void signalEvent(ev::sig& signal, int revents);\n};\n\nEventEngine::EventEngine() {\n    mSigWatcher.set<EventEngine, &EventEngine::signalEvent>(this);\n}\n\nvoid EventEngine::signalEvent(ev::sig& signal, int revents) {\n    switch (signal.signum) {}\n}" $)
2839:
|
2851:
2852: ;
2853: $if $(@expr1073745020 $!@expr1073745021 $assertEquals $(@expr1073745022 "cppcheck-2.8/test/testother.cpp" $, 2853 $, "[test.cpp:10] -> [test.cpp:13]: (style) Parameter 'signal' can be declared with const. However it seems that 'signalEvent' is a callback function, if 'signal' is declared with const you might also need to cast function pointer(s).\n" $, errout@var100 .@expr3193 str (@expr3194 ) $) $) { $return ; }
2854: }
2855:
2856: void constPointer ( ) {
2857: $check_ $(@expr1073745025 "cppcheck-2.8/test/testother.cpp" $, 2857 $, "void foo(int *p) { return *p; }" $) ;
2858: $if $(@expr1073745026 $!@expr1073745027 $assertEquals $(@expr1073745028 "cppcheck-2.8/test/testother.cpp" $, 2858 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2859:
2860: $check_ $(@expr1073745031 "cppcheck-2.8/test/testother.cpp" $, 2860 $, "void foo(int *p) { x = *p; }" $) ;
2861: $if $(@expr1073745032 $!@expr1073745033 $assertEquals $(@expr1073745034 "cppcheck-2.8/test/testother.cpp" $, 2861 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2862:
2863: $check_ $(@expr1073745037 "cppcheck-2.8/test/testother.cpp" $, 2863 $, "void foo(int *p) { int &ref = *p; ref = 12; }" $) ;
2864: $if $(@expr1073745038 $!@expr1073745039 $assertEquals $(@expr1073745040 "cppcheck-2.8/test/testother.cpp" $, 2864 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2865:
2866: $check_ $(@expr1073745043 "cppcheck-2.8/test/testother.cpp" $, 2866 $, "void foo(int *p) { x = *p + 10; }" $) ;
2867: $if $(@expr1073745044 $!@expr1073745045 $assertEquals $(@expr1073745046 "cppcheck-2.8/test/testother.cpp" $, 2867 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2868:
2869: $check_ $(@expr1073745049 "cppcheck-2.8/test/testother.cpp" $, 2869 $, "void foo(int *p) { return p[10]; }" $) ;
2870: $if $(@expr1073745050 $!@expr1073745051 $assertEquals $(@expr1073745052 "cppcheck-2.8/test/testother.cpp" $, 2870 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2871:
2872: $check_ $(@expr1073745055 "cppcheck-2.8/test/testother.cpp" $, 2872 $, "void foo(int *p) { int &ref = p[0]; ref = 12; }" $) ;
2873: $if $(@expr1073745056 $!@expr1073745057 $assertEquals $(@expr1073745058 "cppcheck-2.8/test/testother.cpp" $, 2873 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2874:
2875: $check_ $(@expr1073745061 "cppcheck-2.8/test/testother.cpp" $, 2875 $, "void foo(int *p) { x[*p] = 12; }" $) ;
2876: $if $(@expr1073745062 $!@expr1073745063 $assertEquals $(@expr1073745064 "cppcheck-2.8/test/testother.cpp" $, 2876 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2877:
2878: $check_ $(@expr1073745067 "cppcheck-2.8/test/testother.cpp" $, 2878 $, "void foo(int *p) { if (p) {} }" $) ;
2879: $if $(@expr1073745068 $!@expr1073745069 $assertEquals $(@expr1073745070 "cppcheck-2.8/test/testother.cpp" $, 2879 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2880:
2881: $check_ $(@expr1073745073 "cppcheck-2.8/test/testother.cpp" $, 2881 $, "void foo(int *p) { if (p || x) {} }" $) ;
2882: $if $(@expr1073745074 $!@expr1073745075 $assertEquals $(@expr1073745076 "cppcheck-2.8/test/testother.cpp" $, 2882 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2883:
2884: $check_ $(@expr1073745079 "cppcheck-2.8/test/testother.cpp" $, 2884 $, "void foo(int *p) { if (p == 0) {} }" $) ;
2885: $if $(@expr1073745080 $!@expr1073745081 $assertEquals $(@expr1073745082 "cppcheck-2.8/test/testother.cpp" $, 2885 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2886:
2887: $check_ $(@expr1073745085 "cppcheck-2.8/test/testother.cpp" $, 2887 $, "void foo(int *p) { if (!p) {} }" $) ;
2888: $if $(@expr1073745086 $!@expr1073745087 $assertEquals $(@expr1073745088 "cppcheck-2.8/test/testother.cpp" $, 2888 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2889:
2890: $check_ $(@expr1073745091 "cppcheck-2.8/test/testother.cpp" $, 2890 $, "void foo(int *p) { if (*p > 123) {} }" $) ;
2891: $if $(@expr1073745092 $!@expr1073745093 $assertEquals $(@expr1073745094 "cppcheck-2.8/test/testother.cpp" $, 2891 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2892:
2893: $check_ $(@expr1073745097 "cppcheck-2.8/test/testother.cpp" $, 2893 $, "void foo(int *p) { return *p + 1; }" $) ;
2894: $if $(@expr1073745098 $!@expr1073745099 $assertEquals $(@expr1073745100 "cppcheck-2.8/test/testother.cpp" $, 2894 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2895:
2896: $check_ $(@expr1073745103 "cppcheck-2.8/test/testother.cpp" $, 2896 $, "void foo(int *p) { return *p > 1; }" $) ;
2897: $if $(@expr1073745104 $!@expr1073745105 $assertEquals $(@expr1073745106 "cppcheck-2.8/test/testother.cpp" $, 2897 $, "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2898:
2899: $check_ $(@expr1073745109 "cppcheck-2.8/test/testother.cpp" $, 2899 $, "void foo(const int* c) { if (c == 0) {}; }" $) ;
2900: $if $(@expr1073745110 $!@expr1073745111 $assertEquals $(@expr1073745112 "cppcheck-2.8/test/testother.cpp" $, 2900 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2901:
2902: $check_ $(@expr1073745115 "cppcheck-2.8/test/testother.cpp" $, 2902 $, "struct a { void b(); };\nstruct c {\n    a* d;\n    a& g() { return *d; }\n};\n" $)
2903:
2904:
2905:
2906: ;
2907: $if $(@expr1073745116 $!@expr1073745117 $assertEquals $(@expr1073745118 "cppcheck-2.8/test/testother.cpp" $, 2907 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2908:
2909: $check_ $(@expr1073745121 "cppcheck-2.8/test/testother.cpp" $, 2909 $, "struct a { void b(); };\nstruct c { a* d; };\nvoid e(c);\n" $)
2910:
2911: ;
2912: $if $(@expr1073745122 $!@expr1073745123 $assertEquals $(@expr1073745124 "cppcheck-2.8/test/testother.cpp" $, 2912 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2913:
2914: $check_ $(@expr1073745127 "cppcheck-2.8/test/testother.cpp" $, 2914 $, "struct V {\n    V& get(typename std::vector<V>::size_type i, std::vector<V>* arr) {\n        return arr->at(i);\n    }\n};\n" $)
2915:
2916:
2917:
2918: ;
2919: $if $(@expr1073745128 $!@expr1073745129 $assertEquals $(@expr1073745130 "cppcheck-2.8/test/testother.cpp" $, 2919 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2920:
2921: $check_ $(@expr1073745133 "cppcheck-2.8/test/testother.cpp" $, 2921 $, "struct A {};\nstruct B : A {};\nB* f(A* x) {\n    return static_cast<B*>(x);\n}\n" $)
2922:
2923:
2924:
2925: ;
2926: $if $(@expr1073745134 $!@expr1073745135 $assertEquals $(@expr1073745136 "cppcheck-2.8/test/testother.cpp" $, 2926 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2927:
2928: $check_ $(@expr1073745139 "cppcheck-2.8/test/testother.cpp" $, 2928 $, "int f(std::vector<int>* x) {\n    int& i = (*x)[0];\n    i++;\n    return i;\n}" $)
2929:
2930:
2931:
2932: ;
2933: $if $(@expr1073745140 $!@expr1073745141 $assertEquals $(@expr1073745142 "cppcheck-2.8/test/testother.cpp" $, 2933 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2934:
2935: $check_ $(@expr1073745145 "cppcheck-2.8/test/testother.cpp" $, 2935 $, "struct A { int a; };\nA f(std::vector<A>* x) {\n    x->front().a = 1;\n    return x->front();\n}" $)
2936:
2937:
2938:
2939: ;
2940: $if $(@expr1073745146 $!@expr1073745147 $assertEquals $(@expr1073745148 "cppcheck-2.8/test/testother.cpp" $, 2940 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2941:
2942: $check_ $(@expr1073745151 "cppcheck-2.8/test/testother.cpp" $, 2942 $, "void f(std::vector<int>* v) {\n    for(auto&& x:*v)\n        x = 1;\n}" $)
2943:
2944:
2945: ;
2946: $if $(@expr1073745152 $!@expr1073745153 $assertEquals $(@expr1073745154 "cppcheck-2.8/test/testother.cpp" $, 2946 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2947:
2948: $check_ $(@expr1073745157 "cppcheck-2.8/test/testother.cpp" $, 2948 $, "struct A {\n    int* x;\n    A(int* y) : x(y)\n    {}\n};" $)
2949:
2950:
2951:
2952: ;
2953: $if $(@expr1073745158 $!@expr1073745159 $assertEquals $(@expr1073745160 "cppcheck-2.8/test/testother.cpp" $, 2953 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2954:
2955: $check_ $(@expr1073745163 "cppcheck-2.8/test/testother.cpp" $, 2955 $, "void f(bool b, int* x, int* y) {\n  int* z = x;\n  int* w = b ? y : z;\n  *w = 1;\n}" $)
2956:
2957:
2958:
2959: ;
2960: $if $(@expr1073745164 $!@expr1073745165 $assertEquals $(@expr1073745166 "cppcheck-2.8/test/testother.cpp" $, 2960 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2961:
2962: $check_ $(@expr1073745169 "cppcheck-2.8/test/testother.cpp" $, 2962 $, "void f(bool b, int* x, int* y) {\n  int& z = *x;\n  int& w = b ? *y : z;\n  w = 1;\n}" $)
2963:
2964:
2965:
2966: ;
2967: $if $(@expr1073745170 $!@expr1073745171 $assertEquals $(@expr1073745172 "cppcheck-2.8/test/testother.cpp" $, 2967 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2968:
2969: $check_ $(@expr1073745175 "cppcheck-2.8/test/testother.cpp" $, 2969 $, "class Base { virtual void dostuff(int *p) = 0; };\nclass Derived: public Base { int x; void dostuff(int *p) override { x = *p; } };" $)
2970: ;
2971: $if $(@expr1073745176 $!@expr1073745177 $assertEquals $(@expr1073745178 "cppcheck-2.8/test/testother.cpp" $, 2971 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2972:
2973: $check_ $(@expr1073745181 "cppcheck-2.8/test/testother.cpp" $, 2973 $, "struct Data { char buf[128]; };\nvoid encrypt(Data& data) {\n    const char a[] = \"asfasd\";\n    memcpy(data.buf, &a, sizeof(a));\n}" $)
2974:
2975:
2976:
2977: ;
2978: $if $(@expr1073745182 $!@expr1073745183 $assertEquals $(@expr1073745184 "cppcheck-2.8/test/testother.cpp" $, 2978 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2979:
2980:
2981: $check_ $(@expr1073745187 "cppcheck-2.8/test/testother.cpp" $, 2981 $, "void foo(std::istream &istr) {\n  unsigned char x[2];\n  istr >> x[0];\n}" $)
2982:
2983:
2984: ;
2985: $if $(@expr1073745188 $!@expr1073745189 $assertEquals $(@expr1073745190 "cppcheck-2.8/test/testother.cpp" $, 2985 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2986:
2987:
2988: $check_ $(@expr1073745193 "cppcheck-2.8/test/testother.cpp" $, 2988 $, "S& f() {\n    static S* p = new S();\n    return *p;\n}\n" $)
2989:
2990:
2991: ;
2992: $if $(@expr1073745194 $!@expr1073745195 $assertEquals $(@expr1073745196 "cppcheck-2.8/test/testother.cpp" $, 2992 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2993:
2994: $check_ $(@expr1073745199 "cppcheck-2.8/test/testother.cpp" $, 2994 $, "int f() {\n    static int i[1] = {};\n    return i[0];\n}\n" $)
2995:
2996:
2997: ;
2998: $if $(@expr1073745200 $!@expr1073745201 $assertEquals $(@expr1073745202 "cppcheck-2.8/test/testother.cpp" $, 2998 $, "[test.cpp:2]: (style) Variable 'i' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
2999:
3000: $check_ $(@expr1073745205 "cppcheck-2.8/test/testother.cpp" $, 3000 $, "int f() {\n    static int i[] = { 0 };\n    int j = i[0] + 1;\n    return j;\n}\n" $)
3001:
3002:
3003:
3004: ;
3005: $if $(@expr1073745206 $!@expr1073745207 $assertEquals $(@expr1073745208 "cppcheck-2.8/test/testother.cpp" $, 3005 $, "[test.cpp:2]: (style) Variable 'i' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
3006:
3007:
3008: $check_ $(@expr1073745211 "cppcheck-2.8/test/testother.cpp" $, 3008 $, "void f(std::array<int, 1> const& i) {\n    if (i[0] == 0) {}\n}\n" $)
3009:
3010: ;
3011: $if $(@expr1073745212 $!@expr1073745213 $assertEquals $(@expr1073745214 "cppcheck-2.8/test/testother.cpp" $, 3011 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
3012:
3013:
3014: $check_ $(@expr1073745217 "cppcheck-2.8/test/testother.cpp" $, 3014 $, "void f(const std::vector<int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n" $)
3015:
|
3018:
3019: ;
3020: $if $(@expr1073745218 $!@expr1073745219 $assertEquals $(@expr1073745220 "cppcheck-2.8/test/testother.cpp" $, 3020 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
3021:
3022: $check_ $(@expr1073745223 "cppcheck-2.8/test/testother.cpp" $, 3022 $, "void f(std::vector<int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n" $)
3023:
|
3026:
3027: ;
3028: $if $(@expr1073745224 $!@expr1073745225 $assertEquals $(@expr1073745226 "cppcheck-2.8/test/testother.cpp" $, 3028 $, "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
3029:
3030: $check_ $(@expr1073745229 "cppcheck-2.8/test/testother.cpp" $, 3030 $, "void f(std::vector<const int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n" $)
3031:
|
3034:
3035: ;
3036: $if $(@expr1073745230 $!@expr1073745231 $assertEquals $(@expr1073745232 "cppcheck-2.8/test/testother.cpp" $, 3036 $, "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
3037:
3038: $check_ $(@expr1073745235 "cppcheck-2.8/test/testother.cpp" $, 3038 $, "void f(const std::vector<const int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n" $)
3039:
|
3042:
3043: ;
3044: $if $(@expr1073745236 $!@expr1073745237 $assertEquals $(@expr1073745238 "cppcheck-2.8/test/testother.cpp" $, 3044 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
3045:
3046: $check_ $(@expr1073745241 "cppcheck-2.8/test/testother.cpp" $, 3046 $, "void f(const int* const p) {\n    if (p == nullptr) {}\n}\n" $)
3047:
3048: ;
3049: $if $(@expr1073745242 $!@expr1073745243 $assertEquals $(@expr1073745244 "cppcheck-2.8/test/testother.cpp" $, 3049 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
3050:
3051: $check_ $(@expr1073745247 "cppcheck-2.8/test/testother.cpp" $, 3051 $, "void g(int*);\nvoid f(int* const* pp) {\n    int* p = pp[0];\n    g(p);\n}\n" $)
3052:
3053:
3054:
3055: ;
3056: $if $(@expr1073745248 $!@expr1073745249 $assertEquals $(@expr1073745250 "cppcheck-2.8/test/testother.cpp" $, 3056 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
3057:
3058: $check_ $(@expr1073745253 "cppcheck-2.8/test/testother.cpp" $, 3058 $, "template <typename T>\nstruct S {\n    static bool f(const T& t) { return t != nullptr; }\n};\nS<int*> s;\n" $)
3059:
3060:
3061:
3062: ;
3063: $if $(@expr1073745254 $!@expr1073745255 $assertEquals $(@expr1073745256 "cppcheck-2.8/test/testother.cpp" $, 3063 $, "" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return ; }
3064:
3065: $check_ $(@expr1073745259 "cppcheck-2.8/test/testother.cpp" $, 3065 $, "void f(int i) {\n    const char *tmp;\n    char* a[] = { \"a\", \"aa\" };\n    static char* b[] = { \"b\", \"bb\" };\n    tmp = a[i];\n    printf(\"%s\", tmp);\n    tmp = b[i];\n    printf(\"%s\", tmp);\n}\n" $)
3066:
|
3072:
3073: ;
3074: $if $(@expr1073745260 $!@expr1073745261 $assertEquals $(@expr1073745262 "cppcheck-2.8/test/testother.cpp" $, 3074 $, "[test.cpp:3]: (style) Variable 'a' can be declared with const\n[test.cpp:4]: (style) Variable 'b' can be declared with const\n" $, errout@var100 .@expr3205 str (@expr3206 ) $) $) { $return
3075:
3076: ; }
3077: }
3078:
3079: void switchRedundantAssignmentTest ( ) {
3080: $check_ $(@expr1073745265 "cppcheck-2.8/test/testother.cpp" $, 3080 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3081:
|
3090:
3091: ;
3092: $if $(@expr1073745266 $!@expr1073745267 $assertEquals $(@expr1073745268 "cppcheck-2.8/test/testother.cpp" $, 3092 $, "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3093:
3094: $check_ $(@expr1073745271 "cppcheck-2.8/test/testother.cpp" $, 3094 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y = 2;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3095:
|
3106:
3107: ;
3108: $if $(@expr1073745272 $!@expr1073745273 $assertEquals $(@expr1073745274 "cppcheck-2.8/test/testother.cpp" $, 3108 $, "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3109:
3110: $check_ $(@expr1073745277 "cppcheck-2.8/test/testother.cpp" $, 3110 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        if (x)\n        {\n            y = 3;\n        }\n    }\n    bar(y);\n}" $)
3111:
|
3123:
3124: ;
3125: $if $(@expr1073745278 $!@expr1073745279 $assertEquals $(@expr1073745280 "cppcheck-2.8/test/testother.cpp" $, 3125 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3126:
3127: $check_ $(@expr1073745283 "cppcheck-2.8/test/testother.cpp" $, 3127 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y = 2;\n        if (z)\n            printf(\"%d\", y);\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3128:
|
3141:
3142: ;
3143: $if $(@expr1073745284 $!@expr1073745285 $assertEquals $(@expr1073745286 "cppcheck-2.8/test/testother.cpp" $, 3143 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3144:
3145: $check_ $(@expr1073745289 "cppcheck-2.8/test/testother.cpp" $, 3145 $, "void foo()\n{\n    int x = a;\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        x = 2;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3146:
|
3156:
3157: ;
3158: $if $(@expr1073745290 $!@expr1073745291 $assertEquals $(@expr1073745292 "cppcheck-2.8/test/testother.cpp" $, 3158 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3159:
3160: $check_ $(@expr1073745295 "cppcheck-2.8/test/testother.cpp" $, 3160 $, "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        break;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3161:
|
3171:
3172: ;
3173: $if $(@expr1073745296 $!@expr1073745297 $assertEquals $(@expr1073745298 "cppcheck-2.8/test/testother.cpp" $, 3173 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3174:
3175: $check_ $(@expr1073745301 "cppcheck-2.8/test/testother.cpp" $, 3175 $, "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y = 2;\n            continue;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}" $)
3176:
|
3188:
3189: ;
3190: $if $(@expr1073745302 $!@expr1073745303 $assertEquals $(@expr1073745304 "cppcheck-2.8/test/testother.cpp" $, 3190 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3191:
3192: $check_ $(@expr1073745307 "cppcheck-2.8/test/testother.cpp" $, 3192 $, "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y = 2;\n            throw e;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}" $)
3193:
|
3205:
3206: ;
3207: $if $(@expr1073745308 $!@expr1073745309 $assertEquals $(@expr1073745310 "cppcheck-2.8/test/testother.cpp" $, 3207 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3208:
3209: $check_ $(@expr1073745313 "cppcheck-2.8/test/testother.cpp" $, 3209 $, "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        printf(\"%d\", y);\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3210:
|
3220:
3221: ;
3222: $if $(@expr1073745314 $!@expr1073745315 $assertEquals $(@expr1073745316 "cppcheck-2.8/test/testother.cpp" $, 3222 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3223:
3224: $check_ $(@expr1073745319 "cppcheck-2.8/test/testother.cpp" $, 3224 $, "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        bar();\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3225:
|
3235:
3236: ;
3237: $if $(@expr1073745320 $!@expr1073745321 $assertEquals $(@expr1073745322 "cppcheck-2.8/test/testother.cpp" $, 3237 $, "[test.cpp:7] -> [test.cpp:10]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3238:
3239: $check_ $(@expr1073745325 "cppcheck-2.8/test/testother.cpp" $, 3239 $, "void bar() {}\nvoid foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        bar();\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3240:
|
3251:
3252: ;
3253: $if $(@expr1073745326 $!@expr1073745327 $assertEquals $(@expr1073745328 "cppcheck-2.8/test/testother.cpp" $, 3253 $, "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3254:
3255: $check_ $(@expr1073745331 "cppcheck-2.8/test/testother.cpp" $, 3255 $, "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n    case 3:\n      strcpy(str, \"b'\");\n    }\n}" , nullptr , false , false , false $)
3256:
|
3263:
3264: ;
3265: $todoAssertEquals $(@expr1073745332 "cppcheck-2.8/test/testother.cpp" $, 3265 $, "[test.cpp:6] -> [test.cpp:8]: (style) Buffer 'str' is being written before its old content has been used. 'break;' missing?\n" $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $)
3266:
3267: ;
3268:
3269: $check_ $(@expr1073745335 "cppcheck-2.8/test/testother.cpp" $, 3269 $, "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strncpy(str, \"a'\");\n    case 3:\n      strncpy(str, \"b'\");\n    }\n}" $)
3270:
|
3277:
3278: ;
3279: $todoAssertEquals $(@expr1073745336 "cppcheck-2.8/test/testother.cpp" $, 3279 $, "[test.cpp:6] -> [test.cpp:8]: (style) Buffer 'str' is being written before its old content has been used. 'break;' missing?\n" $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $)
3280:
3281: ;
3282:
3283: $check_ $(@expr1073745339 "cppcheck-2.8/test/testother.cpp" $, 3283 $, "void foo(int a) {\n    char str[10];\n    int z = 0;\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n      z++;\n    case 3:\n      strcpy(str, \"b'\");\n      z++;\n    }\n}" , nullptr , false , false , false $)
3284:
|
3294:
3295: ;
3296: $todoAssertEquals $(@expr1073745340 "cppcheck-2.8/test/testother.cpp" $, 3296 $, "[test.cpp:7] -> [test.cpp:10]: (style) Buffer 'str' is being written before its old content has been used. 'break;' missing?\n" $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $)
3297:
3298: ;
3299:
3300: $check_ $(@expr1073745343 "cppcheck-2.8/test/testother.cpp" $, 3300 $, "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n      break;\n    case 3:\n      strcpy(str, \"b'\");\n      break;\n    }\n}" $)
3301:
|
3310:
3311: ;
3312: $if $(@expr1073745344 $!@expr1073745345 $assertEquals $(@expr1073745346 "cppcheck-2.8/test/testother.cpp" $, 3312 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3313:
3314: $check_ $(@expr1073745349 "cppcheck-2.8/test/testother.cpp" $, 3314 $, "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n      printf(str);\n    case 3:\n      strcpy(str, \"b'\");\n    }\n}" , nullptr , false , false , false $)
3315:
|
3323:
3324: ;
3325: $if $(@expr1073745350 $!@expr1073745351 $assertEquals $(@expr1073745352 "cppcheck-2.8/test/testother.cpp" $, 3325 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3326:
3327:
3328: $check_ $(@expr1073745355 "cppcheck-2.8/test/testother.cpp" $, 3328 $, "typedef struct ct_data_s {\n    union {\n        char freq;\n    } fc;\n} ct_data;\ntypedef struct internal_state {\n    struct ct_data_s dyn_ltree[10];\n} deflate_state;\nvoid f(deflate_state *s) {\n    s->dyn_ltree[0].fc.freq++;\n}\n" , nullptr , false , false , false $)
3329:
|
3337:
3338: ;
3339: $if $(@expr1073745356 $!@expr1073745357 $assertEquals $(@expr1073745358 "cppcheck-2.8/test/testother.cpp" $, 3339 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3340:
3341:
3342: $check_ $(@expr1073745361 "cppcheck-2.8/test/testother.cpp" $, 3342 $, "void HttpFileTransfer :: transferTerminated ( bool bSuccess@1 ) {\nif ( m_szCompletionCallback . isNull ( ) ) {\nKVS_TRIGGER_EVENT ( KviEvent_OnHTTPGetTerminated , out ? out : ( g_pApp . activeConsole ( ) ) , & vParams )\n} else {\nKviKvsScript :: run ( m_szCompletionCallback , out ? out : ( g_pApp . activeConsole ( ) ) , & vParams ) ;\n}\n}\n" , nullptr , false , false , true $)
3343:
|
3347:
3348: ;
3349: $if $(@expr1073745362 $!@expr1073745363 $assertEquals $(@expr1073745364 "cppcheck-2.8/test/testother.cpp" $, 3349 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3350:
3351: $check_ $(@expr1073745367 "cppcheck-2.8/test/testother.cpp" $, 3351 $, "void f() {\n  int x;\n  switch (state) {\n  case 1: x = 3; goto a;\n  case 1: x = 6; goto a;\n  }\n}" $)
3352:
|
3356:
3357: ;
3358: $if $(@expr1073745368 $!@expr1073745369 $assertEquals $(@expr1073745370 "cppcheck-2.8/test/testother.cpp" $, 3358 $, "" $, errout@var100 .@expr3445 str (@expr3446 ) $) $) { $return ; }
3359: }
3360:
3361: void switchRedundantOperationTest ( ) {
3362: $check_ $(@expr1073745373 "cppcheck-2.8/test/testother.cpp" $, 3362 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        ++y;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3363:
|
3372:
3373: ;
3374: $if $(@expr1073745374 $!@expr1073745375 $assertEquals $(@expr1073745376 "cppcheck-2.8/test/testother.cpp" $, 3374 $, "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3375: $check_ $(@expr1073745379 "cppcheck-2.8/test/testother.cpp" $, 3375 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        ++y;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3376:
|
3387:
3388: ;
3389: $if $(@expr1073745380 $!@expr1073745381 $assertEquals $(@expr1073745382 "cppcheck-2.8/test/testother.cpp" $, 3389 $, "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3390: $check_ $(@expr1073745385 "cppcheck-2.8/test/testother.cpp" $, 3390 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        (void)y;\n    case 3:\n        ++y;\n    }\n    bar(y);\n}" $)
3391:
|
3400:
3401: ;
3402: $if $(@expr1073745386 $!@expr1073745387 $assertEquals $(@expr1073745388 "cppcheck-2.8/test/testother.cpp" $, 3402 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3403: $check_ $(@expr1073745391 "cppcheck-2.8/test/testother.cpp" $, 3403 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        ++y;\n    case 3:\n        ++y;\n    }\n    bar(y);\n}" $)
3404:
|
3413:
3414: ;
3415: $if $(@expr1073745392 $!@expr1073745393 $assertEquals $(@expr1073745394 "cppcheck-2.8/test/testother.cpp" $, 3415 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3416: $check_ $(@expr1073745397 "cppcheck-2.8/test/testother.cpp" $, 3416 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        --y;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3417:
|
3426:
3427: ;
3428: $if $(@expr1073745398 $!@expr1073745399 $assertEquals $(@expr1073745400 "cppcheck-2.8/test/testother.cpp" $, 3428 $, "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3429: $check_ $(@expr1073745403 "cppcheck-2.8/test/testother.cpp" $, 3429 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        --y;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3430:
|
3441:
3442: ;
3443: $if $(@expr1073745404 $!@expr1073745405 $assertEquals $(@expr1073745406 "cppcheck-2.8/test/testother.cpp" $, 3443 $, "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3444: $check_ $(@expr1073745409 "cppcheck-2.8/test/testother.cpp" $, 3444 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        (void)y;\n    case 3:\n        --y;\n    }\n    bar(y);\n}" $)
3445:
|
3454:
3455: ;
3456: $if $(@expr1073745410 $!@expr1073745411 $assertEquals $(@expr1073745412 "cppcheck-2.8/test/testother.cpp" $, 3456 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3457: $check_ $(@expr1073745415 "cppcheck-2.8/test/testother.cpp" $, 3457 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        --y;\n    case 3:\n        --y;\n    }\n    bar(y);\n}" $)
3458:
|
3467:
3468: ;
3469: $if $(@expr1073745416 $!@expr1073745417 $assertEquals $(@expr1073745418 "cppcheck-2.8/test/testother.cpp" $, 3469 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3470: $check_ $(@expr1073745421 "cppcheck-2.8/test/testother.cpp" $, 3470 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y++;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3471:
|
3480:
3481: ;
3482: $if $(@expr1073745422 $!@expr1073745423 $assertEquals $(@expr1073745424 "cppcheck-2.8/test/testother.cpp" $, 3482 $, "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3483: $check_ $(@expr1073745427 "cppcheck-2.8/test/testother.cpp" $, 3483 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y++;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3484:
|
3495:
3496: ;
3497: $if $(@expr1073745428 $!@expr1073745429 $assertEquals $(@expr1073745430 "cppcheck-2.8/test/testother.cpp" $, 3497 $, "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3498: $check_ $(@expr1073745433 "cppcheck-2.8/test/testother.cpp" $, 3498 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        y++;\n    }\n    bar(y);\n}" , nullptr , false , false , false $)
3499:
|
3508:
3509: ;
3510: $if $(@expr1073745434 $!@expr1073745435 $assertEquals $(@expr1073745436 "cppcheck-2.8/test/testother.cpp" $, 3510 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3511: $check_ $(@expr1073745439 "cppcheck-2.8/test/testother.cpp" $, 3511 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y++;\n    case 3:\n        y++;\n    }\n    bar(y);\n}" $)
3512:
|
3521:
3522: ;
3523: $if $(@expr1073745440 $!@expr1073745441 $assertEquals $(@expr1073745442 "cppcheck-2.8/test/testother.cpp" $, 3523 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3524: $check_ $(@expr1073745445 "cppcheck-2.8/test/testother.cpp" $, 3524 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y--;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3525:
|
3534:
3535: ;
3536: $if $(@expr1073745446 $!@expr1073745447 $assertEquals $(@expr1073745448 "cppcheck-2.8/test/testother.cpp" $, 3536 $, "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3537: $check_ $(@expr1073745451 "cppcheck-2.8/test/testother.cpp" $, 3537 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y--;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3538:
|
3549:
3550: ;
3551: $if $(@expr1073745452 $!@expr1073745453 $assertEquals $(@expr1073745454 "cppcheck-2.8/test/testother.cpp" $, 3551 $, "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3552: $check_ $(@expr1073745457 "cppcheck-2.8/test/testother.cpp" $, 3552 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        y--;\n    }\n    bar(y);\n}" , nullptr , false , false , false $)
3553:
|
3562:
3563: ;
3564: $if $(@expr1073745458 $!@expr1073745459 $assertEquals $(@expr1073745460 "cppcheck-2.8/test/testother.cpp" $, 3564 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3565: $check_ $(@expr1073745463 "cppcheck-2.8/test/testother.cpp" $, 3565 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y--;\n    case 3:\n        y--;\n    }\n    bar(y);\n}" $)
3566:
|
3575:
3576: ;
3577: $if $(@expr1073745464 $!@expr1073745465 $assertEquals $(@expr1073745466 "cppcheck-2.8/test/testother.cpp" $, 3577 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3578: $check_ $(@expr1073745469 "cppcheck-2.8/test/testother.cpp" $, 3578 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y++;\n    case 3:\n        if (x)\n        {\n            y = 3;\n        }\n    }\n    bar(y);\n}" $)
3579:
|
3591:
3592: ;
3593: $if $(@expr1073745470 $!@expr1073745471 $assertEquals $(@expr1073745472 "cppcheck-2.8/test/testother.cpp" $, 3593 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3594: $check_ $(@expr1073745475 "cppcheck-2.8/test/testother.cpp" $, 3594 $, "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y++;\n        if (y)\n            printf(\"%d\", y);\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3595:
|
3608:
3609: ;
3610: $if $(@expr1073745476 $!@expr1073745477 $assertEquals $(@expr1073745478 "cppcheck-2.8/test/testother.cpp" $, 3610 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3611: $check_ $(@expr1073745481 "cppcheck-2.8/test/testother.cpp" $, 3611 $, "void foo()\n{\n    int x = a;\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        x++;\n    case 3:\n        y++;\n    }\n    bar(y);\n}" $)
3612:
|
3622:
3623: ;
3624: $if $(@expr1073745482 $!@expr1073745483 $assertEquals $(@expr1073745484 "cppcheck-2.8/test/testother.cpp" $, 3624 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3625: $check_ $(@expr1073745487 "cppcheck-2.8/test/testother.cpp" $, 3625 $, "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y++;\n        break;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3626:
|
3636:
3637: ;
3638: $if $(@expr1073745488 $!@expr1073745489 $assertEquals $(@expr1073745490 "cppcheck-2.8/test/testother.cpp" $, 3638 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3639: $check_ $(@expr1073745493 "cppcheck-2.8/test/testother.cpp" $, 3639 $, "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y++;\n            continue;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}" $)
3640:
|
3652:
3653: ;
3654: $if $(@expr1073745494 $!@expr1073745495 $assertEquals $(@expr1073745496 "cppcheck-2.8/test/testother.cpp" $, 3654 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3655: $check_ $(@expr1073745499 "cppcheck-2.8/test/testother.cpp" $, 3655 $, "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y++;\n            throw e;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}" $)
3656:
|
3668:
3669: ;
3670: $if $(@expr1073745500 $!@expr1073745501 $assertEquals $(@expr1073745502 "cppcheck-2.8/test/testother.cpp" $, 3670 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3671: $check_ $(@expr1073745505 "cppcheck-2.8/test/testother.cpp" $, 3671 $, "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y++;\n        printf(\"%d\", y);\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3672:
|
3682:
3683: ;
3684: $if $(@expr1073745506 $!@expr1073745507 $assertEquals $(@expr1073745508 "cppcheck-2.8/test/testother.cpp" $, 3684 $, "" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3685: $check_ $(@expr1073745511 "cppcheck-2.8/test/testother.cpp" $, 3685 $, "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y++;\n        bar();\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" $)
3686:
|
3696:
3697: ;
3698: $if $(@expr1073745512 $!@expr1073745513 $assertEquals $(@expr1073745514 "cppcheck-2.8/test/testother.cpp" $, 3698 $, "[test.cpp:7] -> [test.cpp:10]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return ; }
3699:
3700: $check_ $(@expr1073745517 "cppcheck-2.8/test/testother.cpp" $, 3700 $, "bool f() {\n    bool ret = false;\n    switch (switchCond) {\n    case 1:\n        ret = true;\n        break;\n    case 31:\n        ret = true;\n        break;\n    case 54:\n        ret = true;\n        break;\n    };\n    ret = true;\n    return ret;\n}" $)
3701:
|
3714:
3715: ;
3716: $if $(@expr1073745518 $!@expr1073745519 $assertEquals $(@expr1073745520 "cppcheck-2.8/test/testother.cpp" $, 3716 $, "[test.cpp:5] -> [test.cpp:14]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n[test.cpp:8] -> [test.cpp:14]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n[test.cpp:11] -> [test.cpp:14]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n" $, errout@var100 .@expr3553 str (@expr3554 ) $) $) { $return
3717:
3718:
3719: ; }
3720: }
3721:
3722: void switchRedundantBitwiseOperationTest ( ) {
3723: $check_ $(@expr1073745523 "cppcheck-2.8/test/testother.cpp" $, 3723 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n    case 3:\n        y |= 3;\n        break;\n    }\n}" $)
3724:
|
3733:
3734: ;
3735: $if $(@expr1073745524 $!@expr1073745525 $assertEquals $(@expr1073745526 "cppcheck-2.8/test/testother.cpp" $, 3735 $, "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3736:
3737: $check_ $(@expr1073745529 "cppcheck-2.8/test/testother.cpp" $, 3737 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = y | 3;\n    case 3:\n        y = y | 3;\n        break;\n    }\n}" $)
3738:
|
3747:
3748: ;
3749: $if $(@expr1073745530 $!@expr1073745531 $assertEquals $(@expr1073745532 "cppcheck-2.8/test/testother.cpp" $, 3749 $, "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3750:
3751: $check_ $(@expr1073745535 "cppcheck-2.8/test/testother.cpp" $, 3751 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n    default:\n        y |= 3;\n        break;\n    }\n}" $)
3752:
|
3761:
3762: ;
3763: $if $(@expr1073745536 $!@expr1073745537 $assertEquals $(@expr1073745538 "cppcheck-2.8/test/testother.cpp" $, 3763 $, "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3764:
3765: $check_ $(@expr1073745541 "cppcheck-2.8/test/testother.cpp" $, 3765 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n    default:\n        if (z)\n            y |= 3;\n        break;\n    }\n}" $)
3766:
|
3776:
3777: ;
3778: $if $(@expr1073745542 $!@expr1073745543 $assertEquals $(@expr1073745544 "cppcheck-2.8/test/testother.cpp" $, 3778 $, "" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3779:
3780: $check_ $(@expr1073745547 "cppcheck-2.8/test/testother.cpp" $, 3780 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= z;\n        z++\n    default:\n        y |= z;\n        break;\n    }\n}" $)
3781:
|
3791:
3792: ;
3793: $if $(@expr1073745548 $!@expr1073745549 $assertEquals $(@expr1073745550 "cppcheck-2.8/test/testother.cpp" $, 3793 $, "" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3794:
3795: $check_ $(@expr1073745553 "cppcheck-2.8/test/testother.cpp" $, 3795 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n        bar(y);\n    case 3:\n        y |= 3;\n        break;\n    }\n}" $)
3796:
|
3806:
3807: ;
3808: $if $(@expr1073745554 $!@expr1073745555 $assertEquals $(@expr1073745556 "cppcheck-2.8/test/testother.cpp" $, 3808 $, "" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3809:
3810: $check_ $(@expr1073745559 "cppcheck-2.8/test/testother.cpp" $, 3810 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n        y = 4;\n    case 3:\n        y |= 3;\n        break;\n    }\n}" $)
3811:
|
3821:
3822: ;
3823: $if $(@expr1073745560 $!@expr1073745561 $assertEquals $(@expr1073745562 "cppcheck-2.8/test/testother.cpp" $, 3823 $, "[test.cpp:7] -> [test.cpp:8]: (style) Variable 'y' is reassigned a value before the old one has been used.\n" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3824:
3825: $check_ $(@expr1073745565 "cppcheck-2.8/test/testother.cpp" $, 3825 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y &= 3;\n    case 3:\n        y &= 3;\n        break;\n    }\n}" $)
3826:
|
3835:
3836: ;
3837: $if $(@expr1073745566 $!@expr1073745567 $assertEquals $(@expr1073745568 "cppcheck-2.8/test/testother.cpp" $, 3837 $, "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3838:
3839: $check_ $(@expr1073745571 "cppcheck-2.8/test/testother.cpp" $, 3839 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n        break;\n    case 3:\n        y |= 3;\n        break;\n    }\n}" $)
3840:
|
3850:
3851: ;
3852: $if $(@expr1073745572 $!@expr1073745573 $assertEquals $(@expr1073745574 "cppcheck-2.8/test/testother.cpp" $, 3852 $, "" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3853:
3854: $check_ $(@expr1073745577 "cppcheck-2.8/test/testother.cpp" $, 3854 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y ^= 3;\n    case 3:\n        y ^= 3;\n        break;\n    }\n}" $)
3855:
|
3864:
3865: ;
3866: $if $(@expr1073745578 $!@expr1073745579 $assertEquals $(@expr1073745580 "cppcheck-2.8/test/testother.cpp" $, 3866 $, "" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3867:
3868: $check_ $(@expr1073745583 "cppcheck-2.8/test/testother.cpp" $, 3868 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 2;\n    case 3:\n        y |= 3;\n        break;\n    }\n}" $)
3869:
|
3878:
3879: ;
3880: $if $(@expr1073745584 $!@expr1073745585 $assertEquals $(@expr1073745586 "cppcheck-2.8/test/testother.cpp" $, 3880 $, "" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3881:
3882: $check_ $(@expr1073745589 "cppcheck-2.8/test/testother.cpp" $, 3882 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y &= 2;\n    case 3:\n        y &= 3;\n        break;\n    }\n}" $)
3883:
|
3892:
3893: ;
3894: $if $(@expr1073745590 $!@expr1073745591 $assertEquals $(@expr1073745592 "cppcheck-2.8/test/testother.cpp" $, 3894 $, "" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3895:
3896: $check_ $(@expr1073745595 "cppcheck-2.8/test/testother.cpp" $, 3896 $, "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 2;\n    case 3:\n        y &= 2;\n        break;\n    }\n}" $)
3897:
|
3906:
3907: ;
3908: $if $(@expr1073745596 $!@expr1073745597 $assertEquals $(@expr1073745598 "cppcheck-2.8/test/testother.cpp" $, 3908 $, "" $, errout@var100 .@expr3703 str (@expr3704 ) $) $) { $return ; }
3909: }
3910:
3911: void unreachableCode ( ) {
3912: $check_ $(@expr1073745602 "cppcheck-2.8/test/testother.cpp" $, 3912 $, "void foo(int a) {\n    while(1) {\n        if (a++ >= 100) {\n            break;\n            continue;\n        }\n    }\n}" , nullptr , false , false , false $)
3913:
|
3918:
3919: ;
3920: $if $(@expr1073745603 $!@expr1073745604 $assertEquals $(@expr1073745605 "cppcheck-2.8/test/testother.cpp" $, 3920 $, "[test.cpp:5]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3921:
3922: $check_ $(@expr1073745608 "cppcheck-2.8/test/testother.cpp" $, 3922 $, "int foo(int a) {\n    return 0;\n    return(a-1);\n}" , nullptr , false , false , false $)
3923:
3924:
3925: ;
3926: $if $(@expr1073745609 $!@expr1073745610 $assertEquals $(@expr1073745611 "cppcheck-2.8/test/testother.cpp" $, 3926 $, "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3927:
3928: $check_ $(@expr1073745614 "cppcheck-2.8/test/testother.cpp" $, 3928 $, "int foo(int a) {\n  A:    return(0);\n    goto A;\n}" , nullptr , false , false , false $)
3929:
3930:
3931:
3932: ;
3933: $if $(@expr1073745615 $!@expr1073745616 $assertEquals $(@expr1073745617 "cppcheck-2.8/test/testother.cpp" $, 3933 $, "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3934:
3935: Settings settings@var175 ;
3936: settings@var175 .@expr3796 library@var176 .@expr1073745621 setnoreturn (@expr1073745622 "exit" , true ) ;
3937: settings@var175 .@expr3796 library@var176 .@expr1073745624 functions@var177 [@expr1073745625 "exit" ] .@expr1073745626 argumentChecks@expr1073745601 [@expr1073745627 1 ] =@expr1073745628 Library ::@expr1073745629 ArgumentChecks (@expr1073745630 ) ;
3938: $check_ $(@expr1073745631 "cppcheck-2.8/test/testother.cpp" $, 3938 $, "void foo() {\n    exit(0);\n    break;\n}" , nullptr , false , false , false , false , &@expr3808 settings@var175 $)
3939:
3940:
3941: ;
3942: $if $(@expr1073745633 $!@expr1073745634 $assertEquals $(@expr1073745635 "cppcheck-2.8/test/testother.cpp" $, 3942 $, "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3943:
3944: $check_ $(@expr1073745638 "cppcheck-2.8/test/testother.cpp" $, 3944 $, "class NeonSession {\n    void exit();\n};\nvoid NeonSession::exit()\n{\n    SAL_INFO(\"ucb.ucp.webdav\", \"neon commands cannot be aborted\");\n}" , nullptr , false , false , false , false , &@expr3808 settings@var175 $)
3945:
|
3949:
3950: ;
3951: $if $(@expr1073745640 $!@expr1073745641 $assertEquals $(@expr1073745642 "cppcheck-2.8/test/testother.cpp" $, 3951 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3952:
3953: $check_ $(@expr1073745645 "cppcheck-2.8/test/testother.cpp" $, 3953 $, "void NeonSession::exit()\n{\n    SAL_INFO(\"ucb.ucp.webdav\", \"neon commands cannot be aborted\");\n}" , nullptr , false , false , false , false , &@expr3808 settings@var175 $)
3954:
3955:
3956: ;
3957: $if $(@expr1073745647 $!@expr1073745648 $assertEquals $(@expr1073745649 "cppcheck-2.8/test/testother.cpp" $, 3957 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3958:
3959: $check_ $(@expr1073745652 "cppcheck-2.8/test/testother.cpp" $, 3959 $, "void foo() { xResAccess->exit(); }" , nullptr , false , false , false , false , &@expr3808 settings@var175 $) ;
3960: $if $(@expr1073745654 $!@expr1073745655 $assertEquals $(@expr1073745656 "cppcheck-2.8/test/testother.cpp" $, 3960 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3961:
3962: $check_ $(@expr1073745659 "cppcheck-2.8/test/testother.cpp" $, 3962 $, "void foo(int a)\n{\n        switch(a) {\n          case 0:\n            printf(\"case 0\");\n            break;\n            break;\n          case 1:\n            c++;\n            break;\n         }\n}" , nullptr , false , false , false $)
3963:
|
3972:
3973: ;
3974: $if $(@expr1073745660 $!@expr1073745661 $assertEquals $(@expr1073745662 "cppcheck-2.8/test/testother.cpp" $, 3974 $, "[test.cpp:7]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3975:
3976: $check_ $(@expr1073745665 "cppcheck-2.8/test/testother.cpp" $, 3976 $, "void foo(int a)\n{\n        switch(a) {\n          case 0:\n            printf(\"case 0\");\n            break;\n          case 1:\n            c++;\n            break;\n         }\n}" $)
3977:
|
3985:
3986: ;
3987: $if $(@expr1073745666 $!@expr1073745667 $assertEquals $(@expr1073745668 "cppcheck-2.8/test/testother.cpp" $, 3987 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3988:
3989: $check_ $(@expr1073745671 "cppcheck-2.8/test/testother.cpp" $, 3989 $, "void foo(int a)\n{\n        while(true) {\n          if (a++ >= 100) {\n            break;\n            break;\n          }\n       }\n}" , nullptr , false , false , false $)
3990:
|
3996:
3997: ;
3998: $if $(@expr1073745672 $!@expr1073745673 $assertEquals $(@expr1073745674 "cppcheck-2.8/test/testother.cpp" $, 3998 $, "[test.cpp:6]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
3999:
4000: $check_ $(@expr1073745677 "cppcheck-2.8/test/testother.cpp" $, 4000 $, "void foo(int a)\n{\n        while(true) {\n          if (a++ >= 100) {\n            continue;\n            continue;\n          }\n          a+=2;\n       }\n}" , nullptr , false , false , false $)
4001:
|
4008:
4009: ;
4010: $if $(@expr1073745678 $!@expr1073745679 $assertEquals $(@expr1073745680 "cppcheck-2.8/test/testother.cpp" $, 4010 $, "[test.cpp:6]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4011:
4012: $check_ $(@expr1073745683 "cppcheck-2.8/test/testother.cpp" $, 4012 $, "void foo(int a)\n{\n        while(true) {\n          if (a++ >= 100) {\n            continue;\n          }\n          a+=2;\n       }\n}" $)
4013:
|
4019:
4020: ;
4021: $if $(@expr1073745684 $!@expr1073745685 $assertEquals $(@expr1073745686 "cppcheck-2.8/test/testother.cpp" $, 4021 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4022:
4023: $check_ $(@expr1073745689 "cppcheck-2.8/test/testother.cpp" $, 4023 $, "int foo() {\n    throw 0;\n    return 1;\n}" , nullptr , false , false , false $)
4024:
4025:
4026: ;
4027: $if $(@expr1073745690 $!@expr1073745691 $assertEquals $(@expr1073745692 "cppcheck-2.8/test/testother.cpp" $, 4027 $, "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4028:
4029: $check_ $(@expr1073745695 "cppcheck-2.8/test/testother.cpp" $, 4029 $, "void foo() {\n    throw 0;\n    return;\n}" , nullptr , false , false , false $)
4030:
4031:
4032: ;
4033: $if $(@expr1073745696 $!@expr1073745697 $assertEquals $(@expr1073745698 "cppcheck-2.8/test/testother.cpp" $, 4033 $, "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4034:
4035: $check_ $(@expr1073745701 "cppcheck-2.8/test/testother.cpp" $, 4035 $, "int foo() {\n    throw = 0;\n    return 1;\n}" , "test.c" , false , false , false $)
4036:
4037:
4038: ;
4039: $if $(@expr1073745702 $!@expr1073745703 $assertEquals $(@expr1073745704 "cppcheck-2.8/test/testother.cpp" $, 4039 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4040:
4041: $check_ $(@expr1073745707 "cppcheck-2.8/test/testother.cpp" $, 4041 $, "int foo() {\n    return 0;\n    return 1;\n}" , nullptr , false , false , false $)
4042:
4043:
4044: ;
4045: $if $(@expr1073745708 $!@expr1073745709 $assertEquals $(@expr1073745710 "cppcheck-2.8/test/testother.cpp" $, 4045 $, "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4046:
4047: $check_ $(@expr1073745713 "cppcheck-2.8/test/testother.cpp" $, 4047 $, "int foo() {\n    return 0;\n    foo();\n}" , nullptr , false , false , false $)
4048:
4049:
4050: ;
4051: $if $(@expr1073745714 $!@expr1073745715 $assertEquals $(@expr1073745716 "cppcheck-2.8/test/testother.cpp" $, 4051 $, "[test.cpp:3]: (style) Statements following return, break, continue, goto or throw will never be executed.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4052:
4053: $check_ $(@expr1073745719 "cppcheck-2.8/test/testother.cpp" $, 4053 $, "int foo(int unused) {\n    return 0;\n    (void)unused;\n}" , nullptr , false , false , false $)
4054:
4055:
4056: ;
4057: $if $(@expr1073745720 $!@expr1073745721 $assertEquals $(@expr1073745722 "cppcheck-2.8/test/testother.cpp" $, 4057 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4058:
4059: $check_ $(@expr1073745725 "cppcheck-2.8/test/testother.cpp" $, 4059 $, "int foo(int unused1, int unused2) {\n    return 0;\n    (void)unused1;\n    (void)unused2;\n}" , nullptr , false , false , false $)
4060:
4061:
4062:
4063: ;
4064: $if $(@expr1073745726 $!@expr1073745727 $assertEquals $(@expr1073745728 "cppcheck-2.8/test/testother.cpp" $, 4064 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4065:
4066: $check_ $(@expr1073745731 "cppcheck-2.8/test/testother.cpp" $, 4066 $, "int foo(int unused1, int unused2) {\n    return 0;\n    (void)unused1;\n    (void)unused2;\n    foo();\n}" , nullptr , false , false , false $)
4067:
|
4070:
4071: ;
4072: $if $(@expr1073745732 $!@expr1073745733 $assertEquals $(@expr1073745734 "cppcheck-2.8/test/testother.cpp" $, 4072 $, "[test.cpp:5]: (style) Statements following return, break, continue, goto or throw will never be executed.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4073:
4074: $check_ $(@expr1073745737 "cppcheck-2.8/test/testother.cpp" $, 4074 $, "int foo() {\n    if(bar)\n        return 0;\n    return 124;\n}" $)
4075:
4076:
4077:
4078: ;
4079: $if $(@expr1073745738 $!@expr1073745739 $assertEquals $(@expr1073745740 "cppcheck-2.8/test/testother.cpp" $, 4079 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4080:
4081: $check_ $(@expr1073745743 "cppcheck-2.8/test/testother.cpp" $, 4081 $, "int foo() {\n    while(bar) {\n        return 0;\n        return 0;\n        return 0;\n        return 0;\n    }\n    return 124;\n}" , nullptr , false , false , false $)
4082:
|
4088:
4089: ;
4090: $if $(@expr1073745744 $!@expr1073745745 $assertEquals $(@expr1073745746 "cppcheck-2.8/test/testother.cpp" $, 4090 $, "[test.cpp:4]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4091:
4092: $check_ $(@expr1073745749 "cppcheck-2.8/test/testother.cpp" $, 4092 $, "void foo() {\n    while(bar) {\n        return;\n        break;\n    }\n}" , nullptr , false , false , false $)
4093:
|
4096:
4097: ;
4098: $if $(@expr1073745750 $!@expr1073745751 $assertEquals $(@expr1073745752 "cppcheck-2.8/test/testother.cpp" $, 4098 $, "[test.cpp:4]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4099:
4100:
4101: $check_ $(@expr1073745755 "cppcheck-2.8/test/testother.cpp" $, 4101 $, "extern int i,j;\nint foo() {\n    switch(i) {\n        default: j=1; break;\n    }\n    return 0;\n    j=2;\n}" , nullptr , false , false , false $)
4102:
|
4107:
4108: ;
4109: $if $(@expr1073745756 $!@expr1073745757 $assertEquals $(@expr1073745758 "cppcheck-2.8/test/testother.cpp" $, 4109 $, "[test.cpp:7]: (style) Statements following return, break, continue, goto or throw will never be executed.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4110:
4111: $check_ $(@expr1073745761 "cppcheck-2.8/test/testother.cpp" $, 4111 $, "int foo() {\n    return 0;\n  label:\n    throw 0;\n}" , nullptr , false , false , false $)
4112:
4113:
4114:
4115: ;
4116: $if $(@expr1073745762 $!@expr1073745763 $assertEquals $(@expr1073745764 "cppcheck-2.8/test/testother.cpp" $, 4116 $, "[test.cpp:3]: (style) Label 'label' is not used.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4117:
4118: $check_ $(@expr1073745767 "cppcheck-2.8/test/testother.cpp" $, 4118 $, "struct A {\n    virtual void foo  (P & Val) throw ();\n    virtual void foo1 (P & Val) throw ();\n}" $)
4119:
4120:
4121: ;
4122: $if $(@expr1073745768 $!@expr1073745769 $assertEquals $(@expr1073745770 "cppcheck-2.8/test/testother.cpp" $, 4122 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4123:
4124: $check_ $(@expr1073745773 "cppcheck-2.8/test/testother.cpp" $, 4124 $, "int foo() {\n    goto label;\n    while (true) {\n     bar();\n     label:\n    }\n}" $)
4125:
|
4129:
4130: ;
4131: $if $(@expr1073745774 $!@expr1073745775 $assertEquals $(@expr1073745776 "cppcheck-2.8/test/testother.cpp" $, 4131 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4132:
4133: $check_ $(@expr1073745779 "cppcheck-2.8/test/testother.cpp" $, 4133 $, "int foo() {\n    goto label;\n    do {\n     bar();\n     label:\n    } while (true);\n}" $)
4134:
|
4138:
4139: ;
4140: $if $(@expr1073745780 $!@expr1073745781 $assertEquals $(@expr1073745782 "cppcheck-2.8/test/testother.cpp" $, 4140 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4141:
4142: $check_ $(@expr1073745785 "cppcheck-2.8/test/testother.cpp" $, 4142 $, "int foo() {\n    goto label;\n    for (;;) {\n     bar();\n     label:\n    }\n}" $)
4143:
|
4147:
4148: ;
4149: $if $(@expr1073745786 $!@expr1073745787 $assertEquals $(@expr1073745788 "cppcheck-2.8/test/testother.cpp" $, 4149 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4150:
4151:
4152: $check_ $(@expr1073745791 "cppcheck-2.8/test/testother.cpp" $, 4152 $, "int foo() {\n\n    return 0;\n\n    return 1;\n}" , nullptr , false , false , false $)
4153:
|
4156:
4157: ;
4158: $if $(@expr1073745792 $!@expr1073745793 $assertEquals $(@expr1073745794 "cppcheck-2.8/test/testother.cpp" $, 4158 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4159: $check_ $(@expr1073745797 "cppcheck-2.8/test/testother.cpp" $, 4159 $, "int foo() {\n\n    return 0;\n\n    return 1;\n}" , nullptr , false , true , false $)
4160:
|
4163:
4164: ;
4165: $if $(@expr1073745798 $!@expr1073745799 $assertEquals $(@expr1073745800 "cppcheck-2.8/test/testother.cpp" $, 4165 $, "[test.cpp:5]: (style, inconclusive) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4166:
4167:
4168: $check_ $(@expr1073745803 "cppcheck-2.8/test/testother.cpp" $, 4168 $, "int f() {\n    return g([](int x){(void)x+1; return x;});\n}" , nullptr , false , false , false $)
4169:
|
4173:
4174: ;
4175: $if $(@expr1073745804 $!@expr1073745805 $assertEquals $(@expr1073745806 "cppcheck-2.8/test/testother.cpp" $, 4175 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4176:
4177:
4178: $check_ $(@expr1073745809 "cppcheck-2.8/test/testother.cpp" $, 4178 $, "template <>\ninline uint16_t htobe(uint16_t value) {\n     return ( __extension__ ({\n         register unsigned short int __v, __x = (unsigned short int) (value);\n         if (__builtin_constant_p (__x))\n             __v = ((unsigned short int) ((((__x) >> 8) & 0xff) | (((__x) & 0xff) << 8)));\n         else\n             __asm__ (\"rorw $8, %w0\" : \"=r\" (__v) : \"0\" (__x) : \"cc\");\n         (void)__v;\n     }));\n}" , nullptr , false , false , false $)
4179:
|
4187:
4188: ;
4189: $if $(@expr1073745810 $!@expr1073745811 $assertEquals $(@expr1073745812 "cppcheck-2.8/test/testother.cpp" $, 4189 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4190:
4191:
4192: $check_ $(@expr1073745815 "cppcheck-2.8/test/testother.cpp" $, 4192 $, "static std::function< int ( int, int ) > GetFunctor() {\n    return [](int a_, int b_) -> int {\n        int sum = a_ + b_;\n        return sum;\n    };\n}" , nullptr , false , false , false $)
4193:
|
4196:
4197: ;
4198: $if $(@expr1073745816 $!@expr1073745817 $assertEquals $(@expr1073745818 "cppcheck-2.8/test/testother.cpp" $, 4198 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4199:
4200:
4201: $check_ $(@expr1073745821 "cppcheck-2.8/test/testother.cpp" $, 4201 $, "struct per_state_info {\n    uint64_t enter, exit;\n    uint64_t events;\n    per_state_info() : enter(0), exit(0), events(0) {}\n};" , nullptr , false , false , false $)
4202:
4203:
4204:
4205: ;
4206: $if $(@expr1073745822 $!@expr1073745823 $assertEquals $(@expr1073745824 "cppcheck-2.8/test/testother.cpp" $, 4206 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4207:
4208:
4209: $check_ $(@expr1073745827 "cppcheck-2.8/test/testother.cpp" $, 4209 $, "void foo() {\n    (beat < 100) ? (void)0 : exit(0);\n    bar();\n}" , nullptr , false , false , false , false , &@expr3808 settings@var175 $)
4210:
4211:
4212: ;
4213: $if $(@expr1073745829 $!@expr1073745830 $assertEquals $(@expr1073745831 "cppcheck-2.8/test/testother.cpp" $, 4213 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4214:
4215: $check_ $(@expr1073745834 "cppcheck-2.8/test/testother.cpp" $, 4215 $, "void foo() {\n    (beat < 100) ? exit(0) : (void)0;\n    bar();\n}" , nullptr , false , false , false , false , &@expr3808 settings@var175 $)
4216:
4217:
4218: ;
4219: $if $(@expr1073745836 $!@expr1073745837 $assertEquals $(@expr1073745838 "cppcheck-2.8/test/testother.cpp" $, 4219 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4220:
4221:
4222:
4223: $do ${ $try ${ $check_ $(@expr1073745841 "cppcheck-2.8/test/testother.cpp" $, 4223 $, "void foo() {\n    (beat < 100) ? (void)0 : throw(0);\n    bar();\n}" , nullptr , false , false , false , false , &@expr3808 settings@var175 $) $; $} $catch $(@expr1073745843 $const InternalError $&@expr1073745844 $) ${ $} $catch $(@expr1073745845 $... $) ${ $assertThrow $(@expr1073745846 "cppcheck-2.8/test/testother.cpp" $, 4223 $) $; $} $} $while $(@expr1073745847 $false $)
4224:
4225:
4226: ;
4227:
4228:
4229: $check_ $(@expr1073745848 "cppcheck-2.8/test/testother.cpp" $, 4229 $, "int foo() {\n    exit(0);\n    return 1;\n}" $)
4230:
4231:
4232: ;
4233: $if $(@expr1073745849 $!@expr1073745850 $assertEquals $(@expr1073745851 "cppcheck-2.8/test/testother.cpp" $, 4233 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4234:
4235: $check_ $(@expr1073745854 "cppcheck-2.8/test/testother.cpp" $, 4235 $, "void f() {\n    enum : uint8_t { A, B } var = A;\n}\n" $)
4236:
4237: ;
4238: $if $(@expr1073745855 $!@expr1073745856 $assertEquals $(@expr1073745857 "cppcheck-2.8/test/testother.cpp" $, 4238 $, "" $, errout@var100 .@expr3782 str (@expr3783 ) $) $) { $return ; }
4239: }
4240:
4241:
4242: void suspiciousCase ( ) {
4243: $check_ $(@expr1073745860 "cppcheck-2.8/test/testother.cpp" $, 4243 $, "void foo() {\n    switch(a) {\n        case A&&B:\n            foo();\n        case (A||B):\n            foo();\n        case A||B:\n            foo();\n    }\n}" $)
4244:
|
4251:
4252: ;
4253: $if $(@expr1073745861 $!@expr1073745862 $assertEquals $(@expr1073745863 "cppcheck-2.8/test/testother.cpp" $, 4253 $, "[test.cpp:3]: (warning, inconclusive) Found suspicious case label in switch(). Operator '&&' probably doesn't work as intended.\n[test.cpp:5]: (warning, inconclusive) Found suspicious case label in switch(). Operator '||' probably doesn't work as intended.\n[test.cpp:7]: (warning, inconclusive) Found suspicious case label in switch(). Operator '||' probably doesn't work as intended.\n" $, errout@var100 .@expr4040 str (@expr4041 ) $) $) { $return
4254:
4255: ; }
4256:
4257: $check_ $(@expr1073745866 "cppcheck-2.8/test/testother.cpp" $, 4257 $, "void foo() {\n    switch(a) {\n        case 1:\n            a=A&&B;\n    }\n}" $)
4258:
|
4261:
4262: ;
4263: $if $(@expr1073745867 $!@expr1073745868 $assertEquals $(@expr1073745869 "cppcheck-2.8/test/testother.cpp" $, 4263 $, "" $, errout@var100 .@expr4040 str (@expr4041 ) $) $) { $return ; }
4264:
4265:
4266: $do ${ $try ${ $check_ $(@expr1073745872 "cppcheck-2.8/test/testother.cpp" $, 4266 $, "void foo() {\n    switch(a) {\n        case A&&B?B:A:\n            foo();\n    }\n}" $) $; $} $catch $(@expr1073745873 $const InternalError $&@expr1073745874 $) ${ $} $catch $(@expr1073745875 $... $) ${ $assertThrow $(@expr1073745876 "cppcheck-2.8/test/testother.cpp" $, 4266 $) $; $} $} $while $(@expr1073745877 $false $)
4267:
|
4270:
4271: ;
4272:
4273: }
4274:
4275: void suspiciousEqualityComparison ( ) {
4276: $check_ $(@expr1073745878 "cppcheck-2.8/test/testother.cpp" $, 4276 $, "void foo(int c) {\n    if (x) c == 0;\n}" $)
4277:
4278: ;
4279: $if $(@expr1073745879 $!@expr1073745880 $assertEquals $(@expr1073745881 "cppcheck-2.8/test/testother.cpp" $, 4279 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4280:
4281: $check_ $(@expr1073745884 "cppcheck-2.8/test/testother.cpp" $, 4281 $, "void foo(const int* c) {\n    if (x) *c == 0;\n}" $)
4282:
4283: ;
4284: $if $(@expr1073745885 $!@expr1073745886 $assertEquals $(@expr1073745887 "cppcheck-2.8/test/testother.cpp" $, 4284 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4285:
4286:
4287: $check_ $(@expr1073745890 "cppcheck-2.8/test/testother.cpp" $, 4287 $, "void foo(int c) {\n    if (c == 1) {\n        c = 0;\n    }\n}" $)
4288:
4289:
4290:
4291: ;
4292: $if $(@expr1073745891 $!@expr1073745892 $assertEquals $(@expr1073745893 "cppcheck-2.8/test/testother.cpp" $, 4292 $, "" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4293:
4294: $check_ $(@expr1073745896 "cppcheck-2.8/test/testother.cpp" $, 4294 $, "void foo(int c) {\n    c == 1;\n}" $)
4295:
4296: ;
4297: $if $(@expr1073745897 $!@expr1073745898 $assertEquals $(@expr1073745899 "cppcheck-2.8/test/testother.cpp" $, 4297 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4298:
4299: $check_ $(@expr1073745902 "cppcheck-2.8/test/testother.cpp" $, 4299 $, "void foo(int c) {\n    for (int i = 0; i == 10; i ++) {\n        a ++;\n    }\n}" $)
4300:
4301:
4302:
4303: ;
4304: $if $(@expr1073745903 $!@expr1073745904 $assertEquals $(@expr1073745905 "cppcheck-2.8/test/testother.cpp" $, 4304 $, "" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4305:
4306: $check_ $(@expr1073745908 "cppcheck-2.8/test/testother.cpp" $, 4306 $, "void foo(int c) {\n    for (i == 0; i < 10; i ++) {\n        c ++;\n    }\n}" $)
4307:
4308:
4309:
4310: ;
4311: $if $(@expr1073745909 $!@expr1073745910 $assertEquals $(@expr1073745911 "cppcheck-2.8/test/testother.cpp" $, 4311 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4312:
4313: $check_ $(@expr1073745914 "cppcheck-2.8/test/testother.cpp" $, 4313 $, "void foo(int c) {\n    for (i == 1; i < 10; i ++) {\n        c ++;\n    }\n}" $)
4314:
4315:
4316:
4317: ;
4318: $if $(@expr1073745915 $!@expr1073745916 $assertEquals $(@expr1073745917 "cppcheck-2.8/test/testother.cpp" $, 4318 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4319:
4320: $check_ $(@expr1073745920 "cppcheck-2.8/test/testother.cpp" $, 4320 $, "void foo(int c) {\n    for (i == 2; i < 10; i ++) {\n        c ++;\n    }\n}" $)
4321:
4322:
4323:
4324: ;
4325: $if $(@expr1073745921 $!@expr1073745922 $assertEquals $(@expr1073745923 "cppcheck-2.8/test/testother.cpp" $, 4325 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4326:
4327: $check_ $(@expr1073745926 "cppcheck-2.8/test/testother.cpp" $, 4327 $, "void foo(int c) {\n    for (int i = 0; i < 10; i == c) {\n        c ++;\n    }\n}" $)
4328:
4329:
4330:
4331: ;
4332: $if $(@expr1073745927 $!@expr1073745928 $assertEquals $(@expr1073745929 "cppcheck-2.8/test/testother.cpp" $, 4332 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4333:
4334: $check_ $(@expr1073745932 "cppcheck-2.8/test/testother.cpp" $, 4334 $, "void foo(int c) {\n    for (; running == 1;) {\n        c ++;\n    }\n}" $)
4335:
4336:
4337:
4338: ;
4339: $if $(@expr1073745933 $!@expr1073745934 $assertEquals $(@expr1073745935 "cppcheck-2.8/test/testother.cpp" $, 4339 $, "" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4340:
4341: $check_ $(@expr1073745938 "cppcheck-2.8/test/testother.cpp" $, 4341 $, "void foo(int c) {\n    printf(\"%i\", ({x==0;}));\n}" $)
4342:
4343: ;
4344: $if $(@expr1073745939 $!@expr1073745940 $assertEquals $(@expr1073745941 "cppcheck-2.8/test/testother.cpp" $, 4344 $, "" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4345:
4346: $check_ $(@expr1073745944 "cppcheck-2.8/test/testother.cpp" $, 4346 $, "void foo(int arg) {\n    printf(\"%i\", ({int x = do_something(); x == 0;}));\n}" $)
4347:
4348: ;
4349: $if $(@expr1073745945 $!@expr1073745946 $assertEquals $(@expr1073745947 "cppcheck-2.8/test/testother.cpp" $, 4349 $, "" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4350:
4351: $check_ $(@expr1073745950 "cppcheck-2.8/test/testother.cpp" $, 4351 $, "void foo(int x) {\n    printf(\"%i\", ({x == 0; x > 0 ? 10 : 20}));\n}" $)
4352:
4353: ;
4354: $if $(@expr1073745951 $!@expr1073745952 $assertEquals $(@expr1073745953 "cppcheck-2.8/test/testother.cpp" $, 4354 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4355:
4356: $check_ $(@expr1073745956 "cppcheck-2.8/test/testother.cpp" $, 4356 $, "void foo(int x) {\n    for (const Token* end = tok->link(); tok != end; tok = (tok == end) ? end : tok->next()) {\n        x++;\n    }\n}" $)
4357:
4358:
4359:
4360: ;
4361: $if $(@expr1073745957 $!@expr1073745958 $assertEquals $(@expr1073745959 "cppcheck-2.8/test/testother.cpp" $, 4361 $, "" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4362:
4363: $check_ $(@expr1073745962 "cppcheck-2.8/test/testother.cpp" $, 4363 $, "void foo(int x) {\n    for (int i = (x == 0) ? 0 : 5; i < 10; i ++) {\n        x++;\n    }\n}" $)
4364:
4365:
4366:
4367: ;
4368: $if $(@expr1073745963 $!@expr1073745964 $assertEquals $(@expr1073745965 "cppcheck-2.8/test/testother.cpp" $, 4368 $, "" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4369:
4370: $check_ $(@expr1073745968 "cppcheck-2.8/test/testother.cpp" $, 4370 $, "void foo(int x) {\n    for (int i = 0; i < 10; i += (x == 5) ? 1 : 2) {\n        x++;\n    }\n}" $)
4371:
4372:
4373:
4374: ;
4375: $if $(@expr1073745969 $!@expr1073745970 $assertEquals $(@expr1073745971 "cppcheck-2.8/test/testother.cpp" $, 4375 $, "" $, errout@var100 .@expr4058 str (@expr4059 ) $) $) { $return ; }
4376: }
4377:
4378: void suspiciousUnaryPlusMinus ( ) {
4379: $check_ $(@expr1073745974 "cppcheck-2.8/test/testother.cpp" $, 4379 $, "int g() { return 1; }\nvoid f() {\n    +g();\n    -g();\n}\n" $)
4380:
4381:
4382:
4383: ;
4384: $if $(@expr1073745975 $!@expr1073745976 $assertEquals $(@expr1073745977 "cppcheck-2.8/test/testother.cpp" $, 4384 $, "[test.cpp:3]: (warning, inconclusive) Found suspicious operator '+', result is not used.\n[test.cpp:4]: (warning, inconclusive) Found suspicious operator '-', result is not used.\n" $, errout@var100 .@expr4154 str (@expr4155 ) $) $) { $return
4385:
4386: ; }
4387:
4388: $check_ $(@expr1073745980 "cppcheck-2.8/test/testother.cpp" $, 4388 $, "void f(int i) {\n    +i;\n    -i;\n}\n" $)
4389:
4390:
4391: ;
4392: $if $(@expr1073745981 $!@expr1073745982 $assertEquals $(@expr1073745983 "cppcheck-2.8/test/testother.cpp" $, 4392 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '+', result is not used.\n[test.cpp:3]: (warning, inconclusive) Found suspicious operator '-', result is not used.\n" $, errout@var100 .@expr4154 str (@expr4155 ) $) $) { $return
4393:
4394: ; }
4395: }
4396:
4397: void selfAssignment ( ) {
4398: $check_ $(@expr1073745986 "cppcheck-2.8/test/testother.cpp" $, 4398 $, "void foo()\n{\n    int x = 1;\n    x = x;\n    return 0;\n}" $)
4399:
|
4402:
4403: ;
4404: $if $(@expr1073745987 $!@expr1073745988 $assertEquals $(@expr1073745989 "cppcheck-2.8/test/testother.cpp" $, 4404 $, "[test.cpp:4]: (warning) Redundant assignment of 'x' to itself.\n" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4405:
4406: $check_ $(@expr1073745992 "cppcheck-2.8/test/testother.cpp" $, 4406 $, "void foo()\n{\n    int x = x;\n}" $)
4407:
4408:
4409: ;
4410: $if $(@expr1073745993 $!@expr1073745994 $assertEquals $(@expr1073745995 "cppcheck-2.8/test/testother.cpp" $, 4410 $, "[test.cpp:3]: (warning) Redundant assignment of 'x' to itself.\n" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4411:
4412: $check_ $(@expr1073745998 "cppcheck-2.8/test/testother.cpp" $, 4412 $, "struct A { int b; };\nvoid foo(A* a1, A* a2) {\n    a1->b = a1->b;\n}" $)
4413:
4414:
4415: ;
4416: $if $(@expr1073745999 $!@expr1073746000 $assertEquals $(@expr1073746001 "cppcheck-2.8/test/testother.cpp" $, 4416 $, "[test.cpp:3]: (warning) Redundant assignment of 'a1->b' to itself.\n" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4417:
4418: $check_ $(@expr1073746004 "cppcheck-2.8/test/testother.cpp" $, 4418 $, "int x;\nvoid f()\n{\n    x = x = 3;\n}" $)
4419:
4420:
4421:
4422: ;
4423: $if $(@expr1073746005 $!@expr1073746006 $assertEquals $(@expr1073746007 "cppcheck-2.8/test/testother.cpp" $, 4423 $, "[test.cpp:4]: (warning) Redundant assignment of 'x' to itself.\n" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4424:
4425:
4426: $check_ $(@expr1073746010 "cppcheck-2.8/test/testother.cpp" $, 4426 $, "void Foo::myFunc( int a )\n{\n    if (a == 42)\n    a = a;\n}" $)
4427:
4428:
4429:
4430: ;
4431:
4432: $check_ $(@expr1073746011 "cppcheck-2.8/test/testother.cpp" $, 4432 $, "void foo()\n{\n    int x = 1;\n    x = x + 1;\n    return 0;\n}" $)
4433:
|
4436:
4437: ;
4438: $if $(@expr1073746012 $!@expr1073746013 $assertEquals $(@expr1073746014 "cppcheck-2.8/test/testother.cpp" $, 4438 $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4439:
4440: $check_ $(@expr1073746017 "cppcheck-2.8/test/testother.cpp" $, 4440 $, "void foo()\n{\n        int *x = getx();\n        *x = x;\n}" $)
4441:
4442:
4443:
4444: ;
4445: $if $(@expr1073746018 $!@expr1073746019 $assertEquals $(@expr1073746020 "cppcheck-2.8/test/testother.cpp" $, 4445 $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4446:
4447: $check_ $(@expr1073746023 "cppcheck-2.8/test/testother.cpp" $, 4447 $, "void foo() {\n    BAR *x = getx();\n    x = x;\n}" $)
4448:
4449:
4450: ;
4451: $if $(@expr1073746024 $!@expr1073746025 $assertEquals $(@expr1073746026 "cppcheck-2.8/test/testother.cpp" $, 4451 $, "[test.cpp:3]: (warning) Redundant assignment of 'x' to itself.\n" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4452:
4453:
4454: $check_ $(@expr1073746029 "cppcheck-2.8/test/testother.cpp" $, 4454 $, "void foo()\n{\n    Fred fred; fred = fred;\n}" $)
4455:
4456:
4457: ;
4458: $if $(@expr1073746030 $!@expr1073746031 $assertEquals $(@expr1073746032 "cppcheck-2.8/test/testother.cpp" $, 4458 $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4459:
4460: $check_ $(@expr1073746035 "cppcheck-2.8/test/testother.cpp" $, 4460 $, "void f(int x) {\n    x = (x == 0);    func(x);\n}" $)
4461:
4462:
4463: ;
4464: $if $(@expr1073746036 $!@expr1073746037 $assertEquals $(@expr1073746038 "cppcheck-2.8/test/testother.cpp" $, 4464 $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4465:
4466: $check_ $(@expr1073746041 "cppcheck-2.8/test/testother.cpp" $, 4466 $, "void f(int x) {\n    x = (x != 0);    func(x);\n}" $)
4467:
4468:
4469: ;
4470: $if $(@expr1073746042 $!@expr1073746043 $assertEquals $(@expr1073746044 "cppcheck-2.8/test/testother.cpp" $, 4470 $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4471:
4472:
4473: $check_ $(@expr1073746047 "cppcheck-2.8/test/testother.cpp" $, 4473 $, "void foo(int x) {\n    x = x ? x : 0;\n}" $)
4474:
4475: ;
4476: $if $(@expr1073746048 $!@expr1073746049 $assertEquals $(@expr1073746050 "cppcheck-2.8/test/testother.cpp" $, 4476 $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4477:
4478:
4479: $check_ $(@expr1073746053 "cppcheck-2.8/test/testother.cpp" $, 4479 $, "extern int i;\nvoid f() {\n    i = i;\n}" $)
4480:
4481:
4482: ;
4483: $if $(@expr1073746054 $!@expr1073746055 $assertEquals $(@expr1073746056 "cppcheck-2.8/test/testother.cpp" $, 4483 $, "[test.cpp:3]: (warning) Redundant assignment of 'i' to itself.\n" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4484:
4485:
4486: $check_ $(@expr1073746059 "cppcheck-2.8/test/testother.cpp" $, 4486 $, "class Foo {\n    int var;\n    void func();\n};\nvoid Foo::func() {\n    this->var = var;\n}" $)
4487:
|
4491:
4492: ;
4493: $if $(@expr1073746060 $!@expr1073746061 $assertEquals $(@expr1073746062 "cppcheck-2.8/test/testother.cpp" $, 4493 $, "[test.cpp:6]: (warning) Redundant assignment of 'this->var' to itself.\n" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4494:
4495: $check_ $(@expr1073746065 "cppcheck-2.8/test/testother.cpp" $, 4495 $, "class Foo {\n    int var;\n    void func(int var);\n};\nvoid Foo::func(int var) {\n    this->var = var;\n}" $)
4496:
|
4500:
4501: ;
4502: $if $(@expr1073746066 $!@expr1073746067 $assertEquals $(@expr1073746068 "cppcheck-2.8/test/testother.cpp" $, 4502 $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4503:
4504:
4505: $check_ $(@expr1073746071 "cppcheck-2.8/test/testother.cpp" $, 4505 $, "struct callbacks {\n    void (*s)(void);\n};\nvoid something(void) {}\nvoid f() {\n    struct callbacks ops = { .s = ops.s };\n}" $)
4506:
|
4510:
4511: ;
4512: $todoAssertEquals $(@expr1073746072 "cppcheck-2.8/test/testother.cpp" $, 4512 $, "[test.cpp:6]: (warning) Redundant assignment of 'something' to itself.\n" $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) ;
4513:
4514: $check_ $(@expr1073746075 "cppcheck-2.8/test/testother.cpp" $, 4514 $, "class V\n{\npublic:\n    V()\n    {\n        x = y = z = 0.0;\n    }\n    V( double x, const double y_, const double &z_)\n    {\n        x = x; y = y; z = z;\n    }\n    double x, y, z;\n};" $)
4515:
|
4525:
4526: ;
4527: $if $(@expr1073746076 $!@expr1073746077 $assertEquals $(@expr1073746078 "cppcheck-2.8/test/testother.cpp" $, 4527 $, "[test.cpp:10]: (warning) Redundant assignment of 'x' to itself.\n[test.cpp:10]: (warning) Redundant assignment of 'y' to itself.\n[test.cpp:10]: (warning) Redundant assignment of 'z' to itself.\n" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return
4528:
4529: ; }
4530:
4531: $check_ $(@expr1073746081 "cppcheck-2.8/test/testother.cpp" $, 4531 $, "void f(int i) { i = !!i; }" $) ;
4532: $if $(@expr1073746082 $!@expr1073746083 $assertEquals $(@expr1073746084 "cppcheck-2.8/test/testother.cpp" $, 4532 $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4533:
4534: $check_ $(@expr1073746087 "cppcheck-2.8/test/testother.cpp" $, 4534 $, "void foo() {\n    int x = 1;\n    int &ref = x;\n    ref = x;\n}\n" $)
4535:
4536:
4537:
4538: ;
4539: $if $(@expr1073746088 $!@expr1073746089 $assertEquals $(@expr1073746090 "cppcheck-2.8/test/testother.cpp" $, 4539 $, "[test.cpp:4]: (warning) Redundant assignment of 'ref' to itself.\n" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4540:
4541: $check_ $(@expr1073746093 "cppcheck-2.8/test/testother.cpp" $, 4541 $, "class Foo {\n    int i{};\n    void modify();\n    void method() {\n        Foo copy = *this;\n        modify();\n        *this = copy;\n    }\n};\n" $)
4542:
|
4548:
4549: ;
4550: $if $(@expr1073746094 $!@expr1073746095 $assertEquals $(@expr1073746096 "cppcheck-2.8/test/testother.cpp" $, 4550 $, "" $, errout@var100 .@expr4166 str (@expr4167 ) $) $) { $return ; }
4551: }
4552:
4553: void trac1132 ( ) {
4554: $check_ $(@expr1073746099 "cppcheck-2.8/test/testother.cpp" $, 4554 $, "class Lock\n{\npublic:\n    Lock(int i)\n    {\n        std::cout << \"Lock \" << i << std::endl;\n    }\n    ~Lock()\n    {\n        std::cout << \"~Lock\" << std::endl;\n    }\n};\nint main()\n{\n    Lock(123);\n    std::cout << \"hello\" << std::endl;\n    return 0;\n}" $)
4555:
|
4570:
4571: ;
4572: $if $(@expr1073746100 $!@expr1073746101 $assertEquals $(@expr1073746102 "cppcheck-2.8/test/testother.cpp" $, 4572 $, "[test.cpp:15]: (style) Instance of 'Lock' object is destroyed immediately.\n" $, errout@var100 .@expr1073746103 str (@expr1073746104 ) $) $) { $return ; }
4573: }
4574:
4575: void trac3693 ( ) {
4576: $check_ $(@expr1073746105 "cppcheck-2.8/test/testother.cpp" $, 4576 $, "struct A{\n  enum {\n    b = 300\n  };\n};\nconst int DFLT_TIMEOUT = A::b % 1000000 ;\n" , nullptr , false , false , false $)
4577:
|
4580:
4581: ;
4582: $if $(@expr1073746106 $!@expr1073746107 $assertEquals $(@expr1073746108 "cppcheck-2.8/test/testother.cpp" $, 4582 $, "" $, errout@var100 .@expr1073746109 str (@expr1073746110 ) $) $) { $return ; }
4583: }
4584:
4585: void testMisusedScopeObjectDoesNotPickFunction1 ( ) {
4586: $check_ $(@expr1073746111 "cppcheck-2.8/test/testother.cpp" $, 4586 $, "int main ( )\n{\n    CouldBeFunction ( 123 ) ;\n    return 0 ;\n}" $)
4587:
4588:
4589:
4590: ;
4591: $if $(@expr1073746112 $!@expr1073746113 $assertEquals $(@expr1073746114 "cppcheck-2.8/test/testother.cpp" $, 4591 $, "" $, errout@var100 .@expr1073746115 str (@expr1073746116 ) $) $) { $return ; }
4592: }
4593:
4594: void testMisusedScopeObjectDoesNotPickFunction2 ( ) {
4595: $check_ $(@expr1073746117 "cppcheck-2.8/test/testother.cpp" $, 4595 $, "struct error {\n    error() {}\n};\n\nclass parser {\npublic:\n    void error() const {}\n\n    void foo() const {\n        error();\n        do_something();\n    }\n};" $)
4596:
|
4606:
4607: ;
4608: $if $(@expr1073746118 $!@expr1073746119 $assertEquals $(@expr1073746120 "cppcheck-2.8/test/testother.cpp" $, 4608 $, "" $, errout@var100 .@expr1073746121 str (@expr1073746122 ) $) $) { $return ; }
4609: }
4610:
4611: void testMisusedScopeObjectPicksClass ( ) {
4612: $check_ $(@expr1073746123 "cppcheck-2.8/test/testother.cpp" $, 4612 $, "class NotAFunction ;\nint function ( )\n{\n    NotAFunction ( 123 );\n    return 0 ;\n}" $)
4613:
|
4616:
4617: ;
4618: $if $(@expr1073746124 $!@expr1073746125 $assertEquals $(@expr1073746126 "cppcheck-2.8/test/testother.cpp" $, 4618 $, "[test.cpp:4]: (style) Instance of 'NotAFunction' object is destroyed immediately.\n" $, errout@var100 .@expr1073746127 str (@expr1073746128 ) $) $) { $return ; }
4619: }
4620:
4621: void testMisusedScopeObjectPicksStruct ( ) {
4622: $check_ $(@expr1073746129 "cppcheck-2.8/test/testother.cpp" $, 4622 $, "struct NotAClass;\nbool func ( )\n{\n    NotAClass ( 123 ) ;\n    return true ;\n}" $)
4623:
|
4626:
4627: ;
4628: $if $(@expr1073746130 $!@expr1073746131 $assertEquals $(@expr1073746132 "cppcheck-2.8/test/testother.cpp" $, 4628 $, "[test.cpp:4]: (style) Instance of 'NotAClass' object is destroyed immediately.\n" $, errout@var100 .@expr1073746133 str (@expr1073746134 ) $) $) { $return ; }
4629: }
4630:
4631: void testMisusedScopeObjectDoesNotPickIf ( ) {
4632: $check_ $(@expr1073746135 "cppcheck-2.8/test/testother.cpp" $, 4632 $, "bool func( int a , int b , int c )\n{\n    if ( a > b ) return c == a ;\n    return b == a ;\n}" $)
4633:
4634:
4635:
4636: ;
4637: $if $(@expr1073746136 $!@expr1073746137 $assertEquals $(@expr1073746138 "cppcheck-2.8/test/testother.cpp" $, 4637 $, "" $, errout@var100 .@expr1073746139 str (@expr1073746140 ) $) $) { $return ; }
4638: }
4639:
4640: void testMisusedScopeObjectDoesNotPickConstructorDeclaration ( ) {
4641: $check_ $(@expr1073746141 "cppcheck-2.8/test/testother.cpp" $, 4641 $, "class Something : public SomethingElse\n{\npublic:\n~Something ( ) ;\nSomething ( ) ;\n}" $)
4642:
|
4645:
4646: ;
4647: $if $(@expr1073746142 $!@expr1073746143 $assertEquals $(@expr1073746144 "cppcheck-2.8/test/testother.cpp" $, 4647 $, "" $, errout@var100 .@expr1073746145 str (@expr1073746146 ) $) $) { $return ; }
4648: }
4649:
4650: void testMisusedScopeObjectDoesNotPickFunctor ( ) {
4651: $check_ $(@expr1073746147 "cppcheck-2.8/test/testother.cpp" $, 4651 $, "class IncrementFunctor\n{\npublic:\n    void operator()(int &i)\n    {\n        ++i;\n    }\n};\n\nint main()\n{\n    int a = 1;\n    IncrementFunctor()(a);\n    return a;\n}" $)
4652:
|
4664:
4665: ;
4666: $if $(@expr1073746148 $!@expr1073746149 $assertEquals $(@expr1073746150 "cppcheck-2.8/test/testother.cpp" $, 4666 $, "" $, errout@var100 .@expr1073746151 str (@expr1073746152 ) $) $) { $return ; }
4667: }
4668:
4669: void testMisusedScopeObjectDoesNotPickLocalClassConstructors ( ) {
4670: $check_ $(@expr1073746153 "cppcheck-2.8/test/testother.cpp" $, 4670 $, "void f() {\n    class Foo {\n        Foo() { }\n        Foo(int a) { }\n        Foo(int a, int b) { }\n    };\n    Foo();\n    do_something();\n}" $)
4671:
|
4677:
4678: ;
4679: $if $(@expr1073746154 $!@expr1073746155 $assertEquals $(@expr1073746156 "cppcheck-2.8/test/testother.cpp" $, 4679 $, "[test.cpp:7]: (style) Instance of 'Foo' object is destroyed immediately.\n" $, errout@var100 .@expr1073746157 str (@expr1073746158 ) $) $) { $return ; }
4680: }
4681:
4682: void testMisusedScopeObjectDoesNotPickUsedObject ( ) {
4683: $check_ $(@expr1073746159 "cppcheck-2.8/test/testother.cpp" $, 4683 $, "struct Foo {\n    void bar() {\n    }\n};\n\nvoid fn() {\n    Foo().bar();\n}" $)
4684:
|
4689:
4690: ;
4691: $if $(@expr1073746160 $!@expr1073746161 $assertEquals $(@expr1073746162 "cppcheck-2.8/test/testother.cpp" $, 4691 $, "" $, errout@var100 .@expr1073746163 str (@expr1073746164 ) $) $) { $return ; }
4692: }
4693:
4694: void testMisusedScopeObjectDoesNotPickPureC ( ) {
4695:
4696: const char code@var178 [@expr1073746165 93 ] =@expr1073746166 "struct cb_watch_bool {\n    int a;\n};\n\nvoid f()\n{\n    cb_watch_bool();\n    do_something();\n}\n"
4697:
|
4703:
4704: ;
4705:
4706: $check_ $(@expr1073746167 "cppcheck-2.8/test/testother.cpp" $, 4706 $, code@var178 , "test.cpp" $) ;
4707: $if $(@expr1073746168 $!@expr1073746169 $assertEquals $(@expr1073746170 "cppcheck-2.8/test/testother.cpp" $, 4707 $, "[test.cpp:7]: (style) Instance of 'cb_watch_bool' object is destroyed immediately.\n" $, errout@var100 .@expr4347 str (@expr4348 ) $) $) { $return ; }
4708:
4709: $check_ $(@expr1073746173 "cppcheck-2.8/test/testother.cpp" $, 4709 $, code@var178 , "test.c" $) ;
4710: $if $(@expr1073746174 $!@expr1073746175 $assertEquals $(@expr1073746176 "cppcheck-2.8/test/testother.cpp" $, 4710 $, "" $, errout@var100 .@expr4347 str (@expr4348 ) $) $) { $return ; }
4711:
4712:
4713: $check_ $(@expr1073746179 "cppcheck-2.8/test/testother.cpp" $, 4713 $, "struct stat { int a; int b; };\nvoid stat(const char *fn, struct stat *);\n\nvoid foo() {\n    stat(\"file.txt\", &st);\n    do_something();\n}" $)
4714:
|
4718:
4719: ;
4720: $if $(@expr1073746180 $!@expr1073746181 $assertEquals $(@expr1073746182 "cppcheck-2.8/test/testother.cpp" $, 4720 $, "" $, errout@var100 .@expr4347 str (@expr4348 ) $) $) { $return ; }
4721: }
4722:
4723: void testMisusedScopeObjectDoesNotPickNestedClass ( ) {
4724: const char code@var179 [@expr1073746185 153 ] =@expr1073746186 "class ios_base {\npublic:\n  class Init {\n  public:\n  };\n};\nclass foo {\npublic:\n  foo();\n  void Init(int);\n};\nfoo::foo() {\n  Init(0);\n  do_something();\n}\n"
4725:
|
4737:
4738: ;
4739:
4740: $check_ $(@expr1073746187 "cppcheck-2.8/test/testother.cpp" $, 4740 $, code@var179 , "test.cpp" $) ;
4741: $if $(@expr1073746188 $!@expr1073746189 $assertEquals $(@expr1073746190 "cppcheck-2.8/test/testother.cpp" $, 4741 $, "" $, errout@var100 .@expr1073746191 str (@expr1073746192 ) $) $) { $return ; }
4742: }
4743:
4744: void testMisusedScopeObjectInConstructor ( ) {
4745: const char code@var180 [@expr1073746193 104 ] =@expr1073746194 "class Foo {\npublic:\n  Foo(char x) {\n    Foo(x, 0);\n    do_something();\n  }\n  Foo(char x, int y) { }\n};\n"
4746:
|
4751:
4752: ;
4753: $check_ $(@expr1073746195 "cppcheck-2.8/test/testother.cpp" $, 4753 $, code@var180 , "test.cpp" $) ;
4754: $if $(@expr1073746196 $!@expr1073746197 $assertEquals $(@expr1073746198 "cppcheck-2.8/test/testother.cpp" $, 4754 $, "[test.cpp:4]: (style) Instance of 'Foo' object is destroyed immediately.\n" $, errout@var100 .@expr1073746199 str (@expr1073746200 ) $) $) { $return ; }
4755: }
4756:
4757: void testMisusedScopeObjectNoCodeAfter ( ) {
4758: $check_ $(@expr1073746201 "cppcheck-2.8/test/testother.cpp" $, 4758 $, "class Foo {};\nvoid f() {\n  Foo();\n}" , "test.cpp" $)
4759:
4760:
4761: ;
4762: $if $(@expr1073746202 $!@expr1073746203 $assertEquals $(@expr1073746204 "cppcheck-2.8/test/testother.cpp" $, 4762 $, "" $, errout@var100 .@expr1073746205 str (@expr1073746206 ) $) $) { $return ; }
4763: }
4764:
4765: void trac2084 ( ) {
4766: $check_ $(@expr1073746207 "cppcheck-2.8/test/testother.cpp" $, 4766 $, "void f()\n{\n    struct sigaction sa;\n\n    { sigaction(SIGHUP, &sa, 0); };\n    { sigaction(SIGINT, &sa, 0); };\n}" $)
4767:
|
4771:
4772: ;
4773: $if $(@expr1073746208 $!@expr1073746209 $assertEquals $(@expr1073746210 "cppcheck-2.8/test/testother.cpp" $, 4773 $, "" $, errout@var100 .@expr1073746211 str (@expr1073746212 ) $) $) { $return ; }
4774: }
4775:
4776: void trac2071 ( ) {
4777: $check_ $(@expr1073746213 "cppcheck-2.8/test/testother.cpp" $, 4777 $, "void f() {\n    struct AB {\n        AB(int a) { }\n    };\n\n    const AB ab[3] = { AB(0), AB(1), AB(2) };\n}" $)
4778:
|
4782:
4783: ;
4784: $if $(@expr1073746214 $!@expr1073746215 $assertEquals $(@expr1073746216 "cppcheck-2.8/test/testother.cpp" $, 4784 $, "" $, errout@var100 .@expr1073746217 str (@expr1073746218 ) $) $) { $return ; }
4785: }
4786:
4787: void clarifyCalculation ( ) {
4788: $check_ $(@expr1073746219 "cppcheck-2.8/test/testother.cpp" $, 4788 $, "int f(char c) {\n    return 10 * (c == 0) ? 1 : 2;\n}" $)
4789:
4790: ;
4791: $if $(@expr1073746220 $!@expr1073746221 $assertEquals $(@expr1073746222 "cppcheck-2.8/test/testother.cpp" $, 4791 $, "[test.cpp:2]: (style) Clarify calculation precedence for '*' and '?'.\n" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4792:
4793: $check_ $(@expr1073746225 "cppcheck-2.8/test/testother.cpp" $, 4793 $, "void f(char c) {\n    printf(\"%i\", 10 * (c == 0) ? 1 : 2);\n}" $)
4794:
4795: ;
4796: $if $(@expr1073746226 $!@expr1073746227 $assertEquals $(@expr1073746228 "cppcheck-2.8/test/testother.cpp" $, 4796 $, "[test.cpp:2]: (style) Clarify calculation precedence for '*' and '?'.\n" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4797:
4798: $check_ $(@expr1073746231 "cppcheck-2.8/test/testother.cpp" $, 4798 $, "void f() {\n    return (2*a)?b:c;\n}" $)
4799:
4800: ;
4801: $if $(@expr1073746232 $!@expr1073746233 $assertEquals $(@expr1073746234 "cppcheck-2.8/test/testother.cpp" $, 4801 $, "" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4802:
4803: $check_ $(@expr1073746237 "cppcheck-2.8/test/testother.cpp" $, 4803 $, "void f(char c) {\n    printf(\"%i\", a + b ? 1 : 2);\n}" , nullptr , false , false , false $)
4804:
4805: ;
4806: $if $(@expr1073746238 $!@expr1073746239 $assertEquals $(@expr1073746240 "cppcheck-2.8/test/testother.cpp" $, 4806 $, "[test.cpp:2]: (style) Clarify calculation precedence for '+' and '?'.\n" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4807:
4808: $check_ $(@expr1073746243 "cppcheck-2.8/test/testother.cpp" $, 4808 $, "void f() {\n    std::cout << x << y ? 2 : 3;\n}" $)
4809:
4810: ;
4811: $if $(@expr1073746244 $!@expr1073746245 $assertEquals $(@expr1073746246 "cppcheck-2.8/test/testother.cpp" $, 4811 $, "[test.cpp:2]: (style) Clarify calculation precedence for '<<' and '?'.\n" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4812:
4813: $check_ $(@expr1073746249 "cppcheck-2.8/test/testother.cpp" $, 4813 $, "void f() {\n    int ab = a - b ? 2 : 3;\n}" $)
4814:
4815: ;
4816: $if $(@expr1073746250 $!@expr1073746251 $assertEquals $(@expr1073746252 "cppcheck-2.8/test/testother.cpp" $, 4816 $, "[test.cpp:2]: (style) Clarify calculation precedence for '-' and '?'.\n" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4817:
4818: $check_ $(@expr1073746255 "cppcheck-2.8/test/testother.cpp" $, 4818 $, "void f() {\n    int ab = a | b ? 2 : 3;\n}" $)
4819:
4820: ;
4821: $if $(@expr1073746256 $!@expr1073746257 $assertEquals $(@expr1073746258 "cppcheck-2.8/test/testother.cpp" $, 4821 $, "[test.cpp:2]: (style) Clarify calculation precedence for '|' and '?'.\n" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4822:
4823:
4824: $check_ $(@expr1073746261 "cppcheck-2.8/test/testother.cpp" $, 4824 $, "int f(int x, int y) {\n    return x >> ! y ? 8 : 2;\n}" $)
4825:
4826: ;
4827: $if $(@expr1073746262 $!@expr1073746263 $assertEquals $(@expr1073746264 "cppcheck-2.8/test/testother.cpp" $, 4827 $, "[test.cpp:2]: (style) Clarify calculation precedence for '>>' and '?'.\n" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4828:
4829: $check_ $(@expr1073746267 "cppcheck-2.8/test/testother.cpp" $, 4829 $, "int f() {\n   return shift < sizeof(int64_t)*8 ? 1 : 2;\n}" $)
4830:
4831: ;
4832: $if $(@expr1073746268 $!@expr1073746269 $assertEquals $(@expr1073746270 "cppcheck-2.8/test/testother.cpp" $, 4832 $, "" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4833:
4834: $check_ $(@expr1073746273 "cppcheck-2.8/test/testother.cpp" $, 4834 $, "void f() { a = *p ? 1 : 2; }" $) ;
4835: $if $(@expr1073746274 $!@expr1073746275 $assertEquals $(@expr1073746276 "cppcheck-2.8/test/testother.cpp" $, 4835 $, "" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4836:
4837: $check_ $(@expr1073746279 "cppcheck-2.8/test/testother.cpp" $, 4837 $, "void f(int x) { const char *p = x & 1 ? \"1\" : \"0\"; }" $) ;
4838: $if $(@expr1073746280 $!@expr1073746281 $assertEquals $(@expr1073746282 "cppcheck-2.8/test/testother.cpp" $, 4838 $, "" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4839:
4840: $check_ $(@expr1073746285 "cppcheck-2.8/test/testother.cpp" $, 4840 $, "void foo() { x = a % b ? \"1\" : \"0\"; }" $) ;
4841: $if $(@expr1073746286 $!@expr1073746287 $assertEquals $(@expr1073746288 "cppcheck-2.8/test/testother.cpp" $, 4841 $, "" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4842:
4843: $check_ $(@expr1073746291 "cppcheck-2.8/test/testother.cpp" $, 4843 $, "void f(int x) { return x & 1 ? '1' : '0'; }" $) ;
4844: $if $(@expr1073746292 $!@expr1073746293 $assertEquals $(@expr1073746294 "cppcheck-2.8/test/testother.cpp" $, 4844 $, "" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4845:
4846: $check_ $(@expr1073746297 "cppcheck-2.8/test/testother.cpp" $, 4846 $, "void f(int x) { return x & 16 ? 1 : 0; }" $) ;
4847: $if $(@expr1073746298 $!@expr1073746299 $assertEquals $(@expr1073746300 "cppcheck-2.8/test/testother.cpp" $, 4847 $, "" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4848:
4849: $check_ $(@expr1073746303 "cppcheck-2.8/test/testother.cpp" $, 4849 $, "void f(int x) { return x % 16 ? 1 : 0; }" $) ;
4850: $if $(@expr1073746304 $!@expr1073746305 $assertEquals $(@expr1073746306 "cppcheck-2.8/test/testother.cpp" $, 4850 $, "" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4851:
4852: $check_ $(@expr1073746309 "cppcheck-2.8/test/testother.cpp" $, 4852 $, "enum {X,Y}; void f(int x) { return x & Y ? 1 : 0; }" $) ;
4853: $if $(@expr1073746310 $!@expr1073746311 $assertEquals $(@expr1073746312 "cppcheck-2.8/test/testother.cpp" $, 4853 $, "" $, errout@var100 .@expr4399 str (@expr4400 ) $) $) { $return ; }
4854: }
4855:
4856: void clarifyStatement ( ) {
4857: $check_ $(@expr1073746315 "cppcheck-2.8/test/testother.cpp" $, 4857 $, "char* f(char* c) {\n    *c++;\n    return c;\n}" $)
4858:
4859:
4860: ;
4861: $if $(@expr1073746316 $!@expr1073746317 $assertEquals $(@expr1073746318 "cppcheck-2.8/test/testother.cpp" $, 4861 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return
4862:
4863:
4864: ; }
4865:
4866: $check_ $(@expr1073746321 "cppcheck-2.8/test/testother.cpp" $, 4866 $, "char* f(char** c) {\n    *c[5]--;\n    return *c;\n}" $)
4867:
4868:
4869: ;
4870: $if $(@expr1073746322 $!@expr1073746323 $assertEquals $(@expr1073746324 "cppcheck-2.8/test/testother.cpp" $, 4870 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return
4871:
4872:
4873: ; }
4874:
4875: $check_ $(@expr1073746327 "cppcheck-2.8/test/testother.cpp" $, 4875 $, "void f(Foo f) {\n    *f.a++;\n}" $)
4876:
4877: ;
4878: $if $(@expr1073746328 $!@expr1073746329 $assertEquals $(@expr1073746330 "cppcheck-2.8/test/testother.cpp" $, 4878 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return
4879:
4880:
4881: ; }
4882:
4883: $check_ $(@expr1073746333 "cppcheck-2.8/test/testother.cpp" $, 4883 $, "void f(Foo f) {\n    *f.a[5].v[3]++;\n}" $)
4884:
4885: ;
4886: $if $(@expr1073746334 $!@expr1073746335 $assertEquals $(@expr1073746336 "cppcheck-2.8/test/testother.cpp" $, 4886 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return
4887:
4888:
4889: ; }
4890:
4891: $check_ $(@expr1073746339 "cppcheck-2.8/test/testother.cpp" $, 4891 $, "void f(Foo f) {\n    *f.a(1, 5).v[x + y]++;\n}" $)
4892:
4893: ;
4894: $if $(@expr1073746340 $!@expr1073746341 $assertEquals $(@expr1073746342 "cppcheck-2.8/test/testother.cpp" $, 4894 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return
4895:
4896:
4897: ; }
4898:
4899: $check_ $(@expr1073746345 "cppcheck-2.8/test/testother.cpp" $, 4899 $, "char* f(char* c) {\n    (*c)++;\n    return c;\n}" $)
4900:
4901:
4902: ;
4903: $if $(@expr1073746346 $!@expr1073746347 $assertEquals $(@expr1073746348 "cppcheck-2.8/test/testother.cpp" $, 4903 $, "" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return ; }
4904:
4905: $check_ $(@expr1073746351 "cppcheck-2.8/test/testother.cpp" $, 4905 $, "void f(char* c) {\n    bar(*c++);\n}" $)
4906:
4907: ;
4908: $if $(@expr1073746352 $!@expr1073746353 $assertEquals $(@expr1073746354 "cppcheck-2.8/test/testother.cpp" $, 4908 $, "" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return ; }
4909:
4910: $check_ $(@expr1073746357 "cppcheck-2.8/test/testother.cpp" $, 4910 $, "char*** f(char*** c) {\n    ***c++;\n    return c;\n}" $)
4911:
4912:
4913: ;
4914: $if $(@expr1073746358 $!@expr1073746359 $assertEquals $(@expr1073746360 "cppcheck-2.8/test/testother.cpp" $, 4914 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return
4915:
4916:
4917: ; }
4918:
4919: $check_ $(@expr1073746363 "cppcheck-2.8/test/testother.cpp" $, 4919 $, "char** f(char*** c) {\n    **c[5]--;\n    return **c;\n}" $)
4920:
4921:
4922: ;
4923: $if $(@expr1073746364 $!@expr1073746365 $assertEquals $(@expr1073746366 "cppcheck-2.8/test/testother.cpp" $, 4923 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return
4924:
4925:
4926: ; }
4927:
4928: $check_ $(@expr1073746369 "cppcheck-2.8/test/testother.cpp" $, 4928 $, "char*** f(char*** c) {\n    (***c)++;\n    return c;\n}" $)
4929:
4930:
4931: ;
4932: $if $(@expr1073746370 $!@expr1073746371 $assertEquals $(@expr1073746372 "cppcheck-2.8/test/testother.cpp" $, 4932 $, "" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return ; }
4933:
4934: $check_ $(@expr1073746375 "cppcheck-2.8/test/testother.cpp" $, 4934 $, "void f(const int*** p) {\n    delete[] **p;\n}\n" $)
4935:
4936: ;
4937: $if $(@expr1073746376 $!@expr1073746377 $assertEquals $(@expr1073746378 "cppcheck-2.8/test/testother.cpp" $, 4937 $, "" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return ; }
4938:
4939: $check_ $(@expr1073746381 "cppcheck-2.8/test/testother.cpp" $, 4939 $, "void *f(char** c) {\n    bar(**c++);\n}" $)
4940:
4941: ;
4942: $if $(@expr1073746382 $!@expr1073746383 $assertEquals $(@expr1073746384 "cppcheck-2.8/test/testother.cpp" $, 4942 $, "" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return ; }
4943:
4944: $check_ $(@expr1073746387 "cppcheck-2.8/test/testother.cpp" $, 4944 $, "void *f(char* p) {\n    for (p = path; *p++;) ;\n}" $)
4945:
4946: ;
4947: $if $(@expr1073746388 $!@expr1073746389 $assertEquals $(@expr1073746390 "cppcheck-2.8/test/testother.cpp" $, 4947 $, "" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return ; }
4948:
4949: $check_ $(@expr1073746393 "cppcheck-2.8/test/testother.cpp" $, 4949 $, "void f() {\n    std::array<std::array<double,3>,3> array;\n}\n" $)
4950:
4951: ;
4952: $if $(@expr1073746394 $!@expr1073746395 $assertEquals $(@expr1073746396 "cppcheck-2.8/test/testother.cpp" $, 4952 $, "" $, errout@var100 .@expr4495 str (@expr4496 ) $) $) { $return ; }
4953: }
4954:
4955: void duplicateBranch ( ) {
4956: $check_ $(@expr1073746399 "cppcheck-2.8/test/testother.cpp" $, 4956 $, "void f(int a, int &b) {\n    if (a)\n        b = 1;\n    else\n        b = 1;\n}" $)
4957:
|
4960:
4961: ;
4962: $if $(@expr1073746400 $!@expr1073746401 $assertEquals $(@expr1073746402 "cppcheck-2.8/test/testother.cpp" $, 4962 $, "[test.cpp:4] -> [test.cpp:2]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" $, errout@var100 .@expr4579 str (@expr4580 ) $) $) { $return ; }
4963:
4964: $check_ $(@expr1073746405 "cppcheck-2.8/test/testother.cpp" $, 4964 $, "void f(int a, int &b) {\n    if (a) {\n        if (a == 1)\n            b = 2;\n        else\n            b = 2;\n    } else\n        b = 1;\n}" $)
4965:
|
4971:
4972: ;
4973: $if $(@expr1073746406 $!@expr1073746407 $assertEquals $(@expr1073746408 "cppcheck-2.8/test/testother.cpp" $, 4973 $, "[test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" $, errout@var100 .@expr4579 str (@expr4580 ) $) $) { $return ; }
4974:
4975: $check_ $(@expr1073746411 "cppcheck-2.8/test/testother.cpp" $, 4975 $, "void f(int a, int &b) {\n    if (a == 1)\n        b = 1;\n    else {\n        if (a)\n            b = 2;\n        else\n            b = 2;\n    }\n}" $)
4976:
|
4983:
4984: ;
4985: $if $(@expr1073746412 $!@expr1073746413 $assertEquals $(@expr1073746414 "cppcheck-2.8/test/testother.cpp" $, 4985 $, "[test.cpp:7] -> [test.cpp:5]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" $, errout@var100 .@expr4579 str (@expr4580 ) $) $) { $return ; }
4986:
4987: $check_ $(@expr1073746417 "cppcheck-2.8/test/testother.cpp" $, 4987 $, "int f(int signed, unsigned char value) {\n    int ret;\n    if (signed)\n        ret = (signed char)value;\n    else\n        ret = (unsigned char)value;\n    return ret;\n}" , nullptr , false , false , false $)
4988:
|
4993:
4994: ;
4995: $if $(@expr1073746418 $!@expr1073746419 $assertEquals $(@expr1073746420 "cppcheck-2.8/test/testother.cpp" $, 4995 $, "" $, errout@var100 .@expr4579 str (@expr4580 ) $) $) { $return ; }
4996:
4997: $check_ $(@expr1073746423 "cppcheck-2.8/test/testother.cpp" $, 4997 $, "void f() {\n    if (b)\n        __asm__(\"mov ax, bx\");\n    else\n        __asm__(\"mov bx, bx\");\n}" $)
4998:
|
5001:
5002: ;
5003: $if $(@expr1073746424 $!@expr1073746425 $assertEquals $(@expr1073746426 "cppcheck-2.8/test/testother.cpp" $, 5003 $, "" $, errout@var100 .@expr4579 str (@expr4580 ) $) $) { $return ; }
5004:
5005: $check_ $(@expr1073746429 "cppcheck-2.8/test/testother.cpp" $, 5005 $, "void f() {\n    if (b)\n        __asm__(\"mov ax, bx\");\n    else\n        __asm__(\"mov ax, bx\");\n}" $)
5006:
|
5009:
5010: ;
5011: $if $(@expr1073746430 $!@expr1073746431 $assertEquals $(@expr1073746432 "cppcheck-2.8/test/testother.cpp" $, 5011 $, "[test.cpp:4] -> [test.cpp:2]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" $, errout@var100 .@expr4579 str (@expr4580 ) $) $) { $return ; }
5012: }
5013:
5014: void duplicateBranch1 ( ) {
5015:
5016:
5017:
5018: $check_ $(@expr1073746435 "cppcheck-2.8/test/testother.cpp" $, 5018 $, "void f()\n{\n  if (front < 0)\n    frac = front/(front-back);\n  else\n    frac = front/(front-back);\n}" $)
5019:
|
5023:
5024: ;
5025: $if $(@expr1073746436 $!@expr1073746437 $assertEquals $(@expr1073746438 "cppcheck-2.8/test/testother.cpp" $, 5025 $, "[test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" $, errout@var100 .@expr4615 str (@expr4616 ) $) $) { $return ; }
5026:
5027: $check_ $(@expr1073746441 "cppcheck-2.8/test/testother.cpp" $, 5027 $, "void f()\n{\n  if (front < 0)\n  { frac = front/(front-back);}\n  else\n    frac = front/((front-back));\n}" $)
5028:
|
5032:
5033: ;
5034: $if $(@expr1073746442 $!@expr1073746443 $assertEquals $(@expr1073746444 "cppcheck-2.8/test/testother.cpp" $, 5034 $, "[test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" $, errout@var100 .@expr4615 str (@expr4616 ) $) $) { $return ; }
5035:
5036:
5037: $check_ $(@expr1073746447 "cppcheck-2.8/test/testother.cpp" $, 5037 $, "void f()\n{\n  if (front < 0)\n  {}\n  else\n  {}\n}" $)
5038:
|
5042:
5043: ;
5044: $if $(@expr1073746448 $!@expr1073746449 $assertEquals $(@expr1073746450 "cppcheck-2.8/test/testother.cpp" $, 5044 $, "" $, errout@var100 .@expr4615 str (@expr4616 ) $) $) { $return ; }
5045: }
5046:
5047: void duplicateBranch2 ( ) {
5048: checkP (@expr1073746453 "#define DOSTUFF1 ;\n#define DOSTUFF2 ;\nvoid f(int x) {\n  if (x)\n    DOSTUFF1\n  else\n    DOSTUFF2\n}"
5049:
|
5054:
5055: ) ;
5056: $if $(@expr1073746454 $!@expr1073746455 $assertEquals $(@expr1073746456 "cppcheck-2.8/test/testother.cpp" $, 5056 $, "" $, errout@var100 .@expr1073746457 str (@expr1073746458 ) $) $) { $return ; }
5057: }
5058:
5059: void duplicateBranch3 ( ) {
5060: $check_ $(@expr1073746459 "cppcheck-2.8/test/testother.cpp" $, 5060 $, "void f(bool b, int i) {\n    int j = i;\n    if (b) {\n        x = i;\n    } else {\n        x = j;\n    }\n}" $)
5061:
|
5066:
5067: ;
5068: $if $(@expr1073746460 $!@expr1073746461 $assertEquals $(@expr1073746462 "cppcheck-2.8/test/testother.cpp" $, 5068 $, "[test.cpp:2] -> [test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" $, errout@var100 .@expr4639 str (@expr4640 ) $) $) { $return ; }
5069:
5070: $check_ $(@expr1073746465 "cppcheck-2.8/test/testother.cpp" $, 5070 $, "void f(bool b, int i) {\n    int j = i;\n    i++;\n    if (b) {\n        x = i;\n    } else {\n        x = j;\n    }\n}" $)
5071:
|
5077:
5078: ;
5079: $if $(@expr1073746466 $!@expr1073746467 $assertEquals $(@expr1073746468 "cppcheck-2.8/test/testother.cpp" $, 5079 $, "" $, errout@var100 .@expr4639 str (@expr4640 ) $) $) { $return ; }
5080: }
5081:
5082: void duplicateBranch4 ( ) {
5083: $check_ $(@expr1073746471 "cppcheck-2.8/test/testother.cpp" $, 5083 $, "void* f(bool b) {\n    if (b) {\n        return new A::Y(true);\n    } else {\n        return new A::Z(true);\n    }\n}" $)
5084:
|
5088:
5089: ;
5090: $if $(@expr1073746472 $!@expr1073746473 $assertEquals $(@expr1073746474 "cppcheck-2.8/test/testother.cpp" $, 5090 $, "" $, errout@var100 .@expr1073746475 str (@expr1073746476 ) $) $) { $return ; }
5091: }
5092:
5093: void duplicateExpression1 ( ) {
5094: $check_ $(@expr1073746477 "cppcheck-2.8/test/testother.cpp" $, 5094 $, "void foo(int a) {\n    if (a == a) { }\n}" $)
5095:
5096: ;
5097: $if $(@expr1073746478 $!@expr1073746479 $assertEquals $(@expr1073746480 "cppcheck-2.8/test/testother.cpp" $, 5097 $, "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5098:
5099: $check_ $(@expr1073746483 "cppcheck-2.8/test/testother.cpp" $, 5099 $, "void fun(int b) {\n    return  a && a ||\n            b == b &&\n            d > d &&\n            e < e &&\n            f ;\n}" $)
5100:
|
5104:
5105: ;
5106: $if $(@expr1073746484 $!@expr1073746485 $assertEquals $(@expr1073746486 "cppcheck-2.8/test/testother.cpp" $, 5106 $, "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n[test.cpp:3]: (style) Same expression on both sides of '=='.\n[test.cpp:4]: (style) Same expression on both sides of '>'.\n[test.cpp:5]: (style) Same expression on both sides of '<'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return
5107:
5108:
5109: ; }
5110:
5111: $check_ $(@expr1073746489 "cppcheck-2.8/test/testother.cpp" $, 5111 $, "void foo() {\n    return a && a;\n}" $)
5112:
5113: ;
5114: $if $(@expr1073746490 $!@expr1073746491 $assertEquals $(@expr1073746492 "cppcheck-2.8/test/testother.cpp" $, 5114 $, "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5115:
5116: $check_ $(@expr1073746495 "cppcheck-2.8/test/testother.cpp" $, 5116 $, "void foo() {\n    a = b && b;\n}" $)
5117:
5118: ;
5119: $if $(@expr1073746496 $!@expr1073746497 $assertEquals $(@expr1073746498 "cppcheck-2.8/test/testother.cpp" $, 5119 $, "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5120:
5121: $check_ $(@expr1073746501 "cppcheck-2.8/test/testother.cpp" $, 5121 $, "void foo(int b) {\n    f(a,b == b);\n}" $)
5122:
5123: ;
5124: $if $(@expr1073746502 $!@expr1073746503 $assertEquals $(@expr1073746504 "cppcheck-2.8/test/testother.cpp" $, 5124 $, "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5125:
5126: $check_ $(@expr1073746507 "cppcheck-2.8/test/testother.cpp" $, 5126 $, "void foo(int b) {\n    f(b == b, a);\n}" $)
5127:
5128: ;
5129: $if $(@expr1073746508 $!@expr1073746509 $assertEquals $(@expr1073746510 "cppcheck-2.8/test/testother.cpp" $, 5129 $, "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5130:
5131: $check_ $(@expr1073746513 "cppcheck-2.8/test/testother.cpp" $, 5131 $, "void foo() {\n    if (x!=2 || x!=2) {}\n}" $)
5132:
5133: ;
5134: $if $(@expr1073746514 $!@expr1073746515 $assertEquals $(@expr1073746516 "cppcheck-2.8/test/testother.cpp" $, 5134 $, "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5135:
5136: $check_ $(@expr1073746519 "cppcheck-2.8/test/testother.cpp" $, 5136 $, "void foo(int a, int b) {\n    if ((a < b) && (b > a)) { }\n}" $)
5137:
5138: ;
5139: $if $(@expr1073746520 $!@expr1073746521 $assertEquals $(@expr1073746522 "cppcheck-2.8/test/testother.cpp" $, 5139 $, "[test.cpp:2]: (style) Same expression on both sides of '&&' because 'a<b' and 'b>a' represent the same value.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5140:
5141: $check_ $(@expr1073746525 "cppcheck-2.8/test/testother.cpp" $, 5141 $, "void foo(int a, int b) {\n    if ((a <= b) && (b >= a)) { }\n}" $)
5142:
5143: ;
5144: $if $(@expr1073746526 $!@expr1073746527 $assertEquals $(@expr1073746528 "cppcheck-2.8/test/testother.cpp" $, 5144 $, "[test.cpp:2]: (style) Same expression on both sides of '&&' because 'a<=b' and 'b>=a' represent the same value.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5145:
5146: $check_ $(@expr1073746531 "cppcheck-2.8/test/testother.cpp" $, 5146 $, "void foo() {\n    if (x!=2 || y!=3 || x!=2) {}\n}" $)
5147:
5148: ;
5149: $if $(@expr1073746532 $!@expr1073746533 $assertEquals $(@expr1073746534 "cppcheck-2.8/test/testother.cpp" $, 5149 $, "[test.cpp:2]: (style) Same expression 'x!=2' found multiple times in chain of '||' operators.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5150:
5151: $check_ $(@expr1073746537 "cppcheck-2.8/test/testother.cpp" $, 5151 $, "void foo() {\n    if (x!=2 && (x=y) && x!=2) {}\n}" $)
5152:
5153: ;
5154: $if $(@expr1073746538 $!@expr1073746539 $assertEquals $(@expr1073746540 "cppcheck-2.8/test/testother.cpp" $, 5154 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5155:
5156: $check_ $(@expr1073746543 "cppcheck-2.8/test/testother.cpp" $, 5156 $, "void foo() {\n    if (a && b || a && b) {}\n}" $)
5157:
5158: ;
5159: $if $(@expr1073746544 $!@expr1073746545 $assertEquals $(@expr1073746546 "cppcheck-2.8/test/testother.cpp" $, 5159 $, "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5160:
5161: $check_ $(@expr1073746549 "cppcheck-2.8/test/testother.cpp" $, 5161 $, "void foo() {\n    if (a && b || b && c) {}\n}" $)
5162:
5163: ;
5164: $if $(@expr1073746550 $!@expr1073746551 $assertEquals $(@expr1073746552 "cppcheck-2.8/test/testother.cpp" $, 5164 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5165:
5166: $check_ $(@expr1073746555 "cppcheck-2.8/test/testother.cpp" $, 5166 $, "void foo() {\n    if (a && b | b && c) {}\n}" $)
5167:
5168: ;
5169: $if $(@expr1073746556 $!@expr1073746557 $assertEquals $(@expr1073746558 "cppcheck-2.8/test/testother.cpp" $, 5169 $, "[test.cpp:2]: (style) Same expression on both sides of '|'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5170:
5171: $check_ $(@expr1073746561 "cppcheck-2.8/test/testother.cpp" $, 5171 $, "void foo() {\n    if ((a + b) | (a + b)) {}\n}" $)
5172:
5173: ;
5174: $if $(@expr1073746562 $!@expr1073746563 $assertEquals $(@expr1073746564 "cppcheck-2.8/test/testother.cpp" $, 5174 $, "[test.cpp:2]: (style) Same expression on both sides of '|'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5175:
5176: $check_ $(@expr1073746567 "cppcheck-2.8/test/testother.cpp" $, 5176 $, "void foo() {\n    if ((a | b) & (a | b)) {}\n}" $)
5177:
5178: ;
5179: $if $(@expr1073746568 $!@expr1073746569 $assertEquals $(@expr1073746570 "cppcheck-2.8/test/testother.cpp" $, 5179 $, "[test.cpp:2]: (style) Same expression on both sides of '&'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5180:
5181: $check_ $(@expr1073746573 "cppcheck-2.8/test/testother.cpp" $, 5181 $, "void foo(int a, int b) {\n    if ((a | b) == (a | b)) {}\n}" $)
5182:
5183: ;
5184: $if $(@expr1073746574 $!@expr1073746575 $assertEquals $(@expr1073746576 "cppcheck-2.8/test/testother.cpp" $, 5184 $, "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5185:
5186: $check_ $(@expr1073746579 "cppcheck-2.8/test/testother.cpp" $, 5186 $, "void foo() {\n    if (a1[a2[c & 0xff] & 0xff]) {}\n}" $)
5187:
5188: ;
5189: $if $(@expr1073746580 $!@expr1073746581 $assertEquals $(@expr1073746582 "cppcheck-2.8/test/testother.cpp" $, 5189 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5190:
5191: $check_ $(@expr1073746585 "cppcheck-2.8/test/testother.cpp" $, 5191 $, "void d(const char f, int o, int v)\n{\n     if (((f=='R') && (o == 1) && ((v < 2) || (v > 99))) ||\n         ((f=='R') && (o == 2) && ((v < 2) || (v > 99))) ||\n         ((f=='T') && (o == 2) && ((v < 200) || (v > 9999)))) {}\n}" $)
5192:
|
5195:
5196: ;
5197: $if $(@expr1073746586 $!@expr1073746587 $assertEquals $(@expr1073746588 "cppcheck-2.8/test/testother.cpp" $, 5197 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5198:
5199: $check_ $(@expr1073746591 "cppcheck-2.8/test/testother.cpp" $, 5199 $, "int f(int x) { return x+x; }" $) ;
5200: $if $(@expr1073746592 $!@expr1073746593 $assertEquals $(@expr1073746594 "cppcheck-2.8/test/testother.cpp" $, 5200 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5201:
5202: $check_ $(@expr1073746597 "cppcheck-2.8/test/testother.cpp" $, 5202 $, "void f(int x) { while (x+=x) ; }" $) ;
5203: $if $(@expr1073746598 $!@expr1073746599 $assertEquals $(@expr1073746600 "cppcheck-2.8/test/testother.cpp" $, 5203 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5204:
5205: $check_ $(@expr1073746603 "cppcheck-2.8/test/testother.cpp" $, 5205 $, "void foo() {\n    if (a && b && b) {}\n}" $)
5206:
5207: ;
5208: $if $(@expr1073746604 $!@expr1073746605 $assertEquals $(@expr1073746606 "cppcheck-2.8/test/testother.cpp" $, 5208 $, "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5209:
5210: $check_ $(@expr1073746609 "cppcheck-2.8/test/testother.cpp" $, 5210 $, "void foo() {\n    if (a || b || b) {}\n}" $)
5211:
5212: ;
5213: $if $(@expr1073746610 $!@expr1073746611 $assertEquals $(@expr1073746612 "cppcheck-2.8/test/testother.cpp" $, 5213 $, "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5214:
5215: $check_ $(@expr1073746615 "cppcheck-2.8/test/testother.cpp" $, 5215 $, "void foo() {\n    if (a / 1000 / 1000) {}\n}" $)
5216:
5217: ;
5218: $if $(@expr1073746616 $!@expr1073746617 $assertEquals $(@expr1073746618 "cppcheck-2.8/test/testother.cpp" $, 5218 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5219:
5220: $check_ $(@expr1073746621 "cppcheck-2.8/test/testother.cpp" $, 5220 $, "int foo(int i) {\n    return i/i;\n}" $)
5221:
5222: ;
5223: $if $(@expr1073746622 $!@expr1073746623 $assertEquals $(@expr1073746624 "cppcheck-2.8/test/testother.cpp" $, 5223 $, "[test.cpp:2]: (style) Same expression on both sides of '/'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5224:
5225: $check_ $(@expr1073746627 "cppcheck-2.8/test/testother.cpp" $, 5225 $, "void foo() {\n    if (a << 1 << 1) {}\n}" $)
5226:
5227: ;
5228: $if $(@expr1073746628 $!@expr1073746629 $assertEquals $(@expr1073746630 "cppcheck-2.8/test/testother.cpp" $, 5228 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5229:
5230: $check_ $(@expr1073746633 "cppcheck-2.8/test/testother.cpp" $, 5230 $, "int f() { return !!y; }" $) ;
5231: $if $(@expr1073746634 $!@expr1073746635 $assertEquals $(@expr1073746636 "cppcheck-2.8/test/testother.cpp" $, 5231 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5232:
5233:
5234: $check_ $(@expr1073746639 "cppcheck-2.8/test/testother.cpp" $, 5234 $, "void f(long x) { if ((int32_t)x == (int64_t)x) {} }" , nullptr , false , false , false , false , nullptr $)
5235:
|
5240:
5241: ;
5242: $if $(@expr1073746640 $!@expr1073746641 $assertEquals $(@expr1073746642 "cppcheck-2.8/test/testother.cpp" $, 5242 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5243:
5244:
5245: $check_ $(@expr1073746645 "cppcheck-2.8/test/testother.cpp" $, 5245 $, "void f(long x) { if (({ 1+2; }) == ({3+4;})) {} }" $) ;
5246: $if $(@expr1073746646 $!@expr1073746647 $assertEquals $(@expr1073746648 "cppcheck-2.8/test/testother.cpp" $, 5246 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5247:
5248:
5249: $check_ $(@expr1073746651 "cppcheck-2.8/test/testother.cpp" $, 5249 $, "void foo() { UMSConfig& UMSConfig = GetUMSConfiguration(); }" $) ;
5250: $if $(@expr1073746652 $!@expr1073746653 $assertEquals $(@expr1073746654 "cppcheck-2.8/test/testother.cpp" $, 5250 $, "[test.cpp:1]: (style) Variable 'UMSConfig' can be declared with const\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5251:
5252:
5253: $check_ $(@expr1073746657 "cppcheck-2.8/test/testother.cpp" $, 5253 $, "void f(int x) {\n    a = x ? A | B | C\n          : A | B;\n}" $)
5254:
5255:
5256: ;
5257: $if $(@expr1073746658 $!@expr1073746659 $assertEquals $(@expr1073746660 "cppcheck-2.8/test/testother.cpp" $, 5257 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5258:
5259: $check_ $(@expr1073746663 "cppcheck-2.8/test/testother.cpp" $, 5259 $, "void f(const Bar &bar) {\n    bool a = bar.isSet() && bar->isSet();\n    bool b = bar.isSet() && bar.isSet();\n}" $)
5260:
5261:
5262: ;
5263: $if $(@expr1073746664 $!@expr1073746665 $assertEquals $(@expr1073746666 "cppcheck-2.8/test/testother.cpp" $, 5263 $, "[test.cpp:3]: (style) Same expression on both sides of '&&'.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5264:
5265:
5266: $check_ $(@expr1073746669 "cppcheck-2.8/test/testother.cpp" $, 5266 $, "void foo(int a, int b) {\n    if ((b + a) | (a + b)) {}\n}" $)
5267:
5268: ;
5269: $if $(@expr1073746670 $!@expr1073746671 $assertEquals $(@expr1073746672 "cppcheck-2.8/test/testother.cpp" $, 5269 $, "[test.cpp:2]: (style) Same expression on both sides of '|' because 'b+a' and 'a+b' represent the same value.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5270:
5271: $check_ $(@expr1073746675 "cppcheck-2.8/test/testother.cpp" $, 5271 $, "void foo(const std::string& a, const std::string& b) {\n  return a.find(b+\"&\") || a.find(\"&\"+b);\n}" $)
5272:
5273: ;
5274: $if $(@expr1073746676 $!@expr1073746677 $assertEquals $(@expr1073746678 "cppcheck-2.8/test/testother.cpp" $, 5274 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5275:
5276: $check_ $(@expr1073746681 "cppcheck-2.8/test/testother.cpp" $, 5276 $, "void foo(int a, int b) {\n    if ((b > a) | (a > b)) {}\n}" $)
5277:
5278: ;
5279: $if $(@expr1073746682 $!@expr1073746683 $assertEquals $(@expr1073746684 "cppcheck-2.8/test/testother.cpp" $, 5279 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5280:
5281: $check_ $(@expr1073746687 "cppcheck-2.8/test/testother.cpp" $, 5281 $, "void foo(double a, double b) {\n    if ((b + a) > (a + b)) {}\n}" $)
5282:
5283: ;
5284: $if $(@expr1073746688 $!@expr1073746689 $assertEquals $(@expr1073746690 "cppcheck-2.8/test/testother.cpp" $, 5284 $, "[test.cpp:2]: (style) The comparison 'b+a > a+b' is always false because 'b+a' and 'a+b' represent the same value.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5285:
5286: $check_ $(@expr1073746693 "cppcheck-2.8/test/testother.cpp" $, 5286 $, "void f(int x) {\n    if ((x == 1) && (x == 0x00000001))\n        a++;\n}" $)
5287:
5288:
5289: ;
5290: $if $(@expr1073746694 $!@expr1073746695 $assertEquals $(@expr1073746696 "cppcheck-2.8/test/testother.cpp" $, 5290 $, "[test.cpp:2]: (style) Same expression on both sides of '&&' because 'x==1' and 'x==0x00000001' represent the same value.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5291:
5292: $check_ $(@expr1073746699 "cppcheck-2.8/test/testother.cpp" $, 5292 $, "void f() {\n    enum { Four = 4 };\n    if (Four == 4) {}}" , nullptr , false , true , false $)
5293:
5294:
5295: ;
5296: $if $(@expr1073746700 $!@expr1073746701 $assertEquals $(@expr1073746702 "cppcheck-2.8/test/testother.cpp" $, 5296 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5297:
5298: $check_ $(@expr1073746705 "cppcheck-2.8/test/testother.cpp" $, 5298 $, "void f() {\n    enum { Four = 4 };\n    static_assert(Four == 4, \"\");\n}" $)
5299:
5300:
5301: ;
5302: $if $(@expr1073746706 $!@expr1073746707 $assertEquals $(@expr1073746708 "cppcheck-2.8/test/testother.cpp" $, 5302 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5303:
5304: $check_ $(@expr1073746711 "cppcheck-2.8/test/testother.cpp" $, 5304 $, "void f() {\n    enum { Four = 4 };\n    static_assert(4 == Four, \"\");\n}" $)
5305:
5306:
5307: ;
5308: $if $(@expr1073746712 $!@expr1073746713 $assertEquals $(@expr1073746714 "cppcheck-2.8/test/testother.cpp" $, 5308 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5309:
5310: $check_ $(@expr1073746717 "cppcheck-2.8/test/testother.cpp" $, 5310 $, "void f() {\n    enum { FourInEnumOne = 4 };\n    enum { FourInEnumTwo = 4 };\n    if (FourInEnumOne == FourInEnumTwo) {}\n}" , nullptr , false , true , false $)
5311:
5312:
5313:
5314: ;
5315: $if $(@expr1073746718 $!@expr1073746719 $assertEquals $(@expr1073746720 "cppcheck-2.8/test/testother.cpp" $, 5315 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5316:
5317: $check_ $(@expr1073746723 "cppcheck-2.8/test/testother.cpp" $, 5317 $, "void f() {\n    enum { FourInEnumOne = 4 };\n    enum { FourInEnumTwo = 4 };\n    static_assert(FourInEnumOne == FourInEnumTwo, \"\");\n}" $)
5318:
5319:
5320:
5321: ;
5322: $if $(@expr1073746724 $!@expr1073746725 $assertEquals $(@expr1073746726 "cppcheck-2.8/test/testother.cpp" $, 5322 $, "" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5323:
5324: $check_ $(@expr1073746729 "cppcheck-2.8/test/testother.cpp" $, 5324 $, "void foo(int a, int b) {\n    if (sizeof(a) == sizeof(a)) { }\n    if (sizeof(a) == sizeof(b)) { }\n}" $)
5325:
5326:
5327: ;
5328: $if $(@expr1073746730 $!@expr1073746731 $assertEquals $(@expr1073746732 "cppcheck-2.8/test/testother.cpp" $, 5328 $, "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5329:
5330: $check_ $(@expr1073746735 "cppcheck-2.8/test/testother.cpp" $, 5330 $, "float bar(int) __attribute__((pure));\nchar foo(int) __attribute__((pure));\nint test(int a, int b) {\n    if (bar(a) == bar(a)) { }\n    if (unknown(a) == unknown(a)) { }\n    if (foo(a) == foo(a)) { }\n}" $)
5331:
|
5335:
5336: ;
5337: $if $(@expr1073746736 $!@expr1073746737 $assertEquals $(@expr1073746738 "cppcheck-2.8/test/testother.cpp" $, 5337 $, "[test.cpp:6]: (style) Same expression on both sides of '=='.\n" $, errout@var100 .@expr4657 str (@expr4658 ) $) $) { $return ; }
5338: }
5339:
5340: void duplicateExpression2 ( ) {
5341: $check_ $(@expr1073746741 "cppcheck-2.8/test/testother.cpp" $, 5341 $, "int f(long double ldbl, double dbl, float flt) {\n    if (ldbl != ldbl) have_nan = 1;\n    if (!(dbl == dbl)) have_nan = 1;\n    if (flt != flt) have_nan = 1;\n    return have_nan;\n}" $)
5342:
|
5345:
5346: ;
5347: $if $(@expr1073746742 $!@expr1073746743 $assertEquals $(@expr1073746744 "cppcheck-2.8/test/testother.cpp" $, 5347 $, "" $, errout@var100 .@expr4921 str (@expr4922 ) $) $) { $return ; }
5348:
5349: $check_ $(@expr1073746747 "cppcheck-2.8/test/testother.cpp" $, 5349 $, "float f(float x) { return x-x; }" $) ;
5350: $if $(@expr1073746748 $!@expr1073746749 $assertEquals $(@expr1073746750 "cppcheck-2.8/test/testother.cpp" $, 5350 $, "" $, errout@var100 .@expr4921 str (@expr4922 ) $) $) { $return ; }
5351:
5352: $check_ $(@expr1073746753 "cppcheck-2.8/test/testother.cpp" $, 5352 $, "float f(float x) { return (X double)x == (X double)x; }" , nullptr , false , false , false $) ;
5353: $if $(@expr1073746754 $!@expr1073746755 $assertEquals $(@expr1073746756 "cppcheck-2.8/test/testother.cpp" $, 5353 $, "" $, errout@var100 .@expr4921 str (@expr4922 ) $) $) { $return ; }
5354:
5355: $check_ $(@expr1073746759 "cppcheck-2.8/test/testother.cpp" $, 5355 $, "struct X { float f; };\nfloat f(struct X x) { return x.f == x.f; }" $)
5356: ;
5357: $if $(@expr1073746760 $!@expr1073746761 $assertEquals $(@expr1073746762 "cppcheck-2.8/test/testother.cpp" $, 5357 $, "" $, errout@var100 .@expr4921 str (@expr4922 ) $) $) { $return ; }
5358:
5359: $check_ $(@expr1073746765 "cppcheck-2.8/test/testother.cpp" $, 5359 $, "struct X { int i; };\nint f(struct X x) { return x.i == x.i; }" $)
5360: ;
5361: $if $(@expr1073746766 $!@expr1073746767 $assertEquals $(@expr1073746768 "cppcheck-2.8/test/testother.cpp" $, 5361 $, "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" $, errout@var100 .@expr4921 str (@expr4922 ) $) $) { $return ; }
5362:
5363:
5364: $check_ $(@expr1073746771 "cppcheck-2.8/test/testother.cpp" $, 5364 $, "int f() { return x==x; }" $) ;
5365: $if $(@expr1073746772 $!@expr1073746773 $assertEquals $(@expr1073746774 "cppcheck-2.8/test/testother.cpp" $, 5365 $, "" $, errout@var100 .@expr4921 str (@expr4922 ) $) $) { $return ; }
5366: }
5367:
5368: void duplicateExpression3 ( ) {
5369: Settings settings@var181 ;
5370: const char xmldata@var182 [@expr1073746777 126 ] =@expr1073746778 "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrcmp\">\n    <pure/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
5371:
|
5376:
5377: ;
5378: tinyxml2 ::@expr1073746779 XMLDocument doc@var183 ;
5379: doc@var183 .@expr1073746780 Parse (@expr1073746781 xmldata@var182 , sizeof (@expr1073746782 xmldata@var182 ) ) ;
5380: settings@var181 .@expr1073746783 library@var184 .@expr1073746784 load (@expr1073746785 doc@var183 ) ;
5381:
5382: $check_ $(@expr1073746786 "cppcheck-2.8/test/testother.cpp" $, 5382 $, "void foo() {\n    if (x() || x()) {}\n}" $)
5383:
5384: ;
5385: $if $(@expr1073746787 $!@expr1073746788 $assertEquals $(@expr1073746789 "cppcheck-2.8/test/testother.cpp" $, 5385 $, "" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5386:
5387: $check_ $(@expr1073746792 "cppcheck-2.8/test/testother.cpp" $, 5387 $, "struct A {\n  void foo() const;\n  bool bar() const;\n};\nvoid A::foo() const {\n    if (bar() && bar()) {}\n}" $)
5388:
|
5392:
5393: ;
5394: $if $(@expr1073746793 $!@expr1073746794 $assertEquals $(@expr1073746795 "cppcheck-2.8/test/testother.cpp" $, 5394 $, "[test.cpp:6]: (style) Same expression on both sides of '&&'.\n" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5395:
5396: $check_ $(@expr1073746798 "cppcheck-2.8/test/testother.cpp" $, 5396 $, "struct A {\n  void foo();\n  bool bar();\n  bool bar() const;\n};\nvoid A::foo() {\n    if (bar() && bar()) {}\n}" $)
5397:
|
5402:
5403: ;
5404: $if $(@expr1073746799 $!@expr1073746800 $assertEquals $(@expr1073746801 "cppcheck-2.8/test/testother.cpp" $, 5404 $, "" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5405:
5406: $check_ $(@expr1073746804 "cppcheck-2.8/test/testother.cpp" $, 5406 $, "class B {\n    void bar(int i);\n};\nclass A {\n    void bar(int i) const;\n};\nvoid foo() {\n    B b;\n    A a;\n    if (b.bar(1) && b.bar(1)) {}\n    if (a.bar(1) && a.bar(1)) {}\n}" $)
5407:
|
5416:
5417: ;
5418: $if $(@expr1073746805 $!@expr1073746806 $assertEquals $(@expr1073746807 "cppcheck-2.8/test/testother.cpp" $, 5418 $, "[test.cpp:11]: (style) Same expression on both sides of '&&'.\n" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5419:
5420: $check_ $(@expr1073746810 "cppcheck-2.8/test/testother.cpp" $, 5420 $, "class D { void strcmp(); };\nvoid foo() {\n    D d;\n    if (d.strcmp() && d.strcmp()) {}\n}" $)
5421:
5422:
5423:
5424: ;
5425: $if $(@expr1073746811 $!@expr1073746812 $assertEquals $(@expr1073746813 "cppcheck-2.8/test/testother.cpp" $, 5425 $, "" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5426:
5427: $check_ $(@expr1073746816 "cppcheck-2.8/test/testother.cpp" $, 5427 $, "void foo() {\n    if ((mystrcmp(a, b) == 0) || (mystrcmp(a, b) == 0)) {}\n}" , "test.cpp" , false , false , true , false , &@expr1073746817 settings@var181 $)
5428:
5429: ;
5430: $if $(@expr1073746818 $!@expr1073746819 $assertEquals $(@expr1073746820 "cppcheck-2.8/test/testother.cpp" $, 5430 $, "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5431:
5432: $check_ $(@expr1073746823 "cppcheck-2.8/test/testother.cpp" $, 5432 $, "void GetValue() { return rand(); }\nvoid foo() {\n    if ((GetValue() == 0) || (GetValue() == 0)) { dostuff(); }\n}" $)
5433:
5434:
5435: ;
5436: $if $(@expr1073746824 $!@expr1073746825 $assertEquals $(@expr1073746826 "cppcheck-2.8/test/testother.cpp" $, 5436 $, "" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5437:
5438: $check_ $(@expr1073746829 "cppcheck-2.8/test/testother.cpp" $, 5438 $, "void __attribute__((const)) GetValue() { return X; }\nvoid foo() {\n    if ((GetValue() == 0) || (GetValue() == 0)) { dostuff(); }\n}" $)
5439:
5440:
5441: ;
5442: $if $(@expr1073746830 $!@expr1073746831 $assertEquals $(@expr1073746832 "cppcheck-2.8/test/testother.cpp" $, 5442 $, "[test.cpp:3]: (style) Same expression on both sides of '||'.\n" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5443:
5444: $check_ $(@expr1073746835 "cppcheck-2.8/test/testother.cpp" $, 5444 $, "void GetValue() __attribute__((const));\nvoid GetValue() { return X; }\nvoid foo() {\n    if ((GetValue() == 0) || (GetValue() == 0)) { dostuff(); }\n}" $)
5445:
5446:
5447:
5448: ;
5449: $if $(@expr1073746836 $!@expr1073746837 $assertEquals $(@expr1073746838 "cppcheck-2.8/test/testother.cpp" $, 5449 $, "[test.cpp:4]: (style) Same expression on both sides of '||'.\n" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5450:
5451: $check_ $(@expr1073746841 "cppcheck-2.8/test/testother.cpp" $, 5451 $, "void foo() {\n    if (str == \"(\" || str == \"(\") {}\n}" $)
5452:
5453: ;
5454: $if $(@expr1073746842 $!@expr1073746843 $assertEquals $(@expr1073746844 "cppcheck-2.8/test/testother.cpp" $, 5454 $, "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5455:
5456: $check_ $(@expr1073746847 "cppcheck-2.8/test/testother.cpp" $, 5456 $, "void foo() {\n    if (bar(a) && !strcmp(a, b) && bar(a) && !strcmp(a, b)) {}\n}" $)
5457:
5458: ;
5459: $if $(@expr1073746848 $!@expr1073746849 $assertEquals $(@expr1073746850 "cppcheck-2.8/test/testother.cpp" $, 5459 $, "" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5460:
5461:
5462: $check_ $(@expr1073746853 "cppcheck-2.8/test/testother.cpp" $, 5462 $, "void f(C *src) {\n    if (x<A*>(src) || x<B*>(src))\n        a++;\n}" $)
5463:
5464:
5465: ;
5466: $if $(@expr1073746854 $!@expr1073746855 $assertEquals $(@expr1073746856 "cppcheck-2.8/test/testother.cpp" $, 5466 $, "" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5467:
5468: $check_ $(@expr1073746859 "cppcheck-2.8/test/testother.cpp" $, 5468 $, "void f(A *src) {\n    if (dynamic_cast<B*>(src) || dynamic_cast<B*>(src)) {}\n}\n" , "test.cpp" , false , false , false $)
5469:
5470: ;
5471: $if $(@expr1073746860 $!@expr1073746861 $assertEquals $(@expr1073746862 "cppcheck-2.8/test/testother.cpp" $, 5471 $, "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5472:
5473:
5474: $check_ $(@expr1073746865 "cppcheck-2.8/test/testother.cpp" $, 5474 $, "Vector func(Vector vec1) {\n    return fabs(vec1 & vec1 & vec1);\n}" $)
5475:
5476: ;
5477: $if $(@expr1073746866 $!@expr1073746867 $assertEquals $(@expr1073746868 "cppcheck-2.8/test/testother.cpp" $, 5477 $, "" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5478:
5479: $check_ $(@expr1073746871 "cppcheck-2.8/test/testother.cpp" $, 5479 $, "Vector func(int vec1) {\n    return fabs(vec1 & vec1 & vec1);\n}" $)
5480:
5481: ;
5482: $if $(@expr1073746872 $!@expr1073746873 $assertEquals $(@expr1073746874 "cppcheck-2.8/test/testother.cpp" $, 5482 $, "[test.cpp:2]: (style) Same expression on both sides of '&'.\n" $, errout@var100 .@expr4966 str (@expr4967 ) $) $) { $return ; }
5483:
5484: }
5485:
5486: void duplicateExpression4 ( ) {
5487: $check_ $(@expr1073746877 "cppcheck-2.8/test/testother.cpp" $, 5487 $, "void foo() {\n    if (*a++ != b || *a++ != b) {}\n}" $)
5488:
5489: ;
5490: $if $(@expr1073746878 $!@expr1073746879 $assertEquals $(@expr1073746880 "cppcheck-2.8/test/testother.cpp" $, 5490 $, "" $, errout@var100 .@expr5057 str (@expr5058 ) $) $) { $return ; }
5491:
5492: $check_ $(@expr1073746883 "cppcheck-2.8/test/testother.cpp" $, 5492 $, "void foo() {\n    if (*a-- != b || *a-- != b) {}\n}" $)
5493:
5494: ;
5495: $if $(@expr1073746884 $!@expr1073746885 $assertEquals $(@expr1073746886 "cppcheck-2.8/test/testother.cpp" $, 5495 $, "" $, errout@var100 .@expr5057 str (@expr5058 ) $) $) { $return ; }
5496:
5497:
5498: $check_ $(@expr1073746889 "cppcheck-2.8/test/testother.cpp" $, 5498 $, "void f() {\n  while (*(a+=2)==*(b+=2) && *(a+=2)==*(b+=2)) {}\n}" $)
5499:
5500: ;
5501: $if $(@expr1073746890 $!@expr1073746891 $assertEquals $(@expr1073746892 "cppcheck-2.8/test/testother.cpp" $, 5501 $, "" $, errout@var100 .@expr5057 str (@expr5058 ) $) $) { $return ; }
5502: }
5503:
5504: void duplicateExpression5 ( ) {
5505: $check_ $(@expr1073746895 "cppcheck-2.8/test/testother.cpp" $, 5505 $, "void f() {\n    if ($a == $a) { }\n}" $)
5506:
5507: ;
5508: $if $(@expr1073746896 $!@expr1073746897 $assertEquals $(@expr1073746898 "cppcheck-2.8/test/testother.cpp" $, 5508 $, "" $, errout@var100 .@expr1073746899 str (@expr1073746900 ) $) $) { $return ; }
5509: }
5510:
5511: void duplicateExpression6 ( ) {
5512: $check_ $(@expr1073746901 "cppcheck-2.8/test/testother.cpp" $, 5512 $, "float IsNan(float value) { return !(value == value); }\ndouble IsNan(double value) { return !(value == value); }\nlong double IsNan(long double value) { return !(value == value); }" $)
5513:
5514: ;
5515: $if $(@expr1073746902 $!@expr1073746903 $assertEquals $(@expr1073746904 "cppcheck-2.8/test/testother.cpp" $, 5515 $, "" $, errout@var100 .@expr1073746905 str (@expr1073746906 ) $) $) { $return ; }
5516: }
5517:
5518: void duplicateExpression7 ( ) {
5519: $check_ $(@expr1073746907 "cppcheck-2.8/test/testother.cpp" $, 5519 $, "void f() {\n    const int i = sizeof(int);\n    if ( i != sizeof (int)){}\n}" $)
5520:
5521:
5522: ;
5523: $if $(@expr1073746908 $!@expr1073746909 $assertEquals $(@expr1073746910 "cppcheck-2.8/test/testother.cpp" $, 5523 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'i != sizeof(int)' is always false because 'i' and 'sizeof(int)' represent the same value.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5524:
5525: $check_ $(@expr1073746913 "cppcheck-2.8/test/testother.cpp" $, 5525 $, "void f() {\n    const int i = sizeof(int);\n    if ( sizeof (int) != i){}\n}" $)
5526:
5527:
5528: ;
5529: $if $(@expr1073746914 $!@expr1073746915 $assertEquals $(@expr1073746916 "cppcheck-2.8/test/testother.cpp" $, 5529 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'sizeof(int) != i' is always false because 'sizeof(int)' and 'i' represent the same value.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5530:
5531: $check_ $(@expr1073746919 "cppcheck-2.8/test/testother.cpp" $, 5531 $, "void f(int a = 1) { if ( a != 1){}}" $) ;
5532: $if $(@expr1073746920 $!@expr1073746921 $assertEquals $(@expr1073746922 "cppcheck-2.8/test/testother.cpp" $, 5532 $, "" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5533:
5534: $check_ $(@expr1073746925 "cppcheck-2.8/test/testother.cpp" $, 5534 $, "void f() {\n    int a = 1;\n    if ( a != 1){}\n}" $)
5535:
5536:
5537: ;
5538: $if $(@expr1073746926 $!@expr1073746927 $assertEquals $(@expr1073746928 "cppcheck-2.8/test/testother.cpp" $, 5538 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5539:
5540: $check_ $(@expr1073746931 "cppcheck-2.8/test/testother.cpp" $, 5540 $, "void f() {\n    int a = 1;\n    int b = 1;\n    if ( a != b){}\n}" $)
5541:
5542:
5543:
5544: ;
5545: $if $(@expr1073746932 $!@expr1073746933 $assertEquals $(@expr1073746934 "cppcheck-2.8/test/testother.cpp" $, 5545 $, "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:4]: (style) The comparison 'a != b' is always false because 'a' and 'b' represent the same value.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5546:
5547: $check_ $(@expr1073746937 "cppcheck-2.8/test/testother.cpp" $, 5547 $, "void f() {\n    int a = 1;\n    int b = a;\n    if ( a != b){}\n}" $)
5548:
5549:
5550:
5551: ;
5552: $if $(@expr1073746938 $!@expr1073746939 $assertEquals $(@expr1073746940 "cppcheck-2.8/test/testother.cpp" $, 5552 $, "[test.cpp:3] -> [test.cpp:4]: (style) The comparison 'a != b' is always false because 'a' and 'b' represent the same value.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5553:
5554: $check_ $(@expr1073746943 "cppcheck-2.8/test/testother.cpp" $, 5554 $, "void use(int);\nvoid f() {\n    int a = 1;\n    int b = 1;\n    use(b);\n    if ( a != 1){}\n}" $)
5555:
|
5559:
5560: ;
5561: $if $(@expr1073746944 $!@expr1073746945 $assertEquals $(@expr1073746946 "cppcheck-2.8/test/testother.cpp" $, 5561 $, "[test.cpp:3] -> [test.cpp:6]: (style) The comparison 'a != 1' is always false.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5562:
5563: $check_ $(@expr1073746949 "cppcheck-2.8/test/testother.cpp" $, 5563 $, "void use(int);\nvoid f() {\n    int a = 1;\n    use(a);\n    a = 2;\n    if ( a != 1){}\n}" $)
5564:
|
5568:
5569: ;
5570: $if $(@expr1073746950 $!@expr1073746951 $assertEquals $(@expr1073746952 "cppcheck-2.8/test/testother.cpp" $, 5570 $, "" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5571:
5572: $check_ $(@expr1073746955 "cppcheck-2.8/test/testother.cpp" $, 5572 $, "void use(int);\nvoid f() {\n    int a = 2;\n    use(a);\n    a = 1;\n    if ( a != 1){}\n}" $)
5573:
|
5577:
5578: ;
5579: $if $(@expr1073746956 $!@expr1073746957 $assertEquals $(@expr1073746958 "cppcheck-2.8/test/testother.cpp" $, 5579 $, "" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5580:
5581: $check_ $(@expr1073746961 "cppcheck-2.8/test/testother.cpp" $, 5581 $, "const int a = 1;\nvoid f() {\n    if ( a != 1){}\n}" $)
5582:
5583:
5584: ;
5585: $if $(@expr1073746962 $!@expr1073746963 $assertEquals $(@expr1073746964 "cppcheck-2.8/test/testother.cpp" $, 5585 $, "[test.cpp:1] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5586:
5587: $check_ $(@expr1073746967 "cppcheck-2.8/test/testother.cpp" $, 5587 $, "int a = 1;\n    void f() {\n    if ( a != 1){}\n}" $)
5588:
5589:
5590: ;
5591: $if $(@expr1073746968 $!@expr1073746969 $assertEquals $(@expr1073746970 "cppcheck-2.8/test/testother.cpp" $, 5591 $, "" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5592:
5593: $check_ $(@expr1073746973 "cppcheck-2.8/test/testother.cpp" $, 5593 $, "void f() {\n    static const int a = 1;\n    if ( a != 1){}\n}" $)
5594:
5595:
5596: ;
5597: $if $(@expr1073746974 $!@expr1073746975 $assertEquals $(@expr1073746976 "cppcheck-2.8/test/testother.cpp" $, 5597 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5598:
5599: $check_ $(@expr1073746979 "cppcheck-2.8/test/testother.cpp" $, 5599 $, "void f() {\n    static int a = 1;\n    if ( a != 1){}\n}" $)
5600:
5601:
5602: ;
5603: $if $(@expr1073746980 $!@expr1073746981 $assertEquals $(@expr1073746982 "cppcheck-2.8/test/testother.cpp" $, 5603 $, "" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5604:
5605: $check_ $(@expr1073746985 "cppcheck-2.8/test/testother.cpp" $, 5605 $, "void f() {\n    int a = 1;\n    if ( a != 1){\n        a++;\n    }}" $)
5606:
5607:
5608:
5609: ;
5610: $if $(@expr1073746986 $!@expr1073746987 $assertEquals $(@expr1073746988 "cppcheck-2.8/test/testother.cpp" $, 5610 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5611:
5612: $check_ $(@expr1073746991 "cppcheck-2.8/test/testother.cpp" $, 5612 $, "void f(int b) {\n    int a = 1;\n    while (b) {\n        if ( a != 1){}\n        a++;\n    }\n}" $)
5613:
|
5617:
5618: ;
5619: $if $(@expr1073746992 $!@expr1073746993 $assertEquals $(@expr1073746994 "cppcheck-2.8/test/testother.cpp" $, 5619 $, "" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5620:
5621: $check_ $(@expr1073746997 "cppcheck-2.8/test/testother.cpp" $, 5621 $, "bool f(bool a, bool b) {\n    const bool c = a;\n    return a && b && c;\n}" $)
5622:
5623:
5624: ;
5625: $if $(@expr1073746998 $!@expr1073746999 $assertEquals $(@expr1073747000 "cppcheck-2.8/test/testother.cpp" $, 5625 $, "[test.cpp:2] -> [test.cpp:3]: (style) Same expression 'a' found multiple times in chain of '&&' operators because 'a' and 'c' represent the same value.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return
5626: ; }
5627:
5628:
5629: $check_ $(@expr1073747003 "cppcheck-2.8/test/testother.cpp" $, 5629 $, "void f(const bool b) {\n   const bool b1 = !b;\n   if(!b && b1){}\n}" $)
5630:
5631:
5632: ;
5633: $if $(@expr1073747004 $!@expr1073747005 $assertEquals $(@expr1073747006 "cppcheck-2.8/test/testother.cpp" $, 5633 $, "[test.cpp:2] -> [test.cpp:3]: (style) Same expression on both sides of '&&' because '!b' and 'b1' represent the same value.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5634:
5635:
5636: $check_ $(@expr1073747009 "cppcheck-2.8/test/testother.cpp" $, 5636 $, "void f(void) {\n   if (a || !!a) {}\n}" $)
5637:
5638: ;
5639: $if $(@expr1073747010 $!@expr1073747011 $assertEquals $(@expr1073747012 "cppcheck-2.8/test/testother.cpp" $, 5639 $, "[test.cpp:2]: (style) Same expression on both sides of '||' because 'a' and '!!a' represent the same value.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5640:
5641:
5642: $check_ $(@expr1073747015 "cppcheck-2.8/test/testother.cpp" $, 5642 $, "void f(int x) {\n   int Diag = 0;\n   switch (x) {\n   case 12:\n       if (Diag==0) {}\n       break;\n   }\n}" $)
5643:
|
5648:
5649: ;
5650: $if $(@expr1073747016 $!@expr1073747017 $assertEquals $(@expr1073747018 "cppcheck-2.8/test/testother.cpp" $, 5650 $, "[test.cpp:2] -> [test.cpp:5]: (style) The comparison 'Diag == 0' is always true.\n" $, errout@var100 .@expr5087 str (@expr5088 ) $) $) { $return ; }
5651: }
5652:
5653: void duplicateExpression8 ( ) {
5654: $check_ $(@expr1073747021 "cppcheck-2.8/test/testother.cpp" $, 5654 $, "void f() {\n    int a = 1;\n    int b = a;\n    a = 2;\n    if ( b != a){}\n}" $)
5655:
|
5658:
5659: ;
5660: $if $(@expr1073747022 $!@expr1073747023 $assertEquals $(@expr1073747024 "cppcheck-2.8/test/testother.cpp" $, 5660 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5661:
5662: $check_ $(@expr1073747027 "cppcheck-2.8/test/testother.cpp" $, 5662 $, "void f(int * a, int i) { int b = a[i]; a[i] = 2; if ( b != a[i]){}}" $) ;
5663: $if $(@expr1073747028 $!@expr1073747029 $assertEquals $(@expr1073747030 "cppcheck-2.8/test/testother.cpp" $, 5663 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5664:
5665: $check_ $(@expr1073747033 "cppcheck-2.8/test/testother.cpp" $, 5665 $, "void f(int * a, int i) { int b = *a; *a = 2; if ( b != *a){}}" $) ;
5666: $if $(@expr1073747034 $!@expr1073747035 $assertEquals $(@expr1073747036 "cppcheck-2.8/test/testother.cpp" $, 5666 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5667:
5668: $check_ $(@expr1073747039 "cppcheck-2.8/test/testother.cpp" $, 5668 $, "struct A { int f() const; };\nA g();\nvoid foo() {\n    for (A x = A();;) {\n        const int a = x.f();\n        x = g();\n        if (x.f() == a) break;\n    }\n}" $)
5669:
|
5675:
5676: ;
5677: $if $(@expr1073747040 $!@expr1073747041 $assertEquals $(@expr1073747042 "cppcheck-2.8/test/testother.cpp" $, 5677 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5678:
5679: $check_ $(@expr1073747045 "cppcheck-2.8/test/testother.cpp" $, 5679 $, "int f(int i);\nstruct A {\n    enum E { B, C };\n    bool f(E);\n};\nvoid foo() {\n    A a;\n    const bool x = a.f(A::B);\n    const bool y = a.f(A::C);\n    if(!x && !y) return;\n}" $)
5680:
|
5688:
5689: ;
5690: $if $(@expr1073747046 $!@expr1073747047 $assertEquals $(@expr1073747048 "cppcheck-2.8/test/testother.cpp" $, 5690 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5691:
5692: $check_ $(@expr1073747051 "cppcheck-2.8/test/testother.cpp" $, 5692 $, "void foo() {\n    const bool x = a.f(A::B);\n    const bool y = a.f(A::C);\n    if (!x && !y) return;\n}" $)
5693:
5694:
5695:
5696: ;
5697: $if $(@expr1073747052 $!@expr1073747053 $assertEquals $(@expr1073747054 "cppcheck-2.8/test/testother.cpp" $, 5697 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5698:
5699: $check_ $(@expr1073747057 "cppcheck-2.8/test/testother.cpp" $, 5699 $, "void f(bool * const b);\nvoid foo() {\n    bool x = true;\n    bool y = true;\n    f(&x);\n    if (!x && !y) return;\n}" $)
5700:
|
5704:
5705: ;
5706: $if $(@expr1073747058 $!@expr1073747059 $assertEquals $(@expr1073747060 "cppcheck-2.8/test/testother.cpp" $, 5706 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5707:
5708: $check_ $(@expr1073747063 "cppcheck-2.8/test/testother.cpp" $, 5708 $, "void f() {\n    const int a = {};\n    if(a == 1) {}\n}" $)
5709:
5710:
5711: ;
5712: $if $(@expr1073747064 $!@expr1073747065 $assertEquals $(@expr1073747066 "cppcheck-2.8/test/testother.cpp" $, 5712 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5713:
5714: $check_ $(@expr1073747069 "cppcheck-2.8/test/testother.cpp" $, 5714 $, "volatile const int var = 42;\nvoid f() { if(var == 42) {} }" $)
5715: ;
5716: $if $(@expr1073747070 $!@expr1073747071 $assertEquals $(@expr1073747072 "cppcheck-2.8/test/testother.cpp" $, 5716 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5717:
5718: $check_ $(@expr1073747075 "cppcheck-2.8/test/testother.cpp" $, 5718 $, "void f() {\n    int a = 0;\n    struct b c;\n    c.a = &a;\n    g(&c);\n    if (a == 0) {}\n}" $)
5719:
|
5723:
5724: ;
5725: $if $(@expr1073747076 $!@expr1073747077 $assertEquals $(@expr1073747078 "cppcheck-2.8/test/testother.cpp" $, 5725 $, "" $, errout@var100 .@expr5201 str (@expr5202 ) $) $) { $return ; }
5726: }
5727:
5728: void duplicateExpression9 ( ) {
5729:
5730: $check_ $(@expr1073747081 "cppcheck-2.8/test/testother.cpp" $, 5730 $, "void f() {\n  uint16_t x = 1000;\n  uint8_t y = x;\n  if (x != y) {}\n}" $)
5731:
5732:
5733:
5734: ;
5735: $if $(@expr1073747082 $!@expr1073747083 $assertEquals $(@expr1073747084 "cppcheck-2.8/test/testother.cpp" $, 5735 $, "" $, errout@var100 .@expr1073747085 str (@expr1073747086 ) $) $) { $return ; }
5736: }
5737:
5738: void duplicateExpression10 ( ) {
5739:
5740: $check_ $(@expr1073747087 "cppcheck-2.8/test/testother.cpp" $, 5740 $, "int f() {\n   const int a = 1;\n   const int b = a-1;\n   const int c = a+1;\n   return c;\n}" $)
5741:
|
5744:
5745: ;
5746: $if $(@expr1073747088 $!@expr1073747089 $assertEquals $(@expr1073747090 "cppcheck-2.8/test/testother.cpp" $, 5746 $, "" $, errout@var100 .@expr1073747091 str (@expr1073747092 ) $) $) { $return ; }
5747: }
5748:
5749: void duplicateExpression11 ( ) {
5750: $check_ $(@expr1073747093 "cppcheck-2.8/test/testother.cpp" $, 5750 $, "class Fred {\npublic:\n    double getScale() const { return m_range * m_zoom; }\n    void setZoom(double z) { m_zoom = z; }\n    void dostuff(int);\nprivate:\n    double m_zoom;\n    double m_range;\n};\n\nvoid Fred::dostuff(int x) {\n    if (x == 43) {\n        double old_scale = getScale();\n        setZoom(m_zoom + 1);\n        double scale_ratio = getScale() / old_scale;\n    }\n}" $)
5751:
|
5765:
5766: ;
5767: $if $(@expr1073747094 $!@expr1073747095 $assertEquals $(@expr1073747096 "cppcheck-2.8/test/testother.cpp" $, 5767 $, "" $, errout@var100 .@expr1073747097 str (@expr1073747098 ) $) $) { $return ; }
5768: }
5769:
5770: void duplicateExpression12 ( ) {
5771: $check_ $(@expr1073747099 "cppcheck-2.8/test/testother.cpp" $, 5771 $, "int f(const std::vector<int> &buffer, const uint8_t index)\n{\n        int var = buffer[index - 1];\n        return buffer[index - 1] - var;\n}" $)
5772:
5773:
5774:
5775: ;
5776: $if $(@expr1073747100 $!@expr1073747101 $assertEquals $(@expr1073747102 "cppcheck-2.8/test/testother.cpp" $, 5776 $, "[test.cpp:3] -> [test.cpp:4]: (style) Same expression on both sides of '-'.\n" $, errout@var100 .@expr1073747103 str (@expr1073747104 ) $) $) { $return ; }
5777: }
5778:
5779: void duplicateExpression13 ( ) {
5780: $check_ $(@expr1073747105 "cppcheck-2.8/test/testother.cpp" $, 5780 $, "void f() {\n    if (sizeof(long) == sizeof(long long)) {}\n}" $)
5781:
5782: ;
5783: $if $(@expr1073747106 $!@expr1073747107 $assertEquals $(@expr1073747108 "cppcheck-2.8/test/testother.cpp" $, 5783 $, "" $, errout@var100 .@expr1073747109 str (@expr1073747110 ) $) $) { $return ; }
5784: }
5785:
5786: void duplicateExpression14 ( ) {
5787: $check_ $(@expr1073747111 "cppcheck-2.8/test/testother.cpp" $, 5787 $, "int f() {\n    int k = 7;\n    int* f = &k;\n    int* g = &k;\n    return (f + 4 != g + 4);\n}\n" $)
5788:
|
5791:
5792: ;
5793: $if $(@expr1073747112 $!@expr1073747113 $assertEquals $(@expr1073747114 "cppcheck-2.8/test/testother.cpp" $, 5793 $, "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:5]: (style) The comparison 'f+4 != g+4' is always false because 'f+4' and 'g+4' represent the same value.\n" $, errout@var100 .@expr1073747115 str (@expr1073747116 ) $) $) { $return ; }
5794: }
5795:
5796: void duplicateExpression15 ( ) {
5797: $check_ $(@expr1073747117 "cppcheck-2.8/test/testother.cpp" $, 5797 $, "bool f() {\n    const int i = int(0);\n    return i == 0;\n}\nbool g() {\n    const int i = int{ 0 };\n    return i == 0;\n}\n" $)
5798:
|
5803:
5804: ;
5805: $if $(@expr1073747118 $!@expr1073747119 $assertEquals $(@expr1073747120 "cppcheck-2.8/test/testother.cpp" $, 5805 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'i == 0' is always true.\n[test.cpp:6] -> [test.cpp:7]: (style) The comparison 'i == 0' is always true.\n" $, errout@var100 .@expr1073747121 str (@expr1073747122 ) $) $) { $return
5806:
5807: ; }
5808: }
5809:
5810: void duplicateExpression16 ( ) {
5811: $check_ $(@expr1073747123 "cppcheck-2.8/test/testother.cpp" $, 5811 $, "void f(const std::string& a) {\n    if ((a == \"x\") ||\n        (a == \"42\") ||\n        (a == \"y\") ||\n        (a == \"42\")) {}\n}\nvoid g(const std::string& a) {\n    if ((a == \"42\") ||\n        (a == \"x\") ||\n        (a == \"42\") ||\n        (a == \"y\")) {}\n}\nvoid h(const std::string& a) {\n    if ((a == \"42\") ||\n        (a == \"x\") ||\n        (a == \"y\") ||\n        (a == \"42\")) {}\n}\n" $)
5812:
|
5827:
5828: ;
5829: $if $(@expr1073747124 $!@expr1073747125 $assertEquals $(@expr1073747126 "cppcheck-2.8/test/testother.cpp" $, 5829 $, "[test.cpp:1] -> [test.cpp:4]: (style) Same expression 'a==\"42\"' found multiple times in chain of '||' operators.\n[test.cpp:7] -> [test.cpp:9]: (style) Same expression 'a==\"42\"' found multiple times in chain of '||' operators.\n[test.cpp:13] -> [test.cpp:16]: (style) Same expression 'a==\"42\"' found multiple times in chain of '||' operators.\n" $, errout@var100 .@expr1073747127 str (@expr1073747128 ) $) $) { $return
5830:
5831:
5832: ; }
5833: }
5834:
5835: void duplicateExpressionLoop ( ) {
5836: $check_ $(@expr1073747129 "cppcheck-2.8/test/testother.cpp" $, 5836 $, "void f() {\n    int a = 1;\n    while ( a != 1){}\n}" $)
5837:
5838:
5839: ;
5840: $if $(@expr1073747130 $!@expr1073747131 $assertEquals $(@expr1073747132 "cppcheck-2.8/test/testother.cpp" $, 5840 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5841:
5842: $check_ $(@expr1073747135 "cppcheck-2.8/test/testother.cpp" $, 5842 $, "void f() { int a = 1; while ( a != 1){ a++; }}" $) ;
5843: $if $(@expr1073747136 $!@expr1073747137 $assertEquals $(@expr1073747138 "cppcheck-2.8/test/testother.cpp" $, 5843 $, "" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5844:
5845: $check_ $(@expr1073747141 "cppcheck-2.8/test/testother.cpp" $, 5845 $, "void f() { int a = 1; for ( int i=0; i < 3 && a != 1; i++){ a++; }}" $) ;
5846: $if $(@expr1073747142 $!@expr1073747143 $assertEquals $(@expr1073747144 "cppcheck-2.8/test/testother.cpp" $, 5846 $, "" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5847:
5848: $check_ $(@expr1073747147 "cppcheck-2.8/test/testother.cpp" $, 5848 $, "void f(int b) { int a = 1; while (b) { if ( a != 1){} b++; } a++; }" $) ;
5849: $if $(@expr1073747148 $!@expr1073747149 $assertEquals $(@expr1073747150 "cppcheck-2.8/test/testother.cpp" $, 5849 $, "" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5850:
5851: $check_ $(@expr1073747153 "cppcheck-2.8/test/testother.cpp" $, 5851 $, "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) {}\n    }\n}" $)
5852:
5853:
5854:
5855: ;
5856: $if $(@expr1073747154 $!@expr1073747155 $assertEquals $(@expr1073747156 "cppcheck-2.8/test/testother.cpp" $, 5856 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'i != 0' is always false.\n" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5857:
5858: $check_ $(@expr1073747159 "cppcheck-2.8/test/testother.cpp" $, 5858 $, "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) {}\n        i++;\n    }\n}" $)
5859:
|
5862:
5863: ;
5864: $if $(@expr1073747160 $!@expr1073747161 $assertEquals $(@expr1073747162 "cppcheck-2.8/test/testother.cpp" $, 5864 $, "" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5865:
5866: $check_ $(@expr1073747165 "cppcheck-2.8/test/testother.cpp" $, 5866 $, "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) { i++; }\n        i++;\n    }\n}" $)
5867:
|
5870:
5871: ;
5872: $if $(@expr1073747166 $!@expr1073747167 $assertEquals $(@expr1073747168 "cppcheck-2.8/test/testother.cpp" $, 5872 $, "" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5873:
5874: $check_ $(@expr1073747171 "cppcheck-2.8/test/testother.cpp" $, 5874 $, "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) { i++; }\n    }\n}" $)
5875:
5876:
5877:
5878: ;
5879: $if $(@expr1073747172 $!@expr1073747173 $assertEquals $(@expr1073747174 "cppcheck-2.8/test/testother.cpp" $, 5879 $, "" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5880:
5881: $check_ $(@expr1073747177 "cppcheck-2.8/test/testother.cpp" $, 5881 $, "void f() {\n    int i = 0;\n    while(i < 10) {\n        if( i != 0 ) {}\n        i++;\n    }\n}" $)
5882:
|
5886:
5887: ;
5888: $if $(@expr1073747178 $!@expr1073747179 $assertEquals $(@expr1073747180 "cppcheck-2.8/test/testother.cpp" $, 5888 $, "" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5889:
5890: $check_ $(@expr1073747183 "cppcheck-2.8/test/testother.cpp" $, 5890 $, "void f(int b) {\n    while (b) {\n        int a = 1;\n        if ( a != 1){}\n        b++;\n    }\n}" $)
5891:
|
5895:
5896: ;
5897: $if $(@expr1073747184 $!@expr1073747185 $assertEquals $(@expr1073747186 "cppcheck-2.8/test/testother.cpp" $, 5897 $, "[test.cpp:3] -> [test.cpp:4]: (style) The comparison 'a != 1' is always false.\n" $, errout@var100 .@expr5309 str (@expr5310 ) $) $) { $return ; }
5898: }
5899:
5900: void duplicateExpressionTernary ( ) {
5901: $check_ $(@expr1073747189 "cppcheck-2.8/test/testother.cpp" $, 5901 $, "void f() {\n    return A ? x : x;\n}" $)
5902:
5903: ;
5904: $if $(@expr1073747190 $!@expr1073747191 $assertEquals $(@expr1073747192 "cppcheck-2.8/test/testother.cpp" $, 5904 $, "[test.cpp:2]: (style) Same expression in both branches of ternary operator.\n" $, errout@var100 .@expr5369 str (@expr5370 ) $) $) { $return ; }
5905:
5906: $check_ $(@expr1073747195 "cppcheck-2.8/test/testother.cpp" $, 5906 $, "int f(bool b, int a) {\n    const int c = a;\n    return b ? a : c;\n}" $)
5907:
5908:
5909: ;
5910: $if $(@expr1073747196 $!@expr1073747197 $assertEquals $(@expr1073747198 "cppcheck-2.8/test/testother.cpp" $, 5910 $, "[test.cpp:2] -> [test.cpp:3]: (style) Same expression in both branches of ternary operator.\n" $, errout@var100 .@expr5369 str (@expr5370 ) $) $) { $return ; }
5911:
5912: $check_ $(@expr1073747201 "cppcheck-2.8/test/testother.cpp" $, 5912 $, "void f() {\n    return A ? x : z;\n}" $)
5913:
5914: ;
5915: $if $(@expr1073747202 $!@expr1073747203 $assertEquals $(@expr1073747204 "cppcheck-2.8/test/testother.cpp" $, 5915 $, "" $, errout@var100 .@expr5369 str (@expr5370 ) $) $) { $return ; }
5916:
5917: $check_ $(@expr1073747207 "cppcheck-2.8/test/testother.cpp" $, 5917 $, "void f(unsigned char c) {\n  x = y ? (signed char)c : (unsigned char)c;\n}" $)
5918:
5919: ;
5920: $if $(@expr1073747208 $!@expr1073747209 $assertEquals $(@expr1073747210 "cppcheck-2.8/test/testother.cpp" $, 5920 $, "" $, errout@var100 .@expr5369 str (@expr5370 ) $) $) { $return ; }
5921:
5922: $check_ $(@expr1073747213 "cppcheck-2.8/test/testother.cpp" $, 5922 $, "std::string stringMerge(std::string const& x, std::string const& y) {\n    return ((x > y) ? (y + x) : (x + y));\n}" $)
5923:
5924: ;
5925: $if $(@expr1073747214 $!@expr1073747215 $assertEquals $(@expr1073747216 "cppcheck-2.8/test/testother.cpp" $, 5925 $, "" $, errout@var100 .@expr5369 str (@expr5370 ) $) $) { $return ; }
5926:
5927:
5928: {
5929: const char code@var185 [@expr1073747219 53 ] =@expr1073747220 "void foo(bool flag) {\n  bar( (flag) ? ~0u : ~0ul);\n}"
5930:
5931: ;
5932: Settings settings@var186 ; settings@var186 =@expr1073747221 _settings@var102 ;
5933: settings@var186 .@expr1073747222 sizeof_int@var187 =@expr1073747223 4 ;
5934: settings@var186 .@expr1073747224 int_bit@var188 =@expr1073747225 32 ;
5935:
5936: settings@var186 .@expr5402 sizeof_long@var189 =@expr1073747227 4 ;
5937: settings@var186 .@expr5404 long_bit@var190 =@expr1073747229 32 ;
5938: $check_ $(@expr1073747230 "cppcheck-2.8/test/testother.cpp" $, 5938 $, code@var185 , &@expr5407 settings@var186 $) ;
5939: $if $(@expr1073747232 $!@expr1073747233 $assertEquals $(@expr1073747234 "cppcheck-2.8/test/testother.cpp" $, 5939 $, "[test.cpp:2]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5369 str (@expr5370 ) $) $) { $return ; }
5940:
5941: settings@var186 .@expr5402 sizeof_long@var189 =@expr1073747238 8 ;
5942: settings@var186 .@expr5404 long_bit@var190 =@expr1073747240 64 ;
5943: $check_ $(@expr1073747241 "cppcheck-2.8/test/testother.cpp" $, 5943 $, code@var185 , &@expr5407 settings@var186 $) ;
5944: $if $(@expr1073747243 $!@expr1073747244 $assertEquals $(@expr1073747245 "cppcheck-2.8/test/testother.cpp" $, 5944 $, "" $, errout@var100 .@expr5369 str (@expr5370 ) $) $) { $return ; }
5945: }
5946: }
5947:
5948: void duplicateValueTernary ( ) {
5949: $check_ $(@expr1073747248 "cppcheck-2.8/test/testother.cpp" $, 5949 $, "void f() {\n    if( a ? (b ? false:false): false ) ;\n}" $)
5950:
5951: ;
5952: $if $(@expr1073747249 $!@expr1073747250 $assertEquals $(@expr1073747251 "cppcheck-2.8/test/testother.cpp" $, 5952 $, "[test.cpp:2]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5953:
5954: $check_ $(@expr1073747254 "cppcheck-2.8/test/testother.cpp" $, 5954 $, "int f1(int a) {return (a == 1) ? (int)1 : 1; }" $) ;
5955: $if $(@expr1073747255 $!@expr1073747256 $assertEquals $(@expr1073747257 "cppcheck-2.8/test/testother.cpp" $, 5955 $, "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5956:
5957: $check_ $(@expr1073747260 "cppcheck-2.8/test/testother.cpp" $, 5957 $, "int f2(int a) {return (a == 1) ? (int)1 : (int)1; }" $) ;
5958: $if $(@expr1073747261 $!@expr1073747262 $assertEquals $(@expr1073747263 "cppcheck-2.8/test/testother.cpp" $, 5958 $, "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5959:
5960: $check_ $(@expr1073747266 "cppcheck-2.8/test/testother.cpp" $, 5960 $, "int f3(int a) {return (a == 1) ? 1 : (int)1; }" $) ;
5961: $if $(@expr1073747267 $!@expr1073747268 $assertEquals $(@expr1073747269 "cppcheck-2.8/test/testother.cpp" $, 5961 $, "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5962:
5963: $check_ $(@expr1073747272 "cppcheck-2.8/test/testother.cpp" $, 5963 $, "int f4(int a) {return (a == 1) ? 1 : 1; }" $) ;
5964: $if $(@expr1073747273 $!@expr1073747274 $assertEquals $(@expr1073747275 "cppcheck-2.8/test/testother.cpp" $, 5964 $, "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5965:
5966: $check_ $(@expr1073747278 "cppcheck-2.8/test/testother.cpp" $, 5966 $, "int f5(int a) {return (a == (int)1) ? (int)1 : 1; }" $) ;
5967: $if $(@expr1073747279 $!@expr1073747280 $assertEquals $(@expr1073747281 "cppcheck-2.8/test/testother.cpp" $, 5967 $, "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5968:
5969: $check_ $(@expr1073747284 "cppcheck-2.8/test/testother.cpp" $, 5969 $, "int f6(int a) {return (a == (int)1) ? (int)1 : (int)1; }" $) ;
5970: $if $(@expr1073747285 $!@expr1073747286 $assertEquals $(@expr1073747287 "cppcheck-2.8/test/testother.cpp" $, 5970 $, "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5971:
5972: $check_ $(@expr1073747290 "cppcheck-2.8/test/testother.cpp" $, 5972 $, "int f7(int a) {return (a == (int)1) ? 1 : (int)1; }" $) ;
5973: $if $(@expr1073747291 $!@expr1073747292 $assertEquals $(@expr1073747293 "cppcheck-2.8/test/testother.cpp" $, 5973 $, "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5974:
5975: $check_ $(@expr1073747296 "cppcheck-2.8/test/testother.cpp" $, 5975 $, "int f8(int a) {return (a == (int)1) ? 1 : 1; }" $) ;
5976: $if $(@expr1073747297 $!@expr1073747298 $assertEquals $(@expr1073747299 "cppcheck-2.8/test/testother.cpp" $, 5976 $, "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5977:
5978: $check_ $(@expr1073747302 "cppcheck-2.8/test/testother.cpp" $, 5978 $, "struct Foo {\n  std::vector<int> bar{1,2,3};\n  std::vector<int> baz{4,5,6};\n};\nvoid f() {\n  Foo foo;\n  it = true ? foo.bar.begin() : foo.baz.begin();\n}\n" $)
5979:
|
5984:
5985: ;
5986: $if $(@expr1073747303 $!@expr1073747304 $assertEquals $(@expr1073747305 "cppcheck-2.8/test/testother.cpp" $, 5986 $, "" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5987:
5988: $check_ $(@expr1073747308 "cppcheck-2.8/test/testother.cpp" $, 5988 $, "void f(bool b) {\n  std::vector<int> bar{1,2,3};\n  std::vector<int> baz{4,5,6};\n  std::vector<int> v = b ? bar : baz;\n}\n" $)
5989:
5990:
5991:
5992: ;
5993: $if $(@expr1073747309 $!@expr1073747310 $assertEquals $(@expr1073747311 "cppcheck-2.8/test/testother.cpp" $, 5993 $, "" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
5994:
5995: $check_ $(@expr1073747314 "cppcheck-2.8/test/testother.cpp" $, 5995 $, "void f(bool q) {\n    static int a = 0;\n    static int b = 0;\n    int& x = q ? a : b;\n    ++x;\n}\n" $)
5996:
|
5999:
6000: ;
6001: $if $(@expr1073747315 $!@expr1073747316 $assertEquals $(@expr1073747317 "cppcheck-2.8/test/testother.cpp" $, 6001 $, "" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
6002:
6003: $check_ $(@expr1073747320 "cppcheck-2.8/test/testother.cpp" $, 6003 $, "struct S { int a, b; };\nS f(bool x, S s) {\n    (x) ? f.a = 42 : f.b = 42;\n    return f;\n}\n" $)
6004:
6005:
6006:
6007: ;
6008: $if $(@expr1073747321 $!@expr1073747322 $assertEquals $(@expr1073747323 "cppcheck-2.8/test/testother.cpp" $, 6008 $, "" $, errout@var100 .@expr5428 str (@expr5429 ) $) $) { $return ; }
6009: }
6010:
6011: void duplicateExpressionTemplate ( ) {
6012: $check_ $(@expr1073747326 "cppcheck-2.8/test/testother.cpp" $, 6012 $, "template <int I> void f() {\n    if (I >= 0 && I < 3) {}\n}\n\nstatic auto a = f<0>();" $)
6013:
6014:
6015:
6016: ;
6017: $if $(@expr1073747327 $!@expr1073747328 $assertEquals $(@expr1073747329 "cppcheck-2.8/test/testother.cpp" $, 6017 $, "" $, errout@var100 .@expr5506 str (@expr5507 ) $) $) { $return ; }
6018:
6019: $check_ $(@expr1073747332 "cppcheck-2.8/test/testother.cpp" $, 6019 $, "template<typename T>\nvoid f() {\n    if (std::is_same_v<T, char> || std::is_same_v<T, unsigned char>) {}\n}\n" $)
6020:
6021:
6022: ;
6023: $if $(@expr1073747333 $!@expr1073747334 $assertEquals $(@expr1073747335 "cppcheck-2.8/test/testother.cpp" $, 6023 $, "" $, errout@var100 .@expr5506 str (@expr5507 ) $) $) { $return ; }
6024:
6025: $check_ $(@expr1073747338 "cppcheck-2.8/test/testother.cpp" $, 6025 $, "typedef long long int64_t;template<typename T>\nvoid f() {\n    if (std::is_same_v<T, long> || std::is_same_v<T, int64_t>) {}\n}\n" $)
6026:
6027:
6028:
6029: ;
6030: $if $(@expr1073747339 $!@expr1073747340 $assertEquals $(@expr1073747341 "cppcheck-2.8/test/testother.cpp" $, 6030 $, "" $, errout@var100 .@expr5506 str (@expr5507 ) $) $) { $return ; }
6031:
6032: checkP (@expr1073747344 "#define int32_t inttemplate<typename T>\nvoid f() {\n    if (std::is_same_v<T, int> || std::is_same_v<T, int32_t>) {}\n}\n"
6033:
6034:
6035:
6036: ) ;
6037: $if $(@expr1073747345 $!@expr1073747346 $assertEquals $(@expr1073747347 "cppcheck-2.8/test/testother.cpp" $, 6037 $, "" $, errout@var100 .@expr5506 str (@expr5507 ) $) $) { $return ; }
6038: }
6039:
6040: void duplicateExpressionCompareWithZero ( ) {
6041: $check_ $(@expr1073747350 "cppcheck-2.8/test/testother.cpp" $, 6041 $, "void f(const int* x, bool b) {\n    if ((x && b) || (x != 0 && b)) {}\n}\n" $)
6042:
6043: ;
6044: $if $(@expr1073747351 $!@expr1073747352 $assertEquals $(@expr1073747353 "cppcheck-2.8/test/testother.cpp" $, 6044 $, "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x&&b' and 'x!=0&&b' represent the same value.\n" $, errout@var100 .@expr5530 str (@expr5531 ) $) $) { $return ; }
6045:
6046: $check_ $(@expr1073747356 "cppcheck-2.8/test/testother.cpp" $, 6046 $, "void f(const int* x, bool b) {\n    if ((x != 0 && b) || (x && b)) {}\n}\n" $)
6047:
6048: ;
6049: $if $(@expr1073747357 $!@expr1073747358 $assertEquals $(@expr1073747359 "cppcheck-2.8/test/testother.cpp" $, 6049 $, "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x!=0&&b' and 'x&&b' represent the same value.\n" $, errout@var100 .@expr5530 str (@expr5531 ) $) $) { $return ; }
6050:
6051: $check_ $(@expr1073747362 "cppcheck-2.8/test/testother.cpp" $, 6051 $, "void f(const int* x, bool b) {\n    if ((x && b) || (b && x != 0)) {}\n}\n" $)
6052:
6053: ;
6054: $if $(@expr1073747363 $!@expr1073747364 $assertEquals $(@expr1073747365 "cppcheck-2.8/test/testother.cpp" $, 6054 $, "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x&&b' and 'b&&x!=0' represent the same value.\n" $, errout@var100 .@expr5530 str (@expr5531 ) $) $) { $return ; }
6055:
6056: $check_ $(@expr1073747368 "cppcheck-2.8/test/testother.cpp" $, 6056 $, "void f(const int* x, bool b) {\n    if ((!x && b) || (x == 0 && b)) {}\n}\n" $)
6057:
6058: ;
6059: $if $(@expr1073747369 $!@expr1073747370 $assertEquals $(@expr1073747371 "cppcheck-2.8/test/testother.cpp" $, 6059 $, "[test.cpp:2]: (style) Same expression on both sides of '||' because '!x&&b' and 'x==0&&b' represent the same value.\n" $, errout@var100 .@expr5530 str (@expr5531 ) $) $) { $return ; }
6060:
6061: $check_ $(@expr1073747374 "cppcheck-2.8/test/testother.cpp" $, 6061 $, "void f(const int* x, bool b) {\n    if ((x == 0 && b) || (!x && b)) {}\n}\n" $)
6062:
6063: ;
6064: $if $(@expr1073747375 $!@expr1073747376 $assertEquals $(@expr1073747377 "cppcheck-2.8/test/testother.cpp" $, 6064 $, "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x==0&&b' and '!x&&b' represent the same value.\n" $, errout@var100 .@expr5530 str (@expr5531 ) $) $) { $return ; }
6065:
6066: $check_ $(@expr1073747380 "cppcheck-2.8/test/testother.cpp" $, 6066 $, "void f(const int* x, bool b) {\n    if ((!x && b) || (b && x == 0)) {}\n}\n" $)
6067:
6068: ;
6069: $if $(@expr1073747381 $!@expr1073747382 $assertEquals $(@expr1073747383 "cppcheck-2.8/test/testother.cpp" $, 6069 $, "[test.cpp:2]: (style) Same expression on both sides of '||' because '!x&&b' and 'b&&x==0' represent the same value.\n" $, errout@var100 .@expr5530 str (@expr5531 ) $) $) { $return ; }
6070:
6071: $check_ $(@expr1073747386 "cppcheck-2.8/test/testother.cpp" $, 6071 $, "struct A {\n    int* getX() const;\n    bool getB() const;\n    void f() {\n        if ((getX() && getB()) || (getX() != 0 && getB())) {}\n    }\n};\n" $)
6072:
|
6076:
6077: ;
6078: $if $(@expr1073747387 $!@expr1073747388 $assertEquals $(@expr1073747389 "cppcheck-2.8/test/testother.cpp" $, 6078 $, "[test.cpp:5]: (style) Same expression on both sides of '||' because 'getX()&&getB()' and 'getX()!=0&&getB()' represent the same value.\n" $, errout@var100 .@expr5530 str (@expr5531 ) $) $) { $return ; }
6079:
6080: $check_ $(@expr1073747392 "cppcheck-2.8/test/testother.cpp" $, 6080 $, "void f(const int* x, bool b) {\n    if ((x && b) || (x == 0 && b)) {}\n}\n" $)
6081:
6082: ;
6083: $if $(@expr1073747393 $!@expr1073747394 $assertEquals $(@expr1073747395 "cppcheck-2.8/test/testother.cpp" $, 6083 $, "" $, errout@var100 .@expr5530 str (@expr5531 ) $) $) { $return ; }
6084:
6085: $check_ $(@expr1073747398 "cppcheck-2.8/test/testother.cpp" $, 6085 $, "void f(const int* x, bool b) {\n    if ((!x && b) || (x != 0 && b)) {}\n}\n" $)
6086:
6087: ;
6088: $if $(@expr1073747399 $!@expr1073747400 $assertEquals $(@expr1073747401 "cppcheck-2.8/test/testother.cpp" $, 6088 $, "" $, errout@var100 .@expr5530 str (@expr5531 ) $) $) { $return ; }
6089: }
6090:
6091: void oppositeExpression ( ) {
6092: $check_ $(@expr1073747404 "cppcheck-2.8/test/testother.cpp" $, 6092 $, "void f(bool a) { if(a && !a) {} }" $) ;
6093: $if $(@expr1073747405 $!@expr1073747406 $assertEquals $(@expr1073747407 "cppcheck-2.8/test/testother.cpp" $, 6093 $, "[test.cpp:1]: (style) Opposite expression on both sides of '&&'.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6094:
6095: $check_ $(@expr1073747410 "cppcheck-2.8/test/testother.cpp" $, 6095 $, "void f(bool a) { if(a != !a) {} }" $) ;
6096: $if $(@expr1073747411 $!@expr1073747412 $assertEquals $(@expr1073747413 "cppcheck-2.8/test/testother.cpp" $, 6096 $, "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6097:
6098: $check_ $(@expr1073747416 "cppcheck-2.8/test/testother.cpp" $, 6098 $, "void f(bool a) { if( a == !(a) ) {}}" $) ;
6099: $if $(@expr1073747417 $!@expr1073747418 $assertEquals $(@expr1073747419 "cppcheck-2.8/test/testother.cpp" $, 6099 $, "[test.cpp:1]: (style) Opposite expression on both sides of '=='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6100:
6101: $check_ $(@expr1073747422 "cppcheck-2.8/test/testother.cpp" $, 6101 $, "void f(bool a) { if( a != !(a) ) {}}" $) ;
6102: $if $(@expr1073747423 $!@expr1073747424 $assertEquals $(@expr1073747425 "cppcheck-2.8/test/testother.cpp" $, 6102 $, "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6103:
6104: $check_ $(@expr1073747428 "cppcheck-2.8/test/testother.cpp" $, 6104 $, "void f(bool a) { if( !(a) == a ) {}}" $) ;
6105: $if $(@expr1073747429 $!@expr1073747430 $assertEquals $(@expr1073747431 "cppcheck-2.8/test/testother.cpp" $, 6105 $, "[test.cpp:1]: (style) Opposite expression on both sides of '=='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6106:
6107: $check_ $(@expr1073747434 "cppcheck-2.8/test/testother.cpp" $, 6107 $, "void f(bool a) { if( !(a) != a ) {}}" $) ;
6108: $if $(@expr1073747435 $!@expr1073747436 $assertEquals $(@expr1073747437 "cppcheck-2.8/test/testother.cpp" $, 6108 $, "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6109:
6110: $check_ $(@expr1073747440 "cppcheck-2.8/test/testother.cpp" $, 6110 $, "void f(bool a) { if( !(!a) == !(a) ) {}}" $) ;
6111: $if $(@expr1073747441 $!@expr1073747442 $assertEquals $(@expr1073747443 "cppcheck-2.8/test/testother.cpp" $, 6111 $, "[test.cpp:1]: (style) Opposite expression on both sides of '=='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6112:
6113: $check_ $(@expr1073747446 "cppcheck-2.8/test/testother.cpp" $, 6113 $, "void f(bool a) { if( !(!a) != !(a) ) {}}" $) ;
6114: $if $(@expr1073747447 $!@expr1073747448 $assertEquals $(@expr1073747449 "cppcheck-2.8/test/testother.cpp" $, 6114 $, "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6115:
6116: $check_ $(@expr1073747452 "cppcheck-2.8/test/testother.cpp" $, 6116 $, "void f1(bool a) {\n    const bool b = a;\n    if( a == !(b) ) {}\n    if( b == !(a) ) {}\n}" $)
6117:
6118:
6119:
6120: ;
6121: $if $(@expr1073747453 $!@expr1073747454 $assertEquals $(@expr1073747455 "cppcheck-2.8/test/testother.cpp" $, 6121 $, "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n[test.cpp:2] -> [test.cpp:4]: (style) Opposite expression on both sides of '=='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return
6122: ; }
6123:
6124: $check_ $(@expr1073747458 "cppcheck-2.8/test/testother.cpp" $, 6124 $, "void f2(const bool *a) {\n    const bool b = *a;\n    if( *a == !(b) ) {}\n    if( b == !(*a) ) {}\n}" $)
6125:
6126:
6127:
6128: ;
6129: $if $(@expr1073747459 $!@expr1073747460 $assertEquals $(@expr1073747461 "cppcheck-2.8/test/testother.cpp" $, 6129 $, "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n[test.cpp:2] -> [test.cpp:4]: (style) Opposite expression on both sides of '=='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return
6130: ; }
6131:
6132: $check_ $(@expr1073747464 "cppcheck-2.8/test/testother.cpp" $, 6132 $, "void f(bool a) { a = !a; }" $) ;
6133: $if $(@expr1073747465 $!@expr1073747466 $assertEquals $(@expr1073747467 "cppcheck-2.8/test/testother.cpp" $, 6133 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6134:
6135: $check_ $(@expr1073747470 "cppcheck-2.8/test/testother.cpp" $, 6135 $, "void f(int a) { if( a < -a ) {}}" $) ;
6136: $if $(@expr1073747471 $!@expr1073747472 $assertEquals $(@expr1073747473 "cppcheck-2.8/test/testother.cpp" $, 6136 $, "[test.cpp:1]: (style) Opposite expression on both sides of '<'.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6137:
6138: $check_ $(@expr1073747476 "cppcheck-2.8/test/testother.cpp" $, 6138 $, "void f(int a) { a -= -a; }" $) ;
6139: $if $(@expr1073747477 $!@expr1073747478 $assertEquals $(@expr1073747479 "cppcheck-2.8/test/testother.cpp" $, 6139 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6140:
6141: $check_ $(@expr1073747482 "cppcheck-2.8/test/testother.cpp" $, 6141 $, "void f(int a) { a = a / (-a); }" $) ;
6142: $if $(@expr1073747483 $!@expr1073747484 $assertEquals $(@expr1073747485 "cppcheck-2.8/test/testother.cpp" $, 6142 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6143:
6144: $check_ $(@expr1073747488 "cppcheck-2.8/test/testother.cpp" $, 6144 $, "bool f(int i){ return !((i - 1) & i); }" $) ;
6145: $if $(@expr1073747489 $!@expr1073747490 $assertEquals $(@expr1073747491 "cppcheck-2.8/test/testother.cpp" $, 6145 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6146:
6147: $check_ $(@expr1073747494 "cppcheck-2.8/test/testother.cpp" $, 6147 $, "bool f(unsigned i){ return (x > 0) && (x & (x-1)) == 0; }" $) ;
6148: $if $(@expr1073747495 $!@expr1073747496 $assertEquals $(@expr1073747497 "cppcheck-2.8/test/testother.cpp" $, 6148 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6149:
6150: $check_ $(@expr1073747500 "cppcheck-2.8/test/testother.cpp" $, 6150 $, "void A::f(bool a, bool c)\n{\n    const bool b = a;\n    if(c) { a = false; }\n    if(b && !a) { }\n}" $)
6151:
|
6154:
6155: ;
6156: $if $(@expr1073747501 $!@expr1073747502 $assertEquals $(@expr1073747503 "cppcheck-2.8/test/testother.cpp" $, 6156 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6157:
6158: $check_ $(@expr1073747506 "cppcheck-2.8/test/testother.cpp" $, 6158 $, "void f(bool c) {\n    const bool b = a;\n    if(c) { a = false; }\n    if(b && !a) { }\n}" $)
6159:
6160:
6161:
6162: ;
6163: $if $(@expr1073747507 $!@expr1073747508 $assertEquals $(@expr1073747509 "cppcheck-2.8/test/testother.cpp" $, 6163 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6164:
6165: $check_ $(@expr1073747512 "cppcheck-2.8/test/testother.cpp" $, 6165 $, "void f() {\n    bool x = a;\n    dostuff();\n    if (x && a) {}\n}" $)
6166:
6167:
6168:
6169: ;
6170: $if $(@expr1073747513 $!@expr1073747514 $assertEquals $(@expr1073747515 "cppcheck-2.8/test/testother.cpp" $, 6170 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6171:
6172: $check_ $(@expr1073747518 "cppcheck-2.8/test/testother.cpp" $, 6172 $, "void f() {\n  const bool b = g();\n  if (!b && g()) {}\n}" $)
6173:
6174:
6175: ;
6176: $if $(@expr1073747519 $!@expr1073747520 $assertEquals $(@expr1073747521 "cppcheck-2.8/test/testother.cpp" $, 6176 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6177:
6178: $check_ $(@expr1073747524 "cppcheck-2.8/test/testother.cpp" $, 6178 $, "void f(const bool *a) {\n    const bool b = a[42];\n    if( b == !(a[42]) ) {}\n}\n" $)
6179:
6180:
6181: ;
6182: $if $(@expr1073747525 $!@expr1073747526 $assertEquals $(@expr1073747527 "cppcheck-2.8/test/testother.cpp" $, 6182 $, "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6183:
6184: $check_ $(@expr1073747530 "cppcheck-2.8/test/testother.cpp" $, 6184 $, "void f(const bool *a) {\n    const bool b = a[42];\n    if( a[42] == !(b) ) {}\n}\n" $)
6185:
6186:
6187: ;
6188: $if $(@expr1073747531 $!@expr1073747532 $assertEquals $(@expr1073747533 "cppcheck-2.8/test/testother.cpp" $, 6188 $, "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6189:
6190: $check_ $(@expr1073747536 "cppcheck-2.8/test/testother.cpp" $, 6190 $, "void f(const bool *a) {\n    const bool b = *a;\n    if( b == !(*a) ) {}\n}\n" $)
6191:
6192:
6193: ;
6194: $if $(@expr1073747537 $!@expr1073747538 $assertEquals $(@expr1073747539 "cppcheck-2.8/test/testother.cpp" $, 6194 $, "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6195:
6196: $check_ $(@expr1073747542 "cppcheck-2.8/test/testother.cpp" $, 6196 $, "void f(const bool *a) {\n    const bool b = *a;\n    if( *a == !(b) ) {}\n}\n" $)
6197:
6198:
6199: ;
6200: $if $(@expr1073747543 $!@expr1073747544 $assertEquals $(@expr1073747545 "cppcheck-2.8/test/testother.cpp" $, 6200 $, "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6201:
6202: $check_ $(@expr1073747548 "cppcheck-2.8/test/testother.cpp" $, 6202 $, "void f(uint16_t u) {\n    if (u != (u & -u))\n        return false;\n    if (u != (-u & u))\n        return false;\n    return true;\n}\n" $)
6203:
|
6207:
6208: ;
6209: $if $(@expr1073747549 $!@expr1073747550 $assertEquals $(@expr1073747551 "cppcheck-2.8/test/testother.cpp" $, 6209 $, "" $, errout@var100 .@expr5584 str (@expr5585 ) $) $) { $return ; }
6210: }
6211:
6212: void duplicateVarExpression ( ) {
6213: $check_ $(@expr1073747554 "cppcheck-2.8/test/testother.cpp" $, 6213 $, "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = f();\n    int j = f();\n}" $)
6214:
|
6217:
6218: ;
6219: $if $(@expr1073747555 $!@expr1073747556 $assertEquals $(@expr1073747557 "cppcheck-2.8/test/testother.cpp" $, 6219 $, "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6220:
6221: $check_ $(@expr1073747560 "cppcheck-2.8/test/testother.cpp" $, 6221 $, "struct Foo { int f() const; int g() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" $)
6222:
|
6225:
6226: ;
6227: $if $(@expr1073747561 $!@expr1073747562 $assertEquals $(@expr1073747563 "cppcheck-2.8/test/testother.cpp" $, 6227 $, "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6228:
6229: $check_ $(@expr1073747566 "cppcheck-2.8/test/testother.cpp" $, 6229 $, "struct Foo { int f() const; int g() const; };\nvoid test() {\n    Foo f = Foo{};\n    Foo f2 = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" $)
6230:
|
6234:
6235: ;
6236: $if $(@expr1073747567 $!@expr1073747568 $assertEquals $(@expr1073747569 "cppcheck-2.8/test/testother.cpp" $, 6236 $, "[test.cpp:6] -> [test.cpp:5]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6237:
6238: $check_ $(@expr1073747572 "cppcheck-2.8/test/testother.cpp" $, 6238 $, "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = 1 + f();\n    int j = 1 + f();\n}" $)
6239:
|
6242:
6243: ;
6244: $if $(@expr1073747573 $!@expr1073747574 $assertEquals $(@expr1073747575 "cppcheck-2.8/test/testother.cpp" $, 6244 $, "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6245:
6246: $check_ $(@expr1073747578 "cppcheck-2.8/test/testother.cpp" $, 6246 $, "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = f() + 1;\n    int j = 1 + f();\n}" $)
6247:
|
6250:
6251: ;
6252: $if $(@expr1073747579 $!@expr1073747580 $assertEquals $(@expr1073747581 "cppcheck-2.8/test/testother.cpp" $, 6252 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6253:
6254: $check_ $(@expr1073747584 "cppcheck-2.8/test/testother.cpp" $, 6254 $, "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int x = f();\n    int i = x + 1;\n    int j = f() + 1;\n}" $)
6255:
|
6259:
6260: ;
6261: $if $(@expr1073747585 $!@expr1073747586 $assertEquals $(@expr1073747587 "cppcheck-2.8/test/testother.cpp" $, 6261 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6262:
6263: $check_ $(@expr1073747590 "cppcheck-2.8/test/testother.cpp" $, 6263 $, "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = f() + f();\n    int j = f() + f();\n}" $)
6264:
|
6267:
6268: ;
6269: $if $(@expr1073747591 $!@expr1073747592 $assertEquals $(@expr1073747593 "cppcheck-2.8/test/testother.cpp" $, 6269 $, "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6270:
6271: $check_ $(@expr1073747596 "cppcheck-2.8/test/testother.cpp" $, 6271 $, "int f(int) __attribute__((pure));\nint g(int) __attribute__((pure));\nvoid test() {\n    int i = f(0);\n    int j = f(0);\n}" $)
6272:
|
6275:
6276: ;
6277: $if $(@expr1073747597 $!@expr1073747598 $assertEquals $(@expr1073747599 "cppcheck-2.8/test/testother.cpp" $, 6277 $, "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6278:
6279: $check_ $(@expr1073747602 "cppcheck-2.8/test/testother.cpp" $, 6279 $, "int f(int) __attribute__((pure));\nint g(int) __attribute__((pure));\nvoid test() {\n    const int x = 0;\n    int i = f(0);\n    int j = f(x);\n}" $)
6280:
|
6284:
6285: ;
6286: $if $(@expr1073747603 $!@expr1073747604 $assertEquals $(@expr1073747605 "cppcheck-2.8/test/testother.cpp" $, 6286 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6287:
6288: $check_ $(@expr1073747608 "cppcheck-2.8/test/testother.cpp" $, 6288 $, "void test(const int * p, const int * q) {\n    int i = *p;\n    int j = *p;\n}" $)
6289:
6290:
6291: ;
6292: $if $(@expr1073747609 $!@expr1073747610 $assertEquals $(@expr1073747611 "cppcheck-2.8/test/testother.cpp" $, 6292 $, "[test.cpp:3] -> [test.cpp:2]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6293:
6294: $check_ $(@expr1073747614 "cppcheck-2.8/test/testother.cpp" $, 6294 $, "struct A { int x; int y; };void test(A a) {\n    int i = a.x;\n    int j = a.x;\n}" $)
6295:
6296:
6297:
6298: ;
6299: $if $(@expr1073747615 $!@expr1073747616 $assertEquals $(@expr1073747617 "cppcheck-2.8/test/testother.cpp" $, 6299 $, "[test.cpp:3] -> [test.cpp:2]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6300:
6301: $check_ $(@expr1073747620 "cppcheck-2.8/test/testother.cpp" $, 6301 $, "void test() {\n    int i = 0;\n    int j = 0;\n}" $)
6302:
6303:
6304: ;
6305: $if $(@expr1073747621 $!@expr1073747622 $assertEquals $(@expr1073747623 "cppcheck-2.8/test/testother.cpp" $, 6305 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6306:
6307: $check_ $(@expr1073747626 "cppcheck-2.8/test/testother.cpp" $, 6307 $, "void test() {\n    int i = -1;\n    int j = -1;\n}" $)
6308:
6309:
6310: ;
6311: $if $(@expr1073747627 $!@expr1073747628 $assertEquals $(@expr1073747629 "cppcheck-2.8/test/testother.cpp" $, 6311 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6312:
6313: $check_ $(@expr1073747632 "cppcheck-2.8/test/testother.cpp" $, 6313 $, "int f(int);\nvoid test() {\n    int i = f(0);\n    int j = f(1);\n}" $)
6314:
6315:
6316:
6317: ;
6318: $if $(@expr1073747633 $!@expr1073747634 $assertEquals $(@expr1073747635 "cppcheck-2.8/test/testother.cpp" $, 6318 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6319:
6320: $check_ $(@expr1073747638 "cppcheck-2.8/test/testother.cpp" $, 6320 $, "int f();\nint g();\nvoid test() {\n    int i = f() || f();\n    int j = f() && f();\n}" $)
6321:
|
6324:
6325: ;
6326: $if $(@expr1073747639 $!@expr1073747640 $assertEquals $(@expr1073747641 "cppcheck-2.8/test/testother.cpp" $, 6326 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6327:
6328: $check_ $(@expr1073747644 "cppcheck-2.8/test/testother.cpp" $, 6328 $, "struct Foo {};\nvoid test() {\n    Foo i = Foo();\n    Foo j = Foo();\n}" $)
6329:
6330:
6331:
6332: ;
6333: $if $(@expr1073747645 $!@expr1073747646 $assertEquals $(@expr1073747647 "cppcheck-2.8/test/testother.cpp" $, 6333 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6334:
6335: $check_ $(@expr1073747650 "cppcheck-2.8/test/testother.cpp" $, 6335 $, "struct Foo {};\nvoid test() {\n    Foo i = Foo{};\n    Foo j = Foo{};\n}" $)
6336:
6337:
6338:
6339: ;
6340: $if $(@expr1073747651 $!@expr1073747652 $assertEquals $(@expr1073747653 "cppcheck-2.8/test/testother.cpp" $, 6340 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6341:
6342: $check_ $(@expr1073747656 "cppcheck-2.8/test/testother.cpp" $, 6342 $, "struct Foo { int f() const; float g() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" $)
6343:
|
6346:
6347: ;
6348: $if $(@expr1073747657 $!@expr1073747658 $assertEquals $(@expr1073747659 "cppcheck-2.8/test/testother.cpp" $, 6348 $, "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6349:
6350: $check_ $(@expr1073747662 "cppcheck-2.8/test/testother.cpp" $, 6350 $, "struct Foo { int f(); int g(); };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" $)
6351:
|
6354:
6355: ;
6356: $if $(@expr1073747663 $!@expr1073747664 $assertEquals $(@expr1073747665 "cppcheck-2.8/test/testother.cpp" $, 6356 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6357:
6358: $check_ $(@expr1073747668 "cppcheck-2.8/test/testother.cpp" $, 6358 $, "void test() {\n    int i = f();\n    int j = f();\n}" $)
6359:
6360:
6361: ;
6362: $if $(@expr1073747669 $!@expr1073747670 $assertEquals $(@expr1073747671 "cppcheck-2.8/test/testother.cpp" $, 6362 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6363:
6364: $check_ $(@expr1073747674 "cppcheck-2.8/test/testother.cpp" $, 6364 $, "void test(int x) {\n    int i = ++x;\n    int j = ++x;\n}" $)
6365:
6366:
6367: ;
6368: $if $(@expr1073747675 $!@expr1073747676 $assertEquals $(@expr1073747677 "cppcheck-2.8/test/testother.cpp" $, 6368 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6369:
6370: $check_ $(@expr1073747680 "cppcheck-2.8/test/testother.cpp" $, 6370 $, "void test(int x) {\n    int i = x++;\n    int j = x++;\n}" $)
6371:
6372:
6373: ;
6374: $if $(@expr1073747681 $!@expr1073747682 $assertEquals $(@expr1073747683 "cppcheck-2.8/test/testother.cpp" $, 6374 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6375:
6376: $check_ $(@expr1073747686 "cppcheck-2.8/test/testother.cpp" $, 6376 $, "void test(int x) {\n    int i = --x;\n    int j = --x;\n}" $)
6377:
6378:
6379: ;
6380: $if $(@expr1073747687 $!@expr1073747688 $assertEquals $(@expr1073747689 "cppcheck-2.8/test/testother.cpp" $, 6380 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6381:
6382: $check_ $(@expr1073747692 "cppcheck-2.8/test/testother.cpp" $, 6382 $, "void test(int x) {\n    int i = x--;\n    int j = x--;\n}" $)
6383:
6384:
6385: ;
6386: $if $(@expr1073747693 $!@expr1073747694 $assertEquals $(@expr1073747695 "cppcheck-2.8/test/testother.cpp" $, 6386 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6387:
6388: $check_ $(@expr1073747698 "cppcheck-2.8/test/testother.cpp" $, 6388 $, "void test(int x) {\n    int i = x + 1;\n    int j = 1 + x;\n}" $)
6389:
6390:
6391: ;
6392: $if $(@expr1073747699 $!@expr1073747700 $assertEquals $(@expr1073747701 "cppcheck-2.8/test/testother.cpp" $, 6392 $, "" $, errout@var100 .@expr5734 str (@expr5735 ) $) $) { $return ; }
6393: }
6394:
6395: void duplicateVarExpressionUnique ( ) {
6396: $check_ $(@expr1073747704 "cppcheck-2.8/test/testother.cpp" $, 6396 $, "struct SW { int first; };\nvoid foo(SW* x) {\n    int start = x->first;\n    int end   = x->first;\n}" $)
6397:
6398:
6399:
6400: ;
6401: $if $(@expr1073747705 $!@expr1073747706 $assertEquals $(@expr1073747707 "cppcheck-2.8/test/testother.cpp" $, 6401 $, "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'start' and 'end'.\n" $, errout@var100 .@expr5884 str (@expr5885 ) $) $) { $return ; }
6402: $check_ $(@expr1073747710 "cppcheck-2.8/test/testother.cpp" $, 6402 $, "struct SW { int first; };\nvoid foo(SW* x, int i, int j) {\n    int start = x->first;\n    int end   = x->first;\n}" $)
6403:
6404:
6405:
6406: ;
6407: $if $(@expr1073747711 $!@expr1073747712 $assertEquals $(@expr1073747713 "cppcheck-2.8/test/testother.cpp" $, 6407 $, "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'start' and 'end'.\n" $, errout@var100 .@expr5884 str (@expr5885 ) $) $) { $return ; }
6408: $check_ $(@expr1073747716 "cppcheck-2.8/test/testother.cpp" $, 6408 $, "struct Foo { int f() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" $)
6409:
|
6412:
6413: ;
6414: $if $(@expr1073747717 $!@expr1073747718 $assertEquals $(@expr1073747719 "cppcheck-2.8/test/testother.cpp" $, 6414 $, "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5884 str (@expr5885 ) $) $) { $return ; }
6415:
6416: $check_ $(@expr1073747722 "cppcheck-2.8/test/testother.cpp" $, 6416 $, "void test(const int * p) {\n    int i = *p;\n    int j = *p;\n}" $)
6417:
6418:
6419: ;
6420: $if $(@expr1073747723 $!@expr1073747724 $assertEquals $(@expr1073747725 "cppcheck-2.8/test/testother.cpp" $, 6420 $, "[test.cpp:3] -> [test.cpp:2]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5884 str (@expr5885 ) $) $) { $return ; }
6421:
6422: $check_ $(@expr1073747728 "cppcheck-2.8/test/testother.cpp" $, 6422 $, "struct Foo { int f() const; int g(int) const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" $)
6423:
|
6426:
6427: ;
6428: $if $(@expr1073747729 $!@expr1073747730 $assertEquals $(@expr1073747731 "cppcheck-2.8/test/testother.cpp" $, 6428 $, "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5884 str (@expr5885 ) $) $) { $return ; }
6429:
6430: $check_ $(@expr1073747734 "cppcheck-2.8/test/testother.cpp" $, 6430 $, "struct Foo { int f() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" $)
6431:
|
6434:
6435: ;
6436: $if $(@expr1073747735 $!@expr1073747736 $assertEquals $(@expr1073747737 "cppcheck-2.8/test/testother.cpp" $, 6436 $, "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5884 str (@expr5885 ) $) $) { $return ; }
6437: }
6438:
6439: void duplicateVarExpressionAssign ( ) {
6440: $check_ $(@expr1073747740 "cppcheck-2.8/test/testother.cpp" $, 6440 $, "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(i);\n    i = j;\n}" $)
6441:
|
6446:
6447: ;
6448: $if $(@expr1073747741 $!@expr1073747742 $assertEquals $(@expr1073747743 "cppcheck-2.8/test/testother.cpp" $, 6448 $, "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5920 str (@expr5921 ) $) $) { $return ; }
6449:
6450: $check_ $(@expr1073747746 "cppcheck-2.8/test/testother.cpp" $, 6450 $, "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(j);\n    j = i;\n}" $)
6451:
|
6456:
6457: ;
6458: $if $(@expr1073747747 $!@expr1073747748 $assertEquals $(@expr1073747749 "cppcheck-2.8/test/testother.cpp" $, 6458 $, "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5920 str (@expr5921 ) $) $) { $return ; }
6459:
6460: $check_ $(@expr1073747752 "cppcheck-2.8/test/testother.cpp" $, 6460 $, "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(j);\n    if (i == j) {}\n}" $)
6461:
|
6466:
6467: ;
6468: $if $(@expr1073747753 $!@expr1073747754 $assertEquals $(@expr1073747755 "cppcheck-2.8/test/testother.cpp" $, 6468 $, "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5920 str (@expr5921 ) $) $) { $return
6469:
6470: ; }
6471:
6472: $check_ $(@expr1073747758 "cppcheck-2.8/test/testother.cpp" $, 6472 $, "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(j);\n    if (i == a.x) {}\n}" $)
6473:
|
6478:
6479: ;
6480: $if $(@expr1073747759 $!@expr1073747760 $assertEquals $(@expr1073747761 "cppcheck-2.8/test/testother.cpp" $, 6480 $, "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5920 str (@expr5921 ) $) $) { $return
6481:
6482: ; }
6483:
6484: $check_ $(@expr1073747764 "cppcheck-2.8/test/testother.cpp" $, 6484 $, "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(i);\n    if (j == a.x) {}\n}" $)
6485:
|
6490:
6491: ;
6492: $if $(@expr1073747765 $!@expr1073747766 $assertEquals $(@expr1073747767 "cppcheck-2.8/test/testother.cpp" $, 6492 $, "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" $, errout@var100 .@expr5920 str (@expr5921 ) $) $) { $return
6493:
6494: ; }
6495:
6496:
6497: $check_ $(@expr1073747770 "cppcheck-2.8/test/testother.cpp" $, 6497 $, "struct P\n{\n    void func();\n    bool operator==(const P&) const;\n};\nstruct X\n{\n    P first;\n    P second;\n};\nbool bar();\nvoid baz(const P&);\nvoid foo(const X& x)\n{\n    P current = x.first;\n    P previous = x.first;\n    while (true)\n    {\n        baz(current);\n        if (bar() && previous == current)\n        {\n            current.func();\n        }\n        previous = current;\n    }\n}" $)
6498:
|
6521:
6522: ;
6523: $if $(@expr1073747771 $!@expr1073747772 $assertEquals $(@expr1073747773 "cppcheck-2.8/test/testother.cpp" $, 6523 $, "[test.cpp:16] -> [test.cpp:15]: (style, inconclusive) Same expression used in consecutive assignments of 'current' and 'previous'.\n" $, errout@var100 .@expr5920 str (@expr5921 ) $) $) { $return ; }
6524: }
6525:
6526: void duplicateVarExpressionCrash ( ) {
6527:
6528: $check_ $(@expr1073747776 "cppcheck-2.8/test/testother.cpp" $, 6528 $, "struct  X {\n    X();\n    int f() const;\n};\nvoid run() {\n        X x;\n        int a = x.f();\n        int b = x.f();\n        (void)a;\n        (void)b;\n}" $)
6529:
|
6537:
6538: ;
6539: $if $(@expr1073747777 $!@expr1073747778 $assertEquals $(@expr1073747779 "cppcheck-2.8/test/testother.cpp" $, 6539 $, "[test.cpp:8] -> [test.cpp:7]: (style, inconclusive) Same expression used in consecutive assignments of 'a' and 'b'.\n" $, errout@var100 .@expr5956 str (@expr5957 ) $) $) { $return ; }
6540:
6541:
6542: $check_ $(@expr1073747782 "cppcheck-2.8/test/testother.cpp" $, 6542 $, "void f() {\n  unsigned char d;\n  d = d % 5;\n}" $)
6543:
6544:
6545: ;
6546: $if $(@expr1073747783 $!@expr1073747784 $assertEquals $(@expr1073747785 "cppcheck-2.8/test/testother.cpp" $, 6546 $, "" $, errout@var100 .@expr5956 str (@expr5957 ) $) $) { $return ; }
6547:
6548: $check_ $(@expr1073747788 "cppcheck-2.8/test/testother.cpp" $, 6548 $, "template <typename T>\nT f() {\n  T x = T();\n}\nint &a = f<int&>();" $)
6549:
6550:
6551:
6552: ;
6553: $if $(@expr1073747789 $!@expr1073747790 $assertEquals $(@expr1073747791 "cppcheck-2.8/test/testother.cpp" $, 6553 $, "" $, errout@var100 .@expr5956 str (@expr5957 ) $) $) { $return ; }
6554:
6555:
6556: $check_ $(@expr1073747794 "cppcheck-2.8/test/testother.cpp" $, 6556 $, "class A {\n  int64_t B = 32768;\n  P<uint8_t> m = MakeP<uint8_t>(B);\n};\nvoid f() {\n  uint32_t a = 42;\n  uint32_t b = uint32_t(A ::B / 1024);\n  int32_t c = int32_t(a / b);\n}" $)
6557:
|
6563:
6564: ;
6565: $if $(@expr1073747795 $!@expr1073747796 $assertEquals $(@expr1073747797 "cppcheck-2.8/test/testother.cpp" $, 6565 $, "" $, errout@var100 .@expr5956 str (@expr5957 ) $) $) { $return ; }
6566:
6567:
6568: $check_ $(@expr1073747800 "cppcheck-2.8/test/testother.cpp" $, 6568 $, "a b;\nvoid c() {\n  switch (d) { case b:; }\n  double e(b);\n  if(e <= 0) {}\n}" $)
6569:
|
6572:
6573: ;
6574: $if $(@expr1073747801 $!@expr1073747802 $assertEquals $(@expr1073747803 "cppcheck-2.8/test/testother.cpp" $, 6574 $, "" $, errout@var100 .@expr5956 str (@expr5957 ) $) $) { $return ; }
6575:
6576:
6577:
6578: $check_ $(@expr1073747806 "cppcheck-2.8/test/testother.cpp" $, 6578 $, "struct a {\n  int b() const;\n  auto c() -> decltype(0) {\n    a d;\n    int e = d.b(), f = d.b();\n    return e + f;\n  }\n};\n" $)
6579:
|
6584:
6585: ;
6586: $if $(@expr1073747807 $!@expr1073747808 $assertEquals $(@expr1073747809 "cppcheck-2.8/test/testother.cpp" $, 6586 $, "[test.cpp:5] -> [test.cpp:5]: (style, inconclusive) Same expression used in consecutive assignments of 'e' and 'f'.\n" $, errout@var100 .@expr5956 str (@expr5957 ) $) $) { $return ; }
6587: }
6588:
6589: void multiConditionSameExpression ( ) {
6590: $check_ $(@expr1073747812 "cppcheck-2.8/test/testother.cpp" $, 6590 $, "void f() {\n  int val = 0;\n  if (val < 0) continue;\n  if ((val > 0)) {}\n}" $)
6591:
6592:
6593:
6594: ;
6595: $if $(@expr1073747813 $!@expr1073747814 $assertEquals $(@expr1073747815 "cppcheck-2.8/test/testother.cpp" $, 6595 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'val < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison 'val > 0' is always false.\n" $, errout@var100 .@expr5992 str (@expr5993 ) $) $) { $return
6596: ; }
6597:
6598: $check_ $(@expr1073747818 "cppcheck-2.8/test/testother.cpp" $, 6598 $, "void f() {\n  int val = 0;\n  int *p = &val;n  val = 1;\n  if (*p < 0) continue;\n  if ((*p > 0)) {}\n}\n" $)
6599:
|
6603:
6604: ;
6605: $if $(@expr1073747819 $!@expr1073747820 $assertEquals $(@expr1073747821 "cppcheck-2.8/test/testother.cpp" $, 6605 $, "" $, errout@var100 .@expr5992 str (@expr5993 ) $) $) { $return ; }
6606:
6607: $check_ $(@expr1073747824 "cppcheck-2.8/test/testother.cpp" $, 6607 $, "void f() {\n  int val = 0;\n  int *p = &val;\n  if (*p < 0) continue;\n  if ((*p > 0)) {}\n}\n" $)
6608:
|
6611:
6612: ;
6613: $todoAssertEquals $(@expr1073747825 "cppcheck-2.8/test/testother.cpp" $, 6613 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison '*p < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison '*p > 0' is always false.\n" $, "" $, errout@var100 .@expr5992 str (@expr5993 ) $)
6614: ;
6615:
6616: $check_ $(@expr1073747828 "cppcheck-2.8/test/testother.cpp" $, 6616 $, "void f() {\n  int val = 0;\n  if (val < 0) {\n    if ((val > 0)) {}\n  }\n}" $)
6617:
|
6620:
6621: ;
6622: $if $(@expr1073747829 $!@expr1073747830 $assertEquals $(@expr1073747831 "cppcheck-2.8/test/testother.cpp" $, 6622 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'val < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison 'val > 0' is always false.\n" $, errout@var100 .@expr5992 str (@expr5993 ) $) $) { $return
6623: ; }
6624:
6625: $check_ $(@expr1073747834 "cppcheck-2.8/test/testother.cpp" $, 6625 $, "void f() {\n  int val = 0;\n  if (val < 0) {\n    if ((val < 0)) {}\n  }\n}" $)
6626:
|
6629:
6630: ;
6631: $if $(@expr1073747835 $!@expr1073747836 $assertEquals $(@expr1073747837 "cppcheck-2.8/test/testother.cpp" $, 6631 $, "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'val < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison 'val < 0' is always false.\n" $, errout@var100 .@expr5992 str (@expr5993 ) $) $) { $return
6632: ; }
6633:
6634: $check_ $(@expr1073747840 "cppcheck-2.8/test/testother.cpp" $, 6634 $, "void f() {\n  int activate = 0;\n  int foo = 0;\n  if (activate) {}\n  else if (foo) {}\n}" $)
6635:
|
6638:
6639: ;
6640: $if $(@expr1073747841 $!@expr1073747842 $assertEquals $(@expr1073747843 "cppcheck-2.8/test/testother.cpp" $, 6640 $, "" $, errout@var100 .@expr5992 str (@expr5993 ) $) $) { $return ; }
6641: }
6642:
6643: void checkSignOfUnsignedVariable ( ) {
6644: $check_ $(@expr1073747847 "cppcheck-2.8/test/testother.cpp" $, 6644 $, "void foo() {\n  for(unsigned char i = 10; i >= 0; i--) {}\n}" $)
6645:
6646: ;
6647: $if $(@expr1073747848 $!@expr1073747849 $assertEquals $(@expr1073747850 "cppcheck-2.8/test/testother.cpp" $, 6647 $, "[test.cpp:2]: (style) Unsigned expression 'i' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6648:
6649: $check_ $(@expr1073747853 "cppcheck-2.8/test/testother.cpp" $, 6649 $, "void foo(bool b) {\n  for(unsigned int i = 10; b || i >= 0; i--) {}\n}" $)
6650:
6651: ;
6652: $if $(@expr1073747854 $!@expr1073747855 $assertEquals $(@expr1073747856 "cppcheck-2.8/test/testother.cpp" $, 6652 $, "[test.cpp:2]: (style) Unsigned expression 'i' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6653:
6654: {
6655: const char code@var191 [@expr1073747859 45 ] =@expr1073747860 "void foo(unsigned int x) {\n  if (x < 0) {}\n}"
6656:
6657: ;
6658: $check_ $(@expr1073747861 "cppcheck-2.8/test/testother.cpp" $, 6658 $, code@var191 , nullptr , false , false , true , false $) ;
6659: $if $(@expr1073747862 $!@expr1073747863 $assertEquals $(@expr1073747864 "cppcheck-2.8/test/testother.cpp" $, 6659 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6660: $check_ $(@expr1073747867 "cppcheck-2.8/test/testother.cpp" $, 6660 $, code@var191 , nullptr , false , false , true , true $) ;
6661: $if $(@expr1073747868 $!@expr1073747869 $assertEquals $(@expr1073747870 "cppcheck-2.8/test/testother.cpp" $, 6661 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6662: }
6663:
6664: $check_ $(@expr1073747873 "cppcheck-2.8/test/testother.cpp" $, 6664 $, "void foo(unsigned int x) {\n  if (x < 0u) {}\n}" $)
6665:
6666: ;
6667: $if $(@expr1073747874 $!@expr1073747875 $assertEquals $(@expr1073747876 "cppcheck-2.8/test/testother.cpp" $, 6667 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6668:
6669: $check_ $(@expr1073747879 "cppcheck-2.8/test/testother.cpp" $, 6669 $, "void foo(int x) {\n  if (x < 0) {}\n}" $)
6670:
6671: ;
6672: $if $(@expr1073747880 $!@expr1073747881 $assertEquals $(@expr1073747882 "cppcheck-2.8/test/testother.cpp" $, 6672 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6673:
6674: {
6675: const char code@var192 [@expr1073747885 54 ] =@expr1073747886 "void foo(unsigned x) {\n  int y = 0;\n  if (x < y) {}\n}"
6676:
6677:
6678: ;
6679: $check_ $(@expr1073747887 "cppcheck-2.8/test/testother.cpp" $, 6679 $, code@var192 , nullptr , false , false , true , false $) ;
6680: $if $(@expr1073747888 $!@expr1073747889 $assertEquals $(@expr1073747890 "cppcheck-2.8/test/testother.cpp" $, 6680 $, "[test.cpp:3]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6681: $check_ $(@expr1073747893 "cppcheck-2.8/test/testother.cpp" $, 6681 $, code@var192 , nullptr , false , false , true , true $) ;
6682: $if $(@expr1073747894 $!@expr1073747895 $assertEquals $(@expr1073747896 "cppcheck-2.8/test/testother.cpp" $, 6682 $, "[test.cpp:2] -> [test.cpp:3]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6683: }
6684: $check_ $(@expr1073747899 "cppcheck-2.8/test/testother.cpp" $, 6684 $, "void foo(unsigned x) {\n  int y = 0;\n  if (b)\n    y = 1;\n  if (x < y) {}\n}" $)
6685:
|
6688:
6689: ;
6690: $if $(@expr1073747900 $!@expr1073747901 $assertEquals $(@expr1073747902 "cppcheck-2.8/test/testother.cpp" $, 6690 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6691:
6692: $check_ $(@expr1073747905 "cppcheck-2.8/test/testother.cpp" $, 6692 $, "void foo(unsigned int x) {\n  if (0 > x) {}\n}" $)
6693:
6694: ;
6695: $if $(@expr1073747906 $!@expr1073747907 $assertEquals $(@expr1073747908 "cppcheck-2.8/test/testother.cpp" $, 6695 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6696:
6697: $check_ $(@expr1073747911 "cppcheck-2.8/test/testother.cpp" $, 6697 $, "void foo(unsigned int x) {\n  if (0UL > x) {}\n}" $)
6698:
6699: ;
6700: $if $(@expr1073747912 $!@expr1073747913 $assertEquals $(@expr1073747914 "cppcheck-2.8/test/testother.cpp" $, 6700 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6701:
6702: $check_ $(@expr1073747917 "cppcheck-2.8/test/testother.cpp" $, 6702 $, "void foo(int x) {\n  if (0 > x) {}\n}" $)
6703:
6704: ;
6705: $if $(@expr1073747918 $!@expr1073747919 $assertEquals $(@expr1073747920 "cppcheck-2.8/test/testother.cpp" $, 6705 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6706:
6707: $check_ $(@expr1073747923 "cppcheck-2.8/test/testother.cpp" $, 6707 $, "void foo(unsigned int x) {\n  if (x >= 0) {}\n}" $)
6708:
6709: ;
6710: $if $(@expr1073747924 $!@expr1073747925 $assertEquals $(@expr1073747926 "cppcheck-2.8/test/testother.cpp" $, 6710 $, "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6711:
6712: $check_ $(@expr1073747929 "cppcheck-2.8/test/testother.cpp" $, 6712 $, "void foo(unsigned int x, unsigned y) {\n  if (x - y >= 0) {}\n}" $)
6713:
6714: ;
6715: $if $(@expr1073747930 $!@expr1073747931 $assertEquals $(@expr1073747932 "cppcheck-2.8/test/testother.cpp" $, 6715 $, "[test.cpp:2]: (style) Unsigned expression 'x-y' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6716:
6717: $check_ $(@expr1073747935 "cppcheck-2.8/test/testother.cpp" $, 6717 $, "void foo(unsigned int x) {\n  if (x >= 0ull) {}\n}" $)
6718:
6719: ;
6720: $if $(@expr1073747936 $!@expr1073747937 $assertEquals $(@expr1073747938 "cppcheck-2.8/test/testother.cpp" $, 6720 $, "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6721:
6722: $check_ $(@expr1073747941 "cppcheck-2.8/test/testother.cpp" $, 6722 $, "void foo(int x) {\n  if (x >= 0) {}\n}" $)
6723:
6724: ;
6725: $if $(@expr1073747942 $!@expr1073747943 $assertEquals $(@expr1073747944 "cppcheck-2.8/test/testother.cpp" $, 6725 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6726:
6727: $check_ $(@expr1073747947 "cppcheck-2.8/test/testother.cpp" $, 6727 $, "void foo(unsigned int x) {\n  if (0 <= x) {}\n}" $)
6728:
6729: ;
6730: $if $(@expr1073747948 $!@expr1073747949 $assertEquals $(@expr1073747950 "cppcheck-2.8/test/testother.cpp" $, 6730 $, "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6731:
6732: $check_ $(@expr1073747953 "cppcheck-2.8/test/testother.cpp" $, 6732 $, "void foo(unsigned int x) {\n  if (0ll <= x) {}\n}" $)
6733:
6734: ;
6735: $if $(@expr1073747954 $!@expr1073747955 $assertEquals $(@expr1073747956 "cppcheck-2.8/test/testother.cpp" $, 6735 $, "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6736:
6737: $check_ $(@expr1073747959 "cppcheck-2.8/test/testother.cpp" $, 6737 $, "void foo(int x) {\n  if (0 <= x) {}\n}" $)
6738:
6739: ;
6740: $if $(@expr1073747960 $!@expr1073747961 $assertEquals $(@expr1073747962 "cppcheck-2.8/test/testother.cpp" $, 6740 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6741:
6742: $check_ $(@expr1073747965 "cppcheck-2.8/test/testother.cpp" $, 6742 $, "void foo(unsigned int x, bool y) {\n  if (x < 0 && y) {}\n}" $)
6743:
6744: ;
6745: $if $(@expr1073747966 $!@expr1073747967 $assertEquals $(@expr1073747968 "cppcheck-2.8/test/testother.cpp" $, 6745 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6746:
6747: $check_ $(@expr1073747971 "cppcheck-2.8/test/testother.cpp" $, 6747 $, "void foo(int x, bool y) {\n  if (x < 0 && y) {}\n}" $)
6748:
6749: ;
6750: $if $(@expr1073747972 $!@expr1073747973 $assertEquals $(@expr1073747974 "cppcheck-2.8/test/testother.cpp" $, 6750 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6751:
6752: $check_ $(@expr1073747977 "cppcheck-2.8/test/testother.cpp" $, 6752 $, "void foo(unsigned int x, bool y) {\n  if (0 > x && y) {}\n}" $)
6753:
6754: ;
6755: $if $(@expr1073747978 $!@expr1073747979 $assertEquals $(@expr1073747980 "cppcheck-2.8/test/testother.cpp" $, 6755 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6756:
6757: $check_ $(@expr1073747983 "cppcheck-2.8/test/testother.cpp" $, 6757 $, "void foo(int x, bool y) {\n  if (0 > x && y) {}\n}" $)
6758:
6759: ;
6760: $if $(@expr1073747984 $!@expr1073747985 $assertEquals $(@expr1073747986 "cppcheck-2.8/test/testother.cpp" $, 6760 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6761:
6762: $check_ $(@expr1073747989 "cppcheck-2.8/test/testother.cpp" $, 6762 $, "void foo(unsigned int x, bool y) {\n  if (x >= 0 && y) {}\n}" $)
6763:
6764: ;
6765: $if $(@expr1073747990 $!@expr1073747991 $assertEquals $(@expr1073747992 "cppcheck-2.8/test/testother.cpp" $, 6765 $, "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6766:
6767: $check_ $(@expr1073747995 "cppcheck-2.8/test/testother.cpp" $, 6767 $, "void foo(int x, bool y) {\n  if (x >= 0 && y) {}\n}" $)
6768:
6769: ;
6770: $if $(@expr1073747996 $!@expr1073747997 $assertEquals $(@expr1073747998 "cppcheck-2.8/test/testother.cpp" $, 6770 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6771:
6772:
6773: $check_ $(@expr1073748001 "cppcheck-2.8/test/testother.cpp" $, 6773 $, "void foo(unsigned int x, bool y) {\n  if (y && x < 0) {}\n}" $)
6774:
6775: ;
6776: $if $(@expr1073748002 $!@expr1073748003 $assertEquals $(@expr1073748004 "cppcheck-2.8/test/testother.cpp" $, 6776 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6777:
6778: $check_ $(@expr1073748007 "cppcheck-2.8/test/testother.cpp" $, 6778 $, "void foo(int x, bool y) {\n  if (y && x < 0) {}\n}" $)
6779:
6780: ;
6781: $if $(@expr1073748008 $!@expr1073748009 $assertEquals $(@expr1073748010 "cppcheck-2.8/test/testother.cpp" $, 6781 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6782:
6783: $check_ $(@expr1073748013 "cppcheck-2.8/test/testother.cpp" $, 6783 $, "void foo(unsigned int x, bool y) {\n  if (y && 0 > x) {}\n}" $)
6784:
6785: ;
6786: $if $(@expr1073748014 $!@expr1073748015 $assertEquals $(@expr1073748016 "cppcheck-2.8/test/testother.cpp" $, 6786 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6787:
6788: $check_ $(@expr1073748019 "cppcheck-2.8/test/testother.cpp" $, 6788 $, "void foo(int x, bool y) {\n  if (y && 0 > x) {}\n}" $)
6789:
6790: ;
6791: $if $(@expr1073748020 $!@expr1073748021 $assertEquals $(@expr1073748022 "cppcheck-2.8/test/testother.cpp" $, 6791 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6792:
6793: $check_ $(@expr1073748025 "cppcheck-2.8/test/testother.cpp" $, 6793 $, "void foo(unsigned int x, bool y) {\n  if (y && x >= 0) {}\n}" $)
6794:
6795: ;
6796: $if $(@expr1073748026 $!@expr1073748027 $assertEquals $(@expr1073748028 "cppcheck-2.8/test/testother.cpp" $, 6796 $, "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6797:
6798: $check_ $(@expr1073748031 "cppcheck-2.8/test/testother.cpp" $, 6798 $, "void foo(int x, bool y) {\n  if (y && x >= 0) {}\n}" $)
6799:
6800: ;
6801: $if $(@expr1073748032 $!@expr1073748033 $assertEquals $(@expr1073748034 "cppcheck-2.8/test/testother.cpp" $, 6801 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6802:
6803:
6804: $check_ $(@expr1073748037 "cppcheck-2.8/test/testother.cpp" $, 6804 $, "void foo(unsigned int x, bool y) {\n  if (x < 0 || y) {}\n}" $)
6805:
6806: ;
6807: $if $(@expr1073748038 $!@expr1073748039 $assertEquals $(@expr1073748040 "cppcheck-2.8/test/testother.cpp" $, 6807 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6808:
6809: $check_ $(@expr1073748043 "cppcheck-2.8/test/testother.cpp" $, 6809 $, "void foo(int x, bool y) {\n  if (x < 0 || y) {}\n}" $)
6810:
6811: ;
6812: $if $(@expr1073748044 $!@expr1073748045 $assertEquals $(@expr1073748046 "cppcheck-2.8/test/testother.cpp" $, 6812 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6813:
6814: $check_ $(@expr1073748049 "cppcheck-2.8/test/testother.cpp" $, 6814 $, "void foo(unsigned int x, bool y) {\n  if (0 > x || y) {}\n}" $)
6815:
6816: ;
6817: $if $(@expr1073748050 $!@expr1073748051 $assertEquals $(@expr1073748052 "cppcheck-2.8/test/testother.cpp" $, 6817 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6818:
6819: $check_ $(@expr1073748055 "cppcheck-2.8/test/testother.cpp" $, 6819 $, "void foo(int x, bool y) {\n  if (0 > x || y) {}\n}" $)
6820:
6821: ;
6822: $if $(@expr1073748056 $!@expr1073748057 $assertEquals $(@expr1073748058 "cppcheck-2.8/test/testother.cpp" $, 6822 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6823:
6824: $check_ $(@expr1073748061 "cppcheck-2.8/test/testother.cpp" $, 6824 $, "void foo(unsigned int x, bool y) {\n  if (x >= 0 || y) {}\n}" $)
6825:
6826: ;
6827: $if $(@expr1073748062 $!@expr1073748063 $assertEquals $(@expr1073748064 "cppcheck-2.8/test/testother.cpp" $, 6827 $, "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6828:
6829: $check_ $(@expr1073748067 "cppcheck-2.8/test/testother.cpp" $, 6829 $, "void foo(int x, bool y) {\n  if (x >= 0 || y) {}\n}" $)
6830:
6831: ;
6832: $if $(@expr1073748068 $!@expr1073748069 $assertEquals $(@expr1073748070 "cppcheck-2.8/test/testother.cpp" $, 6832 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6833:
6834:
6835: {
6836: const char code@var193 [@expr1073748073 70 ] =@expr1073748074 "template<int n> void foo(unsigned int x) {\n  if (x <= n);\n}\nfoo<0>();"
6837:
6838:
6839: ;
6840: $check_ $(@expr1073748075 "cppcheck-2.8/test/testother.cpp" $, 6840 $, code@var193 , nullptr , false , false $) ;
6841: $if $(@expr1073748076 $!@expr1073748077 $assertEquals $(@expr1073748078 "cppcheck-2.8/test/testother.cpp" $, 6841 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6842: $check_ $(@expr1073748081 "cppcheck-2.8/test/testother.cpp" $, 6842 $, code@var193 , nullptr , false , true $) ;
6843: $if $(@expr1073748082 $!@expr1073748083 $assertEquals $(@expr1073748084 "cppcheck-2.8/test/testother.cpp" $, 6843 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6844: }
6845:
6846: {
6847: Settings keepTemplates@var194 ;
6848: keepTemplates@var194 .@expr1073748087 checkUnusedTemplates@var195 =@expr1073748088 true ;
6849: $check_ $(@expr1073748089 "cppcheck-2.8/test/testother.cpp" $, 6849 $, "template<int n> void foo(unsigned int x) {\nif (x <= 0);\n}" , &@expr1073748090 keepTemplates@var194 $)
6850:
6851: ;
6852: $if $(@expr1073748091 $!@expr1073748092 $assertEquals $(@expr1073748093 "cppcheck-2.8/test/testother.cpp" $, 6852 $, "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6853: }
6854:
6855:
6856: $check_ $(@expr1073748096 "cppcheck-2.8/test/testother.cpp" $, 6856 $, "uint32_t value = 0xFUL;\nvoid f() {\n  if (value < 0u)\n  {\n    value = 0u;\n  }\n}" $)
6857:
|
6861:
6862: ;
6863: $if $(@expr1073748097 $!@expr1073748098 $assertEquals $(@expr1073748099 "cppcheck-2.8/test/testother.cpp" $, 6863 $, "[test.cpp:3]: (style) Checking if unsigned expression 'value' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6864:
6865:
6866: Settings settings1@var196 ;
6867: settings1@var196 .@expr1073748102 platform (@expr1073748103 Settings ::@expr1073748104 Win64@expr1073747846 ) ;
6868: $check_ $(@expr1073748105 "cppcheck-2.8/test/testother.cpp" $, 6868 $, "using BOOL = unsigned;\nint i;\nbool f() {\n    return i >= 0;\n}\n" , &@expr1073748106 settings1@var196 $)
6869:
6870:
6871:
6872: ;
6873: $if $(@expr1073748107 $!@expr1073748108 $assertEquals $(@expr1073748109 "cppcheck-2.8/test/testother.cpp" $, 6873 $, "" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6874:
6875:
6876: $check_ $(@expr1073748112 "cppcheck-2.8/test/testother.cpp" $, 6876 $, "void f(void) {\n   const uint32_t x = 0;\n   constexpr const auto y = 0xFFFFU;\n   if (y < x) {}\n}" $)
6877:
6878:
6879:
6880: ;
6881: $if $(@expr1073748113 $!@expr1073748114 $assertEquals $(@expr1073748115 "cppcheck-2.8/test/testother.cpp" $, 6881 $, "[test.cpp:4]: (style) Checking if unsigned expression 'y' is less than zero.\n" $, errout@var100 .@expr6027 str (@expr6028 ) $) $) { $return ; }
6882: }
6883:
6884: void checkSignOfPointer ( ) {
6885: $check_ $(@expr1073748118 "cppcheck-2.8/test/testother.cpp" $, 6885 $, "void foo(const int* x) {\n  if (x >= 0) {}\n}" $)
6886:
6887: ;
6888: $if $(@expr1073748119 $!@expr1073748120 $assertEquals $(@expr1073748121 "cppcheck-2.8/test/testother.cpp" $, 6888 $, "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6889:
6890: {
6891: const char code@var197 [@expr1073748124 57 ] =@expr1073748125 "void foo(const int* x) {\n  int y = 0;\n  if (x >= y) {}\n}"
6892:
6893:
6894: ;
6895: $check_ $(@expr1073748126 "cppcheck-2.8/test/testother.cpp" $, 6895 $, code@var197 , nullptr , false , false , true , false $) ;
6896: $if $(@expr1073748127 $!@expr1073748128 $assertEquals $(@expr1073748129 "cppcheck-2.8/test/testother.cpp" $, 6896 $, "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6897: $check_ $(@expr1073748132 "cppcheck-2.8/test/testother.cpp" $, 6897 $, code@var197 , nullptr , false , false , true , true $) ;
6898: $if $(@expr1073748133 $!@expr1073748134 $assertEquals $(@expr1073748135 "cppcheck-2.8/test/testother.cpp" $, 6898 $, "[test.cpp:2] -> [test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6899: }
6900: $check_ $(@expr1073748138 "cppcheck-2.8/test/testother.cpp" $, 6900 $, "void foo(const int* x) {\n  if (*x >= 0) {}\n}" $)
6901:
6902: ;
6903: $if $(@expr1073748139 $!@expr1073748140 $assertEquals $(@expr1073748141 "cppcheck-2.8/test/testother.cpp" $, 6903 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6904:
6905: $check_ $(@expr1073748144 "cppcheck-2.8/test/testother.cpp" $, 6905 $, "void foo(const int* x) {\n  if (x < 0) {}\n}" $)
6906:
6907: ;
6908: $if $(@expr1073748145 $!@expr1073748146 $assertEquals $(@expr1073748147 "cppcheck-2.8/test/testother.cpp" $, 6908 $, "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6909:
6910: {
6911: const char code@var198 [@expr1073748150 62 ] =@expr1073748151 "void foo(const int* x) {\n  unsigned y = 0u;\n  if (x < y) {}\n}"
6912:
6913:
6914: ;
6915:
6916: $check_ $(@expr1073748152 "cppcheck-2.8/test/testother.cpp" $, 6916 $, code@var198 , nullptr , false , false , true , false $) ;
6917: $if $(@expr1073748153 $!@expr1073748154 $assertEquals $(@expr1073748155 "cppcheck-2.8/test/testother.cpp" $, 6917 $, "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6918: $check_ $(@expr1073748158 "cppcheck-2.8/test/testother.cpp" $, 6918 $, code@var198 , nullptr , false , false , true , true $) ;
6919: $if $(@expr1073748159 $!@expr1073748160 $assertEquals $(@expr1073748161 "cppcheck-2.8/test/testother.cpp" $, 6919 $, "[test.cpp:2] -> [test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6920: }
6921:
6922: $check_ $(@expr1073748164 "cppcheck-2.8/test/testother.cpp" $, 6922 $, "void foo(const int* x) {\n  if (*x < 0) {}\n}" $)
6923:
6924: ;
6925: $if $(@expr1073748165 $!@expr1073748166 $assertEquals $(@expr1073748167 "cppcheck-2.8/test/testother.cpp" $, 6925 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6926:
6927: $check_ $(@expr1073748170 "cppcheck-2.8/test/testother.cpp" $, 6927 $, "void foo(const int* x, const int* y) {\n  if (x - y < 0) {}\n}" $)
6928:
6929: ;
6930: $if $(@expr1073748171 $!@expr1073748172 $assertEquals $(@expr1073748173 "cppcheck-2.8/test/testother.cpp" $, 6930 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6931:
6932: $check_ $(@expr1073748176 "cppcheck-2.8/test/testother.cpp" $, 6932 $, "void foo(const int* x, const int* y) {\n  if (x - y <= 0) {}\n}" $)
6933:
6934: ;
6935: $if $(@expr1073748177 $!@expr1073748178 $assertEquals $(@expr1073748179 "cppcheck-2.8/test/testother.cpp" $, 6935 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6936:
6937: $check_ $(@expr1073748182 "cppcheck-2.8/test/testother.cpp" $, 6937 $, "void foo(const int* x, const int* y) {\n  if (x - y > 0) {}\n}" $)
6938:
6939: ;
6940: $if $(@expr1073748183 $!@expr1073748184 $assertEquals $(@expr1073748185 "cppcheck-2.8/test/testother.cpp" $, 6940 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6941:
6942: $check_ $(@expr1073748188 "cppcheck-2.8/test/testother.cpp" $, 6942 $, "void foo(const int* x, const int* y) {\n  if (x - y >= 0) {}\n}" $)
6943:
6944: ;
6945: $if $(@expr1073748189 $!@expr1073748190 $assertEquals $(@expr1073748191 "cppcheck-2.8/test/testother.cpp" $, 6945 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6946:
6947: $check_ $(@expr1073748194 "cppcheck-2.8/test/testother.cpp" $, 6947 $, "void foo(const Bar* x) {\n  if (0 <= x) {}\n}" $)
6948:
6949: ;
6950: $if $(@expr1073748195 $!@expr1073748196 $assertEquals $(@expr1073748197 "cppcheck-2.8/test/testother.cpp" $, 6950 $, "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6951:
6952: $check_ $(@expr1073748200 "cppcheck-2.8/test/testother.cpp" $, 6952 $, "struct S {\n  int* ptr;\n};\nvoid foo(S* first) {\n  if (first.ptr >= 0) {}\n}" $)
6953:
|
6956:
6957: ;
6958: $if $(@expr1073748201 $!@expr1073748202 $assertEquals $(@expr1073748203 "cppcheck-2.8/test/testother.cpp" $, 6958 $, "[test.cpp:5]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6959:
6960: $check_ $(@expr1073748206 "cppcheck-2.8/test/testother.cpp" $, 6960 $, "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if((first.ptr - second.ptr) >= 0) {}\n}" $)
6961:
|
6964:
6965: ;
6966: $if $(@expr1073748207 $!@expr1073748208 $assertEquals $(@expr1073748209 "cppcheck-2.8/test/testother.cpp" $, 6966 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6967:
6968: $check_ $(@expr1073748212 "cppcheck-2.8/test/testother.cpp" $, 6968 $, "struct S {\n  int* ptr;\n};\nvoid foo(S* first) {\n  if((first.ptr) >= 0) {}\n}" $)
6969:
|
6972:
6973: ;
6974: $if $(@expr1073748213 $!@expr1073748214 $assertEquals $(@expr1073748215 "cppcheck-2.8/test/testother.cpp" $, 6974 $, "[test.cpp:5]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6975:
6976: $check_ $(@expr1073748218 "cppcheck-2.8/test/testother.cpp" $, 6976 $, "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 <= first.ptr - second.ptr) {}\n}" $)
6977:
|
6980:
6981: ;
6982: $if $(@expr1073748219 $!@expr1073748220 $assertEquals $(@expr1073748221 "cppcheck-2.8/test/testother.cpp" $, 6982 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6983:
6984: $check_ $(@expr1073748224 "cppcheck-2.8/test/testother.cpp" $, 6984 $, "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 <= (first.ptr - second.ptr)) {}\n}" $)
6985:
|
6988:
6989: ;
6990: $if $(@expr1073748225 $!@expr1073748226 $assertEquals $(@expr1073748227 "cppcheck-2.8/test/testother.cpp" $, 6990 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6991:
6992: $check_ $(@expr1073748230 "cppcheck-2.8/test/testother.cpp" $, 6992 $, "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(first.ptr - second.ptr < 0) {}\n}" $)
6993:
|
6996:
6997: ;
6998: $if $(@expr1073748231 $!@expr1073748232 $assertEquals $(@expr1073748233 "cppcheck-2.8/test/testother.cpp" $, 6998 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
6999:
7000: $check_ $(@expr1073748236 "cppcheck-2.8/test/testother.cpp" $, 7000 $, "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if((first.ptr - second.ptr) < 0) {}\n}" $)
7001:
|
7004:
7005: ;
7006: $if $(@expr1073748237 $!@expr1073748238 $assertEquals $(@expr1073748239 "cppcheck-2.8/test/testother.cpp" $, 7006 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7007:
7008: $check_ $(@expr1073748242 "cppcheck-2.8/test/testother.cpp" $, 7008 $, "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 > first.ptr - second.ptr) {}\n}" $)
7009:
|
7012:
7013: ;
7014: $if $(@expr1073748243 $!@expr1073748244 $assertEquals $(@expr1073748245 "cppcheck-2.8/test/testother.cpp" $, 7014 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7015:
7016: $check_ $(@expr1073748248 "cppcheck-2.8/test/testother.cpp" $, 7016 $, "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 > (first.ptr - second.ptr)) {}\n}" $)
7017:
|
7020:
7021: ;
7022: $if $(@expr1073748249 $!@expr1073748250 $assertEquals $(@expr1073748251 "cppcheck-2.8/test/testother.cpp" $, 7022 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7023:
7024: $check_ $(@expr1073748254 "cppcheck-2.8/test/testother.cpp" $, 7024 $, "void foo(const int* x) {\n  if (0 <= x[0]) {}\n}" $)
7025:
7026: ;
7027: $if $(@expr1073748255 $!@expr1073748256 $assertEquals $(@expr1073748257 "cppcheck-2.8/test/testother.cpp" $, 7027 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7028:
7029: $check_ $(@expr1073748260 "cppcheck-2.8/test/testother.cpp" $, 7029 $, "void foo(Bar* x) {\n  if (0 <= x.y) {}\n}" $)
7030:
7031: ;
7032: $if $(@expr1073748261 $!@expr1073748262 $assertEquals $(@expr1073748263 "cppcheck-2.8/test/testother.cpp" $, 7032 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7033:
7034: $check_ $(@expr1073748266 "cppcheck-2.8/test/testother.cpp" $, 7034 $, "void foo(Bar* x) {\n  if (0 <= x->y) {}\n}" $)
7035:
7036: ;
7037: $if $(@expr1073748267 $!@expr1073748268 $assertEquals $(@expr1073748269 "cppcheck-2.8/test/testother.cpp" $, 7037 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7038:
7039: $check_ $(@expr1073748272 "cppcheck-2.8/test/testother.cpp" $, 7039 $, "void foo(Bar* x, Bar* y) {\n  if (0 <= x->y - y->y ) {}\n}" $)
7040:
7041: ;
7042: $if $(@expr1073748273 $!@expr1073748274 $assertEquals $(@expr1073748275 "cppcheck-2.8/test/testother.cpp" $, 7042 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7043:
7044: $check_ $(@expr1073748278 "cppcheck-2.8/test/testother.cpp" $, 7044 $, "void foo(const Bar* x) {\n  if (0 > x) {}\n}" $)
7045:
7046: ;
7047: $if $(@expr1073748279 $!@expr1073748280 $assertEquals $(@expr1073748281 "cppcheck-2.8/test/testother.cpp" $, 7047 $, "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7048:
7049: $check_ $(@expr1073748284 "cppcheck-2.8/test/testother.cpp" $, 7049 $, "void foo(const int* x) {\n  if (0 > x[0]) {}\n}" $)
7050:
7051: ;
7052: $if $(@expr1073748285 $!@expr1073748286 $assertEquals $(@expr1073748287 "cppcheck-2.8/test/testother.cpp" $, 7052 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7053:
7054: $check_ $(@expr1073748290 "cppcheck-2.8/test/testother.cpp" $, 7054 $, "void foo(Bar* x) {\n  if (0 > x.y) {}\n}" $)
7055:
7056: ;
7057: $if $(@expr1073748291 $!@expr1073748292 $assertEquals $(@expr1073748293 "cppcheck-2.8/test/testother.cpp" $, 7057 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7058:
7059: $check_ $(@expr1073748296 "cppcheck-2.8/test/testother.cpp" $, 7059 $, "void foo(Bar* x) {\n  if (0 > x->y) {}\n}" $)
7060:
7061: ;
7062: $if $(@expr1073748297 $!@expr1073748298 $assertEquals $(@expr1073748299 "cppcheck-2.8/test/testother.cpp" $, 7062 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7063:
7064: $check_ $(@expr1073748302 "cppcheck-2.8/test/testother.cpp" $, 7064 $, "void foo() {\n  int (*t)(void *a, void *b);\n  if (t(a, b) < 0) {}\n}" $)
7065:
7066:
7067: ;
7068: $if $(@expr1073748303 $!@expr1073748304 $assertEquals $(@expr1073748305 "cppcheck-2.8/test/testother.cpp" $, 7068 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7069:
7070: $check_ $(@expr1073748308 "cppcheck-2.8/test/testother.cpp" $, 7070 $, "void foo() {\n  int (*t)(void *a, void *b);\n  if (0 > t(a, b)) {}\n}" $)
7071:
7072:
7073: ;
7074: $if $(@expr1073748309 $!@expr1073748310 $assertEquals $(@expr1073748311 "cppcheck-2.8/test/testother.cpp" $, 7074 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7075:
7076: $check_ $(@expr1073748314 "cppcheck-2.8/test/testother.cpp" $, 7076 $, "struct object_info { int *typep; };\nvoid packed_object_info(struct object_info *oi) {\n  if (oi->typep < 0);\n}" $)
7077:
7078:
7079: ;
7080: $if $(@expr1073748315 $!@expr1073748316 $assertEquals $(@expr1073748317 "cppcheck-2.8/test/testother.cpp" $, 7080 $, "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7081:
7082: $check_ $(@expr1073748320 "cppcheck-2.8/test/testother.cpp" $, 7082 $, "struct object_info { int typep[10]; };\nvoid packed_object_info(struct object_info *oi) {\n  if (oi->typep < 0);\n}" $)
7083:
7084:
7085: ;
7086: $if $(@expr1073748321 $!@expr1073748322 $assertEquals $(@expr1073748323 "cppcheck-2.8/test/testother.cpp" $, 7086 $, "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7087:
7088: $check_ $(@expr1073748326 "cppcheck-2.8/test/testother.cpp" $, 7088 $, "struct object_info { int *typep; };\nvoid packed_object_info(struct object_info *oi) {\n  if (*oi->typep < 0);\n}" $)
7089:
7090:
7091: ;
7092: $if $(@expr1073748327 $!@expr1073748328 $assertEquals $(@expr1073748329 "cppcheck-2.8/test/testother.cpp" $, 7092 $, "" $, errout@var100 .@expr6298 str (@expr6299 ) $) $) { $return ; }
7093: }
7094:
7095: void checkSuspiciousSemicolon1 ( ) {
7096: $check_ $(@expr1073748332 "cppcheck-2.8/test/testother.cpp" $, 7096 $, "void foo() {\n  for(int i = 0; i < 10; ++i);\n}" $)
7097:
7098: ;
7099: $if $(@expr1073748333 $!@expr1073748334 $assertEquals $(@expr1073748335 "cppcheck-2.8/test/testother.cpp" $, 7099 $, "" $, errout@var100 .@expr6512 str (@expr6513 ) $) $) { $return ; }
7100:
7101:
7102: $check_ $(@expr1073748338 "cppcheck-2.8/test/testother.cpp" $, 7102 $, "void foo() {\n  for(int i = 0; i < 10; ++i); {\n  }\n}" $)
7103:
7104:
7105: ;
7106: $if $(@expr1073748339 $!@expr1073748340 $assertEquals $(@expr1073748341 "cppcheck-2.8/test/testother.cpp" $, 7106 $, "[test.cpp:2]: (warning) Suspicious use of ; at the end of 'for' statement.\n" $, errout@var100 .@expr6512 str (@expr6513 ) $) $) { $return ; }
7107:
7108: $check_ $(@expr1073748344 "cppcheck-2.8/test/testother.cpp" $, 7108 $, "void foo() {\n  while (!quit); {\n    do_something();\n  }\n}" $)
7109:
7110:
7111:
7112: ;
7113: $if $(@expr1073748345 $!@expr1073748346 $assertEquals $(@expr1073748347 "cppcheck-2.8/test/testother.cpp" $, 7113 $, "[test.cpp:2]: (warning) Suspicious use of ; at the end of 'while' statement.\n" $, errout@var100 .@expr6512 str (@expr6513 ) $) $) { $return ; }
7114: }
7115:
7116: void checkSuspiciousSemicolon2 ( ) {
7117: $check_ $(@expr1073748350 "cppcheck-2.8/test/testother.cpp" $, 7117 $, "void foo() {\n  if (i == 1); {\n    do_something();\n  }\n}" $)
7118:
7119:
7120:
7121: ;
7122: $if $(@expr1073748351 $!@expr1073748352 $assertEquals $(@expr1073748353 "cppcheck-2.8/test/testother.cpp" $, 7122 $, "[test.cpp:2]: (warning) Suspicious use of ; at the end of 'if' statement.\n" $, errout@var100 .@expr6530 str (@expr6531 ) $) $) { $return ; }
7123:
7124:
7125: $check_ $(@expr1073748356 "cppcheck-2.8/test/testother.cpp" $, 7125 $, "void foo() {\n  if (Match());\n  do_something();\n}" $)
7126:
7127:
7128: ;
7129: $if $(@expr1073748357 $!@expr1073748358 $assertEquals $(@expr1073748359 "cppcheck-2.8/test/testother.cpp" $, 7129 $, "" $, errout@var100 .@expr6530 str (@expr6531 ) $) $) { $return ; }
7130:
7131: $check_ $(@expr1073748362 "cppcheck-2.8/test/testother.cpp" $, 7131 $, "void foo() {\n  if (Match());\n  else\n    do_something();\n}" $)
7132:
7133:
7134:
7135: ;
7136: $if $(@expr1073748363 $!@expr1073748364 $assertEquals $(@expr1073748365 "cppcheck-2.8/test/testother.cpp" $, 7136 $, "" $, errout@var100 .@expr6530 str (@expr6531 ) $) $) { $return ; }
7137:
7138: $check_ $(@expr1073748368 "cppcheck-2.8/test/testother.cpp" $, 7138 $, "void foo() {\n  if (i == 1)\n       ;\n  {\n    do_something();\n  }\n}" $)
7139:
|
7143:
7144: ;
7145: $if $(@expr1073748369 $!@expr1073748370 $assertEquals $(@expr1073748371 "cppcheck-2.8/test/testother.cpp" $, 7145 $, "" $, errout@var100 .@expr6530 str (@expr6531 ) $) $) { $return ; }
7146:
7147: $check_ $(@expr1073748374 "cppcheck-2.8/test/testother.cpp" $, 7147 $, "void foo() {\n  if (i == 1);\n\n  {\n    do_something();\n  }\n}" $)
7148:
|
7152:
7153: ;
7154: $if $(@expr1073748375 $!@expr1073748376 $assertEquals $(@expr1073748377 "cppcheck-2.8/test/testother.cpp" $, 7154 $, "" $, errout@var100 .@expr6530 str (@expr6531 ) $) $) { $return ; }
7155: }
7156:
7157: void checkSuspiciousSemicolon3 ( ) {
7158: checkP (@expr1073748380 "#define REQUIRE(code) {code}\nvoid foo() {\n  if (x == 123);\n  REQUIRE(y=z);\n}"
7159:
7160:
7161:
7162: ) ;
7163: $if $(@expr1073748381 $!@expr1073748382 $assertEquals $(@expr1073748383 "cppcheck-2.8/test/testother.cpp" $, 7163 $, "" $, errout@var100 .@expr1073748384 str (@expr1073748385 ) $) $) { $return ; }
7164: }
7165:
7166: void checkSuspiciousComparison ( ) {
7167: checkP (@expr1073748386 "void f(int a, int b) {\n  a > b;\n}"
7168:
7169: ) ;
7170: $if $(@expr1073748387 $!@expr1073748388 $assertEquals $(@expr1073748389 "cppcheck-2.8/test/testother.cpp" $, 7170 $, "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '>', result is not used.\n" $, errout@var100 .@expr6566 str (@expr6567 ) $) $) { $return ; }
7171:
7172: checkP (@expr1073748392 "void f() {\n  for (auto p : m)\n    std::vector<std::pair<std::string, std::string>> k;\n}"
7173:
7174:
7175: ) ;
7176: $if $(@expr1073748393 $!@expr1073748394 $assertEquals $(@expr1073748395 "cppcheck-2.8/test/testother.cpp" $, 7176 $, "" $, errout@var100 .@expr6566 str (@expr6567 ) $) $) { $return ; }
7177: }
7178:
7179: void checkInvalidFree ( ) {
7180: $check_ $(@expr1073748398 "cppcheck-2.8/test/testother.cpp" $, 7180 $, "void foo(char *p) {\n  char *a; a = malloc(1024);\n  free(a + 10);\n}" $)
7181:
7182:
7183: ;
7184: $if $(@expr1073748399 $!@expr1073748400 $assertEquals $(@expr1073748401 "cppcheck-2.8/test/testother.cpp" $, 7184 $, "[test.cpp:3]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7185:
7186: $check_ $(@expr1073748404 "cppcheck-2.8/test/testother.cpp" $, 7186 $, "void foo(char *p) {\n  char *a; a = malloc(1024);\n  free(a - 10);\n}" $)
7187:
7188:
7189: ;
7190: $if $(@expr1073748405 $!@expr1073748406 $assertEquals $(@expr1073748407 "cppcheck-2.8/test/testother.cpp" $, 7190 $, "[test.cpp:3]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7191:
7192: $check_ $(@expr1073748410 "cppcheck-2.8/test/testother.cpp" $, 7192 $, "void foo(char *p) {\n  char *a; a = malloc(1024);\n  free(10 + a);\n}" $)
7193:
7194:
7195: ;
7196: $if $(@expr1073748411 $!@expr1073748412 $assertEquals $(@expr1073748413 "cppcheck-2.8/test/testother.cpp" $, 7196 $, "[test.cpp:3]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7197:
7198: $check_ $(@expr1073748416 "cppcheck-2.8/test/testother.cpp" $, 7198 $, "void foo(char *p) {\n  char *a; a = new char[1024];\n  delete[] (a + 10);\n}" $)
7199:
7200:
7201: ;
7202: $if $(@expr1073748417 $!@expr1073748418 $assertEquals $(@expr1073748419 "cppcheck-2.8/test/testother.cpp" $, 7202 $, "[test.cpp:3]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7203:
7204: $check_ $(@expr1073748422 "cppcheck-2.8/test/testother.cpp" $, 7204 $, "void foo(char *p) {\n  char *a; a = new char;\n  delete a + 10;\n}" $)
7205:
7206:
7207: ;
7208: $if $(@expr1073748423 $!@expr1073748424 $assertEquals $(@expr1073748425 "cppcheck-2.8/test/testother.cpp" $, 7208 $, "[test.cpp:3]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7209:
7210: $check_ $(@expr1073748428 "cppcheck-2.8/test/testother.cpp" $, 7210 $, "void foo(char *p) {\n  char *a; a = new char;\n  bar(a);\n  delete a + 10;\n}" $)
7211:
7212:
7213:
7214: ;
7215: $if $(@expr1073748429 $!@expr1073748430 $assertEquals $(@expr1073748431 "cppcheck-2.8/test/testother.cpp" $, 7215 $, "" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7216:
7217: $check_ $(@expr1073748434 "cppcheck-2.8/test/testother.cpp" $, 7217 $, "void foo(char *p) {\n  char *a; a = new char;\n  char *b; b = new char;\n  bar(a);\n  delete a + 10;\n  delete b + 10;\n}" $)
7218:
|
7222:
7223: ;
7224: $if $(@expr1073748435 $!@expr1073748436 $assertEquals $(@expr1073748437 "cppcheck-2.8/test/testother.cpp" $, 7224 $, "[test.cpp:6]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7225:
7226: $check_ $(@expr1073748440 "cppcheck-2.8/test/testother.cpp" $, 7226 $, "void foo(char *p) {\n  char *a; a = new char;\n  char *b; b = new char;\n  bar(a, b);\n  delete a + 10;\n  delete b + 10;\n}" $)
7227:
|
7231:
7232: ;
7233: $if $(@expr1073748441 $!@expr1073748442 $assertEquals $(@expr1073748443 "cppcheck-2.8/test/testother.cpp" $, 7233 $, "" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7234:
7235: $check_ $(@expr1073748446 "cppcheck-2.8/test/testother.cpp" $, 7235 $, "void foo(char *p) {\n  char *a; a = new char;\n  bar()\n  delete a + 10;\n}" $)
7236:
7237:
7238:
7239: ;
7240: $if $(@expr1073748447 $!@expr1073748448 $assertEquals $(@expr1073748449 "cppcheck-2.8/test/testother.cpp" $, 7240 $, "[test.cpp:4]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7241:
7242: $check_ $(@expr1073748452 "cppcheck-2.8/test/testother.cpp" $, 7242 $, "void foo(size_t xx) {\n  char *ptr; ptr = malloc(42);\n  ptr += xx;\n  free(ptr + 1 - xx);\n}" $)
7243:
7244:
7245:
7246: ;
7247: $if $(@expr1073748453 $!@expr1073748454 $assertEquals $(@expr1073748455 "cppcheck-2.8/test/testother.cpp" $, 7247 $, "[test.cpp:4]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7248:
7249: $check_ $(@expr1073748458 "cppcheck-2.8/test/testother.cpp" $, 7249 $, "void foo(size_t xx) {\n  char *ptr; ptr = malloc(42);\n  std::cout << ptr;\n  ptr = otherPtr;\n  free(otherPtr - xx - 1);\n}" $)
7250:
|
7253:
7254: ;
7255: $if $(@expr1073748459 $!@expr1073748460 $assertEquals $(@expr1073748461 "cppcheck-2.8/test/testother.cpp" $, 7255 $, "" $, errout@var100 .@expr6578 str (@expr6579 ) $) $) { $return ; }
7256: }
7257:
7258: void checkRedundantCopy ( ) {
7259: $check_ $(@expr1073748464 "cppcheck-2.8/test/testother.cpp" $, 7259 $, "const std::string& getA(){static std::string a;return a;}\nvoid foo() {\n    const std::string a = getA();\n}" $)
7260:
7261:
7262: ;
7263: $if $(@expr1073748465 $!@expr1073748466 $assertEquals $(@expr1073748467 "cppcheck-2.8/test/testother.cpp" $, 7263 $, "[test.cpp:3]: (performance, inconclusive) Use const reference for 'a' to avoid unnecessary data copying.\n" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7264:
7265: $check_ $(@expr1073748470 "cppcheck-2.8/test/testother.cpp" $, 7265 $, "class A{public:A(){}};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a = getA();\n    return 0;\n}" $)
7266:
|
7270:
7271: ;
7272: $if $(@expr1073748471 $!@expr1073748472 $assertEquals $(@expr1073748473 "cppcheck-2.8/test/testother.cpp" $, 7272 $, "[test.cpp:5]: (performance, inconclusive) Use const reference for 'a' to avoid unnecessary data copying.\n" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7273:
7274: $check_ $(@expr1073748476 "cppcheck-2.8/test/testother.cpp" $, 7274 $, "const int& getA(){static int a;return a;}\nint main()\n{\n    const int a = getA();\n    return 0;\n}" $)
7275:
|
7278:
7279: ;
7280: $if $(@expr1073748477 $!@expr1073748478 $assertEquals $(@expr1073748479 "cppcheck-2.8/test/testother.cpp" $, 7280 $, "" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7281:
7282: $check_ $(@expr1073748482 "cppcheck-2.8/test/testother.cpp" $, 7282 $, "const int& getA(){static int a;return a;}\nint main()\n{\n    int getA = 0;\n    const int a = getA + 3;\n    return 0;\n}" $)
7283:
|
7287:
7288: ;
7289: $if $(@expr1073748483 $!@expr1073748484 $assertEquals $(@expr1073748485 "cppcheck-2.8/test/testother.cpp" $, 7289 $, "[test.cpp:1] -> [test.cpp:4]: (style) Local variable \'getA\' shadows outer function\n" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7290:
7291: $check_ $(@expr1073748488 "cppcheck-2.8/test/testother.cpp" $, 7291 $, "class A{public:A(){}};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a(getA());\n    return 0;\n}" $)
7292:
|
7296:
7297: ;
7298: $if $(@expr1073748489 $!@expr1073748490 $assertEquals $(@expr1073748491 "cppcheck-2.8/test/testother.cpp" $, 7298 $, "[test.cpp:5]: (performance, inconclusive) Use const reference for 'a' to avoid unnecessary data copying.\n" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7299:
7300: $check_ $(@expr1073748494 "cppcheck-2.8/test/testother.cpp" $, 7300 $, "const int& getA(){static int a;return a;}\nint main()\n{\n    const int a(getA());\n    return 0;\n}" $)
7301:
|
7304:
7305: ;
7306: $if $(@expr1073748495 $!@expr1073748496 $assertEquals $(@expr1073748497 "cppcheck-2.8/test/testother.cpp" $, 7306 $, "" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7307:
7308: $check_ $(@expr1073748500 "cppcheck-2.8/test/testother.cpp" $, 7308 $, "class A{\npublic:A(int a=0){_a = a;}\nA operator+(const A & a){return A(_a+a._a);}\nprivate:int _a;};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a = getA() + 1;\n    return 0;\n}" $)
7309:
|
7316:
7317: ;
7318: $if $(@expr1073748501 $!@expr1073748502 $assertEquals $(@expr1073748503 "cppcheck-2.8/test/testother.cpp" $, 7318 $, "" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7319:
7320: $check_ $(@expr1073748506 "cppcheck-2.8/test/testother.cpp" $, 7320 $, "class A{\npublic:A(int a=0){_a = a;}\nA operator+(const A & a){return A(_a+a._a);}\nprivate:int _a;};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a(getA()+1);\n    return 0;\n}" $)
7321:
|
7328:
7329: ;
7330: $if $(@expr1073748507 $!@expr1073748508 $assertEquals $(@expr1073748509 "cppcheck-2.8/test/testother.cpp" $, 7330 $, "" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7331:
7332:
7333: $check_ $(@expr1073748512 "cppcheck-2.8/test/testother.cpp" $, 7333 $, "class A {};\nclass B { B(const A &a); };\nconst A &getA();\nvoid f() {\n    const B b(getA());\n}" $)
7334:
|
7337:
7338: ;
7339: $if $(@expr1073748513 $!@expr1073748514 $assertEquals $(@expr1073748515 "cppcheck-2.8/test/testother.cpp" $, 7339 $, "" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7340:
7341:
7342: const char * code5618@var199 ; code5618@var199 =@expr1073748518 "class Token {\npublic:\n    const std::string& str();\n};\nvoid simplifyArrayAccessSyntax() {\n    for (Token *tok = list.front(); tok; tok = tok->next()) {\n        const std::string temp = tok->str();\n        tok->str(tok->strAt(2));\n    }\n}"
7343:
|
7350:
7351: ;
7352: $check_ $(@expr1073748519 "cppcheck-2.8/test/testother.cpp" $, 7352 $, code5618@var199 , nullptr , false , true $) ;
7353: $todoAssertEquals $(@expr1073748520 "cppcheck-2.8/test/testother.cpp" $, 7353 $, "" $, "[test.cpp:7]: (performance, inconclusive) Use const reference for 'temp' to avoid unnecessary data copying.\n" $, errout@var100 .@expr6644 str (@expr6645 ) $) ;
7354: $check_ $(@expr1073748523 "cppcheck-2.8/test/testother.cpp" $, 7354 $, code5618@var199 , nullptr , false , false $) ;
7355: $if $(@expr1073748524 $!@expr1073748525 $assertEquals $(@expr1073748526 "cppcheck-2.8/test/testother.cpp" $, 7355 $, "" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7356:
7357:
7358: $check_ $(@expr1073748529 "cppcheck-2.8/test/testother.cpp" $, 7358 $, "typedef std::vector<char> X;\nX f<X>(const X &in) {\n    const X s = f<X>(in);\n    return f<X>(s);\n}" $)
7359:
7360:
7361:
7362: ;
7363: $if $(@expr1073748530 $!@expr1073748531 $assertEquals $(@expr1073748532 "cppcheck-2.8/test/testother.cpp" $, 7363 $, "" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7364:
7365:
7366: $check_ $(@expr1073748535 "cppcheck-2.8/test/testother.cpp" $, 7366 $, "class CD {\n        public:\n        CD(const CD&);\n        static const CD& getOne();\n};\n \nvoid foo() {\n  const CD cd(CD::getOne());\n}" , nullptr , false , true $)
7367:
|
7373:
7374: ;
7375: $if $(@expr1073748536 $!@expr1073748537 $assertEquals $(@expr1073748538 "cppcheck-2.8/test/testother.cpp" $, 7375 $, "" $, errout@var100 .@expr6644 str (@expr6645 ) $) $) { $return ; }
7376: }
7377:
7378: void checkNegativeShift ( ) {
7379: $check_ $(@expr1073748541 "cppcheck-2.8/test/testother.cpp" $, 7379 $, "void foo()\n{\n   int a; a = 123;\n   (void)(a << -1);\n}" $)
7380:
7381:
7382:
7383: ;
7384: $if $(@expr1073748542 $!@expr1073748543 $assertEquals $(@expr1073748544 "cppcheck-2.8/test/testother.cpp" $, 7384 $, "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7385: $check_ $(@expr1073748547 "cppcheck-2.8/test/testother.cpp" $, 7385 $, "void foo()\n{\n   int a; a = 123;\n   (void)(a >> -1);\n}" $)
7386:
7387:
7388:
7389: ;
7390: $if $(@expr1073748548 $!@expr1073748549 $assertEquals $(@expr1073748550 "cppcheck-2.8/test/testother.cpp" $, 7390 $, "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7391: $check_ $(@expr1073748553 "cppcheck-2.8/test/testother.cpp" $, 7391 $, "void foo()\n{\n   int a; a = 123;\n   a <<= -1;\n}" $)
7392:
7393:
7394:
7395: ;
7396: $if $(@expr1073748554 $!@expr1073748555 $assertEquals $(@expr1073748556 "cppcheck-2.8/test/testother.cpp" $, 7396 $, "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7397: $check_ $(@expr1073748559 "cppcheck-2.8/test/testother.cpp" $, 7397 $, "void foo()\n{\n   int a; a = 123;\n   a >>= -1;\n}" $)
7398:
7399:
7400:
7401: ;
7402: $if $(@expr1073748560 $!@expr1073748561 $assertEquals $(@expr1073748562 "cppcheck-2.8/test/testother.cpp" $, 7402 $, "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7403: $check_ $(@expr1073748565 "cppcheck-2.8/test/testother.cpp" $, 7403 $, "void foo()\n{\n   std::cout << -1;\n}" $)
7404:
7405:
7406: ;
7407: $if $(@expr1073748566 $!@expr1073748567 $assertEquals $(@expr1073748568 "cppcheck-2.8/test/testother.cpp" $, 7407 $, "" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7408: $check_ $(@expr1073748571 "cppcheck-2.8/test/testother.cpp" $, 7408 $, "void foo()\n{\n   std::cout << a << -1 ;\n}" $)
7409:
7410:
7411: ;
7412: $if $(@expr1073748572 $!@expr1073748573 $assertEquals $(@expr1073748574 "cppcheck-2.8/test/testother.cpp" $, 7412 $, "" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7413: $check_ $(@expr1073748577 "cppcheck-2.8/test/testother.cpp" $, 7413 $, "void foo()\n{\n   std::cout << 3 << -1 ;\n}" $)
7414:
7415:
7416: ;
7417: $if $(@expr1073748578 $!@expr1073748579 $assertEquals $(@expr1073748580 "cppcheck-2.8/test/testother.cpp" $, 7417 $, "" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7418: $check_ $(@expr1073748583 "cppcheck-2.8/test/testother.cpp" $, 7418 $, "void foo() {\n   x = (-10+2) << 3;\n}" $)
7419:
7420: ;
7421: $if $(@expr1073748584 $!@expr1073748585 $assertEquals $(@expr1073748586 "cppcheck-2.8/test/testother.cpp" $, 7421 $, "[test.cpp:2]: (portability) Shifting a negative value is technically undefined behaviour\n" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7422:
7423: $check_ $(@expr1073748589 "cppcheck-2.8/test/testother.cpp" $, 7423 $, "x = y ? z << $-1 : 0;" $) ;
7424: $if $(@expr1073748590 $!@expr1073748591 $assertEquals $(@expr1073748592 "cppcheck-2.8/test/testother.cpp" $, 7424 $, "" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7425:
7426:
7427: $check_ $(@expr1073748595 "cppcheck-2.8/test/testother.cpp" $, 7427 $, "const int x = -1 >> 2;" $) ;
7428: $if $(@expr1073748596 $!@expr1073748597 $assertEquals $(@expr1073748598 "cppcheck-2.8/test/testother.cpp" $, 7428 $, "[test.cpp:1]: (portability) Shifting a negative value is technically undefined behaviour\n" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7429:
7430:
7431: $check_ $(@expr1073748601 "cppcheck-2.8/test/testother.cpp" $, 7431 $, "const int x = (unsigned int)(-1) >> 2;" $) ;
7432: $if $(@expr1073748602 $!@expr1073748603 $assertEquals $(@expr1073748604 "cppcheck-2.8/test/testother.cpp" $, 7432 $, "" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return ; }
7433:
7434:
7435: $check_ $(@expr1073748607 "cppcheck-2.8/test/testother.cpp" $, 7435 $, "int shift1() { return 1 >> -1 ;}\nint shift2() { return 1 << -1 ;}\nint shift3() { return -1 >> 1 ;}\nint shift4() { return -1 << 1 ;}" $)
7436:
7437:
7438: ;
7439: $if $(@expr1073748608 $!@expr1073748609 $assertEquals $(@expr1073748610 "cppcheck-2.8/test/testother.cpp" $, 7439 $, "[test.cpp:1]: (error) Shifting by a negative value is undefined behaviour\n[test.cpp:2]: (error) Shifting by a negative value is undefined behaviour\n[test.cpp:3]: (portability) Shifting a negative value is technically undefined behaviour\n[test.cpp:4]: (portability) Shifting a negative value is technically undefined behaviour\n" $, errout@var100 .@expr6721 str (@expr6722 ) $) $) { $return
7440:
7441:
7442: ; }
7443: }
7444:
7445: void incompleteArrayFill ( ) {
7446: $check_ $(@expr1073748613 "cppcheck-2.8/test/testother.cpp" $, 7446 $, "void f() {\n    int a[5];\n    memset(a, 123, 5);\n    memcpy(a, b, 5);\n    memmove(a, b, 5);\n}" $)
7447:
|
7450:
7451: ;
7452: $if $(@expr1073748614 $!@expr1073748615 $assertEquals $(@expr1073748616 "cppcheck-2.8/test/testother.cpp" $, 7452 $, "[test.cpp:3]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n[test.cpp:4]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memcpy()' with 'sizeof(*a)'?\n[test.cpp:5]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memmove()' with 'sizeof(*a)'?\n" $, errout@var100 .@expr6793 str (@expr6794 ) $) $) { $return
7453:
7454:
7455: ; }
7456:
7457: $check_ $(@expr1073748619 "cppcheck-2.8/test/testother.cpp" $, 7457 $, "void f() {\n    Foo* a[5];\n    memset(a, 'a', 5);\n}" $)
7458:
7459:
7460: ;
7461: $if $(@expr1073748620 $!@expr1073748621 $assertEquals $(@expr1073748622 "cppcheck-2.8/test/testother.cpp" $, 7461 $, "[test.cpp:3]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n" $, errout@var100 .@expr6793 str (@expr6794 ) $) $) { $return ; }
7462:
7463: $check_ $(@expr1073748625 "cppcheck-2.8/test/testother.cpp" $, 7463 $, "class Foo {int a; int b;};\nvoid f() {\n    Foo a[5];\n    memset(a, 'a', 5);\n}" $)
7464:
7465:
7466:
7467: ;
7468: $if $(@expr1073748626 $!@expr1073748627 $assertEquals $(@expr1073748628 "cppcheck-2.8/test/testother.cpp" $, 7468 $, "[test.cpp:4]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n" $, errout@var100 .@expr6793 str (@expr6794 ) $) $) { $return ; }
7469:
7470: $check_ $(@expr1073748631 "cppcheck-2.8/test/testother.cpp" $, 7470 $, "void f() {\n    Foo a[5];\n    memset(a, 'a', 5);\n}" $)
7471:
7472:
7473: ;
7474: $if $(@expr1073748632 $!@expr1073748633 $assertEquals $(@expr1073748634 "cppcheck-2.8/test/testother.cpp" $, 7474 $, "" $, errout@var100 .@expr6793 str (@expr6794 ) $) $) { $return ; }
7475:
7476: $check_ $(@expr1073748637 "cppcheck-2.8/test/testother.cpp" $, 7476 $, "void f() {\n    char a[5];\n    memset(a, 'a', 5);\n}" $)
7477:
7478:
7479: ;
7480: $if $(@expr1073748638 $!@expr1073748639 $assertEquals $(@expr1073748640 "cppcheck-2.8/test/testother.cpp" $, 7480 $, "" $, errout@var100 .@expr6793 str (@expr6794 ) $) $) { $return ; }
7481:
7482: $check_ $(@expr1073748643 "cppcheck-2.8/test/testother.cpp" $, 7482 $, "void f() {\n    int a[5];\n    memset(a+15, 'a', 5);\n}" $)
7483:
7484:
7485: ;
7486: $if $(@expr1073748644 $!@expr1073748645 $assertEquals $(@expr1073748646 "cppcheck-2.8/test/testother.cpp" $, 7486 $, "" $, errout@var100 .@expr6793 str (@expr6794 ) $) $) { $return ; }
7487:
7488: $check_ $(@expr1073748649 "cppcheck-2.8/test/testother.cpp" $, 7488 $, "void f() {\n    bool a[5];\n    memset(a, false, 5);\n}" $)
7489:
7490:
7491: ;
7492: $if $(@expr1073748650 $!@expr1073748651 $assertEquals $(@expr1073748652 "cppcheck-2.8/test/testother.cpp" $, 7492 $, "[test.cpp:3]: (portability, inconclusive) Array 'a' might be filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n" $, errout@var100 .@expr6793 str (@expr6794 ) $) $) { $return ; }
7493: }
7494:
7495: void redundantVarAssignment ( ) {
7496: setMultiline (@expr1073748655 ) ;
7497:
7498:
7499: $check_ $(@expr1073748656 "cppcheck-2.8/test/testother.cpp" $, 7499 $, "void f(int i) {\n    i = 1;\n    i = 1;\n}" $)
7500:
7501:
7502: ;
7503: $if $(@expr1073748657 $!@expr1073748658 $assertEquals $(@expr1073748659 "cppcheck-2.8/test/testother.cpp" $, 7503 $, "test.cpp:3:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:2:note:i is assigned\ntest.cpp:3:note:i is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7504:
7505: ; }
7506:
7507:
7508: $check_ $(@expr1073748662 "cppcheck-2.8/test/testother.cpp" $, 7508 $, "int i;\nvoid f() {\n    i = 1;\n    i = 1;\n}" $)
7509:
7510:
7511:
7512: ;
7513: $if $(@expr1073748663 $!@expr1073748664 $assertEquals $(@expr1073748665 "cppcheck-2.8/test/testother.cpp" $, 7513 $, "test.cpp:4:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i is assigned\ntest.cpp:4:note:i is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7514:
7515: ; }
7516:
7517: $check_ $(@expr1073748668 "cppcheck-2.8/test/testother.cpp" $, 7517 $, "void f() {\n    int i;\n    i = 1;\n    i = 1;\n}" $)
7518:
7519:
7520:
7521: ;
7522: $if $(@expr1073748669 $!@expr1073748670 $assertEquals $(@expr1073748671 "cppcheck-2.8/test/testother.cpp" $, 7522 $, "test.cpp:4:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i is assigned\ntest.cpp:4:note:i is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7523:
7524: ; }
7525:
7526: $check_ $(@expr1073748674 "cppcheck-2.8/test/testother.cpp" $, 7526 $, "void f() {\n    static int i;\n    i = 1;\n    i = 1;\n}" $)
7527:
7528:
7529:
7530: ;
7531: $todoAssertEquals $(@expr1073748675 "cppcheck-2.8/test/testother.cpp" $, 7531 $, "error" $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) ;
7532:
7533: $check_ $(@expr1073748678 "cppcheck-2.8/test/testother.cpp" $, 7533 $, "void f() {\n    int i[10];\n    i[2] = 1;\n    i[2] = 1;\n}" $)
7534:
7535:
7536:
7537: ;
7538: $if $(@expr1073748679 $!@expr1073748680 $assertEquals $(@expr1073748681 "cppcheck-2.8/test/testother.cpp" $, 7538 $, "test.cpp:4:style:Variable 'i[2]' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i[2] is assigned\ntest.cpp:4:note:i[2] is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7539:
7540: ; }
7541:
7542: $check_ $(@expr1073748684 "cppcheck-2.8/test/testother.cpp" $, 7542 $, "void f(int x) {\n    int i[10];\n    i[x] = 1;\n    x=1;\n    i[x] = 1;\n}" $)
7543:
|
7546:
7547: ;
7548: $if $(@expr1073748685 $!@expr1073748686 $assertEquals $(@expr1073748687 "cppcheck-2.8/test/testother.cpp" $, 7548 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7549:
7550: $check_ $(@expr1073748690 "cppcheck-2.8/test/testother.cpp" $, 7550 $, "void f(const int x) {\n    int i[10];\n    i[x] = 1;\n    i[x] = 1;\n}" $)
7551:
7552:
7553:
7554: ;
7555: $if $(@expr1073748691 $!@expr1073748692 $assertEquals $(@expr1073748693 "cppcheck-2.8/test/testother.cpp" $, 7555 $, "test.cpp:4:style:Variable 'i[x]' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i[x] is assigned\ntest.cpp:4:note:i[x] is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7556:
7557: ; }
7558:
7559:
7560: $check_ $(@expr1073748696 "cppcheck-2.8/test/testother.cpp" $, 7560 $, "void f() {\n    Foo& bar = foo();\n    bar = x;\n}" $)
7561:
7562:
7563: ;
7564: $if $(@expr1073748697 $!@expr1073748698 $assertEquals $(@expr1073748699 "cppcheck-2.8/test/testother.cpp" $, 7564 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7565:
7566: $check_ $(@expr1073748702 "cppcheck-2.8/test/testother.cpp" $, 7566 $, "void f() {\n    Foo& bar = foo();\n    bar = x;\n    bar = y;\n}" $)
7567:
7568:
7569:
7570: ;
7571: $todoAssertEquals $(@expr1073748703 "cppcheck-2.8/test/testother.cpp" $, 7571 $, "error" $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) ;
7572:
7573: $check_ $(@expr1073748706 "cppcheck-2.8/test/testother.cpp" $, 7573 $, "void f() {\n    Foo& bar = foo();\n    bar = y();\n    foo();\n    bar = y();\n}" $)
7574:
|
7577:
7578: ;
7579: $if $(@expr1073748707 $!@expr1073748708 $assertEquals $(@expr1073748709 "cppcheck-2.8/test/testother.cpp" $, 7579 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7580:
7581:
7582: $check_ $(@expr1073748712 "cppcheck-2.8/test/testother.cpp" $, 7582 $, "void f(int i) {\n    i = 1;\n    bar();\n    i = 1;\n}" $)
7583:
7584:
7585:
7586: ;
7587: $if $(@expr1073748713 $!@expr1073748714 $assertEquals $(@expr1073748715 "cppcheck-2.8/test/testother.cpp" $, 7587 $, "test.cpp:4:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:2:note:i is assigned\ntest.cpp:4:note:i is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7588:
7589: ; }
7590:
7591: $check_ $(@expr1073748718 "cppcheck-2.8/test/testother.cpp" $, 7591 $, "int i;\nvoid f() {\n    i = 1;\n    bar();\n    i = 1;\n}" $)
7592:
|
7595:
7596: ;
7597: $if $(@expr1073748719 $!@expr1073748720 $assertEquals $(@expr1073748721 "cppcheck-2.8/test/testother.cpp" $, 7597 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7598:
7599: $check_ $(@expr1073748724 "cppcheck-2.8/test/testother.cpp" $, 7599 $, "void f() {\n    static int i;\n    i = 1;\n    bar();\n    i = 2;\n}" $)
7600:
|
7603:
7604: ;
7605: $if $(@expr1073748725 $!@expr1073748726 $assertEquals $(@expr1073748727 "cppcheck-2.8/test/testother.cpp" $, 7605 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7606:
7607: $check_ $(@expr1073748730 "cppcheck-2.8/test/testother.cpp" $, 7607 $, "void f() {\n    int i;\n    i = 1;\n    bar();\n    i = 1;\n}" $)
7608:
|
7611:
7612: ;
7613: $if $(@expr1073748731 $!@expr1073748732 $assertEquals $(@expr1073748733 "cppcheck-2.8/test/testother.cpp" $, 7613 $, "test.cpp:5:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i is assigned\ntest.cpp:5:note:i is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7614:
7615: ; }
7616:
7617: $check_ $(@expr1073748736 "cppcheck-2.8/test/testother.cpp" $, 7617 $, "void bar(int i) {}\nvoid f(int i) {\n    i = 1;\n    bar(i);\n    i = 1;\n}" $)
7618:
|
7621:
7622: ;
7623: $if $(@expr1073748737 $!@expr1073748738 $assertEquals $(@expr1073748739 "cppcheck-2.8/test/testother.cpp" $, 7623 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7624:
7625: $check_ $(@expr1073748742 "cppcheck-2.8/test/testother.cpp" $, 7625 $, "void f() {\n    Foo bar = foo();\n    bar();\n    bar = y();\n}" $)
7626:
7627:
7628:
7629: ;
7630: $if $(@expr1073748743 $!@expr1073748744 $assertEquals $(@expr1073748745 "cppcheck-2.8/test/testother.cpp" $, 7630 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7631:
7632:
7633: $check_ $(@expr1073748748 "cppcheck-2.8/test/testother.cpp" $, 7633 $, "void f(int i) {\n    i = 1;\n    if(x)\n        i = 0;\n}" $)
7634:
7635:
7636:
7637: ;
7638: $if $(@expr1073748749 $!@expr1073748750 $assertEquals $(@expr1073748751 "cppcheck-2.8/test/testother.cpp" $, 7638 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7639:
7640: $check_ $(@expr1073748754 "cppcheck-2.8/test/testother.cpp" $, 7640 $, "void f(int i) {\n    if(x)\n        i = 0;\n    i = 1;\n    i = 2;\n}" $)
7641:
|
7644:
7645: ;
7646: $if $(@expr1073748755 $!@expr1073748756 $assertEquals $(@expr1073748757 "cppcheck-2.8/test/testother.cpp" $, 7646 $, "test.cpp:5:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:4:note:i is assigned\ntest.cpp:5:note:i is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7647:
7648: ; }
7649:
7650:
7651: $check_ $(@expr1073748760 "cppcheck-2.8/test/testother.cpp" $, 7651 $, "int x;\nint g() {\n    return x*x;\n}\nvoid f() {\n    x = 2;\n    x = g();\n}" $)
7652:
|
7657:
7658: ;
7659: $if $(@expr1073748761 $!@expr1073748762 $assertEquals $(@expr1073748763 "cppcheck-2.8/test/testother.cpp" $, 7659 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7660:
7661: $check_ $(@expr1073748766 "cppcheck-2.8/test/testother.cpp" $, 7661 $, "int g() {\n    return x*x;\n}\nvoid f(int x) {\n    x = 2;\n    x = g();\n}" $)
7662:
|
7666:
7667: ;
7668: $if $(@expr1073748767 $!@expr1073748768 $assertEquals $(@expr1073748769 "cppcheck-2.8/test/testother.cpp" $, 7668 $, "test.cpp:6:style:Variable 'x' is reassigned a value before the old one has been used.\ntest.cpp:5:note:x is assigned\ntest.cpp:6:note:x is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7669:
7670: ; }
7671:
7672: $check_ $(@expr1073748772 "cppcheck-2.8/test/testother.cpp" $, 7672 $, "void f() {\n    Foo& bar = foo();\n    bar = x;\n    bar = y();\n}" $)
7673:
7674:
7675:
7676: ;
7677: $if $(@expr1073748773 $!@expr1073748774 $assertEquals $(@expr1073748775 "cppcheck-2.8/test/testother.cpp" $, 7677 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7678:
7679: $check_ $(@expr1073748778 "cppcheck-2.8/test/testother.cpp" $, 7679 $, "class C {\n    int x;\n    void g() { return x * x; }\n    void f();\n};\n\nvoid C::f() {\n    x = 2;\n    x = g();\n}" $)
7680:
|
7687:
7688: ;
7689: $if $(@expr1073748779 $!@expr1073748780 $assertEquals $(@expr1073748781 "cppcheck-2.8/test/testother.cpp" $, 7689 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7690:
7691: $check_ $(@expr1073748784 "cppcheck-2.8/test/testother.cpp" $, 7691 $, "class C {\n    int x;\n    void g() { return x*x; }\n    void f(Foo z);\n};\n\nvoid C::f(Foo z) {\n    x = 2;\n    x = z.g();\n}" $)
7692:
|
7699:
7700: ;
7701: $if $(@expr1073748785 $!@expr1073748786 $assertEquals $(@expr1073748787 "cppcheck-2.8/test/testother.cpp" $, 7701 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7702:
7703:
7704: $check_ $(@expr1073748790 "cppcheck-2.8/test/testother.cpp" $, 7704 $, "void f() {\n  int x;\n  x = 321;\n  x = ({ asm(123); })\n}" $)
7705:
7706:
7707:
7708: ;
7709: $if $(@expr1073748791 $!@expr1073748792 $assertEquals $(@expr1073748793 "cppcheck-2.8/test/testother.cpp" $, 7709 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7710:
7711:
7712: $check_ $(@expr1073748796 "cppcheck-2.8/test/testother.cpp" $, 7712 $, "int foo(){\n    int x;\n    x = 1;\n    x = 1;\n    return x + 1;\n}" $)
7713:
|
7716:
7717: ;
7718: $if $(@expr1073748797 $!@expr1073748798 $assertEquals $(@expr1073748799 "cppcheck-2.8/test/testother.cpp" $, 7718 $, "test.cpp:4:style:Variable 'x' is reassigned a value before the old one has been used.\ntest.cpp:3:note:x is assigned\ntest.cpp:4:note:x is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7719:
7720: ; }
7721:
7722:
7723: $check_ $(@expr1073748802 "cppcheck-2.8/test/testother.cpp" $, 7723 $, "int foo(){\n    int x;\n    x = 1;\n    if (y)\n        x = 2;\n    return x + 1;\n}" $)
7724:
|
7728:
7729: ;
7730: $if $(@expr1073748803 $!@expr1073748804 $assertEquals $(@expr1073748805 "cppcheck-2.8/test/testother.cpp" $, 7730 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7731:
7732:
7733: $check_ $(@expr1073748808 "cppcheck-2.8/test/testother.cpp" $, 7733 $, "void f() {\n    int x = 0;\n    x = 3;\n}" $)
7734:
7735:
7736: ;
7737: $if $(@expr1073748809 $!@expr1073748810 $assertEquals $(@expr1073748811 "cppcheck-2.8/test/testother.cpp" $, 7737 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7738:
7739: $check_ $(@expr1073748814 "cppcheck-2.8/test/testother.cpp" $, 7739 $, "void f() {\n  state_t *x = NULL;\n  x = dostuff();\n}" $)
7740:
7741:
7742: ;
7743: $if $(@expr1073748815 $!@expr1073748816 $assertEquals $(@expr1073748817 "cppcheck-2.8/test/testother.cpp" $, 7743 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7744:
7745: $check_ $(@expr1073748820 "cppcheck-2.8/test/testother.cpp" $, 7745 $, "void f() {\n  state_t *x;\n  x = NULL;\n  x = dostuff();\n}" $)
7746:
7747:
7748:
7749: ;
7750: $if $(@expr1073748821 $!@expr1073748822 $assertEquals $(@expr1073748823 "cppcheck-2.8/test/testother.cpp" $, 7750 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7751:
7752: $check_ $(@expr1073748826 "cppcheck-2.8/test/testother.cpp" $, 7752 $, "int foo() {\n    int x;\n    bar(++x);\n    x = 5;\n    return bar(x);\n}" $)
7753:
|
7756:
7757: ;
7758: $if $(@expr1073748827 $!@expr1073748828 $assertEquals $(@expr1073748829 "cppcheck-2.8/test/testother.cpp" $, 7758 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7759:
7760:
7761: $check_ $(@expr1073748832 "cppcheck-2.8/test/testother.cpp" $, 7761 $, "struct AB { int a; int b; };\n\nint f() {\n    struct AB ab;\n    ab.a = 1;\n    ab.a = 2;\n    return ab.a;\n}" $)
7762:
|
7767:
7768: ;
7769: $if $(@expr1073748833 $!@expr1073748834 $assertEquals $(@expr1073748835 "cppcheck-2.8/test/testother.cpp" $, 7769 $, "test.cpp:6:style:Variable 'ab.a' is reassigned a value before the old one has been used.\ntest.cpp:5:note:ab.a is assigned\ntest.cpp:6:note:ab.a is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7770:
7771: ; }
7772:
7773: $check_ $(@expr1073748838 "cppcheck-2.8/test/testother.cpp" $, 7773 $, "struct AB { int a; int b; };\n\nint f() {\n    struct AB ab;\n    ab.a = 1;\n    ab = do_something();\n    return ab.a;\n}" $)
7774:
|
7779:
7780: ;
7781: $todoAssertEquals $(@expr1073748839 "cppcheck-2.8/test/testother.cpp" $, 7781 $, "error" $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) ;
7782:
7783: $check_ $(@expr1073748842 "cppcheck-2.8/test/testother.cpp" $, 7783 $, "struct AB { int a; int b; };\n\nint f() {\n    struct AB ab;\n    ab.a = 1;\n    do_something(&ab);\n    ab.a = 2;\n    return ab.a;\n}" $)
7784:
|
7790:
7791: ;
7792: $if $(@expr1073748843 $!@expr1073748844 $assertEquals $(@expr1073748845 "cppcheck-2.8/test/testother.cpp" $, 7792 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7793:
7794: $check_ $(@expr1073748848 "cppcheck-2.8/test/testother.cpp" $, 7794 $, "struct AB { int a; int b; };\n\nint f(DO_SOMETHING do_something) {\n    struct AB ab;\n    ab.a = 1;\n    do_something(&ab);\n    ab.a = 2;\n    return ab.a;\n}" $)
7795:
|
7801:
7802: ;
7803: $if $(@expr1073748849 $!@expr1073748850 $assertEquals $(@expr1073748851 "cppcheck-2.8/test/testother.cpp" $, 7803 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7804:
7805: $check_ $(@expr1073748854 "cppcheck-2.8/test/testother.cpp" $, 7805 $, "struct AB { int a; int b; };\n\nint f(struct AB *ab) {\n    ab->a = 1;\n    ab->b = 2;\n    ab++;\n    ab->a = 1;\n    ab->b = 2;\n}" $)
7806:
|
7812:
7813: ;
7814: $if $(@expr1073748855 $!@expr1073748856 $assertEquals $(@expr1073748857 "cppcheck-2.8/test/testother.cpp" $, 7814 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7815:
7816: $check_ $(@expr1073748860 "cppcheck-2.8/test/testother.cpp" $, 7816 $, "struct AB { int a; int b; };\n\nint f(struct AB *ab) {\n    ab->a = 1;\n    ab->b = 2;\n    ab = x;\n    ab->a = 1;\n    ab->b = 2;\n}" $)
7817:
|
7823:
7824: ;
7825: $if $(@expr1073748861 $!@expr1073748862 $assertEquals $(@expr1073748863 "cppcheck-2.8/test/testother.cpp" $, 7825 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7826:
7827: $check_ $(@expr1073748866 "cppcheck-2.8/test/testother.cpp" $, 7827 $, "void f(struct AB *ab) {\n    ab->data->x = 1;\n    ab = &ab1;\n    ab->data->x = 2;\n}" $)
7828:
7829:
7830:
7831: ;
7832: $if $(@expr1073748867 $!@expr1073748868 $assertEquals $(@expr1073748869 "cppcheck-2.8/test/testother.cpp" $, 7832 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7833:
7834:
7835: $check_ $(@expr1073748872 "cppcheck-2.8/test/testother.cpp" $, 7835 $, "void func(char *buffer, const char *format, int precision, unsigned value) {\n    (precision < 0) ? sprintf(buffer, format, value) : sprintf(buffer, format, precision, value);\n}" $)
7836:
7837: ;
7838: $if $(@expr1073748873 $!@expr1073748874 $assertEquals $(@expr1073748875 "cppcheck-2.8/test/testother.cpp" $, 7838 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7839:
7840:
7841: $check_ $(@expr1073748878 "cppcheck-2.8/test/testother.cpp" $, 7841 $, "struct data {\n  struct { int i; } fc;\n};\nstruct state {\n  struct data d[123];\n};\nvoid func(struct state *s) {\n  s->foo[s->x++] = 2;\n  s->d[1].fc.i++;\n}" $)
7842:
|
7849:
7850: ;
7851:
7852:
7853: $check_ $(@expr1073748879 "cppcheck-2.8/test/testother.cpp" $, 7853 $, "void f(int i) {\n    i = 1;\n    asm(\"foo\");\n    i = 1;\n}" $)
7854:
7855:
7856:
7857: ;
7858: $if $(@expr1073748880 $!@expr1073748881 $assertEquals $(@expr1073748882 "cppcheck-2.8/test/testother.cpp" $, 7858 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7859:
7860:
7861: $check_ $(@expr1073748885 "cppcheck-2.8/test/testother.cpp" $, 7861 $, "void foo() {\n    char *p = 0;\n    try {\n        p = fred();\n        p = wilma();\n    }\n    catch (...) {\n        barney(p);\n    }\n}" $)
7862:
|
7869:
7870: ;
7871: $if $(@expr1073748886 $!@expr1073748887 $assertEquals $(@expr1073748888 "cppcheck-2.8/test/testother.cpp" $, 7871 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7872:
7873: $check_ $(@expr1073748891 "cppcheck-2.8/test/testother.cpp" $, 7873 $, "void foo() {\n    char *p = 0;\n    try {\n        p = fred();\n        p = wilma();\n    }\n    catch (...) {\n        barney(x);\n    }\n}" $)
7874:
|
7881:
7882: ;
7883: $if $(@expr1073748892 $!@expr1073748893 $assertEquals $(@expr1073748894 "cppcheck-2.8/test/testother.cpp" $, 7883 $, "test.cpp:2:style:The scope of the variable 'p' can be reduced.\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7884: ; }
7885:
7886: $check_ $(@expr1073748897 "cppcheck-2.8/test/testother.cpp" $, 7886 $, "void foo() {\n    char *p = 0;\n    try {\n        if(z) {\n            p = fred();\n            p = wilma();\n        }\n    }\n    catch (...) {\n        barney(p);\n    }\n}" $)
7887:
|
7896:
7897: ;
7898: $if $(@expr1073748898 $!@expr1073748899 $assertEquals $(@expr1073748900 "cppcheck-2.8/test/testother.cpp" $, 7898 $, "" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7899:
7900:
7901: $check_ $(@expr1073748903 "cppcheck-2.8/test/testother.cpp" $, 7901 $, "void podMemPtrs() {\n    int POD::*memptr;\n    memptr = &POD::a;\n    memptr = &POD::b;\n    if (memptr)\n        memptr = 0;\n}" $)
7902:
|
7906:
7907: ;
7908: $if $(@expr1073748904 $!@expr1073748905 $assertEquals $(@expr1073748906 "cppcheck-2.8/test/testother.cpp" $, 7908 $, "test.cpp:4:style:Variable 'memptr' is reassigned a value before the old one has been used.\ntest.cpp:3:note:memptr is assigned\ntest.cpp:4:note:memptr is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7909:
7910: ; }
7911:
7912:
7913: $check_ $(@expr1073748909 "cppcheck-2.8/test/testother.cpp" $, 7913 $, "void f(float * var)\n{\n  var[0] = 0.2f;\n  var[0] = 0.2f;\n}" $)
7914:
7915:
7916:
7917: ;
7918: $if $(@expr1073748910 $!@expr1073748911 $assertEquals $(@expr1073748912 "cppcheck-2.8/test/testother.cpp" $, 7918 $, "test.cpp:4:style:Variable 'var[0]' is reassigned a value before the old one has been used.\ntest.cpp:3:note:var[0] is assigned\ntest.cpp:4:note:var[0] is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7919:
7920: ; }
7921:
7922: $check_ $(@expr1073748915 "cppcheck-2.8/test/testother.cpp" $, 7922 $, "void f(float * var)\n{\n  *var = 0.2f;\n  *var = 0.2f;\n}" $)
7923:
7924:
7925:
7926: ;
7927: $if $(@expr1073748916 $!@expr1073748917 $assertEquals $(@expr1073748918 "cppcheck-2.8/test/testother.cpp" $, 7927 $, "test.cpp:4:style:Variable '*var' is reassigned a value before the old one has been used.\ntest.cpp:3:note:*var is assigned\ntest.cpp:4:note:*var is overwritten\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return
7928:
7929: ; }
7930:
7931:
7932: $check_ $(@expr1073748921 "cppcheck-2.8/test/testother.cpp" $, 7932 $, "void f() {\n  volatile char *reg = (volatile char *)0x12345;\n  *reg = 12;\n  *reg = 34;\n}" $)
7933:
7934:
7935:
7936: ;
7937: $if $(@expr1073748922 $!@expr1073748923 $assertEquals $(@expr1073748924 "cppcheck-2.8/test/testother.cpp" $, 7937 $, "test.cpp:2:style:C-style pointer casting\n" $, errout@var100 .@expr6836 str (@expr6837 ) $) $) { $return ; }
7938: }
7939:
7940: void redundantVarAssignment_trivial ( ) {
7941: $check_ $(@expr1073748927 "cppcheck-2.8/test/testother.cpp" $, 7941 $, "void f() {\n   int a = 0;\n   a = 4;\n}" $)
7942:
7943:
7944: ;
7945: $if $(@expr1073748928 $!@expr1073748929 $assertEquals $(@expr1073748930 "cppcheck-2.8/test/testother.cpp" $, 7945 $, "" $, errout@var100 .@expr7107 str (@expr7108 ) $) $) { $return ; }
7946:
7947: $check_ $(@expr1073748933 "cppcheck-2.8/test/testother.cpp" $, 7947 $, "void f() {\n   int a;\n   a = 0;\n   a = 4;\n}" $)
7948:
7949:
7950:
7951: ;
7952: $if $(@expr1073748934 $!@expr1073748935 $assertEquals $(@expr1073748936 "cppcheck-2.8/test/testother.cpp" $, 7952 $, "" $, errout@var100 .@expr7107 str (@expr7108 ) $) $) { $return ; }
7953:
7954: $check_ $(@expr1073748939 "cppcheck-2.8/test/testother.cpp" $, 7954 $, "void f() {\n   unsigned a;\n   a = 0u;\n   a = 2u;\n}" $)
7955:
7956:
7957:
7958: ;
7959: $if $(@expr1073748940 $!@expr1073748941 $assertEquals $(@expr1073748942 "cppcheck-2.8/test/testother.cpp" $, 7959 $, "" $, errout@var100 .@expr7107 str (@expr7108 ) $) $) { $return ; }
7960:
7961: $check_ $(@expr1073748945 "cppcheck-2.8/test/testother.cpp" $, 7961 $, "void f() {\n   void* a;\n   a = (void*)0;\n   a = p;\n}" $)
7962:
7963:
7964:
7965: ;
7966: $if $(@expr1073748946 $!@expr1073748947 $assertEquals $(@expr1073748948 "cppcheck-2.8/test/testother.cpp" $, 7966 $, "" $, errout@var100 .@expr7107 str (@expr7108 ) $) $) { $return ; }
7967:
7968: $check_ $(@expr1073748951 "cppcheck-2.8/test/testother.cpp" $, 7968 $, "void f() {\n   void* a;\n   a = (void*)0U;\n   a = p;\n}" $)
7969:
7970:
7971:
7972: ;
7973: $if $(@expr1073748952 $!@expr1073748953 $assertEquals $(@expr1073748954 "cppcheck-2.8/test/testother.cpp" $, 7973 $, "" $, errout@var100 .@expr7107 str (@expr7108 ) $) $) { $return ; }
7974: }
7975:
7976: void redundantVarAssignment_struct ( ) {
7977: $check_ $(@expr1073748957 "cppcheck-2.8/test/testother.cpp" $, 7977 $, "struct foo {\n  int a,b;\n};\n\nint main() {\n  struct foo x;\n  x.a = _mm_set1_ps(1.0);\n  x.a = _mm_set1_ps(2.0);\n}" $)
7978:
|
7984:
7985: ;
7986: $if $(@expr1073748958 $!@expr1073748959 $assertEquals $(@expr1073748960 "cppcheck-2.8/test/testother.cpp" $, 7986 $, "[test.cpp:7] -> [test.cpp:8]: (style) Variable 'x.a' is reassigned a value before the old one has been used.\n" $, errout@var100 .@expr7137 str (@expr7138 ) $) $) { $return ; }
7987:
7988: $check_ $(@expr1073748963 "cppcheck-2.8/test/testother.cpp" $, 7988 $, "void f() {\n  struct AB ab;\n  ab.x = 23;\n  ab.y = 41;\n  ab.x = 1;\n}" $)
7989:
|
7992:
7993: ;
7994: $if $(@expr1073748964 $!@expr1073748965 $assertEquals $(@expr1073748966 "cppcheck-2.8/test/testother.cpp" $, 7994 $, "[test.cpp:3] -> [test.cpp:5]: (style) Variable 'ab.x' is reassigned a value before the old one has been used.\n" $, errout@var100 .@expr7137 str (@expr7138 ) $) $) { $return ; }
7995:
7996: $check_ $(@expr1073748969 "cppcheck-2.8/test/testother.cpp" $, 7996 $, "void f() {\n  struct AB ab = {0};\n  ab = foo();\n}" $)
7997:
7998:
7999: ;
8000: $if $(@expr1073748970 $!@expr1073748971 $assertEquals $(@expr1073748972 "cppcheck-2.8/test/testother.cpp" $, 8000 $, "" $, errout@var100 .@expr7137 str (@expr7138 ) $) $) { $return ; }
8001: }
8002:
8003: void redundantVarAssignment_7133 ( ) {
8004:
8005: $check_ $(@expr1073748975 "cppcheck-2.8/test/testother.cpp" $, 8005 $, "sal_Int32 impl_Export() {\n   try {\n        try  {\n          uno::Sequence< uno::Any > aArgs(2);\n          beans::NamedValue aValue;\n          aValue.Name = \"DocumentHandler\";\n          aValue.Value <<= xDocHandler;\n          aArgs[0] <<= aValue;\n          aValue.Name = \"Model\";\n          aValue.Value <<= xDocumentComp;\n          aArgs[1] <<= aValue;\n        }\n        catch (const uno::Exception&) {\n        }\n   }\n   catch (const uno::Exception&)  {\n   }\n}" , "test.cpp" , false , true $)
8006:
|
8021:
8022: ;
8023: $if $(@expr1073748976 $!@expr1073748977 $assertEquals $(@expr1073748978 "cppcheck-2.8/test/testother.cpp" $, 8023 $, "" $, errout@var100 .@expr7155 str (@expr7156 ) $) $) { $return ; }
8024:
8025: $check_ $(@expr1073748981 "cppcheck-2.8/test/testother.cpp" $, 8025 $, "void ConvertBitmapData(sal_uInt16 nDestBits) {\n    BitmapBuffer aSrcBuf;\n    aSrcBuf.mnBitCount = nSrcBits;\n    BitmapBuffer aDstBuf;\n    aSrcBuf.mnBitCount = nDestBits;\n    bConverted = ::ImplFastBitmapConversion( aDstBuf, aSrcBuf, aTwoRects );\n}" , "test.c" $)
8026:
|
8030:
8031: ;
8032: $if $(@expr1073748982 $!@expr1073748983 $assertEquals $(@expr1073748984 "cppcheck-2.8/test/testother.cpp" $, 8032 $, "[test.c:3] -> [test.c:5]: (style) Variable 'aSrcBuf.mnBitCount' is reassigned a value before the old one has been used.\n" $, errout@var100 .@expr7155 str (@expr7156 ) $) $) { $return ; }
8033: $check_ $(@expr1073748987 "cppcheck-2.8/test/testother.cpp" $, 8033 $, "void ConvertBitmapData(sal_uInt16 nDestBits) {\n    BitmapBuffer aSrcBuf;\n    aSrcBuf.mnBitCount = nSrcBits;\n    BitmapBuffer aDstBuf;\n    aSrcBuf.mnBitCount = nDestBits;\n    bConverted = ::ImplFastBitmapConversion( aDstBuf, aSrcBuf, aTwoRects );\n}" $)
8034:
|
8038:
8039: ;
8040: $if $(@expr1073748988 $!@expr1073748989 $assertEquals $(@expr1073748990 "cppcheck-2.8/test/testother.cpp" $, 8040 $, "[test.cpp:3] -> [test.cpp:5]: (style) Variable 'aSrcBuf.mnBitCount' is reassigned a value before the old one has been used.\n" $, errout@var100 .@expr7155 str (@expr7156 ) $) $) { $return
8041: ; }
8042:
8043: $check_ $(@expr1073748993 "cppcheck-2.8/test/testother.cpp" $, 8043 $, "class C { void operator=(int x); };\nvoid f() {\n    C c;\n    c = x;\n    c = x;\n}" $)
8044:
|
8047:
8048: ;
8049: $if $(@expr1073748994 $!@expr1073748995 $assertEquals $(@expr1073748996 "cppcheck-2.8/test/testother.cpp" $, 8049 $, "[test.cpp:4] -> [test.cpp:5]: (style, inconclusive) Variable 'c' is reassigned a value before the old one has been used if variable is no semaphore variable.\n" $, errout@var100 .@expr7155 str (@expr7156 ) $) $) { $return ; }
8050: }
8051:
8052: void redundantVarAssignment_stackoverflow ( ) {
8053: $check_ $(@expr1073748999 "cppcheck-2.8/test/testother.cpp" $, 8053 $, "typedef struct message_node {\n  char code;\n  size_t size;\n  struct message_node *next, *prev;\n} *message_list;\nstatic message_list remove_message_from_list(message_list m) {\n    m->prev->next = m->next;\n    m->next->prev = m->prev;\n    return m->next;\n}" $)
8054:
|
8061:
8062: ;
8063: $if $(@expr1073749000 $!@expr1073749001 $assertEquals $(@expr1073749002 "cppcheck-2.8/test/testother.cpp" $, 8063 $, "" $, errout@var100 .@expr1073749003 str (@expr1073749004 ) $) $) { $return ; }
8064: }
8065:
8066: void redundantVarAssignment_lambda ( ) {
8067:
8068: $check_ $(@expr1073749005 "cppcheck-2.8/test/testother.cpp" $, 8068 $, "int foo() {\n    int x = 0, y = 0;\n    auto f = [&]() { if (x < 5) ++y; };\n    x = 2;\n    f();\n    x = 6;\n    f();\n    return y;\n}" $)
8069:
|
8075:
8076: ;
8077: $if $(@expr1073749006 $!@expr1073749007 $assertEquals $(@expr1073749008 "cppcheck-2.8/test/testother.cpp" $, 8077 $, "" $, errout@var100 .@expr7185 str (@expr7186 ) $) $) { $return ; }
8078:
8079:
8080: $check_ $(@expr1073749011 "cppcheck-2.8/test/testother.cpp" $, 8080 $, "std::tuple<int, int> g();\nvoid h(int);\nvoid f() {\n    auto [a, b] = g();\n    auto l = [a = a]() { h(i); };\n}\n" $)
8081:
|
8084:
8085: ;
8086: $if $(@expr1073749012 $!@expr1073749013 $assertEquals $(@expr1073749014 "cppcheck-2.8/test/testother.cpp" $, 8086 $, "" $, errout@var100 .@expr7185 str (@expr7186 ) $) $) { $return ; }
8087: }
8088:
8089: void redundantVarAssignment_loop ( ) {
8090: $check_ $(@expr1073749017 "cppcheck-2.8/test/testother.cpp" $, 8090 $, "void f() {\n    char buf[10];\n    int i;\n    for (i = 0; i < 4; i++)\n        buf[i] = 131;\n    buf[i] = 0;\n}" $)
8091:
|
8095:
8096: ;
8097: $if $(@expr1073749018 $!@expr1073749019 $assertEquals $(@expr1073749020 "cppcheck-2.8/test/testother.cpp" $, 8097 $, "" $, errout@var100 .@expr7197 str (@expr7198 ) $) $) { $return ; }
8098:
8099: $check_ $(@expr1073749023 "cppcheck-2.8/test/testother.cpp" $, 8099 $, "void bar() {\n    int x = 0;\n    x = 432;\n    do {\n        if (foo()) break;\n        x = 1;\n     } while (false);\n}" $)
8100:
|
8105:
8106: ;
8107: $if $(@expr1073749024 $!@expr1073749025 $assertEquals $(@expr1073749026 "cppcheck-2.8/test/testother.cpp" $, 8107 $, "" $, errout@var100 .@expr7197 str (@expr7198 ) $) $) { $return ; }
8108:
8109: $check_ $(@expr1073749029 "cppcheck-2.8/test/testother.cpp" $, 8109 $, "void foo(int num) {\n  int a = num;\n  for (int b = 0; b < num; a = b++)\n    dostuff(a);\n}" $)
8110:
8111:
8112:
8113: ;
8114: $if $(@expr1073749030 $!@expr1073749031 $assertEquals $(@expr1073749032 "cppcheck-2.8/test/testother.cpp" $, 8114 $, "" $, errout@var100 .@expr7197 str (@expr7198 ) $) $) { $return ; }
8115:
8116: $check_ $(@expr1073749035 "cppcheck-2.8/test/testother.cpp" $, 8116 $, "void foo(int num) {\n  int a = num;\n  for (int b = 0; b < num; a = b++);\n}" $)
8117:
8118:
8119: ;
8120: $todoAssertEquals $(@expr1073749036 "cppcheck-2.8/test/testother.cpp" $, 8120 $, "error" $, "" $, errout@var100 .@expr7197 str (@expr7198 ) $) ;
8121: }
8122:
8123: void redundantVarAssignment_after_switch ( ) {
8124: $check_ $(@expr1073749039 "cppcheck-2.8/test/testother.cpp" $, 8124 $, "void f(int x) {\n    int ret;\n    switch (x) {\n    case 123:\n        ret = 1;\n        break;\n    }\n    ret = 3;\n}" $)
8125:
|
8131:
8132: ;
8133: $if $(@expr1073749040 $!@expr1073749041 $assertEquals $(@expr1073749042 "cppcheck-2.8/test/testother.cpp" $, 8133 $, "[test.cpp:5] -> [test.cpp:8]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n" $, errout@var100 .@expr1073749043 str (@expr1073749044 ) $) $) { $return ; }
8134: }
8135:
8136: void redundantVarAssignment_pointer ( ) {
8137: $check_ $(@expr1073749045 "cppcheck-2.8/test/testother.cpp" $, 8137 $, "void f(int *ptr) {\n    int *x = ptr + 1;\n    *x = 23;\n    foo(ptr);\n    *x = 32;\n}" $)
8138:
|
8141:
8142: ;
8143: $if $(@expr1073749046 $!@expr1073749047 $assertEquals $(@expr1073749048 "cppcheck-2.8/test/testother.cpp" $, 8143 $, "" $, errout@var100 .@expr7225 str (@expr7226 ) $) $) { $return ; }
8144:
8145:
8146: $check_ $(@expr1073749051 "cppcheck-2.8/test/testother.cpp" $, 8146 $, "void f() {\n  char x[2];\n  char* p = x;\n  *p = 1;\n  p += 1;\n  *p = 1;\n}" $)
8147:
|
8151:
8152: ;
8153: $if $(@expr1073749052 $!@expr1073749053 $assertEquals $(@expr1073749054 "cppcheck-2.8/test/testother.cpp" $, 8153 $, "" $, errout@var100 .@expr7225 str (@expr7226 ) $) $) { $return ; }
8154: }
8155:
8156: void redundantVarAssignment_pointer_parameter ( ) {
8157: $check_ $(@expr1073749057 "cppcheck-2.8/test/testother.cpp" $, 8157 $, "void f(int *p) {\n    *p = 1;\n    if (condition) return;\n    *p = 2;\n}" $)
8158:
8159:
8160:
8161: ;
8162: $if $(@expr1073749058 $!@expr1073749059 $assertEquals $(@expr1073749060 "cppcheck-2.8/test/testother.cpp" $, 8162 $, "" $, errout@var100 .@expr1073749061 str (@expr1073749062 ) $) $) { $return ; }
8163: }
8164:
8165: void redundantVarAssignment_array ( ) {
8166: $check_ $(@expr1073749063 "cppcheck-2.8/test/testother.cpp" $, 8166 $, "void f() {\n    int arr[10];\n    int i = 0;\n    arr[i] = 1;\n    i += 2;\n    arr[i] = 3;\n    dostuff(arr);\n}" $)
8167:
|
8172:
8173: ;
8174: $if $(@expr1073749064 $!@expr1073749065 $assertEquals $(@expr1073749066 "cppcheck-2.8/test/testother.cpp" $, 8174 $, "" $, errout@var100 .@expr1073749067 str (@expr1073749068 ) $) $) { $return ; }
8175: }
8176:
8177: void redundantVarAssignment_switch_break ( ) {
8178:
8179: $check_ $(@expr1073749069 "cppcheck-2.8/test/testother.cpp" $, 8179 $, "void f(int a, int b) {\n    int ret = 0;\n    switch (a) {\n    case 1:\n        ret = 543;\n        if (b) break;\n        ret = 1;\n        break;\n    }    return ret;\n}" $)
8180:
|
8188:
8189: ;
8190: $if $(@expr1073749070 $!@expr1073749071 $assertEquals $(@expr1073749072 "cppcheck-2.8/test/testother.cpp" $, 8190 $, "" $, errout@var100 .@expr7249 str (@expr7250 ) $) $) { $return ; }
8191:
8192: $check_ $(@expr1073749075 "cppcheck-2.8/test/testother.cpp" $, 8192 $, "void f(int a, int b) {\n    int ret = 0;\n    switch (a) {\n    case 1:\n        ret = 543;\n        if (b) break;\n        ret = 1;\n        break;\n    }}" $)
8193:
|
8200:
8201: ;
8202: $if $(@expr1073749076 $!@expr1073749077 $assertEquals $(@expr1073749078 "cppcheck-2.8/test/testother.cpp" $, 8202 $, "[test.cpp:5] -> [test.cpp:7]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n" $, errout@var100 .@expr7249 str (@expr7250 ) $) $) { $return ; }
8203: }
8204:
8205: void redundantInitialization ( ) {
8206: setMultiline (@expr1073749081 ) ;
8207:
8208: $check_ $(@expr1073749082 "cppcheck-2.8/test/testother.cpp" $, 8208 $, "void f() {\n    int err = -ENOMEM;\n    err = dostuff();\n}" $)
8209:
8210:
8211: ;
8212: $if $(@expr1073749083 $!@expr1073749084 $assertEquals $(@expr1073749085 "cppcheck-2.8/test/testother.cpp" $, 8212 $, "test.cpp:3:style:Redundant initialization for 'err'. The initialized value is overwritten before it is read.\ntest.cpp:2:note:err is initialized\ntest.cpp:3:note:err is overwritten\n" $, errout@var100 .@expr7262 str (@expr7263 ) $) $) { $return
8213:
8214:
8215: ; }
8216:
8217: $check_ $(@expr1073749088 "cppcheck-2.8/test/testother.cpp" $, 8217 $, "void f() {\n    struct S s = {1,2,3};\n    s = dostuff();\n}" $)
8218:
8219:
8220: ;
8221: $if $(@expr1073749089 $!@expr1073749090 $assertEquals $(@expr1073749091 "cppcheck-2.8/test/testother.cpp" $, 8221 $, "test.cpp:3:style:Redundant initialization for 's'. The initialized value is overwritten before it is read.\ntest.cpp:2:note:s is initialized\ntest.cpp:3:note:s is overwritten\n" $, errout@var100 .@expr7262 str (@expr7263 ) $) $) { $return
8222:
8223:
8224: ; }
8225:
8226: $check_ $(@expr1073749094 "cppcheck-2.8/test/testother.cpp" $, 8226 $, "void f() {\n    int *p = NULL;\n    p = dostuff();\n}" $)
8227:
8228:
8229: ;
8230: $if $(@expr1073749095 $!@expr1073749096 $assertEquals $(@expr1073749097 "cppcheck-2.8/test/testother.cpp" $, 8230 $, "" $, errout@var100 .@expr7262 str (@expr7263 ) $) $) { $return ; }
8231:
8232:
8233: $check_ $(@expr1073749100 "cppcheck-2.8/test/testother.cpp" $, 8233 $, "void f() {\n    struct S s = {0};\n    s = dostuff();\n}" $)
8234:
8235:
8236: ;
8237: $if $(@expr1073749101 $!@expr1073749102 $assertEquals $(@expr1073749103 "cppcheck-2.8/test/testother.cpp" $, 8237 $, "" $, errout@var100 .@expr7262 str (@expr7263 ) $) $) { $return ; }
8238:
8239: $check_ $(@expr1073749106 "cppcheck-2.8/test/testother.cpp" $, 8239 $, "namespace N { enum E {e0,e1}; }\nvoid f() {\n    N::E e = N::e0;\n    e = dostuff();\n}" $)
8240:
8241:
8242:
8243: ;
8244: $if $(@expr1073749107 $!@expr1073749108 $assertEquals $(@expr1073749109 "cppcheck-2.8/test/testother.cpp" $, 8244 $, "" $, errout@var100 .@expr7262 str (@expr7263 ) $) $) { $return ; }
8245:
8246: $check_ $(@expr1073749112 "cppcheck-2.8/test/testother.cpp" $, 8246 $, "void f() {\n    std::shared_ptr<int> i = g();\n    h();\n    i = nullptr;\n}\n" $)
8247:
8248:
8249:
8250: ;
8251: $if $(@expr1073749113 $!@expr1073749114 $assertEquals $(@expr1073749115 "cppcheck-2.8/test/testother.cpp" $, 8251 $, "" $, errout@var100 .@expr7262 str (@expr7263 ) $) $) { $return ; }
8252:
8253: $check_ $(@expr1073749118 "cppcheck-2.8/test/testother.cpp" $, 8253 $, "int f(const std::vector<int>& v) {\n    int i = g();\n    i = std::distance(v.begin(), std::find_if(v.begin(), v.end(), [=](int j) { return i == j; }));\n    return i;\n}\n" $)
8254:
8255:
8256:
8257: ;
8258: $if $(@expr1073749119 $!@expr1073749120 $assertEquals $(@expr1073749121 "cppcheck-2.8/test/testother.cpp" $, 8258 $, "" $, errout@var100 .@expr7262 str (@expr7263 ) $) $) { $return ; }
8259: }
8260:
8261: void redundantMemWrite ( ) {
8262: return ;
8263:
8264:
8265:
8266: $check_ $(@expr1073749124 "cppcheck-2.8/test/testother.cpp" $, 8266 $, "void f() {\n    char a[10];\n    memcpy(a, foo, bar);\n    memset(a, 0, bar);\n}" $)
8267:
8268:
8269:
8270: ;
8271: $if $(@expr1073749125 $!@expr1073749126 $assertEquals $(@expr1073749127 "cppcheck-2.8/test/testother.cpp" $, 8271 $, "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'a' is being written before its old content has been used.\n" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8272:
8273: $check_ $(@expr1073749130 "cppcheck-2.8/test/testother.cpp" $, 8273 $, "void f() {\n    char a[10];\n    strcpy(a, foo);\n    strncpy(a, 0, bar);\n}" $)
8274:
8275:
8276:
8277: ;
8278: $if $(@expr1073749131 $!@expr1073749132 $assertEquals $(@expr1073749133 "cppcheck-2.8/test/testother.cpp" $, 8278 $, "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'a' is being written before its old content has been used.\n" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8279:
8280: $check_ $(@expr1073749136 "cppcheck-2.8/test/testother.cpp" $, 8280 $, "void f() {\n    char a[10];\n    sprintf(a, \"foo\");\n    memmove(a, 0, bar);\n}" $)
8281:
8282:
8283:
8284: ;
8285: $if $(@expr1073749137 $!@expr1073749138 $assertEquals $(@expr1073749139 "cppcheck-2.8/test/testother.cpp" $, 8285 $, "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'a' is being written before its old content has been used.\n" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8286:
8287: $check_ $(@expr1073749142 "cppcheck-2.8/test/testother.cpp" $, 8287 $, "void f(char *filename) {\n    char *p = strrchr(filename,'.');\n    strcpy(p, \"foo\");\n    dostuff(filename);\n    strcpy(p, \"foo\");\n}" $)
8288:
|
8291:
8292: ;
8293: $if $(@expr1073749143 $!@expr1073749144 $assertEquals $(@expr1073749145 "cppcheck-2.8/test/testother.cpp" $, 8293 $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8294:
8295:
8296: $check_ $(@expr1073749148 "cppcheck-2.8/test/testother.cpp" $, 8296 $, "void f(void* a) {\n    memcpy(a, foo, bar);\n    memset(a+5, 0, bar);\n}" $)
8297:
8298:
8299: ;
8300: $if $(@expr1073749149 $!@expr1073749150 $assertEquals $(@expr1073749151 "cppcheck-2.8/test/testother.cpp" $, 8300 $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8301:
8302:
8303: $check_ $(@expr1073749154 "cppcheck-2.8/test/testother.cpp" $, 8303 $, "void f(void* a, void* b) {\n    memset(a, 0, 5);\n    memcpy(b, a, 5);\n    memset(a, 1, 5);\n}" $)
8304:
8305:
8306:
8307: ;
8308: $if $(@expr1073749155 $!@expr1073749156 $assertEquals $(@expr1073749157 "cppcheck-2.8/test/testother.cpp" $, 8308 $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8309:
8310:
8311: $check_ $(@expr1073749160 "cppcheck-2.8/test/testother.cpp" $, 8311 $, "void f() {\n    char a[10];\n    strcpy(a, foo);\n    strcat(a, bar);\n    strcpy(a, x);\n}" $)
8312:
|
8315:
8316: ;
8317: $if $(@expr1073749161 $!@expr1073749162 $assertEquals $(@expr1073749163 "cppcheck-2.8/test/testother.cpp" $, 8317 $, "[test.cpp:3] -> [test.cpp:5]: (performance) Buffer 'a' is being written before its old content has been used.\n" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8318:
8319:
8320: $check_ $(@expr1073749166 "cppcheck-2.8/test/testother.cpp" $, 8320 $, "void f() {\n    char a[10];\n    snprintf(a, foo, bar);\n    bar();\n    memset(a, 0, size);\n}" $)
8321:
|
8324:
8325: ;
8326: $if $(@expr1073749167 $!@expr1073749168 $assertEquals $(@expr1073749169 "cppcheck-2.8/test/testother.cpp" $, 8326 $, "[test.cpp:3] -> [test.cpp:5]: (performance) Buffer 'a' is being written before its old content has been used.\n" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8327:
8328: $check_ $(@expr1073749172 "cppcheck-2.8/test/testother.cpp" $, 8328 $, "void* a;\nvoid f() {\n    memset(a, 0, size);\n    bar();\n    memset(a, 0, size);\n}" $)
8329:
|
8332:
8333: ;
8334: $if $(@expr1073749173 $!@expr1073749174 $assertEquals $(@expr1073749175 "cppcheck-2.8/test/testother.cpp" $, 8334 $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8335:
8336: $check_ $(@expr1073749178 "cppcheck-2.8/test/testother.cpp" $, 8336 $, "void f() {\n    char a[10];\n    memset(a, 0, size);\n    bar();\n    memset(a, 0, size);\n}" $)
8337:
|
8340:
8341: ;
8342: $todoAssertEquals $(@expr1073749179 "cppcheck-2.8/test/testother.cpp" $, 8342 $, "[test.cpp:3] -> [test.cpp:5]: (performance) Buffer 'a' is being written before its old content has been used.\n" $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) ;
8343:
8344: $check_ $(@expr1073749182 "cppcheck-2.8/test/testother.cpp" $, 8344 $, "void bar(void* a) {}\nvoid f(void* a) {\n    memset(a, 0, size);\n    bar(a);\n    memset(a, 0, size);\n}" $)
8345:
|
8348:
8349: ;
8350: $if $(@expr1073749183 $!@expr1073749184 $assertEquals $(@expr1073749185 "cppcheck-2.8/test/testother.cpp" $, 8350 $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8351:
8352:
8353: $check_ $(@expr1073749188 "cppcheck-2.8/test/testother.cpp" $, 8353 $, "void f(void* a) {\n    memset(a, 0, size);\n    if(x)\n        memset(a, 0, size);\n}" $)
8354:
8355:
8356:
8357: ;
8358: $if $(@expr1073749189 $!@expr1073749190 $assertEquals $(@expr1073749191 "cppcheck-2.8/test/testother.cpp" $, 8358 $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8359:
8360:
8361: $check_ $(@expr1073749194 "cppcheck-2.8/test/testother.cpp" $, 8361 $, "void f(void) {    char buf[10];\n    memset(buf, 0, 10);\n    strcpy(buf, string);\n}" $)
8362:
8363:
8364:
8365: ;
8366: $if $(@expr1073749195 $!@expr1073749196 $assertEquals $(@expr1073749197 "cppcheck-2.8/test/testother.cpp" $, 8366 $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8367:
8368: $check_ $(@expr1073749200 "cppcheck-2.8/test/testother.cpp" $, 8368 $, "void f(void) {\n    char buf[10] = {0};\n    memset(buf, 0, 10);\n    strcpy(buf, string);\n}" $)
8369:
8370:
8371:
8372: ;
8373: $if $(@expr1073749201 $!@expr1073749202 $assertEquals $(@expr1073749203 "cppcheck-2.8/test/testother.cpp" $, 8373 $, "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'buf' is being written before its old content has been used.\n" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8374:
8375:
8376: $check_ $(@expr1073749206 "cppcheck-2.8/test/testother.cpp" $, 8376 $, "int f(void* a) {\n    int i = atoi(strcpy(a, foo));\n    strncpy(a, 0, bar);\n    return i;\n}" $)
8377:
8378:
8379:
8380: ;
8381: $if $(@expr1073749207 $!@expr1073749208 $assertEquals $(@expr1073749209 "cppcheck-2.8/test/testother.cpp" $, 8381 $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8382:
8383:
8384: $check_ $(@expr1073749212 "cppcheck-2.8/test/testother.cpp" $, 8384 $, "void f() {\n    char buf[100];\n    strcpy(buf, x);\n    strcpy(buf, dostuff(buf));\n    strcpy(buf, x);\n}" $)
8385:
|
8388:
8389: ;
8390: $if $(@expr1073749213 $!@expr1073749214 $assertEquals $(@expr1073749215 "cppcheck-2.8/test/testother.cpp" $, 8390 $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) $) { $return ; }
8391:
8392: $check_ $(@expr1073749218 "cppcheck-2.8/test/testother.cpp" $, 8392 $, "void f() {\n    char buf[100];\n    strcpy(buf, x);\n    strcpy(buf, dostuff(buf));\n    strcpy(buf, x);\n}" $)
8393:
|
8396:
8397: ;
8398: $todoAssertEquals $(@expr1073749219 "cppcheck-2.8/test/testother.cpp" $, 8398 $, "error" $, "" $, errout@var100 .@expr7304 str (@expr7305 ) $) ;
8399: }
8400:
8401: void varFuncNullUB ( ) {
8402: $check_ $(@expr1073749222 "cppcheck-2.8/test/testother.cpp" $, 8402 $, "void a(...);\nvoid b() { a(NULL); }" $)
8403: ;
8404: $if $(@expr1073749223 $!@expr1073749224 $assertEquals $(@expr1073749225 "cppcheck-2.8/test/testother.cpp" $, 8404 $, "[test.cpp:2]: (portability) Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\n" $, errout@var100 .@expr7402 str (@expr7403 ) $) $) { $return ; }
8405:
8406: $check_ $(@expr1073749228 "cppcheck-2.8/test/testother.cpp" $, 8406 $, "void a(char *p, ...);\nvoid b() { a(NULL, 2); }" $)
8407: ;
8408: $if $(@expr1073749229 $!@expr1073749230 $assertEquals $(@expr1073749231 "cppcheck-2.8/test/testother.cpp" $, 8408 $, "" $, errout@var100 .@expr7402 str (@expr7403 ) $) $) { $return ; }
8409: }
8410:
8411: void checkPipeParameterSize ( ) {
8412:
8413: checkposix (@expr1073749234 "void f(){\nint pipefd[1];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}"
8414:
|
8417:
8418: ) ;
8419: $if $(@expr1073749235 $!@expr1073749236 $assertEquals $(@expr1073749237 "cppcheck-2.8/test/testother.cpp" $, 8419 $, "[test.cpp:3]: (error) Buffer 'pipefd' must have size of 2 integers if used as parameter of pipe().\n" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8420:
8421: checkposix (@expr1073749240 "void f(){\nint pipefd[2];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}"
8422:
|
8425:
8426: ) ;
8427: $if $(@expr1073749241 $!@expr1073749242 $assertEquals $(@expr1073749243 "cppcheck-2.8/test/testother.cpp" $, 8427 $, "" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8428:
8429: checkposix (@expr1073749246 "void f(){\nint pipefd[20];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}"
8430:
|
8433:
8434: ) ;
8435: $if $(@expr1073749247 $!@expr1073749248 $assertEquals $(@expr1073749249 "cppcheck-2.8/test/testother.cpp" $, 8435 $, "" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8436:
8437: checkposix (@expr1073749252 "void f(){\nint pipefd[1];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}"
8438:
|
8441:
8442: ) ;
8443: $if $(@expr1073749253 $!@expr1073749254 $assertEquals $(@expr1073749255 "cppcheck-2.8/test/testother.cpp" $, 8443 $, "[test.cpp:3]: (error) Buffer 'pipefd' must have size of 2 integers if used as parameter of pipe().\n" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8444:
8445: checkposix (@expr1073749258 "void f(){\nint pipefd[2];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}"
8446:
|
8449:
8450: ) ;
8451: $if $(@expr1073749259 $!@expr1073749260 $assertEquals $(@expr1073749261 "cppcheck-2.8/test/testother.cpp" $, 8451 $, "" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8452:
8453: checkposix (@expr1073749264 "void f(){\nint pipefd[20];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}"
8454:
|
8457:
8458: ) ;
8459: $if $(@expr1073749265 $!@expr1073749266 $assertEquals $(@expr1073749267 "cppcheck-2.8/test/testother.cpp" $, 8459 $, "" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8460:
8461:
8462: $check_ $(@expr1073749270 "cppcheck-2.8/test/testother.cpp" $, 8462 $, "void foo (int* arrayPtr)\n{\n  if (pipe (arrayPtr) < 0)\n  {}\n}" $)
8463:
8464:
8465:
8466: ;
8467: $if $(@expr1073749271 $!@expr1073749272 $assertEquals $(@expr1073749273 "cppcheck-2.8/test/testother.cpp" $, 8467 $, "" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8468:
8469:
8470: $check_ $(@expr1073749276 "cppcheck-2.8/test/testother.cpp" $, 8470 $, "void foo() {\n  int *cp;\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}" $)
8471:
|
8474:
8475: ;
8476: $if $(@expr1073749277 $!@expr1073749278 $assertEquals $(@expr1073749279 "cppcheck-2.8/test/testother.cpp" $, 8476 $, "" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8477:
8478:
8479: $check_ $(@expr1073749282 "cppcheck-2.8/test/testother.cpp" $, 8479 $, "void foo() {\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}" $)
8480:
8481:
8482:
8483: ;
8484: $if $(@expr1073749283 $!@expr1073749284 $assertEquals $(@expr1073749285 "cppcheck-2.8/test/testother.cpp" $, 8484 $, "" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8485:
8486:
8487: $check_ $(@expr1073749288 "cppcheck-2.8/test/testother.cpp" $, 8487 $, "void foo() {\n  int *cp;\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}" $)
8488:
|
8491:
8492: ;
8493: $if $(@expr1073749289 $!@expr1073749290 $assertEquals $(@expr1073749291 "cppcheck-2.8/test/testother.cpp" $, 8493 $, "" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8494:
8495:
8496: $check_ $(@expr1073749294 "cppcheck-2.8/test/testother.cpp" $, 8496 $, "void foo() {\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}" $)
8497:
8498:
8499:
8500: ;
8501: $if $(@expr1073749295 $!@expr1073749296 $assertEquals $(@expr1073749297 "cppcheck-2.8/test/testother.cpp" $, 8501 $, "" $, errout@var100 .@expr7414 str (@expr7415 ) $) $) { $return ; }
8502: }
8503:
8504: void checkCastIntToCharAndBack ( ) {
8505:
8506:
8507: $check_ $(@expr1073749300 "cppcheck-2.8/test/testother.cpp" $, 8507 $, "void f() {\nunsigned char c; c = getchar();\n  while( c != EOF)\n  {\n    bar(c);\n    c = getchar();\n  } ;\n}" $)
8508:
|
8513:
8514: ;
8515: $if $(@expr1073749301 $!@expr1073749302 $assertEquals $(@expr1073749303 "cppcheck-2.8/test/testother.cpp" $, 8515 $, "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8516:
8517: $check_ $(@expr1073749306 "cppcheck-2.8/test/testother.cpp" $, 8517 $, "void f() {\nunsigned char c = getchar();\n  while( EOF != c)\n  {\n    bar(c);\n  } ;\n}" $)
8518:
|
8522:
8523: ;
8524: $if $(@expr1073749307 $!@expr1073749308 $assertEquals $(@expr1073749309 "cppcheck-2.8/test/testother.cpp" $, 8524 $, "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8525:
8526: $check_ $(@expr1073749312 "cppcheck-2.8/test/testother.cpp" $, 8526 $, "void f() {\n  unsigned char c; c = getchar();\n  while( EOF != c )\n  {\n    bar(c);\n    c = getchar();\n  } ;\n}" $)
8527:
|
8532:
8533: ;
8534: $if $(@expr1073749313 $!@expr1073749314 $assertEquals $(@expr1073749315 "cppcheck-2.8/test/testother.cpp" $, 8534 $, "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8535:
8536: $check_ $(@expr1073749318 "cppcheck-2.8/test/testother.cpp" $, 8536 $, "void f() {\n  unsigned char c;\n  while( EOF != ( c = getchar() ) )\n  {\n  }\n}" $)
8537:
|
8540:
8541: ;
8542: $if $(@expr1073749319 $!@expr1073749320 $assertEquals $(@expr1073749321 "cppcheck-2.8/test/testother.cpp" $, 8542 $, "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8543:
8544: $check_ $(@expr1073749324 "cppcheck-2.8/test/testother.cpp" $, 8544 $, "void f() {\n  int i; i = getchar();\n  while( i != EOF)\n  {\n    bar(i);\n    i = getchar();\n  } ;\n}" $)
8545:
|
8550:
8551: ;
8552: $if $(@expr1073749325 $!@expr1073749326 $assertEquals $(@expr1073749327 "cppcheck-2.8/test/testother.cpp" $, 8552 $, "" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8553:
8554: $check_ $(@expr1073749330 "cppcheck-2.8/test/testother.cpp" $, 8554 $, "void f() {\n  int i; i = getchar();\n  while( EOF != i )\n  {\n    bar(i);\n    i = getchar();\n  } ;\n}" $)
8555:
|
8560:
8561: ;
8562: $if $(@expr1073749331 $!@expr1073749332 $assertEquals $(@expr1073749333 "cppcheck-2.8/test/testother.cpp" $, 8562 $, "" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8563:
8564:
8565:
8566: $check_ $(@expr1073749336 "cppcheck-2.8/test/testother.cpp" $, 8566 $, "void f (FILE * pFile){\nunsigned char c;\ndo {\n  c = getc (pFile);\n} while (c != EOF)}" $)
8567:
|
8570:
8571: ;
8572: $if $(@expr1073749337 $!@expr1073749338 $assertEquals $(@expr1073749339 "cppcheck-2.8/test/testother.cpp" $, 8572 $, "[test.cpp:5]: (warning) Storing getc() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8573:
8574: $check_ $(@expr1073749342 "cppcheck-2.8/test/testother.cpp" $, 8574 $, "void f (FILE * pFile){\nunsigned char c;\ndo {\n  c = getc (pFile);\n} while (EOF != c)}" $)
8575:
|
8578:
8579: ;
8580: $if $(@expr1073749343 $!@expr1073749344 $assertEquals $(@expr1073749345 "cppcheck-2.8/test/testother.cpp" $, 8580 $, "[test.cpp:5]: (warning) Storing getc() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8581:
8582: $check_ $(@expr1073749348 "cppcheck-2.8/test/testother.cpp" $, 8582 $, "void f (FILE * pFile){\nint i;\ndo {\n  i = getc (pFile);\n} while (i != EOF)}" $)
8583:
|
8586:
8587: ;
8588: $if $(@expr1073749349 $!@expr1073749350 $assertEquals $(@expr1073749351 "cppcheck-2.8/test/testother.cpp" $, 8588 $, "" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8589:
8590: $check_ $(@expr1073749354 "cppcheck-2.8/test/testother.cpp" $, 8590 $, "void f (FILE * pFile){\nint i;\ndo {\n  i = getc (pFile);\n} while (EOF != i)}" $)
8591:
|
8594:
8595: ;
8596: $if $(@expr1073749355 $!@expr1073749356 $assertEquals $(@expr1073749357 "cppcheck-2.8/test/testother.cpp" $, 8596 $, "" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8597:
8598:
8599:
8600: $check_ $(@expr1073749360 "cppcheck-2.8/test/testother.cpp" $, 8600 $, "void f (FILE * pFile){\nunsigned char c;\ndo {\n  c = fgetc (pFile);\n} while (c != EOF)}" $)
8601:
|
8604:
8605: ;
8606: $if $(@expr1073749361 $!@expr1073749362 $assertEquals $(@expr1073749363 "cppcheck-2.8/test/testother.cpp" $, 8606 $, "[test.cpp:5]: (warning) Storing fgetc() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8607:
8608: $check_ $(@expr1073749366 "cppcheck-2.8/test/testother.cpp" $, 8608 $, "void f (FILE * pFile){\nchar c;\ndo {\n  c = fgetc (pFile);\n} while (EOF != c)}" $)
8609:
|
8612:
8613: ;
8614: $if $(@expr1073749367 $!@expr1073749368 $assertEquals $(@expr1073749369 "cppcheck-2.8/test/testother.cpp" $, 8614 $, "[test.cpp:5]: (warning) Storing fgetc() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8615:
8616: $check_ $(@expr1073749372 "cppcheck-2.8/test/testother.cpp" $, 8616 $, "void f (FILE * pFile){\nsigned char c;\ndo {\n  c = fgetc (pFile);\n} while (EOF != c)}" $)
8617:
|
8620:
8621: ;
8622: $if $(@expr1073749373 $!@expr1073749374 $assertEquals $(@expr1073749375 "cppcheck-2.8/test/testother.cpp" $, 8622 $, "" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8623:
8624: $check_ $(@expr1073749378 "cppcheck-2.8/test/testother.cpp" $, 8624 $, "void f (FILE * pFile){\nint i;\ndo {\n  i = fgetc (pFile);\n} while (i != EOF)}" $)
8625:
|
8628:
8629: ;
8630: $if $(@expr1073749379 $!@expr1073749380 $assertEquals $(@expr1073749381 "cppcheck-2.8/test/testother.cpp" $, 8630 $, "" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8631:
8632: $check_ $(@expr1073749384 "cppcheck-2.8/test/testother.cpp" $, 8632 $, "void f (FILE * pFile){\nint i;\ndo {\n  i = fgetc (pFile);\n} while (EOF != i)}" $)
8633:
|
8636:
8637: ;
8638: $if $(@expr1073749385 $!@expr1073749386 $assertEquals $(@expr1073749387 "cppcheck-2.8/test/testother.cpp" $, 8638 $, "" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8639:
8640:
8641: $check_ $(@expr1073749390 "cppcheck-2.8/test/testother.cpp" $, 8641 $, "void f(){\n   char ch; ch = std::cin.get();\n   while (EOF != ch) {\n        std::cout << ch;\n        ch = std::cin.get();\n   }\n}" $)
8642:
|
8646:
8647: ;
8648: $if $(@expr1073749391 $!@expr1073749392 $assertEquals $(@expr1073749393 "cppcheck-2.8/test/testother.cpp" $, 8648 $, "[test.cpp:3]: (warning) Storing cin.get() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8649:
8650: $check_ $(@expr1073749396 "cppcheck-2.8/test/testother.cpp" $, 8650 $, "void f(){\n   char ch; ch = std::cin.get();\n   while (ch != EOF) {\n        std::cout << ch;\n        ch = std::cin.get();\n   }\n}" $)
8651:
|
8655:
8656: ;
8657: $if $(@expr1073749397 $!@expr1073749398 $assertEquals $(@expr1073749399 "cppcheck-2.8/test/testother.cpp" $, 8657 $, "[test.cpp:3]: (warning) Storing cin.get() return value in char variable and then comparing with EOF.\n" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8658:
8659: $check_ $(@expr1073749402 "cppcheck-2.8/test/testother.cpp" $, 8659 $, "void f(){\n   int i; i = std::cin.get();\n   while ( EOF != i ) {\n        std::cout << i;\n        i = std::cin.get();\n   }\n}" $)
8660:
|
8664:
8665: ;
8666: $if $(@expr1073749403 $!@expr1073749404 $assertEquals $(@expr1073749405 "cppcheck-2.8/test/testother.cpp" $, 8666 $, "" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8667:
8668: $check_ $(@expr1073749408 "cppcheck-2.8/test/testother.cpp" $, 8668 $, "void f(){\n   int i; i = std::cin.get();\n   while ( i != EOF ) {\n        std::cout << i;\n        i = std::cin.get();\n   }\n}" $)
8669:
|
8673:
8674: ;
8675: $if $(@expr1073749409 $!@expr1073749410 $assertEquals $(@expr1073749411 "cppcheck-2.8/test/testother.cpp" $, 8675 $, "" $, errout@var100 .@expr7480 str (@expr7481 ) $) $) { $return ; }
8676: }
8677:
8678: void checkCommaSeparatedReturn ( ) {
8679: $check_ $(@expr1073749414 "cppcheck-2.8/test/testother.cpp" $, 8679 $, "int fun(int a) {\n  if (a < 0)\n    return a++,\n  do_something();\n}" , nullptr , true , false , false $)
8680:
8681:
8682:
8683: ;
8684: $if $(@expr1073749415 $!@expr1073749416 $assertEquals $(@expr1073749417 "cppcheck-2.8/test/testother.cpp" $, 8684 $, "[test.cpp:3]: (style) Comma is used in return statement. The comma can easily be misread as a ';'.\n" $, errout@var100 .@expr7594 str (@expr7595 ) $) $) { $return ; }
8685:
8686: $check_ $(@expr1073749420 "cppcheck-2.8/test/testother.cpp" $, 8686 $, "int fun(int a) {\n  if (a < 0)\n    return a++, do_something();\n}" , nullptr , true , false , false $)
8687:
8688:
8689: ;
8690: $if $(@expr1073749421 $!@expr1073749422 $assertEquals $(@expr1073749423 "cppcheck-2.8/test/testother.cpp" $, 8690 $, "" $, errout@var100 .@expr7594 str (@expr7595 ) $) $) { $return ; }
8691:
8692: $check_ $(@expr1073749426 "cppcheck-2.8/test/testother.cpp" $, 8692 $, "int fun(int a) {\n  if (a < 0)\n    return a+5,\n  do_something();\n}" , nullptr , true , false , false $)
8693:
8694:
8695:
8696: ;
8697: $if $(@expr1073749427 $!@expr1073749428 $assertEquals $(@expr1073749429 "cppcheck-2.8/test/testother.cpp" $, 8697 $, "[test.cpp:3]: (style) Comma is used in return statement. The comma can easily be misread as a ';'.\n" $, errout@var100 .@expr7594 str (@expr7595 ) $) $) { $return ; }
8698:
8699: $check_ $(@expr1073749432 "cppcheck-2.8/test/testother.cpp" $, 8699 $, "int fun(int a) {\n  if (a < 0)\n    return a+5, do_something();\n}" , nullptr , true , false , false $)
8700:
8701:
8702: ;
8703: $if $(@expr1073749433 $!@expr1073749434 $assertEquals $(@expr1073749435 "cppcheck-2.8/test/testother.cpp" $, 8703 $, "" $, errout@var100 .@expr7594 str (@expr7595 ) $) $) { $return ; }
8704:
8705: $check_ $(@expr1073749438 "cppcheck-2.8/test/testother.cpp" $, 8705 $, "int fun(int a) {\n  if (a < 0)\n    return c<int,\nint>::b;\n}" , nullptr , true , false , false $)
8706:
8707:
8708: ;
8709: $if $(@expr1073749439 $!@expr1073749440 $assertEquals $(@expr1073749441 "cppcheck-2.8/test/testother.cpp" $, 8709 $, "" $, errout@var100 .@expr7594 str (@expr7595 ) $) $) { $return ; }
8710:
8711:
8712: $check_ $(@expr1073749444 "cppcheck-2.8/test/testother.cpp" $, 8712 $, "std::vector<Foo> Bar() {\n    return\n    {\n        { \"1\" },\n        { \"2\" },\n        { \"3\" }\n    };\n}" , nullptr , true , false , false $)
8713:
|
8718:
8719: ;
8720: $if $(@expr1073749445 $!@expr1073749446 $assertEquals $(@expr1073749447 "cppcheck-2.8/test/testother.cpp" $, 8720 $, "" $, errout@var100 .@expr7594 str (@expr7595 ) $) $) { $return ; }
8721: }
8722:
8723: void checkPassByReference ( ) {
8724:
8725: $check_ $(@expr1073749450 "cppcheck-2.8/test/testother.cpp" $, 8725 $, "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    explicit B(A a) : a(std::move(a)) {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;};" , nullptr , false , false , true $)
8726:
|
8734:
8735: ;
8736: $if $(@expr1073749451 $!@expr1073749452 $assertEquals $(@expr1073749453 "cppcheck-2.8/test/testother.cpp" $, 8736 $, "" $, errout@var100 .@expr7630 str (@expr7631 ) $) $) { $return ; }
8737:
8738: $check_ $(@expr1073749456 "cppcheck-2.8/test/testother.cpp" $, 8738 $, "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    explicit B(A a) : a{std::move(a)} {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;};" , nullptr , false , false , true $)
8739:
|
8747:
8748: ;
8749: $if $(@expr1073749457 $!@expr1073749458 $assertEquals $(@expr1073749459 "cppcheck-2.8/test/testother.cpp" $, 8749 $, "" $, errout@var100 .@expr7630 str (@expr7631 ) $) $) { $return ; }
8750:
8751: $check_ $(@expr1073749462 "cppcheck-2.8/test/testother.cpp" $, 8751 $, "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    B(A a, A a2) : a{std::move(a)}, a2{std::move(a2)} {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;    A a2;};" , nullptr , false , false , true $)
8752:
|
8761:
8762: ;
8763: $if $(@expr1073749463 $!@expr1073749464 $assertEquals $(@expr1073749465 "cppcheck-2.8/test/testother.cpp" $, 8763 $, "" $, errout@var100 .@expr7630 str (@expr7631 ) $) $) { $return ; }
8764:
8765: $check_ $(@expr1073749468 "cppcheck-2.8/test/testother.cpp" $, 8765 $, "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    B(A a, A a2) : a{std::move(a)}, a2{a2} {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;    A a2;};" , nullptr , false , false , true $)
8766:
|
8775:
8776: ;
8777: $if $(@expr1073749469 $!@expr1073749470 $assertEquals $(@expr1073749471 "cppcheck-2.8/test/testother.cpp" $, 8777 $, "[test.cpp:8]: (performance) Function parameter 'a2' should be passed by const reference.\n" $, errout@var100 .@expr7630 str (@expr7631 ) $) $) { $return ; }
8778:
8779: $check_ $(@expr1073749474 "cppcheck-2.8/test/testother.cpp" $, 8779 $, "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    B(A a, A a2) : a{std::move(a)}, a2(a2) {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;    A a2;};" , nullptr , false , false , true $)
8780:
|
8789:
8790: ;
8791: $if $(@expr1073749475 $!@expr1073749476 $assertEquals $(@expr1073749477 "cppcheck-2.8/test/testother.cpp" $, 8791 $, "[test.cpp:8]: (performance) Function parameter 'a2' should be passed by const reference.\n" $, errout@var100 .@expr7630 str (@expr7631 ) $) $) { $return ; }
8792:
8793: $check_ $(@expr1073749480 "cppcheck-2.8/test/testother.cpp" $, 8793 $, "std::map<int, int> m;\nvoid f(const decltype(m)::const_iterator i) {}" $)
8794: ;
8795: $if $(@expr1073749481 $!@expr1073749482 $assertEquals $(@expr1073749483 "cppcheck-2.8/test/testother.cpp" $, 8795 $, "" $, errout@var100 .@expr7630 str (@expr7631 ) $) $) { $return ; }
8796: }
8797:
8798: void checkComparisonFunctionIsAlwaysTrueOrFalse ( ) {
8799:
8800: $check_ $(@expr1073749486 "cppcheck-2.8/test/testother.cpp" $, 8800 $, "bool f(int x){\n   return isless(x,x);\n}" $)
8801:
8802: ;
8803: $if $(@expr1073749487 $!@expr1073749488 $assertEquals $(@expr1073749489 "cppcheck-2.8/test/testother.cpp" $, 8803 $, "[test.cpp:2]: (warning) Comparison of two identical variables with isless(x,x) always evaluates to false.\n" $, errout@var100 .@expr7666 str (@expr7667 ) $) $) { $return ; }
8804:
8805: $check_ $(@expr1073749492 "cppcheck-2.8/test/testother.cpp" $, 8805 $, "bool f(int x){\n   return isgreater(x,x);\n}" $)
8806:
8807: ;
8808: $if $(@expr1073749493 $!@expr1073749494 $assertEquals $(@expr1073749495 "cppcheck-2.8/test/testother.cpp" $, 8808 $, "[test.cpp:2]: (warning) Comparison of two identical variables with isgreater(x,x) always evaluates to false.\n" $, errout@var100 .@expr7666 str (@expr7667 ) $) $) { $return ; }
8809:
8810: $check_ $(@expr1073749498 "cppcheck-2.8/test/testother.cpp" $, 8810 $, "bool f(int x){\n   return islessgreater(x,x);\n}" $)
8811:
8812: ;
8813: $if $(@expr1073749499 $!@expr1073749500 $assertEquals $(@expr1073749501 "cppcheck-2.8/test/testother.cpp" $, 8813 $, "[test.cpp:2]: (warning) Comparison of two identical variables with islessgreater(x,x) always evaluates to false.\n" $, errout@var100 .@expr7666 str (@expr7667 ) $) $) { $return ; }
8814:
8815: $check_ $(@expr1073749504 "cppcheck-2.8/test/testother.cpp" $, 8815 $, "bool f(int x){\n   return islessequal(x,x);\n}" $)
8816:
8817: ;
8818: $if $(@expr1073749505 $!@expr1073749506 $assertEquals $(@expr1073749507 "cppcheck-2.8/test/testother.cpp" $, 8818 $, "[test.cpp:2]: (warning) Comparison of two identical variables with islessequal(x,x) always evaluates to true.\n" $, errout@var100 .@expr7666 str (@expr7667 ) $) $) { $return ; }
8819:
8820: $check_ $(@expr1073749510 "cppcheck-2.8/test/testother.cpp" $, 8820 $, "bool f(int x){\n   return isgreaterequal(x,x);\n}" $)
8821:
8822: ;
8823: $if $(@expr1073749511 $!@expr1073749512 $assertEquals $(@expr1073749513 "cppcheck-2.8/test/testother.cpp" $, 8823 $, "[test.cpp:2]: (warning) Comparison of two identical variables with isgreaterequal(x,x) always evaluates to true.\n" $, errout@var100 .@expr7666 str (@expr7667 ) $) $) { $return ; }
8824:
8825:
8826: $check_ $(@expr1073749516 "cppcheck-2.8/test/testother.cpp" $, 8826 $, "bool f(int x, int y){\n   return isgreaterequal(x,y) && islessequal(x,y) && islessgreater(x,y) && isgreater(x,y) && isless(x,y);\n}" $)
8827:
8828: ;
8829: $if $(@expr1073749517 $!@expr1073749518 $assertEquals $(@expr1073749519 "cppcheck-2.8/test/testother.cpp" $, 8829 $, "" $, errout@var100 .@expr7666 str (@expr7667 ) $) $) { $return ; }
8830: }
8831:
8832: void integerOverflow ( ) {
8833:
8834: $check_ $(@expr1073749522 "cppcheck-2.8/test/testother.cpp" $, 8834 $, "void f(unsigned long long ull) {\n    if (ull == 0x89504e470d0a1a0a || ull == 0x8a4d4e470d0a1a0a) ;\n}" $)
8835:
8836: ;
8837: $if $(@expr1073749523 $!@expr1073749524 $assertEquals $(@expr1073749525 "cppcheck-2.8/test/testother.cpp" $, 8837 $, "" $, errout@var100 .@expr1073749526 str (@expr1073749527 ) $) $) { $return ; }
8838: }
8839:
8840: void redundantPointerOp ( ) {
8841: $check_ $(@expr1073749528 "cppcheck-2.8/test/testother.cpp" $, 8841 $, "int *f(int *x) {\n    return &*x;\n}\n" , nullptr , false , true $)
8842:
8843: ;
8844: $if $(@expr1073749529 $!@expr1073749530 $assertEquals $(@expr1073749531 "cppcheck-2.8/test/testother.cpp" $, 8844 $, "[test.cpp:2]: (style) Redundant pointer operation on 'x' - it's already a pointer.\n" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8845:
8846: $check_ $(@expr1073749534 "cppcheck-2.8/test/testother.cpp" $, 8846 $, "int *f(int *y) {\n    return &(*y);\n}\n" , nullptr , false , true $)
8847:
8848: ;
8849: $if $(@expr1073749535 $!@expr1073749536 $assertEquals $(@expr1073749537 "cppcheck-2.8/test/testother.cpp" $, 8849 $, "[test.cpp:2]: (style) Redundant pointer operation on 'y' - it's already a pointer.\n" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8850:
8851: $check_ $(@expr1073749540 "cppcheck-2.8/test/testother.cpp" $, 8851 $, "int f() {\n    int value = 4;\n    int result1 = *(&value);\n    int result2 = *&value;\n    return result1 + result2;\n}\n" , nullptr , false , true $)
8852:
|
8855:
8856: ;
8857: $if $(@expr1073749541 $!@expr1073749542 $assertEquals $(@expr1073749543 "cppcheck-2.8/test/testother.cpp" $, 8857 $, "[test.cpp:3]: (style) Redundant pointer operation on 'value' - it's already a variable.\n[test.cpp:4]: (style) Redundant pointer operation on 'value' - it's already a variable.\n" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return
8858:
8859: ; }
8860:
8861: $check_ $(@expr1073749546 "cppcheck-2.8/test/testother.cpp" $, 8861 $, "void f(int& a, int b) {\n    *(&a) = b;\n}\n" , nullptr , false , true $)
8862:
8863: ;
8864: $if $(@expr1073749547 $!@expr1073749548 $assertEquals $(@expr1073749549 "cppcheck-2.8/test/testother.cpp" $, 8864 $, "[test.cpp:2]: (style) Redundant pointer operation on 'a' - it's already a variable.\n" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return
8865: ; }
8866:
8867: $check_ $(@expr1073749552 "cppcheck-2.8/test/testother.cpp" $, 8867 $, "void f(int**& p) {}\n" , nullptr , false , true $) ;
8868: $if $(@expr1073749553 $!@expr1073749554 $assertEquals $(@expr1073749555 "cppcheck-2.8/test/testother.cpp" $, 8868 $, "" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8869:
8870: checkP (@expr1073749558 "#define	RESTORE(ORIG, COPY) { *ORIG = *COPY; }\nvoid f(int* p, int i) {\n    RESTORE(p, &i);\n}\n"
8871:
8872:
8873: ) ;
8874: $if $(@expr1073749559 $!@expr1073749560 $assertEquals $(@expr1073749561 "cppcheck-2.8/test/testother.cpp" $, 8874 $, "" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8875:
8876:
8877: $check_ $(@expr1073749564 "cppcheck-2.8/test/testother.cpp" $, 8877 $, "void f(const int *b) {\n    int x = 0x20 & *b;\n}\n" , nullptr , false , true $)
8878:
8879: ;
8880: $if $(@expr1073749565 $!@expr1073749566 $assertEquals $(@expr1073749567 "cppcheck-2.8/test/testother.cpp" $, 8880 $, "" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8881:
8882:
8883: $check_ $(@expr1073749570 "cppcheck-2.8/test/testother.cpp" $, 8883 $, "void f(struct foo **my_struct) {\n    char **pass_to_func = &(*my_struct)->buf;\n}\n" , nullptr , false , true $)
8884:
8885: ;
8886: $if $(@expr1073749571 $!@expr1073749572 $assertEquals $(@expr1073749573 "cppcheck-2.8/test/testother.cpp" $, 8886 $, "" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8887:
8888:
8889: $check_ $(@expr1073749576 "cppcheck-2.8/test/testother.cpp" $, 8889 $, "void f(struct foo **my_struct) {\n    char **pass_to_func = &(*my_struct)->buf[10];\n}\n" , nullptr , false , true $)
8890:
8891: ;
8892: $if $(@expr1073749577 $!@expr1073749578 $assertEquals $(@expr1073749579 "cppcheck-2.8/test/testother.cpp" $, 8892 $, "" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8893:
8894:
8895: $check_ $(@expr1073749582 "cppcheck-2.8/test/testother.cpp" $, 8895 $, "void f(char **ptr) {\n    int *x = &(*ptr)[10];\n}\n" , nullptr , false , true $)
8896:
8897: ;
8898: $if $(@expr1073749583 $!@expr1073749584 $assertEquals $(@expr1073749585 "cppcheck-2.8/test/testother.cpp" $, 8898 $, "" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8899:
8900:
8901: $check_ $(@expr1073749588 "cppcheck-2.8/test/testother.cpp" $, 8901 $, "void f(Mutex *mut) {\n    pthread_mutex_lock(&*mut);\n}\n" , nullptr , false , false $)
8902:
8903: ;
8904: $if $(@expr1073749589 $!@expr1073749590 $assertEquals $(@expr1073749591 "cppcheck-2.8/test/testother.cpp" $, 8904 $, "[test.cpp:2]: (style) Redundant pointer operation on 'mut' - it's already a pointer.\n" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8905:
8906:
8907: $check_ $(@expr1073749594 "cppcheck-2.8/test/testother.cpp" $, 8907 $, "void f(char *ptr) {\n    if (&*ptr == NULL)\n        return;\n}\n" , nullptr , false , true $)
8908:
8909:
8910: ;
8911: $if $(@expr1073749595 $!@expr1073749596 $assertEquals $(@expr1073749597 "cppcheck-2.8/test/testother.cpp" $, 8911 $, "[test.cpp:2]: (style) Redundant pointer operation on 'ptr' - it's already a pointer.\n" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8912:
8913:
8914: checkP (@expr1073749600 "#define MUTEX_LOCK(m) pthread_mutex_lock(&(m))\nvoid f(struct mutex *mut) {\n    MUTEX_LOCK(*mut);\n}\n"
8915:
8916:
8917: ) ;
8918: $if $(@expr1073749601 $!@expr1073749602 $assertEquals $(@expr1073749603 "cppcheck-2.8/test/testother.cpp" $, 8918 $, "" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8919:
8920: checkP (@expr1073749606 "#define B(op)        bar(op)\n#define C(orf)       B(&orf)\nvoid foo(const int * pkey) {\n    C(*pkey);\n}\n"
8921:
8922:
8923:
8924: ) ;
8925: $if $(@expr1073749607 $!@expr1073749608 $assertEquals $(@expr1073749609 "cppcheck-2.8/test/testother.cpp" $, 8925 $, "" $, errout@var100 .@expr7708 str (@expr7709 ) $) $) { $return ; }
8926: }
8927:
8928: void test_isSameExpression ( ) {
8929: $check_ $(@expr1073749612 "cppcheck-2.8/test/testother.cpp" $, 8929 $, "bool isInUnoIncludeFile(StringRef name) {   return  name.startswith(SRCDIR \"/com/\") || name.startswith(SRCDIR \"/uno/\");\n};" , "test.cpp" , false , false $)
8930:
8931: ;
8932: $if $(@expr1073749613 $!@expr1073749614 $assertEquals $(@expr1073749615 "cppcheck-2.8/test/testother.cpp" $, 8932 $, "" $, errout@var100 .@expr1073749616 str (@expr1073749617 ) $) $) { $return ; }
8933: }
8934:
8935: void raceAfterInterlockedDecrement ( ) {
8936: checkInterlockedDecrement (@expr1073749618 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    whatever();\n}"
8937:
8938:
8939:
8940: ) ;
8941: $if $(@expr1073749619 $!@expr1073749620 $assertEquals $(@expr1073749621 "cppcheck-2.8/test/testother.cpp" $, 8941 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
8942:
8943: checkInterlockedDecrement (@expr1073749624 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter)\n        return;\n    destroy();\n}"
8944:
|
8948:
8949: ) ;
8950: $if $(@expr1073749625 $!@expr1073749626 $assertEquals $(@expr1073749627 "cppcheck-2.8/test/testother.cpp" $, 8950 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
8951:
8952: checkInterlockedDecrement (@expr1073749630 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (!counter)\n        destroy();\n}"
8953:
|
8956:
8957: ) ;
8958: $if $(@expr1073749631 $!@expr1073749632 $assertEquals $(@expr1073749633 "cppcheck-2.8/test/testother.cpp" $, 8958 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
8959:
8960: checkInterlockedDecrement (@expr1073749636 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter > 0)\n        return;\n    destroy();\n}"
8961:
|
8965:
8966: ) ;
8967: $if $(@expr1073749637 $!@expr1073749638 $assertEquals $(@expr1073749639 "cppcheck-2.8/test/testother.cpp" $, 8967 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
8968:
8969: checkInterlockedDecrement (@expr1073749642 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 < counter)\n        return;\n    destroy();\n}"
8970:
|
8974:
8975: ) ;
8976: $if $(@expr1073749643 $!@expr1073749644 $assertEquals $(@expr1073749645 "cppcheck-2.8/test/testother.cpp" $, 8976 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
8977:
8978: checkInterlockedDecrement (@expr1073749648 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter == 0)\n        destroy();\n}"
8979:
|
8982:
8983: ) ;
8984: $if $(@expr1073749649 $!@expr1073749650 $assertEquals $(@expr1073749651 "cppcheck-2.8/test/testother.cpp" $, 8984 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
8985:
8986: checkInterlockedDecrement (@expr1073749654 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 == counter)\n        destroy();\n}"
8987:
|
8990:
8991: ) ;
8992: $if $(@expr1073749655 $!@expr1073749656 $assertEquals $(@expr1073749657 "cppcheck-2.8/test/testother.cpp" $, 8992 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
8993:
8994: checkInterlockedDecrement (@expr1073749660 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 != counter)\n        return;\n    destroy()\n}"
8995:
|
8999:
9000: ) ;
9001: $if $(@expr1073749661 $!@expr1073749662 $assertEquals $(@expr1073749663 "cppcheck-2.8/test/testother.cpp" $, 9001 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9002:
9003: checkInterlockedDecrement (@expr1073749666 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter != 0)\n        return;\n    destroy()\n}"
9004:
|
9008:
9009: ) ;
9010: $if $(@expr1073749667 $!@expr1073749668 $assertEquals $(@expr1073749669 "cppcheck-2.8/test/testother.cpp" $, 9010 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9011:
9012: checkInterlockedDecrement (@expr1073749672 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter <= 0)\n        destroy();\n}"
9013:
|
9016:
9017: ) ;
9018: $if $(@expr1073749673 $!@expr1073749674 $assertEquals $(@expr1073749675 "cppcheck-2.8/test/testother.cpp" $, 9018 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9019:
9020: checkInterlockedDecrement (@expr1073749678 "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 >= counter)\n        destroy();\n}"
9021:
|
9024:
9025: ) ;
9026: $if $(@expr1073749679 $!@expr1073749680 $assertEquals $(@expr1073749681 "cppcheck-2.8/test/testother.cpp" $, 9026 $, "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9027:
9028: checkInterlockedDecrement (@expr1073749684 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount)\n        return;\n    destroy();\n}"
9029:
|
9033:
9034: ) ;
9035: $if $(@expr1073749685 $!@expr1073749686 $assertEquals $(@expr1073749687 "cppcheck-2.8/test/testother.cpp" $, 9035 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9036:
9037: checkInterlockedDecrement (@expr1073749690 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (!newCount)\n        destroy();\n}"
9038:
|
9041:
9042: ) ;
9043: $if $(@expr1073749691 $!@expr1073749692 $assertEquals $(@expr1073749693 "cppcheck-2.8/test/testother.cpp" $, 9043 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9044:
9045: checkInterlockedDecrement (@expr1073749696 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount > 0)\n        return;\n    destroy();\n}"
9046:
|
9050:
9051: ) ;
9052: $if $(@expr1073749697 $!@expr1073749698 $assertEquals $(@expr1073749699 "cppcheck-2.8/test/testother.cpp" $, 9052 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9053:
9054: checkInterlockedDecrement (@expr1073749702 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 < newCount)\n        return;\n    destroy();\n}"
9055:
|
9059:
9060: ) ;
9061: $if $(@expr1073749703 $!@expr1073749704 $assertEquals $(@expr1073749705 "cppcheck-2.8/test/testother.cpp" $, 9061 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9062:
9063: checkInterlockedDecrement (@expr1073749708 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount == 0)\n        destroy();\n}"
9064:
|
9067:
9068: ) ;
9069: $if $(@expr1073749709 $!@expr1073749710 $assertEquals $(@expr1073749711 "cppcheck-2.8/test/testother.cpp" $, 9069 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9070:
9071: checkInterlockedDecrement (@expr1073749714 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 == newCount)\n        destroy();\n}"
9072:
|
9075:
9076: ) ;
9077: $if $(@expr1073749715 $!@expr1073749716 $assertEquals $(@expr1073749717 "cppcheck-2.8/test/testother.cpp" $, 9077 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9078:
9079: checkInterlockedDecrement (@expr1073749720 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 != newCount)\n        return;\n    destroy()\n}"
9080:
|
9084:
9085: ) ;
9086: $if $(@expr1073749721 $!@expr1073749722 $assertEquals $(@expr1073749723 "cppcheck-2.8/test/testother.cpp" $, 9086 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9087:
9088: checkInterlockedDecrement (@expr1073749726 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount != 0)\n        return;\n    destroy()\n}"
9089:
|
9093:
9094: ) ;
9095: $if $(@expr1073749727 $!@expr1073749728 $assertEquals $(@expr1073749729 "cppcheck-2.8/test/testother.cpp" $, 9095 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9096:
9097: checkInterlockedDecrement (@expr1073749732 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount <= 0)\n        destroy();\n}"
9098:
|
9101:
9102: ) ;
9103: $if $(@expr1073749733 $!@expr1073749734 $assertEquals $(@expr1073749735 "cppcheck-2.8/test/testother.cpp" $, 9103 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9104:
9105: checkInterlockedDecrement (@expr1073749738 "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 >= newCount)\n        destroy;\n}"
9106:
|
9109:
9110: ) ;
9111: $if $(@expr1073749739 $!@expr1073749740 $assertEquals $(@expr1073749741 "cppcheck-2.8/test/testother.cpp" $, 9111 $, "" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9112:
9113: checkInterlockedDecrement (@expr1073749744 "int f() {\n    int counter = 0;\n    if (InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else {\n        return counter;\n    }\n}"
9114:
|
9120:
9121: ) ;
9122: $if $(@expr1073749745 $!@expr1073749746 $assertEquals $(@expr1073749747 "cppcheck-2.8/test/testother.cpp" $, 9122 $, "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9123:
9124: checkInterlockedDecrement (@expr1073749750 "int f() {\n    int counter = 0;\n    if (::InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else {\n        return counter;\n    }\n}"
9125:
|
9131:
9132: ) ;
9133: $if $(@expr1073749751 $!@expr1073749752 $assertEquals $(@expr1073749753 "cppcheck-2.8/test/testother.cpp" $, 9133 $, "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9134:
9135:
9136: checkInterlockedDecrement (@expr1073749756 "int f() {\n    int counter = 0;\n    if (InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    }\n    return counter;\n}"
9137:
|
9142:
9143: ) ;
9144: $if $(@expr1073749757 $!@expr1073749758 $assertEquals $(@expr1073749759 "cppcheck-2.8/test/testother.cpp" $, 9144 $, "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9145:
9146: checkInterlockedDecrement (@expr1073749762 "int f() {\n    int counter = 0;\n    if (::InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    }\n    return counter;\n}"
9147:
|
9152:
9153: ) ;
9154: $if $(@expr1073749763 $!@expr1073749764 $assertEquals $(@expr1073749765 "cppcheck-2.8/test/testother.cpp" $, 9154 $, "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9155:
9156: checkInterlockedDecrement (@expr1073749768 "int f() {\n    int counter = 0;\n    if (InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else\n        return counter;\n   \n}"
9157:
|
9163:
9164: ) ;
9165: $if $(@expr1073749769 $!@expr1073749770 $assertEquals $(@expr1073749771 "cppcheck-2.8/test/testother.cpp" $, 9165 $, "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9166:
9167: checkInterlockedDecrement (@expr1073749774 "int f() {\n    int counter = 0;\n    if (::InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else\n        return counter;\n   \n}"
9168:
|
9174:
9175: ) ;
9176: $if $(@expr1073749775 $!@expr1073749776 $assertEquals $(@expr1073749777 "cppcheck-2.8/test/testother.cpp" $, 9176 $, "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" $, errout@var100 .@expr7798 str (@expr7799 ) $) $) { $return ; }
9177: }
9178:
9179: void testUnusedLabel ( ) {
9180: $check_ $(@expr1073749780 "cppcheck-2.8/test/testother.cpp" $, 9180 $, "void f() {\n    label:\n}" $)
9181:
9182: ;
9183: $if $(@expr1073749781 $!@expr1073749782 $assertEquals $(@expr1073749783 "cppcheck-2.8/test/testother.cpp" $, 9183 $, "[test.cpp:2]: (style) Label 'label' is not used.\n" $, errout@var100 .@expr7960 str (@expr7961 ) $) $) { $return ; }
9184:
9185: $check_ $(@expr1073749786 "cppcheck-2.8/test/testother.cpp" $, 9185 $, "void f() {\n    label:\n    foo();\n    goto label;\n}" $)
9186:
9187:
9188:
9189: ;
9190: $if $(@expr1073749787 $!@expr1073749788 $assertEquals $(@expr1073749789 "cppcheck-2.8/test/testother.cpp" $, 9190 $, "" $, errout@var100 .@expr7960 str (@expr7961 ) $) $) { $return ; }
9191:
9192: $check_ $(@expr1073749792 "cppcheck-2.8/test/testother.cpp" $, 9192 $, "void f() {\n    label:\n    foo();\n    goto label;\n}\nvoid g() {\n    label:\n}" $)
9193:
|
9198:
9199: ;
9200: $if $(@expr1073749793 $!@expr1073749794 $assertEquals $(@expr1073749795 "cppcheck-2.8/test/testother.cpp" $, 9200 $, "[test.cpp:7]: (style) Label 'label' is not used.\n" $, errout@var100 .@expr7960 str (@expr7961 ) $) $) { $return ; }
9201:
9202: $check_ $(@expr1073749798 "cppcheck-2.8/test/testother.cpp" $, 9202 $, "void f() {\n    switch(a) {\n        default:\n    }\n}" $)
9203:
9204:
9205:
9206: ;
9207: $if $(@expr1073749799 $!@expr1073749800 $assertEquals $(@expr1073749801 "cppcheck-2.8/test/testother.cpp" $, 9207 $, "" $, errout@var100 .@expr7960 str (@expr7961 ) $) $) { $return ; }
9208:
9209: $check_ $(@expr1073749804 "cppcheck-2.8/test/testother.cpp" $, 9209 $, "void f() {\n    class X {\n        protected:\n    };\n}" $)
9210:
9211:
9212:
9213: ;
9214: $if $(@expr1073749805 $!@expr1073749806 $assertEquals $(@expr1073749807 "cppcheck-2.8/test/testother.cpp" $, 9214 $, "" $, errout@var100 .@expr7960 str (@expr7961 ) $) $) { $return ; }
9215:
9216: $check_ $(@expr1073749810 "cppcheck-2.8/test/testother.cpp" $, 9216 $, "void f() {\n    class X {\n        my_protected:\n    };\n}" $)
9217:
9218:
9219:
9220: ;
9221: $if $(@expr1073749811 $!@expr1073749812 $assertEquals $(@expr1073749813 "cppcheck-2.8/test/testother.cpp" $, 9221 $, "" $, errout@var100 .@expr7960 str (@expr7961 ) $) $) { $return ; }
9222:
9223: $check_ $(@expr1073749816 "cppcheck-2.8/test/testother.cpp" $, 9223 $, "int test(char art) {\n    switch (art) {\n    caseZERO:\n        return 0;\n    case1:\n        return 1;\n    case 2:\n        return 2;\n    }\n}" $)
9224:
|
9231:
9232: ;
9233: $if $(@expr1073749817 $!@expr1073749818 $assertEquals $(@expr1073749819 "cppcheck-2.8/test/testother.cpp" $, 9233 $, "[test.cpp:3]: (warning) Label 'caseZERO' is not used. Should this be a 'case' of the enclosing switch()?\n[test.cpp:5]: (warning) Label 'case1' is not used. Should this be a 'case' of the enclosing switch()?\n" $, errout@var100 .@expr7960 str (@expr7961 ) $) $) { $return
9234: ; }
9235:
9236: $check_ $(@expr1073749822 "cppcheck-2.8/test/testother.cpp" $, 9236 $, "int test(char art) {\n    switch (art) {\n    case 2:\n        return 2;\n    }\n    label:\n}" $)
9237:
|
9241:
9242: ;
9243: $if $(@expr1073749823 $!@expr1073749824 $assertEquals $(@expr1073749825 "cppcheck-2.8/test/testother.cpp" $, 9243 $, "[test.cpp:6]: (style) Label 'label' is not used.\n" $, errout@var100 .@expr7960 str (@expr7961 ) $) $) { $return ; }
9244: }
9245:
9246: void testEvaluationOrder ( ) {
9247: $check_ $(@expr1073749828 "cppcheck-2.8/test/testother.cpp" $, 9247 $, "void f() {\n  int x = dostuff();\n  return x + x++;\n}" , "test.c" $)
9248:
9249:
9250: ;
9251: $if $(@expr1073749829 $!@expr1073749830 $assertEquals $(@expr1073749831 "cppcheck-2.8/test/testother.cpp" $, 9251 $, "[test.c:3]: (error) Expression 'x+x++' depends on order of evaluation of side effects\n" $, errout@var100 .@expr8008 str (@expr8009 ) $) $) { $return ; }
9252:
9253:
9254: $check_ $(@expr1073749834 "cppcheck-2.8/test/testother.cpp" $, 9254 $, "long int f1(const char *exp) {\n  return strtol(++exp, (char **)&exp, 10);\n}" , "test.c" $)
9255:
9256: ;
9257: $if $(@expr1073749835 $!@expr1073749836 $assertEquals $(@expr1073749837 "cppcheck-2.8/test/testother.cpp" $, 9257 $, "" $, errout@var100 .@expr8008 str (@expr8009 ) $) $) { $return ; }
9258:
9259: $check_ $(@expr1073749840 "cppcheck-2.8/test/testother.cpp" $, 9259 $, "long int f1(const char *exp) {\n  return dostuff(++exp, exp, 10);\n}" , "test.c" $)
9260:
9261: ;
9262: $if $(@expr1073749841 $!@expr1073749842 $assertEquals $(@expr1073749843 "cppcheck-2.8/test/testother.cpp" $, 9262 $, "[test.c:2]: (error) Expression '++exp,exp' depends on order of evaluation of side effects\n" $, errout@var100 .@expr8008 str (@expr8009 ) $) $) { $return ; }
9263:
9264: $check_ $(@expr1073749846 "cppcheck-2.8/test/testother.cpp" $, 9264 $, "void f() {\n  int a;\n  while (a=x(), a==123) {}\n}" , "test.c" $)
9265:
9266:
9267: ;
9268: $if $(@expr1073749847 $!@expr1073749848 $assertEquals $(@expr1073749849 "cppcheck-2.8/test/testother.cpp" $, 9268 $, "" $, errout@var100 .@expr8008 str (@expr8009 ) $) $) { $return ; }
9269:
9270:
9271: $check_ $(@expr1073749852 "cppcheck-2.8/test/testother.cpp" $, 9271 $, "void f(int argc, char *const argv[]) {\n    char **local_argv = safe_malloc(sizeof (*local_argv));\n    int local_argc = 0;\n    local_argv[local_argc++] = argv[0];\n}\n" , "test.c" $)
9272:
9273:
9274:
9275: ;
9276: $if $(@expr1073749853 $!@expr1073749854 $assertEquals $(@expr1073749855 "cppcheck-2.8/test/testother.cpp" $, 9276 $, "[test.c:1]: (style) Parameter 'argv' can be declared with const\n" $, errout@var100 .@expr8008 str (@expr8009 ) $) $) { $return ; }
9277:
9278: $check_ $(@expr1073749858 "cppcheck-2.8/test/testother.cpp" $, 9278 $, "void f() {\n  int x = 0;\n  return 0 + x++;\n}\n" , "test.c" $)
9279:
9280:
9281: ;
9282: $if $(@expr1073749859 $!@expr1073749860 $assertEquals $(@expr1073749861 "cppcheck-2.8/test/testother.cpp" $, 9282 $, "" $, errout@var100 .@expr8008 str (@expr8009 ) $) $) { $return ; }
9283:
9284: $check_ $(@expr1073749864 "cppcheck-2.8/test/testother.cpp" $, 9284 $, "void f(int x, int y) {\n  int a[10];\n  a[x+y] = a[y+x]++;;\n}\n" , "test.c" $)
9285:
9286:
9287: ;
9288: $if $(@expr1073749865 $!@expr1073749866 $assertEquals $(@expr1073749867 "cppcheck-2.8/test/testother.cpp" $, 9288 $, "[test.c:3]: (error) Expression 'a[x+y]=a[y+x]++' depends on order of evaluation of side effects\n" $, errout@var100 .@expr8008 str (@expr8009 ) $) $) { $return ; }
9289: }
9290:
9291: void testEvaluationOrderSelfAssignment ( ) {
9292:
9293: $check_ $(@expr1073749870 "cppcheck-2.8/test/testother.cpp" $, 9293 $, "void f() {\n  int x = x = y + 1;\n}" , "test.c" $)
9294:
9295: ;
9296: $if $(@expr1073749871 $!@expr1073749872 $assertEquals $(@expr1073749873 "cppcheck-2.8/test/testother.cpp" $, 9296 $, "[test.c:2]: (warning) Redundant assignment of 'x' to itself.\n" $, errout@var100 .@expr1073749874 str (@expr1073749875 ) $) $) { $return ; }
9297: }
9298:
9299: void testEvaluationOrderMacro ( ) {
9300:
9301: checkP (@expr1073749876 "#define X x\nvoid f(int x) {\n  return x + X++;\n}"
9302:
9303:
9304: , "test.c" ) ;
9305: $if $(@expr1073749877 $!@expr1073749878 $assertEquals $(@expr1073749879 "cppcheck-2.8/test/testother.cpp" $, 9305 $, "[test.c:3]: (error) Expression 'x+x++' depends on order of evaluation of side effects\n" $, errout@var100 .@expr1073749880 str (@expr1073749881 ) $) $) { $return ; }
9306: }
9307:
9308: void testEvaluationOrderSequencePointsFunctionCall ( ) {
9309:
9310: $check_ $(@expr1073749882 "cppcheck-2.8/test/testother.cpp" $, 9310 $, "void f(int id) {\n  id = dostuff(id += 42);\n}" , "test.c" $)
9311:
9312: ;
9313: $if $(@expr1073749883 $!@expr1073749884 $assertEquals $(@expr1073749885 "cppcheck-2.8/test/testother.cpp" $, 9313 $, "" $, errout@var100 .@expr8062 str (@expr8063 ) $) $) { $return ; }
9314:
9315:
9316: $check_ $(@expr1073749888 "cppcheck-2.8/test/testother.cpp" $, 9316 $, "void f(int id) {\n  id = id + dostuff(id += 42);\n}" , "test.c" $)
9317:
9318: ;
9319: $todoAssertEquals $(@expr1073749889 "cppcheck-2.8/test/testother.cpp" $, 9319 $, "error" $, "" $, errout@var100 .@expr8062 str (@expr8063 ) $) ;
9320: }
9321:
9322: void testEvaluationOrderSequencePointsComma ( ) {
9323: $check_ $(@expr1073749892 "cppcheck-2.8/test/testother.cpp" $, 9323 $, "int f(void) {\n  int t;\n  return (unsigned char)(t=1,t^c);\n}" , "test.c" $)
9324:
9325:
9326: ;
9327: $if $(@expr1073749893 $!@expr1073749894 $assertEquals $(@expr1073749895 "cppcheck-2.8/test/testother.cpp" $, 9327 $, "" $, errout@var100 .@expr8072 str (@expr8073 ) $) $) { $return ; }
9328:
9329: $check_ $(@expr1073749898 "cppcheck-2.8/test/testother.cpp" $, 9329 $, "void f(void) {\n  int t;\n  dostuff(t=1,t^c);\n}" , "test.c" $)
9330:
9331:
9332: ;
9333: $if $(@expr1073749899 $!@expr1073749900 $assertEquals $(@expr1073749901 "cppcheck-2.8/test/testother.cpp" $, 9333 $, "[test.c:3]: (error) Expression 't=1,t^c' depends on order of evaluation of side effects\n" $, errout@var100 .@expr8072 str (@expr8073 ) $) $) { $return ; }
9334:
9335: $check_ $(@expr1073749904 "cppcheck-2.8/test/testother.cpp" $, 9335 $, "void f(void) {\n  int t;\n  dostuff((t=1,t),2);\n}" , "test.c" $)
9336:
9337:
9338: ;
9339: $if $(@expr1073749905 $!@expr1073749906 $assertEquals $(@expr1073749907 "cppcheck-2.8/test/testother.cpp" $, 9339 $, "" $, errout@var100 .@expr8072 str (@expr8073 ) $) $) { $return ; }
9340:
9341:
9342: $check_ $(@expr1073749910 "cppcheck-2.8/test/testother.cpp" $, 9342 $, "void hprf(const char* fp) {\n    do\n        ;\n    while (++fp, (*fp) <= 0177);\n}\n" , "test.c" $)
9343:
9344:
9345:
9346: ;
9347: $if $(@expr1073749911 $!@expr1073749912 $assertEquals $(@expr1073749913 "cppcheck-2.8/test/testother.cpp" $, 9347 $, "" $, errout@var100 .@expr8072 str (@expr8073 ) $) $) { $return ; }
9348:
9349: $check_ $(@expr1073749916 "cppcheck-2.8/test/testother.cpp" $, 9349 $, "void hprf(const char* fp) {\n    do\n        ;\n    while (i++, ++fp, (*fp) <= 0177);\n}\n" , "test.c" $)
9350:
9351:
9352:
9353: ;
9354: $if $(@expr1073749917 $!@expr1073749918 $assertEquals $(@expr1073749919 "cppcheck-2.8/test/testother.cpp" $, 9354 $, "" $, errout@var100 .@expr8072 str (@expr8073 ) $) $) { $return ; }
9355:
9356: $check_ $(@expr1073749922 "cppcheck-2.8/test/testother.cpp" $, 9356 $, "void f(const char* fp) {\n    do\n        ;\n    while (f(++fp, (*fp) <= 7));\n}\n" , "test.c" $)
9357:
9358:
9359:
9360: ;
9361: $if $(@expr1073749923 $!@expr1073749924 $assertEquals $(@expr1073749925 "cppcheck-2.8/test/testother.cpp" $, 9361 $, "[test.c:4]: (error) Expression '++fp,(*fp)<=7' depends on order of evaluation of side effects\n" $, errout@var100 .@expr8072 str (@expr8073 ) $) $) { $return ; }
9362: }
9363:
9364: void testEvaluationOrderSizeof ( ) {
9365: $check_ $(@expr1073749928 "cppcheck-2.8/test/testother.cpp" $, 9365 $, "void f(char *buf) {\n  dostuff(buf++, sizeof(*buf));}" , "test.c" $)
9366:
9367: ;
9368: $if $(@expr1073749929 $!@expr1073749930 $assertEquals $(@expr1073749931 "cppcheck-2.8/test/testother.cpp" $, 9368 $, "" $, errout@var100 .@expr1073749932 str (@expr1073749933 ) $) $) { $return ; }
9369: }
9370:
9371: void testUnsignedLessThanZero ( ) {
9372: $check_ $(@expr1073749934 "cppcheck-2.8/test/testother.cpp" $, 9372 $, "struct d {\n  unsigned n;\n};\nvoid f(void) {\n  struct d d;\n  d.n = 3;\n\n  if (d.n < 0) {\n    return;\n  }\n\n  if (0 > d.n) {\n    return;\n  }\n}" , "test.c" $)
9373:
|
9385:
9386: ;
9387: $if $(@expr1073749935 $!@expr1073749936 $assertEquals $(@expr1073749937 "cppcheck-2.8/test/testother.cpp" $, 9387 $, "[test.c:8]: (style) Checking if unsigned expression 'd.n' is less than zero.\n[test.c:12]: (style) Checking if unsigned expression 'd.n' is less than zero.\n" $, errout@var100 .@expr1073749938 str (@expr1073749939 ) $) $) { $return
9388:
9389: ; }
9390: }
9391:
9392: void doubleMove1 ( ) {
9393: $check_ $(@expr1073749940 "cppcheck-2.8/test/testother.cpp" $, 9393 $, "void g(A a);\nvoid f() {\n    A a;\n    g(std::move(a));\n    g(std::move(a));\n}" $)
9394:
|
9397:
9398: ;
9399: $if $(@expr1073749941 $!@expr1073749942 $assertEquals $(@expr1073749943 "cppcheck-2.8/test/testother.cpp" $, 9399 $, "[test.cpp:5]: (warning) Access of moved variable 'a'.\n" $, errout@var100 .@expr1073749944 str (@expr1073749945 ) $) $) { $return ; }
9400: }
9401:
9402: void doubleMoveMemberInitialization1 ( ) {
9403: $check_ $(@expr1073749946 "cppcheck-2.8/test/testother.cpp" $, 9403 $, "class A\n{\n    A(B && b)\n    :b1(std::move(b))\n    {\n        b2 = std::move(b);\n    }\n    B b1;\n    B b2;\n};" $)
9404:
|
9411:
9412: ;
9413: $if $(@expr1073749947 $!@expr1073749948 $assertEquals $(@expr1073749949 "cppcheck-2.8/test/testother.cpp" $, 9413 $, "[test.cpp:6]: (warning) Access of moved variable 'b'.\n" $, errout@var100 .@expr1073749950 str (@expr1073749951 ) $) $) { $return ; }
9414: }
9415:
9416: void doubleMoveMemberInitialization2 ( ) {
9417: $check_ $(@expr1073749952 "cppcheck-2.8/test/testother.cpp" $, 9417 $, "class A\n{\n    A(B && b)\n    :b1(std::move(b)),\n     b2(std::move(b))\n    {}\n    B b1;\n    B b2;\n};" $)
9418:
|
9424:
9425: ;
9426: $if $(@expr1073749953 $!@expr1073749954 $assertEquals $(@expr1073749955 "cppcheck-2.8/test/testother.cpp" $, 9426 $, "[test.cpp:5]: (warning) Access of moved variable 'b'.\n" $, errout@var100 .@expr1073749956 str (@expr1073749957 ) $) $) { $return ; }
9427: }
9428:
9429: void doubleMoveMemberInitialization3 ( ) {
9430: $check_ $(@expr1073749958 "cppcheck-2.8/test/testother.cpp" $, 9430 $, "struct A { int i; };\nstruct B { A a1; A a2; };\nB f() {\n    A a1 = { 1 };\n    A a2 = { 2 };\n    return { .a1 = std::move(a1), .a2 = std::move(a2) };\n}\n" $)
9431:
|
9435:
9436: ;
9437: $if $(@expr1073749959 $!@expr1073749960 $assertEquals $(@expr1073749961 "cppcheck-2.8/test/testother.cpp" $, 9437 $, "" $, errout@var100 .@expr1073749962 str (@expr1073749963 ) $) $) { $return ; }
9438: }
9439:
9440: void moveAndAssign1 ( ) {
9441: $check_ $(@expr1073749964 "cppcheck-2.8/test/testother.cpp" $, 9441 $, "A g(A a);\nvoid f() {\n    A a;\n    a = g(std::move(a));\n    a = g(std::move(a));\n}" $)
9442:
|
9445:
9446: ;
9447: $if $(@expr1073749965 $!@expr1073749966 $assertEquals $(@expr1073749967 "cppcheck-2.8/test/testother.cpp" $, 9447 $, "" $, errout@var100 .@expr1073749968 str (@expr1073749969 ) $) $) { $return ; }
9448: }
9449:
9450: void moveAndAssign2 ( ) {
9451: $check_ $(@expr1073749970 "cppcheck-2.8/test/testother.cpp" $, 9451 $, "A g(A a);\nvoid f() {\n    A a;\n    B b = g(std::move(a));\n    C c = g(std::move(a));\n}" $)
9452:
|
9455:
9456: ;
9457: $if $(@expr1073749971 $!@expr1073749972 $assertEquals $(@expr1073749973 "cppcheck-2.8/test/testother.cpp" $, 9457 $, "[test.cpp:5]: (warning) Access of moved variable 'a'.\n" $, errout@var100 .@expr1073749974 str (@expr1073749975 ) $) $) { $return ; }
9458: }
9459:
9460: void moveAssignMoveAssign ( ) {
9461: $check_ $(@expr1073749976 "cppcheck-2.8/test/testother.cpp" $, 9461 $, "void h(A a);\nvoid f() {    A a;\n    g(std::move(a));\n    h(a);\n    a = b;\n    h(a);\n    g(std::move(a));\n    h(a);\n    a = b;\n    h(a);\n}" $)
9462:
|
9471:
9472: ;
9473: $if $(@expr1073749977 $!@expr1073749978 $assertEquals $(@expr1073749979 "cppcheck-2.8/test/testother.cpp" $, 9473 $, "[test.cpp:4]: (warning) Access of moved variable 'a'.\n[test.cpp:8]: (warning) Access of moved variable 'a'.\n" $, errout@var100 .@expr1073749980 str (@expr1073749981 ) $) $) { $return
9474: ; }
9475: }
9476:
9477: void moveAndReset1 ( ) {
9478: $check_ $(@expr1073749982 "cppcheck-2.8/test/testother.cpp" $, 9478 $, "A g(A a);\nvoid f() {\n    A a;\n    a.reset(g(std::move(a)));\n    a.reset(g(std::move(a)));\n}" $)
9479:
|
9482:
9483: ;
9484: $if $(@expr1073749983 $!@expr1073749984 $assertEquals $(@expr1073749985 "cppcheck-2.8/test/testother.cpp" $, 9484 $, "" $, errout@var100 .@expr1073749986 str (@expr1073749987 ) $) $) { $return ; }
9485: }
9486:
9487: void moveAndReset2 ( ) {
9488: $check_ $(@expr1073749988 "cppcheck-2.8/test/testother.cpp" $, 9488 $, "A g(A a);\nvoid f() {\n    A a;\n    A b;\n    A c;\n    b.reset(g(std::move(a)));\n    c.reset(g(std::move(a)));\n}" $)
9489:
|
9494:
9495: ;
9496: $if $(@expr1073749989 $!@expr1073749990 $assertEquals $(@expr1073749991 "cppcheck-2.8/test/testother.cpp" $, 9496 $, "[test.cpp:7]: (warning) Access of moved variable 'a'.\n" $, errout@var100 .@expr1073749992 str (@expr1073749993 ) $) $) { $return ; }
9497: }
9498:
9499: void moveResetMoveReset ( ) {
9500: $check_ $(@expr1073749994 "cppcheck-2.8/test/testother.cpp" $, 9500 $, "void h(A a);\nvoid f() {    A a;\n    g(std::move(a));\n    h(a);\n    a.reset(b);\n    h(a);\n    g(std::move(a));\n    h(a);\n    a.reset(b);\n    h(a);\n}" $)
9501:
|
9510:
9511: ;
9512: $if $(@expr1073749995 $!@expr1073749996 $assertEquals $(@expr1073749997 "cppcheck-2.8/test/testother.cpp" $, 9512 $, "[test.cpp:4]: (warning) Access of moved variable 'a'.\n[test.cpp:8]: (warning) Access of moved variable 'a'.\n" $, errout@var100 .@expr1073749998 str (@expr1073749999 ) $) $) { $return
9513: ; }
9514: }
9515:
9516: void moveAndFunctionParameter ( ) {
9517: $check_ $(@expr1073750000 "cppcheck-2.8/test/testother.cpp" $, 9517 $, "void g(A a);\nvoid f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}" $)
9518:
|
9522:
9523: ;
9524: $if $(@expr1073750001 $!@expr1073750002 $assertEquals $(@expr1073750003 "cppcheck-2.8/test/testother.cpp" $, 9524 $, "[test.cpp:5]: (warning) Access of moved variable 'a'.\n[test.cpp:6]: (warning) Access of moved variable 'a'.\n" $, errout@var100 .@expr1073750004 str (@expr1073750005 ) $) $) { $return
9525: ; }
9526: }
9527:
9528: void moveAndFunctionParameterReference ( ) {
9529: $check_ $(@expr1073750006 "cppcheck-2.8/test/testother.cpp" $, 9529 $, "void g(A & a);\nvoid f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}" $)
9530:
|
9534:
9535: ;
9536: $if $(@expr1073750007 $!@expr1073750008 $assertEquals $(@expr1073750009 "cppcheck-2.8/test/testother.cpp" $, 9536 $, "" $, errout@var100 .@expr1073750010 str (@expr1073750011 ) $) $) { $return ; }
9537: }
9538:
9539: void moveAndFunctionParameterConstReference ( ) {
9540: $check_ $(@expr1073750012 "cppcheck-2.8/test/testother.cpp" $, 9540 $, "void g(A const & a);\nvoid f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}" $)
9541:
|
9545:
9546: ;
9547: $if $(@expr1073750013 $!@expr1073750014 $assertEquals $(@expr1073750015 "cppcheck-2.8/test/testother.cpp" $, 9547 $, "[test.cpp:5]: (warning) Access of moved variable 'a'.\n[test.cpp:6]: (warning) Access of moved variable 'a'.\n" $, errout@var100 .@expr1073750016 str (@expr1073750017 ) $) $) { $return
9548: ; }
9549: }
9550:
9551: void moveAndFunctionParameterUnknown ( ) {
9552: $check_ $(@expr1073750018 "cppcheck-2.8/test/testother.cpp" $, 9552 $, "void f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}" $)
9553:
|
9556:
9557: ;
9558: $if $(@expr1073750019 $!@expr1073750020 $assertEquals $(@expr1073750021 "cppcheck-2.8/test/testother.cpp" $, 9558 $, "[test.cpp:4]: (warning, inconclusive) Access of moved variable 'a'.\n[test.cpp:5]: (warning, inconclusive) Access of moved variable 'a'.\n" $, errout@var100 .@expr1073750022 str (@expr1073750023 ) $) $) { $return
9559: ; }
9560: }
9561:
9562: void moveAndReturn ( ) {
9563: $check_ $(@expr1073750024 "cppcheck-2.8/test/testother.cpp" $, 9563 $, "int f(int i) {\n    A a;\n    A b;\n    g(std::move(a));\n    if (i)\n        return g(std::move(b));\n    return h(std::move(a),std::move(b));\n}" $)
9564:
|
9569:
9570: ;
9571: $if $(@expr1073750025 $!@expr1073750026 $assertEquals $(@expr1073750027 "cppcheck-2.8/test/testother.cpp" $, 9571 $, "[test.cpp:7]: (warning) Access of moved variable 'a'.\n" $, errout@var100 .@expr1073750028 str (@expr1073750029 ) $) $) { $return ; }
9572: }
9573:
9574: void moveAndClear ( ) {
9575: $check_ $(@expr1073750030 "cppcheck-2.8/test/testother.cpp" $, 9575 $, "void f() {\n    V v;\n    g(std::move(v));\n    v.clear();\n    if (v.empty()) {}\n}" $)
9576:
|
9579:
9580: ;
9581: $if $(@expr1073750031 $!@expr1073750032 $assertEquals $(@expr1073750033 "cppcheck-2.8/test/testother.cpp" $, 9581 $, "" $, errout@var100 .@expr1073750034 str (@expr1073750035 ) $) $) { $return ; }
9582: }
9583:
9584: void movedPointer ( ) {
9585: $check_ $(@expr1073750036 "cppcheck-2.8/test/testother.cpp" $, 9585 $, "void f() {\n    P p;\n    g(std::move(p));\n    x = p->x;\n    y = p->y;\n}" $)
9586:
|
9589:
9590: ;
9591: $if $(@expr1073750037 $!@expr1073750038 $assertEquals $(@expr1073750039 "cppcheck-2.8/test/testother.cpp" $, 9591 $, "[test.cpp:4]: (warning) Access of moved variable 'p'.\n[test.cpp:5]: (warning) Access of moved variable 'p'.\n" $, errout@var100 .@expr1073750040 str (@expr1073750041 ) $) $) { $return
9592: ; }
9593: }
9594:
9595: void moveAndAddressOf ( ) {
9596: $check_ $(@expr1073750042 "cppcheck-2.8/test/testother.cpp" $, 9596 $, "void f() {\n    std::string s1 = x;\n    std::string s2 = std::move(s1);\n    p = &s1;\n}" $)
9597:
9598:
9599:
9600: ;
9601: $if $(@expr1073750043 $!@expr1073750044 $assertEquals $(@expr1073750045 "cppcheck-2.8/test/testother.cpp" $, 9601 $, "" $, errout@var100 .@expr1073750046 str (@expr1073750047 ) $) $) { $return ; }
9602: }
9603:
9604: void partiallyMoved ( ) {
9605: $check_ $(@expr1073750048 "cppcheck-2.8/test/testother.cpp" $, 9605 $, "void f() {\n    A a;\n    gx(std::move(a).x());\n    gy(std::move(a).y());\n}" $)
9606:
9607:
9608:
9609: ;
9610: $if $(@expr1073750049 $!@expr1073750050 $assertEquals $(@expr1073750051 "cppcheck-2.8/test/testother.cpp" $, 9610 $, "" $, errout@var100 .@expr1073750052 str (@expr1073750053 ) $) $) { $return ; }
9611: }
9612:
9613: void moveAndLambda ( ) {
9614: $check_ $(@expr1073750054 "cppcheck-2.8/test/testother.cpp" $, 9614 $, "void f() {\n    A a;\n    auto h = [a=std::move(a)](){return g(std::move(a));};    b = a;\n}" $)
9615:
9616:
9617:
9618: ;
9619: $if $(@expr1073750055 $!@expr1073750056 $assertEquals $(@expr1073750057 "cppcheck-2.8/test/testother.cpp" $, 9619 $, "" $, errout@var100 .@expr1073750058 str (@expr1073750059 ) $) $) { $return ; }
9620: }
9621:
9622: void forwardAndUsed ( ) {
9623: Settings keepTemplates@var200 ;
9624: keepTemplates@var200 .@expr1073750060 checkUnusedTemplates@var201 =@expr1073750061 true ;
9625:
9626: $check_ $(@expr1073750062 "cppcheck-2.8/test/testother.cpp" $, 9626 $, "template<typename T>\nvoid f(T && t) {\n    g(std::forward<T>(t));\n    T s = t;\n}" , &@expr1073750063 keepTemplates@var200 $)
9627:
9628:
9629:
9630: ;
9631: $if $(@expr1073750064 $!@expr1073750065 $assertEquals $(@expr1073750066 "cppcheck-2.8/test/testother.cpp" $, 9631 $, "[test.cpp:4]: (warning) Access of forwarded variable 't'.\n" $, errout@var100 .@expr1073750067 str (@expr1073750068 ) $) $) { $return ; }
9632: }
9633:
9634: void funcArgNamesDifferent ( ) {
9635: $check_ $(@expr1073750069 "cppcheck-2.8/test/testother.cpp" $, 9635 $, "void func1(int a, int b, int c);\nvoid func1(int a, int b, int c) { }\nvoid func2(int a, int b, int c);\nvoid func2(int A, int B, int C) { }\nclass Fred {\n    void func1(int a, int b, int c);\n    void func2(int a, int b, int c);\n    void func3(int a = 0, int b = 0, int c = 0);\n    void func4(int a = 0, int b = 0, int c = 0);\n};\nvoid Fred::func1(int a, int b, int c) { }\nvoid Fred::func2(int A, int B, int C) { }\nvoid Fred::func3(int a, int b, int c) { }\nvoid Fred::func4(int A, int B, int C) { }" $)
9636:
|
9647:
9648: ;
9649: $if $(@expr1073750070 $!@expr1073750071 $assertEquals $(@expr1073750072 "cppcheck-2.8/test/testother.cpp" $, 9649 $, "[test.cpp:3] -> [test.cpp:4]: (style, inconclusive) Function 'func2' argument 1 names different: declaration 'a' definition 'A'.\n[test.cpp:3] -> [test.cpp:4]: (style, inconclusive) Function 'func2' argument 2 names different: declaration 'b' definition 'B'.\n[test.cpp:3] -> [test.cpp:4]: (style, inconclusive) Function 'func2' argument 3 names different: declaration 'c' definition 'C'.\n[test.cpp:7] -> [test.cpp:12]: (style, inconclusive) Function 'func2' argument 1 names different: declaration 'a' definition 'A'.\n[test.cpp:7] -> [test.cpp:12]: (style, inconclusive) Function 'func2' argument 2 names different: declaration 'b' definition 'B'.\n[test.cpp:7] -> [test.cpp:12]: (style, inconclusive) Function 'func2' argument 3 names different: declaration 'c' definition 'C'.\n[test.cpp:9] -> [test.cpp:14]: (style, inconclusive) Function 'func4' argument 1 names different: declaration 'a' definition 'A'.\n[test.cpp:9] -> [test.cpp:14]: (style, inconclusive) Function 'func4' argument 2 names different: declaration 'b' definition 'B'.\n[test.cpp:9] -> [test.cpp:14]: (style, inconclusive) Function 'func4' argument 3 names different: declaration 'c' definition 'C'.\n" $, errout@var100 .@expr1073750073 str (@expr1073750074 ) $) $) { $return
9650:
|
9656:
9657: ; }
9658: }
9659:
9660: void funcArgOrderDifferent ( ) {
9661: $check_ $(@expr1073750075 "cppcheck-2.8/test/testother.cpp" $, 9661 $, "void func1(int a, int b, int c);\nvoid func1(int a, int b, int c) { }\nvoid func2(int a, int b, int c);\nvoid func2(int c, int b, int a) { }\nvoid func3(int, int b, int c);\nvoid func3(int c, int b, int a) { }\nclass Fred {\n    void func1(int a, int b, int c);\n    void func2(int a, int b, int c);\n    void func3(int a = 0, int b = 0, int c = 0);\n    void func4(int, int b = 0, int c = 0);\n};\nvoid Fred::func1(int a, int b, int c) { }\nvoid Fred::func2(int c, int b, int a) { }\nvoid Fred::func3(int c, int b, int a) { }\nvoid Fred::func4(int c, int b, int a) { }\n" , nullptr , false , false $)
9662:
|
9676:
9677: ;
9678: $if $(@expr1073750076 $!@expr1073750077 $assertEquals $(@expr1073750078 "cppcheck-2.8/test/testother.cpp" $, 9678 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Function 'func2' argument order different: declaration 'a, b, c' definition 'c, b, a'\n[test.cpp:5] -> [test.cpp:6]: (warning) Function 'func3' argument order different: declaration ', b, c' definition 'c, b, a'\n[test.cpp:9] -> [test.cpp:14]: (warning) Function 'func2' argument order different: declaration 'a, b, c' definition 'c, b, a'\n[test.cpp:10] -> [test.cpp:15]: (warning) Function 'func3' argument order different: declaration 'a, b, c' definition 'c, b, a'\n[test.cpp:11] -> [test.cpp:16]: (warning) Function 'func4' argument order different: declaration ', b, c' definition 'c, b, a'\n" $, errout@var100 .@expr1073750079 str (@expr1073750080 ) $) $) { $return
9679:
9680:
9681:
9682: ; }
9683: }
9684:
9685:
9686: void cpp11FunctionArgInit ( ) {
9687:
9688: $do ${ $try ${ $check_ $(@expr1073750081 "cppcheck-2.8/test/testother.cpp" $, 9688 $, "\n void foo(int declaration = {}) {\n   for (int i = 0; i < 10; i++) {}\n\n }\n  " $) $; $} $catch $(@expr1073750082 $... $) ${ $assertNoThrowFail $(@expr1073750083 "cppcheck-2.8/test/testother.cpp" $, 9688 $) $; $} $} $while $(@expr1073750084 $false $)
9689:
9690:
9691: ;
9692: $if $(@expr1073750085 $!@expr1073750086 $assertEquals $(@expr1073750087 "cppcheck-2.8/test/testother.cpp" $, 9692 $, "" $, errout@var100 .@expr1073750088 str (@expr1073750089 ) $) $) { $return ; }
9693: }
9694:
9695: void shadowVariables ( ) {
9696: $check_ $(@expr1073750090 "cppcheck-2.8/test/testother.cpp" $, 9696 $, "int x;\nvoid f() { int x; }" $)
9697: ;
9698: $if $(@expr1073750091 $!@expr1073750092 $assertEquals $(@expr1073750093 "cppcheck-2.8/test/testother.cpp" $, 9698 $, "[test.cpp:1] -> [test.cpp:2]: (style) Local variable \'x\' shadows outer variable\n" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9699:
9700: $check_ $(@expr1073750096 "cppcheck-2.8/test/testother.cpp" $, 9700 $, "int x();\nvoid f() { int x; }" $)
9701: ;
9702: $if $(@expr1073750097 $!@expr1073750098 $assertEquals $(@expr1073750099 "cppcheck-2.8/test/testother.cpp" $, 9702 $, "[test.cpp:1] -> [test.cpp:2]: (style) Local variable \'x\' shadows outer function\n" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9703:
9704: $check_ $(@expr1073750102 "cppcheck-2.8/test/testother.cpp" $, 9704 $, "struct C {\n    C(int x) : x(x) {}\n    int x;\n};" $)
9705:
9706:
9707: ;
9708: $if $(@expr1073750103 $!@expr1073750104 $assertEquals $(@expr1073750105 "cppcheck-2.8/test/testother.cpp" $, 9708 $, "" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9709:
9710: $check_ $(@expr1073750108 "cppcheck-2.8/test/testother.cpp" $, 9710 $, "void f() {\n  if (cond) {int x;}\n  int x;\n}" $)
9711:
9712:
9713: ;
9714: $if $(@expr1073750109 $!@expr1073750110 $assertEquals $(@expr1073750111 "cppcheck-2.8/test/testother.cpp" $, 9714 $, "" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9715:
9716: $check_ $(@expr1073750114 "cppcheck-2.8/test/testother.cpp" $, 9716 $, "int size() {\n  int size;\n}" $)
9717:
9718: ;
9719: $if $(@expr1073750115 $!@expr1073750116 $assertEquals $(@expr1073750117 "cppcheck-2.8/test/testother.cpp" $, 9719 $, "" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9720:
9721: $check_ $(@expr1073750120 "cppcheck-2.8/test/testother.cpp" $, 9721 $, "void f() {\n  int x;\n  auto f = [](){ int x; }}" $)
9722:
9723:
9724: ;
9725: $if $(@expr1073750121 $!@expr1073750122 $assertEquals $(@expr1073750123 "cppcheck-2.8/test/testother.cpp" $, 9725 $, "" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9726:
9727: $check_ $(@expr1073750126 "cppcheck-2.8/test/testother.cpp" $, 9727 $, "void f(int x) { int x; }" $) ;
9728: $if $(@expr1073750127 $!@expr1073750128 $assertEquals $(@expr1073750129 "cppcheck-2.8/test/testother.cpp" $, 9728 $, "[test.cpp:1] -> [test.cpp:1]: (style) Local variable 'x' shadows outer argument\n" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9729:
9730: $check_ $(@expr1073750132 "cppcheck-2.8/test/testother.cpp" $, 9730 $, "class C { C(); void foo() { static int C = 0; } }" $) ;
9731: $if $(@expr1073750133 $!@expr1073750134 $assertEquals $(@expr1073750135 "cppcheck-2.8/test/testother.cpp" $, 9731 $, "" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9732:
9733: $check_ $(@expr1073750138 "cppcheck-2.8/test/testother.cpp" $, 9733 $, "struct C {\n    ~C();\n    void f() {\n        bool C{};\n    }\n};\nC::~C() = default;" $)
9734:
|
9738:
9739: ;
9740: $if $(@expr1073750139 $!@expr1073750140 $assertEquals $(@expr1073750141 "cppcheck-2.8/test/testother.cpp" $, 9740 $, "" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9741:
9742:
9743: $check_ $(@expr1073750144 "cppcheck-2.8/test/testother.cpp" $, 9743 $, "struct S {\n    int i;\n\n    static int foo() {\n        int i = 0;\n        return i;\n    }\n};" $)
9744:
|
9749:
9750: ;
9751: $if $(@expr1073750145 $!@expr1073750146 $assertEquals $(@expr1073750147 "cppcheck-2.8/test/testother.cpp" $, 9751 $, "" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9752:
9753: $check_ $(@expr1073750150 "cppcheck-2.8/test/testother.cpp" $, 9753 $, "struct S {\n    int i{};\n    void f() { int i; }\n};\n" $)
9754:
9755:
9756: ;
9757: $if $(@expr1073750151 $!@expr1073750152 $assertEquals $(@expr1073750153 "cppcheck-2.8/test/testother.cpp" $, 9757 $, "[test.cpp:2] -> [test.cpp:3]: (style) Local variable 'i' shadows outer variable\n" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9758:
9759: $check_ $(@expr1073750156 "cppcheck-2.8/test/testother.cpp" $, 9759 $, "struct S {\n    int i{};\n    std::vector<int> v;\n    void f() const { for (const int& i : v) {} }\n};\n" $)
9760:
9761:
9762:
9763: ;
9764: $if $(@expr1073750157 $!@expr1073750158 $assertEquals $(@expr1073750159 "cppcheck-2.8/test/testother.cpp" $, 9764 $, "[test.cpp:2] -> [test.cpp:4]: (style) Local variable 'i' shadows outer variable\n" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9765:
9766: $check_ $(@expr1073750162 "cppcheck-2.8/test/testother.cpp" $, 9766 $, "struct S {\n    F* f{};\n    std::list<F> fl;\n    void S::f() const;\n};\nvoid S::f() const {\n    for (const F& f : fl) {}\n};\n" $)
9767:
|
9772:
9773: ;
9774: $if $(@expr1073750163 $!@expr1073750164 $assertEquals $(@expr1073750165 "cppcheck-2.8/test/testother.cpp" $, 9774 $, "[test.cpp:2] -> [test.cpp:7]: (style) Local variable 'f' shadows outer variable\n" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9775:
9776: $check_ $(@expr1073750168 "cppcheck-2.8/test/testother.cpp" $, 9776 $, "extern int a;\nint a;\nstatic int f(void) {\n    int a;\n    return 0;\n}\n" , "test.c" $)
9777:
|
9780:
9781: ;
9782: $if $(@expr1073750169 $!@expr1073750170 $assertEquals $(@expr1073750171 "cppcheck-2.8/test/testother.cpp" $, 9782 $, "[test.c:1] -> [test.c:4]: (style) Local variable 'a' shadows outer variable\n" $, errout@var100 .@expr8270 str (@expr8271 ) $) $) { $return ; }
9783: }
9784:
9785: void knownArgument ( ) {
9786: $check_ $(@expr1073750174 "cppcheck-2.8/test/testother.cpp" $, 9786 $, "void g(int);\nvoid f(int x) {\n   g((x & 0x01) >> 7);\n}" $)
9787:
9788:
9789: ;
9790: $if $(@expr1073750175 $!@expr1073750176 $assertEquals $(@expr1073750177 "cppcheck-2.8/test/testother.cpp" $, 9790 $, "[test.cpp:3]: (style) Argument '(x&0x01)>>7' to function g is always 0. It does not matter what value 'x' has.\n" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9791:
9792: $check_ $(@expr1073750180 "cppcheck-2.8/test/testother.cpp" $, 9792 $, "void g(int);\nvoid f(int x) {\n   g((int)((x & 0x01) >> 7));\n}" $)
9793:
9794:
9795: ;
9796: $if $(@expr1073750181 $!@expr1073750182 $assertEquals $(@expr1073750183 "cppcheck-2.8/test/testother.cpp" $, 9796 $, "[test.cpp:3]: (style) Argument '(int)((x&0x01)>>7)' to function g is always 0. It does not matter what value 'x' has.\n" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9797:
9798: $check_ $(@expr1073750186 "cppcheck-2.8/test/testother.cpp" $, 9798 $, "void g(int);\nvoid f(int x) {\n    g(0);\n}" $)
9799:
9800:
9801: ;
9802: $if $(@expr1073750187 $!@expr1073750188 $assertEquals $(@expr1073750189 "cppcheck-2.8/test/testother.cpp" $, 9802 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9803:
9804: $check_ $(@expr1073750192 "cppcheck-2.8/test/testother.cpp" $, 9804 $, "void g(int);\nvoid h() { return 1; }\nvoid f(int x) {\n    g(h());\n}" $)
9805:
9806:
9807:
9808: ;
9809: $if $(@expr1073750193 $!@expr1073750194 $assertEquals $(@expr1073750195 "cppcheck-2.8/test/testother.cpp" $, 9809 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9810:
9811: $check_ $(@expr1073750198 "cppcheck-2.8/test/testother.cpp" $, 9811 $, "void g(int);\nvoid f(int x) {\n    g(std::strlen(\"a\"));\n}" $)
9812:
9813:
9814: ;
9815: $if $(@expr1073750199 $!@expr1073750200 $assertEquals $(@expr1073750201 "cppcheck-2.8/test/testother.cpp" $, 9815 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9816:
9817: $check_ $(@expr1073750204 "cppcheck-2.8/test/testother.cpp" $, 9817 $, "void g(int);\nvoid f(int x) {\n    g((int)0);\n}" $)
9818:
9819:
9820: ;
9821: $if $(@expr1073750205 $!@expr1073750206 $assertEquals $(@expr1073750207 "cppcheck-2.8/test/testother.cpp" $, 9821 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9822:
9823: $check_ $(@expr1073750210 "cppcheck-2.8/test/testother.cpp" $, 9823 $, "void g(Foo *);\nvoid f() {\n    g(reinterpret_cast<Foo*>(0));\n}" $)
9824:
9825:
9826: ;
9827: $if $(@expr1073750211 $!@expr1073750212 $assertEquals $(@expr1073750213 "cppcheck-2.8/test/testother.cpp" $, 9827 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9828:
9829: $check_ $(@expr1073750216 "cppcheck-2.8/test/testother.cpp" $, 9829 $, "void g(int);\nvoid f(int x) {\n    x = 0;\n    g(x);\n}" $)
9830:
9831:
9832:
9833: ;
9834: $if $(@expr1073750217 $!@expr1073750218 $assertEquals $(@expr1073750219 "cppcheck-2.8/test/testother.cpp" $, 9834 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9835:
9836: $check_ $(@expr1073750222 "cppcheck-2.8/test/testother.cpp" $, 9836 $, "void g(int);\nvoid f() {\n    const int x = 0;\n    g(x + 1);\n}" $)
9837:
9838:
9839:
9840: ;
9841: $if $(@expr1073750223 $!@expr1073750224 $assertEquals $(@expr1073750225 "cppcheck-2.8/test/testother.cpp" $, 9841 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9842:
9843: $check_ $(@expr1073750228 "cppcheck-2.8/test/testother.cpp" $, 9843 $, "void g(int);\nvoid f() {\n    char i = 1;\n    g(static_cast<int>(i));\n}" $)
9844:
9845:
9846:
9847: ;
9848: $if $(@expr1073750229 $!@expr1073750230 $assertEquals $(@expr1073750231 "cppcheck-2.8/test/testother.cpp" $, 9848 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9849:
9850: $check_ $(@expr1073750234 "cppcheck-2.8/test/testother.cpp" $, 9850 $, "char *yytext;\nvoid re_init_scanner() {\n  int size = 256;\n  yytext = xmalloc(size * sizeof *yytext);\n}" $)
9851:
9852:
9853:
9854: ;
9855: $if $(@expr1073750235 $!@expr1073750236 $assertEquals $(@expr1073750237 "cppcheck-2.8/test/testother.cpp" $, 9855 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9856:
9857: $check_ $(@expr1073750240 "cppcheck-2.8/test/testother.cpp" $, 9857 $, "void foo(char *c) {\n    if (*c == '+' && (operand || !isalnum(*c))) {}\n}" $)
9858:
9859: ;
9860: $if $(@expr1073750241 $!@expr1073750242 $assertEquals $(@expr1073750243 "cppcheck-2.8/test/testother.cpp" $, 9860 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9861:
9862:
9863: $check_ $(@expr1073750246 "cppcheck-2.8/test/testother.cpp" $, 9863 $, "void f(int);\nvoid g() {\n    const int x[] = { 10, 10 };\n    f(x[0]);\n}" $)
9864:
9865:
9866:
9867: ;
9868: $if $(@expr1073750247 $!@expr1073750248 $assertEquals $(@expr1073750249 "cppcheck-2.8/test/testother.cpp" $, 9868 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9869:
9870: $check_ $(@expr1073750252 "cppcheck-2.8/test/testother.cpp" $, 9870 $, "void f(int);\nvoid g() {\n    int x[] = { 10, 10 };\n    f(x[0]);\n}" $)
9871:
9872:
9873:
9874: ;
9875: $if $(@expr1073750253 $!@expr1073750254 $assertEquals $(@expr1073750255 "cppcheck-2.8/test/testother.cpp" $, 9875 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9876:
9877: $check_ $(@expr1073750258 "cppcheck-2.8/test/testother.cpp" $, 9877 $, "struct A { int x; };void g(int);\nvoid f(int x) {\n    A y;\n    y.x = 1;\n    g(y.x);\n}" $)
9878:
|
9882:
9883: ;
9884: $if $(@expr1073750259 $!@expr1073750260 $assertEquals $(@expr1073750261 "cppcheck-2.8/test/testother.cpp" $, 9884 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9885:
9886:
9887: $check_ $(@expr1073750264 "cppcheck-2.8/test/testother.cpp" $, 9887 $, "void g(int);\nvoid f(int x) {\n   ASSERT((int)((x & 0x01) >> 7));\n}" $)
9888:
9889:
9890: ;
9891: $if $(@expr1073750265 $!@expr1073750266 $assertEquals $(@expr1073750267 "cppcheck-2.8/test/testother.cpp" $, 9891 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9892:
9893:
9894: $check_ $(@expr1073750270 "cppcheck-2.8/test/testother.cpp" $, 9894 $, "void foo() {\n    const std::string heading = \"Interval\";\n    std::cout << std::setw(heading.length());\n}" $)
9895:
9896:
9897: ;
9898: $if $(@expr1073750271 $!@expr1073750272 $assertEquals $(@expr1073750273 "cppcheck-2.8/test/testother.cpp" $, 9898 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9899:
9900:
9901: $check_ $(@expr1073750276 "cppcheck-2.8/test/testother.cpp" $, 9901 $, "struct LongStack {\n    int maxsize;\n};\n\nvoid growLongStack(LongStack* self) {\n    self->maxsize = 32;\n    dostuff(self->maxsize * sizeof(intptr_t));\n}" $)
9902:
|
9907:
9908: ;
9909: $if $(@expr1073750277 $!@expr1073750278 $assertEquals $(@expr1073750279 "cppcheck-2.8/test/testother.cpp" $, 9909 $, "" $, errout@var100 .@expr8354 str (@expr8355 ) $) $) { $return ; }
9910: }
9911:
9912: void knownArgumentHiddenVariableExpression ( ) {
9913:
9914: $check_ $(@expr1073750282 "cppcheck-2.8/test/testother.cpp" $, 9914 $, "void f(int x) {\n    dostuff(x && false);\n    dostuff(false && x);\n    dostuff(x || true);\n    dostuff(true || x);\n    dostuff(x * 0);\n    dostuff(0 * x);\n}\n" $)
9915:
|
9920:
9921: ;
9922: $if $(@expr1073750283 $!@expr1073750284 $assertEquals $(@expr1073750285 "cppcheck-2.8/test/testother.cpp" $, 9922 $, "[test.cpp:3]: (style) Argument 'false&&x' to function dostuff is always 0. Constant literal calculation disable/hide variable expression 'x'.\n[test.cpp:5]: (style) Argument 'true||x' to function dostuff is always 1. Constant literal calculation disable/hide variable expression 'x'.\n[test.cpp:6]: (style) Argument 'x*0' to function dostuff is always 0. Constant literal calculation disable/hide variable expression 'x'.\n[test.cpp:7]: (style) Argument '0*x' to function dostuff is always 0. Constant literal calculation disable/hide variable expression 'x'.\n" $, errout@var100 .@expr1073750286 str (@expr1073750287 ) $) $) { $return
9923:
9924:
9925: ; }
9926: }
9927:
9928: void knownArgumentTernaryOperator ( ) {
9929: $check_ $(@expr1073750288 "cppcheck-2.8/test/testother.cpp" $, 9929 $, "void f(bool a, bool b) {\n    const T* P = nullptr; \n    long N = 0; \n    const bool c = foo(); \n    bar(P, N); \n    if (c ? a : b)\n      baz(P, N); \n}" $)
9930:
|
9935:
9936: ;
9937: $if $(@expr1073750289 $!@expr1073750290 $assertEquals $(@expr1073750291 "cppcheck-2.8/test/testother.cpp" $, 9937 $, "" $, errout@var100 .@expr1073750292 str (@expr1073750293 ) $) $) { $return ; }
9938: }
9939:
9940: void checkComparePointers ( ) {
9941: $check_ $(@expr1073750294 "cppcheck-2.8/test/testother.cpp" $, 9941 $, "int f() {\n    const int foo[1] = {0};\n    const int bar[1] = {0};\n    int diff = 0;\n    if(foo > bar) {\n       diff = 1;\n    }\n    return diff;\n}" $)
9942:
|
9948:
9949: ;
9950: $if $(@expr1073750295 $!@expr1073750296 $assertEquals $(@expr1073750297 "cppcheck-2.8/test/testother.cpp" $, 9950 $, "[test.cpp:2] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:5] -> [test.cpp:5]: (error) Comparing pointers that point to different objects\n" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return
9951:
9952: ; }
9953:
9954: $check_ $(@expr1073750300 "cppcheck-2.8/test/testother.cpp" $, 9954 $, "bool f() {\n    int x = 0;\n    int y = 0;\n    int* xp = &x;\n    int* yp = &y;\n    return xp > yp;\n}" $)
9955:
|
9959:
9960: ;
9961: $if $(@expr1073750301 $!@expr1073750302 $assertEquals $(@expr1073750303 "cppcheck-2.8/test/testother.cpp" $, 9961 $, "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:3] -> [test.cpp:5] -> [test.cpp:6]: (error) Comparing pointers that point to different objects\n" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return
9962:
9963: ; }
9964:
9965: $check_ $(@expr1073750306 "cppcheck-2.8/test/testother.cpp" $, 9965 $, "bool f() {\n    int x = 0;\n    int y = 1;\n    return &x > &y;\n}" $)
9966:
9967:
9968:
9969: ;
9970: $if $(@expr1073750307 $!@expr1073750308 $assertEquals $(@expr1073750309 "cppcheck-2.8/test/testother.cpp" $, 9970 $, "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:4]: (error) Comparing pointers that point to different objects\n" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return
9971:
9972: ; }
9973:
9974: $check_ $(@expr1073750312 "cppcheck-2.8/test/testother.cpp" $, 9974 $, "struct A {int data;};\nbool f() {\n    A x;\n    A y;\n    int* xp = &x.data;\n    int* yp = &y.data;\n    return xp > yp;\n}" $)
9975:
|
9980:
9981: ;
9982: $if $(@expr1073750313 $!@expr1073750314 $assertEquals $(@expr1073750315 "cppcheck-2.8/test/testother.cpp" $, 9982 $, "[test.cpp:1] -> [test.cpp:5] -> [test.cpp:1] -> [test.cpp:6] -> [test.cpp:7]: (error) Comparing pointers that point to different objects\n" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return
9983:
9984: ; }
9985:
9986: $check_ $(@expr1073750318 "cppcheck-2.8/test/testother.cpp" $, 9986 $, "struct A {int data;};\nbool f(A ix, A iy) {\n    A* x = &ix;\n    A* y = &iy;\n    int* xp = &x->data;\n    int* yp = &y->data;\n    return xp > yp;\n}" $)
9987:
|
9992:
9993: ;
9994: $if $(@expr1073750319 $!@expr1073750320 $assertEquals $(@expr1073750321 "cppcheck-2.8/test/testother.cpp" $, 9994 $, "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:5] -> [test.cpp:2] -> [test.cpp:4] -> [test.cpp:6] -> [test.cpp:7]: (error) Comparing pointers that point to different objects\n" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return
9995:
9996: ; }
9997:
9998: $check_ $(@expr1073750324 "cppcheck-2.8/test/testother.cpp" $, 9998 $, "bool f(int * xp, int* yp) {\n    return &xp > &yp;\n}" $)
9999:
10000: ;
10001: $if $(@expr1073750325 $!@expr1073750326 $assertEquals $(@expr1073750327 "cppcheck-2.8/test/testother.cpp" $, 10001 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:1] -> [test.cpp:2] -> [test.cpp:2]: (error) Comparing pointers that point to different objects\n" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return
10002:
10003: ; }
10004:
10005: $check_ $(@expr1073750330 "cppcheck-2.8/test/testother.cpp" $, 10005 $, "int f() {\n    int x = 0;\n    int y = 1;\n    return &x - &y;\n}" $)
10006:
10007:
10008:
10009: ;
10010: $if $(@expr1073750331 $!@expr1073750332 $assertEquals $(@expr1073750333 "cppcheck-2.8/test/testother.cpp" $, 10010 $, "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:4]: (error) Subtracting pointers that point to different objects\n" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return
10011:
10012: ; }
10013:
10014: $check_ $(@expr1073750336 "cppcheck-2.8/test/testother.cpp" $, 10014 $, "bool f() {\n    int x[2] = {1, 2}m;\n    int* xp = &x[0];\n    int* yp = &x[1];\n    return xp > yp;\n}" $)
10015:
|
10018:
10019: ;
10020: $if $(@expr1073750337 $!@expr1073750338 $assertEquals $(@expr1073750339 "cppcheck-2.8/test/testother.cpp" $, 10020 $, "" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return ; }
10021:
10022: $check_ $(@expr1073750342 "cppcheck-2.8/test/testother.cpp" $, 10022 $, "bool f(const int * xp, const int* yp) {\n    return xp > yp;\n}" $)
10023:
10024: ;
10025: $if $(@expr1073750343 $!@expr1073750344 $assertEquals $(@expr1073750345 "cppcheck-2.8/test/testother.cpp" $, 10025 $, "" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return ; }
10026:
10027: $check_ $(@expr1073750348 "cppcheck-2.8/test/testother.cpp" $, 10027 $, "bool f(const int & x, const int& y) {\n    return &x > &y;\n}" $)
10028:
10029: ;
10030: $if $(@expr1073750349 $!@expr1073750350 $assertEquals $(@expr1073750351 "cppcheck-2.8/test/testother.cpp" $, 10030 $, "" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return ; }
10031:
10032: $check_ $(@expr1073750354 "cppcheck-2.8/test/testother.cpp" $, 10032 $, "int& g();\nbool f() {\n    const int& x = g();\n    const int& y = g();\n    const int* xp = &x;\n    const int* yp = &y;\n    return xp > yp;\n}" $)
10033:
|
10038:
10039: ;
10040: $if $(@expr1073750355 $!@expr1073750356 $assertEquals $(@expr1073750357 "cppcheck-2.8/test/testother.cpp" $, 10040 $, "" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return ; }
10041:
10042: $check_ $(@expr1073750360 "cppcheck-2.8/test/testother.cpp" $, 10042 $, "struct A {int data;};\nbool f(A ix) {\n    A* x = &ix;\n    A* y = x;\n    int* xp = &x->data;\n    int* yp = &y->data;\n    return xp > yp;\n}" $)
10043:
|
10048:
10049: ;
10050: $if $(@expr1073750361 $!@expr1073750362 $assertEquals $(@expr1073750363 "cppcheck-2.8/test/testother.cpp" $, 10050 $, "" $, errout@var100 .@expr8474 str (@expr8475 ) $) $) { $return ; }
10051: }
10052:
10053: void unusedVariableValueTemplate ( ) {
10054: $check_ $(@expr1073750366 "cppcheck-2.8/test/testother.cpp" $, 10054 $, "#include <functional>\nclass A\n{\npublic:\n    class Hash\n    {\n    public:\n        std::size_t operator()(const A& a) const\n        {\n            (void)a;\n            return 0;\n        }\n    };\n};\nnamespace std\n{\n    template <>\n    struct hash<A>\n    {\n        std::size_t operator()(const A& a) const noexcept\n        {\n            return A::Hash{}(a);\n        }\n    };\n}" $)
10055:
|
10077:
10078: ;
10079: $if $(@expr1073750367 $!@expr1073750368 $assertEquals $(@expr1073750369 "cppcheck-2.8/test/testother.cpp" $, 10079 $, "" $, errout@var100 .@expr1073750370 str (@expr1073750371 ) $) $) { $return ; }
10080: }
10081:
10082: void moduloOfOne ( ) {
10083: $check_ $(@expr1073750372 "cppcheck-2.8/test/testother.cpp" $, 10083 $, "void f(unsigned int x) {\n  int y = x % 1;\n}" $)
10084:
10085: ;
10086: $if $(@expr1073750373 $!@expr1073750374 $assertEquals $(@expr1073750375 "cppcheck-2.8/test/testother.cpp" $, 10086 $, "[test.cpp:2]: (style) Modulo of one is always equal to zero\n" $, errout@var100 .@expr8552 str (@expr8553 ) $) $) { $return ; }
10087:
10088: $check_ $(@expr1073750378 "cppcheck-2.8/test/testother.cpp" $, 10088 $, "void f() {\n  for (int x = 1; x < 10; x++) {\n    int y = 100 % x;\n  }\n}" $)
10089:
10090:
10091:
10092: ;
10093: $if $(@expr1073750379 $!@expr1073750380 $assertEquals $(@expr1073750381 "cppcheck-2.8/test/testother.cpp" $, 10093 $, "" $, errout@var100 .@expr8552 str (@expr8553 ) $) $) { $return ; }
10094: }
10095:
10096: void sameExpressionPointers ( ) {
10097: $check_ $(@expr1073750384 "cppcheck-2.8/test/testother.cpp" $, 10097 $, "int f(int *i);\nvoid g(int *a, const int *b) {\n    int c = *a;\n    f(a);\n    if (b && c != *a) {}\n}\n" $)
10098:
|
10101:
10102: ;
10103: $if $(@expr1073750385 $!@expr1073750386 $assertEquals $(@expr1073750387 "cppcheck-2.8/test/testother.cpp" $, 10103 $, "" $, errout@var100 .@expr1073750388 str (@expr1073750389 ) $) $) { $return ; }
10104: }
10105:
10106: void checkOverlappingWrite ( ) {
10107:
10108: $check_ $(@expr1073750390 "cppcheck-2.8/test/testother.cpp" $, 10108 $, "void foo() {\n    union { int i; float f; } u;\n    u.i = 0;\n    u.i = u.f;\n}" $)
10109:
10110:
10111:
10112: ;
10113: $if $(@expr1073750391 $!@expr1073750392 $assertEquals $(@expr1073750393 "cppcheck-2.8/test/testother.cpp" $, 10113 $, "[test.cpp:4]: (error) Overlapping read/write of union is undefined behavior\n" $, errout@var100 .@expr8570 str (@expr8571 ) $) $) { $return ; }
10114:
10115:
10116: $check_ $(@expr1073750396 "cppcheck-2.8/test/testother.cpp" $, 10116 $, "void foo() {\n    char a[10];\n    memcpy(&a[5], &a[4], 2u);\n}" $)
10117:
10118:
10119: ;
10120: $if $(@expr1073750397 $!@expr1073750398 $assertEquals $(@expr1073750399 "cppcheck-2.8/test/testother.cpp" $, 10120 $, "[test.cpp:3]: (error) Overlapping read/write in memcpy() is undefined behavior\n" $, errout@var100 .@expr8570 str (@expr8571 ) $) $) { $return ; }
10121:
10122: $check_ $(@expr1073750402 "cppcheck-2.8/test/testother.cpp" $, 10122 $, "void foo() {\n    char a[10];\n    memcpy(a+5, a+4, 2u);\n}" $)
10123:
10124:
10125: ;
10126: $if $(@expr1073750403 $!@expr1073750404 $assertEquals $(@expr1073750405 "cppcheck-2.8/test/testother.cpp" $, 10126 $, "[test.cpp:3]: (error) Overlapping read/write in memcpy() is undefined behavior\n" $, errout@var100 .@expr8570 str (@expr8571 ) $) $) { $return ; }
10127:
10128: $check_ $(@expr1073750408 "cppcheck-2.8/test/testother.cpp" $, 10128 $, "void foo() {\n    char a[10];\n    memcpy(a, a+1, 2u);\n}" $)
10129:
10130:
10131: ;
10132: $if $(@expr1073750409 $!@expr1073750410 $assertEquals $(@expr1073750411 "cppcheck-2.8/test/testother.cpp" $, 10132 $, "[test.cpp:3]: (error) Overlapping read/write in memcpy() is undefined behavior\n" $, errout@var100 .@expr8570 str (@expr8571 ) $) $) { $return ; }
10133:
10134: $check_ $(@expr1073750414 "cppcheck-2.8/test/testother.cpp" $, 10134 $, "void foo() {\n    char a[8];\n    memcpy(&a[0], &a[4], 4u);\n}" $)
10135:
10136:
10137: ;
10138: $if $(@expr1073750415 $!@expr1073750416 $assertEquals $(@expr1073750417 "cppcheck-2.8/test/testother.cpp" $, 10138 $, "" $, errout@var100 .@expr8570 str (@expr8571 ) $) $) { $return ; }
10139:
10140:
10141: $check_ $(@expr1073750420 "cppcheck-2.8/test/testother.cpp" $, 10141 $, "void foo() {\n    wchar_t a[10];\n    wmemcpy(&a[5], &a[4], 2u);\n}" $)
10142:
10143:
10144: ;
10145: $if $(@expr1073750421 $!@expr1073750422 $assertEquals $(@expr1073750423 "cppcheck-2.8/test/testother.cpp" $, 10145 $, "[test.cpp:3]: (error) Overlapping read/write in wmemcpy() is undefined behavior\n" $, errout@var100 .@expr8570 str (@expr8571 ) $) $) { $return ; }
10146:
10147: $check_ $(@expr1073750426 "cppcheck-2.8/test/testother.cpp" $, 10147 $, "void foo() {\n    wchar_t a[10];\n    wmemcpy(a+5, a+4, 2u);\n}" $)
10148:
10149:
10150: ;
10151: $if $(@expr1073750427 $!@expr1073750428 $assertEquals $(@expr1073750429 "cppcheck-2.8/test/testother.cpp" $, 10151 $, "[test.cpp:3]: (error) Overlapping read/write in wmemcpy() is undefined behavior\n" $, errout@var100 .@expr8570 str (@expr8571 ) $) $) { $return ; }
10152:
10153: $check_ $(@expr1073750432 "cppcheck-2.8/test/testother.cpp" $, 10153 $, "void foo() {\n    wchar_t a[10];\n    wmemcpy(a, a+1, 2u);\n}" $)
10154:
10155:
10156: ;
10157: $if $(@expr1073750433 $!@expr1073750434 $assertEquals $(@expr1073750435 "cppcheck-2.8/test/testother.cpp" $, 10157 $, "[test.cpp:3]: (error) Overlapping read/write in wmemcpy() is undefined behavior\n" $, errout@var100 .@expr8570 str (@expr8571 ) $) $) { $return ; }
10158:
10159:
10160: $check_ $(@expr1073750438 "cppcheck-2.8/test/testother.cpp" $, 10160 $, "void foo(char *ptr) {\n    strcpy(ptr, ptr);\n}" $)
10161:
10162: ;
10163: $if $(@expr1073750439 $!@expr1073750440 $assertEquals $(@expr1073750441 "cppcheck-2.8/test/testother.cpp" $, 10163 $, "[test.cpp:2]: (error) Overlapping read/write in strcpy() is undefined behavior\n" $, errout@var100 .@expr8570 str (@expr8571 ) $) $) { $return ; }
10164: }
10165:
10166: void constVariableArrayMember ( ) {
10167: $check_ $(@expr1073750444 "cppcheck-2.8/test/testother.cpp" $, 10167 $, "class Foo {\npublic:\n    Foo();\n    int GetVal() const { return m_Arr[0]; }\n    int m_Arr[1];\n};\n" $)
10168:
|
10171:
10172: ;
10173: $if $(@expr1073750445 $!@expr1073750446 $assertEquals $(@expr1073750447 "cppcheck-2.8/test/testother.cpp" $, 10173 $, "" $, errout@var100 .@expr1073750448 str (@expr1073750449 ) $) $) { $return ; }
10174: }
10175: } ;
10176:
10177: $namespace ${ TestOther instance_TestOther@var202 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@180}
  v {!<=-1,!>=2,0@180}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 43
  "TestOther" always "TestOther"
Line 49
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "emptyBrackets" always "emptyBrackets"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "zeroDiv1" always "zeroDiv1"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "zeroDiv2" always "zeroDiv2"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "zeroDiv3" always "zeroDiv3"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "zeroDiv4" always "zeroDiv4"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "zeroDiv5" always "zeroDiv5"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "zeroDiv6" always "zeroDiv6"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "zeroDiv7" always "zeroDiv7"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "zeroDiv8" always "zeroDiv8"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "zeroDiv9" always "zeroDiv9"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "zeroDiv10" always "zeroDiv10"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "zeroDiv11" always "zeroDiv11"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "zeroDiv12" always "zeroDiv12"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "zeroDiv13" always "zeroDiv13"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "zeroDivCond" always "zeroDivCond"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "nanInArithmeticExpression" always "nanInArithmeticExpression"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "varScope1" always "varScope1"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "varScope2" always "varScope2"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "varScope3" always "varScope3"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "varScope4" always "varScope4"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "varScope5" always "varScope5"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "varScope6" always "varScope6"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "varScope7" always "varScope7"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "varScope8" always "varScope8"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "varScope9" always "varScope9"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "varScope10" always "varScope10"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "varScope11" always "varScope11"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "varScope12" always "varScope12"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "varScope13" always "varScope13"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "varScope14" always "varScope14"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "varScope15" always "varScope15"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "varScope16" always "varScope16"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "varScope17" always "varScope17"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "varScope18" always "varScope18"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "varScope20" always "varScope20"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "varScope21" always "varScope21"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "varScope22" always "varScope22"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "varScope23" always "varScope23"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "varScope24" always "varScope24"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "varScope25" always "varScope25"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "varScope26" always "varScope26"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "varScope27" always "varScope27"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "varScope28" always "varScope28"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "varScope29" always "varScope29"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "varScope30" always "varScope30"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "oldStylePointerCast" always "oldStylePointerCast"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "invalidPointerCast" always "invalidPointerCast"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "passedByValue" always "passedByValue"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "passedByValue_nonConst" always "passedByValue_nonConst"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "passedByValue_externC" always "passedByValue_externC"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "constVariable" always "constVariable"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "constParameterCallback" always "constParameterCallback"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "constPointer" always "constPointer"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "switchRedundantAssignmentTest" always "switchRedundantAssignmentTest"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "switchRedundantOperationTest" always "switchRedundantOperationTest"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "switchRedundantBitwiseOperationTest" always "switchRedundantBitwiseOperationTest"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "unreachableCode" always "unreachableCode"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "suspiciousCase" always "suspiciousCase"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "suspiciousEqualityComparison" always "suspiciousEqualityComparison"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "suspiciousUnaryPlusMinus" always "suspiciousUnaryPlusMinus"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "selfAssignment" always "selfAssignment"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "trac1132" always "trac1132"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectDoesNotPickFunction1" always "testMisusedScopeObjectDoesNotPickFunction1"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectDoesNotPickFunction2" always "testMisusedScopeObjectDoesNotPickFunction2"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectPicksClass" always "testMisusedScopeObjectPicksClass"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectPicksStruct" always "testMisusedScopeObjectPicksStruct"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectDoesNotPickIf" always "testMisusedScopeObjectDoesNotPickIf"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectDoesNotPickConstructorDeclaration" always "testMisusedScopeObjectDoesNotPickConstructorDeclaration"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectDoesNotPickFunctor" always "testMisusedScopeObjectDoesNotPickFunctor"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectDoesNotPickLocalClassConstructors" always "testMisusedScopeObjectDoesNotPickLocalClassConstructors"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectDoesNotPickUsedObject" always "testMisusedScopeObjectDoesNotPickUsedObject"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectDoesNotPickPureC" always "testMisusedScopeObjectDoesNotPickPureC"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectDoesNotPickNestedClass" always "testMisusedScopeObjectDoesNotPickNestedClass"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectInConstructor" always "testMisusedScopeObjectInConstructor"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "testMisusedScopeObjectNoCodeAfter" always "testMisusedScopeObjectNoCodeAfter"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "trac2071" always "trac2071"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "trac2084" always "trac2084"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "trac3693" always "trac3693"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "clarifyCalculation" always "clarifyCalculation"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "clarifyStatement" always "clarifyStatement"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "duplicateBranch" always "duplicateBranch"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "duplicateBranch1" always "duplicateBranch1"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "duplicateBranch2" always "duplicateBranch2"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "duplicateBranch3" always "duplicateBranch3"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "duplicateBranch4" always "duplicateBranch4"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "duplicateExpression1" always "duplicateExpression1"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "duplicateExpression2" always "duplicateExpression2"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "duplicateExpression3" always "duplicateExpression3"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "duplicateExpression4" always "duplicateExpression4"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "duplicateExpression5" always "duplicateExpression5"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "duplicateExpression6" always "duplicateExpression6"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "duplicateExpression7" always "duplicateExpression7"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "duplicateExpression8" always "duplicateExpression8"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "duplicateExpression9" always "duplicateExpression9"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "duplicateExpression10" always "duplicateExpression10"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "duplicateExpression11" always "duplicateExpression11"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "duplicateExpression12" always "duplicateExpression12"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "duplicateExpression13" always "duplicateExpression13"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "duplicateExpression14" always "duplicateExpression14"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "duplicateExpression15" always "duplicateExpression15"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "duplicateExpression16" always "duplicateExpression16"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "duplicateExpressionLoop" always "duplicateExpressionLoop"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "duplicateValueTernary" always "duplicateValueTernary"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "duplicateExpressionTernary" always "duplicateExpressionTernary"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "duplicateExpressionTemplate" always "duplicateExpressionTemplate"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "duplicateExpressionCompareWithZero" always "duplicateExpressionCompareWithZero"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "oppositeExpression" always "oppositeExpression"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "duplicateVarExpression" always "duplicateVarExpression"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "duplicateVarExpressionUnique" always "duplicateVarExpressionUnique"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "duplicateVarExpressionAssign" always "duplicateVarExpressionAssign"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "duplicateVarExpressionCrash" always "duplicateVarExpressionCrash"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "multiConditionSameExpression" always "multiConditionSameExpression"
  false always 0
  false always 0
Line 177
  ( always {!<=-1,!>=2}
  "checkSignOfUnsignedVariable" always "checkSignOfUnsignedVariable"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "checkSignOfPointer" always "checkSignOfPointer"
  false always 0
  false always 0
Line 180
  ( always {!<=-1,!>=2}
  "checkSuspiciousSemicolon1" always "checkSuspiciousSemicolon1"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "checkSuspiciousSemicolon2" always "checkSuspiciousSemicolon2"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "checkSuspiciousSemicolon3" always "checkSuspiciousSemicolon3"
  false always 0
  false always 0
Line 183
  ( always {!<=-1,!>=2}
  "checkSuspiciousComparison" always "checkSuspiciousComparison"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "checkInvalidFree" always "checkInvalidFree"
  false always 0
  false always 0
Line 187
  ( always {!<=-1,!>=2}
  "checkRedundantCopy" always "checkRedundantCopy"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "checkNegativeShift" always "checkNegativeShift"
  false always 0
  false always 0
Line 191
  ( always {!<=-1,!>=2}
  "incompleteArrayFill" always "incompleteArrayFill"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "redundantVarAssignment" always "redundantVarAssignment"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_trivial" always "redundantVarAssignment_trivial"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_struct" always "redundantVarAssignment_struct"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_7133" always "redundantVarAssignment_7133"
  false always 0
  false always 0
Line 197
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_stackoverflow" always "redundantVarAssignment_stackoverflow"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_lambda" always "redundantVarAssignment_lambda"
  false always 0
  false always 0
Line 199
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_loop" always "redundantVarAssignment_loop"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_after_switch" always "redundantVarAssignment_after_switch"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_pointer" always "redundantVarAssignment_pointer"
  false always 0
  false always 0
Line 202
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_pointer_parameter" always "redundantVarAssignment_pointer_parameter"
  false always 0
  false always 0
Line 203
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_array" always "redundantVarAssignment_array"
  false always 0
  false always 0
Line 204
  ( always {!<=-1,!>=2}
  "redundantVarAssignment_switch_break" always "redundantVarAssignment_switch_break"
  false always 0
  false always 0
Line 205
  ( always {!<=-1,!>=2}
  "redundantInitialization" always "redundantInitialization"
  false always 0
  false always 0
Line 206
  ( always {!<=-1,!>=2}
  "redundantMemWrite" always "redundantMemWrite"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "varFuncNullUB" always "varFuncNullUB"
  false always 0
  false always 0
Line 210
  ( always {!<=-1,!>=2}
  "checkPipeParameterSize" always "checkPipeParameterSize"
  false always 0
  false always 0
Line 212
  ( always {!<=-1,!>=2}
  "checkCastIntToCharAndBack" always "checkCastIntToCharAndBack"
  false always 0
  false always 0
Line 214
  ( always {!<=-1,!>=2}
  "checkCommaSeparatedReturn" always "checkCommaSeparatedReturn"
  false always 0
  false always 0
Line 215
  ( always {!<=-1,!>=2}
  "checkPassByReference" always "checkPassByReference"
  false always 0
  false always 0
Line 217
  ( always {!<=-1,!>=2}
  "checkComparisonFunctionIsAlwaysTrueOrFalse" always "checkComparisonFunctionIsAlwaysTrueOrFalse"
  false always 0
  false always 0
Line 219
  ( always {!<=-1,!>=2}
  "integerOverflow" always "integerOverflow"
  false always 0
  false always 0
Line 221
  ( always {!<=-1,!>=2}
  "redundantPointerOp" always "redundantPointerOp"
  false always 0
  false always 0
Line 222
  ( always {!<=-1,!>=2}
  "test_isSameExpression" always "test_isSameExpression"
  false always 0
  false always 0
Line 223
  ( always {!<=-1,!>=2}
  "raceAfterInterlockedDecrement" always "raceAfterInterlockedDecrement"
  false always 0
  false always 0
Line 225
  ( always {!<=-1,!>=2}
  "testUnusedLabel" always "testUnusedLabel"
  false always 0
  false always 0
Line 227
  ( always {!<=-1,!>=2}
  "testEvaluationOrder" always "testEvaluationOrder"
  false always 0
  false always 0
Line 228
  ( always {!<=-1,!>=2}
  "testEvaluationOrderSelfAssignment" always "testEvaluationOrderSelfAssignment"
  false always 0
  false always 0
Line 229
  ( always {!<=-1,!>=2}
  "testEvaluationOrderMacro" always "testEvaluationOrderMacro"
  false always 0
  false always 0
Line 230
  ( always {!<=-1,!>=2}
  "testEvaluationOrderSequencePointsFunctionCall" always "testEvaluationOrderSequencePointsFunctionCall"
  false always 0
  false always 0
Line 231
  ( always {!<=-1,!>=2}
  "testEvaluationOrderSequencePointsComma" always "testEvaluationOrderSequencePointsComma"
  false always 0
  false always 0
Line 232
  ( always {!<=-1,!>=2}
  "testEvaluationOrderSizeof" always "testEvaluationOrderSizeof"
  false always 0
  false always 0
Line 234
  ( always {!<=-1,!>=2}
  "testUnsignedLessThanZero" always "testUnsignedLessThanZero"
  false always 0
  false always 0
Line 236
  ( always {!<=-1,!>=2}
  "doubleMove1" always "doubleMove1"
  false always 0
  false always 0
Line 237
  ( always {!<=-1,!>=2}
  "doubleMoveMemberInitialization1" always "doubleMoveMemberInitialization1"
  false always 0
  false always 0
Line 238
  ( always {!<=-1,!>=2}
  "doubleMoveMemberInitialization2" always "doubleMoveMemberInitialization2"
  false always 0
  false always 0
Line 239
  ( always {!<=-1,!>=2}
  "doubleMoveMemberInitialization3" always "doubleMoveMemberInitialization3"
  false always 0
  false always 0
Line 240
  ( always {!<=-1,!>=2}
  "moveAndAssign1" always "moveAndAssign1"
  false always 0
  false always 0
Line 241
  ( always {!<=-1,!>=2}
  "moveAndAssign2" always "moveAndAssign2"
  false always 0
  false always 0
Line 242
  ( always {!<=-1,!>=2}
  "moveAssignMoveAssign" always "moveAssignMoveAssign"
  false always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
  "moveAndReset1" always "moveAndReset1"
  false always 0
  false always 0
Line 244
  ( always {!<=-1,!>=2}
  "moveAndReset2" always "moveAndReset2"
  false always 0
  false always 0
Line 245
  ( always {!<=-1,!>=2}
  "moveResetMoveReset" always "moveResetMoveReset"
  false always 0
  false always 0
Line 246
  ( always {!<=-1,!>=2}
  "moveAndFunctionParameter" always "moveAndFunctionParameter"
  false always 0
  false always 0
Line 247
  ( always {!<=-1,!>=2}
  "moveAndFunctionParameterReference" always "moveAndFunctionParameterReference"
  false always 0
  false always 0
Line 248
  ( always {!<=-1,!>=2}
  "moveAndFunctionParameterConstReference" always "moveAndFunctionParameterConstReference"
  false always 0
  false always 0
Line 249
  ( always {!<=-1,!>=2}
  "moveAndFunctionParameterUnknown" always "moveAndFunctionParameterUnknown"
  false always 0
  false always 0
Line 250
  ( always {!<=-1,!>=2}
  "moveAndReturn" always "moveAndReturn"
  false always 0
  false always 0
Line 251
  ( always {!<=-1,!>=2}
  "moveAndClear" always "moveAndClear"
  false always 0
  false always 0
Line 252
  ( always {!<=-1,!>=2}
  "movedPointer" always "movedPointer"
  false always 0
  false always 0
Line 253
  ( always {!<=-1,!>=2}
  "moveAndAddressOf" always "moveAndAddressOf"
  false always 0
  false always 0
Line 254
  ( always {!<=-1,!>=2}
  "partiallyMoved" always "partiallyMoved"
  false always 0
  false always 0
Line 255
  ( always {!<=-1,!>=2}
  "moveAndLambda" always "moveAndLambda"
  false always 0
  false always 0
Line 256
  ( always {!<=-1,!>=2}
  "forwardAndUsed" always "forwardAndUsed"
  false always 0
  false always 0
Line 258
  ( always {!<=-1,!>=2}
  "funcArgNamesDifferent" always "funcArgNamesDifferent"
  false always 0
  false always 0
Line 259
  ( always {!<=-1,!>=2}
  "funcArgOrderDifferent" always "funcArgOrderDifferent"
  false always 0
  false always 0
Line 260
  ( always {!<=-1,!>=2}
  "cpp11FunctionArgInit" always "cpp11FunctionArgInit"
  false always 0
  false always 0
Line 262
  ( always {!<=-1,!>=2}
  "shadowVariables" always "shadowVariables"
  false always 0
  false always 0
Line 263
  ( always {!<=-1,!>=2}
  "knownArgument" always "knownArgument"
  false always 0
  false always 0
Line 264
  ( always {!<=-1,!>=2}
  "knownArgumentHiddenVariableExpression" always "knownArgumentHiddenVariableExpression"
  false always 0
  false always 0
Line 265
  ( always {!<=-1,!>=2}
  "knownArgumentTernaryOperator" always "knownArgumentTernaryOperator"
  false always 0
  false always 0
Line 266
  ( always {!<=-1,!>=2}
  "checkComparePointers" always "checkComparePointers"
  false always 0
  false always 0
Line 268
  ( always {!<=-1,!>=2}
  "unusedVariableValueTemplate" always "unusedVariableValueTemplate"
  false always 0
  false always 0
Line 270
  ( always {!<=-1,!>=2}
  "moduloOfOne" always "moduloOfOne"
  false always 0
  false always 0
Line 272
  ( always {!<=-1,!>=2}
  "sameExpressionPointers" always "sameExpressionPointers"
  false always 0
  false always 0
Line 274
  ( always {!<=-1,!>=2}
  "checkOverlappingWrite" always "checkOverlappingWrite"
  false always 0
  false always 0
Line 276
  ( always {!<=-1,!>=2}
  "constVariableArrayMember" always "constVariableArrayMember"
  false always 0
  false always 0
Line 280
  , always 0
  = always 0
  nullptr always 0
  , always 0
  experimental always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 1
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 1
  runSimpleChecks always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 0
  verbose always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 0
  = always 0
  nullptr always 0
Line 282
  "" always ""
Line 284
  ! {!<=-1,!>=2,1@131}
  settings possible {lifetime[Address]=(settings)@88,0@131,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31,lifetime[Address]=(settings)@32,lifetime[Address]=(settings1)@35}
Line 285
  = {&,lifetime[Address]=(_settings),!0}
  & {&,lifetime[Address]=(_settings),!0}
Line 287
  settings possible {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
Line 288
  settings possible {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
Line 289
  settings possible {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
Line 290
  settings possible {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
Line 291
  settings possible {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
Line 292
  settings possible {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
Line 293
  settings possible {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
  inconclusive {!<=-1,!>=2,0@62,1@140}
Line 294
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
  experimental {!<=-1,!>=2,0@62,1@167}
Line 295
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
  = {!<=-1,!>=2,0@103,1@104}
  verbose {!<=-1,!>=2,0@103,1@104}
Line 298
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,lifetime[Address]=(settings)@88,lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31}
  this always !0
Line 299
  code possible {"class Foo {\npublic:\n    Foo();\n    int GetVal() const { return m_Arr[0]; }\n    int m_Arr[1];\n};\n"@1,"void foo() {\n    union { int i; float f; } u;\n    u.i = 0;\n    u.i = u.f;\n}"@2,"void foo() {\n    char a[10];\n    memcpy(&a[5], &a[4], 2u);\n}"@3,"void foo() {\n    char a[10];\n    memcpy(a+5, a+4, 2u);\n}"@4,"void foo() {\n    char a[10];\n    memcpy(a, a+1, 2u);\n}"@5,"void foo() {\n    char a[8];\n    memcpy(&a[0], &a[4], 4u);\n}"@6,"void foo() {\n    wchar_t a[10];\n    wmemcpy(&a[5], &a[4], 2u);\n}"@7,"void foo() {\n    wchar_t a[10];\n    wmemcpy(a+5, a+4, 2u);\n}"@8,"void foo() {\n    wchar_t a[10];\n    wmemcpy(a, a+1, 2u);\n}"@9,"void foo(char *ptr) {\n    strcpy(ptr, ptr);\n}"@10}
Line 300
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testother.cpp"@1,"cppcheck-2.8/test/testother.cpp"@2,"cppcheck-2.8/test/testother.cpp"@3,"cppcheck-2.8/test/testother.cpp"@4,"cppcheck-2.8/test/testother.cpp"@5,"cppcheck-2.8/test/testother.cpp"@6,"cppcheck-2.8/test/testother.cpp"@7,"cppcheck-2.8/test/testother.cpp"@8,"cppcheck-2.8/test/testother.cpp"@9,"cppcheck-2.8/test/testother.cpp"@10}
  line inconclusive {10167@1,10108@2,10116@3,10122@4,10128@5,10134@6,10141@7,10147@8,10153@9,10160@10}
  filename inconclusive {"test.c"@60,0@62,"test.c"@85,"test.c"@86,"test.c"@87,"test.c"@88,"test.c"@89,"test.c"@90,"test.c"@91,"test.c"@92}
  ? possible {"test.cpp",1}
  filename {!0,"test.c"@60,"test.c"@85,"test.c"@86,"test.c"@87,"test.c"@88,"test.c"@89,"test.c"@90,"test.c"@91,"test.c"@92}
  : always {1,"test.cpp"}
  "test.cpp" always "test.cpp"
Line 303
  & {lifetime[Address]=(tokenizer),!0}
  settings inconclusive {lifetime[Address]=(_settings),lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31,lifetime[Address]=(settings)@32,lifetime[Address]=(settings1)@35}
  this always !0
Line 304
  & {lifetime[Address]=(tokenizer),!0}
  settings inconclusive {lifetime[Address]=(_settings),lifetime[Address]=(settings)@254,lifetime[Address]=(settings)@255,lifetime[Address]=(settings),lifetime[Address]=(settings)@1,lifetime[Address]=(settings)@30,lifetime[Address]=(settings)@31,lifetime[Address]=(settings)@32,lifetime[Address]=(settings1)@35}
  this always !0
Line 306
  ( {!<=-1,!>=2,1@161,0@167}
  runSimpleChecks {!<=-1,!>=2,1@161,0@167}
Line 310
  file possible {"cppcheck-2.8/test/testother.cpp"@64,"cppcheck-2.8/test/testother.cpp"@176,"cppcheck-2.8/test/testother.cpp"@178,"cppcheck-2.8/test/testother.cpp"@29,"cppcheck-2.8/test/testother.cpp"@30,"cppcheck-2.8/test/testother.cpp"@249,"cppcheck-2.8/test/testother.cpp"@250}
  line possible {9626@64,6849@176,6868@178,5938@29,5943@30,1967@249,1972@250}
  code possible {"template<typename T>\nvoid f(T && t) {\n    g(std::forward<T>(t));\n    T s = t;\n}"@64,"template<int n> void foo(unsigned int x) {\nif (x <= 0);\n}"@176,"using BOOL = unsigned;\nint i;\nbool f() {\n    return i >= 0;\n}\n"@178,"void foo(bool flag) {\n  bar( (flag) ? ~0u : ~0ul);\n}"@29,"class X {\n    uint64_t a;\n    uint64_t b;\n};\nvoid f(X x) {}"@249}
  "test.cpp" always "test.cpp"
  false always 0
  true always 1
  true always 1
  false always 0
  s possible {lifetime[Address]=(keepTemplates)@64,lifetime[Address]=(keepTemplates)@176,lifetime[Address]=(settings1)@178,lifetime[Address]=(settings)@29,lifetime[Address]=(settings)@30,lifetime[Address]=(s32)@249,lifetime[Address]=(s64)@250}
Line 313
  , always "test.cpp"
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 315
  "" always ""
Line 317
  = {&,lifetime[Address]=(_settings),!0}
  & {&,lifetime[Address]=(_settings),!0}
Line 318
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
Line 319
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
Line 320
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
Line 321
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
Line 322
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
Line 323
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
Line 324
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
Line 325
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
Line 328
  1 always 1
  filename possible {"test.c"@95,"test.cpp"}
Line 329
  code {"#define X x\nvoid f(int x) {\n  return x + X++;\n}"@95,"#define	RESTORE(ORIG, COPY) { *ORIG = *COPY; }\nvoid f(int* p, int i) {\n    RESTORE(p, &i);\n}\n"@145,"#define MUTEX_LOCK(m) pthread_mutex_lock(&(m))\nvoid f(struct mutex *mut) {\n    MUTEX_LOCK(*mut);\n}\n"@152,"#define B(op)        bar(op)\n#define C(orf)       B(&orf)\nvoid foo(const int * pkey) {\n    C(*pkey);\n}\n"@153,"void f(int a, int b) {\n  a > b;\n}"@91,"void f() {\n  for (auto p : m)\n    std::vector<std::pair<std::string, std::string>> k;\n}"@92,"#define REQUIRE(code) {code}\nvoid foo() {\n  if (x == 123);\n  REQUIRE(y=z);\n}"@93,"#define int32_t inttemplate<typename T>\nvoid f() {\n    if (std::is_same_v<T, int> || std::is_same_v<T, int32_t>) {}\n}\n"@10,"#define DOSTUFF1 ;\n#define DOSTUFF2 ;\nvoid f(int x) {\n  if (x)\n    DOSTUFF1\n  else\n    DOSTUFF2\n}"@151,"void f() {\n  int x = 0;\n#ifdef X\n#endif\n  if (id == ABC) { return x; }\n}"@74}
Line 330
  files always size=1
  0 always 0
Line 335
  filedata always size=0
Line 337
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
  nullptr always 0
Line 341
  settings {lifetime[Address]=(_settings),symbolic=(&_settings),&,!0}
  this always !0
Line 343
  "" always ""
Line 344
  & {lifetime[Address]=(preprocessor),!0}
Line 347
  & {lifetime[Address]=(tokenizer),!0}
  settings inconclusive {lifetime[Address]=(_settings),&}
  this always !0
Line 348
  & {lifetime[Address]=(tokenizer),!0}
  settings inconclusive {lifetime[Address]=(_settings),&}
  this always !0
Line 354
  "posix" always "posix"
Line 356
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  356 always 356
  code possible {"void f(){\nint pipefd[1];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}"@192,"void f(){\nint pipefd[2];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}"@193,"void f(){\nint pipefd[20];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}"@194,"void f(){\nint pipefd[1];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}"@195,"void f(){\nint pipefd[2];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}"@196,"void f(){\nint pipefd[20];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}"@197}
  nullptr always 0
  false always 0
  false always 0
  true always 1
  false always 0
  & {lifetime[Address]=(settings),!0}
Line 369
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  369 always 369
  code possible {"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    whatever();\n}"@112,"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter)\n        return;\n    destroy();\n}"@113,"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (!counter)\n        destroy();\n}"@114,"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter > 0)\n        return;\n    destroy();\n}"@115,"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 < counter)\n        return;\n    destroy();\n}"@116,"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter == 0)\n        destroy();\n}"@117,"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 == counter)\n        destroy();\n}"@118,"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 != counter)\n        return;\n    destroy()\n}"@119,"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter != 0)\n        return;\n    destroy()\n}"@120,"void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter <= 0)\n        destroy();\n}"@121}
  nullptr always 0
  false always 0
  false always 0
  true always 1
  false always 0
  & {lifetime[Address]=(settings),!0}
Line 373
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  373 always 373
  "{\n}" always "{\n}"
Line 375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  375 always 375
  "" always ""
Line 380
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  380 always 380
  "void foo() {\n    cout << 1. / 0;\n}" always "void foo() {\n    cout << 1. / 0;\n}"
Line 383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  383 always 383
  "" always ""
Line 385
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  385 always 385
  "void foo() {\n    cout << 42 / (double)0;\n}" always "void foo() {\n    cout << 42 / (double)0;\n}"
Line 388
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  388 always 388
  "" always ""
Line 390
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  390 always 390
  "void foo() {\n    cout << 42 / (float)0;\n}" always "void foo() {\n    cout << 42 / (float)0;\n}"
Line 393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  393 always 393
  "" always ""
Line 395
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  395 always 395
  "void foo() {\n    cout << 42 / (int)0;\n}" always "void foo() {\n    cout << 42 / (int)0;\n}"
Line 398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  398 always 398
  "[test.cpp:2]: (error) Division by zero.\n" always "[test.cpp:2]: (error) Division by zero.\n"
Line 402
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  402 always 402
  "void foo()\n{\n    int sum = 0;\n    for(int i = 0; i < n; i ++)\n    {\n        sum += i;\n    }\n    cout<<b/sum;\n}" always "void foo()\n{\n    int sum = 0;\n    for(int i = 0; i < n; i ++)\n    {\n        sum += i;\n    }\n    cout<<b/sum;\n}"
Line 411
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  411 always 411
  "" always ""
Line 415
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  415 always 415
  "int foo(int i) {\n    return i / 0;\n}" always "int foo(int i) {\n    return i / 0;\n}"
Line 418
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  418 always 418
  "[test.cpp:2]: (error) Division by zero.\n" always "[test.cpp:2]: (error) Division by zero.\n"
Line 420
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  420 always 420
  "int foo(int i) {\n    return i % 0;\n}" always "int foo(int i) {\n    return i % 0;\n}"
Line 423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  423 always 423
  "[test.cpp:2]: (error) Division by zero.\n" always "[test.cpp:2]: (error) Division by zero.\n"
Line 425
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  425 always 425
  "void foo(int& i) {\n    i /= 0;\n}" always "void foo(int& i) {\n    i /= 0;\n}"
Line 428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  428 always 428
  "[test.cpp:2]: (error) Division by zero.\n" always "[test.cpp:2]: (error) Division by zero.\n"
Line 430
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  430 always 430
  "void foo(int& i) {\n    i %= 0;\n}" always "void foo(int& i) {\n    i %= 0;\n}"
Line 433
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  433 always 433
  "[test.cpp:2]: (error) Division by zero.\n" always "[test.cpp:2]: (error) Division by zero.\n"
Line 435
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  435 always 435
  "uint8_t foo(uint8_t i) {\n    return i / 0;\n}" always "uint8_t foo(uint8_t i) {\n    return i / 0;\n}"
Line 438
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  438 always 438
  "[test.cpp:2]: (error) Division by zero.\n" always "[test.cpp:2]: (error) Division by zero.\n"
Line 442
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  442 always 442
  "void f()\n{\n   long a = b / 0x6;\n}" always "void f()\n{\n   long a = b / 0x6;\n}"
Line 446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  446 always 446
  "" always ""
Line 448
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  448 always 448
  "void f()\n{\n   long a = b / 0x0;\n}" always "void f()\n{\n   long a = b / 0x0;\n}"
Line 452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  452 always 452
  "" always ""
Line 453
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  453 always 453
  "void f(long b)\n{\n   long a = b / 0x0;\n}" always "void f(long b)\n{\n   long a = b / 0x0;\n}"
Line 457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  457 always 457
  "[test.cpp:3]: (error) Division by zero.\n" always "[test.cpp:3]: (error) Division by zero.\n"
Line 459
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  459 always 459
  "void f()\n{\n   long a = b / 0L;\n}" always "void f()\n{\n   long a = b / 0L;\n}"
Line 463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  463 always 463
  "" always ""
Line 464
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  464 always 464
  "void f(long b)\n{\n   long a = b / 0L;\n}" always "void f(long b)\n{\n   long a = b / 0L;\n}"
Line 468
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  468 always 468
  "[test.cpp:3]: (error) Division by zero.\n" always "[test.cpp:3]: (error) Division by zero.\n"
Line 470
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  470 always 470
  "void f()\n{\n   long a = b / 0ul;\n}" always "void f()\n{\n   long a = b / 0ul;\n}"
Line 474
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  474 always 474
  "" always ""
Line 475
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  475 always 475
  "void f(long b)\n{\n   long a = b / 0ul;\n}" always "void f(long b)\n{\n   long a = b / 0ul;\n}"
Line 479
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  479 always 479
  "[test.cpp:3]: (error) Division by zero.\n" always "[test.cpp:3]: (error) Division by zero.\n"
Line 483
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  483 always 483
  "void f()\n{\n   long a = b / 0.0;\n}" always "void f()\n{\n   long a = b / 0.0;\n}"
Line 487
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  487 always 487
  "" always ""
Line 489
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  489 always 489
  "void f()\n{\n   long a = b / 0.5;\n}" always "void f()\n{\n   long a = b / 0.5;\n}"
Line 493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  493 always 493
  "" always ""
Line 497
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  497 always 497
  "void f()\n{ { {\n   long a = b / 0;\n} } }" always "void f()\n{ { {\n   long a = b / 0;\n} } }"
Line 501
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  501 always 501
  "" always ""
Line 502
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  502 always 502
  "void f(long b)\n{ { {\n   long a = b / 0;\n} } }" always "void f(long b)\n{ { {\n   long a = b / 0;\n} } }"
Line 506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  506 always 506
  "[test.cpp:3]: (error) Division by zero.\n" always "[test.cpp:3]: (error) Division by zero.\n"
Line 510
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  510 always 510
  "void f()\n{ { {\n   int a = b % 0;\n} } }" always "void f()\n{ { {\n   int a = b % 0;\n} } }"
Line 514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  514 always 514
  "" always ""
Line 515
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  515 always 515
  "void f(int b)\n{ { {\n   int a = b % 0;\n} } }" always "void f(int b)\n{ { {\n   int a = b % 0;\n} } }"
Line 519
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  519 always 519
  "[test.cpp:3]: (error) Division by zero.\n" always "[test.cpp:3]: (error) Division by zero.\n"
Line 524
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  524 always 524
  "void f() {\n  int a = x/2*3/0;\n  int b = y/2*3%0;\n}" always "void f() {\n  int a = x/2*3/0;\n  int b = y/2*3%0;\n}"
Line 528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  528 always 528
  "" always ""
Line 529
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  529 always 529
  "void f(int x, int y) {\n  int a = x/2*3/0;\n  int b = y/2*3%0;\n}" always "void f(int x, int y) {\n  int a = x/2*3/0;\n  int b = y/2*3%0;\n}"
Line 533
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  533 always 533
  "[test.cpp:2]: (error) Division by zero.\n[test.cpp:3]: (error) Division by zero.\n" always "[test.cpp:2]: (error) Division by zero.\n[test.cpp:3]: (error) Division by zero.\n"
Line 539
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  539 always 539
  "void f() {\n  int a = 0;\n  do_something(a);\n  return 4 / a;\n}" always "void f() {\n  int a = 0;\n  do_something(a);\n  return 4 / a;\n}"
Line 544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  544 always 544
  "[test.cpp:4]: (error, inconclusive) Division by zero.\n" always "[test.cpp:4]: (error, inconclusive) Division by zero.\n"
Line 549
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  549 always 549
  "void foo() {\n  double fStepHelp = 0;\n   if( (rOuterValue >>= fStepHelp) ) {\n     if( fStepHelp != 0.0) {\n       double fStepMain = 1;\n       sal_Int32 nIntervalCount = static_cast< sal_Int32 >(fStepMain / fStepHelp);\n    }\n  }\n}" always "void foo() {\n  double fStepHelp = 0;\n   if( (rOuterValue >>= fStepHelp) ) {\n     if( fStepHelp != 0.0) {\n       double fStepMain = 1;\n       sal_Int32 nIntervalCount = static_cast< sal_Int32 >(fStepMain / fStepHelp);\n    }\n  }\n}"
Line 558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  558 always 558
  "" always ""
Line 563
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  563 always 563
  "int main() {\n  std::cout\n    << boost::format(\" %d :: %s <> %s\") % 0 % \"a\" % \"b\"\n    << std::endl;\n  return 0;\n}" always "int main() {\n  std::cout\n    << boost::format(\" %d :: %s <> %s\") % 0 % \"a\" % \"b\"\n    << std::endl;\n  return 0;\n}"
Line 569
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  569 always 569
  "" always ""
Line 573
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  573 always 573
  "void f(int a) {\n  int res = (a+2)/0;\n  int res = (a*2)/0;\n}" always "void f(int a) {\n  int res = (a+2)/0;\n  int res = (a*2)/0;\n}"
Line 577
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  577 always 577
  "[test.cpp:2]: (error) Division by zero.\n[test.cpp:3]: (error) Division by zero.\n" always "[test.cpp:2]: (error) Division by zero.\n[test.cpp:3]: (error) Division by zero.\n"
Line 579
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  579 always 579
  "void f() {\n  int res = (a+2)/0;\n  int res = (a*2)/0;\n}" always "void f() {\n  int res = (a+2)/0;\n  int res = (a*2)/0;\n}"
Line 583
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  583 always 583
  "" always ""
Line 588
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  588 always 588
  "intmax_t f() {\n  return 1 / imaxabs(0);\n}" always "intmax_t f() {\n  return 1 / imaxabs(0);\n}"
Line 591
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  591 always 591
  "[test.cpp:2]: (error) Division by zero.\n" always "[test.cpp:2]: (error) Division by zero.\n"
Line 595
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  595 always 595
  "int f () {\n    int dividend = 10;\n        int divisor = 1;\n    dividend = dividend / (--divisor);\n    return dividend;\n}\n" always "int f () {\n    int dividend = 10;\n        int divisor = 1;\n    dividend = dividend / (--divisor);\n    return dividend;\n}\n"
Line 601
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  601 always 601
  "[test.cpp:4]: (error) Division by zero.\n" always "[test.cpp:4]: (error) Division by zero.\n"
Line 605
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  605 always 605
  "void f(unsigned int x) {\n  int y = 17 / x;\n  if (x > 0) {}\n}" always "void f(unsigned int x) {\n  int y = 17 / x;\n  if (x > 0) {}\n}"
Line 609
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  609 always 609
  "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x>0' is redundant or there is division by zero at line 2.\n" always "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x>0' is redundant or there is division by zero at line 2.\n"
Line 611
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  611 always 611
  "void f(unsigned int x) {\n  int y = 17 / x;\n  if (x >= 1) {}\n}" always "void f(unsigned int x) {\n  int y = 17 / x;\n  if (x >= 1) {}\n}"
Line 615
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  615 always 615
  "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x>=1' is redundant or there is division by zero at line 2.\n" always "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x>=1' is redundant or there is division by zero at line 2.\n"
Line 617
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  617 always 617
  "void f(int x) {\n  int y = 17 / x;\n  if (x == 0) {}\n}" always "void f(int x) {\n  int y = 17 / x;\n  if (x == 0) {}\n}"
Line 621
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  621 always 621
  "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x==0' is redundant or there is division by zero at line 2.\n" always "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x==0' is redundant or there is division by zero at line 2.\n"
Line 623
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  623 always 623
  "void f(unsigned int x) {\n  int y = 17 / x;\n  if (x != 0) {}\n}" always "void f(unsigned int x) {\n  int y = 17 / x;\n  if (x != 0) {}\n}"
Line 627
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  627 always 627
  "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x!=0' is redundant or there is division by zero at line 2.\n" always "[test.cpp:3] -> [test.cpp:2]: (warning) Either the condition 'x!=0' is redundant or there is division by zero at line 2.\n"
Line 630
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  630 always 630
  "void f1(int x, int y) { c=x/y; }\nvoid f2(unsigned int y) {\n    f1(123,y);\n    if (y>0){}\n}" always "void f1(int x, int y) { c=x/y; }\nvoid f2(unsigned int y) {\n    f1(123,y);\n    if (y>0){}\n}"
Line 635
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  635 always 635
  "[test.cpp:4] -> [test.cpp:1]: (warning) Either the condition 'y>0' is redundant or there is division by zero at line 1.\n" always "[test.cpp:4] -> [test.cpp:1]: (warning) Either the condition 'y>0' is redundant or there is division by zero at line 1.\n"
Line 640
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  640 always 640
  "void f() {\n  unsigned int x = do_something();\n  int y = 17 / x;\n  x = some+calculation;\n  if (x != 0) {}\n}" always "void f() {\n  unsigned int x = do_something();\n  int y = 17 / x;\n  x = some+calculation;\n  if (x != 0) {}\n}"
Line 646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  646 always 646
  "" always ""
Line 650
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  650 always 650
  "void do_something();\nint x;\nvoid f() {\n  int y = 17 / x;\n  do_something();\n  if (x != 0) {}\n}" always "void do_something();\nint x;\nvoid f() {\n  int y = 17 / x;\n  do_something();\n  if (x != 0) {}\n}"
Line 657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  657 always 657
  "" always ""
Line 660
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  660 always 660
  "void do_something();\nvoid f() {\n  int x = some + calculation;\n  int y = 17 / x;\n  do_something();\n  if (x != 0) {}\n}" always "void do_something();\nvoid f() {\n  int x = some + calculation;\n  int y = 17 / x;\n  do_something();\n  if (x != 0) {}\n}"
Line 667
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  667 always 667
  "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'x!=0' is redundant or there is division by zero at line 4.\n" always "[test.cpp:6] -> [test.cpp:4]: (warning) Either the condition 'x!=0' is redundant or there is division by zero at line 4.\n"
Line 670
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  670 always 670
  "void do_something(int value);\nvoid f(int x) {\n  int y = 17 / x;\n  do_something(x);\n}" always "void do_something(int value);\nvoid f(int x) {\n  int y = 17 / x;\n  do_something(x);\n}"
Line 675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  675 always 675
  "" always ""
Line 677
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  677 always 677
  "int x;\nvoid f() {\n  int y = 17 / x;\n  while (y || x == 0) { x--; }\n}" always "int x;\nvoid f() {\n  int y = 17 / x;\n  while (y || x == 0) { x--; }\n}"
Line 682
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  682 always 682
  "" always ""
Line 685
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  685 always 685
  "void f() {\ndouble* p1= new double[1];\ndouble* p2= new double[1];\ndouble* p3= new double[1];\ndouble* pp[3] = {p1,p2,p3};\n}" always "void f() {\ndouble* p1= new double[1];\ndouble* p2= new double[1];\ndouble* p3= new double[1];\ndouble* pp[3] = {p1,p2,p3};\n}"
Line 691
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  691 always 691
  "" always ""
Line 694
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  694 always 694
  "int f(int a, int b) {\n  int r = a / b;\n  if (func(b)) {}\n}" always "int f(int a, int b) {\n  int r = a / b;\n  if (func(b)) {}\n}"
Line 698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  698 always 698
  "" always ""
Line 701
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  701 always 701
  "int f(int d) {\n  int r = (a?b:c) / d;\n  if (d == 0) {}\n}" always "int f(int d) {\n  int r = (a?b:c) / d;\n  if (d == 0) {}\n}"
Line 705
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  705 always 705
  "" always ""
Line 707
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  707 always 707
  "int f(int a) {\n  int r = a ? 1 / a : 0;\n  if (a == 0) {}\n}" always "int f(int a) {\n  int r = a ? 1 / a : 0;\n  if (a == 0) {}\n}"
Line 711
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  711 always 711
  "" always ""
Line 713
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  713 always 713
  "int f(int a) {\n  int r = (a == 0) ? 0 : 1 / a;\n  if (a == 0) {}\n}" always "int f(int a) {\n  int r = (a == 0) ? 0 : 1 / a;\n  if (a == 0) {}\n}"
Line 717
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  717 always 717
  "" always ""
Line 719
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  719 always 719
  "int g();\nvoid f(int b) {\n  int x = g();\n  if (x == 0) {}\n  else if (x > 0) {}\n  else\n    a = b / -x;\n}" always "int g();\nvoid f(int b) {\n  int x = g();\n  if (x == 0) {}\n  else if (x > 0) {}\n  else\n    a = b / -x;\n}"
Line 727
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  727 always 727
  "" always ""
Line 729
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  729 always 729
  "struct A {\n    int x;\n};\nint f(A* a) {\n    if (a->x == 0) \n        a->x = 1;\n    return 1/a->x;\n}\n" always "struct A {\n    int x;\n};\nint f(A* a) {\n    if (a->x == 0) \n        a->x = 1;\n    return 1/a->x;\n}\n"
Line 737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  737 always 737
  "" always ""
Line 740
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  740 always 740
  "int f(int argc) {\n    int quotient, remainder;\n    remainder = argc % 2;\n    argc = 2;\n    quotient = argc;\n    if (quotient != 0) \n        return quotient;\n    return remainder;\n}\n" always "int f(int argc) {\n    int quotient, remainder;\n    remainder = argc % 2;\n    argc = 2;\n    quotient = argc;\n    if (quotient != 0) \n        return quotient;\n    return remainder;\n}\n"
Line 749
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  749 always 749
  "" always ""
Line 753
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  753 always 753
  "void f()\n{\n   double x = 3.0 / 0.0 + 1.0;\n   printf(\"%f\", x);\n}" always "void f()\n{\n   double x = 3.0 / 0.0 + 1.0;\n   printf(\"%f\", x);\n}"
Line 758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  758 always 758
  "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n" always "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n"
Line 760
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  760 always 760
  "void f()\n{\n   double x = 3.0 / 0.0 - 1.0;\n   printf(\"%f\", x);\n}" always "void f()\n{\n   double x = 3.0 / 0.0 - 1.0;\n   printf(\"%f\", x);\n}"
Line 765
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  765 always 765
  "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n" always "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n"
Line 767
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  767 always 767
  "void f()\n{\n   double x = 1.0 + 3.0 / 0.0;\n   printf(\"%f\", x);\n}" always "void f()\n{\n   double x = 1.0 + 3.0 / 0.0;\n   printf(\"%f\", x);\n}"
Line 772
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  772 always 772
  "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n" always "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n"
Line 774
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  774 always 774
  "void f()\n{\n   double x = 1.0 - 3.0 / 0.0;\n   printf(\"%f\", x);\n}" always "void f()\n{\n   double x = 1.0 - 3.0 / 0.0;\n   printf(\"%f\", x);\n}"
Line 779
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  779 always 779
  "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n" always "[test.cpp:3]: (style) Using NaN/Inf in a computation.\n"
Line 781
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  781 always 781
  "void f()\n{\n   double x = 3.0 / 0.0;\n   printf(\"%f\", x);\n}" always "void f()\n{\n   double x = 3.0 / 0.0;\n   printf(\"%f\", x);\n}"
Line 786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  786 always 786
  "" always ""
Line 791
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  791 always 791
  "unsigned short foo()\n{\n    test_client CClient;\n    try\n    {\n        if (CClient.Open())\n        {\n            return 0;\n        }\n    }\n    catch (...)\n    {\n        return 2;\n    }\n\n    try\n    {\n        CClient.Close();\n    }\n    catch (...)\n    {\n        return 2;\n    }\n\n    return 1;\n}" always "unsigned short foo()\n{\n    test_client CClient;\n    try\n    {\n        if (CClient.Open())\n        {\n            return 0;\n        }\n    }\n    catch (...)\n    {\n        return 2;\n    }\n\n    try\n    {\n        CClient.Close();\n    }\n    catch (...)\n    {\n        return 2;\n    }\n\n    return 1;\n}"
Line 817
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  817 always 817
  "" always ""
Line 821
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  821 always 821
  "int foo()\n{\n    Error e;\n    e.SetValue(12);\n    throw e;\n}" always "int foo()\n{\n    Error e;\n    e.SetValue(12);\n    throw e;\n}"
Line 827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  827 always 827
  "" always ""
Line 831
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  831 always 831
  "void foo()\n{\n    int i;\n    int *p = 0;\n    if (abc)\n    {\n        p = &i;\n    }\n    *p = 1;\n}" always "void foo()\n{\n    int i;\n    int *p = 0;\n    if (abc)\n    {\n        p = &i;\n    }\n    *p = 1;\n}"
Line 841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  841 always 841
  "" always ""
Line 845
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  845 always 845
  "void foo()\n{\n    int i;\n}" always "void foo()\n{\n    int i;\n}"
Line 849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  849 always 849
  "" always ""
Line 853
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  853 always 853
  "void f(int x)\n{\n    int i = 0;\n    if (x) {\n        for ( ; i < 10; ++i) ;\n    }\n}" always "void f(int x)\n{\n    int i = 0;\n    if (x) {\n        for ( ; i < 10; ++i) ;\n    }\n}"
Line 860
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  860 always 860
  "[test.cpp:3]: (style) The scope of the variable 'i' can be reduced.\n" always "[test.cpp:3]: (style) The scope of the variable 'i' can be reduced.\n"
Line 862
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  862 always 862
  "void f(int x) {\n    const unsigned char i = 0;\n    if (x) {\n        for ( ; i < 10; ++i) ;\n    }\n}" always "void f(int x) {\n    const unsigned char i = 0;\n    if (x) {\n        for ( ; i < 10; ++i) ;\n    }\n}"
Line 868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  868 always 868
  "" always ""
Line 870
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  870 always 870
  "void f(int x)\n{\n    int i = 0;\n    if (x) {b()}\n    else {\n        for ( ; i < 10; ++i) ;\n    }\n}" always "void f(int x)\n{\n    int i = 0;\n    if (x) {b()}\n    else {\n        for ( ; i < 10; ++i) ;\n    }\n}"
Line 878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  878 always 878
  "[test.cpp:3]: (style) The scope of the variable 'i' can be reduced.\n" always "[test.cpp:3]: (style) The scope of the variable 'i' can be reduced.\n"
Line 882
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  882 always 882
  "void f(int x)\n{\n    int i = x;\n    if (a) {\n        x++;\n    }\n    if (b) {\n        c(i);\n    }\n}" always "void f(int x)\n{\n    int i = x;\n    if (a) {\n        x++;\n    }\n    if (b) {\n        c(i);\n    }\n}"
Line 892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  892 always 892
  "" always ""
Line 894
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  894 always 894
  "void f() {\n    bool success = false;\n    int notReducable(someClass.getX(&success));\n    if (success) {\n        foo(notReducable);\n    }\n}" always "void f() {\n    bool success = false;\n    int notReducable(someClass.getX(&success));\n    if (success) {\n        foo(notReducable);\n    }\n}"
Line 901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  901 always 901
  "" always ""
Line 903
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  903 always 903
  "void foo(Test &test) {\n  int& x = test.getData();\n  if (test.process())\n    x = 0;\n}" always "void foo(Test &test) {\n  int& x = test.getData();\n  if (test.process())\n    x = 0;\n}"
Line 908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  908 always 908
  "" always ""
Line 910
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  910 always 910
  "void f()\n{\nint foo = 0;\nstd::vector<int> vec(10);\nBOOST_FOREACH(int& i, vec)\n{\n foo += 1;\n if(foo == 10)\n {\n  return 0;\n }\n}\n}" always "void f()\n{\nint foo = 0;\nstd::vector<int> vec(10);\nBOOST_FOREACH(int& i, vec)\n{\n foo += 1;\n if(foo == 10)\n {\n  return 0;\n }\n}\n}"
Line 923
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  923 always 923
  "" always ""
Line 925
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  925 always 925
  "void f(int &x)\n{\n  int n = 1;\n  do\n  {\n    ++n;\n    ++x;\n  } while (x);\n}" always "void f(int &x)\n{\n  int n = 1;\n  do\n  {\n    ++n;\n    ++x;\n  } while (x);\n}"
Line 934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  934 always 934
  "" always ""
Line 938
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  938 always 938
  "void f(int x)\n{\n    int y = 0;\n    b(y);\n    if (x) {\n        y++;\n    }\n}" always "void f(int x)\n{\n    int y = 0;\n    b(y);\n    if (x) {\n        y++;\n    }\n}"
Line 946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  946 always 946
  "" always ""
Line 950
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  950 always 950
  "void test() {\n    float edgeResistance=1;\n    std::vector<int> edges;\n    BOOST_FOREACH(int edge, edges) {\n        edgeResistance = (edge+1) / 2.0;\n    }\n}" always "void test() {\n    float edgeResistance=1;\n    std::vector<int> edges;\n    BOOST_FOREACH(int edge, edges) {\n        edgeResistance = (edge+1) / 2.0;\n    }\n}"
Line 957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  957 always 957
  "[test.cpp:2]: (style) The scope of the variable 'edgeResistance' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 'edgeResistance' can be reduced.\n"
Line 962
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  962 always 962
  "class fred {\npublic:\n    void x();\n};\nvoid test(int a) {\n    fred f;\n    if (a == 2) {\n        f.x();\n    }\n}" always "class fred {\npublic:\n    void x();\n};\nvoid test(int a) {\n    fred f;\n    if (a == 2) {\n        f.x();\n    }\n}"
Line 972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  972 always 972
  "" always ""
Line 976
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  976 always 976
  "int f()\n{\n    int x = 0;\n    FOR {\n        foo(x++);\n    }\n}" always "int f()\n{\n    int x = 0;\n    FOR {\n        foo(x++);\n    }\n}"
Line 983
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  983 always 983
  "" always ""
Line 987
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  987 always 987
  "int f() {\n    int x = 0;\n    AB ab = { x, 0 };\n}" always "int f() {\n    int x = 0;\n    AB ab = { x, 0 };\n}"
Line 991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  991 always 991
  "" always ""
Line 993
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  993 always 993
  "int f() {\n    int x = 0;\n    if (a == 0) { ++x; }\n    AB ab = { x, 0 };\n}" always "int f() {\n    int x = 0;\n    if (a == 0) { ++x; }\n    AB ab = { x, 0 };\n}"
Line 998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  998 always 998
  "" always ""
Line 1000
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1000 always 1000
  "int f() {\n    int x = 0;\n    if (a == 0) { ++x; }\n    if (a == 1) { AB ab = { x, 0 }; }\n}" always "int f() {\n    int x = 0;\n    if (a == 0) { ++x; }\n    if (a == 1) { AB ab = { x, 0 }; }\n}"
Line 1005
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1005 always 1005
  "" always ""
Line 1009
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1009 always 1009
  "void f(int x) {\n    int i[5];\n    int* j = y;\n    if (x)\n        foo(i);\n    foo(j);\n}" always "void f(int x) {\n    int i[5];\n    int* j = y;\n    if (x)\n        foo(i);\n    foo(j);\n}"
Line 1016
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1016 always 1016
  "[test.cpp:2]: (style) The scope of the variable 'i' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 'i' can be reduced.\n"
Line 1018
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1018 always 1018
  "void f(int x) {\n    int i[5];\n    int* j;\n    if (x)\n        j = i;\n    foo(j);\n}" always "void f(int x) {\n    int i[5];\n    int* j;\n    if (x)\n        j = i;\n    foo(j);\n}"
Line 1025
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1025 always 1025
  "" always ""
Line 1027
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1027 always 1027
  "void f(int x) {\n    const bool b = true;\n    x++;\n    if (x == 5)\n        foo(b);\n}" always "void f(int x) {\n    const bool b = true;\n    x++;\n    if (x == 5)\n        foo(b);\n}"
Line 1033
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1033 always 1033
  "" always ""
Line 1035
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1035 always 1035
  "void f(int x) {\n    const bool b = x;\n    x++;\n    if (x == 5)\n        foo(b);\n}" always "void f(int x) {\n    const bool b = x;\n    x++;\n    if (x == 5)\n        foo(b);\n}"
Line 1041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1041 always 1041
  "" always ""
Line 1046
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1046 always 1046
  "void f() {\n    int i = 0;\n    forever {\n        if (i++ == 42) { break; }\n    }\n}" always "void f() {\n    int i = 0;\n    forever {\n        if (i++ == 42) { break; }\n    }\n}"
Line 1052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1052 always 1052
  "" always ""
Line 1057
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1057 always 1057
  "void f() {\n    const int i( foo());\n    if(a) {\n        for ( ; i < 10; ++i) ;\n    }\n}" always "void f() {\n    const int i( foo());\n    if(a) {\n        for ( ; i < 10; ++i) ;\n    }\n}"
Line 1063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1063 always 1063
  "" always ""
Line 1068
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1068 always 1068
  "void f() {\n    int a,b,c;\n    if (a);\n    else if(b);\n    else if(c);\n    else;\n}" always "void f() {\n    int a,b,c;\n    if (a);\n    else if(b);\n    else if(c);\n    else;\n}"
  nullptr always 0
  false always 0
  false always 0
Line 1075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1075 always 1075
  "" always ""
Line 1079
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1079 always 1079
  "void f() {\n    int a = 0;\n    while((++a) < 56) {\n        foo();\n    }\n}" always "void f() {\n    int a = 0;\n    while((++a) < 56) {\n        foo();\n    }\n}"
Line 1085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1085 always 1085
  "" always ""
Line 1087
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1087 always 1087
  "void f() {\n    int a = 0;\n    do {\n        foo();\n    } while((++a) < 56);\n}" always "void f() {\n    int a = 0;\n    do {\n        foo();\n    } while((++a) < 56);\n}"
Line 1093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1093 always 1093
  "" always ""
Line 1095
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1095 always 1095
  "void f() {\n    int a = 0;\n    do {\n        a = 64;\n        foo(a);\n    } while((++a) < 56);\n}" always "void f() {\n    int a = 0;\n    do {\n        a = 64;\n        foo(a);\n    } while((++a) < 56);\n}"
Line 1102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1102 always 1102
  "" always ""
Line 1104
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1104 always 1104
  "void f() {\n    int a = 0;\n    do {\n        a = 64;\n        foo(a);\n    } while(z());\n}" always "void f() {\n    int a = 0;\n    do {\n        a = 64;\n        foo(a);\n    } while(z());\n}"
Line 1111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1111 always 1111
  "[test.cpp:2]: (style) The scope of the variable 'a' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 'a' can be reduced.\n"
Line 1115
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1115 always 1115
  "void f() {\n    int x;\n    if (a) {\n        x = stuff(x);\n        morestuff(x);\n    }\n}" always "void f() {\n    int x;\n    if (a) {\n        x = stuff(x);\n        morestuff(x);\n    }\n}"
Line 1122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1122 always 1122
  "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n"
Line 1124
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1124 always 1124
  "void f() {\n    int x;\n    if (a) {\n        x = stuff(x);\n        morestuff(x);\n    }\n    if (b) {}\n}" always "void f() {\n    int x;\n    if (a) {\n        x = stuff(x);\n        morestuff(x);\n    }\n    if (b) {}\n}"
Line 1132
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1132 always 1132
  "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n"
Line 1136
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1136 always 1136
  "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            break;\n        case B:\n        default:\n            break;\n    }\n\n    if (c) {\n        x = foo();\n        do_something(x);\n    }\n}" always "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            break;\n        case B:\n        default:\n            break;\n    }\n\n    if (c) {\n        x = foo();\n        do_something(x);\n    }\n}"
Line 1152
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1152 always 1152
  "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n"
Line 1154
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1154 always 1154
  "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            x = 10;\n            break;\n        case B:\n        default:\n            break;\n    }\n\n    if (c) {\n        x = foo();\n        do_something(x);\n    }\n}" always "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            x = 10;\n            break;\n        case B:\n        default:\n            break;\n    }\n\n    if (c) {\n        x = foo();\n        do_something(x);\n    }\n}"
Line 1171
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1171 always 1171
  "" always ""
Line 1173
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1173 always 1173
  "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            if(c)\n                do_something(x);\n            break;\n        case B:\n        default:\n            break;\n    }\n}" always "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            if(c)\n                do_something(x);\n            break;\n        case B:\n        default:\n            break;\n    }\n}"
Line 1186
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1186 always 1186
  "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 'x' can be reduced.\n"
Line 1188
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1188 always 1188
  "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            if(c)\n                do_something(x);\n            break;\n        case B:\n        default:\n            if(d)\n                do_something(x);\n            break;\n    }\n}" always "void f() {\n    short x;\n\n    switch (ab) {\n        case A:\n            if(c)\n                do_something(x);\n            break;\n        case B:\n        default:\n            if(d)\n                do_something(x);\n            break;\n    }\n}"
Line 1203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1203 always 1203
  "" always ""
Line 1207
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1207 always 1207
  "int f(int a) {\n  const int x = 234;\n  int b = a;\n  if (b > 32) b = x;\n  return b;\n}" always "int f(int a) {\n  const int x = 234;\n  int b = a;\n  if (b > 32) b = x;\n  return b;\n}"
Line 1213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1213 always 1213
  "" always ""
Line 1217
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1217 always 1217
  "int test() {\n    int test_value = 3;\n    int test_array[1][1] = { { test_value } };\n    return sizeof(test_array);\n}" always "int test() {\n    int test_value = 3;\n    int test_array[1][1] = { { test_value } };\n    return sizeof(test_array);\n}"
Line 1222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1222 always 1222
  "" always ""
Line 1226
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1226 always 1226
  "void foo() {\n   int* p( 42 );\n   int i = 0;\n   while ( i != 100 ) {\n      *p = i;\n      ++p;\n      ++i;\n   }\n}" always "void foo() {\n   int* p( 42 );\n   int i = 0;\n   while ( i != 100 ) {\n      *p = i;\n      ++p;\n      ++i;\n   }\n}"
Line 1235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1235 always 1235
  "" always ""
Line 1237
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1237 always 1237
  "void foo() {\n   int* p( 42 );\n   int i = 0;\n   int dummy = 0;\n   while ( i != 100 ) {\n      p = & dummy;\n      *p = i;\n      ++p;\n      ++i;\n   }\n}" always "void foo() {\n   int* p( 42 );\n   int i = 0;\n   int dummy = 0;\n   while ( i != 100 ) {\n      p = & dummy;\n      *p = i;\n      ++p;\n      ++i;\n   }\n}"
Line 1248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1248 always 1248
  "[test.cpp:2]: (style) The scope of the variable 'p' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 'p' can be reduced.\n"
Line 1252
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1252 always 1252
  "int main() {\n   size_t myCounter = 0;\n   Test myTest([&](size_t aX){\n       std::cout << myCounter += aX << std::endl;\n   });\n}" always "int main() {\n   size_t myCounter = 0;\n   Test myTest([&](size_t aX){\n       std::cout << myCounter += aX << std::endl;\n   });\n}"
Line 1258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1258 always 1258
  "" always ""
Line 1262
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1262 always 1262
  "void f(Foo x) {\n   Foo &r = x;\n   if (cond) {\n       r.dostuff();\n   }\n}" always "void f(Foo x) {\n   Foo &r = x;\n   if (cond) {\n       r.dostuff();\n   }\n}"
Line 1268
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1268 always 1268
  "[test.cpp:2]: (style) The scope of the variable 'r' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 'r' can be reduced.\n"
Line 1270
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1270 always 1270
  "void f(Foo x) {\n   Foo foo = x;\n   if (cond) {\n       foo.dostuff();\n   }\n}" always "void f(Foo x) {\n   Foo foo = x;\n   if (cond) {\n       foo.dostuff();\n   }\n}"
Line 1276
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1276 always 1276
  "" always ""
Line 1280
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1280 always 1280
  "void f() {\n    time_t currtime;\n    if (a) {\n        currtime = time(&dummy);\n        if (currtime > t) {}\n    }\n}" always "void f() {\n    time_t currtime;\n    if (a) {\n        currtime = time(&dummy);\n        if (currtime > t) {}\n    }\n}"
  "test.c" always "test.c"
Line 1287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1287 always 1287
  "[test.c:2]: (style) The scope of the variable 'currtime' can be reduced.\n" always "[test.c:2]: (style) The scope of the variable 'currtime' can be reduced.\n"
Line 1291
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1291 always 1291
  "void f(const std::map<int,int> &m) {\n  for (auto it : m) {\n     if (cond1) {\n       int& key = it.first;\n       if (cond2) { dostuff(key); }\n     }\n  }\n}" always "void f(const std::map<int,int> &m) {\n  for (auto it : m) {\n     if (cond1) {\n       int& key = it.first;\n       if (cond2) { dostuff(key); }\n     }\n  }\n}"
Line 1299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1299 always 1299
  "" always ""
Line 1303
  "void f() {\n  int x = 0;\n#ifdef X\n#endif\n  if (id == ABC) { return x; }\n}" always "void f() {\n  int x = 0;\n#ifdef X\n#endif\n  if (id == ABC) { return x; }\n}"
Line 1309
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1309 always 1309
  "" always ""
Line 1311
  "void f() {\n#ifdef X\n#endif\n  int x = 0;\n  if (id == ABC) { return x; }\n}" always "void f() {\n#ifdef X\n#endif\n  int x = 0;\n  if (id == ABC) { return x; }\n}"
Line 1317
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1317 always 1317
  "[test.cpp:4]: (style) The scope of the variable 'x' can be reduced.\n" always "[test.cpp:4]: (style) The scope of the variable 'x' can be reduced.\n"
Line 1321
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1321 always 1321
  "void f() {\n    int i{};\n    if (double d = g(i); d == 1.0) {}\n}\n" always "void f() {\n    int i{};\n    if (double d = g(i); d == 1.0) {}\n}\n"
Line 1325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1325 always 1325
  "" always ""
Line 1329
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1329 always 1329
  "enum E { E0 };\nstruct S { int i; };\nvoid f(int b) {\n    enum E e;\n    struct S s;\n    if (b) {\n        e = E0;\n        s.i = 0;\n        g(e, s);\n    }\n}\n" always "enum E { E0 };\nstruct S { int i; };\nvoid f(int b) {\n    enum E e;\n    struct S s;\n    if (b) {\n        e = E0;\n        s.i = 0;\n        g(e, s);\n    }\n}\n"
  "test.c" always "test.c"
Line 1340
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1340 always 1340
  "[test.c:4]: (style) The scope of the variable 'e' can be reduced.\n[test.c:5]: (style) The scope of the variable 's' can be reduced.\n" always "[test.c:4]: (style) The scope of the variable 'e' can be reduced.\n[test.c:5]: (style) The scope of the variable 's' can be reduced.\n"
Line 1344
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1344 always 1344
  "void f(bool b) {\n    std::string s;\n    if (b) {\n        s = \"abc\";\n        g(s);\n    }\n}" always "void f(bool b) {\n    std::string s;\n    if (b) {\n        s = \"abc\";\n        g(s);\n    }\n}"
Line 1351
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1351 always 1351
  "[test.cpp:2]: (style) The scope of the variable 's' can be reduced.\n" always "[test.cpp:2]: (style) The scope of the variable 's' can be reduced.\n"
Line 1353
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1353 always 1353
  "auto foo(std::vector<int>& vec, bool flag) {\n    std::vector<int> dummy;\n    std::vector<int>::iterator iter;\n    if (flag)\n        iter = vec.begin();\n    else {\n        dummy.push_back(42);\n        iter = dummy.begin();\n    }\n    return *iter;\n}" always "auto foo(std::vector<int>& vec, bool flag) {\n    std::vector<int> dummy;\n    std::vector<int>::iterator iter;\n    if (flag)\n        iter = vec.begin();\n    else {\n        dummy.push_back(42);\n        iter = dummy.begin();\n    }\n    return *iter;\n}"
Line 1364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1364 always 1364
  "" always ""
Line 1368
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1368 always 1368
  "bool f(std::vector<int>& v, int i) {\n    int n = 0;\n    bool b = false;\n    std::for_each(v.begin(), v.end(), [&](int j) {\n        if (j == i) {\n            ++n;\n            if (n > 5)\n                b = true;\n        }\n    });\n    return b;\n}\n" always "bool f(std::vector<int>& v, int i) {\n    int n = 0;\n    bool b = false;\n    std::for_each(v.begin(), v.end(), [&](int j) {\n        if (j == i) {\n            ++n;\n            if (n > 5)\n                b = true;\n        }\n    });\n    return b;\n}\n"
Line 1380
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1380 always 1380
  "" always ""
Line 1386
  "" always ""
Line 1393
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 1394
  code possible {"class Base;\nvoid foo()\n{\n    Base * b = (Base *) derived;\n}"@48,"class Base;\nvoid foo()\n{\n    Base * b = (const Base *) derived;\n}"@49,"class Base;\nvoid foo()\n{\n    Base * b = (const Base * const) derived;\n}"@50,"class Base;\nvoid foo()\n{\n    Base * b = (volatile Base *) derived;\n}"@51,"class Base;\nvoid foo()\n{\n    Base * b = (volatile Base * const) derived;\n}"@52,"class Base;\nvoid foo()\n{\n    Base * b = (const volatile Base *) derived;\n}"@53,"class Base;\nvoid foo()\n{\n    Base * b = (const volatile Base * const) derived;\n}"@54,"class Base;\nvoid foo()\n{\n    Base * b = (const Base *) ( new Derived() );\n}"@55,"class Base;\nvoid foo()\n{\n    Base * b = (const Base *) new Derived();\n}"@56,"class Base;\nvoid foo()\n{\n    Base * b = (const Base *) new short[10];\n}"@57}
Line 1395
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testother.cpp"@48,"cppcheck-2.8/test/testother.cpp"@49,"cppcheck-2.8/test/testother.cpp"@50,"cppcheck-2.8/test/testother.cpp"@51,"cppcheck-2.8/test/testother.cpp"@52,"cppcheck-2.8/test/testother.cpp"@53,"cppcheck-2.8/test/testother.cpp"@54,"cppcheck-2.8/test/testother.cpp"@55,"cppcheck-2.8/test/testother.cpp"@56,"cppcheck-2.8/test/testother.cpp"@57}
  line inconclusive {1402@48,1409@49,1416@50,1423@51,1430@52,1437@53,1444@54,1451@55,1458@56,1465@57}
  "test.cpp" always "test.cpp"
Line 1397
  & {lifetime[Address]=(tokenizerCpp),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 1402
  "class Base;\nvoid foo()\n{\n    Base * b = (Base *) derived;\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (Base *) derived;\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1402 always 1402
Line 1407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1407 always 1407
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1409
  "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) derived;\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) derived;\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1409 always 1409
Line 1414
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1414 always 1414
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1416
  "class Base;\nvoid foo()\n{\n    Base * b = (const Base * const) derived;\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (const Base * const) derived;\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1416 always 1416
Line 1421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1421 always 1421
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1423
  "class Base;\nvoid foo()\n{\n    Base * b = (volatile Base *) derived;\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (volatile Base *) derived;\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1423 always 1423
Line 1428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1428 always 1428
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1430
  "class Base;\nvoid foo()\n{\n    Base * b = (volatile Base * const) derived;\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (volatile Base * const) derived;\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1430 always 1430
Line 1435
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1435 always 1435
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1437
  "class Base;\nvoid foo()\n{\n    Base * b = (const volatile Base *) derived;\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (const volatile Base *) derived;\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1437 always 1437
Line 1442
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1442 always 1442
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1444
  "class Base;\nvoid foo()\n{\n    Base * b = (const volatile Base * const) derived;\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (const volatile Base * const) derived;\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1444 always 1444
Line 1449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1449 always 1449
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1451
  "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) ( new Derived() );\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) ( new Derived() );\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1451 always 1451
Line 1456
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1456 always 1456
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1458
  "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) new Derived();\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) new Derived();\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1458 always 1458
Line 1463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1463 always 1463
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1465
  "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) new short[10];\n}" always "class Base;\nvoid foo()\n{\n    Base * b = (const Base *) new short[10];\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1465 always 1465
Line 1470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1470 always 1470
  "[test.cpp:4]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n"
Line 1472
  "class B;\nclass A\n{\n  virtual void abc(B *) const = 0;\n}" always "class B;\nclass A\n{\n  virtual void abc(B *) const = 0;\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1472 always 1472
Line 1477
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1477 always 1477
  "" always ""
Line 1479
  "class B;\nclass A\n{\n  virtual void abc(const B *) const = 0;\n}" always "class B;\nclass A\n{\n  virtual void abc(const B *) const = 0;\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1479 always 1479
Line 1484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1484 always 1484
  "" always ""
Line 1487
  "class SomeType;\nclass X : public Base {\n    X() : Base((SomeType*)7) {}\n};" always "class SomeType;\nclass X : public Base {\n    X() : Base((SomeType*)7) {}\n};"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1487 always 1487
Line 1491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1491 always 1491
  "[test.cpp:3]: (style) C-style pointer casting\n" always "[test.cpp:3]: (style) C-style pointer casting\n"
Line 1493
  "class SomeType;\nclass X : public Base {\n    X() : Base((SomeType*)var) {}\n};" always "class SomeType;\nclass X : public Base {\n    X() : Base((SomeType*)var) {}\n};"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1493 always 1493
Line 1497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1497 always 1497
  "[test.cpp:3]: (style) C-style pointer casting\n" always "[test.cpp:3]: (style) C-style pointer casting\n"
Line 1499
  "class SomeType;\nclass X : public Base {\n    X() : Base((SomeType*)0) {}\n};" always "class SomeType;\nclass X : public Base {\n    X() : Base((SomeType*)0) {}\n};"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1499 always 1499
Line 1503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1503 always 1503
  "" always ""
Line 1506
  "class C;\n\nclass B\n{ virtual G* createGui(S*, C*) const = 0; };\n\nclass MS : public M\n{ virtual void addController(C*) override {} };" always "class C;\n\nclass B\n{ virtual G* createGui(S*, C*) const = 0; };\n\nclass MS : public M\n{ virtual void addController(C*) override {} };"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1506 always 1506
Line 1513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1513 always 1513
  "" always ""
Line 1516
  "class Base {};\nclass Derived: public Base {};\nvoid testCC() {\n  std::vector<Base*> v;\n  v.push_back((Base*)new Derived);\n}" always "class Base {};\nclass Derived: public Base {};\nvoid testCC() {\n  std::vector<Base*> v;\n  v.push_back((Base*)new Derived);\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1516 always 1516
Line 1522
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1522 always 1522
  "[test.cpp:5]: (style) C-style pointer casting\n" always "[test.cpp:5]: (style) C-style pointer casting\n"
Line 1525
  "typedef struct S S;\ntypedef struct S SS;\ntypedef class C C;\ntypedef long LONG;\ntypedef long* LONGP;\nstruct T {};\ntypedef struct T TT;\ntypedef struct T2 {} TT2;\nvoid f(int* i) {\n    S* s = (S*)i;\n    SS* ss = (SS*)i;\n    struct S2* s2 = (struct S2*)i;\n    C* c = (C*)i;\n    class C2* c2 = (class C2*)i;\n    long* l = (long*)i;\n    LONG* l2 = (LONG*)i;\n    LONGP l3 = (LONGP)i;\n    TT* tt = (TT*)i;\n    TT2* tt2 = (TT2*)i;\n}\n" always "typedef struct S S;\ntypedef struct S SS;\ntypedef class C C;\ntypedef long LONG;\ntypedef long* LONGP;\nstruct T {};\ntypedef struct T TT;\ntypedef struct T2 {} TT2;\nvoid f(int* i) {\n    S* s = (S*)i;\n    SS* ss = (SS*)i;\n    struct S2* s2 = (struct S2*)i;\n    C* c = (C*)i;\n    class C2* c2 = (class C2*)i;\n    long* l = (long*)i;\n    LONG* l2 = (LONG*)i;\n    LONGP l3 = (LONGP)i;\n    TT* tt = (TT*)i;\n    TT2* tt2 = (TT2*)i;\n}\n"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1525 always 1525
Line 1545
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1545 always 1545
  "[test.cpp:10]: (style) C-style pointer casting\n[test.cpp:11]: (style) C-style pointer casting\n[test.cpp:12]: (style) C-style pointer casting\n[test.cpp:13]: (style) C-style pointer casting\n[test.cpp:14]: (style) C-style pointer casting\n[test.cpp:15]: (style) C-style pointer casting\n[test.cpp:16]: (style) C-style pointer casting\n[test.cpp:17]: (style) C-style pointer casting\n[test.cpp:18]: (style) C-style pointer casting\n[test.cpp:19]: (style) C-style pointer casting\n" always "[test.cpp:10]: (style) C-style pointer casting\n[test.cpp:11]: (style) C-style pointer casting\n[test.cpp:12]: (style) C-style pointer casting\n[test.cpp:13]: (style) C-style pointer casting\n[test.cpp:14]: (style) C-style pointer casting\n[test.cpp:15]: (style) C-style pointer casting\n[test.cpp:16]: (style) C-style pointer casting\n[test.cpp:17]: (style) C-style pointer casting\n[test.cpp:18]: (style) C-style pointer casting\n[test.cpp:19]: (style) C-style pointer casting\n"
Line 1558
  "struct S {};\nvoid g(S*& s);\nvoid f(int i) {\n    g((S*&)i);\n    S*& r = (S*&)i;\n}\n" always "struct S {};\nvoid g(S*& s);\nvoid f(int i) {\n    g((S*&)i);\n    S*& r = (S*&)i;\n}\n"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1558 always 1558
Line 1564
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1564 always 1564
  "[test.cpp:4]: (style) C-style pointer casting\n[test.cpp:5]: (style) C-style pointer casting\n" always "[test.cpp:4]: (style) C-style pointer casting\n[test.cpp:5]: (style) C-style pointer casting\n"
Line 1569
  "void f(void* p) {\n    auto h = reinterpret_cast<void (STDAPICALLTYPE*)(int)>(p);\n}\n" always "void f(void* p) {\n    auto h = reinterpret_cast<void (STDAPICALLTYPE*)(int)>(p);\n}\n"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1569 always 1569
Line 1572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1572 always 1572
  "" always ""
Line 1575
  "void f(void* v1, void* v2) {\n    T** p1 = (T**)v1;\n    T*** p2 = (T***)v2;\n}\n" always "void f(void* v1, void* v2) {\n    T** p1 = (T**)v1;\n    T*** p2 = (T***)v2;\n}\n"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1575 always 1575
Line 1579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1579 always 1579
  "[test.cpp:2]: (style) C-style pointer casting\n[test.cpp:3]: (style) C-style pointer casting\n" always "[test.cpp:2]: (style) C-style pointer casting\n[test.cpp:3]: (style) C-style pointer casting\n"
Line 1585
  , always 1
  portability always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1587
  "" always ""
Line 1591
  portability {!<=-1,!>=2,1@43,0@45}
Line 1593
  inconclusive {!<=-1,!>=2,0@43,1@44}
Line 1595
  = always 115
  's' always 115
Line 1597
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 1598
  code {"void test() {\n    float *f = new float[10];\n    delete [] (double*)f;\n    delete [] (long double const*)(new float[10]);\n}"@36,"void test(const float* f) {\n    double *d = (double*)f;\n}"@37,"void test(double* d1) {\n    long double *ld = (long double*)d1;\n    double *d2 = (double*)ld;\n}"@38,"char* test(int* i) {\n    long double *d = (long double*)(i);\n    double *d = (double*)(i);\n    float *f = reinterpret_cast<float*>(i);\n}"@39,"float* test(unsigned int* i) {\n    return (float*)i;\n}"@40,"float* test(unsigned int* i) {\n    return (float*)i[0];\n}"@41,"float* test(double& d) {\n    return (float*)&d;\n}"@42,"void test(float* data) {\n    f.write((char*)data,sizeof(float));\n}"@43,"void test(float* data) {\n    f.write((char*)data,sizeof(float));\n}"@44,"long long* test(float* f) {\n    return (long long*)f;\n}"@45}
Line 1599
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testother.cpp"@36,"cppcheck-2.8/test/testother.cpp"@37,"cppcheck-2.8/test/testother.cpp"@38,"cppcheck-2.8/test/testother.cpp"@39,"cppcheck-2.8/test/testother.cpp"@40,"cppcheck-2.8/test/testother.cpp"@41,"cppcheck-2.8/test/testother.cpp"@42,"cppcheck-2.8/test/testother.cpp"@43,"cppcheck-2.8/test/testother.cpp"@44,"cppcheck-2.8/test/testother.cpp"@45}
  line inconclusive {1607@36,1615@37,1620@38,1627@39,1636@40,1641@41,1646@42,1651@43,1656@44,1662@45}
  "test.cpp" always "test.cpp"
Line 1601
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 1607
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1607 always 1607
  "void test() {\n    float *f = new float[10];\n    delete [] (double*)f;\n    delete [] (long double const*)(new float[10]);\n}" always "void test() {\n    float *f = new float[10];\n    delete [] (double*)f;\n    delete [] (long double const*)(new float[10]);\n}"
Line 1612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1612 always 1612
  "[test.cpp:3]: (portability) Casting between float * and double * which have an incompatible binary data representation.\n[test.cpp:4]: (portability) Casting between float * and const long double * which have an incompatible binary data representation.\n" always "[test.cpp:3]: (portability) Casting between float * and double * which have an incompatible binary data representation.\n[test.cpp:4]: (portability) Casting between float * and const long double * which have an incompatible binary data representation.\n"
Line 1615
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1615 always 1615
  "void test(const float* f) {\n    double *d = (double*)f;\n}" always "void test(const float* f) {\n    double *d = (double*)f;\n}"
Line 1618
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1618 always 1618
  "[test.cpp:2]: (portability) Casting between const float * and double * which have an incompatible binary data representation.\n" always "[test.cpp:2]: (portability) Casting between const float * and double * which have an incompatible binary data representation.\n"
Line 1620
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1620 always 1620
  "void test(double* d1) {\n    long double *ld = (long double*)d1;\n    double *d2 = (double*)ld;\n}" always "void test(double* d1) {\n    long double *ld = (long double*)d1;\n    double *d2 = (double*)ld;\n}"
Line 1624
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1624 always 1624
  "[test.cpp:2]: (portability) Casting between double * and long double * which have an incompatible binary data representation.\n[test.cpp:3]: (portability) Casting between long double * and double * which have an incompatible binary data representation.\n" always "[test.cpp:2]: (portability) Casting between double * and long double * which have an incompatible binary data representation.\n[test.cpp:3]: (portability) Casting between long double * and double * which have an incompatible binary data representation.\n"
Line 1627
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1627 always 1627
  "char* test(int* i) {\n    long double *d = (long double*)(i);\n    double *d = (double*)(i);\n    float *f = reinterpret_cast<float*>(i);\n}" always "char* test(int* i) {\n    long double *d = (long double*)(i);\n    double *d = (double*)(i);\n    float *f = reinterpret_cast<float*>(i);\n}"
Line 1632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1632 always 1632
  "[test.cpp:2]: (portability) Casting between signed int * and long double * which have an incompatible binary data representation.\n[test.cpp:3]: (portability) Casting between signed int * and double * which have an incompatible binary data representation.\n[test.cpp:4]: (portability) Casting between signed int * and float * which have an incompatible binary data representation.\n" always "[test.cpp:2]: (portability) Casting between signed int * and long double * which have an incompatible binary data representation.\n[test.cpp:3]: (portability) Casting between signed int * and double * which have an incompatible binary data representation.\n[test.cpp:4]: (portability) Casting between signed int * and float * which have an incompatible binary data representation.\n"
Line 1636
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1636 always 1636
  "float* test(unsigned int* i) {\n    return (float*)i;\n}" always "float* test(unsigned int* i) {\n    return (float*)i;\n}"
Line 1639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1639 always 1639
  "[test.cpp:2]: (portability) Casting between unsigned int * and float * which have an incompatible binary data representation.\n" always "[test.cpp:2]: (portability) Casting between unsigned int * and float * which have an incompatible binary data representation.\n"
Line 1641
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1641 always 1641
  "float* test(unsigned int* i) {\n    return (float*)i[0];\n}" always "float* test(unsigned int* i) {\n    return (float*)i[0];\n}"
Line 1644
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1644 always 1644
  "" always ""
Line 1646
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1646 always 1646
  "float* test(double& d) {\n    return (float*)&d;\n}" always "float* test(double& d) {\n    return (float*)&d;\n}"
Line 1649
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1649 always 1649
  "[test.cpp:2]: (portability) Casting between double * and float * which have an incompatible binary data representation.\n" always "[test.cpp:2]: (portability) Casting between double * and float * which have an incompatible binary data representation.\n"
Line 1651
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1651 always 1651
  "void test(float* data) {\n    f.write((char*)data,sizeof(float));\n}" always "void test(float* data) {\n    f.write((char*)data,sizeof(float));\n}"
  true always 1
  false always 0
Line 1654
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1654 always 1654
  "" always ""
Line 1656
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1656 always 1656
  "void test(float* data) {\n    f.write((char*)data,sizeof(float));\n}" always "void test(float* data) {\n    f.write((char*)data,sizeof(float));\n}"
  true always 1
  true always 1
Line 1659
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1659 always 1659
  "[test.cpp:2]: (portability, inconclusive) Casting from float * to signed char * is not portable due to different binary data representations on different platforms.\n" always "[test.cpp:2]: (portability, inconclusive) Casting from float * to signed char * is not portable due to different binary data representations on different platforms.\n"
Line 1662
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1662 always 1662
  "long long* test(float* f) {\n    return (long long*)f;\n}" always "long long* test(float* f) {\n    return (long long*)f;\n}"
  false always 0
Line 1665
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1665 always 1665
  "" always ""
Line 1667
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1667 always 1667
  "long long* test(float* f, char* c) {\n    foo((long long*)f);\n    return reinterpret_cast<long long*>(c);\n}" always "long long* test(float* f, char* c) {\n    foo((long long*)f);\n    return reinterpret_cast<long long*>(c);\n}"
  true always 1
Line 1671
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1671 always 1671
  "[test.cpp:2]: (portability) Casting from float * to signed long long * is not portable due to different binary data representations on different platforms.\n" always "[test.cpp:2]: (portability) Casting from float * to signed long long * is not portable due to different binary data representations on different platforms.\n"
Line 1673
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1673 always 1673
  "Q_DECLARE_METATYPE(int*)" always "Q_DECLARE_METATYPE(int*)"
Line 1678
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1678 always 1678
  "void f(const std::string str) {}" always "void f(const std::string str) {}"
Line 1679
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1679 always 1679
  "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1681
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1681 always 1681
  "void f(std::unique_ptr<std::string> ptr) {}" always "void f(std::unique_ptr<std::string> ptr) {}"
Line 1682
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1682 always 1682
  "" always ""
Line 1684
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1684 always 1684
  "void f(const std::shared_ptr<std::string> ptr) {}" always "void f(const std::shared_ptr<std::string> ptr) {}"
Line 1685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1685 always 1685
  "" always ""
Line 1687
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1687 always 1687
  "void f(const std::function<F> ptr) {}" always "void f(const std::function<F> ptr) {}"
Line 1688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1688 always 1688
  "" always ""
Line 1691
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1691 always 1691
  "void f(const std::pair<int,int> x) {}" always "void f(const std::pair<int,int> x) {}"
Line 1692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1692 always 1692
  "" always ""
Line 1694
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1694 always 1694
  "void f(const std::pair<std::string,std::string> x) {}" always "void f(const std::pair<std::string,std::string> x) {}"
Line 1695
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1695 always 1695
  "error" always "error"
  "" always ""
Line 1698
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1698 always 1698
  "void f(const std::string::size_type x) {}" always "void f(const std::string::size_type x) {}"
Line 1699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1699 always 1699
  "" always ""
Line 1701
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1701 always 1701
  "class Foo;\nvoid f(const Foo foo) {}" always "class Foo;\nvoid f(const Foo foo) {}"
Line 1702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1702 always 1702
  "[test.cpp:2]: (performance, inconclusive) Function parameter 'foo' should be passed by const reference.\n" always "[test.cpp:2]: (performance, inconclusive) Function parameter 'foo' should be passed by const reference.\n"
Line 1704
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1704 always 1704
  "class Foo { std::vector<int> v; };\nvoid f(const Foo foo) {}" always "class Foo { std::vector<int> v; };\nvoid f(const Foo foo) {}"
Line 1705
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1705 always 1705
  "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n"
Line 1707
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1707 always 1707
  "class Foo { int i; };\nvoid f(const Foo foo) {}" always "class Foo { int i; };\nvoid f(const Foo foo) {}"
Line 1708
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1708 always 1708
  "" always ""
Line 1710
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1710 always 1710
  "class Foo { int i[6]; };\nvoid f(const Foo foo) {}" always "class Foo { int i[6]; };\nvoid f(const Foo foo) {}"
Line 1711
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1711 always 1711
  "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n"
Line 1713
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1713 always 1713
  "class Foo { std::string* s; };\nvoid f(const Foo foo) {}" always "class Foo { std::string* s; };\nvoid f(const Foo foo) {}"
Line 1714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1714 always 1714
  "" always ""
Line 1716
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1716 always 1716
  "class Foo { static std::string s; };\nvoid f(const Foo foo) {}" always "class Foo { static std::string s; };\nvoid f(const Foo foo) {}"
Line 1717
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1717 always 1717
  "" always ""
Line 1719
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1719 always 1719
  "class X { std::string s; }; class Foo : X { };\nvoid f(const Foo foo) {}" always "class X { std::string s; }; class Foo : X { };\nvoid f(const Foo foo) {}"
Line 1720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1720 always 1720
  "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n"
Line 1722
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1722 always 1722
  "class X { std::string s; }; class Foo { X x; };\nvoid f(const Foo foo) {}" always "class X { std::string s; }; class Foo { X x; };\nvoid f(const Foo foo) {}"
Line 1723
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1723 always 1723
  "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 'foo' should be passed by const reference.\n"
Line 1725
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1725 always 1725
  "void f(const std::string &str) {}" always "void f(const std::string &str) {}"
Line 1726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1726 always 1726
  "" always ""
Line 1729
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1729 always 1729
  "void f(const std::string_view str) {}" always "void f(const std::string_view str) {}"
Line 1730
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1730 always 1730
  "" always ""
Line 1732
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1732 always 1732
  "void f(std::string_view str) {}" always "void f(std::string_view str) {}"
Line 1733
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1733 always 1733
  "" always ""
Line 1735
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1735 always 1735
  "void f(const std::string_view &str) {}" always "void f(const std::string_view &str) {}"
Line 1736
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1736 always 1736
  "" always ""
Line 1738
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1738 always 1738
  "void f(const std::vector<int> v) {}" always "void f(const std::vector<int> v) {}"
Line 1739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1739 always 1739
  "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n"
Line 1741
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1741 always 1741
  "void f(const std::vector<std::string> v) {}" always "void f(const std::vector<std::string> v) {}"
Line 1742
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1742 always 1742
  "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n"
Line 1744
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1744 always 1744
  "void f(const std::vector<std::string>::size_type s) {}" always "void f(const std::vector<std::string>::size_type s) {}"
Line 1745
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1745 always 1745
  "" always ""
Line 1747
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1747 always 1747
  "void f(const std::vector<int> &v) {}" always "void f(const std::vector<int> &v) {}"
Line 1748
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1748 always 1748
  "" always ""
Line 1750
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1750 always 1750
  "void f(const std::map<int,int> &v) {}" always "void f(const std::map<int,int> &v) {}"
Line 1751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1751 always 1751
  "" always ""
Line 1753
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1753 always 1753
  "void f(const std::map<int,int> v) {}" always "void f(const std::map<int,int> v) {}"
Line 1754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1754 always 1754
  "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n"
Line 1756
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1756 always 1756
  "void f(const std::map<std::string,std::string> v) {}" always "void f(const std::map<std::string,std::string> v) {}"
Line 1757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1757 always 1757
  "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n"
Line 1759
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1759 always 1759
  "void f(const std::map<int,std::string> v) {}" always "void f(const std::map<int,std::string> v) {}"
Line 1760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1760 always 1760
  "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n"
Line 1762
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1762 always 1762
  "void f(const std::map<std::string,int> v) {}" always "void f(const std::map<std::string,int> v) {}"
Line 1763
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1763 always 1763
  "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n"
Line 1765
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1765 always 1765
  "void f(const std::streamoff pos) {}" always "void f(const std::streamoff pos) {}"
Line 1766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1766 always 1766
  "" always ""
Line 1768
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1768 always 1768
  "void f(std::initializer_list<int> i) {}" always "void f(std::initializer_list<int> i) {}"
Line 1769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1769 always 1769
  "" always ""
Line 1772
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1772 always 1772
  "void log(const std::string& file, int line, const std::string& function, const std::string str, ...) {}" always "void log(const std::string& file, int line, const std::string& function, const std::string str, ...) {}"
Line 1773
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1773 always 1773
  "" always ""
Line 1776
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1776 always 1776
  "struct float3 { };\ntypedef float3 vec;\nclass Plane {\n    vec Refract(vec &vec) const;\n    bool IntersectLinePlane(const vec &planeNormal);\n};" always "struct float3 { };\ntypedef float3 vec;\nclass Plane {\n    vec Refract(vec &vec) const;\n    bool IntersectLinePlane(const vec &planeNormal);\n};"
Line 1782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1782 always 1782
  "" always ""
Line 1784
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1784 always 1784
  "class X {\n    virtual void func(const std::string str) {}\n};" always "class X {\n    virtual void func(const std::string str) {}\n};"
Line 1787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1787 always 1787
  "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1789
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1789 always 1789
  "enum X;\nvoid foo(X x1){}\n" always "enum X;\nvoid foo(X x1){}\n"
Line 1791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1791 always 1791
  "" always ""
Line 1793
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1793 always 1793
  "enum X { a, b, c };\nvoid foo(X x2){}\n" always "enum X { a, b, c };\nvoid foo(X x2){}\n"
Line 1795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1795 always 1795
  "" always ""
Line 1797
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1797 always 1797
  "enum X { a, b, c };\nenum X;void foo(X x3){}\n" always "enum X { a, b, c };\nenum X;void foo(X x3){}\n"
Line 1800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1800 always 1800
  "" always ""
Line 1802
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1802 always 1802
  "enum X;\nenum X { a, b, c };void foo(X x4){}\n" always "enum X;\nenum X { a, b, c };void foo(X x4){}\n"
Line 1805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1805 always 1805
  "" always ""
Line 1807
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1807 always 1807
  "union U {\n    char* pc;\n    short* ps;\n    int* pi;\n};\nvoid f(U u) {}\n" always "union U {\n    char* pc;\n    short* ps;\n    int* pi;\n};\nvoid f(U u) {}\n"
Line 1813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1813 always 1813
  "" always ""
Line 1815
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1815 always 1815
  "struct S { char A[8][8]; };\nvoid f(S s) {}\n" always "struct S { char A[8][8]; };\nvoid f(S s) {}\n"
Line 1817
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1817 always 1817
  "[test.cpp:2]: (performance) Function parameter 's' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 's' should be passed by const reference.\n"
Line 1821
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1821 always 1821
  "using ui64 = unsigned __int64;\nui64 Test(ui64 one, ui64 two) { return one + two; }\n" always "using ui64 = unsigned __int64;\nui64 Test(ui64 one, ui64 two) { return one + two; }\n"
  nullptr always 0
  false always 0
  true always 1
  true always 1
  false always 0
  & {lifetime[Address]=(settings1),!0}
Line 1824
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1824 always 1824
  "" always ""
Line 1828
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1828 always 1828
  "void f(std::string str) {}" always "void f(std::string str) {}"
Line 1829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1829 always 1829
  "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1831
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1831 always 1831
  "void f(std::string str) {\n    return str + x;\n}" always "void f(std::string str) {\n    return str + x;\n}"
Line 1834
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1834 always 1834
  "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1836
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1836 always 1836
  "void f(std::string str) {\n    std::cout << str;\n}" always "void f(std::string str) {\n    std::cout << str;\n}"
Line 1839
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1839 always 1839
  "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1841
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1841 always 1841
  "void f(std::string str) {\n    std::cin >> str;\n}" always "void f(std::string str) {\n    std::cin >> str;\n}"
Line 1844
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1844 always 1844
  "" always ""
Line 1846
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1846 always 1846
  "void f(std::string str) {\n    std::string s2 = str;\n}" always "void f(std::string str) {\n    std::string s2 = str;\n}"
Line 1849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1849 always 1849
  "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1851
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1851 always 1851
  "void f(std::string str) {\n    std::string& s2 = str;\n}" always "void f(std::string str) {\n    std::string& s2 = str;\n}"
Line 1854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1854 always 1854
  "[test.cpp:2]: (style) Variable 's2' can be declared with const\n" always "[test.cpp:2]: (style) Variable 's2' can be declared with const\n"
Line 1856
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1856 always 1856
  "void f(std::string str) {\n    const std::string& s2 = str;\n}" always "void f(std::string str) {\n    const std::string& s2 = str;\n}"
Line 1859
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1859 always 1859
  "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1861
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1861 always 1861
  "void f(std::string str) {\n    str = \"\";\n}" always "void f(std::string str) {\n    str = \"\";\n}"
Line 1864
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1864 always 1864
  "" always ""
Line 1866
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1866 always 1866
  "void f(std::string str) {\n    foo(str);\n}" always "void f(std::string str) {\n    foo(str);\n}"
Line 1869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1869 always 1869
  "" always ""
Line 1871
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1871 always 1871
  "void foo(const std::string& str);\nvoid f(std::string str) {\n    foo(str);\n}" always "void foo(const std::string& str);\nvoid f(std::string str) {\n    foo(str);\n}"
Line 1875
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1875 always 1875
  "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1877
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1877 always 1877
  "void foo(std::string str);\nvoid f(std::string str) {\n    foo(str);\n}" always "void foo(std::string str);\nvoid f(std::string str) {\n    foo(str);\n}"
Line 1881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1881 always 1881
  "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1883
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1883 always 1883
  "void foo(std::string& str);\nvoid f(std::string str) {\n    foo(str);\n}" always "void foo(std::string& str);\nvoid f(std::string str) {\n    foo(str);\n}"
Line 1887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1887 always 1887
  "" always ""
Line 1889
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1889 always 1889
  "void foo(std::string* str);\nvoid f(std::string str) {\n    foo(&str);\n}" always "void foo(std::string* str);\nvoid f(std::string str) {\n    foo(&str);\n}"
Line 1893
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1893 always 1893
  "" always ""
Line 1895
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1895 always 1895
  "void foo(int& i1, const std::string& str, int& i2);\nvoid f(std::string str) {\n    foo((a+b)*c, str, x);\n}" always "void foo(int& i1, const std::string& str, int& i2);\nvoid f(std::string str) {\n    foo((a+b)*c, str, x);\n}"
Line 1899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1899 always 1899
  "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1901
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1901 always 1901
  "std::string f(std::string str) {\n    str += x;\n    return str;\n}" always "std::string f(std::string str) {\n    str += x;\n    return str;\n}"
Line 1905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1905 always 1905
  "" always ""
Line 1907
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1907 always 1907
  "class X {\n    std::string s;\n    void func() const;\n};\nY f(X x) {\n    x.func();\n}" always "class X {\n    std::string s;\n    void func() const;\n};\nY f(X x) {\n    x.func();\n}"
Line 1914
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1914 always 1914
  "[test.cpp:5]: (performance) Function parameter 'x' should be passed by const reference.\n" always "[test.cpp:5]: (performance) Function parameter 'x' should be passed by const reference.\n"
Line 1916
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1916 always 1916
  "class X {\n    void func();\n};\nY f(X x) {\n    x.func();\n}" always "class X {\n    void func();\n};\nY f(X x) {\n    x.func();\n}"
Line 1922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1922 always 1922
  "" always ""
Line 1924
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1924 always 1924
  "class X {\n    void func(std::string str) {}\n};" always "class X {\n    void func(std::string str) {}\n};"
Line 1927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1927 always 1927
  "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n" always "[test.cpp:2]: (performance) Function parameter 'str' should be passed by const reference.\n"
Line 1929
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1929 always 1929
  "class X {\n    virtual void func(std::string str) {}\n};" always "class X {\n    virtual void func(std::string str) {}\n};"
Line 1932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1932 always 1932
  "" always ""
Line 1934
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1934 always 1934
  "class X {\n    char a[1024];\n};\nclass Y : X {\n    char b;\n};\nvoid f(Y y) {\n}" always "class X {\n    char a[1024];\n};\nclass Y : X {\n    char b;\n};\nvoid f(Y y) {\n}"
Line 1942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1942 always 1942
  "[test.cpp:7]: (performance) Function parameter 'y' should be passed by const reference.\n" always "[test.cpp:7]: (performance) Function parameter 'y' should be passed by const reference.\n"
Line 1944
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1944 always 1944
  "class X {\n    void* a;\n    void* b;\n};\nclass Y {\n    void* a;\n    void* b;\n    char c;\n};\nvoid f(X x, Y y) {\n}" always "class X {\n    void* a;\n    void* b;\n};\nclass Y {\n    void* a;\n    void* b;\n    char c;\n};\nvoid f(X x, Y y) {\n}"
Line 1955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1955 always 1955
  "[test.cpp:10]: (performance) Function parameter 'y' should be passed by const reference.\n" always "[test.cpp:10]: (performance) Function parameter 'y' should be passed by const reference.\n"
Line 1959
  60 always 60
  = always "class X {\n    uint64_t a;\n    uint64_t b;\n};\nvoid f(X x) {}"
  "class X {\n    uint64_t a;\n    uint64_t b;\n};\nvoid f(X x) {}" always "class X {\n    uint64_t a;\n    uint64_t b;\n};\nvoid f(X x) {}"
Line 1967
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1967 always 1967
  code always "class X {\n    uint64_t a;\n    uint64_t b;\n};\nvoid f(X x) {}"
  & {lifetime[Address]=(s32),!0}
Line 1968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1968 always 1968
  "[test.cpp:5]: (performance) Function parameter 'x' should be passed by const reference.\n" always "[test.cpp:5]: (performance) Function parameter 'x' should be passed by const reference.\n"
Line 1972
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1972 always 1972
  code always "class X {\n    uint64_t a;\n    uint64_t b;\n};\nvoid f(X x) {}"
  & {lifetime[Address]=(s64),!0}
Line 1973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1973 always 1973
  "" always ""
Line 1976
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1976 always 1976
  "Writer* getWriter();\n\nvoid foo(Buffer& buffer) {\n    getWriter()->operator<<(buffer);\n}" always "Writer* getWriter();\n\nvoid foo(Buffer& buffer) {\n    getWriter()->operator<<(buffer);\n}"
Line 1981
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1981 always 1981
  "" always ""
Line 1985
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1985 always 1985
  "struct X { int a[5]; }; void f(X v) { }" always "struct X { int a[5]; }; void f(X v) { }"
Line 1986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1986 always 1986
  "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n"
Line 1988
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1988 always 1988
  "extern \"C\" { struct X { int a[5]; }; void f(X v) { } }" always "extern \"C\" { struct X { int a[5]; }; void f(X v) { } }"
Line 1989
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1989 always 1989
  "" always ""
Line 1991
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1991 always 1991
  "struct X { int a[5]; }; extern \"C\" void f(X v) { }" always "struct X { int a[5]; }; extern \"C\" void f(X v) { }"
Line 1992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1992 always 1992
  "" always ""
Line 1994
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1994 always 1994
  "struct X { int a[5]; }; void f(const X v);" always "struct X { int a[5]; }; void f(const X v);"
Line 1995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1995 always 1995
  "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n" always "[test.cpp:1]: (performance) Function parameter 'v' should be passed by const reference.\n"
Line 1997
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1997 always 1997
  "extern \"C\" { struct X { int a[5]; }; void f(const X v); }" always "extern \"C\" { struct X { int a[5]; }; void f(const X v); }"
Line 1998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  1998 always 1998
  "" always ""
Line 2000
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2000 always 2000
  "struct X { int a[5]; }; extern \"C\" void f(const X v) { }" always "struct X { int a[5]; }; extern \"C\" void f(const X v) { }"
Line 2001
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2001 always 2001
  "" always ""
Line 2005
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2005 always 2005
  "int f(std::vector<int> x) {\n    int& i = x[0];\n    return i;\n}" always "int f(std::vector<int> x) {\n    int& i = x[0];\n    return i;\n}"
Line 2009
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2009 always 2009
  "[test.cpp:2]: (style) Variable 'i' can be declared with const\n" always "[test.cpp:2]: (style) Variable 'i' can be declared with const\n"
Line 2011
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2011 always 2011
  "int f(std::vector<int>& x) {\n    return x[0];\n}" always "int f(std::vector<int>& x) {\n    return x[0];\n}"
Line 2014
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2014 always 2014
  "[test.cpp:1]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'x' can be declared with const\n"
Line 2016
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2016 always 2016
  "int f(std::vector<int> x) {\n    const int& i = x[0];\n    return i;\n}" always "int f(std::vector<int> x) {\n    const int& i = x[0];\n    return i;\n}"
Line 2020
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2020 always 2020
  "" always ""
Line 2022
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2022 always 2022
  "int f(std::vector<int> x) {\n    static int& i = x[0];\n    return i;\n}" always "int f(std::vector<int> x) {\n    static int& i = x[0];\n    return i;\n}"
Line 2026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2026 always 2026
  "" always ""
Line 2028
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2028 always 2028
  "int f(std::vector<int> x) {\n    int& i = x[0];\n    i++;\n    return i;\n}" always "int f(std::vector<int> x) {\n    int& i = x[0];\n    i++;\n    return i;\n}"
Line 2033
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2033 always 2033
  "" always ""
Line 2035
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2035 always 2035
  "int& f(std::vector<int>& x) {\n    x.push_back(1);\n    int& i = x[0];\n    return i;\n}" always "int& f(std::vector<int>& x) {\n    x.push_back(1);\n    int& i = x[0];\n    return i;\n}"
Line 2040
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2040 always 2040
  "" always ""
Line 2042
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2042 always 2042
  "int f(const std::vector<int>& x) {\n    return x[0];\n}" always "int f(const std::vector<int>& x) {\n    return x[0];\n}"
Line 2045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2045 always 2045
  "" always ""
Line 2047
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2047 always 2047
  "int& f(std::vector<int>& x) {\n    return x[0];\n}" always "int& f(std::vector<int>& x) {\n    return x[0];\n}"
Line 2050
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2050 always 2050
  "" always ""
Line 2052
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2052 always 2052
  "const int& f(std::vector<int>& x) {\n    return x[0];\n}" always "const int& f(std::vector<int>& x) {\n    return x[0];\n}"
Line 2055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2055 always 2055
  "[test.cpp:1]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'x' can be declared with const\n"
Line 2057
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2057 always 2057
  "int f(std::vector<int>& x) {\n    x[0]++;\n    return x[0];\n}" always "int f(std::vector<int>& x) {\n    x[0]++;\n    return x[0];\n}"
Line 2061
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2061 always 2061
  "" always ""
Line 2063
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2063 always 2063
  "struct A { int a; };\nA f(std::vector<A>& x) {\n    x[0].a = 1;\n    return x[0];\n}" always "struct A { int a; };\nA f(std::vector<A>& x) {\n    x[0].a = 1;\n    return x[0];\n}"
Line 2068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2068 always 2068
  "" always ""
Line 2070
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2070 always 2070
  "struct A { int a(); };\nA f(std::vector<A>& x) {\n    x[0].a();\n    return x[0];\n}" always "struct A { int a(); };\nA f(std::vector<A>& x) {\n    x[0].a();\n    return x[0];\n}"
Line 2075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2075 always 2075
  "" always ""
Line 2077
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2077 always 2077
  "int g(int& x);\nint f(std::vector<int>& x) {\n    g(x[0]);\n    return x[0];\n}" always "int g(int& x);\nint f(std::vector<int>& x) {\n    g(x[0]);\n    return x[0];\n}"
Line 2082
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2082 always 2082
  "" always ""
Line 2084
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2084 always 2084
  "template<class T>\nT f(T& x) {\n    return x[0];\n}" always "template<class T>\nT f(T& x) {\n    return x[0];\n}"
Line 2088
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2088 always 2088
  "" always ""
Line 2090
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2090 always 2090
  "template<class T>\nT f(T&& x) {\n    return x[0];\n}" always "template<class T>\nT f(T&& x) {\n    return x[0];\n}"
Line 2094
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2094 always 2094
  "" always ""
Line 2096
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2096 always 2096
  "template<class T>\nT f(T& x) {\n    return x[0];\n}\nvoid h() { std::vector<int> v; h(v); }" always "template<class T>\nT f(T& x) {\n    return x[0];\n}\nvoid h() { std::vector<int> v; h(v); }"
Line 2101
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2101 always 2101
  "" always ""
Line 2103
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2103 always 2103
  "int f(int& x) {\n    return std::move(x);\n}" always "int f(int& x) {\n    return std::move(x);\n}"
Line 2106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2106 always 2106
  "" always ""
Line 2108
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2108 always 2108
  "void f(std::ostream& os) {\n    os << \"Hello\";\n}" always "void f(std::ostream& os) {\n    os << \"Hello\";\n}"
Line 2111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2111 always 2111
  "" always ""
Line 2113
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2113 always 2113
  "void g(int*);\nvoid f(int& x) {\n    g(&x);\n}" always "void g(int*);\nvoid f(int& x) {\n    g(&x);\n}"
Line 2117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2117 always 2117
  "" always ""
Line 2119
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2119 always 2119
  "struct A { A(int*); };\nA f(int& x) {\n    return A(&x);\n}" always "struct A { A(int*); };\nA f(int& x) {\n    return A(&x);\n}"
Line 2123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2123 always 2123
  "" always ""
Line 2125
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2125 always 2125
  "struct A { A(int*); };\nA f(int& x) {\n    return A{&x};\n}" always "struct A { A(int*); };\nA f(int& x) {\n    return A{&x};\n}"
Line 2129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2129 always 2129
  "" always ""
Line 2132
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2132 always 2132
  "void f(int& x, int& y) {\n    y++;\n}" always "void f(int& x, int& y) {\n    y++;\n}"
Line 2135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2135 always 2135
  "" always ""
Line 2137
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2137 always 2137
  "struct A {\n    explicit A(int& y) : x(&y) {}\n    int * x = nullptr;\n};" always "struct A {\n    explicit A(int& y) : x(&y) {}\n    int * x = nullptr;\n};"
Line 2141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2141 always 2141
  "" always ""
Line 2143
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2143 always 2143
  "struct A {\n    std::vector<int> v;\n    void swap(A& a) {\n        v.swap(a.v);\n    }\n};" always "struct A {\n    std::vector<int> v;\n    void swap(A& a) {\n        v.swap(a.v);\n    }\n};"
Line 2149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2149 always 2149
  "" always ""
Line 2151
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2151 always 2151
  "struct A {\n    template<class T>\n    void f();\n    template<class T>\n    void f() const;\n};\nvoid g(A& a) {\n    a.f<int>();\n}" always "struct A {\n    template<class T>\n    void f();\n    template<class T>\n    void f() const;\n};\nvoid g(A& a) {\n    a.f<int>();\n}"
Line 2160
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2160 always 2160
  "" always ""
Line 2162
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2162 always 2162
  "void f(std::vector<int>& v) {\n    for(auto&& x:v)\n        x = 1;\n}" always "void f(std::vector<int>& v) {\n    for(auto&& x:v)\n        x = 1;\n}"
Line 2166
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2166 always 2166
  "" always ""
Line 2168
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2168 always 2168
  "void f(std::vector<int>& v) {\n    for(auto x:v)\n        x = 1;\n}" always "void f(std::vector<int>& v) {\n    for(auto x:v)\n        x = 1;\n}"
Line 2172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2172 always 2172
  "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n"
Line 2174
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2174 always 2174
  "void f(std::vector<int>& v) {\n    for(auto& x:v) {}\n}" always "void f(std::vector<int>& v) {\n    for(auto& x:v) {}\n}"
Line 2177
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2177 always 2177
  "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n"
Line 2179
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2179 always 2179
  "void f(std::vector<int>& v) {\n    for(const auto& x:v) {}\n}" always "void f(std::vector<int>& v) {\n    for(const auto& x:v) {}\n}"
Line 2182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2182 always 2182
  "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n"
Line 2184
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2184 always 2184
  "void f(int& i) {\n    int& j = i;\n    j++;\n}" always "void f(int& i) {\n    int& j = i;\n    j++;\n}"
Line 2188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2188 always 2188
  "" always ""
Line 2190
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2190 always 2190
  "void f(std::vector<int>& v) {\n    int& i = v[0];\n    i++;\n}" always "void f(std::vector<int>& v) {\n    int& i = v[0];\n    i++;\n}"
Line 2194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2194 always 2194
  "" always ""
Line 2196
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2196 always 2196
  "void f(std::map<unsigned int, std::map<std::string, unsigned int> >& m, unsigned int i) {\n    std::map<std::string, unsigned int>& members = m[i];\n    members.clear();\n}" always "void f(std::map<unsigned int, std::map<std::string, unsigned int> >& m, unsigned int i) {\n    std::map<std::string, unsigned int>& members = m[i];\n    members.clear();\n}"
Line 2200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2200 always 2200
  "" always ""
Line 2202
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2202 always 2202
  "struct A {\n    int& x;\n    A(int& y) : x(y)\n    {}\n};" always "struct A {\n    int& x;\n    A(int& y) : x(y)\n    {}\n};"
Line 2207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2207 always 2207
  "" always ""
Line 2209
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2209 always 2209
  "struct A {\n    A(int& x);\n};\nstruct B : A {\n    B(int& x) : A(x)\n    {}\n};" always "struct A {\n    A(int& x);\n};\nstruct B : A {\n    B(int& x) : A(x)\n    {}\n};"
Line 2216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2216 always 2216
  "" always ""
Line 2218
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2218 always 2218
  "void f(bool b, int& x, int& y) {\n  auto& z = x;\n  auto& w = b ? y : z;\n  w = 1;\n}" always "void f(bool b, int& x, int& y) {\n  auto& z = x;\n  auto& w = b ? y : z;\n  w = 1;\n}"
Line 2223
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2223 always 2223
  "" always ""
Line 2225
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2225 always 2225
  "struct S {\n  int i;\n};\nint& f(S& s) {\n  return s.i;\n}" always "struct S {\n  int i;\n};\nint& f(S& s) {\n  return s.i;\n}"
Line 2231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2231 always 2231
  "" always ""
Line 2233
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2233 always 2233
  "int* f(std::list<int>& x, unsigned int y) {\n    for (int& m : x) {\n        if (m == y)\n            return &m;\n    }\n    return nullptr;\n}" always "int* f(std::list<int>& x, unsigned int y) {\n    for (int& m : x) {\n        if (m == y)\n            return &m;\n    }\n    return nullptr;\n}"
Line 2240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2240 always 2240
  "" always ""
Line 2242
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2242 always 2242
  "int& f(std::list<int>& x, int& y) {\n    for (int& m : x) {\n        if (m == y)\n            return m;\n    }\n    return y;\n}" always "int& f(std::list<int>& x, int& y) {\n    for (int& m : x) {\n        if (m == y)\n            return m;\n    }\n    return y;\n}"
Line 2249
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2249 always 2249
  "" always ""
Line 2251
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2251 always 2251
  "bool from_string(int& t, const std::string& s) {\n    std::istringstream iss(s);\n    return !(iss >> t).fail();\n}\n" always "bool from_string(int& t, const std::string& s) {\n    std::istringstream iss(s);\n    return !(iss >> t).fail();\n}\n"
Line 2255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2255 always 2255
  "" always ""
Line 2258
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2258 always 2258
  "class a {\n    void operator()(int& i) const {\n        i++;\n    }\n};\nvoid f(int& i) {\n    a()(i);\n}\n" always "class a {\n    void operator()(int& i) const {\n        i++;\n    }\n};\nvoid f(int& i) {\n    a()(i);\n}\n"
Line 2266
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2266 always 2266
  "" always ""
Line 2268
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2268 always 2268
  "class a {\n    void operator()(int& i) const {\n        i++;\n    }\n};\nvoid f(int& i) {\n    a x;\n    x(i);\n}\n" always "class a {\n    void operator()(int& i) const {\n        i++;\n    }\n};\nvoid f(int& i) {\n    a x;\n    x(i);\n}\n"
Line 2277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2277 always 2277
  "" always ""
Line 2279
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2279 always 2279
  "class a {\n    void operator()(const int& i) const;\n};\nvoid f(int& i) {\n    a x;\n    x(i);\n}\n" always "class a {\n    void operator()(const int& i) const;\n};\nvoid f(int& i) {\n    a x;\n    x(i);\n}\n"
Line 2286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2286 always 2286
  "[test.cpp:4]: (style) Parameter 'i' can be declared with const\n" always "[test.cpp:4]: (style) Parameter 'i' can be declared with const\n"
Line 2289
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2289 always 2289
  "struct T { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n}" always "struct T { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n}"
Line 2293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2293 always 2293
  "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n"
Line 2294
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2294 always 2294
  "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const T& z = x;\n    T& y = x\n    y.mutate();\n}" always "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const T& z = x;\n    T& y = x\n    y.mutate();\n}"
Line 2301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2301 always 2301
  "" always ""
Line 2302
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2302 always 2302
  "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = x\n}" always "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = x\n}"
Line 2307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2307 always 2307
  "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n"
Line 2308
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2308 always 2308
  "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = x\n    y.mutate();\n}" always "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = x\n    y.mutate();\n}"
Line 2314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2314 always 2314
  "" always ""
Line 2315
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2315 always 2315
  "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    my<fancy>::type& y = x\n    y.mutate();\n}" always "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    my<fancy>::type& y = x\n    y.mutate();\n}"
Line 2321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2321 always 2321
  "" always ""
Line 2322
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2322 always 2322
  "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = static_cast<const U&>(x)\n    y.mutate();\n}" always "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = static_cast<const U&>(x)\n    y.mutate();\n}"
Line 2328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2328 always 2328
  "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n"
Line 2329
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2329 always 2329
  "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = static_cast<U&>(x)\n    y.mutate();\n}" always "struct T : public U  { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = static_cast<U&>(x)\n    y.mutate();\n}"
Line 2335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2335 always 2335
  "" always ""
Line 2336
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2336 always 2336
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<const U&>(x)\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<const U&>(x)\n}"
Line 2341
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2341 always 2341
  "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n"
Line 2342
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2342 always 2342
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<U const &>(x)\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<U const &>(x)\n}"
Line 2349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2349 always 2349
  "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n"
Line 2350
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2350 always 2350
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<U & const>(x)\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<U & const>(x)\n}"
Line 2355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2355 always 2355
  "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n"
Line 2356
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2356 always 2356
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = dynamic_cast<U&>(x)\n    y.mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = dynamic_cast<U&>(x)\n    y.mutate();\n}"
Line 2362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2362 always 2362
  "" always ""
Line 2363
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2363 always 2363
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<typename const U&>(x)\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = dynamic_cast<typename const U&>(x)\n}"
Line 2368
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2368 always 2368
  "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n"
Line 2369
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2369 always 2369
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = dynamic_cast<typename U&>(x)\n    y.mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = dynamic_cast<typename U&>(x)\n    y.mutate();\n}"
Line 2375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2375 always 2375
  "" always ""
Line 2376
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2376 always 2376
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U* y = dynamic_cast<U*>(&x)\n    y->mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U* y = dynamic_cast<U*>(&x)\n    y->mutate();\n}"
Line 2382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2382 always 2382
  "" always ""
Line 2384
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2384 always 2384
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U * y = dynamic_cast<const U *>(&x)\n    y->mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U * y = dynamic_cast<const U *>(&x)\n    y->mutate();\n}"
Line 2390
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2390 always 2390
  "can be const" always "can be const"
  "" always ""
Line 2391
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2391 always 2391
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U const * y = dynamic_cast<U const *>(&x)\n    y->mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U const * y = dynamic_cast<U const *>(&x)\n    y->mutate();\n}"
Line 2397
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2397 always 2397
  "can be const" always "can be const"
  "" always ""
Line 2398
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2398 always 2398
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U * const y = dynamic_cast<U * const>(&x)\n    y->mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U * const y = dynamic_cast<U * const>(&x)\n    y->mutate();\n}"
Line 2404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2404 always 2404
  "" always ""
Line 2405
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2405 always 2405
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U const * const * const * const y = dynamic_cast<const U const * const * const * const>(&x)\n    y->mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U const * const * const * const y = dynamic_cast<const U const * const * const * const>(&x)\n    y->mutate();\n}"
Line 2411
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2411 always 2411
  "can be const" always "can be const"
  "" always ""
Line 2412
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2412 always 2412
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U const * const *  * const y = dynamic_cast<const U const * const *  * const>(&x)\n    y->mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U const * const *  * const y = dynamic_cast<const U const * const *  * const>(&x)\n    y->mutate();\n}"
Line 2418
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2418 always 2418
  "" always ""
Line 2419
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2419 always 2419
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    my::fancy<typename type const *> const * * const y = dynamic_cast<my::fancy<typename type const *> const * * const>(&x)\n    y->mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    my::fancy<typename type const *> const * * const y = dynamic_cast<my::fancy<typename type const *> const * * const>(&x)\n    y->mutate();\n}"
Line 2425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2425 always 2425
  "" always ""
Line 2426
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2426 always 2426
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    my::fancy<typename type const *> const * const  * const y = dynamic_cast<my::fancy<typename type const *> const * const  * const>(&x)\n    y->mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    my::fancy<typename type const *> const * const  * const y = dynamic_cast<my::fancy<typename type const *> const * const  * const>(&x)\n    y->mutate();\n}"
Line 2432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2432 always 2432
  "" always ""
Line 2434
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2434 always 2434
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = (const U&)(x)\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = (const U&)(x)\n}"
Line 2439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2439 always 2439
  "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n"
Line 2440
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2440 always 2440
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = (U&)(x)\n    y.mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = (U&)(x)\n    y.mutate();\n}"
Line 2446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2446 always 2446
  "" always ""
Line 2447
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2447 always 2447
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = (typename const U&)(x)\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    const U& y = (typename const U&)(x)\n}"
Line 2452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2452 always 2452
  "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n" always "[test.cpp:2]: (style) Parameter 'x' can be declared with const\n"
Line 2453
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2453 always 2453
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = (typename U&)(x)\n    y.mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U& y = (typename U&)(x)\n    y.mutate();\n}"
Line 2459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2459 always 2459
  "" always ""
Line 2460
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2460 always 2460
  "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U* y = (U*)(&x)\n    y->mutate();\n}" always "struct T : public U { void dostuff() const {}};\nvoid a(T& x) {\n    x.dostuff();\n    U* y = (U*)(&x)\n    y->mutate();\n}"
Line 2466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2466 always 2466
  "" always ""
Line 2468
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2468 always 2468
  "struct C { void f() const; };\n\nvoid foo(C& x) {\n   x.f();\n   foo( static_cast<U2>(0) );\n}" always "struct C { void f() const; };\n\nvoid foo(C& x) {\n   x.f();\n   foo( static_cast<U2>(0) );\n}"
Line 2474
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2474 always 2474
  "" always ""
Line 2476
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2476 always 2476
  "class a {\n    void foo(const int& i) const;\n    void operator()(int& i) const;\n};\nvoid f(int& i) {\n    a()(i);\n}\n" always "class a {\n    void foo(const int& i) const;\n    void operator()(int& i) const;\n};\nvoid f(int& i) {\n    a()(i);\n}\n"
Line 2483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2483 always 2483
  "" always ""
Line 2485
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2485 always 2485
  "class a {\n    void operator()(const int& i) const;\n};\nvoid f(int& i) {\n    a()(i);\n}\n" always "class a {\n    void operator()(const int& i) const;\n};\nvoid f(int& i) {\n    a()(i);\n}\n"
Line 2491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2491 always 2491
  "[test.cpp:4]: (style) Parameter 'i' can be declared with const\n" always "[test.cpp:4]: (style) Parameter 'i' can be declared with const\n"
Line 2494
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2494 always 2494
  "void fct1(MyClass& object) {\n   fct2([&](void){}, object);\n}\nbool fct2(std::function<void()> lambdaExpression, MyClass& object) {\n   object.modify();\n}\n" always "void fct1(MyClass& object) {\n   fct2([&](void){}, object);\n}\nbool fct2(std::function<void()> lambdaExpression, MyClass& object) {\n   object.modify();\n}\n"
Line 2500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2500 always 2500
  "" always ""
Line 2503
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2503 always 2503
  "struct A {};\nstruct B : A {};\nB& f(A& x) {\n    return static_cast<B&>(x);\n}\n" always "struct A {};\nstruct B : A {};\nB& f(A& x) {\n    return static_cast<B&>(x);\n}\n"
Line 2508
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2508 always 2508
  "" always ""
Line 2511
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2511 always 2511
  "using A = int*;\nvoid f(const A& x) {\n    ++(*x);\n}\n" always "using A = int*;\nvoid f(const A& x) {\n    ++(*x);\n}\n"
Line 2515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2515 always 2515
  "" always ""
Line 2518
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2518 always 2518
  "struct V {\n    V& get(typename std::vector<V>::size_type i) {\n        std::vector<V>& arr = v;\n        return arr[i];\n    }\n    std::vector<V> v;\n};\n" always "struct V {\n    V& get(typename std::vector<V>::size_type i) {\n        std::vector<V>& arr = v;\n        return arr[i];\n    }\n    std::vector<V> v;\n};\n"
Line 2525
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2525 always 2525
  "" always ""
Line 2527
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2527 always 2527
  "void e();\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid ai(void);\nvoid j(void);\nvoid e(void);\nvoid k(void);\nvoid l(void);\nvoid m(void);\nvoid n(void);\nvoid o(void);\nvoid q(void);\nvoid r(void);\nvoid t(void);\nvoid u(void);\nvoid v(void);\nvoid w(void);\nvoid z(void);\nvoid aj(void);\nvoid am(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid ao(wchar_t *d);\nvoid ah(void);\nvoid e(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid e(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid ah(void);\nvoid k(void);\nvoid an(void);\nvoid e(void);\nvoid e(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid k(void);\nvoid an(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid ah(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid an(void);\nvoid k(void);\nvoid e(void);\nvoid e(void);\nvoid e(void);\nvoid g(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid k(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid g(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid e(void);\nvoid ap(wchar_t *c, int d);\nvoid ah(void);\nvoid an(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid aq(char *b, size_t d, char *c, int a);\nvoid ar(char *b, size_t d, char *c, va_list a);\nvoid k(void);\nvoid g(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid k(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid g(void);\nvoid as(std::string s);\nvoid at(std::ifstream &f);\nvoid au(std::istream &f);\nvoid av(std::string &aa, std::wstring &ab);\nvoid aw(bool b, double x, double y);\nvoid ax(int i);\nvoid ay(std::string c, std::wstring a);\nvoid az(const std::locale &ac);\nvoid an();\nvoid ba(std::ifstream &f);\nvoid bb(std::istream &f) {\nf.read(NULL, 0);\n}\nvoid h(void) {\nstruct tm *tm = 0;\n(void)std::asctime(tm);\n(void)std::asctime(0);\n}\nvoid bc(size_t ae) {\nwchar_t *ad = 0, *af = 0;\nstruct tm *ag = 0;\n(void)std::wcsftime(ad, ae, af, ag);\n(void)std::wcsftime(0, ae, 0, 0);\n}\nvoid k(void) {}\nvoid bd(void);\nvoid be(void);\nvoid bf(int b);\nvoid e(void);\nvoid e(void);\nvoid bg(wchar_t *p);\nvoid bh(const std::list<int> &ak, const std::list<int> &al);\nvoid ah();\nvoid an();\nvoid h();" always "void e();\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid ai(void);\nvoid j(void);\nvoid e(void);\nvoid k(void);\nvoid l(void);\nvoid m(void);\nvoid n(void);\nvoid o(void);\nvoid q(void);\nvoid r(void);\nvoid t(void);\nvoid u(void);\nvoid v(void);\nvoid w(void);\nvoid z(void);\nvoid aj(void);\nvoid am(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid ao(wchar_t *d);\nvoid ah(void);\nvoid e(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid e(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid ah(void);\nvoid k(void);\nvoid an(void);\nvoid e(void);\nvoid e(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid k(void);\nvoid an(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid ah(void);\nvoid e(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid an(void);\nvoid k(void);\nvoid e(void);\nvoid e(void);\nvoid e(void);\nvoid g(void);\nvoid k(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid k(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid g(void);\nvoid ah(void);\nvoid an(void);\nvoid e(void);\nvoid k(void);\nvoid e(void);\nvoid ap(wchar_t *c, int d);\nvoid ah(void);\nvoid an(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid aq(char *b, size_t d, char *c, int a);\nvoid ar(char *b, size_t d, char *c, va_list a);\nvoid k(void);\nvoid g(void);\nvoid g(void);\nvoid h(void);\nvoid ah(void);\nvoid an(void);\nvoid k(void);\nvoid k(void);\nvoid e(void);\nvoid g(void);\nvoid g(void);\nvoid as(std::string s);\nvoid at(std::ifstream &f);\nvoid au(std::istream &f);\nvoid av(std::string &aa, std::wstring &ab);\nvoid aw(bool b, double x, double y);\nvoid ax(int i);\nvoid ay(std::string c, std::wstring a);\nvoid az(const std::locale &ac);\nvoid an();\nvoid ba(std::ifstream &f);\nvoid bb(std::istream &f) {\nf.read(NULL, 0);\n}\nvoid h(void) {\nstruct tm *tm = 0;\n(void)std::asctime(tm);\n(void)std::asctime(0);\n}\nvoid bc(size_t ae) {\nwchar_t *ad = 0, *af = 0;\nstruct tm *ag = 0;\n(void)std::wcsftime(ad, ae, af, ag);\n(void)std::wcsftime(0, ae, 0, 0);\n}\nvoid k(void) {}\nvoid bd(void);\nvoid be(void);\nvoid bf(int b);\nvoid e(void);\nvoid e(void);\nvoid bg(wchar_t *p);\nvoid bh(const std::list<int> &ak, const std::list<int> &al);\nvoid ah();\nvoid an();\nvoid h();"
Line 2678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2678 always 2678
  "" always ""
Line 2680
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2680 always 2680
  "class C\n{\npublic:\n  explicit C(int&);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(i)\n{\n}" always "class C\n{\npublic:\n  explicit C(int&);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(i)\n{\n}"
Line 2699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2699 always 2699
  "" always ""
Line 2701
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2701 always 2701
  "class C\n{\npublic:\n  explicit C(int&);\n};\n\nclass D\n{\npublic:\n  explicit D(int&) noexcept;\n\nprivate:\n  C c;\n};\n\nD::D(int& i) noexcept\n  : c(i)\n{}" always "class C\n{\npublic:\n  explicit C(int&);\n};\n\nclass D\n{\npublic:\n  explicit D(int&) noexcept;\n\nprivate:\n  C c;\n};\n\nD::D(int& i) noexcept\n  : c(i)\n{}"
Line 2719
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2719 always 2719
  "" always ""
Line 2721
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2721 always 2721
  "class C\n{\npublic:\n  explicit C(const int&);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(i)\n{\n}" always "class C\n{\npublic:\n  explicit C(const int&);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(i)\n{\n}"
Line 2740
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2740 always 2740
  "[test.cpp:16]: (style) Parameter 'i' can be declared with const\n" always "[test.cpp:16]: (style) Parameter 'i' can be declared with const\n"
  "" always ""
Line 2742
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2742 always 2742
  "class C\n{\npublic:\n  explicit C(int);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(i)\n{\n}" always "class C\n{\npublic:\n  explicit C(int);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(i)\n{\n}"
Line 2761
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2761 always 2761
  "[test.cpp:16]: (style) Parameter 'i' can be declared with const\n" always "[test.cpp:16]: (style) Parameter 'i' can be declared with const\n"
  "" always ""
Line 2763
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2763 always 2763
  "class C\n{\npublic:\n  explicit C(int, int);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(0, i)\n{\n}" always "class C\n{\npublic:\n  explicit C(int, int);\n};\n\nclass D\n{\npublic:\n  explicit D(int&);\n\nprivate:\n  C c;\n};\n\nD::D(int& i)\n  : c(0, i)\n{\n}"
Line 2782
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2782 always 2782
  "[test.cpp:16]: (style) Parameter 'i' can be declared with const\n" always "[test.cpp:16]: (style) Parameter 'i' can be declared with const\n"
  "" always ""
Line 2784
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2784 always 2784
  "void f(std::map<int, std::vector<int>> &map) {\n  for (auto &[slave, panels] : map)\n    panels.erase(it);\n}" always "void f(std::map<int, std::vector<int>> &map) {\n  for (auto &[slave, panels] : map)\n    panels.erase(it);\n}"
Line 2788
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2788 always 2788
  "" always ""
Line 2790
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2790 always 2790
  "struct S { void f(); int i; };\nvoid call_f(S& s) { (s.*(&S::f))(); }\n" always "struct S { void f(); int i; };\nvoid call_f(S& s) { (s.*(&S::f))(); }\n"
Line 2792
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2792 always 2792
  "" always ""
Line 2794
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2794 always 2794
  "struct S { int a[1]; };\nvoid f(S& s) { int* p = s.a; *p = 0; }\n" always "struct S { int a[1]; };\nvoid f(S& s) { int* p = s.a; *p = 0; }\n"
Line 2796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2796 always 2796
  "" always ""
Line 2798
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2798 always 2798
  "struct Foo {\n    int* p{};\n    int* get() { return p; }\n    const int* get() const { return p; }\n};\nstruct Bar {\n    int j{};\n    void f(Foo& foo) const { int* q = foo.get(); *q = j; }\n};\n" always "struct Foo {\n    int* p{};\n    int* get() { return p; }\n    const int* get() const { return p; }\n};\nstruct Bar {\n    int j{};\n    void f(Foo& foo) const { int* q = foo.get(); *q = j; }\n};\n"
Line 2807
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2807 always 2807
  "" always ""
Line 2809
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2809 always 2809
  "struct S {\n    void g(long L, const C*& PC) const;\n    void g(long L, C*& PC);\n};\nvoid f(S& s) {\n    C* PC{};\n    s.g(0, PC);\n};\n" always "struct S {\n    void g(long L, const C*& PC) const;\n    void g(long L, C*& PC);\n};\nvoid f(S& s) {\n    C* PC{};\n    s.g(0, PC);\n};\n"
Line 2817
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2817 always 2817
  "" always ""
Line 2820
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2820 always 2820
  "template <class T, class C>\nstruct d {\n    T& g(C& c, T C::*f) { return c.*f; }\n};\n" always "template <class T, class C>\nstruct d {\n    T& g(C& c, T C::*f) { return c.*f; }\n};\n"
Line 2824
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2824 always 2824
  "" always ""
Line 2826
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2826 always 2826
  "void f(std::map<int, int>& m) {\n    std::cout << m[0] << std::endl;\n};\n" always "void f(std::map<int, int>& m) {\n    std::cout << m[0] << std::endl;\n};\n"
Line 2829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2829 always 2829
  "" always ""
Line 2833
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2833 always 2833
  "int callback(std::vector<int>& x) { return x[0]; }\nvoid f() { dostuff(callback); }" always "int callback(std::vector<int>& x) { return x[0]; }\nvoid f() { dostuff(callback); }"
Line 2835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2835 always 2835
  "[test.cpp:2] -> [test.cpp:1]: (style) Parameter 'x' can be declared with const. However it seems that 'callback' is a callback function, if 'x' is declared with const you might also need to cast function pointer(s).\n" always "[test.cpp:2] -> [test.cpp:1]: (style) Parameter 'x' can be declared with const. However it seems that 'callback' is a callback function, if 'x' is declared with const you might also need to cast function pointer(s).\n"
Line 2838
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2838 always 2838
  "class EventEngine : public IEventEngine {\npublic:\n    EventEngine();\n\nprivate:\n    void signalEvent(ev::sig& signal, int revents);\n};\n\nEventEngine::EventEngine() {\n    mSigWatcher.set<EventEngine, &EventEngine::signalEvent>(this);\n}\n\nvoid EventEngine::signalEvent(ev::sig& signal, int revents) {\n    switch (signal.signum) {}\n}" always "class EventEngine : public IEventEngine {\npublic:\n    EventEngine();\n\nprivate:\n    void signalEvent(ev::sig& signal, int revents);\n};\n\nEventEngine::EventEngine() {\n    mSigWatcher.set<EventEngine, &EventEngine::signalEvent>(this);\n}\n\nvoid EventEngine::signalEvent(ev::sig& signal, int revents) {\n    switch (signal.signum) {}\n}"
Line 2853
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2853 always 2853
  "[test.cpp:10] -> [test.cpp:13]: (style) Parameter 'signal' can be declared with const. However it seems that 'signalEvent' is a callback function, if 'signal' is declared with const you might also need to cast function pointer(s).\n" always "[test.cpp:10] -> [test.cpp:13]: (style) Parameter 'signal' can be declared with const. However it seems that 'signalEvent' is a callback function, if 'signal' is declared with const you might also need to cast function pointer(s).\n"
Line 2857
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2857 always 2857
  "void foo(int *p) { return *p; }" always "void foo(int *p) { return *p; }"
Line 2858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2858 always 2858
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2860
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2860 always 2860
  "void foo(int *p) { x = *p; }" always "void foo(int *p) { x = *p; }"
Line 2861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2861 always 2861
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2863
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2863 always 2863
  "void foo(int *p) { int &ref = *p; ref = 12; }" always "void foo(int *p) { int &ref = *p; ref = 12; }"
Line 2864
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2864 always 2864
  "" always ""
Line 2866
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2866 always 2866
  "void foo(int *p) { x = *p + 10; }" always "void foo(int *p) { x = *p + 10; }"
Line 2867
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2867 always 2867
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2869
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2869 always 2869
  "void foo(int *p) { return p[10]; }" always "void foo(int *p) { return p[10]; }"
Line 2870
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2870 always 2870
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2872
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2872 always 2872
  "void foo(int *p) { int &ref = p[0]; ref = 12; }" always "void foo(int *p) { int &ref = p[0]; ref = 12; }"
Line 2873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2873 always 2873
  "" always ""
Line 2875
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2875 always 2875
  "void foo(int *p) { x[*p] = 12; }" always "void foo(int *p) { x[*p] = 12; }"
Line 2876
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2876 always 2876
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2878
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2878 always 2878
  "void foo(int *p) { if (p) {} }" always "void foo(int *p) { if (p) {} }"
Line 2879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2879 always 2879
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2881
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2881 always 2881
  "void foo(int *p) { if (p || x) {} }" always "void foo(int *p) { if (p || x) {} }"
Line 2882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2882 always 2882
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2884
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2884 always 2884
  "void foo(int *p) { if (p == 0) {} }" always "void foo(int *p) { if (p == 0) {} }"
Line 2885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2885 always 2885
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2887
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2887 always 2887
  "void foo(int *p) { if (!p) {} }" always "void foo(int *p) { if (!p) {} }"
Line 2888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2888 always 2888
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2890
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2890 always 2890
  "void foo(int *p) { if (*p > 123) {} }" always "void foo(int *p) { if (*p > 123) {} }"
Line 2891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2891 always 2891
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2893
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2893 always 2893
  "void foo(int *p) { return *p + 1; }" always "void foo(int *p) { return *p + 1; }"
Line 2894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2894 always 2894
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2896
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2896 always 2896
  "void foo(int *p) { return *p > 1; }" always "void foo(int *p) { return *p > 1; }"
Line 2897
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2897 always 2897
  "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'p' can be declared with const\n"
Line 2899
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2899 always 2899
  "void foo(const int* c) { if (c == 0) {}; }" always "void foo(const int* c) { if (c == 0) {}; }"
Line 2900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2900 always 2900
  "" always ""
Line 2902
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2902 always 2902
  "struct a { void b(); };\nstruct c {\n    a* d;\n    a& g() { return *d; }\n};\n" always "struct a { void b(); };\nstruct c {\n    a* d;\n    a& g() { return *d; }\n};\n"
Line 2907
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2907 always 2907
  "" always ""
Line 2909
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2909 always 2909
  "struct a { void b(); };\nstruct c { a* d; };\nvoid e(c);\n" always "struct a { void b(); };\nstruct c { a* d; };\nvoid e(c);\n"
Line 2912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2912 always 2912
  "" always ""
Line 2914
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2914 always 2914
  "struct V {\n    V& get(typename std::vector<V>::size_type i, std::vector<V>* arr) {\n        return arr->at(i);\n    }\n};\n" always "struct V {\n    V& get(typename std::vector<V>::size_type i, std::vector<V>* arr) {\n        return arr->at(i);\n    }\n};\n"
Line 2919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2919 always 2919
  "" always ""
Line 2921
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2921 always 2921
  "struct A {};\nstruct B : A {};\nB* f(A* x) {\n    return static_cast<B*>(x);\n}\n" always "struct A {};\nstruct B : A {};\nB* f(A* x) {\n    return static_cast<B*>(x);\n}\n"
Line 2926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2926 always 2926
  "" always ""
Line 2928
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2928 always 2928
  "int f(std::vector<int>* x) {\n    int& i = (*x)[0];\n    i++;\n    return i;\n}" always "int f(std::vector<int>* x) {\n    int& i = (*x)[0];\n    i++;\n    return i;\n}"
Line 2933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2933 always 2933
  "" always ""
Line 2935
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2935 always 2935
  "struct A { int a; };\nA f(std::vector<A>* x) {\n    x->front().a = 1;\n    return x->front();\n}" always "struct A { int a; };\nA f(std::vector<A>* x) {\n    x->front().a = 1;\n    return x->front();\n}"
Line 2940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2940 always 2940
  "" always ""
Line 2942
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2942 always 2942
  "void f(std::vector<int>* v) {\n    for(auto&& x:*v)\n        x = 1;\n}" always "void f(std::vector<int>* v) {\n    for(auto&& x:*v)\n        x = 1;\n}"
Line 2946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2946 always 2946
  "" always ""
Line 2948
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2948 always 2948
  "struct A {\n    int* x;\n    A(int* y) : x(y)\n    {}\n};" always "struct A {\n    int* x;\n    A(int* y) : x(y)\n    {}\n};"
Line 2953
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2953 always 2953
  "" always ""
Line 2955
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2955 always 2955
  "void f(bool b, int* x, int* y) {\n  int* z = x;\n  int* w = b ? y : z;\n  *w = 1;\n}" always "void f(bool b, int* x, int* y) {\n  int* z = x;\n  int* w = b ? y : z;\n  *w = 1;\n}"
Line 2960
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2960 always 2960
  "" always ""
Line 2962
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2962 always 2962
  "void f(bool b, int* x, int* y) {\n  int& z = *x;\n  int& w = b ? *y : z;\n  w = 1;\n}" always "void f(bool b, int* x, int* y) {\n  int& z = *x;\n  int& w = b ? *y : z;\n  w = 1;\n}"
Line 2967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2967 always 2967
  "" always ""
Line 2969
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2969 always 2969
  "class Base { virtual void dostuff(int *p) = 0; };\nclass Derived: public Base { int x; void dostuff(int *p) override { x = *p; } };" always "class Base { virtual void dostuff(int *p) = 0; };\nclass Derived: public Base { int x; void dostuff(int *p) override { x = *p; } };"
Line 2971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2971 always 2971
  "" always ""
Line 2973
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2973 always 2973
  "struct Data { char buf[128]; };\nvoid encrypt(Data& data) {\n    const char a[] = \"asfasd\";\n    memcpy(data.buf, &a, sizeof(a));\n}" always "struct Data { char buf[128]; };\nvoid encrypt(Data& data) {\n    const char a[] = \"asfasd\";\n    memcpy(data.buf, &a, sizeof(a));\n}"
Line 2978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2978 always 2978
  "" always ""
Line 2981
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2981 always 2981
  "void foo(std::istream &istr) {\n  unsigned char x[2];\n  istr >> x[0];\n}" always "void foo(std::istream &istr) {\n  unsigned char x[2];\n  istr >> x[0];\n}"
Line 2985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2985 always 2985
  "" always ""
Line 2988
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2988 always 2988
  "S& f() {\n    static S* p = new S();\n    return *p;\n}\n" always "S& f() {\n    static S* p = new S();\n    return *p;\n}\n"
Line 2992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2992 always 2992
  "" always ""
Line 2994
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2994 always 2994
  "int f() {\n    static int i[1] = {};\n    return i[0];\n}\n" always "int f() {\n    static int i[1] = {};\n    return i[0];\n}\n"
Line 2998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  2998 always 2998
  "[test.cpp:2]: (style) Variable 'i' can be declared with const\n" always "[test.cpp:2]: (style) Variable 'i' can be declared with const\n"
Line 3000
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3000 always 3000
  "int f() {\n    static int i[] = { 0 };\n    int j = i[0] + 1;\n    return j;\n}\n" always "int f() {\n    static int i[] = { 0 };\n    int j = i[0] + 1;\n    return j;\n}\n"
Line 3005
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3005 always 3005
  "[test.cpp:2]: (style) Variable 'i' can be declared with const\n" always "[test.cpp:2]: (style) Variable 'i' can be declared with const\n"
Line 3008
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3008 always 3008
  "void f(std::array<int, 1> const& i) {\n    if (i[0] == 0) {}\n}\n" always "void f(std::array<int, 1> const& i) {\n    if (i[0] == 0) {}\n}\n"
Line 3011
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3011 always 3011
  "" always ""
Line 3014
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3014 always 3014
  "void f(const std::vector<int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n" always "void f(const std::vector<int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n"
Line 3020
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3020 always 3020
  "" always ""
Line 3022
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3022 always 3022
  "void f(std::vector<int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n" always "void f(std::vector<int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n"
Line 3028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3028 always 3028
  "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n"
Line 3030
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3030 always 3030
  "void f(std::vector<const int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n" always "void f(std::vector<const int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n"
Line 3036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3036 always 3036
  "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n" always "[test.cpp:1]: (style) Parameter 'v' can be declared with const\n"
Line 3038
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3038 always 3038
  "void f(const std::vector<const int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n" always "void f(const std::vector<const int*>& v) {\n    for (const auto& p : v)\n        if (p == nullptr) {}\n    for (const auto* p : v)\n        if (p == nullptr) {}\n}\n"
Line 3044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3044 always 3044
  "" always ""
Line 3046
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3046 always 3046
  "void f(const int* const p) {\n    if (p == nullptr) {}\n}\n" always "void f(const int* const p) {\n    if (p == nullptr) {}\n}\n"
Line 3049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3049 always 3049
  "" always ""
Line 3051
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3051 always 3051
  "void g(int*);\nvoid f(int* const* pp) {\n    int* p = pp[0];\n    g(p);\n}\n" always "void g(int*);\nvoid f(int* const* pp) {\n    int* p = pp[0];\n    g(p);\n}\n"
Line 3056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3056 always 3056
  "" always ""
Line 3058
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3058 always 3058
  "template <typename T>\nstruct S {\n    static bool f(const T& t) { return t != nullptr; }\n};\nS<int*> s;\n" always "template <typename T>\nstruct S {\n    static bool f(const T& t) { return t != nullptr; }\n};\nS<int*> s;\n"
Line 3063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3063 always 3063
  "" always ""
Line 3065
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3065 always 3065
  "void f(int i) {\n    const char *tmp;\n    char* a[] = { \"a\", \"aa\" };\n    static char* b[] = { \"b\", \"bb\" };\n    tmp = a[i];\n    printf(\"%s\", tmp);\n    tmp = b[i];\n    printf(\"%s\", tmp);\n}\n" always "void f(int i) {\n    const char *tmp;\n    char* a[] = { \"a\", \"aa\" };\n    static char* b[] = { \"b\", \"bb\" };\n    tmp = a[i];\n    printf(\"%s\", tmp);\n    tmp = b[i];\n    printf(\"%s\", tmp);\n}\n"
Line 3074
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3074 always 3074
  "[test.cpp:3]: (style) Variable 'a' can be declared with const\n[test.cpp:4]: (style) Variable 'b' can be declared with const\n" always "[test.cpp:3]: (style) Variable 'a' can be declared with const\n[test.cpp:4]: (style) Variable 'b' can be declared with const\n"
Line 3080
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3080 always 3080
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3092 always 3092
  "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3094
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3094 always 3094
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y = 2;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y = 2;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3108
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3108 always 3108
  "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3110
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3110 always 3110
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        if (x)\n        {\n            y = 3;\n        }\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        if (x)\n        {\n            y = 3;\n        }\n    }\n    bar(y);\n}"
Line 3125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3125 always 3125
  "" always ""
Line 3127
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3127 always 3127
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y = 2;\n        if (z)\n            printf(\"%d\", y);\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y = 2;\n        if (z)\n            printf(\"%d\", y);\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3143 always 3143
  "" always ""
Line 3145
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3145 always 3145
  "void foo()\n{\n    int x = a;\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        x = 2;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int x = a;\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        x = 2;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3158
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3158 always 3158
  "" always ""
Line 3160
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3160 always 3160
  "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        break;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        break;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3173 always 3173
  "" always ""
Line 3175
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3175 always 3175
  "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y = 2;\n            continue;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}" always "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y = 2;\n            continue;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}"
Line 3190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3190 always 3190
  "" always ""
Line 3192
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3192 always 3192
  "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y = 2;\n            throw e;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}" always "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y = 2;\n            throw e;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}"
Line 3207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3207 always 3207
  "" always ""
Line 3209
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3209 always 3209
  "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        printf(\"%d\", y);\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        printf(\"%d\", y);\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3222 always 3222
  "" always ""
Line 3224
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3224 always 3224
  "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        bar();\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        bar();\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3237 always 3237
  "[test.cpp:7] -> [test.cpp:10]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:7] -> [test.cpp:10]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3239
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3239 always 3239
  "void bar() {}\nvoid foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        bar();\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void bar() {}\nvoid foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y = 2;\n        bar();\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3253 always 3253
  "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3255
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3255 always 3255
  "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n    case 3:\n      strcpy(str, \"b'\");\n    }\n}" always "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n    case 3:\n      strcpy(str, \"b'\");\n    }\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3265
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3265 always 3265
  "[test.cpp:6] -> [test.cpp:8]: (style) Buffer 'str' is being written before its old content has been used. 'break;' missing?\n" always "[test.cpp:6] -> [test.cpp:8]: (style) Buffer 'str' is being written before its old content has been used. 'break;' missing?\n"
  "" always ""
Line 3269
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3269 always 3269
  "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strncpy(str, \"a'\");\n    case 3:\n      strncpy(str, \"b'\");\n    }\n}" always "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strncpy(str, \"a'\");\n    case 3:\n      strncpy(str, \"b'\");\n    }\n}"
Line 3279
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3279 always 3279
  "[test.cpp:6] -> [test.cpp:8]: (style) Buffer 'str' is being written before its old content has been used. 'break;' missing?\n" always "[test.cpp:6] -> [test.cpp:8]: (style) Buffer 'str' is being written before its old content has been used. 'break;' missing?\n"
  "" always ""
Line 3283
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3283 always 3283
  "void foo(int a) {\n    char str[10];\n    int z = 0;\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n      z++;\n    case 3:\n      strcpy(str, \"b'\");\n      z++;\n    }\n}" always "void foo(int a) {\n    char str[10];\n    int z = 0;\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n      z++;\n    case 3:\n      strcpy(str, \"b'\");\n      z++;\n    }\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3296
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3296 always 3296
  "[test.cpp:7] -> [test.cpp:10]: (style) Buffer 'str' is being written before its old content has been used. 'break;' missing?\n" always "[test.cpp:7] -> [test.cpp:10]: (style) Buffer 'str' is being written before its old content has been used. 'break;' missing?\n"
  "" always ""
Line 3300
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3300 always 3300
  "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n      break;\n    case 3:\n      strcpy(str, \"b'\");\n      break;\n    }\n}" always "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n      break;\n    case 3:\n      strcpy(str, \"b'\");\n      break;\n    }\n}"
Line 3312
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3312 always 3312
  "" always ""
Line 3314
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3314 always 3314
  "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n      printf(str);\n    case 3:\n      strcpy(str, \"b'\");\n    }\n}" always "void foo(int a) {\n    char str[10];\n    switch (a)\n    {\n    case 2:\n      strcpy(str, \"a'\");\n      printf(str);\n    case 3:\n      strcpy(str, \"b'\");\n    }\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3325 always 3325
  "" always ""
Line 3328
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3328 always 3328
  "typedef struct ct_data_s {\n    union {\n        char freq;\n    } fc;\n} ct_data;\ntypedef struct internal_state {\n    struct ct_data_s dyn_ltree[10];\n} deflate_state;\nvoid f(deflate_state *s) {\n    s->dyn_ltree[0].fc.freq++;\n}\n" always "typedef struct ct_data_s {\n    union {\n        char freq;\n    } fc;\n} ct_data;\ntypedef struct internal_state {\n    struct ct_data_s dyn_ltree[10];\n} deflate_state;\nvoid f(deflate_state *s) {\n    s->dyn_ltree[0].fc.freq++;\n}\n"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3339 always 3339
  "" always ""
Line 3342
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3342 always 3342
  "void HttpFileTransfer :: transferTerminated ( bool bSuccess@1 ) {\nif ( m_szCompletionCallback . isNull ( ) ) {\nKVS_TRIGGER_EVENT ( KviEvent_OnHTTPGetTerminated , out ? out : ( g_pApp . activeConsole ( ) ) , & vParams )\n} else {\nKviKvsScript :: run ( m_szCompletionCallback , out ? out : ( g_pApp . activeConsole ( ) ) , & vParams ) ;\n}\n}\n" always "void HttpFileTransfer :: transferTerminated ( bool bSuccess@1 ) {\nif ( m_szCompletionCallback . isNull ( ) ) {\nKVS_TRIGGER_EVENT ( KviEvent_OnHTTPGetTerminated , out ? out : ( g_pApp . activeConsole ( ) ) , & vParams )\n} else {\nKviKvsScript :: run ( m_szCompletionCallback , out ? out : ( g_pApp . activeConsole ( ) ) , & vParams ) ;\n}\n}\n"
  nullptr always 0
  false always 0
  false always 0
  true always 1
Line 3349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3349 always 3349
  "" always ""
Line 3351
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3351 always 3351
  "void f() {\n  int x;\n  switch (state) {\n  case 1: x = 3; goto a;\n  case 1: x = 6; goto a;\n  }\n}" always "void f() {\n  int x;\n  switch (state) {\n  case 1: x = 3; goto a;\n  case 1: x = 6; goto a;\n  }\n}"
Line 3358
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3358 always 3358
  "" always ""
Line 3362
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3362 always 3362
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        ++y;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        ++y;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3374 always 3374
  "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3375
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3375 always 3375
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        ++y;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        ++y;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3389
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3389 always 3389
  "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3390
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3390 always 3390
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        (void)y;\n    case 3:\n        ++y;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        (void)y;\n    case 3:\n        ++y;\n    }\n    bar(y);\n}"
Line 3402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3402 always 3402
  "" always ""
Line 3403
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3403 always 3403
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        ++y;\n    case 3:\n        ++y;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        ++y;\n    case 3:\n        ++y;\n    }\n    bar(y);\n}"
Line 3415
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3415 always 3415
  "" always ""
Line 3416
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3416 always 3416
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        --y;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        --y;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3428 always 3428
  "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3429
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3429 always 3429
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        --y;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        --y;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3443 always 3443
  "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3444
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3444 always 3444
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        (void)y;\n    case 3:\n        --y;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        (void)y;\n    case 3:\n        --y;\n    }\n    bar(y);\n}"
Line 3456
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3456 always 3456
  "" always ""
Line 3457
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3457 always 3457
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        --y;\n    case 3:\n        --y;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        --y;\n    case 3:\n        --y;\n    }\n    bar(y);\n}"
Line 3469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3469 always 3469
  "" always ""
Line 3470
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3470 always 3470
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y++;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y++;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3482
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3482 always 3482
  "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3483
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3483 always 3483
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y++;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y++;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3497 always 3497
  "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3498
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3498 always 3498
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        y++;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        y++;\n    }\n    bar(y);\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3510 always 3510
  "" always ""
Line 3511
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3511 always 3511
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y++;\n    case 3:\n        y++;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y++;\n    case 3:\n        y++;\n    }\n    bar(y);\n}"
Line 3523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3523 always 3523
  "" always ""
Line 3524
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3524 always 3524
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y--;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y--;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3536 always 3536
  "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:7] -> [test.cpp:9]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3537
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3537 always 3537
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y--;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y--;\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3551
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3551 always 3551
  "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:8] -> [test.cpp:11]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3552
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3552 always 3552
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        y--;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = 2;\n    case 3:\n        y--;\n    }\n    bar(y);\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3564
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3564 always 3564
  "" always ""
Line 3565
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3565 always 3565
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y--;\n    case 3:\n        y--;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y--;\n    case 3:\n        y--;\n    }\n    bar(y);\n}"
Line 3577
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3577 always 3577
  "" always ""
Line 3578
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3578 always 3578
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y++;\n    case 3:\n        if (x)\n        {\n            y = 3;\n        }\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y++;\n    case 3:\n        if (x)\n        {\n            y = 3;\n        }\n    }\n    bar(y);\n}"
Line 3593
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3593 always 3593
  "" always ""
Line 3594
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3594 always 3594
  "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y++;\n        if (y)\n            printf(\"%d\", y);\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n      {\n        y++;\n        if (y)\n            printf(\"%d\", y);\n      }\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3610
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3610 always 3610
  "" always ""
Line 3611
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3611 always 3611
  "void foo()\n{\n    int x = a;\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        x++;\n    case 3:\n        y++;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int x = a;\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        x++;\n    case 3:\n        y++;\n    }\n    bar(y);\n}"
Line 3624
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3624 always 3624
  "" always ""
Line 3625
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3625 always 3625
  "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y++;\n        break;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y++;\n        break;\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3638
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3638 always 3638
  "" always ""
Line 3639
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3639 always 3639
  "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y++;\n            continue;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}" always "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y++;\n            continue;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}"
Line 3654
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3654 always 3654
  "" always ""
Line 3655
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3655 always 3655
  "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y++;\n            throw e;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}" always "void foo()\n{\n    int y = 1;\n    while(xyz()) {\n        switch (x)\n        {\n        case 2:\n            y++;\n            throw e;\n        case 3:\n            y = 3;\n        }\n        bar(y);\n    }\n}"
Line 3670
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3670 always 3670
  "" always ""
Line 3671
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3671 always 3671
  "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y++;\n        printf(\"%d\", y);\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y++;\n        printf(\"%d\", y);\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3684 always 3684
  "" always ""
Line 3685
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3685 always 3685
  "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y++;\n        bar();\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}" always "void foo()\n{\n    int y = 1;\n    switch (x)\n    {\n    case 2:\n        y++;\n        bar();\n    case 3:\n        y = 3;\n    }\n    bar(y);\n}"
Line 3698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3698 always 3698
  "[test.cpp:7] -> [test.cpp:10]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n" always "[test.cpp:7] -> [test.cpp:10]: (style) Variable 'y' is reassigned a value before the old one has been used. 'break;' missing?\n"
Line 3700
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3700 always 3700
  "bool f() {\n    bool ret = false;\n    switch (switchCond) {\n    case 1:\n        ret = true;\n        break;\n    case 31:\n        ret = true;\n        break;\n    case 54:\n        ret = true;\n        break;\n    };\n    ret = true;\n    return ret;\n}" always "bool f() {\n    bool ret = false;\n    switch (switchCond) {\n    case 1:\n        ret = true;\n        break;\n    case 31:\n        ret = true;\n        break;\n    case 54:\n        ret = true;\n        break;\n    };\n    ret = true;\n    return ret;\n}"
Line 3716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3716 always 3716
  "[test.cpp:5] -> [test.cpp:14]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n[test.cpp:8] -> [test.cpp:14]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n[test.cpp:11] -> [test.cpp:14]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n" always "[test.cpp:5] -> [test.cpp:14]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n[test.cpp:8] -> [test.cpp:14]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n[test.cpp:11] -> [test.cpp:14]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n"
Line 3723
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3723 always 3723
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n    case 3:\n        y |= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n    case 3:\n        y |= 3;\n        break;\n    }\n}"
Line 3735
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3735 always 3735
  "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n" always "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n"
Line 3737
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3737 always 3737
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = y | 3;\n    case 3:\n        y = y | 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y = y | 3;\n    case 3:\n        y = y | 3;\n        break;\n    }\n}"
Line 3749
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3749 always 3749
  "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n" always "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n"
Line 3751
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3751 always 3751
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n    default:\n        y |= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n    default:\n        y |= 3;\n        break;\n    }\n}"
Line 3763
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3763 always 3763
  "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n" always "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n"
Line 3765
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3765 always 3765
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n    default:\n        if (z)\n            y |= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n    default:\n        if (z)\n            y |= 3;\n        break;\n    }\n}"
Line 3778
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3778 always 3778
  "" always ""
Line 3780
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3780 always 3780
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= z;\n        z++\n    default:\n        y |= z;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= z;\n        z++\n    default:\n        y |= z;\n        break;\n    }\n}"
Line 3793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3793 always 3793
  "" always ""
Line 3795
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3795 always 3795
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n        bar(y);\n    case 3:\n        y |= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n        bar(y);\n    case 3:\n        y |= 3;\n        break;\n    }\n}"
Line 3808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3808 always 3808
  "" always ""
Line 3810
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3810 always 3810
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n        y = 4;\n    case 3:\n        y |= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n        y = 4;\n    case 3:\n        y |= 3;\n        break;\n    }\n}"
Line 3823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3823 always 3823
  "[test.cpp:7] -> [test.cpp:8]: (style) Variable 'y' is reassigned a value before the old one has been used.\n" always "[test.cpp:7] -> [test.cpp:8]: (style) Variable 'y' is reassigned a value before the old one has been used.\n"
Line 3825
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3825 always 3825
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y &= 3;\n    case 3:\n        y &= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y &= 3;\n    case 3:\n        y &= 3;\n        break;\n    }\n}"
Line 3837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3837 always 3837
  "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n" always "[test.cpp:7]: (style) Redundant bitwise operation on 'y' in 'switch' statement. 'break;' missing?\n"
Line 3839
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3839 always 3839
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n        break;\n    case 3:\n        y |= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 3;\n        break;\n    case 3:\n        y |= 3;\n        break;\n    }\n}"
Line 3852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3852 always 3852
  "" always ""
Line 3854
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3854 always 3854
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y ^= 3;\n    case 3:\n        y ^= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y ^= 3;\n    case 3:\n        y ^= 3;\n        break;\n    }\n}"
Line 3866
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3866 always 3866
  "" always ""
Line 3868
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3868 always 3868
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 2;\n    case 3:\n        y |= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 2;\n    case 3:\n        y |= 3;\n        break;\n    }\n}"
Line 3880
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3880 always 3880
  "" always ""
Line 3882
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3882 always 3882
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y &= 2;\n    case 3:\n        y &= 3;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y &= 2;\n    case 3:\n        y &= 3;\n        break;\n    }\n}"
Line 3894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3894 always 3894
  "" always ""
Line 3896
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3896 always 3896
  "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 2;\n    case 3:\n        y &= 2;\n        break;\n    }\n}" always "void foo(int a)\n{\n    int y = 1;\n    switch (a)\n    {\n    case 2:\n        y |= 2;\n    case 3:\n        y &= 2;\n        break;\n    }\n}"
Line 3908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3908 always 3908
  "" always ""
Line 3912
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3912 always 3912
  "void foo(int a) {\n    while(1) {\n        if (a++ >= 100) {\n            break;\n            continue;\n        }\n    }\n}" always "void foo(int a) {\n    while(1) {\n        if (a++ >= 100) {\n            break;\n            continue;\n        }\n    }\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3920 always 3920
  "[test.cpp:5]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:5]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 3922
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3922 always 3922
  "int foo(int a) {\n    return 0;\n    return(a-1);\n}" always "int foo(int a) {\n    return 0;\n    return(a-1);\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3926 always 3926
  "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 3928
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3928 always 3928
  "int foo(int a) {\n  A:    return(0);\n    goto A;\n}" always "int foo(int a) {\n  A:    return(0);\n    goto A;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3933 always 3933
  "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 3936
  "exit" always "exit"
  true always 1
Line 3937
  "exit" always "exit"
  1 always 1
Line 3938
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3938 always 3938
  "void foo() {\n    exit(0);\n    break;\n}" always "void foo() {\n    exit(0);\n    break;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
  false always 0
  & {lifetime[Address]=(settings),!0}
Line 3942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3942 always 3942
  "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 3944
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3944 always 3944
  "class NeonSession {\n    void exit();\n};\nvoid NeonSession::exit()\n{\n    SAL_INFO(\"ucb.ucp.webdav\", \"neon commands cannot be aborted\");\n}" always "class NeonSession {\n    void exit();\n};\nvoid NeonSession::exit()\n{\n    SAL_INFO(\"ucb.ucp.webdav\", \"neon commands cannot be aborted\");\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
  false always 0
  & {lifetime[Address]=(settings),!0}
Line 3951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3951 always 3951
  "" always ""
Line 3953
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3953 always 3953
  "void NeonSession::exit()\n{\n    SAL_INFO(\"ucb.ucp.webdav\", \"neon commands cannot be aborted\");\n}" always "void NeonSession::exit()\n{\n    SAL_INFO(\"ucb.ucp.webdav\", \"neon commands cannot be aborted\");\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
  false always 0
  & {lifetime[Address]=(settings),!0}
Line 3957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3957 always 3957
  "" always ""
Line 3959
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3959 always 3959
  "void foo() { xResAccess->exit(); }" always "void foo() { xResAccess->exit(); }"
  nullptr always 0
  false always 0
  false always 0
  false always 0
  false always 0
  & {lifetime[Address]=(settings),!0}
Line 3960
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3960 always 3960
  "" always ""
Line 3962
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3962 always 3962
  "void foo(int a)\n{\n        switch(a) {\n          case 0:\n            printf(\"case 0\");\n            break;\n            break;\n          case 1:\n            c++;\n            break;\n         }\n}" always "void foo(int a)\n{\n        switch(a) {\n          case 0:\n            printf(\"case 0\");\n            break;\n            break;\n          case 1:\n            c++;\n            break;\n         }\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3974 always 3974
  "[test.cpp:7]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:7]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 3976
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3976 always 3976
  "void foo(int a)\n{\n        switch(a) {\n          case 0:\n            printf(\"case 0\");\n            break;\n          case 1:\n            c++;\n            break;\n         }\n}" always "void foo(int a)\n{\n        switch(a) {\n          case 0:\n            printf(\"case 0\");\n            break;\n          case 1:\n            c++;\n            break;\n         }\n}"
Line 3987
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3987 always 3987
  "" always ""
Line 3989
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3989 always 3989
  "void foo(int a)\n{\n        while(true) {\n          if (a++ >= 100) {\n            break;\n            break;\n          }\n       }\n}" always "void foo(int a)\n{\n        while(true) {\n          if (a++ >= 100) {\n            break;\n            break;\n          }\n       }\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 3998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  3998 always 3998
  "[test.cpp:6]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:6]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 4000
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4000 always 4000
  "void foo(int a)\n{\n        while(true) {\n          if (a++ >= 100) {\n            continue;\n            continue;\n          }\n          a+=2;\n       }\n}" always "void foo(int a)\n{\n        while(true) {\n          if (a++ >= 100) {\n            continue;\n            continue;\n          }\n          a+=2;\n       }\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4010
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4010 always 4010
  "[test.cpp:6]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:6]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 4012
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4012 always 4012
  "void foo(int a)\n{\n        while(true) {\n          if (a++ >= 100) {\n            continue;\n          }\n          a+=2;\n       }\n}" always "void foo(int a)\n{\n        while(true) {\n          if (a++ >= 100) {\n            continue;\n          }\n          a+=2;\n       }\n}"
Line 4021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4021 always 4021
  "" always ""
Line 4023
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4023 always 4023
  "int foo() {\n    throw 0;\n    return 1;\n}" always "int foo() {\n    throw 0;\n    return 1;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4027 always 4027
  "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 4029
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4029 always 4029
  "void foo() {\n    throw 0;\n    return;\n}" always "void foo() {\n    throw 0;\n    return;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4033
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4033 always 4033
  "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 4035
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4035 always 4035
  "int foo() {\n    throw = 0;\n    return 1;\n}" always "int foo() {\n    throw = 0;\n    return 1;\n}"
  "test.c" always "test.c"
  false always 0
  false always 0
  false always 0
Line 4039
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4039 always 4039
  "" always ""
Line 4041
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4041 always 4041
  "int foo() {\n    return 0;\n    return 1;\n}" always "int foo() {\n    return 0;\n    return 1;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4045 always 4045
  "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:3]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 4047
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4047 always 4047
  "int foo() {\n    return 0;\n    foo();\n}" always "int foo() {\n    return 0;\n    foo();\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4051
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4051 always 4051
  "[test.cpp:3]: (style) Statements following return, break, continue, goto or throw will never be executed.\n" always "[test.cpp:3]: (style) Statements following return, break, continue, goto or throw will never be executed.\n"
Line 4053
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4053 always 4053
  "int foo(int unused) {\n    return 0;\n    (void)unused;\n}" always "int foo(int unused) {\n    return 0;\n    (void)unused;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4057 always 4057
  "" always ""
Line 4059
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4059 always 4059
  "int foo(int unused1, int unused2) {\n    return 0;\n    (void)unused1;\n    (void)unused2;\n}" always "int foo(int unused1, int unused2) {\n    return 0;\n    (void)unused1;\n    (void)unused2;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4064 always 4064
  "" always ""
Line 4066
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4066 always 4066
  "int foo(int unused1, int unused2) {\n    return 0;\n    (void)unused1;\n    (void)unused2;\n    foo();\n}" always "int foo(int unused1, int unused2) {\n    return 0;\n    (void)unused1;\n    (void)unused2;\n    foo();\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4072 always 4072
  "[test.cpp:5]: (style) Statements following return, break, continue, goto or throw will never be executed.\n" always "[test.cpp:5]: (style) Statements following return, break, continue, goto or throw will never be executed.\n"
Line 4074
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4074 always 4074
  "int foo() {\n    if(bar)\n        return 0;\n    return 124;\n}" always "int foo() {\n    if(bar)\n        return 0;\n    return 124;\n}"
Line 4079
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4079 always 4079
  "" always ""
Line 4081
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4081 always 4081
  "int foo() {\n    while(bar) {\n        return 0;\n        return 0;\n        return 0;\n        return 0;\n    }\n    return 124;\n}" always "int foo() {\n    while(bar) {\n        return 0;\n        return 0;\n        return 0;\n        return 0;\n    }\n    return 124;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4090 always 4090
  "[test.cpp:4]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:4]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 4092
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4092 always 4092
  "void foo() {\n    while(bar) {\n        return;\n        break;\n    }\n}" always "void foo() {\n    while(bar) {\n        return;\n        break;\n    }\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4098
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4098 always 4098
  "[test.cpp:4]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:4]: (style) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 4101
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4101 always 4101
  "extern int i,j;\nint foo() {\n    switch(i) {\n        default: j=1; break;\n    }\n    return 0;\n    j=2;\n}" always "extern int i,j;\nint foo() {\n    switch(i) {\n        default: j=1; break;\n    }\n    return 0;\n    j=2;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4109 always 4109
  "[test.cpp:7]: (style) Statements following return, break, continue, goto or throw will never be executed.\n" always "[test.cpp:7]: (style) Statements following return, break, continue, goto or throw will never be executed.\n"
Line 4111
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4111 always 4111
  "int foo() {\n    return 0;\n  label:\n    throw 0;\n}" always "int foo() {\n    return 0;\n  label:\n    throw 0;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4116
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4116 always 4116
  "[test.cpp:3]: (style) Label 'label' is not used.\n" always "[test.cpp:3]: (style) Label 'label' is not used.\n"
Line 4118
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4118 always 4118
  "struct A {\n    virtual void foo  (P & Val) throw ();\n    virtual void foo1 (P & Val) throw ();\n}" always "struct A {\n    virtual void foo  (P & Val) throw ();\n    virtual void foo1 (P & Val) throw ();\n}"
Line 4122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4122 always 4122
  "" always ""
Line 4124
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4124 always 4124
  "int foo() {\n    goto label;\n    while (true) {\n     bar();\n     label:\n    }\n}" always "int foo() {\n    goto label;\n    while (true) {\n     bar();\n     label:\n    }\n}"
Line 4131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4131 always 4131
  "" always ""
Line 4133
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4133 always 4133
  "int foo() {\n    goto label;\n    do {\n     bar();\n     label:\n    } while (true);\n}" always "int foo() {\n    goto label;\n    do {\n     bar();\n     label:\n    } while (true);\n}"
Line 4140
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4140 always 4140
  "" always ""
Line 4142
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4142 always 4142
  "int foo() {\n    goto label;\n    for (;;) {\n     bar();\n     label:\n    }\n}" always "int foo() {\n    goto label;\n    for (;;) {\n     bar();\n     label:\n    }\n}"
Line 4149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4149 always 4149
  "" always ""
Line 4152
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4152 always 4152
  "int foo() {\n\n    return 0;\n\n    return 1;\n}" always "int foo() {\n\n    return 0;\n\n    return 1;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4158
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4158 always 4158
  "" always ""
Line 4159
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4159 always 4159
  "int foo() {\n\n    return 0;\n\n    return 1;\n}" always "int foo() {\n\n    return 0;\n\n    return 1;\n}"
  nullptr always 0
  false always 0
  true always 1
  false always 0
Line 4165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4165 always 4165
  "[test.cpp:5]: (style, inconclusive) Consecutive return, break, continue, goto or throw statements are unnecessary.\n" always "[test.cpp:5]: (style, inconclusive) Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
Line 4168
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4168 always 4168
  "int f() {\n    return g([](int x){(void)x+1; return x;});\n}" always "int f() {\n    return g([](int x){(void)x+1; return x;});\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4175 always 4175
  "" always ""
Line 4178
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4178 always 4178
  "template <>\ninline uint16_t htobe(uint16_t value) {\n     return ( __extension__ ({\n         register unsigned short int __v, __x = (unsigned short int) (value);\n         if (__builtin_constant_p (__x))\n             __v = ((unsigned short int) ((((__x) >> 8) & 0xff) | (((__x) & 0xff) << 8)));\n         else\n             __asm__ (\"rorw $8, %w0\" : \"=r\" (__v) : \"0\" (__x) : \"cc\");\n         (void)__v;\n     }));\n}" always "template <>\ninline uint16_t htobe(uint16_t value) {\n     return ( __extension__ ({\n         register unsigned short int __v, __x = (unsigned short int) (value);\n         if (__builtin_constant_p (__x))\n             __v = ((unsigned short int) ((((__x) >> 8) & 0xff) | (((__x) & 0xff) << 8)));\n         else\n             __asm__ (\"rorw $8, %w0\" : \"=r\" (__v) : \"0\" (__x) : \"cc\");\n         (void)__v;\n     }));\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4189 always 4189
  "" always ""
Line 4192
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4192 always 4192
  "static std::function< int ( int, int ) > GetFunctor() {\n    return [](int a_, int b_) -> int {\n        int sum = a_ + b_;\n        return sum;\n    };\n}" always "static std::function< int ( int, int ) > GetFunctor() {\n    return [](int a_, int b_) -> int {\n        int sum = a_ + b_;\n        return sum;\n    };\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4198 always 4198
  "" always ""
Line 4201
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4201 always 4201
  "struct per_state_info {\n    uint64_t enter, exit;\n    uint64_t events;\n    per_state_info() : enter(0), exit(0), events(0) {}\n};" always "struct per_state_info {\n    uint64_t enter, exit;\n    uint64_t events;\n    per_state_info() : enter(0), exit(0), events(0) {}\n};"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4206 always 4206
  "" always ""
Line 4209
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4209 always 4209
  "void foo() {\n    (beat < 100) ? (void)0 : exit(0);\n    bar();\n}" always "void foo() {\n    (beat < 100) ? (void)0 : exit(0);\n    bar();\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
  false always 0
  & {lifetime[Address]=(settings),!0}
Line 4213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4213 always 4213
  "" always ""
Line 4215
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4215 always 4215
  "void foo() {\n    (beat < 100) ? exit(0) : (void)0;\n    bar();\n}" always "void foo() {\n    (beat < 100) ? exit(0) : (void)0;\n    bar();\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
  false always 0
  & {lifetime[Address]=(settings),!0}
Line 4219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4219 always 4219
  "" always ""
Line 4223
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4223 always 4223
  "void foo() {\n    (beat < 100) ? (void)0 : throw(0);\n    bar();\n}" always "void foo() {\n    (beat < 100) ? (void)0 : throw(0);\n    bar();\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
  false always 0
  & {lifetime[Address]=(settings),!0}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4223 always 4223
  false always 0
Line 4229
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4229 always 4229
  "int foo() {\n    exit(0);\n    return 1;\n}" always "int foo() {\n    exit(0);\n    return 1;\n}"
Line 4233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4233 always 4233
  "" always ""
Line 4235
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4235 always 4235
  "void f() {\n    enum : uint8_t { A, B } var = A;\n}\n" always "void f() {\n    enum : uint8_t { A, B } var = A;\n}\n"
Line 4238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4238 always 4238
  "" always ""
Line 4243
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4243 always 4243
  "void foo() {\n    switch(a) {\n        case A&&B:\n            foo();\n        case (A||B):\n            foo();\n        case A||B:\n            foo();\n    }\n}" always "void foo() {\n    switch(a) {\n        case A&&B:\n            foo();\n        case (A||B):\n            foo();\n        case A||B:\n            foo();\n    }\n}"
Line 4253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4253 always 4253
  "[test.cpp:3]: (warning, inconclusive) Found suspicious case label in switch(). Operator '&&' probably doesn't work as intended.\n[test.cpp:5]: (warning, inconclusive) Found suspicious case label in switch(). Operator '||' probably doesn't work as intended.\n[test.cpp:7]: (warning, inconclusive) Found suspicious case label in switch(). Operator '||' probably doesn't work as intended.\n" always "[test.cpp:3]: (warning, inconclusive) Found suspicious case label in switch(). Operator '&&' probably doesn't work as intended.\n[test.cpp:5]: (warning, inconclusive) Found suspicious case label in switch(). Operator '||' probably doesn't work as intended.\n[test.cpp:7]: (warning, inconclusive) Found suspicious case label in switch(). Operator '||' probably doesn't work as intended.\n"
Line 4257
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4257 always 4257
  "void foo() {\n    switch(a) {\n        case 1:\n            a=A&&B;\n    }\n}" always "void foo() {\n    switch(a) {\n        case 1:\n            a=A&&B;\n    }\n}"
Line 4263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4263 always 4263
  "" always ""
Line 4266
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4266 always 4266
  "void foo() {\n    switch(a) {\n        case A&&B?B:A:\n            foo();\n    }\n}" always "void foo() {\n    switch(a) {\n        case A&&B?B:A:\n            foo();\n    }\n}"
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4266 always 4266
  false always 0
Line 4276
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4276 always 4276
  "void foo(int c) {\n    if (x) c == 0;\n}" always "void foo(int c) {\n    if (x) c == 0;\n}"
Line 4279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4279 always 4279
  "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n"
Line 4281
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4281 always 4281
  "void foo(const int* c) {\n    if (x) *c == 0;\n}" always "void foo(const int* c) {\n    if (x) *c == 0;\n}"
Line 4284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4284 always 4284
  "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n"
Line 4287
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4287 always 4287
  "void foo(int c) {\n    if (c == 1) {\n        c = 0;\n    }\n}" always "void foo(int c) {\n    if (c == 1) {\n        c = 0;\n    }\n}"
Line 4292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4292 always 4292
  "" always ""
Line 4294
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4294 always 4294
  "void foo(int c) {\n    c == 1;\n}" always "void foo(int c) {\n    c == 1;\n}"
Line 4297
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4297 always 4297
  "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n"
Line 4299
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4299 always 4299
  "void foo(int c) {\n    for (int i = 0; i == 10; i ++) {\n        a ++;\n    }\n}" always "void foo(int c) {\n    for (int i = 0; i == 10; i ++) {\n        a ++;\n    }\n}"
Line 4304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4304 always 4304
  "" always ""
Line 4306
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4306 always 4306
  "void foo(int c) {\n    for (i == 0; i < 10; i ++) {\n        c ++;\n    }\n}" always "void foo(int c) {\n    for (i == 0; i < 10; i ++) {\n        c ++;\n    }\n}"
Line 4311
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4311 always 4311
  "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n"
Line 4313
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4313 always 4313
  "void foo(int c) {\n    for (i == 1; i < 10; i ++) {\n        c ++;\n    }\n}" always "void foo(int c) {\n    for (i == 1; i < 10; i ++) {\n        c ++;\n    }\n}"
Line 4318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4318 always 4318
  "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n"
Line 4320
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4320 always 4320
  "void foo(int c) {\n    for (i == 2; i < 10; i ++) {\n        c ++;\n    }\n}" always "void foo(int c) {\n    for (i == 2; i < 10; i ++) {\n        c ++;\n    }\n}"
Line 4325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4325 always 4325
  "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n"
Line 4327
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4327 always 4327
  "void foo(int c) {\n    for (int i = 0; i < 10; i == c) {\n        c ++;\n    }\n}" always "void foo(int c) {\n    for (int i = 0; i < 10; i == c) {\n        c ++;\n    }\n}"
Line 4332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4332 always 4332
  "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n"
Line 4334
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4334 always 4334
  "void foo(int c) {\n    for (; running == 1;) {\n        c ++;\n    }\n}" always "void foo(int c) {\n    for (; running == 1;) {\n        c ++;\n    }\n}"
Line 4339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4339 always 4339
  "" always ""
Line 4341
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4341 always 4341
  "void foo(int c) {\n    printf(\"%i\", ({x==0;}));\n}" always "void foo(int c) {\n    printf(\"%i\", ({x==0;}));\n}"
Line 4344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4344 always 4344
  "" always ""
Line 4346
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4346 always 4346
  "void foo(int arg) {\n    printf(\"%i\", ({int x = do_something(); x == 0;}));\n}" always "void foo(int arg) {\n    printf(\"%i\", ({int x = do_something(); x == 0;}));\n}"
Line 4349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4349 always 4349
  "" always ""
Line 4351
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4351 always 4351
  "void foo(int x) {\n    printf(\"%i\", ({x == 0; x > 0 ? 10 : 20}));\n}" always "void foo(int x) {\n    printf(\"%i\", ({x == 0; x > 0 ? 10 : 20}));\n}"
Line 4354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4354 always 4354
  "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious equality comparison. Did you intend to assign a value instead?\n"
Line 4356
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4356 always 4356
  "void foo(int x) {\n    for (const Token* end = tok->link(); tok != end; tok = (tok == end) ? end : tok->next()) {\n        x++;\n    }\n}" always "void foo(int x) {\n    for (const Token* end = tok->link(); tok != end; tok = (tok == end) ? end : tok->next()) {\n        x++;\n    }\n}"
Line 4361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4361 always 4361
  "" always ""
Line 4363
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4363 always 4363
  "void foo(int x) {\n    for (int i = (x == 0) ? 0 : 5; i < 10; i ++) {\n        x++;\n    }\n}" always "void foo(int x) {\n    for (int i = (x == 0) ? 0 : 5; i < 10; i ++) {\n        x++;\n    }\n}"
Line 4368
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4368 always 4368
  "" always ""
Line 4370
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4370 always 4370
  "void foo(int x) {\n    for (int i = 0; i < 10; i += (x == 5) ? 1 : 2) {\n        x++;\n    }\n}" always "void foo(int x) {\n    for (int i = 0; i < 10; i += (x == 5) ? 1 : 2) {\n        x++;\n    }\n}"
Line 4375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4375 always 4375
  "" always ""
Line 4379
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4379 always 4379
  "int g() { return 1; }\nvoid f() {\n    +g();\n    -g();\n}\n" always "int g() { return 1; }\nvoid f() {\n    +g();\n    -g();\n}\n"
Line 4384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4384 always 4384
  "[test.cpp:3]: (warning, inconclusive) Found suspicious operator '+', result is not used.\n[test.cpp:4]: (warning, inconclusive) Found suspicious operator '-', result is not used.\n" always "[test.cpp:3]: (warning, inconclusive) Found suspicious operator '+', result is not used.\n[test.cpp:4]: (warning, inconclusive) Found suspicious operator '-', result is not used.\n"
Line 4388
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4388 always 4388
  "void f(int i) {\n    +i;\n    -i;\n}\n" always "void f(int i) {\n    +i;\n    -i;\n}\n"
Line 4392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4392 always 4392
  "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '+', result is not used.\n[test.cpp:3]: (warning, inconclusive) Found suspicious operator '-', result is not used.\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '+', result is not used.\n[test.cpp:3]: (warning, inconclusive) Found suspicious operator '-', result is not used.\n"
Line 4398
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4398 always 4398
  "void foo()\n{\n    int x = 1;\n    x = x;\n    return 0;\n}" always "void foo()\n{\n    int x = 1;\n    x = x;\n    return 0;\n}"
Line 4404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4404 always 4404
  "[test.cpp:4]: (warning) Redundant assignment of 'x' to itself.\n" always "[test.cpp:4]: (warning) Redundant assignment of 'x' to itself.\n"
Line 4406
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4406 always 4406
  "void foo()\n{\n    int x = x;\n}" always "void foo()\n{\n    int x = x;\n}"
Line 4410
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4410 always 4410
  "[test.cpp:3]: (warning) Redundant assignment of 'x' to itself.\n" always "[test.cpp:3]: (warning) Redundant assignment of 'x' to itself.\n"
Line 4412
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4412 always 4412
  "struct A { int b; };\nvoid foo(A* a1, A* a2) {\n    a1->b = a1->b;\n}" always "struct A { int b; };\nvoid foo(A* a1, A* a2) {\n    a1->b = a1->b;\n}"
Line 4416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4416 always 4416
  "[test.cpp:3]: (warning) Redundant assignment of 'a1->b' to itself.\n" always "[test.cpp:3]: (warning) Redundant assignment of 'a1->b' to itself.\n"
Line 4418
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4418 always 4418
  "int x;\nvoid f()\n{\n    x = x = 3;\n}" always "int x;\nvoid f()\n{\n    x = x = 3;\n}"
Line 4423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4423 always 4423
  "[test.cpp:4]: (warning) Redundant assignment of 'x' to itself.\n" always "[test.cpp:4]: (warning) Redundant assignment of 'x' to itself.\n"
Line 4426
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4426 always 4426
  "void Foo::myFunc( int a )\n{\n    if (a == 42)\n    a = a;\n}" always "void Foo::myFunc( int a )\n{\n    if (a == 42)\n    a = a;\n}"
Line 4432
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4432 always 4432
  "void foo()\n{\n    int x = 1;\n    x = x + 1;\n    return 0;\n}" always "void foo()\n{\n    int x = 1;\n    x = x + 1;\n    return 0;\n}"
Line 4438
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4438 always 4438
  "" always ""
Line 4440
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4440 always 4440
  "void foo()\n{\n        int *x = getx();\n        *x = x;\n}" always "void foo()\n{\n        int *x = getx();\n        *x = x;\n}"
Line 4445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4445 always 4445
  "" always ""
Line 4447
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4447 always 4447
  "void foo() {\n    BAR *x = getx();\n    x = x;\n}" always "void foo() {\n    BAR *x = getx();\n    x = x;\n}"
Line 4451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4451 always 4451
  "[test.cpp:3]: (warning) Redundant assignment of 'x' to itself.\n" always "[test.cpp:3]: (warning) Redundant assignment of 'x' to itself.\n"
Line 4454
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4454 always 4454
  "void foo()\n{\n    Fred fred; fred = fred;\n}" always "void foo()\n{\n    Fred fred; fred = fred;\n}"
Line 4458
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4458 always 4458
  "" always ""
Line 4460
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4460 always 4460
  "void f(int x) {\n    x = (x == 0);    func(x);\n}" always "void f(int x) {\n    x = (x == 0);    func(x);\n}"
Line 4464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4464 always 4464
  "" always ""
Line 4466
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4466 always 4466
  "void f(int x) {\n    x = (x != 0);    func(x);\n}" always "void f(int x) {\n    x = (x != 0);    func(x);\n}"
Line 4470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4470 always 4470
  "" always ""
Line 4473
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4473 always 4473
  "void foo(int x) {\n    x = x ? x : 0;\n}" always "void foo(int x) {\n    x = x ? x : 0;\n}"
Line 4476
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4476 always 4476
  "" always ""
Line 4479
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4479 always 4479
  "extern int i;\nvoid f() {\n    i = i;\n}" always "extern int i;\nvoid f() {\n    i = i;\n}"
Line 4483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4483 always 4483
  "[test.cpp:3]: (warning) Redundant assignment of 'i' to itself.\n" always "[test.cpp:3]: (warning) Redundant assignment of 'i' to itself.\n"
Line 4486
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4486 always 4486
  "class Foo {\n    int var;\n    void func();\n};\nvoid Foo::func() {\n    this->var = var;\n}" always "class Foo {\n    int var;\n    void func();\n};\nvoid Foo::func() {\n    this->var = var;\n}"
Line 4493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4493 always 4493
  "[test.cpp:6]: (warning) Redundant assignment of 'this->var' to itself.\n" always "[test.cpp:6]: (warning) Redundant assignment of 'this->var' to itself.\n"
Line 4495
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4495 always 4495
  "class Foo {\n    int var;\n    void func(int var);\n};\nvoid Foo::func(int var) {\n    this->var = var;\n}" always "class Foo {\n    int var;\n    void func(int var);\n};\nvoid Foo::func(int var) {\n    this->var = var;\n}"
Line 4502
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4502 always 4502
  "" always ""
Line 4505
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4505 always 4505
  "struct callbacks {\n    void (*s)(void);\n};\nvoid something(void) {}\nvoid f() {\n    struct callbacks ops = { .s = ops.s };\n}" always "struct callbacks {\n    void (*s)(void);\n};\nvoid something(void) {}\nvoid f() {\n    struct callbacks ops = { .s = ops.s };\n}"
Line 4512
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4512 always 4512
  "[test.cpp:6]: (warning) Redundant assignment of 'something' to itself.\n" always "[test.cpp:6]: (warning) Redundant assignment of 'something' to itself.\n"
  "" always ""
Line 4514
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4514 always 4514
  "class V\n{\npublic:\n    V()\n    {\n        x = y = z = 0.0;\n    }\n    V( double x, const double y_, const double &z_)\n    {\n        x = x; y = y; z = z;\n    }\n    double x, y, z;\n};" always "class V\n{\npublic:\n    V()\n    {\n        x = y = z = 0.0;\n    }\n    V( double x, const double y_, const double &z_)\n    {\n        x = x; y = y; z = z;\n    }\n    double x, y, z;\n};"
Line 4527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4527 always 4527
  "[test.cpp:10]: (warning) Redundant assignment of 'x' to itself.\n[test.cpp:10]: (warning) Redundant assignment of 'y' to itself.\n[test.cpp:10]: (warning) Redundant assignment of 'z' to itself.\n" always "[test.cpp:10]: (warning) Redundant assignment of 'x' to itself.\n[test.cpp:10]: (warning) Redundant assignment of 'y' to itself.\n[test.cpp:10]: (warning) Redundant assignment of 'z' to itself.\n"
Line 4531
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4531 always 4531
  "void f(int i) { i = !!i; }" always "void f(int i) { i = !!i; }"
Line 4532
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4532 always 4532
  "" always ""
Line 4534
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4534 always 4534
  "void foo() {\n    int x = 1;\n    int &ref = x;\n    ref = x;\n}\n" always "void foo() {\n    int x = 1;\n    int &ref = x;\n    ref = x;\n}\n"
Line 4539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4539 always 4539
  "[test.cpp:4]: (warning) Redundant assignment of 'ref' to itself.\n" always "[test.cpp:4]: (warning) Redundant assignment of 'ref' to itself.\n"
Line 4541
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4541 always 4541
  "class Foo {\n    int i{};\n    void modify();\n    void method() {\n        Foo copy = *this;\n        modify();\n        *this = copy;\n    }\n};\n" always "class Foo {\n    int i{};\n    void modify();\n    void method() {\n        Foo copy = *this;\n        modify();\n        *this = copy;\n    }\n};\n"
Line 4550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4550 always 4550
  "" always ""
Line 4554
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4554 always 4554
  "class Lock\n{\npublic:\n    Lock(int i)\n    {\n        std::cout << \"Lock \" << i << std::endl;\n    }\n    ~Lock()\n    {\n        std::cout << \"~Lock\" << std::endl;\n    }\n};\nint main()\n{\n    Lock(123);\n    std::cout << \"hello\" << std::endl;\n    return 0;\n}" always "class Lock\n{\npublic:\n    Lock(int i)\n    {\n        std::cout << \"Lock \" << i << std::endl;\n    }\n    ~Lock()\n    {\n        std::cout << \"~Lock\" << std::endl;\n    }\n};\nint main()\n{\n    Lock(123);\n    std::cout << \"hello\" << std::endl;\n    return 0;\n}"
Line 4572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4572 always 4572
  "[test.cpp:15]: (style) Instance of 'Lock' object is destroyed immediately.\n" always "[test.cpp:15]: (style) Instance of 'Lock' object is destroyed immediately.\n"
Line 4576
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4576 always 4576
  "struct A{\n  enum {\n    b = 300\n  };\n};\nconst int DFLT_TIMEOUT = A::b % 1000000 ;\n" always "struct A{\n  enum {\n    b = 300\n  };\n};\nconst int DFLT_TIMEOUT = A::b % 1000000 ;\n"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4582
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4582 always 4582
  "" always ""
Line 4586
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4586 always 4586
  "int main ( )\n{\n    CouldBeFunction ( 123 ) ;\n    return 0 ;\n}" always "int main ( )\n{\n    CouldBeFunction ( 123 ) ;\n    return 0 ;\n}"
Line 4591
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4591 always 4591
  "" always ""
Line 4595
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4595 always 4595
  "struct error {\n    error() {}\n};\n\nclass parser {\npublic:\n    void error() const {}\n\n    void foo() const {\n        error();\n        do_something();\n    }\n};" always "struct error {\n    error() {}\n};\n\nclass parser {\npublic:\n    void error() const {}\n\n    void foo() const {\n        error();\n        do_something();\n    }\n};"
Line 4608
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4608 always 4608
  "" always ""
Line 4612
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4612 always 4612
  "class NotAFunction ;\nint function ( )\n{\n    NotAFunction ( 123 );\n    return 0 ;\n}" always "class NotAFunction ;\nint function ( )\n{\n    NotAFunction ( 123 );\n    return 0 ;\n}"
Line 4618
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4618 always 4618
  "[test.cpp:4]: (style) Instance of 'NotAFunction' object is destroyed immediately.\n" always "[test.cpp:4]: (style) Instance of 'NotAFunction' object is destroyed immediately.\n"
Line 4622
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4622 always 4622
  "struct NotAClass;\nbool func ( )\n{\n    NotAClass ( 123 ) ;\n    return true ;\n}" always "struct NotAClass;\nbool func ( )\n{\n    NotAClass ( 123 ) ;\n    return true ;\n}"
Line 4628
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4628 always 4628
  "[test.cpp:4]: (style) Instance of 'NotAClass' object is destroyed immediately.\n" always "[test.cpp:4]: (style) Instance of 'NotAClass' object is destroyed immediately.\n"
Line 4632
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4632 always 4632
  "bool func( int a , int b , int c )\n{\n    if ( a > b ) return c == a ;\n    return b == a ;\n}" always "bool func( int a , int b , int c )\n{\n    if ( a > b ) return c == a ;\n    return b == a ;\n}"
Line 4637
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4637 always 4637
  "" always ""
Line 4641
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4641 always 4641
  "class Something : public SomethingElse\n{\npublic:\n~Something ( ) ;\nSomething ( ) ;\n}" always "class Something : public SomethingElse\n{\npublic:\n~Something ( ) ;\nSomething ( ) ;\n}"
Line 4647
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4647 always 4647
  "" always ""
Line 4651
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4651 always 4651
  "class IncrementFunctor\n{\npublic:\n    void operator()(int &i)\n    {\n        ++i;\n    }\n};\n\nint main()\n{\n    int a = 1;\n    IncrementFunctor()(a);\n    return a;\n}" always "class IncrementFunctor\n{\npublic:\n    void operator()(int &i)\n    {\n        ++i;\n    }\n};\n\nint main()\n{\n    int a = 1;\n    IncrementFunctor()(a);\n    return a;\n}"
Line 4666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4666 always 4666
  "" always ""
Line 4670
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4670 always 4670
  "void f() {\n    class Foo {\n        Foo() { }\n        Foo(int a) { }\n        Foo(int a, int b) { }\n    };\n    Foo();\n    do_something();\n}" always "void f() {\n    class Foo {\n        Foo() { }\n        Foo(int a) { }\n        Foo(int a, int b) { }\n    };\n    Foo();\n    do_something();\n}"
Line 4679
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4679 always 4679
  "[test.cpp:7]: (style) Instance of 'Foo' object is destroyed immediately.\n" always "[test.cpp:7]: (style) Instance of 'Foo' object is destroyed immediately.\n"
Line 4683
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4683 always 4683
  "struct Foo {\n    void bar() {\n    }\n};\n\nvoid fn() {\n    Foo().bar();\n}" always "struct Foo {\n    void bar() {\n    }\n};\n\nvoid fn() {\n    Foo().bar();\n}"
Line 4691
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4691 always 4691
  "" always ""
Line 4696
  93 always 93
  = always "struct cb_watch_bool {\n    int a;\n};\n\nvoid f()\n{\n    cb_watch_bool();\n    do_something();\n}\n"
  "struct cb_watch_bool {\n    int a;\n};\n\nvoid f()\n{\n    cb_watch_bool();\n    do_something();\n}\n" always "struct cb_watch_bool {\n    int a;\n};\n\nvoid f()\n{\n    cb_watch_bool();\n    do_something();\n}\n"
Line 4706
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4706 always 4706
  code always "struct cb_watch_bool {\n    int a;\n};\n\nvoid f()\n{\n    cb_watch_bool();\n    do_something();\n}\n"
  "test.cpp" always "test.cpp"
Line 4707
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4707 always 4707
  "[test.cpp:7]: (style) Instance of 'cb_watch_bool' object is destroyed immediately.\n" always "[test.cpp:7]: (style) Instance of 'cb_watch_bool' object is destroyed immediately.\n"
Line 4709
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4709 always 4709
  code always "struct cb_watch_bool {\n    int a;\n};\n\nvoid f()\n{\n    cb_watch_bool();\n    do_something();\n}\n"
  "test.c" always "test.c"
Line 4710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4710 always 4710
  "" always ""
Line 4713
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4713 always 4713
  "struct stat { int a; int b; };\nvoid stat(const char *fn, struct stat *);\n\nvoid foo() {\n    stat(\"file.txt\", &st);\n    do_something();\n}" always "struct stat { int a; int b; };\nvoid stat(const char *fn, struct stat *);\n\nvoid foo() {\n    stat(\"file.txt\", &st);\n    do_something();\n}"
Line 4720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4720 always 4720
  "" always ""
Line 4724
  153 always 153
  = always "class ios_base {\npublic:\n  class Init {\n  public:\n  };\n};\nclass foo {\npublic:\n  foo();\n  void Init(int);\n};\nfoo::foo() {\n  Init(0);\n  do_something();\n}\n"
  "class ios_base {\npublic:\n  class Init {\n  public:\n  };\n};\nclass foo {\npublic:\n  foo();\n  void Init(int);\n};\nfoo::foo() {\n  Init(0);\n  do_something();\n}\n" always "class ios_base {\npublic:\n  class Init {\n  public:\n  };\n};\nclass foo {\npublic:\n  foo();\n  void Init(int);\n};\nfoo::foo() {\n  Init(0);\n  do_something();\n}\n"
Line 4740
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4740 always 4740
  code always "class ios_base {\npublic:\n  class Init {\n  public:\n  };\n};\nclass foo {\npublic:\n  foo();\n  void Init(int);\n};\nfoo::foo() {\n  Init(0);\n  do_something();\n}\n"
  "test.cpp" always "test.cpp"
Line 4741
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4741 always 4741
  "" always ""
Line 4745
  104 always 104
  = always "class Foo {\npublic:\n  Foo(char x) {\n    Foo(x, 0);\n    do_something();\n  }\n  Foo(char x, int y) { }\n};\n"
  "class Foo {\npublic:\n  Foo(char x) {\n    Foo(x, 0);\n    do_something();\n  }\n  Foo(char x, int y) { }\n};\n" always "class Foo {\npublic:\n  Foo(char x) {\n    Foo(x, 0);\n    do_something();\n  }\n  Foo(char x, int y) { }\n};\n"
Line 4753
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4753 always 4753
  code always "class Foo {\npublic:\n  Foo(char x) {\n    Foo(x, 0);\n    do_something();\n  }\n  Foo(char x, int y) { }\n};\n"
  "test.cpp" always "test.cpp"
Line 4754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4754 always 4754
  "[test.cpp:4]: (style) Instance of 'Foo' object is destroyed immediately.\n" always "[test.cpp:4]: (style) Instance of 'Foo' object is destroyed immediately.\n"
Line 4758
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4758 always 4758
  "class Foo {};\nvoid f() {\n  Foo();\n}" always "class Foo {};\nvoid f() {\n  Foo();\n}"
  "test.cpp" always "test.cpp"
Line 4762
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4762 always 4762
  "" always ""
Line 4766
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4766 always 4766
  "void f()\n{\n    struct sigaction sa;\n\n    { sigaction(SIGHUP, &sa, 0); };\n    { sigaction(SIGINT, &sa, 0); };\n}" always "void f()\n{\n    struct sigaction sa;\n\n    { sigaction(SIGHUP, &sa, 0); };\n    { sigaction(SIGINT, &sa, 0); };\n}"
Line 4773
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4773 always 4773
  "" always ""
Line 4777
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4777 always 4777
  "void f() {\n    struct AB {\n        AB(int a) { }\n    };\n\n    const AB ab[3] = { AB(0), AB(1), AB(2) };\n}" always "void f() {\n    struct AB {\n        AB(int a) { }\n    };\n\n    const AB ab[3] = { AB(0), AB(1), AB(2) };\n}"
Line 4784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4784 always 4784
  "" always ""
Line 4788
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4788 always 4788
  "int f(char c) {\n    return 10 * (c == 0) ? 1 : 2;\n}" always "int f(char c) {\n    return 10 * (c == 0) ? 1 : 2;\n}"
Line 4791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4791 always 4791
  "[test.cpp:2]: (style) Clarify calculation precedence for '*' and '?'.\n" always "[test.cpp:2]: (style) Clarify calculation precedence for '*' and '?'.\n"
Line 4793
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4793 always 4793
  "void f(char c) {\n    printf(\"%i\", 10 * (c == 0) ? 1 : 2);\n}" always "void f(char c) {\n    printf(\"%i\", 10 * (c == 0) ? 1 : 2);\n}"
Line 4796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4796 always 4796
  "[test.cpp:2]: (style) Clarify calculation precedence for '*' and '?'.\n" always "[test.cpp:2]: (style) Clarify calculation precedence for '*' and '?'.\n"
Line 4798
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4798 always 4798
  "void f() {\n    return (2*a)?b:c;\n}" always "void f() {\n    return (2*a)?b:c;\n}"
Line 4801
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4801 always 4801
  "" always ""
Line 4803
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4803 always 4803
  "void f(char c) {\n    printf(\"%i\", a + b ? 1 : 2);\n}" always "void f(char c) {\n    printf(\"%i\", a + b ? 1 : 2);\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4806
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4806 always 4806
  "[test.cpp:2]: (style) Clarify calculation precedence for '+' and '?'.\n" always "[test.cpp:2]: (style) Clarify calculation precedence for '+' and '?'.\n"
Line 4808
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4808 always 4808
  "void f() {\n    std::cout << x << y ? 2 : 3;\n}" always "void f() {\n    std::cout << x << y ? 2 : 3;\n}"
Line 4811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4811 always 4811
  "[test.cpp:2]: (style) Clarify calculation precedence for '<<' and '?'.\n" always "[test.cpp:2]: (style) Clarify calculation precedence for '<<' and '?'.\n"
Line 4813
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4813 always 4813
  "void f() {\n    int ab = a - b ? 2 : 3;\n}" always "void f() {\n    int ab = a - b ? 2 : 3;\n}"
Line 4816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4816 always 4816
  "[test.cpp:2]: (style) Clarify calculation precedence for '-' and '?'.\n" always "[test.cpp:2]: (style) Clarify calculation precedence for '-' and '?'.\n"
Line 4818
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4818 always 4818
  "void f() {\n    int ab = a | b ? 2 : 3;\n}" always "void f() {\n    int ab = a | b ? 2 : 3;\n}"
Line 4821
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4821 always 4821
  "[test.cpp:2]: (style) Clarify calculation precedence for '|' and '?'.\n" always "[test.cpp:2]: (style) Clarify calculation precedence for '|' and '?'.\n"
Line 4824
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4824 always 4824
  "int f(int x, int y) {\n    return x >> ! y ? 8 : 2;\n}" always "int f(int x, int y) {\n    return x >> ! y ? 8 : 2;\n}"
Line 4827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4827 always 4827
  "[test.cpp:2]: (style) Clarify calculation precedence for '>>' and '?'.\n" always "[test.cpp:2]: (style) Clarify calculation precedence for '>>' and '?'.\n"
Line 4829
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4829 always 4829
  "int f() {\n   return shift < sizeof(int64_t)*8 ? 1 : 2;\n}" always "int f() {\n   return shift < sizeof(int64_t)*8 ? 1 : 2;\n}"
Line 4832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4832 always 4832
  "" always ""
Line 4834
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4834 always 4834
  "void f() { a = *p ? 1 : 2; }" always "void f() { a = *p ? 1 : 2; }"
Line 4835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4835 always 4835
  "" always ""
Line 4837
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4837 always 4837
  "void f(int x) { const char *p = x & 1 ? \"1\" : \"0\"; }" always "void f(int x) { const char *p = x & 1 ? \"1\" : \"0\"; }"
Line 4838
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4838 always 4838
  "" always ""
Line 4840
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4840 always 4840
  "void foo() { x = a % b ? \"1\" : \"0\"; }" always "void foo() { x = a % b ? \"1\" : \"0\"; }"
Line 4841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4841 always 4841
  "" always ""
Line 4843
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4843 always 4843
  "void f(int x) { return x & 1 ? '1' : '0'; }" always "void f(int x) { return x & 1 ? '1' : '0'; }"
Line 4844
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4844 always 4844
  "" always ""
Line 4846
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4846 always 4846
  "void f(int x) { return x & 16 ? 1 : 0; }" always "void f(int x) { return x & 16 ? 1 : 0; }"
Line 4847
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4847 always 4847
  "" always ""
Line 4849
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4849 always 4849
  "void f(int x) { return x % 16 ? 1 : 0; }" always "void f(int x) { return x % 16 ? 1 : 0; }"
Line 4850
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4850 always 4850
  "" always ""
Line 4852
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4852 always 4852
  "enum {X,Y}; void f(int x) { return x & Y ? 1 : 0; }" always "enum {X,Y}; void f(int x) { return x & Y ? 1 : 0; }"
Line 4853
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4853 always 4853
  "" always ""
Line 4857
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4857 always 4857
  "char* f(char* c) {\n    *c++;\n    return c;\n}" always "char* f(char* c) {\n    *c++;\n    return c;\n}"
Line 4861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4861 always 4861
  "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n"
Line 4866
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4866 always 4866
  "char* f(char** c) {\n    *c[5]--;\n    return *c;\n}" always "char* f(char** c) {\n    *c[5]--;\n    return *c;\n}"
Line 4870
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4870 always 4870
  "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n"
Line 4875
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4875 always 4875
  "void f(Foo f) {\n    *f.a++;\n}" always "void f(Foo f) {\n    *f.a++;\n}"
Line 4878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4878 always 4878
  "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n"
Line 4883
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4883 always 4883
  "void f(Foo f) {\n    *f.a[5].v[3]++;\n}" always "void f(Foo f) {\n    *f.a[5].v[3]++;\n}"
Line 4886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4886 always 4886
  "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n"
Line 4891
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4891 always 4891
  "void f(Foo f) {\n    *f.a(1, 5).v[x + y]++;\n}" always "void f(Foo f) {\n    *f.a(1, 5).v[x + y]++;\n}"
Line 4894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4894 always 4894
  "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n"
Line 4899
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4899 always 4899
  "char* f(char* c) {\n    (*c)++;\n    return c;\n}" always "char* f(char* c) {\n    (*c)++;\n    return c;\n}"
Line 4903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4903 always 4903
  "" always ""
Line 4905
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4905 always 4905
  "void f(char* c) {\n    bar(*c++);\n}" always "void f(char* c) {\n    bar(*c++);\n}"
Line 4908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4908 always 4908
  "" always ""
Line 4910
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4910 always 4910
  "char*** f(char*** c) {\n    ***c++;\n    return c;\n}" always "char*** f(char*** c) {\n    ***c++;\n    return c;\n}"
Line 4914
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4914 always 4914
  "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n"
Line 4919
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4919 always 4919
  "char** f(char*** c) {\n    **c[5]--;\n    return **c;\n}" always "char** f(char*** c) {\n    **c[5]--;\n    return **c;\n}"
Line 4923
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4923 always 4923
  "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '*', result is not used.\n[test.cpp:2]: (warning) In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n"
Line 4928
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4928 always 4928
  "char*** f(char*** c) {\n    (***c)++;\n    return c;\n}" always "char*** f(char*** c) {\n    (***c)++;\n    return c;\n}"
Line 4932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4932 always 4932
  "" always ""
Line 4934
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4934 always 4934
  "void f(const int*** p) {\n    delete[] **p;\n}\n" always "void f(const int*** p) {\n    delete[] **p;\n}\n"
Line 4937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4937 always 4937
  "" always ""
Line 4939
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4939 always 4939
  "void *f(char** c) {\n    bar(**c++);\n}" always "void *f(char** c) {\n    bar(**c++);\n}"
Line 4942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4942 always 4942
  "" always ""
Line 4944
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4944 always 4944
  "void *f(char* p) {\n    for (p = path; *p++;) ;\n}" always "void *f(char* p) {\n    for (p = path; *p++;) ;\n}"
Line 4947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4947 always 4947
  "" always ""
Line 4949
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4949 always 4949
  "void f() {\n    std::array<std::array<double,3>,3> array;\n}\n" always "void f() {\n    std::array<std::array<double,3>,3> array;\n}\n"
Line 4952
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4952 always 4952
  "" always ""
Line 4956
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4956 always 4956
  "void f(int a, int &b) {\n    if (a)\n        b = 1;\n    else\n        b = 1;\n}" always "void f(int a, int &b) {\n    if (a)\n        b = 1;\n    else\n        b = 1;\n}"
Line 4962
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4962 always 4962
  "[test.cpp:4] -> [test.cpp:2]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" always "[test.cpp:4] -> [test.cpp:2]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n"
Line 4964
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4964 always 4964
  "void f(int a, int &b) {\n    if (a) {\n        if (a == 1)\n            b = 2;\n        else\n            b = 2;\n    } else\n        b = 1;\n}" always "void f(int a, int &b) {\n    if (a) {\n        if (a == 1)\n            b = 2;\n        else\n            b = 2;\n    } else\n        b = 1;\n}"
Line 4973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4973 always 4973
  "[test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" always "[test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n"
Line 4975
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4975 always 4975
  "void f(int a, int &b) {\n    if (a == 1)\n        b = 1;\n    else {\n        if (a)\n            b = 2;\n        else\n            b = 2;\n    }\n}" always "void f(int a, int &b) {\n    if (a == 1)\n        b = 1;\n    else {\n        if (a)\n            b = 2;\n        else\n            b = 2;\n    }\n}"
Line 4985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4985 always 4985
  "[test.cpp:7] -> [test.cpp:5]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" always "[test.cpp:7] -> [test.cpp:5]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n"
Line 4987
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4987 always 4987
  "int f(int signed, unsigned char value) {\n    int ret;\n    if (signed)\n        ret = (signed char)value;\n    else\n        ret = (unsigned char)value;\n    return ret;\n}" always "int f(int signed, unsigned char value) {\n    int ret;\n    if (signed)\n        ret = (signed char)value;\n    else\n        ret = (unsigned char)value;\n    return ret;\n}"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 4995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4995 always 4995
  "" always ""
Line 4997
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  4997 always 4997
  "void f() {\n    if (b)\n        __asm__(\"mov ax, bx\");\n    else\n        __asm__(\"mov bx, bx\");\n}" always "void f() {\n    if (b)\n        __asm__(\"mov ax, bx\");\n    else\n        __asm__(\"mov bx, bx\");\n}"
Line 5003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5003 always 5003
  "" always ""
Line 5005
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5005 always 5005
  "void f() {\n    if (b)\n        __asm__(\"mov ax, bx\");\n    else\n        __asm__(\"mov ax, bx\");\n}" always "void f() {\n    if (b)\n        __asm__(\"mov ax, bx\");\n    else\n        __asm__(\"mov ax, bx\");\n}"
Line 5011
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5011 always 5011
  "[test.cpp:4] -> [test.cpp:2]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" always "[test.cpp:4] -> [test.cpp:2]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n"
Line 5018
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5018 always 5018
  "void f()\n{\n  if (front < 0)\n    frac = front/(front-back);\n  else\n    frac = front/(front-back);\n}" always "void f()\n{\n  if (front < 0)\n    frac = front/(front-back);\n  else\n    frac = front/(front-back);\n}"
Line 5025
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5025 always 5025
  "[test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" always "[test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n"
Line 5027
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5027 always 5027
  "void f()\n{\n  if (front < 0)\n  { frac = front/(front-back);}\n  else\n    frac = front/((front-back));\n}" always "void f()\n{\n  if (front < 0)\n  { frac = front/(front-back);}\n  else\n    frac = front/((front-back));\n}"
Line 5034
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5034 always 5034
  "[test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" always "[test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n"
Line 5037
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5037 always 5037
  "void f()\n{\n  if (front < 0)\n  {}\n  else\n  {}\n}" always "void f()\n{\n  if (front < 0)\n  {}\n  else\n  {}\n}"
Line 5044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5044 always 5044
  "" always ""
Line 5048
  "#define DOSTUFF1 ;\n#define DOSTUFF2 ;\nvoid f(int x) {\n  if (x)\n    DOSTUFF1\n  else\n    DOSTUFF2\n}" always "#define DOSTUFF1 ;\n#define DOSTUFF2 ;\nvoid f(int x) {\n  if (x)\n    DOSTUFF1\n  else\n    DOSTUFF2\n}"
Line 5056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5056 always 5056
  "" always ""
Line 5060
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5060 always 5060
  "void f(bool b, int i) {\n    int j = i;\n    if (b) {\n        x = i;\n    } else {\n        x = j;\n    }\n}" always "void f(bool b, int i) {\n    int j = i;\n    if (b) {\n        x = i;\n    } else {\n        x = j;\n    }\n}"
Line 5068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5068 always 5068
  "[test.cpp:2] -> [test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n" always "[test.cpp:2] -> [test.cpp:5] -> [test.cpp:3]: (style, inconclusive) Found duplicate branches for 'if' and 'else'.\n"
Line 5070
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5070 always 5070
  "void f(bool b, int i) {\n    int j = i;\n    i++;\n    if (b) {\n        x = i;\n    } else {\n        x = j;\n    }\n}" always "void f(bool b, int i) {\n    int j = i;\n    i++;\n    if (b) {\n        x = i;\n    } else {\n        x = j;\n    }\n}"
Line 5079
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5079 always 5079
  "" always ""
Line 5083
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5083 always 5083
  "void* f(bool b) {\n    if (b) {\n        return new A::Y(true);\n    } else {\n        return new A::Z(true);\n    }\n}" always "void* f(bool b) {\n    if (b) {\n        return new A::Y(true);\n    } else {\n        return new A::Z(true);\n    }\n}"
Line 5090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5090 always 5090
  "" always ""
Line 5094
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5094 always 5094
  "void foo(int a) {\n    if (a == a) { }\n}" always "void foo(int a) {\n    if (a == a) { }\n}"
Line 5097
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5097 always 5097
  "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" always "[test.cpp:2]: (style) Same expression on both sides of '=='.\n"
Line 5099
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5099 always 5099
  "void fun(int b) {\n    return  a && a ||\n            b == b &&\n            d > d &&\n            e < e &&\n            f ;\n}" always "void fun(int b) {\n    return  a && a ||\n            b == b &&\n            d > d &&\n            e < e &&\n            f ;\n}"
Line 5106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5106 always 5106
  "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n[test.cpp:3]: (style) Same expression on both sides of '=='.\n[test.cpp:4]: (style) Same expression on both sides of '>'.\n[test.cpp:5]: (style) Same expression on both sides of '<'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n[test.cpp:3]: (style) Same expression on both sides of '=='.\n[test.cpp:4]: (style) Same expression on both sides of '>'.\n[test.cpp:5]: (style) Same expression on both sides of '<'.\n"
Line 5111
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5111 always 5111
  "void foo() {\n    return a && a;\n}" always "void foo() {\n    return a && a;\n}"
Line 5114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5114 always 5114
  "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n"
Line 5116
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5116 always 5116
  "void foo() {\n    a = b && b;\n}" always "void foo() {\n    a = b && b;\n}"
Line 5119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5119 always 5119
  "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n"
Line 5121
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5121 always 5121
  "void foo(int b) {\n    f(a,b == b);\n}" always "void foo(int b) {\n    f(a,b == b);\n}"
Line 5124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5124 always 5124
  "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" always "[test.cpp:2]: (style) Same expression on both sides of '=='.\n"
Line 5126
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5126 always 5126
  "void foo(int b) {\n    f(b == b, a);\n}" always "void foo(int b) {\n    f(b == b, a);\n}"
Line 5129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5129 always 5129
  "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" always "[test.cpp:2]: (style) Same expression on both sides of '=='.\n"
Line 5131
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5131 always 5131
  "void foo() {\n    if (x!=2 || x!=2) {}\n}" always "void foo() {\n    if (x!=2 || x!=2) {}\n}"
Line 5134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5134 always 5134
  "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||'.\n"
Line 5136
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5136 always 5136
  "void foo(int a, int b) {\n    if ((a < b) && (b > a)) { }\n}" always "void foo(int a, int b) {\n    if ((a < b) && (b > a)) { }\n}"
Line 5139
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5139 always 5139
  "[test.cpp:2]: (style) Same expression on both sides of '&&' because 'a<b' and 'b>a' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '&&' because 'a<b' and 'b>a' represent the same value.\n"
Line 5141
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5141 always 5141
  "void foo(int a, int b) {\n    if ((a <= b) && (b >= a)) { }\n}" always "void foo(int a, int b) {\n    if ((a <= b) && (b >= a)) { }\n}"
Line 5144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5144 always 5144
  "[test.cpp:2]: (style) Same expression on both sides of '&&' because 'a<=b' and 'b>=a' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '&&' because 'a<=b' and 'b>=a' represent the same value.\n"
Line 5146
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5146 always 5146
  "void foo() {\n    if (x!=2 || y!=3 || x!=2) {}\n}" always "void foo() {\n    if (x!=2 || y!=3 || x!=2) {}\n}"
Line 5149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5149 always 5149
  "[test.cpp:2]: (style) Same expression 'x!=2' found multiple times in chain of '||' operators.\n" always "[test.cpp:2]: (style) Same expression 'x!=2' found multiple times in chain of '||' operators.\n"
Line 5151
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5151 always 5151
  "void foo() {\n    if (x!=2 && (x=y) && x!=2) {}\n}" always "void foo() {\n    if (x!=2 && (x=y) && x!=2) {}\n}"
Line 5154
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5154 always 5154
  "" always ""
Line 5156
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5156 always 5156
  "void foo() {\n    if (a && b || a && b) {}\n}" always "void foo() {\n    if (a && b || a && b) {}\n}"
Line 5159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5159 always 5159
  "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||'.\n"
Line 5161
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5161 always 5161
  "void foo() {\n    if (a && b || b && c) {}\n}" always "void foo() {\n    if (a && b || b && c) {}\n}"
Line 5164
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5164 always 5164
  "" always ""
Line 5166
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5166 always 5166
  "void foo() {\n    if (a && b | b && c) {}\n}" always "void foo() {\n    if (a && b | b && c) {}\n}"
Line 5169
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5169 always 5169
  "[test.cpp:2]: (style) Same expression on both sides of '|'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '|'.\n"
Line 5171
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5171 always 5171
  "void foo() {\n    if ((a + b) | (a + b)) {}\n}" always "void foo() {\n    if ((a + b) | (a + b)) {}\n}"
Line 5174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5174 always 5174
  "[test.cpp:2]: (style) Same expression on both sides of '|'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '|'.\n"
Line 5176
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5176 always 5176
  "void foo() {\n    if ((a | b) & (a | b)) {}\n}" always "void foo() {\n    if ((a | b) & (a | b)) {}\n}"
Line 5179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5179 always 5179
  "[test.cpp:2]: (style) Same expression on both sides of '&'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '&'.\n"
Line 5181
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5181 always 5181
  "void foo(int a, int b) {\n    if ((a | b) == (a | b)) {}\n}" always "void foo(int a, int b) {\n    if ((a | b) == (a | b)) {}\n}"
Line 5184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5184 always 5184
  "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" always "[test.cpp:2]: (style) Same expression on both sides of '=='.\n"
Line 5186
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5186 always 5186
  "void foo() {\n    if (a1[a2[c & 0xff] & 0xff]) {}\n}" always "void foo() {\n    if (a1[a2[c & 0xff] & 0xff]) {}\n}"
Line 5189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5189 always 5189
  "" always ""
Line 5191
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5191 always 5191
  "void d(const char f, int o, int v)\n{\n     if (((f=='R') && (o == 1) && ((v < 2) || (v > 99))) ||\n         ((f=='R') && (o == 2) && ((v < 2) || (v > 99))) ||\n         ((f=='T') && (o == 2) && ((v < 200) || (v > 9999)))) {}\n}" always "void d(const char f, int o, int v)\n{\n     if (((f=='R') && (o == 1) && ((v < 2) || (v > 99))) ||\n         ((f=='R') && (o == 2) && ((v < 2) || (v > 99))) ||\n         ((f=='T') && (o == 2) && ((v < 200) || (v > 9999)))) {}\n}"
Line 5197
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5197 always 5197
  "" always ""
Line 5199
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5199 always 5199
  "int f(int x) { return x+x; }" always "int f(int x) { return x+x; }"
Line 5200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5200 always 5200
  "" always ""
Line 5202
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5202 always 5202
  "void f(int x) { while (x+=x) ; }" always "void f(int x) { while (x+=x) ; }"
Line 5203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5203 always 5203
  "" always ""
Line 5205
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5205 always 5205
  "void foo() {\n    if (a && b && b) {}\n}" always "void foo() {\n    if (a && b && b) {}\n}"
Line 5208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5208 always 5208
  "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '&&'.\n"
Line 5210
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5210 always 5210
  "void foo() {\n    if (a || b || b) {}\n}" always "void foo() {\n    if (a || b || b) {}\n}"
Line 5213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5213 always 5213
  "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||'.\n"
Line 5215
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5215 always 5215
  "void foo() {\n    if (a / 1000 / 1000) {}\n}" always "void foo() {\n    if (a / 1000 / 1000) {}\n}"
Line 5218
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5218 always 5218
  "" always ""
Line 5220
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5220 always 5220
  "int foo(int i) {\n    return i/i;\n}" always "int foo(int i) {\n    return i/i;\n}"
Line 5223
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5223 always 5223
  "[test.cpp:2]: (style) Same expression on both sides of '/'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '/'.\n"
Line 5225
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5225 always 5225
  "void foo() {\n    if (a << 1 << 1) {}\n}" always "void foo() {\n    if (a << 1 << 1) {}\n}"
Line 5228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5228 always 5228
  "" always ""
Line 5230
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5230 always 5230
  "int f() { return !!y; }" always "int f() { return !!y; }"
Line 5231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5231 always 5231
  "" always ""
Line 5234
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5234 always 5234
  "void f(long x) { if ((int32_t)x == (int64_t)x) {} }" always "void f(long x) { if ((int32_t)x == (int64_t)x) {} }"
  nullptr always 0
  false always 0
  false always 0
  false always 0
  false always 0
  nullptr always 0
Line 5242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5242 always 5242
  "" always ""
Line 5245
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5245 always 5245
  "void f(long x) { if (({ 1+2; }) == ({3+4;})) {} }" always "void f(long x) { if (({ 1+2; }) == ({3+4;})) {} }"
Line 5246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5246 always 5246
  "" always ""
Line 5249
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5249 always 5249
  "void foo() { UMSConfig& UMSConfig = GetUMSConfiguration(); }" always "void foo() { UMSConfig& UMSConfig = GetUMSConfiguration(); }"
Line 5250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5250 always 5250
  "[test.cpp:1]: (style) Variable 'UMSConfig' can be declared with const\n" always "[test.cpp:1]: (style) Variable 'UMSConfig' can be declared with const\n"
Line 5253
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5253 always 5253
  "void f(int x) {\n    a = x ? A | B | C\n          : A | B;\n}" always "void f(int x) {\n    a = x ? A | B | C\n          : A | B;\n}"
Line 5257
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5257 always 5257
  "" always ""
Line 5259
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5259 always 5259
  "void f(const Bar &bar) {\n    bool a = bar.isSet() && bar->isSet();\n    bool b = bar.isSet() && bar.isSet();\n}" always "void f(const Bar &bar) {\n    bool a = bar.isSet() && bar->isSet();\n    bool b = bar.isSet() && bar.isSet();\n}"
Line 5263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5263 always 5263
  "[test.cpp:3]: (style) Same expression on both sides of '&&'.\n" always "[test.cpp:3]: (style) Same expression on both sides of '&&'.\n"
Line 5266
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5266 always 5266
  "void foo(int a, int b) {\n    if ((b + a) | (a + b)) {}\n}" always "void foo(int a, int b) {\n    if ((b + a) | (a + b)) {}\n}"
Line 5269
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5269 always 5269
  "[test.cpp:2]: (style) Same expression on both sides of '|' because 'b+a' and 'a+b' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '|' because 'b+a' and 'a+b' represent the same value.\n"
Line 5271
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5271 always 5271
  "void foo(const std::string& a, const std::string& b) {\n  return a.find(b+\"&\") || a.find(\"&\"+b);\n}" always "void foo(const std::string& a, const std::string& b) {\n  return a.find(b+\"&\") || a.find(\"&\"+b);\n}"
Line 5274
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5274 always 5274
  "" always ""
Line 5276
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5276 always 5276
  "void foo(int a, int b) {\n    if ((b > a) | (a > b)) {}\n}" always "void foo(int a, int b) {\n    if ((b > a) | (a > b)) {}\n}"
Line 5279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5279 always 5279
  "" always ""
Line 5281
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5281 always 5281
  "void foo(double a, double b) {\n    if ((b + a) > (a + b)) {}\n}" always "void foo(double a, double b) {\n    if ((b + a) > (a + b)) {}\n}"
Line 5284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5284 always 5284
  "[test.cpp:2]: (style) The comparison 'b+a > a+b' is always false because 'b+a' and 'a+b' represent the same value.\n" always "[test.cpp:2]: (style) The comparison 'b+a > a+b' is always false because 'b+a' and 'a+b' represent the same value.\n"
Line 5286
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5286 always 5286
  "void f(int x) {\n    if ((x == 1) && (x == 0x00000001))\n        a++;\n}" always "void f(int x) {\n    if ((x == 1) && (x == 0x00000001))\n        a++;\n}"
Line 5290
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5290 always 5290
  "[test.cpp:2]: (style) Same expression on both sides of '&&' because 'x==1' and 'x==0x00000001' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '&&' because 'x==1' and 'x==0x00000001' represent the same value.\n"
Line 5292
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5292 always 5292
  "void f() {\n    enum { Four = 4 };\n    if (Four == 4) {}}" always "void f() {\n    enum { Four = 4 };\n    if (Four == 4) {}}"
  nullptr always 0
  false always 0
  true always 1
  false always 0
Line 5296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5296 always 5296
  "" always ""
Line 5298
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5298 always 5298
  "void f() {\n    enum { Four = 4 };\n    static_assert(Four == 4, \"\");\n}" always "void f() {\n    enum { Four = 4 };\n    static_assert(Four == 4, \"\");\n}"
Line 5302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5302 always 5302
  "" always ""
Line 5304
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5304 always 5304
  "void f() {\n    enum { Four = 4 };\n    static_assert(4 == Four, \"\");\n}" always "void f() {\n    enum { Four = 4 };\n    static_assert(4 == Four, \"\");\n}"
Line 5308
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5308 always 5308
  "" always ""
Line 5310
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5310 always 5310
  "void f() {\n    enum { FourInEnumOne = 4 };\n    enum { FourInEnumTwo = 4 };\n    if (FourInEnumOne == FourInEnumTwo) {}\n}" always "void f() {\n    enum { FourInEnumOne = 4 };\n    enum { FourInEnumTwo = 4 };\n    if (FourInEnumOne == FourInEnumTwo) {}\n}"
  nullptr always 0
  false always 0
  true always 1
  false always 0
Line 5315
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5315 always 5315
  "" always ""
Line 5317
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5317 always 5317
  "void f() {\n    enum { FourInEnumOne = 4 };\n    enum { FourInEnumTwo = 4 };\n    static_assert(FourInEnumOne == FourInEnumTwo, \"\");\n}" always "void f() {\n    enum { FourInEnumOne = 4 };\n    enum { FourInEnumTwo = 4 };\n    static_assert(FourInEnumOne == FourInEnumTwo, \"\");\n}"
Line 5322
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5322 always 5322
  "" always ""
Line 5324
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5324 always 5324
  "void foo(int a, int b) {\n    if (sizeof(a) == sizeof(a)) { }\n    if (sizeof(a) == sizeof(b)) { }\n}" always "void foo(int a, int b) {\n    if (sizeof(a) == sizeof(a)) { }\n    if (sizeof(a) == sizeof(b)) { }\n}"
Line 5328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5328 always 5328
  "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" always "[test.cpp:2]: (style) Same expression on both sides of '=='.\n"
Line 5330
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5330 always 5330
  "float bar(int) __attribute__((pure));\nchar foo(int) __attribute__((pure));\nint test(int a, int b) {\n    if (bar(a) == bar(a)) { }\n    if (unknown(a) == unknown(a)) { }\n    if (foo(a) == foo(a)) { }\n}" always "float bar(int) __attribute__((pure));\nchar foo(int) __attribute__((pure));\nint test(int a, int b) {\n    if (bar(a) == bar(a)) { }\n    if (unknown(a) == unknown(a)) { }\n    if (foo(a) == foo(a)) { }\n}"
Line 5337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5337 always 5337
  "[test.cpp:6]: (style) Same expression on both sides of '=='.\n" always "[test.cpp:6]: (style) Same expression on both sides of '=='.\n"
Line 5341
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5341 always 5341
  "int f(long double ldbl, double dbl, float flt) {\n    if (ldbl != ldbl) have_nan = 1;\n    if (!(dbl == dbl)) have_nan = 1;\n    if (flt != flt) have_nan = 1;\n    return have_nan;\n}" always "int f(long double ldbl, double dbl, float flt) {\n    if (ldbl != ldbl) have_nan = 1;\n    if (!(dbl == dbl)) have_nan = 1;\n    if (flt != flt) have_nan = 1;\n    return have_nan;\n}"
Line 5347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5347 always 5347
  "" always ""
Line 5349
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5349 always 5349
  "float f(float x) { return x-x; }" always "float f(float x) { return x-x; }"
Line 5350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5350 always 5350
  "" always ""
Line 5352
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5352 always 5352
  "float f(float x) { return (X double)x == (X double)x; }" always "float f(float x) { return (X double)x == (X double)x; }"
  nullptr always 0
  false always 0
  false always 0
  false always 0
Line 5353
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5353 always 5353
  "" always ""
Line 5355
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5355 always 5355
  "struct X { float f; };\nfloat f(struct X x) { return x.f == x.f; }" always "struct X { float f; };\nfloat f(struct X x) { return x.f == x.f; }"
Line 5357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5357 always 5357
  "" always ""
Line 5359
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5359 always 5359
  "struct X { int i; };\nint f(struct X x) { return x.i == x.i; }" always "struct X { int i; };\nint f(struct X x) { return x.i == x.i; }"
Line 5361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5361 always 5361
  "[test.cpp:2]: (style) Same expression on both sides of '=='.\n" always "[test.cpp:2]: (style) Same expression on both sides of '=='.\n"
Line 5364
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5364 always 5364
  "int f() { return x==x; }" always "int f() { return x==x; }"
Line 5365
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5365 always 5365
  "" always ""
Line 5370
  126 always 126
  = always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrcmp\">\n    <pure/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrcmp\">\n    <pure/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrcmp\">\n    <pure/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
Line 5379
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrcmp\">\n    <pure/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
  sizeof always 126
  ( always 126
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrcmp\">\n    <pure/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
Line 5382
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5382 always 5382
  "void foo() {\n    if (x() || x()) {}\n}" always "void foo() {\n    if (x() || x()) {}\n}"
Line 5385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5385 always 5385
  "" always ""
Line 5387
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5387 always 5387
  "struct A {\n  void foo() const;\n  bool bar() const;\n};\nvoid A::foo() const {\n    if (bar() && bar()) {}\n}" always "struct A {\n  void foo() const;\n  bool bar() const;\n};\nvoid A::foo() const {\n    if (bar() && bar()) {}\n}"
Line 5394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5394 always 5394
  "[test.cpp:6]: (style) Same expression on both sides of '&&'.\n" always "[test.cpp:6]: (style) Same expression on both sides of '&&'.\n"
Line 5396
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5396 always 5396
  "struct A {\n  void foo();\n  bool bar();\n  bool bar() const;\n};\nvoid A::foo() {\n    if (bar() && bar()) {}\n}" always "struct A {\n  void foo();\n  bool bar();\n  bool bar() const;\n};\nvoid A::foo() {\n    if (bar() && bar()) {}\n}"
Line 5404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5404 always 5404
  "" always ""
Line 5406
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5406 always 5406
  "class B {\n    void bar(int i);\n};\nclass A {\n    void bar(int i) const;\n};\nvoid foo() {\n    B b;\n    A a;\n    if (b.bar(1) && b.bar(1)) {}\n    if (a.bar(1) && a.bar(1)) {}\n}" always "class B {\n    void bar(int i);\n};\nclass A {\n    void bar(int i) const;\n};\nvoid foo() {\n    B b;\n    A a;\n    if (b.bar(1) && b.bar(1)) {}\n    if (a.bar(1) && a.bar(1)) {}\n}"
Line 5418
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5418 always 5418
  "[test.cpp:11]: (style) Same expression on both sides of '&&'.\n" always "[test.cpp:11]: (style) Same expression on both sides of '&&'.\n"
Line 5420
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5420 always 5420
  "class D { void strcmp(); };\nvoid foo() {\n    D d;\n    if (d.strcmp() && d.strcmp()) {}\n}" always "class D { void strcmp(); };\nvoid foo() {\n    D d;\n    if (d.strcmp() && d.strcmp()) {}\n}"
Line 5425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5425 always 5425
  "" always ""
Line 5427
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5427 always 5427
  "void foo() {\n    if ((mystrcmp(a, b) == 0) || (mystrcmp(a, b) == 0)) {}\n}" always "void foo() {\n    if ((mystrcmp(a, b) == 0) || (mystrcmp(a, b) == 0)) {}\n}"
  "test.cpp" always "test.cpp"
  false always 0
  false always 0
  true always 1
  false always 0
  & {lifetime[Address]=(settings),!0}
Line 5430
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5430 always 5430
  "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||'.\n"
Line 5432
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5432 always 5432
  "void GetValue() { return rand(); }\nvoid foo() {\n    if ((GetValue() == 0) || (GetValue() == 0)) { dostuff(); }\n}" always "void GetValue() { return rand(); }\nvoid foo() {\n    if ((GetValue() == 0) || (GetValue() == 0)) { dostuff(); }\n}"
Line 5436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5436 always 5436
  "" always ""
Line 5438
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5438 always 5438
  "void __attribute__((const)) GetValue() { return X; }\nvoid foo() {\n    if ((GetValue() == 0) || (GetValue() == 0)) { dostuff(); }\n}" always "void __attribute__((const)) GetValue() { return X; }\nvoid foo() {\n    if ((GetValue() == 0) || (GetValue() == 0)) { dostuff(); }\n}"
Line 5442
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5442 always 5442
  "[test.cpp:3]: (style) Same expression on both sides of '||'.\n" always "[test.cpp:3]: (style) Same expression on both sides of '||'.\n"
Line 5444
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5444 always 5444
  "void GetValue() __attribute__((const));\nvoid GetValue() { return X; }\nvoid foo() {\n    if ((GetValue() == 0) || (GetValue() == 0)) { dostuff(); }\n}" always "void GetValue() __attribute__((const));\nvoid GetValue() { return X; }\nvoid foo() {\n    if ((GetValue() == 0) || (GetValue() == 0)) { dostuff(); }\n}"
Line 5449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5449 always 5449
  "[test.cpp:4]: (style) Same expression on both sides of '||'.\n" always "[test.cpp:4]: (style) Same expression on both sides of '||'.\n"
Line 5451
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5451 always 5451
  "void foo() {\n    if (str == \"(\" || str == \"(\") {}\n}" always "void foo() {\n    if (str == \"(\" || str == \"(\") {}\n}"
Line 5454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5454 always 5454
  "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||'.\n"
Line 5456
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5456 always 5456
  "void foo() {\n    if (bar(a) && !strcmp(a, b) && bar(a) && !strcmp(a, b)) {}\n}" always "void foo() {\n    if (bar(a) && !strcmp(a, b) && bar(a) && !strcmp(a, b)) {}\n}"
Line 5459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5459 always 5459
  "" always ""
Line 5462
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5462 always 5462
  "void f(C *src) {\n    if (x<A*>(src) || x<B*>(src))\n        a++;\n}" always "void f(C *src) {\n    if (x<A*>(src) || x<B*>(src))\n        a++;\n}"
Line 5466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5466 always 5466
  "" always ""
Line 5468
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5468 always 5468
  "void f(A *src) {\n    if (dynamic_cast<B*>(src) || dynamic_cast<B*>(src)) {}\n}\n" always "void f(A *src) {\n    if (dynamic_cast<B*>(src) || dynamic_cast<B*>(src)) {}\n}\n"
  "test.cpp" always "test.cpp"
  false always 0
  false always 0
  false always 0
Line 5471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5471 always 5471
  "[test.cpp:2]: (style) Same expression on both sides of '||'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||'.\n"
Line 5474
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5474 always 5474
  "Vector func(Vector vec1) {\n    return fabs(vec1 & vec1 & vec1);\n}" always "Vector func(Vector vec1) {\n    return fabs(vec1 & vec1 & vec1);\n}"
Line 5477
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5477 always 5477
  "" always ""
Line 5479
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5479 always 5479
  "Vector func(int vec1) {\n    return fabs(vec1 & vec1 & vec1);\n}" always "Vector func(int vec1) {\n    return fabs(vec1 & vec1 & vec1);\n}"
Line 5482
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5482 always 5482
  "[test.cpp:2]: (style) Same expression on both sides of '&'.\n" always "[test.cpp:2]: (style) Same expression on both sides of '&'.\n"
Line 5487
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5487 always 5487
  "void foo() {\n    if (*a++ != b || *a++ != b) {}\n}" always "void foo() {\n    if (*a++ != b || *a++ != b) {}\n}"
Line 5490
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5490 always 5490
  "" always ""
Line 5492
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5492 always 5492
  "void foo() {\n    if (*a-- != b || *a-- != b) {}\n}" always "void foo() {\n    if (*a-- != b || *a-- != b) {}\n}"
Line 5495
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5495 always 5495
  "" always ""
Line 5498
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5498 always 5498
  "void f() {\n  while (*(a+=2)==*(b+=2) && *(a+=2)==*(b+=2)) {}\n}" always "void f() {\n  while (*(a+=2)==*(b+=2) && *(a+=2)==*(b+=2)) {}\n}"
Line 5501
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5501 always 5501
  "" always ""
Line 5505
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5505 always 5505
  "void f() {\n    if ($a == $a) { }\n}" always "void f() {\n    if ($a == $a) { }\n}"
Line 5508
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5508 always 5508
  "" always ""
Line 5512
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5512 always 5512
  "float IsNan(float value) { return !(value == value); }\ndouble IsNan(double value) { return !(value == value); }\nlong double IsNan(long double value) { return !(value == value); }" always "float IsNan(float value) { return !(value == value); }\ndouble IsNan(double value) { return !(value == value); }\nlong double IsNan(long double value) { return !(value == value); }"
Line 5515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5515 always 5515
  "" always ""
Line 5519
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5519 always 5519
  "void f() {\n    const int i = sizeof(int);\n    if ( i != sizeof (int)){}\n}" always "void f() {\n    const int i = sizeof(int);\n    if ( i != sizeof (int)){}\n}"
Line 5523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5523 always 5523
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'i != sizeof(int)' is always false because 'i' and 'sizeof(int)' represent the same value.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'i != sizeof(int)' is always false because 'i' and 'sizeof(int)' represent the same value.\n"
Line 5525
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5525 always 5525
  "void f() {\n    const int i = sizeof(int);\n    if ( sizeof (int) != i){}\n}" always "void f() {\n    const int i = sizeof(int);\n    if ( sizeof (int) != i){}\n}"
Line 5529
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5529 always 5529
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'sizeof(int) != i' is always false because 'sizeof(int)' and 'i' represent the same value.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'sizeof(int) != i' is always false because 'sizeof(int)' and 'i' represent the same value.\n"
Line 5531
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5531 always 5531
  "void f(int a = 1) { if ( a != 1){}}" always "void f(int a = 1) { if ( a != 1){}}"
Line 5532
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5532 always 5532
  "" always ""
Line 5534
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5534 always 5534
  "void f() {\n    int a = 1;\n    if ( a != 1){}\n}" always "void f() {\n    int a = 1;\n    if ( a != 1){}\n}"
Line 5538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5538 always 5538
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n"
Line 5540
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5540 always 5540
  "void f() {\n    int a = 1;\n    int b = 1;\n    if ( a != b){}\n}" always "void f() {\n    int a = 1;\n    int b = 1;\n    if ( a != b){}\n}"
Line 5545
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5545 always 5545
  "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:4]: (style) The comparison 'a != b' is always false because 'a' and 'b' represent the same value.\n" always "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:4]: (style) The comparison 'a != b' is always false because 'a' and 'b' represent the same value.\n"
Line 5547
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5547 always 5547
  "void f() {\n    int a = 1;\n    int b = a;\n    if ( a != b){}\n}" always "void f() {\n    int a = 1;\n    int b = a;\n    if ( a != b){}\n}"
Line 5552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5552 always 5552
  "[test.cpp:3] -> [test.cpp:4]: (style) The comparison 'a != b' is always false because 'a' and 'b' represent the same value.\n" always "[test.cpp:3] -> [test.cpp:4]: (style) The comparison 'a != b' is always false because 'a' and 'b' represent the same value.\n"
Line 5554
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5554 always 5554
  "void use(int);\nvoid f() {\n    int a = 1;\n    int b = 1;\n    use(b);\n    if ( a != 1){}\n}" always "void use(int);\nvoid f() {\n    int a = 1;\n    int b = 1;\n    use(b);\n    if ( a != 1){}\n}"
Line 5561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5561 always 5561
  "[test.cpp:3] -> [test.cpp:6]: (style) The comparison 'a != 1' is always false.\n" always "[test.cpp:3] -> [test.cpp:6]: (style) The comparison 'a != 1' is always false.\n"
Line 5563
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5563 always 5563
  "void use(int);\nvoid f() {\n    int a = 1;\n    use(a);\n    a = 2;\n    if ( a != 1){}\n}" always "void use(int);\nvoid f() {\n    int a = 1;\n    use(a);\n    a = 2;\n    if ( a != 1){}\n}"
Line 5570
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5570 always 5570
  "" always ""
Line 5572
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5572 always 5572
  "void use(int);\nvoid f() {\n    int a = 2;\n    use(a);\n    a = 1;\n    if ( a != 1){}\n}" always "void use(int);\nvoid f() {\n    int a = 2;\n    use(a);\n    a = 1;\n    if ( a != 1){}\n}"
Line 5579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5579 always 5579
  "" always ""
Line 5581
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5581 always 5581
  "const int a = 1;\nvoid f() {\n    if ( a != 1){}\n}" always "const int a = 1;\nvoid f() {\n    if ( a != 1){}\n}"
Line 5585
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5585 always 5585
  "[test.cpp:1] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" always "[test.cpp:1] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n"
Line 5587
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5587 always 5587
  "int a = 1;\n    void f() {\n    if ( a != 1){}\n}" always "int a = 1;\n    void f() {\n    if ( a != 1){}\n}"
Line 5591
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5591 always 5591
  "" always ""
Line 5593
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5593 always 5593
  "void f() {\n    static const int a = 1;\n    if ( a != 1){}\n}" always "void f() {\n    static const int a = 1;\n    if ( a != 1){}\n}"
Line 5597
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5597 always 5597
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n"
Line 5599
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5599 always 5599
  "void f() {\n    static int a = 1;\n    if ( a != 1){}\n}" always "void f() {\n    static int a = 1;\n    if ( a != 1){}\n}"
Line 5603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5603 always 5603
  "" always ""
Line 5605
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5605 always 5605
  "void f() {\n    int a = 1;\n    if ( a != 1){\n        a++;\n    }}" always "void f() {\n    int a = 1;\n    if ( a != 1){\n        a++;\n    }}"
Line 5610
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5610 always 5610
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n"
Line 5612
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5612 always 5612
  "void f(int b) {\n    int a = 1;\n    while (b) {\n        if ( a != 1){}\n        a++;\n    }\n}" always "void f(int b) {\n    int a = 1;\n    while (b) {\n        if ( a != 1){}\n        a++;\n    }\n}"
Line 5619
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5619 always 5619
  "" always ""
Line 5621
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5621 always 5621
  "bool f(bool a, bool b) {\n    const bool c = a;\n    return a && b && c;\n}" always "bool f(bool a, bool b) {\n    const bool c = a;\n    return a && b && c;\n}"
Line 5625
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5625 always 5625
  "[test.cpp:2] -> [test.cpp:3]: (style) Same expression 'a' found multiple times in chain of '&&' operators because 'a' and 'c' represent the same value.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Same expression 'a' found multiple times in chain of '&&' operators because 'a' and 'c' represent the same value.\n"
Line 5629
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5629 always 5629
  "void f(const bool b) {\n   const bool b1 = !b;\n   if(!b && b1){}\n}" always "void f(const bool b) {\n   const bool b1 = !b;\n   if(!b && b1){}\n}"
Line 5633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5633 always 5633
  "[test.cpp:2] -> [test.cpp:3]: (style) Same expression on both sides of '&&' because '!b' and 'b1' represent the same value.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Same expression on both sides of '&&' because '!b' and 'b1' represent the same value.\n"
Line 5636
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5636 always 5636
  "void f(void) {\n   if (a || !!a) {}\n}" always "void f(void) {\n   if (a || !!a) {}\n}"
Line 5639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5639 always 5639
  "[test.cpp:2]: (style) Same expression on both sides of '||' because 'a' and '!!a' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||' because 'a' and '!!a' represent the same value.\n"
Line 5642
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5642 always 5642
  "void f(int x) {\n   int Diag = 0;\n   switch (x) {\n   case 12:\n       if (Diag==0) {}\n       break;\n   }\n}" always "void f(int x) {\n   int Diag = 0;\n   switch (x) {\n   case 12:\n       if (Diag==0) {}\n       break;\n   }\n}"
Line 5650
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5650 always 5650
  "[test.cpp:2] -> [test.cpp:5]: (style) The comparison 'Diag == 0' is always true.\n" always "[test.cpp:2] -> [test.cpp:5]: (style) The comparison 'Diag == 0' is always true.\n"
Line 5654
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5654 always 5654
  "void f() {\n    int a = 1;\n    int b = a;\n    a = 2;\n    if ( b != a){}\n}" always "void f() {\n    int a = 1;\n    int b = a;\n    a = 2;\n    if ( b != a){}\n}"
Line 5660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5660 always 5660
  "" always ""
Line 5662
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5662 always 5662
  "void f(int * a, int i) { int b = a[i]; a[i] = 2; if ( b != a[i]){}}" always "void f(int * a, int i) { int b = a[i]; a[i] = 2; if ( b != a[i]){}}"
Line 5663
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5663 always 5663
  "" always ""
Line 5665
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5665 always 5665
  "void f(int * a, int i) { int b = *a; *a = 2; if ( b != *a){}}" always "void f(int * a, int i) { int b = *a; *a = 2; if ( b != *a){}}"
Line 5666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5666 always 5666
  "" always ""
Line 5668
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5668 always 5668
  "struct A { int f() const; };\nA g();\nvoid foo() {\n    for (A x = A();;) {\n        const int a = x.f();\n        x = g();\n        if (x.f() == a) break;\n    }\n}" always "struct A { int f() const; };\nA g();\nvoid foo() {\n    for (A x = A();;) {\n        const int a = x.f();\n        x = g();\n        if (x.f() == a) break;\n    }\n}"
Line 5677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5677 always 5677
  "" always ""
Line 5679
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5679 always 5679
  "int f(int i);\nstruct A {\n    enum E { B, C };\n    bool f(E);\n};\nvoid foo() {\n    A a;\n    const bool x = a.f(A::B);\n    const bool y = a.f(A::C);\n    if(!x && !y) return;\n}" always "int f(int i);\nstruct A {\n    enum E { B, C };\n    bool f(E);\n};\nvoid foo() {\n    A a;\n    const bool x = a.f(A::B);\n    const bool y = a.f(A::C);\n    if(!x && !y) return;\n}"
Line 5690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5690 always 5690
  "" always ""
Line 5692
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5692 always 5692
  "void foo() {\n    const bool x = a.f(A::B);\n    const bool y = a.f(A::C);\n    if (!x && !y) return;\n}" always "void foo() {\n    const bool x = a.f(A::B);\n    const bool y = a.f(A::C);\n    if (!x && !y) return;\n}"
Line 5697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5697 always 5697
  "" always ""
Line 5699
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5699 always 5699
  "void f(bool * const b);\nvoid foo() {\n    bool x = true;\n    bool y = true;\n    f(&x);\n    if (!x && !y) return;\n}" always "void f(bool * const b);\nvoid foo() {\n    bool x = true;\n    bool y = true;\n    f(&x);\n    if (!x && !y) return;\n}"
Line 5706
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5706 always 5706
  "" always ""
Line 5708
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5708 always 5708
  "void f() {\n    const int a = {};\n    if(a == 1) {}\n}" always "void f() {\n    const int a = {};\n    if(a == 1) {}\n}"
Line 5712
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5712 always 5712
  "" always ""
Line 5714
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5714 always 5714
  "volatile const int var = 42;\nvoid f() { if(var == 42) {} }" always "volatile const int var = 42;\nvoid f() { if(var == 42) {} }"
Line 5716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5716 always 5716
  "" always ""
Line 5718
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5718 always 5718
  "void f() {\n    int a = 0;\n    struct b c;\n    c.a = &a;\n    g(&c);\n    if (a == 0) {}\n}" always "void f() {\n    int a = 0;\n    struct b c;\n    c.a = &a;\n    g(&c);\n    if (a == 0) {}\n}"
Line 5725
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5725 always 5725
  "" always ""
Line 5730
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5730 always 5730
  "void f() {\n  uint16_t x = 1000;\n  uint8_t y = x;\n  if (x != y) {}\n}" always "void f() {\n  uint16_t x = 1000;\n  uint8_t y = x;\n  if (x != y) {}\n}"
Line 5735
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5735 always 5735
  "" always ""
Line 5740
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5740 always 5740
  "int f() {\n   const int a = 1;\n   const int b = a-1;\n   const int c = a+1;\n   return c;\n}" always "int f() {\n   const int a = 1;\n   const int b = a-1;\n   const int c = a+1;\n   return c;\n}"
Line 5746
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5746 always 5746
  "" always ""
Line 5750
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5750 always 5750
  "class Fred {\npublic:\n    double getScale() const { return m_range * m_zoom; }\n    void setZoom(double z) { m_zoom = z; }\n    void dostuff(int);\nprivate:\n    double m_zoom;\n    double m_range;\n};\n\nvoid Fred::dostuff(int x) {\n    if (x == 43) {\n        double old_scale = getScale();\n        setZoom(m_zoom + 1);\n        double scale_ratio = getScale() / old_scale;\n    }\n}" always "class Fred {\npublic:\n    double getScale() const { return m_range * m_zoom; }\n    void setZoom(double z) { m_zoom = z; }\n    void dostuff(int);\nprivate:\n    double m_zoom;\n    double m_range;\n};\n\nvoid Fred::dostuff(int x) {\n    if (x == 43) {\n        double old_scale = getScale();\n        setZoom(m_zoom + 1);\n        double scale_ratio = getScale() / old_scale;\n    }\n}"
Line 5767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5767 always 5767
  "" always ""
Line 5771
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5771 always 5771
  "int f(const std::vector<int> &buffer, const uint8_t index)\n{\n        int var = buffer[index - 1];\n        return buffer[index - 1] - var;\n}" always "int f(const std::vector<int> &buffer, const uint8_t index)\n{\n        int var = buffer[index - 1];\n        return buffer[index - 1] - var;\n}"
Line 5776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5776 always 5776
  "[test.cpp:3] -> [test.cpp:4]: (style) Same expression on both sides of '-'.\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Same expression on both sides of '-'.\n"
Line 5780
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5780 always 5780
  "void f() {\n    if (sizeof(long) == sizeof(long long)) {}\n}" always "void f() {\n    if (sizeof(long) == sizeof(long long)) {}\n}"
Line 5783
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5783 always 5783
  "" always ""
Line 5787
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5787 always 5787
  "int f() {\n    int k = 7;\n    int* f = &k;\n    int* g = &k;\n    return (f + 4 != g + 4);\n}\n" always "int f() {\n    int k = 7;\n    int* f = &k;\n    int* g = &k;\n    return (f + 4 != g + 4);\n}\n"
Line 5793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5793 always 5793
  "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:5]: (style) The comparison 'f+4 != g+4' is always false because 'f+4' and 'g+4' represent the same value.\n" always "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:5]: (style) The comparison 'f+4 != g+4' is always false because 'f+4' and 'g+4' represent the same value.\n"
Line 5797
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5797 always 5797
  "bool f() {\n    const int i = int(0);\n    return i == 0;\n}\nbool g() {\n    const int i = int{ 0 };\n    return i == 0;\n}\n" always "bool f() {\n    const int i = int(0);\n    return i == 0;\n}\nbool g() {\n    const int i = int{ 0 };\n    return i == 0;\n}\n"
Line 5805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5805 always 5805
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'i == 0' is always true.\n[test.cpp:6] -> [test.cpp:7]: (style) The comparison 'i == 0' is always true.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'i == 0' is always true.\n[test.cpp:6] -> [test.cpp:7]: (style) The comparison 'i == 0' is always true.\n"
Line 5811
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5811 always 5811
  "void f(const std::string& a) {\n    if ((a == \"x\") ||\n        (a == \"42\") ||\n        (a == \"y\") ||\n        (a == \"42\")) {}\n}\nvoid g(const std::string& a) {\n    if ((a == \"42\") ||\n        (a == \"x\") ||\n        (a == \"42\") ||\n        (a == \"y\")) {}\n}\nvoid h(const std::string& a) {\n    if ((a == \"42\") ||\n        (a == \"x\") ||\n        (a == \"y\") ||\n        (a == \"42\")) {}\n}\n" always "void f(const std::string& a) {\n    if ((a == \"x\") ||\n        (a == \"42\") ||\n        (a == \"y\") ||\n        (a == \"42\")) {}\n}\nvoid g(const std::string& a) {\n    if ((a == \"42\") ||\n        (a == \"x\") ||\n        (a == \"42\") ||\n        (a == \"y\")) {}\n}\nvoid h(const std::string& a) {\n    if ((a == \"42\") ||\n        (a == \"x\") ||\n        (a == \"y\") ||\n        (a == \"42\")) {}\n}\n"
Line 5829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5829 always 5829
  "[test.cpp:1] -> [test.cpp:4]: (style) Same expression 'a==\"42\"' found multiple times in chain of '||' operators.\n[test.cpp:7] -> [test.cpp:9]: (style) Same expression 'a==\"42\"' found multiple times in chain of '||' operators.\n[test.cpp:13] -> [test.cpp:16]: (style) Same expression 'a==\"42\"' found multiple times in chain of '||' operators.\n" always "[test.cpp:1] -> [test.cpp:4]: (style) Same expression 'a==\"42\"' found multiple times in chain of '||' operators.\n[test.cpp:7] -> [test.cpp:9]: (style) Same expression 'a==\"42\"' found multiple times in chain of '||' operators.\n[test.cpp:13] -> [test.cpp:16]: (style) Same expression 'a==\"42\"' found multiple times in chain of '||' operators.\n"
Line 5836
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5836 always 5836
  "void f() {\n    int a = 1;\n    while ( a != 1){}\n}" always "void f() {\n    int a = 1;\n    while ( a != 1){}\n}"
Line 5840
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5840 always 5840
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'a != 1' is always false.\n"
Line 5842
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5842 always 5842
  "void f() { int a = 1; while ( a != 1){ a++; }}" always "void f() { int a = 1; while ( a != 1){ a++; }}"
Line 5843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5843 always 5843
  "" always ""
Line 5845
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5845 always 5845
  "void f() { int a = 1; for ( int i=0; i < 3 && a != 1; i++){ a++; }}" always "void f() { int a = 1; for ( int i=0; i < 3 && a != 1; i++){ a++; }}"
Line 5846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5846 always 5846
  "" always ""
Line 5848
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5848 always 5848
  "void f(int b) { int a = 1; while (b) { if ( a != 1){} b++; } a++; }" always "void f(int b) { int a = 1; while (b) { if ( a != 1){} b++; } a++; }"
Line 5849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5849 always 5849
  "" always ""
Line 5851
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5851 always 5851
  "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) {}\n    }\n}" always "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) {}\n    }\n}"
Line 5856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5856 always 5856
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'i != 0' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'i != 0' is always false.\n"
Line 5858
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5858 always 5858
  "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) {}\n        i++;\n    }\n}" always "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) {}\n        i++;\n    }\n}"
Line 5864
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5864 always 5864
  "" always ""
Line 5866
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5866 always 5866
  "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) { i++; }\n        i++;\n    }\n}" always "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) { i++; }\n        i++;\n    }\n}"
Line 5872
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5872 always 5872
  "" always ""
Line 5874
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5874 always 5874
  "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) { i++; }\n    }\n}" always "void f() {\n    for(int i = 0; i < 10;) {\n        if( i != 0 ) { i++; }\n    }\n}"
Line 5879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5879 always 5879
  "" always ""
Line 5881
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5881 always 5881
  "void f() {\n    int i = 0;\n    while(i < 10) {\n        if( i != 0 ) {}\n        i++;\n    }\n}" always "void f() {\n    int i = 0;\n    while(i < 10) {\n        if( i != 0 ) {}\n        i++;\n    }\n}"
Line 5888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5888 always 5888
  "" always ""
Line 5890
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5890 always 5890
  "void f(int b) {\n    while (b) {\n        int a = 1;\n        if ( a != 1){}\n        b++;\n    }\n}" always "void f(int b) {\n    while (b) {\n        int a = 1;\n        if ( a != 1){}\n        b++;\n    }\n}"
Line 5897
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5897 always 5897
  "[test.cpp:3] -> [test.cpp:4]: (style) The comparison 'a != 1' is always false.\n" always "[test.cpp:3] -> [test.cpp:4]: (style) The comparison 'a != 1' is always false.\n"
Line 5901
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5901 always 5901
  "void f() {\n    return A ? x : x;\n}" always "void f() {\n    return A ? x : x;\n}"
Line 5904
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5904 always 5904
  "[test.cpp:2]: (style) Same expression in both branches of ternary operator.\n" always "[test.cpp:2]: (style) Same expression in both branches of ternary operator.\n"
Line 5906
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5906 always 5906
  "int f(bool b, int a) {\n    const int c = a;\n    return b ? a : c;\n}" always "int f(bool b, int a) {\n    const int c = a;\n    return b ? a : c;\n}"
Line 5910
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5910 always 5910
  "[test.cpp:2] -> [test.cpp:3]: (style) Same expression in both branches of ternary operator.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Same expression in both branches of ternary operator.\n"
Line 5912
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5912 always 5912
  "void f() {\n    return A ? x : z;\n}" always "void f() {\n    return A ? x : z;\n}"
Line 5915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5915 always 5915
  "" always ""
Line 5917
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5917 always 5917
  "void f(unsigned char c) {\n  x = y ? (signed char)c : (unsigned char)c;\n}" always "void f(unsigned char c) {\n  x = y ? (signed char)c : (unsigned char)c;\n}"
Line 5920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5920 always 5920
  "" always ""
Line 5922
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5922 always 5922
  "std::string stringMerge(std::string const& x, std::string const& y) {\n    return ((x > y) ? (y + x) : (x + y));\n}" always "std::string stringMerge(std::string const& x, std::string const& y) {\n    return ((x > y) ? (y + x) : (x + y));\n}"
Line 5925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5925 always 5925
  "" always ""
Line 5929
  53 always 53
  = always "void foo(bool flag) {\n  bar( (flag) ? ~0u : ~0ul);\n}"
  "void foo(bool flag) {\n  bar( (flag) ? ~0u : ~0ul);\n}" always "void foo(bool flag) {\n  bar( (flag) ? ~0u : ~0ul);\n}"
Line 5933
  settings always symbolic=(_settings)
  = always 4
  4 always 4
Line 5934
  = always 32
  32 always 32
Line 5936
  = always 4
  4 always 4
Line 5937
  = always 32
  32 always 32
Line 5938
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5938 always 5938
  code always "void foo(bool flag) {\n  bar( (flag) ? ~0u : ~0ul);\n}"
  & {lifetime[Address]=(settings),!0}
Line 5939
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5939 always 5939
  "[test.cpp:2]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:2]: (style) Same value in both branches of ternary operator.\n"
Line 5941
  = always 8
  8 always 8
Line 5942
  = always 64
  64 always 64
Line 5943
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5943 always 5943
  code always "void foo(bool flag) {\n  bar( (flag) ? ~0u : ~0ul);\n}"
  & {lifetime[Address]=(settings),!0}
Line 5944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5944 always 5944
  "" always ""
Line 5949
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5949 always 5949
  "void f() {\n    if( a ? (b ? false:false): false ) ;\n}" always "void f() {\n    if( a ? (b ? false:false): false ) ;\n}"
Line 5952
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5952 always 5952
  "[test.cpp:2]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:2]: (style) Same value in both branches of ternary operator.\n"
Line 5954
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5954 always 5954
  "int f1(int a) {return (a == 1) ? (int)1 : 1; }" always "int f1(int a) {return (a == 1) ? (int)1 : 1; }"
Line 5955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5955 always 5955
  "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n"
Line 5957
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5957 always 5957
  "int f2(int a) {return (a == 1) ? (int)1 : (int)1; }" always "int f2(int a) {return (a == 1) ? (int)1 : (int)1; }"
Line 5958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5958 always 5958
  "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n"
Line 5960
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5960 always 5960
  "int f3(int a) {return (a == 1) ? 1 : (int)1; }" always "int f3(int a) {return (a == 1) ? 1 : (int)1; }"
Line 5961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5961 always 5961
  "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n"
Line 5963
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5963 always 5963
  "int f4(int a) {return (a == 1) ? 1 : 1; }" always "int f4(int a) {return (a == 1) ? 1 : 1; }"
Line 5964
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5964 always 5964
  "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n"
Line 5966
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5966 always 5966
  "int f5(int a) {return (a == (int)1) ? (int)1 : 1; }" always "int f5(int a) {return (a == (int)1) ? (int)1 : 1; }"
Line 5967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5967 always 5967
  "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n"
Line 5969
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5969 always 5969
  "int f6(int a) {return (a == (int)1) ? (int)1 : (int)1; }" always "int f6(int a) {return (a == (int)1) ? (int)1 : (int)1; }"
Line 5970
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5970 always 5970
  "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n"
Line 5972
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5972 always 5972
  "int f7(int a) {return (a == (int)1) ? 1 : (int)1; }" always "int f7(int a) {return (a == (int)1) ? 1 : (int)1; }"
Line 5973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5973 always 5973
  "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n"
Line 5975
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5975 always 5975
  "int f8(int a) {return (a == (int)1) ? 1 : 1; }" always "int f8(int a) {return (a == (int)1) ? 1 : 1; }"
Line 5976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5976 always 5976
  "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n" always "[test.cpp:1]: (style) Same value in both branches of ternary operator.\n"
Line 5978
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5978 always 5978
  "struct Foo {\n  std::vector<int> bar{1,2,3};\n  std::vector<int> baz{4,5,6};\n};\nvoid f() {\n  Foo foo;\n  it = true ? foo.bar.begin() : foo.baz.begin();\n}\n" always "struct Foo {\n  std::vector<int> bar{1,2,3};\n  std::vector<int> baz{4,5,6};\n};\nvoid f() {\n  Foo foo;\n  it = true ? foo.bar.begin() : foo.baz.begin();\n}\n"
Line 5986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5986 always 5986
  "" always ""
Line 5988
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5988 always 5988
  "void f(bool b) {\n  std::vector<int> bar{1,2,3};\n  std::vector<int> baz{4,5,6};\n  std::vector<int> v = b ? bar : baz;\n}\n" always "void f(bool b) {\n  std::vector<int> bar{1,2,3};\n  std::vector<int> baz{4,5,6};\n  std::vector<int> v = b ? bar : baz;\n}\n"
Line 5993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5993 always 5993
  "" always ""
Line 5995
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  5995 always 5995
  "void f(bool q) {\n    static int a = 0;\n    static int b = 0;\n    int& x = q ? a : b;\n    ++x;\n}\n" always "void f(bool q) {\n    static int a = 0;\n    static int b = 0;\n    int& x = q ? a : b;\n    ++x;\n}\n"
Line 6001
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6001 always 6001
  "" always ""
Line 6003
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6003 always 6003
  "struct S { int a, b; };\nS f(bool x, S s) {\n    (x) ? f.a = 42 : f.b = 42;\n    return f;\n}\n" always "struct S { int a, b; };\nS f(bool x, S s) {\n    (x) ? f.a = 42 : f.b = 42;\n    return f;\n}\n"
Line 6008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6008 always 6008
  "" always ""
Line 6012
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6012 always 6012
  "template <int I> void f() {\n    if (I >= 0 && I < 3) {}\n}\n\nstatic auto a = f<0>();" always "template <int I> void f() {\n    if (I >= 0 && I < 3) {}\n}\n\nstatic auto a = f<0>();"
Line 6017
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6017 always 6017
  "" always ""
Line 6019
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6019 always 6019
  "template<typename T>\nvoid f() {\n    if (std::is_same_v<T, char> || std::is_same_v<T, unsigned char>) {}\n}\n" always "template<typename T>\nvoid f() {\n    if (std::is_same_v<T, char> || std::is_same_v<T, unsigned char>) {}\n}\n"
Line 6023
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6023 always 6023
  "" always ""
Line 6025
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6025 always 6025
  "typedef long long int64_t;template<typename T>\nvoid f() {\n    if (std::is_same_v<T, long> || std::is_same_v<T, int64_t>) {}\n}\n" always "typedef long long int64_t;template<typename T>\nvoid f() {\n    if (std::is_same_v<T, long> || std::is_same_v<T, int64_t>) {}\n}\n"
Line 6030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6030 always 6030
  "" always ""
Line 6032
  "#define int32_t inttemplate<typename T>\nvoid f() {\n    if (std::is_same_v<T, int> || std::is_same_v<T, int32_t>) {}\n}\n" always "#define int32_t inttemplate<typename T>\nvoid f() {\n    if (std::is_same_v<T, int> || std::is_same_v<T, int32_t>) {}\n}\n"
Line 6037
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6037 always 6037
  "" always ""
Line 6041
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6041 always 6041
  "void f(const int* x, bool b) {\n    if ((x && b) || (x != 0 && b)) {}\n}\n" always "void f(const int* x, bool b) {\n    if ((x && b) || (x != 0 && b)) {}\n}\n"
Line 6044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6044 always 6044
  "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x&&b' and 'x!=0&&b' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x&&b' and 'x!=0&&b' represent the same value.\n"
Line 6046
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6046 always 6046
  "void f(const int* x, bool b) {\n    if ((x != 0 && b) || (x && b)) {}\n}\n" always "void f(const int* x, bool b) {\n    if ((x != 0 && b) || (x && b)) {}\n}\n"
Line 6049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6049 always 6049
  "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x!=0&&b' and 'x&&b' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x!=0&&b' and 'x&&b' represent the same value.\n"
Line 6051
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6051 always 6051
  "void f(const int* x, bool b) {\n    if ((x && b) || (b && x != 0)) {}\n}\n" always "void f(const int* x, bool b) {\n    if ((x && b) || (b && x != 0)) {}\n}\n"
Line 6054
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6054 always 6054
  "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x&&b' and 'b&&x!=0' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x&&b' and 'b&&x!=0' represent the same value.\n"
Line 6056
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6056 always 6056
  "void f(const int* x, bool b) {\n    if ((!x && b) || (x == 0 && b)) {}\n}\n" always "void f(const int* x, bool b) {\n    if ((!x && b) || (x == 0 && b)) {}\n}\n"
Line 6059
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6059 always 6059
  "[test.cpp:2]: (style) Same expression on both sides of '||' because '!x&&b' and 'x==0&&b' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||' because '!x&&b' and 'x==0&&b' represent the same value.\n"
Line 6061
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6061 always 6061
  "void f(const int* x, bool b) {\n    if ((x == 0 && b) || (!x && b)) {}\n}\n" always "void f(const int* x, bool b) {\n    if ((x == 0 && b) || (!x && b)) {}\n}\n"
Line 6064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6064 always 6064
  "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x==0&&b' and '!x&&b' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||' because 'x==0&&b' and '!x&&b' represent the same value.\n"
Line 6066
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6066 always 6066
  "void f(const int* x, bool b) {\n    if ((!x && b) || (b && x == 0)) {}\n}\n" always "void f(const int* x, bool b) {\n    if ((!x && b) || (b && x == 0)) {}\n}\n"
Line 6069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6069 always 6069
  "[test.cpp:2]: (style) Same expression on both sides of '||' because '!x&&b' and 'b&&x==0' represent the same value.\n" always "[test.cpp:2]: (style) Same expression on both sides of '||' because '!x&&b' and 'b&&x==0' represent the same value.\n"
Line 6071
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6071 always 6071
  "struct A {\n    int* getX() const;\n    bool getB() const;\n    void f() {\n        if ((getX() && getB()) || (getX() != 0 && getB())) {}\n    }\n};\n" always "struct A {\n    int* getX() const;\n    bool getB() const;\n    void f() {\n        if ((getX() && getB()) || (getX() != 0 && getB())) {}\n    }\n};\n"
Line 6078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6078 always 6078
  "[test.cpp:5]: (style) Same expression on both sides of '||' because 'getX()&&getB()' and 'getX()!=0&&getB()' represent the same value.\n" always "[test.cpp:5]: (style) Same expression on both sides of '||' because 'getX()&&getB()' and 'getX()!=0&&getB()' represent the same value.\n"
Line 6080
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6080 always 6080
  "void f(const int* x, bool b) {\n    if ((x && b) || (x == 0 && b)) {}\n}\n" always "void f(const int* x, bool b) {\n    if ((x && b) || (x == 0 && b)) {}\n}\n"
Line 6083
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6083 always 6083
  "" always ""
Line 6085
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6085 always 6085
  "void f(const int* x, bool b) {\n    if ((!x && b) || (x != 0 && b)) {}\n}\n" always "void f(const int* x, bool b) {\n    if ((!x && b) || (x != 0 && b)) {}\n}\n"
Line 6088
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6088 always 6088
  "" always ""
Line 6092
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6092 always 6092
  "void f(bool a) { if(a && !a) {} }" always "void f(bool a) { if(a && !a) {} }"
Line 6093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6093 always 6093
  "[test.cpp:1]: (style) Opposite expression on both sides of '&&'.\n" always "[test.cpp:1]: (style) Opposite expression on both sides of '&&'.\n"
Line 6095
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6095 always 6095
  "void f(bool a) { if(a != !a) {} }" always "void f(bool a) { if(a != !a) {} }"
Line 6096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6096 always 6096
  "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n" always "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n"
Line 6098
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6098 always 6098
  "void f(bool a) { if( a == !(a) ) {}}" always "void f(bool a) { if( a == !(a) ) {}}"
Line 6099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6099 always 6099
  "[test.cpp:1]: (style) Opposite expression on both sides of '=='.\n" always "[test.cpp:1]: (style) Opposite expression on both sides of '=='.\n"
Line 6101
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6101 always 6101
  "void f(bool a) { if( a != !(a) ) {}}" always "void f(bool a) { if( a != !(a) ) {}}"
Line 6102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6102 always 6102
  "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n" always "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n"
Line 6104
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6104 always 6104
  "void f(bool a) { if( !(a) == a ) {}}" always "void f(bool a) { if( !(a) == a ) {}}"
Line 6105
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6105 always 6105
  "[test.cpp:1]: (style) Opposite expression on both sides of '=='.\n" always "[test.cpp:1]: (style) Opposite expression on both sides of '=='.\n"
Line 6107
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6107 always 6107
  "void f(bool a) { if( !(a) != a ) {}}" always "void f(bool a) { if( !(a) != a ) {}}"
Line 6108
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6108 always 6108
  "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n" always "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n"
Line 6110
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6110 always 6110
  "void f(bool a) { if( !(!a) == !(a) ) {}}" always "void f(bool a) { if( !(!a) == !(a) ) {}}"
Line 6111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6111 always 6111
  "[test.cpp:1]: (style) Opposite expression on both sides of '=='.\n" always "[test.cpp:1]: (style) Opposite expression on both sides of '=='.\n"
Line 6113
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6113 always 6113
  "void f(bool a) { if( !(!a) != !(a) ) {}}" always "void f(bool a) { if( !(!a) != !(a) ) {}}"
Line 6114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6114 always 6114
  "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n" always "[test.cpp:1]: (style) Opposite expression on both sides of '!='.\n"
Line 6116
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6116 always 6116
  "void f1(bool a) {\n    const bool b = a;\n    if( a == !(b) ) {}\n    if( b == !(a) ) {}\n}" always "void f1(bool a) {\n    const bool b = a;\n    if( a == !(b) ) {}\n    if( b == !(a) ) {}\n}"
Line 6121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6121 always 6121
  "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n[test.cpp:2] -> [test.cpp:4]: (style) Opposite expression on both sides of '=='.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n[test.cpp:2] -> [test.cpp:4]: (style) Opposite expression on both sides of '=='.\n"
Line 6124
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6124 always 6124
  "void f2(const bool *a) {\n    const bool b = *a;\n    if( *a == !(b) ) {}\n    if( b == !(*a) ) {}\n}" always "void f2(const bool *a) {\n    const bool b = *a;\n    if( *a == !(b) ) {}\n    if( b == !(*a) ) {}\n}"
Line 6129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6129 always 6129
  "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n[test.cpp:2] -> [test.cpp:4]: (style) Opposite expression on both sides of '=='.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n[test.cpp:2] -> [test.cpp:4]: (style) Opposite expression on both sides of '=='.\n"
Line 6132
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6132 always 6132
  "void f(bool a) { a = !a; }" always "void f(bool a) { a = !a; }"
Line 6133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6133 always 6133
  "" always ""
Line 6135
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6135 always 6135
  "void f(int a) { if( a < -a ) {}}" always "void f(int a) { if( a < -a ) {}}"
Line 6136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6136 always 6136
  "[test.cpp:1]: (style) Opposite expression on both sides of '<'.\n" always "[test.cpp:1]: (style) Opposite expression on both sides of '<'.\n"
Line 6138
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6138 always 6138
  "void f(int a) { a -= -a; }" always "void f(int a) { a -= -a; }"
Line 6139
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6139 always 6139
  "" always ""
Line 6141
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6141 always 6141
  "void f(int a) { a = a / (-a); }" always "void f(int a) { a = a / (-a); }"
Line 6142
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6142 always 6142
  "" always ""
Line 6144
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6144 always 6144
  "bool f(int i){ return !((i - 1) & i); }" always "bool f(int i){ return !((i - 1) & i); }"
Line 6145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6145 always 6145
  "" always ""
Line 6147
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6147 always 6147
  "bool f(unsigned i){ return (x > 0) && (x & (x-1)) == 0; }" always "bool f(unsigned i){ return (x > 0) && (x & (x-1)) == 0; }"
Line 6148
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6148 always 6148
  "" always ""
Line 6150
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6150 always 6150
  "void A::f(bool a, bool c)\n{\n    const bool b = a;\n    if(c) { a = false; }\n    if(b && !a) { }\n}" always "void A::f(bool a, bool c)\n{\n    const bool b = a;\n    if(c) { a = false; }\n    if(b && !a) { }\n}"
Line 6156
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6156 always 6156
  "" always ""
Line 6158
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6158 always 6158
  "void f(bool c) {\n    const bool b = a;\n    if(c) { a = false; }\n    if(b && !a) { }\n}" always "void f(bool c) {\n    const bool b = a;\n    if(c) { a = false; }\n    if(b && !a) { }\n}"
Line 6163
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6163 always 6163
  "" always ""
Line 6165
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6165 always 6165
  "void f() {\n    bool x = a;\n    dostuff();\n    if (x && a) {}\n}" always "void f() {\n    bool x = a;\n    dostuff();\n    if (x && a) {}\n}"
Line 6170
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6170 always 6170
  "" always ""
Line 6172
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6172 always 6172
  "void f() {\n  const bool b = g();\n  if (!b && g()) {}\n}" always "void f() {\n  const bool b = g();\n  if (!b && g()) {}\n}"
Line 6176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6176 always 6176
  "" always ""
Line 6178
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6178 always 6178
  "void f(const bool *a) {\n    const bool b = a[42];\n    if( b == !(a[42]) ) {}\n}\n" always "void f(const bool *a) {\n    const bool b = a[42];\n    if( b == !(a[42]) ) {}\n}\n"
Line 6182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6182 always 6182
  "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n"
Line 6184
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6184 always 6184
  "void f(const bool *a) {\n    const bool b = a[42];\n    if( a[42] == !(b) ) {}\n}\n" always "void f(const bool *a) {\n    const bool b = a[42];\n    if( a[42] == !(b) ) {}\n}\n"
Line 6188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6188 always 6188
  "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n"
Line 6190
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6190 always 6190
  "void f(const bool *a) {\n    const bool b = *a;\n    if( b == !(*a) ) {}\n}\n" always "void f(const bool *a) {\n    const bool b = *a;\n    if( b == !(*a) ) {}\n}\n"
Line 6194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6194 always 6194
  "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n"
Line 6196
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6196 always 6196
  "void f(const bool *a) {\n    const bool b = *a;\n    if( *a == !(b) ) {}\n}\n" always "void f(const bool *a) {\n    const bool b = *a;\n    if( *a == !(b) ) {}\n}\n"
Line 6200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6200 always 6200
  "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Opposite expression on both sides of '=='.\n"
Line 6202
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6202 always 6202
  "void f(uint16_t u) {\n    if (u != (u & -u))\n        return false;\n    if (u != (-u & u))\n        return false;\n    return true;\n}\n" always "void f(uint16_t u) {\n    if (u != (u & -u))\n        return false;\n    if (u != (-u & u))\n        return false;\n    return true;\n}\n"
Line 6209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6209 always 6209
  "" always ""
Line 6213
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6213 always 6213
  "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = f();\n    int j = f();\n}" always "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = f();\n    int j = f();\n}"
Line 6219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6219 always 6219
  "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6221
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6221 always 6221
  "struct Foo { int f() const; int g() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" always "struct Foo { int f() const; int g() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}"
Line 6227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6227 always 6227
  "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6229
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6229 always 6229
  "struct Foo { int f() const; int g() const; };\nvoid test() {\n    Foo f = Foo{};\n    Foo f2 = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" always "struct Foo { int f() const; int g() const; };\nvoid test() {\n    Foo f = Foo{};\n    Foo f2 = Foo{};\n    int i = f.f();\n    int j = f.f();\n}"
Line 6236
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6236 always 6236
  "[test.cpp:6] -> [test.cpp:5]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:6] -> [test.cpp:5]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6238
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6238 always 6238
  "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = 1 + f();\n    int j = 1 + f();\n}" always "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = 1 + f();\n    int j = 1 + f();\n}"
Line 6244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6244 always 6244
  "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6246
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6246 always 6246
  "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = f() + 1;\n    int j = 1 + f();\n}" always "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = f() + 1;\n    int j = 1 + f();\n}"
Line 6252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6252 always 6252
  "" always ""
Line 6254
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6254 always 6254
  "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int x = f();\n    int i = x + 1;\n    int j = f() + 1;\n}" always "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int x = f();\n    int i = x + 1;\n    int j = f() + 1;\n}"
Line 6261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6261 always 6261
  "" always ""
Line 6263
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6263 always 6263
  "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = f() + f();\n    int j = f() + f();\n}" always "int f() __attribute__((pure));\nint g() __attribute__((pure));\nvoid test() {\n    int i = f() + f();\n    int j = f() + f();\n}"
Line 6269
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6269 always 6269
  "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6271
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6271 always 6271
  "int f(int) __attribute__((pure));\nint g(int) __attribute__((pure));\nvoid test() {\n    int i = f(0);\n    int j = f(0);\n}" always "int f(int) __attribute__((pure));\nint g(int) __attribute__((pure));\nvoid test() {\n    int i = f(0);\n    int j = f(0);\n}"
Line 6277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6277 always 6277
  "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:5] -> [test.cpp:4]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6279
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6279 always 6279
  "int f(int) __attribute__((pure));\nint g(int) __attribute__((pure));\nvoid test() {\n    const int x = 0;\n    int i = f(0);\n    int j = f(x);\n}" always "int f(int) __attribute__((pure));\nint g(int) __attribute__((pure));\nvoid test() {\n    const int x = 0;\n    int i = f(0);\n    int j = f(x);\n}"
Line 6286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6286 always 6286
  "" always ""
Line 6288
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6288 always 6288
  "void test(const int * p, const int * q) {\n    int i = *p;\n    int j = *p;\n}" always "void test(const int * p, const int * q) {\n    int i = *p;\n    int j = *p;\n}"
Line 6292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6292 always 6292
  "[test.cpp:3] -> [test.cpp:2]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:3] -> [test.cpp:2]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6294
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6294 always 6294
  "struct A { int x; int y; };void test(A a) {\n    int i = a.x;\n    int j = a.x;\n}" always "struct A { int x; int y; };void test(A a) {\n    int i = a.x;\n    int j = a.x;\n}"
Line 6299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6299 always 6299
  "[test.cpp:3] -> [test.cpp:2]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:3] -> [test.cpp:2]: (style) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6301
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6301 always 6301
  "void test() {\n    int i = 0;\n    int j = 0;\n}" always "void test() {\n    int i = 0;\n    int j = 0;\n}"
Line 6305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6305 always 6305
  "" always ""
Line 6307
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6307 always 6307
  "void test() {\n    int i = -1;\n    int j = -1;\n}" always "void test() {\n    int i = -1;\n    int j = -1;\n}"
Line 6311
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6311 always 6311
  "" always ""
Line 6313
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6313 always 6313
  "int f(int);\nvoid test() {\n    int i = f(0);\n    int j = f(1);\n}" always "int f(int);\nvoid test() {\n    int i = f(0);\n    int j = f(1);\n}"
Line 6318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6318 always 6318
  "" always ""
Line 6320
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6320 always 6320
  "int f();\nint g();\nvoid test() {\n    int i = f() || f();\n    int j = f() && f();\n}" always "int f();\nint g();\nvoid test() {\n    int i = f() || f();\n    int j = f() && f();\n}"
Line 6326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6326 always 6326
  "" always ""
Line 6328
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6328 always 6328
  "struct Foo {};\nvoid test() {\n    Foo i = Foo();\n    Foo j = Foo();\n}" always "struct Foo {};\nvoid test() {\n    Foo i = Foo();\n    Foo j = Foo();\n}"
Line 6333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6333 always 6333
  "" always ""
Line 6335
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6335 always 6335
  "struct Foo {};\nvoid test() {\n    Foo i = Foo{};\n    Foo j = Foo{};\n}" always "struct Foo {};\nvoid test() {\n    Foo i = Foo{};\n    Foo j = Foo{};\n}"
Line 6340
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6340 always 6340
  "" always ""
Line 6342
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6342 always 6342
  "struct Foo { int f() const; float g() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" always "struct Foo { int f() const; float g() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}"
Line 6348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6348 always 6348
  "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6350
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6350 always 6350
  "struct Foo { int f(); int g(); };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" always "struct Foo { int f(); int g(); };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}"
Line 6356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6356 always 6356
  "" always ""
Line 6358
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6358 always 6358
  "void test() {\n    int i = f();\n    int j = f();\n}" always "void test() {\n    int i = f();\n    int j = f();\n}"
Line 6362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6362 always 6362
  "" always ""
Line 6364
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6364 always 6364
  "void test(int x) {\n    int i = ++x;\n    int j = ++x;\n}" always "void test(int x) {\n    int i = ++x;\n    int j = ++x;\n}"
Line 6368
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6368 always 6368
  "" always ""
Line 6370
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6370 always 6370
  "void test(int x) {\n    int i = x++;\n    int j = x++;\n}" always "void test(int x) {\n    int i = x++;\n    int j = x++;\n}"
Line 6374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6374 always 6374
  "" always ""
Line 6376
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6376 always 6376
  "void test(int x) {\n    int i = --x;\n    int j = --x;\n}" always "void test(int x) {\n    int i = --x;\n    int j = --x;\n}"
Line 6380
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6380 always 6380
  "" always ""
Line 6382
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6382 always 6382
  "void test(int x) {\n    int i = x--;\n    int j = x--;\n}" always "void test(int x) {\n    int i = x--;\n    int j = x--;\n}"
Line 6386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6386 always 6386
  "" always ""
Line 6388
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6388 always 6388
  "void test(int x) {\n    int i = x + 1;\n    int j = 1 + x;\n}" always "void test(int x) {\n    int i = x + 1;\n    int j = 1 + x;\n}"
Line 6392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6392 always 6392
  "" always ""
Line 6396
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6396 always 6396
  "struct SW { int first; };\nvoid foo(SW* x) {\n    int start = x->first;\n    int end   = x->first;\n}" always "struct SW { int first; };\nvoid foo(SW* x) {\n    int start = x->first;\n    int end   = x->first;\n}"
Line 6401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6401 always 6401
  "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'start' and 'end'.\n" always "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'start' and 'end'.\n"
Line 6402
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6402 always 6402
  "struct SW { int first; };\nvoid foo(SW* x, int i, int j) {\n    int start = x->first;\n    int end   = x->first;\n}" always "struct SW { int first; };\nvoid foo(SW* x, int i, int j) {\n    int start = x->first;\n    int end   = x->first;\n}"
Line 6407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6407 always 6407
  "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'start' and 'end'.\n" always "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'start' and 'end'.\n"
Line 6408
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6408 always 6408
  "struct Foo { int f() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" always "struct Foo { int f() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}"
Line 6414
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6414 always 6414
  "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6416
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6416 always 6416
  "void test(const int * p) {\n    int i = *p;\n    int j = *p;\n}" always "void test(const int * p) {\n    int i = *p;\n    int j = *p;\n}"
Line 6420
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6420 always 6420
  "[test.cpp:3] -> [test.cpp:2]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:3] -> [test.cpp:2]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6422
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6422 always 6422
  "struct Foo { int f() const; int g(int) const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" always "struct Foo { int f() const; int g(int) const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}"
Line 6428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6428 always 6428
  "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6430
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6430 always 6430
  "struct Foo { int f() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}" always "struct Foo { int f() const; };\nvoid test() {\n    Foo f = Foo{};\n    int i = f.f();\n    int j = f.f();\n}"
Line 6436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6436 always 6436
  "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:5] -> [test.cpp:4]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6440
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6440 always 6440
  "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(i);\n    i = j;\n}" always "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(i);\n    i = j;\n}"
Line 6448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6448 always 6448
  "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6450
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6450 always 6450
  "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(j);\n    j = i;\n}" always "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(j);\n    j = i;\n}"
Line 6458
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6458 always 6458
  "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6460
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6460 always 6460
  "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(j);\n    if (i == j) {}\n}" always "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(j);\n    if (i == j) {}\n}"
Line 6468
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6468 always 6468
  "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6472
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6472 always 6472
  "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(j);\n    if (i == a.x) {}\n}" always "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(j);\n    if (i == a.x) {}\n}"
Line 6480
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6480 always 6480
  "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6484
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6484 always 6484
  "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(i);\n    if (j == a.x) {}\n}" always "struct A { int x; int y; };void use(int);\nvoid test(A a) {\n    int i = a.x;\n    int j = a.x;\n    use(i);\n    if (j == a.x) {}\n}"
Line 6492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6492 always 6492
  "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n" always "[test.cpp:4] -> [test.cpp:3]: (style, inconclusive) Same expression used in consecutive assignments of 'i' and 'j'.\n"
Line 6497
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6497 always 6497
  "struct P\n{\n    void func();\n    bool operator==(const P&) const;\n};\nstruct X\n{\n    P first;\n    P second;\n};\nbool bar();\nvoid baz(const P&);\nvoid foo(const X& x)\n{\n    P current = x.first;\n    P previous = x.first;\n    while (true)\n    {\n        baz(current);\n        if (bar() && previous == current)\n        {\n            current.func();\n        }\n        previous = current;\n    }\n}" always "struct P\n{\n    void func();\n    bool operator==(const P&) const;\n};\nstruct X\n{\n    P first;\n    P second;\n};\nbool bar();\nvoid baz(const P&);\nvoid foo(const X& x)\n{\n    P current = x.first;\n    P previous = x.first;\n    while (true)\n    {\n        baz(current);\n        if (bar() && previous == current)\n        {\n            current.func();\n        }\n        previous = current;\n    }\n}"
Line 6523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6523 always 6523
  "[test.cpp:16] -> [test.cpp:15]: (style, inconclusive) Same expression used in consecutive assignments of 'current' and 'previous'.\n" always "[test.cpp:16] -> [test.cpp:15]: (style, inconclusive) Same expression used in consecutive assignments of 'current' and 'previous'.\n"
Line 6528
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6528 always 6528
  "struct  X {\n    X();\n    int f() const;\n};\nvoid run() {\n        X x;\n        int a = x.f();\n        int b = x.f();\n        (void)a;\n        (void)b;\n}" always "struct  X {\n    X();\n    int f() const;\n};\nvoid run() {\n        X x;\n        int a = x.f();\n        int b = x.f();\n        (void)a;\n        (void)b;\n}"
Line 6539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6539 always 6539
  "[test.cpp:8] -> [test.cpp:7]: (style, inconclusive) Same expression used in consecutive assignments of 'a' and 'b'.\n" always "[test.cpp:8] -> [test.cpp:7]: (style, inconclusive) Same expression used in consecutive assignments of 'a' and 'b'.\n"
Line 6542
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6542 always 6542
  "void f() {\n  unsigned char d;\n  d = d % 5;\n}" always "void f() {\n  unsigned char d;\n  d = d % 5;\n}"
Line 6546
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6546 always 6546
  "" always ""
Line 6548
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6548 always 6548
  "template <typename T>\nT f() {\n  T x = T();\n}\nint &a = f<int&>();" always "template <typename T>\nT f() {\n  T x = T();\n}\nint &a = f<int&>();"
Line 6553
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6553 always 6553
  "" always ""
Line 6556
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6556 always 6556
  "class A {\n  int64_t B = 32768;\n  P<uint8_t> m = MakeP<uint8_t>(B);\n};\nvoid f() {\n  uint32_t a = 42;\n  uint32_t b = uint32_t(A ::B / 1024);\n  int32_t c = int32_t(a / b);\n}" always "class A {\n  int64_t B = 32768;\n  P<uint8_t> m = MakeP<uint8_t>(B);\n};\nvoid f() {\n  uint32_t a = 42;\n  uint32_t b = uint32_t(A ::B / 1024);\n  int32_t c = int32_t(a / b);\n}"
Line 6565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6565 always 6565
  "" always ""
Line 6568
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6568 always 6568
  "a b;\nvoid c() {\n  switch (d) { case b:; }\n  double e(b);\n  if(e <= 0) {}\n}" always "a b;\nvoid c() {\n  switch (d) { case b:; }\n  double e(b);\n  if(e <= 0) {}\n}"
Line 6574
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6574 always 6574
  "" always ""
Line 6578
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6578 always 6578
  "struct a {\n  int b() const;\n  auto c() -> decltype(0) {\n    a d;\n    int e = d.b(), f = d.b();\n    return e + f;\n  }\n};\n" always "struct a {\n  int b() const;\n  auto c() -> decltype(0) {\n    a d;\n    int e = d.b(), f = d.b();\n    return e + f;\n  }\n};\n"
Line 6586
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6586 always 6586
  "[test.cpp:5] -> [test.cpp:5]: (style, inconclusive) Same expression used in consecutive assignments of 'e' and 'f'.\n" always "[test.cpp:5] -> [test.cpp:5]: (style, inconclusive) Same expression used in consecutive assignments of 'e' and 'f'.\n"
Line 6590
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6590 always 6590
  "void f() {\n  int val = 0;\n  if (val < 0) continue;\n  if ((val > 0)) {}\n}" always "void f() {\n  int val = 0;\n  if (val < 0) continue;\n  if ((val > 0)) {}\n}"
Line 6595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6595 always 6595
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'val < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison 'val > 0' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'val < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison 'val > 0' is always false.\n"
Line 6598
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6598 always 6598
  "void f() {\n  int val = 0;\n  int *p = &val;n  val = 1;\n  if (*p < 0) continue;\n  if ((*p > 0)) {}\n}\n" always "void f() {\n  int val = 0;\n  int *p = &val;n  val = 1;\n  if (*p < 0) continue;\n  if ((*p > 0)) {}\n}\n"
Line 6605
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6605 always 6605
  "" always ""
Line 6607
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6607 always 6607
  "void f() {\n  int val = 0;\n  int *p = &val;\n  if (*p < 0) continue;\n  if ((*p > 0)) {}\n}\n" always "void f() {\n  int val = 0;\n  int *p = &val;\n  if (*p < 0) continue;\n  if ((*p > 0)) {}\n}\n"
Line 6613
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6613 always 6613
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison '*p < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison '*p > 0' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison '*p < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison '*p > 0' is always false.\n"
  "" always ""
Line 6616
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6616 always 6616
  "void f() {\n  int val = 0;\n  if (val < 0) {\n    if ((val > 0)) {}\n  }\n}" always "void f() {\n  int val = 0;\n  if (val < 0) {\n    if ((val > 0)) {}\n  }\n}"
Line 6622
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6622 always 6622
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'val < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison 'val > 0' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'val < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison 'val > 0' is always false.\n"
Line 6625
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6625 always 6625
  "void f() {\n  int val = 0;\n  if (val < 0) {\n    if ((val < 0)) {}\n  }\n}" always "void f() {\n  int val = 0;\n  if (val < 0) {\n    if ((val < 0)) {}\n  }\n}"
Line 6631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6631 always 6631
  "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'val < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison 'val < 0' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The comparison 'val < 0' is always false.\n[test.cpp:2] -> [test.cpp:4]: (style) The comparison 'val < 0' is always false.\n"
Line 6634
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6634 always 6634
  "void f() {\n  int activate = 0;\n  int foo = 0;\n  if (activate) {}\n  else if (foo) {}\n}" always "void f() {\n  int activate = 0;\n  int foo = 0;\n  if (activate) {}\n  else if (foo) {}\n}"
Line 6640
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6640 always 6640
  "" always ""
Line 6644
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6644 always 6644
  "void foo() {\n  for(unsigned char i = 10; i >= 0; i--) {}\n}" always "void foo() {\n  for(unsigned char i = 10; i >= 0; i--) {}\n}"
Line 6647
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6647 always 6647
  "[test.cpp:2]: (style) Unsigned expression 'i' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'i' can't be negative so it is unnecessary to test it.\n"
Line 6649
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6649 always 6649
  "void foo(bool b) {\n  for(unsigned int i = 10; b || i >= 0; i--) {}\n}" always "void foo(bool b) {\n  for(unsigned int i = 10; b || i >= 0; i--) {}\n}"
Line 6652
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6652 always 6652
  "[test.cpp:2]: (style) Unsigned expression 'i' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'i' can't be negative so it is unnecessary to test it.\n"
Line 6655
  45 always 45
  = always "void foo(unsigned int x) {\n  if (x < 0) {}\n}"
  "void foo(unsigned int x) {\n  if (x < 0) {}\n}" always "void foo(unsigned int x) {\n  if (x < 0) {}\n}"
Line 6658
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6658 always 6658
  code always "void foo(unsigned int x) {\n  if (x < 0) {}\n}"
  nullptr always 0
  false always 0
  false always 0
  true always 1
  false always 0
Line 6659
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6659 always 6659
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6660
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6660 always 6660
  code always "void foo(unsigned int x) {\n  if (x < 0) {}\n}"
  nullptr always 0
  false always 0
  false always 0
  true always 1
  true always 1
Line 6661
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6661 always 6661
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6664
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6664 always 6664
  "void foo(unsigned int x) {\n  if (x < 0u) {}\n}" always "void foo(unsigned int x) {\n  if (x < 0u) {}\n}"
Line 6667
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6667 always 6667
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6669
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6669 always 6669
  "void foo(int x) {\n  if (x < 0) {}\n}" always "void foo(int x) {\n  if (x < 0) {}\n}"
Line 6672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6672 always 6672
  "" always ""
Line 6675
  54 always 54
  = always "void foo(unsigned x) {\n  int y = 0;\n  if (x < y) {}\n}"
  "void foo(unsigned x) {\n  int y = 0;\n  if (x < y) {}\n}" always "void foo(unsigned x) {\n  int y = 0;\n  if (x < y) {}\n}"
Line 6679
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6679 always 6679
  code always "void foo(unsigned x) {\n  int y = 0;\n  if (x < y) {}\n}"
  nullptr always 0
  false always 0
  false always 0
  true always 1
  false always 0
Line 6680
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6680 always 6680
  "[test.cpp:3]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:3]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6681
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6681 always 6681
  code always "void foo(unsigned x) {\n  int y = 0;\n  if (x < y) {}\n}"
  nullptr always 0
  false always 0
  false always 0
  true always 1
  true always 1
Line 6682
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6682 always 6682
  "[test.cpp:2] -> [test.cpp:3]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6684
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6684 always 6684
  "void foo(unsigned x) {\n  int y = 0;\n  if (b)\n    y = 1;\n  if (x < y) {}\n}" always "void foo(unsigned x) {\n  int y = 0;\n  if (b)\n    y = 1;\n  if (x < y) {}\n}"
Line 6690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6690 always 6690
  "" always ""
Line 6692
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6692 always 6692
  "void foo(unsigned int x) {\n  if (0 > x) {}\n}" always "void foo(unsigned int x) {\n  if (0 > x) {}\n}"
Line 6695
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6695 always 6695
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6697
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6697 always 6697
  "void foo(unsigned int x) {\n  if (0UL > x) {}\n}" always "void foo(unsigned int x) {\n  if (0UL > x) {}\n}"
Line 6700
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6700 always 6700
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6702
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6702 always 6702
  "void foo(int x) {\n  if (0 > x) {}\n}" always "void foo(int x) {\n  if (0 > x) {}\n}"
Line 6705
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6705 always 6705
  "" always ""
Line 6707
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6707 always 6707
  "void foo(unsigned int x) {\n  if (x >= 0) {}\n}" always "void foo(unsigned int x) {\n  if (x >= 0) {}\n}"
Line 6710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6710 always 6710
  "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n"
Line 6712
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6712 always 6712
  "void foo(unsigned int x, unsigned y) {\n  if (x - y >= 0) {}\n}" always "void foo(unsigned int x, unsigned y) {\n  if (x - y >= 0) {}\n}"
Line 6715
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6715 always 6715
  "[test.cpp:2]: (style) Unsigned expression 'x-y' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'x-y' can't be negative so it is unnecessary to test it.\n"
Line 6717
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6717 always 6717
  "void foo(unsigned int x) {\n  if (x >= 0ull) {}\n}" always "void foo(unsigned int x) {\n  if (x >= 0ull) {}\n}"
Line 6720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6720 always 6720
  "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n"
Line 6722
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6722 always 6722
  "void foo(int x) {\n  if (x >= 0) {}\n}" always "void foo(int x) {\n  if (x >= 0) {}\n}"
Line 6725
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6725 always 6725
  "" always ""
Line 6727
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6727 always 6727
  "void foo(unsigned int x) {\n  if (0 <= x) {}\n}" always "void foo(unsigned int x) {\n  if (0 <= x) {}\n}"
Line 6730
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6730 always 6730
  "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n"
Line 6732
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6732 always 6732
  "void foo(unsigned int x) {\n  if (0ll <= x) {}\n}" always "void foo(unsigned int x) {\n  if (0ll <= x) {}\n}"
Line 6735
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6735 always 6735
  "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n"
Line 6737
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6737 always 6737
  "void foo(int x) {\n  if (0 <= x) {}\n}" always "void foo(int x) {\n  if (0 <= x) {}\n}"
Line 6740
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6740 always 6740
  "" always ""
Line 6742
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6742 always 6742
  "void foo(unsigned int x, bool y) {\n  if (x < 0 && y) {}\n}" always "void foo(unsigned int x, bool y) {\n  if (x < 0 && y) {}\n}"
Line 6745
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6745 always 6745
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6747
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6747 always 6747
  "void foo(int x, bool y) {\n  if (x < 0 && y) {}\n}" always "void foo(int x, bool y) {\n  if (x < 0 && y) {}\n}"
Line 6750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6750 always 6750
  "" always ""
Line 6752
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6752 always 6752
  "void foo(unsigned int x, bool y) {\n  if (0 > x && y) {}\n}" always "void foo(unsigned int x, bool y) {\n  if (0 > x && y) {}\n}"
Line 6755
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6755 always 6755
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6757
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6757 always 6757
  "void foo(int x, bool y) {\n  if (0 > x && y) {}\n}" always "void foo(int x, bool y) {\n  if (0 > x && y) {}\n}"
Line 6760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6760 always 6760
  "" always ""
Line 6762
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6762 always 6762
  "void foo(unsigned int x, bool y) {\n  if (x >= 0 && y) {}\n}" always "void foo(unsigned int x, bool y) {\n  if (x >= 0 && y) {}\n}"
Line 6765
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6765 always 6765
  "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n"
Line 6767
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6767 always 6767
  "void foo(int x, bool y) {\n  if (x >= 0 && y) {}\n}" always "void foo(int x, bool y) {\n  if (x >= 0 && y) {}\n}"
Line 6770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6770 always 6770
  "" always ""
Line 6773
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6773 always 6773
  "void foo(unsigned int x, bool y) {\n  if (y && x < 0) {}\n}" always "void foo(unsigned int x, bool y) {\n  if (y && x < 0) {}\n}"
Line 6776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6776 always 6776
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6778
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6778 always 6778
  "void foo(int x, bool y) {\n  if (y && x < 0) {}\n}" always "void foo(int x, bool y) {\n  if (y && x < 0) {}\n}"
Line 6781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6781 always 6781
  "" always ""
Line 6783
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6783 always 6783
  "void foo(unsigned int x, bool y) {\n  if (y && 0 > x) {}\n}" always "void foo(unsigned int x, bool y) {\n  if (y && 0 > x) {}\n}"
Line 6786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6786 always 6786
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6788
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6788 always 6788
  "void foo(int x, bool y) {\n  if (y && 0 > x) {}\n}" always "void foo(int x, bool y) {\n  if (y && 0 > x) {}\n}"
Line 6791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6791 always 6791
  "" always ""
Line 6793
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6793 always 6793
  "void foo(unsigned int x, bool y) {\n  if (y && x >= 0) {}\n}" always "void foo(unsigned int x, bool y) {\n  if (y && x >= 0) {}\n}"
Line 6796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6796 always 6796
  "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n"
Line 6798
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6798 always 6798
  "void foo(int x, bool y) {\n  if (y && x >= 0) {}\n}" always "void foo(int x, bool y) {\n  if (y && x >= 0) {}\n}"
Line 6801
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6801 always 6801
  "" always ""
Line 6804
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6804 always 6804
  "void foo(unsigned int x, bool y) {\n  if (x < 0 || y) {}\n}" always "void foo(unsigned int x, bool y) {\n  if (x < 0 || y) {}\n}"
Line 6807
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6807 always 6807
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6809
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6809 always 6809
  "void foo(int x, bool y) {\n  if (x < 0 || y) {}\n}" always "void foo(int x, bool y) {\n  if (x < 0 || y) {}\n}"
Line 6812
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6812 always 6812
  "" always ""
Line 6814
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6814 always 6814
  "void foo(unsigned int x, bool y) {\n  if (0 > x || y) {}\n}" always "void foo(unsigned int x, bool y) {\n  if (0 > x || y) {}\n}"
Line 6817
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6817 always 6817
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6819
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6819 always 6819
  "void foo(int x, bool y) {\n  if (0 > x || y) {}\n}" always "void foo(int x, bool y) {\n  if (0 > x || y) {}\n}"
Line 6822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6822 always 6822
  "" always ""
Line 6824
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6824 always 6824
  "void foo(unsigned int x, bool y) {\n  if (x >= 0 || y) {}\n}" always "void foo(unsigned int x, bool y) {\n  if (x >= 0 || y) {}\n}"
Line 6827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6827 always 6827
  "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n" always "[test.cpp:2]: (style) Unsigned expression 'x' can't be negative so it is unnecessary to test it.\n"
Line 6829
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6829 always 6829
  "void foo(int x, bool y) {\n  if (x >= 0 || y) {}\n}" always "void foo(int x, bool y) {\n  if (x >= 0 || y) {}\n}"
Line 6832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6832 always 6832
  "" always ""
Line 6836
  70 always 70
  = always "template<int n> void foo(unsigned int x) {\n  if (x <= n);\n}\nfoo<0>();"
  "template<int n> void foo(unsigned int x) {\n  if (x <= n);\n}\nfoo<0>();" always "template<int n> void foo(unsigned int x) {\n  if (x <= n);\n}\nfoo<0>();"
Line 6840
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6840 always 6840
  code always "template<int n> void foo(unsigned int x) {\n  if (x <= n);\n}\nfoo<0>();"
  nullptr always 0
  false always 0
  false always 0
Line 6841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6841 always 6841
  "" always ""
Line 6842
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6842 always 6842
  code always "template<int n> void foo(unsigned int x) {\n  if (x <= n);\n}\nfoo<0>();"
  nullptr always 0
  false always 0
  true always 1
Line 6843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6843 always 6843
  "" always ""
Line 6848
  = always 1
  true always 1
Line 6849
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6849 always 6849
  "template<int n> void foo(unsigned int x) {\nif (x <= 0);\n}" always "template<int n> void foo(unsigned int x) {\nif (x <= 0);\n}"
  & {lifetime[Address]=(keepTemplates),!0}
Line 6852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6852 always 6852
  "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n" always "[test.cpp:2]: (style) Checking if unsigned expression 'x' is less than zero.\n"
Line 6856
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6856 always 6856
  "uint32_t value = 0xFUL;\nvoid f() {\n  if (value < 0u)\n  {\n    value = 0u;\n  }\n}" always "uint32_t value = 0xFUL;\nvoid f() {\n  if (value < 0u)\n  {\n    value = 0u;\n  }\n}"
Line 6863
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6863 always 6863
  "[test.cpp:3]: (style) Checking if unsigned expression 'value' is less than zero.\n" always "[test.cpp:3]: (style) Checking if unsigned expression 'value' is less than zero.\n"
Line 6868
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6868 always 6868
  "using BOOL = unsigned;\nint i;\nbool f() {\n    return i >= 0;\n}\n" always "using BOOL = unsigned;\nint i;\nbool f() {\n    return i >= 0;\n}\n"
  & {lifetime[Address]=(settings1),!0}
Line 6873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6873 always 6873
  "" always ""
Line 6876
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6876 always 6876
  "void f(void) {\n   const uint32_t x = 0;\n   constexpr const auto y = 0xFFFFU;\n   if (y < x) {}\n}" always "void f(void) {\n   const uint32_t x = 0;\n   constexpr const auto y = 0xFFFFU;\n   if (y < x) {}\n}"
Line 6881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6881 always 6881
  "[test.cpp:4]: (style) Checking if unsigned expression 'y' is less than zero.\n" always "[test.cpp:4]: (style) Checking if unsigned expression 'y' is less than zero.\n"
Line 6885
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6885 always 6885
  "void foo(const int* x) {\n  if (x >= 0) {}\n}" always "void foo(const int* x) {\n  if (x >= 0) {}\n}"
Line 6888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6888 always 6888
  "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" always "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n"
Line 6891
  57 always 57
  = always "void foo(const int* x) {\n  int y = 0;\n  if (x >= y) {}\n}"
  "void foo(const int* x) {\n  int y = 0;\n  if (x >= y) {}\n}" always "void foo(const int* x) {\n  int y = 0;\n  if (x >= y) {}\n}"
Line 6895
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6895 always 6895
  code always "void foo(const int* x) {\n  int y = 0;\n  if (x >= y) {}\n}"
  nullptr always 0
  false always 0
  false always 0
  true always 1
  false always 0
Line 6896
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6896 always 6896
  "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" always "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n"
Line 6897
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6897 always 6897
  code always "void foo(const int* x) {\n  int y = 0;\n  if (x >= y) {}\n}"
  nullptr always 0
  false always 0
  false always 0
  true always 1
  true always 1
Line 6898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6898 always 6898
  "[test.cpp:2] -> [test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n"
Line 6900
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6900 always 6900
  "void foo(const int* x) {\n  if (*x >= 0) {}\n}" always "void foo(const int* x) {\n  if (*x >= 0) {}\n}"
Line 6903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6903 always 6903
  "" always ""
Line 6905
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6905 always 6905
  "void foo(const int* x) {\n  if (x < 0) {}\n}" always "void foo(const int* x) {\n  if (x < 0) {}\n}"
Line 6908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6908 always 6908
  "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" always "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n"
Line 6911
  62 always 62
  = always "void foo(const int* x) {\n  unsigned y = 0u;\n  if (x < y) {}\n}"
  "void foo(const int* x) {\n  unsigned y = 0u;\n  if (x < y) {}\n}" always "void foo(const int* x) {\n  unsigned y = 0u;\n  if (x < y) {}\n}"
Line 6916
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6916 always 6916
  code always "void foo(const int* x) {\n  unsigned y = 0u;\n  if (x < y) {}\n}"
  nullptr always 0
  false always 0
  false always 0
  true always 1
  false always 0
Line 6917
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6917 always 6917
  "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" always "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n"
Line 6918
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6918 always 6918
  code always "void foo(const int* x) {\n  unsigned y = 0u;\n  if (x < y) {}\n}"
  nullptr always 0
  false always 0
  false always 0
  true always 1
  true always 1
Line 6919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6919 always 6919
  "[test.cpp:2] -> [test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n"
Line 6922
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6922 always 6922
  "void foo(const int* x) {\n  if (*x < 0) {}\n}" always "void foo(const int* x) {\n  if (*x < 0) {}\n}"
Line 6925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6925 always 6925
  "" always ""
Line 6927
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6927 always 6927
  "void foo(const int* x, const int* y) {\n  if (x - y < 0) {}\n}" always "void foo(const int* x, const int* y) {\n  if (x - y < 0) {}\n}"
Line 6930
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6930 always 6930
  "" always ""
Line 6932
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6932 always 6932
  "void foo(const int* x, const int* y) {\n  if (x - y <= 0) {}\n}" always "void foo(const int* x, const int* y) {\n  if (x - y <= 0) {}\n}"
Line 6935
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6935 always 6935
  "" always ""
Line 6937
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6937 always 6937
  "void foo(const int* x, const int* y) {\n  if (x - y > 0) {}\n}" always "void foo(const int* x, const int* y) {\n  if (x - y > 0) {}\n}"
Line 6940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6940 always 6940
  "" always ""
Line 6942
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6942 always 6942
  "void foo(const int* x, const int* y) {\n  if (x - y >= 0) {}\n}" always "void foo(const int* x, const int* y) {\n  if (x - y >= 0) {}\n}"
Line 6945
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6945 always 6945
  "" always ""
Line 6947
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6947 always 6947
  "void foo(const Bar* x) {\n  if (0 <= x) {}\n}" always "void foo(const Bar* x) {\n  if (0 <= x) {}\n}"
Line 6950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6950 always 6950
  "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" always "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n"
Line 6952
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6952 always 6952
  "struct S {\n  int* ptr;\n};\nvoid foo(S* first) {\n  if (first.ptr >= 0) {}\n}" always "struct S {\n  int* ptr;\n};\nvoid foo(S* first) {\n  if (first.ptr >= 0) {}\n}"
Line 6958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6958 always 6958
  "[test.cpp:5]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" always "[test.cpp:5]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n"
Line 6960
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6960 always 6960
  "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if((first.ptr - second.ptr) >= 0) {}\n}" always "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if((first.ptr - second.ptr) >= 0) {}\n}"
Line 6966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6966 always 6966
  "" always ""
Line 6968
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6968 always 6968
  "struct S {\n  int* ptr;\n};\nvoid foo(S* first) {\n  if((first.ptr) >= 0) {}\n}" always "struct S {\n  int* ptr;\n};\nvoid foo(S* first) {\n  if((first.ptr) >= 0) {}\n}"
Line 6974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6974 always 6974
  "[test.cpp:5]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n" always "[test.cpp:5]: (style) A pointer can not be negative so it is either pointless or an error to check if it is not.\n"
Line 6976
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6976 always 6976
  "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 <= first.ptr - second.ptr) {}\n}" always "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 <= first.ptr - second.ptr) {}\n}"
Line 6982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6982 always 6982
  "" always ""
Line 6984
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6984 always 6984
  "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 <= (first.ptr - second.ptr)) {}\n}" always "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 <= (first.ptr - second.ptr)) {}\n}"
Line 6990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6990 always 6990
  "" always ""
Line 6992
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6992 always 6992
  "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(first.ptr - second.ptr < 0) {}\n}" always "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(first.ptr - second.ptr < 0) {}\n}"
Line 6998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  6998 always 6998
  "" always ""
Line 7000
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7000 always 7000
  "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if((first.ptr - second.ptr) < 0) {}\n}" always "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if((first.ptr - second.ptr) < 0) {}\n}"
Line 7006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7006 always 7006
  "" always ""
Line 7008
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7008 always 7008
  "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 > first.ptr - second.ptr) {}\n}" always "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 > first.ptr - second.ptr) {}\n}"
Line 7014
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7014 always 7014
  "" always ""
Line 7016
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7016 always 7016
  "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 > (first.ptr - second.ptr)) {}\n}" always "struct S {\n  int* ptr;\n};\nvoid foo(S* first, S* second) {\n  if(0 > (first.ptr - second.ptr)) {}\n}"
Line 7022
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7022 always 7022
  "" always ""
Line 7024
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7024 always 7024
  "void foo(const int* x) {\n  if (0 <= x[0]) {}\n}" always "void foo(const int* x) {\n  if (0 <= x[0]) {}\n}"
Line 7027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7027 always 7027
  "" always ""
Line 7029
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7029 always 7029
  "void foo(Bar* x) {\n  if (0 <= x.y) {}\n}" always "void foo(Bar* x) {\n  if (0 <= x.y) {}\n}"
Line 7032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7032 always 7032
  "" always ""
Line 7034
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7034 always 7034
  "void foo(Bar* x) {\n  if (0 <= x->y) {}\n}" always "void foo(Bar* x) {\n  if (0 <= x->y) {}\n}"
Line 7037
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7037 always 7037
  "" always ""
Line 7039
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7039 always 7039
  "void foo(Bar* x, Bar* y) {\n  if (0 <= x->y - y->y ) {}\n}" always "void foo(Bar* x, Bar* y) {\n  if (0 <= x->y - y->y ) {}\n}"
Line 7042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7042 always 7042
  "" always ""
Line 7044
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7044 always 7044
  "void foo(const Bar* x) {\n  if (0 > x) {}\n}" always "void foo(const Bar* x) {\n  if (0 > x) {}\n}"
Line 7047
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7047 always 7047
  "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" always "[test.cpp:2]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n"
Line 7049
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7049 always 7049
  "void foo(const int* x) {\n  if (0 > x[0]) {}\n}" always "void foo(const int* x) {\n  if (0 > x[0]) {}\n}"
Line 7052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7052 always 7052
  "" always ""
Line 7054
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7054 always 7054
  "void foo(Bar* x) {\n  if (0 > x.y) {}\n}" always "void foo(Bar* x) {\n  if (0 > x.y) {}\n}"
Line 7057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7057 always 7057
  "" always ""
Line 7059
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7059 always 7059
  "void foo(Bar* x) {\n  if (0 > x->y) {}\n}" always "void foo(Bar* x) {\n  if (0 > x->y) {}\n}"
Line 7062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7062 always 7062
  "" always ""
Line 7064
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7064 always 7064
  "void foo() {\n  int (*t)(void *a, void *b);\n  if (t(a, b) < 0) {}\n}" always "void foo() {\n  int (*t)(void *a, void *b);\n  if (t(a, b) < 0) {}\n}"
Line 7068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7068 always 7068
  "" always ""
Line 7070
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7070 always 7070
  "void foo() {\n  int (*t)(void *a, void *b);\n  if (0 > t(a, b)) {}\n}" always "void foo() {\n  int (*t)(void *a, void *b);\n  if (0 > t(a, b)) {}\n}"
Line 7074
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7074 always 7074
  "" always ""
Line 7076
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7076 always 7076
  "struct object_info { int *typep; };\nvoid packed_object_info(struct object_info *oi) {\n  if (oi->typep < 0);\n}" always "struct object_info { int *typep; };\nvoid packed_object_info(struct object_info *oi) {\n  if (oi->typep < 0);\n}"
Line 7080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7080 always 7080
  "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" always "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n"
Line 7082
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7082 always 7082
  "struct object_info { int typep[10]; };\nvoid packed_object_info(struct object_info *oi) {\n  if (oi->typep < 0);\n}" always "struct object_info { int typep[10]; };\nvoid packed_object_info(struct object_info *oi) {\n  if (oi->typep < 0);\n}"
Line 7086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7086 always 7086
  "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n" always "[test.cpp:3]: (style) A pointer can not be negative so it is either pointless or an error to check if it is.\n"
Line 7088
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7088 always 7088
  "struct object_info { int *typep; };\nvoid packed_object_info(struct object_info *oi) {\n  if (*oi->typep < 0);\n}" always "struct object_info { int *typep; };\nvoid packed_object_info(struct object_info *oi) {\n  if (*oi->typep < 0);\n}"
Line 7092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7092 always 7092
  "" always ""
Line 7096
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7096 always 7096
  "void foo() {\n  for(int i = 0; i < 10; ++i);\n}" always "void foo() {\n  for(int i = 0; i < 10; ++i);\n}"
Line 7099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7099 always 7099
  "" always ""
Line 7102
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7102 always 7102
  "void foo() {\n  for(int i = 0; i < 10; ++i); {\n  }\n}" always "void foo() {\n  for(int i = 0; i < 10; ++i); {\n  }\n}"
Line 7106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7106 always 7106
  "[test.cpp:2]: (warning) Suspicious use of ; at the end of 'for' statement.\n" always "[test.cpp:2]: (warning) Suspicious use of ; at the end of 'for' statement.\n"
Line 7108
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7108 always 7108
  "void foo() {\n  while (!quit); {\n    do_something();\n  }\n}" always "void foo() {\n  while (!quit); {\n    do_something();\n  }\n}"
Line 7113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7113 always 7113
  "[test.cpp:2]: (warning) Suspicious use of ; at the end of 'while' statement.\n" always "[test.cpp:2]: (warning) Suspicious use of ; at the end of 'while' statement.\n"
Line 7117
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7117 always 7117
  "void foo() {\n  if (i == 1); {\n    do_something();\n  }\n}" always "void foo() {\n  if (i == 1); {\n    do_something();\n  }\n}"
Line 7122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7122 always 7122
  "[test.cpp:2]: (warning) Suspicious use of ; at the end of 'if' statement.\n" always "[test.cpp:2]: (warning) Suspicious use of ; at the end of 'if' statement.\n"
Line 7125
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7125 always 7125
  "void foo() {\n  if (Match());\n  do_something();\n}" always "void foo() {\n  if (Match());\n  do_something();\n}"
Line 7129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7129 always 7129
  "" always ""
Line 7131
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7131 always 7131
  "void foo() {\n  if (Match());\n  else\n    do_something();\n}" always "void foo() {\n  if (Match());\n  else\n    do_something();\n}"
Line 7136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7136 always 7136
  "" always ""
Line 7138
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7138 always 7138
  "void foo() {\n  if (i == 1)\n       ;\n  {\n    do_something();\n  }\n}" always "void foo() {\n  if (i == 1)\n       ;\n  {\n    do_something();\n  }\n}"
Line 7145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7145 always 7145
  "" always ""
Line 7147
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7147 always 7147
  "void foo() {\n  if (i == 1);\n\n  {\n    do_something();\n  }\n}" always "void foo() {\n  if (i == 1);\n\n  {\n    do_something();\n  }\n}"
Line 7154
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7154 always 7154
  "" always ""
Line 7158
  "#define REQUIRE(code) {code}\nvoid foo() {\n  if (x == 123);\n  REQUIRE(y=z);\n}" always "#define REQUIRE(code) {code}\nvoid foo() {\n  if (x == 123);\n  REQUIRE(y=z);\n}"
Line 7163
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7163 always 7163
  "" always ""
Line 7167
  "void f(int a, int b) {\n  a > b;\n}" always "void f(int a, int b) {\n  a > b;\n}"
Line 7170
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7170 always 7170
  "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '>', result is not used.\n" always "[test.cpp:2]: (warning, inconclusive) Found suspicious operator '>', result is not used.\n"
Line 7172
  "void f() {\n  for (auto p : m)\n    std::vector<std::pair<std::string, std::string>> k;\n}" always "void f() {\n  for (auto p : m)\n    std::vector<std::pair<std::string, std::string>> k;\n}"
Line 7176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7176 always 7176
  "" always ""
Line 7180
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7180 always 7180
  "void foo(char *p) {\n  char *a; a = malloc(1024);\n  free(a + 10);\n}" always "void foo(char *p) {\n  char *a; a = malloc(1024);\n  free(a + 10);\n}"
Line 7184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7184 always 7184
  "[test.cpp:3]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n" always "[test.cpp:3]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n"
Line 7186
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7186 always 7186
  "void foo(char *p) {\n  char *a; a = malloc(1024);\n  free(a - 10);\n}" always "void foo(char *p) {\n  char *a; a = malloc(1024);\n  free(a - 10);\n}"
Line 7190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7190 always 7190
  "[test.cpp:3]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n" always "[test.cpp:3]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n"
Line 7192
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7192 always 7192
  "void foo(char *p) {\n  char *a; a = malloc(1024);\n  free(10 + a);\n}" always "void foo(char *p) {\n  char *a; a = malloc(1024);\n  free(10 + a);\n}"
Line 7196
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7196 always 7196
  "[test.cpp:3]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n" always "[test.cpp:3]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n"
Line 7198
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7198 always 7198
  "void foo(char *p) {\n  char *a; a = new char[1024];\n  delete[] (a + 10);\n}" always "void foo(char *p) {\n  char *a; a = new char[1024];\n  delete[] (a + 10);\n}"
Line 7202
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7202 always 7202
  "[test.cpp:3]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n" always "[test.cpp:3]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n"
Line 7204
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7204 always 7204
  "void foo(char *p) {\n  char *a; a = new char;\n  delete a + 10;\n}" always "void foo(char *p) {\n  char *a; a = new char;\n  delete a + 10;\n}"
Line 7208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7208 always 7208
  "[test.cpp:3]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n" always "[test.cpp:3]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n"
Line 7210
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7210 always 7210
  "void foo(char *p) {\n  char *a; a = new char;\n  bar(a);\n  delete a + 10;\n}" always "void foo(char *p) {\n  char *a; a = new char;\n  bar(a);\n  delete a + 10;\n}"
Line 7215
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7215 always 7215
  "" always ""
Line 7217
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7217 always 7217
  "void foo(char *p) {\n  char *a; a = new char;\n  char *b; b = new char;\n  bar(a);\n  delete a + 10;\n  delete b + 10;\n}" always "void foo(char *p) {\n  char *a; a = new char;\n  char *b; b = new char;\n  bar(a);\n  delete a + 10;\n  delete b + 10;\n}"
Line 7224
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7224 always 7224
  "[test.cpp:6]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n" always "[test.cpp:6]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n"
Line 7226
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7226 always 7226
  "void foo(char *p) {\n  char *a; a = new char;\n  char *b; b = new char;\n  bar(a, b);\n  delete a + 10;\n  delete b + 10;\n}" always "void foo(char *p) {\n  char *a; a = new char;\n  char *b; b = new char;\n  bar(a, b);\n  delete a + 10;\n  delete b + 10;\n}"
Line 7233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7233 always 7233
  "" always ""
Line 7235
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7235 always 7235
  "void foo(char *p) {\n  char *a; a = new char;\n  bar()\n  delete a + 10;\n}" always "void foo(char *p) {\n  char *a; a = new char;\n  bar()\n  delete a + 10;\n}"
Line 7240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7240 always 7240
  "[test.cpp:4]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n" always "[test.cpp:4]: (error) Mismatching address is deleted. The address you get from new must be deleted without offset.\n"
Line 7242
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7242 always 7242
  "void foo(size_t xx) {\n  char *ptr; ptr = malloc(42);\n  ptr += xx;\n  free(ptr + 1 - xx);\n}" always "void foo(size_t xx) {\n  char *ptr; ptr = malloc(42);\n  ptr += xx;\n  free(ptr + 1 - xx);\n}"
Line 7247
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7247 always 7247
  "[test.cpp:4]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n" always "[test.cpp:4]: (error) Mismatching address is freed. The address you get from malloc() must be freed without offset.\n"
Line 7249
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7249 always 7249
  "void foo(size_t xx) {\n  char *ptr; ptr = malloc(42);\n  std::cout << ptr;\n  ptr = otherPtr;\n  free(otherPtr - xx - 1);\n}" always "void foo(size_t xx) {\n  char *ptr; ptr = malloc(42);\n  std::cout << ptr;\n  ptr = otherPtr;\n  free(otherPtr - xx - 1);\n}"
Line 7255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7255 always 7255
  "" always ""
Line 7259
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7259 always 7259
  "const std::string& getA(){static std::string a;return a;}\nvoid foo() {\n    const std::string a = getA();\n}" always "const std::string& getA(){static std::string a;return a;}\nvoid foo() {\n    const std::string a = getA();\n}"
Line 7263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7263 always 7263
  "[test.cpp:3]: (performance, inconclusive) Use const reference for 'a' to avoid unnecessary data copying.\n" always "[test.cpp:3]: (performance, inconclusive) Use const reference for 'a' to avoid unnecessary data copying.\n"
Line 7265
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7265 always 7265
  "class A{public:A(){}};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a = getA();\n    return 0;\n}" always "class A{public:A(){}};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a = getA();\n    return 0;\n}"
Line 7272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7272 always 7272
  "[test.cpp:5]: (performance, inconclusive) Use const reference for 'a' to avoid unnecessary data copying.\n" always "[test.cpp:5]: (performance, inconclusive) Use const reference for 'a' to avoid unnecessary data copying.\n"
Line 7274
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7274 always 7274
  "const int& getA(){static int a;return a;}\nint main()\n{\n    const int a = getA();\n    return 0;\n}" always "const int& getA(){static int a;return a;}\nint main()\n{\n    const int a = getA();\n    return 0;\n}"
Line 7280
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7280 always 7280
  "" always ""
Line 7282
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7282 always 7282
  "const int& getA(){static int a;return a;}\nint main()\n{\n    int getA = 0;\n    const int a = getA + 3;\n    return 0;\n}" always "const int& getA(){static int a;return a;}\nint main()\n{\n    int getA = 0;\n    const int a = getA + 3;\n    return 0;\n}"
Line 7289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7289 always 7289
  "[test.cpp:1] -> [test.cpp:4]: (style) Local variable \'getA\' shadows outer function\n" always "[test.cpp:1] -> [test.cpp:4]: (style) Local variable \'getA\' shadows outer function\n"
Line 7291
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7291 always 7291
  "class A{public:A(){}};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a(getA());\n    return 0;\n}" always "class A{public:A(){}};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a(getA());\n    return 0;\n}"
Line 7298
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7298 always 7298
  "[test.cpp:5]: (performance, inconclusive) Use const reference for 'a' to avoid unnecessary data copying.\n" always "[test.cpp:5]: (performance, inconclusive) Use const reference for 'a' to avoid unnecessary data copying.\n"
Line 7300
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7300 always 7300
  "const int& getA(){static int a;return a;}\nint main()\n{\n    const int a(getA());\n    return 0;\n}" always "const int& getA(){static int a;return a;}\nint main()\n{\n    const int a(getA());\n    return 0;\n}"
Line 7306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7306 always 7306
  "" always ""
Line 7308
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7308 always 7308
  "class A{\npublic:A(int a=0){_a = a;}\nA operator+(const A & a){return A(_a+a._a);}\nprivate:int _a;};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a = getA() + 1;\n    return 0;\n}" always "class A{\npublic:A(int a=0){_a = a;}\nA operator+(const A & a){return A(_a+a._a);}\nprivate:int _a;};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a = getA() + 1;\n    return 0;\n}"
Line 7318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7318 always 7318
  "" always ""
Line 7320
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7320 always 7320
  "class A{\npublic:A(int a=0){_a = a;}\nA operator+(const A & a){return A(_a+a._a);}\nprivate:int _a;};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a(getA()+1);\n    return 0;\n}" always "class A{\npublic:A(int a=0){_a = a;}\nA operator+(const A & a){return A(_a+a._a);}\nprivate:int _a;};\nconst A& getA(){static A a;return a;}\nint main()\n{\n    const A a(getA()+1);\n    return 0;\n}"
Line 7330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7330 always 7330
  "" always ""
Line 7333
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7333 always 7333
  "class A {};\nclass B { B(const A &a); };\nconst A &getA();\nvoid f() {\n    const B b(getA());\n}" always "class A {};\nclass B { B(const A &a); };\nconst A &getA();\nvoid f() {\n    const B b(getA());\n}"
Line 7339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7339 always 7339
  "" always ""
Line 7342
  = always "class Token {\npublic:\n    const std::string& str();\n};\nvoid simplifyArrayAccessSyntax() {\n    for (Token *tok = list.front(); tok; tok = tok->next()) {\n        const std::string temp = tok->str();\n        tok->str(tok->strAt(2));\n    }\n}"
  "class Token {\npublic:\n    const std::string& str();\n};\nvoid simplifyArrayAccessSyntax() {\n    for (Token *tok = list.front(); tok; tok = tok->next()) {\n        const std::string temp = tok->str();\n        tok->str(tok->strAt(2));\n    }\n}" always "class Token {\npublic:\n    const std::string& str();\n};\nvoid simplifyArrayAccessSyntax() {\n    for (Token *tok = list.front(); tok; tok = tok->next()) {\n        const std::string temp = tok->str();\n        tok->str(tok->strAt(2));\n    }\n}"
Line 7352
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7352 always 7352
  code5618 always "class Token {\npublic:\n    const std::string& str();\n};\nvoid simplifyArrayAccessSyntax() {\n    for (Token *tok = list.front(); tok; tok = tok->next()) {\n        const std::string temp = tok->str();\n        tok->str(tok->strAt(2));\n    }\n}"
  nullptr always 0
  false always 0
  true always 1
Line 7353
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7353 always 7353
  "" always ""
  "[test.cpp:7]: (performance, inconclusive) Use const reference for 'temp' to avoid unnecessary data copying.\n" always "[test.cpp:7]: (performance, inconclusive) Use const reference for 'temp' to avoid unnecessary data copying.\n"
Line 7354
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7354 always 7354
  code5618 always "class Token {\npublic:\n    const std::string& str();\n};\nvoid simplifyArrayAccessSyntax() {\n    for (Token *tok = list.front(); tok; tok = tok->next()) {\n        const std::string temp = tok->str();\n        tok->str(tok->strAt(2));\n    }\n}"
  nullptr always 0
  false always 0
  false always 0
Line 7355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7355 always 7355
  "" always ""
Line 7358
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7358 always 7358
  "typedef std::vector<char> X;\nX f<X>(const X &in) {\n    const X s = f<X>(in);\n    return f<X>(s);\n}" always "typedef std::vector<char> X;\nX f<X>(const X &in) {\n    const X s = f<X>(in);\n    return f<X>(s);\n}"
Line 7363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7363 always 7363
  "" always ""
Line 7366
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7366 always 7366
  "class CD {\n        public:\n        CD(const CD&);\n        static const CD& getOne();\n};\n \nvoid foo() {\n  const CD cd(CD::getOne());\n}" always "class CD {\n        public:\n        CD(const CD&);\n        static const CD& getOne();\n};\n \nvoid foo() {\n  const CD cd(CD::getOne());\n}"
  nullptr always 0
  false always 0
  true always 1
Line 7375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7375 always 7375
  "" always ""
Line 7379
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7379 always 7379
  "void foo()\n{\n   int a; a = 123;\n   (void)(a << -1);\n}" always "void foo()\n{\n   int a; a = 123;\n   (void)(a << -1);\n}"
Line 7384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7384 always 7384
  "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n" always "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n"
Line 7385
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7385 always 7385
  "void foo()\n{\n   int a; a = 123;\n   (void)(a >> -1);\n}" always "void foo()\n{\n   int a; a = 123;\n   (void)(a >> -1);\n}"
Line 7390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7390 always 7390
  "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n" always "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n"
Line 7391
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7391 always 7391
  "void foo()\n{\n   int a; a = 123;\n   a <<= -1;\n}" always "void foo()\n{\n   int a; a = 123;\n   a <<= -1;\n}"
Line 7396
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7396 always 7396
  "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n" always "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n"
Line 7397
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7397 always 7397
  "void foo()\n{\n   int a; a = 123;\n   a >>= -1;\n}" always "void foo()\n{\n   int a; a = 123;\n   a >>= -1;\n}"
Line 7402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7402 always 7402
  "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n" always "[test.cpp:4]: (error) Shifting by a negative value is undefined behaviour\n"
Line 7403
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7403 always 7403
  "void foo()\n{\n   std::cout << -1;\n}" always "void foo()\n{\n   std::cout << -1;\n}"
Line 7407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7407 always 7407
  "" always ""
Line 7408
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7408 always 7408
  "void foo()\n{\n   std::cout << a << -1 ;\n}" always "void foo()\n{\n   std::cout << a << -1 ;\n}"
Line 7412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7412 always 7412
  "" always ""
Line 7413
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7413 always 7413
  "void foo()\n{\n   std::cout << 3 << -1 ;\n}" always "void foo()\n{\n   std::cout << 3 << -1 ;\n}"
Line 7417
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7417 always 7417
  "" always ""
Line 7418
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7418 always 7418
  "void foo() {\n   x = (-10+2) << 3;\n}" always "void foo() {\n   x = (-10+2) << 3;\n}"
Line 7421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7421 always 7421
  "[test.cpp:2]: (portability) Shifting a negative value is technically undefined behaviour\n" always "[test.cpp:2]: (portability) Shifting a negative value is technically undefined behaviour\n"
Line 7423
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7423 always 7423
  "x = y ? z << $-1 : 0;" always "x = y ? z << $-1 : 0;"
Line 7424
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7424 always 7424
  "" always ""
Line 7427
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7427 always 7427
  "const int x = -1 >> 2;" always "const int x = -1 >> 2;"
Line 7428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7428 always 7428
  "[test.cpp:1]: (portability) Shifting a negative value is technically undefined behaviour\n" always "[test.cpp:1]: (portability) Shifting a negative value is technically undefined behaviour\n"
Line 7431
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7431 always 7431
  "const int x = (unsigned int)(-1) >> 2;" always "const int x = (unsigned int)(-1) >> 2;"
Line 7432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7432 always 7432
  "" always ""
Line 7435
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7435 always 7435
  "int shift1() { return 1 >> -1 ;}\nint shift2() { return 1 << -1 ;}\nint shift3() { return -1 >> 1 ;}\nint shift4() { return -1 << 1 ;}" always "int shift1() { return 1 >> -1 ;}\nint shift2() { return 1 << -1 ;}\nint shift3() { return -1 >> 1 ;}\nint shift4() { return -1 << 1 ;}"
Line 7439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7439 always 7439
  "[test.cpp:1]: (error) Shifting by a negative value is undefined behaviour\n[test.cpp:2]: (error) Shifting by a negative value is undefined behaviour\n[test.cpp:3]: (portability) Shifting a negative value is technically undefined behaviour\n[test.cpp:4]: (portability) Shifting a negative value is technically undefined behaviour\n" always "[test.cpp:1]: (error) Shifting by a negative value is undefined behaviour\n[test.cpp:2]: (error) Shifting by a negative value is undefined behaviour\n[test.cpp:3]: (portability) Shifting a negative value is technically undefined behaviour\n[test.cpp:4]: (portability) Shifting a negative value is technically undefined behaviour\n"
Line 7446
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7446 always 7446
  "void f() {\n    int a[5];\n    memset(a, 123, 5);\n    memcpy(a, b, 5);\n    memmove(a, b, 5);\n}" always "void f() {\n    int a[5];\n    memset(a, 123, 5);\n    memcpy(a, b, 5);\n    memmove(a, b, 5);\n}"
Line 7452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7452 always 7452
  "[test.cpp:3]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n[test.cpp:4]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memcpy()' with 'sizeof(*a)'?\n[test.cpp:5]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memmove()' with 'sizeof(*a)'?\n" always "[test.cpp:3]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n[test.cpp:4]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memcpy()' with 'sizeof(*a)'?\n[test.cpp:5]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memmove()' with 'sizeof(*a)'?\n"
Line 7457
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7457 always 7457
  "void f() {\n    Foo* a[5];\n    memset(a, 'a', 5);\n}" always "void f() {\n    Foo* a[5];\n    memset(a, 'a', 5);\n}"
Line 7461
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7461 always 7461
  "[test.cpp:3]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n" always "[test.cpp:3]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n"
Line 7463
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7463 always 7463
  "class Foo {int a; int b;};\nvoid f() {\n    Foo a[5];\n    memset(a, 'a', 5);\n}" always "class Foo {int a; int b;};\nvoid f() {\n    Foo a[5];\n    memset(a, 'a', 5);\n}"
Line 7468
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7468 always 7468
  "[test.cpp:4]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n" always "[test.cpp:4]: (warning, inconclusive) Array 'a' is filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n"
Line 7470
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7470 always 7470
  "void f() {\n    Foo a[5];\n    memset(a, 'a', 5);\n}" always "void f() {\n    Foo a[5];\n    memset(a, 'a', 5);\n}"
Line 7474
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7474 always 7474
  "" always ""
Line 7476
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7476 always 7476
  "void f() {\n    char a[5];\n    memset(a, 'a', 5);\n}" always "void f() {\n    char a[5];\n    memset(a, 'a', 5);\n}"
Line 7480
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7480 always 7480
  "" always ""
Line 7482
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7482 always 7482
  "void f() {\n    int a[5];\n    memset(a+15, 'a', 5);\n}" always "void f() {\n    int a[5];\n    memset(a+15, 'a', 5);\n}"
Line 7486
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7486 always 7486
  "" always ""
Line 7488
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7488 always 7488
  "void f() {\n    bool a[5];\n    memset(a, false, 5);\n}" always "void f() {\n    bool a[5];\n    memset(a, false, 5);\n}"
Line 7492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7492 always 7492
  "[test.cpp:3]: (portability, inconclusive) Array 'a' might be filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n" always "[test.cpp:3]: (portability, inconclusive) Array 'a' might be filled incompletely. Did you forget to multiply the size given to 'memset()' with 'sizeof(*a)'?\n"
Line 7499
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7499 always 7499
  "void f(int i) {\n    i = 1;\n    i = 1;\n}" always "void f(int i) {\n    i = 1;\n    i = 1;\n}"
Line 7503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7503 always 7503
  "test.cpp:3:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:2:note:i is assigned\ntest.cpp:3:note:i is overwritten\n" always "test.cpp:3:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:2:note:i is assigned\ntest.cpp:3:note:i is overwritten\n"
Line 7508
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7508 always 7508
  "int i;\nvoid f() {\n    i = 1;\n    i = 1;\n}" always "int i;\nvoid f() {\n    i = 1;\n    i = 1;\n}"
Line 7513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7513 always 7513
  "test.cpp:4:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i is assigned\ntest.cpp:4:note:i is overwritten\n" always "test.cpp:4:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i is assigned\ntest.cpp:4:note:i is overwritten\n"
Line 7517
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7517 always 7517
  "void f() {\n    int i;\n    i = 1;\n    i = 1;\n}" always "void f() {\n    int i;\n    i = 1;\n    i = 1;\n}"
Line 7522
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7522 always 7522
  "test.cpp:4:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i is assigned\ntest.cpp:4:note:i is overwritten\n" always "test.cpp:4:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i is assigned\ntest.cpp:4:note:i is overwritten\n"
Line 7526
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7526 always 7526
  "void f() {\n    static int i;\n    i = 1;\n    i = 1;\n}" always "void f() {\n    static int i;\n    i = 1;\n    i = 1;\n}"
Line 7531
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7531 always 7531
  "error" always "error"
  "" always ""
Line 7533
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7533 always 7533
  "void f() {\n    int i[10];\n    i[2] = 1;\n    i[2] = 1;\n}" always "void f() {\n    int i[10];\n    i[2] = 1;\n    i[2] = 1;\n}"
Line 7538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7538 always 7538
  "test.cpp:4:style:Variable 'i[2]' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i[2] is assigned\ntest.cpp:4:note:i[2] is overwritten\n" always "test.cpp:4:style:Variable 'i[2]' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i[2] is assigned\ntest.cpp:4:note:i[2] is overwritten\n"
Line 7542
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7542 always 7542
  "void f(int x) {\n    int i[10];\n    i[x] = 1;\n    x=1;\n    i[x] = 1;\n}" always "void f(int x) {\n    int i[10];\n    i[x] = 1;\n    x=1;\n    i[x] = 1;\n}"
Line 7548
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7548 always 7548
  "" always ""
Line 7550
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7550 always 7550
  "void f(const int x) {\n    int i[10];\n    i[x] = 1;\n    i[x] = 1;\n}" always "void f(const int x) {\n    int i[10];\n    i[x] = 1;\n    i[x] = 1;\n}"
Line 7555
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7555 always 7555
  "test.cpp:4:style:Variable 'i[x]' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i[x] is assigned\ntest.cpp:4:note:i[x] is overwritten\n" always "test.cpp:4:style:Variable 'i[x]' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i[x] is assigned\ntest.cpp:4:note:i[x] is overwritten\n"
Line 7560
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7560 always 7560
  "void f() {\n    Foo& bar = foo();\n    bar = x;\n}" always "void f() {\n    Foo& bar = foo();\n    bar = x;\n}"
Line 7564
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7564 always 7564
  "" always ""
Line 7566
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7566 always 7566
  "void f() {\n    Foo& bar = foo();\n    bar = x;\n    bar = y;\n}" always "void f() {\n    Foo& bar = foo();\n    bar = x;\n    bar = y;\n}"
Line 7571
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7571 always 7571
  "error" always "error"
  "" always ""
Line 7573
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7573 always 7573
  "void f() {\n    Foo& bar = foo();\n    bar = y();\n    foo();\n    bar = y();\n}" always "void f() {\n    Foo& bar = foo();\n    bar = y();\n    foo();\n    bar = y();\n}"
Line 7579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7579 always 7579
  "" always ""
Line 7582
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7582 always 7582
  "void f(int i) {\n    i = 1;\n    bar();\n    i = 1;\n}" always "void f(int i) {\n    i = 1;\n    bar();\n    i = 1;\n}"
Line 7587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7587 always 7587
  "test.cpp:4:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:2:note:i is assigned\ntest.cpp:4:note:i is overwritten\n" always "test.cpp:4:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:2:note:i is assigned\ntest.cpp:4:note:i is overwritten\n"
Line 7591
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7591 always 7591
  "int i;\nvoid f() {\n    i = 1;\n    bar();\n    i = 1;\n}" always "int i;\nvoid f() {\n    i = 1;\n    bar();\n    i = 1;\n}"
Line 7597
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7597 always 7597
  "" always ""
Line 7599
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7599 always 7599
  "void f() {\n    static int i;\n    i = 1;\n    bar();\n    i = 2;\n}" always "void f() {\n    static int i;\n    i = 1;\n    bar();\n    i = 2;\n}"
Line 7605
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7605 always 7605
  "" always ""
Line 7607
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7607 always 7607
  "void f() {\n    int i;\n    i = 1;\n    bar();\n    i = 1;\n}" always "void f() {\n    int i;\n    i = 1;\n    bar();\n    i = 1;\n}"
Line 7613
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7613 always 7613
  "test.cpp:5:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i is assigned\ntest.cpp:5:note:i is overwritten\n" always "test.cpp:5:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:3:note:i is assigned\ntest.cpp:5:note:i is overwritten\n"
Line 7617
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7617 always 7617
  "void bar(int i) {}\nvoid f(int i) {\n    i = 1;\n    bar(i);\n    i = 1;\n}" always "void bar(int i) {}\nvoid f(int i) {\n    i = 1;\n    bar(i);\n    i = 1;\n}"
Line 7623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7623 always 7623
  "" always ""
Line 7625
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7625 always 7625
  "void f() {\n    Foo bar = foo();\n    bar();\n    bar = y();\n}" always "void f() {\n    Foo bar = foo();\n    bar();\n    bar = y();\n}"
Line 7630
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7630 always 7630
  "" always ""
Line 7633
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7633 always 7633
  "void f(int i) {\n    i = 1;\n    if(x)\n        i = 0;\n}" always "void f(int i) {\n    i = 1;\n    if(x)\n        i = 0;\n}"
Line 7638
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7638 always 7638
  "" always ""
Line 7640
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7640 always 7640
  "void f(int i) {\n    if(x)\n        i = 0;\n    i = 1;\n    i = 2;\n}" always "void f(int i) {\n    if(x)\n        i = 0;\n    i = 1;\n    i = 2;\n}"
Line 7646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7646 always 7646
  "test.cpp:5:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:4:note:i is assigned\ntest.cpp:5:note:i is overwritten\n" always "test.cpp:5:style:Variable 'i' is reassigned a value before the old one has been used.\ntest.cpp:4:note:i is assigned\ntest.cpp:5:note:i is overwritten\n"
Line 7651
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7651 always 7651
  "int x;\nint g() {\n    return x*x;\n}\nvoid f() {\n    x = 2;\n    x = g();\n}" always "int x;\nint g() {\n    return x*x;\n}\nvoid f() {\n    x = 2;\n    x = g();\n}"
Line 7659
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7659 always 7659
  "" always ""
Line 7661
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7661 always 7661
  "int g() {\n    return x*x;\n}\nvoid f(int x) {\n    x = 2;\n    x = g();\n}" always "int g() {\n    return x*x;\n}\nvoid f(int x) {\n    x = 2;\n    x = g();\n}"
Line 7668
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7668 always 7668
  "test.cpp:6:style:Variable 'x' is reassigned a value before the old one has been used.\ntest.cpp:5:note:x is assigned\ntest.cpp:6:note:x is overwritten\n" always "test.cpp:6:style:Variable 'x' is reassigned a value before the old one has been used.\ntest.cpp:5:note:x is assigned\ntest.cpp:6:note:x is overwritten\n"
Line 7672
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7672 always 7672
  "void f() {\n    Foo& bar = foo();\n    bar = x;\n    bar = y();\n}" always "void f() {\n    Foo& bar = foo();\n    bar = x;\n    bar = y();\n}"
Line 7677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7677 always 7677
  "" always ""
Line 7679
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7679 always 7679
  "class C {\n    int x;\n    void g() { return x * x; }\n    void f();\n};\n\nvoid C::f() {\n    x = 2;\n    x = g();\n}" always "class C {\n    int x;\n    void g() { return x * x; }\n    void f();\n};\n\nvoid C::f() {\n    x = 2;\n    x = g();\n}"
Line 7689
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7689 always 7689
  "" always ""
Line 7691
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7691 always 7691
  "class C {\n    int x;\n    void g() { return x*x; }\n    void f(Foo z);\n};\n\nvoid C::f(Foo z) {\n    x = 2;\n    x = z.g();\n}" always "class C {\n    int x;\n    void g() { return x*x; }\n    void f(Foo z);\n};\n\nvoid C::f(Foo z) {\n    x = 2;\n    x = z.g();\n}"
Line 7701
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7701 always 7701
  "" always ""
Line 7704
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7704 always 7704
  "void f() {\n  int x;\n  x = 321;\n  x = ({ asm(123); })\n}" always "void f() {\n  int x;\n  x = 321;\n  x = ({ asm(123); })\n}"
Line 7709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7709 always 7709
  "" always ""
Line 7712
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7712 always 7712
  "int foo(){\n    int x;\n    x = 1;\n    x = 1;\n    return x + 1;\n}" always "int foo(){\n    int x;\n    x = 1;\n    x = 1;\n    return x + 1;\n}"
Line 7718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7718 always 7718
  "test.cpp:4:style:Variable 'x' is reassigned a value before the old one has been used.\ntest.cpp:3:note:x is assigned\ntest.cpp:4:note:x is overwritten\n" always "test.cpp:4:style:Variable 'x' is reassigned a value before the old one has been used.\ntest.cpp:3:note:x is assigned\ntest.cpp:4:note:x is overwritten\n"
Line 7723
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7723 always 7723
  "int foo(){\n    int x;\n    x = 1;\n    if (y)\n        x = 2;\n    return x + 1;\n}" always "int foo(){\n    int x;\n    x = 1;\n    if (y)\n        x = 2;\n    return x + 1;\n}"
Line 7730
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7730 always 7730
  "" always ""
Line 7733
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7733 always 7733
  "void f() {\n    int x = 0;\n    x = 3;\n}" always "void f() {\n    int x = 0;\n    x = 3;\n}"
Line 7737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7737 always 7737
  "" always ""
Line 7739
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7739 always 7739
  "void f() {\n  state_t *x = NULL;\n  x = dostuff();\n}" always "void f() {\n  state_t *x = NULL;\n  x = dostuff();\n}"
Line 7743
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7743 always 7743
  "" always ""
Line 7745
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7745 always 7745
  "void f() {\n  state_t *x;\n  x = NULL;\n  x = dostuff();\n}" always "void f() {\n  state_t *x;\n  x = NULL;\n  x = dostuff();\n}"
Line 7750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7750 always 7750
  "" always ""
Line 7752
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7752 always 7752
  "int foo() {\n    int x;\n    bar(++x);\n    x = 5;\n    return bar(x);\n}" always "int foo() {\n    int x;\n    bar(++x);\n    x = 5;\n    return bar(x);\n}"
Line 7758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7758 always 7758
  "" always ""
Line 7761
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7761 always 7761
  "struct AB { int a; int b; };\n\nint f() {\n    struct AB ab;\n    ab.a = 1;\n    ab.a = 2;\n    return ab.a;\n}" always "struct AB { int a; int b; };\n\nint f() {\n    struct AB ab;\n    ab.a = 1;\n    ab.a = 2;\n    return ab.a;\n}"
Line 7769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7769 always 7769
  "test.cpp:6:style:Variable 'ab.a' is reassigned a value before the old one has been used.\ntest.cpp:5:note:ab.a is assigned\ntest.cpp:6:note:ab.a is overwritten\n" always "test.cpp:6:style:Variable 'ab.a' is reassigned a value before the old one has been used.\ntest.cpp:5:note:ab.a is assigned\ntest.cpp:6:note:ab.a is overwritten\n"
Line 7773
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7773 always 7773
  "struct AB { int a; int b; };\n\nint f() {\n    struct AB ab;\n    ab.a = 1;\n    ab = do_something();\n    return ab.a;\n}" always "struct AB { int a; int b; };\n\nint f() {\n    struct AB ab;\n    ab.a = 1;\n    ab = do_something();\n    return ab.a;\n}"
Line 7781
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7781 always 7781
  "error" always "error"
  "" always ""
Line 7783
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7783 always 7783
  "struct AB { int a; int b; };\n\nint f() {\n    struct AB ab;\n    ab.a = 1;\n    do_something(&ab);\n    ab.a = 2;\n    return ab.a;\n}" always "struct AB { int a; int b; };\n\nint f() {\n    struct AB ab;\n    ab.a = 1;\n    do_something(&ab);\n    ab.a = 2;\n    return ab.a;\n}"
Line 7792
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7792 always 7792
  "" always ""
Line 7794
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7794 always 7794
  "struct AB { int a; int b; };\n\nint f(DO_SOMETHING do_something) {\n    struct AB ab;\n    ab.a = 1;\n    do_something(&ab);\n    ab.a = 2;\n    return ab.a;\n}" always "struct AB { int a; int b; };\n\nint f(DO_SOMETHING do_something) {\n    struct AB ab;\n    ab.a = 1;\n    do_something(&ab);\n    ab.a = 2;\n    return ab.a;\n}"
Line 7803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7803 always 7803
  "" always ""
Line 7805
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7805 always 7805
  "struct AB { int a; int b; };\n\nint f(struct AB *ab) {\n    ab->a = 1;\n    ab->b = 2;\n    ab++;\n    ab->a = 1;\n    ab->b = 2;\n}" always "struct AB { int a; int b; };\n\nint f(struct AB *ab) {\n    ab->a = 1;\n    ab->b = 2;\n    ab++;\n    ab->a = 1;\n    ab->b = 2;\n}"
Line 7814
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7814 always 7814
  "" always ""
Line 7816
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7816 always 7816
  "struct AB { int a; int b; };\n\nint f(struct AB *ab) {\n    ab->a = 1;\n    ab->b = 2;\n    ab = x;\n    ab->a = 1;\n    ab->b = 2;\n}" always "struct AB { int a; int b; };\n\nint f(struct AB *ab) {\n    ab->a = 1;\n    ab->b = 2;\n    ab = x;\n    ab->a = 1;\n    ab->b = 2;\n}"
Line 7825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7825 always 7825
  "" always ""
Line 7827
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7827 always 7827
  "void f(struct AB *ab) {\n    ab->data->x = 1;\n    ab = &ab1;\n    ab->data->x = 2;\n}" always "void f(struct AB *ab) {\n    ab->data->x = 1;\n    ab = &ab1;\n    ab->data->x = 2;\n}"
Line 7832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7832 always 7832
  "" always ""
Line 7835
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7835 always 7835
  "void func(char *buffer, const char *format, int precision, unsigned value) {\n    (precision < 0) ? sprintf(buffer, format, value) : sprintf(buffer, format, precision, value);\n}" always "void func(char *buffer, const char *format, int precision, unsigned value) {\n    (precision < 0) ? sprintf(buffer, format, value) : sprintf(buffer, format, precision, value);\n}"
Line 7838
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7838 always 7838
  "" always ""
Line 7841
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7841 always 7841
  "struct data {\n  struct { int i; } fc;\n};\nstruct state {\n  struct data d[123];\n};\nvoid func(struct state *s) {\n  s->foo[s->x++] = 2;\n  s->d[1].fc.i++;\n}" always "struct data {\n  struct { int i; } fc;\n};\nstruct state {\n  struct data d[123];\n};\nvoid func(struct state *s) {\n  s->foo[s->x++] = 2;\n  s->d[1].fc.i++;\n}"
Line 7853
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7853 always 7853
  "void f(int i) {\n    i = 1;\n    asm(\"foo\");\n    i = 1;\n}" always "void f(int i) {\n    i = 1;\n    asm(\"foo\");\n    i = 1;\n}"
Line 7858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7858 always 7858
  "" always ""
Line 7861
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7861 always 7861
  "void foo() {\n    char *p = 0;\n    try {\n        p = fred();\n        p = wilma();\n    }\n    catch (...) {\n        barney(p);\n    }\n}" always "void foo() {\n    char *p = 0;\n    try {\n        p = fred();\n        p = wilma();\n    }\n    catch (...) {\n        barney(p);\n    }\n}"
Line 7871
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7871 always 7871
  "" always ""
Line 7873
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7873 always 7873
  "void foo() {\n    char *p = 0;\n    try {\n        p = fred();\n        p = wilma();\n    }\n    catch (...) {\n        barney(x);\n    }\n}" always "void foo() {\n    char *p = 0;\n    try {\n        p = fred();\n        p = wilma();\n    }\n    catch (...) {\n        barney(x);\n    }\n}"
Line 7883
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7883 always 7883
  "test.cpp:2:style:The scope of the variable 'p' can be reduced.\n" always "test.cpp:2:style:The scope of the variable 'p' can be reduced.\n"
Line 7886
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7886 always 7886
  "void foo() {\n    char *p = 0;\n    try {\n        if(z) {\n            p = fred();\n            p = wilma();\n        }\n    }\n    catch (...) {\n        barney(p);\n    }\n}" always "void foo() {\n    char *p = 0;\n    try {\n        if(z) {\n            p = fred();\n            p = wilma();\n        }\n    }\n    catch (...) {\n        barney(p);\n    }\n}"
Line 7898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7898 always 7898
  "" always ""
Line 7901
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7901 always 7901
  "void podMemPtrs() {\n    int POD::*memptr;\n    memptr = &POD::a;\n    memptr = &POD::b;\n    if (memptr)\n        memptr = 0;\n}" always "void podMemPtrs() {\n    int POD::*memptr;\n    memptr = &POD::a;\n    memptr = &POD::b;\n    if (memptr)\n        memptr = 0;\n}"
Line 7908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7908 always 7908
  "test.cpp:4:style:Variable 'memptr' is reassigned a value before the old one has been used.\ntest.cpp:3:note:memptr is assigned\ntest.cpp:4:note:memptr is overwritten\n" always "test.cpp:4:style:Variable 'memptr' is reassigned a value before the old one has been used.\ntest.cpp:3:note:memptr is assigned\ntest.cpp:4:note:memptr is overwritten\n"
Line 7913
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7913 always 7913
  "void f(float * var)\n{\n  var[0] = 0.2f;\n  var[0] = 0.2f;\n}" always "void f(float * var)\n{\n  var[0] = 0.2f;\n  var[0] = 0.2f;\n}"
Line 7918
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7918 always 7918
  "test.cpp:4:style:Variable 'var[0]' is reassigned a value before the old one has been used.\ntest.cpp:3:note:var[0] is assigned\ntest.cpp:4:note:var[0] is overwritten\n" always "test.cpp:4:style:Variable 'var[0]' is reassigned a value before the old one has been used.\ntest.cpp:3:note:var[0] is assigned\ntest.cpp:4:note:var[0] is overwritten\n"
Line 7922
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7922 always 7922
  "void f(float * var)\n{\n  *var = 0.2f;\n  *var = 0.2f;\n}" always "void f(float * var)\n{\n  *var = 0.2f;\n  *var = 0.2f;\n}"
Line 7927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7927 always 7927
  "test.cpp:4:style:Variable '*var' is reassigned a value before the old one has been used.\ntest.cpp:3:note:*var is assigned\ntest.cpp:4:note:*var is overwritten\n" always "test.cpp:4:style:Variable '*var' is reassigned a value before the old one has been used.\ntest.cpp:3:note:*var is assigned\ntest.cpp:4:note:*var is overwritten\n"
Line 7932
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7932 always 7932
  "void f() {\n  volatile char *reg = (volatile char *)0x12345;\n  *reg = 12;\n  *reg = 34;\n}" always "void f() {\n  volatile char *reg = (volatile char *)0x12345;\n  *reg = 12;\n  *reg = 34;\n}"
Line 7937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7937 always 7937
  "test.cpp:2:style:C-style pointer casting\n" always "test.cpp:2:style:C-style pointer casting\n"
Line 7941
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7941 always 7941
  "void f() {\n   int a = 0;\n   a = 4;\n}" always "void f() {\n   int a = 0;\n   a = 4;\n}"
Line 7945
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7945 always 7945
  "" always ""
Line 7947
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7947 always 7947
  "void f() {\n   int a;\n   a = 0;\n   a = 4;\n}" always "void f() {\n   int a;\n   a = 0;\n   a = 4;\n}"
Line 7952
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7952 always 7952
  "" always ""
Line 7954
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7954 always 7954
  "void f() {\n   unsigned a;\n   a = 0u;\n   a = 2u;\n}" always "void f() {\n   unsigned a;\n   a = 0u;\n   a = 2u;\n}"
Line 7959
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7959 always 7959
  "" always ""
Line 7961
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7961 always 7961
  "void f() {\n   void* a;\n   a = (void*)0;\n   a = p;\n}" always "void f() {\n   void* a;\n   a = (void*)0;\n   a = p;\n}"
Line 7966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7966 always 7966
  "" always ""
Line 7968
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7968 always 7968
  "void f() {\n   void* a;\n   a = (void*)0U;\n   a = p;\n}" always "void f() {\n   void* a;\n   a = (void*)0U;\n   a = p;\n}"
Line 7973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7973 always 7973
  "" always ""
Line 7977
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7977 always 7977
  "struct foo {\n  int a,b;\n};\n\nint main() {\n  struct foo x;\n  x.a = _mm_set1_ps(1.0);\n  x.a = _mm_set1_ps(2.0);\n}" always "struct foo {\n  int a,b;\n};\n\nint main() {\n  struct foo x;\n  x.a = _mm_set1_ps(1.0);\n  x.a = _mm_set1_ps(2.0);\n}"
Line 7986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7986 always 7986
  "[test.cpp:7] -> [test.cpp:8]: (style) Variable 'x.a' is reassigned a value before the old one has been used.\n" always "[test.cpp:7] -> [test.cpp:8]: (style) Variable 'x.a' is reassigned a value before the old one has been used.\n"
Line 7988
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7988 always 7988
  "void f() {\n  struct AB ab;\n  ab.x = 23;\n  ab.y = 41;\n  ab.x = 1;\n}" always "void f() {\n  struct AB ab;\n  ab.x = 23;\n  ab.y = 41;\n  ab.x = 1;\n}"
Line 7994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7994 always 7994
  "[test.cpp:3] -> [test.cpp:5]: (style) Variable 'ab.x' is reassigned a value before the old one has been used.\n" always "[test.cpp:3] -> [test.cpp:5]: (style) Variable 'ab.x' is reassigned a value before the old one has been used.\n"
Line 7996
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  7996 always 7996
  "void f() {\n  struct AB ab = {0};\n  ab = foo();\n}" always "void f() {\n  struct AB ab = {0};\n  ab = foo();\n}"
Line 8000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8000 always 8000
  "" always ""
Line 8005
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8005 always 8005
  "sal_Int32 impl_Export() {\n   try {\n        try  {\n          uno::Sequence< uno::Any > aArgs(2);\n          beans::NamedValue aValue;\n          aValue.Name = \"DocumentHandler\";\n          aValue.Value <<= xDocHandler;\n          aArgs[0] <<= aValue;\n          aValue.Name = \"Model\";\n          aValue.Value <<= xDocumentComp;\n          aArgs[1] <<= aValue;\n        }\n        catch (const uno::Exception&) {\n        }\n   }\n   catch (const uno::Exception&)  {\n   }\n}" always "sal_Int32 impl_Export() {\n   try {\n        try  {\n          uno::Sequence< uno::Any > aArgs(2);\n          beans::NamedValue aValue;\n          aValue.Name = \"DocumentHandler\";\n          aValue.Value <<= xDocHandler;\n          aArgs[0] <<= aValue;\n          aValue.Name = \"Model\";\n          aValue.Value <<= xDocumentComp;\n          aArgs[1] <<= aValue;\n        }\n        catch (const uno::Exception&) {\n        }\n   }\n   catch (const uno::Exception&)  {\n   }\n}"
  "test.cpp" always "test.cpp"
  false always 0
  true always 1
Line 8023
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8023 always 8023
  "" always ""
Line 8025
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8025 always 8025
  "void ConvertBitmapData(sal_uInt16 nDestBits) {\n    BitmapBuffer aSrcBuf;\n    aSrcBuf.mnBitCount = nSrcBits;\n    BitmapBuffer aDstBuf;\n    aSrcBuf.mnBitCount = nDestBits;\n    bConverted = ::ImplFastBitmapConversion( aDstBuf, aSrcBuf, aTwoRects );\n}" always "void ConvertBitmapData(sal_uInt16 nDestBits) {\n    BitmapBuffer aSrcBuf;\n    aSrcBuf.mnBitCount = nSrcBits;\n    BitmapBuffer aDstBuf;\n    aSrcBuf.mnBitCount = nDestBits;\n    bConverted = ::ImplFastBitmapConversion( aDstBuf, aSrcBuf, aTwoRects );\n}"
  "test.c" always "test.c"
Line 8032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8032 always 8032
  "[test.c:3] -> [test.c:5]: (style) Variable 'aSrcBuf.mnBitCount' is reassigned a value before the old one has been used.\n" always "[test.c:3] -> [test.c:5]: (style) Variable 'aSrcBuf.mnBitCount' is reassigned a value before the old one has been used.\n"
Line 8033
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8033 always 8033
  "void ConvertBitmapData(sal_uInt16 nDestBits) {\n    BitmapBuffer aSrcBuf;\n    aSrcBuf.mnBitCount = nSrcBits;\n    BitmapBuffer aDstBuf;\n    aSrcBuf.mnBitCount = nDestBits;\n    bConverted = ::ImplFastBitmapConversion( aDstBuf, aSrcBuf, aTwoRects );\n}" always "void ConvertBitmapData(sal_uInt16 nDestBits) {\n    BitmapBuffer aSrcBuf;\n    aSrcBuf.mnBitCount = nSrcBits;\n    BitmapBuffer aDstBuf;\n    aSrcBuf.mnBitCount = nDestBits;\n    bConverted = ::ImplFastBitmapConversion( aDstBuf, aSrcBuf, aTwoRects );\n}"
Line 8040
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8040 always 8040
  "[test.cpp:3] -> [test.cpp:5]: (style) Variable 'aSrcBuf.mnBitCount' is reassigned a value before the old one has been used.\n" always "[test.cpp:3] -> [test.cpp:5]: (style) Variable 'aSrcBuf.mnBitCount' is reassigned a value before the old one has been used.\n"
Line 8043
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8043 always 8043
  "class C { void operator=(int x); };\nvoid f() {\n    C c;\n    c = x;\n    c = x;\n}" always "class C { void operator=(int x); };\nvoid f() {\n    C c;\n    c = x;\n    c = x;\n}"
Line 8049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8049 always 8049
  "[test.cpp:4] -> [test.cpp:5]: (style, inconclusive) Variable 'c' is reassigned a value before the old one has been used if variable is no semaphore variable.\n" always "[test.cpp:4] -> [test.cpp:5]: (style, inconclusive) Variable 'c' is reassigned a value before the old one has been used if variable is no semaphore variable.\n"
Line 8053
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8053 always 8053
  "typedef struct message_node {\n  char code;\n  size_t size;\n  struct message_node *next, *prev;\n} *message_list;\nstatic message_list remove_message_from_list(message_list m) {\n    m->prev->next = m->next;\n    m->next->prev = m->prev;\n    return m->next;\n}" always "typedef struct message_node {\n  char code;\n  size_t size;\n  struct message_node *next, *prev;\n} *message_list;\nstatic message_list remove_message_from_list(message_list m) {\n    m->prev->next = m->next;\n    m->next->prev = m->prev;\n    return m->next;\n}"
Line 8063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8063 always 8063
  "" always ""
Line 8068
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8068 always 8068
  "int foo() {\n    int x = 0, y = 0;\n    auto f = [&]() { if (x < 5) ++y; };\n    x = 2;\n    f();\n    x = 6;\n    f();\n    return y;\n}" always "int foo() {\n    int x = 0, y = 0;\n    auto f = [&]() { if (x < 5) ++y; };\n    x = 2;\n    f();\n    x = 6;\n    f();\n    return y;\n}"
Line 8077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8077 always 8077
  "" always ""
Line 8080
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8080 always 8080
  "std::tuple<int, int> g();\nvoid h(int);\nvoid f() {\n    auto [a, b] = g();\n    auto l = [a = a]() { h(i); };\n}\n" always "std::tuple<int, int> g();\nvoid h(int);\nvoid f() {\n    auto [a, b] = g();\n    auto l = [a = a]() { h(i); };\n}\n"
Line 8086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8086 always 8086
  "" always ""
Line 8090
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8090 always 8090
  "void f() {\n    char buf[10];\n    int i;\n    for (i = 0; i < 4; i++)\n        buf[i] = 131;\n    buf[i] = 0;\n}" always "void f() {\n    char buf[10];\n    int i;\n    for (i = 0; i < 4; i++)\n        buf[i] = 131;\n    buf[i] = 0;\n}"
Line 8097
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8097 always 8097
  "" always ""
Line 8099
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8099 always 8099
  "void bar() {\n    int x = 0;\n    x = 432;\n    do {\n        if (foo()) break;\n        x = 1;\n     } while (false);\n}" always "void bar() {\n    int x = 0;\n    x = 432;\n    do {\n        if (foo()) break;\n        x = 1;\n     } while (false);\n}"
Line 8107
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8107 always 8107
  "" always ""
Line 8109
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8109 always 8109
  "void foo(int num) {\n  int a = num;\n  for (int b = 0; b < num; a = b++)\n    dostuff(a);\n}" always "void foo(int num) {\n  int a = num;\n  for (int b = 0; b < num; a = b++)\n    dostuff(a);\n}"
Line 8114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8114 always 8114
  "" always ""
Line 8116
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8116 always 8116
  "void foo(int num) {\n  int a = num;\n  for (int b = 0; b < num; a = b++);\n}" always "void foo(int num) {\n  int a = num;\n  for (int b = 0; b < num; a = b++);\n}"
Line 8120
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8120 always 8120
  "error" always "error"
  "" always ""
Line 8124
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8124 always 8124
  "void f(int x) {\n    int ret;\n    switch (x) {\n    case 123:\n        ret = 1;\n        break;\n    }\n    ret = 3;\n}" always "void f(int x) {\n    int ret;\n    switch (x) {\n    case 123:\n        ret = 1;\n        break;\n    }\n    ret = 3;\n}"
Line 8133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8133 always 8133
  "[test.cpp:5] -> [test.cpp:8]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n" always "[test.cpp:5] -> [test.cpp:8]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n"
Line 8137
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8137 always 8137
  "void f(int *ptr) {\n    int *x = ptr + 1;\n    *x = 23;\n    foo(ptr);\n    *x = 32;\n}" always "void f(int *ptr) {\n    int *x = ptr + 1;\n    *x = 23;\n    foo(ptr);\n    *x = 32;\n}"
Line 8143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8143 always 8143
  "" always ""
Line 8146
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8146 always 8146
  "void f() {\n  char x[2];\n  char* p = x;\n  *p = 1;\n  p += 1;\n  *p = 1;\n}" always "void f() {\n  char x[2];\n  char* p = x;\n  *p = 1;\n  p += 1;\n  *p = 1;\n}"
Line 8153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8153 always 8153
  "" always ""
Line 8157
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8157 always 8157
  "void f(int *p) {\n    *p = 1;\n    if (condition) return;\n    *p = 2;\n}" always "void f(int *p) {\n    *p = 1;\n    if (condition) return;\n    *p = 2;\n}"
Line 8162
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8162 always 8162
  "" always ""
Line 8166
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8166 always 8166
  "void f() {\n    int arr[10];\n    int i = 0;\n    arr[i] = 1;\n    i += 2;\n    arr[i] = 3;\n    dostuff(arr);\n}" always "void f() {\n    int arr[10];\n    int i = 0;\n    arr[i] = 1;\n    i += 2;\n    arr[i] = 3;\n    dostuff(arr);\n}"
Line 8174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8174 always 8174
  "" always ""
Line 8179
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8179 always 8179
  "void f(int a, int b) {\n    int ret = 0;\n    switch (a) {\n    case 1:\n        ret = 543;\n        if (b) break;\n        ret = 1;\n        break;\n    }    return ret;\n}" always "void f(int a, int b) {\n    int ret = 0;\n    switch (a) {\n    case 1:\n        ret = 543;\n        if (b) break;\n        ret = 1;\n        break;\n    }    return ret;\n}"
Line 8190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8190 always 8190
  "" always ""
Line 8192
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8192 always 8192
  "void f(int a, int b) {\n    int ret = 0;\n    switch (a) {\n    case 1:\n        ret = 543;\n        if (b) break;\n        ret = 1;\n        break;\n    }}" always "void f(int a, int b) {\n    int ret = 0;\n    switch (a) {\n    case 1:\n        ret = 543;\n        if (b) break;\n        ret = 1;\n        break;\n    }}"
Line 8202
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8202 always 8202
  "[test.cpp:5] -> [test.cpp:7]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n" always "[test.cpp:5] -> [test.cpp:7]: (style) Variable 'ret' is reassigned a value before the old one has been used.\n"
Line 8208
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8208 always 8208
  "void f() {\n    int err = -ENOMEM;\n    err = dostuff();\n}" always "void f() {\n    int err = -ENOMEM;\n    err = dostuff();\n}"
Line 8212
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8212 always 8212
  "test.cpp:3:style:Redundant initialization for 'err'. The initialized value is overwritten before it is read.\ntest.cpp:2:note:err is initialized\ntest.cpp:3:note:err is overwritten\n" always "test.cpp:3:style:Redundant initialization for 'err'. The initialized value is overwritten before it is read.\ntest.cpp:2:note:err is initialized\ntest.cpp:3:note:err is overwritten\n"
Line 8217
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8217 always 8217
  "void f() {\n    struct S s = {1,2,3};\n    s = dostuff();\n}" always "void f() {\n    struct S s = {1,2,3};\n    s = dostuff();\n}"
Line 8221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8221 always 8221
  "test.cpp:3:style:Redundant initialization for 's'. The initialized value is overwritten before it is read.\ntest.cpp:2:note:s is initialized\ntest.cpp:3:note:s is overwritten\n" always "test.cpp:3:style:Redundant initialization for 's'. The initialized value is overwritten before it is read.\ntest.cpp:2:note:s is initialized\ntest.cpp:3:note:s is overwritten\n"
Line 8226
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8226 always 8226
  "void f() {\n    int *p = NULL;\n    p = dostuff();\n}" always "void f() {\n    int *p = NULL;\n    p = dostuff();\n}"
Line 8230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8230 always 8230
  "" always ""
Line 8233
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8233 always 8233
  "void f() {\n    struct S s = {0};\n    s = dostuff();\n}" always "void f() {\n    struct S s = {0};\n    s = dostuff();\n}"
Line 8237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8237 always 8237
  "" always ""
Line 8239
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8239 always 8239
  "namespace N { enum E {e0,e1}; }\nvoid f() {\n    N::E e = N::e0;\n    e = dostuff();\n}" always "namespace N { enum E {e0,e1}; }\nvoid f() {\n    N::E e = N::e0;\n    e = dostuff();\n}"
Line 8244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8244 always 8244
  "" always ""
Line 8246
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8246 always 8246
  "void f() {\n    std::shared_ptr<int> i = g();\n    h();\n    i = nullptr;\n}\n" always "void f() {\n    std::shared_ptr<int> i = g();\n    h();\n    i = nullptr;\n}\n"
Line 8251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8251 always 8251
  "" always ""
Line 8253
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8253 always 8253
  "int f(const std::vector<int>& v) {\n    int i = g();\n    i = std::distance(v.begin(), std::find_if(v.begin(), v.end(), [=](int j) { return i == j; }));\n    return i;\n}\n" always "int f(const std::vector<int>& v) {\n    int i = g();\n    i = std::distance(v.begin(), std::find_if(v.begin(), v.end(), [=](int j) { return i == j; }));\n    return i;\n}\n"
Line 8258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8258 always 8258
  "" always ""
Line 8266
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8266 always 8266
  "void f() {\n    char a[10];\n    memcpy(a, foo, bar);\n    memset(a, 0, bar);\n}" always "void f() {\n    char a[10];\n    memcpy(a, foo, bar);\n    memset(a, 0, bar);\n}"
Line 8271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8271 always 8271
  "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'a' is being written before its old content has been used.\n" always "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'a' is being written before its old content has been used.\n"
Line 8273
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8273 always 8273
  "void f() {\n    char a[10];\n    strcpy(a, foo);\n    strncpy(a, 0, bar);\n}" always "void f() {\n    char a[10];\n    strcpy(a, foo);\n    strncpy(a, 0, bar);\n}"
Line 8278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8278 always 8278
  "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'a' is being written before its old content has been used.\n" always "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'a' is being written before its old content has been used.\n"
Line 8280
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8280 always 8280
  "void f() {\n    char a[10];\n    sprintf(a, \"foo\");\n    memmove(a, 0, bar);\n}" always "void f() {\n    char a[10];\n    sprintf(a, \"foo\");\n    memmove(a, 0, bar);\n}"
Line 8285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8285 always 8285
  "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'a' is being written before its old content has been used.\n" always "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'a' is being written before its old content has been used.\n"
Line 8287
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8287 always 8287
  "void f(char *filename) {\n    char *p = strrchr(filename,'.');\n    strcpy(p, \"foo\");\n    dostuff(filename);\n    strcpy(p, \"foo\");\n}" always "void f(char *filename) {\n    char *p = strrchr(filename,'.');\n    strcpy(p, \"foo\");\n    dostuff(filename);\n    strcpy(p, \"foo\");\n}"
Line 8293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8293 always 8293
  "" always ""
Line 8296
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8296 always 8296
  "void f(void* a) {\n    memcpy(a, foo, bar);\n    memset(a+5, 0, bar);\n}" always "void f(void* a) {\n    memcpy(a, foo, bar);\n    memset(a+5, 0, bar);\n}"
Line 8300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8300 always 8300
  "" always ""
Line 8303
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8303 always 8303
  "void f(void* a, void* b) {\n    memset(a, 0, 5);\n    memcpy(b, a, 5);\n    memset(a, 1, 5);\n}" always "void f(void* a, void* b) {\n    memset(a, 0, 5);\n    memcpy(b, a, 5);\n    memset(a, 1, 5);\n}"
Line 8308
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8308 always 8308
  "" always ""
Line 8311
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8311 always 8311
  "void f() {\n    char a[10];\n    strcpy(a, foo);\n    strcat(a, bar);\n    strcpy(a, x);\n}" always "void f() {\n    char a[10];\n    strcpy(a, foo);\n    strcat(a, bar);\n    strcpy(a, x);\n}"
Line 8317
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8317 always 8317
  "[test.cpp:3] -> [test.cpp:5]: (performance) Buffer 'a' is being written before its old content has been used.\n" always "[test.cpp:3] -> [test.cpp:5]: (performance) Buffer 'a' is being written before its old content has been used.\n"
Line 8320
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8320 always 8320
  "void f() {\n    char a[10];\n    snprintf(a, foo, bar);\n    bar();\n    memset(a, 0, size);\n}" always "void f() {\n    char a[10];\n    snprintf(a, foo, bar);\n    bar();\n    memset(a, 0, size);\n}"
Line 8326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8326 always 8326
  "[test.cpp:3] -> [test.cpp:5]: (performance) Buffer 'a' is being written before its old content has been used.\n" always "[test.cpp:3] -> [test.cpp:5]: (performance) Buffer 'a' is being written before its old content has been used.\n"
Line 8328
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8328 always 8328
  "void* a;\nvoid f() {\n    memset(a, 0, size);\n    bar();\n    memset(a, 0, size);\n}" always "void* a;\nvoid f() {\n    memset(a, 0, size);\n    bar();\n    memset(a, 0, size);\n}"
Line 8334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8334 always 8334
  "" always ""
Line 8336
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8336 always 8336
  "void f() {\n    char a[10];\n    memset(a, 0, size);\n    bar();\n    memset(a, 0, size);\n}" always "void f() {\n    char a[10];\n    memset(a, 0, size);\n    bar();\n    memset(a, 0, size);\n}"
Line 8342
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8342 always 8342
  "[test.cpp:3] -> [test.cpp:5]: (performance) Buffer 'a' is being written before its old content has been used.\n" always "[test.cpp:3] -> [test.cpp:5]: (performance) Buffer 'a' is being written before its old content has been used.\n"
  "" always ""
Line 8344
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8344 always 8344
  "void bar(void* a) {}\nvoid f(void* a) {\n    memset(a, 0, size);\n    bar(a);\n    memset(a, 0, size);\n}" always "void bar(void* a) {}\nvoid f(void* a) {\n    memset(a, 0, size);\n    bar(a);\n    memset(a, 0, size);\n}"
Line 8350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8350 always 8350
  "" always ""
Line 8353
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8353 always 8353
  "void f(void* a) {\n    memset(a, 0, size);\n    if(x)\n        memset(a, 0, size);\n}" always "void f(void* a) {\n    memset(a, 0, size);\n    if(x)\n        memset(a, 0, size);\n}"
Line 8358
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8358 always 8358
  "" always ""
Line 8361
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8361 always 8361
  "void f(void) {    char buf[10];\n    memset(buf, 0, 10);\n    strcpy(buf, string);\n}" always "void f(void) {    char buf[10];\n    memset(buf, 0, 10);\n    strcpy(buf, string);\n}"
Line 8366
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8366 always 8366
  "" always ""
Line 8368
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8368 always 8368
  "void f(void) {\n    char buf[10] = {0};\n    memset(buf, 0, 10);\n    strcpy(buf, string);\n}" always "void f(void) {\n    char buf[10] = {0};\n    memset(buf, 0, 10);\n    strcpy(buf, string);\n}"
Line 8373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8373 always 8373
  "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'buf' is being written before its old content has been used.\n" always "[test.cpp:3] -> [test.cpp:4]: (performance) Buffer 'buf' is being written before its old content has been used.\n"
Line 8376
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8376 always 8376
  "int f(void* a) {\n    int i = atoi(strcpy(a, foo));\n    strncpy(a, 0, bar);\n    return i;\n}" always "int f(void* a) {\n    int i = atoi(strcpy(a, foo));\n    strncpy(a, 0, bar);\n    return i;\n}"
Line 8381
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8381 always 8381
  "" always ""
Line 8384
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8384 always 8384
  "void f() {\n    char buf[100];\n    strcpy(buf, x);\n    strcpy(buf, dostuff(buf));\n    strcpy(buf, x);\n}" always "void f() {\n    char buf[100];\n    strcpy(buf, x);\n    strcpy(buf, dostuff(buf));\n    strcpy(buf, x);\n}"
Line 8390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8390 always 8390
  "" always ""
Line 8392
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8392 always 8392
  "void f() {\n    char buf[100];\n    strcpy(buf, x);\n    strcpy(buf, dostuff(buf));\n    strcpy(buf, x);\n}" always "void f() {\n    char buf[100];\n    strcpy(buf, x);\n    strcpy(buf, dostuff(buf));\n    strcpy(buf, x);\n}"
Line 8398
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8398 always 8398
  "error" always "error"
  "" always ""
Line 8402
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8402 always 8402
  "void a(...);\nvoid b() { a(NULL); }" always "void a(...);\nvoid b() { a(NULL); }"
Line 8404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8404 always 8404
  "[test.cpp:2]: (portability) Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\n" always "[test.cpp:2]: (portability) Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\n"
Line 8406
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8406 always 8406
  "void a(char *p, ...);\nvoid b() { a(NULL, 2); }" always "void a(char *p, ...);\nvoid b() { a(NULL, 2); }"
Line 8408
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8408 always 8408
  "" always ""
Line 8413
  "void f(){\nint pipefd[1];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}" always "void f(){\nint pipefd[1];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}"
Line 8419
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8419 always 8419
  "[test.cpp:3]: (error) Buffer 'pipefd' must have size of 2 integers if used as parameter of pipe().\n" always "[test.cpp:3]: (error) Buffer 'pipefd' must have size of 2 integers if used as parameter of pipe().\n"
Line 8421
  "void f(){\nint pipefd[2];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}" always "void f(){\nint pipefd[2];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}"
Line 8427
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8427 always 8427
  "" always ""
Line 8429
  "void f(){\nint pipefd[20];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}" always "void f(){\nint pipefd[20];\nif (pipe(pipefd) == -1) {\n    return;\n  }\n}"
Line 8435
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8435 always 8435
  "" always ""
Line 8437
  "void f(){\nint pipefd[1];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}" always "void f(){\nint pipefd[1];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}"
Line 8443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8443 always 8443
  "[test.cpp:3]: (error) Buffer 'pipefd' must have size of 2 integers if used as parameter of pipe().\n" always "[test.cpp:3]: (error) Buffer 'pipefd' must have size of 2 integers if used as parameter of pipe().\n"
Line 8445
  "void f(){\nint pipefd[2];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}" always "void f(){\nint pipefd[2];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}"
Line 8451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8451 always 8451
  "" always ""
Line 8453
  "void f(){\nint pipefd[20];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}" always "void f(){\nint pipefd[20];\nif (pipe2(pipefd,0) == -1) {\n    return;\n  }\n}"
Line 8459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8459 always 8459
  "" always ""
Line 8462
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8462 always 8462
  "void foo (int* arrayPtr)\n{\n  if (pipe (arrayPtr) < 0)\n  {}\n}" always "void foo (int* arrayPtr)\n{\n  if (pipe (arrayPtr) < 0)\n  {}\n}"
Line 8467
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8467 always 8467
  "" always ""
Line 8470
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8470 always 8470
  "void foo() {\n  int *cp;\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}" always "void foo() {\n  int *cp;\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}"
Line 8476
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8476 always 8476
  "" always ""
Line 8479
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8479 always 8479
  "void foo() {\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}" always "void foo() {\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}"
Line 8484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8484 always 8484
  "" always ""
Line 8487
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8487 always 8487
  "void foo() {\n  int *cp;\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}" always "void foo() {\n  int *cp;\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}"
Line 8493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8493 always 8493
  "" always ""
Line 8496
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8496 always 8496
  "void foo() {\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}" always "void foo() {\n  if ( pipe (cp) == -1 ) {\n     return;\n  }\n}"
Line 8501
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8501 always 8501
  "" always ""
Line 8507
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8507 always 8507
  "void f() {\nunsigned char c; c = getchar();\n  while( c != EOF)\n  {\n    bar(c);\n    c = getchar();\n  } ;\n}" always "void f() {\nunsigned char c; c = getchar();\n  while( c != EOF)\n  {\n    bar(c);\n    c = getchar();\n  } ;\n}"
Line 8515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8515 always 8515
  "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n" always "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n"
Line 8517
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8517 always 8517
  "void f() {\nunsigned char c = getchar();\n  while( EOF != c)\n  {\n    bar(c);\n  } ;\n}" always "void f() {\nunsigned char c = getchar();\n  while( EOF != c)\n  {\n    bar(c);\n  } ;\n}"
Line 8524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8524 always 8524
  "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n" always "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n"
Line 8526
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8526 always 8526
  "void f() {\n  unsigned char c; c = getchar();\n  while( EOF != c )\n  {\n    bar(c);\n    c = getchar();\n  } ;\n}" always "void f() {\n  unsigned char c; c = getchar();\n  while( EOF != c )\n  {\n    bar(c);\n    c = getchar();\n  } ;\n}"
Line 8534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8534 always 8534
  "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n" always "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n"
Line 8536
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8536 always 8536
  "void f() {\n  unsigned char c;\n  while( EOF != ( c = getchar() ) )\n  {\n  }\n}" always "void f() {\n  unsigned char c;\n  while( EOF != ( c = getchar() ) )\n  {\n  }\n}"
Line 8542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8542 always 8542
  "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n" always "[test.cpp:3]: (warning) Storing getchar() return value in char variable and then comparing with EOF.\n"
Line 8544
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8544 always 8544
  "void f() {\n  int i; i = getchar();\n  while( i != EOF)\n  {\n    bar(i);\n    i = getchar();\n  } ;\n}" always "void f() {\n  int i; i = getchar();\n  while( i != EOF)\n  {\n    bar(i);\n    i = getchar();\n  } ;\n}"
Line 8552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8552 always 8552
  "" always ""
Line 8554
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8554 always 8554
  "void f() {\n  int i; i = getchar();\n  while( EOF != i )\n  {\n    bar(i);\n    i = getchar();\n  } ;\n}" always "void f() {\n  int i; i = getchar();\n  while( EOF != i )\n  {\n    bar(i);\n    i = getchar();\n  } ;\n}"
Line 8562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8562 always 8562
  "" always ""
Line 8566
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8566 always 8566
  "void f (FILE * pFile){\nunsigned char c;\ndo {\n  c = getc (pFile);\n} while (c != EOF)}" always "void f (FILE * pFile){\nunsigned char c;\ndo {\n  c = getc (pFile);\n} while (c != EOF)}"
Line 8572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8572 always 8572
  "[test.cpp:5]: (warning) Storing getc() return value in char variable and then comparing with EOF.\n" always "[test.cpp:5]: (warning) Storing getc() return value in char variable and then comparing with EOF.\n"
Line 8574
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8574 always 8574
  "void f (FILE * pFile){\nunsigned char c;\ndo {\n  c = getc (pFile);\n} while (EOF != c)}" always "void f (FILE * pFile){\nunsigned char c;\ndo {\n  c = getc (pFile);\n} while (EOF != c)}"
Line 8580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8580 always 8580
  "[test.cpp:5]: (warning) Storing getc() return value in char variable and then comparing with EOF.\n" always "[test.cpp:5]: (warning) Storing getc() return value in char variable and then comparing with EOF.\n"
Line 8582
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8582 always 8582
  "void f (FILE * pFile){\nint i;\ndo {\n  i = getc (pFile);\n} while (i != EOF)}" always "void f (FILE * pFile){\nint i;\ndo {\n  i = getc (pFile);\n} while (i != EOF)}"
Line 8588
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8588 always 8588
  "" always ""
Line 8590
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8590 always 8590
  "void f (FILE * pFile){\nint i;\ndo {\n  i = getc (pFile);\n} while (EOF != i)}" always "void f (FILE * pFile){\nint i;\ndo {\n  i = getc (pFile);\n} while (EOF != i)}"
Line 8596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8596 always 8596
  "" always ""
Line 8600
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8600 always 8600
  "void f (FILE * pFile){\nunsigned char c;\ndo {\n  c = fgetc (pFile);\n} while (c != EOF)}" always "void f (FILE * pFile){\nunsigned char c;\ndo {\n  c = fgetc (pFile);\n} while (c != EOF)}"
Line 8606
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8606 always 8606
  "[test.cpp:5]: (warning) Storing fgetc() return value in char variable and then comparing with EOF.\n" always "[test.cpp:5]: (warning) Storing fgetc() return value in char variable and then comparing with EOF.\n"
Line 8608
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8608 always 8608
  "void f (FILE * pFile){\nchar c;\ndo {\n  c = fgetc (pFile);\n} while (EOF != c)}" always "void f (FILE * pFile){\nchar c;\ndo {\n  c = fgetc (pFile);\n} while (EOF != c)}"
Line 8614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8614 always 8614
  "[test.cpp:5]: (warning) Storing fgetc() return value in char variable and then comparing with EOF.\n" always "[test.cpp:5]: (warning) Storing fgetc() return value in char variable and then comparing with EOF.\n"
Line 8616
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8616 always 8616
  "void f (FILE * pFile){\nsigned char c;\ndo {\n  c = fgetc (pFile);\n} while (EOF != c)}" always "void f (FILE * pFile){\nsigned char c;\ndo {\n  c = fgetc (pFile);\n} while (EOF != c)}"
Line 8622
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8622 always 8622
  "" always ""
Line 8624
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8624 always 8624
  "void f (FILE * pFile){\nint i;\ndo {\n  i = fgetc (pFile);\n} while (i != EOF)}" always "void f (FILE * pFile){\nint i;\ndo {\n  i = fgetc (pFile);\n} while (i != EOF)}"
Line 8630
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8630 always 8630
  "" always ""
Line 8632
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8632 always 8632
  "void f (FILE * pFile){\nint i;\ndo {\n  i = fgetc (pFile);\n} while (EOF != i)}" always "void f (FILE * pFile){\nint i;\ndo {\n  i = fgetc (pFile);\n} while (EOF != i)}"
Line 8638
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8638 always 8638
  "" always ""
Line 8641
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8641 always 8641
  "void f(){\n   char ch; ch = std::cin.get();\n   while (EOF != ch) {\n        std::cout << ch;\n        ch = std::cin.get();\n   }\n}" always "void f(){\n   char ch; ch = std::cin.get();\n   while (EOF != ch) {\n        std::cout << ch;\n        ch = std::cin.get();\n   }\n}"
Line 8648
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8648 always 8648
  "[test.cpp:3]: (warning) Storing cin.get() return value in char variable and then comparing with EOF.\n" always "[test.cpp:3]: (warning) Storing cin.get() return value in char variable and then comparing with EOF.\n"
Line 8650
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8650 always 8650
  "void f(){\n   char ch; ch = std::cin.get();\n   while (ch != EOF) {\n        std::cout << ch;\n        ch = std::cin.get();\n   }\n}" always "void f(){\n   char ch; ch = std::cin.get();\n   while (ch != EOF) {\n        std::cout << ch;\n        ch = std::cin.get();\n   }\n}"
Line 8657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8657 always 8657
  "[test.cpp:3]: (warning) Storing cin.get() return value in char variable and then comparing with EOF.\n" always "[test.cpp:3]: (warning) Storing cin.get() return value in char variable and then comparing with EOF.\n"
Line 8659
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8659 always 8659
  "void f(){\n   int i; i = std::cin.get();\n   while ( EOF != i ) {\n        std::cout << i;\n        i = std::cin.get();\n   }\n}" always "void f(){\n   int i; i = std::cin.get();\n   while ( EOF != i ) {\n        std::cout << i;\n        i = std::cin.get();\n   }\n}"
Line 8666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8666 always 8666
  "" always ""
Line 8668
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8668 always 8668
  "void f(){\n   int i; i = std::cin.get();\n   while ( i != EOF ) {\n        std::cout << i;\n        i = std::cin.get();\n   }\n}" always "void f(){\n   int i; i = std::cin.get();\n   while ( i != EOF ) {\n        std::cout << i;\n        i = std::cin.get();\n   }\n}"
Line 8675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8675 always 8675
  "" always ""
Line 8679
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8679 always 8679
  "int fun(int a) {\n  if (a < 0)\n    return a++,\n  do_something();\n}" always "int fun(int a) {\n  if (a < 0)\n    return a++,\n  do_something();\n}"
  nullptr always 0
  true always 1
  false always 0
  false always 0
Line 8684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8684 always 8684
  "[test.cpp:3]: (style) Comma is used in return statement. The comma can easily be misread as a ';'.\n" always "[test.cpp:3]: (style) Comma is used in return statement. The comma can easily be misread as a ';'.\n"
Line 8686
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8686 always 8686
  "int fun(int a) {\n  if (a < 0)\n    return a++, do_something();\n}" always "int fun(int a) {\n  if (a < 0)\n    return a++, do_something();\n}"
  nullptr always 0
  true always 1
  false always 0
  false always 0
Line 8690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8690 always 8690
  "" always ""
Line 8692
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8692 always 8692
  "int fun(int a) {\n  if (a < 0)\n    return a+5,\n  do_something();\n}" always "int fun(int a) {\n  if (a < 0)\n    return a+5,\n  do_something();\n}"
  nullptr always 0
  true always 1
  false always 0
  false always 0
Line 8697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8697 always 8697
  "[test.cpp:3]: (style) Comma is used in return statement. The comma can easily be misread as a ';'.\n" always "[test.cpp:3]: (style) Comma is used in return statement. The comma can easily be misread as a ';'.\n"
Line 8699
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8699 always 8699
  "int fun(int a) {\n  if (a < 0)\n    return a+5, do_something();\n}" always "int fun(int a) {\n  if (a < 0)\n    return a+5, do_something();\n}"
  nullptr always 0
  true always 1
  false always 0
  false always 0
Line 8703
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8703 always 8703
  "" always ""
Line 8705
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8705 always 8705
  "int fun(int a) {\n  if (a < 0)\n    return c<int,\nint>::b;\n}" always "int fun(int a) {\n  if (a < 0)\n    return c<int,\nint>::b;\n}"
  nullptr always 0
  true always 1
  false always 0
  false always 0
Line 8709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8709 always 8709
  "" always ""
Line 8712
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8712 always 8712
  "std::vector<Foo> Bar() {\n    return\n    {\n        { \"1\" },\n        { \"2\" },\n        { \"3\" }\n    };\n}" always "std::vector<Foo> Bar() {\n    return\n    {\n        { \"1\" },\n        { \"2\" },\n        { \"3\" }\n    };\n}"
  nullptr always 0
  true always 1
  false always 0
  false always 0
Line 8720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8720 always 8720
  "" always ""
Line 8725
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8725 always 8725
  "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    explicit B(A a) : a(std::move(a)) {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;};" always "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    explicit B(A a) : a(std::move(a)) {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;};"
  nullptr always 0
  false always 0
  false always 0
  true always 1
Line 8736
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8736 always 8736
  "" always ""
Line 8738
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8738 always 8738
  "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    explicit B(A a) : a{std::move(a)} {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;};" always "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    explicit B(A a) : a{std::move(a)} {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;};"
  nullptr always 0
  false always 0
  false always 0
  true always 1
Line 8749
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8749 always 8749
  "" always ""
Line 8751
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8751 always 8751
  "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    B(A a, A a2) : a{std::move(a)}, a2{std::move(a2)} {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;    A a2;};" always "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    B(A a, A a2) : a{std::move(a)}, a2{std::move(a2)} {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;    A a2;};"
  nullptr always 0
  false always 0
  false always 0
  true always 1
Line 8763
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8763 always 8763
  "" always ""
Line 8765
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8765 always 8765
  "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    B(A a, A a2) : a{std::move(a)}, a2{a2} {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;    A a2;};" always "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    B(A a, A a2) : a{std::move(a)}, a2{a2} {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;    A a2;};"
  nullptr always 0
  false always 0
  false always 0
  true always 1
Line 8777
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8777 always 8777
  "[test.cpp:8]: (performance) Function parameter 'a2' should be passed by const reference.\n" always "[test.cpp:8]: (performance) Function parameter 'a2' should be passed by const reference.\n"
Line 8779
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8779 always 8779
  "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    B(A a, A a2) : a{std::move(a)}, a2(a2) {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;    A a2;};" always "struct A\n{\n    std::vector<int> x;\n};\n\nstruct B\n{\n    B(A a, A a2) : a{std::move(a)}, a2(a2) {}\n    void Init(A _a) { a = std::move(_a); }\n    A a;    A a2;};"
  nullptr always 0
  false always 0
  false always 0
  true always 1
Line 8791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8791 always 8791
  "[test.cpp:8]: (performance) Function parameter 'a2' should be passed by const reference.\n" always "[test.cpp:8]: (performance) Function parameter 'a2' should be passed by const reference.\n"
Line 8793
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8793 always 8793
  "std::map<int, int> m;\nvoid f(const decltype(m)::const_iterator i) {}" always "std::map<int, int> m;\nvoid f(const decltype(m)::const_iterator i) {}"
Line 8795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8795 always 8795
  "" always ""
Line 8800
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8800 always 8800
  "bool f(int x){\n   return isless(x,x);\n}" always "bool f(int x){\n   return isless(x,x);\n}"
Line 8803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8803 always 8803
  "[test.cpp:2]: (warning) Comparison of two identical variables with isless(x,x) always evaluates to false.\n" always "[test.cpp:2]: (warning) Comparison of two identical variables with isless(x,x) always evaluates to false.\n"
Line 8805
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8805 always 8805
  "bool f(int x){\n   return isgreater(x,x);\n}" always "bool f(int x){\n   return isgreater(x,x);\n}"
Line 8808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8808 always 8808
  "[test.cpp:2]: (warning) Comparison of two identical variables with isgreater(x,x) always evaluates to false.\n" always "[test.cpp:2]: (warning) Comparison of two identical variables with isgreater(x,x) always evaluates to false.\n"
Line 8810
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8810 always 8810
  "bool f(int x){\n   return islessgreater(x,x);\n}" always "bool f(int x){\n   return islessgreater(x,x);\n}"
Line 8813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8813 always 8813
  "[test.cpp:2]: (warning) Comparison of two identical variables with islessgreater(x,x) always evaluates to false.\n" always "[test.cpp:2]: (warning) Comparison of two identical variables with islessgreater(x,x) always evaluates to false.\n"
Line 8815
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8815 always 8815
  "bool f(int x){\n   return islessequal(x,x);\n}" always "bool f(int x){\n   return islessequal(x,x);\n}"
Line 8818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8818 always 8818
  "[test.cpp:2]: (warning) Comparison of two identical variables with islessequal(x,x) always evaluates to true.\n" always "[test.cpp:2]: (warning) Comparison of two identical variables with islessequal(x,x) always evaluates to true.\n"
Line 8820
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8820 always 8820
  "bool f(int x){\n   return isgreaterequal(x,x);\n}" always "bool f(int x){\n   return isgreaterequal(x,x);\n}"
Line 8823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8823 always 8823
  "[test.cpp:2]: (warning) Comparison of two identical variables with isgreaterequal(x,x) always evaluates to true.\n" always "[test.cpp:2]: (warning) Comparison of two identical variables with isgreaterequal(x,x) always evaluates to true.\n"
Line 8826
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8826 always 8826
  "bool f(int x, int y){\n   return isgreaterequal(x,y) && islessequal(x,y) && islessgreater(x,y) && isgreater(x,y) && isless(x,y);\n}" always "bool f(int x, int y){\n   return isgreaterequal(x,y) && islessequal(x,y) && islessgreater(x,y) && isgreater(x,y) && isless(x,y);\n}"
Line 8829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8829 always 8829
  "" always ""
Line 8834
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8834 always 8834
  "void f(unsigned long long ull) {\n    if (ull == 0x89504e470d0a1a0a || ull == 0x8a4d4e470d0a1a0a) ;\n}" always "void f(unsigned long long ull) {\n    if (ull == 0x89504e470d0a1a0a || ull == 0x8a4d4e470d0a1a0a) ;\n}"
Line 8837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8837 always 8837
  "" always ""
Line 8841
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8841 always 8841
  "int *f(int *x) {\n    return &*x;\n}\n" always "int *f(int *x) {\n    return &*x;\n}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8844
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8844 always 8844
  "[test.cpp:2]: (style) Redundant pointer operation on 'x' - it's already a pointer.\n" always "[test.cpp:2]: (style) Redundant pointer operation on 'x' - it's already a pointer.\n"
Line 8846
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8846 always 8846
  "int *f(int *y) {\n    return &(*y);\n}\n" always "int *f(int *y) {\n    return &(*y);\n}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8849 always 8849
  "[test.cpp:2]: (style) Redundant pointer operation on 'y' - it's already a pointer.\n" always "[test.cpp:2]: (style) Redundant pointer operation on 'y' - it's already a pointer.\n"
Line 8851
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8851 always 8851
  "int f() {\n    int value = 4;\n    int result1 = *(&value);\n    int result2 = *&value;\n    return result1 + result2;\n}\n" always "int f() {\n    int value = 4;\n    int result1 = *(&value);\n    int result2 = *&value;\n    return result1 + result2;\n}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8857
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8857 always 8857
  "[test.cpp:3]: (style) Redundant pointer operation on 'value' - it's already a variable.\n[test.cpp:4]: (style) Redundant pointer operation on 'value' - it's already a variable.\n" always "[test.cpp:3]: (style) Redundant pointer operation on 'value' - it's already a variable.\n[test.cpp:4]: (style) Redundant pointer operation on 'value' - it's already a variable.\n"
Line 8861
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8861 always 8861
  "void f(int& a, int b) {\n    *(&a) = b;\n}\n" always "void f(int& a, int b) {\n    *(&a) = b;\n}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8864
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8864 always 8864
  "[test.cpp:2]: (style) Redundant pointer operation on 'a' - it's already a variable.\n" always "[test.cpp:2]: (style) Redundant pointer operation on 'a' - it's already a variable.\n"
Line 8867
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8867 always 8867
  "void f(int**& p) {}\n" always "void f(int**& p) {}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8868 always 8868
  "" always ""
Line 8870
  "#define	RESTORE(ORIG, COPY) { *ORIG = *COPY; }\nvoid f(int* p, int i) {\n    RESTORE(p, &i);\n}\n" always "#define	RESTORE(ORIG, COPY) { *ORIG = *COPY; }\nvoid f(int* p, int i) {\n    RESTORE(p, &i);\n}\n"
Line 8874
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8874 always 8874
  "" always ""
Line 8877
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8877 always 8877
  "void f(const int *b) {\n    int x = 0x20 & *b;\n}\n" always "void f(const int *b) {\n    int x = 0x20 & *b;\n}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8880
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8880 always 8880
  "" always ""
Line 8883
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8883 always 8883
  "void f(struct foo **my_struct) {\n    char **pass_to_func = &(*my_struct)->buf;\n}\n" always "void f(struct foo **my_struct) {\n    char **pass_to_func = &(*my_struct)->buf;\n}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8886 always 8886
  "" always ""
Line 8889
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8889 always 8889
  "void f(struct foo **my_struct) {\n    char **pass_to_func = &(*my_struct)->buf[10];\n}\n" always "void f(struct foo **my_struct) {\n    char **pass_to_func = &(*my_struct)->buf[10];\n}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8892 always 8892
  "" always ""
Line 8895
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8895 always 8895
  "void f(char **ptr) {\n    int *x = &(*ptr)[10];\n}\n" always "void f(char **ptr) {\n    int *x = &(*ptr)[10];\n}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8898 always 8898
  "" always ""
Line 8901
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8901 always 8901
  "void f(Mutex *mut) {\n    pthread_mutex_lock(&*mut);\n}\n" always "void f(Mutex *mut) {\n    pthread_mutex_lock(&*mut);\n}\n"
  nullptr always 0
  false always 0
  false always 0
Line 8904
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8904 always 8904
  "[test.cpp:2]: (style) Redundant pointer operation on 'mut' - it's already a pointer.\n" always "[test.cpp:2]: (style) Redundant pointer operation on 'mut' - it's already a pointer.\n"
Line 8907
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8907 always 8907
  "void f(char *ptr) {\n    if (&*ptr == NULL)\n        return;\n}\n" always "void f(char *ptr) {\n    if (&*ptr == NULL)\n        return;\n}\n"
  nullptr always 0
  false always 0
  true always 1
Line 8911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8911 always 8911
  "[test.cpp:2]: (style) Redundant pointer operation on 'ptr' - it's already a pointer.\n" always "[test.cpp:2]: (style) Redundant pointer operation on 'ptr' - it's already a pointer.\n"
Line 8914
  "#define MUTEX_LOCK(m) pthread_mutex_lock(&(m))\nvoid f(struct mutex *mut) {\n    MUTEX_LOCK(*mut);\n}\n" always "#define MUTEX_LOCK(m) pthread_mutex_lock(&(m))\nvoid f(struct mutex *mut) {\n    MUTEX_LOCK(*mut);\n}\n"
Line 8918
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8918 always 8918
  "" always ""
Line 8920
  "#define B(op)        bar(op)\n#define C(orf)       B(&orf)\nvoid foo(const int * pkey) {\n    C(*pkey);\n}\n" always "#define B(op)        bar(op)\n#define C(orf)       B(&orf)\nvoid foo(const int * pkey) {\n    C(*pkey);\n}\n"
Line 8925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8925 always 8925
  "" always ""
Line 8929
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8929 always 8929
  "bool isInUnoIncludeFile(StringRef name) {   return  name.startswith(SRCDIR \"/com/\") || name.startswith(SRCDIR \"/uno/\");\n};" always "bool isInUnoIncludeFile(StringRef name) {   return  name.startswith(SRCDIR \"/com/\") || name.startswith(SRCDIR \"/uno/\");\n};"
  "test.cpp" always "test.cpp"
  false always 0
  false always 0
Line 8932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8932 always 8932
  "" always ""
Line 8936
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    whatever();\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    whatever();\n}"
Line 8941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8941 always 8941
  "" always ""
Line 8943
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter)\n        return;\n    destroy();\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter)\n        return;\n    destroy();\n}"
Line 8950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8950 always 8950
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 8952
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (!counter)\n        destroy();\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (!counter)\n        destroy();\n}"
Line 8958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8958 always 8958
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 8960
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter > 0)\n        return;\n    destroy();\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter > 0)\n        return;\n    destroy();\n}"
Line 8967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8967 always 8967
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 8969
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 < counter)\n        return;\n    destroy();\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 < counter)\n        return;\n    destroy();\n}"
Line 8976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8976 always 8976
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 8978
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter == 0)\n        destroy();\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter == 0)\n        destroy();\n}"
Line 8984
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8984 always 8984
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 8986
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 == counter)\n        destroy();\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 == counter)\n        destroy();\n}"
Line 8992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  8992 always 8992
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 8994
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 != counter)\n        return;\n    destroy()\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 != counter)\n        return;\n    destroy()\n}"
Line 9001
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9001 always 9001
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9003
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter != 0)\n        return;\n    destroy()\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter != 0)\n        return;\n    destroy()\n}"
Line 9010
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9010 always 9010
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9012
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter <= 0)\n        destroy();\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (counter <= 0)\n        destroy();\n}"
Line 9018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9018 always 9018
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9020
  "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 >= counter)\n        destroy();\n}" always "void f() {\n    int counter = 0;\n    InterlockedDecrement(&counter);\n    if (0 >= counter)\n        destroy();\n}"
Line 9026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9026 always 9026
  "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:4]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9028
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount)\n        return;\n    destroy();\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount)\n        return;\n    destroy();\n}"
Line 9035
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9035 always 9035
  "" always ""
Line 9037
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (!newCount)\n        destroy();\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (!newCount)\n        destroy();\n}"
Line 9043
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9043 always 9043
  "" always ""
Line 9045
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount > 0)\n        return;\n    destroy();\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount > 0)\n        return;\n    destroy();\n}"
Line 9052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9052 always 9052
  "" always ""
Line 9054
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 < newCount)\n        return;\n    destroy();\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 < newCount)\n        return;\n    destroy();\n}"
Line 9061
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9061 always 9061
  "" always ""
Line 9063
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount == 0)\n        destroy();\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount == 0)\n        destroy();\n}"
Line 9069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9069 always 9069
  "" always ""
Line 9071
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 == newCount)\n        destroy();\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 == newCount)\n        destroy();\n}"
Line 9077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9077 always 9077
  "" always ""
Line 9079
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 != newCount)\n        return;\n    destroy()\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 != newCount)\n        return;\n    destroy()\n}"
Line 9086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9086 always 9086
  "" always ""
Line 9088
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount != 0)\n        return;\n    destroy()\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount != 0)\n        return;\n    destroy()\n}"
Line 9095
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9095 always 9095
  "" always ""
Line 9097
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount <= 0)\n        destroy();\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (newCount <= 0)\n        destroy();\n}"
Line 9103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9103 always 9103
  "" always ""
Line 9105
  "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 >= newCount)\n        destroy;\n}" always "void f() {\n    int counter = 0;\n    int newCount = InterlockedDecrement(&counter);\n    if (0 >= newCount)\n        destroy;\n}"
Line 9111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9111 always 9111
  "" always ""
Line 9113
  "int f() {\n    int counter = 0;\n    if (InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else {\n        return counter;\n    }\n}" always "int f() {\n    int counter = 0;\n    if (InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else {\n        return counter;\n    }\n}"
Line 9122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9122 always 9122
  "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9124
  "int f() {\n    int counter = 0;\n    if (::InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else {\n        return counter;\n    }\n}" always "int f() {\n    int counter = 0;\n    if (::InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else {\n        return counter;\n    }\n}"
Line 9133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9133 always 9133
  "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9136
  "int f() {\n    int counter = 0;\n    if (InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    }\n    return counter;\n}" always "int f() {\n    int counter = 0;\n    if (InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    }\n    return counter;\n}"
Line 9144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9144 always 9144
  "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9146
  "int f() {\n    int counter = 0;\n    if (::InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    }\n    return counter;\n}" always "int f() {\n    int counter = 0;\n    if (::InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    }\n    return counter;\n}"
Line 9154
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9154 always 9154
  "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9156
  "int f() {\n    int counter = 0;\n    if (InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else\n        return counter;\n   \n}" always "int f() {\n    int counter = 0;\n    if (InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else\n        return counter;\n   \n}"
Line 9165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9165 always 9165
  "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9167
  "int f() {\n    int counter = 0;\n    if (::InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else\n        return counter;\n   \n}" always "int f() {\n    int counter = 0;\n    if (::InterlockedDecrement(&counter) == 0) {\n        destroy();\n        return 0;\n    } else\n        return counter;\n   \n}"
Line 9176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9176 always 9176
  "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n" always "[test.cpp:7]: (error) Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.\n"
Line 9180
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9180 always 9180
  "void f() {\n    label:\n}" always "void f() {\n    label:\n}"
Line 9183
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9183 always 9183
  "[test.cpp:2]: (style) Label 'label' is not used.\n" always "[test.cpp:2]: (style) Label 'label' is not used.\n"
Line 9185
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9185 always 9185
  "void f() {\n    label:\n    foo();\n    goto label;\n}" always "void f() {\n    label:\n    foo();\n    goto label;\n}"
Line 9190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9190 always 9190
  "" always ""
Line 9192
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9192 always 9192
  "void f() {\n    label:\n    foo();\n    goto label;\n}\nvoid g() {\n    label:\n}" always "void f() {\n    label:\n    foo();\n    goto label;\n}\nvoid g() {\n    label:\n}"
Line 9200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9200 always 9200
  "[test.cpp:7]: (style) Label 'label' is not used.\n" always "[test.cpp:7]: (style) Label 'label' is not used.\n"
Line 9202
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9202 always 9202
  "void f() {\n    switch(a) {\n        default:\n    }\n}" always "void f() {\n    switch(a) {\n        default:\n    }\n}"
Line 9207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9207 always 9207
  "" always ""
Line 9209
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9209 always 9209
  "void f() {\n    class X {\n        protected:\n    };\n}" always "void f() {\n    class X {\n        protected:\n    };\n}"
Line 9214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9214 always 9214
  "" always ""
Line 9216
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9216 always 9216
  "void f() {\n    class X {\n        my_protected:\n    };\n}" always "void f() {\n    class X {\n        my_protected:\n    };\n}"
Line 9221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9221 always 9221
  "" always ""
Line 9223
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9223 always 9223
  "int test(char art) {\n    switch (art) {\n    caseZERO:\n        return 0;\n    case1:\n        return 1;\n    case 2:\n        return 2;\n    }\n}" always "int test(char art) {\n    switch (art) {\n    caseZERO:\n        return 0;\n    case1:\n        return 1;\n    case 2:\n        return 2;\n    }\n}"
Line 9233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9233 always 9233
  "[test.cpp:3]: (warning) Label 'caseZERO' is not used. Should this be a 'case' of the enclosing switch()?\n[test.cpp:5]: (warning) Label 'case1' is not used. Should this be a 'case' of the enclosing switch()?\n" always "[test.cpp:3]: (warning) Label 'caseZERO' is not used. Should this be a 'case' of the enclosing switch()?\n[test.cpp:5]: (warning) Label 'case1' is not used. Should this be a 'case' of the enclosing switch()?\n"
Line 9236
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9236 always 9236
  "int test(char art) {\n    switch (art) {\n    case 2:\n        return 2;\n    }\n    label:\n}" always "int test(char art) {\n    switch (art) {\n    case 2:\n        return 2;\n    }\n    label:\n}"
Line 9243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9243 always 9243
  "[test.cpp:6]: (style) Label 'label' is not used.\n" always "[test.cpp:6]: (style) Label 'label' is not used.\n"
Line 9247
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9247 always 9247
  "void f() {\n  int x = dostuff();\n  return x + x++;\n}" always "void f() {\n  int x = dostuff();\n  return x + x++;\n}"
  "test.c" always "test.c"
Line 9251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9251 always 9251
  "[test.c:3]: (error) Expression 'x+x++' depends on order of evaluation of side effects\n" always "[test.c:3]: (error) Expression 'x+x++' depends on order of evaluation of side effects\n"
Line 9254
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9254 always 9254
  "long int f1(const char *exp) {\n  return strtol(++exp, (char **)&exp, 10);\n}" always "long int f1(const char *exp) {\n  return strtol(++exp, (char **)&exp, 10);\n}"
  "test.c" always "test.c"
Line 9257
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9257 always 9257
  "" always ""
Line 9259
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9259 always 9259
  "long int f1(const char *exp) {\n  return dostuff(++exp, exp, 10);\n}" always "long int f1(const char *exp) {\n  return dostuff(++exp, exp, 10);\n}"
  "test.c" always "test.c"
Line 9262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9262 always 9262
  "[test.c:2]: (error) Expression '++exp,exp' depends on order of evaluation of side effects\n" always "[test.c:2]: (error) Expression '++exp,exp' depends on order of evaluation of side effects\n"
Line 9264
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9264 always 9264
  "void f() {\n  int a;\n  while (a=x(), a==123) {}\n}" always "void f() {\n  int a;\n  while (a=x(), a==123) {}\n}"
  "test.c" always "test.c"
Line 9268
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9268 always 9268
  "" always ""
Line 9271
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9271 always 9271
  "void f(int argc, char *const argv[]) {\n    char **local_argv = safe_malloc(sizeof (*local_argv));\n    int local_argc = 0;\n    local_argv[local_argc++] = argv[0];\n}\n" always "void f(int argc, char *const argv[]) {\n    char **local_argv = safe_malloc(sizeof (*local_argv));\n    int local_argc = 0;\n    local_argv[local_argc++] = argv[0];\n}\n"
  "test.c" always "test.c"
Line 9276
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9276 always 9276
  "[test.c:1]: (style) Parameter 'argv' can be declared with const\n" always "[test.c:1]: (style) Parameter 'argv' can be declared with const\n"
Line 9278
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9278 always 9278
  "void f() {\n  int x = 0;\n  return 0 + x++;\n}\n" always "void f() {\n  int x = 0;\n  return 0 + x++;\n}\n"
  "test.c" always "test.c"
Line 9282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9282 always 9282
  "" always ""
Line 9284
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9284 always 9284
  "void f(int x, int y) {\n  int a[10];\n  a[x+y] = a[y+x]++;;\n}\n" always "void f(int x, int y) {\n  int a[10];\n  a[x+y] = a[y+x]++;;\n}\n"
  "test.c" always "test.c"
Line 9288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9288 always 9288
  "[test.c:3]: (error) Expression 'a[x+y]=a[y+x]++' depends on order of evaluation of side effects\n" always "[test.c:3]: (error) Expression 'a[x+y]=a[y+x]++' depends on order of evaluation of side effects\n"
Line 9293
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9293 always 9293
  "void f() {\n  int x = x = y + 1;\n}" always "void f() {\n  int x = x = y + 1;\n}"
  "test.c" always "test.c"
Line 9296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9296 always 9296
  "[test.c:2]: (warning) Redundant assignment of 'x' to itself.\n" always "[test.c:2]: (warning) Redundant assignment of 'x' to itself.\n"
Line 9301
  "#define X x\nvoid f(int x) {\n  return x + X++;\n}" always "#define X x\nvoid f(int x) {\n  return x + X++;\n}"
Line 9304
  "test.c" always "test.c"
Line 9305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9305 always 9305
  "[test.c:3]: (error) Expression 'x+x++' depends on order of evaluation of side effects\n" always "[test.c:3]: (error) Expression 'x+x++' depends on order of evaluation of side effects\n"
Line 9310
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9310 always 9310
  "void f(int id) {\n  id = dostuff(id += 42);\n}" always "void f(int id) {\n  id = dostuff(id += 42);\n}"
  "test.c" always "test.c"
Line 9313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9313 always 9313
  "" always ""
Line 9316
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9316 always 9316
  "void f(int id) {\n  id = id + dostuff(id += 42);\n}" always "void f(int id) {\n  id = id + dostuff(id += 42);\n}"
  "test.c" always "test.c"
Line 9319
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9319 always 9319
  "error" always "error"
  "" always ""
Line 9323
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9323 always 9323
  "int f(void) {\n  int t;\n  return (unsigned char)(t=1,t^c);\n}" always "int f(void) {\n  int t;\n  return (unsigned char)(t=1,t^c);\n}"
  "test.c" always "test.c"
Line 9327
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9327 always 9327
  "" always ""
Line 9329
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9329 always 9329
  "void f(void) {\n  int t;\n  dostuff(t=1,t^c);\n}" always "void f(void) {\n  int t;\n  dostuff(t=1,t^c);\n}"
  "test.c" always "test.c"
Line 9333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9333 always 9333
  "[test.c:3]: (error) Expression 't=1,t^c' depends on order of evaluation of side effects\n" always "[test.c:3]: (error) Expression 't=1,t^c' depends on order of evaluation of side effects\n"
Line 9335
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9335 always 9335
  "void f(void) {\n  int t;\n  dostuff((t=1,t),2);\n}" always "void f(void) {\n  int t;\n  dostuff((t=1,t),2);\n}"
  "test.c" always "test.c"
Line 9339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9339 always 9339
  "" always ""
Line 9342
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9342 always 9342
  "void hprf(const char* fp) {\n    do\n        ;\n    while (++fp, (*fp) <= 0177);\n}\n" always "void hprf(const char* fp) {\n    do\n        ;\n    while (++fp, (*fp) <= 0177);\n}\n"
  "test.c" always "test.c"
Line 9347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9347 always 9347
  "" always ""
Line 9349
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9349 always 9349
  "void hprf(const char* fp) {\n    do\n        ;\n    while (i++, ++fp, (*fp) <= 0177);\n}\n" always "void hprf(const char* fp) {\n    do\n        ;\n    while (i++, ++fp, (*fp) <= 0177);\n}\n"
  "test.c" always "test.c"
Line 9354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9354 always 9354
  "" always ""
Line 9356
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9356 always 9356
  "void f(const char* fp) {\n    do\n        ;\n    while (f(++fp, (*fp) <= 7));\n}\n" always "void f(const char* fp) {\n    do\n        ;\n    while (f(++fp, (*fp) <= 7));\n}\n"
  "test.c" always "test.c"
Line 9361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9361 always 9361
  "[test.c:4]: (error) Expression '++fp,(*fp)<=7' depends on order of evaluation of side effects\n" always "[test.c:4]: (error) Expression '++fp,(*fp)<=7' depends on order of evaluation of side effects\n"
Line 9365
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9365 always 9365
  "void f(char *buf) {\n  dostuff(buf++, sizeof(*buf));}" always "void f(char *buf) {\n  dostuff(buf++, sizeof(*buf));}"
  "test.c" always "test.c"
Line 9368
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9368 always 9368
  "" always ""
Line 9372
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9372 always 9372
  "struct d {\n  unsigned n;\n};\nvoid f(void) {\n  struct d d;\n  d.n = 3;\n\n  if (d.n < 0) {\n    return;\n  }\n\n  if (0 > d.n) {\n    return;\n  }\n}" always "struct d {\n  unsigned n;\n};\nvoid f(void) {\n  struct d d;\n  d.n = 3;\n\n  if (d.n < 0) {\n    return;\n  }\n\n  if (0 > d.n) {\n    return;\n  }\n}"
  "test.c" always "test.c"
Line 9387
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9387 always 9387
  "[test.c:8]: (style) Checking if unsigned expression 'd.n' is less than zero.\n[test.c:12]: (style) Checking if unsigned expression 'd.n' is less than zero.\n" always "[test.c:8]: (style) Checking if unsigned expression 'd.n' is less than zero.\n[test.c:12]: (style) Checking if unsigned expression 'd.n' is less than zero.\n"
Line 9393
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9393 always 9393
  "void g(A a);\nvoid f() {\n    A a;\n    g(std::move(a));\n    g(std::move(a));\n}" always "void g(A a);\nvoid f() {\n    A a;\n    g(std::move(a));\n    g(std::move(a));\n}"
Line 9399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9399 always 9399
  "[test.cpp:5]: (warning) Access of moved variable 'a'.\n" always "[test.cpp:5]: (warning) Access of moved variable 'a'.\n"
Line 9403
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9403 always 9403
  "class A\n{\n    A(B && b)\n    :b1(std::move(b))\n    {\n        b2 = std::move(b);\n    }\n    B b1;\n    B b2;\n};" always "class A\n{\n    A(B && b)\n    :b1(std::move(b))\n    {\n        b2 = std::move(b);\n    }\n    B b1;\n    B b2;\n};"
Line 9413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9413 always 9413
  "[test.cpp:6]: (warning) Access of moved variable 'b'.\n" always "[test.cpp:6]: (warning) Access of moved variable 'b'.\n"
Line 9417
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9417 always 9417
  "class A\n{\n    A(B && b)\n    :b1(std::move(b)),\n     b2(std::move(b))\n    {}\n    B b1;\n    B b2;\n};" always "class A\n{\n    A(B && b)\n    :b1(std::move(b)),\n     b2(std::move(b))\n    {}\n    B b1;\n    B b2;\n};"
Line 9426
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9426 always 9426
  "[test.cpp:5]: (warning) Access of moved variable 'b'.\n" always "[test.cpp:5]: (warning) Access of moved variable 'b'.\n"
Line 9430
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9430 always 9430
  "struct A { int i; };\nstruct B { A a1; A a2; };\nB f() {\n    A a1 = { 1 };\n    A a2 = { 2 };\n    return { .a1 = std::move(a1), .a2 = std::move(a2) };\n}\n" always "struct A { int i; };\nstruct B { A a1; A a2; };\nB f() {\n    A a1 = { 1 };\n    A a2 = { 2 };\n    return { .a1 = std::move(a1), .a2 = std::move(a2) };\n}\n"
Line 9437
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9437 always 9437
  "" always ""
Line 9441
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9441 always 9441
  "A g(A a);\nvoid f() {\n    A a;\n    a = g(std::move(a));\n    a = g(std::move(a));\n}" always "A g(A a);\nvoid f() {\n    A a;\n    a = g(std::move(a));\n    a = g(std::move(a));\n}"
Line 9447
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9447 always 9447
  "" always ""
Line 9451
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9451 always 9451
  "A g(A a);\nvoid f() {\n    A a;\n    B b = g(std::move(a));\n    C c = g(std::move(a));\n}" always "A g(A a);\nvoid f() {\n    A a;\n    B b = g(std::move(a));\n    C c = g(std::move(a));\n}"
Line 9457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9457 always 9457
  "[test.cpp:5]: (warning) Access of moved variable 'a'.\n" always "[test.cpp:5]: (warning) Access of moved variable 'a'.\n"
Line 9461
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9461 always 9461
  "void h(A a);\nvoid f() {    A a;\n    g(std::move(a));\n    h(a);\n    a = b;\n    h(a);\n    g(std::move(a));\n    h(a);\n    a = b;\n    h(a);\n}" always "void h(A a);\nvoid f() {    A a;\n    g(std::move(a));\n    h(a);\n    a = b;\n    h(a);\n    g(std::move(a));\n    h(a);\n    a = b;\n    h(a);\n}"
Line 9473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9473 always 9473
  "[test.cpp:4]: (warning) Access of moved variable 'a'.\n[test.cpp:8]: (warning) Access of moved variable 'a'.\n" always "[test.cpp:4]: (warning) Access of moved variable 'a'.\n[test.cpp:8]: (warning) Access of moved variable 'a'.\n"
Line 9478
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9478 always 9478
  "A g(A a);\nvoid f() {\n    A a;\n    a.reset(g(std::move(a)));\n    a.reset(g(std::move(a)));\n}" always "A g(A a);\nvoid f() {\n    A a;\n    a.reset(g(std::move(a)));\n    a.reset(g(std::move(a)));\n}"
Line 9484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9484 always 9484
  "" always ""
Line 9488
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9488 always 9488
  "A g(A a);\nvoid f() {\n    A a;\n    A b;\n    A c;\n    b.reset(g(std::move(a)));\n    c.reset(g(std::move(a)));\n}" always "A g(A a);\nvoid f() {\n    A a;\n    A b;\n    A c;\n    b.reset(g(std::move(a)));\n    c.reset(g(std::move(a)));\n}"
Line 9496
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9496 always 9496
  "[test.cpp:7]: (warning) Access of moved variable 'a'.\n" always "[test.cpp:7]: (warning) Access of moved variable 'a'.\n"
Line 9500
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9500 always 9500
  "void h(A a);\nvoid f() {    A a;\n    g(std::move(a));\n    h(a);\n    a.reset(b);\n    h(a);\n    g(std::move(a));\n    h(a);\n    a.reset(b);\n    h(a);\n}" always "void h(A a);\nvoid f() {    A a;\n    g(std::move(a));\n    h(a);\n    a.reset(b);\n    h(a);\n    g(std::move(a));\n    h(a);\n    a.reset(b);\n    h(a);\n}"
Line 9512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9512 always 9512
  "[test.cpp:4]: (warning) Access of moved variable 'a'.\n[test.cpp:8]: (warning) Access of moved variable 'a'.\n" always "[test.cpp:4]: (warning) Access of moved variable 'a'.\n[test.cpp:8]: (warning) Access of moved variable 'a'.\n"
Line 9517
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9517 always 9517
  "void g(A a);\nvoid f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}" always "void g(A a);\nvoid f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}"
Line 9524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9524 always 9524
  "[test.cpp:5]: (warning) Access of moved variable 'a'.\n[test.cpp:6]: (warning) Access of moved variable 'a'.\n" always "[test.cpp:5]: (warning) Access of moved variable 'a'.\n[test.cpp:6]: (warning) Access of moved variable 'a'.\n"
Line 9529
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9529 always 9529
  "void g(A & a);\nvoid f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}" always "void g(A & a);\nvoid f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}"
Line 9536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9536 always 9536
  "" always ""
Line 9540
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9540 always 9540
  "void g(A const & a);\nvoid f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}" always "void g(A const & a);\nvoid f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}"
Line 9547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9547 always 9547
  "[test.cpp:5]: (warning) Access of moved variable 'a'.\n[test.cpp:6]: (warning) Access of moved variable 'a'.\n" always "[test.cpp:5]: (warning) Access of moved variable 'a'.\n[test.cpp:6]: (warning) Access of moved variable 'a'.\n"
Line 9552
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9552 always 9552
  "void f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}" always "void f() {\n    A a;\n    A b = std::move(a);\n    g(a);\n    A c = a;\n}"
Line 9558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9558 always 9558
  "[test.cpp:4]: (warning, inconclusive) Access of moved variable 'a'.\n[test.cpp:5]: (warning, inconclusive) Access of moved variable 'a'.\n" always "[test.cpp:4]: (warning, inconclusive) Access of moved variable 'a'.\n[test.cpp:5]: (warning, inconclusive) Access of moved variable 'a'.\n"
Line 9563
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9563 always 9563
  "int f(int i) {\n    A a;\n    A b;\n    g(std::move(a));\n    if (i)\n        return g(std::move(b));\n    return h(std::move(a),std::move(b));\n}" always "int f(int i) {\n    A a;\n    A b;\n    g(std::move(a));\n    if (i)\n        return g(std::move(b));\n    return h(std::move(a),std::move(b));\n}"
Line 9571
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9571 always 9571
  "[test.cpp:7]: (warning) Access of moved variable 'a'.\n" always "[test.cpp:7]: (warning) Access of moved variable 'a'.\n"
Line 9575
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9575 always 9575
  "void f() {\n    V v;\n    g(std::move(v));\n    v.clear();\n    if (v.empty()) {}\n}" always "void f() {\n    V v;\n    g(std::move(v));\n    v.clear();\n    if (v.empty()) {}\n}"
Line 9581
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9581 always 9581
  "" always ""
Line 9585
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9585 always 9585
  "void f() {\n    P p;\n    g(std::move(p));\n    x = p->x;\n    y = p->y;\n}" always "void f() {\n    P p;\n    g(std::move(p));\n    x = p->x;\n    y = p->y;\n}"
Line 9591
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9591 always 9591
  "[test.cpp:4]: (warning) Access of moved variable 'p'.\n[test.cpp:5]: (warning) Access of moved variable 'p'.\n" always "[test.cpp:4]: (warning) Access of moved variable 'p'.\n[test.cpp:5]: (warning) Access of moved variable 'p'.\n"
Line 9596
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9596 always 9596
  "void f() {\n    std::string s1 = x;\n    std::string s2 = std::move(s1);\n    p = &s1;\n}" always "void f() {\n    std::string s1 = x;\n    std::string s2 = std::move(s1);\n    p = &s1;\n}"
Line 9601
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9601 always 9601
  "" always ""
Line 9605
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9605 always 9605
  "void f() {\n    A a;\n    gx(std::move(a).x());\n    gy(std::move(a).y());\n}" always "void f() {\n    A a;\n    gx(std::move(a).x());\n    gy(std::move(a).y());\n}"
Line 9610
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9610 always 9610
  "" always ""
Line 9614
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9614 always 9614
  "void f() {\n    A a;\n    auto h = [a=std::move(a)](){return g(std::move(a));};    b = a;\n}" always "void f() {\n    A a;\n    auto h = [a=std::move(a)](){return g(std::move(a));};    b = a;\n}"
Line 9619
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9619 always 9619
  "" always ""
Line 9624
  = always 1
  true always 1
Line 9626
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9626 always 9626
  "template<typename T>\nvoid f(T && t) {\n    g(std::forward<T>(t));\n    T s = t;\n}" always "template<typename T>\nvoid f(T && t) {\n    g(std::forward<T>(t));\n    T s = t;\n}"
  & {lifetime[Address]=(keepTemplates),!0}
Line 9631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9631 always 9631
  "[test.cpp:4]: (warning) Access of forwarded variable 't'.\n" always "[test.cpp:4]: (warning) Access of forwarded variable 't'.\n"
Line 9635
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9635 always 9635
  "void func1(int a, int b, int c);\nvoid func1(int a, int b, int c) { }\nvoid func2(int a, int b, int c);\nvoid func2(int A, int B, int C) { }\nclass Fred {\n    void func1(int a, int b, int c);\n    void func2(int a, int b, int c);\n    void func3(int a = 0, int b = 0, int c = 0);\n    void func4(int a = 0, int b = 0, int c = 0);\n};\nvoid Fred::func1(int a, int b, int c) { }\nvoid Fred::func2(int A, int B, int C) { }\nvoid Fred::func3(int a, int b, int c) { }\nvoid Fred::func4(int A, int B, int C) { }" always "void func1(int a, int b, int c);\nvoid func1(int a, int b, int c) { }\nvoid func2(int a, int b, int c);\nvoid func2(int A, int B, int C) { }\nclass Fred {\n    void func1(int a, int b, int c);\n    void func2(int a, int b, int c);\n    void func3(int a = 0, int b = 0, int c = 0);\n    void func4(int a = 0, int b = 0, int c = 0);\n};\nvoid Fred::func1(int a, int b, int c) { }\nvoid Fred::func2(int A, int B, int C) { }\nvoid Fred::func3(int a, int b, int c) { }\nvoid Fred::func4(int A, int B, int C) { }"
Line 9649
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9649 always 9649
  "[test.cpp:3] -> [test.cpp:4]: (style, inconclusive) Function 'func2' argument 1 names different: declaration 'a' definition 'A'.\n[test.cpp:3] -> [test.cpp:4]: (style, inconclusive) Function 'func2' argument 2 names different: declaration 'b' definition 'B'.\n[test.cpp:3] -> [test.cpp:4]: (style, inconclusive) Function 'func2' argument 3 names different: declaration 'c' definition 'C'.\n[test.cpp:7] -> [test.cpp:12]: (style, inconclusive) Function 'func2' argument 1 names different: declaration 'a' definition 'A'.\n[test.cpp:7] -> [test.cpp:12]: (style, inconclusive) Function 'func2' argument 2 names different: declaration 'b' definition 'B'.\n[test.cpp:7] -> [test.cpp:12]: (style, inconclusive) Function 'func2' argument 3 names different: declaration 'c' definition 'C'.\n[test.cpp:9] -> [test.cpp:14]: (style, inconclusive) Function 'func4' argument 1 names different: declaration 'a' definition 'A'.\n[test.cpp:9] -> [test.cpp:14]: (style, inconclusive) Function 'func4' argument 2 names different: declaration 'b' definition 'B'.\n[test.cpp:9] -> [test.cpp:14]: (style, inconclusive) Function 'func4' argument 3 names different: declaration 'c' definition 'C'.\n" always "[test.cpp:3] -> [test.cpp:4]: (style, inconclusive) Function 'func2' argument 1 names different: declaration 'a' definition 'A'.\n[test.cpp:3] -> [test.cpp:4]: (style, inconclusive) Function 'func2' argument 2 names different: declaration 'b' definition 'B'.\n[test.cpp:3] -> [test.cpp:4]: (style, inconclusive) Function 'func2' argument 3 names different: declaration 'c' definition 'C'.\n[test.cpp:7] -> [test.cpp:12]: (style, inconclusive) Function 'func2' argument 1 names different: declaration 'a' definition 'A'.\n[test.cpp:7] -> [test.cpp:12]: (style, inconclusive) Function 'func2' argument 2 names different: declaration 'b' definition 'B'.\n[test.cpp:7] -> [test.cpp:12]: (style, inconclusive) Function 'func2' argument 3 names different: declaration 'c' definition 'C'.\n[test.cpp:9] -> [test.cpp:14]: (style, inconclusive) Function 'func4' argument 1 names different: declaration 'a' definition 'A'.\n[test.cpp:9] -> [test.cpp:14]: (style, inconclusive) Function 'func4' argument 2 names different: declaration 'b' definition 'B'.\n[test.cpp:9] -> [test.cpp:14]: (style, inconclusive) Function 'func4' argument 3 names different: declaration 'c' definition 'C'.\n"
Line 9661
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9661 always 9661
  "void func1(int a, int b, int c);\nvoid func1(int a, int b, int c) { }\nvoid func2(int a, int b, int c);\nvoid func2(int c, int b, int a) { }\nvoid func3(int, int b, int c);\nvoid func3(int c, int b, int a) { }\nclass Fred {\n    void func1(int a, int b, int c);\n    void func2(int a, int b, int c);\n    void func3(int a = 0, int b = 0, int c = 0);\n    void func4(int, int b = 0, int c = 0);\n};\nvoid Fred::func1(int a, int b, int c) { }\nvoid Fred::func2(int c, int b, int a) { }\nvoid Fred::func3(int c, int b, int a) { }\nvoid Fred::func4(int c, int b, int a) { }\n" always "void func1(int a, int b, int c);\nvoid func1(int a, int b, int c) { }\nvoid func2(int a, int b, int c);\nvoid func2(int c, int b, int a) { }\nvoid func3(int, int b, int c);\nvoid func3(int c, int b, int a) { }\nclass Fred {\n    void func1(int a, int b, int c);\n    void func2(int a, int b, int c);\n    void func3(int a = 0, int b = 0, int c = 0);\n    void func4(int, int b = 0, int c = 0);\n};\nvoid Fred::func1(int a, int b, int c) { }\nvoid Fred::func2(int c, int b, int a) { }\nvoid Fred::func3(int c, int b, int a) { }\nvoid Fred::func4(int c, int b, int a) { }\n"
  nullptr always 0
  false always 0
  false always 0
Line 9678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9678 always 9678
  "[test.cpp:3] -> [test.cpp:4]: (warning) Function 'func2' argument order different: declaration 'a, b, c' definition 'c, b, a'\n[test.cpp:5] -> [test.cpp:6]: (warning) Function 'func3' argument order different: declaration ', b, c' definition 'c, b, a'\n[test.cpp:9] -> [test.cpp:14]: (warning) Function 'func2' argument order different: declaration 'a, b, c' definition 'c, b, a'\n[test.cpp:10] -> [test.cpp:15]: (warning) Function 'func3' argument order different: declaration 'a, b, c' definition 'c, b, a'\n[test.cpp:11] -> [test.cpp:16]: (warning) Function 'func4' argument order different: declaration ', b, c' definition 'c, b, a'\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Function 'func2' argument order different: declaration 'a, b, c' definition 'c, b, a'\n[test.cpp:5] -> [test.cpp:6]: (warning) Function 'func3' argument order different: declaration ', b, c' definition 'c, b, a'\n[test.cpp:9] -> [test.cpp:14]: (warning) Function 'func2' argument order different: declaration 'a, b, c' definition 'c, b, a'\n[test.cpp:10] -> [test.cpp:15]: (warning) Function 'func3' argument order different: declaration 'a, b, c' definition 'c, b, a'\n[test.cpp:11] -> [test.cpp:16]: (warning) Function 'func4' argument order different: declaration ', b, c' definition 'c, b, a'\n"
Line 9688
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9688 always 9688
  "\n void foo(int declaration = {}) {\n   for (int i = 0; i < 10; i++) {}\n\n }\n  " always "\n void foo(int declaration = {}) {\n   for (int i = 0; i < 10; i++) {}\n\n }\n  "
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9688 always 9688
  false always 0
Line 9692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9692 always 9692
  "" always ""
Line 9696
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9696 always 9696
  "int x;\nvoid f() { int x; }" always "int x;\nvoid f() { int x; }"
Line 9698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9698 always 9698
  "[test.cpp:1] -> [test.cpp:2]: (style) Local variable \'x\' shadows outer variable\n" always "[test.cpp:1] -> [test.cpp:2]: (style) Local variable \'x\' shadows outer variable\n"
Line 9700
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9700 always 9700
  "int x();\nvoid f() { int x; }" always "int x();\nvoid f() { int x; }"
Line 9702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9702 always 9702
  "[test.cpp:1] -> [test.cpp:2]: (style) Local variable \'x\' shadows outer function\n" always "[test.cpp:1] -> [test.cpp:2]: (style) Local variable \'x\' shadows outer function\n"
Line 9704
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9704 always 9704
  "struct C {\n    C(int x) : x(x) {}\n    int x;\n};" always "struct C {\n    C(int x) : x(x) {}\n    int x;\n};"
Line 9708
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9708 always 9708
  "" always ""
Line 9710
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9710 always 9710
  "void f() {\n  if (cond) {int x;}\n  int x;\n}" always "void f() {\n  if (cond) {int x;}\n  int x;\n}"
Line 9714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9714 always 9714
  "" always ""
Line 9716
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9716 always 9716
  "int size() {\n  int size;\n}" always "int size() {\n  int size;\n}"
Line 9719
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9719 always 9719
  "" always ""
Line 9721
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9721 always 9721
  "void f() {\n  int x;\n  auto f = [](){ int x; }}" always "void f() {\n  int x;\n  auto f = [](){ int x; }}"
Line 9725
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9725 always 9725
  "" always ""
Line 9727
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9727 always 9727
  "void f(int x) { int x; }" always "void f(int x) { int x; }"
Line 9728
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9728 always 9728
  "[test.cpp:1] -> [test.cpp:1]: (style) Local variable 'x' shadows outer argument\n" always "[test.cpp:1] -> [test.cpp:1]: (style) Local variable 'x' shadows outer argument\n"
Line 9730
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9730 always 9730
  "class C { C(); void foo() { static int C = 0; } }" always "class C { C(); void foo() { static int C = 0; } }"
Line 9731
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9731 always 9731
  "" always ""
Line 9733
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9733 always 9733
  "struct C {\n    ~C();\n    void f() {\n        bool C{};\n    }\n};\nC::~C() = default;" always "struct C {\n    ~C();\n    void f() {\n        bool C{};\n    }\n};\nC::~C() = default;"
Line 9740
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9740 always 9740
  "" always ""
Line 9743
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9743 always 9743
  "struct S {\n    int i;\n\n    static int foo() {\n        int i = 0;\n        return i;\n    }\n};" always "struct S {\n    int i;\n\n    static int foo() {\n        int i = 0;\n        return i;\n    }\n};"
Line 9751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9751 always 9751
  "" always ""
Line 9753
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9753 always 9753
  "struct S {\n    int i{};\n    void f() { int i; }\n};\n" always "struct S {\n    int i{};\n    void f() { int i; }\n};\n"
Line 9757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9757 always 9757
  "[test.cpp:2] -> [test.cpp:3]: (style) Local variable 'i' shadows outer variable\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Local variable 'i' shadows outer variable\n"
Line 9759
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9759 always 9759
  "struct S {\n    int i{};\n    std::vector<int> v;\n    void f() const { for (const int& i : v) {} }\n};\n" always "struct S {\n    int i{};\n    std::vector<int> v;\n    void f() const { for (const int& i : v) {} }\n};\n"
Line 9764
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9764 always 9764
  "[test.cpp:2] -> [test.cpp:4]: (style) Local variable 'i' shadows outer variable\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Local variable 'i' shadows outer variable\n"
Line 9766
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9766 always 9766
  "struct S {\n    F* f{};\n    std::list<F> fl;\n    void S::f() const;\n};\nvoid S::f() const {\n    for (const F& f : fl) {}\n};\n" always "struct S {\n    F* f{};\n    std::list<F> fl;\n    void S::f() const;\n};\nvoid S::f() const {\n    for (const F& f : fl) {}\n};\n"
Line 9774
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9774 always 9774
  "[test.cpp:2] -> [test.cpp:7]: (style) Local variable 'f' shadows outer variable\n" always "[test.cpp:2] -> [test.cpp:7]: (style) Local variable 'f' shadows outer variable\n"
Line 9776
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9776 always 9776
  "extern int a;\nint a;\nstatic int f(void) {\n    int a;\n    return 0;\n}\n" always "extern int a;\nint a;\nstatic int f(void) {\n    int a;\n    return 0;\n}\n"
  "test.c" always "test.c"
Line 9782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9782 always 9782
  "[test.c:1] -> [test.c:4]: (style) Local variable 'a' shadows outer variable\n" always "[test.c:1] -> [test.c:4]: (style) Local variable 'a' shadows outer variable\n"
Line 9786
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9786 always 9786
  "void g(int);\nvoid f(int x) {\n   g((x & 0x01) >> 7);\n}" always "void g(int);\nvoid f(int x) {\n   g((x & 0x01) >> 7);\n}"
Line 9790
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9790 always 9790
  "[test.cpp:3]: (style) Argument '(x&0x01)>>7' to function g is always 0. It does not matter what value 'x' has.\n" always "[test.cpp:3]: (style) Argument '(x&0x01)>>7' to function g is always 0. It does not matter what value 'x' has.\n"
Line 9792
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9792 always 9792
  "void g(int);\nvoid f(int x) {\n   g((int)((x & 0x01) >> 7));\n}" always "void g(int);\nvoid f(int x) {\n   g((int)((x & 0x01) >> 7));\n}"
Line 9796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9796 always 9796
  "[test.cpp:3]: (style) Argument '(int)((x&0x01)>>7)' to function g is always 0. It does not matter what value 'x' has.\n" always "[test.cpp:3]: (style) Argument '(int)((x&0x01)>>7)' to function g is always 0. It does not matter what value 'x' has.\n"
Line 9798
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9798 always 9798
  "void g(int);\nvoid f(int x) {\n    g(0);\n}" always "void g(int);\nvoid f(int x) {\n    g(0);\n}"
Line 9802
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9802 always 9802
  "" always ""
Line 9804
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9804 always 9804
  "void g(int);\nvoid h() { return 1; }\nvoid f(int x) {\n    g(h());\n}" always "void g(int);\nvoid h() { return 1; }\nvoid f(int x) {\n    g(h());\n}"
Line 9809
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9809 always 9809
  "" always ""
Line 9811
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9811 always 9811
  "void g(int);\nvoid f(int x) {\n    g(std::strlen(\"a\"));\n}" always "void g(int);\nvoid f(int x) {\n    g(std::strlen(\"a\"));\n}"
Line 9815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9815 always 9815
  "" always ""
Line 9817
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9817 always 9817
  "void g(int);\nvoid f(int x) {\n    g((int)0);\n}" always "void g(int);\nvoid f(int x) {\n    g((int)0);\n}"
Line 9821
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9821 always 9821
  "" always ""
Line 9823
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9823 always 9823
  "void g(Foo *);\nvoid f() {\n    g(reinterpret_cast<Foo*>(0));\n}" always "void g(Foo *);\nvoid f() {\n    g(reinterpret_cast<Foo*>(0));\n}"
Line 9827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9827 always 9827
  "" always ""
Line 9829
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9829 always 9829
  "void g(int);\nvoid f(int x) {\n    x = 0;\n    g(x);\n}" always "void g(int);\nvoid f(int x) {\n    x = 0;\n    g(x);\n}"
Line 9834
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9834 always 9834
  "" always ""
Line 9836
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9836 always 9836
  "void g(int);\nvoid f() {\n    const int x = 0;\n    g(x + 1);\n}" always "void g(int);\nvoid f() {\n    const int x = 0;\n    g(x + 1);\n}"
Line 9841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9841 always 9841
  "" always ""
Line 9843
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9843 always 9843
  "void g(int);\nvoid f() {\n    char i = 1;\n    g(static_cast<int>(i));\n}" always "void g(int);\nvoid f() {\n    char i = 1;\n    g(static_cast<int>(i));\n}"
Line 9848
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9848 always 9848
  "" always ""
Line 9850
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9850 always 9850
  "char *yytext;\nvoid re_init_scanner() {\n  int size = 256;\n  yytext = xmalloc(size * sizeof *yytext);\n}" always "char *yytext;\nvoid re_init_scanner() {\n  int size = 256;\n  yytext = xmalloc(size * sizeof *yytext);\n}"
Line 9855
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9855 always 9855
  "" always ""
Line 9857
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9857 always 9857
  "void foo(char *c) {\n    if (*c == '+' && (operand || !isalnum(*c))) {}\n}" always "void foo(char *c) {\n    if (*c == '+' && (operand || !isalnum(*c))) {}\n}"
Line 9860
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9860 always 9860
  "" always ""
Line 9863
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9863 always 9863
  "void f(int);\nvoid g() {\n    const int x[] = { 10, 10 };\n    f(x[0]);\n}" always "void f(int);\nvoid g() {\n    const int x[] = { 10, 10 };\n    f(x[0]);\n}"
Line 9868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9868 always 9868
  "" always ""
Line 9870
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9870 always 9870
  "void f(int);\nvoid g() {\n    int x[] = { 10, 10 };\n    f(x[0]);\n}" always "void f(int);\nvoid g() {\n    int x[] = { 10, 10 };\n    f(x[0]);\n}"
Line 9875
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9875 always 9875
  "" always ""
Line 9877
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9877 always 9877
  "struct A { int x; };void g(int);\nvoid f(int x) {\n    A y;\n    y.x = 1;\n    g(y.x);\n}" always "struct A { int x; };void g(int);\nvoid f(int x) {\n    A y;\n    y.x = 1;\n    g(y.x);\n}"
Line 9884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9884 always 9884
  "" always ""
Line 9887
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9887 always 9887
  "void g(int);\nvoid f(int x) {\n   ASSERT((int)((x & 0x01) >> 7));\n}" always "void g(int);\nvoid f(int x) {\n   ASSERT((int)((x & 0x01) >> 7));\n}"
Line 9891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9891 always 9891
  "" always ""
Line 9894
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9894 always 9894
  "void foo() {\n    const std::string heading = \"Interval\";\n    std::cout << std::setw(heading.length());\n}" always "void foo() {\n    const std::string heading = \"Interval\";\n    std::cout << std::setw(heading.length());\n}"
Line 9898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9898 always 9898
  "" always ""
Line 9901
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9901 always 9901
  "struct LongStack {\n    int maxsize;\n};\n\nvoid growLongStack(LongStack* self) {\n    self->maxsize = 32;\n    dostuff(self->maxsize * sizeof(intptr_t));\n}" always "struct LongStack {\n    int maxsize;\n};\n\nvoid growLongStack(LongStack* self) {\n    self->maxsize = 32;\n    dostuff(self->maxsize * sizeof(intptr_t));\n}"
Line 9909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9909 always 9909
  "" always ""
Line 9914
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9914 always 9914
  "void f(int x) {\n    dostuff(x && false);\n    dostuff(false && x);\n    dostuff(x || true);\n    dostuff(true || x);\n    dostuff(x * 0);\n    dostuff(0 * x);\n}\n" always "void f(int x) {\n    dostuff(x && false);\n    dostuff(false && x);\n    dostuff(x || true);\n    dostuff(true || x);\n    dostuff(x * 0);\n    dostuff(0 * x);\n}\n"
Line 9922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9922 always 9922
  "[test.cpp:3]: (style) Argument 'false&&x' to function dostuff is always 0. Constant literal calculation disable/hide variable expression 'x'.\n[test.cpp:5]: (style) Argument 'true||x' to function dostuff is always 1. Constant literal calculation disable/hide variable expression 'x'.\n[test.cpp:6]: (style) Argument 'x*0' to function dostuff is always 0. Constant literal calculation disable/hide variable expression 'x'.\n[test.cpp:7]: (style) Argument '0*x' to function dostuff is always 0. Constant literal calculation disable/hide variable expression 'x'.\n" always "[test.cpp:3]: (style) Argument 'false&&x' to function dostuff is always 0. Constant literal calculation disable/hide variable expression 'x'.\n[test.cpp:5]: (style) Argument 'true||x' to function dostuff is always 1. Constant literal calculation disable/hide variable expression 'x'.\n[test.cpp:6]: (style) Argument 'x*0' to function dostuff is always 0. Constant literal calculation disable/hide variable expression 'x'.\n[test.cpp:7]: (style) Argument '0*x' to function dostuff is always 0. Constant literal calculation disable/hide variable expression 'x'.\n"
Line 9929
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9929 always 9929
  "void f(bool a, bool b) {\n    const T* P = nullptr; \n    long N = 0; \n    const bool c = foo(); \n    bar(P, N); \n    if (c ? a : b)\n      baz(P, N); \n}" always "void f(bool a, bool b) {\n    const T* P = nullptr; \n    long N = 0; \n    const bool c = foo(); \n    bar(P, N); \n    if (c ? a : b)\n      baz(P, N); \n}"
Line 9937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9937 always 9937
  "" always ""
Line 9941
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9941 always 9941
  "int f() {\n    const int foo[1] = {0};\n    const int bar[1] = {0};\n    int diff = 0;\n    if(foo > bar) {\n       diff = 1;\n    }\n    return diff;\n}" always "int f() {\n    const int foo[1] = {0};\n    const int bar[1] = {0};\n    int diff = 0;\n    if(foo > bar) {\n       diff = 1;\n    }\n    return diff;\n}"
Line 9950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9950 always 9950
  "[test.cpp:2] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:5] -> [test.cpp:5]: (error) Comparing pointers that point to different objects\n" always "[test.cpp:2] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:5] -> [test.cpp:5]: (error) Comparing pointers that point to different objects\n"
Line 9954
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9954 always 9954
  "bool f() {\n    int x = 0;\n    int y = 0;\n    int* xp = &x;\n    int* yp = &y;\n    return xp > yp;\n}" always "bool f() {\n    int x = 0;\n    int y = 0;\n    int* xp = &x;\n    int* yp = &y;\n    return xp > yp;\n}"
Line 9961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9961 always 9961
  "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:3] -> [test.cpp:5] -> [test.cpp:6]: (error) Comparing pointers that point to different objects\n" always "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:3] -> [test.cpp:5] -> [test.cpp:6]: (error) Comparing pointers that point to different objects\n"
Line 9965
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9965 always 9965
  "bool f() {\n    int x = 0;\n    int y = 1;\n    return &x > &y;\n}" always "bool f() {\n    int x = 0;\n    int y = 1;\n    return &x > &y;\n}"
Line 9970
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9970 always 9970
  "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:4]: (error) Comparing pointers that point to different objects\n" always "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:4]: (error) Comparing pointers that point to different objects\n"
Line 9974
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9974 always 9974
  "struct A {int data;};\nbool f() {\n    A x;\n    A y;\n    int* xp = &x.data;\n    int* yp = &y.data;\n    return xp > yp;\n}" always "struct A {int data;};\nbool f() {\n    A x;\n    A y;\n    int* xp = &x.data;\n    int* yp = &y.data;\n    return xp > yp;\n}"
Line 9982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9982 always 9982
  "[test.cpp:1] -> [test.cpp:5] -> [test.cpp:1] -> [test.cpp:6] -> [test.cpp:7]: (error) Comparing pointers that point to different objects\n" always "[test.cpp:1] -> [test.cpp:5] -> [test.cpp:1] -> [test.cpp:6] -> [test.cpp:7]: (error) Comparing pointers that point to different objects\n"
Line 9986
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9986 always 9986
  "struct A {int data;};\nbool f(A ix, A iy) {\n    A* x = &ix;\n    A* y = &iy;\n    int* xp = &x->data;\n    int* yp = &y->data;\n    return xp > yp;\n}" always "struct A {int data;};\nbool f(A ix, A iy) {\n    A* x = &ix;\n    A* y = &iy;\n    int* xp = &x->data;\n    int* yp = &y->data;\n    return xp > yp;\n}"
Line 9994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9994 always 9994
  "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:5] -> [test.cpp:2] -> [test.cpp:4] -> [test.cpp:6] -> [test.cpp:7]: (error) Comparing pointers that point to different objects\n" always "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:5] -> [test.cpp:2] -> [test.cpp:4] -> [test.cpp:6] -> [test.cpp:7]: (error) Comparing pointers that point to different objects\n"
Line 9998
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  9998 always 9998
  "bool f(int * xp, int* yp) {\n    return &xp > &yp;\n}" always "bool f(int * xp, int* yp) {\n    return &xp > &yp;\n}"
Line 10001
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10001 always 10001
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:1] -> [test.cpp:2] -> [test.cpp:2]: (error) Comparing pointers that point to different objects\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:1] -> [test.cpp:2] -> [test.cpp:2]: (error) Comparing pointers that point to different objects\n"
Line 10005
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10005 always 10005
  "int f() {\n    int x = 0;\n    int y = 1;\n    return &x - &y;\n}" always "int f() {\n    int x = 0;\n    int y = 1;\n    return &x - &y;\n}"
Line 10010
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10010 always 10010
  "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:4]: (error) Subtracting pointers that point to different objects\n" always "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:4]: (error) Subtracting pointers that point to different objects\n"
Line 10014
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10014 always 10014
  "bool f() {\n    int x[2] = {1, 2}m;\n    int* xp = &x[0];\n    int* yp = &x[1];\n    return xp > yp;\n}" always "bool f() {\n    int x[2] = {1, 2}m;\n    int* xp = &x[0];\n    int* yp = &x[1];\n    return xp > yp;\n}"
Line 10020
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10020 always 10020
  "" always ""
Line 10022
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10022 always 10022
  "bool f(const int * xp, const int* yp) {\n    return xp > yp;\n}" always "bool f(const int * xp, const int* yp) {\n    return xp > yp;\n}"
Line 10025
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10025 always 10025
  "" always ""
Line 10027
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10027 always 10027
  "bool f(const int & x, const int& y) {\n    return &x > &y;\n}" always "bool f(const int & x, const int& y) {\n    return &x > &y;\n}"
Line 10030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10030 always 10030
  "" always ""
Line 10032
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10032 always 10032
  "int& g();\nbool f() {\n    const int& x = g();\n    const int& y = g();\n    const int* xp = &x;\n    const int* yp = &y;\n    return xp > yp;\n}" always "int& g();\nbool f() {\n    const int& x = g();\n    const int& y = g();\n    const int* xp = &x;\n    const int* yp = &y;\n    return xp > yp;\n}"
Line 10040
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10040 always 10040
  "" always ""
Line 10042
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10042 always 10042
  "struct A {int data;};\nbool f(A ix) {\n    A* x = &ix;\n    A* y = x;\n    int* xp = &x->data;\n    int* yp = &y->data;\n    return xp > yp;\n}" always "struct A {int data;};\nbool f(A ix) {\n    A* x = &ix;\n    A* y = x;\n    int* xp = &x->data;\n    int* yp = &y->data;\n    return xp > yp;\n}"
Line 10050
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10050 always 10050
  "" always ""
Line 10054
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10054 always 10054
  "#include <functional>\nclass A\n{\npublic:\n    class Hash\n    {\n    public:\n        std::size_t operator()(const A& a) const\n        {\n            (void)a;\n            return 0;\n        }\n    };\n};\nnamespace std\n{\n    template <>\n    struct hash<A>\n    {\n        std::size_t operator()(const A& a) const noexcept\n        {\n            return A::Hash{}(a);\n        }\n    };\n}" always "#include <functional>\nclass A\n{\npublic:\n    class Hash\n    {\n    public:\n        std::size_t operator()(const A& a) const\n        {\n            (void)a;\n            return 0;\n        }\n    };\n};\nnamespace std\n{\n    template <>\n    struct hash<A>\n    {\n        std::size_t operator()(const A& a) const noexcept\n        {\n            return A::Hash{}(a);\n        }\n    };\n}"
Line 10079
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10079 always 10079
  "" always ""
Line 10083
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10083 always 10083
  "void f(unsigned int x) {\n  int y = x % 1;\n}" always "void f(unsigned int x) {\n  int y = x % 1;\n}"
Line 10086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10086 always 10086
  "[test.cpp:2]: (style) Modulo of one is always equal to zero\n" always "[test.cpp:2]: (style) Modulo of one is always equal to zero\n"
Line 10088
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10088 always 10088
  "void f() {\n  for (int x = 1; x < 10; x++) {\n    int y = 100 % x;\n  }\n}" always "void f() {\n  for (int x = 1; x < 10; x++) {\n    int y = 100 % x;\n  }\n}"
Line 10093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10093 always 10093
  "" always ""
Line 10097
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10097 always 10097
  "int f(int *i);\nvoid g(int *a, const int *b) {\n    int c = *a;\n    f(a);\n    if (b && c != *a) {}\n}\n" always "int f(int *i);\nvoid g(int *a, const int *b) {\n    int c = *a;\n    f(a);\n    if (b && c != *a) {}\n}\n"
Line 10103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10103 always 10103
  "" always ""
Line 10108
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10108 always 10108
  "void foo() {\n    union { int i; float f; } u;\n    u.i = 0;\n    u.i = u.f;\n}" always "void foo() {\n    union { int i; float f; } u;\n    u.i = 0;\n    u.i = u.f;\n}"
Line 10113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10113 always 10113
  "[test.cpp:4]: (error) Overlapping read/write of union is undefined behavior\n" always "[test.cpp:4]: (error) Overlapping read/write of union is undefined behavior\n"
Line 10116
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10116 always 10116
  "void foo() {\n    char a[10];\n    memcpy(&a[5], &a[4], 2u);\n}" always "void foo() {\n    char a[10];\n    memcpy(&a[5], &a[4], 2u);\n}"
Line 10120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10120 always 10120
  "[test.cpp:3]: (error) Overlapping read/write in memcpy() is undefined behavior\n" always "[test.cpp:3]: (error) Overlapping read/write in memcpy() is undefined behavior\n"
Line 10122
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10122 always 10122
  "void foo() {\n    char a[10];\n    memcpy(a+5, a+4, 2u);\n}" always "void foo() {\n    char a[10];\n    memcpy(a+5, a+4, 2u);\n}"
Line 10126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10126 always 10126
  "[test.cpp:3]: (error) Overlapping read/write in memcpy() is undefined behavior\n" always "[test.cpp:3]: (error) Overlapping read/write in memcpy() is undefined behavior\n"
Line 10128
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10128 always 10128
  "void foo() {\n    char a[10];\n    memcpy(a, a+1, 2u);\n}" always "void foo() {\n    char a[10];\n    memcpy(a, a+1, 2u);\n}"
Line 10132
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10132 always 10132
  "[test.cpp:3]: (error) Overlapping read/write in memcpy() is undefined behavior\n" always "[test.cpp:3]: (error) Overlapping read/write in memcpy() is undefined behavior\n"
Line 10134
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10134 always 10134
  "void foo() {\n    char a[8];\n    memcpy(&a[0], &a[4], 4u);\n}" always "void foo() {\n    char a[8];\n    memcpy(&a[0], &a[4], 4u);\n}"
Line 10138
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10138 always 10138
  "" always ""
Line 10141
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10141 always 10141
  "void foo() {\n    wchar_t a[10];\n    wmemcpy(&a[5], &a[4], 2u);\n}" always "void foo() {\n    wchar_t a[10];\n    wmemcpy(&a[5], &a[4], 2u);\n}"
Line 10145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10145 always 10145
  "[test.cpp:3]: (error) Overlapping read/write in wmemcpy() is undefined behavior\n" always "[test.cpp:3]: (error) Overlapping read/write in wmemcpy() is undefined behavior\n"
Line 10147
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10147 always 10147
  "void foo() {\n    wchar_t a[10];\n    wmemcpy(a+5, a+4, 2u);\n}" always "void foo() {\n    wchar_t a[10];\n    wmemcpy(a+5, a+4, 2u);\n}"
Line 10151
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10151 always 10151
  "[test.cpp:3]: (error) Overlapping read/write in wmemcpy() is undefined behavior\n" always "[test.cpp:3]: (error) Overlapping read/write in wmemcpy() is undefined behavior\n"
Line 10153
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10153 always 10153
  "void foo() {\n    wchar_t a[10];\n    wmemcpy(a, a+1, 2u);\n}" always "void foo() {\n    wchar_t a[10];\n    wmemcpy(a, a+1, 2u);\n}"
Line 10157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10157 always 10157
  "[test.cpp:3]: (error) Overlapping read/write in wmemcpy() is undefined behavior\n" always "[test.cpp:3]: (error) Overlapping read/write in wmemcpy() is undefined behavior\n"
Line 10160
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10160 always 10160
  "void foo(char *ptr) {\n    strcpy(ptr, ptr);\n}" always "void foo(char *ptr) {\n    strcpy(ptr, ptr);\n}"
Line 10163
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10163 always 10163
  "[test.cpp:2]: (error) Overlapping read/write in strcpy() is undefined behavior\n" always "[test.cpp:2]: (error) Overlapping read/write in strcpy() is undefined behavior\n"
Line 10167
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10167 always 10167
  "class Foo {\npublic:\n    Foo();\n    int GetVal() const { return m_Arr[0]; }\n    int m_Arr[1];\n};\n" always "class Foo {\npublic:\n    Foo();\n    int GetVal() const { return m_Arr[0]; }\n    int m_Arr[1];\n};\n"
Line 10173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testother.cpp" always "cppcheck-2.8/test/testother.cpp"
  10173 always 10173
  "" always ""
