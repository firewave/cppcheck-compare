

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741928 expected@var22 !=@expr1073741929 actual@var23 ) {
62: std ::@expr1073741930 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741931 expected@var22 ;
64: std ::@expr1073741932 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741933 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741934 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741935 str (@expr1073741936 ) , actualStr@var26 .@expr1073741937 str (@expr1073741938 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741939 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741940 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741941 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741942 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testpath.cpp

1:
|
24:
25: class TestPath : public TestFixture {
26: public:
27: TestPath ( ) : TestFixture ( "TestPath" ) { }
28:
29: private:
30:
31: void run ( ) override {
32: $do ${ $if $(@expr1073741943 $prepareTest $(@expr1073741944 "removeQuotationMarks" $) $) ${ $setVerbose $(@expr1073741945 $false $) $; removeQuotationMarks $(@expr1073741946 $) $; $} $} $while $(@expr1073741947 $false $) ;
33: $do ${ $if $(@expr1073741948 $prepareTest $(@expr1073741949 "acceptFile" $) $) ${ $setVerbose $(@expr1073741950 $false $) $; acceptFile $(@expr1073741951 $) $; $} $} $while $(@expr1073741952 $false $) ;
34: $do ${ $if $(@expr1073741953 $prepareTest $(@expr1073741954 "getCurrentPath" $) $) ${ $setVerbose $(@expr1073741955 $false $) $; getCurrentPath $(@expr1073741956 $) $; $} $} $while $(@expr1073741957 $false $) ;
35: $do ${ $if $(@expr1073741958 $prepareTest $(@expr1073741959 "isAbsolute" $) $) ${ $setVerbose $(@expr1073741960 $false $) $; isAbsolute $(@expr1073741961 $) $; $} $} $while $(@expr1073741962 $false $) ;
36: $do ${ $if $(@expr1073741963 $prepareTest $(@expr1073741964 "getRelative" $) $) ${ $setVerbose $(@expr1073741965 $false $) $; getRelative $(@expr1073741966 $) $; $} $} $while $(@expr1073741967 $false $) ;
37: $do ${ $if $(@expr1073741968 $prepareTest $(@expr1073741969 "is_c" $) $) ${ $setVerbose $(@expr1073741970 $false $) $; is_c $(@expr1073741971 $) $; $} $} $while $(@expr1073741972 $false $) ;
38: $do ${ $if $(@expr1073741973 $prepareTest $(@expr1073741974 "is_cpp" $) $) ${ $setVerbose $(@expr1073741975 $false $) $; is_cpp $(@expr1073741976 $) $; $} $} $while $(@expr1073741977 $false $) ;
39: $do ${ $if $(@expr1073741978 $prepareTest $(@expr1073741979 "get_path_from_filename" $) $) ${ $setVerbose $(@expr1073741980 $false $) $; get_path_from_filename $(@expr1073741981 $) $; $} $} $while $(@expr1073741982 $false $) ;
40: }
41:
42: void removeQuotationMarks ( ) const {
43:
44: $if $(@expr1073741983 $!@expr1073741984 $assertEquals $(@expr1073741985 "cppcheck-2.8/test/testpath.cpp" $, 44 $, "index.cpp" $, Path ::@expr162 removeQuotationMarks (@expr1073741987 "index.cpp" ) $) $) { $return ; }
45: $if $(@expr1073741988 $!@expr1073741989 $assertEquals $(@expr1073741990 "cppcheck-2.8/test/testpath.cpp" $, 45 $, "index.cpp" $, Path ::@expr162 removeQuotationMarks (@expr1073741992 "\"index.cpp" ) $) $) { $return ; }
46: $if $(@expr1073741993 $!@expr1073741994 $assertEquals $(@expr1073741995 "cppcheck-2.8/test/testpath.cpp" $, 46 $, "index.cpp" $, Path ::@expr162 removeQuotationMarks (@expr1073741997 "index.cpp\"" ) $) $) { $return ; }
47: $if $(@expr1073741998 $!@expr1073741999 $assertEquals $(@expr1073742000 "cppcheck-2.8/test/testpath.cpp" $, 47 $, "index.cpp" $, Path ::@expr162 removeQuotationMarks (@expr1073742002 "\"index.cpp\"" ) $) $) { $return ; }
48: $if $(@expr1073742003 $!@expr1073742004 $assertEquals $(@expr1073742005 "cppcheck-2.8/test/testpath.cpp" $, 48 $, "path to/index.cpp" $, Path ::@expr162 removeQuotationMarks (@expr1073742007 "\"path to\"/index.cpp" ) $) $) { $return ; }
49: $if $(@expr1073742008 $!@expr1073742009 $assertEquals $(@expr1073742010 "cppcheck-2.8/test/testpath.cpp" $, 49 $, "path to/index.cpp" $, Path ::@expr162 removeQuotationMarks (@expr1073742012 "\"path to/index.cpp\"" ) $) $) { $return ; }
50: $if $(@expr1073742013 $!@expr1073742014 $assertEquals $(@expr1073742015 "cppcheck-2.8/test/testpath.cpp" $, 50 $, "the/path to/index.cpp" $, Path ::@expr162 removeQuotationMarks (@expr1073742017 "the/\"path to\"/index.cpp" ) $) $) { $return ; }
51: $if $(@expr1073742018 $!@expr1073742019 $assertEquals $(@expr1073742020 "cppcheck-2.8/test/testpath.cpp" $, 51 $, "the/path to/index.cpp" $, Path ::@expr162 removeQuotationMarks (@expr1073742022 "\"the/path to/index.cpp\"" ) $) $) { $return ; }
52: }
53:
54: void acceptFile ( ) const {
55: $if $(@expr1073742023 $!@expr1073742024 $assert_ $(@expr1073742025 "cppcheck-2.8/test/testpath.cpp" $, 55 $, Path ::@expr202 acceptFile (@expr1073742027 "index.cpp" ) $) $) { $return ; }
56: $if $(@expr1073742028 $!@expr1073742029 $assert_ $(@expr1073742030 "cppcheck-2.8/test/testpath.cpp" $, 56 $, Path ::@expr202 acceptFile (@expr1073742032 "index.invalid.cpp" ) $) $) { $return ; }
57: $if $(@expr1073742033 $!@expr1073742034 $assert_ $(@expr1073742035 "cppcheck-2.8/test/testpath.cpp" $, 57 $, Path ::@expr202 acceptFile (@expr1073742037 "index.invalid.Cpp" ) $) $) { $return ; }
58: $if $(@expr1073742038 $!@expr1073742039 $assert_ $(@expr1073742040 "cppcheck-2.8/test/testpath.cpp" $, 58 $, Path ::@expr202 acceptFile (@expr1073742042 "index.invalid.C" ) $) $) { $return ; }
59: $if $(@expr1073742043 $!@expr1073742044 $assert_ $(@expr1073742045 "cppcheck-2.8/test/testpath.cpp" $, 59 $, Path ::@expr202 acceptFile (@expr1073742047 "index.invalid.C++" ) $) $) { $return ; }
60: $if $(@expr1073742048 $!@expr1073742049 $assert_ $(@expr1073742050 "cppcheck-2.8/test/testpath.cpp" $, 60 $, Path ::@expr202 acceptFile (@expr1073742052 "index." ) ==@expr1073742053 false $) $) { $return ; }
61: $if $(@expr1073742054 $!@expr1073742055 $assert_ $(@expr1073742056 "cppcheck-2.8/test/testpath.cpp" $, 61 $, Path ::@expr202 acceptFile (@expr1073742058 "index" ) ==@expr1073742059 false $) $) { $return ; }
62: $if $(@expr1073742060 $!@expr1073742061 $assert_ $(@expr1073742062 "cppcheck-2.8/test/testpath.cpp" $, 62 $, Path ::@expr202 acceptFile (@expr1073742064 "" ) ==@expr1073742065 false $) $) { $return ; }
63: $if $(@expr1073742066 $!@expr1073742067 $assert_ $(@expr1073742068 "cppcheck-2.8/test/testpath.cpp" $, 63 $, Path ::@expr202 acceptFile (@expr1073742070 "C" ) ==@expr1073742071 false $) $) { $return ; }
64:
65:
66: $if $(@expr1073742072 $!@expr1073742073 $assertEquals $(@expr1073742074 "cppcheck-2.8/test/testpath.cpp" $, 66 $, false $, Path ::@expr202 acceptFile (@expr1073742076 "index.h" ) $) $) { $return ; }
67: $if $(@expr1073742077 $!@expr1073742078 $assertEquals $(@expr1073742079 "cppcheck-2.8/test/testpath.cpp" $, 67 $, false $, Path ::@expr202 acceptFile (@expr1073742081 "index.hpp" ) $) $) { $return ; }
68: }
69:
70: void getCurrentPath ( ) const {
71: $if $(@expr1073742082 $!@expr1073742083 $assertEquals $(@expr1073742084 "cppcheck-2.8/test/testpath.cpp" $, 71 $, true $, Path ::@expr1073742085 isAbsolute (@expr1073742086 Path ::@expr1073742087 getCurrentPath (@expr1073742088 ) ) $) $) { $return ; }
72: }
73:
74: void isAbsolute ( ) const {
75:
|
86:
87: $if $(@expr1073742089 $!@expr1073742090 $assertEquals $(@expr1073742091 "cppcheck-2.8/test/testpath.cpp" $, 87 $, true $, Path ::@expr268 isAbsolute (@expr1073742093 "/foo/bar" ) $) $) { $return ; }
88: $if $(@expr1073742094 $!@expr1073742095 $assertEquals $(@expr1073742096 "cppcheck-2.8/test/testpath.cpp" $, 88 $, true $, Path ::@expr268 isAbsolute (@expr1073742098 "/" ) $) $) { $return ; }
89: $if $(@expr1073742099 $!@expr1073742100 $assertEquals $(@expr1073742101 "cppcheck-2.8/test/testpath.cpp" $, 89 $, false $, Path ::@expr268 isAbsolute (@expr1073742103 "foo/bar" ) $) $) { $return ; }
90: $if $(@expr1073742104 $!@expr1073742105 $assertEquals $(@expr1073742106 "cppcheck-2.8/test/testpath.cpp" $, 90 $, false $, Path ::@expr268 isAbsolute (@expr1073742108 "foo.cpp" ) $) $) { $return ; }
91:
92: }
93:
94: void getRelative ( ) const {
95: const std ::@expr1073742109 vector < std ::@expr1073742110 string > basePaths@var102 =@expr1073742111 {@expr1073742112
96: "" ,
97: "C:/foo" ,
98: "C:/bar/" ,
99: "C:/test.cpp"
100: } ;
101:
102: $if $(@expr1073742113 $!@expr1073742114 $assertEquals $(@expr1073742115 "cppcheck-2.8/test/testpath.cpp" $, 102 $, "x.c" $, $(@expr1073742116 Path ::@expr293 getRelativePath (@expr1073742118 "C:/foo/x.c" , basePaths@var102 ) $) $) $) { $return ; }
103: $if $(@expr1073742119 $!@expr1073742120 $assertEquals $(@expr1073742121 "cppcheck-2.8/test/testpath.cpp" $, 103 $, "y.c" $, $(@expr1073742122 Path ::@expr293 getRelativePath (@expr1073742124 "C:/bar/y.c" , basePaths@var102 ) $) $) $) { $return ; }
104: $if $(@expr1073742125 $!@expr1073742126 $assertEquals $(@expr1073742127 "cppcheck-2.8/test/testpath.cpp" $, 104 $, "foo/y.c" $, $(@expr1073742128 Path ::@expr293 getRelativePath (@expr1073742130 "C:/bar/foo/y.c" , basePaths@var102 ) $) $) $) { $return ; }
105: $if $(@expr1073742131 $!@expr1073742132 $assertEquals $(@expr1073742133 "cppcheck-2.8/test/testpath.cpp" $, 105 $, "C:/test.cpp" $, $(@expr1073742134 Path ::@expr293 getRelativePath (@expr1073742136 "C:/test.cpp" , basePaths@var102 ) $) $) $) { $return ; }
106: $if $(@expr1073742137 $!@expr1073742138 $assertEquals $(@expr1073742139 "cppcheck-2.8/test/testpath.cpp" $, 106 $, "C:/foobar/test.cpp" $, $(@expr1073742140 Path ::@expr293 getRelativePath (@expr1073742142 "C:/foobar/test.cpp" , basePaths@var102 ) $) $) $) { $return ; }
107: }
108:
109: void is_c ( ) const {
110: $if $(@expr1073742143 $!@expr1073742144 $assert_ $(@expr1073742145 "cppcheck-2.8/test/testpath.cpp" $, 110 $, Path ::@expr322 isC (@expr1073742147 "index.cpp" ) ==@expr1073742148 false $) $) { $return ; }
111: $if $(@expr1073742149 $!@expr1073742150 $assert_ $(@expr1073742151 "cppcheck-2.8/test/testpath.cpp" $, 111 $, Path ::@expr322 isC (@expr1073742153 "" ) ==@expr1073742154 false $) $) { $return ; }
112: $if $(@expr1073742155 $!@expr1073742156 $assert_ $(@expr1073742157 "cppcheck-2.8/test/testpath.cpp" $, 112 $, Path ::@expr322 isC (@expr1073742159 "c" ) ==@expr1073742160 false $) $) { $return ; }
113: $if $(@expr1073742161 $!@expr1073742162 $assert_ $(@expr1073742163 "cppcheck-2.8/test/testpath.cpp" $, 113 $, Path ::@expr322 isC (@expr1073742165 "index.c" ) $) $) { $return ; }
114: $if $(@expr1073742166 $!@expr1073742167 $assert_ $(@expr1073742168 "cppcheck-2.8/test/testpath.cpp" $, 114 $, Path ::@expr322 isC (@expr1073742170 "C:\\foo\\index.c" ) $) $) { $return ; }
115:
|
119:
120: $if $(@expr1073742171 $!@expr1073742172 $assertEquals $(@expr1073742173 "cppcheck-2.8/test/testpath.cpp" $, 120 $, false $, Path ::@expr322 isC (@expr1073742175 "C:\\foo\\index.C" ) $) $) { $return ; }
121:
122: }
123:
124: void is_cpp ( ) const {
125: $if $(@expr1073742176 $!@expr1073742177 $assert_ $(@expr1073742178 "cppcheck-2.8/test/testpath.cpp" $, 125 $, Path ::@expr355 isCPP (@expr1073742180 "index.c" ) ==@expr1073742181 false $) $) { $return ; }
126:
|
130:
131: $if $(@expr1073742182 $!@expr1073742183 $assertEquals $(@expr1073742184 "cppcheck-2.8/test/testpath.cpp" $, 131 $, true $, Path ::@expr355 isCPP (@expr1073742186 "index.C" ) $) $) { $return ; }
132:
133: $if $(@expr1073742187 $!@expr1073742188 $assert_ $(@expr1073742189 "cppcheck-2.8/test/testpath.cpp" $, 133 $, Path ::@expr355 isCPP (@expr1073742191 "index.cpp" ) $) $) { $return ; }
134: $if $(@expr1073742192 $!@expr1073742193 $assert_ $(@expr1073742194 "cppcheck-2.8/test/testpath.cpp" $, 134 $, Path ::@expr355 isCPP (@expr1073742196 "C:\\foo\\index.cpp" ) $) $) { $return ; }
135: $if $(@expr1073742197 $!@expr1073742198 $assert_ $(@expr1073742199 "cppcheck-2.8/test/testpath.cpp" $, 135 $, Path ::@expr355 isCPP (@expr1073742201 "C:\\foo\\index.Cpp" ) $) $) { $return ; }
136: }
137:
138: void get_path_from_filename ( ) const {
139: $if $(@expr1073742202 $!@expr1073742203 $assertEquals $(@expr1073742204 "cppcheck-2.8/test/testpath.cpp" $, 139 $, "" $, Path ::@expr381 getPathFromFilename (@expr1073742206 "index.h" ) $) $) { $return ; }
140: $if $(@expr1073742207 $!@expr1073742208 $assertEquals $(@expr1073742209 "cppcheck-2.8/test/testpath.cpp" $, 140 $, "/tmp/" $, Path ::@expr381 getPathFromFilename (@expr1073742211 "/tmp/index.h" ) $) $) { $return ; }
141: $if $(@expr1073742212 $!@expr1073742213 $assertEquals $(@expr1073742214 "cppcheck-2.8/test/testpath.cpp" $, 141 $, "a/b/c/" $, Path ::@expr381 getPathFromFilename (@expr1073742216 "a/b/c/index.h" ) $) $) { $return ; }
142: $if $(@expr1073742217 $!@expr1073742218 $assertEquals $(@expr1073742219 "cppcheck-2.8/test/testpath.cpp" $, 142 $, "a/b/c/" $, Path ::@expr381 getPathFromFilename (@expr1073742221 "a/b/c/" ) $) $) { $return ; }
143: }
144: } ;
145:
146: $namespace ${ TestPath instance_TestPath@var103 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@1}
  v {!<=-1,!>=2,0@1}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 27
  "TestPath" always "TestPath"
Line 32
  ( always {!<=-1,!>=2}
  "removeQuotationMarks" always "removeQuotationMarks"
  false always 0
  false always 0
Line 33
  ( always {!<=-1,!>=2}
  "acceptFile" always "acceptFile"
  false always 0
  false always 0
Line 34
  ( always {!<=-1,!>=2}
  "getCurrentPath" always "getCurrentPath"
  false always 0
  false always 0
Line 35
  ( always {!<=-1,!>=2}
  "isAbsolute" always "isAbsolute"
  false always 0
  false always 0
Line 36
  ( always {!<=-1,!>=2}
  "getRelative" always "getRelative"
  false always 0
  false always 0
Line 37
  ( always {!<=-1,!>=2}
  "is_c" always "is_c"
  false always 0
  false always 0
Line 38
  ( always {!<=-1,!>=2}
  "is_cpp" always "is_cpp"
  false always 0
  false always 0
Line 39
  ( always {!<=-1,!>=2}
  "get_path_from_filename" always "get_path_from_filename"
  false always 0
  false always 0
Line 44
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  44 always 44
  "index.cpp" always "index.cpp"
  "index.cpp" always "index.cpp"
Line 45
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  45 always 45
  "index.cpp" always "index.cpp"
  "\"index.cpp" always "\"index.cpp"
Line 46
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  46 always 46
  "index.cpp" always "index.cpp"
  "index.cpp\"" always "index.cpp\""
Line 47
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  47 always 47
  "index.cpp" always "index.cpp"
  "\"index.cpp\"" always "\"index.cpp\""
Line 48
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  48 always 48
  "path to/index.cpp" always "path to/index.cpp"
  "\"path to\"/index.cpp" always "\"path to\"/index.cpp"
Line 49
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  49 always 49
  "path to/index.cpp" always "path to/index.cpp"
  "\"path to/index.cpp\"" always "\"path to/index.cpp\""
Line 50
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  50 always 50
  "the/path to/index.cpp" always "the/path to/index.cpp"
  "the/\"path to\"/index.cpp" always "the/\"path to\"/index.cpp"
Line 51
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  51 always 51
  "the/path to/index.cpp" always "the/path to/index.cpp"
  "\"the/path to/index.cpp\"" always "\"the/path to/index.cpp\""
Line 55
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  55 always 55
  "index.cpp" always "index.cpp"
Line 56
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  56 always 56
  "index.invalid.cpp" always "index.invalid.cpp"
Line 57
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  57 always 57
  "index.invalid.Cpp" always "index.invalid.Cpp"
Line 58
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  58 always 58
  "index.invalid.C" always "index.invalid.C"
Line 59
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  59 always 59
  "index.invalid.C++" always "index.invalid.C++"
Line 60
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  60 always 60
  "index." always "index."
  == always {!<=-1,!>=2}
  false always 0
Line 61
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  61 always 61
  "index" always "index"
  == always {!<=-1,!>=2}
  false always 0
Line 62
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  62 always 62
  "" always ""
  == always {!<=-1,!>=2}
  false always 0
Line 63
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  63 always 63
  "C" always "C"
  == always {!<=-1,!>=2}
  false always 0
Line 66
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  66 always 66
  false always 0
  "index.h" always "index.h"
Line 67
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  67 always 67
  false always 0
  "index.hpp" always "index.hpp"
Line 71
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  71 always 71
  true always 1
Line 87
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  87 always 87
  true always 1
  "/foo/bar" always "/foo/bar"
Line 88
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  88 always 88
  true always 1
  "/" always "/"
Line 89
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  89 always 89
  false always 0
  "foo/bar" always "foo/bar"
Line 90
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  90 always 90
  false always 0
  "foo.cpp" always "foo.cpp"
Line 96
  "" always ""
Line 97
  "C:/foo" always "C:/foo"
Line 98
  "C:/bar/" always "C:/bar/"
Line 99
  "C:/test.cpp" always "C:/test.cpp"
Line 102
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  102 always 102
  "x.c" always "x.c"
  "C:/foo/x.c" always "C:/foo/x.c"
  basePaths always {{,size=4}
Line 103
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  103 always 103
  "y.c" always "y.c"
  "C:/bar/y.c" always "C:/bar/y.c"
  basePaths always {
Line 104
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  104 always 104
  "foo/y.c" always "foo/y.c"
  "C:/bar/foo/y.c" always "C:/bar/foo/y.c"
  basePaths always {
Line 105
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  105 always 105
  "C:/test.cpp" always "C:/test.cpp"
  "C:/test.cpp" always "C:/test.cpp"
  basePaths always {
Line 106
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  106 always 106
  "C:/foobar/test.cpp" always "C:/foobar/test.cpp"
  "C:/foobar/test.cpp" always "C:/foobar/test.cpp"
  basePaths always {
Line 110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  110 always 110
  "index.cpp" always "index.cpp"
  == always {!<=-1,!>=2}
  false always 0
Line 111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  111 always 111
  "" always ""
  == always {!<=-1,!>=2}
  false always 0
Line 112
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  112 always 112
  "c" always "c"
  == always {!<=-1,!>=2}
  false always 0
Line 113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  113 always 113
  "index.c" always "index.c"
Line 114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  114 always 114
  "C:\\foo\\index.c" always "C:\\foo\\index.c"
Line 120
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  120 always 120
  false always 0
  "C:\\foo\\index.C" always "C:\\foo\\index.C"
Line 125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  125 always 125
  "index.c" always "index.c"
  == always {!<=-1,!>=2}
  false always 0
Line 131
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  131 always 131
  true always 1
  "index.C" always "index.C"
Line 133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  133 always 133
  "index.cpp" always "index.cpp"
Line 134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  134 always 134
  "C:\\foo\\index.cpp" always "C:\\foo\\index.cpp"
Line 135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  135 always 135
  "C:\\foo\\index.Cpp" always "C:\\foo\\index.Cpp"
Line 139
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  139 always 139
  "" always ""
  "index.h" always "index.h"
Line 140
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  140 always 140
  "/tmp/" always "/tmp/"
  "/tmp/index.h" always "/tmp/index.h"
Line 141
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  141 always 141
  "a/b/c/" always "a/b/c/"
  "a/b/c/index.h" always "a/b/c/index.h"
Line 142
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpath.cpp" always "cppcheck-2.8/test/testpath.cpp"
  142 always 142
  "a/b/c/" always "a/b/c/"
  "a/b/c/" always "a/b/c/"
