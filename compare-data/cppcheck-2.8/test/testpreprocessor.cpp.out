

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742256 expected@var22 !=@expr1073742257 actual@var23 ) {
62: std ::@expr1073742258 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742259 expected@var22 ;
64: std ::@expr1073742260 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742261 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742262 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742263 str (@expr1073742264 ) , actualStr@var26 .@expr1073742265 str (@expr1073742266 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742267 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742268 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742269 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742270 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testpreprocessor.cpp

1:
|
40:
41: class ErrorLogger ;
42:
43: class TestPreprocessor : public TestFixture {
44: public:
45: TestPreprocessor ( )
46: : TestFixture ( "TestPreprocessor" )
47: , preprocessor0@var113 ( settings0@var112 , this ) {
48: settings0@var112 .@expr1073742272 severity@var430 .@expr1073742273 enable (@expr1073742274 Severity ::@expr1073742275 information@expr1073742271 ) ;
49: }
50:
51: class OurPreprocessor : public Preprocessor {
52: public:
53:
54: static std :: string expandMacros ( const char code@var102 [ ] , ErrorLogger * errorLogger@var103 = nullptr ) {
55: std ::@expr1073742276 istringstream istr@var104 (@expr1073742277 code@var102 ) ;
56: simplecpp ::@expr1073742278 OutputList outputList@var105 ;
57: std ::@expr1073742279 vector < std ::@expr456 string > files@var106 ;
58: const simplecpp ::@expr456 TokenList tokens1@var107 =@expr1073742282 simplecpp ::@expr1073742283 TokenList (@expr1073742284 istr@var104 , files@var106 , "file.cpp" , &@expr461 outputList@var105 ) ;
59: std ::@expr1073742286 map < std ::@expr456 string , simplecpp ::@expr456 TokenList *@expr1073742289 > filedata@var108 ;
60: simplecpp ::@expr1073742290 TokenList tokens2@var109 (@expr1073742291 files@var106 ) ;
61: simplecpp ::@expr1073742292 preprocess (@expr1073742293 tokens2@var109 , tokens1@var107 , files@var106 , filedata@var108 , simplecpp ::@expr1073742294 DUI (@expr1073742295 ) , &@expr461 outputList@var105 ) ;
62:
63: if (@expr1073742297 errorLogger@var103 ) {
64: static Settings settings@var110 ;
65: Preprocessor p@var111 (@expr1073742298 settings@var110 , errorLogger@var103 ) ;
66: p@var111 .@expr1073742299 reportOutput (@expr1073742300 outputList@var105 , true ) ;
67: }
68:
69: return tokens2@var109 .@expr1073742301 stringify (@expr1073742302 ) ;
70: }
71: } ;
72:
73: private:
74: Settings settings0@var112 ;
75: Preprocessor preprocessor0@var113 ;
76:
77: void run ( ) override {
78:
79:
80: $do ${ $if $(@expr1073742303 $prepareTest $(@expr1073742304 "Bug2190219" $) $) ${ $setVerbose $(@expr1073742305 $false $) $; Bug2190219 $(@expr1073742306 $) $; $} $} $while $(@expr1073742307 $false $) ;
81:
82: $do ${ $if $(@expr1073742308 $prepareTest $(@expr1073742309 "error1" $) $) ${ $setVerbose $(@expr1073742310 $false $) $; error1 $(@expr1073742311 $) $; $} $} $while $(@expr1073742312 $false $) ;
83: $do ${ $if $(@expr1073742313 $prepareTest $(@expr1073742314 "error2" $) $) ${ $setVerbose $(@expr1073742315 $false $) $; error2 $(@expr1073742316 $) $; $} $} $while $(@expr1073742317 $false $) ;
84: $do ${ $if $(@expr1073742318 $prepareTest $(@expr1073742319 "error3" $) $) ${ $setVerbose $(@expr1073742320 $false $) $; error3 $(@expr1073742321 $) $; $} $} $while $(@expr1073742322 $false $) ;
85: $do ${ $if $(@expr1073742323 $prepareTest $(@expr1073742324 "error4" $) $) ${ $setVerbose $(@expr1073742325 $false $) $; error4 $(@expr1073742326 $) $; $} $} $while $(@expr1073742327 $false $) ;
86: $do ${ $if $(@expr1073742328 $prepareTest $(@expr1073742329 "error5" $) $) ${ $setVerbose $(@expr1073742330 $false $) $; error5 $(@expr1073742331 $) $; $} $} $while $(@expr1073742332 $false $) ;
87: $do ${ $if $(@expr1073742333 $prepareTest $(@expr1073742334 "error6" $) $) ${ $setVerbose $(@expr1073742335 $false $) $; error6 $(@expr1073742336 $) $; $} $} $while $(@expr1073742337 $false $) ;
88: $do ${ $if $(@expr1073742338 $prepareTest $(@expr1073742339 "error7" $) $) ${ $setVerbose $(@expr1073742340 $false $) $; error7 $(@expr1073742341 $) $; $} $} $while $(@expr1073742342 $false $) ;
89: $do ${ $if $(@expr1073742343 $prepareTest $(@expr1073742344 "error8" $) $) ${ $setVerbose $(@expr1073742345 $false $) $; error8 $(@expr1073742346 $) $; $} $} $while $(@expr1073742347 $false $) ;
90:
91: $do ${ $if $(@expr1073742348 $prepareTest $(@expr1073742349 "setPlatformInfo" $) $) ${ $setVerbose $(@expr1073742350 $false $) $; setPlatformInfo $(@expr1073742351 $) $; $} $} $while $(@expr1073742352 $false $) ;
92:
93:
94: $do ${ $if $(@expr1073742353 $prepareTest $(@expr1073742354 "includeguard1" $) $) ${ $setVerbose $(@expr1073742355 $false $) $; includeguard1 $(@expr1073742356 $) $; $} $} $while $(@expr1073742357 $false $) ;
95: $do ${ $if $(@expr1073742358 $prepareTest $(@expr1073742359 "includeguard2" $) $) ${ $setVerbose $(@expr1073742360 $false $) $; includeguard2 $(@expr1073742361 $) $; $} $} $while $(@expr1073742362 $false $) ;
96:
97: $do ${ $if $(@expr1073742363 $prepareTest $(@expr1073742364 "if0" $) $) ${ $setVerbose $(@expr1073742365 $false $) $; if0 $(@expr1073742366 $) $; $} $} $while $(@expr1073742367 $false $) ;
98: $do ${ $if $(@expr1073742368 $prepareTest $(@expr1073742369 "if1" $) $) ${ $setVerbose $(@expr1073742370 $false $) $; if1 $(@expr1073742371 $) $; $} $} $while $(@expr1073742372 $false $) ;
99:
100: $do ${ $if $(@expr1073742373 $prepareTest $(@expr1073742374 "elif" $) $) ${ $setVerbose $(@expr1073742375 $false $) $; elif $(@expr1073742376 $) $; $} $} $while $(@expr1073742377 $false $) ;
101:
102: $do ${ $if $(@expr1073742378 $prepareTest $(@expr1073742379 "if_cond1" $) $) ${ $setVerbose $(@expr1073742380 $false $) $; if_cond1 $(@expr1073742381 $) $; $} $} $while $(@expr1073742382 $false $) ;
103: $do ${ $if $(@expr1073742383 $prepareTest $(@expr1073742384 "if_cond2" $) $) ${ $setVerbose $(@expr1073742385 $false $) $; if_cond2 $(@expr1073742386 $) $; $} $} $while $(@expr1073742387 $false $) ;
104: $do ${ $if $(@expr1073742388 $prepareTest $(@expr1073742389 "if_cond3" $) $) ${ $setVerbose $(@expr1073742390 $false $) $; if_cond3 $(@expr1073742391 $) $; $} $} $while $(@expr1073742392 $false $) ;
105: $do ${ $if $(@expr1073742393 $prepareTest $(@expr1073742394 "if_cond4" $) $) ${ $setVerbose $(@expr1073742395 $false $) $; if_cond4 $(@expr1073742396 $) $; $} $} $while $(@expr1073742397 $false $) ;
106: $do ${ $if $(@expr1073742398 $prepareTest $(@expr1073742399 "if_cond5" $) $) ${ $setVerbose $(@expr1073742400 $false $) $; if_cond5 $(@expr1073742401 $) $; $} $} $while $(@expr1073742402 $false $) ;
107: $do ${ $if $(@expr1073742403 $prepareTest $(@expr1073742404 "if_cond6" $) $) ${ $setVerbose $(@expr1073742405 $false $) $; if_cond6 $(@expr1073742406 $) $; $} $} $while $(@expr1073742407 $false $) ;
108: $do ${ $if $(@expr1073742408 $prepareTest $(@expr1073742409 "if_cond8" $) $) ${ $setVerbose $(@expr1073742410 $false $) $; if_cond8 $(@expr1073742411 $) $; $} $} $while $(@expr1073742412 $false $) ;
109: $do ${ $if $(@expr1073742413 $prepareTest $(@expr1073742414 "if_cond9" $) $) ${ $setVerbose $(@expr1073742415 $false $) $; if_cond9 $(@expr1073742416 $) $; $} $} $while $(@expr1073742417 $false $) ;
110: $do ${ $if $(@expr1073742418 $prepareTest $(@expr1073742419 "if_cond10" $) $) ${ $setVerbose $(@expr1073742420 $false $) $; if_cond10 $(@expr1073742421 $) $; $} $} $while $(@expr1073742422 $false $) ;
111: $do ${ $if $(@expr1073742423 $prepareTest $(@expr1073742424 "if_cond11" $) $) ${ $setVerbose $(@expr1073742425 $false $) $; if_cond11 $(@expr1073742426 $) $; $} $} $while $(@expr1073742427 $false $) ;
112: $do ${ $if $(@expr1073742428 $prepareTest $(@expr1073742429 "if_cond12" $) $) ${ $setVerbose $(@expr1073742430 $false $) $; if_cond12 $(@expr1073742431 $) $; $} $} $while $(@expr1073742432 $false $) ;
113: $do ${ $if $(@expr1073742433 $prepareTest $(@expr1073742434 "if_cond13" $) $) ${ $setVerbose $(@expr1073742435 $false $) $; if_cond13 $(@expr1073742436 $) $; $} $} $while $(@expr1073742437 $false $) ;
114: $do ${ $if $(@expr1073742438 $prepareTest $(@expr1073742439 "if_cond14" $) $) ${ $setVerbose $(@expr1073742440 $false $) $; if_cond14 $(@expr1073742441 $) $; $} $} $while $(@expr1073742442 $false $) ;
115:
116: $do ${ $if $(@expr1073742443 $prepareTest $(@expr1073742444 "if_or_1" $) $) ${ $setVerbose $(@expr1073742445 $false $) $; if_or_1 $(@expr1073742446 $) $; $} $} $while $(@expr1073742447 $false $) ;
117: $do ${ $if $(@expr1073742448 $prepareTest $(@expr1073742449 "if_or_2" $) $) ${ $setVerbose $(@expr1073742450 $false $) $; if_or_2 $(@expr1073742451 $) $; $} $} $while $(@expr1073742452 $false $) ;
118:
119: $do ${ $if $(@expr1073742453 $prepareTest $(@expr1073742454 "if_macro_eq_macro" $) $) ${ $setVerbose $(@expr1073742455 $false $) $; if_macro_eq_macro $(@expr1073742456 $) $; $} $} $while $(@expr1073742457 $false $) ;
120: $do ${ $if $(@expr1073742458 $prepareTest $(@expr1073742459 "ticket_3675" $) $) ${ $setVerbose $(@expr1073742460 $false $) $; ticket_3675 $(@expr1073742461 $) $; $} $} $while $(@expr1073742462 $false $) ;
121: $do ${ $if $(@expr1073742463 $prepareTest $(@expr1073742464 "ticket_3699" $) $) ${ $setVerbose $(@expr1073742465 $false $) $; ticket_3699 $(@expr1073742466 $) $; $} $} $while $(@expr1073742467 $false $) ;
122: $do ${ $if $(@expr1073742468 $prepareTest $(@expr1073742469 "ticket_4922" $) $) ${ $setVerbose $(@expr1073742470 $false $) $; ticket_4922 $(@expr1073742471 $) $; $} $} $while $(@expr1073742472 $false $) ;
123:
124:
125: $do ${ $if $(@expr1073742473 $prepareTest $(@expr1073742474 "macro_simple1" $) $) ${ $setVerbose $(@expr1073742475 $false $) $; macro_simple1 $(@expr1073742476 $) $; $} $} $while $(@expr1073742477 $false $) ;
126: $do ${ $if $(@expr1073742478 $prepareTest $(@expr1073742479 "macro_simple2" $) $) ${ $setVerbose $(@expr1073742480 $false $) $; macro_simple2 $(@expr1073742481 $) $; $} $} $while $(@expr1073742482 $false $) ;
127: $do ${ $if $(@expr1073742483 $prepareTest $(@expr1073742484 "macro_simple3" $) $) ${ $setVerbose $(@expr1073742485 $false $) $; macro_simple3 $(@expr1073742486 $) $; $} $} $while $(@expr1073742487 $false $) ;
128: $do ${ $if $(@expr1073742488 $prepareTest $(@expr1073742489 "macro_simple4" $) $) ${ $setVerbose $(@expr1073742490 $false $) $; macro_simple4 $(@expr1073742491 $) $; $} $} $while $(@expr1073742492 $false $) ;
129: $do ${ $if $(@expr1073742493 $prepareTest $(@expr1073742494 "macro_simple5" $) $) ${ $setVerbose $(@expr1073742495 $false $) $; macro_simple5 $(@expr1073742496 $) $; $} $} $while $(@expr1073742497 $false $) ;
130: $do ${ $if $(@expr1073742498 $prepareTest $(@expr1073742499 "macro_simple6" $) $) ${ $setVerbose $(@expr1073742500 $false $) $; macro_simple6 $(@expr1073742501 $) $; $} $} $while $(@expr1073742502 $false $) ;
131: $do ${ $if $(@expr1073742503 $prepareTest $(@expr1073742504 "macro_simple7" $) $) ${ $setVerbose $(@expr1073742505 $false $) $; macro_simple7 $(@expr1073742506 $) $; $} $} $while $(@expr1073742507 $false $) ;
132: $do ${ $if $(@expr1073742508 $prepareTest $(@expr1073742509 "macro_simple8" $) $) ${ $setVerbose $(@expr1073742510 $false $) $; macro_simple8 $(@expr1073742511 $) $; $} $} $while $(@expr1073742512 $false $) ;
133: $do ${ $if $(@expr1073742513 $prepareTest $(@expr1073742514 "macro_simple9" $) $) ${ $setVerbose $(@expr1073742515 $false $) $; macro_simple9 $(@expr1073742516 $) $; $} $} $while $(@expr1073742517 $false $) ;
134: $do ${ $if $(@expr1073742518 $prepareTest $(@expr1073742519 "macro_simple10" $) $) ${ $setVerbose $(@expr1073742520 $false $) $; macro_simple10 $(@expr1073742521 $) $; $} $} $while $(@expr1073742522 $false $) ;
135: $do ${ $if $(@expr1073742523 $prepareTest $(@expr1073742524 "macro_simple11" $) $) ${ $setVerbose $(@expr1073742525 $false $) $; macro_simple11 $(@expr1073742526 $) $; $} $} $while $(@expr1073742527 $false $) ;
136: $do ${ $if $(@expr1073742528 $prepareTest $(@expr1073742529 "macro_simple12" $) $) ${ $setVerbose $(@expr1073742530 $false $) $; macro_simple12 $(@expr1073742531 $) $; $} $} $while $(@expr1073742532 $false $) ;
137: $do ${ $if $(@expr1073742533 $prepareTest $(@expr1073742534 "macro_simple13" $) $) ${ $setVerbose $(@expr1073742535 $false $) $; macro_simple13 $(@expr1073742536 $) $; $} $} $while $(@expr1073742537 $false $) ;
138: $do ${ $if $(@expr1073742538 $prepareTest $(@expr1073742539 "macro_simple14" $) $) ${ $setVerbose $(@expr1073742540 $false $) $; macro_simple14 $(@expr1073742541 $) $; $} $} $while $(@expr1073742542 $false $) ;
139: $do ${ $if $(@expr1073742543 $prepareTest $(@expr1073742544 "macro_simple15" $) $) ${ $setVerbose $(@expr1073742545 $false $) $; macro_simple15 $(@expr1073742546 $) $; $} $} $while $(@expr1073742547 $false $) ;
140: $do ${ $if $(@expr1073742548 $prepareTest $(@expr1073742549 "macro_simple16" $) $) ${ $setVerbose $(@expr1073742550 $false $) $; macro_simple16 $(@expr1073742551 $) $; $} $} $while $(@expr1073742552 $false $) ;
141: $do ${ $if $(@expr1073742553 $prepareTest $(@expr1073742554 "macro_simple17" $) $) ${ $setVerbose $(@expr1073742555 $false $) $; macro_simple17 $(@expr1073742556 $) $; $} $} $while $(@expr1073742557 $false $) ;
142: $do ${ $if $(@expr1073742558 $prepareTest $(@expr1073742559 "macro_simple18" $) $) ${ $setVerbose $(@expr1073742560 $false $) $; macro_simple18 $(@expr1073742561 $) $; $} $} $while $(@expr1073742562 $false $) ;
143: $do ${ $if $(@expr1073742563 $prepareTest $(@expr1073742564 "macroInMacro1" $) $) ${ $setVerbose $(@expr1073742565 $false $) $; macroInMacro1 $(@expr1073742566 $) $; $} $} $while $(@expr1073742567 $false $) ;
144: $do ${ $if $(@expr1073742568 $prepareTest $(@expr1073742569 "macroInMacro2" $) $) ${ $setVerbose $(@expr1073742570 $false $) $; macroInMacro2 $(@expr1073742571 $) $; $} $} $while $(@expr1073742572 $false $) ;
145: $do ${ $if $(@expr1073742573 $prepareTest $(@expr1073742574 "macro_linenumbers" $) $) ${ $setVerbose $(@expr1073742575 $false $) $; macro_linenumbers $(@expr1073742576 $) $; $} $} $while $(@expr1073742577 $false $) ;
146: $do ${ $if $(@expr1073742578 $prepareTest $(@expr1073742579 "macro_nopar" $) $) ${ $setVerbose $(@expr1073742580 $false $) $; macro_nopar $(@expr1073742581 $) $; $} $} $while $(@expr1073742582 $false $) ;
147: $do ${ $if $(@expr1073742583 $prepareTest $(@expr1073742584 "macro_incdec" $) $) ${ $setVerbose $(@expr1073742585 $false $) $; macro_incdec $(@expr1073742586 $) $; $} $} $while $(@expr1073742587 $false $) ;
148: $do ${ $if $(@expr1073742588 $prepareTest $(@expr1073742589 "macro_switchCase" $) $) ${ $setVerbose $(@expr1073742590 $false $) $; macro_switchCase $(@expr1073742591 $) $; $} $} $while $(@expr1073742592 $false $) ;
149: $do ${ $if $(@expr1073742593 $prepareTest $(@expr1073742594 "macro_NULL" $) $) ${ $setVerbose $(@expr1073742595 $false $) $; macro_NULL $(@expr1073742596 $) $; $} $} $while $(@expr1073742597 $false $) ;
150: $do ${ $if $(@expr1073742598 $prepareTest $(@expr1073742599 "string1" $) $) ${ $setVerbose $(@expr1073742600 $false $) $; string1 $(@expr1073742601 $) $; $} $} $while $(@expr1073742602 $false $) ;
151: $do ${ $if $(@expr1073742603 $prepareTest $(@expr1073742604 "string2" $) $) ${ $setVerbose $(@expr1073742605 $false $) $; string2 $(@expr1073742606 $) $; $} $} $while $(@expr1073742607 $false $) ;
152: $do ${ $if $(@expr1073742608 $prepareTest $(@expr1073742609 "string3" $) $) ${ $setVerbose $(@expr1073742610 $false $) $; string3 $(@expr1073742611 $) $; $} $} $while $(@expr1073742612 $false $) ;
153: $do ${ $if $(@expr1073742613 $prepareTest $(@expr1073742614 "preprocessor_undef" $) $) ${ $setVerbose $(@expr1073742615 $false $) $; preprocessor_undef $(@expr1073742616 $) $; $} $} $while $(@expr1073742617 $false $) ;
154: $do ${ $if $(@expr1073742618 $prepareTest $(@expr1073742619 "defdef" $) $) ${ $setVerbose $(@expr1073742620 $false $) $; defdef $(@expr1073742621 $) $; $} $} $while $(@expr1073742622 $false $) ;
155: $do ${ $if $(@expr1073742623 $prepareTest $(@expr1073742624 "preprocessor_doublesharp" $) $) ${ $setVerbose $(@expr1073742625 $false $) $; preprocessor_doublesharp $(@expr1073742626 $) $; $} $} $while $(@expr1073742627 $false $) ;
156: $do ${ $if $(@expr1073742628 $prepareTest $(@expr1073742629 "preprocessor_include_in_str" $) $) ${ $setVerbose $(@expr1073742630 $false $) $; preprocessor_include_in_str $(@expr1073742631 $) $; $} $} $while $(@expr1073742632 $false $) ;
157: $do ${ $if $(@expr1073742633 $prepareTest $(@expr1073742634 "va_args_1" $) $) ${ $setVerbose $(@expr1073742635 $false $) $; va_args_1 $(@expr1073742636 $) $; $} $} $while $(@expr1073742637 $false $) ;
158:
159: $do ${ $if $(@expr1073742638 $prepareTest $(@expr1073742639 "va_args_3" $) $) ${ $setVerbose $(@expr1073742640 $false $) $; va_args_3 $(@expr1073742641 $) $; $} $} $while $(@expr1073742642 $false $) ;
160: $do ${ $if $(@expr1073742643 $prepareTest $(@expr1073742644 "va_args_4" $) $) ${ $setVerbose $(@expr1073742645 $false $) $; va_args_4 $(@expr1073742646 $) $; $} $} $while $(@expr1073742647 $false $) ;
161: $do ${ $if $(@expr1073742648 $prepareTest $(@expr1073742649 "va_args_5" $) $) ${ $setVerbose $(@expr1073742650 $false $) $; va_args_5 $(@expr1073742651 $) $; $} $} $while $(@expr1073742652 $false $) ;
162: $do ${ $if $(@expr1073742653 $prepareTest $(@expr1073742654 "multi_character_character" $) $) ${ $setVerbose $(@expr1073742655 $false $) $; multi_character_character $(@expr1073742656 $) $; $} $} $while $(@expr1073742657 $false $) ;
163:
164: $do ${ $if $(@expr1073742658 $prepareTest $(@expr1073742659 "stringify" $) $) ${ $setVerbose $(@expr1073742660 $false $) $; stringify $(@expr1073742661 $) $; $} $} $while $(@expr1073742662 $false $) ;
165: $do ${ $if $(@expr1073742663 $prepareTest $(@expr1073742664 "stringify2" $) $) ${ $setVerbose $(@expr1073742665 $false $) $; stringify2 $(@expr1073742666 $) $; $} $} $while $(@expr1073742667 $false $) ;
166: $do ${ $if $(@expr1073742668 $prepareTest $(@expr1073742669 "stringify3" $) $) ${ $setVerbose $(@expr1073742670 $false $) $; stringify3 $(@expr1073742671 $) $; $} $} $while $(@expr1073742672 $false $) ;
167: $do ${ $if $(@expr1073742673 $prepareTest $(@expr1073742674 "stringify4" $) $) ${ $setVerbose $(@expr1073742675 $false $) $; stringify4 $(@expr1073742676 $) $; $} $} $while $(@expr1073742677 $false $) ;
168: $do ${ $if $(@expr1073742678 $prepareTest $(@expr1073742679 "stringify5" $) $) ${ $setVerbose $(@expr1073742680 $false $) $; stringify5 $(@expr1073742681 $) $; $} $} $while $(@expr1073742682 $false $) ;
169: $do ${ $if $(@expr1073742683 $prepareTest $(@expr1073742684 "ifdefwithfile" $) $) ${ $setVerbose $(@expr1073742685 $false $) $; ifdefwithfile $(@expr1073742686 $) $; $} $} $while $(@expr1073742687 $false $) ;
170: $do ${ $if $(@expr1073742688 $prepareTest $(@expr1073742689 "pragma" $) $) ${ $setVerbose $(@expr1073742690 $false $) $; pragma $(@expr1073742691 $) $; $} $} $while $(@expr1073742692 $false $) ;
171: $do ${ $if $(@expr1073742693 $prepareTest $(@expr1073742694 "pragma_asm_1" $) $) ${ $setVerbose $(@expr1073742695 $false $) $; pragma_asm_1 $(@expr1073742696 $) $; $} $} $while $(@expr1073742697 $false $) ;
172: $do ${ $if $(@expr1073742698 $prepareTest $(@expr1073742699 "pragma_asm_2" $) $) ${ $setVerbose $(@expr1073742700 $false $) $; pragma_asm_2 $(@expr1073742701 $) $; $} $} $while $(@expr1073742702 $false $) ;
173: $do ${ $if $(@expr1073742703 $prepareTest $(@expr1073742704 "endifsemicolon" $) $) ${ $setVerbose $(@expr1073742705 $false $) $; endifsemicolon $(@expr1073742706 $) $; $} $} $while $(@expr1073742707 $false $) ;
174: $do ${ $if $(@expr1073742708 $prepareTest $(@expr1073742709 "missing_doublequote" $) $) ${ $setVerbose $(@expr1073742710 $false $) $; missing_doublequote $(@expr1073742711 $) $; $} $} $while $(@expr1073742712 $false $) ;
175: $do ${ $if $(@expr1073742713 $prepareTest $(@expr1073742714 "handle_error" $) $) ${ $setVerbose $(@expr1073742715 $false $) $; handle_error $(@expr1073742716 $) $; $} $} $while $(@expr1073742717 $false $) ;
176: $do ${ $if $(@expr1073742718 $prepareTest $(@expr1073742719 "dup_defines" $) $) ${ $setVerbose $(@expr1073742720 $false $) $; dup_defines $(@expr1073742721 $) $; $} $} $while $(@expr1073742722 $false $) ;
177:
178: $do ${ $if $(@expr1073742723 $prepareTest $(@expr1073742724 "define_part_of_func" $) $) ${ $setVerbose $(@expr1073742725 $false $) $; define_part_of_func $(@expr1073742726 $) $; $} $} $while $(@expr1073742727 $false $) ;
179: $do ${ $if $(@expr1073742728 $prepareTest $(@expr1073742729 "conditionalDefine" $) $) ${ $setVerbose $(@expr1073742730 $false $) $; conditionalDefine $(@expr1073742731 $) $; $} $} $while $(@expr1073742732 $false $) ;
180: $do ${ $if $(@expr1073742733 $prepareTest $(@expr1073742734 "macro_parameters" $) $) ${ $setVerbose $(@expr1073742735 $false $) $; macro_parameters $(@expr1073742736 $) $; $} $} $while $(@expr1073742737 $false $) ;
181: $do ${ $if $(@expr1073742738 $prepareTest $(@expr1073742739 "newline_in_macro" $) $) ${ $setVerbose $(@expr1073742740 $false $) $; newline_in_macro $(@expr1073742741 $) $; $} $} $while $(@expr1073742742 $false $) ;
182: $do ${ $if $(@expr1073742743 $prepareTest $(@expr1073742744 "ifdef_ifdefined" $) $) ${ $setVerbose $(@expr1073742745 $false $) $; ifdef_ifdefined $(@expr1073742746 $) $; $} $} $while $(@expr1073742747 $false $) ;
183:
184:
185: $do ${ $if $(@expr1073742748 $prepareTest $(@expr1073742749 "define_if1" $) $) ${ $setVerbose $(@expr1073742750 $false $) $; define_if1 $(@expr1073742751 $) $; $} $} $while $(@expr1073742752 $false $) ;
186: $do ${ $if $(@expr1073742753 $prepareTest $(@expr1073742754 "define_if2" $) $) ${ $setVerbose $(@expr1073742755 $false $) $; define_if2 $(@expr1073742756 $) $; $} $} $while $(@expr1073742757 $false $) ;
187: $do ${ $if $(@expr1073742758 $prepareTest $(@expr1073742759 "define_if3" $) $) ${ $setVerbose $(@expr1073742760 $false $) $; define_if3 $(@expr1073742761 $) $; $} $} $while $(@expr1073742762 $false $) ;
188: $do ${ $if $(@expr1073742763 $prepareTest $(@expr1073742764 "define_if4" $) $) ${ $setVerbose $(@expr1073742765 $false $) $; define_if4 $(@expr1073742766 $) $; $} $} $while $(@expr1073742767 $false $) ;
189: $do ${ $if $(@expr1073742768 $prepareTest $(@expr1073742769 "define_if5" $) $) ${ $setVerbose $(@expr1073742770 $false $) $; define_if5 $(@expr1073742771 $) $; $} $} $while $(@expr1073742772 $false $) ;
190: $do ${ $if $(@expr1073742773 $prepareTest $(@expr1073742774 "define_if6" $) $) ${ $setVerbose $(@expr1073742775 $false $) $; define_if6 $(@expr1073742776 $) $; $} $} $while $(@expr1073742777 $false $) ;
191: $do ${ $if $(@expr1073742778 $prepareTest $(@expr1073742779 "define_ifdef" $) $) ${ $setVerbose $(@expr1073742780 $false $) $; define_ifdef $(@expr1073742781 $) $; $} $} $while $(@expr1073742782 $false $) ;
192: $do ${ $if $(@expr1073742783 $prepareTest $(@expr1073742784 "define_ifndef1" $) $) ${ $setVerbose $(@expr1073742785 $false $) $; define_ifndef1 $(@expr1073742786 $) $; $} $} $while $(@expr1073742787 $false $) ;
193: $do ${ $if $(@expr1073742788 $prepareTest $(@expr1073742789 "define_ifndef2" $) $) ${ $setVerbose $(@expr1073742790 $false $) $; define_ifndef2 $(@expr1073742791 $) $; $} $} $while $(@expr1073742792 $false $) ;
194: $do ${ $if $(@expr1073742793 $prepareTest $(@expr1073742794 "ifndef_define" $) $) ${ $setVerbose $(@expr1073742795 $false $) $; ifndef_define $(@expr1073742796 $) $; $} $} $while $(@expr1073742797 $false $) ;
195: $do ${ $if $(@expr1073742798 $prepareTest $(@expr1073742799 "undef_ifdef" $) $) ${ $setVerbose $(@expr1073742800 $false $) $; undef_ifdef $(@expr1073742801 $) $; $} $} $while $(@expr1073742802 $false $) ;
196: $do ${ $if $(@expr1073742803 $prepareTest $(@expr1073742804 "endfile" $) $) ${ $setVerbose $(@expr1073742805 $false $) $; endfile $(@expr1073742806 $) $; $} $} $while $(@expr1073742807 $false $) ;
197:
198: $do ${ $if $(@expr1073742808 $prepareTest $(@expr1073742809 "redundant_config" $) $) ${ $setVerbose $(@expr1073742810 $false $) $; redundant_config $(@expr1073742811 $) $; $} $} $while $(@expr1073742812 $false $) ;
199:
200: $do ${ $if $(@expr1073742813 $prepareTest $(@expr1073742814 "invalid_define_1" $) $) ${ $setVerbose $(@expr1073742815 $false $) $; invalid_define_1 $(@expr1073742816 $) $; $} $} $while $(@expr1073742817 $false $) ;
201: $do ${ $if $(@expr1073742818 $prepareTest $(@expr1073742819 "invalid_define_2" $) $) ${ $setVerbose $(@expr1073742820 $false $) $; invalid_define_2 $(@expr1073742821 $) $; $} $} $while $(@expr1073742822 $false $) ;
202:
203:
204: $do ${ $if $(@expr1073742823 $prepareTest $(@expr1073742824 "inline_suppression_for_missing_include" $) $) ${ $setVerbose $(@expr1073742825 $false $) $; inline_suppression_for_missing_include $(@expr1073742826 $) $; $} $} $while $(@expr1073742827 $false $) ;
205:
206:
207: $do ${ $if $(@expr1073742828 $prepareTest $(@expr1073742829 "predefine1" $) $) ${ $setVerbose $(@expr1073742830 $false $) $; predefine1 $(@expr1073742831 $) $; $} $} $while $(@expr1073742832 $false $) ;
208: $do ${ $if $(@expr1073742833 $prepareTest $(@expr1073742834 "predefine2" $) $) ${ $setVerbose $(@expr1073742835 $false $) $; predefine2 $(@expr1073742836 $) $; $} $} $while $(@expr1073742837 $false $) ;
209: $do ${ $if $(@expr1073742838 $prepareTest $(@expr1073742839 "predefine3" $) $) ${ $setVerbose $(@expr1073742840 $false $) $; predefine3 $(@expr1073742841 $) $; $} $} $while $(@expr1073742842 $false $) ;
210: $do ${ $if $(@expr1073742843 $prepareTest $(@expr1073742844 "predefine4" $) $) ${ $setVerbose $(@expr1073742845 $false $) $; predefine4 $(@expr1073742846 $) $; $} $} $while $(@expr1073742847 $false $) ;
211: $do ${ $if $(@expr1073742848 $prepareTest $(@expr1073742849 "predefine5" $) $) ${ $setVerbose $(@expr1073742850 $false $) $; predefine5 $(@expr1073742851 $) $; $} $} $while $(@expr1073742852 $false $) ;
212: $do ${ $if $(@expr1073742853 $prepareTest $(@expr1073742854 "predefine6" $) $) ${ $setVerbose $(@expr1073742855 $false $) $; predefine6 $(@expr1073742856 $) $; $} $} $while $(@expr1073742857 $false $) ;
213:
214: $do ${ $if $(@expr1073742858 $prepareTest $(@expr1073742859 "invalidElIf" $) $) ${ $setVerbose $(@expr1073742860 $false $) $; invalidElIf $(@expr1073742861 $) $; $} $} $while $(@expr1073742862 $false $) ;
215:
216:
217: $do ${ $if $(@expr1073742863 $prepareTest $(@expr1073742864 "getConfigs1" $) $) ${ $setVerbose $(@expr1073742865 $false $) $; getConfigs1 $(@expr1073742866 $) $; $} $} $while $(@expr1073742867 $false $) ;
218: $do ${ $if $(@expr1073742868 $prepareTest $(@expr1073742869 "getConfigs2" $) $) ${ $setVerbose $(@expr1073742870 $false $) $; getConfigs2 $(@expr1073742871 $) $; $} $} $while $(@expr1073742872 $false $) ;
219: $do ${ $if $(@expr1073742873 $prepareTest $(@expr1073742874 "getConfigs3" $) $) ${ $setVerbose $(@expr1073742875 $false $) $; getConfigs3 $(@expr1073742876 $) $; $} $} $while $(@expr1073742877 $false $) ;
220: $do ${ $if $(@expr1073742878 $prepareTest $(@expr1073742879 "getConfigs4" $) $) ${ $setVerbose $(@expr1073742880 $false $) $; getConfigs4 $(@expr1073742881 $) $; $} $} $while $(@expr1073742882 $false $) ;
221: $do ${ $if $(@expr1073742883 $prepareTest $(@expr1073742884 "getConfigs5" $) $) ${ $setVerbose $(@expr1073742885 $false $) $; getConfigs5 $(@expr1073742886 $) $; $} $} $while $(@expr1073742887 $false $) ;
222: $do ${ $if $(@expr1073742888 $prepareTest $(@expr1073742889 "getConfigs7" $) $) ${ $setVerbose $(@expr1073742890 $false $) $; getConfigs7 $(@expr1073742891 $) $; $} $} $while $(@expr1073742892 $false $) ;
223: $do ${ $if $(@expr1073742893 $prepareTest $(@expr1073742894 "getConfigs7a" $) $) ${ $setVerbose $(@expr1073742895 $false $) $; getConfigs7a $(@expr1073742896 $) $; $} $} $while $(@expr1073742897 $false $) ;
224: $do ${ $if $(@expr1073742898 $prepareTest $(@expr1073742899 "getConfigs7b" $) $) ${ $setVerbose $(@expr1073742900 $false $) $; getConfigs7b $(@expr1073742901 $) $; $} $} $while $(@expr1073742902 $false $) ;
225: $do ${ $if $(@expr1073742903 $prepareTest $(@expr1073742904 "getConfigs7c" $) $) ${ $setVerbose $(@expr1073742905 $false $) $; getConfigs7c $(@expr1073742906 $) $; $} $} $while $(@expr1073742907 $false $) ;
226: $do ${ $if $(@expr1073742908 $prepareTest $(@expr1073742909 "getConfigs7d" $) $) ${ $setVerbose $(@expr1073742910 $false $) $; getConfigs7d $(@expr1073742911 $) $; $} $} $while $(@expr1073742912 $false $) ;
227: $do ${ $if $(@expr1073742913 $prepareTest $(@expr1073742914 "getConfigs7e" $) $) ${ $setVerbose $(@expr1073742915 $false $) $; getConfigs7e $(@expr1073742916 $) $; $} $} $while $(@expr1073742917 $false $) ;
228: $do ${ $if $(@expr1073742918 $prepareTest $(@expr1073742919 "getConfigs8" $) $) ${ $setVerbose $(@expr1073742920 $false $) $; getConfigs8 $(@expr1073742921 $) $; $} $} $while $(@expr1073742922 $false $) ;
229: $do ${ $if $(@expr1073742923 $prepareTest $(@expr1073742924 "getConfigs10" $) $) ${ $setVerbose $(@expr1073742925 $false $) $; getConfigs10 $(@expr1073742926 $) $; $} $} $while $(@expr1073742927 $false $) ;
230: $do ${ $if $(@expr1073742928 $prepareTest $(@expr1073742929 "getConfigs11" $) $) ${ $setVerbose $(@expr1073742930 $false $) $; getConfigs11 $(@expr1073742931 $) $; $} $} $while $(@expr1073742932 $false $) ;
231: $do ${ $if $(@expr1073742933 $prepareTest $(@expr1073742934 "getConfigsError" $) $) ${ $setVerbose $(@expr1073742935 $false $) $; getConfigsError $(@expr1073742936 $) $; $} $} $while $(@expr1073742937 $false $) ;
232:
233: $do ${ $if $(@expr1073742938 $prepareTest $(@expr1073742939 "getConfigsD1" $) $) ${ $setVerbose $(@expr1073742940 $false $) $; getConfigsD1 $(@expr1073742941 $) $; $} $} $while $(@expr1073742942 $false $) ;
234:
235: $do ${ $if $(@expr1073742943 $prepareTest $(@expr1073742944 "getConfigsU1" $) $) ${ $setVerbose $(@expr1073742945 $false $) $; getConfigsU1 $(@expr1073742946 $) $; $} $} $while $(@expr1073742947 $false $) ;
236: $do ${ $if $(@expr1073742948 $prepareTest $(@expr1073742949 "getConfigsU2" $) $) ${ $setVerbose $(@expr1073742950 $false $) $; getConfigsU2 $(@expr1073742951 $) $; $} $} $while $(@expr1073742952 $false $) ;
237: $do ${ $if $(@expr1073742953 $prepareTest $(@expr1073742954 "getConfigsU3" $) $) ${ $setVerbose $(@expr1073742955 $false $) $; getConfigsU3 $(@expr1073742956 $) $; $} $} $while $(@expr1073742957 $false $) ;
238: $do ${ $if $(@expr1073742958 $prepareTest $(@expr1073742959 "getConfigsU4" $) $) ${ $setVerbose $(@expr1073742960 $false $) $; getConfigsU4 $(@expr1073742961 $) $; $} $} $while $(@expr1073742962 $false $) ;
239: $do ${ $if $(@expr1073742963 $prepareTest $(@expr1073742964 "getConfigsU5" $) $) ${ $setVerbose $(@expr1073742965 $false $) $; getConfigsU5 $(@expr1073742966 $) $; $} $} $while $(@expr1073742967 $false $) ;
240: $do ${ $if $(@expr1073742968 $prepareTest $(@expr1073742969 "getConfigsU6" $) $) ${ $setVerbose $(@expr1073742970 $false $) $; getConfigsU6 $(@expr1073742971 $) $; $} $} $while $(@expr1073742972 $false $) ;
241: $do ${ $if $(@expr1073742973 $prepareTest $(@expr1073742974 "getConfigsU7" $) $) ${ $setVerbose $(@expr1073742975 $false $) $; getConfigsU7 $(@expr1073742976 $) $; $} $} $while $(@expr1073742977 $false $) ;
242:
243: $do ${ $if $(@expr1073742978 $prepareTest $(@expr1073742979 "validateCfg1" $) $) ${ $setVerbose $(@expr1073742980 $false $) $; validateCfg1 $(@expr1073742981 $) $; $} $} $while $(@expr1073742982 $false $) ;
244: $do ${ $if $(@expr1073742983 $prepareTest $(@expr1073742984 "validateCfg2" $) $) ${ $setVerbose $(@expr1073742985 $false $) $; validateCfg2 $(@expr1073742986 $) $; $} $} $while $(@expr1073742987 $false $) ;
245:
246: $do ${ $if $(@expr1073742988 $prepareTest $(@expr1073742989 "if_sizeof" $) $) ${ $setVerbose $(@expr1073742990 $false $) $; if_sizeof $(@expr1073742991 $) $; $} $} $while $(@expr1073742992 $false $) ;
247:
248: $do ${ $if $(@expr1073742993 $prepareTest $(@expr1073742994 "invalid_ifs" $) $) ${ $setVerbose $(@expr1073742995 $false $) $; invalid_ifs $(@expr1073742996 $) $; $} $} $while $(@expr1073742997 $false $) ;
249:
250: $do ${ $if $(@expr1073742998 $prepareTest $(@expr1073742999 "garbage" $) $) ${ $setVerbose $(@expr1073743000 $false $) $; garbage $(@expr1073743001 $) $; $} $} $while $(@expr1073743002 $false $) ;
251:
252: $do ${ $if $(@expr1073743003 $prepareTest $(@expr1073743004 "wrongPathOnErrorDirective" $) $) ${ $setVerbose $(@expr1073743005 $false $) $; wrongPathOnErrorDirective $(@expr1073743006 $) $; $} $} $while $(@expr1073743007 $false $) ;
253:
254: $do ${ $if $(@expr1073743008 $prepareTest $(@expr1073743009 "testDirectiveIncludeTypes" $) $) ${ $setVerbose $(@expr1073743010 $false $) $; testDirectiveIncludeTypes $(@expr1073743011 $) $; $} $} $while $(@expr1073743012 $false $) ;
255: $do ${ $if $(@expr1073743013 $prepareTest $(@expr1073743014 "testDirectiveIncludeLocations" $) $) ${ $setVerbose $(@expr1073743015 $false $) $; testDirectiveIncludeLocations $(@expr1073743016 $) $; $} $} $while $(@expr1073743017 $false $) ;
256: $do ${ $if $(@expr1073743018 $prepareTest $(@expr1073743019 "testDirectiveIncludeComments" $) $) ${ $setVerbose $(@expr1073743020 $false $) $; testDirectiveIncludeComments $(@expr1073743021 $) $; $} $} $while $(@expr1073743022 $false $) ;
257: }
258:
259: void preprocess ( const char * code@var114 , std :: map < std :: string , std :: string > & actual@var115 , const char filename@var116 [ 7 ] = "file.c" ) {
260: errout@var100 .@expr1073743024 str (@expr1073743025 "" ) ;
261: std ::@expr1073743026 istringstream istr@var117 (@expr1073743027 code@var114 ) ;
262: simplecpp ::@expr1073743028 OutputList outputList@var118 ;
263: std ::@expr1073743029 vector < std ::@expr1206 string > files@var119 ;
264: simplecpp ::@expr1073743031 TokenList tokens@var120 (@expr1073743032 istr@var117 , files@var119 , filename@var116 , &@expr1073743033 outputList@var118 ) ;
265: tokens@var120 .@expr1073743034 removeComments (@expr1073743035 ) ;
266: preprocessor0@var113 .@expr1073743036 simplifyPragmaAsm (@expr1073743037 &@expr1073743038 tokens@var120 ) ;
267: const std ::@expr1073743039 set < std ::@expr1206 string > configs@var121 (@expr1073743041 preprocessor0@var113 .@expr1073743042 getConfigs (@expr1073743043 tokens@var120 ) ) ;
268: preprocessor0@var113 .@expr1073743044 setDirectives (@expr1073743045 tokens@var120 ) ;
269: for (@expr1073743046 const std ::@expr1206 string &@expr1224 config@var122 :@expr1073743049 configs@var121 ) {
270: try {
271: const std ::@expr1206 string &@expr1224 cfgcode@var123 =@expr1073743052 preprocessor0@var113 .@expr1073743053 getcode (@expr1073743054 tokens@var120 , config@var122 , files@var119 , std ::@expr1231 string (@expr1073743056 code@var114 ) .@expr1073743057 find (@expr1073743058 "#file" ) !=@expr1073743059 std ::@expr1231 string ::@expr1073743061 npos@expr1073743023 ) ;
272: actual@var115 [@expr1238 config@var122 ] =@expr1073743063 cfgcode@var123 ;
273: } catch (@expr1073743064 const simplecpp ::@expr1073743065 Output &@expr1224 ) {
274: actual@var115 [@expr1238 config@var122 ] =@expr1073743068 "" ;
275: } catch (@expr1073743069 ... ) { }
276: }
277: }
278:
279: std :: string getConfigsStr ( const char filedata@var124 [ ] , const char * arg@var125 = nullptr ) {
280: Settings settings@var126 ;
281: if (@expr1073743070 arg@var125 &&@expr1073743071 std ::@expr1248 strncmp (@expr1073743073 arg@var125 , "-D" , 2 ) ==@expr1073743074 0 ) {
282: settings@var126 .@expr1073743075 userDefines@var127 =@expr1073743076 arg@var125 +@expr1253 2 ; }
283: if (@expr1073743078 arg@var125 &&@expr1073743079 std ::@expr1248 strncmp (@expr1073743081 arg@var125 , "-U" , 2 ) ==@expr1073743082 0 ) {
284: settings@var126 .@expr1073743083 userUndefs@var128 .@expr1073743084 insert (@expr1073743085 arg@var125 +@expr1253 2 ) ; }
285: Preprocessor preprocessor@var129 (@expr1073743087 settings@var126 , this@expr1073743088 ) ;
286: std ::@expr1073743089 vector < std ::@expr1266 string > files@var130 ;
287: std ::@expr1073743091 istringstream istr@var131 (@expr1073743092 filedata@var124 ) ;
288: simplecpp ::@expr1073743093 TokenList tokens@var132 (@expr1073743094 istr@var131 , files@var130 ) ;
289: tokens@var132 .@expr1073743095 removeComments (@expr1073743096 ) ;
290: const std ::@expr1073743097 set < std ::@expr1266 string > configs@var133 =@expr1073743099 preprocessor@var129 .@expr1073743100 getConfigs (@expr1073743101 tokens@var132 ) ;
291: std ::@expr1073743102 string ret@var134 ;
292: for (@expr1073743103 const std ::@expr1266 string &@expr1073743105 config@var135 :@expr1073743106 configs@var133 ) {
293: ret@var134 +=@expr1073743107 config@var135 +@expr1073743108 '\n' ; }
294: return ret@var134 ;
295: }
296:
297: void Bug2190219 ( ) {
298: const char filedata@var136 [@expr1073743109 38 ] =@expr1073743110 "#ifdef __cplusplus\ncpp\n#else\nc\n#endif"
299:
300:
301:
302: ;
303:
304: {
305:
306: std ::@expr1073743111 map < std ::@expr1288 string , std ::@expr1288 string > actual@var137 ;
307: preprocess (@expr1073743114 filedata@var136 , actual@var137 , "file.cpp" ) ;
308:
309:
310: $if $(@expr1073743115 $!@expr1073743116 $assertEquals $(@expr1073743117 "cppcheck-2.8/test/testpreprocessor.cpp" $, 310 $, 1U $, actual@var137 .@expr1073743118 size (@expr1073743119 ) $) $) { $return ; }
311: $if $(@expr1073743120 $!@expr1073743121 $assertEquals $(@expr1073743122 "cppcheck-2.8/test/testpreprocessor.cpp" $, 311 $, "\ncpp" $, actual@var137 [@expr1073743123 "" ] $) $) { $return ; }
312: }
313:
314: {
315:
316:
317: std ::@expr1073743124 map < std ::@expr1288 string , std ::@expr1288 string > actual@var138 ;
318: preprocess (@expr1073743127 filedata@var136 , actual@var138 , "file.c" ) ;
319:
320:
321: $if $(@expr1073743128 $!@expr1073743129 $assertEquals $(@expr1073743130 "cppcheck-2.8/test/testpreprocessor.cpp" $, 321 $, 1U $, actual@var138 .@expr1073743131 size (@expr1073743132 ) $) $) { $return ; }
322: $if $(@expr1073743133 $!@expr1073743134 $assertEquals $(@expr1073743135 "cppcheck-2.8/test/testpreprocessor.cpp" $, 322 $, "\n\n\nc" $, actual@var138 [@expr1073743136 "" ] $) $) { $return ; }
323: }
324: }
325:
326: void error1 ( ) {
327: const char filedata@var139 [@expr1073743137 37 ] =@expr1073743138 "#ifdef A\n;\n#else\n#error abcd\n#endif\n"
328:
329:
330:
331: ;
332: $if $(@expr1073743139 $!@expr1073743140 $assertEquals $(@expr1073743141 "cppcheck-2.8/test/testpreprocessor.cpp" $, 332 $, "\nA\n" $, getConfigsStr (@expr1073743142 filedata@var139 ) $) $) { $return ; }
333: }
334:
335: void error2 ( ) {
336: const char filedata1@var140 [@expr1073743143 25 ] =@expr1073743144 "#ifndef A\n#error\n#endif\n"
337:
338: ;
339: $if $(@expr1073743145 $!@expr1073743146 $assertEquals $(@expr1073743147 "cppcheck-2.8/test/testpreprocessor.cpp" $, 339 $, "A\n" $, getConfigsStr (@expr1073743148 filedata1@var140 ) $) $) { $return ; }
340:
341: const char filedata2@var141 [@expr1073743149 22 ] =@expr1073743150 "#if !A\n#error\n#endif\n"
342:
343: ;
344: $if $(@expr1073743151 $!@expr1073743152 $assertEquals $(@expr1073743153 "cppcheck-2.8/test/testpreprocessor.cpp" $, 344 $, "A\n" $, getConfigsStr (@expr1073743154 filedata2@var141 ) $) $) { $return ; }
345: }
346:
347: void error3 ( ) {
348: errout@var100 .@expr1331 str (@expr1073743156 "" ) ;
349: Settings settings@var142 ;
350: settings@var142 .@expr1073743157 userDefines@var143 =@expr1073743158 "__cplusplus" ;
351: Preprocessor preprocessor@var144 (@expr1073743159 settings@var142 , this@expr1073743160 ) ;
352: const std ::@expr1073743161 string code@var145 (@expr1073743162 "#error hello world!\n" ) ;
353: preprocessor@var144 .@expr1073743163 getcode (@expr1073743164 code@var145 , "X" , "test.c" ) ;
354: $if $(@expr1073743165 $!@expr1073743166 $assertEquals $(@expr1073743167 "cppcheck-2.8/test/testpreprocessor.cpp" $, 354 $, "[test.c:1]: (error) #error hello world!\n" $, errout@var100 .@expr1331 str (@expr1073743169 ) $) $) { $return ; }
355: }
356:
357:
358: void error4 ( ) {
359:
360: {
361: errout@var100 .@expr1346 str (@expr1347 "" ) ;
362: Settings settings@var146 ;
363: settings@var146 .@expr1073743172 userDefines@var147 =@expr1073743173 "TEST" ;
364: Preprocessor preprocessor@var148 (@expr1073743174 settings@var146 , this@expr1351 ) ;
365: const std ::@expr1073743176 string code@var149 (@expr1073743177 "#file \"ab.h\"\n#error hello world!\n#endfile" ) ;
366: preprocessor@var148 .@expr1073743178 getcode (@expr1073743179 code@var149 , "TEST" , "test.c" ) ;
367: $if $(@expr1073743180 $!@expr1073743181 $assertEquals $(@expr1073743182 "cppcheck-2.8/test/testpreprocessor.cpp" $, 367 $, "[ab.h:1]: (error) #error hello world!\n" $, errout@var100 .@expr1346 str (@expr1360 ) $) $) { $return ; }
368: }
369:
370:
371: {
372: errout@var100 .@expr1346 str (@expr1347 "" ) ;
373: Settings settings@var150 ;
374: settings@var150 .@expr1073743187 userDefines@var151 =@expr1073743188 "TEST" ;
375: Preprocessor preprocessor@var152 (@expr1073743189 settings@var150 , this@expr1351 ) ;
376: const std ::@expr1073743190 string code@var153 (@expr1073743191 "#file \"ab.h\"\n\n#endfile\n#error aaa" ) ;
377: preprocessor@var152 .@expr1073743192 getcode (@expr1073743193 code@var153 , "TEST" , "test.c" ) ;
378: $if $(@expr1073743194 $!@expr1073743195 $assertEquals $(@expr1073743196 "cppcheck-2.8/test/testpreprocessor.cpp" $, 378 $, "[test.c:2]: (error) #error aaa\n" $, errout@var100 .@expr1346 str (@expr1360 ) $) $) { $return ; }
379: }
380: }
381:
382: void error5 ( ) {
383: errout@var100 .@expr1375 str (@expr1073743200 "" ) ;
384: Settings settings@var154 ;
385: settings@var154 .@expr1073743201 userDefines@var155 =@expr1073743202 "FOO" ;
386: settings@var154 .@expr1073743203 force@var156 =@expr1073743204 true ;
387: Preprocessor preprocessor@var157 (@expr1073743205 settings@var154 , this@expr1073743206 ) ;
388: const std ::@expr1073743207 string code@var158 (@expr1073743208 "#error hello world!\n" ) ;
389: preprocessor@var157 .@expr1073743209 getcode (@expr1073743210 code@var158 , "X" , "test.c" ) ;
390: $if $(@expr1073743211 $!@expr1073743212 $assertEquals $(@expr1073743213 "cppcheck-2.8/test/testpreprocessor.cpp" $, 390 $, "" $, errout@var100 .@expr1375 str (@expr1073743215 ) $) $) { $return ; }
391: }
392:
393: void error6 ( ) {
394: const char filedata1@var159 [@expr1073743216 63 ] =@expr1073743217 "#ifdef A\n#else\n#error 1\n#endif\n#ifdef B\n#else\n#error 2\n#endif\n"
395:
|
400:
401: ;
402: $if $(@expr1073743218 $!@expr1073743219 $assertEquals $(@expr1073743220 "cppcheck-2.8/test/testpreprocessor.cpp" $, 402 $, "\nA\nA;B\nB\n" $, getConfigsStr (@expr1073743221 filedata1@var159 ) $) $) { $return ; }
403:
404: const char filedata2@var160 [@expr1073743222 53 ] =@expr1073743223 "#ifndef A\n#error 1\n#endif\n#ifndef B\n#error 2\n#endif\n"
405:
|
408:
409: ;
410: $if $(@expr1073743224 $!@expr1073743225 $assertEquals $(@expr1073743226 "cppcheck-2.8/test/testpreprocessor.cpp" $, 410 $, "A;B\n" $, getConfigsStr (@expr1073743227 filedata2@var160 ) $) $) { $return ; }
411:
412: const char filedata3@var161 [@expr1073743228 47 ] =@expr1073743229 "#if !A\n#error 1\n#endif\n#if !B\n#error 2\n#endif\n"
413:
|
416:
417: ;
418: $if $(@expr1073743230 $!@expr1073743231 $assertEquals $(@expr1073743232 "cppcheck-2.8/test/testpreprocessor.cpp" $, 418 $, "A;B\n" $, getConfigsStr (@expr1073743233 filedata3@var161 ) $) $) { $return ; }
419:
420: }
421:
422: void error7 ( ) {
423: const char filedata@var162 [@expr1073743234 91 ] =@expr1073743235 "#define A\n\n#if defined(B)\n#else\n#error \"1\"\n#endif\n\n#if defined(A)\n#else\n#error \"2\"\n#endif\n"
424:
|
432:
433: ;
434: $if $(@expr1073743236 $!@expr1073743237 $assertEquals $(@expr1073743238 "cppcheck-2.8/test/testpreprocessor.cpp" $, 434 $, "\nB\n" $, getConfigsStr (@expr1073743239 filedata@var162 ) $) $) { $return ; }
435: }
436:
437: void error8 ( ) {
438: const char filedata@var163 [@expr1073743240 66 ] =@expr1073743241 "#ifdef A\n#ifdef B\n#endif\n#else\n#endif\n\n#ifndef C\n#error aa\n#endif"
439:
|
445:
446: ;
447: $if $(@expr1073743242 $!@expr1073743243 $assertEquals $(@expr1073743244 "cppcheck-2.8/test/testpreprocessor.cpp" $, 447 $, "A;B;C\nA;C\nC\n" $, getConfigsStr (@expr1073743245 filedata@var163 ) $) $) { $return ; }
448: }
449:
450: void setPlatformInfo ( ) {
451: Settings settings@var164 ;
452: Preprocessor preprocessor@var165 (@expr1073743248 settings@var164 , this@expr1073743249 ) ;
453:
454:
455: const char filedata@var166 [@expr1073743250 40 ] =@expr1073743251 "#if sizeof(long) == 4\n1\n#else\n2\n#endif\n"
456:
457:
458:
459: ;
460: std ::@expr1073743252 istringstream istr@var167 (@expr1073743253 filedata@var166 ) ;
461: std ::@expr1073743254 vector < std ::@expr1073743255 string > files@var168 ;
462: simplecpp ::@expr1073743256 TokenList tokens@var169 (@expr1073743257 istr@var167 , files@var168 , "test.c" ) ;
463:
464:
465: settings@var164 .@expr1434 platform (@expr1073743259 Settings ::@expr1436 PlatformType ::@expr1073743261 Unix32@expr1073743246 ) ;
466: preprocessor@var165 .@expr1438 setPlatformInfo (@expr1439 &@expr1440 tokens@var169 ) ;
467: $if $(@expr1073743265 $!@expr1073743266 $assertEquals $(@expr1073743267 "cppcheck-2.8/test/testpreprocessor.cpp" $, 467 $, "\n1" $, $(@expr1073743268 preprocessor@var165 .@expr1445 getcode (@expr1446 tokens@var169 , "" , files@var168 , false ) $) $) $) { $return ; }
468:
469:
470: settings@var164 .@expr1434 platform (@expr1073743272 Settings ::@expr1436 PlatformType ::@expr1073743274 Unix64@expr1073743247 ) ;
471: preprocessor@var165 .@expr1438 setPlatformInfo (@expr1439 &@expr1440 tokens@var169 ) ;
472: $if $(@expr1073743278 $!@expr1073743279 $assertEquals $(@expr1073743280 "cppcheck-2.8/test/testpreprocessor.cpp" $, 472 $, "\n\n\n2" $, $(@expr1073743281 preprocessor@var165 .@expr1445 getcode (@expr1446 tokens@var169 , "" , files@var168 , false ) $) $) $) { $return ; }
473: }
474:
475: void includeguard1 ( ) {
476:
477: const char filedata@var170 [@expr1073743284 74 ] =@expr1073743285 "#file \"abc.h\"\n#ifndef abcH\n#define abcH\n#endif\n#endfile\n#ifdef ABC\n#endif"
478:
|
482:
483: ;
484: $if $(@expr1073743286 $!@expr1073743287 $assertEquals $(@expr1073743288 "cppcheck-2.8/test/testpreprocessor.cpp" $, 484 $, "\nABC\n" $, getConfigsStr (@expr1073743289 filedata@var170 ) $) $) { $return ; }
485: }
486:
487: void includeguard2 ( ) {
488:
489: const char filedata@var171 [@expr1073743290 47 ] =@expr1073743291 "#file \"abc.h\"\nfoo\n#ifdef ABC\n\n#endif\n#endfile\n"
490:
|
493:
494: ;
495: $if $(@expr1073743292 $!@expr1073743293 $assertEquals $(@expr1073743294 "cppcheck-2.8/test/testpreprocessor.cpp" $, 495 $, "\nABC\n" $, getConfigsStr (@expr1073743295 filedata@var171 ) $) $) { $return ; }
496: }
497:
498:
499: void ifdefwithfile ( ) {
500:
501: const char filedata@var172 [@expr1073743296 78 ] =@expr1073743297 "#ifdef ABC\n#file \"abc.h\"\nclass A{};/*\n\n\n\n\n\n\n*/\n#endfile\n#endif\nint main() {}\n"
502:
|
505:
506: ;
507:
508:
509: std ::@expr1073743298 map < std ::@expr1475 string , std ::@expr1475 string > actual@var173 ;
510: preprocess (@expr1073743301 filedata@var172 , actual@var173 ) ;
511:
512:
513: $if $(@expr1073743302 $!@expr1073743303 $assertEquals $(@expr1073743304 "cppcheck-2.8/test/testpreprocessor.cpp" $, 513 $, 2 $, actual@var173 .@expr1073743305 size (@expr1073743306 ) $) $) { $return ; }
514: $if $(@expr1073743307 $!@expr1073743308 $assertEquals $(@expr1073743309 "cppcheck-2.8/test/testpreprocessor.cpp" $, 514 $, "\n\n\nint main ( ) { }" $, actual@var173 [@expr1073743310 "" ] $) $) { $return ; }
515: $if $(@expr1073743311 $!@expr1073743312 $assertEquals $(@expr1073743313 "cppcheck-2.8/test/testpreprocessor.cpp" $, 515 $, "\n#line 1 \"abc.h\"\nclass A { } ;\n#line 4 \"file.c\"\n int main ( ) { }" $, actual@var173 [@expr1073743314 "ABC" ] $) $) { $return ; }
516: }
517:
518: void if0 ( ) {
519: const char filedata@var174 [@expr1073743315 62 ] =@expr1073743316 " # if /* comment */  0 // comment\n#ifdef WIN32\n#endif\n#endif\n"
520:
521:
522: ;
523: $if $(@expr1073743317 $!@expr1073743318 $assertEquals $(@expr1073743319 "cppcheck-2.8/test/testpreprocessor.cpp" $, 523 $, "\n" $, getConfigsStr (@expr1073743320 filedata@var174 ) $) $) { $return ; }
524: }
525:
526: void if1 ( ) {
527: const char filedata@var175 [@expr1073743321 49 ] =@expr1073743322 " # if /* comment */  1 // comment\nABC\n # endif \n"
528:
529: ;
530: $if $(@expr1073743323 $!@expr1073743324 $assertEquals $(@expr1073743325 "cppcheck-2.8/test/testpreprocessor.cpp" $, 530 $, "\n" $, getConfigsStr (@expr1073743326 filedata@var175 ) $) $) { $return ; }
531: }
532:
533:
534: void elif ( ) {
535: {
536: const char filedata@var176 [@expr1073743327 36 ] =@expr1073743328 "#if DEF1\nABC\n#elif DEF2\nDEF\n#endif\n"
537:
538:
539:
540: ;
541: $if $(@expr1073743329 $!@expr1073743330 $assertEquals $(@expr1073743331 "cppcheck-2.8/test/testpreprocessor.cpp" $, 541 $, "\nDEF1\nDEF2\n" $, getConfigsStr (@expr1073743332 filedata@var176 ) $) $) { $return ; }
542: }
543:
544: {
545: const char filedata@var177 [@expr1073743333 64 ] =@expr1073743334 "#if(defined DEF1)\nABC\n#elif(defined DEF2)\nDEF\n#else\nGHI\n#endif\n"
546:
|
550:
551: ;
552: $if $(@expr1073743335 $!@expr1073743336 $assertEquals $(@expr1073743337 "cppcheck-2.8/test/testpreprocessor.cpp" $, 552 $, "\nDEF1\nDEF2\n" $, getConfigsStr (@expr1073743338 filedata@var177 ) $) $) { $return ; }
553: }
554: }
555:
556: void if_cond1 ( ) {
557: const char filedata@var178 [@expr1073743339 41 ] =@expr1073743340 "#if LIBVER>100\n    A\n#else\n    B\n#endif\n"
558:
559:
560:
561: ;
562: $todoAssertEquals $(@expr1073743341 "cppcheck-2.8/test/testpreprocessor.cpp" $, 562 $, "\nLIBVER=101\n" $, "\n" $, getConfigsStr (@expr1073743342 filedata@var178 ) $) ;
563: }
564:
565: void if_cond2 ( ) {
566: const char filedata@var179 [@expr1073743343 58 ] =@expr1073743344 "#ifdef A\na\n#endif\n#if defined(A) && defined(B)\nab\n#endif\n"
567:
|
570:
571: ;
572: $if $(@expr1073743345 $!@expr1073743346 $assertEquals $(@expr1073743347 "cppcheck-2.8/test/testpreprocessor.cpp" $, 572 $, "\nA\nA;B\n" $, getConfigsStr (@expr1073743348 filedata@var179 ) $) $) { $return ; }
573:
574: if_cond2b (@expr1073743349 ) ;
575: if_cond2c (@expr1073743350 ) ;
576: if_cond2d (@expr1073743351 ) ;
577: if_cond2e (@expr1073743352 ) ;
578: }
579:
580: void if_cond2b ( ) {
581: const char filedata@var180 [@expr1073743353 47 ] =@expr1073743354 "#ifndef A\n!a\n#ifdef B\nb\n#endif\n#else\na\n#endif\n"
582:
|
587:
588: ;
589: $todoAssertEquals $(@expr1073743355 "cppcheck-2.8/test/testpreprocessor.cpp" $, 589 $, "\nA;B\n" $, "\nA\nB\n" $, getConfigsStr (@expr1073743356 filedata@var180 ) $) ;
590: }
591:
592: void if_cond2c ( ) {
593: const char filedata@var181 [@expr1073743357 56 ] =@expr1073743358 "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#endif\n"
594:
|
601:
602: ;
603: $todoAssertEquals $(@expr1073743359 "cppcheck-2.8/test/testpreprocessor.cpp" $, 603 $, "\nA\nA;B\n" $, "\nA\nB\n" $, getConfigsStr (@expr1073743360 filedata@var181 ) $) ;
604: }
605:
606: void if_cond2d ( ) {
607: const char filedata@var182 [@expr1073743361 83 ] =@expr1073743362 "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#ifdef B\nb\n#else\n!b\n#endif\n#endif\n"
608:
|
620:
621: ;
622: $if $(@expr1073743363 $!@expr1073743364 $assertEquals $(@expr1073743365 "cppcheck-2.8/test/testpreprocessor.cpp" $, 622 $, "\nA\nA;B\nB\n" $, getConfigsStr (@expr1073743366 filedata@var182 ) $) $) { $return ; }
623: }
624:
625: void if_cond2e ( ) {
626: const char filedata@var183 [@expr1073743367 48 ] =@expr1073743368 "#if !defined(A)\n!a\n#elif !defined(B)\n!b\n#endif\n"
627:
628:
629:
630: ;
631: $if $(@expr1073743369 $!@expr1073743370 $assertEquals $(@expr1073743371 "cppcheck-2.8/test/testpreprocessor.cpp" $, 631 $, "\nA\nB\n" $, getConfigsStr (@expr1073743372 filedata@var183 ) $) $) { $return ; }
632: }
633:
634: void if_cond3 ( ) {
635: const char filedata@var184 [@expr1073743373 59 ] =@expr1073743374 "#ifdef A\na\n#if defined(B) && defined(C)\nabc\n#endif\n#endif\n"
636:
|
639:
640: ;
641: $if $(@expr1073743375 $!@expr1073743376 $assertEquals $(@expr1073743377 "cppcheck-2.8/test/testpreprocessor.cpp" $, 641 $, "\nA\nA;B;C\n" $, getConfigsStr (@expr1073743378 filedata@var184 ) $) $) { $return ; }
642: }
643:
644: void if_cond4 ( ) {
645: {
646: const char filedata@var185 [@expr1073743379 58 ] =@expr1073743380 "#define A\n#define B\n#if defined A || defined B\nab\n#endif\n"
647:
648:
649:
650: ;
651: $if $(@expr1073743381 $!@expr1073743382 $assertEquals $(@expr1073743383 "cppcheck-2.8/test/testpreprocessor.cpp" $, 651 $, "\n" $, getConfigsStr (@expr1073743384 filedata@var185 ) $) $) { $return ; }
652: }
653:
654: {
655: const char filedata@var186 [@expr1073743385 49 ] =@expr1073743386 "#if A\n{\n#if (defined(B))\nfoo();\n#endif\n}\n#endif\n"
656:
|
660:
661: ;
662: $if $(@expr1073743387 $!@expr1073743388 $assertEquals $(@expr1073743389 "cppcheck-2.8/test/testpreprocessor.cpp" $, 662 $, "\nA\nA;B\n" $, getConfigsStr (@expr1073743390 filedata@var186 ) $) $) { $return ; }
663: }
664:
665: {
666: const char filedata@var187 [@expr1073743391 62 ] =@expr1073743392 "#define A\n#define B\n#if (defined A) || defined (B)\nab\n#endif\n"
667:
668:
669:
670: ;
671: $if $(@expr1073743393 $!@expr1073743394 $assertEquals $(@expr1073743395 "cppcheck-2.8/test/testpreprocessor.cpp" $, 671 $, "\n" $, getConfigsStr (@expr1073743396 filedata@var187 ) $) $) { $return ; }
672: }
673:
674: {
675: const char filedata@var188 [@expr1073743397 23 ] =@expr1073743398 "#if (A)\nfoo();\n#endif\n"
676:
677: ;
678: $if $(@expr1073743399 $!@expr1073743400 $assertEquals $(@expr1073743401 "cppcheck-2.8/test/testpreprocessor.cpp" $, 678 $, "\nA\n" $, getConfigsStr (@expr1073743402 filedata@var188 ) $) $) { $return ; }
679: }
680:
681: {
682: const char filedata@var189 [@expr1073743403 22 ] =@expr1073743404 "#if! A\nfoo();\n#endif\n"
683:
684: ;
685: $if $(@expr1073743405 $!@expr1073743406 $assertEquals $(@expr1073743407 "cppcheck-2.8/test/testpreprocessor.cpp" $, 685 $, "\nA=0\n" $, getConfigsStr (@expr1073743408 filedata@var189 ) $) $) { $return ; }
686: }
687: }
688:
689: void if_cond5 ( ) {
690: const char filedata@var190 [@expr1073743409 82 ] =@expr1073743410 "#if defined(A) && defined(B)\nab\n#endif\ncd\n#if defined(B) && defined(A)\nef\n#endif\n"
691:
|
695:
696: ;
697: $if $(@expr1073743411 $!@expr1073743412 $assertEquals $(@expr1073743413 "cppcheck-2.8/test/testpreprocessor.cpp" $, 697 $, "\nA;B\n" $, getConfigsStr (@expr1073743414 filedata@var190 ) $) $) { $return ; }
698: }
699:
700: void if_cond6 ( ) {
701: const char filedata@var191 [@expr1073743415 39 ] =@expr1073743416 "\n#if defined(A) && defined(B))\n#endif\n"
702:
703: ;
704: $if $(@expr1073743417 $!@expr1073743418 $assertEquals $(@expr1073743419 "cppcheck-2.8/test/testpreprocessor.cpp" $, 704 $, "\nA;B\n" $, getConfigsStr (@expr1073743420 filedata@var191 ) $) $) { $return ; }
705: }
706:
707: void if_cond8 ( ) {
708: const char filedata@var192 [@expr1073743421 54 ] =@expr1073743422 "#if defined(A) + defined(B) + defined(C) != 1\n#endif\n"
709: ;
710: $todoAssertEquals $(@expr1073743423 "cppcheck-2.8/test/testpreprocessor.cpp" $, 710 $, "\nA\n" $, "\nA;B;C\n" $, getConfigsStr (@expr1073743424 filedata@var192 ) $) ;
711: }
712:
713:
714: void if_cond9 ( ) {
715: const char filedata@var193 [@expr1073743425 28 ] =@expr1073743426 "#if !defined _A\nabc\n#endif\n"
716:
717: ;
718: $if $(@expr1073743427 $!@expr1073743428 $assertEquals $(@expr1073743429 "cppcheck-2.8/test/testpreprocessor.cpp" $, 718 $, "\n_A\n" $, getConfigsStr (@expr1073743430 filedata@var193 ) $) $) { $return ; }
719: }
720:
721: void if_cond10 ( ) {
722: const char filedata@var194 [@expr1073743431 63 ] =@expr1073743432 "#if !defined(a) && !defined(b)\n#if defined(and)\n#endif\n#endif\n"
723:
724:
725: ;
726:
727:
728: std ::@expr1073743433 map < std ::@expr1610 string , std ::@expr1610 string > actual@var195 ;
729: preprocess (@expr1073743436 filedata@var194 , actual@var195 ) ;
730: }
731:
732: void if_cond11 ( ) {
733: const char filedata@var196 [@expr1073743437 121 ] =@expr1073743438 "#if defined(L_fixunssfdi) && LIBGCC2_HAS_SF_MODE\n#if LIBGCC2_HAS_DF_MODE\n#elif FLT_MANT_DIG < W_TYPE_SIZE\n#endif\n#endif\n"
734:
735:
736:
737: ;
738: std ::@expr1073743439 map < std ::@expr1616 string , std ::@expr1616 string > actual@var197 ;
739: preprocess (@expr1073743442 filedata@var196 , actual@var197 ) ;
740: $if $(@expr1073743443 $!@expr1073743444 $assertEquals $(@expr1073743445 "cppcheck-2.8/test/testpreprocessor.cpp" $, 740 $, "" $, errout@var100 .@expr1073743446 str (@expr1073743447 ) $) $) { $return ; }
741: }
742:
743: void if_cond12 ( ) {
744: const char filedata@var198 [@expr1073743448 35 ] =@expr1073743449 "#define A (1)\n#if A == 1\n;\n#endif\n"
745:
746:
747: ;
748: $if $(@expr1073743450 $!@expr1073743451 $assertEquals $(@expr1073743452 "cppcheck-2.8/test/testpreprocessor.cpp" $, 748 $, "\n" $, getConfigsStr (@expr1073743453 filedata@var198 ) $) $) { $return ; }
749: }
750:
751: void if_cond13 ( ) {
752: const char filedata@var199 [@expr1073743454 30 ] =@expr1073743455 "#if ('A' == 0x41)\n123\n#endif\n"
753:
754: ;
755: $if $(@expr1073743456 $!@expr1073743457 $assertEquals $(@expr1073743458 "cppcheck-2.8/test/testpreprocessor.cpp" $, 755 $, "\n" $, getConfigsStr (@expr1073743459 filedata@var199 ) $) $) { $return ; }
756: }
757:
758: void if_cond14 ( ) {
759: const char filedata@var200 [@expr1073743460 21 ] =@expr1073743461 "#if !(A)\n123\n#endif\n"
760:
761: ;
762: $if $(@expr1073743462 $!@expr1073743463 $assertEquals $(@expr1073743464 "cppcheck-2.8/test/testpreprocessor.cpp" $, 762 $, "\n" $, getConfigsStr (@expr1073743465 filedata@var200 ) $) $) { $return ; }
763: }
764:
765:
766:
767: void if_or_1 ( ) {
768: const char filedata@var201 [@expr1073743466 51 ] =@expr1073743467 "#if defined(DEF_10) || defined(DEF_11)\na1;\n#endif\n"
769:
770: ;
771: $if $(@expr1073743468 $!@expr1073743469 $assertEquals $(@expr1073743470 "cppcheck-2.8/test/testpreprocessor.cpp" $, 771 $, "\nDEF_10;DEF_11\n" $, getConfigsStr (@expr1073743471 filedata@var201 ) $) $) { $return ; }
772: }
773:
774: void if_or_2 ( ) {
775: const char filedata@var202 [@expr1073743472 23 ] =@expr1073743473 "#if X || Y\na1;\n#endif\n"
776:
777: ;
778: $todoAssertEquals $(@expr1073743474 "cppcheck-2.8/test/testpreprocessor.cpp" $, 778 $, "\nX;Y\n" $, "\n" $, getConfigsStr (@expr1073743475 filedata@var202 ) $) ;
779: }
780:
781: void if_macro_eq_macro ( ) {
782: const char * code@var203 ; code@var203 =@expr1073743476 "#define A B\n#define B 1\n#define C 1\n#if A == C\nWilma\n#else\nBetty\n#endif\n"
783:
|
788:
789: ;
790: $if $(@expr1073743477 $!@expr1073743478 $assertEquals $(@expr1073743479 "cppcheck-2.8/test/testpreprocessor.cpp" $, 790 $, "\n" $, getConfigsStr (@expr1073743480 code@var203 ) $) $) { $return ; }
791: }
792:
793: void ticket_3675 ( ) {
794: const char * code@var204 ; code@var204 =@expr1073743481 "#ifdef YYSTACKSIZE\n#define YYMAXDEPTH YYSTACKSIZE\n#else\n#define YYSTACKSIZE YYMAXDEPTH\n#endif\n#if YYDEBUG\n#endif\n"
795:
|
799:
800: ;
801: std ::@expr1073743482 map < std ::@expr1659 string , std ::@expr1659 string > actual@var205 ;
802: preprocess (@expr1073743485 code@var204 , actual@var205 ) ;
803:
804:
805: }
806:
807: void ticket_3699 ( ) {
808: const char * code@var206 ; code@var206 =@expr1073743486 "#define INLINE __forceinline\n#define inline __forceinline\n#define __forceinline inline\n#if !defined(_WIN32)\n#endif\nINLINE inline __forceinline\n"
809:
|
812:
813: ;
814: std ::@expr1073743487 map < std ::@expr1664 string , std ::@expr1664 string > actual@var207 ;
815: preprocess (@expr1073743490 code@var206 , actual@var207 ) ;
816:
817:
818: $if $(@expr1073743491 $!@expr1073743492 $assertEquals $(@expr1073743493 "cppcheck-2.8/test/testpreprocessor.cpp" $, 818 $, "\n\n\n\n\n$__forceinline $inline $__forceinline" $, actual@var207 [@expr1073743494 "" ] $) $) { $return ; }
819: }
820:
821: void ticket_4922 ( ) {
822: const char * code@var208 ; code@var208 =@expr1073743495 "__asm__ \n{ int extern __value) 0; (double return (\"\" } extern\n__typeof __finite (__finite) __finite __inline \"__GI___finite\");"
823:
824: ;
825: std ::@expr1073743496 map < std ::@expr1673 string , std ::@expr1673 string > actual@var209 ;
826: preprocess (@expr1073743499 code@var208 , actual@var209 ) ;
827: }
828:
829: void macro_simple1 ( ) const {
830: {
831: const char filedata@var210 [@expr1073743500 31 ] =@expr1073743501 "#define AAA(aa) f(aa)\nAAA(5);\n"
832: ;
833: $if $(@expr1073743502 $!@expr1073743503 $assertEquals $(@expr1073743504 "cppcheck-2.8/test/testpreprocessor.cpp" $, 833 $, "\nf ( 5 ) ;" $, OurPreprocessor ::@expr1681 expandMacros (@expr1073743506 filedata@var210 ) $) $) { $return ; }
834: }
835:
836: {
837: const char filedata@var211 [@expr1073743507 32 ] =@expr1073743508 "#define AAA(aa) f(aa)\nAAA (5);\n"
838: ;
839: $if $(@expr1073743509 $!@expr1073743510 $assertEquals $(@expr1073743511 "cppcheck-2.8/test/testpreprocessor.cpp" $, 839 $, "\nf ( 5 ) ;" $, OurPreprocessor ::@expr1681 expandMacros (@expr1073743513 filedata@var211 ) $) $) { $return ; }
840: }
841: }
842:
843: void macro_simple2 ( ) const {
844: const char filedata@var212 [@expr1073743514 40 ] =@expr1073743515 "#define min(x,y) x<y?x:y\nmin(a(),b());\n"
845: ;
846: $if $(@expr1073743516 $!@expr1073743517 $assertEquals $(@expr1073743518 "cppcheck-2.8/test/testpreprocessor.cpp" $, 846 $, "\na ( ) < b ( ) ? a ( ) : b ( ) ;" $, OurPreprocessor ::@expr1073743519 expandMacros (@expr1073743520 filedata@var212 ) $) $) { $return ; }
847: }
848:
849: void macro_simple3 ( ) const {
850: const char filedata@var213 [@expr1073743521 18 ] =@expr1073743522 "#define A 4\nA AA\n"
851: ;
852: $if $(@expr1073743523 $!@expr1073743524 $assertEquals $(@expr1073743525 "cppcheck-2.8/test/testpreprocessor.cpp" $, 852 $, "\n4 AA" $, OurPreprocessor ::@expr1073743526 expandMacros (@expr1073743527 filedata@var213 ) $) $) { $return ; }
853: }
854:
855: void macro_simple4 ( ) const {
856: const char filedata@var214 [@expr1073743528 48 ] =@expr1073743529 "#define TEMP_1 if( temp > 0 ) return 1;\nTEMP_1\n"
857: ;
858: $if $(@expr1073743530 $!@expr1073743531 $assertEquals $(@expr1073743532 "cppcheck-2.8/test/testpreprocessor.cpp" $, 858 $, "\nif ( temp > 0 ) return 1 ;" $, OurPreprocessor ::@expr1073743533 expandMacros (@expr1073743534 filedata@var214 ) $) $) { $return ; }
859: }
860:
861: void macro_simple5 ( ) const {
862: const char filedata@var215 [@expr1073743535 80 ] =@expr1073743536 "#define ABC if( temp > 0 ) return 1;\n\nvoid foo()\n{\n    int temp = 0;\n    ABC\n}\n"
863:
|
867:
868: ;
869: $if $(@expr1073743537 $!@expr1073743538 $assertEquals $(@expr1073743539 "cppcheck-2.8/test/testpreprocessor.cpp" $, 869 $, "\n\nvoid foo ( )\n{\nint temp = 0 ;\nif ( temp > 0 ) return 1 ;\n}" $, OurPreprocessor ::@expr1073743540 expandMacros (@expr1073743541 filedata@var215 ) $) $) { $return ; }
870: }
871:
872: void macro_simple6 ( ) const {
873: const char filedata@var216 [@expr1073743542 25 ] =@expr1073743543 "#define ABC (a+b+c)\nABC\n"
874: ;
875: $if $(@expr1073743544 $!@expr1073743545 $assertEquals $(@expr1073743546 "cppcheck-2.8/test/testpreprocessor.cpp" $, 875 $, "\n( a + b + c )" $, OurPreprocessor ::@expr1073743547 expandMacros (@expr1073743548 filedata@var216 ) $) $) { $return ; }
876: }
877:
878: void macro_simple7 ( ) const {
879: const char filedata@var217 [@expr1073743549 31 ] =@expr1073743550 "#define ABC(str) str\nABC(\"(\")\n"
880: ;
881: $if $(@expr1073743551 $!@expr1073743552 $assertEquals $(@expr1073743553 "cppcheck-2.8/test/testpreprocessor.cpp" $, 881 $, "\n\"(\"" $, OurPreprocessor ::@expr1073743554 expandMacros (@expr1073743555 filedata@var217 ) $) $) { $return ; }
882: }
883:
884: void macro_simple8 ( ) const {
885: const char filedata@var218 [@expr1073743556 44 ] =@expr1073743557 "#define ABC 123\n#define ABCD 1234\nABC ABCD\n"
886:
887: ;
888: $if $(@expr1073743558 $!@expr1073743559 $assertEquals $(@expr1073743560 "cppcheck-2.8/test/testpreprocessor.cpp" $, 888 $, "\n\n123 1234" $, OurPreprocessor ::@expr1073743561 expandMacros (@expr1073743562 filedata@var218 ) $) $) { $return ; }
889: }
890:
891: void macro_simple9 ( ) const {
892: const char filedata@var219 [@expr1073743563 46 ] =@expr1073743564 "#define ABC(a) f(a)\nABC( \"\\\"\" );\nABC( \"g\" );\n"
893:
894: ;
895: $if $(@expr1073743565 $!@expr1073743566 $assertEquals $(@expr1073743567 "cppcheck-2.8/test/testpreprocessor.cpp" $, 895 $, "\nf ( \"\\\"\" ) ;\nf ( \"g\" ) ;" $, OurPreprocessor ::@expr1073743568 expandMacros (@expr1073743569 filedata@var219 ) $) $) { $return ; }
896: }
897:
898: void macro_simple10 ( ) const {
899: const char filedata@var220 [@expr1073743570 40 ] =@expr1073743571 "#define ABC(t) t x\nABC(unsigned long);\n"
900: ;
901: $if $(@expr1073743572 $!@expr1073743573 $assertEquals $(@expr1073743574 "cppcheck-2.8/test/testpreprocessor.cpp" $, 901 $, "\nunsigned long x ;" $, OurPreprocessor ::@expr1073743575 expandMacros (@expr1073743576 filedata@var220 ) $) $) { $return ; }
902: }
903:
904: void macro_simple11 ( ) const {
905: const char filedata@var221 [@expr1073743577 33 ] =@expr1073743578 "#define ABC(x) delete x\nABC(a);\n"
906: ;
907: $if $(@expr1073743579 $!@expr1073743580 $assertEquals $(@expr1073743581 "cppcheck-2.8/test/testpreprocessor.cpp" $, 907 $, "\ndelete a ;" $, OurPreprocessor ::@expr1073743582 expandMacros (@expr1073743583 filedata@var221 ) $) $) { $return ; }
908: }
909:
910: void macro_simple12 ( ) const {
911: const char filedata@var222 [@expr1073743584 24 ] =@expr1073743585 "#define AB ab.AB\nAB.CD\n"
912: ;
913: $if $(@expr1073743586 $!@expr1073743587 $assertEquals $(@expr1073743588 "cppcheck-2.8/test/testpreprocessor.cpp" $, 913 $, "\nab . AB . CD" $, OurPreprocessor ::@expr1073743589 expandMacros (@expr1073743590 filedata@var222 ) $) $) { $return ; }
914: }
915:
916: void macro_simple13 ( ) const {
917: const char filedata@var223 [@expr1073743591 32 ] =@expr1073743592 "#define TRACE(x)\nTRACE(;if(a))\n"
918: ;
919: $if $(@expr1073743593 $!@expr1073743594 $assertEquals $(@expr1073743595 "cppcheck-2.8/test/testpreprocessor.cpp" $, 919 $, "" $, OurPreprocessor ::@expr1073743596 expandMacros (@expr1073743597 filedata@var223 ) $) $) { $return ; }
920: }
921:
922: void macro_simple14 ( ) const {
923: const char filedata@var224 [@expr1073743598 30 ] =@expr1073743599 "#define A \"  a  \"\nprintf(A);\n"
924: ;
925: $if $(@expr1073743600 $!@expr1073743601 $assertEquals $(@expr1073743602 "cppcheck-2.8/test/testpreprocessor.cpp" $, 925 $, "\nprintf ( \"  a  \" ) ;" $, OurPreprocessor ::@expr1073743603 expandMacros (@expr1073743604 filedata@var224 ) $) $) { $return ; }
926: }
927:
928: void macro_simple15 ( ) const {
929: const char filedata@var225 [@expr1073743605 22 ] =@expr1073743606 "#define FOO\"foo\"\nFOO\n"
930: ;
931: $if $(@expr1073743607 $!@expr1073743608 $assertEquals $(@expr1073743609 "cppcheck-2.8/test/testpreprocessor.cpp" $, 931 $, "\n\"foo\"" $, OurPreprocessor ::@expr1073743610 expandMacros (@expr1073743611 filedata@var225 ) $) $) { $return ; }
932: }
933:
934: void macro_simple16 ( ) const {
935: const char filedata@var226 [@expr1073743612 71 ] =@expr1073743613 "#define MACRO( A, B, C ) class A##B##C##Creator {};\nMACRO( B\t, U , G )"
936: ;
937: $if $(@expr1073743614 $!@expr1073743615 $assertEquals $(@expr1073743616 "cppcheck-2.8/test/testpreprocessor.cpp" $, 937 $, "\nclass BUGCreator { } ;" $, OurPreprocessor ::@expr1073743617 expandMacros (@expr1073743618 filedata@var226 ) $) $) { $return ; }
938: }
939:
940: void macro_simple17 ( ) const {
941:
942:
943: const char filedata@var227 [@expr1073743619 34 ] =@expr1073743620 "#define MACRO(A) A+123\nMACRO(123)"
944: ;
945: $if $(@expr1073743621 $!@expr1073743622 $assertEquals $(@expr1073743623 "cppcheck-2.8/test/testpreprocessor.cpp" $, 945 $, "\n123 + 123" $, OurPreprocessor ::@expr1073743624 expandMacros (@expr1073743625 filedata@var227 ) $) $) { $return ; }
946: }
947:
948: void macro_simple18 ( ) const {
949: const char filedata1@var228 [@expr1073743626 22 ] =@expr1073743627 "#define A (1e-7)\na=A;"
950: ;
951: $if $(@expr1073743628 $!@expr1073743629 $assertEquals $(@expr1073743630 "cppcheck-2.8/test/testpreprocessor.cpp" $, 951 $, "\na = ( 1e-7 ) ;" $, OurPreprocessor ::@expr1807 expandMacros (@expr1073743632 filedata1@var228 ) $) $) { $return ; }
952:
953: const char filedata2@var229 [@expr1073743633 22 ] =@expr1073743634 "#define A (1E-7)\na=A;"
954: ;
955: $if $(@expr1073743635 $!@expr1073743636 $assertEquals $(@expr1073743637 "cppcheck-2.8/test/testpreprocessor.cpp" $, 955 $, "\na = ( 1E-7 ) ;" $, OurPreprocessor ::@expr1807 expandMacros (@expr1073743639 filedata2@var229 ) $) $) { $return ; }
956:
957: const char filedata3@var230 [@expr1073743640 22 ] =@expr1073743641 "#define A (1e+7)\na=A;"
958: ;
959: $if $(@expr1073743642 $!@expr1073743643 $assertEquals $(@expr1073743644 "cppcheck-2.8/test/testpreprocessor.cpp" $, 959 $, "\na = ( 1e+7 ) ;" $, OurPreprocessor ::@expr1807 expandMacros (@expr1073743646 filedata3@var230 ) $) $) { $return ; }
960:
961: const char filedata4@var231 [@expr1073743647 23 ] =@expr1073743648 "#define A (1.e+7)\na=A;"
962: ;
963: $if $(@expr1073743649 $!@expr1073743650 $assertEquals $(@expr1073743651 "cppcheck-2.8/test/testpreprocessor.cpp" $, 963 $, "\na = ( 1.e+7 ) ;" $, OurPreprocessor ::@expr1807 expandMacros (@expr1073743653 filedata4@var231 ) $) $) { $return ; }
964:
965: const char filedata5@var232 [@expr1073743654 22 ] =@expr1073743655 "#define A (1.7f)\na=A;"
966: ;
967: $if $(@expr1073743656 $!@expr1073743657 $assertEquals $(@expr1073743658 "cppcheck-2.8/test/testpreprocessor.cpp" $, 967 $, "\na = ( 1.7f ) ;" $, OurPreprocessor ::@expr1807 expandMacros (@expr1073743660 filedata5@var232 ) $) $) { $return ; }
968:
969: const char filedata6@var233 [@expr1073743661 20 ] =@expr1073743662 "#define A (.1)\na=A;"
970: ;
971: $if $(@expr1073743663 $!@expr1073743664 $assertEquals $(@expr1073743665 "cppcheck-2.8/test/testpreprocessor.cpp" $, 971 $, "\na = ( .1 ) ;" $, OurPreprocessor ::@expr1807 expandMacros (@expr1073743667 filedata6@var233 ) $) $) { $return ; }
972:
973: const char filedata7@var234 [@expr1073743668 20 ] =@expr1073743669 "#define A (1.)\na=A;"
974: ;
975: $if $(@expr1073743670 $!@expr1073743671 $assertEquals $(@expr1073743672 "cppcheck-2.8/test/testpreprocessor.cpp" $, 975 $, "\na = ( 1. ) ;" $, OurPreprocessor ::@expr1807 expandMacros (@expr1073743674 filedata7@var234 ) $) $) { $return ; }
976:
977: const char filedata8@var235 [@expr1073743675 26 ] =@expr1073743676 "#define A (8.0E+007)\na=A;"
978: ;
979: $if $(@expr1073743677 $!@expr1073743678 $assertEquals $(@expr1073743679 "cppcheck-2.8/test/testpreprocessor.cpp" $, 979 $, "\na = ( 8.0E+007 ) ;" $, OurPreprocessor ::@expr1807 expandMacros (@expr1073743681 filedata8@var235 ) $) $) { $return ; }
980: }
981:
982: void macroInMacro1 ( ) const {
983: {
984: const char filedata@var236 [@expr1073743682 54 ] =@expr1073743683 "#define A(m) long n = m; n++;\n#define B(n) A(n)\nB(0)\n"
985:
986: ;
987: $if $(@expr1073743684 $!@expr1073743685 $assertEquals $(@expr1073743686 "cppcheck-2.8/test/testpreprocessor.cpp" $, 987 $, "\n\nlong n = 0 ; n ++ ;" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743688 filedata@var236 ) $) $) { $return ; }
988: }
989:
990: {
991: const char filedata@var237 [@expr1073743689 27 ] =@expr1073743690 "#define A B\n#define B 3\nA\n"
992:
993: ;
994: $if $(@expr1073743691 $!@expr1073743692 $assertEquals $(@expr1073743693 "cppcheck-2.8/test/testpreprocessor.cpp" $, 994 $, "\n\n3" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743695 filedata@var237 ) $) $) { $return ; }
995: }
996:
997: {
998: const char filedata@var238 [@expr1073743696 95 ] =@expr1073743697 "#define BC(b, c...) 0##b * 0##c\n#define ABC(a, b...) a + BC(b)\n\nABC(1);\nABC(2,3);\nABC(4,5,6);\n"
999:
|
1002:
1003: ;
1004:
1005: $if $(@expr1073743698 $!@expr1073743699 $assertEquals $(@expr1073743700 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1005 $, "\n\n\n1 + 0 * 0 ;\n2 + 03 * 0 ;\n4 + 05 * 06 ;" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743702 filedata@var238 ) $) $) { $return ; }
1006: }
1007:
1008: {
1009: const char filedata@var239 [@expr1073743703 36 ] =@expr1073743704 "#define A 4\n#define B(a) a,A\nB(2);\n"
1010:
1011: ;
1012: $if $(@expr1073743705 $!@expr1073743706 $assertEquals $(@expr1073743707 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1012 $, "\n\n2 , 4 ;" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743709 filedata@var239 ) $) $) { $return ; }
1013: }
1014:
1015: {
1016: const char filedata@var240 [@expr1073743710 46 ] =@expr1073743711 "#define A(x) (x)\n#define B )A(\n#define C )A(\n"
1017:
1018: ;
1019: $if $(@expr1073743712 $!@expr1073743713 $assertEquals $(@expr1073743714 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1019 $, "" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743716 filedata@var240 ) $) $) { $return ; }
1020: }
1021:
1022: {
1023: const char filedata@var241 [@expr1073743717 44 ] =@expr1073743718 "#define A(x) (x*2)\n#define B A(\nfoo B(i));\n"
1024:
1025: ;
1026: $if $(@expr1073743719 $!@expr1073743720 $assertEquals $(@expr1073743721 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1026 $, "\n\nfoo ( ( i ) * 2 ) ;" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743723 filedata@var241 ) $) $) { $return ; }
1027: }
1028:
1029: {
1030: const char filedata@var242 [@expr1073743724 21 ] =@expr1073743725 "#define foo foo\nfoo\n"
1031: ;
1032: $if $(@expr1073743726 $!@expr1073743727 $assertEquals $(@expr1073743728 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1032 $, "\nfoo" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743730 filedata@var242 ) $) $) { $return ; }
1033: }
1034:
1035: {
1036: const char filedata@var243 [@expr1073743731 92 ] =@expr1073743732
1037: "#define B(A1, A2) } while (0)\n#define A(name) void foo##name() { do { B(1, 2); }\nA(0)\nA(1)\n"
1038:
1039:
1040: ;
1041: $if $(@expr1073743733 $!@expr1073743734 $assertEquals $(@expr1073743735 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1041 $, "\n\nvoid foo0 ( ) { do { } while ( 0 ) ; }\nvoid foo1 ( ) { do { } while ( 0 ) ; }" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743737 filedata@var243 ) $) $) { $return ; }
1042: }
1043:
1044: {
1045: const char filedata@var244 [@expr1073743738 47 ] =@expr1073743739
1046: "#define B(x) (\n#define A() B(xx)\nB(1) A() ) )\n"
1047:
1048: ;
1049: $if $(@expr1073743740 $!@expr1073743741 $assertEquals $(@expr1073743742 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1049 $, "\n\n( ( ) )" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743744 filedata@var244 ) $) $) { $return ; }
1050: }
1051:
1052: {
1053: const char filedata@var245 [@expr1073743745 67 ] =@expr1073743746
1054: "#define PTR1 (\n#define PTR2 PTR1 PTR1\nint PTR2 PTR2 foo )))) = 0;\n"
1055:
1056: ;
1057: $if $(@expr1073743747 $!@expr1073743748 $assertEquals $(@expr1073743749 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1057 $, "\n\nint ( ( ( ( foo ) ) ) ) = 0 ;" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743751 filedata@var245 ) $) $) { $return ; }
1058: }
1059:
1060: {
1061: const char filedata@var246 [@expr1073743752 26 ] =@expr1073743753
1062: "#define PTR1 (\nPTR1 PTR1\n"
1063: ;
1064: $if $(@expr1073743754 $!@expr1073743755 $assertEquals $(@expr1073743756 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1064 $, "\n( (" $, OurPreprocessor ::@expr1863 expandMacros (@expr1073743758 filedata@var246 ) $) $) { $return ; }
1065: }
1066: }
1067:
1068: void macroInMacro2 ( ) const {
1069: const char filedata@var247 [@expr1073743759 36 ] =@expr1073743760 "#define A(x) a##x\n#define B 0\nA(B)\n"
1070:
1071: ;
1072: $if $(@expr1073743761 $!@expr1073743762 $assertEquals $(@expr1073743763 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1072 $, "\n\naB" $, OurPreprocessor ::@expr1073743764 expandMacros (@expr1073743765 filedata@var247 ) $) $) { $return ; }
1073: }
1074:
1075: void macro_linenumbers ( ) const {
1076: const char filedata@var248 [@expr1073743766 32 ] =@expr1073743767 "#define AAA(a)\nAAA(5\n\n)\nint a;\n"
1077:
1078:
1079:
1080: ;
1081: $if $(@expr1073743768 $!@expr1073743769 $assertEquals $(@expr1073743770 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1081 $, "\n\n\n\nint a ;" $, OurPreprocessor ::@expr1073743771 expandMacros (@expr1073743772 filedata@var248 ) $) $) { $return
1082:
|
1085:
1086: ; }
1087: }
1088:
1089: void macro_nopar ( ) const {
1090: const char filedata@var249 [@expr1073743773 31 ] =@expr1073743774 "#define AAA( ) { NULL }\nAAA()\n"
1091: ;
1092: $if $(@expr1073743775 $!@expr1073743776 $assertEquals $(@expr1073743777 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1092 $, "\n{ NULL }" $, OurPreprocessor ::@expr1073743778 expandMacros (@expr1073743779 filedata@var249 ) $) $) { $return ; }
1093: }
1094:
1095: void macro_incdec ( ) const {
1096: const char filedata@var250 [@expr1073743780 51 ] =@expr1073743781 "#define M1(X) 1+X\n#define M2(X) 2-X\nM1(+1) M2(-1)\n"
1097:
1098: ;
1099: $if $(@expr1073743782 $!@expr1073743783 $assertEquals $(@expr1073743784 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1099 $, "\n\n1 + + 1 2 - - 1" $, OurPreprocessor ::@expr1073743785 expandMacros (@expr1073743786 filedata@var250 ) $) $) { $return ; }
1100: }
1101:
1102: void macro_switchCase ( ) const {
1103: {
1104:
1105: const char filedata@var251 [@expr1073743787 55 ] =@expr1073743788 "#define A( b ) switch( a ){ case 2:  break; }\nA( 5 );\n"
1106:
|
1109:
1110: ;
1111: $if $(@expr1073743789 $!@expr1073743790 $assertEquals $(@expr1073743791 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1111 $, "\nswitch ( a ) { case 2 : break ; } ;" $, OurPreprocessor ::@expr1968 expandMacros (@expr1073743793 filedata@var251 ) $) $) { $return ; }
1112: }
1113:
1114: {
1115:
1116: const char filedata@var252 [@expr1073743794 28 ] =@expr1073743795 "#define A() AA : 2 BB\nA();\n"
1117: ;
1118: $if $(@expr1073743796 $!@expr1073743797 $assertEquals $(@expr1073743798 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1118 $, "\nAA : 2 BB ;" $, OurPreprocessor ::@expr1968 expandMacros (@expr1073743800 filedata@var252 ) $) $) { $return ; }
1119: }
1120:
1121: {
1122: const char filedata@var253 [@expr1073743801 62 ] =@expr1073743802 "#define A }\n#define B() A\n#define C( a ) B() break;\n{C( 2 );\n"
1123:
1124:
1125: ;
1126: $if $(@expr1073743803 $!@expr1073743804 $assertEquals $(@expr1073743805 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1126 $, "\n\n\n{ } break ; ;" $, OurPreprocessor ::@expr1968 expandMacros (@expr1073743807 filedata@var253 ) $) $) { $return ; }
1127: }
1128:
1129:
1130: {
1131: const char filedata@var254 [@expr1073743808 63 ] =@expr1073743809 "#define A }\n#define B() A\n#define C( a ) B() _break;\n{C( 2 );\n"
1132:
1133:
1134: ;
1135: $if $(@expr1073743810 $!@expr1073743811 $assertEquals $(@expr1073743812 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1135 $, "\n\n\n{ } _break ; ;" $, OurPreprocessor ::@expr1968 expandMacros (@expr1073743814 filedata@var254 ) $) $) { $return ; }
1136: }
1137:
1138:
1139: {
1140: const char filedata@var255 [@expr1073743815 58 ] =@expr1073743816 "#define A }\n#define B() A\n#define C( a ) B() 5;\n{C( 2 );\n"
1141:
1142:
1143: ;
1144: $if $(@expr1073743817 $!@expr1073743818 $assertEquals $(@expr1073743819 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1144 $, "\n\n\n{ } 5 ; ;" $, OurPreprocessor ::@expr1968 expandMacros (@expr1073743821 filedata@var255 ) $) $) { $return ; }
1145: }
1146: }
1147:
1148: void macro_NULL ( ) const {
1149:
1150: $if $(@expr1073743822 $!@expr1073743823 $assertEquals $(@expr1073743824 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1150 $, "\n0" $, OurPreprocessor ::@expr2001 expandMacros (@expr1073743826 "#define null 0\nnull" ) $) $) { $return ; }
1151: $todoAssertEquals $(@expr1073743827 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1151 $, "\nNULL" $, "\n0" $, OurPreprocessor ::@expr2001 expandMacros (@expr1073743829 "#define NULL 0\nNULL" ) $) ;
1152: }
1153:
1154: void string1 ( ) {
1155: const char filedata@var256 [@expr1073743830 46 ] =@expr1073743831 "int main(){    const char *a = \"#define A\";}\n"
1156:
1157:
1158: ;
1159:
1160:
1161: std ::@expr1073743832 map < std ::@expr2009 string , std ::@expr2009 string > actual@var257 ;
1162: preprocess (@expr1073743835 filedata@var256 , actual@var257 ) ;
1163:
1164:
1165: $if $(@expr1073743836 $!@expr1073743837 $assertEquals $(@expr1073743838 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1165 $, 1 $, actual@var257 .@expr1073743839 size (@expr1073743840 ) $) $) { $return ; }
1166: $if $(@expr1073743841 $!@expr1073743842 $assertEquals $(@expr1073743843 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1166 $, "int main ( ) { const char * a = \"#define A\" ; }" $, actual@var257 [@expr1073743844 "" ] $) $) { $return ; }
1167: }
1168:
1169: void string2 ( ) const {
1170: const char filedata@var258 [@expr1073743845 29 ] =@expr1073743846 "#define AAA 123\nstr = \"AAA\"\n"
1171: ;
1172:
1173:
1174: $if $(@expr1073743847 $!@expr1073743848 $assertEquals $(@expr1073743849 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1174 $, "\nstr = \"AAA\"" $, OurPreprocessor ::@expr1073743850 expandMacros (@expr1073743851 filedata@var258 ) $) $) { $return ; }
1175: }
1176:
1177: void string3 ( ) const {
1178: const char filedata@var259 [@expr1073743852 11 ] =@expr1073743853 "str(\";\");\n" ;
1179:
1180:
1181: $if $(@expr1073743854 $!@expr1073743855 $assertEquals $(@expr1073743856 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1181 $, "str ( \";\" ) ;" $, OurPreprocessor ::@expr1073743857 expandMacros (@expr1073743858 filedata@var259 ) $) $) { $return ; }
1182: }
1183:
1184:
1185: void preprocessor_undef ( ) {
1186: {
1187: const char filedata@var260 [@expr1073743859 57 ] =@expr1073743860 "#define AAA int a;\n#undef AAA\n#define AAA char b=0;\nAAA\n"
1188:
1189:
1190: ;
1191:
1192:
1193: $if $(@expr1073743861 $!@expr1073743862 $assertEquals $(@expr1073743863 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1193 $, "\n\n\nchar b = 0 ;" $, OurPreprocessor ::@expr1073743864 expandMacros (@expr1073743865 filedata@var260 ) $) $) { $return ; }
1194: }
1195:
1196: {
1197:
1198: const char filedata@var261 [@expr1073743866 39 ] =@expr1073743867 "#define z p[2]\n#undef z\nint z;\nz = 0;\n"
1199:
1200:
1201: ;
1202: $if $(@expr1073743868 $!@expr1073743869 $assertEquals $(@expr1073743870 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1202 $, "\n\nint z ;\nz = 0 ;" $, $(@expr1073743871 preprocessor0@var113 .@expr1073743872 getcode (@expr1073743873 filedata@var261 , "" , "" ) $) $) $) { $return ; }
1203: }
1204: }
1205:
1206: void defdef ( ) const {
1207: const char filedata@var262 [@expr1073743874 53 ] =@expr1073743875 "#define AAA 123\n#define AAA 456\n#define AAA 789\nAAA\n"
1208:
1209:
1210: ;
1211:
1212:
1213: $if $(@expr1073743876 $!@expr1073743877 $assertEquals $(@expr1073743878 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1213 $, "\n\n\n789" $, OurPreprocessor ::@expr1073743879 expandMacros (@expr1073743880 filedata@var262 ) $) $) { $return ; }
1214: }
1215:
1216: void preprocessor_doublesharp ( ) const {
1217:
1218: const char filedata1@var263 [@expr1073743881 47 ] =@expr1073743882 "#define TEST(var,val) var = val\nTEST(foo,20);\n"
1219: ;
1220: $if $(@expr1073743883 $!@expr1073743884 $assertEquals $(@expr1073743885 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1220 $, "\nfoo = 20 ;" $, OurPreprocessor ::@expr2062 expandMacros (@expr1073743887 filedata1@var263 ) $) $) { $return ; }
1221:
1222:
1223: const char filedata2@var264 [@expr1073743888 55 ] =@expr1073743889 "#define TEST(var,val) var##_##val = val\nTEST(foo,20);\n"
1224: ;
1225: $if $(@expr1073743890 $!@expr1073743891 $assertEquals $(@expr1073743892 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1225 $, "\nfoo_20 = 20 ;" $, OurPreprocessor ::@expr2062 expandMacros (@expr1073743894 filedata2@var264 ) $) $) { $return ; }
1226:
1227:
1228: const char filedata3@var265 [@expr1073743895 43 ] =@expr1073743896 "#define ABCD 123\n#define A(B) A##B\nA(BCD)\n"
1229:
1230: ;
1231: $if $(@expr1073743897 $!@expr1073743898 $assertEquals $(@expr1073743899 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1231 $, "\n\n123" $, OurPreprocessor ::@expr2062 expandMacros (@expr1073743901 filedata3@var265 ) $) $) { $return ; }
1232:
1233:
1234: const char filedata4@var266 [@expr1073743902 45 ] =@expr1073743903 "#define A(B) A##B\n#define a(B) A(B)\na(A(B))\n"
1235:
1236: ;
1237: $if $(@expr1073743904 $!@expr1073743905 $assertEquals $(@expr1073743906 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1237 $, "\n\nAAB" $, OurPreprocessor ::@expr2062 expandMacros (@expr1073743908 filedata4@var266 ) $) $) { $return ; }
1238:
1239:
1240: const char filedata5@var267 [@expr1073743909 60 ] =@expr1073743910 "#define AB(A,B) A##B\n#define ab(A,B) AB(A,B)\nab(a,AB(b,c))\n"
1241:
1242: ;
1243: $if $(@expr1073743911 $!@expr1073743912 $assertEquals $(@expr1073743913 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1243 $, "\n\nabc" $, OurPreprocessor ::@expr2062 expandMacros (@expr1073743915 filedata5@var267 ) $) $) { $return ; }
1244:
1245:
1246: const char filedata6@var268 [@expr1073743916 103 ] =@expr1073743917 "#define AB_(A,B) A ## B\n#define AB(A,B) AB_(A,B)\n#define ab(suf) AB(X, AB_(_, suf))\n#define X x\nab(y)\n"
1247:
1248:
1249:
1250: ;
1251: $if $(@expr1073743918 $!@expr1073743919 $assertEquals $(@expr1073743920 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1251 $, "\n\n\n\nx_y" $, OurPreprocessor ::@expr2062 expandMacros (@expr1073743922 filedata6@var268 ) $) $) { $return ; }
1252: }
1253:
1254:
1255:
1256: void preprocessor_include_in_str ( ) {
1257: const char filedata@var269 [@expr1073743923 63 ] =@expr1073743924 "int main()\n{\nconst char *a = \"#include <string>\";\nreturn 0;\n}\n"
1258:
1259:
1260:
1261: ;
1262:
1263:
1264: std ::@expr1073743925 map < std ::@expr2102 string , std ::@expr2102 string > actual@var270 ;
1265: preprocess (@expr1073743928 filedata@var269 , actual@var270 ) ;
1266:
1267:
1268: $if $(@expr1073743929 $!@expr1073743930 $assertEquals $(@expr1073743931 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1268 $, 1 $, actual@var270 .@expr1073743932 size (@expr1073743933 ) $) $) { $return ; }
1269: $if $(@expr1073743934 $!@expr1073743935 $assertEquals $(@expr1073743936 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1269 $, "int main ( )\n{\nconst char * a = \"#include <string>\" ;\nreturn 0 ;\n}" $, actual@var270 [@expr1073743937 "" ] $) $) { $return ; }
1270: }
1271:
|
1274:
1275: void va_args_1 ( ) const {
1276: const char filedata@var271 [@expr1073743938 69 ] =@expr1073743939 "#define DBG(fmt...) printf(fmt)\nDBG(\"[0x%lx-0x%lx)\", pstart, pend);\n"
1277: ;
1278:
1279:
1280: std ::@expr1073743940 string actual@var272 ; actual@var272 =@expr1073743941 OurPreprocessor ::@expr1073743942 expandMacros (@expr1073743943 filedata@var271 ) ;
1281:
1282: $if $(@expr1073743944 $!@expr1073743945 $assertEquals $(@expr1073743946 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1282 $, "\nprintf ( \"[0x%lx-0x%lx)\" , pstart , pend ) ;" $, actual@var272 $) $) { $return ; }
1283: }
1284:
|
1294:
1295: void va_args_3 ( ) const {
1296: const char filedata@var273 [@expr1073743947 52 ] =@expr1073743948 "#define FRED(...) { fred(__VA_ARGS__); }\nFRED(123)\n"
1297: ;
1298: $if $(@expr1073743949 $!@expr1073743950 $assertEquals $(@expr1073743951 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1298 $, "\n{ fred ( 123 ) ; }" $, OurPreprocessor ::@expr1073743952 expandMacros (@expr1073743953 filedata@var273 ) $) $) { $return ; }
1299: }
1300:
1301: void va_args_4 ( ) const {
1302: const char filedata@var274 [@expr1073743954 59 ] =@expr1073743955 "#define FRED(name, ...) name (__VA_ARGS__)\nFRED(abc, 123)\n"
1303: ;
1304: $if $(@expr1073743956 $!@expr1073743957 $assertEquals $(@expr1073743958 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1304 $, "\nabc ( 123 )" $, OurPreprocessor ::@expr1073743959 expandMacros (@expr1073743960 filedata@var274 ) $) $) { $return ; }
1305: }
1306:
1307: void va_args_5 ( ) const {
1308: const char filedata1@var275 [@expr1073743961 36 ] =@expr1073743962 "#define A(...) #__VA_ARGS__\nA(123)\n"
1309: ;
1310: $if $(@expr1073743963 $!@expr1073743964 $assertEquals $(@expr1073743965 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1310 $, "\n\"123\"" $, OurPreprocessor ::@expr2142 expandMacros (@expr1073743967 filedata1@var275 ) $) $) { $return ; }
1311:
1312: const char filedata2@var276 [@expr1073743968 43 ] =@expr1073743969 "#define A(X,...) X(#__VA_ARGS__)\nA(f,123)\n"
1313: ;
1314: $if $(@expr1073743970 $!@expr1073743971 $assertEquals $(@expr1073743972 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1314 $, "\nf ( \"123\" )" $, OurPreprocessor ::@expr2142 expandMacros (@expr1073743974 filedata2@var276 ) $) $) { $return ; }
1315: }
1316:
1317:
1318:
1319: void multi_character_character ( ) {
1320: const char filedata@var277 [@expr1073743975 61 ] =@expr1073743976 "#define FOO 'ABCD'\nint main()\n{\nif( FOO == 0 );\nreturn 0;\n}\n"
1321:
|
1324:
1325: ;
1326:
1327:
1328: std ::@expr1073743977 map < std ::@expr2154 string , std ::@expr2154 string > actual@var278 ;
1329: preprocess (@expr1073743980 filedata@var277 , actual@var278 ) ;
1330:
1331:
1332: $if $(@expr1073743981 $!@expr1073743982 $assertEquals $(@expr1073743983 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1332 $, 1 $, actual@var278 .@expr1073743984 size (@expr1073743985 ) $) $) { $return ; }
1333: $if $(@expr1073743986 $!@expr1073743987 $assertEquals $(@expr1073743988 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1333 $, "\nint main ( )\n{\nif ( $'ABCD' == 0 ) ;\nreturn 0 ;\n}" $, actual@var278 [@expr1073743989 "" ] $) $) { $return ; }
1334: }
1335:
1336:
1337: void stringify ( ) const {
1338: const char filedata@var279 [@expr1073743990 40 ] =@expr1073743991 "#define STRINGIFY(x) #x\nSTRINGIFY(abc)\n"
1339: ;
1340:
1341:
1342: std ::@expr1073743992 string actual@var280 ; actual@var280 =@expr1073743993 OurPreprocessor ::@expr1073743994 expandMacros (@expr1073743995 filedata@var279 ) ;
1343:
1344: $if $(@expr1073743996 $!@expr1073743997 $assertEquals $(@expr1073743998 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1344 $, "\n\"abc\"" $, actual@var280 $) $) { $return ; }
1345: }
1346:
1347: void stringify2 ( ) const {
1348: const char filedata@var281 [@expr1073743999 28 ] =@expr1073744000 "#define A(x) g(#x)\nA(abc);\n"
1349: ;
1350:
1351:
1352: std ::@expr1073744001 string actual@var282 ; actual@var282 =@expr1073744002 OurPreprocessor ::@expr1073744003 expandMacros (@expr1073744004 filedata@var281 ) ;
1353:
1354: $if $(@expr1073744005 $!@expr1073744006 $assertEquals $(@expr1073744007 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1354 $, "\ng ( \"abc\" ) ;" $, actual@var282 $) $) { $return ; }
1355: }
1356:
1357: void stringify3 ( ) const {
1358: const char filedata@var283 [@expr1073744008 29 ] =@expr1073744009 "#define A(x) g(#x)\nA( abc);\n"
1359: ;
1360:
1361:
1362: std ::@expr1073744010 string actual@var284 ; actual@var284 =@expr1073744011 OurPreprocessor ::@expr1073744012 expandMacros (@expr1073744013 filedata@var283 ) ;
1363:
1364: $if $(@expr1073744014 $!@expr1073744015 $assertEquals $(@expr1073744016 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1364 $, "\ng ( \"abc\" ) ;" $, actual@var284 $) $) { $return ; }
1365: }
1366:
1367: void stringify4 ( ) const {
1368: const char filedata@var285 [@expr1073744017 30 ] =@expr1073744018 "#define A(x) #x\n1 A(\nabc\n) 2\n"
1369:
1370:
1371: ;
1372:
1373:
1374: std ::@expr1073744019 string actual@var286 ; actual@var286 =@expr1073744020 OurPreprocessor ::@expr1073744021 expandMacros (@expr1073744022 filedata@var285 ) ;
1375:
1376: $if $(@expr1073744023 $!@expr1073744024 $assertEquals $(@expr1073744025 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1376 $, "\n1 \"abc\"\n\n2" $, actual@var286 $) $) { $return ; }
1377: }
1378:
1379: void stringify5 ( ) const {
1380: const char filedata@var287 [@expr1073744026 35 ] =@expr1073744027 "#define A(x) a(#x,x)\nA(foo(\"\\\"\"))\n"
1381: ;
1382: $if $(@expr1073744028 $!@expr1073744029 $assertEquals $(@expr1073744030 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1382 $, "\na ( \"foo(\\\"\\\\\\\"\\\")\" , foo ( \"\\\"\" ) )" $, OurPreprocessor ::@expr1073744031 expandMacros (@expr1073744032 filedata@var287 ) $) $) { $return ; }
1383: }
1384:
1385: void pragma ( ) {
1386: const char filedata@var288 [@expr1073744033 27 ] =@expr1073744034 "#pragma once\nvoid f()\n{\n}\n"
1387:
1388:
1389: ;
1390:
1391:
1392: std ::@expr1073744035 map < std ::@expr2212 string , std ::@expr2212 string > actual@var289 ;
1393: preprocess (@expr1073744038 filedata@var288 , actual@var289 ) ;
1394:
1395:
1396: $if $(@expr1073744039 $!@expr1073744040 $assertEquals $(@expr1073744041 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1396 $, 1 $, actual@var289 .@expr1073744042 size (@expr1073744043 ) $) $) { $return ; }
1397: $if $(@expr1073744044 $!@expr1073744045 $assertEquals $(@expr1073744046 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1397 $, "\nvoid f ( )\n{\n}" $, actual@var289 [@expr1073744047 "" ] $) $) { $return ; }
1398: }
1399:
1400: void pragma_asm_1 ( ) {
1401: const char filedata@var290 [@expr1073744048 100 ] =@expr1073744049 "#pragma asm\n    mov r1, 11\n#pragma endasm\naaa\n#pragma asm foo\n    mov r1, 11\n#pragma endasm bar\nbbb"
1402:
|
1407:
1408: ;
1409:
1410:
1411: std ::@expr1073744050 map < std ::@expr2227 string , std ::@expr2227 string > actual@var291 ;
1412: preprocess (@expr1073744053 filedata@var290 , actual@var291 ) ;
1413:
1414:
1415: $if $(@expr1073744054 $!@expr1073744055 $assertEquals $(@expr1073744056 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1415 $, 1 $, actual@var291 .@expr1073744057 size (@expr1073744058 ) $) $) { $return ; }
1416: $if $(@expr1073744059 $!@expr1073744060 $assertEquals $(@expr1073744061 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1416 $, "asm ( )\n;\n\naaa\nasm ( ) ;\n\n\nbbb" $, actual@var291 [@expr1073744062 "" ] $) $) { $return ; }
1417: }
1418:
1419: void pragma_asm_2 ( ) {
1420: const char filedata@var292 [@expr1073744063 60 ] =@expr1073744064 "#pragma asm\n    mov @w1, 11\n#pragma endasm ( temp=@w1 )\nbbb"
1421:
1422:
1423: ;
1424:
1425:
1426: std ::@expr1073744065 map < std ::@expr2242 string , std ::@expr2242 string > actual@var293 ;
1427: preprocess (@expr1073744068 filedata@var292 , actual@var293 ) ;
1428:
1429:
1430: $if $(@expr1073744069 $!@expr1073744070 $assertEquals $(@expr1073744071 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1430 $, 1 $, actual@var293 .@expr1073744072 size (@expr1073744073 ) $) $) { $return ; }
1431: $if $(@expr1073744074 $!@expr1073744075 $assertEquals $(@expr1073744076 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1431 $, "asm ( )\n;\n\nbbb" $, actual@var293 [@expr1073744077 "" ] $) $) { $return ; }
1432: }
1433:
1434: void endifsemicolon ( ) {
1435: const char filedata@var294 [@expr1073744078 31 ] =@expr1073744079 "void f() {\n#ifdef A\n#endif;\n}\n"
1436:
1437:
1438: ;
1439:
1440:
1441: std ::@expr1073744080 map < std ::@expr2257 string , std ::@expr2257 string > actual@var295 ;
1442: preprocess (@expr1073744083 filedata@var294 , actual@var295 ) ;
1443:
1444:
1445: $if $(@expr1073744084 $!@expr1073744085 $assertEquals $(@expr1073744086 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1445 $, 2 $, actual@var295 .@expr1073744087 size (@expr1073744088 ) $) $) { $return ; }
1446: const std ::@expr1073744089 string expected@var296 (@expr1073744090 "void f ( ) {\n\n\n}" ) ;
1447: $if $(@expr1073744091 $!@expr1073744092 $assertEquals $(@expr1073744093 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1447 $, expected@var296 $, actual@var295 [@expr1073744094 "" ] $) $) { $return ; }
1448: $if $(@expr1073744095 $!@expr1073744096 $assertEquals $(@expr1073744097 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1448 $, expected@var296 $, actual@var295 [@expr1073744098 "A" ] $) $) { $return ; }
1449: }
1450:
1451: void handle_error ( ) {
1452:
1453: const char filedata@var297 [@expr1073744099 82 ] =@expr1073744100 "#define A \n#define B don't want to \\\nmore text\nvoid f()\n{\n  char a = 'a'; // '\n}\n"
1454:
|
1458:
1459: ;
1460:
1461:
1462: std ::@expr1073744101 map < std ::@expr2278 string , std ::@expr2278 string > actual@var298 ;
1463: preprocess (@expr1073744104 filedata@var297 , actual@var298 ) ;
1464:
1465: $if $(@expr1073744105 $!@expr1073744106 $assertEquals $(@expr1073744107 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1465 $, "" $, actual@var298 [@expr1073744108 "" ] $) $) { $return ; }
1466: $if $(@expr1073744109 $!@expr1073744110 $assertEquals $(@expr1073744111 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1466 $, "" $, errout@var100 .@expr1073744112 str (@expr1073744113 ) $) $) { $return ; }
1467:
1468: }
1469:
1470: void missing_doublequote ( ) {
1471: {
1472: const char filedata@var299 [@expr1073744114 29 ] =@expr1073744115 "#define a\n#ifdef 1\n\"\n#endif\n"
1473:
1474:
1475: ;
1476:
1477:
1478: errout@var100 .@expr2292 str (@expr2293 "" ) ;
1479: const std ::@expr1073744118 string actual@var300 (@expr1073744119 OurPreprocessor ::@expr2296 expandMacros (@expr1073744121 filedata@var299 , this@expr2298 ) ) ;
1480:
1481: $if $(@expr1073744123 $!@expr1073744124 $assertEquals $(@expr1073744125 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1481 $, "" $, actual@var300 $) $) { $return ; }
1482: $if $(@expr1073744126 $!@expr1073744127 $assertEquals $(@expr1073744128 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1482 $, "[file.cpp:3]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" $, errout@var100 .@expr2292 str (@expr2306 ) $) $) { $return ; }
1483: }
1484:
1485: {
1486: const char filedata@var301 [@expr1073744131 36 ] =@expr1073744132 "#file \"abc.h\"\n#define a\n\"\n#endfile\n"
1487:
1488:
1489: ;
1490:
1491:
1492: errout@var100 .@expr2292 str (@expr2293 "" ) ;
1493: const std ::@expr1073744135 string actual@var302 (@expr1073744136 OurPreprocessor ::@expr2296 expandMacros (@expr1073744138 filedata@var301 , this@expr2298 ) ) ;
1494:
1495: $if $(@expr1073744139 $!@expr1073744140 $assertEquals $(@expr1073744141 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1495 $, "" $, actual@var302 $) $) { $return ; }
1496: $if $(@expr1073744142 $!@expr1073744143 $assertEquals $(@expr1073744144 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1496 $, "[abc.h:2]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" $, errout@var100 .@expr2292 str (@expr2306 ) $) $) { $return ; }
1497: }
1498:
1499: {
1500: const char filedata@var303 [@expr1073744147 36 ] =@expr1073744148 "#file \"abc.h\"\n#define a\n#endfile\n\"\n"
1501:
1502:
1503: ;
1504:
1505:
1506: errout@var100 .@expr2292 str (@expr2293 "" ) ;
1507: const std ::@expr1073744151 string actual@var304 (@expr1073744152 OurPreprocessor ::@expr2296 expandMacros (@expr1073744154 filedata@var303 , this@expr2298 ) ) ;
1508:
1509: $if $(@expr1073744155 $!@expr1073744156 $assertEquals $(@expr1073744157 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1509 $, "" $, actual@var304 $) $) { $return ; }
1510: $if $(@expr1073744158 $!@expr1073744159 $assertEquals $(@expr1073744160 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1510 $, "[file.cpp:2]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" $, errout@var100 .@expr2292 str (@expr2306 ) $) $) { $return ; }
1511: }
1512:
1513: {
1514: const char filedata@var305 [@expr1073744163 36 ] =@expr1073744164 "#define A 1\n#define B \"\nint a = A;\n"
1515:
1516: ;
1517:
1518:
1519: errout@var100 .@expr2292 str (@expr2293 "" ) ;
1520: const std ::@expr1073744167 string actual@var306 (@expr1073744168 OurPreprocessor ::@expr2296 expandMacros (@expr1073744170 filedata@var305 , this@expr2298 ) ) ;
1521:
1522: $if $(@expr1073744171 $!@expr1073744172 $assertEquals $(@expr1073744173 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1522 $, "" $, actual@var306 $) $) { $return ; }
1523: $if $(@expr1073744174 $!@expr1073744175 $assertEquals $(@expr1073744176 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1523 $, "[file.cpp:2]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" $, errout@var100 .@expr2292 str (@expr2306 ) $) $) { $return ; }
1524: }
1525:
1526: {
1527: const char filedata@var307 [@expr1073744179 45 ] =@expr1073744180 "void foo()\n{\n\n\n\nint a = 0;\nprintf(Text\");\n}\n"
1528:
|
1533:
1534: ;
1535:
1536:
1537: errout@var100 .@expr2292 str (@expr2293 "" ) ;
1538: OurPreprocessor ::@expr2296 expandMacros (@expr1073744184 filedata@var307 , this@expr2298 ) ;
1539:
1540: $if $(@expr1073744185 $!@expr1073744186 $assertEquals $(@expr1073744187 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1540 $, "[file.cpp:7]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" $, errout@var100 .@expr2292 str (@expr2306 ) $) $) { $return ; }
1541: }
1542: }
1543:
1544:
1545: void define_part_of_func ( ) {
1546: const char filedata@var308 [@expr1073744190 36 ] =@expr1073744191 "#define A g(\nvoid f() {\n  A );\n  }\n"
1547:
1548:
1549: ;
1550:
1551:
1552: std ::@expr1073744192 map < std ::@expr2369 string , std ::@expr2369 string > actual@var309 ;
1553: preprocess (@expr1073744195 filedata@var308 , actual@var309 ) ;
1554:
1555:
1556: $if $(@expr1073744196 $!@expr1073744197 $assertEquals $(@expr1073744198 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1556 $, 1 $, actual@var309 .@expr1073744199 size (@expr1073744200 ) $) $) { $return ; }
1557: $if $(@expr1073744201 $!@expr1073744202 $assertEquals $(@expr1073744203 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1557 $, "\nvoid f ( ) {\n$g $( ) ;\n}" $, actual@var309 [@expr1073744204 "" ] $) $) { $return ; }
1558: $if $(@expr1073744205 $!@expr1073744206 $assertEquals $(@expr1073744207 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1558 $, "" $, errout@var100 .@expr1073744208 str (@expr1073744209 ) $) $) { $return ; }
1559: }
1560:
1561: void conditionalDefine ( ) {
1562: const char filedata@var310 [@expr1073744210 50 ] =@expr1073744211 "#ifdef A\n#define N 10\n#else\n#define N 20\n#endif\nN"
1563:
|
1566:
1567: ;
1568:
1569:
1570: std ::@expr1073744212 map < std ::@expr2389 string , std ::@expr2389 string > actual@var311 ;
1571: preprocess (@expr1073744215 filedata@var310 , actual@var311 ) ;
1572:
1573:
1574: $if $(@expr1073744216 $!@expr1073744217 $assertEquals $(@expr1073744218 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1574 $, 2 $, actual@var311 .@expr1073744219 size (@expr1073744220 ) $) $) { $return ; }
1575: $if $(@expr1073744221 $!@expr1073744222 $assertEquals $(@expr1073744223 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1575 $, "\n\n\n\n\n$20" $, actual@var311 [@expr1073744224 "" ] $) $) { $return ; }
1576: $if $(@expr1073744225 $!@expr1073744226 $assertEquals $(@expr1073744227 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1576 $, "\n\n\n\n\n$10" $, actual@var311 [@expr1073744228 "A" ] $) $) { $return ; }
1577: $if $(@expr1073744229 $!@expr1073744230 $assertEquals $(@expr1073744231 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1577 $, "" $, errout@var100 .@expr1073744232 str (@expr1073744233 ) $) $) { $return ; }
1578: }
1579:
1580: void macro_parameters ( ) {
1581: errout@var100 .@expr2410 str (@expr1073744235 "" ) ;
1582: const char filedata@var312 [@expr1073744236 74 ] =@expr1073744237 "#define BC(a, b, c, arg...) \\\nAB(a, b, c, ## arg)\n\nvoid f()\n{\n  BC(3);\n}\n"
1583:
|
1587:
1588: ;
1589:
1590:
1591: std ::@expr1073744238 map < std ::@expr2415 string , std ::@expr2415 string > actual@var313 ;
1592: preprocess (@expr1073744241 filedata@var312 , actual@var313 ) ;
1593:
1594:
1595: $if $(@expr1073744242 $!@expr1073744243 $assertEquals $(@expr1073744244 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1595 $, 1 $, actual@var313 .@expr1073744245 size (@expr1073744246 ) $) $) { $return ; }
1596: $if $(@expr1073744247 $!@expr1073744248 $assertEquals $(@expr1073744249 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1596 $, "" $, actual@var313 [@expr1073744250 "" ] $) $) { $return ; }
1597: $if $(@expr1073744251 $!@expr1073744252 $assertEquals $(@expr1073744253 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1597 $, "[file.c:6]: (error) failed to expand 'BC', Wrong number of parameters for macro 'BC'.\n" $, errout@var100 .@expr2410 str (@expr1073744255 ) $) $) { $return ; }
1598: }
1599:
1600: void newline_in_macro ( ) {
1601: const char filedata@var314 [@expr1073744256 58 ] =@expr1073744257 "#define ABC(str) printf( str )\nvoid f()\n{\n  ABC(\"\\n\");\n}\n"
1602:
1603:
1604:
1605: ;
1606:
1607:
1608: std ::@expr1073744258 map < std ::@expr2435 string , std ::@expr2435 string > actual@var315 ;
1609: preprocess (@expr1073744261 filedata@var314 , actual@var315 ) ;
1610:
1611:
1612: $if $(@expr1073744262 $!@expr1073744263 $assertEquals $(@expr1073744264 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1612 $, 1 $, actual@var315 .@expr1073744265 size (@expr1073744266 ) $) $) { $return ; }
1613: $if $(@expr1073744267 $!@expr1073744268 $assertEquals $(@expr1073744269 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1613 $, "\nvoid f ( )\n{\n$printf $( \"\\n\" $) ;\n}" $, actual@var315 [@expr1073744270 "" ] $) $) { $return ; }
1614: $if $(@expr1073744271 $!@expr1073744272 $assertEquals $(@expr1073744273 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1614 $, "" $, errout@var100 .@expr1073744274 str (@expr1073744275 ) $) $) { $return ; }
1615: }
1616:
1617: void ifdef_ifdefined ( ) {
1618: const char filedata@var316 [@expr1073744276 47 ] =@expr1073744277 "#ifdef ABC\nA\n#endif\t\n#if defined ABC\nA\n#endif\n"
1619:
|
1622:
1623: ;
1624:
1625:
1626: std ::@expr1073744278 map < std ::@expr2455 string , std ::@expr2455 string > actual@var317 ;
1627: preprocess (@expr1073744281 filedata@var316 , actual@var317 ) ;
1628:
1629:
1630: $if $(@expr1073744282 $!@expr1073744283 $assertEquals $(@expr1073744284 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1630 $, "" $, actual@var317 [@expr1073744285 "" ] $) $) { $return ; }
1631: $if $(@expr1073744286 $!@expr1073744287 $assertEquals $(@expr1073744288 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1631 $, "\nA\n\n\nA" $, actual@var317 [@expr1073744289 "ABC" ] $) $) { $return ; }
1632: $if $(@expr1073744290 $!@expr1073744291 $assertEquals $(@expr1073744292 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1632 $, 2 $, actual@var317 .@expr1073744293 size (@expr1073744294 ) $) $) { $return ; }
1633: }
1634:
1635: void define_if1 ( ) {
1636: {
1637: const char filedata@var318 [@expr1073744295 29 ] =@expr1073744296 "#define A 0\n#if A\nFOO\n#endif"
1638:
1639:
1640: ;
1641: $if $(@expr1073744297 $!@expr1073744298 $assertEquals $(@expr1073744299 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1641 $, "" $, $(@expr1073744300 preprocessor0@var113 .@expr2477 getcode (@expr1073744302 filedata@var318 , "" , "" ) $) $) $) { $return ; }
1642: }
1643: {
1644: const char filedata@var319 [@expr1073744303 32 ] =@expr1073744304 "#define A 1\n#if A==1\nFOO\n#endif"
1645:
1646:
1647: ;
1648: $if $(@expr1073744305 $!@expr1073744306 $assertEquals $(@expr1073744307 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1648 $, "\n\nFOO" $, $(@expr1073744308 preprocessor0@var113 .@expr2477 getcode (@expr1073744310 filedata@var319 , "" , "" ) $) $) $) { $return ; }
1649: }
1650: }
1651:
1652: void define_if2 ( ) {
1653: const char filedata@var320 [@expr1073744311 57 ] =@expr1073744312 "#define A 22\n#define B A\n#if (B==A) || (B==C)\nFOO\n#endif"
1654:
1655:
1656:
1657: ;
1658: $if $(@expr1073744313 $!@expr1073744314 $assertEquals $(@expr1073744315 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1658 $, "\n\n\nFOO" $, $(@expr1073744316 preprocessor0@var113 .@expr1073744317 getcode (@expr1073744318 filedata@var320 , "" , "" ) $) $) $) { $return ; }
1659: }
1660:
1661: void define_if3 ( ) {
1662: const char filedata@var321 [@expr1073744319 34 ] =@expr1073744320 "#define A 0\n#if (A==0)\nFOO\n#endif"
1663:
1664:
1665: ;
1666: $if $(@expr1073744321 $!@expr1073744322 $assertEquals $(@expr1073744323 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1666 $, "\n\nFOO" $, $(@expr1073744324 preprocessor0@var113 .@expr1073744325 getcode (@expr1073744326 filedata@var321 , "" , "" ) $) $) $) { $return ; }
1667: }
1668:
1669: void define_if4 ( ) {
1670: const char filedata@var322 [@expr1073744327 37 ] =@expr1073744328 "#define X +123\n#if X==123\nFOO\n#endif"
1671:
1672:
1673: ;
1674: $if $(@expr1073744329 $!@expr1073744330 $assertEquals $(@expr1073744331 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1674 $, "\n\nFOO" $, $(@expr1073744332 preprocessor0@var113 .@expr1073744333 getcode (@expr1073744334 filedata@var322 , "" , "" ) $) $) $) { $return ; }
1675: }
1676:
1677: void define_if5 ( ) {
1678: {
1679: const char filedata@var323 [@expr1073744335 65 ] =@expr1073744336 "#define A 0x0010\n#define B (A & 0x00f0)\n#if B==0x0010\nFOO\n#endif"
1680:
1681:
1682:
1683: ;
1684: $if $(@expr1073744337 $!@expr1073744338 $assertEquals $(@expr1073744339 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1684 $, "\n\n\nFOO" $, $(@expr1073744340 preprocessor0@var113 .@expr2517 getcode (@expr1073744342 filedata@var323 , "" , "" ) $) $) $) { $return ; }
1685: }
1686: {
1687: const char filedata@var324 [@expr1073744343 75 ] =@expr1073744344 "#define A 0x00f0\n#define B (16)\n#define C (B & A)\n#if C==0x0010\nFOO\n#endif"
1688:
|
1691:
1692: ;
1693: $if $(@expr1073744345 $!@expr1073744346 $assertEquals $(@expr1073744347 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1693 $, "\n\n\n\nFOO" $, $(@expr1073744348 preprocessor0@var113 .@expr2517 getcode (@expr1073744350 filedata@var324 , "" , "" ) $) $) $) { $return ; }
1694: }
1695: {
1696: const char filedata@var325 [@expr1073744351 36 ] =@expr1073744352 "#define A (1+A)\n#if A==1\nFOO\n#endif"
1697:
1698:
1699: ;
1700: $if $(@expr1073744353 $!@expr1073744354 $assertEquals $(@expr1073744355 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1700 $, "\n\nFOO" $, $(@expr1073744356 preprocessor0@var113 .@expr2517 getcode (@expr1073744358 filedata@var325 , "" , "" ) $) $) $) { $return ; }
1701: }
1702: }
1703:
1704: void define_if6 ( ) {
1705: const char filedata@var326 [@expr1073744360 81 ] =@expr1073744361 "#ifdef A\n#define B (A?1:-1)\n#endif\n\n#if B < 0\n123\n#endif\n\n#if B >= 0\n456\n#endif\n"
1706:
|
1714:
1715: ;
1716: const std ::@expr2538 string actualA0@var327 =@expr1073744363 preprocessor0@var113 .@expr2540 getcode (@expr1073744365 filedata@var326 , "A=0" , "test.c" ) ;
1717: $if $(@expr1073744366 $!@expr1073744367 $assertEquals $(@expr1073744368 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1717 $, true $, actualA0@var327 .@expr2545 find (@expr1073744370 "123" ) !=@expr1073744371 std ::@expr2548 string ::@expr2549 npos@expr2535 $) $) { $return ; }
1718: $if $(@expr1073744374 $!@expr1073744375 $assertEquals $(@expr1073744376 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1718 $, false $, actualA0@var327 .@expr2545 find (@expr1073744378 "456" ) !=@expr1073744379 std ::@expr2548 string ::@expr2549 npos@expr2535 $) $) { $return ; }
1719: const std ::@expr2538 string actualA1@var328 =@expr1073744383 preprocessor0@var113 .@expr2540 getcode (@expr1073744385 filedata@var326 , "A=1" , "test.c" ) ;
1720: $if $(@expr1073744386 $!@expr1073744387 $assertEquals $(@expr1073744388 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1720 $, false $, actualA1@var328 .@expr2565 find (@expr1073744390 "123" ) !=@expr1073744391 std ::@expr2548 string ::@expr2549 npos@expr2535 $) $) { $return ; }
1721: $if $(@expr1073744394 $!@expr1073744395 $assertEquals $(@expr1073744396 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1721 $, true $, actualA1@var328 .@expr2565 find (@expr1073744398 "456" ) !=@expr1073744399 std ::@expr2548 string ::@expr2549 npos@expr2535 $) $) { $return ; }
1722: }
1723:
1724: void define_ifdef ( ) {
1725: {
1726: const char filedata@var329 [@expr1073744402 42 ] =@expr1073744403 "#define ABC\n#ifndef ABC\nA\n#else\nB\n#endif\n"
1727:
|
1730:
1731: ;
1732:
1733:
1734: std ::@expr1073744404 map < std ::@expr2581 string , std ::@expr2581 string > actual@var330 ;
1735: preprocess (@expr1073744407 filedata@var329 , actual@var330 ) ;
1736:
1737:
1738: $if $(@expr1073744408 $!@expr1073744409 $assertEquals $(@expr1073744410 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1738 $, 1 $, (@expr1073744411 int ) actual@var330 .@expr1073744412 size (@expr1073744413 ) $) $) { $return ; }
1739: $if $(@expr1073744414 $!@expr1073744415 $assertEquals $(@expr1073744416 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1739 $, "\n\n\n\nB" $, actual@var330 [@expr1073744417 "" ] $) $) { $return ; }
1740: }
1741:
1742: {
1743: const char filedata@var331 [@expr1073744418 31 ] =@expr1073744419 "#define A 1\n#ifdef A\nA\n#endif\n"
1744:
1745:
1746: ;
1747:
1748:
1749: std ::@expr1073744420 map < std ::@expr2581 string , std ::@expr2581 string > actual@var332 ;
1750: preprocess (@expr1073744423 filedata@var331 , actual@var332 ) ;
1751:
1752:
1753: $if $(@expr1073744424 $!@expr1073744425 $assertEquals $(@expr1073744426 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1753 $, 1 $, (@expr1073744427 int ) actual@var332 .@expr1073744428 size (@expr1073744429 ) $) $) { $return ; }
1754: $if $(@expr1073744430 $!@expr1073744431 $assertEquals $(@expr1073744432 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1754 $, "\n\n$1" $, actual@var332 [@expr1073744433 "" ] $) $) { $return ; }
1755: }
1756:
1757: {
1758: const char filedata@var333 [@expr1073744434 31 ] =@expr1073744435 "#define A 1\n#if A==1\nA\n#endif\n"
1759:
1760:
1761: ;
1762:
1763:
1764: std ::@expr1073744436 map < std ::@expr2581 string , std ::@expr2581 string > actual@var334 ;
1765: preprocess (@expr1073744439 filedata@var333 , actual@var334 ) ;
1766:
1767:
1768: $if $(@expr1073744440 $!@expr1073744441 $assertEquals $(@expr1073744442 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1768 $, 1 $, (@expr1073744443 int ) actual@var334 .@expr1073744444 size (@expr1073744445 ) $) $) { $return ; }
1769: $if $(@expr1073744446 $!@expr1073744447 $assertEquals $(@expr1073744448 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1769 $, "\n\n$1" $, actual@var334 [@expr1073744449 "" ] $) $) { $return ; }
1770: }
1771:
1772: {
1773: const char filedata@var335 [@expr1073744450 30 ] =@expr1073744451 "#define A 1\n#if A>0\nA\n#endif\n"
1774:
1775:
1776: ;
1777:
1778:
1779: std ::@expr1073744452 map < std ::@expr2581 string , std ::@expr2581 string > actual@var336 ;
1780: preprocess (@expr1073744455 filedata@var335 , actual@var336 ) ;
1781:
1782:
1783: $if $(@expr1073744456 $!@expr1073744457 $assertEquals $(@expr1073744458 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1783 $, 1 $, (@expr1073744459 int ) actual@var336 .@expr1073744460 size (@expr1073744461 ) $) $) { $return ; }
1784: $if $(@expr1073744462 $!@expr1073744463 $assertEquals $(@expr1073744464 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1784 $, "\n\n$1" $, actual@var336 [@expr1073744465 "" ] $) $) { $return ; }
1785: }
1786:
1787: {
1788: const char filedata@var337 [@expr1073744466 37 ] =@expr1073744467 "#define A 1\n#if 0\n#undef A\n#endif\nA\n"
1789:
1790:
1791:
1792: ;
1793:
1794:
1795: std ::@expr1073744468 map < std ::@expr2581 string , std ::@expr2581 string > actual@var338 ;
1796: preprocess (@expr1073744471 filedata@var337 , actual@var338 ) ;
1797:
1798:
1799: $if $(@expr1073744472 $!@expr1073744473 $assertEquals $(@expr1073744474 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1799 $, 1 $, (@expr1073744475 int ) actual@var338 .@expr1073744476 size (@expr1073744477 ) $) $) { $return ; }
1800: $if $(@expr1073744478 $!@expr1073744479 $assertEquals $(@expr1073744480 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1800 $, "\n\n\n\n$1" $, actual@var338 [@expr1073744481 "" ] $) $) { $return ; }
1801: }
1802: }
1803:
1804: void define_ifndef1 ( ) {
1805: const char filedata@var339 [@expr1073744482 37 ] =@expr1073744483 "#define A(x) (x)\n#ifndef A\n;\n#endif\n"
1806:
1807:
1808: ;
1809:
1810:
1811: std ::@expr1073744484 map < std ::@expr2661 string , std ::@expr2661 string > actual@var340 ;
1812: preprocess (@expr1073744487 filedata@var339 , actual@var340 ) ;
1813:
1814:
1815: $if $(@expr1073744488 $!@expr1073744489 $assertEquals $(@expr1073744490 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1815 $, 1U $, actual@var340 .@expr1073744491 size (@expr1073744492 ) $) $) { $return ; }
1816: $if $(@expr1073744493 $!@expr1073744494 $assertEquals $(@expr1073744495 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1816 $, "" $, actual@var340 [@expr1073744496 "" ] $) $) { $return ; }
1817: }
1818:
1819: void define_ifndef2 ( ) {
1820: const char filedata@var341 [@expr1073744497 69 ] =@expr1073744498 "#ifdef A\n#define B char\n#endif\n#ifndef B\n#define B int\n#endif\nB me;\n"
1821:
|
1825:
1826: ;
1827:
1828:
1829: $if $(@expr1073744499 $!@expr1073744500 $assertEquals $(@expr1073744501 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1829 $, "\n\n\n\n\n\n$int me ;" $, $(@expr1073744502 preprocessor0@var113 .@expr2679 getcode (@expr1073744504 filedata@var341 , "" , "a.cpp" ) $) $) $) { $return ; }
1830: $if $(@expr1073744505 $!@expr1073744506 $assertEquals $(@expr1073744507 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1830 $, "\n\n\n\n\n\n$char me ;" $, $(@expr1073744508 preprocessor0@var113 .@expr2679 getcode (@expr1073744510 filedata@var341 , "A" , "a.cpp" ) $) $) $) { $return ; }
1831: }
1832:
1833: void ifndef_define ( ) {
1834: const char filedata@var342 [@expr1073744511 40 ] =@expr1073744512 "#ifndef A\n#define A(x) x\n#endif\nA(123);"
1835:
1836:
1837: ;
1838:
1839:
1840: std ::@expr1073744513 map < std ::@expr2690 string , std ::@expr2690 string > actual@var343 ;
1841: preprocess (@expr1073744516 filedata@var342 , actual@var343 ) ;
1842:
1843: $if $(@expr1073744517 $!@expr1073744518 $assertEquals $(@expr1073744519 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1843 $, 1U $, actual@var343 .@expr1073744520 size (@expr1073744521 ) $) $) { $return ; }
1844: $if $(@expr1073744522 $!@expr1073744523 $assertEquals $(@expr1073744524 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1844 $, "\n\n\n123 ;" $, actual@var343 [@expr1073744525 "" ] $) $) { $return ; }
1845: }
1846:
1847: void undef_ifdef ( ) {
1848: const char filedata@var344 [@expr1073744526 30 ] =@expr1073744527 "#undef A\n#ifdef A\n123\n#endif\n"
1849:
1850:
1851: ;
1852:
1853:
1854: $if $(@expr1073744528 $!@expr1073744529 $assertEquals $(@expr1073744530 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1854 $, "" $, $(@expr1073744531 preprocessor0@var113 .@expr2708 getcode (@expr1073744533 filedata@var344 , "" , "a.cpp" ) $) $) $) { $return ; }
1855: $if $(@expr1073744534 $!@expr1073744535 $assertEquals $(@expr1073744536 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1855 $, "" $, $(@expr1073744537 preprocessor0@var113 .@expr2708 getcode (@expr1073744539 filedata@var344 , "A" , "a.cpp" ) $) $) $) { $return ; }
1856: }
1857:
1858: void redundant_config ( ) {
1859: const char filedata@var345 [@expr1073744540 129 ] =@expr1073744541 "int main() {\n#ifdef FOO\n#ifdef BAR\n    std::cout << 1;\n#endif\n#endif\n\n#ifdef BAR\n#ifdef FOO\n    std::cout << 2;\n#endif\n#endif\n}\n"
1860:
|
1870:
1871: ;
1872:
1873:
1874:
1875: std ::@expr1073744542 map < std ::@expr2719 string , std ::@expr2719 string > actual@var346 ;
1876: preprocess (@expr1073744545 filedata@var345 , actual@var346 ) ;
1877:
1878:
1879: $if $(@expr1073744546 $!@expr1073744547 $assertEquals $(@expr1073744548 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1879 $, 4 $, (@expr1073744549 int ) actual@var346 .@expr1073744550 size (@expr1073744551 ) $) $) { $return ; }
1880: $if $(@expr1073744552 $!@expr1073744553 $assert_ $(@expr1073744554 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1880 $, actual@var346 .@expr2731 find (@expr1073744556 "" ) !=@expr1073744557 actual@var346 .@expr2734 end (@expr2735 ) $) $) { $return ; }
1881: $if $(@expr1073744560 $!@expr1073744561 $assert_ $(@expr1073744562 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1881 $, actual@var346 .@expr2731 find (@expr1073744564 "BAR" ) !=@expr1073744565 actual@var346 .@expr2734 end (@expr2735 ) $) $) { $return ; }
1882: $if $(@expr1073744568 $!@expr1073744569 $assert_ $(@expr1073744570 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1882 $, actual@var346 .@expr2731 find (@expr1073744572 "FOO" ) !=@expr1073744573 actual@var346 .@expr2734 end (@expr2735 ) $) $) { $return ; }
1883: $if $(@expr1073744576 $!@expr1073744577 $assert_ $(@expr1073744578 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1883 $, actual@var346 .@expr2731 find (@expr1073744580 "BAR;FOO" ) !=@expr1073744581 actual@var346 .@expr2734 end (@expr2735 ) $) $) { $return ; }
1884: }
1885:
1886:
1887: void endfile ( ) {
1888: const char filedata@var347 [@expr1073744584 69 ] =@expr1073744585 "char a[] = \"#endfile\";\nchar b[] = \"#endfile\";\n#include \"notfound.h\"\n"
1889:
1890: ;
1891:
1892:
1893: std ::@expr1073744586 map < std ::@expr2763 string , std ::@expr2763 string > actual@var348 ;
1894: preprocess (@expr1073744589 filedata@var347 , actual@var348 ) ;
1895:
1896:
1897: $if $(@expr1073744590 $!@expr1073744591 $assertEquals $(@expr1073744592 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1897 $, "char a [ ] = \"#endfile\" ;\nchar b [ ] = \"#endfile\" ;" $, actual@var348 [@expr1073744593 "" ] $) $) { $return ; }
1898: $if $(@expr1073744594 $!@expr1073744595 $assertEquals $(@expr1073744596 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1898 $, 1 $, (@expr1073744597 int ) actual@var348 .@expr1073744598 size (@expr1073744599 ) $) $) { $return ; }
1899: }
1900:
1901: void dup_defines ( ) {
1902: const char filedata@var349 [@expr1073744600 73 ] =@expr1073744601 "#ifdef A\n#define B\n#if defined(B) && defined(A)\na\n#else\nb\n#endif\n#endif\n"
1903:
|
1908:
1909: ;
1910:
1911:
1912: std ::@expr1073744602 map < std ::@expr2779 string , std ::@expr2779 string > actual@var350 ;
1913: preprocess (@expr1073744605 filedata@var349 , actual@var350 ) ;
1914:
1915:
1916:
1917: $if $(@expr1073744606 $!@expr1073744607 $assertEquals $(@expr1073744608 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1917 $, 2U $, actual@var350 .@expr1073744609 size (@expr1073744610 ) $) $) { $return ; }
1918:
1919: $assertEquals $(@expr1073744611 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1919 $, true $, actual@var350 .@expr2788 find (@expr1073744613 "A" ) !=@expr1073744614 actual@var350 .@expr2791 end (@expr2792 ) $, "A is expected to be checked but it was not checked" $) ;
1920:
1921: $assertEquals $(@expr1073744617 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1921 $, true $, actual@var350 .@expr2788 find (@expr1073744619 "A;A;B" ) ==@expr1073744620 actual@var350 .@expr2791 end (@expr2792 ) $, "A;A;B is expected to NOT be checked but it was checked" $) ;
1922: }
1923:
1924: void invalid_define_1 ( ) {
1925: std ::@expr1073744623 map < std ::@expr2800 string , std ::@expr2800 string > actual@var351 ;
1926: preprocess (@expr1073744626 "#define =\n" , actual@var351 ) ;
1927: }
1928:
1929: void invalid_define_2 ( ) {
1930: std ::@expr1073744627 map < std ::@expr2804 string , std ::@expr2804 string > actual@var352 ;
1931: preprocess (@expr1073744630 "#define () {(int f(x) }\n" , actual@var352 ) ;
1932: }
1933:
1934: void inline_suppression_for_missing_include ( ) {
1935: Preprocessor ::@expr2808 missingIncludeFlag@expr2807 =@expr1073744633 false ;
1936: Settings settings@var353 ;
1937: settings@var353 .@expr1073744634 inlineSuppressions@var354 =@expr1073744635 true ;
1938: settings@var353 .@expr1073744636 severity@var355 .@expr1073744637 fill (@expr1073744638 ) ;
1939: Preprocessor preprocessor@var356 (@expr1073744639 settings@var353 , this@expr1073744640 ) ;
1940:
1941: std ::@expr1073744641 istringstream src@var357 (@expr1073744642 "// cppcheck-suppress missingInclude\n#include \"missing.h\"\nint x;"
1942:
1943: ) ;
1944: std ::@expr1073744643 string processedFile@var358 ;
1945: std ::@expr1073744644 list < std ::@expr2821 string > cfg@var359 ;
1946: std ::@expr1073744646 list < std ::@expr2821 string > paths@var360 ;
1947:
1948:
1949: errout@var100 .@expr2824 str (@expr1073744649 "" ) ;
1950: preprocessor@var356 .@expr1073744650 preprocess (@expr1073744651 src@var357 , processedFile@var358 , cfg@var359 , "test.c" , paths@var360 ) ;
1951: $if $(@expr1073744652 $!@expr1073744653 $assertEquals $(@expr1073744654 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1951 $, "" $, errout@var100 .@expr2824 str (@expr1073744656 ) $) $) { $return ; }
1952: $if $(@expr1073744657 $!@expr1073744658 $assertEquals $(@expr1073744659 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1952 $, false $, Preprocessor ::@expr2808 missingIncludeFlag@expr2807 $) $) { $return ; }
1953: }
1954:
1955: void predefine1 ( ) {
1956: const std ::@expr1073744661 string src@var361 (@expr1073744662 "#if defined X || Y\nFred & Wilma\n#endif\n"
1957:
1958: ) ;
1959: std ::@expr1073744663 string actual@var362 ; actual@var362 =@expr1073744664 preprocessor0@var113 .@expr1073744665 getcode (@expr1073744666 src@var361 , "X=1" , "test.c" ) ;
1960:
1961: $if $(@expr1073744667 $!@expr1073744668 $assertEquals $(@expr1073744669 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1961 $, "\nFred & Wilma" $, actual@var362 $) $) { $return ; }
1962: }
1963:
1964: void predefine2 ( ) {
1965: const std ::@expr1073744670 string src@var363 (@expr1073744671 "#if defined(X) && Y\nFred & Wilma\n#endif\n"
1966:
1967: ) ;
1968: {
1969: std ::@expr1073744672 string actual@var364 ; actual@var364 =@expr1073744673 preprocessor0@var113 .@expr2850 getcode (@expr1073744675 src@var363 , "X=1" , "test.c" ) ;
1970: $if $(@expr1073744676 $!@expr1073744677 $assertEquals $(@expr1073744678 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1970 $, "" $, actual@var364 $) $) { $return ; }
1971: }
1972:
1973: {
1974: std ::@expr1073744679 string actual@var365 ; actual@var365 =@expr1073744680 preprocessor0@var113 .@expr2850 getcode (@expr1073744682 src@var363 , "X=1;Y=2" , "test.c" ) ;
1975: $if $(@expr1073744683 $!@expr1073744684 $assertEquals $(@expr1073744685 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1975 $, "\nFred & Wilma" $, actual@var365 $) $) { $return ; }
1976: }
1977: }
1978:
1979: void predefine3 ( ) {
1980:
1981: const char code@var366 [@expr1073744686 58 ] =@expr1073744687 "#define X 1\n#define Y X\n#if (X == Y)\nFred & Wilma\n#endif\n"
1982:
1983:
1984:
1985: ;
1986: const std ::@expr1073744688 string actual@var367 =@expr1073744689 preprocessor0@var113 .@expr1073744690 getcode (@expr1073744691 code@var366 , "TEST" , "test.c" ) ;
1987: $if $(@expr1073744692 $!@expr1073744693 $assertEquals $(@expr1073744694 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1987 $, "\n\n\nFred & Wilma" $, actual@var367 $) $) { $return ; }
1988: }
1989:
1990: void predefine4 ( ) {
1991:
1992: const char code@var368 [@expr1073744695 14 ] =@expr1073744696 "char buf[X];\n" ;
1993: const std ::@expr1073744697 string actual@var369 =@expr1073744698 preprocessor0@var113 .@expr1073744699 getcode (@expr1073744700 code@var368 , "X=123" , "test.c" ) ;
1994: $if $(@expr1073744701 $!@expr1073744702 $assertEquals $(@expr1073744703 "cppcheck-2.8/test/testpreprocessor.cpp" $, 1994 $, "char buf [ $123 ] ;" $, actual@var369 $) $) { $return ; }
1995: }
1996:
1997: void predefine5 ( ) {
1998:
1999: const char code@var370 [@expr1073744704 30 ] =@expr1073744705 "#ifdef __cplusplus\n123\n#endif" ;
2000: $if $(@expr1073744706 $!@expr1073744707 $assertEquals $(@expr1073744708 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2000 $, "" $, $(@expr1073744709 preprocessor0@var113 .@expr2886 getcode (@expr1073744711 code@var370 , "" , "test.c" ) $) $) $) { $return ; }
2001: $if $(@expr1073744712 $!@expr1073744713 $assertEquals $(@expr1073744714 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2001 $, "\n123" $, $(@expr1073744715 preprocessor0@var113 .@expr2886 getcode (@expr1073744717 code@var370 , "" , "test.cpp" ) $) $) $) { $return ; }
2002: }
2003:
2004: void predefine6 ( ) {
2005: const char code@var371 [@expr1073744718 35 ] =@expr1073744719 "#ifdef __STDC_VERSION__\n123\n#endif" ;
2006: $if $(@expr1073744720 $!@expr1073744721 $assertEquals $(@expr1073744722 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2006 $, "\n123" $, $(@expr1073744723 preprocessor0@var113 .@expr2900 getcode (@expr1073744725 code@var371 , "" , "test.c" ) $) $) $) { $return ; }
2007: $if $(@expr1073744726 $!@expr1073744727 $assertEquals $(@expr1073744728 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2007 $, "" $, $(@expr1073744729 preprocessor0@var113 .@expr2900 getcode (@expr1073744731 code@var371 , "" , "test.cpp" ) $) $) $) { $return ; }
2008: }
2009:
2010: void invalidElIf ( ) {
2011:
2012: const char code@var372 [@expr1073744732 11 ] =@expr1073744733 "#elif (){\n" ;
2013: const std ::@expr1073744734 string actual@var373 =@expr1073744735 preprocessor0@var113 .@expr1073744736 getcode (@expr1073744737 code@var372 , "TEST" , "test.c" ) ;
2014: $if $(@expr1073744738 $!@expr1073744739 $assertEquals $(@expr1073744740 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2014 $, "" $, actual@var373 $) $) { $return ; }
2015: }
2016:
2017: void getConfigs1 ( ) {
2018: const char filedata@var374 [@expr1073744741 55 ] =@expr1073744742 "#ifdef  WIN32 \n    abcdef\n#else  \n    qwerty\n#endif  \n"
2019:
2020:
2021:
2022: ;
2023:
2024: $if $(@expr1073744743 $!@expr1073744744 $assertEquals $(@expr1073744745 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2024 $, "\nWIN32\n" $, getConfigsStr (@expr1073744746 filedata@var374 ) $) $) { $return ; }
2025: }
2026:
2027: void getConfigs2 ( ) {
2028: const char filedata@var375 [@expr1073744747 87 ] =@expr1073744748 "# ifndef WIN32\n    \" # ifdef WIN32\" // a comment\n   #   else  \n    qwerty\n  # endif  \n"
2029:
2030:
2031:
2032: ;
2033: $if $(@expr1073744749 $!@expr1073744750 $assertEquals $(@expr1073744751 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2033 $, "\nWIN32\n" $, getConfigsStr (@expr1073744752 filedata@var375 ) $) $) { $return ; }
2034: }
2035:
2036: void getConfigs3 ( ) {
2037: const char filedata@var376 [@expr1073744753 43 ] =@expr1073744754 "#ifdef ABC\na\n#ifdef DEF\nb\n#endif\nc\n#endif\n"
2038:
|
2042:
2043: ;
2044:
2045: $if $(@expr1073744755 $!@expr1073744756 $assertEquals $(@expr1073744757 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2045 $, "\nABC\nABC;DEF\n" $, getConfigsStr (@expr1073744758 filedata@var376 ) $) $) { $return ; }
2046: }
2047:
2048: void getConfigs4 ( ) {
2049: const char filedata@var377 [@expr1073744759 42 ] =@expr1073744760 "#ifdef ABC\nA\n#endif\t\n#ifdef ABC\nA\n#endif\n"
2050:
|
2053:
2054: ;
2055: $if $(@expr1073744761 $!@expr1073744762 $assertEquals $(@expr1073744763 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2055 $, "\nABC\n" $, getConfigsStr (@expr1073744764 filedata@var377 ) $) $) { $return ; }
2056: }
2057:
2058: void getConfigs5 ( ) {
2059: const char filedata@var378 [@expr1073744765 49 ] =@expr1073744766 "#ifdef ABC\nA\n#else\nB\n#ifdef DEF\nC\n#endif\n#endif\n"
2060:
|
2065:
2066: ;
2067: $if $(@expr1073744767 $!@expr1073744768 $assertEquals $(@expr1073744769 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2067 $, "\nABC\nDEF\n" $, getConfigsStr (@expr1073744770 filedata@var378 ) $) $) { $return ; }
2068: }
2069:
2070: void getConfigs7 ( ) {
2071: const char filedata@var379 [@expr1073744771 41 ] =@expr1073744772 "#ifdef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n"
2072:
|
2075:
2076: ;
2077: $if $(@expr1073744773 $!@expr1073744774 $assertEquals $(@expr1073744775 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2077 $, "\nABC\n" $, getConfigsStr (@expr1073744776 filedata@var379 ) $) $) { $return ; }
2078: }
2079:
2080: void getConfigs7a ( ) {
2081: const char filedata@var380 [@expr1073744777 43 ] =@expr1073744778 "#ifndef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n"
2082:
|
2085:
2086: ;
2087: $if $(@expr1073744779 $!@expr1073744780 $assertEquals $(@expr1073744781 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2087 $, "\n" $, getConfigsStr (@expr1073744782 filedata@var380 ) $) $) { $return ; }
2088: }
2089:
2090: void getConfigs7b ( ) {
2091: const char filedata@var381 [@expr1073744783 42 ] =@expr1073744784 "#ifndef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n"
2092:
|
2095:
2096: ;
2097: $if $(@expr1073744785 $!@expr1073744786 $assertEquals $(@expr1073744787 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2097 $, "\nABC\n" $, getConfigsStr (@expr1073744788 filedata@var381 ) $) $) { $return ; }
2098: }
2099:
2100: void getConfigs7c ( ) {
2101: const char filedata@var382 [@expr1073744789 42 ] =@expr1073744790 "#ifdef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n"
2102:
|
2105:
2106: ;
2107: $if $(@expr1073744791 $!@expr1073744792 $assertEquals $(@expr1073744793 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2107 $, "\nABC\n" $, getConfigsStr (@expr1073744794 filedata@var382 ) $) $) { $return ; }
2108: }
2109:
2110: void getConfigs7d ( ) {
2111: const char filedata@var383 [@expr1073744795 53 ] =@expr1073744796 "#if defined(ABC)\nA\n#if defined(ABC)\nB\n#endif\n#endif\n"
2112:
|
2115:
2116: ;
2117: $if $(@expr1073744797 $!@expr1073744798 $assertEquals $(@expr1073744799 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2117 $, "\nABC\n" $, getConfigsStr (@expr1073744800 filedata@var383 ) $) $) { $return ; }
2118: }
2119:
2120: void getConfigs7e ( ) {
2121: const char filedata@var384 [@expr1073744801 98 ] =@expr1073744802 "#ifdef ABC\n#file \"test.h\"\n#ifndef test_h\n#define test_h\n#ifdef ABC\n#endif\n#endif\n#endfile\n#endif\n"
2122:
|
2128:
2129: ;
2130: $if $(@expr1073744803 $!@expr1073744804 $assertEquals $(@expr1073744805 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2130 $, "\nABC\n" $, getConfigsStr (@expr1073744806 filedata@var384 ) $) $) { $return ; }
2131: }
2132:
2133: void getConfigs8 ( ) {
2134: const char filedata@var385 [@expr1073744807 21 ] =@expr1073744808 "#if A == 1\n1\n#endif\n"
2135:
2136: ;
2137: $if $(@expr1073744809 $!@expr1073744810 $assertEquals $(@expr1073744811 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2137 $, "\nA=1\n" $, getConfigsStr (@expr1073744812 filedata@var385 ) $) $) { $return ; }
2138: }
2139:
2140: void getConfigs10 ( ) {
2141: const char filedata@var386 [@expr1073744813 65 ] =@expr1073744814 "#define foo a.foo\n#define bar foo\n#define baz bar+0\n#if 0\n#endif"
2142:
2143:
2144:
2145: ;
2146: $if $(@expr1073744815 $!@expr1073744816 $assertEquals $(@expr1073744817 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2146 $, "\n" $, getConfigsStr (@expr1073744818 filedata@var386 ) $) $) { $return ; }
2147: }
2148:
2149: void getConfigs11 ( ) {
2150: const char filedata@var387 [@expr1073744819 72 ] =@expr1073744820 "#file \"test.h\"\n#if !defined(test_h)\n#define test_h\n123\n#endif\n#endfile\n"
2151:
|
2154:
2155: ;
2156: $if $(@expr1073744821 $!@expr1073744822 $assertEquals $(@expr1073744823 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2156 $, "\n" $, getConfigsStr (@expr1073744824 filedata@var387 ) $) $) { $return ; }
2157: }
2158:
2159: void getConfigsError ( ) {
2160: const char filedata1@var388 [@expr1073744825 30 ] =@expr1073744826 "#ifndef X\n#error \"!X\"\n#endif\n"
2161:
2162: ;
2163: $if $(@expr1073744827 $!@expr1073744828 $assertEquals $(@expr1073744829 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2163 $, "X\n" $, getConfigsStr (@expr1073744830 filedata1@var388 ) $) $) { $return ; }
2164:
2165: const char filedata2@var389 [@expr1073744831 46 ] =@expr1073744832 "#ifdef X\n#ifndef Y\n#error \"!Y\"\n#endif\n#endif\n"
2166:
2167:
2168:
2169: ;
2170: $if $(@expr1073744833 $!@expr1073744834 $assertEquals $(@expr1073744835 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2170 $, "\nX;Y\nY\n" $, getConfigsStr (@expr1073744836 filedata2@var389 ) $) $) { $return ; }
2171: }
2172:
2173: void getConfigsD1 ( ) {
2174: const char filedata@var390 [@expr1073744837 39 ] =@expr1073744838 "#ifdef X\n#else\n#ifdef Y\n#endif\n#endif\n"
2175:
2176:
2177:
2178: ;
2179: $if $(@expr1073744839 $!@expr1073744840 $assertEquals $(@expr1073744841 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2179 $, "\n" $, getConfigsStr (@expr1073744842 filedata@var390 , "-DX" ) $) $) { $return ; }
2180: $if $(@expr1073744843 $!@expr1073744844 $assertEquals $(@expr1073744845 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2180 $, "\nX\nY\n" $, getConfigsStr (@expr1073744846 filedata@var390 ) $) $) { $return ; }
2181: }
2182:
2183: void getConfigsU1 ( ) {
2184: const char filedata@var391 [@expr1073744847 17 ] =@expr1073744848 "#ifdef X\n#endif\n"
2185: ;
2186: $if $(@expr1073744849 $!@expr1073744850 $assertEquals $(@expr1073744851 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2186 $, "\n" $, getConfigsStr (@expr1073744852 filedata@var391 , "-UX" ) $) $) { $return ; }
2187: $if $(@expr1073744853 $!@expr1073744854 $assertEquals $(@expr1073744855 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2187 $, "\nX\n" $, getConfigsStr (@expr1073744856 filedata@var391 ) $) $) { $return ; }
2188: }
2189:
2190: void getConfigsU2 ( ) {
2191: const char filedata@var392 [@expr1073744857 18 ] =@expr1073744858 "#ifndef X\n#endif\n"
2192: ;
2193: $if $(@expr1073744859 $!@expr1073744860 $assertEquals $(@expr1073744861 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2193 $, "\n" $, getConfigsStr (@expr1073744862 filedata@var392 , "-UX" ) $) $) { $return ; }
2194: $if $(@expr1073744863 $!@expr1073744864 $assertEquals $(@expr1073744865 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2194 $, "\n" $, getConfigsStr (@expr1073744866 filedata@var392 ) $) $) { $return ; }
2195: }
2196:
2197: void getConfigsU3 ( ) {
2198: const char filedata@var393 [@expr1073744867 52 ] =@expr1073744868 "#ifndef X\nFred & Wilma\n#else\nBarney & Betty\n#endif\n"
2199:
2200:
2201:
2202: ;
2203: $if $(@expr1073744869 $!@expr1073744870 $assertEquals $(@expr1073744871 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2203 $, "\n" $, getConfigsStr (@expr1073744872 filedata@var393 , "-UX" ) $) $) { $return ; }
2204: $if $(@expr1073744873 $!@expr1073744874 $assertEquals $(@expr1073744875 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2204 $, "\nX\n" $, getConfigsStr (@expr1073744876 filedata@var393 ) $) $) { $return ; }
2205: }
2206:
2207: void getConfigsU4 ( ) {
2208: const char filedata@var394 [@expr1073744877 57 ] =@expr1073744878 "#if defined(X) || defined(Y) || defined(Z)\n#else\n#endif\n"
2209:
2210: ;
2211: $if $(@expr1073744879 $!@expr1073744880 $assertEquals $(@expr1073744881 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2211 $, "\nY;Z\n" $, getConfigsStr (@expr1073744882 filedata@var394 , "-UX" ) $) $) { $return ; }
2212: $if $(@expr1073744883 $!@expr1073744884 $assertEquals $(@expr1073744885 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2212 $, "\nX;Y;Z\n" $, getConfigsStr (@expr1073744886 filedata@var394 ) $) $) { $return ; }
2213: }
2214:
2215: void getConfigsU5 ( ) {
2216: const char filedata@var395 [@expr1073744887 17 ] =@expr1073744888 "#if X==1\n#endif\n"
2217: ;
2218: $if $(@expr1073744889 $!@expr1073744890 $assertEquals $(@expr1073744891 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2218 $, "\n" $, getConfigsStr (@expr1073744892 filedata@var395 , "-UX" ) $) $) { $return ; }
2219: $if $(@expr1073744893 $!@expr1073744894 $assertEquals $(@expr1073744895 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2219 $, "\nX=1\n" $, getConfigsStr (@expr1073744896 filedata@var395 ) $) $) { $return ; }
2220: }
2221:
2222: void getConfigsU6 ( ) {
2223: const char filedata@var396 [@expr1073744897 17 ] =@expr1073744898 "#if X==0\n#endif\n"
2224: ;
2225: $if $(@expr1073744899 $!@expr1073744900 $assertEquals $(@expr1073744901 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2225 $, "\nX=0\n" $, getConfigsStr (@expr1073744902 filedata@var396 , "-UX" ) $) $) { $return ; }
2226: $if $(@expr1073744903 $!@expr1073744904 $assertEquals $(@expr1073744905 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2226 $, "\nX=0\n" $, getConfigsStr (@expr1073744906 filedata@var396 ) $) $) { $return ; }
2227: }
2228:
2229: void getConfigsU7 ( ) {
2230: const char code@var397 [@expr1073744907 24 ] =@expr1073744908 "#ifndef Y\n#else\n#endif\n"
2231:
2232: ;
2233: $if $(@expr1073744909 $!@expr1073744910 $assertEquals $(@expr1073744911 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2233 $, "\nY\n" $, getConfigsStr (@expr1073744912 code@var397 , "-DX" ) $) $) { $return ; }
2234: }
2235:
2236:
2237: void validateCfg1 ( ) {
2238: Preprocessor preprocessor@var398 (@expr1073744914 settings0@var112 , this@expr1073744915 ) ;
2239:
2240: std ::@expr1073744916 vector < std ::@expr3093 string > files@var399 (@expr1073744918 1 , "test.c" ) ;
2241: simplecpp ::@expr1073744919 MacroUsage macroUsage@var400 (@expr1073744920 files@var399 , false ) ;
2242: macroUsage@var400 .@expr3097 useLocation@var401 .@expr1073744922 fileIndex@var402 =@expr1073744923 0 ;
2243: macroUsage@var400 .@expr3097 useLocation@var401 .@expr1073744925 line@var403 =@expr1073744926 1 ;
2244: macroUsage@var400 .@expr1073744927 macroName@var404 =@expr1073744928 "X" ;
2245: std ::@expr1073744929 list < simplecpp ::@expr3093 MacroUsage > macroUsageList@var405 (@expr1073744931 1 , macroUsage@var400 ) ;
2246:
2247: $if $(@expr1073744932 $!@expr1073744933 $assertEquals $(@expr1073744934 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2247 $, true $, $(@expr1073744935 preprocessor@var398 .@expr3112 validateCfg (@expr1073744937 "" , macroUsageList@var405 ) $) $) $) { $return ; }
2248: $if $(@expr1073744938 $!@expr1073744939 $assertEquals $(@expr1073744940 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2248 $, false $, $(@expr1073744941 preprocessor@var398 .@expr3112 validateCfg (@expr3119 "X" , macroUsageList@var405 ) $) $) $) { $return ; }
2249: $if $(@expr1073744944 $!@expr1073744945 $assertEquals $(@expr1073744946 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2249 $, false $, $(@expr1073744947 preprocessor@var398 .@expr3112 validateCfg (@expr1073744949 "A=42;X" , macroUsageList@var405 ) $) $) $) { $return ; }
2250: $if $(@expr1073744950 $!@expr1073744951 $assertEquals $(@expr1073744952 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2250 $, true $, $(@expr1073744953 preprocessor@var398 .@expr3112 validateCfg (@expr1073744955 "X=1" , macroUsageList@var405 ) $) $) $) { $return ; }
2251: $if $(@expr1073744956 $!@expr1073744957 $assertEquals $(@expr1073744958 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2251 $, true $, $(@expr1073744959 preprocessor@var398 .@expr3112 validateCfg (@expr1073744961 "Y" , macroUsageList@var405 ) $) $) $) { $return ; }
2252:
2253: macroUsageList@var405 .@expr1073744962 front (@expr1073744963 ) .@expr1073744964 macroValueKnown@expr1073744913 =@expr1073744965 true ;
2254: $if $(@expr1073744966 $!@expr1073744967 $assertEquals $(@expr1073744968 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2254 $, true $, $(@expr1073744969 preprocessor@var398 .@expr3112 validateCfg (@expr3119 "X" , macroUsageList@var405 ) $) $) $) { $return ; }
2255: }
2256:
2257: void validateCfg2 ( ) {
2258: const char filedata@var406 [@expr1073744972 31 ] =@expr1073744973 "#ifdef ABC\n#endif\nint i = ABC;"
2259:
2260: ;
2261:
2262: std ::@expr1073744974 map < std ::@expr3151 string , std ::@expr3151 string > actual@var407 ;
2263: preprocess (@expr1073744977 filedata@var406 , actual@var407 , "file.cpp" ) ;
2264: $if $(@expr1073744978 $!@expr1073744979 $assertEquals $(@expr1073744980 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2264 $, "[file.cpp:3]: (information) Skipping configuration 'ABC' since the value of 'ABC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.\n" $, errout@var100 .@expr1073744981 str (@expr1073744982 ) $) $) { $return ; }
2265: }
2266:
2267: void if_sizeof ( ) {
2268: static const char *@expr1073744983 code@var408 =@expr1073744984 "#if sizeof(unsigned short) == 2\nFred & Wilma\n#elif sizeof(unsigned short) == 4\nFred & Wilma\n#else\n#endif"
2269:
|
2272:
2273: ;
2274:
2275: std ::@expr1073744985 map < std ::@expr3162 string , std ::@expr3162 string > actual@var409 ;
2276: preprocess (@expr1073744988 code@var408 , actual@var409 ) ;
2277: $if $(@expr1073744989 $!@expr1073744990 $assertEquals $(@expr1073744991 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2277 $, "\nFred & Wilma" $, actual@var409 [@expr1073744992 "" ] $) $) { $return ; }
2278: }
2279:
2280: void invalid_ifs ( ) {
2281: const char filedata@var410 [@expr1073744993 87 ] =@expr1073744994 "#ifdef\n#endif\n#ifdef !\n#endif\n#if defined\n#endif\n#define f(x) x\n#if f(2\n#endif\nint x;\n"
2282:
|
2289:
2290: ;
2291:
2292:
2293: std ::@expr1073744995 map < std ::@expr3172 string , std ::@expr3172 string > actual@var411 ;
2294: preprocess (@expr1073744998 filedata@var410 , actual@var411 ) ;
2295: }
2296:
2297: void garbage ( ) {
2298: const char filedata@var412 [@expr1073744999 68 ] =@expr1073745000 "V\n#define X b   #endif #line 0 \"x\"  ;\n#if ! defined ( Y )    #endif"
2299:
2300: ;
2301:
2302:
2303: std ::@expr1073745001 map < std ::@expr3178 string , std ::@expr3178 string > actual@var413 ;
2304: preprocess (@expr1073745004 filedata@var412 , actual@var413 ) ;
2305: }
2306:
2307: void wrongPathOnErrorDirective ( ) {
2308: errout@var100 .@expr3181 str (@expr1073745006 "" ) ;
2309: Settings settings@var414 ;
2310: settings@var414 .@expr1073745007 userDefines@var415 =@expr1073745008 "foo" ;
2311: Preprocessor preprocessor@var416 (@expr1073745009 settings@var414 , this@expr1073745010 ) ;
2312: const std ::@expr1073745011 string code@var417 (@expr1073745012 "#error hello world!\n" ) ;
2313: preprocessor@var416 .@expr1073745013 getcode (@expr1073745014 code@var417 , "X" , "./././test.c" ) ;
2314: $if $(@expr1073745015 $!@expr1073745016 $assertEquals $(@expr1073745017 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2314 $, "[test.c:1]: (error) #error hello world!\n" $, errout@var100 .@expr3181 str (@expr1073745019 ) $) $) { $return ; }
2315: }
2316:
2317: void testDirectiveIncludeTypes ( ) {
2318: const char filedata@var418 [@expr1073745020 272 ] =@expr1073745021 "#define macro some definition\n#undef macro\n#ifdef macro\n#elif some (complex) condition\n#else\n#endif\n#if some other condition\n#pragma some proprietary content\n#\n#ident some text\n#unknownmacro some unpredictable text\n#warning some warning message\n#error some error message\n"
2319:
|
2329:
2330: ;
2331: const char dumpdata@var419 [@expr1073745022 937 ] =@expr1073745023 "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro some definition\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#undef macro\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#ifdef macro\"/>\n    <directive file=\"test.c\" linenr=\"4\" str=\"#elif some (complex) condition\"/>\n    <directive file=\"test.c\" linenr=\"5\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"6\" str=\"#endif\"/>\n    <directive file=\"test.c\" linenr=\"7\" str=\"#if some other condition\"/>\n    <directive file=\"test.c\" linenr=\"8\" str=\"#pragma some proprietary content\"/>\n    <directive file=\"test.c\" linenr=\"9\" str=\"#\"/>\n    <directive file=\"test.c\" linenr=\"10\" str=\"#ident some text\"/>\n    <directive file=\"test.c\" linenr=\"11\" str=\"#unknownmacro some unpredictable text\"/>\n    <directive file=\"test.c\" linenr=\"12\" str=\"#warning some warning message\"/>\n    <directive file=\"test.c\" linenr=\"13\" str=\"#error some error message\"/>\n  </directivelist>\n"
2332:
|
2345:
2346: ;
2347:
2348: std ::@expr1073745024 ostringstream ostr@var420 ;
2349: Preprocessor preprocessor@var421 (@expr1073745025 settings0@var112 , this@expr1073745026 ) ;
2350: preprocessor@var421 .@expr1073745027 getcode (@expr1073745028 filedata@var418 , "" , "test.c" ) ;
2351: preprocessor@var421 .@expr1073745029 dump (@expr1073745030 ostr@var420 ) ;
2352: $if $(@expr1073745031 $!@expr1073745032 $assertEquals $(@expr1073745033 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2352 $, dumpdata@var419 $, ostr@var420 .@expr1073745034 str (@expr1073745035 ) $) $) { $return ; }
2353: }
2354:
2355: void testDirectiveIncludeLocations ( ) {
2356: const char filedata@var422 [@expr1073745036 144 ] =@expr1073745037 "#define macro1 val\n#file \"inc1.h\"\n#define macro2 val\n#file \"inc2.h\"\n#define macro3 val\n#endfile\n#define macro4 val\n#endfile\n#define macro5 val\n"
2357:
|
2363:
2364: ;
2365: const char dumpdata@var423 [@expr1073745038 525 ] =@expr1073745039 "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro1 val\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#include &quot;inc1.h&quot;\"/>\n    <directive file=\"inc1.h\" linenr=\"1\" str=\"#define macro2 val\"/>\n    <directive file=\"inc1.h\" linenr=\"2\" str=\"#include &quot;inc2.h&quot;\"/>\n    <directive file=\"inc2.h\" linenr=\"1\" str=\"#define macro3 val\"/>\n    <directive file=\"inc1.h\" linenr=\"3\" str=\"#define macro4 val\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#define macro5 val\"/>\n  </directivelist>\n"
2366:
|
2372:
2373: ;
2374:
2375: std ::@expr1073745040 ostringstream ostr@var424 ;
2376: Preprocessor preprocessor@var425 (@expr1073745041 settings0@var112 , this@expr1073745042 ) ;
2377: preprocessor@var425 .@expr1073745043 getcode (@expr1073745044 filedata@var422 , "" , "test.c" ) ;
2378: preprocessor@var425 .@expr1073745045 dump (@expr1073745046 ostr@var424 ) ;
2379: $if $(@expr1073745047 $!@expr1073745048 $assertEquals $(@expr1073745049 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2379 $, dumpdata@var423 $, ostr@var424 .@expr1073745050 str (@expr1073745051 ) $) $) { $return ; }
2380: }
2381:
2382: void testDirectiveIncludeComments ( ) {
2383: const char filedata@var426 [@expr1073745052 118 ] =@expr1073745053 "#ifdef macro2 /* this will be removed */\n#else /* this will be removed too */\n#endif /* this will also be removed */\n"
2384:
2385: ;
2386: const char dumpdata@var427 [@expr1073745054 209 ] =@expr1073745055 "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#ifdef macro2\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#endif\"/>\n  </directivelist>\n"
2387:
2388:
2389:
2390: ;
2391:
2392: std ::@expr1073745056 ostringstream ostr@var428 ;
2393: Preprocessor preprocessor@var429 (@expr1073745057 settings0@var112 , this@expr1073745058 ) ;
2394: preprocessor@var429 .@expr1073745059 getcode (@expr1073745060 filedata@var426 , "" , "test.c" ) ;
2395: preprocessor@var429 .@expr1073745061 dump (@expr1073745062 ostr@var428 ) ;
2396: $if $(@expr1073745063 $!@expr1073745064 $assertEquals $(@expr1073745065 "cppcheck-2.8/test/testpreprocessor.cpp" $, 2396 $, dumpdata@var427 $, ostr@var428 .@expr1073745066 str (@expr1073745067 ) $) $) { $return ; }
2397: }
2398: } ;
2399:
2400: $namespace ${ TestPreprocessor instance_TestPreprocessor@var431 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@182}
  v {!<=-1,!>=2,0@182}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 46
  "TestPreprocessor" always "TestPreprocessor"
Line 47
  this always !0
Line 54
  , always 0
  = always 0
  nullptr always 0
Line 55
  code possible {"#define a\n#ifdef 1\n\"\n#endif\n"@53,"#file \"abc.h\"\n#define a\n\"\n#endfile\n"@54,"#file \"abc.h\"\n#define a\n#endfile\n\"\n"@55,"#define A 1\n#define B \"\nint a = A;\n"@56,"void foo()\n{\n\n\n\nint a = 0;\nprintf(Text\");\n}\n"@57,"#define A(x) a(#x,x)\nA(foo(\"\\\"\"))\n"@63,"#define A(x) #x\n1 A(\nabc\n) 2\n"@64,"#define A(x) g(#x)\nA( abc);\n"@65,"#define A(x) g(#x)\nA(abc);\n"@66,"#define STRINGIFY(x) #x\nSTRINGIFY(abc)\n"@67}
Line 58
  files always size=0
  "file.cpp" always "file.cpp"
  & {lifetime[Address]=(outputList),!0}
Line 61
  filedata always size=0
  & {lifetime[Address]=(outputList),!0}
Line 65
  errorLogger always !0
Line 66
  true always 1
Line 80
  ( always {!<=-1,!>=2}
  "Bug2190219" always "Bug2190219"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "error1" always "error1"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "error2" always "error2"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "error3" always "error3"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "error4" always "error4"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "error5" always "error5"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "error6" always "error6"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "error7" always "error7"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "error8" always "error8"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "setPlatformInfo" always "setPlatformInfo"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "includeguard1" always "includeguard1"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "includeguard2" always "includeguard2"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "if0" always "if0"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "if1" always "if1"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "elif" always "elif"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "if_cond1" always "if_cond1"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "if_cond2" always "if_cond2"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "if_cond3" always "if_cond3"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "if_cond4" always "if_cond4"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "if_cond5" always "if_cond5"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "if_cond6" always "if_cond6"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "if_cond8" always "if_cond8"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "if_cond9" always "if_cond9"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "if_cond10" always "if_cond10"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "if_cond11" always "if_cond11"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "if_cond12" always "if_cond12"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "if_cond13" always "if_cond13"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "if_cond14" always "if_cond14"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "if_or_1" always "if_or_1"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "if_or_2" always "if_or_2"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "if_macro_eq_macro" always "if_macro_eq_macro"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "ticket_3675" always "ticket_3675"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "ticket_3699" always "ticket_3699"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "ticket_4922" always "ticket_4922"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "macro_simple1" always "macro_simple1"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "macro_simple2" always "macro_simple2"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "macro_simple3" always "macro_simple3"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "macro_simple4" always "macro_simple4"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "macro_simple5" always "macro_simple5"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "macro_simple6" always "macro_simple6"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "macro_simple7" always "macro_simple7"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "macro_simple8" always "macro_simple8"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "macro_simple9" always "macro_simple9"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "macro_simple10" always "macro_simple10"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "macro_simple11" always "macro_simple11"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "macro_simple12" always "macro_simple12"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "macro_simple13" always "macro_simple13"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "macro_simple14" always "macro_simple14"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "macro_simple15" always "macro_simple15"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "macro_simple16" always "macro_simple16"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "macro_simple17" always "macro_simple17"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "macro_simple18" always "macro_simple18"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "macroInMacro1" always "macroInMacro1"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "macroInMacro2" always "macroInMacro2"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "macro_linenumbers" always "macro_linenumbers"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "macro_nopar" always "macro_nopar"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "macro_incdec" always "macro_incdec"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "macro_switchCase" always "macro_switchCase"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "macro_NULL" always "macro_NULL"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "string1" always "string1"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "string2" always "string2"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "string3" always "string3"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "preprocessor_undef" always "preprocessor_undef"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "defdef" always "defdef"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "preprocessor_doublesharp" always "preprocessor_doublesharp"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "preprocessor_include_in_str" always "preprocessor_include_in_str"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "va_args_1" always "va_args_1"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "va_args_3" always "va_args_3"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "va_args_4" always "va_args_4"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "va_args_5" always "va_args_5"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "multi_character_character" always "multi_character_character"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "stringify" always "stringify"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "stringify2" always "stringify2"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "stringify3" always "stringify3"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "stringify4" always "stringify4"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "stringify5" always "stringify5"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "ifdefwithfile" always "ifdefwithfile"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "pragma" always "pragma"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "pragma_asm_1" always "pragma_asm_1"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "pragma_asm_2" always "pragma_asm_2"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "endifsemicolon" always "endifsemicolon"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "missing_doublequote" always "missing_doublequote"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "handle_error" always "handle_error"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "dup_defines" always "dup_defines"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "define_part_of_func" always "define_part_of_func"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "conditionalDefine" always "conditionalDefine"
  false always 0
  false always 0
Line 180
  ( always {!<=-1,!>=2}
  "macro_parameters" always "macro_parameters"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "newline_in_macro" always "newline_in_macro"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "ifdef_ifdefined" always "ifdef_ifdefined"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "define_if1" always "define_if1"
  false always 0
  false always 0
Line 186
  ( always {!<=-1,!>=2}
  "define_if2" always "define_if2"
  false always 0
  false always 0
Line 187
  ( always {!<=-1,!>=2}
  "define_if3" always "define_if3"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "define_if4" always "define_if4"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "define_if5" always "define_if5"
  false always 0
  false always 0
Line 190
  ( always {!<=-1,!>=2}
  "define_if6" always "define_if6"
  false always 0
  false always 0
Line 191
  ( always {!<=-1,!>=2}
  "define_ifdef" always "define_ifdef"
  false always 0
  false always 0
Line 192
  ( always {!<=-1,!>=2}
  "define_ifndef1" always "define_ifndef1"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "define_ifndef2" always "define_ifndef2"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "ifndef_define" always "ifndef_define"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "undef_ifdef" always "undef_ifdef"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "endfile" always "endfile"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "redundant_config" always "redundant_config"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "invalid_define_1" always "invalid_define_1"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "invalid_define_2" always "invalid_define_2"
  false always 0
  false always 0
Line 204
  ( always {!<=-1,!>=2}
  "inline_suppression_for_missing_include" always "inline_suppression_for_missing_include"
  false always 0
  false always 0
Line 207
  ( always {!<=-1,!>=2}
  "predefine1" always "predefine1"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "predefine2" always "predefine2"
  false always 0
  false always 0
Line 209
  ( always {!<=-1,!>=2}
  "predefine3" always "predefine3"
  false always 0
  false always 0
Line 210
  ( always {!<=-1,!>=2}
  "predefine4" always "predefine4"
  false always 0
  false always 0
Line 211
  ( always {!<=-1,!>=2}
  "predefine5" always "predefine5"
  false always 0
  false always 0
Line 212
  ( always {!<=-1,!>=2}
  "predefine6" always "predefine6"
  false always 0
  false always 0
Line 214
  ( always {!<=-1,!>=2}
  "invalidElIf" always "invalidElIf"
  false always 0
  false always 0
Line 217
  ( always {!<=-1,!>=2}
  "getConfigs1" always "getConfigs1"
  false always 0
  false always 0
Line 218
  ( always {!<=-1,!>=2}
  "getConfigs2" always "getConfigs2"
  false always 0
  false always 0
Line 219
  ( always {!<=-1,!>=2}
  "getConfigs3" always "getConfigs3"
  false always 0
  false always 0
Line 220
  ( always {!<=-1,!>=2}
  "getConfigs4" always "getConfigs4"
  false always 0
  false always 0
Line 221
  ( always {!<=-1,!>=2}
  "getConfigs5" always "getConfigs5"
  false always 0
  false always 0
Line 222
  ( always {!<=-1,!>=2}
  "getConfigs7" always "getConfigs7"
  false always 0
  false always 0
Line 223
  ( always {!<=-1,!>=2}
  "getConfigs7a" always "getConfigs7a"
  false always 0
  false always 0
Line 224
  ( always {!<=-1,!>=2}
  "getConfigs7b" always "getConfigs7b"
  false always 0
  false always 0
Line 225
  ( always {!<=-1,!>=2}
  "getConfigs7c" always "getConfigs7c"
  false always 0
  false always 0
Line 226
  ( always {!<=-1,!>=2}
  "getConfigs7d" always "getConfigs7d"
  false always 0
  false always 0
Line 227
  ( always {!<=-1,!>=2}
  "getConfigs7e" always "getConfigs7e"
  false always 0
  false always 0
Line 228
  ( always {!<=-1,!>=2}
  "getConfigs8" always "getConfigs8"
  false always 0
  false always 0
Line 229
  ( always {!<=-1,!>=2}
  "getConfigs10" always "getConfigs10"
  false always 0
  false always 0
Line 230
  ( always {!<=-1,!>=2}
  "getConfigs11" always "getConfigs11"
  false always 0
  false always 0
Line 231
  ( always {!<=-1,!>=2}
  "getConfigsError" always "getConfigsError"
  false always 0
  false always 0
Line 233
  ( always {!<=-1,!>=2}
  "getConfigsD1" always "getConfigsD1"
  false always 0
  false always 0
Line 235
  ( always {!<=-1,!>=2}
  "getConfigsU1" always "getConfigsU1"
  false always 0
  false always 0
Line 236
  ( always {!<=-1,!>=2}
  "getConfigsU2" always "getConfigsU2"
  false always 0
  false always 0
Line 237
  ( always {!<=-1,!>=2}
  "getConfigsU3" always "getConfigsU3"
  false always 0
  false always 0
Line 238
  ( always {!<=-1,!>=2}
  "getConfigsU4" always "getConfigsU4"
  false always 0
  false always 0
Line 239
  ( always {!<=-1,!>=2}
  "getConfigsU5" always "getConfigsU5"
  false always 0
  false always 0
Line 240
  ( always {!<=-1,!>=2}
  "getConfigsU6" always "getConfigsU6"
  false always 0
  false always 0
Line 241
  ( always {!<=-1,!>=2}
  "getConfigsU7" always "getConfigsU7"
  false always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
  "validateCfg1" always "validateCfg1"
  false always 0
  false always 0
Line 244
  ( always {!<=-1,!>=2}
  "validateCfg2" always "validateCfg2"
  false always 0
  false always 0
Line 246
  ( always {!<=-1,!>=2}
  "if_sizeof" always "if_sizeof"
  false always 0
  false always 0
Line 248
  ( always {!<=-1,!>=2}
  "invalid_ifs" always "invalid_ifs"
  false always 0
  false always 0
Line 250
  ( always {!<=-1,!>=2}
  "garbage" always "garbage"
  false always 0
  false always 0
Line 252
  ( always {!<=-1,!>=2}
  "wrongPathOnErrorDirective" always "wrongPathOnErrorDirective"
  false always 0
  false always 0
Line 254
  ( always {!<=-1,!>=2}
  "testDirectiveIncludeTypes" always "testDirectiveIncludeTypes"
  false always 0
  false always 0
Line 255
  ( always {!<=-1,!>=2}
  "testDirectiveIncludeLocations" always "testDirectiveIncludeLocations"
  false always 0
  false always 0
Line 256
  ( always {!<=-1,!>=2}
  "testDirectiveIncludeComments" always "testDirectiveIncludeComments"
  false always 0
  false always 0
Line 259
  , always "file.c"
  7 always 7
  = always "file.c"
  "file.c" always "file.c"
Line 260
  "" always ""
Line 261
  code possible {"V\n#define X b   #endif #line 0 \"x\"  ;\n#if ! defined ( Y )    #endif"@1,"#ifdef\n#endif\n#ifdef !\n#endif\n#if defined\n#endif\n#define f(x) x\n#if f(2\n#endif\nint x;\n"@2,"#ifdef ABC\n#endif\nint i = ABC;"@4,"#define () {(int f(x) }\n"@36,"#define =\n"@37,"#ifdef A\n#define B\n#if defined(B) && defined(A)\na\n#else\nb\n#endif\n#endif\n"@38,"char a[] = \"#endfile\";\nchar b[] = \"#endfile\";\n#include \"notfound.h\"\n"@39,"int main() {\n#ifdef FOO\n#ifdef BAR\n    std::cout << 1;\n#endif\n#endif\n\n#ifdef BAR\n#ifdef FOO\n    std::cout << 2;\n#endif\n#endif\n}\n"@40,"#ifndef A\n#define A(x) x\n#endif\nA(123);"@41,"#define A(x) (x)\n#ifndef A\n;\n#endif\n"@42}
Line 264
  files always size=0
  filename inconclusive {"file.cpp"@4,"file.cpp"@180,"file.c"@181}
  & {lifetime[Address]=(outputList),!0}
Line 266
  & {lifetime[Address]=(tokens),!0}
Line 271
  code inconclusive {"V\n#define X b   #endif #line 0 \"x\"  ;\n#if ! defined ( Y )    #endif"@1,"#ifdef\n#endif\n#ifdef !\n#endif\n#if defined\n#endif\n#define f(x) x\n#if f(2\n#endif\nint x;\n"@2,"#ifdef ABC\n#endif\nint i = ABC;"@4,"#define () {(int f(x) }\n"@36,"#define =\n"@37,"#ifdef A\n#define B\n#if defined(B) && defined(A)\na\n#else\nb\n#endif\n#endif\n"@38,"char a[] = \"#endfile\";\nchar b[] = \"#endfile\";\n#include \"notfound.h\"\n"@39,"int main() {\n#ifdef FOO\n#ifdef BAR\n    std::cout << 1;\n#endif\n#endif\n\n#ifdef BAR\n#ifdef FOO\n    std::cout << 2;\n#endif\n#endif\n}\n"@40,"#ifndef A\n#define A(x) x\n#endif\nA(123);"@41,"#define A(x) (x)\n#ifndef A\n;\n#endif\n"@42}
  "#file" always "#file"
  != always {!<=-1,!>=2}
Line 272
  actual possible size=0@3
Line 274
  = always ""
  "" always ""
Line 279
  , always 0
  = always 0
  nullptr always 0
Line 281
  arg possible {"-DX"@5,"-UX"@6,"-UX"@8,"-UX"@10,"-UX"@12,"-UX"@14,"-UX"@16,"-DX"@18}
  && always {!<=-1,!>=2}
  arg {!0,"-DX"@5,"-UX"@6,"-UX"@8,"-UX"@10,"-UX"@12,"-UX"@14,"-UX"@16,"-DX"@18}
  "-D" always "-D"
  2 always 2
  == always {!<=-1,!>=2}
  0 always 0
Line 282
  = always !2
  arg always !0
  + always !2
  2 always 2
Line 283
  arg possible {symbolic=(settings.userDefines-2),0,"-DX"@5,"-UX"@6,"-UX"@8,"-UX"@10,"-UX"@12,"-UX"@14,"-UX"@16,"-DX"@18}
  && always {!<=-1,!>=2}
  arg {!0,"-DX"@5,"-UX"@6,"-UX"@8,"-UX"@10,"-UX"@12,"-UX"@14,"-UX"@16,"-DX"@18}
  "-U" always "-U"
  2 always 2
  == always {!<=-1,!>=2}
  0 always 0
Line 284
  arg always !0
  + always !2
  2 always 2
Line 285
  this always !0
Line 287
  filedata {"#ifndef Y\n#else\n#endif\n"@5,"#if X==0\n#endif\n"@6,"#if X==1\n#endif\n"@8,"#if defined(X) || defined(Y) || defined(Z)\n#else\n#endif\n"@10,"#ifndef X\nFred & Wilma\n#else\nBarney & Betty\n#endif\n"@12,"#ifndef X\n#endif\n"@14,"#ifdef X\n#endif\n"@16,"#ifdef X\n#else\n#ifdef Y\n#endif\n#endif\n"@18,"#ifndef X\n#error \"!X\"\n#endif\n"@20,"#ifdef X\n#ifndef Y\n#error \"!Y\"\n#endif\n#endif\n"@21}
Line 288
  files always size=0
Line 293
  '\n' always 10
Line 298
  38 always 38
  = always "#ifdef __cplusplus\ncpp\n#else\nc\n#endif"
  "#ifdef __cplusplus\ncpp\n#else\nc\n#endif" always "#ifdef __cplusplus\ncpp\n#else\nc\n#endif"
Line 307
  filedata always "#ifdef __cplusplus\ncpp\n#else\nc\n#endif"
  actual always size=0
  "file.cpp" always "file.cpp"
Line 310
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  310 always 310
  1U always 1
  ( always !<=-1
Line 311
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  311 always 311
  "\ncpp" always "\ncpp"
  "" always ""
Line 318
  filedata always "#ifdef __cplusplus\ncpp\n#else\nc\n#endif"
  actual always size=0
  "file.c" always "file.c"
Line 321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  321 always 321
  1U always 1
  ( always !<=-1
Line 322
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  322 always 322
  "\n\n\nc" always "\n\n\nc"
  "" always ""
Line 327
  37 always 37
  = always "#ifdef A\n;\n#else\n#error abcd\n#endif\n"
  "#ifdef A\n;\n#else\n#error abcd\n#endif\n" always "#ifdef A\n;\n#else\n#error abcd\n#endif\n"
Line 332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  332 always 332
  "\nA\n" always "\nA\n"
  filedata always "#ifdef A\n;\n#else\n#error abcd\n#endif\n"
Line 336
  25 always 25
  = always "#ifndef A\n#error\n#endif\n"
  "#ifndef A\n#error\n#endif\n" always "#ifndef A\n#error\n#endif\n"
Line 339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  339 always 339
  "A\n" always "A\n"
  filedata1 always "#ifndef A\n#error\n#endif\n"
Line 341
  22 always 22
  = always "#if !A\n#error\n#endif\n"
  "#if !A\n#error\n#endif\n" always "#if !A\n#error\n#endif\n"
Line 344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  344 always 344
  "A\n" always "A\n"
  filedata2 always "#if !A\n#error\n#endif\n"
Line 348
  "" always ""
Line 350
  = always "__cplusplus"
  "__cplusplus" always "__cplusplus"
Line 351
  this always !0
Line 352
  "#error hello world!\n" always "#error hello world!\n"
Line 353
  "X" always "X"
  "test.c" always "test.c"
Line 354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  354 always 354
  "[test.c:1]: (error) #error hello world!\n" always "[test.c:1]: (error) #error hello world!\n"
Line 361
  "" always ""
Line 363
  = always "TEST"
  "TEST" always "TEST"
Line 364
  this always !0
Line 365
  "#file \"ab.h\"\n#error hello world!\n#endfile" always "#file \"ab.h\"\n#error hello world!\n#endfile"
Line 366
  "TEST" always "TEST"
  "test.c" always "test.c"
Line 367
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  367 always 367
  "[ab.h:1]: (error) #error hello world!\n" always "[ab.h:1]: (error) #error hello world!\n"
Line 372
  "" always ""
Line 374
  = always "TEST"
  "TEST" always "TEST"
Line 375
  this always !0
Line 376
  "#file \"ab.h\"\n\n#endfile\n#error aaa" always "#file \"ab.h\"\n\n#endfile\n#error aaa"
Line 377
  "TEST" always "TEST"
  "test.c" always "test.c"
Line 378
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  378 always 378
  "[test.c:2]: (error) #error aaa\n" always "[test.c:2]: (error) #error aaa\n"
Line 383
  "" always ""
Line 385
  = always "FOO"
  "FOO" always "FOO"
Line 386
  = always 1
  true always 1
Line 387
  this always !0
Line 388
  "#error hello world!\n" always "#error hello world!\n"
Line 389
  "X" always "X"
  "test.c" always "test.c"
Line 390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  390 always 390
  "" always ""
Line 394
  63 always 63
  = always "#ifdef A\n#else\n#error 1\n#endif\n#ifdef B\n#else\n#error 2\n#endif\n"
  "#ifdef A\n#else\n#error 1\n#endif\n#ifdef B\n#else\n#error 2\n#endif\n" always "#ifdef A\n#else\n#error 1\n#endif\n#ifdef B\n#else\n#error 2\n#endif\n"
Line 402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  402 always 402
  "\nA\nA;B\nB\n" always "\nA\nA;B\nB\n"
  filedata1 always "#ifdef A\n#else\n#error 1\n#endif\n#ifdef B\n#else\n#error 2\n#endif\n"
Line 404
  53 always 53
  = always "#ifndef A\n#error 1\n#endif\n#ifndef B\n#error 2\n#endif\n"
  "#ifndef A\n#error 1\n#endif\n#ifndef B\n#error 2\n#endif\n" always "#ifndef A\n#error 1\n#endif\n#ifndef B\n#error 2\n#endif\n"
Line 410
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  410 always 410
  "A;B\n" always "A;B\n"
  filedata2 always "#ifndef A\n#error 1\n#endif\n#ifndef B\n#error 2\n#endif\n"
Line 412
  47 always 47
  = always "#if !A\n#error 1\n#endif\n#if !B\n#error 2\n#endif\n"
  "#if !A\n#error 1\n#endif\n#if !B\n#error 2\n#endif\n" always "#if !A\n#error 1\n#endif\n#if !B\n#error 2\n#endif\n"
Line 418
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  418 always 418
  "A;B\n" always "A;B\n"
  filedata3 always "#if !A\n#error 1\n#endif\n#if !B\n#error 2\n#endif\n"
Line 423
  91 always 91
  = always "#define A\n\n#if defined(B)\n#else\n#error \"1\"\n#endif\n\n#if defined(A)\n#else\n#error \"2\"\n#endif\n"
  "#define A\n\n#if defined(B)\n#else\n#error \"1\"\n#endif\n\n#if defined(A)\n#else\n#error \"2\"\n#endif\n" always "#define A\n\n#if defined(B)\n#else\n#error \"1\"\n#endif\n\n#if defined(A)\n#else\n#error \"2\"\n#endif\n"
Line 434
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  434 always 434
  "\nB\n" always "\nB\n"
  filedata always "#define A\n\n#if defined(B)\n#else\n#error \"1\"\n#endif\n\n#if defined(A)\n#else\n#error \"2\"\n#endif\n"
Line 438
  66 always 66
  = always "#ifdef A\n#ifdef B\n#endif\n#else\n#endif\n\n#ifndef C\n#error aa\n#endif"
  "#ifdef A\n#ifdef B\n#endif\n#else\n#endif\n\n#ifndef C\n#error aa\n#endif" always "#ifdef A\n#ifdef B\n#endif\n#else\n#endif\n\n#ifndef C\n#error aa\n#endif"
Line 447
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  447 always 447
  "A;B;C\nA;C\nC\n" always "A;B;C\nA;C\nC\n"
  filedata always "#ifdef A\n#ifdef B\n#endif\n#else\n#endif\n\n#ifndef C\n#error aa\n#endif"
Line 452
  this always !0
Line 455
  40 always 40
  = always "#if sizeof(long) == 4\n1\n#else\n2\n#endif\n"
  "#if sizeof(long) == 4\n1\n#else\n2\n#endif\n" always "#if sizeof(long) == 4\n1\n#else\n2\n#endif\n"
Line 460
  filedata always "#if sizeof(long) == 4\n1\n#else\n2\n#endif\n"
Line 462
  files always size=0
  "test.c" always "test.c"
Line 466
  & {lifetime[Address]=(tokens),!0}
Line 467
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  467 always 467
  "\n1" always "\n1"
  "" always ""
  false always 0
Line 471
  & {lifetime[Address]=(tokens),!0}
Line 472
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  472 always 472
  "\n\n\n2" always "\n\n\n2"
  "" always ""
  false always 0
Line 477
  74 always 74
  = always "#file \"abc.h\"\n#ifndef abcH\n#define abcH\n#endif\n#endfile\n#ifdef ABC\n#endif"
  "#file \"abc.h\"\n#ifndef abcH\n#define abcH\n#endif\n#endfile\n#ifdef ABC\n#endif" always "#file \"abc.h\"\n#ifndef abcH\n#define abcH\n#endif\n#endfile\n#ifdef ABC\n#endif"
Line 484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  484 always 484
  "\nABC\n" always "\nABC\n"
  filedata always "#file \"abc.h\"\n#ifndef abcH\n#define abcH\n#endif\n#endfile\n#ifdef ABC\n#endif"
Line 489
  47 always 47
  = always "#file \"abc.h\"\nfoo\n#ifdef ABC\n\n#endif\n#endfile\n"
  "#file \"abc.h\"\nfoo\n#ifdef ABC\n\n#endif\n#endfile\n" always "#file \"abc.h\"\nfoo\n#ifdef ABC\n\n#endif\n#endfile\n"
Line 495
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  495 always 495
  "\nABC\n" always "\nABC\n"
  filedata always "#file \"abc.h\"\nfoo\n#ifdef ABC\n\n#endif\n#endfile\n"
Line 501
  78 always 78
  = always "#ifdef ABC\n#file \"abc.h\"\nclass A{};/*\n\n\n\n\n\n\n*/\n#endfile\n#endif\nint main() {}\n"
  "#ifdef ABC\n#file \"abc.h\"\nclass A{};/*\n\n\n\n\n\n\n*/\n#endfile\n#endif\nint main() {}\n" always "#ifdef ABC\n#file \"abc.h\"\nclass A{};/*\n\n\n\n\n\n\n*/\n#endfile\n#endif\nint main() {}\n"
Line 510
  filedata always "#ifdef ABC\n#file \"abc.h\"\nclass A{};/*\n\n\n\n\n\n\n*/\n#endfile\n#endif\nint main() {}\n"
  actual always size=0
Line 513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  513 always 513
  2 always 2
  ( always !<=-1
Line 514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  514 always 514
  "\n\n\nint main ( ) { }" always "\n\n\nint main ( ) { }"
  "" always ""
Line 515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  515 always 515
  "\n#line 1 \"abc.h\"\nclass A { } ;\n#line 4 \"file.c\"\n int main ( ) { }" always "\n#line 1 \"abc.h\"\nclass A { } ;\n#line 4 \"file.c\"\n int main ( ) { }"
  "ABC" always "ABC"
Line 519
  62 always 62
  = always " # if /* comment */  0 // comment\n#ifdef WIN32\n#endif\n#endif\n"
  " # if /* comment */  0 // comment\n#ifdef WIN32\n#endif\n#endif\n" always " # if /* comment */  0 // comment\n#ifdef WIN32\n#endif\n#endif\n"
Line 523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  523 always 523
  "\n" always "\n"
  filedata always " # if /* comment */  0 // comment\n#ifdef WIN32\n#endif\n#endif\n"
Line 527
  49 always 49
  = always " # if /* comment */  1 // comment\nABC\n # endif \n"
  " # if /* comment */  1 // comment\nABC\n # endif \n" always " # if /* comment */  1 // comment\nABC\n # endif \n"
Line 530
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  530 always 530
  "\n" always "\n"
  filedata always " # if /* comment */  1 // comment\nABC\n # endif \n"
Line 536
  36 always 36
  = always "#if DEF1\nABC\n#elif DEF2\nDEF\n#endif\n"
  "#if DEF1\nABC\n#elif DEF2\nDEF\n#endif\n" always "#if DEF1\nABC\n#elif DEF2\nDEF\n#endif\n"
Line 541
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  541 always 541
  "\nDEF1\nDEF2\n" always "\nDEF1\nDEF2\n"
  filedata always "#if DEF1\nABC\n#elif DEF2\nDEF\n#endif\n"
Line 545
  64 always 64
  = always "#if(defined DEF1)\nABC\n#elif(defined DEF2)\nDEF\n#else\nGHI\n#endif\n"
  "#if(defined DEF1)\nABC\n#elif(defined DEF2)\nDEF\n#else\nGHI\n#endif\n" always "#if(defined DEF1)\nABC\n#elif(defined DEF2)\nDEF\n#else\nGHI\n#endif\n"
Line 552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  552 always 552
  "\nDEF1\nDEF2\n" always "\nDEF1\nDEF2\n"
  filedata always "#if(defined DEF1)\nABC\n#elif(defined DEF2)\nDEF\n#else\nGHI\n#endif\n"
Line 557
  41 always 41
  = always "#if LIBVER>100\n    A\n#else\n    B\n#endif\n"
  "#if LIBVER>100\n    A\n#else\n    B\n#endif\n" always "#if LIBVER>100\n    A\n#else\n    B\n#endif\n"
Line 562
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  562 always 562
  "\nLIBVER=101\n" always "\nLIBVER=101\n"
  "\n" always "\n"
  filedata always "#if LIBVER>100\n    A\n#else\n    B\n#endif\n"
Line 566
  58 always 58
  = always "#ifdef A\na\n#endif\n#if defined(A) && defined(B)\nab\n#endif\n"
  "#ifdef A\na\n#endif\n#if defined(A) && defined(B)\nab\n#endif\n" always "#ifdef A\na\n#endif\n#if defined(A) && defined(B)\nab\n#endif\n"
Line 572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  572 always 572
  "\nA\nA;B\n" always "\nA\nA;B\n"
  filedata always "#ifdef A\na\n#endif\n#if defined(A) && defined(B)\nab\n#endif\n"
Line 581
  47 always 47
  = always "#ifndef A\n!a\n#ifdef B\nb\n#endif\n#else\na\n#endif\n"
  "#ifndef A\n!a\n#ifdef B\nb\n#endif\n#else\na\n#endif\n" always "#ifndef A\n!a\n#ifdef B\nb\n#endif\n#else\na\n#endif\n"
Line 589
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  589 always 589
  "\nA;B\n" always "\nA;B\n"
  "\nA\nB\n" always "\nA\nB\n"
  filedata always "#ifndef A\n!a\n#ifdef B\nb\n#endif\n#else\na\n#endif\n"
Line 593
  56 always 56
  = always "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#endif\n"
  "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#endif\n" always "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#endif\n"
Line 603
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  603 always 603
  "\nA\nA;B\n" always "\nA\nA;B\n"
  "\nA\nB\n" always "\nA\nB\n"
  filedata always "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#endif\n"
Line 607
  83 always 83
  = always "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#ifdef B\nb\n#else\n!b\n#endif\n#endif\n"
  "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#ifdef B\nb\n#else\n!b\n#endif\n#endif\n" always "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#ifdef B\nb\n#else\n!b\n#endif\n#endif\n"
Line 622
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  622 always 622
  "\nA\nA;B\nB\n" always "\nA\nA;B\nB\n"
  filedata always "#ifndef A\n!a\n#ifdef B\nb\n#else\n!b\n#endif\n#else\na\n#ifdef B\nb\n#else\n!b\n#endif\n#endif\n"
Line 626
  48 always 48
  = always "#if !defined(A)\n!a\n#elif !defined(B)\n!b\n#endif\n"
  "#if !defined(A)\n!a\n#elif !defined(B)\n!b\n#endif\n" always "#if !defined(A)\n!a\n#elif !defined(B)\n!b\n#endif\n"
Line 631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  631 always 631
  "\nA\nB\n" always "\nA\nB\n"
  filedata always "#if !defined(A)\n!a\n#elif !defined(B)\n!b\n#endif\n"
Line 635
  59 always 59
  = always "#ifdef A\na\n#if defined(B) && defined(C)\nabc\n#endif\n#endif\n"
  "#ifdef A\na\n#if defined(B) && defined(C)\nabc\n#endif\n#endif\n" always "#ifdef A\na\n#if defined(B) && defined(C)\nabc\n#endif\n#endif\n"
Line 641
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  641 always 641
  "\nA\nA;B;C\n" always "\nA\nA;B;C\n"
  filedata always "#ifdef A\na\n#if defined(B) && defined(C)\nabc\n#endif\n#endif\n"
Line 646
  58 always 58
  = always "#define A\n#define B\n#if defined A || defined B\nab\n#endif\n"
  "#define A\n#define B\n#if defined A || defined B\nab\n#endif\n" always "#define A\n#define B\n#if defined A || defined B\nab\n#endif\n"
Line 651
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  651 always 651
  "\n" always "\n"
  filedata always "#define A\n#define B\n#if defined A || defined B\nab\n#endif\n"
Line 655
  49 always 49
  = always "#if A\n{\n#if (defined(B))\nfoo();\n#endif\n}\n#endif\n"
  "#if A\n{\n#if (defined(B))\nfoo();\n#endif\n}\n#endif\n" always "#if A\n{\n#if (defined(B))\nfoo();\n#endif\n}\n#endif\n"
Line 662
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  662 always 662
  "\nA\nA;B\n" always "\nA\nA;B\n"
  filedata always "#if A\n{\n#if (defined(B))\nfoo();\n#endif\n}\n#endif\n"
Line 666
  62 always 62
  = always "#define A\n#define B\n#if (defined A) || defined (B)\nab\n#endif\n"
  "#define A\n#define B\n#if (defined A) || defined (B)\nab\n#endif\n" always "#define A\n#define B\n#if (defined A) || defined (B)\nab\n#endif\n"
Line 671
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  671 always 671
  "\n" always "\n"
  filedata always "#define A\n#define B\n#if (defined A) || defined (B)\nab\n#endif\n"
Line 675
  23 always 23
  = always "#if (A)\nfoo();\n#endif\n"
  "#if (A)\nfoo();\n#endif\n" always "#if (A)\nfoo();\n#endif\n"
Line 678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  678 always 678
  "\nA\n" always "\nA\n"
  filedata always "#if (A)\nfoo();\n#endif\n"
Line 682
  22 always 22
  = always "#if! A\nfoo();\n#endif\n"
  "#if! A\nfoo();\n#endif\n" always "#if! A\nfoo();\n#endif\n"
Line 685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  685 always 685
  "\nA=0\n" always "\nA=0\n"
  filedata always "#if! A\nfoo();\n#endif\n"
Line 690
  82 always 82
  = always "#if defined(A) && defined(B)\nab\n#endif\ncd\n#if defined(B) && defined(A)\nef\n#endif\n"
  "#if defined(A) && defined(B)\nab\n#endif\ncd\n#if defined(B) && defined(A)\nef\n#endif\n" always "#if defined(A) && defined(B)\nab\n#endif\ncd\n#if defined(B) && defined(A)\nef\n#endif\n"
Line 697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  697 always 697
  "\nA;B\n" always "\nA;B\n"
  filedata always "#if defined(A) && defined(B)\nab\n#endif\ncd\n#if defined(B) && defined(A)\nef\n#endif\n"
Line 701
  39 always 39
  = always "\n#if defined(A) && defined(B))\n#endif\n"
  "\n#if defined(A) && defined(B))\n#endif\n" always "\n#if defined(A) && defined(B))\n#endif\n"
Line 704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  704 always 704
  "\nA;B\n" always "\nA;B\n"
  filedata always "\n#if defined(A) && defined(B))\n#endif\n"
Line 708
  54 always 54
  = always "#if defined(A) + defined(B) + defined(C) != 1\n#endif\n"
  "#if defined(A) + defined(B) + defined(C) != 1\n#endif\n" always "#if defined(A) + defined(B) + defined(C) != 1\n#endif\n"
Line 710
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  710 always 710
  "\nA\n" always "\nA\n"
  "\nA;B;C\n" always "\nA;B;C\n"
  filedata always "#if defined(A) + defined(B) + defined(C) != 1\n#endif\n"
Line 715
  28 always 28
  = always "#if !defined _A\nabc\n#endif\n"
  "#if !defined _A\nabc\n#endif\n" always "#if !defined _A\nabc\n#endif\n"
Line 718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  718 always 718
  "\n_A\n" always "\n_A\n"
  filedata always "#if !defined _A\nabc\n#endif\n"
Line 722
  63 always 63
  = always "#if !defined(a) && !defined(b)\n#if defined(and)\n#endif\n#endif\n"
  "#if !defined(a) && !defined(b)\n#if defined(and)\n#endif\n#endif\n" always "#if !defined(a) && !defined(b)\n#if defined(and)\n#endif\n#endif\n"
Line 729
  filedata always "#if !defined(a) && !defined(b)\n#if defined(and)\n#endif\n#endif\n"
  actual always size=0
Line 733
  121 always 121
  = always "#if defined(L_fixunssfdi) && LIBGCC2_HAS_SF_MODE\n#if LIBGCC2_HAS_DF_MODE\n#elif FLT_MANT_DIG < W_TYPE_SIZE\n#endif\n#endif\n"
  "#if defined(L_fixunssfdi) && LIBGCC2_HAS_SF_MODE\n#if LIBGCC2_HAS_DF_MODE\n#elif FLT_MANT_DIG < W_TYPE_SIZE\n#endif\n#endif\n" always "#if defined(L_fixunssfdi) && LIBGCC2_HAS_SF_MODE\n#if LIBGCC2_HAS_DF_MODE\n#elif FLT_MANT_DIG < W_TYPE_SIZE\n#endif\n#endif\n"
Line 739
  filedata always "#if defined(L_fixunssfdi) && LIBGCC2_HAS_SF_MODE\n#if LIBGCC2_HAS_DF_MODE\n#elif FLT_MANT_DIG < W_TYPE_SIZE\n#endif\n#endif\n"
  actual always size=0
Line 740
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  740 always 740
  "" always ""
Line 744
  35 always 35
  = always "#define A (1)\n#if A == 1\n;\n#endif\n"
  "#define A (1)\n#if A == 1\n;\n#endif\n" always "#define A (1)\n#if A == 1\n;\n#endif\n"
Line 748
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  748 always 748
  "\n" always "\n"
  filedata always "#define A (1)\n#if A == 1\n;\n#endif\n"
Line 752
  30 always 30
  = always "#if ('A' == 0x41)\n123\n#endif\n"
  "#if ('A' == 0x41)\n123\n#endif\n" always "#if ('A' == 0x41)\n123\n#endif\n"
Line 755
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  755 always 755
  "\n" always "\n"
  filedata always "#if ('A' == 0x41)\n123\n#endif\n"
Line 759
  21 always 21
  = always "#if !(A)\n123\n#endif\n"
  "#if !(A)\n123\n#endif\n" always "#if !(A)\n123\n#endif\n"
Line 762
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  762 always 762
  "\n" always "\n"
  filedata always "#if !(A)\n123\n#endif\n"
Line 768
  51 always 51
  = always "#if defined(DEF_10) || defined(DEF_11)\na1;\n#endif\n"
  "#if defined(DEF_10) || defined(DEF_11)\na1;\n#endif\n" always "#if defined(DEF_10) || defined(DEF_11)\na1;\n#endif\n"
Line 771
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  771 always 771
  "\nDEF_10;DEF_11\n" always "\nDEF_10;DEF_11\n"
  filedata always "#if defined(DEF_10) || defined(DEF_11)\na1;\n#endif\n"
Line 775
  23 always 23
  = always "#if X || Y\na1;\n#endif\n"
  "#if X || Y\na1;\n#endif\n" always "#if X || Y\na1;\n#endif\n"
Line 778
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  778 always 778
  "\nX;Y\n" always "\nX;Y\n"
  "\n" always "\n"
  filedata always "#if X || Y\na1;\n#endif\n"
Line 782
  = always "#define A B\n#define B 1\n#define C 1\n#if A == C\nWilma\n#else\nBetty\n#endif\n"
  "#define A B\n#define B 1\n#define C 1\n#if A == C\nWilma\n#else\nBetty\n#endif\n" always "#define A B\n#define B 1\n#define C 1\n#if A == C\nWilma\n#else\nBetty\n#endif\n"
Line 790
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  790 always 790
  "\n" always "\n"
  code always "#define A B\n#define B 1\n#define C 1\n#if A == C\nWilma\n#else\nBetty\n#endif\n"
Line 794
  = always "#ifdef YYSTACKSIZE\n#define YYMAXDEPTH YYSTACKSIZE\n#else\n#define YYSTACKSIZE YYMAXDEPTH\n#endif\n#if YYDEBUG\n#endif\n"
  "#ifdef YYSTACKSIZE\n#define YYMAXDEPTH YYSTACKSIZE\n#else\n#define YYSTACKSIZE YYMAXDEPTH\n#endif\n#if YYDEBUG\n#endif\n" always "#ifdef YYSTACKSIZE\n#define YYMAXDEPTH YYSTACKSIZE\n#else\n#define YYSTACKSIZE YYMAXDEPTH\n#endif\n#if YYDEBUG\n#endif\n"
Line 802
  code always "#ifdef YYSTACKSIZE\n#define YYMAXDEPTH YYSTACKSIZE\n#else\n#define YYSTACKSIZE YYMAXDEPTH\n#endif\n#if YYDEBUG\n#endif\n"
  actual always size=0
Line 808
  = always "#define INLINE __forceinline\n#define inline __forceinline\n#define __forceinline inline\n#if !defined(_WIN32)\n#endif\nINLINE inline __forceinline\n"
  "#define INLINE __forceinline\n#define inline __forceinline\n#define __forceinline inline\n#if !defined(_WIN32)\n#endif\nINLINE inline __forceinline\n" always "#define INLINE __forceinline\n#define inline __forceinline\n#define __forceinline inline\n#if !defined(_WIN32)\n#endif\nINLINE inline __forceinline\n"
Line 815
  code always "#define INLINE __forceinline\n#define inline __forceinline\n#define __forceinline inline\n#if !defined(_WIN32)\n#endif\nINLINE inline __forceinline\n"
  actual always size=0
Line 818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  818 always 818
  "\n\n\n\n\n$__forceinline $inline $__forceinline" always "\n\n\n\n\n$__forceinline $inline $__forceinline"
  "" always ""
Line 822
  = always "__asm__ \n{ int extern __value) 0; (double return (\"\" } extern\n__typeof __finite (__finite) __finite __inline \"__GI___finite\");"
  "__asm__ \n{ int extern __value) 0; (double return (\"\" } extern\n__typeof __finite (__finite) __finite __inline \"__GI___finite\");" always "__asm__ \n{ int extern __value) 0; (double return (\"\" } extern\n__typeof __finite (__finite) __finite __inline \"__GI___finite\");"
Line 826
  code always "__asm__ \n{ int extern __value) 0; (double return (\"\" } extern\n__typeof __finite (__finite) __finite __inline \"__GI___finite\");"
  actual always size=0
Line 831
  31 always 31
  = always "#define AAA(aa) f(aa)\nAAA(5);\n"
  "#define AAA(aa) f(aa)\nAAA(5);\n" always "#define AAA(aa) f(aa)\nAAA(5);\n"
Line 833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  833 always 833
  "\nf ( 5 ) ;" always "\nf ( 5 ) ;"
  filedata always "#define AAA(aa) f(aa)\nAAA(5);\n"
Line 837
  32 always 32
  = always "#define AAA(aa) f(aa)\nAAA (5);\n"
  "#define AAA(aa) f(aa)\nAAA (5);\n" always "#define AAA(aa) f(aa)\nAAA (5);\n"
Line 839
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  839 always 839
  "\nf ( 5 ) ;" always "\nf ( 5 ) ;"
  filedata always "#define AAA(aa) f(aa)\nAAA (5);\n"
Line 844
  40 always 40
  = always "#define min(x,y) x<y?x:y\nmin(a(),b());\n"
  "#define min(x,y) x<y?x:y\nmin(a(),b());\n" always "#define min(x,y) x<y?x:y\nmin(a(),b());\n"
Line 846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  846 always 846
  "\na ( ) < b ( ) ? a ( ) : b ( ) ;" always "\na ( ) < b ( ) ? a ( ) : b ( ) ;"
  filedata always "#define min(x,y) x<y?x:y\nmin(a(),b());\n"
Line 850
  18 always 18
  = always "#define A 4\nA AA\n"
  "#define A 4\nA AA\n" always "#define A 4\nA AA\n"
Line 852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  852 always 852
  "\n4 AA" always "\n4 AA"
  filedata always "#define A 4\nA AA\n"
Line 856
  48 always 48
  = always "#define TEMP_1 if( temp > 0 ) return 1;\nTEMP_1\n"
  "#define TEMP_1 if( temp > 0 ) return 1;\nTEMP_1\n" always "#define TEMP_1 if( temp > 0 ) return 1;\nTEMP_1\n"
Line 858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  858 always 858
  "\nif ( temp > 0 ) return 1 ;" always "\nif ( temp > 0 ) return 1 ;"
  filedata always "#define TEMP_1 if( temp > 0 ) return 1;\nTEMP_1\n"
Line 862
  80 always 80
  = always "#define ABC if( temp > 0 ) return 1;\n\nvoid foo()\n{\n    int temp = 0;\n    ABC\n}\n"
  "#define ABC if( temp > 0 ) return 1;\n\nvoid foo()\n{\n    int temp = 0;\n    ABC\n}\n" always "#define ABC if( temp > 0 ) return 1;\n\nvoid foo()\n{\n    int temp = 0;\n    ABC\n}\n"
Line 869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  869 always 869
  "\n\nvoid foo ( )\n{\nint temp = 0 ;\nif ( temp > 0 ) return 1 ;\n}" always "\n\nvoid foo ( )\n{\nint temp = 0 ;\nif ( temp > 0 ) return 1 ;\n}"
  filedata always "#define ABC if( temp > 0 ) return 1;\n\nvoid foo()\n{\n    int temp = 0;\n    ABC\n}\n"
Line 873
  25 always 25
  = always "#define ABC (a+b+c)\nABC\n"
  "#define ABC (a+b+c)\nABC\n" always "#define ABC (a+b+c)\nABC\n"
Line 875
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  875 always 875
  "\n( a + b + c )" always "\n( a + b + c )"
  filedata always "#define ABC (a+b+c)\nABC\n"
Line 879
  31 always 31
  = always "#define ABC(str) str\nABC(\"(\")\n"
  "#define ABC(str) str\nABC(\"(\")\n" always "#define ABC(str) str\nABC(\"(\")\n"
Line 881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  881 always 881
  "\n\"(\"" always "\n\"(\""
  filedata always "#define ABC(str) str\nABC(\"(\")\n"
Line 885
  44 always 44
  = always "#define ABC 123\n#define ABCD 1234\nABC ABCD\n"
  "#define ABC 123\n#define ABCD 1234\nABC ABCD\n" always "#define ABC 123\n#define ABCD 1234\nABC ABCD\n"
Line 888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  888 always 888
  "\n\n123 1234" always "\n\n123 1234"
  filedata always "#define ABC 123\n#define ABCD 1234\nABC ABCD\n"
Line 892
  46 always 46
  = always "#define ABC(a) f(a)\nABC( \"\\\"\" );\nABC( \"g\" );\n"
  "#define ABC(a) f(a)\nABC( \"\\\"\" );\nABC( \"g\" );\n" always "#define ABC(a) f(a)\nABC( \"\\\"\" );\nABC( \"g\" );\n"
Line 895
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  895 always 895
  "\nf ( \"\\\"\" ) ;\nf ( \"g\" ) ;" always "\nf ( \"\\\"\" ) ;\nf ( \"g\" ) ;"
  filedata always "#define ABC(a) f(a)\nABC( \"\\\"\" );\nABC( \"g\" );\n"
Line 899
  40 always 40
  = always "#define ABC(t) t x\nABC(unsigned long);\n"
  "#define ABC(t) t x\nABC(unsigned long);\n" always "#define ABC(t) t x\nABC(unsigned long);\n"
Line 901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  901 always 901
  "\nunsigned long x ;" always "\nunsigned long x ;"
  filedata always "#define ABC(t) t x\nABC(unsigned long);\n"
Line 905
  33 always 33
  = always "#define ABC(x) delete x\nABC(a);\n"
  "#define ABC(x) delete x\nABC(a);\n" always "#define ABC(x) delete x\nABC(a);\n"
Line 907
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  907 always 907
  "\ndelete a ;" always "\ndelete a ;"
  filedata always "#define ABC(x) delete x\nABC(a);\n"
Line 911
  24 always 24
  = always "#define AB ab.AB\nAB.CD\n"
  "#define AB ab.AB\nAB.CD\n" always "#define AB ab.AB\nAB.CD\n"
Line 913
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  913 always 913
  "\nab . AB . CD" always "\nab . AB . CD"
  filedata always "#define AB ab.AB\nAB.CD\n"
Line 917
  32 always 32
  = always "#define TRACE(x)\nTRACE(;if(a))\n"
  "#define TRACE(x)\nTRACE(;if(a))\n" always "#define TRACE(x)\nTRACE(;if(a))\n"
Line 919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  919 always 919
  "" always ""
  filedata always "#define TRACE(x)\nTRACE(;if(a))\n"
Line 923
  30 always 30
  = always "#define A \"  a  \"\nprintf(A);\n"
  "#define A \"  a  \"\nprintf(A);\n" always "#define A \"  a  \"\nprintf(A);\n"
Line 925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  925 always 925
  "\nprintf ( \"  a  \" ) ;" always "\nprintf ( \"  a  \" ) ;"
  filedata always "#define A \"  a  \"\nprintf(A);\n"
Line 929
  22 always 22
  = always "#define FOO\"foo\"\nFOO\n"
  "#define FOO\"foo\"\nFOO\n" always "#define FOO\"foo\"\nFOO\n"
Line 931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  931 always 931
  "\n\"foo\"" always "\n\"foo\""
  filedata always "#define FOO\"foo\"\nFOO\n"
Line 935
  71 always 71
  = always "#define MACRO( A, B, C ) class A##B##C##Creator {};\nMACRO( B\t, U , G )"
  "#define MACRO( A, B, C ) class A##B##C##Creator {};\nMACRO( B\t, U , G )" always "#define MACRO( A, B, C ) class A##B##C##Creator {};\nMACRO( B\t, U , G )"
Line 937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  937 always 937
  "\nclass BUGCreator { } ;" always "\nclass BUGCreator { } ;"
  filedata always "#define MACRO( A, B, C ) class A##B##C##Creator {};\nMACRO( B\t, U , G )"
Line 943
  34 always 34
  = always "#define MACRO(A) A+123\nMACRO(123)"
  "#define MACRO(A) A+123\nMACRO(123)" always "#define MACRO(A) A+123\nMACRO(123)"
Line 945
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  945 always 945
  "\n123 + 123" always "\n123 + 123"
  filedata always "#define MACRO(A) A+123\nMACRO(123)"
Line 949
  22 always 22
  = always "#define A (1e-7)\na=A;"
  "#define A (1e-7)\na=A;" always "#define A (1e-7)\na=A;"
Line 951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  951 always 951
  "\na = ( 1e-7 ) ;" always "\na = ( 1e-7 ) ;"
  filedata1 always "#define A (1e-7)\na=A;"
Line 953
  22 always 22
  = always "#define A (1E-7)\na=A;"
  "#define A (1E-7)\na=A;" always "#define A (1E-7)\na=A;"
Line 955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  955 always 955
  "\na = ( 1E-7 ) ;" always "\na = ( 1E-7 ) ;"
  filedata2 always "#define A (1E-7)\na=A;"
Line 957
  22 always 22
  = always "#define A (1e+7)\na=A;"
  "#define A (1e+7)\na=A;" always "#define A (1e+7)\na=A;"
Line 959
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  959 always 959
  "\na = ( 1e+7 ) ;" always "\na = ( 1e+7 ) ;"
  filedata3 always "#define A (1e+7)\na=A;"
Line 961
  23 always 23
  = always "#define A (1.e+7)\na=A;"
  "#define A (1.e+7)\na=A;" always "#define A (1.e+7)\na=A;"
Line 963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  963 always 963
  "\na = ( 1.e+7 ) ;" always "\na = ( 1.e+7 ) ;"
  filedata4 always "#define A (1.e+7)\na=A;"
Line 965
  22 always 22
  = always "#define A (1.7f)\na=A;"
  "#define A (1.7f)\na=A;" always "#define A (1.7f)\na=A;"
Line 967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  967 always 967
  "\na = ( 1.7f ) ;" always "\na = ( 1.7f ) ;"
  filedata5 always "#define A (1.7f)\na=A;"
Line 969
  20 always 20
  = always "#define A (.1)\na=A;"
  "#define A (.1)\na=A;" always "#define A (.1)\na=A;"
Line 971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  971 always 971
  "\na = ( .1 ) ;" always "\na = ( .1 ) ;"
  filedata6 always "#define A (.1)\na=A;"
Line 973
  20 always 20
  = always "#define A (1.)\na=A;"
  "#define A (1.)\na=A;" always "#define A (1.)\na=A;"
Line 975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  975 always 975
  "\na = ( 1. ) ;" always "\na = ( 1. ) ;"
  filedata7 always "#define A (1.)\na=A;"
Line 977
  26 always 26
  = always "#define A (8.0E+007)\na=A;"
  "#define A (8.0E+007)\na=A;" always "#define A (8.0E+007)\na=A;"
Line 979
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  979 always 979
  "\na = ( 8.0E+007 ) ;" always "\na = ( 8.0E+007 ) ;"
  filedata8 always "#define A (8.0E+007)\na=A;"
Line 984
  54 always 54
  = always "#define A(m) long n = m; n++;\n#define B(n) A(n)\nB(0)\n"
  "#define A(m) long n = m; n++;\n#define B(n) A(n)\nB(0)\n" always "#define A(m) long n = m; n++;\n#define B(n) A(n)\nB(0)\n"
Line 987
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  987 always 987
  "\n\nlong n = 0 ; n ++ ;" always "\n\nlong n = 0 ; n ++ ;"
  filedata always "#define A(m) long n = m; n++;\n#define B(n) A(n)\nB(0)\n"
Line 991
  27 always 27
  = always "#define A B\n#define B 3\nA\n"
  "#define A B\n#define B 3\nA\n" always "#define A B\n#define B 3\nA\n"
Line 994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  994 always 994
  "\n\n3" always "\n\n3"
  filedata always "#define A B\n#define B 3\nA\n"
Line 998
  95 always 95
  = always "#define BC(b, c...) 0##b * 0##c\n#define ABC(a, b...) a + BC(b)\n\nABC(1);\nABC(2,3);\nABC(4,5,6);\n"
  "#define BC(b, c...) 0##b * 0##c\n#define ABC(a, b...) a + BC(b)\n\nABC(1);\nABC(2,3);\nABC(4,5,6);\n" always "#define BC(b, c...) 0##b * 0##c\n#define ABC(a, b...) a + BC(b)\n\nABC(1);\nABC(2,3);\nABC(4,5,6);\n"
Line 1005
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1005 always 1005
  "\n\n\n1 + 0 * 0 ;\n2 + 03 * 0 ;\n4 + 05 * 06 ;" always "\n\n\n1 + 0 * 0 ;\n2 + 03 * 0 ;\n4 + 05 * 06 ;"
  filedata always "#define BC(b, c...) 0##b * 0##c\n#define ABC(a, b...) a + BC(b)\n\nABC(1);\nABC(2,3);\nABC(4,5,6);\n"
Line 1009
  36 always 36
  = always "#define A 4\n#define B(a) a,A\nB(2);\n"
  "#define A 4\n#define B(a) a,A\nB(2);\n" always "#define A 4\n#define B(a) a,A\nB(2);\n"
Line 1012
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1012 always 1012
  "\n\n2 , 4 ;" always "\n\n2 , 4 ;"
  filedata always "#define A 4\n#define B(a) a,A\nB(2);\n"
Line 1016
  46 always 46
  = always "#define A(x) (x)\n#define B )A(\n#define C )A(\n"
  "#define A(x) (x)\n#define B )A(\n#define C )A(\n" always "#define A(x) (x)\n#define B )A(\n#define C )A(\n"
Line 1019
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1019 always 1019
  "" always ""
  filedata always "#define A(x) (x)\n#define B )A(\n#define C )A(\n"
Line 1023
  44 always 44
  = always "#define A(x) (x*2)\n#define B A(\nfoo B(i));\n"
  "#define A(x) (x*2)\n#define B A(\nfoo B(i));\n" always "#define A(x) (x*2)\n#define B A(\nfoo B(i));\n"
Line 1026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1026 always 1026
  "\n\nfoo ( ( i ) * 2 ) ;" always "\n\nfoo ( ( i ) * 2 ) ;"
  filedata always "#define A(x) (x*2)\n#define B A(\nfoo B(i));\n"
Line 1030
  21 always 21
  = always "#define foo foo\nfoo\n"
  "#define foo foo\nfoo\n" always "#define foo foo\nfoo\n"
Line 1032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1032 always 1032
  "\nfoo" always "\nfoo"
  filedata always "#define foo foo\nfoo\n"
Line 1036
  92 always 92
  = always "#define B(A1, A2) } while (0)\n#define A(name) void foo##name() { do { B(1, 2); }\nA(0)\nA(1)\n"
Line 1037
  "#define B(A1, A2) } while (0)\n#define A(name) void foo##name() { do { B(1, 2); }\nA(0)\nA(1)\n" always "#define B(A1, A2) } while (0)\n#define A(name) void foo##name() { do { B(1, 2); }\nA(0)\nA(1)\n"
Line 1041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1041 always 1041
  "\n\nvoid foo0 ( ) { do { } while ( 0 ) ; }\nvoid foo1 ( ) { do { } while ( 0 ) ; }" always "\n\nvoid foo0 ( ) { do { } while ( 0 ) ; }\nvoid foo1 ( ) { do { } while ( 0 ) ; }"
  filedata always "#define B(A1, A2) } while (0)\n#define A(name) void foo##name() { do { B(1, 2); }\nA(0)\nA(1)\n"
Line 1045
  47 always 47
  = always "#define B(x) (\n#define A() B(xx)\nB(1) A() ) )\n"
Line 1046
  "#define B(x) (\n#define A() B(xx)\nB(1) A() ) )\n" always "#define B(x) (\n#define A() B(xx)\nB(1) A() ) )\n"
Line 1049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1049 always 1049
  "\n\n( ( ) )" always "\n\n( ( ) )"
  filedata always "#define B(x) (\n#define A() B(xx)\nB(1) A() ) )\n"
Line 1053
  67 always 67
  = always "#define PTR1 (\n#define PTR2 PTR1 PTR1\nint PTR2 PTR2 foo )))) = 0;\n"
Line 1054
  "#define PTR1 (\n#define PTR2 PTR1 PTR1\nint PTR2 PTR2 foo )))) = 0;\n" always "#define PTR1 (\n#define PTR2 PTR1 PTR1\nint PTR2 PTR2 foo )))) = 0;\n"
Line 1057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1057 always 1057
  "\n\nint ( ( ( ( foo ) ) ) ) = 0 ;" always "\n\nint ( ( ( ( foo ) ) ) ) = 0 ;"
  filedata always "#define PTR1 (\n#define PTR2 PTR1 PTR1\nint PTR2 PTR2 foo )))) = 0;\n"
Line 1061
  26 always 26
  = always "#define PTR1 (\nPTR1 PTR1\n"
Line 1062
  "#define PTR1 (\nPTR1 PTR1\n" always "#define PTR1 (\nPTR1 PTR1\n"
Line 1064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1064 always 1064
  "\n( (" always "\n( ("
  filedata always "#define PTR1 (\nPTR1 PTR1\n"
Line 1069
  36 always 36
  = always "#define A(x) a##x\n#define B 0\nA(B)\n"
  "#define A(x) a##x\n#define B 0\nA(B)\n" always "#define A(x) a##x\n#define B 0\nA(B)\n"
Line 1072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1072 always 1072
  "\n\naB" always "\n\naB"
  filedata always "#define A(x) a##x\n#define B 0\nA(B)\n"
Line 1076
  32 always 32
  = always "#define AAA(a)\nAAA(5\n\n)\nint a;\n"
  "#define AAA(a)\nAAA(5\n\n)\nint a;\n" always "#define AAA(a)\nAAA(5\n\n)\nint a;\n"
Line 1081
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1081 always 1081
  "\n\n\n\nint a ;" always "\n\n\n\nint a ;"
  filedata always "#define AAA(a)\nAAA(5\n\n)\nint a;\n"
Line 1090
  31 always 31
  = always "#define AAA( ) { NULL }\nAAA()\n"
  "#define AAA( ) { NULL }\nAAA()\n" always "#define AAA( ) { NULL }\nAAA()\n"
Line 1092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1092 always 1092
  "\n{ NULL }" always "\n{ NULL }"
  filedata always "#define AAA( ) { NULL }\nAAA()\n"
Line 1096
  51 always 51
  = always "#define M1(X) 1+X\n#define M2(X) 2-X\nM1(+1) M2(-1)\n"
  "#define M1(X) 1+X\n#define M2(X) 2-X\nM1(+1) M2(-1)\n" always "#define M1(X) 1+X\n#define M2(X) 2-X\nM1(+1) M2(-1)\n"
Line 1099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1099 always 1099
  "\n\n1 + + 1 2 - - 1" always "\n\n1 + + 1 2 - - 1"
  filedata always "#define M1(X) 1+X\n#define M2(X) 2-X\nM1(+1) M2(-1)\n"
Line 1105
  55 always 55
  = always "#define A( b ) switch( a ){ case 2:  break; }\nA( 5 );\n"
  "#define A( b ) switch( a ){ case 2:  break; }\nA( 5 );\n" always "#define A( b ) switch( a ){ case 2:  break; }\nA( 5 );\n"
Line 1111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1111 always 1111
  "\nswitch ( a ) { case 2 : break ; } ;" always "\nswitch ( a ) { case 2 : break ; } ;"
  filedata always "#define A( b ) switch( a ){ case 2:  break; }\nA( 5 );\n"
Line 1116
  28 always 28
  = always "#define A() AA : 2 BB\nA();\n"
  "#define A() AA : 2 BB\nA();\n" always "#define A() AA : 2 BB\nA();\n"
Line 1118
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1118 always 1118
  "\nAA : 2 BB ;" always "\nAA : 2 BB ;"
  filedata always "#define A() AA : 2 BB\nA();\n"
Line 1122
  62 always 62
  = always "#define A }\n#define B() A\n#define C( a ) B() break;\n{C( 2 );\n"
  "#define A }\n#define B() A\n#define C( a ) B() break;\n{C( 2 );\n" always "#define A }\n#define B() A\n#define C( a ) B() break;\n{C( 2 );\n"
Line 1126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1126 always 1126
  "\n\n\n{ } break ; ;" always "\n\n\n{ } break ; ;"
  filedata always "#define A }\n#define B() A\n#define C( a ) B() break;\n{C( 2 );\n"
Line 1131
  63 always 63
  = always "#define A }\n#define B() A\n#define C( a ) B() _break;\n{C( 2 );\n"
  "#define A }\n#define B() A\n#define C( a ) B() _break;\n{C( 2 );\n" always "#define A }\n#define B() A\n#define C( a ) B() _break;\n{C( 2 );\n"
Line 1135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1135 always 1135
  "\n\n\n{ } _break ; ;" always "\n\n\n{ } _break ; ;"
  filedata always "#define A }\n#define B() A\n#define C( a ) B() _break;\n{C( 2 );\n"
Line 1140
  58 always 58
  = always "#define A }\n#define B() A\n#define C( a ) B() 5;\n{C( 2 );\n"
  "#define A }\n#define B() A\n#define C( a ) B() 5;\n{C( 2 );\n" always "#define A }\n#define B() A\n#define C( a ) B() 5;\n{C( 2 );\n"
Line 1144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1144 always 1144
  "\n\n\n{ } 5 ; ;" always "\n\n\n{ } 5 ; ;"
  filedata always "#define A }\n#define B() A\n#define C( a ) B() 5;\n{C( 2 );\n"
Line 1150
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1150 always 1150
  "\n0" always "\n0"
  "#define null 0\nnull" always "#define null 0\nnull"
Line 1151
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1151 always 1151
  "\nNULL" always "\nNULL"
  "\n0" always "\n0"
  "#define NULL 0\nNULL" always "#define NULL 0\nNULL"
Line 1155
  46 always 46
  = always "int main(){    const char *a = \"#define A\";}\n"
  "int main(){    const char *a = \"#define A\";}\n" always "int main(){    const char *a = \"#define A\";}\n"
Line 1162
  filedata always "int main(){    const char *a = \"#define A\";}\n"
  actual always size=0
Line 1165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1165 always 1165
  1 always 1
  ( always !<=-1
Line 1166
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1166 always 1166
  "int main ( ) { const char * a = \"#define A\" ; }" always "int main ( ) { const char * a = \"#define A\" ; }"
  "" always ""
Line 1170
  29 always 29
  = always "#define AAA 123\nstr = \"AAA\"\n"
  "#define AAA 123\nstr = \"AAA\"\n" always "#define AAA 123\nstr = \"AAA\"\n"
Line 1174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1174 always 1174
  "\nstr = \"AAA\"" always "\nstr = \"AAA\""
  filedata always "#define AAA 123\nstr = \"AAA\"\n"
Line 1178
  11 always 11
  = always "str(\";\");\n"
  "str(\";\");\n" always "str(\";\");\n"
Line 1181
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1181 always 1181
  "str ( \";\" ) ;" always "str ( \";\" ) ;"
  filedata always "str(\";\");\n"
Line 1187
  57 always 57
  = always "#define AAA int a;\n#undef AAA\n#define AAA char b=0;\nAAA\n"
  "#define AAA int a;\n#undef AAA\n#define AAA char b=0;\nAAA\n" always "#define AAA int a;\n#undef AAA\n#define AAA char b=0;\nAAA\n"
Line 1193
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1193 always 1193
  "\n\n\nchar b = 0 ;" always "\n\n\nchar b = 0 ;"
  filedata always "#define AAA int a;\n#undef AAA\n#define AAA char b=0;\nAAA\n"
Line 1198
  39 always 39
  = always "#define z p[2]\n#undef z\nint z;\nz = 0;\n"
  "#define z p[2]\n#undef z\nint z;\nz = 0;\n" always "#define z p[2]\n#undef z\nint z;\nz = 0;\n"
Line 1202
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1202 always 1202
  "\n\nint z ;\nz = 0 ;" always "\n\nint z ;\nz = 0 ;"
  filedata always "#define z p[2]\n#undef z\nint z;\nz = 0;\n"
  "" always ""
  "" always ""
Line 1207
  53 always 53
  = always "#define AAA 123\n#define AAA 456\n#define AAA 789\nAAA\n"
  "#define AAA 123\n#define AAA 456\n#define AAA 789\nAAA\n" always "#define AAA 123\n#define AAA 456\n#define AAA 789\nAAA\n"
Line 1213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1213 always 1213
  "\n\n\n789" always "\n\n\n789"
  filedata always "#define AAA 123\n#define AAA 456\n#define AAA 789\nAAA\n"
Line 1218
  47 always 47
  = always "#define TEST(var,val) var = val\nTEST(foo,20);\n"
  "#define TEST(var,val) var = val\nTEST(foo,20);\n" always "#define TEST(var,val) var = val\nTEST(foo,20);\n"
Line 1220
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1220 always 1220
  "\nfoo = 20 ;" always "\nfoo = 20 ;"
  filedata1 always "#define TEST(var,val) var = val\nTEST(foo,20);\n"
Line 1223
  55 always 55
  = always "#define TEST(var,val) var##_##val = val\nTEST(foo,20);\n"
  "#define TEST(var,val) var##_##val = val\nTEST(foo,20);\n" always "#define TEST(var,val) var##_##val = val\nTEST(foo,20);\n"
Line 1225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1225 always 1225
  "\nfoo_20 = 20 ;" always "\nfoo_20 = 20 ;"
  filedata2 always "#define TEST(var,val) var##_##val = val\nTEST(foo,20);\n"
Line 1228
  43 always 43
  = always "#define ABCD 123\n#define A(B) A##B\nA(BCD)\n"
  "#define ABCD 123\n#define A(B) A##B\nA(BCD)\n" always "#define ABCD 123\n#define A(B) A##B\nA(BCD)\n"
Line 1231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1231 always 1231
  "\n\n123" always "\n\n123"
  filedata3 always "#define ABCD 123\n#define A(B) A##B\nA(BCD)\n"
Line 1234
  45 always 45
  = always "#define A(B) A##B\n#define a(B) A(B)\na(A(B))\n"
  "#define A(B) A##B\n#define a(B) A(B)\na(A(B))\n" always "#define A(B) A##B\n#define a(B) A(B)\na(A(B))\n"
Line 1237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1237 always 1237
  "\n\nAAB" always "\n\nAAB"
  filedata4 always "#define A(B) A##B\n#define a(B) A(B)\na(A(B))\n"
Line 1240
  60 always 60
  = always "#define AB(A,B) A##B\n#define ab(A,B) AB(A,B)\nab(a,AB(b,c))\n"
  "#define AB(A,B) A##B\n#define ab(A,B) AB(A,B)\nab(a,AB(b,c))\n" always "#define AB(A,B) A##B\n#define ab(A,B) AB(A,B)\nab(a,AB(b,c))\n"
Line 1243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1243 always 1243
  "\n\nabc" always "\n\nabc"
  filedata5 always "#define AB(A,B) A##B\n#define ab(A,B) AB(A,B)\nab(a,AB(b,c))\n"
Line 1246
  103 always 103
  = always "#define AB_(A,B) A ## B\n#define AB(A,B) AB_(A,B)\n#define ab(suf) AB(X, AB_(_, suf))\n#define X x\nab(y)\n"
  "#define AB_(A,B) A ## B\n#define AB(A,B) AB_(A,B)\n#define ab(suf) AB(X, AB_(_, suf))\n#define X x\nab(y)\n" always "#define AB_(A,B) A ## B\n#define AB(A,B) AB_(A,B)\n#define ab(suf) AB(X, AB_(_, suf))\n#define X x\nab(y)\n"
Line 1251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1251 always 1251
  "\n\n\n\nx_y" always "\n\n\n\nx_y"
  filedata6 always "#define AB_(A,B) A ## B\n#define AB(A,B) AB_(A,B)\n#define ab(suf) AB(X, AB_(_, suf))\n#define X x\nab(y)\n"
Line 1257
  63 always 63
  = always "int main()\n{\nconst char *a = \"#include <string>\";\nreturn 0;\n}\n"
  "int main()\n{\nconst char *a = \"#include <string>\";\nreturn 0;\n}\n" always "int main()\n{\nconst char *a = \"#include <string>\";\nreturn 0;\n}\n"
Line 1265
  filedata always "int main()\n{\nconst char *a = \"#include <string>\";\nreturn 0;\n}\n"
  actual always size=0
Line 1268
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1268 always 1268
  1 always 1
  ( always !<=-1
Line 1269
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1269 always 1269
  "int main ( )\n{\nconst char * a = \"#include <string>\" ;\nreturn 0 ;\n}" always "int main ( )\n{\nconst char * a = \"#include <string>\" ;\nreturn 0 ;\n}"
  "" always ""
Line 1276
  69 always 69
  = always "#define DBG(fmt...) printf(fmt)\nDBG(\"[0x%lx-0x%lx)\", pstart, pend);\n"
  "#define DBG(fmt...) printf(fmt)\nDBG(\"[0x%lx-0x%lx)\", pstart, pend);\n" always "#define DBG(fmt...) printf(fmt)\nDBG(\"[0x%lx-0x%lx)\", pstart, pend);\n"
Line 1280
  filedata always "#define DBG(fmt...) printf(fmt)\nDBG(\"[0x%lx-0x%lx)\", pstart, pend);\n"
Line 1282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1282 always 1282
  "\nprintf ( \"[0x%lx-0x%lx)\" , pstart , pend ) ;" always "\nprintf ( \"[0x%lx-0x%lx)\" , pstart , pend ) ;"
Line 1296
  52 always 52
  = always "#define FRED(...) { fred(__VA_ARGS__); }\nFRED(123)\n"
  "#define FRED(...) { fred(__VA_ARGS__); }\nFRED(123)\n" always "#define FRED(...) { fred(__VA_ARGS__); }\nFRED(123)\n"
Line 1298
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1298 always 1298
  "\n{ fred ( 123 ) ; }" always "\n{ fred ( 123 ) ; }"
  filedata always "#define FRED(...) { fred(__VA_ARGS__); }\nFRED(123)\n"
Line 1302
  59 always 59
  = always "#define FRED(name, ...) name (__VA_ARGS__)\nFRED(abc, 123)\n"
  "#define FRED(name, ...) name (__VA_ARGS__)\nFRED(abc, 123)\n" always "#define FRED(name, ...) name (__VA_ARGS__)\nFRED(abc, 123)\n"
Line 1304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1304 always 1304
  "\nabc ( 123 )" always "\nabc ( 123 )"
  filedata always "#define FRED(name, ...) name (__VA_ARGS__)\nFRED(abc, 123)\n"
Line 1308
  36 always 36
  = always "#define A(...) #__VA_ARGS__\nA(123)\n"
  "#define A(...) #__VA_ARGS__\nA(123)\n" always "#define A(...) #__VA_ARGS__\nA(123)\n"
Line 1310
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1310 always 1310
  "\n\"123\"" always "\n\"123\""
  filedata1 always "#define A(...) #__VA_ARGS__\nA(123)\n"
Line 1312
  43 always 43
  = always "#define A(X,...) X(#__VA_ARGS__)\nA(f,123)\n"
  "#define A(X,...) X(#__VA_ARGS__)\nA(f,123)\n" always "#define A(X,...) X(#__VA_ARGS__)\nA(f,123)\n"
Line 1314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1314 always 1314
  "\nf ( \"123\" )" always "\nf ( \"123\" )"
  filedata2 always "#define A(X,...) X(#__VA_ARGS__)\nA(f,123)\n"
Line 1320
  61 always 61
  = always "#define FOO 'ABCD'\nint main()\n{\nif( FOO == 0 );\nreturn 0;\n}\n"
  "#define FOO 'ABCD'\nint main()\n{\nif( FOO == 0 );\nreturn 0;\n}\n" always "#define FOO 'ABCD'\nint main()\n{\nif( FOO == 0 );\nreturn 0;\n}\n"
Line 1329
  filedata always "#define FOO 'ABCD'\nint main()\n{\nif( FOO == 0 );\nreturn 0;\n}\n"
  actual always size=0
Line 1332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1332 always 1332
  1 always 1
  ( always !<=-1
Line 1333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1333 always 1333
  "\nint main ( )\n{\nif ( $'ABCD' == 0 ) ;\nreturn 0 ;\n}" always "\nint main ( )\n{\nif ( $'ABCD' == 0 ) ;\nreturn 0 ;\n}"
  "" always ""
Line 1338
  40 always 40
  = always "#define STRINGIFY(x) #x\nSTRINGIFY(abc)\n"
  "#define STRINGIFY(x) #x\nSTRINGIFY(abc)\n" always "#define STRINGIFY(x) #x\nSTRINGIFY(abc)\n"
Line 1342
  filedata always "#define STRINGIFY(x) #x\nSTRINGIFY(abc)\n"
Line 1344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1344 always 1344
  "\n\"abc\"" always "\n\"abc\""
Line 1348
  28 always 28
  = always "#define A(x) g(#x)\nA(abc);\n"
  "#define A(x) g(#x)\nA(abc);\n" always "#define A(x) g(#x)\nA(abc);\n"
Line 1352
  filedata always "#define A(x) g(#x)\nA(abc);\n"
Line 1354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1354 always 1354
  "\ng ( \"abc\" ) ;" always "\ng ( \"abc\" ) ;"
Line 1358
  29 always 29
  = always "#define A(x) g(#x)\nA( abc);\n"
  "#define A(x) g(#x)\nA( abc);\n" always "#define A(x) g(#x)\nA( abc);\n"
Line 1362
  filedata always "#define A(x) g(#x)\nA( abc);\n"
Line 1364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1364 always 1364
  "\ng ( \"abc\" ) ;" always "\ng ( \"abc\" ) ;"
Line 1368
  30 always 30
  = always "#define A(x) #x\n1 A(\nabc\n) 2\n"
  "#define A(x) #x\n1 A(\nabc\n) 2\n" always "#define A(x) #x\n1 A(\nabc\n) 2\n"
Line 1374
  filedata always "#define A(x) #x\n1 A(\nabc\n) 2\n"
Line 1376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1376 always 1376
  "\n1 \"abc\"\n\n2" always "\n1 \"abc\"\n\n2"
Line 1380
  35 always 35
  = always "#define A(x) a(#x,x)\nA(foo(\"\\\"\"))\n"
  "#define A(x) a(#x,x)\nA(foo(\"\\\"\"))\n" always "#define A(x) a(#x,x)\nA(foo(\"\\\"\"))\n"
Line 1382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1382 always 1382
  "\na ( \"foo(\\\"\\\\\\\"\\\")\" , foo ( \"\\\"\" ) )" always "\na ( \"foo(\\\"\\\\\\\"\\\")\" , foo ( \"\\\"\" ) )"
  filedata always "#define A(x) a(#x,x)\nA(foo(\"\\\"\"))\n"
Line 1386
  27 always 27
  = always "#pragma once\nvoid f()\n{\n}\n"
  "#pragma once\nvoid f()\n{\n}\n" always "#pragma once\nvoid f()\n{\n}\n"
Line 1393
  filedata always "#pragma once\nvoid f()\n{\n}\n"
  actual always size=0
Line 1396
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1396 always 1396
  1 always 1
  ( always !<=-1
Line 1397
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1397 always 1397
  "\nvoid f ( )\n{\n}" always "\nvoid f ( )\n{\n}"
  "" always ""
Line 1401
  100 always 100
  = always "#pragma asm\n    mov r1, 11\n#pragma endasm\naaa\n#pragma asm foo\n    mov r1, 11\n#pragma endasm bar\nbbb"
  "#pragma asm\n    mov r1, 11\n#pragma endasm\naaa\n#pragma asm foo\n    mov r1, 11\n#pragma endasm bar\nbbb" always "#pragma asm\n    mov r1, 11\n#pragma endasm\naaa\n#pragma asm foo\n    mov r1, 11\n#pragma endasm bar\nbbb"
Line 1412
  filedata always "#pragma asm\n    mov r1, 11\n#pragma endasm\naaa\n#pragma asm foo\n    mov r1, 11\n#pragma endasm bar\nbbb"
  actual always size=0
Line 1415
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1415 always 1415
  1 always 1
  ( always !<=-1
Line 1416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1416 always 1416
  "asm ( )\n;\n\naaa\nasm ( ) ;\n\n\nbbb" always "asm ( )\n;\n\naaa\nasm ( ) ;\n\n\nbbb"
  "" always ""
Line 1420
  60 always 60
  = always "#pragma asm\n    mov @w1, 11\n#pragma endasm ( temp=@w1 )\nbbb"
  "#pragma asm\n    mov @w1, 11\n#pragma endasm ( temp=@w1 )\nbbb" always "#pragma asm\n    mov @w1, 11\n#pragma endasm ( temp=@w1 )\nbbb"
Line 1427
  filedata always "#pragma asm\n    mov @w1, 11\n#pragma endasm ( temp=@w1 )\nbbb"
  actual always size=0
Line 1430
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1430 always 1430
  1 always 1
  ( always !<=-1
Line 1431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1431 always 1431
  "asm ( )\n;\n\nbbb" always "asm ( )\n;\n\nbbb"
  "" always ""
Line 1435
  31 always 31
  = always "void f() {\n#ifdef A\n#endif;\n}\n"
  "void f() {\n#ifdef A\n#endif;\n}\n" always "void f() {\n#ifdef A\n#endif;\n}\n"
Line 1442
  filedata always "void f() {\n#ifdef A\n#endif;\n}\n"
  actual always size=0
Line 1445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1445 always 1445
  2 always 2
  ( always !<=-1
Line 1446
  "void f ( ) {\n\n\n}" always "void f ( ) {\n\n\n}"
Line 1447
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1447 always 1447
  "" always ""
Line 1448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1448 always 1448
  "A" always "A"
Line 1453
  82 always 82
  = always "#define A \n#define B don't want to \\\nmore text\nvoid f()\n{\n  char a = 'a'; // '\n}\n"
  "#define A \n#define B don't want to \\\nmore text\nvoid f()\n{\n  char a = 'a'; // '\n}\n" always "#define A \n#define B don't want to \\\nmore text\nvoid f()\n{\n  char a = 'a'; // '\n}\n"
Line 1463
  filedata always "#define A \n#define B don't want to \\\nmore text\nvoid f()\n{\n  char a = 'a'; // '\n}\n"
  actual always size=0
Line 1465
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1465 always 1465
  "" always ""
  "" always ""
Line 1466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1466 always 1466
  "" always ""
Line 1472
  29 always 29
  = always "#define a\n#ifdef 1\n\"\n#endif\n"
  "#define a\n#ifdef 1\n\"\n#endif\n" always "#define a\n#ifdef 1\n\"\n#endif\n"
Line 1478
  "" always ""
Line 1479
  filedata always "#define a\n#ifdef 1\n\"\n#endif\n"
  this always !0
Line 1481
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1481 always 1481
  "" always ""
Line 1482
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1482 always 1482
  "[file.cpp:3]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" always "[file.cpp:3]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n"
Line 1486
  36 always 36
  = always "#file \"abc.h\"\n#define a\n\"\n#endfile\n"
  "#file \"abc.h\"\n#define a\n\"\n#endfile\n" always "#file \"abc.h\"\n#define a\n\"\n#endfile\n"
Line 1492
  "" always ""
Line 1493
  filedata always "#file \"abc.h\"\n#define a\n\"\n#endfile\n"
  this always !0
Line 1495
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1495 always 1495
  "" always ""
Line 1496
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1496 always 1496
  "[abc.h:2]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" always "[abc.h:2]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n"
Line 1500
  36 always 36
  = always "#file \"abc.h\"\n#define a\n#endfile\n\"\n"
  "#file \"abc.h\"\n#define a\n#endfile\n\"\n" always "#file \"abc.h\"\n#define a\n#endfile\n\"\n"
Line 1506
  "" always ""
Line 1507
  filedata always "#file \"abc.h\"\n#define a\n#endfile\n\"\n"
  this always !0
Line 1509
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1509 always 1509
  "" always ""
Line 1510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1510 always 1510
  "[file.cpp:2]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" always "[file.cpp:2]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n"
Line 1514
  36 always 36
  = always "#define A 1\n#define B \"\nint a = A;\n"
  "#define A 1\n#define B \"\nint a = A;\n" always "#define A 1\n#define B \"\nint a = A;\n"
Line 1519
  "" always ""
Line 1520
  filedata always "#define A 1\n#define B \"\nint a = A;\n"
  this always !0
Line 1522
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1522 always 1522
  "" always ""
Line 1523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1523 always 1523
  "[file.cpp:2]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" always "[file.cpp:2]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n"
Line 1527
  45 always 45
  = always "void foo()\n{\n\n\n\nint a = 0;\nprintf(Text\");\n}\n"
  "void foo()\n{\n\n\n\nint a = 0;\nprintf(Text\");\n}\n" always "void foo()\n{\n\n\n\nint a = 0;\nprintf(Text\");\n}\n"
Line 1537
  "" always ""
Line 1538
  filedata always "void foo()\n{\n\n\n\nint a = 0;\nprintf(Text\");\n}\n"
  this always !0
Line 1540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1540 always 1540
  "[file.cpp:7]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n" always "[file.cpp:7]: (error) No pair for character (\"). Can't process file. File is either invalid or unicode, which is currently not supported.\n"
Line 1546
  36 always 36
  = always "#define A g(\nvoid f() {\n  A );\n  }\n"
  "#define A g(\nvoid f() {\n  A );\n  }\n" always "#define A g(\nvoid f() {\n  A );\n  }\n"
Line 1553
  filedata always "#define A g(\nvoid f() {\n  A );\n  }\n"
  actual always size=0
Line 1556
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1556 always 1556
  1 always 1
  ( always !<=-1
Line 1557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1557 always 1557
  "\nvoid f ( ) {\n$g $( ) ;\n}" always "\nvoid f ( ) {\n$g $( ) ;\n}"
  "" always ""
Line 1558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1558 always 1558
  "" always ""
Line 1562
  50 always 50
  = always "#ifdef A\n#define N 10\n#else\n#define N 20\n#endif\nN"
  "#ifdef A\n#define N 10\n#else\n#define N 20\n#endif\nN" always "#ifdef A\n#define N 10\n#else\n#define N 20\n#endif\nN"
Line 1571
  filedata always "#ifdef A\n#define N 10\n#else\n#define N 20\n#endif\nN"
  actual always size=0
Line 1574
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1574 always 1574
  2 always 2
  ( always !<=-1
Line 1575
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1575 always 1575
  "\n\n\n\n\n$20" always "\n\n\n\n\n$20"
  "" always ""
Line 1576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1576 always 1576
  "\n\n\n\n\n$10" always "\n\n\n\n\n$10"
  "A" always "A"
Line 1577
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1577 always 1577
  "" always ""
Line 1581
  "" always ""
Line 1582
  74 always 74
  = always "#define BC(a, b, c, arg...) \\\nAB(a, b, c, ## arg)\n\nvoid f()\n{\n  BC(3);\n}\n"
  "#define BC(a, b, c, arg...) \\\nAB(a, b, c, ## arg)\n\nvoid f()\n{\n  BC(3);\n}\n" always "#define BC(a, b, c, arg...) \\\nAB(a, b, c, ## arg)\n\nvoid f()\n{\n  BC(3);\n}\n"
Line 1592
  filedata always "#define BC(a, b, c, arg...) \\\nAB(a, b, c, ## arg)\n\nvoid f()\n{\n  BC(3);\n}\n"
  actual always size=0
Line 1595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1595 always 1595
  1 always 1
  ( always !<=-1
Line 1596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1596 always 1596
  "" always ""
  "" always ""
Line 1597
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1597 always 1597
  "[file.c:6]: (error) failed to expand 'BC', Wrong number of parameters for macro 'BC'.\n" always "[file.c:6]: (error) failed to expand 'BC', Wrong number of parameters for macro 'BC'.\n"
Line 1601
  58 always 58
  = always "#define ABC(str) printf( str )\nvoid f()\n{\n  ABC(\"\\n\");\n}\n"
  "#define ABC(str) printf( str )\nvoid f()\n{\n  ABC(\"\\n\");\n}\n" always "#define ABC(str) printf( str )\nvoid f()\n{\n  ABC(\"\\n\");\n}\n"
Line 1609
  filedata always "#define ABC(str) printf( str )\nvoid f()\n{\n  ABC(\"\\n\");\n}\n"
  actual always size=0
Line 1612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1612 always 1612
  1 always 1
  ( always !<=-1
Line 1613
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1613 always 1613
  "\nvoid f ( )\n{\n$printf $( \"\\n\" $) ;\n}" always "\nvoid f ( )\n{\n$printf $( \"\\n\" $) ;\n}"
  "" always ""
Line 1614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1614 always 1614
  "" always ""
Line 1618
  47 always 47
  = always "#ifdef ABC\nA\n#endif\t\n#if defined ABC\nA\n#endif\n"
  "#ifdef ABC\nA\n#endif\t\n#if defined ABC\nA\n#endif\n" always "#ifdef ABC\nA\n#endif\t\n#if defined ABC\nA\n#endif\n"
Line 1627
  filedata always "#ifdef ABC\nA\n#endif\t\n#if defined ABC\nA\n#endif\n"
  actual always size=0
Line 1630
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1630 always 1630
  "" always ""
  "" always ""
Line 1631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1631 always 1631
  "\nA\n\n\nA" always "\nA\n\n\nA"
  "ABC" always "ABC"
Line 1632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1632 always 1632
  2 always 2
  ( always !<=-1
Line 1637
  29 always 29
  = always "#define A 0\n#if A\nFOO\n#endif"
  "#define A 0\n#if A\nFOO\n#endif" always "#define A 0\n#if A\nFOO\n#endif"
Line 1641
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1641 always 1641
  "" always ""
  filedata always "#define A 0\n#if A\nFOO\n#endif"
  "" always ""
  "" always ""
Line 1644
  32 always 32
  = always "#define A 1\n#if A==1\nFOO\n#endif"
  "#define A 1\n#if A==1\nFOO\n#endif" always "#define A 1\n#if A==1\nFOO\n#endif"
Line 1648
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1648 always 1648
  "\n\nFOO" always "\n\nFOO"
  filedata always "#define A 1\n#if A==1\nFOO\n#endif"
  "" always ""
  "" always ""
Line 1653
  57 always 57
  = always "#define A 22\n#define B A\n#if (B==A) || (B==C)\nFOO\n#endif"
  "#define A 22\n#define B A\n#if (B==A) || (B==C)\nFOO\n#endif" always "#define A 22\n#define B A\n#if (B==A) || (B==C)\nFOO\n#endif"
Line 1658
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1658 always 1658
  "\n\n\nFOO" always "\n\n\nFOO"
  filedata always "#define A 22\n#define B A\n#if (B==A) || (B==C)\nFOO\n#endif"
  "" always ""
  "" always ""
Line 1662
  34 always 34
  = always "#define A 0\n#if (A==0)\nFOO\n#endif"
  "#define A 0\n#if (A==0)\nFOO\n#endif" always "#define A 0\n#if (A==0)\nFOO\n#endif"
Line 1666
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1666 always 1666
  "\n\nFOO" always "\n\nFOO"
  filedata always "#define A 0\n#if (A==0)\nFOO\n#endif"
  "" always ""
  "" always ""
Line 1670
  37 always 37
  = always "#define X +123\n#if X==123\nFOO\n#endif"
  "#define X +123\n#if X==123\nFOO\n#endif" always "#define X +123\n#if X==123\nFOO\n#endif"
Line 1674
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1674 always 1674
  "\n\nFOO" always "\n\nFOO"
  filedata always "#define X +123\n#if X==123\nFOO\n#endif"
  "" always ""
  "" always ""
Line 1679
  65 always 65
  = always "#define A 0x0010\n#define B (A & 0x00f0)\n#if B==0x0010\nFOO\n#endif"
  "#define A 0x0010\n#define B (A & 0x00f0)\n#if B==0x0010\nFOO\n#endif" always "#define A 0x0010\n#define B (A & 0x00f0)\n#if B==0x0010\nFOO\n#endif"
Line 1684
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1684 always 1684
  "\n\n\nFOO" always "\n\n\nFOO"
  filedata always "#define A 0x0010\n#define B (A & 0x00f0)\n#if B==0x0010\nFOO\n#endif"
  "" always ""
  "" always ""
Line 1687
  75 always 75
  = always "#define A 0x00f0\n#define B (16)\n#define C (B & A)\n#if C==0x0010\nFOO\n#endif"
  "#define A 0x00f0\n#define B (16)\n#define C (B & A)\n#if C==0x0010\nFOO\n#endif" always "#define A 0x00f0\n#define B (16)\n#define C (B & A)\n#if C==0x0010\nFOO\n#endif"
Line 1693
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1693 always 1693
  "\n\n\n\nFOO" always "\n\n\n\nFOO"
  filedata always "#define A 0x00f0\n#define B (16)\n#define C (B & A)\n#if C==0x0010\nFOO\n#endif"
  "" always ""
  "" always ""
Line 1696
  36 always 36
  = always "#define A (1+A)\n#if A==1\nFOO\n#endif"
  "#define A (1+A)\n#if A==1\nFOO\n#endif" always "#define A (1+A)\n#if A==1\nFOO\n#endif"
Line 1700
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1700 always 1700
  "\n\nFOO" always "\n\nFOO"
  filedata always "#define A (1+A)\n#if A==1\nFOO\n#endif"
  "" always ""
  "" always ""
Line 1705
  81 always 81
  = always "#ifdef A\n#define B (A?1:-1)\n#endif\n\n#if B < 0\n123\n#endif\n\n#if B >= 0\n456\n#endif\n"
  "#ifdef A\n#define B (A?1:-1)\n#endif\n\n#if B < 0\n123\n#endif\n\n#if B >= 0\n456\n#endif\n" always "#ifdef A\n#define B (A?1:-1)\n#endif\n\n#if B < 0\n123\n#endif\n\n#if B >= 0\n456\n#endif\n"
Line 1716
  filedata always "#ifdef A\n#define B (A?1:-1)\n#endif\n\n#if B < 0\n123\n#endif\n\n#if B >= 0\n456\n#endif\n"
  "A=0" always "A=0"
  "test.c" always "test.c"
Line 1717
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1717 always 1717
  true always 1
  ( always !<=-1
  "123" always "123"
  != always {!<=-1,!>=2}
Line 1718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1718 always 1718
  false always 0
  ( always !<=-1
  "456" always "456"
  != always {!<=-1,!>=2}
Line 1719
  filedata always "#ifdef A\n#define B (A?1:-1)\n#endif\n\n#if B < 0\n123\n#endif\n\n#if B >= 0\n456\n#endif\n"
  "A=1" always "A=1"
  "test.c" always "test.c"
Line 1720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1720 always 1720
  false always 0
  ( always !<=-1
  "123" always "123"
  != always {!<=-1,!>=2}
Line 1721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1721 always 1721
  true always 1
  ( always !<=-1
  "456" always "456"
  != always {!<=-1,!>=2}
Line 1726
  42 always 42
  = always "#define ABC\n#ifndef ABC\nA\n#else\nB\n#endif\n"
  "#define ABC\n#ifndef ABC\nA\n#else\nB\n#endif\n" always "#define ABC\n#ifndef ABC\nA\n#else\nB\n#endif\n"
Line 1735
  filedata always "#define ABC\n#ifndef ABC\nA\n#else\nB\n#endif\n"
  actual always size=0
Line 1738
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1738 always 1738
  1 always 1
  ( always !<=-1
Line 1739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1739 always 1739
  "\n\n\n\nB" always "\n\n\n\nB"
  "" always ""
Line 1743
  31 always 31
  = always "#define A 1\n#ifdef A\nA\n#endif\n"
  "#define A 1\n#ifdef A\nA\n#endif\n" always "#define A 1\n#ifdef A\nA\n#endif\n"
Line 1750
  filedata always "#define A 1\n#ifdef A\nA\n#endif\n"
  actual always size=0
Line 1753
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1753 always 1753
  1 always 1
  ( always !<=-1
Line 1754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1754 always 1754
  "\n\n$1" always "\n\n$1"
  "" always ""
Line 1758
  31 always 31
  = always "#define A 1\n#if A==1\nA\n#endif\n"
  "#define A 1\n#if A==1\nA\n#endif\n" always "#define A 1\n#if A==1\nA\n#endif\n"
Line 1765
  filedata always "#define A 1\n#if A==1\nA\n#endif\n"
  actual always size=0
Line 1768
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1768 always 1768
  1 always 1
  ( always !<=-1
Line 1769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1769 always 1769
  "\n\n$1" always "\n\n$1"
  "" always ""
Line 1773
  30 always 30
  = always "#define A 1\n#if A>0\nA\n#endif\n"
  "#define A 1\n#if A>0\nA\n#endif\n" always "#define A 1\n#if A>0\nA\n#endif\n"
Line 1780
  filedata always "#define A 1\n#if A>0\nA\n#endif\n"
  actual always size=0
Line 1783
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1783 always 1783
  1 always 1
  ( always !<=-1
Line 1784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1784 always 1784
  "\n\n$1" always "\n\n$1"
  "" always ""
Line 1788
  37 always 37
  = always "#define A 1\n#if 0\n#undef A\n#endif\nA\n"
  "#define A 1\n#if 0\n#undef A\n#endif\nA\n" always "#define A 1\n#if 0\n#undef A\n#endif\nA\n"
Line 1796
  filedata always "#define A 1\n#if 0\n#undef A\n#endif\nA\n"
  actual always size=0
Line 1799
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1799 always 1799
  1 always 1
  ( always !<=-1
Line 1800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1800 always 1800
  "\n\n\n\n$1" always "\n\n\n\n$1"
  "" always ""
Line 1805
  37 always 37
  = always "#define A(x) (x)\n#ifndef A\n;\n#endif\n"
  "#define A(x) (x)\n#ifndef A\n;\n#endif\n" always "#define A(x) (x)\n#ifndef A\n;\n#endif\n"
Line 1812
  filedata always "#define A(x) (x)\n#ifndef A\n;\n#endif\n"
  actual always size=0
Line 1815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1815 always 1815
  1U always 1
  ( always !<=-1
Line 1816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1816 always 1816
  "" always ""
  "" always ""
Line 1820
  69 always 69
  = always "#ifdef A\n#define B char\n#endif\n#ifndef B\n#define B int\n#endif\nB me;\n"
  "#ifdef A\n#define B char\n#endif\n#ifndef B\n#define B int\n#endif\nB me;\n" always "#ifdef A\n#define B char\n#endif\n#ifndef B\n#define B int\n#endif\nB me;\n"
Line 1829
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1829 always 1829
  "\n\n\n\n\n\n$int me ;" always "\n\n\n\n\n\n$int me ;"
  filedata always "#ifdef A\n#define B char\n#endif\n#ifndef B\n#define B int\n#endif\nB me;\n"
  "" always ""
  "a.cpp" always "a.cpp"
Line 1830
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1830 always 1830
  "\n\n\n\n\n\n$char me ;" always "\n\n\n\n\n\n$char me ;"
  filedata always "#ifdef A\n#define B char\n#endif\n#ifndef B\n#define B int\n#endif\nB me;\n"
  "A" always "A"
  "a.cpp" always "a.cpp"
Line 1834
  40 always 40
  = always "#ifndef A\n#define A(x) x\n#endif\nA(123);"
  "#ifndef A\n#define A(x) x\n#endif\nA(123);" always "#ifndef A\n#define A(x) x\n#endif\nA(123);"
Line 1841
  filedata always "#ifndef A\n#define A(x) x\n#endif\nA(123);"
  actual always size=0
Line 1843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1843 always 1843
  1U always 1
  ( always !<=-1
Line 1844
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1844 always 1844
  "\n\n\n123 ;" always "\n\n\n123 ;"
  "" always ""
Line 1848
  30 always 30
  = always "#undef A\n#ifdef A\n123\n#endif\n"
  "#undef A\n#ifdef A\n123\n#endif\n" always "#undef A\n#ifdef A\n123\n#endif\n"
Line 1854
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1854 always 1854
  "" always ""
  filedata always "#undef A\n#ifdef A\n123\n#endif\n"
  "" always ""
  "a.cpp" always "a.cpp"
Line 1855
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1855 always 1855
  "" always ""
  filedata always "#undef A\n#ifdef A\n123\n#endif\n"
  "A" always "A"
  "a.cpp" always "a.cpp"
Line 1859
  129 always 129
  = always "int main() {\n#ifdef FOO\n#ifdef BAR\n    std::cout << 1;\n#endif\n#endif\n\n#ifdef BAR\n#ifdef FOO\n    std::cout << 2;\n#endif\n#endif\n}\n"
  "int main() {\n#ifdef FOO\n#ifdef BAR\n    std::cout << 1;\n#endif\n#endif\n\n#ifdef BAR\n#ifdef FOO\n    std::cout << 2;\n#endif\n#endif\n}\n" always "int main() {\n#ifdef FOO\n#ifdef BAR\n    std::cout << 1;\n#endif\n#endif\n\n#ifdef BAR\n#ifdef FOO\n    std::cout << 2;\n#endif\n#endif\n}\n"
Line 1876
  filedata always "int main() {\n#ifdef FOO\n#ifdef BAR\n    std::cout << 1;\n#endif\n#endif\n\n#ifdef BAR\n#ifdef FOO\n    std::cout << 2;\n#endif\n#endif\n}\n"
  actual always size=0
Line 1879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1879 always 1879
  4 always 4
  ( always !<=-1
Line 1880
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1880 always 1880
  ( possible lifetime[Iterator]=(actual)
  "" always ""
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(actual),end=0}
Line 1881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1881 always 1881
  ( possible lifetime[Iterator]=(actual)
  "BAR" always "BAR"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(actual),end=0}
Line 1882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1882 always 1882
  ( possible lifetime[Iterator]=(actual)
  "FOO" always "FOO"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(actual),end=0}
Line 1883
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1883 always 1883
  ( possible lifetime[Iterator]=(actual)
  "BAR;FOO" always "BAR;FOO"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(actual),end=0}
Line 1888
  69 always 69
  = always "char a[] = \"#endfile\";\nchar b[] = \"#endfile\";\n#include \"notfound.h\"\n"
  "char a[] = \"#endfile\";\nchar b[] = \"#endfile\";\n#include \"notfound.h\"\n" always "char a[] = \"#endfile\";\nchar b[] = \"#endfile\";\n#include \"notfound.h\"\n"
Line 1894
  filedata always "char a[] = \"#endfile\";\nchar b[] = \"#endfile\";\n#include \"notfound.h\"\n"
  actual always size=0
Line 1897
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1897 always 1897
  "char a [ ] = \"#endfile\" ;\nchar b [ ] = \"#endfile\" ;" always "char a [ ] = \"#endfile\" ;\nchar b [ ] = \"#endfile\" ;"
  "" always ""
Line 1898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1898 always 1898
  1 always 1
  ( always !<=-1
Line 1902
  73 always 73
  = always "#ifdef A\n#define B\n#if defined(B) && defined(A)\na\n#else\nb\n#endif\n#endif\n"
  "#ifdef A\n#define B\n#if defined(B) && defined(A)\na\n#else\nb\n#endif\n#endif\n" always "#ifdef A\n#define B\n#if defined(B) && defined(A)\na\n#else\nb\n#endif\n#endif\n"
Line 1913
  filedata always "#ifdef A\n#define B\n#if defined(B) && defined(A)\na\n#else\nb\n#endif\n#endif\n"
  actual always size=0
Line 1917
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1917 always 1917
  2U always 2
  ( always !<=-1
Line 1919
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1919 always 1919
  true always 1
  ( possible lifetime[Iterator]=(actual)
  "A" always "A"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(actual),end=0}
  "A is expected to be checked but it was not checked" always "A is expected to be checked but it was not checked"
Line 1921
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1921 always 1921
  true always 1
  ( possible lifetime[Iterator]=(actual)
  "A;A;B" always "A;A;B"
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(actual),end=0}
  "A;A;B is expected to NOT be checked but it was checked" always "A;A;B is expected to NOT be checked but it was checked"
Line 1926
  "#define =\n" always "#define =\n"
  actual always size=0
Line 1931
  "#define () {(int f(x) }\n" always "#define () {(int f(x) }\n"
  actual always size=0
Line 1935
  = always 0
  false always 0
Line 1937
  = always 1
  true always 1
Line 1939
  this always !0
Line 1941
  "// cppcheck-suppress missingInclude\n#include \"missing.h\"\nint x;" always "// cppcheck-suppress missingInclude\n#include \"missing.h\"\nint x;"
Line 1949
  "" always ""
Line 1950
  processedFile always size=0
  cfg always size=0
  "test.c" always "test.c"
  paths always size=0
Line 1951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1951 always 1951
  "" always ""
Line 1952
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1952 always 1952
  false always 0
Line 1956
  "#if defined X || Y\nFred & Wilma\n#endif\n" always "#if defined X || Y\nFred & Wilma\n#endif\n"
Line 1959
  "X=1" always "X=1"
  "test.c" always "test.c"
Line 1961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1961 always 1961
  "\nFred & Wilma" always "\nFred & Wilma"
Line 1965
  "#if defined(X) && Y\nFred & Wilma\n#endif\n" always "#if defined(X) && Y\nFred & Wilma\n#endif\n"
Line 1969
  "X=1" always "X=1"
  "test.c" always "test.c"
Line 1970
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1970 always 1970
  "" always ""
Line 1974
  "X=1;Y=2" always "X=1;Y=2"
  "test.c" always "test.c"
Line 1975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1975 always 1975
  "\nFred & Wilma" always "\nFred & Wilma"
Line 1981
  58 always 58
  = always "#define X 1\n#define Y X\n#if (X == Y)\nFred & Wilma\n#endif\n"
  "#define X 1\n#define Y X\n#if (X == Y)\nFred & Wilma\n#endif\n" always "#define X 1\n#define Y X\n#if (X == Y)\nFred & Wilma\n#endif\n"
Line 1986
  code always "#define X 1\n#define Y X\n#if (X == Y)\nFred & Wilma\n#endif\n"
  "TEST" always "TEST"
  "test.c" always "test.c"
Line 1987
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1987 always 1987
  "\n\n\nFred & Wilma" always "\n\n\nFred & Wilma"
Line 1992
  14 always 14
  = always "char buf[X];\n"
  "char buf[X];\n" always "char buf[X];\n"
Line 1993
  code always "char buf[X];\n"
  "X=123" always "X=123"
  "test.c" always "test.c"
Line 1994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  1994 always 1994
  "char buf [ $123 ] ;" always "char buf [ $123 ] ;"
Line 1999
  30 always 30
  = always "#ifdef __cplusplus\n123\n#endif"
  "#ifdef __cplusplus\n123\n#endif" always "#ifdef __cplusplus\n123\n#endif"
Line 2000
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2000 always 2000
  "" always ""
  code always "#ifdef __cplusplus\n123\n#endif"
  "" always ""
  "test.c" always "test.c"
Line 2001
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2001 always 2001
  "\n123" always "\n123"
  code always "#ifdef __cplusplus\n123\n#endif"
  "" always ""
  "test.cpp" always "test.cpp"
Line 2005
  35 always 35
  = always "#ifdef __STDC_VERSION__\n123\n#endif"
  "#ifdef __STDC_VERSION__\n123\n#endif" always "#ifdef __STDC_VERSION__\n123\n#endif"
Line 2006
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2006 always 2006
  "\n123" always "\n123"
  code always "#ifdef __STDC_VERSION__\n123\n#endif"
  "" always ""
  "test.c" always "test.c"
Line 2007
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2007 always 2007
  "" always ""
  code always "#ifdef __STDC_VERSION__\n123\n#endif"
  "" always ""
  "test.cpp" always "test.cpp"
Line 2012
  11 always 11
  = always "#elif (){\n"
  "#elif (){\n" always "#elif (){\n"
Line 2013
  code always "#elif (){\n"
  "TEST" always "TEST"
  "test.c" always "test.c"
Line 2014
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2014 always 2014
  "" always ""
Line 2018
  55 always 55
  = always "#ifdef  WIN32 \n    abcdef\n#else  \n    qwerty\n#endif  \n"
  "#ifdef  WIN32 \n    abcdef\n#else  \n    qwerty\n#endif  \n" always "#ifdef  WIN32 \n    abcdef\n#else  \n    qwerty\n#endif  \n"
Line 2024
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2024 always 2024
  "\nWIN32\n" always "\nWIN32\n"
  filedata always "#ifdef  WIN32 \n    abcdef\n#else  \n    qwerty\n#endif  \n"
Line 2028
  87 always 87
  = always "# ifndef WIN32\n    \" # ifdef WIN32\" // a comment\n   #   else  \n    qwerty\n  # endif  \n"
  "# ifndef WIN32\n    \" # ifdef WIN32\" // a comment\n   #   else  \n    qwerty\n  # endif  \n" always "# ifndef WIN32\n    \" # ifdef WIN32\" // a comment\n   #   else  \n    qwerty\n  # endif  \n"
Line 2033
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2033 always 2033
  "\nWIN32\n" always "\nWIN32\n"
  filedata always "# ifndef WIN32\n    \" # ifdef WIN32\" // a comment\n   #   else  \n    qwerty\n  # endif  \n"
Line 2037
  43 always 43
  = always "#ifdef ABC\na\n#ifdef DEF\nb\n#endif\nc\n#endif\n"
  "#ifdef ABC\na\n#ifdef DEF\nb\n#endif\nc\n#endif\n" always "#ifdef ABC\na\n#ifdef DEF\nb\n#endif\nc\n#endif\n"
Line 2045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2045 always 2045
  "\nABC\nABC;DEF\n" always "\nABC\nABC;DEF\n"
  filedata always "#ifdef ABC\na\n#ifdef DEF\nb\n#endif\nc\n#endif\n"
Line 2049
  42 always 42
  = always "#ifdef ABC\nA\n#endif\t\n#ifdef ABC\nA\n#endif\n"
  "#ifdef ABC\nA\n#endif\t\n#ifdef ABC\nA\n#endif\n" always "#ifdef ABC\nA\n#endif\t\n#ifdef ABC\nA\n#endif\n"
Line 2055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2055 always 2055
  "\nABC\n" always "\nABC\n"
  filedata always "#ifdef ABC\nA\n#endif\t\n#ifdef ABC\nA\n#endif\n"
Line 2059
  49 always 49
  = always "#ifdef ABC\nA\n#else\nB\n#ifdef DEF\nC\n#endif\n#endif\n"
  "#ifdef ABC\nA\n#else\nB\n#ifdef DEF\nC\n#endif\n#endif\n" always "#ifdef ABC\nA\n#else\nB\n#ifdef DEF\nC\n#endif\n#endif\n"
Line 2067
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2067 always 2067
  "\nABC\nDEF\n" always "\nABC\nDEF\n"
  filedata always "#ifdef ABC\nA\n#else\nB\n#ifdef DEF\nC\n#endif\n#endif\n"
Line 2071
  41 always 41
  = always "#ifdef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n"
  "#ifdef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n" always "#ifdef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n"
Line 2077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2077 always 2077
  "\nABC\n" always "\nABC\n"
  filedata always "#ifdef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n"
Line 2081
  43 always 43
  = always "#ifndef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n"
  "#ifndef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n" always "#ifndef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n"
Line 2087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2087 always 2087
  "\n" always "\n"
  filedata always "#ifndef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n"
Line 2091
  42 always 42
  = always "#ifndef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n"
  "#ifndef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n" always "#ifndef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n"
Line 2097
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2097 always 2097
  "\nABC\n" always "\nABC\n"
  filedata always "#ifndef ABC\nA\n#ifdef ABC\nB\n#endif\n#endif\n"
Line 2101
  42 always 42
  = always "#ifdef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n"
  "#ifdef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n" always "#ifdef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n"
Line 2107
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2107 always 2107
  "\nABC\n" always "\nABC\n"
  filedata always "#ifdef ABC\nA\n#ifndef ABC\nB\n#endif\n#endif\n"
Line 2111
  53 always 53
  = always "#if defined(ABC)\nA\n#if defined(ABC)\nB\n#endif\n#endif\n"
  "#if defined(ABC)\nA\n#if defined(ABC)\nB\n#endif\n#endif\n" always "#if defined(ABC)\nA\n#if defined(ABC)\nB\n#endif\n#endif\n"
Line 2117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2117 always 2117
  "\nABC\n" always "\nABC\n"
  filedata always "#if defined(ABC)\nA\n#if defined(ABC)\nB\n#endif\n#endif\n"
Line 2121
  98 always 98
  = always "#ifdef ABC\n#file \"test.h\"\n#ifndef test_h\n#define test_h\n#ifdef ABC\n#endif\n#endif\n#endfile\n#endif\n"
  "#ifdef ABC\n#file \"test.h\"\n#ifndef test_h\n#define test_h\n#ifdef ABC\n#endif\n#endif\n#endfile\n#endif\n" always "#ifdef ABC\n#file \"test.h\"\n#ifndef test_h\n#define test_h\n#ifdef ABC\n#endif\n#endif\n#endfile\n#endif\n"
Line 2130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2130 always 2130
  "\nABC\n" always "\nABC\n"
  filedata always "#ifdef ABC\n#file \"test.h\"\n#ifndef test_h\n#define test_h\n#ifdef ABC\n#endif\n#endif\n#endfile\n#endif\n"
Line 2134
  21 always 21
  = always "#if A == 1\n1\n#endif\n"
  "#if A == 1\n1\n#endif\n" always "#if A == 1\n1\n#endif\n"
Line 2137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2137 always 2137
  "\nA=1\n" always "\nA=1\n"
  filedata always "#if A == 1\n1\n#endif\n"
Line 2141
  65 always 65
  = always "#define foo a.foo\n#define bar foo\n#define baz bar+0\n#if 0\n#endif"
  "#define foo a.foo\n#define bar foo\n#define baz bar+0\n#if 0\n#endif" always "#define foo a.foo\n#define bar foo\n#define baz bar+0\n#if 0\n#endif"
Line 2146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2146 always 2146
  "\n" always "\n"
  filedata always "#define foo a.foo\n#define bar foo\n#define baz bar+0\n#if 0\n#endif"
Line 2150
  72 always 72
  = always "#file \"test.h\"\n#if !defined(test_h)\n#define test_h\n123\n#endif\n#endfile\n"
  "#file \"test.h\"\n#if !defined(test_h)\n#define test_h\n123\n#endif\n#endfile\n" always "#file \"test.h\"\n#if !defined(test_h)\n#define test_h\n123\n#endif\n#endfile\n"
Line 2156
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2156 always 2156
  "\n" always "\n"
  filedata always "#file \"test.h\"\n#if !defined(test_h)\n#define test_h\n123\n#endif\n#endfile\n"
Line 2160
  30 always 30
  = always "#ifndef X\n#error \"!X\"\n#endif\n"
  "#ifndef X\n#error \"!X\"\n#endif\n" always "#ifndef X\n#error \"!X\"\n#endif\n"
Line 2163
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2163 always 2163
  "X\n" always "X\n"
  filedata1 always "#ifndef X\n#error \"!X\"\n#endif\n"
Line 2165
  46 always 46
  = always "#ifdef X\n#ifndef Y\n#error \"!Y\"\n#endif\n#endif\n"
  "#ifdef X\n#ifndef Y\n#error \"!Y\"\n#endif\n#endif\n" always "#ifdef X\n#ifndef Y\n#error \"!Y\"\n#endif\n#endif\n"
Line 2170
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2170 always 2170
  "\nX;Y\nY\n" always "\nX;Y\nY\n"
  filedata2 always "#ifdef X\n#ifndef Y\n#error \"!Y\"\n#endif\n#endif\n"
Line 2174
  39 always 39
  = always "#ifdef X\n#else\n#ifdef Y\n#endif\n#endif\n"
  "#ifdef X\n#else\n#ifdef Y\n#endif\n#endif\n" always "#ifdef X\n#else\n#ifdef Y\n#endif\n#endif\n"
Line 2179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2179 always 2179
  "\n" always "\n"
  filedata always "#ifdef X\n#else\n#ifdef Y\n#endif\n#endif\n"
  "-DX" always "-DX"
Line 2180
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2180 always 2180
  "\nX\nY\n" always "\nX\nY\n"
  filedata always "#ifdef X\n#else\n#ifdef Y\n#endif\n#endif\n"
Line 2184
  17 always 17
  = always "#ifdef X\n#endif\n"
  "#ifdef X\n#endif\n" always "#ifdef X\n#endif\n"
Line 2186
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2186 always 2186
  "\n" always "\n"
  filedata always "#ifdef X\n#endif\n"
  "-UX" always "-UX"
Line 2187
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2187 always 2187
  "\nX\n" always "\nX\n"
  filedata always "#ifdef X\n#endif\n"
Line 2191
  18 always 18
  = always "#ifndef X\n#endif\n"
  "#ifndef X\n#endif\n" always "#ifndef X\n#endif\n"
Line 2193
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2193 always 2193
  "\n" always "\n"
  filedata always "#ifndef X\n#endif\n"
  "-UX" always "-UX"
Line 2194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2194 always 2194
  "\n" always "\n"
  filedata always "#ifndef X\n#endif\n"
Line 2198
  52 always 52
  = always "#ifndef X\nFred & Wilma\n#else\nBarney & Betty\n#endif\n"
  "#ifndef X\nFred & Wilma\n#else\nBarney & Betty\n#endif\n" always "#ifndef X\nFred & Wilma\n#else\nBarney & Betty\n#endif\n"
Line 2203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2203 always 2203
  "\n" always "\n"
  filedata always "#ifndef X\nFred & Wilma\n#else\nBarney & Betty\n#endif\n"
  "-UX" always "-UX"
Line 2204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2204 always 2204
  "\nX\n" always "\nX\n"
  filedata always "#ifndef X\nFred & Wilma\n#else\nBarney & Betty\n#endif\n"
Line 2208
  57 always 57
  = always "#if defined(X) || defined(Y) || defined(Z)\n#else\n#endif\n"
  "#if defined(X) || defined(Y) || defined(Z)\n#else\n#endif\n" always "#if defined(X) || defined(Y) || defined(Z)\n#else\n#endif\n"
Line 2211
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2211 always 2211
  "\nY;Z\n" always "\nY;Z\n"
  filedata always "#if defined(X) || defined(Y) || defined(Z)\n#else\n#endif\n"
  "-UX" always "-UX"
Line 2212
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2212 always 2212
  "\nX;Y;Z\n" always "\nX;Y;Z\n"
  filedata always "#if defined(X) || defined(Y) || defined(Z)\n#else\n#endif\n"
Line 2216
  17 always 17
  = always "#if X==1\n#endif\n"
  "#if X==1\n#endif\n" always "#if X==1\n#endif\n"
Line 2218
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2218 always 2218
  "\n" always "\n"
  filedata always "#if X==1\n#endif\n"
  "-UX" always "-UX"
Line 2219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2219 always 2219
  "\nX=1\n" always "\nX=1\n"
  filedata always "#if X==1\n#endif\n"
Line 2223
  17 always 17
  = always "#if X==0\n#endif\n"
  "#if X==0\n#endif\n" always "#if X==0\n#endif\n"
Line 2225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2225 always 2225
  "\nX=0\n" always "\nX=0\n"
  filedata always "#if X==0\n#endif\n"
  "-UX" always "-UX"
Line 2226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2226 always 2226
  "\nX=0\n" always "\nX=0\n"
  filedata always "#if X==0\n#endif\n"
Line 2230
  24 always 24
  = always "#ifndef Y\n#else\n#endif\n"
  "#ifndef Y\n#else\n#endif\n" always "#ifndef Y\n#else\n#endif\n"
Line 2233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2233 always 2233
  "\nY\n" always "\nY\n"
  code always "#ifndef Y\n#else\n#endif\n"
  "-DX" always "-DX"
Line 2238
  this always !0
Line 2240
  1 always 1
  "test.c" always "test.c"
Line 2241
  files always size=1
  false always 0
Line 2242
  = always 0
  0 always 0
Line 2243
  = always 1
  1 always 1
Line 2244
  = always "X"
  "X" always "X"
Line 2245
  1 always 1
Line 2247
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2247 always 2247
  true always 1
  "" always ""
  macroUsageList always size=1
Line 2248
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2248 always 2248
  false always 0
  "X" always "X"
Line 2249
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2249 always 2249
  false always 0
  "A=42;X" always "A=42;X"
Line 2250
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2250 always 2250
  true always 1
  "X=1" always "X=1"
Line 2251
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2251 always 2251
  true always 1
  "Y" always "Y"
Line 2253
  = always 1
  true always 1
Line 2254
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2254 always 2254
  true always 1
  "X" always "X"
Line 2258
  31 always 31
  = always "#ifdef ABC\n#endif\nint i = ABC;"
  "#ifdef ABC\n#endif\nint i = ABC;" always "#ifdef ABC\n#endif\nint i = ABC;"
Line 2263
  filedata always "#ifdef ABC\n#endif\nint i = ABC;"
  actual always size=0
  "file.cpp" always "file.cpp"
Line 2264
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2264 always 2264
  "[file.cpp:3]: (information) Skipping configuration 'ABC' since the value of 'ABC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.\n" always "[file.cpp:3]: (information) Skipping configuration 'ABC' since the value of 'ABC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.\n"
Line 2268
  = always "#if sizeof(unsigned short) == 2\nFred & Wilma\n#elif sizeof(unsigned short) == 4\nFred & Wilma\n#else\n#endif"
  "#if sizeof(unsigned short) == 2\nFred & Wilma\n#elif sizeof(unsigned short) == 4\nFred & Wilma\n#else\n#endif" always "#if sizeof(unsigned short) == 2\nFred & Wilma\n#elif sizeof(unsigned short) == 4\nFred & Wilma\n#else\n#endif"
Line 2276
  actual always size=0
Line 2277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2277 always 2277
  "\nFred & Wilma" always "\nFred & Wilma"
  "" always ""
Line 2281
  87 always 87
  = always "#ifdef\n#endif\n#ifdef !\n#endif\n#if defined\n#endif\n#define f(x) x\n#if f(2\n#endif\nint x;\n"
  "#ifdef\n#endif\n#ifdef !\n#endif\n#if defined\n#endif\n#define f(x) x\n#if f(2\n#endif\nint x;\n" always "#ifdef\n#endif\n#ifdef !\n#endif\n#if defined\n#endif\n#define f(x) x\n#if f(2\n#endif\nint x;\n"
Line 2294
  filedata always "#ifdef\n#endif\n#ifdef !\n#endif\n#if defined\n#endif\n#define f(x) x\n#if f(2\n#endif\nint x;\n"
  actual always size=0
Line 2298
  68 always 68
  = always "V\n#define X b   #endif #line 0 \"x\"  ;\n#if ! defined ( Y )    #endif"
  "V\n#define X b   #endif #line 0 \"x\"  ;\n#if ! defined ( Y )    #endif" always "V\n#define X b   #endif #line 0 \"x\"  ;\n#if ! defined ( Y )    #endif"
Line 2304
  filedata always "V\n#define X b   #endif #line 0 \"x\"  ;\n#if ! defined ( Y )    #endif"
  actual always size=0
Line 2308
  "" always ""
Line 2310
  = always "foo"
  "foo" always "foo"
Line 2311
  this always !0
Line 2312
  "#error hello world!\n" always "#error hello world!\n"
Line 2313
  "X" always "X"
  "./././test.c" always "./././test.c"
Line 2314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2314 always 2314
  "[test.c:1]: (error) #error hello world!\n" always "[test.c:1]: (error) #error hello world!\n"
Line 2318
  272 always 272
  = always "#define macro some definition\n#undef macro\n#ifdef macro\n#elif some (complex) condition\n#else\n#endif\n#if some other condition\n#pragma some proprietary content\n#\n#ident some text\n#unknownmacro some unpredictable text\n#warning some warning message\n#error some error message\n"
  "#define macro some definition\n#undef macro\n#ifdef macro\n#elif some (complex) condition\n#else\n#endif\n#if some other condition\n#pragma some proprietary content\n#\n#ident some text\n#unknownmacro some unpredictable text\n#warning some warning message\n#error some error message\n" always "#define macro some definition\n#undef macro\n#ifdef macro\n#elif some (complex) condition\n#else\n#endif\n#if some other condition\n#pragma some proprietary content\n#\n#ident some text\n#unknownmacro some unpredictable text\n#warning some warning message\n#error some error message\n"
Line 2331
  937 always 937
  = always "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro some definition\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#undef macro\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#ifdef macro\"/>\n    <directive file=\"test.c\" linenr=\"4\" str=\"#elif some (complex) condition\"/>\n    <directive file=\"test.c\" linenr=\"5\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"6\" str=\"#endif\"/>\n    <directive file=\"test.c\" linenr=\"7\" str=\"#if some other condition\"/>\n    <directive file=\"test.c\" linenr=\"8\" str=\"#pragma some proprietary content\"/>\n    <directive file=\"test.c\" linenr=\"9\" str=\"#\"/>\n    <directive file=\"test.c\" linenr=\"10\" str=\"#ident some text\"/>\n    <directive file=\"test.c\" linenr=\"11\" str=\"#unknownmacro some unpredictable text\"/>\n    <directive file=\"test.c\" linenr=\"12\" str=\"#warning some warning message\"/>\n    <directive file=\"test.c\" linenr=\"13\" str=\"#error some error message\"/>\n  </directivelist>\n"
  "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro some definition\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#undef macro\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#ifdef macro\"/>\n    <directive file=\"test.c\" linenr=\"4\" str=\"#elif some (complex) condition\"/>\n    <directive file=\"test.c\" linenr=\"5\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"6\" str=\"#endif\"/>\n    <directive file=\"test.c\" linenr=\"7\" str=\"#if some other condition\"/>\n    <directive file=\"test.c\" linenr=\"8\" str=\"#pragma some proprietary content\"/>\n    <directive file=\"test.c\" linenr=\"9\" str=\"#\"/>\n    <directive file=\"test.c\" linenr=\"10\" str=\"#ident some text\"/>\n    <directive file=\"test.c\" linenr=\"11\" str=\"#unknownmacro some unpredictable text\"/>\n    <directive file=\"test.c\" linenr=\"12\" str=\"#warning some warning message\"/>\n    <directive file=\"test.c\" linenr=\"13\" str=\"#error some error message\"/>\n  </directivelist>\n" always "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro some definition\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#undef macro\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#ifdef macro\"/>\n    <directive file=\"test.c\" linenr=\"4\" str=\"#elif some (complex) condition\"/>\n    <directive file=\"test.c\" linenr=\"5\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"6\" str=\"#endif\"/>\n    <directive file=\"test.c\" linenr=\"7\" str=\"#if some other condition\"/>\n    <directive file=\"test.c\" linenr=\"8\" str=\"#pragma some proprietary content\"/>\n    <directive file=\"test.c\" linenr=\"9\" str=\"#\"/>\n    <directive file=\"test.c\" linenr=\"10\" str=\"#ident some text\"/>\n    <directive file=\"test.c\" linenr=\"11\" str=\"#unknownmacro some unpredictable text\"/>\n    <directive file=\"test.c\" linenr=\"12\" str=\"#warning some warning message\"/>\n    <directive file=\"test.c\" linenr=\"13\" str=\"#error some error message\"/>\n  </directivelist>\n"
Line 2349
  this always !0
Line 2350
  filedata always "#define macro some definition\n#undef macro\n#ifdef macro\n#elif some (complex) condition\n#else\n#endif\n#if some other condition\n#pragma some proprietary content\n#\n#ident some text\n#unknownmacro some unpredictable text\n#warning some warning message\n#error some error message\n"
  "" always ""
  "test.c" always "test.c"
Line 2352
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2352 always 2352
  dumpdata always "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro some definition\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#undef macro\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#ifdef macro\"/>\n    <directive file=\"test.c\" linenr=\"4\" str=\"#elif some (complex) condition\"/>\n    <directive file=\"test.c\" linenr=\"5\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"6\" str=\"#endif\"/>\n    <directive file=\"test.c\" linenr=\"7\" str=\"#if some other condition\"/>\n    <directive file=\"test.c\" linenr=\"8\" str=\"#pragma some proprietary content\"/>\n    <directive file=\"test.c\" linenr=\"9\" str=\"#\"/>\n    <directive file=\"test.c\" linenr=\"10\" str=\"#ident some text\"/>\n    <directive file=\"test.c\" linenr=\"11\" str=\"#unknownmacro some unpredictable text\"/>\n    <directive file=\"test.c\" linenr=\"12\" str=\"#warning some warning message\"/>\n    <directive file=\"test.c\" linenr=\"13\" str=\"#error some error message\"/>\n  </directivelist>\n"
Line 2356
  144 always 144
  = always "#define macro1 val\n#file \"inc1.h\"\n#define macro2 val\n#file \"inc2.h\"\n#define macro3 val\n#endfile\n#define macro4 val\n#endfile\n#define macro5 val\n"
  "#define macro1 val\n#file \"inc1.h\"\n#define macro2 val\n#file \"inc2.h\"\n#define macro3 val\n#endfile\n#define macro4 val\n#endfile\n#define macro5 val\n" always "#define macro1 val\n#file \"inc1.h\"\n#define macro2 val\n#file \"inc2.h\"\n#define macro3 val\n#endfile\n#define macro4 val\n#endfile\n#define macro5 val\n"
Line 2365
  525 always 525
  = always "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro1 val\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#include &quot;inc1.h&quot;\"/>\n    <directive file=\"inc1.h\" linenr=\"1\" str=\"#define macro2 val\"/>\n    <directive file=\"inc1.h\" linenr=\"2\" str=\"#include &quot;inc2.h&quot;\"/>\n    <directive file=\"inc2.h\" linenr=\"1\" str=\"#define macro3 val\"/>\n    <directive file=\"inc1.h\" linenr=\"3\" str=\"#define macro4 val\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#define macro5 val\"/>\n  </directivelist>\n"
  "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro1 val\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#include &quot;inc1.h&quot;\"/>\n    <directive file=\"inc1.h\" linenr=\"1\" str=\"#define macro2 val\"/>\n    <directive file=\"inc1.h\" linenr=\"2\" str=\"#include &quot;inc2.h&quot;\"/>\n    <directive file=\"inc2.h\" linenr=\"1\" str=\"#define macro3 val\"/>\n    <directive file=\"inc1.h\" linenr=\"3\" str=\"#define macro4 val\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#define macro5 val\"/>\n  </directivelist>\n" always "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro1 val\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#include &quot;inc1.h&quot;\"/>\n    <directive file=\"inc1.h\" linenr=\"1\" str=\"#define macro2 val\"/>\n    <directive file=\"inc1.h\" linenr=\"2\" str=\"#include &quot;inc2.h&quot;\"/>\n    <directive file=\"inc2.h\" linenr=\"1\" str=\"#define macro3 val\"/>\n    <directive file=\"inc1.h\" linenr=\"3\" str=\"#define macro4 val\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#define macro5 val\"/>\n  </directivelist>\n"
Line 2376
  this always !0
Line 2377
  filedata always "#define macro1 val\n#file \"inc1.h\"\n#define macro2 val\n#file \"inc2.h\"\n#define macro3 val\n#endfile\n#define macro4 val\n#endfile\n#define macro5 val\n"
  "" always ""
  "test.c" always "test.c"
Line 2379
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2379 always 2379
  dumpdata always "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#define macro1 val\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#include &quot;inc1.h&quot;\"/>\n    <directive file=\"inc1.h\" linenr=\"1\" str=\"#define macro2 val\"/>\n    <directive file=\"inc1.h\" linenr=\"2\" str=\"#include &quot;inc2.h&quot;\"/>\n    <directive file=\"inc2.h\" linenr=\"1\" str=\"#define macro3 val\"/>\n    <directive file=\"inc1.h\" linenr=\"3\" str=\"#define macro4 val\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#define macro5 val\"/>\n  </directivelist>\n"
Line 2383
  118 always 118
  = always "#ifdef macro2 /* this will be removed */\n#else /* this will be removed too */\n#endif /* this will also be removed */\n"
  "#ifdef macro2 /* this will be removed */\n#else /* this will be removed too */\n#endif /* this will also be removed */\n" always "#ifdef macro2 /* this will be removed */\n#else /* this will be removed too */\n#endif /* this will also be removed */\n"
Line 2386
  209 always 209
  = always "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#ifdef macro2\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#endif\"/>\n  </directivelist>\n"
  "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#ifdef macro2\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#endif\"/>\n  </directivelist>\n" always "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#ifdef macro2\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#endif\"/>\n  </directivelist>\n"
Line 2393
  this always !0
Line 2394
  filedata always "#ifdef macro2 /* this will be removed */\n#else /* this will be removed too */\n#endif /* this will also be removed */\n"
  "" always ""
  "test.c" always "test.c"
Line 2396
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testpreprocessor.cpp" always "cppcheck-2.8/test/testpreprocessor.cpp"
  2396 always 2396
  dumpdata always "  <directivelist>\n    <directive file=\"test.c\" linenr=\"1\" str=\"#ifdef macro2\"/>\n    <directive file=\"test.c\" linenr=\"2\" str=\"#else\"/>\n    <directive file=\"test.c\" linenr=\"3\" str=\"#endif\"/>\n  </directivelist>\n"
