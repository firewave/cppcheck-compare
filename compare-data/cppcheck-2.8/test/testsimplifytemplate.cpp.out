

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742533 expected@var22 !=@expr1073742534 actual@var23 ) {
62: std ::@expr1073742535 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742536 expected@var22 ;
64: std ::@expr1073742537 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742538 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742539 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742540 str (@expr1073742541 ) , actualStr@var26 .@expr1073742542 str (@expr1073742543 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742544 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742545 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742546 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742547 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testsimplifytemplate.cpp

1:
|
34:
35: class TestSimplifyTemplate : public TestFixture {
36: public:
37: TestSimplifyTemplate ( ) : TestFixture ( "TestSimplifyTemplate" ) { }
38:
39: private:
40: Settings settings@var102 ;
41:
42: void run ( ) override {
43: settings@var102 .@expr1073742549 severity@var103 .@expr1073742550 enable (@expr1073742551 Severity ::@expr1073742552 portability@expr1073742548 ) ;
44:
45:
46: settings@var102 .@expr1073742553 checkUnusedTemplates@var104 =@expr1073742554 true ;
47:
48: $do ${ $if $(@expr1073742555 $prepareTest $(@expr1073742556 "template1" $) $) ${ $setVerbose $(@expr1073742557 $false $) $; template1 $(@expr1073742558 $) $; $} $} $while $(@expr1073742559 $false $) ;
49: $do ${ $if $(@expr1073742560 $prepareTest $(@expr1073742561 "template2" $) $) ${ $setVerbose $(@expr1073742562 $false $) $; template2 $(@expr1073742563 $) $; $} $} $while $(@expr1073742564 $false $) ;
50: $do ${ $if $(@expr1073742565 $prepareTest $(@expr1073742566 "template3" $) $) ${ $setVerbose $(@expr1073742567 $false $) $; template3 $(@expr1073742568 $) $; $} $} $while $(@expr1073742569 $false $) ;
51: $do ${ $if $(@expr1073742570 $prepareTest $(@expr1073742571 "template4" $) $) ${ $setVerbose $(@expr1073742572 $false $) $; template4 $(@expr1073742573 $) $; $} $} $while $(@expr1073742574 $false $) ;
52: $do ${ $if $(@expr1073742575 $prepareTest $(@expr1073742576 "template5" $) $) ${ $setVerbose $(@expr1073742577 $false $) $; template5 $(@expr1073742578 $) $; $} $} $while $(@expr1073742579 $false $) ;
53: $do ${ $if $(@expr1073742580 $prepareTest $(@expr1073742581 "template6" $) $) ${ $setVerbose $(@expr1073742582 $false $) $; template6 $(@expr1073742583 $) $; $} $} $while $(@expr1073742584 $false $) ;
54: $do ${ $if $(@expr1073742585 $prepareTest $(@expr1073742586 "template7" $) $) ${ $setVerbose $(@expr1073742587 $false $) $; template7 $(@expr1073742588 $) $; $} $} $while $(@expr1073742589 $false $) ;
55: $do ${ $if $(@expr1073742590 $prepareTest $(@expr1073742591 "template8" $) $) ${ $setVerbose $(@expr1073742592 $false $) $; template8 $(@expr1073742593 $) $; $} $} $while $(@expr1073742594 $false $) ;
56: $do ${ $if $(@expr1073742595 $prepareTest $(@expr1073742596 "template9" $) $) ${ $setVerbose $(@expr1073742597 $false $) $; template9 $(@expr1073742598 $) $; $} $} $while $(@expr1073742599 $false $) ;
57: $do ${ $if $(@expr1073742600 $prepareTest $(@expr1073742601 "template10" $) $) ${ $setVerbose $(@expr1073742602 $false $) $; template10 $(@expr1073742603 $) $; $} $} $while $(@expr1073742604 $false $) ;
58: $do ${ $if $(@expr1073742605 $prepareTest $(@expr1073742606 "template11" $) $) ${ $setVerbose $(@expr1073742607 $false $) $; template11 $(@expr1073742608 $) $; $} $} $while $(@expr1073742609 $false $) ;
59: $do ${ $if $(@expr1073742610 $prepareTest $(@expr1073742611 "template12" $) $) ${ $setVerbose $(@expr1073742612 $false $) $; template12 $(@expr1073742613 $) $; $} $} $while $(@expr1073742614 $false $) ;
60: $do ${ $if $(@expr1073742615 $prepareTest $(@expr1073742616 "template13" $) $) ${ $setVerbose $(@expr1073742617 $false $) $; template13 $(@expr1073742618 $) $; $} $} $while $(@expr1073742619 $false $) ;
61: $do ${ $if $(@expr1073742620 $prepareTest $(@expr1073742621 "template14" $) $) ${ $setVerbose $(@expr1073742622 $false $) $; template14 $(@expr1073742623 $) $; $} $} $while $(@expr1073742624 $false $) ;
62: $do ${ $if $(@expr1073742625 $prepareTest $(@expr1073742626 "template15" $) $) ${ $setVerbose $(@expr1073742627 $false $) $; template15 $(@expr1073742628 $) $; $} $} $while $(@expr1073742629 $false $) ;
63: $do ${ $if $(@expr1073742630 $prepareTest $(@expr1073742631 "template16" $) $) ${ $setVerbose $(@expr1073742632 $false $) $; template16 $(@expr1073742633 $) $; $} $} $while $(@expr1073742634 $false $) ;
64: $do ${ $if $(@expr1073742635 $prepareTest $(@expr1073742636 "template17" $) $) ${ $setVerbose $(@expr1073742637 $false $) $; template17 $(@expr1073742638 $) $; $} $} $while $(@expr1073742639 $false $) ;
65: $do ${ $if $(@expr1073742640 $prepareTest $(@expr1073742641 "template18" $) $) ${ $setVerbose $(@expr1073742642 $false $) $; template18 $(@expr1073742643 $) $; $} $} $while $(@expr1073742644 $false $) ;
66: $do ${ $if $(@expr1073742645 $prepareTest $(@expr1073742646 "template19" $) $) ${ $setVerbose $(@expr1073742647 $false $) $; template19 $(@expr1073742648 $) $; $} $} $while $(@expr1073742649 $false $) ;
67: $do ${ $if $(@expr1073742650 $prepareTest $(@expr1073742651 "template20" $) $) ${ $setVerbose $(@expr1073742652 $false $) $; template20 $(@expr1073742653 $) $; $} $} $while $(@expr1073742654 $false $) ;
68: $do ${ $if $(@expr1073742655 $prepareTest $(@expr1073742656 "template21" $) $) ${ $setVerbose $(@expr1073742657 $false $) $; template21 $(@expr1073742658 $) $; $} $} $while $(@expr1073742659 $false $) ;
69: $do ${ $if $(@expr1073742660 $prepareTest $(@expr1073742661 "template22" $) $) ${ $setVerbose $(@expr1073742662 $false $) $; template22 $(@expr1073742663 $) $; $} $} $while $(@expr1073742664 $false $) ;
70: $do ${ $if $(@expr1073742665 $prepareTest $(@expr1073742666 "template23" $) $) ${ $setVerbose $(@expr1073742667 $false $) $; template23 $(@expr1073742668 $) $; $} $} $while $(@expr1073742669 $false $) ;
71: $do ${ $if $(@expr1073742670 $prepareTest $(@expr1073742671 "template24" $) $) ${ $setVerbose $(@expr1073742672 $false $) $; template24 $(@expr1073742673 $) $; $} $} $while $(@expr1073742674 $false $) ;
72: $do ${ $if $(@expr1073742675 $prepareTest $(@expr1073742676 "template25" $) $) ${ $setVerbose $(@expr1073742677 $false $) $; template25 $(@expr1073742678 $) $; $} $} $while $(@expr1073742679 $false $) ;
73: $do ${ $if $(@expr1073742680 $prepareTest $(@expr1073742681 "template26" $) $) ${ $setVerbose $(@expr1073742682 $false $) $; template26 $(@expr1073742683 $) $; $} $} $while $(@expr1073742684 $false $) ;
74: $do ${ $if $(@expr1073742685 $prepareTest $(@expr1073742686 "template27" $) $) ${ $setVerbose $(@expr1073742687 $false $) $; template27 $(@expr1073742688 $) $; $} $} $while $(@expr1073742689 $false $) ;
75: $do ${ $if $(@expr1073742690 $prepareTest $(@expr1073742691 "template28" $) $) ${ $setVerbose $(@expr1073742692 $false $) $; template28 $(@expr1073742693 $) $; $} $} $while $(@expr1073742694 $false $) ;
76: $do ${ $if $(@expr1073742695 $prepareTest $(@expr1073742696 "template30" $) $) ${ $setVerbose $(@expr1073742697 $false $) $; template30 $(@expr1073742698 $) $; $} $} $while $(@expr1073742699 $false $) ;
77: $do ${ $if $(@expr1073742700 $prepareTest $(@expr1073742701 "template31" $) $) ${ $setVerbose $(@expr1073742702 $false $) $; template31 $(@expr1073742703 $) $; $} $} $while $(@expr1073742704 $false $) ;
78: $do ${ $if $(@expr1073742705 $prepareTest $(@expr1073742706 "template32" $) $) ${ $setVerbose $(@expr1073742707 $false $) $; template32 $(@expr1073742708 $) $; $} $} $while $(@expr1073742709 $false $) ;
79: $do ${ $if $(@expr1073742710 $prepareTest $(@expr1073742711 "template33" $) $) ${ $setVerbose $(@expr1073742712 $false $) $; template33 $(@expr1073742713 $) $; $} $} $while $(@expr1073742714 $false $) ;
80: $do ${ $if $(@expr1073742715 $prepareTest $(@expr1073742716 "template34" $) $) ${ $setVerbose $(@expr1073742717 $false $) $; template34 $(@expr1073742718 $) $; $} $} $while $(@expr1073742719 $false $) ;
81: $do ${ $if $(@expr1073742720 $prepareTest $(@expr1073742721 "template35" $) $) ${ $setVerbose $(@expr1073742722 $false $) $; template35 $(@expr1073742723 $) $; $} $} $while $(@expr1073742724 $false $) ;
82: $do ${ $if $(@expr1073742725 $prepareTest $(@expr1073742726 "template36" $) $) ${ $setVerbose $(@expr1073742727 $false $) $; template36 $(@expr1073742728 $) $; $} $} $while $(@expr1073742729 $false $) ;
83: $do ${ $if $(@expr1073742730 $prepareTest $(@expr1073742731 "template37" $) $) ${ $setVerbose $(@expr1073742732 $false $) $; template37 $(@expr1073742733 $) $; $} $} $while $(@expr1073742734 $false $) ;
84: $do ${ $if $(@expr1073742735 $prepareTest $(@expr1073742736 "template38" $) $) ${ $setVerbose $(@expr1073742737 $false $) $; template38 $(@expr1073742738 $) $; $} $} $while $(@expr1073742739 $false $) ;
85: $do ${ $if $(@expr1073742740 $prepareTest $(@expr1073742741 "template39" $) $) ${ $setVerbose $(@expr1073742742 $false $) $; template39 $(@expr1073742743 $) $; $} $} $while $(@expr1073742744 $false $) ;
86: $do ${ $if $(@expr1073742745 $prepareTest $(@expr1073742746 "template40" $) $) ${ $setVerbose $(@expr1073742747 $false $) $; template40 $(@expr1073742748 $) $; $} $} $while $(@expr1073742749 $false $) ;
87: $do ${ $if $(@expr1073742750 $prepareTest $(@expr1073742751 "template41" $) $) ${ $setVerbose $(@expr1073742752 $false $) $; template41 $(@expr1073742753 $) $; $} $} $while $(@expr1073742754 $false $) ;
88: $do ${ $if $(@expr1073742755 $prepareTest $(@expr1073742756 "template42" $) $) ${ $setVerbose $(@expr1073742757 $false $) $; template42 $(@expr1073742758 $) $; $} $} $while $(@expr1073742759 $false $) ;
89: $do ${ $if $(@expr1073742760 $prepareTest $(@expr1073742761 "template43" $) $) ${ $setVerbose $(@expr1073742762 $false $) $; template43 $(@expr1073742763 $) $; $} $} $while $(@expr1073742764 $false $) ;
90: $do ${ $if $(@expr1073742765 $prepareTest $(@expr1073742766 "template44" $) $) ${ $setVerbose $(@expr1073742767 $false $) $; template44 $(@expr1073742768 $) $; $} $} $while $(@expr1073742769 $false $) ;
91: $do ${ $if $(@expr1073742770 $prepareTest $(@expr1073742771 "template45" $) $) ${ $setVerbose $(@expr1073742772 $false $) $; template45 $(@expr1073742773 $) $; $} $} $while $(@expr1073742774 $false $) ;
92: $do ${ $if $(@expr1073742775 $prepareTest $(@expr1073742776 "template46" $) $) ${ $setVerbose $(@expr1073742777 $false $) $; template46 $(@expr1073742778 $) $; $} $} $while $(@expr1073742779 $false $) ;
93: $do ${ $if $(@expr1073742780 $prepareTest $(@expr1073742781 "template47" $) $) ${ $setVerbose $(@expr1073742782 $false $) $; template47 $(@expr1073742783 $) $; $} $} $while $(@expr1073742784 $false $) ;
94: $do ${ $if $(@expr1073742785 $prepareTest $(@expr1073742786 "template48" $) $) ${ $setVerbose $(@expr1073742787 $false $) $; template48 $(@expr1073742788 $) $; $} $} $while $(@expr1073742789 $false $) ;
95: $do ${ $if $(@expr1073742790 $prepareTest $(@expr1073742791 "template49" $) $) ${ $setVerbose $(@expr1073742792 $false $) $; template49 $(@expr1073742793 $) $; $} $} $while $(@expr1073742794 $false $) ;
96: $do ${ $if $(@expr1073742795 $prepareTest $(@expr1073742796 "template50" $) $) ${ $setVerbose $(@expr1073742797 $false $) $; template50 $(@expr1073742798 $) $; $} $} $while $(@expr1073742799 $false $) ;
97: $do ${ $if $(@expr1073742800 $prepareTest $(@expr1073742801 "template52" $) $) ${ $setVerbose $(@expr1073742802 $false $) $; template52 $(@expr1073742803 $) $; $} $} $while $(@expr1073742804 $false $) ;
98: $do ${ $if $(@expr1073742805 $prepareTest $(@expr1073742806 "template53" $) $) ${ $setVerbose $(@expr1073742807 $false $) $; template53 $(@expr1073742808 $) $; $} $} $while $(@expr1073742809 $false $) ;
99: $do ${ $if $(@expr1073742810 $prepareTest $(@expr1073742811 "template54" $) $) ${ $setVerbose $(@expr1073742812 $false $) $; template54 $(@expr1073742813 $) $; $} $} $while $(@expr1073742814 $false $) ;
100: $do ${ $if $(@expr1073742815 $prepareTest $(@expr1073742816 "template55" $) $) ${ $setVerbose $(@expr1073742817 $false $) $; template55 $(@expr1073742818 $) $; $} $} $while $(@expr1073742819 $false $) ;
101: $do ${ $if $(@expr1073742820 $prepareTest $(@expr1073742821 "template56" $) $) ${ $setVerbose $(@expr1073742822 $false $) $; template56 $(@expr1073742823 $) $; $} $} $while $(@expr1073742824 $false $) ;
102: $do ${ $if $(@expr1073742825 $prepareTest $(@expr1073742826 "template57" $) $) ${ $setVerbose $(@expr1073742827 $false $) $; template57 $(@expr1073742828 $) $; $} $} $while $(@expr1073742829 $false $) ;
103: $do ${ $if $(@expr1073742830 $prepareTest $(@expr1073742831 "template58" $) $) ${ $setVerbose $(@expr1073742832 $false $) $; template58 $(@expr1073742833 $) $; $} $} $while $(@expr1073742834 $false $) ;
104: $do ${ $if $(@expr1073742835 $prepareTest $(@expr1073742836 "template59" $) $) ${ $setVerbose $(@expr1073742837 $false $) $; template59 $(@expr1073742838 $) $; $} $} $while $(@expr1073742839 $false $) ;
105: $do ${ $if $(@expr1073742840 $prepareTest $(@expr1073742841 "template60" $) $) ${ $setVerbose $(@expr1073742842 $false $) $; template60 $(@expr1073742843 $) $; $} $} $while $(@expr1073742844 $false $) ;
106: $do ${ $if $(@expr1073742845 $prepareTest $(@expr1073742846 "template61" $) $) ${ $setVerbose $(@expr1073742847 $false $) $; template61 $(@expr1073742848 $) $; $} $} $while $(@expr1073742849 $false $) ;
107: $do ${ $if $(@expr1073742850 $prepareTest $(@expr1073742851 "template62" $) $) ${ $setVerbose $(@expr1073742852 $false $) $; template62 $(@expr1073742853 $) $; $} $} $while $(@expr1073742854 $false $) ;
108: $do ${ $if $(@expr1073742855 $prepareTest $(@expr1073742856 "template63" $) $) ${ $setVerbose $(@expr1073742857 $false $) $; template63 $(@expr1073742858 $) $; $} $} $while $(@expr1073742859 $false $) ;
109: $do ${ $if $(@expr1073742860 $prepareTest $(@expr1073742861 "template64" $) $) ${ $setVerbose $(@expr1073742862 $false $) $; template64 $(@expr1073742863 $) $; $} $} $while $(@expr1073742864 $false $) ;
110: $do ${ $if $(@expr1073742865 $prepareTest $(@expr1073742866 "template65" $) $) ${ $setVerbose $(@expr1073742867 $false $) $; template65 $(@expr1073742868 $) $; $} $} $while $(@expr1073742869 $false $) ;
111: $do ${ $if $(@expr1073742870 $prepareTest $(@expr1073742871 "template66" $) $) ${ $setVerbose $(@expr1073742872 $false $) $; template66 $(@expr1073742873 $) $; $} $} $while $(@expr1073742874 $false $) ;
112: $do ${ $if $(@expr1073742875 $prepareTest $(@expr1073742876 "template67" $) $) ${ $setVerbose $(@expr1073742877 $false $) $; template67 $(@expr1073742878 $) $; $} $} $while $(@expr1073742879 $false $) ;
113: $do ${ $if $(@expr1073742880 $prepareTest $(@expr1073742881 "template68" $) $) ${ $setVerbose $(@expr1073742882 $false $) $; template68 $(@expr1073742883 $) $; $} $} $while $(@expr1073742884 $false $) ;
114: $do ${ $if $(@expr1073742885 $prepareTest $(@expr1073742886 "template69" $) $) ${ $setVerbose $(@expr1073742887 $false $) $; template69 $(@expr1073742888 $) $; $} $} $while $(@expr1073742889 $false $) ;
115: $do ${ $if $(@expr1073742890 $prepareTest $(@expr1073742891 "template70" $) $) ${ $setVerbose $(@expr1073742892 $false $) $; template70 $(@expr1073742893 $) $; $} $} $while $(@expr1073742894 $false $) ;
116: $do ${ $if $(@expr1073742895 $prepareTest $(@expr1073742896 "template71" $) $) ${ $setVerbose $(@expr1073742897 $false $) $; template71 $(@expr1073742898 $) $; $} $} $while $(@expr1073742899 $false $) ;
117: $do ${ $if $(@expr1073742900 $prepareTest $(@expr1073742901 "template72" $) $) ${ $setVerbose $(@expr1073742902 $false $) $; template72 $(@expr1073742903 $) $; $} $} $while $(@expr1073742904 $false $) ;
118: $do ${ $if $(@expr1073742905 $prepareTest $(@expr1073742906 "template73" $) $) ${ $setVerbose $(@expr1073742907 $false $) $; template73 $(@expr1073742908 $) $; $} $} $while $(@expr1073742909 $false $) ;
119: $do ${ $if $(@expr1073742910 $prepareTest $(@expr1073742911 "template74" $) $) ${ $setVerbose $(@expr1073742912 $false $) $; template74 $(@expr1073742913 $) $; $} $} $while $(@expr1073742914 $false $) ;
120: $do ${ $if $(@expr1073742915 $prepareTest $(@expr1073742916 "template75" $) $) ${ $setVerbose $(@expr1073742917 $false $) $; template75 $(@expr1073742918 $) $; $} $} $while $(@expr1073742919 $false $) ;
121: $do ${ $if $(@expr1073742920 $prepareTest $(@expr1073742921 "template76" $) $) ${ $setVerbose $(@expr1073742922 $false $) $; template76 $(@expr1073742923 $) $; $} $} $while $(@expr1073742924 $false $) ;
122: $do ${ $if $(@expr1073742925 $prepareTest $(@expr1073742926 "template77" $) $) ${ $setVerbose $(@expr1073742927 $false $) $; template77 $(@expr1073742928 $) $; $} $} $while $(@expr1073742929 $false $) ;
123: $do ${ $if $(@expr1073742930 $prepareTest $(@expr1073742931 "template78" $) $) ${ $setVerbose $(@expr1073742932 $false $) $; template78 $(@expr1073742933 $) $; $} $} $while $(@expr1073742934 $false $) ;
124: $do ${ $if $(@expr1073742935 $prepareTest $(@expr1073742936 "template79" $) $) ${ $setVerbose $(@expr1073742937 $false $) $; template79 $(@expr1073742938 $) $; $} $} $while $(@expr1073742939 $false $) ;
125: $do ${ $if $(@expr1073742940 $prepareTest $(@expr1073742941 "template80" $) $) ${ $setVerbose $(@expr1073742942 $false $) $; template80 $(@expr1073742943 $) $; $} $} $while $(@expr1073742944 $false $) ;
126: $do ${ $if $(@expr1073742945 $prepareTest $(@expr1073742946 "template81" $) $) ${ $setVerbose $(@expr1073742947 $false $) $; template81 $(@expr1073742948 $) $; $} $} $while $(@expr1073742949 $false $) ;
127: $do ${ $if $(@expr1073742950 $prepareTest $(@expr1073742951 "template82" $) $) ${ $setVerbose $(@expr1073742952 $false $) $; template82 $(@expr1073742953 $) $; $} $} $while $(@expr1073742954 $false $) ;
128: $do ${ $if $(@expr1073742955 $prepareTest $(@expr1073742956 "template83" $) $) ${ $setVerbose $(@expr1073742957 $false $) $; template83 $(@expr1073742958 $) $; $} $} $while $(@expr1073742959 $false $) ;
129: $do ${ $if $(@expr1073742960 $prepareTest $(@expr1073742961 "template84" $) $) ${ $setVerbose $(@expr1073742962 $false $) $; template84 $(@expr1073742963 $) $; $} $} $while $(@expr1073742964 $false $) ;
130: $do ${ $if $(@expr1073742965 $prepareTest $(@expr1073742966 "template85" $) $) ${ $setVerbose $(@expr1073742967 $false $) $; template85 $(@expr1073742968 $) $; $} $} $while $(@expr1073742969 $false $) ;
131: $do ${ $if $(@expr1073742970 $prepareTest $(@expr1073742971 "template86" $) $) ${ $setVerbose $(@expr1073742972 $false $) $; template86 $(@expr1073742973 $) $; $} $} $while $(@expr1073742974 $false $) ;
132: $do ${ $if $(@expr1073742975 $prepareTest $(@expr1073742976 "template87" $) $) ${ $setVerbose $(@expr1073742977 $false $) $; template87 $(@expr1073742978 $) $; $} $} $while $(@expr1073742979 $false $) ;
133: $do ${ $if $(@expr1073742980 $prepareTest $(@expr1073742981 "template88" $) $) ${ $setVerbose $(@expr1073742982 $false $) $; template88 $(@expr1073742983 $) $; $} $} $while $(@expr1073742984 $false $) ;
134: $do ${ $if $(@expr1073742985 $prepareTest $(@expr1073742986 "template89" $) $) ${ $setVerbose $(@expr1073742987 $false $) $; template89 $(@expr1073742988 $) $; $} $} $while $(@expr1073742989 $false $) ;
135: $do ${ $if $(@expr1073742990 $prepareTest $(@expr1073742991 "template90" $) $) ${ $setVerbose $(@expr1073742992 $false $) $; template90 $(@expr1073742993 $) $; $} $} $while $(@expr1073742994 $false $) ;
136: $do ${ $if $(@expr1073742995 $prepareTest $(@expr1073742996 "template91" $) $) ${ $setVerbose $(@expr1073742997 $false $) $; template91 $(@expr1073742998 $) $; $} $} $while $(@expr1073742999 $false $) ;
137: $do ${ $if $(@expr1073743000 $prepareTest $(@expr1073743001 "template92" $) $) ${ $setVerbose $(@expr1073743002 $false $) $; template92 $(@expr1073743003 $) $; $} $} $while $(@expr1073743004 $false $) ;
138: $do ${ $if $(@expr1073743005 $prepareTest $(@expr1073743006 "template93" $) $) ${ $setVerbose $(@expr1073743007 $false $) $; template93 $(@expr1073743008 $) $; $} $} $while $(@expr1073743009 $false $) ;
139: $do ${ $if $(@expr1073743010 $prepareTest $(@expr1073743011 "template94" $) $) ${ $setVerbose $(@expr1073743012 $false $) $; template94 $(@expr1073743013 $) $; $} $} $while $(@expr1073743014 $false $) ;
140: $do ${ $if $(@expr1073743015 $prepareTest $(@expr1073743016 "template95" $) $) ${ $setVerbose $(@expr1073743017 $false $) $; template95 $(@expr1073743018 $) $; $} $} $while $(@expr1073743019 $false $) ;
141: $do ${ $if $(@expr1073743020 $prepareTest $(@expr1073743021 "template96" $) $) ${ $setVerbose $(@expr1073743022 $false $) $; template96 $(@expr1073743023 $) $; $} $} $while $(@expr1073743024 $false $) ;
142: $do ${ $if $(@expr1073743025 $prepareTest $(@expr1073743026 "template97" $) $) ${ $setVerbose $(@expr1073743027 $false $) $; template97 $(@expr1073743028 $) $; $} $} $while $(@expr1073743029 $false $) ;
143: $do ${ $if $(@expr1073743030 $prepareTest $(@expr1073743031 "template98" $) $) ${ $setVerbose $(@expr1073743032 $false $) $; template98 $(@expr1073743033 $) $; $} $} $while $(@expr1073743034 $false $) ;
144: $do ${ $if $(@expr1073743035 $prepareTest $(@expr1073743036 "template99" $) $) ${ $setVerbose $(@expr1073743037 $false $) $; template99 $(@expr1073743038 $) $; $} $} $while $(@expr1073743039 $false $) ;
145: $do ${ $if $(@expr1073743040 $prepareTest $(@expr1073743041 "template100" $) $) ${ $setVerbose $(@expr1073743042 $false $) $; template100 $(@expr1073743043 $) $; $} $} $while $(@expr1073743044 $false $) ;
146: $do ${ $if $(@expr1073743045 $prepareTest $(@expr1073743046 "template101" $) $) ${ $setVerbose $(@expr1073743047 $false $) $; template101 $(@expr1073743048 $) $; $} $} $while $(@expr1073743049 $false $) ;
147: $do ${ $if $(@expr1073743050 $prepareTest $(@expr1073743051 "template102" $) $) ${ $setVerbose $(@expr1073743052 $false $) $; template102 $(@expr1073743053 $) $; $} $} $while $(@expr1073743054 $false $) ;
148: $do ${ $if $(@expr1073743055 $prepareTest $(@expr1073743056 "template103" $) $) ${ $setVerbose $(@expr1073743057 $false $) $; template103 $(@expr1073743058 $) $; $} $} $while $(@expr1073743059 $false $) ;
149: $do ${ $if $(@expr1073743060 $prepareTest $(@expr1073743061 "template104" $) $) ${ $setVerbose $(@expr1073743062 $false $) $; template104 $(@expr1073743063 $) $; $} $} $while $(@expr1073743064 $false $) ;
150: $do ${ $if $(@expr1073743065 $prepareTest $(@expr1073743066 "template105" $) $) ${ $setVerbose $(@expr1073743067 $false $) $; template105 $(@expr1073743068 $) $; $} $} $while $(@expr1073743069 $false $) ;
151: $do ${ $if $(@expr1073743070 $prepareTest $(@expr1073743071 "template106" $) $) ${ $setVerbose $(@expr1073743072 $false $) $; template106 $(@expr1073743073 $) $; $} $} $while $(@expr1073743074 $false $) ;
152: $do ${ $if $(@expr1073743075 $prepareTest $(@expr1073743076 "template107" $) $) ${ $setVerbose $(@expr1073743077 $false $) $; template107 $(@expr1073743078 $) $; $} $} $while $(@expr1073743079 $false $) ;
153: $do ${ $if $(@expr1073743080 $prepareTest $(@expr1073743081 "template108" $) $) ${ $setVerbose $(@expr1073743082 $false $) $; template108 $(@expr1073743083 $) $; $} $} $while $(@expr1073743084 $false $) ;
154: $do ${ $if $(@expr1073743085 $prepareTest $(@expr1073743086 "template109" $) $) ${ $setVerbose $(@expr1073743087 $false $) $; template109 $(@expr1073743088 $) $; $} $} $while $(@expr1073743089 $false $) ;
155: $do ${ $if $(@expr1073743090 $prepareTest $(@expr1073743091 "template110" $) $) ${ $setVerbose $(@expr1073743092 $false $) $; template110 $(@expr1073743093 $) $; $} $} $while $(@expr1073743094 $false $) ;
156: $do ${ $if $(@expr1073743095 $prepareTest $(@expr1073743096 "template111" $) $) ${ $setVerbose $(@expr1073743097 $false $) $; template111 $(@expr1073743098 $) $; $} $} $while $(@expr1073743099 $false $) ;
157: $do ${ $if $(@expr1073743100 $prepareTest $(@expr1073743101 "template112" $) $) ${ $setVerbose $(@expr1073743102 $false $) $; template112 $(@expr1073743103 $) $; $} $} $while $(@expr1073743104 $false $) ;
158: $do ${ $if $(@expr1073743105 $prepareTest $(@expr1073743106 "template113" $) $) ${ $setVerbose $(@expr1073743107 $false $) $; template113 $(@expr1073743108 $) $; $} $} $while $(@expr1073743109 $false $) ;
159: $do ${ $if $(@expr1073743110 $prepareTest $(@expr1073743111 "template114" $) $) ${ $setVerbose $(@expr1073743112 $false $) $; template114 $(@expr1073743113 $) $; $} $} $while $(@expr1073743114 $false $) ;
160: $do ${ $if $(@expr1073743115 $prepareTest $(@expr1073743116 "template115" $) $) ${ $setVerbose $(@expr1073743117 $false $) $; template115 $(@expr1073743118 $) $; $} $} $while $(@expr1073743119 $false $) ;
161: $do ${ $if $(@expr1073743120 $prepareTest $(@expr1073743121 "template116" $) $) ${ $setVerbose $(@expr1073743122 $false $) $; template116 $(@expr1073743123 $) $; $} $} $while $(@expr1073743124 $false $) ;
162: $do ${ $if $(@expr1073743125 $prepareTest $(@expr1073743126 "template117" $) $) ${ $setVerbose $(@expr1073743127 $false $) $; template117 $(@expr1073743128 $) $; $} $} $while $(@expr1073743129 $false $) ;
163: $do ${ $if $(@expr1073743130 $prepareTest $(@expr1073743131 "template118" $) $) ${ $setVerbose $(@expr1073743132 $false $) $; template118 $(@expr1073743133 $) $; $} $} $while $(@expr1073743134 $false $) ;
164: $do ${ $if $(@expr1073743135 $prepareTest $(@expr1073743136 "template119" $) $) ${ $setVerbose $(@expr1073743137 $false $) $; template119 $(@expr1073743138 $) $; $} $} $while $(@expr1073743139 $false $) ;
165: $do ${ $if $(@expr1073743140 $prepareTest $(@expr1073743141 "template120" $) $) ${ $setVerbose $(@expr1073743142 $false $) $; template120 $(@expr1073743143 $) $; $} $} $while $(@expr1073743144 $false $) ;
166: $do ${ $if $(@expr1073743145 $prepareTest $(@expr1073743146 "template121" $) $) ${ $setVerbose $(@expr1073743147 $false $) $; template121 $(@expr1073743148 $) $; $} $} $while $(@expr1073743149 $false $) ;
167: $do ${ $if $(@expr1073743150 $prepareTest $(@expr1073743151 "template122" $) $) ${ $setVerbose $(@expr1073743152 $false $) $; template122 $(@expr1073743153 $) $; $} $} $while $(@expr1073743154 $false $) ;
168: $do ${ $if $(@expr1073743155 $prepareTest $(@expr1073743156 "template123" $) $) ${ $setVerbose $(@expr1073743157 $false $) $; template123 $(@expr1073743158 $) $; $} $} $while $(@expr1073743159 $false $) ;
169: $do ${ $if $(@expr1073743160 $prepareTest $(@expr1073743161 "template124" $) $) ${ $setVerbose $(@expr1073743162 $false $) $; template124 $(@expr1073743163 $) $; $} $} $while $(@expr1073743164 $false $) ;
170: $do ${ $if $(@expr1073743165 $prepareTest $(@expr1073743166 "template125" $) $) ${ $setVerbose $(@expr1073743167 $false $) $; template125 $(@expr1073743168 $) $; $} $} $while $(@expr1073743169 $false $) ;
171: $do ${ $if $(@expr1073743170 $prepareTest $(@expr1073743171 "template126" $) $) ${ $setVerbose $(@expr1073743172 $false $) $; template126 $(@expr1073743173 $) $; $} $} $while $(@expr1073743174 $false $) ;
172: $do ${ $if $(@expr1073743175 $prepareTest $(@expr1073743176 "template127" $) $) ${ $setVerbose $(@expr1073743177 $false $) $; template127 $(@expr1073743178 $) $; $} $} $while $(@expr1073743179 $false $) ;
173: $do ${ $if $(@expr1073743180 $prepareTest $(@expr1073743181 "template128" $) $) ${ $setVerbose $(@expr1073743182 $false $) $; template128 $(@expr1073743183 $) $; $} $} $while $(@expr1073743184 $false $) ;
174: $do ${ $if $(@expr1073743185 $prepareTest $(@expr1073743186 "template129" $) $) ${ $setVerbose $(@expr1073743187 $false $) $; template129 $(@expr1073743188 $) $; $} $} $while $(@expr1073743189 $false $) ;
175: $do ${ $if $(@expr1073743190 $prepareTest $(@expr1073743191 "template130" $) $) ${ $setVerbose $(@expr1073743192 $false $) $; template130 $(@expr1073743193 $) $; $} $} $while $(@expr1073743194 $false $) ;
176: $do ${ $if $(@expr1073743195 $prepareTest $(@expr1073743196 "template131" $) $) ${ $setVerbose $(@expr1073743197 $false $) $; template131 $(@expr1073743198 $) $; $} $} $while $(@expr1073743199 $false $) ;
177: $do ${ $if $(@expr1073743200 $prepareTest $(@expr1073743201 "template132" $) $) ${ $setVerbose $(@expr1073743202 $false $) $; template132 $(@expr1073743203 $) $; $} $} $while $(@expr1073743204 $false $) ;
178: $do ${ $if $(@expr1073743205 $prepareTest $(@expr1073743206 "template133" $) $) ${ $setVerbose $(@expr1073743207 $false $) $; template133 $(@expr1073743208 $) $; $} $} $while $(@expr1073743209 $false $) ;
179: $do ${ $if $(@expr1073743210 $prepareTest $(@expr1073743211 "template134" $) $) ${ $setVerbose $(@expr1073743212 $false $) $; template134 $(@expr1073743213 $) $; $} $} $while $(@expr1073743214 $false $) ;
180: $do ${ $if $(@expr1073743215 $prepareTest $(@expr1073743216 "template135" $) $) ${ $setVerbose $(@expr1073743217 $false $) $; template135 $(@expr1073743218 $) $; $} $} $while $(@expr1073743219 $false $) ;
181: $do ${ $if $(@expr1073743220 $prepareTest $(@expr1073743221 "template136" $) $) ${ $setVerbose $(@expr1073743222 $false $) $; template136 $(@expr1073743223 $) $; $} $} $while $(@expr1073743224 $false $) ;
182: $do ${ $if $(@expr1073743225 $prepareTest $(@expr1073743226 "template137" $) $) ${ $setVerbose $(@expr1073743227 $false $) $; template137 $(@expr1073743228 $) $; $} $} $while $(@expr1073743229 $false $) ;
183: $do ${ $if $(@expr1073743230 $prepareTest $(@expr1073743231 "template138" $) $) ${ $setVerbose $(@expr1073743232 $false $) $; template138 $(@expr1073743233 $) $; $} $} $while $(@expr1073743234 $false $) ;
184: $do ${ $if $(@expr1073743235 $prepareTest $(@expr1073743236 "template139" $) $) ${ $setVerbose $(@expr1073743237 $false $) $; template139 $(@expr1073743238 $) $; $} $} $while $(@expr1073743239 $false $) ;
185: $do ${ $if $(@expr1073743240 $prepareTest $(@expr1073743241 "template140" $) $) ${ $setVerbose $(@expr1073743242 $false $) $; template140 $(@expr1073743243 $) $; $} $} $while $(@expr1073743244 $false $) ;
186: $do ${ $if $(@expr1073743245 $prepareTest $(@expr1073743246 "template141" $) $) ${ $setVerbose $(@expr1073743247 $false $) $; template141 $(@expr1073743248 $) $; $} $} $while $(@expr1073743249 $false $) ;
187: $do ${ $if $(@expr1073743250 $prepareTest $(@expr1073743251 "template142" $) $) ${ $setVerbose $(@expr1073743252 $false $) $; template142 $(@expr1073743253 $) $; $} $} $while $(@expr1073743254 $false $) ;
188: $do ${ $if $(@expr1073743255 $prepareTest $(@expr1073743256 "template143" $) $) ${ $setVerbose $(@expr1073743257 $false $) $; template143 $(@expr1073743258 $) $; $} $} $while $(@expr1073743259 $false $) ;
189: $do ${ $if $(@expr1073743260 $prepareTest $(@expr1073743261 "template144" $) $) ${ $setVerbose $(@expr1073743262 $false $) $; template144 $(@expr1073743263 $) $; $} $} $while $(@expr1073743264 $false $) ;
190: $do ${ $if $(@expr1073743265 $prepareTest $(@expr1073743266 "template145" $) $) ${ $setVerbose $(@expr1073743267 $false $) $; template145 $(@expr1073743268 $) $; $} $} $while $(@expr1073743269 $false $) ;
191: $do ${ $if $(@expr1073743270 $prepareTest $(@expr1073743271 "template146" $) $) ${ $setVerbose $(@expr1073743272 $false $) $; template146 $(@expr1073743273 $) $; $} $} $while $(@expr1073743274 $false $) ;
192: $do ${ $if $(@expr1073743275 $prepareTest $(@expr1073743276 "template147" $) $) ${ $setVerbose $(@expr1073743277 $false $) $; template147 $(@expr1073743278 $) $; $} $} $while $(@expr1073743279 $false $) ;
193: $do ${ $if $(@expr1073743280 $prepareTest $(@expr1073743281 "template148" $) $) ${ $setVerbose $(@expr1073743282 $false $) $; template148 $(@expr1073743283 $) $; $} $} $while $(@expr1073743284 $false $) ;
194: $do ${ $if $(@expr1073743285 $prepareTest $(@expr1073743286 "template149" $) $) ${ $setVerbose $(@expr1073743287 $false $) $; template149 $(@expr1073743288 $) $; $} $} $while $(@expr1073743289 $false $) ;
195: $do ${ $if $(@expr1073743290 $prepareTest $(@expr1073743291 "template150" $) $) ${ $setVerbose $(@expr1073743292 $false $) $; template150 $(@expr1073743293 $) $; $} $} $while $(@expr1073743294 $false $) ;
196: $do ${ $if $(@expr1073743295 $prepareTest $(@expr1073743296 "template151" $) $) ${ $setVerbose $(@expr1073743297 $false $) $; template151 $(@expr1073743298 $) $; $} $} $while $(@expr1073743299 $false $) ;
197: $do ${ $if $(@expr1073743300 $prepareTest $(@expr1073743301 "template152" $) $) ${ $setVerbose $(@expr1073743302 $false $) $; template152 $(@expr1073743303 $) $; $} $} $while $(@expr1073743304 $false $) ;
198: $do ${ $if $(@expr1073743305 $prepareTest $(@expr1073743306 "template153" $) $) ${ $setVerbose $(@expr1073743307 $false $) $; template153 $(@expr1073743308 $) $; $} $} $while $(@expr1073743309 $false $) ;
199: $do ${ $if $(@expr1073743310 $prepareTest $(@expr1073743311 "template154" $) $) ${ $setVerbose $(@expr1073743312 $false $) $; template154 $(@expr1073743313 $) $; $} $} $while $(@expr1073743314 $false $) ;
200: $do ${ $if $(@expr1073743315 $prepareTest $(@expr1073743316 "template155" $) $) ${ $setVerbose $(@expr1073743317 $false $) $; template155 $(@expr1073743318 $) $; $} $} $while $(@expr1073743319 $false $) ;
201: $do ${ $if $(@expr1073743320 $prepareTest $(@expr1073743321 "template156" $) $) ${ $setVerbose $(@expr1073743322 $false $) $; template156 $(@expr1073743323 $) $; $} $} $while $(@expr1073743324 $false $) ;
202: $do ${ $if $(@expr1073743325 $prepareTest $(@expr1073743326 "template157" $) $) ${ $setVerbose $(@expr1073743327 $false $) $; template157 $(@expr1073743328 $) $; $} $} $while $(@expr1073743329 $false $) ;
203: $do ${ $if $(@expr1073743330 $prepareTest $(@expr1073743331 "template158" $) $) ${ $setVerbose $(@expr1073743332 $false $) $; template158 $(@expr1073743333 $) $; $} $} $while $(@expr1073743334 $false $) ;
204: $do ${ $if $(@expr1073743335 $prepareTest $(@expr1073743336 "template159" $) $) ${ $setVerbose $(@expr1073743337 $false $) $; template159 $(@expr1073743338 $) $; $} $} $while $(@expr1073743339 $false $) ;
205: $do ${ $if $(@expr1073743340 $prepareTest $(@expr1073743341 "template160" $) $) ${ $setVerbose $(@expr1073743342 $false $) $; template160 $(@expr1073743343 $) $; $} $} $while $(@expr1073743344 $false $) ;
206: $do ${ $if $(@expr1073743345 $prepareTest $(@expr1073743346 "template161" $) $) ${ $setVerbose $(@expr1073743347 $false $) $; template161 $(@expr1073743348 $) $; $} $} $while $(@expr1073743349 $false $) ;
207: $do ${ $if $(@expr1073743350 $prepareTest $(@expr1073743351 "template162" $) $) ${ $setVerbose $(@expr1073743352 $false $) $; template162 $(@expr1073743353 $) $; $} $} $while $(@expr1073743354 $false $) ;
208: $do ${ $if $(@expr1073743355 $prepareTest $(@expr1073743356 "template163" $) $) ${ $setVerbose $(@expr1073743357 $false $) $; template163 $(@expr1073743358 $) $; $} $} $while $(@expr1073743359 $false $) ;
209: $do ${ $if $(@expr1073743360 $prepareTest $(@expr1073743361 "template164" $) $) ${ $setVerbose $(@expr1073743362 $false $) $; template164 $(@expr1073743363 $) $; $} $} $while $(@expr1073743364 $false $) ;
210: $do ${ $if $(@expr1073743365 $prepareTest $(@expr1073743366 "template165" $) $) ${ $setVerbose $(@expr1073743367 $false $) $; template165 $(@expr1073743368 $) $; $} $} $while $(@expr1073743369 $false $) ;
211: $do ${ $if $(@expr1073743370 $prepareTest $(@expr1073743371 "template166" $) $) ${ $setVerbose $(@expr1073743372 $false $) $; template166 $(@expr1073743373 $) $; $} $} $while $(@expr1073743374 $false $) ;
212: $do ${ $if $(@expr1073743375 $prepareTest $(@expr1073743376 "template167" $) $) ${ $setVerbose $(@expr1073743377 $false $) $; template167 $(@expr1073743378 $) $; $} $} $while $(@expr1073743379 $false $) ;
213: $do ${ $if $(@expr1073743380 $prepareTest $(@expr1073743381 "template168" $) $) ${ $setVerbose $(@expr1073743382 $false $) $; template168 $(@expr1073743383 $) $; $} $} $while $(@expr1073743384 $false $) ;
214: $do ${ $if $(@expr1073743385 $prepareTest $(@expr1073743386 "template169" $) $) ${ $setVerbose $(@expr1073743387 $false $) $; template169 $(@expr1073743388 $) $; $} $} $while $(@expr1073743389 $false $) ;
215: $do ${ $if $(@expr1073743390 $prepareTest $(@expr1073743391 "template170" $) $) ${ $setVerbose $(@expr1073743392 $false $) $; template170 $(@expr1073743393 $) $; $} $} $while $(@expr1073743394 $false $) ;
216: $do ${ $if $(@expr1073743395 $prepareTest $(@expr1073743396 "template171" $) $) ${ $setVerbose $(@expr1073743397 $false $) $; template171 $(@expr1073743398 $) $; $} $} $while $(@expr1073743399 $false $) ;
217: $do ${ $if $(@expr1073743400 $prepareTest $(@expr1073743401 "template172" $) $) ${ $setVerbose $(@expr1073743402 $false $) $; template172 $(@expr1073743403 $) $; $} $} $while $(@expr1073743404 $false $) ;
218: $do ${ $if $(@expr1073743405 $prepareTest $(@expr1073743406 "template173" $) $) ${ $setVerbose $(@expr1073743407 $false $) $; template173 $(@expr1073743408 $) $; $} $} $while $(@expr1073743409 $false $) ;
219: $do ${ $if $(@expr1073743410 $prepareTest $(@expr1073743411 "template174" $) $) ${ $setVerbose $(@expr1073743412 $false $) $; template174 $(@expr1073743413 $) $; $} $} $while $(@expr1073743414 $false $) ;
220: $do ${ $if $(@expr1073743415 $prepareTest $(@expr1073743416 "template175" $) $) ${ $setVerbose $(@expr1073743417 $false $) $; template175 $(@expr1073743418 $) $; $} $} $while $(@expr1073743419 $false $) ;
221: $do ${ $if $(@expr1073743420 $prepareTest $(@expr1073743421 "template_specialization_1" $) $) ${ $setVerbose $(@expr1073743422 $false $) $; template_specialization_1 $(@expr1073743423 $) $; $} $} $while $(@expr1073743424 $false $) ;
222: $do ${ $if $(@expr1073743425 $prepareTest $(@expr1073743426 "template_specialization_2" $) $) ${ $setVerbose $(@expr1073743427 $false $) $; template_specialization_2 $(@expr1073743428 $) $; $} $} $while $(@expr1073743429 $false $) ;
223: $do ${ $if $(@expr1073743430 $prepareTest $(@expr1073743431 "template_enum" $) $) ${ $setVerbose $(@expr1073743432 $false $) $; template_enum $(@expr1073743433 $) $; $} $} $while $(@expr1073743434 $false $) ;
224: $do ${ $if $(@expr1073743435 $prepareTest $(@expr1073743436 "template_unhandled" $) $) ${ $setVerbose $(@expr1073743437 $false $) $; template_unhandled $(@expr1073743438 $) $; $} $} $while $(@expr1073743439 $false $) ;
225: $do ${ $if $(@expr1073743440 $prepareTest $(@expr1073743441 "template_default_parameter" $) $) ${ $setVerbose $(@expr1073743442 $false $) $; template_default_parameter $(@expr1073743443 $) $; $} $} $while $(@expr1073743444 $false $) ;
226: $do ${ $if $(@expr1073743445 $prepareTest $(@expr1073743446 "template_forward_declared_default_parameter" $) $) ${ $setVerbose $(@expr1073743447 $false $) $; template_forward_declared_default_parameter $(@expr1073743448 $) $; $} $} $while $(@expr1073743449 $false $) ;
227: $do ${ $if $(@expr1073743450 $prepareTest $(@expr1073743451 "template_default_type" $) $) ${ $setVerbose $(@expr1073743452 $false $) $; template_default_type $(@expr1073743453 $) $; $} $} $while $(@expr1073743454 $false $) ;
228: $do ${ $if $(@expr1073743455 $prepareTest $(@expr1073743456 "template_typename" $) $) ${ $setVerbose $(@expr1073743457 $false $) $; template_typename $(@expr1073743458 $) $; $} $} $while $(@expr1073743459 $false $) ;
229: $do ${ $if $(@expr1073743460 $prepareTest $(@expr1073743461 "template_constructor" $) $) ${ $setVerbose $(@expr1073743462 $false $) $; template_constructor $(@expr1073743463 $) $; $} $} $while $(@expr1073743464 $false $) ;
230: $do ${ $if $(@expr1073743465 $prepareTest $(@expr1073743466 "syntax_error_templates_1" $) $) ${ $setVerbose $(@expr1073743467 $false $) $; syntax_error_templates_1 $(@expr1073743468 $) $; $} $} $while $(@expr1073743469 $false $) ;
231: $do ${ $if $(@expr1073743470 $prepareTest $(@expr1073743471 "template_member_ptr" $) $) ${ $setVerbose $(@expr1073743472 $false $) $; template_member_ptr $(@expr1073743473 $) $; $} $} $while $(@expr1073743474 $false $) ;
232: $do ${ $if $(@expr1073743475 $prepareTest $(@expr1073743476 "template_namespace_1" $) $) ${ $setVerbose $(@expr1073743477 $false $) $; template_namespace_1 $(@expr1073743478 $) $; $} $} $while $(@expr1073743479 $false $) ;
233: $do ${ $if $(@expr1073743480 $prepareTest $(@expr1073743481 "template_namespace_2" $) $) ${ $setVerbose $(@expr1073743482 $false $) $; template_namespace_2 $(@expr1073743483 $) $; $} $} $while $(@expr1073743484 $false $) ;
234: $do ${ $if $(@expr1073743485 $prepareTest $(@expr1073743486 "template_namespace_3" $) $) ${ $setVerbose $(@expr1073743487 $false $) $; template_namespace_3 $(@expr1073743488 $) $; $} $} $while $(@expr1073743489 $false $) ;
235: $do ${ $if $(@expr1073743490 $prepareTest $(@expr1073743491 "template_namespace_4" $) $) ${ $setVerbose $(@expr1073743492 $false $) $; template_namespace_4 $(@expr1073743493 $) $; $} $} $while $(@expr1073743494 $false $) ;
236: $do ${ $if $(@expr1073743495 $prepareTest $(@expr1073743496 "template_namespace_5" $) $) ${ $setVerbose $(@expr1073743497 $false $) $; template_namespace_5 $(@expr1073743498 $) $; $} $} $while $(@expr1073743499 $false $) ;
237: $do ${ $if $(@expr1073743500 $prepareTest $(@expr1073743501 "template_namespace_6" $) $) ${ $setVerbose $(@expr1073743502 $false $) $; template_namespace_6 $(@expr1073743503 $) $; $} $} $while $(@expr1073743504 $false $) ;
238: $do ${ $if $(@expr1073743505 $prepareTest $(@expr1073743506 "template_namespace_7" $) $) ${ $setVerbose $(@expr1073743507 $false $) $; template_namespace_7 $(@expr1073743508 $) $; $} $} $while $(@expr1073743509 $false $) ;
239: $do ${ $if $(@expr1073743510 $prepareTest $(@expr1073743511 "template_namespace_8" $) $) ${ $setVerbose $(@expr1073743512 $false $) $; template_namespace_8 $(@expr1073743513 $) $; $} $} $while $(@expr1073743514 $false $) ;
240: $do ${ $if $(@expr1073743515 $prepareTest $(@expr1073743516 "template_namespace_9" $) $) ${ $setVerbose $(@expr1073743517 $false $) $; template_namespace_9 $(@expr1073743518 $) $; $} $} $while $(@expr1073743519 $false $) ;
241: $do ${ $if $(@expr1073743520 $prepareTest $(@expr1073743521 "template_namespace_10" $) $) ${ $setVerbose $(@expr1073743522 $false $) $; template_namespace_10 $(@expr1073743523 $) $; $} $} $while $(@expr1073743524 $false $) ;
242: $do ${ $if $(@expr1073743525 $prepareTest $(@expr1073743526 "template_namespace_11" $) $) ${ $setVerbose $(@expr1073743527 $false $) $; template_namespace_11 $(@expr1073743528 $) $; $} $} $while $(@expr1073743529 $false $) ;
243: $do ${ $if $(@expr1073743530 $prepareTest $(@expr1073743531 "template_pointer_type" $) $) ${ $setVerbose $(@expr1073743532 $false $) $; template_pointer_type $(@expr1073743533 $) $; $} $} $while $(@expr1073743534 $false $) ;
244: $do ${ $if $(@expr1073743535 $prepareTest $(@expr1073743536 "template_array_type" $) $) ${ $setVerbose $(@expr1073743537 $false $) $; template_array_type $(@expr1073743538 $) $; $} $} $while $(@expr1073743539 $false $) ;
245:
246:
247: $do ${ $if $(@expr1073743540 $prepareTest $(@expr1073743541 "templateParameters" $) $) ${ $setVerbose $(@expr1073743542 $false $) $; templateParameters $(@expr1073743543 $) $; $} $} $while $(@expr1073743544 $false $) ;
248:
249: $do ${ $if $(@expr1073743545 $prepareTest $(@expr1073743546 "templateNamePosition" $) $) ${ $setVerbose $(@expr1073743547 $false $) $; templateNamePosition $(@expr1073743548 $) $; $} $} $while $(@expr1073743549 $false $) ;
250:
251: $do ${ $if $(@expr1073743550 $prepareTest $(@expr1073743551 "findTemplateDeclarationEnd" $) $) ${ $setVerbose $(@expr1073743552 $false $) $; findTemplateDeclarationEnd $(@expr1073743553 $) $; $} $} $while $(@expr1073743554 $false $) ;
252:
253: $do ${ $if $(@expr1073743555 $prepareTest $(@expr1073743556 "getTemplateParametersInDeclaration" $) $) ${ $setVerbose $(@expr1073743557 $false $) $; getTemplateParametersInDeclaration $(@expr1073743558 $) $; $} $} $while $(@expr1073743559 $false $) ;
254:
255: $do ${ $if $(@expr1073743560 $prepareTest $(@expr1073743561 "expandSpecialized1" $) $) ${ $setVerbose $(@expr1073743562 $false $) $; expandSpecialized1 $(@expr1073743563 $) $; $} $} $while $(@expr1073743564 $false $) ;
256: $do ${ $if $(@expr1073743565 $prepareTest $(@expr1073743566 "expandSpecialized2" $) $) ${ $setVerbose $(@expr1073743567 $false $) $; expandSpecialized2 $(@expr1073743568 $) $; $} $} $while $(@expr1073743569 $false $) ;
257: $do ${ $if $(@expr1073743570 $prepareTest $(@expr1073743571 "expandSpecialized3" $) $) ${ $setVerbose $(@expr1073743572 $false $) $; expandSpecialized3 $(@expr1073743573 $) $; $} $} $while $(@expr1073743574 $false $) ;
258: $do ${ $if $(@expr1073743575 $prepareTest $(@expr1073743576 "expandSpecialized4" $) $) ${ $setVerbose $(@expr1073743577 $false $) $; expandSpecialized4 $(@expr1073743578 $) $; $} $} $while $(@expr1073743579 $false $) ;
259: $do ${ $if $(@expr1073743580 $prepareTest $(@expr1073743581 "expandSpecialized5" $) $) ${ $setVerbose $(@expr1073743582 $false $) $; expandSpecialized5 $(@expr1073743583 $) $; $} $} $while $(@expr1073743584 $false $) ;
260:
261: $do ${ $if $(@expr1073743585 $prepareTest $(@expr1073743586 "templateAlias1" $) $) ${ $setVerbose $(@expr1073743587 $false $) $; templateAlias1 $(@expr1073743588 $) $; $} $} $while $(@expr1073743589 $false $) ;
262: $do ${ $if $(@expr1073743590 $prepareTest $(@expr1073743591 "templateAlias2" $) $) ${ $setVerbose $(@expr1073743592 $false $) $; templateAlias2 $(@expr1073743593 $) $; $} $} $while $(@expr1073743594 $false $) ;
263: $do ${ $if $(@expr1073743595 $prepareTest $(@expr1073743596 "templateAlias3" $) $) ${ $setVerbose $(@expr1073743597 $false $) $; templateAlias3 $(@expr1073743598 $) $; $} $} $while $(@expr1073743599 $false $) ;
264: $do ${ $if $(@expr1073743600 $prepareTest $(@expr1073743601 "templateAlias4" $) $) ${ $setVerbose $(@expr1073743602 $false $) $; templateAlias4 $(@expr1073743603 $) $; $} $} $while $(@expr1073743604 $false $) ;
265: $do ${ $if $(@expr1073743605 $prepareTest $(@expr1073743606 "templateAlias5" $) $) ${ $setVerbose $(@expr1073743607 $false $) $; templateAlias5 $(@expr1073743608 $) $; $} $} $while $(@expr1073743609 $false $) ;
266:
267:
268: $do ${ $if $(@expr1073743610 $prepareTest $(@expr1073743611 "instantiateMatchTest" $) $) ${ $setVerbose $(@expr1073743612 $false $) $; instantiateMatchTest $(@expr1073743613 $) $; $} $} $while $(@expr1073743614 $false $) ;
269: $do ${ $if $(@expr1073743615 $prepareTest $(@expr1073743616 "templateParameterWithoutName" $) $) ${ $setVerbose $(@expr1073743617 $false $) $; templateParameterWithoutName $(@expr1073743618 $) $; $} $} $while $(@expr1073743619 $false $) ;
270:
271: $do ${ $if $(@expr1073743620 $prepareTest $(@expr1073743621 "templateTypeDeduction1" $) $) ${ $setVerbose $(@expr1073743622 $false $) $; templateTypeDeduction1 $(@expr1073743623 $) $; $} $} $while $(@expr1073743624 $false $) ;
272: $do ${ $if $(@expr1073743625 $prepareTest $(@expr1073743626 "templateTypeDeduction2" $) $) ${ $setVerbose $(@expr1073743627 $false $) $; templateTypeDeduction2 $(@expr1073743628 $) $; $} $} $while $(@expr1073743629 $false $) ;
273: $do ${ $if $(@expr1073743630 $prepareTest $(@expr1073743631 "templateTypeDeduction3" $) $) ${ $setVerbose $(@expr1073743632 $false $) $; templateTypeDeduction3 $(@expr1073743633 $) $; $} $} $while $(@expr1073743634 $false $) ;
274: $do ${ $if $(@expr1073743635 $prepareTest $(@expr1073743636 "templateTypeDeduction4" $) $) ${ $setVerbose $(@expr1073743637 $false $) $; templateTypeDeduction4 $(@expr1073743638 $) $; $} $} $while $(@expr1073743639 $false $) ;
275: $do ${ $if $(@expr1073743640 $prepareTest $(@expr1073743641 "templateTypeDeduction5" $) $) ${ $setVerbose $(@expr1073743642 $false $) $; templateTypeDeduction5 $(@expr1073743643 $) $; $} $} $while $(@expr1073743644 $false $) ;
276:
277: $do ${ $if $(@expr1073743645 $prepareTest $(@expr1073743646 "simplifyTemplateArgs1" $) $) ${ $setVerbose $(@expr1073743647 $false $) $; simplifyTemplateArgs1 $(@expr1073743648 $) $; $} $} $while $(@expr1073743649 $false $) ;
278: $do ${ $if $(@expr1073743650 $prepareTest $(@expr1073743651 "simplifyTemplateArgs2" $) $) ${ $setVerbose $(@expr1073743652 $false $) $; simplifyTemplateArgs2 $(@expr1073743653 $) $; $} $} $while $(@expr1073743654 $false $) ;
279:
280: $do ${ $if $(@expr1073743655 $prepareTest $(@expr1073743656 "template_variadic_1" $) $) ${ $setVerbose $(@expr1073743657 $false $) $; template_variadic_1 $(@expr1073743658 $) $; $} $} $while $(@expr1073743659 $false $) ;
281: $do ${ $if $(@expr1073743660 $prepareTest $(@expr1073743661 "template_variadic_2" $) $) ${ $setVerbose $(@expr1073743662 $false $) $; template_variadic_2 $(@expr1073743663 $) $; $} $} $while $(@expr1073743664 $false $) ;
282: $do ${ $if $(@expr1073743665 $prepareTest $(@expr1073743666 "template_variadic_3" $) $) ${ $setVerbose $(@expr1073743667 $false $) $; template_variadic_3 $(@expr1073743668 $) $; $} $} $while $(@expr1073743669 $false $) ;
283:
284: $do ${ $if $(@expr1073743670 $prepareTest $(@expr1073743671 "template_variable_1" $) $) ${ $setVerbose $(@expr1073743672 $false $) $; template_variable_1 $(@expr1073743673 $) $; $} $} $while $(@expr1073743674 $false $) ;
285: $do ${ $if $(@expr1073743675 $prepareTest $(@expr1073743676 "template_variable_2" $) $) ${ $setVerbose $(@expr1073743677 $false $) $; template_variable_2 $(@expr1073743678 $) $; $} $} $while $(@expr1073743679 $false $) ;
286: $do ${ $if $(@expr1073743680 $prepareTest $(@expr1073743681 "template_variable_3" $) $) ${ $setVerbose $(@expr1073743682 $false $) $; template_variable_3 $(@expr1073743683 $) $; $} $} $while $(@expr1073743684 $false $) ;
287: $do ${ $if $(@expr1073743685 $prepareTest $(@expr1073743686 "template_variable_4" $) $) ${ $setVerbose $(@expr1073743687 $false $) $; template_variable_4 $(@expr1073743688 $) $; $} $} $while $(@expr1073743689 $false $) ;
288:
289: $do ${ $if $(@expr1073743690 $prepareTest $(@expr1073743691 "simplifyDecltype" $) $) ${ $setVerbose $(@expr1073743692 $false $) $; simplifyDecltype $(@expr1073743693 $) $; $} $} $while $(@expr1073743694 $false $) ;
290:
291: $do ${ $if $(@expr1073743695 $prepareTest $(@expr1073743696 "castInExpansion" $) $) ${ $setVerbose $(@expr1073743697 $false $) $; castInExpansion $(@expr1073743698 $) $; $} $} $while $(@expr1073743699 $false $) ;
292:
293: $do ${ $if $(@expr1073743700 $prepareTest $(@expr1073743701 "fold_expression_1" $) $) ${ $setVerbose $(@expr1073743702 $false $) $; fold_expression_1 $(@expr1073743703 $) $; $} $} $while $(@expr1073743704 $false $) ;
294: $do ${ $if $(@expr1073743705 $prepareTest $(@expr1073743706 "fold_expression_2" $) $) ${ $setVerbose $(@expr1073743707 $false $) $; fold_expression_2 $(@expr1073743708 $) $; $} $} $while $(@expr1073743709 $false $) ;
295: $do ${ $if $(@expr1073743710 $prepareTest $(@expr1073743711 "fold_expression_3" $) $) ${ $setVerbose $(@expr1073743712 $false $) $; fold_expression_3 $(@expr1073743713 $) $; $} $} $while $(@expr1073743714 $false $) ;
296: $do ${ $if $(@expr1073743715 $prepareTest $(@expr1073743716 "fold_expression_4" $) $) ${ $setVerbose $(@expr1073743717 $false $) $; fold_expression_4 $(@expr1073743718 $) $; $} $} $while $(@expr1073743719 $false $) ;
297:
298: $do ${ $if $(@expr1073743720 $prepareTest $(@expr1073743721 "concepts1" $) $) ${ $setVerbose $(@expr1073743722 $false $) $; concepts1 $(@expr1073743723 $) $; $} $} $while $(@expr1073743724 $false $) ;
299: $do ${ $if $(@expr1073743725 $prepareTest $(@expr1073743726 "requires1" $) $) ${ $setVerbose $(@expr1073743727 $false $) $; requires1 $(@expr1073743728 $) $; $} $} $while $(@expr1073743729 $false $) ;
300: $do ${ $if $(@expr1073743730 $prepareTest $(@expr1073743731 "requires2" $) $) ${ $setVerbose $(@expr1073743732 $false $) $; requires2 $(@expr1073743733 $) $; $} $} $while $(@expr1073743734 $false $) ;
301: $do ${ $if $(@expr1073743735 $prepareTest $(@expr1073743736 "requires3" $) $) ${ $setVerbose $(@expr1073743737 $false $) $; requires3 $(@expr1073743738 $) $; $} $} $while $(@expr1073743739 $false $) ;
302: $do ${ $if $(@expr1073743740 $prepareTest $(@expr1073743741 "requires4" $) $) ${ $setVerbose $(@expr1073743742 $false $) $; requires4 $(@expr1073743743 $) $; $} $} $while $(@expr1073743744 $false $) ;
303: $do ${ $if $(@expr1073743745 $prepareTest $(@expr1073743746 "requires5" $) $) ${ $setVerbose $(@expr1073743747 $false $) $; requires5 $(@expr1073743748 $) $; $} $} $while $(@expr1073743749 $false $) ;
304:
305: $do ${ $if $(@expr1073743750 $prepareTest $(@expr1073743751 "explicitBool1" $) $) ${ $setVerbose $(@expr1073743752 $false $) $; explicitBool1 $(@expr1073743753 $) $; $} $} $while $(@expr1073743754 $false $) ;
306: $do ${ $if $(@expr1073743755 $prepareTest $(@expr1073743756 "explicitBool2" $) $) ${ $setVerbose $(@expr1073743757 $false $) $; explicitBool2 $(@expr1073743758 $) $; $} $} $while $(@expr1073743759 $false $) ;
307: }
308:
309:
310: std :: string tok_ ( const char * file@var105 , int line@var106 , const char code@var107 [ ] , bool debugwarnings@var108 = false , Settings :: PlatformType type@var109 = Settings :: Native ) {
311: errout@var100 .@expr1073743760 str (@expr1073743761 "" ) ;
312:
313: settings@var102 .@expr1073743762 debugwarnings@var110 =@expr1073743763 debugwarnings@var108 ;
314: settings@var102 .@expr1073743764 platform (@expr1073743765 type@var109 ) ;
315: Tokenizer tokenizer@var111 (@expr1073743766 &@expr1073743767 settings@var102 , this@expr1073743768 ) ;
316:
317: std ::@expr1073743769 istringstream istr@var112 (@expr1073743770 code@var107 ) ;
318: $assert_ $(@expr1073743771 file@var105 $, line@var106 $, $(@expr1073743772 tokenizer@var111 .@expr1073743773 tokenize (@expr1073743774 istr@var112 , "test.cpp" ) $) $) ;
319:
320: return tokenizer@var111 .@expr1073743775 tokens (@expr1073743776 ) .@expr1073743777 stringifyList (@expr1073743778 nullptr , true ) ;
321: }
322:
323: void template1 ( ) {
324: const char code@var113 [@expr1073743779 51 ] =@expr1073743780 "template <class T> T f(T val) { T a; }\nf<int>(10);"
325: ;
326:
327: const char expected@var114 [@expr1073743781 76 ] =@expr1073743782 "int f<int> ( int val ) ; f<int> ( 10 ) ; int f<int> ( int val ) { int a ; }"
328:
329: ;
330:
331: $if $(@expr1073743783 $!@expr1073743784 $assertEquals $(@expr1073743785 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 331 $, expected@var114 $, $tok_ $(@expr1073743786 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 331 $, code@var113 $) $) $) { $return ; }
332: }
333:
334: void template2 ( ) {
335: const char code@var115 [@expr1073743787 56 ] =@expr1073743788 "template <class T> class Fred { T a; };\nFred<int> fred;"
336: ;
337:
338: const char expected@var116 [@expr1073743789 65 ] =@expr1073743790 "class Fred<int> ; Fred<int> fred ; class Fred<int> { int a ; } ;"
339:
340: ;
341:
342: $if $(@expr1073743791 $!@expr1073743792 $assertEquals $(@expr1073743793 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 342 $, expected@var116 $, $tok_ $(@expr1073743794 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 342 $, code@var115 $) $) $) { $return ; }
343: }
344:
345: void template3 ( ) {
346: const char code@var117 [@expr1073743795 75 ] =@expr1073743796 "template <class T, int sz> class Fred { T data[sz]; };\nFred<float,4> fred;"
347: ;
348:
349: const char expected@var118 [@expr1073743797 88 ] =@expr1073743798 "class Fred<float,4> ; Fred<float,4> fred ; class Fred<float,4> { float data [ 4 ] ; } ;"
350:
351: ;
352:
353: $if $(@expr1073743799 $!@expr1073743800 $assertEquals $(@expr1073743801 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 353 $, expected@var118 $, $tok_ $(@expr1073743802 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 353 $, code@var117 $) $) $) { $return ; }
354: }
355:
356: void template4 ( ) {
357: const char code@var119 [@expr1073743803 61 ] =@expr1073743804 "template <class T> class Fred { Fred(); };\nFred<float> fred;"
358: ;
359:
360: const char expected@var120 [@expr1073743805 81 ] =@expr1073743806 "class Fred<float> ; Fred<float> fred ; class Fred<float> { Fred<float> ( ) ; } ;"
361:
362: ;
363:
364: $if $(@expr1073743807 $!@expr1073743808 $assertEquals $(@expr1073743809 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 364 $, expected@var120 $, $tok_ $(@expr1073743810 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 364 $, code@var119 $) $) $) { $return ; }
365: }
366:
367: void template5 ( ) {
368: const char code@var121 [@expr1073743811 92 ] =@expr1073743812 "template <class T> class Fred { };\ntemplate <class T> Fred<T>::Fred() { }\nFred<float> fred;"
369:
370: ;
371:
372: const char expected@var122 [@expr1073743813 98 ] =@expr1073743814 "class Fred<float> ; Fred<float> fred ; class Fred<float> { } ; Fred<float> :: Fred<float> ( ) { }"
373:
374:
375: ;
376:
377: $if $(@expr1073743815 $!@expr1073743816 $assertEquals $(@expr1073743817 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 377 $, expected@var122 $, $tok_ $(@expr1073743818 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 377 $, code@var121 $) $) $) { $return ; }
378: }
379:
380: void template6 ( ) {
381: const char code@var123 [@expr1073743819 73 ] =@expr1073743820 "template <class T> class Fred { };\nFred<float> fred1;\nFred<float> fred2;"
382:
383: ;
384:
385: const char expected@var124 [@expr1073743821 84 ] =@expr1073743822 "class Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; class Fred<float> { } ;"
386:
387:
388: ;
389:
390: $if $(@expr1073743823 $!@expr1073743824 $assertEquals $(@expr1073743825 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 390 $, expected@var124 $, $tok_ $(@expr1073743826 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 390 $, code@var123 $) $) $) { $return ; }
391: }
392:
393: void template7 ( ) {
394:
395: {
396: const char code@var125 [@expr1073743827 65 ] =@expr1073743828 "template <class T>\nclass ABC\n{\npublic:\n    typedef ABC<T> m;\n};\n"
397:
|
400:
401: ;
402:
403: const char expected@var126 [@expr1073743829 45 ] =@expr1073743830 "template < class T > class ABC { public: } ;" ;
404:
405: $if $(@expr1073743831 $!@expr1073743832 $assertEquals $(@expr1073743833 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 405 $, expected@var126 $, $tok_ $(@expr1073743834 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 405 $, code@var125 $) $) $) { $return ; }
406: }
407:
408: {
409: const char code@var127 [@expr1073743835 150 ] =@expr1073743836 "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n};\nint main() {\n    ABC<int>::type v;\n    v.push_back(4);\n    return 0;\n}\n"
410:
|
416:
417: ;
418:
419: const char wanted@var128 [@expr1073743837 122 ] =@expr1073743838 "class ABC<int> ; int main ( ) { std :: vector < int > v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;"
420:
|
424:
425: ;
426:
427: const char current@var129 [@expr1073743839 117 ] =@expr1073743840 "class ABC<int> ; int main ( ) { ABC<int> :: type v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;"
428:
|
432:
433: ;
434:
435: $todoAssertEquals $(@expr1073743841 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 435 $, wanted@var128 $, current@var129 $, $tok_ $(@expr1073743842 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 435 $, code@var127 $) $) ;
436: }
437:
438: {
439: const char code@var130 [@expr1073743843 150 ] =@expr1073743844 "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n    void f()\n    {\n      ABC<int>::type v;\n      v.push_back(4);\n    }\n};\n"
440:
|
446:
447: ;
448:
449: const char expected@var131 [@expr1073743845 109 ] =@expr1073743846 "template < typename T > class ABC { public: void f ( ) { ABC < int > :: type v ; v . push_back ( 4 ) ; } } ;"
450:
|
453:
454: ;
455:
456: $if $(@expr1073743847 $!@expr1073743848 $assertEquals $(@expr1073743849 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 456 $, expected@var131 $, $tok_ $(@expr1073743850 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 456 $, code@var130 $) $) $) { $return ; }
457: }
458: }
459:
460:
461: void template8 ( ) {
462: const char code@var132 [@expr1073743851 290 ] =@expr1073743852 "template<typename T> class A;\ntemplate<typename T> class B;\n\ntypedef A<int> x;\ntypedef B<int> y;\n\ntemplate<typename T> class A {\n    void f() {\n        B<T> a = B<T>::g();\n        T b = 0;\n        if (b)\n            b = 0;\n    }\n};\n\ntemplate<typename T> inline B<T> h() { return B<T>(); }\n"
463:
|
476:
477: ;
478:
479: $if $(@expr1073743853 $!@expr1073743854 $assertEquals $(@expr1073743855 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 479 $, "template < typename T > class A ; template < typename T > class B ; template < typename T > class A { void f ( ) { B < T > a ; a = B < T > :: g ( ) ; T b ; b = 0 ; if ( b ) { b = 0 ; } } } ; template < typename T > B < T > h ( ) { return B < T > ( ) ; }" $, $tok_ $(@expr1073743856 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 479 $, code@var132 $) $) $) { $return
480:
481:
482: ; }
483:
484: $if $(@expr1073743857 $!@expr1073743858 $assertEquals $(@expr1073743859 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 484 $, "class A { template < typename T > int foo ( T d ) ; } ;" $, $tok_ $(@expr1073743860 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 484 $, "class A{ template<typename T> int foo(T d);};" $) $) $) { $return ; }
485: }
486:
487: void template9 ( ) {
488: const char code@var133 [@expr1073743861 174 ] =@expr1073743862 "template < typename T > class A { } ;\n\nvoid f ( ) {\n    A < int > a ;\n}\n\ntemplate < typename T >\nclass B {\n    void g ( ) {\n        A < T > b = A < T > :: h ( ) ;\n    }\n} ;\n"
489:
|
498:
499: ;
500:
501:
502: const char expected@var134 [@expr1073743863 148 ] =@expr1073743864 "class A<int> ; void f ( ) { A<int> a ; } template < typename T > class B { void g ( ) { A < T > b ; b = A < T > :: h ( ) ; } } ; class A<int> { } ;"
503:
504:
505: ;
506:
507: $if $(@expr1073743865 $!@expr1073743866 $assertEquals $(@expr1073743867 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 507 $, expected@var134 $, $tok_ $(@expr1073743868 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 507 $, code@var133 $) $) $) { $return ; }
508: }
509:
510: void template10 ( ) {
511: const char code@var135 [@expr1073743869 97 ] =@expr1073743870 "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    foo<3,int>();\n}\n"
512:
|
516:
517: ;
518:
519:
520: const char expected@var136 [@expr1073743871 103 ] =@expr1073743872 "int * foo<3,int> ( ) ; void f ( ) { foo<3,int> ( ) ; } int * foo<3,int> ( ) { return new int [ 3 ] ; }"
521:
|
524:
525: ;
526: $if $(@expr1073743873 $!@expr1073743874 $assertEquals $(@expr1073743875 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 526 $, expected@var136 $, $tok_ $(@expr1073743876 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 526 $, code@var135 $) $) $) { $return ; }
527: }
528:
529: void template11 ( ) {
530: const char code@var137 [@expr1073743877 109 ] =@expr1073743878 "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    char * p = foo<3,char>();\n}\n"
531:
|
535:
536: ;
537:
538:
539: const char expected@var138 [@expr1073743879 124 ] =@expr1073743880 "char * foo<3,char> ( ) ; void f ( ) { char * p ; p = foo<3,char> ( ) ; } char * foo<3,char> ( ) { return new char [ 3 ] ; }"
540:
|
543:
544: ;
545: $if $(@expr1073743881 $!@expr1073743882 $assertEquals $(@expr1073743883 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 545 $, expected@var138 $, $tok_ $(@expr1073743884 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 545 $, code@var137 $) $) $) { $return ; }
546: }
547:
548: void template12 ( ) {
549: const char code@var139 [@expr1073743885 129 ] =@expr1073743886 "template <int x, int y, int z>\nclass A : public B<x, y, (x - y) ? ((y < z) ? 1 : -1) : 0>\n{ };\n\nvoid f()\n{\n    A<12,12,11> a;\n}\n"
550:
|
555:
556: ;
557: const char expected@var140 [@expr1073743887 102 ] =@expr1073743888 "class A<12,12,11> ; void f ( ) { A<12,12,11> a ; } class A<12,12,11> : public B < 12 , 12 , 0 > { } ;"
558:
|
562:
563: ;
564: $if $(@expr1073743889 $!@expr1073743890 $assertEquals $(@expr1073743891 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 564 $, expected@var140 $, $tok_ $(@expr1073743892 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 564 $, code@var139 $) $) $) { $return ; }
565: }
566:
567: void template13 ( ) {
568: const char code@var141 [@expr1073743893 292 ] =@expr1073743894 "class BB {};\n\ntemplate <class T>\nclass AA {\npublic:\n    static AA<T> create(T* newObject);\n    static int size();\n};\n\nclass CC { public: CC(AA<BB>, int) {} };\n\nclass XX {\n    AA<CC> y;\npublic:\n    XX();\n};\n\nXX::XX():\n    y(AA<CC>::create(new CC(AA<BB>(), 0)))\n    {}\n\nint yy[AA<CC>::size()];"
569:
|
588:
589: ;
590: const char expected@var142 [@expr1073743895 421 ] =@expr1073743896 "class BB { } ; class AA<BB> ; class AA<CC> ; class CC { public: CC ( AA<BB> , int ) { } } ; class XX { AA<CC> y ; public: XX ( ) ; } ; XX :: XX ( ) : y ( AA<CC> :: create ( new CC ( AA<BB> ( ) , 0 ) ) ) { } int yy [ AA<CC> :: size ( ) ] ; class AA<BB> { public: static AA<BB> create ( BB * newObject ) ; static int size ( ) ; } ; class AA<CC> { public: static AA<CC> create ( CC * newObject ) ; static int size ( ) ; } ;"
591:
|
611:
612: ;
613: $if $(@expr1073743897 $!@expr1073743898 $assertEquals $(@expr1073743899 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 613 $, expected@var142 $, $tok_ $(@expr1073743900 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 613 $, code@var141 $) $) $) { $return ; }
614: }
615:
616: void template14 ( ) {
617: const char code@var143 [@expr1073743901 69 ] =@expr1073743902 "template <> void foo<int *>()\n{ x(); }\n\nint main()\n{\nfoo<int*>();\n}\n"
618:
|
622:
623: ;
624: const char expected@var144 [@expr1073743903 85 ] =@expr1073743904 "void foo<int*> ( ) ; void foo<int*> ( ) { x ( ) ; } int main ( ) { foo<int*> ( ) ; }"
625:
626:
627:
628: ;
629: $if $(@expr1073743905 $!@expr1073743906 $assertEquals $(@expr1073743907 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 629 $, expected@var144 $, $tok_ $(@expr1073743908 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 629 $, code@var143 $) $) $) { $return ; }
630: }
631:
632: void template15 ( ) {
633: const char code@var145 [@expr1073743909 125 ] =@expr1073743910 "template <unsigned int i> void a()\n{\n    a<i-1>();\n}\n\ntemplate <> void a<0>()\n{ }\n\nint main()\n{\n    a<2>();\n    return 0;\n}\n"
634:
|
644:
645: ;
646:
647:
648: const char expected@var146 [@expr1073743911 163 ] =@expr1073743912 "void a<0> ( ) ; void a<2> ( ) ; void a<1> ( ) ; void a<0> ( ) { } int main ( ) { a<2> ( ) ; return 0 ; } void a<2> ( ) { a<1> ( ) ; } void a<1> ( ) { a<0> ( ) ; }"
649:
|
654:
655: ;
656:
657: $if $(@expr1073743913 $!@expr1073743914 $assertEquals $(@expr1073743915 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 657 $, expected@var146 $, $tok_ $(@expr1073743916 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 657 $, code@var145 $) $) $) { $return ; }
658:
659:
660: const char code2@var147 [@expr1073743917 83 ] =@expr1073743918 "template <int n> struct vec {\n  vec() {}\n  vec(const vec<n-1>& v) {}\n};\n\nvec<4> v;"
661:
|
664:
665: ;
666: const char expected2@var148 [@expr1073743919 101 ] =@expr1073743920 "struct vec<4> ; vec<4> v ; struct vec<4> { vec<4> ( ) { } vec<4> ( const vec < 4 - 1 > & v ) { } } ;"
667:
|
670:
671: ;
672:
673: $if $(@expr1073743921 $!@expr1073743922 $assertEquals $(@expr1073743923 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 673 $, expected2@var148 $, $tok_ $(@expr1073743924 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 673 $, code2@var147 $) $) $) { $return ; }
674: }
675:
676: void template16 ( ) {
677: const char code@var149 [@expr1073743925 130 ] =@expr1073743926 "template <unsigned int i> void a()\n{ }\n\ntemplate <unsigned int i> void b()\n{ a<i>(); }\n\nint main()\n{\n    b<2>();\n    return 0;\n}\n"
678:
|
686:
687: ;
688:
689: const char expected@var150 [@expr1073743927 118 ] =@expr1073743928 "void a<2> ( ) ; void b<2> ( ) ; int main ( ) { b<2> ( ) ; return 0 ; } void b<2> ( ) { a<2> ( ) ; } void a<2> ( ) { }"
690:
691:
692:
693: ;
694:
695: $if $(@expr1073743929 $!@expr1073743930 $assertEquals $(@expr1073743931 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 695 $, expected@var150 $, $tok_ $(@expr1073743932 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 695 $, code@var149 $) $) $) { $return ; }
696: }
697:
698: void template17 ( ) {
699: const char code@var151 [@expr1073743933 135 ] =@expr1073743934 "template<class T>\nclass Fred\n{\n    template<class T>\n    static shared_ptr< Fred<T> > CreateFred()\n    {\n    }\n};\n\nshared_ptr<int> i;\n"
700:
|
707:
708: ;
709: const char expected@var152 [@expr1073743935 134 ] =@expr1073743936 "template < class T > class Fred { template < class T > static shared_ptr < Fred < T > > CreateFred ( ) { } } ; shared_ptr < int > i ;"
710:
|
716:
717: ;
718: $if $(@expr1073743937 $!@expr1073743938 $assertEquals $(@expr1073743939 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 718 $, expected@var152 $, $tok_ $(@expr1073743940 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 718 $, code@var151 $) $) $) { $return ; }
719: }
720:
721: void template18 ( ) {
722: const char code@var153 [@expr1073743941 52 ] =@expr1073743942 "template <class T> class foo { T a; };\nfoo<int> *f;"
723: ;
724:
725: const char expected@var154 [@expr1073743943 61 ] =@expr1073743944 "class foo<int> ; foo<int> * f ; class foo<int> { int a ; } ;"
726:
727: ;
728:
729: $if $(@expr1073743945 $!@expr1073743946 $assertEquals $(@expr1073743947 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 729 $, expected@var154 $, $tok_ $(@expr1073743948 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 729 $, code@var153 $) $) $) { $return ; }
730: }
731:
732: void template19 ( ) {
733: const char code@var155 [@expr1073743949 107 ] =@expr1073743950 "template <typename T> T & foo()\n{ static T temp; return temp; }\n\nvoid f ( )\n{\n    char p = foo<char>();\n}\n"
734:
|
738:
739: ;
740:
741:
742: const char expected@var156 [@expr1073743951 125 ] =@expr1073743952 "char & foo<char> ( ) ; void f ( ) { char p ; p = foo<char> ( ) ; } char & foo<char> ( ) { static char temp ; return temp ; }"
743:
|
746:
747: ;
748: $if $(@expr1073743953 $!@expr1073743954 $assertEquals $(@expr1073743955 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 748 $, expected@var156 $, $tok_ $(@expr1073743956 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 748 $, code@var155 $) $) $) { $return ; }
749: }
750:
751: void template20 ( ) {
752:
753: const char code@var157 [@expr1073743957 91 ] =@expr1073743958 "template <class T> class A { public:  ~A(); };\ntemplate <class T> A<T>::~A() {}\nA<int> a;\n"
754:
755: ;
756:
757:
758: const char expected@var158 [@expr1073743959 95 ] =@expr1073743960 "class A<int> ; A<int> a ; class A<int> { public: ~ A<int> ( ) ; } ; A<int> :: ~ A<int> ( ) { }"
759:
760:
761: ;
762: $if $(@expr1073743961 $!@expr1073743962 $assertEquals $(@expr1073743963 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 762 $, expected@var158 $, $tok_ $(@expr1073743964 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 762 $, code@var157 $) $) $) { $return ; }
763: }
764:
765: void template21 ( ) {
766: {
767: const char code@var159 [@expr1073743965 57 ] =@expr1073743966 "template <class T> struct Fred { T a; };\nFred<int> fred;"
768: ;
769:
770: const char expected@var160 [@expr1073743967 67 ] =@expr1073743968 "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { int a ; } ;"
771:
772: ;
773:
774: $if $(@expr1073743969 $!@expr1073743970 $assertEquals $(@expr1073743971 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 774 $, expected@var160 $, $tok_ $(@expr1073743972 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 774 $, code@var159 $) $) $) { $return ; }
775: }
776:
777: {
778: const char code@var161 [@expr1073743973 76 ] =@expr1073743974 "template <class T, int sz> struct Fred { T data[sz]; };\nFred<float,4> fred;"
779: ;
780:
781: const char expected@var162 [@expr1073743975 90 ] =@expr1073743976 "struct Fred<float,4> ; Fred<float,4> fred ; struct Fred<float,4> { float data [ 4 ] ; } ;"
782:
783: ;
784:
785: $if $(@expr1073743977 $!@expr1073743978 $assertEquals $(@expr1073743979 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 785 $, expected@var162 $, $tok_ $(@expr1073743980 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 785 $, code@var161 $) $) $) { $return ; }
786: }
787:
788: {
789: const char code@var163 [@expr1073743981 62 ] =@expr1073743982 "template <class T> struct Fred { Fred(); };\nFred<float> fred;"
790: ;
791:
792: const char expected@var164 [@expr1073743983 83 ] =@expr1073743984 "struct Fred<float> ; Fred<float> fred ; struct Fred<float> { Fred<float> ( ) ; } ;"
793:
794: ;
795:
796: $if $(@expr1073743985 $!@expr1073743986 $assertEquals $(@expr1073743987 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 796 $, expected@var164 $, $tok_ $(@expr1073743988 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 796 $, code@var163 $) $) $) { $return ; }
797: }
798:
799: {
800: const char code@var165 [@expr1073743989 74 ] =@expr1073743990 "template <class T> struct Fred { };\nFred<float> fred1;\nFred<float> fred2;"
801:
802: ;
803:
804: const char expected@var166 [@expr1073743991 86 ] =@expr1073743992 "struct Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; struct Fred<float> { } ;"
805:
806:
807: ;
808:
809: $if $(@expr1073743993 $!@expr1073743994 $assertEquals $(@expr1073743995 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 809 $, expected@var166 $, $tok_ $(@expr1073743996 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 809 $, code@var165 $) $) $) { $return ; }
810: }
811: }
812:
813: void template22 ( ) {
814: const char code@var167 [@expr1073743997 65 ] =@expr1073743998 "template <class T> struct Fred { T a; };\nFred<std::string> fred;"
815: ;
816:
817: const char expected@var168 [@expr1073743999 101 ] =@expr1073744000 "struct Fred<std::string> ; Fred<std::string> fred ; struct Fred<std::string> { std :: string a ; } ;"
818:
819: ;
820:
821: $if $(@expr1073744001 $!@expr1073744002 $assertEquals $(@expr1073744003 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 821 $, expected@var168 $, $tok_ $(@expr1073744004 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 821 $, code@var167 $) $) $) { $return ; }
822: }
823:
824: void template23 ( ) {
825: const char code@var169 [@expr1073744005 83 ] =@expr1073744006 "template <class T> void foo() { }\nvoid bar() {\n    std::cout << (foo<double>());\n}"
826:
827:
828: ;
829:
830: const char expected@var170 [@expr1073744007 102 ] =@expr1073744008 "void foo<double> ( ) ; void bar ( ) { std :: cout << ( foo<double> ( ) ) ; } void foo<double> ( ) { }"
831:
832:
833:
834: ;
835:
836: $if $(@expr1073744009 $!@expr1073744010 $assertEquals $(@expr1073744011 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 836 $, expected@var170 $, $tok_ $(@expr1073744012 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 836 $, code@var169 $) $) $) { $return ; }
837: }
838:
839: void template24 ( ) {
840:
841: const char code@var171 [@expr1073744013 106 ] =@expr1073744014 "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<sizeof(int)>\n{};\n\nbitset<1> z;"
842:
|
848:
849: ;
850: const char expected@var172 [@expr1073744015 107 ] =@expr1073744016 "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;"
851:
852:
853:
854: ;
855: $if $(@expr1073744017 $!@expr1073744018 $assertEquals $(@expr1073744019 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 855 $, expected@var172 $, $tok_ $(@expr1073744020 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 855 $, code@var171 $) $) $) { $return ; }
856: }
857:
858: void template25 ( ) {
859: const char code@var173 [@expr1073744021 116 ] =@expr1073744022 "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<((sizeof(int)) ? : 1)>\n{};\n\nbitset<1> z;"
860:
|
866:
867: ;
868: const char expected@var174 [@expr1073744023 107 ] =@expr1073744024 "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;"
869:
870:
871:
872: ;
873: $if $(@expr1073744025 $!@expr1073744026 $assertEquals $(@expr1073744027 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 873 $, expected@var174 $, $tok_ $(@expr1073744028 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 873 $, code@var173 $) $) $) { $return ; }
874: }
875:
876: void template26 ( ) {
877:
878: const char code@var175 [@expr1073744029 104 ] =@expr1073744030 "template<class T>\nclass A { public: T x; };\n\ntemplate<class M>\nclass C: public A<char[M]> {};\n\nC<2> a;\n"
879:
|
883:
884: ;
885: $if $(@expr1073744031 $!@expr1073744032 $assertEquals $(@expr1073744033 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 885 $, "class A<char[2]> ; class C<2> ; C<2> a ; class C<2> : public A<char[2]> { } ; class A<char[2]> { public: char [ 2 ] x ; } ;" $, $tok_ $(@expr1073744034 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 885 $, code@var175 $) $) $) { $return ; }
886: }
887:
888: void template27 ( ) {
889:
890: const char code@var176 [@expr1073744035 33 ] =@expr1073744036 "X(template<class T> class Fred);" ;
891: $do ${ $try ${ $tok_ $(@expr1073744037 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 891 $, code@var176 $) $; $assertThrowFail $(@expr1073744038 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 891 $) $; $} $catch $(@expr1073744039 $const InternalError $&@expr1073744040 $) ${ $} $catch $(@expr1073744041 $... $) ${ $assertThrowFail $(@expr1073744042 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 891 $) $; $} $} $while $(@expr1073744043 $false $) ;
892: }
893:
894: void template28 ( ) {
895:
896: const char code@var177 [@expr1073744044 71 ] =@expr1073744045 "template<class A, class B> class Fred {};\nFred<int,Fred<int,int> > x;\n"
897: ;
898: $if $(@expr1073744046 $!@expr1073744047 $assertEquals $(@expr1073744048 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 898 $, "class Fred<int,int> ; class Fred<int,Fred<int,int>> ; Fred<int,Fred<int,int>> x ; class Fred<int,int> { } ; class Fred<int,Fred<int,int>> { } ;" $, $tok_ $(@expr1073744049 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 898 $, code@var177 $) $) $) { $return
899:
900:
901:
902: ; }
903: }
904:
905: void template30 ( ) {
906:
907: const char code@var178 [@expr1073744050 54 ] =@expr1073744051 "template<template<class> class A, class B> void f(){}" ;
908: $if $(@expr1073744052 $!@expr1073744053 $assertEquals $(@expr1073744054 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 908 $, "template < template < class > class A , class B > void f ( ) { }" $, $tok_ $(@expr1073744055 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 908 $, code@var178 $) $) $) { $return ; }
909: }
910:
911: void template31 ( ) {
912:
913: const char code@var179 [@expr1073744056 41 ] =@expr1073744057 "template<class T> struct A{}; A<int&> a;" ;
914: $if $(@expr1073744058 $!@expr1073744059 $assertEquals $(@expr1073744060 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 914 $, "struct A<int&> ; A<int&> a ; struct A<int&> { } ;" $, $tok_ $(@expr1073744061 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 914 $, code@var179 $) $) $) { $return
915:
916: ; }
917:
918:
919: const char code2@var180 [@expr1073744062 42 ] =@expr1073744063 "template<class T> struct A{}; A<int&&> a;" ;
920: $if $(@expr1073744064 $!@expr1073744065 $assertEquals $(@expr1073744066 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 920 $, "struct A<int&&> ; A<int&&> a ; struct A<int&&> { } ;" $, $tok_ $(@expr1073744067 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 920 $, code2@var180 $) $) $) { $return
921:
922: ; }
923: }
924:
925: void template32 ( ) {
926:
927: const char code@var181 [@expr1073744068 163 ] =@expr1073744069 "template <class T1, class T2, class T3, class T4 > struct A { };\n\ntemplate <class T>\nstruct B\n{\n    public:\n        A < int, Pair<T, int>, int > a;\n};\n\nB<int> b;\n"
928:
|
935:
936: ;
937: $if $(@expr1073744070 $!@expr1073744071 $assertEquals $(@expr1073744072 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 937 $, "template < class T1 , class T2 , class T3 , class T4 > struct A { } ; struct B<int> ; B<int> b ; struct B<int> { public: A < int , Pair < int , int > , int > a ; } ;" $, $tok_ $(@expr1073744073 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 937 $, code@var181 $) $) $) { $return
938:
939:
940: ; }
941: }
942:
943: void template33 ( ) {
944: {
945:
946: const char code@var182 [@expr1073744074 123 ] =@expr1073744075 "template<class T> struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { A<B<X<T> > > ab; };\nC<int> c;"
947:
948:
949: ;
950: $if $(@expr1073744076 $!@expr1073744077 $assertEquals $(@expr1073744078 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 950 $, "struct A<B<X<int>>> ; struct B<X<int>> ; struct C<int> ; C<int> c ; struct C<int> { A<B<X<int>>> ab ; } ; struct B<X<int>> { } ; struct A<B<X<int>>> { } ;" $, $tok_ $(@expr1073744079 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 950 $, code@var182 $) $) $) { $return
951:
|
955:
956: ; }
957: }
958:
959: {
960:
961: const char code@var183 [@expr1073744080 91 ] =@expr1073744081 "struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { };\nC< B<A> > c;"
962:
963:
964: ;
965: $if $(@expr1073744082 $!@expr1073744083 $assertEquals $(@expr1073744084 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 965 $, "struct A { } ; template < class T > struct B { } ; struct C<B<A>> ; C<B<A>> c ; struct C<B<A>> { } ;" $, $tok_ $(@expr1073744085 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 965 $, code@var183 $) $) $) { $return
966:
|
969:
970: ; }
971: }
972: }
973:
974: void template34 ( ) {
975:
976: const char code@var184 [@expr1073744086 103 ] =@expr1073744087 "namespace abc {\ntemplate <typename T> struct X { void f(X<T> &x) {} };\n}\ntemplate <> int X<int>::Y(0);"
977:
978:
979: ;
980: $tok_ $(@expr1073744088 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 980 $, code@var184 $) ;
981: }
982:
983: void template35 ( ) {
984: const char code@var185 [@expr1073744089 41 ] =@expr1073744090 "template <char c> class A {};\nA <'x'> a;"
985: ;
986: $if $(@expr1073744091 $!@expr1073744092 $assertEquals $(@expr1073744093 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 986 $, "class A<'x'> ; A<'x'> a ; class A<'x'> { } ;" $, $tok_ $(@expr1073744094 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 986 $, code@var185 $) $) $) { $return
987:
988: ; }
989: }
990:
991: void template36 ( ) {
992: const char code@var186 [@expr1073744095 109 ] =@expr1073744096 "template <class T> struct X { T t; };\ntemplate <class C> struct Y { Foo < X< Bar<C> > > _foo; };\nY<int> bar;"
993:
994: ;
995: $if $(@expr1073744097 $!@expr1073744098 $assertEquals $(@expr1073744099 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 995 $, "struct X<Bar<int>> ; struct Y<int> ; Y<int> bar ; struct Y<int> { Foo < X<Bar<int>> > _foo ; } ; struct X<Bar<int>> { Bar < int > t ; } ;" $, $tok_ $(@expr1073744100 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 995 $, code@var186 $) $) $) { $return
996:
|
999:
1000: ; }
1001: }
1002:
1003: void template37 ( ) {
1004: {
1005: const char code@var187 [@expr1073744101 67 ] =@expr1073744102 "class A { };\ntemplate<class T> class B {};\nB<class A> b1;\nB<A> b2;"
1006:
1007:
1008: ;
1009: $if $(@expr1073744103 $!@expr1073744104 $assertEquals $(@expr1073744105 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1009 $, "class A { } ; class B<A> ; B<A> b1 ; B<A> b2 ; class B<A> { } ;" $, $tok_ $(@expr1073744106 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1009 $, code@var187 $) $) $) { $return
1010: ; }
1011: }
1012: {
1013: const char code@var188 [@expr1073744107 69 ] =@expr1073744108 "struct A { };\ntemplate<class T> class B {};\nB<struct A> b1;\nB<A> b2;"
1014:
1015:
1016: ;
1017: $if $(@expr1073744109 $!@expr1073744110 $assertEquals $(@expr1073744111 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1017 $, "struct A { } ; class B<A> ; B<A> b1 ; B<A> b2 ; class B<A> { } ;" $, $tok_ $(@expr1073744112 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1017 $, code@var188 $) $) $) { $return
1018: ; }
1019: }
1020: {
1021: const char code@var189 [@expr1073744113 65 ] =@expr1073744114 "enum A { };\ntemplate<class T> class B {};\nB<enum A> b1;\nB<A> b2;"
1022:
1023:
1024: ;
1025: $if $(@expr1073744115 $!@expr1073744116 $assertEquals $(@expr1073744117 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1025 $, "enum A { } ; class B<A> ; B<A> b1 ; B<A> b2 ; class B<A> { } ;" $, $tok_ $(@expr1073744118 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1025 $, code@var189 $) $) $) { $return
1026: ; }
1027: }
1028: }
1029:
1030: void template_unhandled ( ) {
1031:
1032: $if $(@expr1073744119 $!@expr1073744120 $assertEquals $(@expr1073744121 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1032 $, "x < int > ( ) ;" $, $tok_ $(@expr1073744122 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1032 $, "x<int>();" $) $) $) { $return ; }
1033: }
1034:
1035: void template38 ( ) {
1036: const char code@var190 [@expr1073744123 125 ] =@expr1073744124 "template <class T> class A {\n  T mT;\npublic:\n  void foo() {}\n};\n\nint main() {\n    A<A<BLA>>   gna1;\n    A<BLA>      gna2;\n}\n"
1037:
|
1044:
1045: ;
1046: const char expected@var191 [@expr1073744125 193 ] =@expr1073744126 "class A<BLA> ; class A<A<BLA>> ; int main ( ) { A<A<BLA>> gna1 ; A<BLA> gna2 ; } class A<BLA> { BLA mT ; public: void foo ( ) { } } ; class A<A<BLA>> { A<BLA> mT ; public: void foo ( ) { } } ;"
1047:
|
1060:
1061: ;
1062: $if $(@expr1073744127 $!@expr1073744128 $assertEquals $(@expr1073744129 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1062 $, expected@var191 $, $tok_ $(@expr1073744130 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1062 $, code@var190 $) $) $) { $return ; }
1063: }
1064:
1065: void template39 ( ) {
1066: const char code@var192 [@expr1073744131 148 ] =@expr1073744132 "template<typename T> struct vector {  operator T() const;};void f() {  vector<vector<int>> v;  const vector<int> vi = static_cast<vector<int>>(v);}"
1067:
|
1071:
1072: ;
1073: $tok_ $(@expr1073744133 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1073 $, code@var192 $) ;
1074: }
1075:
1076: void template40 ( ) {
1077: const char code@var193 [@expr1073744134 94 ] =@expr1073744135 "struct A {  template<typename T> struct X { T t; };};template<> struct A::X<int> { int *t; };"
1078:
1079:
1080: ;
1081: const char expected@var194 [@expr1073744136 111 ] =@expr1073744137 "struct A { struct X<int> ; template < typename T > struct X { T t ; } ; } ; struct A :: X<int> { int * t ; } ;"
1082:
1083:
1084:
1085: ;
1086: $if $(@expr1073744138 $!@expr1073744139 $assertEquals $(@expr1073744140 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1086 $, expected@var194 $, $tok_ $(@expr1073744141 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1086 $, code@var193 $) $) $) { $return ; }
1087: }
1088:
1089: void template41 ( ) {
1090: const char code1@var195 [@expr1073744142 59 ] =@expr1073744143 "template<class T> struct X { };\nvoid f(const X<int> x) { }"
1091: ;
1092: $if $(@expr1073744144 $!@expr1073744145 $assertEquals $(@expr1073744146 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1092 $, "struct X<int> ; void f ( const X<int> x ) { } struct X<int> { } ;" $, $tok_ $(@expr1073744147 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1092 $, code1@var195 $) $) $) { $return
1093:
1094: ; }
1095:
1096: const char code2@var196 [@expr1073744148 73 ] =@expr1073744149 "template<class T> T f(T t) { return t; }\nint x() { return f<int>(123); }"
1097: ;
1098: $if $(@expr1073744150 $!@expr1073744151 $assertEquals $(@expr1073744152 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1098 $, "int f<int> ( int t ) ; int x ( ) { return f<int> ( 123 ) ; } int f<int> ( int t ) { return t ; }" $, $tok_ $(@expr1073744153 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1098 $, code2@var196 $) $) $) { $return
1099:
1100: ; }
1101: }
1102:
1103: void template42 ( ) {
1104: const char code@var197 [@expr1073744154 140 ] =@expr1073744155 "template<typename ...Args>\nint f0(Args ...args) {\n  return ^ {\n    return sizeof...(Args);\n  }() + ^ {\n    return sizeof...(args);\n  }();\n}"
1105:
|
1110:
1111: ;
1112: $do ${ $try ${ $tok_ $(@expr1073744156 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1112 $, code@var197 $) $; $assertThrowFail $(@expr1073744157 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1112 $) $; $} $catch $(@expr1073744158 $const InternalError $&@expr1073744159 $) ${ $} $catch $(@expr1073744160 $... $) ${ $assertThrowFail $(@expr1073744161 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1112 $) $; $} $} $while $(@expr1073744162 $false $) ;
1113: }
1114:
1115: void template43 ( ) {
1116: const char code@var198 [@expr1073744163 538 ] =@expr1073744164 "template <typename T> struct E { typedef int Int; };\ntemplate <typename T> struct C { };\ntemplate <typename T> struct D { static int f() { return C<T>::f(); } };\ntemplate <typename T> inline int f2() { return D<T>::f(); }\ntemplate <typename T> int f1 (int x, T *) { int id = f2<T>(); return id; }\ntemplate <typename T> struct B { void f3(B<T> & other) { } };\nstruct A { };\ntemplate <> struct C<B<A>> {\n    static int f() { return f1<B<A>>(0, reinterpret_cast<B<A>*>(E<void*>::Int(-1))); }\n};\nint main(void) {\n    C<A> ca;\n    return 0;\n}"
1117:
|
1128:
1129: ;
1130: const char expected@var199 [@expr1073744165 588 ] =@expr1073744166 "struct E<void*> ; struct C<B<A>> ; struct C<A> ; struct D<B<A>> ; int f2<B<A>> ( ) ; int f1<B<A>> ( int x , B<A> * ) ; struct B<A> ; struct A { } ; struct C<B<A>> { static int f ( ) { return f1<B<A>> ( 0 , reinterpret_cast < B<A> * > ( E<void*> :: Int ( -1 ) ) ) ; } } ; int main ( ) { C<A> ca ; return 0 ; } struct B<A> { void f3 ( B<A> & other ) { } } ; int f1<B<A>> ( int x , B<A> * ) { int id ; id = f2<B<A>> ( ) ; return id ; } int f2<B<A>> ( ) { return D<B<A>> :: f ( ) ; } struct D<B<A>> { static int f ( ) { return C<B<A>> :: f ( ) ; } } ; struct C<A> { } ; struct E<void*> { } ;"
1131:
|
1162:
1163: ;
1164: $if $(@expr1073744167 $!@expr1073744168 $assertEquals $(@expr1073744169 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1164 $, expected@var199 $, $tok_ $(@expr1073744170 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1164 $, code@var198 $) $) $) { $return ; }
1165: }
1166:
1167: void template44 ( ) {
1168: const char code@var200 [@expr1073744171 233 ] =@expr1073744172 "template<class T> struct StackContainer {  void foo(int i) {    if (0 >= 1 && i<0) {}  }};template<class T> class ZContainer : public StackContainer<T> {};struct FGSTensor {};class FoldedZContainer : public ZContainer<FGSTensor> {};"
1169:
|
1174:
1175: ;
1176: const char expected@var201 [@expr1073744173 306 ] =@expr1073744174 "struct StackContainer<FGSTensor> ; class ZContainer<FGSTensor> ; struct FGSTensor { } ; class FoldedZContainer : public ZContainer<FGSTensor> { } ; class ZContainer<FGSTensor> : public StackContainer<FGSTensor> { } ; struct StackContainer<FGSTensor> { void foo ( int i ) { if ( 0 >= 1 && i < 0 ) { } } } ;"
1177:
|
1184:
1185: ;
1186: $if $(@expr1073744175 $!@expr1073744176 $assertEquals $(@expr1073744177 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1186 $, expected@var201 $, $tok_ $(@expr1073744178 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1186 $, code@var200 $) $) $) { $return ; }
1187: }
1188:
1189: void template45 ( ) {
1190: const char code@var202 [@expr1073744179 247 ] =@expr1073744180 "namespace Constants { const int fourtytwo = 42; } template <class T, int U> struct TypeMath {   static const int mult = sizeof(T) * U; }; template <class T> struct FOO {   enum { value = TypeMath<T, Constants::fourtytwo>::mult }; }; FOO<int> foo;"
1191:
|
1196:
1197: ;
1198: const char expected@var203 [@expr1073744181 337 ] =@expr1073744182 "namespace Constants { const int fourtytwo = 42 ; } struct TypeMath<int,Constants::fourtytwo> ; struct FOO<int> ; FOO<int> foo ; struct FOO<int> { enum Anonymous0 { value = TypeMath<int,Constants::fourtytwo> :: mult } ; } ; struct TypeMath<int,Constants::fourtytwo> { static const int mult = sizeof ( int ) * Constants :: fourtytwo ; } ;"
1199:
|
1206:
1207: ;
1208: $if $(@expr1073744183 $!@expr1073744184 $assertEquals $(@expr1073744185 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1208 $, expected@var203 $, $tok_ $(@expr1073744186 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1208 $, code@var202 , true $) $) $) { $return ; }
1209: $if $(@expr1073744187 $!@expr1073744188 $assertEquals $(@expr1073744189 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1209 $, "" $, errout@var100 .@expr1073744190 str (@expr1073744191 ) $) $) { $return ; }
1210: }
1211:
1212: void template46 ( ) {
1213: $tok_ $(@expr1073744192 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1213 $, "template<class T, class U> struct A { static const int value = 0; }; template <class T> struct B {   enum { value = A<typename T::type, int>::value }; };" $)
1214:
1215:
1216: ;
1217: $if $(@expr1073744193 $!@expr1073744194 $assertEquals $(@expr1073744195 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1217 $, "" $, errout@var100 .@expr2372 str (@expr2373 ) $) $) { $return ; }
1218: $tok_ $(@expr1073744198 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1218 $, "template <class T, class U> struct A {}; enum { e = sizeof(A<int, int>) }; template <class T, class U> struct B {};" $)
1219:
1220: ;
1221: $if $(@expr1073744199 $!@expr1073744200 $assertEquals $(@expr1073744201 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1221 $, "" $, errout@var100 .@expr2372 str (@expr2373 ) $) $) { $return ; }
1222: $tok_ $(@expr1073744204 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1222 $, "template<class T, class U> struct A { static const int value = 0; }; template<class T> struct B { typedef int type; }; template <class T> struct C {   enum { value = A<typename B<T>::type, int>::value }; };" $)
1223:
1224:
1225:
1226: ;
1227: $if $(@expr1073744205 $!@expr1073744206 $assertEquals $(@expr1073744207 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1227 $, "" $, errout@var100 .@expr2372 str (@expr2373 ) $) $) { $return ; }
1228: }
1229:
1230: void template47 ( ) {
1231: $tok_ $(@expr1073744210 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1231 $, "template <typename T1, typename T2 = T3<T1> > class C1 {}; class C2 : public C1<C2> {};" $)
1232: ;
1233: $if $(@expr1073744211 $!@expr1073744212 $assertEquals $(@expr1073744213 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1233 $, "" $, errout@var100 .@expr1073744214 str (@expr1073744215 ) $) $) { $return ; }
1234: }
1235:
1236: void template48 ( ) {
1237: $tok_ $(@expr1073744216 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1237 $, "template <int> int f( {  } ); int foo = f<1>(0);" $)
1238: ;
1239: $if $(@expr1073744217 $!@expr1073744218 $assertEquals $(@expr1073744219 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1239 $, "" $, errout@var100 .@expr1073744220 str (@expr1073744221 ) $) $) { $return ; }
1240: }
1241:
1242: void template49 ( ) {
1243: const char code@var204 [@expr1073744222 200 ] =@expr1073744223 "template <class T> class Fred { void f(); void g(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate <class T> void Fred<T>::g() { }\ntemplate void Fred<float>::f();\ntemplate void Fred<int>::g();\n"
1244:
1245:
1246:
1247: ;
1248:
1249: const char expected@var205 [@expr1073744224 252 ] =@expr1073744225 "class Fred<float> ; class Fred<int> ; class Fred<float> { void f ( ) ; void g ( ) ; } ; void Fred<float> :: f ( ) { } void Fred<float> :: g ( ) { } class Fred<int> { void f ( ) ; void g ( ) ; } ; void Fred<int> :: f ( ) { } void Fred<int> :: g ( ) { }"
1250:
|
1255:
1256: ;
1257:
1258: $if $(@expr1073744226 $!@expr1073744227 $assertEquals $(@expr1073744228 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1258 $, expected@var205 $, $tok_ $(@expr1073744229 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1258 $, code@var204 $) $) $) { $return ; }
1259: }
1260:
1261: void template50 ( ) {
1262: const char code@var206 [@expr1073744230 159 ] =@expr1073744231 "template <class T> class Fred { void f(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate<> void Fred<float>::f() { }\ntemplate<> void Fred<int>::f() { }\n"
1263:
1264:
1265: ;
1266:
1267: const char expected@var207 [@expr1073744232 252 ] =@expr1073744233 "class Fred<float> ; class Fred<int> ; template < > void Fred<float> :: f ( ) { } template < > void Fred<int> :: f ( ) { } class Fred<float> { void f ( ) ; } ; void Fred<float> :: f ( ) { } class Fred<int> { void f ( ) ; } ; void Fred<int> :: f ( ) { }"
1268:
|
1273:
1274: ;
1275:
1276: $if $(@expr1073744234 $!@expr1073744235 $assertEquals $(@expr1073744236 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1276 $, expected@var207 $, $tok_ $(@expr1073744237 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1276 $, code@var206 $) $) $) { $return ; }
1277: }
1278:
1279: void template52 ( ) {
1280: const char code@var208 [@expr1073744238 223 ] =@expr1073744239 "template <int value> int sum() {   return value + sum<value/2>(); } template<int x, int y> int calculate_value() {   if (x != y) {     return sum<x - y>();   } else {     return 0;   } } int value = calculate_value<1,1>();"
1281:
|
1289:
1290: ;
1291: const char expected@var209 [@expr1073744240 229 ] =@expr1073744241 "int sum<0> ( ) ; int calculate_value<1,1> ( ) ; int value ; value = calculate_value<1,1> ( ) ; int calculate_value<1,1> ( ) { if ( 1 != 1 ) { return sum<0> ( ) ; } else { return 0 ; } } int sum<0> ( ) { return 0 + sum<0> ( ) ; }"
1292:
|
1302:
1303: ;
1304: $if $(@expr1073744242 $!@expr1073744243 $assertEquals $(@expr1073744244 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1304 $, expected@var209 $, $tok_ $(@expr1073744245 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1304 $, code@var208 $) $) $) { $return ; }
1305: }
1306:
1307: void template53 ( ) {
1308: const char code@var210 [@expr1073744246 178 ] =@expr1073744247 "template<int N> struct Factorial {   enum { value = N * Factorial<N - 1>::value }; };template <> struct Factorial<0> {   enum { value = 1 }; };const int x = Factorial<4>::value;"
1309:
|
1313:
1314: ;
1315: const char expected@var211 [@expr1073744248 534 ] =@expr1073744249 "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum Anonymous1 { value = 1 } ; } ; const int x = Factorial<4> :: value ; struct Factorial<4> { enum Anonymous0 { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum Anonymous0 { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum Anonymous0 { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum Anonymous0 { value = 1 * Factorial<0> :: value } ; } ;"
1316:
|
1334:
1335: ;
1336: $if $(@expr1073744250 $!@expr1073744251 $assertEquals $(@expr1073744252 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1336 $, expected@var211 $, $tok_ $(@expr1073744253 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1336 $, code@var210 , true $) $) $) { $return ; }
1337: $if $(@expr1073744254 $!@expr1073744255 $assertEquals $(@expr1073744256 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1337 $, "" $, errout@var100 .@expr1073744257 str (@expr1073744258 ) $) $) { $return ; }
1338: }
1339:
1340: void template54 ( ) {
1341: $tok_ $(@expr1073744259 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1341 $, "template<typename _Tp> _Tp* fn(); template <class T> struct A {   template <class U, class S = decltype(fn<T>())>   struct B { }; }; A<int> a;" $)
1342:
|
1345:
1346: ;
1347: }
1348:
1349: void template55 ( ) {
1350:
1351: $if $(@expr1073744260 $!@expr1073744261 $assertEquals $(@expr1073744262 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1351 $, "template < class T > class AtSmartPtr : public ConstCastHelper < AtSmartPtr < const T > , T > { friend struct ConstCastHelper < AtSmartPtr < const T > , T > ; AtSmartPtr ( const AtSmartPtr < T > & r ) ; } ;" $, $tok_ $(@expr1073744263 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1351 $, "template<class T> class AtSmartPtr : public ConstCastHelper<AtSmartPtr<const T>, T>\n{\n    friend struct ConstCastHelper<AtSmartPtr<const T>, T>;\n    AtSmartPtr(const AtSmartPtr<T>& r);\n};" $) $) $) { $return
1352:
|
1359:
1360: ; }
1361:
1362:
1363: $if $(@expr1073744264 $!@expr1073744265 $assertEquals $(@expr1073744266 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1363 $, "struct A<int> ; struct A<int...> ; A<int> a ( 0 ) ; struct A<int> { A<int> ( int * p ) { ( A<int...> * ) ( p ) ; } } ; struct A<int...> { A<int...> ( int * p ) { ( A<int...> * ) ( p ) ; } } ;" $, $tok_ $(@expr1073744267 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1363 $, "template <typename... T> struct A\n{\n    A(T* p) {\n        (A<T...>*)(p);\n    }\n};\nA<int> a(0);" $) $) $) { $return
1364:
|
1379:
1380: ; }
1381: }
1382:
1383: void template56 ( ) {
1384: const char code@var212 [@expr1073744268 102 ] =@expr1073744269 "template<bool B> struct Foo {   std::array<int, B ? 1 : 2> mfoo; }; void foo() {   Foo<true> myFoo; }"
1385:
|
1388:
1389: ;
1390: const char expected@var213 [@expr1073744270 109 ] =@expr1073744271 "struct Foo<true> ; void foo ( ) { Foo<true> myFoo ; } struct Foo<true> { std :: array < int , 1 > mfoo ; } ;"
1391:
|
1394:
1395: ;
1396: $if $(@expr1073744272 $!@expr1073744273 $assertEquals $(@expr1073744274 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1396 $, expected@var213 $, $tok_ $(@expr1073744275 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1396 $, code@var212 , true $) $) $) { $return ; }
1397: $if $(@expr1073744276 $!@expr1073744277 $assertEquals $(@expr1073744278 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1397 $, "" $, errout@var100 .@expr1073744279 str (@expr1073744280 ) $) $) { $return ; }
1398: }
1399:
1400: void template57 ( ) {
1401: const char code@var214 [@expr1073744281 75 ] =@expr1073744282 "template<class T> struct Test { Test(T); };\nTest<unsigned long> test( 0 );"
1402: ;
1403: const char exp@var215 [@expr1073744283 131 ] =@expr1073744284 "struct Test<unsignedlong> ; Test<unsignedlong> test ( 0 ) ; struct Test<unsignedlong> { Test<unsignedlong> ( unsigned long ) ; } ;"
1404:
1405: ;
1406: $if $(@expr1073744285 $!@expr1073744286 $assertEquals $(@expr1073744287 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1406 $, exp@var215 $, $tok_ $(@expr1073744288 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1406 $, code@var214 $) $) $) { $return ; }
1407: }
1408:
1409: void template58 ( ) {
1410: const char code@var216 [@expr1073744289 118 ] =@expr1073744290 "template <typename A>\nvoid TestArithmetic() {\n  x(1 * CheckedNumeric<A>());\n}\nvoid foo() {\n  TestArithmetic<int>();\n}"
1411:
|
1415:
1416: ;
1417: const char exp@var217 [@expr1073744291 146 ] =@expr1073744292 "void TestArithmetic<int> ( ) ; void foo ( ) { TestArithmetic<int> ( ) ; } void TestArithmetic<int> ( ) { x ( 1 * CheckedNumeric < int > ( ) ) ; }"
1418:
|
1422:
1423: ;
1424: $if $(@expr1073744293 $!@expr1073744294 $assertEquals $(@expr1073744295 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1424 $, exp@var217 $, $tok_ $(@expr1073744296 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1424 $, code@var216 $) $) $) { $return ; }
1425: }
1426:
1427: void template59 ( ) {
1428: const char code@var218 [@expr1073744297 322 ] =@expr1073744298 "template<int N>\nstruct Factorial {\n    enum FacHelper { value = N * Factorial<N - 1>::value };\n};\ntemplate <>\nstruct Factorial<0> {\n    enum FacHelper { value = 1 };\n};\ntemplate<int DiagonalDegree>\nint diagonalGroupTest() {\n    return Factorial<DiagonalDegree>::value;\n}\nint main () {\n    return diagonalGroupTest<4>();\n}"
1429:
|
1441:
1442: ;
1443: const char exp@var219 [@expr1073744299 637 ] =@expr1073744300 "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum FacHelper { value = 1 } ; } ; int diagonalGroupTest<4> ( ) ; int main ( ) { return diagonalGroupTest<4> ( ) ; } int diagonalGroupTest<4> ( ) { return Factorial<4> :: value ; } struct Factorial<4> { enum FacHelper { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum FacHelper { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum FacHelper { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum FacHelper { value = 1 * Factorial<0> :: value } ; } ;"
1444:
|
1454:
1455: ;
1456: $if $(@expr1073744301 $!@expr1073744302 $assertEquals $(@expr1073744303 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1456 $, exp@var219 $, $tok_ $(@expr1073744304 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1456 $, code@var218 $) $) $) { $return ; }
1457: }
1458:
1459: void template60 ( ) {
1460: const char code@var220 [@expr1073744305 176 ] =@expr1073744306 "template <typename T> struct S { typedef int type; };\ntemplate <typename T> void f() {}\ntemplate <typename T> void h() { f<typename S<T>::type(0)>(); }\n\nvoid j() { h<int>(); }"
1461:
1462:
1463:
1464: ;
1465: const char exp@var221 [@expr1073744307 189 ] =@expr1073744308 "struct S<int> ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } struct S<int> { } ; void f<S<int>::type(0)> ( ) { }"
1466:
|
1470:
1471: ;
1472: const char act@var222 [@expr1073744309 192 ] =@expr1073744310 "template < typename T > struct S { } ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } void f<S<int>::type(0)> ( ) { }"
1473:
|
1476:
1477: ;
1478: $todoAssertEquals $(@expr1073744311 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1478 $, exp@var221 $, act@var222 $, $tok_ $(@expr1073744312 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1478 $, code@var220 $) $) ;
1479: }
1480:
1481: void template61 ( ) {
1482: const char code@var223 [@expr1073744313 133 ] =@expr1073744314 "template <typename T> struct Foo {};\ntemplate <typename T> struct Bar {\n  void f1(Bar<T> x) {}\n  Foo<Bar<T>> f2() { }\n};\nBar<int> c;"
1483:
|
1486:
1487: ;
1488: const char exp@var224 [@expr1073744315 155 ] =@expr1073744316 "struct Foo<Bar<int>> ; struct Bar<int> ; Bar<int> c ; struct Bar<int> { void f1 ( Bar<int> x ) { } Foo<Bar<int>> f2 ( ) { } } ; struct Foo<Bar<int>> { } ;"
1489:
|
1494:
1495: ;
1496: $if $(@expr1073744317 $!@expr1073744318 $assertEquals $(@expr1073744319 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1496 $, exp@var224 $, $tok_ $(@expr1073744320 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1496 $, code@var223 $) $) $) { $return ; }
1497: }
1498:
1499: void template62 ( ) {
1500: const char code@var225 [@expr1073744321 236 ] =@expr1073744322 "template <class T> struct C1 {};\ntemplate <class T> void f() { x = y ? C1<int>::allocate(1) : 0; }\ntemplate <class T, unsigned S> class C3 {};\ntemplate <class T, unsigned S> C3<T, S>::C3(const C3<T, S> &v) { C1<T *> c1; }\nC3<int,6> c3;"
1501:
1502:
1503:
1504: ;
1505: const char exp@var226 [@expr1073744323 243 ] =@expr1073744324 "struct C1<int*> ; template < class T > void f ( ) { x = y ? ( C1 < int > :: allocate ( 1 ) ) : 0 ; } class C3<int,6> ; C3<int,6> c3 ; class C3<int,6> { } ; C3<int,6> :: C3<int,6> ( const C3<int,6> & v ) { C1<int*> c1 ; } struct C1<int*> { } ;"
1506:
|
1510:
1511: ;
1512: $if $(@expr1073744325 $!@expr1073744326 $assertEquals $(@expr1073744327 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1512 $, exp@var226 $, $tok_ $(@expr1073744328 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1512 $, code@var225 $) $) $) { $return ; }
1513: }
1514:
1515: void template63 ( ) {
1516: const char code@var227 [@expr1073744329 85 ] =@expr1073744330 "template<class T> struct TestClass { T m_hi; };TestClass<std::auto_ptr<v>> objTest3;"
1517: ;
1518: const char exp@var228 [@expr1073744331 146 ] =@expr1073744332 "struct TestClass<std::auto_ptr<v>> ; TestClass<std::auto_ptr<v>> objTest3 ; struct TestClass<std::auto_ptr<v>> { std :: auto_ptr < v > m_hi ; } ;"
1519:
1520: ;
1521: $if $(@expr1073744333 $!@expr1073744334 $assertEquals $(@expr1073744335 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1521 $, exp@var228 $, $tok_ $(@expr1073744336 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1521 $, code@var227 $) $) $) { $return ; }
1522: }
1523:
1524: void template64 ( ) {
1525: const char code@var229 [@expr1073744337 181 ] =@expr1073744338 "template <typename T>\nbool foo(){return true;}\nstruct A {\ntemplate<int n>\nvoid t_func()\n{\n     if( n != 0 || foo<int>());\n}\nvoid t_caller()\n{\n    t_func<0>();\n    t_func<1>();\n}\n};"
1526:
|
1537:
1538: ;
1539: const char exp@var230 [@expr1073744339 295 ] =@expr1073744340 "bool foo<int> ( ) ; struct A { void t_func<0> ( ) ; void t_func<1> ( ) ; void t_caller ( ) { t_func<0> ( ) ; t_func<1> ( ) ; } } ; void A :: t_func<0> ( ) { if ( 0 != 0 || foo<int> ( ) ) { ; } } void A :: t_func<1> ( ) { if ( 1 != 0 || foo<int> ( ) ) { ; } } bool foo<int> ( ) { return true ; }"
1540:
|
1556:
1557: ;
1558: $if $(@expr1073744341 $!@expr1073744342 $assertEquals $(@expr1073744343 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1558 $, exp@var230 $, $tok_ $(@expr1073744344 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1558 $, code@var229 $) $) $) { $return ; }
1559: }
1560:
1561: void template65 ( ) {
1562: const char code@var231 [@expr1073744345 417 ] =@expr1073744346 "namespace bpp\n{\ntemplate<class N, class E, class DAGraphImpl>\nclass AssociationDAGraphImplObserver :\n  public AssociationGraphImplObserver<N, E, DAGraphImpl>\n{};\ntemplate<class N, class E>\nusing AssociationDAGlobalGraphObserver =  AssociationDAGraphImplObserver<N, E, DAGlobalGraph>;\n}\nusing namespace bpp;\nusing namespace std;\nint main() {\n  AssociationDAGlobalGraphObserver<string,unsigned int> grObs;\n return 1;\n}"
1563:
|
1575:
1576: ;
1577: const char exp@var232 [@expr1073744347 392 ] =@expr1073744348 "namespace bpp { class AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> ; } using namespace bpp ; int main ( ) { bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> grObs ; return 1 ; } class bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> : public AssociationGraphImplObserver < std :: string , unsigned int , DAGlobalGraph > { } ;"
1578:
|
1586:
1587: ;
1588: $if $(@expr1073744349 $!@expr1073744350 $assertEquals $(@expr1073744351 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1588 $, exp@var232 $, $tok_ $(@expr1073744352 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1588 $, code@var231 $) $) $) { $return ; }
1589: }
1590:
1591: void template66 ( ) {
1592: const char code@var233 [@expr1073744353 143 ] =@expr1073744354 "template <class T> struct Fred {\n    const int ** foo();\n};\ntemplate <class T> const int ** Fred<T>::foo() { return nullptr; }\nFred<int> fred;"
1593:
1594:
1595:
1596: ;
1597: const char exp@var234 [@expr1073744355 139 ] =@expr1073744356 "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { const int * * foo ( ) ; } ; const int * * Fred<int> :: foo ( ) { return nullptr ; }"
1598:
|
1601:
1602: ;
1603: $if $(@expr1073744357 $!@expr1073744358 $assertEquals $(@expr1073744359 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1603 $, exp@var234 $, $tok_ $(@expr1073744360 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1603 $, code@var233 $) $) $) { $return ; }
1604: }
1605:
1606: void template67 ( ) {
1607: const char code@var235 [@expr1073744361 583 ] =@expr1073744362 "template <class T> struct Container {\n  Container();\n  Container(const Container &);\n  Container & operator = (const Container &);\n  ~Container();\n  T* mElements;\n  const Container * c;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr), c(nullptr) {}\ntemplate <class T> Container<T>::Container(const Container & x) { nElements = x.nElements; c = x.c; }\ntemplate <class T> Container<T> & Container<T>::operator = (const Container & x) { mElements = x.mElements; c = x.c; return *this; }\ntemplate <class T> Container<T>::~Container() {}\nContainer<int> intContainer;"
1608:
|
1618:
1619: ;
1620:
1621: const char expected@var236 [@expr1073744363 635 ] =@expr1073744364 "struct Container<int> ; Container<int> intContainer ; struct Container<int> { Container<int> ( ) ; Container<int> ( const Container<int> & ) ; Container<int> & operator= ( const Container<int> & ) ; ~ Container<int> ( ) ; int * mElements ; const Container<int> * c ; } ; Container<int> :: Container<int> ( ) : mElements ( nullptr ) , c ( nullptr ) { } Container<int> :: Container<int> ( const Container<int> & x ) { nElements = x . nElements ; c = x . c ; } Container<int> & Container<int> :: operator= ( const Container<int> & x ) { mElements = x . mElements ; c = x . c ; return * this ; } Container<int> :: ~ Container<int> ( ) { }"
1622:
|
1633:
1634: ;
1635:
1636: $if $(@expr1073744365 $!@expr1073744366 $assertEquals $(@expr1073744367 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1636 $, expected@var236 $, $tok_ $(@expr1073744368 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1636 $, code@var235 $) $) $) { $return ; }
1637: }
1638:
1639: void template68 ( ) {
1640: const char code@var237 [@expr1073744369 91 ] =@expr1073744370 "template <class T> union Fred {\n    char dummy[sizeof(T)];\n    T value;\n};\nFred<int> fred;"
1641:
1642:
1643:
1644: ;
1645: const char exp@var238 [@expr1073744371 101 ] =@expr1073744372 "union Fred<int> ; Fred<int> fred ; union Fred<int> { char dummy [ sizeof ( int ) ] ; int value ; } ;"
1646:
|
1649:
1650: ;
1651: $if $(@expr1073744373 $!@expr1073744374 $assertEquals $(@expr1073744375 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1651 $, exp@var238 $, $tok_ $(@expr1073744376 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1651 $, code@var237 $) $) $) { $return ; }
1652: }
1653:
1654: void template69 ( ) {
1655: const char code@var239 [@expr1073744377 121 ] =@expr1073744378 "class Test {\n    int test;\n    template <class T> T lookup() { return test; }\n    int Fun() { return lookup<int>(); }\n};"
1656:
1657:
1658:
1659: ;
1660: const char exp@var240 [@expr1073744379 137 ] =@expr1073744380 "class Test { int test ; int lookup<int> ( ) ; int Fun ( ) { return lookup<int> ( ) ; } } ; int Test :: lookup<int> ( ) { return test ; }"
1661:
|
1664:
1665: ;
1666: $if $(@expr1073744381 $!@expr1073744382 $assertEquals $(@expr1073744383 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1666 $, exp@var240 $, $tok_ $(@expr1073744384 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1666 $, code@var239 $) $) $) { $return ; }
1667: }
1668:
1669: void template70 ( ) {
1670: const char code@var241 [@expr1073744385 204 ] =@expr1073744386 "template<typename T, typename V, int KeySize = 0> class Bar;\ntemplate<>\nclass Bar<void, void> {\n};\ntemplate<typename K, typename V, int KeySize>\nclass Bar : private Bar<void, void> {\n   void foo() { }\n};"
1671:
|
1676:
1677: ;
1678: const char exp@var242 [@expr1073744387 230 ] =@expr1073744388 "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> ; class Bar<void,void> { } ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;"
1679:
|
1684:
1685: ;
1686: const char act@var243 [@expr1073744389 230 ] =@expr1073744390 "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> { } ; class Bar<void,void> ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;"
1687:
|
1692:
1693: ;
1694: $todoAssertEquals $(@expr1073744391 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1694 $, exp@var242 $, act@var243 $, $tok_ $(@expr1073744392 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1694 $, code@var241 $) $) ;
1695: }
1696:
1697: void template71 ( ) {
1698: const char code@var244 [@expr1073744393 342 ] =@expr1073744394 "int f1(int * pInterface, int x) { return 0; }\n\ntemplate< class interface_type > class Reference {\n  template< class interface_type > int i();\n  int *pInterface;\n};\n\ntemplate< class interface_type > int Reference< interface_type >::i() {\n    return f1(pInterface, interface_type::static_type());\n}\n\nReference< class XPropertyList > dostuff();"
1699:
|
1708:
1709: ;
1710: const char exp@var245 [@expr1073744395 328 ] =@expr1073744396 "int f1 ( int * pInterface , int x ) { return 0 ; } class Reference<XPropertyList> ; Reference<XPropertyList> dostuff ( ) ; class Reference<XPropertyList> { template < class XPropertyList > int i ( ) ; int * pInterface ; } ; int Reference<XPropertyList> :: i ( ) { return f1 ( pInterface , XPropertyList :: static_type ( ) ) ; }"
1711:
1712:
1713:
1714: ;
1715: $if $(@expr1073744397 $!@expr1073744398 $assertEquals $(@expr1073744399 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1715 $, exp@var245 $, $tok_ $(@expr1073744400 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1715 $, code@var244 $) $) $) { $return ; }
1716: }
1717:
1718: void template72 ( ) {
1719: const char code@var246 [@expr1073744401 166 ] =@expr1073744402 "template <typename N, typename P> class Tokenizer;\nconst Tokenizer<Node, Path> *tokenizer() const;\ntemplate <typename N, typename P>\nTokenizer<N, P>::Tokenizer() { }"
1720:
1721:
1722: ;
1723: const char exp@var247 [@expr1073744403 189 ] =@expr1073744404 "template < typename N , typename P > class Tokenizer ; const Tokenizer < Node , Path > * tokenizer ( ) const ; template < typename N , typename P > Tokenizer < N , P > :: Tokenizer ( ) { }"
1724:
1725:
1726: ;
1727: $if $(@expr1073744405 $!@expr1073744406 $assertEquals $(@expr1073744407 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1727 $, exp@var247 $, $tok_ $(@expr1073744408 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1727 $, code@var246 $) $) $) { $return ; }
1728: }
1729:
1730: void template73 ( ) {
1731: const char code@var248 [@expr1073744409 215 ] =@expr1073744410 "template<typename T>\nvoid keep_range(T& value, const T mini, const T maxi){}\ntemplate void keep_range<float>(float& v, const float l, const float u);\ntemplate void keep_range<int>(int& v, const int l, const int u);"
1732:
1733:
1734: ;
1735: const char exp@var249 [@expr1073744411 312 ] =@expr1073744412 "void keep_range<float> ( float & value , const float mini , const float maxi ) ; void keep_range<int> ( int & value , const int mini , const int maxi ) ; void keep_range<float> ( float & value , const float mini , const float maxi ) { } void keep_range<int> ( int & value , const int mini , const int maxi ) { }"
1736:
1737:
1738: ;
1739: $if $(@expr1073744413 $!@expr1073744414 $assertEquals $(@expr1073744415 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1739 $, exp@var249 $, $tok_ $(@expr1073744416 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1739 $, code@var248 $) $) $) { $return ; }
1740: }
1741:
1742: void template74 ( ) {
1743: const char code@var250 [@expr1073744417 117 ] =@expr1073744418 "template <class T> class BTlist { };\nclass PushBackStreamBuf {\npublic:\n    void pushBack(const BTlist<int> &vec);\n};"
1744:
1745:
1746:
1747: ;
1748: const char exp@var251 [@expr1073744419 126 ] =@expr1073744420 "class BTlist<int> ; class PushBackStreamBuf { public: void pushBack ( const BTlist<int> & vec ) ; } ; class BTlist<int> { } ;"
1749:
|
1752:
1753: ;
1754: $if $(@expr1073744421 $!@expr1073744422 $assertEquals $(@expr1073744423 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1754 $, exp@var251 $, $tok_ $(@expr1073744424 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1754 $, code@var250 $) $) $) { $return ; }
1755: }
1756:
1757: void template75 ( ) {
1758: const char code@var252 [@expr1073744425 163 ] =@expr1073744426 "template<typename T>\nT foo(T& value){ return value; }\ntemplate std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);"
1759:
1760: ;
1761: const char exp@var253 [@expr1073744427 275 ] =@expr1073744428 "std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }"
1762: ;
1763: $if $(@expr1073744429 $!@expr1073744430 $assertEquals $(@expr1073744431 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1763 $, exp@var253 $, $tok_ $(@expr1073744432 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1763 $, code@var252 $) $) $) { $return ; }
1764: }
1765:
1766: void template76 ( ) {
1767: const char code@var254 [@expr1073744433 266 ] =@expr1073744434 "namespace NS {\n    template<typename T> T foo(T& value) { return value; }\n    template std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);\n}\nstd::vector<std::vector<int>> v;\nv = foo<std::vector<std::vector<int>>>(v);\n"
1768:
|
1771:
1772: ;
1773: const char exp@var255 [@expr1073744435 389 ] =@expr1073744436 "namespace NS { std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; } std :: vector < std :: vector < int > > v ; v = foo<std::vector<std::vector<int>>> ( v ) ; std :: vector < std :: vector < int > > NS :: foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }"
1774:
|
1777:
1778: ;
1779: $if $(@expr1073744437 $!@expr1073744438 $assertEquals $(@expr1073744439 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1779 $, exp@var255 $, $tok_ $(@expr1073744440 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1779 $, code@var254 $) $) $) { $return ; }
1780: }
1781:
1782: void template77 ( ) {
1783: const char code@var256 [@expr1073744441 232 ] =@expr1073744442 "template<typename T>\nstruct is_void : std::false_type { };\ntemplate<>\nstruct is_void<void> : std::true_type { };\nint main() {\n    std::cout << is_void<char>::value << std::endl;\n    std::cout << is_void<void>::value << std::endl;\n}"
1784:
|
1789:
1790: ;
1791: const char exp@var257 [@expr1073744443 266 ] =@expr1073744444 "struct is_void<void> ; struct is_void<char> ; struct is_void<void> : std :: true_type { } ; int main ( ) { std :: cout << is_void<char> :: value << std :: endl ; std :: cout << is_void<void> :: value << std :: endl ; } struct is_void<char> : std :: false_type { } ;"
1792:
|
1797:
1798: ;
1799: $if $(@expr1073744445 $!@expr1073744446 $assertEquals $(@expr1073744447 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1799 $, exp@var257 $, $tok_ $(@expr1073744448 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1799 $, code@var256 $) $) $) { $return ; }
1800: }
1801:
1802: void template78 ( ) {
1803: const char code@var258 [@expr1073744449 71 ] =@expr1073744450 "template <typename>\nstruct Base { };\nstruct S : Base <void>::Type { };"
1804:
1805: ;
1806: const char exp@var259 [@expr1073744451 80 ] =@expr1073744452 "struct Base<void> ; struct S : Base<void> :: Type { } ; struct Base<void> { } ;"
1807:
1808: ;
1809: $if $(@expr1073744453 $!@expr1073744454 $assertEquals $(@expr1073744455 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1809 $, exp@var259 $, $tok_ $(@expr1073744456 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1809 $, code@var258 $) $) $) { $return ; }
1810: }
1811:
1812: void template79 ( ) {
1813: const char code@var260 [@expr1073744457 200 ] =@expr1073744458 "class Foo {\npublic:\n    template<typename T> void foo() { bar<T>(); }\nprivate:\n    template<typename T> void bar() { bazz(); }\n    void bazz() { }\n};\nvoid some_func() {\n    Foo x;\n    x.foo<int>();\n}"
1814:
|
1822:
1823: ;
1824: const char exp@var261 [@expr1073744459 225 ] =@expr1073744460 "class Foo { public: void foo<int> ( ) ; private: void bar<int> ( ) ; void bazz ( ) { } } ; void some_func ( ) { Foo x ; x . foo<int> ( ) ; } void Foo :: foo<int> ( ) { bar<int> ( ) ; } void Foo :: bar<int> ( ) { bazz ( ) ; }"
1825:
|
1835:
1836: ;
1837: $if $(@expr1073744461 $!@expr1073744462 $assertEquals $(@expr1073744463 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1837 $, exp@var261 $, $tok_ $(@expr1073744464 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1837 $, code@var260 $) $) $) { $return ; }
1838: }
1839:
1840: void template80 ( ) {
1841: const char code@var262 [@expr1073744465 124 ] =@expr1073744466 "class Fred {\n    template <typename T> T foo(T t) const { return t; }\n};\nconst void * p = Fred::foo<const void *>(nullptr);"
1842:
1843:
1844: ;
1845: const char exp@var263 [@expr1073744467 209 ] =@expr1073744468 "class Fred { const void * foo<constvoid*> ( const void * t ) const ; } ; const void * p ; p = Fred :: foo<constvoid*> ( nullptr ) ; const void * Fred :: foo<constvoid*> ( const void * t ) const { return t ; }"
1846:
1847:
1848:
1849: ;
1850: $if $(@expr1073744469 $!@expr1073744470 $assertEquals $(@expr1073744471 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1850 $, exp@var263 $, $tok_ $(@expr1073744472 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1850 $, code@var262 $) $) $) { $return ; }
1851: }
1852:
1853: void template81 ( ) {
1854: const char code@var264 [@expr1073744473 162 ] =@expr1073744474 "template <typename Type>\nstruct SortWith {\n    SortWith(Type);\n};\ntemplate <typename Type>\nSortWith<Type>::SortWith(Type) {}\nint main() {\n    SortWith<int>(0);\n}"
1855:
|
1861:
1862: ;
1863: const char exp@var265 [@expr1073744475 192 ] =@expr1073744476 "template < typename Type > struct SortWith { SortWith ( Type ) ; } ; SortWith<int> :: SortWith<int> ( int ) ; int main ( ) { SortWith<int> ( 0 ) ; } SortWith<int> :: SortWith<int> ( int ) { }"
1864:
|
1870:
1871: ;
1872: $if $(@expr1073744477 $!@expr1073744478 $assertEquals $(@expr1073744479 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1872 $, exp@var265 $, $tok_ $(@expr1073744480 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1872 $, code@var264 $) $) $) { $return ; }
1873: }
1874:
1875: void template82 ( ) {
1876: const char code@var266 [@expr1073744481 344 ] =@expr1073744482 "typedef int comp;\nconst int f16=16;\ntemplate<int x>\nclass tvec2 {};\ntemplate<int x>\nclass tvec3 {};\nnamespace swizzle {\ntemplate <comp> void swizzle(tvec2<f16> v) { }\ntemplate <comp x, comp y> void swizzle(tvec3<f16> v) { }\n}\nvoid foo() {\n  using namespace swizzle;\n  tvec2<f16> tt2;\n  swizzle<1>(tt2);\n  tvec3<f16> tt3;\n  swizzle<2,3>(tt3);\n}"
1877:
|
1891:
1892: ;
1893: const char exp@var267 [@expr1073744483 440 ] =@expr1073744484 "const int f16 = 16 ; class tvec2<f16> ; class tvec3<f16> ; namespace swizzle { void swizzle<1> ( tvec2<f16> v ) ; void swizzle<2,3> ( tvec3<f16> v ) ; } void foo ( ) { using namespace swizzle ; tvec2<f16> tt2 ; swizzle :: swizzle<1> ( tt2 ) ; tvec3<f16> tt3 ; swizzle :: swizzle<2,3> ( tt3 ) ; } void swizzle :: swizzle<2,3> ( tvec3<f16> v ) { } void swizzle :: swizzle<1> ( tvec2<f16> v ) { } class tvec3<f16> { } ; class tvec2<f16> { } ;"
1894:
|
1909:
1910: ;
1911: $if $(@expr1073744485 $!@expr1073744486 $assertEquals $(@expr1073744487 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1911 $, exp@var267 $, $tok_ $(@expr1073744488 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1911 $, code@var266 $) $) $) { $return ; }
1912: }
1913:
1914: void template83 ( ) {
1915: const char code@var268 [@expr1073744489 223 ] =@expr1073744490 "template<typename Task>\nclass MultiConsumer {\n    MultiConsumer();\n};\ntemplate<typename Task>\nMultiConsumer<Task>::MultiConsumer() : sizeBuffer(0) {}\nMultiReads::MultiReads() {\n    mc = new MultiConsumer<reads_packet>();\n}"
1916:
|
1922:
1923: ;
1924: const char exp@var269 [@expr1073744491 300 ] =@expr1073744492 "template < typename Task > class MultiConsumer { MultiConsumer ( ) ; } ; MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) ; MultiReads :: MultiReads ( ) { mc = new MultiConsumer<reads_packet> ( ) ; } MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) : sizeBuffer ( 0 ) { }"
1925:
|
1931:
1932: ;
1933: $if $(@expr1073744493 $!@expr1073744494 $assertEquals $(@expr1073744495 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1933 $, exp@var269 $, $tok_ $(@expr1073744496 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1933 $, code@var268 $) $) $) { $return ; }
1934: }
1935:
1936: void template84 ( ) {
1937: {
1938: const char code@var270 [@expr1073744497 98 ] =@expr1073744498 "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}"
1939:
1940:
1941: ;
1942: const char exp@var271 [@expr1073744499 110 ] =@expr1073744500 "template < class b , int c , class > auto d ( ) . a < decltype ( b { } ) > :: e { d < int , c , int > ( ) ; }"
1943:
1944:
1945: ;
1946: $if $(@expr1073744501 $!@expr1073744502 $assertEquals $(@expr1073744503 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1946 $, exp@var271 $, $tok_ $(@expr1073744504 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1946 $, code@var270 $) $) $) { $return ; }
1947: }
1948: {
1949: const char code@var272 [@expr1073744505 131 ] =@expr1073744506 "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}void foo() { d<char, 1, int>(); }"
1950:
1951:
1952:
1953: ;
1954: const char exp@var273 [@expr1073744507 247 ] =@expr1073744508 "auto d<char,1,int> ( ) . a < char > :: e ; auto d<int,1,int> ( ) . a < int > :: e ; void foo ( ) { d<char,1,int> ( ) ; } auto d<char,1,int> ( ) . a < char > :: e { d<int,1,int> ( ) ; } auto d<int,1,int> ( ) . a < int > :: e { d<int,1,int> ( ) ; }"
1955:
|
1961:
1962: ;
1963: $if $(@expr1073744509 $!@expr1073744510 $assertEquals $(@expr1073744511 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1963 $, exp@var273 $, $tok_ $(@expr1073744512 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1963 $, code@var272 $) $) $) { $return ; }
1964: }
1965: }
1966:
1967: void template85 ( ) {
1968: const char code@var274 [@expr1073744513 325 ] =@expr1073744514 "template<typename T>\nstruct C\n{\n  template<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type* = nullptr>\n  void foo();\n};\nextern template void C<int>::foo<int, nullptr>();\ntemplate<typename T>\ntemplate<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type>\nvoid C<T>::foo() {}"
1969:
|
1976:
1977: ;
1978:
1979: $tok_ $(@expr1073744515 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1979 $, code@var274 $) ;
1980: }
1981:
1982: void template86 ( ) {
1983: const char code@var275 [@expr1073744516 160 ] =@expr1073744517 "struct S {\n  S();\n};\ntemplate <typename T>\nstruct U {\n  static S<T> u;\n};\ntemplate <typename T>\nS<T> U<T>::u;\ntemplate S<int> U<int>::u;\nS<int> &i = U<int>::u;"
1984:
|
1992:
1993: ;
1994: $tok_ $(@expr1073744518 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 1994 $, code@var275 $) ;
1995: }
1996:
1997: void template87 ( ) {
1998: const char code@var276 [@expr1073744519 153 ] =@expr1073744520 "template<typename T>\nT f1(T t) { return t; }\ntemplate const char * f1<const char *>(const char *);\ntemplate const char & f1<const char &>(const char &);"
1999:
2000:
2001: ;
2002: const char exp@var277 [@expr1073744521 222 ] =@expr1073744522 "const char * f1<constchar*> ( const char * t ) ; const char & f1<constchar&> ( const char & t ) ; const char * f1<constchar*> ( const char * t ) { return t ; } const char & f1<constchar&> ( const char & t ) { return t ; }"
2003:
2004:
2005: ;
2006: $if $(@expr1073744523 $!@expr1073744524 $assertEquals $(@expr1073744525 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2006 $, exp@var277 $, $tok_ $(@expr1073744526 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2006 $, code@var276 $) $) $) { $return ; }
2007: }
2008:
2009: void template88 ( ) {
2010: const char code@var278 [@expr1073744527 348 ] =@expr1073744528 "class CTest {\npublic:\n    template <typename T>\n    static void Greeting(T val) {\n        std::cout << val << std::endl;\n    }\nprivate:\n    static void SayHello() {\n        std::cout << \"Hello World!\" << std::endl;\n    }\n};\ntemplate<>\nvoid CTest::Greeting(bool) {\n	CTest::SayHello();\n}\nint main() {\n    CTest::Greeting<bool>(true);\n    return 0;\n}"
2011:
|
2027:
2028: ;
2029: const char exp@var279 [@expr1073744529 373 ] =@expr1073744530 "class CTest { public: static void Greeting<bool> ( bool ) ; template < typename T > static void Greeting ( T val ) { std :: cout << val << std :: endl ; } private: static void SayHello ( ) { std :: cout << \"Hello World!\" << std :: endl ; } } ; void CTest :: Greeting<bool> ( bool ) { CTest :: SayHello ( ) ; } int main ( ) { CTest :: Greeting<bool> ( true ) ; return 0 ; }"
2030:
|
2046:
2047: ;
2048: $if $(@expr1073744531 $!@expr1073744532 $assertEquals $(@expr1073744533 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2048 $, exp@var279 $, $tok_ $(@expr1073744534 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2048 $, code@var278 $) $) $) { $return ; }
2049: }
2050:
2051: void template89 ( ) {
2052: const char code@var280 [@expr1073744535 209 ] =@expr1073744536 "struct Fred {\n    template <typename T> static void foo() { }\n};\ntemplate void Fred::foo<char>();\ntemplate void Fred::foo<float>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate <> void Fred::foo<int>() { }"
2053:
|
2057:
2058: ;
2059: const char exp@var281 [@expr1073744537 254 ] =@expr1073744538 "struct Fred { static void foo<int> ( ) ; static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<float> ( ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( ) { } void Fred :: foo<char> ( ) { } void Fred :: foo<float> ( ) { }"
2060:
|
2067:
2068: ;
2069: $if $(@expr1073744539 $!@expr1073744540 $assertEquals $(@expr1073744541 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2069 $, exp@var281 $, $tok_ $(@expr1073744542 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2069 $, code@var280 $) $) $) { $return ; }
2070: }
2071:
2072: void template90 ( ) {
2073: const char code@var282 [@expr1073744543 118 ] =@expr1073744544 "template <typename T> struct S1 {};\nvoid f(S1<double>) {}\ntemplate <typename T>\ndecltype(S1<T>().~S1<T>()) fun1() {};"
2074:
2075:
2076: ;
2077: const char exp@var283 [@expr1073744545 152 ] =@expr1073744546 "struct S1<double> ; void f ( S1<double> ) { } template < typename T > decltype ( S1 < T > ( ) . ~ S1 < T > ( ) ) fun1 ( ) { } ; struct S1<double> { } ;"
2078:
2079:
2080:
2081: ;
2082: $if $(@expr1073744547 $!@expr1073744548 $assertEquals $(@expr1073744549 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2082 $, exp@var283 $, $tok_ $(@expr1073744550 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2082 $, code@var282 $) $) $) { $return ; }
2083: }
2084:
2085: void template91 ( ) {
2086: {
2087: const char code@var284 [@expr1073744551 210 ] =@expr1073744552 "template<typename T> T foo(T t) { return t; }\ntemplate<> char foo<char>(char a) { return a; }\ntemplate<> int foo<int>(int a) { return a; }\ntemplate float foo<float>(float);\ntemplate double foo<double>(double);"
2088:
2089:
2090:
2091: ;
2092: const char exp@var285 [@expr1073744553 288 ] =@expr1073744554 "int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } float foo<float> ( float t ) { return t ; } double foo<double> ( double t ) { return t ; }"
2093:
|
2098:
2099: ;
2100: $if $(@expr1073744555 $!@expr1073744556 $assertEquals $(@expr1073744557 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2100 $, exp@var285 $, $tok_ $(@expr1073744558 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2100 $, code@var284 $) $) $) { $return ; }
2101: }
2102: {
2103: const char code@var286 [@expr1073744559 251 ] =@expr1073744560 "struct Fred {\n    template<typename T> T foo(T t) { return t; }\n    template<> char foo<char>(char a) { return a; }\n    template<> int foo<int>(int a) { return a; }\n};\ntemplate float Fred::foo<float>(float);\ntemplate double Fred::foo<double>(double);"
2104:
|
2108:
2109: ;
2110: const char exp@var287 [@expr1073744561 322 ] =@expr1073744562 "struct Fred { int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } ; float Fred :: foo<float> ( float t ) { return t ; } double Fred :: foo<double> ( double t ) { return t ; }"
2111:
|
2118:
2119: ;
2120: $if $(@expr1073744563 $!@expr1073744564 $assertEquals $(@expr1073744565 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2120 $, exp@var287 $, $tok_ $(@expr1073744566 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2120 $, code@var286 $) $) $) { $return ; }
2121: }
2122: {
2123: const char code@var288 [@expr1073744567 438 ] =@expr1073744568 "namespace NS1 {\n    namespace NS2 {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS2::foo<short>(short);\n        template long NS1::NS2::foo<long>(long);\n    }\n    template float NS2::foo<float>(float);\n    template bool NS1::NS2::foo<bool>(bool);\n}\ntemplate double NS1::NS2::foo<double>(double);"
2124:
|
2133:
2134: ;
2135: const char exp@var289 [@expr1073744569 607 ] =@expr1073744570 "namespace NS1 { namespace NS2 { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS2 :: foo<short> ( short t ) { return t ; } long NS1 :: NS2 :: foo<long> ( long t ) { return t ; } float NS1 :: NS2 :: foo<float> ( float t ) { return t ; } bool NS1 :: NS2 :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS2 :: foo<double> ( double t ) { return t ; }"
2136:
|
2151:
2152: ;
2153: $if $(@expr1073744571 $!@expr1073744572 $assertEquals $(@expr1073744573 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2153 $, exp@var289 $, $tok_ $(@expr1073744574 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2153 $, code@var288 $) $) $) { $return ; }
2154: }
2155: {
2156: const char code@var290 [@expr1073744575 432 ] =@expr1073744576 "namespace NS1 {\n    namespace NS {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS::foo<short>(short);\n        template long NS1::NS::foo<long>(long);\n    }\n    template float NS::foo<float>(float);\n    template bool NS1::NS::foo<bool>(bool);\n}\ntemplate double NS1::NS::foo<double>(double);"
2157:
|
2166:
2167: ;
2168: const char exp@var291 [@expr1073744577 601 ] =@expr1073744578 "namespace NS1 { namespace NS { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS :: foo<short> ( short t ) { return t ; } long NS1 :: NS :: foo<long> ( long t ) { return t ; } float NS1 :: NS :: foo<float> ( float t ) { return t ; } bool NS1 :: NS :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS :: foo<double> ( double t ) { return t ; }"
2169:
|
2184:
2185: ;
2186: $if $(@expr1073744579 $!@expr1073744580 $assertEquals $(@expr1073744581 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2186 $, exp@var291 $, $tok_ $(@expr1073744582 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2186 $, code@var290 $) $) $) { $return ; }
2187: }
2188: }
2189:
2190: void template92 ( ) {
2191: const char code@var292 [@expr1073744583 212 ] =@expr1073744584 "template<class T> void foo(T const& t) { }\ntemplate<> void foo<double>(double const& d) { }\ntemplate void foo<float>(float const& f);\nint main() {\n    foo<int>(2);\n    foo<double>(3.14);\n    foo<float>(3.14f);\n}"
2192:
|
2197:
2198: ;
2199: const char exp@var293 [@expr1073744585 310 ] =@expr1073744586 "void foo<double> ( const double & d ) ; void foo<float> ( const float & t ) ; void foo<int> ( const int & t ) ; void foo<double> ( const double & d ) { } int main ( ) { foo<int> ( 2 ) ; foo<double> ( 3.14 ) ; foo<float> ( 3.14f ) ; } void foo<float> ( const float & t ) { } void foo<int> ( const int & t ) { }"
2200:
|
2208:
2209: ;
2210: $if $(@expr1073744587 $!@expr1073744588 $assertEquals $(@expr1073744589 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2210 $, exp@var293 $, $tok_ $(@expr1073744590 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2210 $, code@var292 $) $) $) { $return ; }
2211: }
2212:
2213: void template93 ( ) {
2214: const char code@var294 [@expr1073744591 292 ] =@expr1073744592 "template <typename Iterator>\nvoid ForEach() { }\ntemplate <typename Type>\nclass Vector2 : public Vector {\n    template <typename Iterator>\n    void ForEach();\npublic:\n    void process();\n};\ntemplate <typename Type>\nvoid Vector2<Type>::process() {\n    ForEach<iterator>();\n}\nVector2<string> c;"
2215:
|
2226:
2227: ;
2228: const char exp@var295 [@expr1073744593 289 ] =@expr1073744594 "void ForEach<iterator> ( ) ; class Vector2<string> ; Vector2<string> c ; class Vector2<string> : public Vector { template < typename Iterator > void ForEach ( ) ; public: void process ( ) ; } ; void Vector2<string> :: process ( ) { ForEach<iterator> ( ) ; } void ForEach<iterator> ( ) { }"
2229:
|
2240:
2241: ;
2242: $if $(@expr1073744595 $!@expr1073744596 $assertEquals $(@expr1073744597 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2242 $, exp@var295 $, $tok_ $(@expr1073744598 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2242 $, code@var294 $) $) $) { $return ; }
2243: }
2244:
2245: void template94 ( ) {
2246: const char code@var296 [@expr1073744599 370 ] =@expr1073744600 "template <typename T>\nclass Array { };\ntemplate<typename T>\nArray<T> foo() {};\ntemplate <> Array<double> foo<double>() { }\ntemplate <> Array<std::complex<float>> foo<std::complex<float>>() { }\ntemplate <> Array<float> foo<float>() { }\ntemplate < typename T >\nArray<T> matmul() {\n    return foo<T>( );\n}\ntemplate Array<std::complex<float>> matmul<std::complex<float>>();"
2247:
|
2256:
2257: ;
2258: const char exp@var297 [@expr1073744601 626 ] =@expr1073744602 "class Array<double> ; class Array<std::complex<float>> ; class Array<float> ; Array<float> foo<float> ( ) ; Array<std::complex<float>> foo<std::complex<float>> ( ) ; Array<double> foo<double> ( ) ; template < typename T > Array < T > foo ( ) { } ; Array<double> foo<double> ( ) { } Array<std::complex<float>> foo<std::complex<float>> ( ) { } Array<float> foo<float> ( ) { } Array<std::complex<float>> matmul<std::complex<float>> ( ) ; Array<std::complex<float>> matmul<std::complex<float>> ( ) { return foo<std::complex<float>> ( ) ; } class Array<double> { } ; class Array<std::complex<float>> { } ; class Array<float> { } ;"
2259:
|
2274:
2275: ;
2276: $if $(@expr1073744603 $!@expr1073744604 $assertEquals $(@expr1073744605 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2276 $, exp@var297 $, $tok_ $(@expr1073744606 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2276 $, code@var296 $) $) $) { $return ; }
2277: }
2278:
2279: void template95 ( ) {
2280: const char code@var298 [@expr1073744607 114 ] =@expr1073744608 "template <typename T>\nT Value = 123;\ntemplate<>\nint Value<int> = 456;\nfloat f = Value<float>;\nint i = Value<int>;"
2281:
|
2284:
2285: ;
2286: const char exp@var299 [@expr1073744609 132 ] =@expr1073744610 "float Value<float> ; Value<float> = 123 ; int Value<int> ; Value<int> = 456 ; float f ; f = Value<float> ; int i ; i = Value<int> ;"
2287:
2288:
2289: ;
2290: $if $(@expr1073744611 $!@expr1073744612 $assertEquals $(@expr1073744613 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2290 $, exp@var299 $, $tok_ $(@expr1073744614 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2290 $, code@var298 $) $) $) { $return ; }
2291: }
2292:
2293: void template96 ( ) {
2294: {
2295: const char code@var300 [@expr1073744615 221 ] =@expr1073744616 "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f0 = fib<0>;\nlong f1 = fib<1>;\nlong f2 = fib<2>;\nlong f3 = fib<3>;"
2296:
|
2303:
2304: ;
2305: const char exp@var301 [@expr1073744617 236 ] =@expr1073744618 "constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f0 ; f0 = fib<0> ; long f1 ; f1 = fib<1> ; long f2 ; f2 = fib<2> ; long f3 ; f3 = fib<3> ;"
2306:
|
2311:
2312: ;
2313: $if $(@expr1073744619 $!@expr1073744620 $assertEquals $(@expr1073744621 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2313 $, exp@var301 $, $tok_ $(@expr1073744622 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2313 $, code@var300 $) $) $) { $return ; }
2314: }
2315: {
2316: const char code@var302 [@expr1073744623 168 ] =@expr1073744624 "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f5 = fib<5>;\n"
2317:
|
2321:
2322: ;
2323: const char exp@var303 [@expr1073744625 248 ] =@expr1073744626 "constexpr long fib<5> = fib<4> + fib<3> ; constexpr long fib<4> = fib<3> + fib<2> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f5 ; f5 = fib<5> ;"
2324:
|
2328:
2329: ;
2330: $if $(@expr1073744627 $!@expr1073744628 $assertEquals $(@expr1073744629 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2330 $, exp@var303 $, $tok_ $(@expr1073744630 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2330 $, code@var302 $) $) $) { $return ; }
2331: }
2332: }
2333:
2334: void template97 ( ) {
2335: const char code@var304 [@expr1073744631 884 ] =@expr1073744632 "namespace NS1 {\n    namespace NS2 {\n        namespace NS3 {\n            namespace NS4 {\n                template<class T>\n                class Fred {\n                    T * t;\n                public:\n                    Fred<T>() : t(nullptr) {}\n                };\n            }\n            using namespace NS4;\n            Fred<bool> fred_bool;\n            NS4::Fred<char> fred_char;\n        }\n        using namespace NS3;\n        NS4::Fred<short> fred_short;\n        using namespace NS3::NS4;\n        Fred<int> fred_int;\n        NS3::NS4::Fred<long> fred_long;\n        NS2::NS3::NS4::Fred<float> fred_float;\n        NS1::NS2::NS3::NS4::Fred<double> fred_double;\n    }\n    using namespace NS2;\n    NS3::NS4::Fred<float> fred_float1;\n    NS2::NS3::NS4::Fred<double> fred_double1;\n}\nusing namespace NS1::NS2::NS3::NS4;\nFred<bool> fred_bool1;\nNS1::NS2::NS3::NS4::Fred<int> fred_int1;"
2336:
|
2363:
2364: ;
2365: const char exp@var305 [@expr1073744633 1560 ] =@expr1073744634 "namespace NS1 { namespace NS2 { namespace NS3 { namespace NS4 { class Fred<bool> ; class Fred<char> ; class Fred<short> ; class Fred<int> ; class Fred<long> ; class Fred<float> ; class Fred<double> ; } using namespace NS4 ; NS4 :: Fred<bool> fred_bool ; NS4 :: Fred<char> fred_char ; } using namespace NS3 ; NS3 :: NS4 :: Fred<short> fred_short ; using namespace NS3 :: NS4 ; NS3 :: NS4 :: Fred<int> fred_int ; NS3 :: NS4 :: Fred<long> fred_long ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> fred_double ; } using namespace NS2 ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float1 ; NS2 :: NS3 :: NS4 :: Fred<double> fred_double1 ; } using namespace NS1 :: NS2 :: NS3 :: NS4 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> fred_bool1 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> fred_int1 ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> { bool * t ; public: Fred<bool> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<char> { char * t ; public: Fred<char> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<short> { short * t ; public: Fred<short> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> { int * t ; public: Fred<int> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<long> { long * t ; public: Fred<long> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<float> { float * t ; public: Fred<float> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> { double * t ; public: Fred<double> ( ) : t ( nullptr ) { } } ;"
2366:
|
2429:
2430: ;
2431: $if $(@expr1073744635 $!@expr1073744636 $assertEquals $(@expr1073744637 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2431 $, exp@var305 $, $tok_ $(@expr1073744638 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2431 $, code@var304 $) $) $) { $return ; }
2432: }
2433:
2434: void template98 ( ) {
2435: const char code@var306 [@expr1073744639 215 ] =@expr1073744640 "template <typename T>\nusing unique_ptr_with_deleter = std::unique_ptr<T, std::function<void(T*)>>;\nclass A {};\nstatic void func() {\n    unique_ptr_with_deleter<A> tmp(new A(), [](A* a) {\n        delete a;\n    });\n}"
2436:
|
2441:
2442: ;
2443: const char exp@var307 [@expr1073744641 149 ] =@expr1073744642 "class A { } ; static void func ( ) { std :: unique_ptr < A , std :: function < void ( A * ) > > tmp ( new A ( ) , [ ] ( A * a ) { delete a ; } ) ; }"
2444:
|
2447:
2448: ;
2449: $if $(@expr1073744643 $!@expr1073744644 $assertEquals $(@expr1073744645 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2449 $, exp@var307 $, $tok_ $(@expr1073744646 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2449 $, code@var306 $) $) $) { $return ; }
2450: }
2451:
2452: void template99 ( ) {
2453: const char code@var308 [@expr1073744647 139 ] =@expr1073744648 "template <typename T>\nclass Base {\npublic:\n    using ArrayType = std::vector<Base<T>>;\n};\nusing A = Base<int>;\nstatic A::ArrayType array;\n"
2454:
|
2458:
2459: ;
2460: const char exp@var309 [@expr1073744649 91 ] =@expr1073744650 "class Base<int> ; static std :: vector < Base<int> > array ; class Base<int> { public: } ;"
2461:
2462:
2463:
2464: ;
2465:
2466: $if $(@expr1073744651 $!@expr1073744652 $assertEquals $(@expr1073744653 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2466 $, exp@var309 $, $tok_ $(@expr1073744654 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2466 $, code@var308 $) $) $) { $return ; }
2467: }
2468:
2469: void template100 ( ) {
2470: const char code@var310 [@expr1073744655 144 ] =@expr1073744656 "enum class Device { I2C0, I2C1 };\ntemplate <Device D>\nconst char* deviceFile;\ntemplate <>\nconst char* deviceFile<Device::I2C0> = \"/tmp/i2c-0\";\n"
2471:
2472:
2473:
2474: ;
2475:
2476: const char exp@var311 [@expr1073744657 166 ] =@expr1073744658 "enum class Device { I2C0 , I2C1 } ; template < Device D > const char * deviceFile ; const char * deviceFile<Device::I2C0> ; deviceFile<Device::I2C0> = \"/tmp/i2c-0\" ;"
2477:
2478:
2479: ;
2480:
2481: $if $(@expr1073744659 $!@expr1073744660 $assertEquals $(@expr1073744661 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2481 $, exp@var311 $, $tok_ $(@expr1073744662 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2481 $, code@var310 $) $) $) { $return ; }
2482: }
2483:
2484: void template101 ( ) {
2485: const char code@var312 [@expr1073744663 116 ] =@expr1073744664 "class A {\npublic:\n    using ArrayType = std::vector<int>;\n    void func(typename ArrayType::size_type i) {\n    }\n};"
2486:
|
2489:
2490: ;
2491:
2492: const char exp@var313 [@expr1073744665 77 ] =@expr1073744666 "class A { public: void func ( std :: vector < int > :: size_type i ) { } } ;"
2493:
2494:
2495:
2496: ;
2497:
2498: $if $(@expr1073744667 $!@expr1073744668 $assertEquals $(@expr1073744669 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2498 $, exp@var313 $, $tok_ $(@expr1073744670 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2498 $, code@var312 $) $) $) { $return ; }
2499: $if $(@expr1073744671 $!@expr1073744672 $assertEquals $(@expr1073744673 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2499 $, "" $, errout@var100 .@expr1073744674 str (@expr1073744675 ) $) $) { $return ; }
2500: }
2501:
2502: void template102 ( ) {
2503: const char code@var314 [@expr1073744676 199 ] =@expr1073744677 "namespace ns {\ntemplate <class T>\nstruct is_floating_point\n: std::integral_constant<bool, std::is_floating_point<T>::value || true>\n{};\n}\nvoid f() {\n    if(std::is_floating_point<float>::value) {}\n}"
2504:
|
2510:
2511: ;
2512: const char exp@var315 [@expr1073744678 225 ] =@expr1073744679 "namespace ns { template < class T > struct is_floating_point : std :: integral_constant < bool , std :: is_floating_point < T > :: value || true > { } ; } void f ( ) { if ( std :: is_floating_point < float > :: value ) { } }"
2513:
|
2519:
2520: ;
2521: $if $(@expr1073744680 $!@expr1073744681 $assertEquals $(@expr1073744682 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2521 $, exp@var315 $, $tok_ $(@expr1073744683 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2521 $, code@var314 $) $) $) { $return ; }
2522: }
2523:
2524: void template103 ( ) {
2525: const char code@var316 [@expr1073744684 195 ] =@expr1073744685 "namespace sample {\n  template <typename T>\n  class Sample {\n  public:\n    T function(T t);\n  };\n  template <typename T>\n  T Sample<T>::function(T t) {\n    return t;\n  }\n}\nsample::Sample<int> s1;"
2526:
|
2535:
2536: ;
2537: const char exp@var317 [@expr1073744686 198 ] =@expr1073744687 "namespace sample { class Sample<int> ; } sample :: Sample<int> s1 ; class sample :: Sample<int> { public: int function ( int t ) ; } ; int sample :: Sample<int> :: function ( int t ) { return t ; }"
2538:
|
2546:
2547: ;
2548: $if $(@expr1073744688 $!@expr1073744689 $assertEquals $(@expr1073744690 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2548 $, exp@var317 $, $tok_ $(@expr1073744691 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2548 $, code@var316 $) $) $) { $return ; }
2549: }
2550:
2551: void template104 ( ) {
2552: const char code@var318 [@expr1073744692 435 ] =@expr1073744693 "template < int i >\nauto key ( ) { return hana :: test :: ct_eq < i > { } ; }\ntemplate < int i >\nauto val ( ) { return hana :: test :: ct_eq < - i > { } ; }\ntemplate < int i , int j >\nauto p ( ) { return :: minimal_product ( key < i > ( ) , val < j > ( ) ) ; }\nint main ( ) {\n    BOOST_HANA_CONSTANT_CHECK ( hana :: equal (\n        hana :: at_key ( hana :: make_map ( p < 0 , 0 > ( ) ) , key < 0 > ( ) ) ,\n        val < 0 > ( ) ) ) ;\n}"
2553:
|
2561:
2562: ;
2563: const char exp@var319 [@expr1073744694 398 ] =@expr1073744695 "auto key<0> ( ) ; auto val<0> ( ) ; auto p<0,0> ( ) ; int main ( ) { BOOST_HANA_CONSTANT_CHECK ( hana :: equal ( hana :: at_key ( hana :: make_map ( p<0,0> ( ) ) , key<0> ( ) ) , val<0> ( ) ) ) ; } auto p<0,0> ( ) { return :: minimal_product ( key<0> ( ) , val<0> ( ) ) ; } auto val<0> ( ) { return hana :: test :: ct_eq < - 0 > { } ; } auto key<0> ( ) { return hana :: test :: ct_eq < 0 > { } ; }"
2564:
|
2572:
2573: ;
2574: $if $(@expr1073744696 $!@expr1073744697 $assertEquals $(@expr1073744698 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2574 $, exp@var319 $, $tok_ $(@expr1073744699 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2574 $, code@var318 $) $) $) { $return ; }
2575: }
2576:
2577: void template105 ( ) {
2578: const char code@var320 [@expr1073744700 189 ] =@expr1073744701 "template <template <typename> class TOUT> class ObjectCache;\ntemplate <template <typename> class TOUT>\nclass ObjectCache { };\ntemplate <typename T> class Fred {};\nObjectCache<Fred> _cache;"
2579:
2580:
2581:
2582: ;
2583: const char exp@var321 [@expr1073744702 124 ] =@expr1073744703 "class ObjectCache<Fred> ; template < typename T > class Fred { } ; ObjectCache<Fred> _cache ; class ObjectCache<Fred> { } ;"
2584:
2585: ;
2586: $if $(@expr1073744704 $!@expr1073744705 $assertEquals $(@expr1073744706 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2586 $, exp@var321 $, $tok_ $(@expr1073744707 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2586 $, code@var320 $) $) $) { $return ; }
2587: }
2588:
2589: void template106 ( ) {
2590: const char code@var322 [@expr1073744708 144 ] =@expr1073744709 "template<class T, class U> class A {\npublic:\n   int x;\n};\ntemplate<template<class T, class U> class V> class B {\n   V<char, char> i;\n};\nB<A> c;"
2591:
|
2596:
2597: ;
2598: const char exp@var323 [@expr1073744710 118 ] =@expr1073744711 "class A<char,char> ; class B<A> ; B<A> c ; class B<A> { A<char,char> i ; } ; class A<char,char> { public: int x ; } ;"
2599:
|
2605:
2606: ;
2607: $if $(@expr1073744712 $!@expr1073744713 $assertEquals $(@expr1073744714 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2607 $, exp@var323 $, $tok_ $(@expr1073744715 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2607 $, code@var322 $) $) $) { $return ; }
2608: }
2609:
2610: void template107 ( ) {
2611: const char code@var324 [@expr1073744716 182 ] =@expr1073744717 "template <class T1, class T2>\nvoid f() {\n  using T3 = typename T1::template T3<T2>;\n  T3 t;\n}\nstruct C3 {\n  template <typename T>\n  class T3\n  {};\n};\nvoid foo() {\n  f<C3, long>();\n}"
2612:
|
2622:
2623: ;
2624: const char exp@var325 [@expr1073744718 159 ] =@expr1073744719 "void f<C3,long> ( ) ; struct C3 { class T3<long> ; } ; void foo ( ) { f<C3,long> ( ) ; } void f<C3,long> ( ) { C3 :: T3<long> t ; } class C3 :: T3<long> { } ;"
2625:
|
2633:
2634: ;
2635: $if $(@expr1073744720 $!@expr1073744721 $assertEquals $(@expr1073744722 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2635 $, exp@var325 $, $tok_ $(@expr1073744723 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2635 $, code@var324 $) $) $) { $return ; }
2636: }
2637:
2638: void template108 ( ) {
2639: {
2640: const char code@var326 [@expr1073744724 211 ] =@expr1073744725 "template <typename> struct a;\ntemplate <typename> struct b {};\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\nstruct i {\n  e<int> j();\n};\n"
2641:
|
2648:
2649: ;
2650: const char exp@var327 [@expr1073744726 219 ] =@expr1073744727 "template < typename > struct a ; struct b<c<int>::g> ; template < typename > struct c ; struct e<int> ; struct i { e<int> j ( ) ; } ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;"
2651:
|
2658:
2659: ;
2660: $if $(@expr1073744728 $!@expr1073744729 $assertEquals $(@expr1073744730 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2660 $, exp@var327 $, $tok_ $(@expr1073744731 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2660 $, code@var326 $) $) $) { $return ; }
2661: }
2662: {
2663: const char code@var328 [@expr1073744732 260 ] =@expr1073744733 "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}"
2664:
|
2673:
2674: ;
2675: const char exp@var329 [@expr1073744734 287 ] =@expr1073744735 "namespace { template < typename > struct a ; template < typename > struct b { } ; } namespace { template < typename > struct c ; template < typename d > struct e { using f = a < b < c < d > :: g > > ; bool h ; h = f :: h ; } ; template < typename i > using j = typename e < i > :: g ; }"
2676:
|
2685:
2686: ;
2687: $if $(@expr1073744736 $!@expr1073744737 $assertEquals $(@expr1073744738 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2687 $, exp@var329 $, $tok_ $(@expr1073744739 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2687 $, code@var328 $) $) $) { $return ; }
2688: }
2689: {
2690: const char code@var330 [@expr1073744740 272 ] =@expr1073744741 "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}\nj<int> foo;"
2691:
|
2701:
2702: ;
2703: const char exp@var331 [@expr1073744742 235 ] =@expr1073744743 "namespace { template < typename > struct a ; struct b<c<int>::g> ; } namespace { template < typename > struct c ; struct e<int> ; } e<int> :: g foo ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;"
2704:
|
2714:
2715: ;
2716: $if $(@expr1073744744 $!@expr1073744745 $assertEquals $(@expr1073744746 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2716 $, exp@var331 $, $tok_ $(@expr1073744747 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2716 $, code@var330 $) $) $) { $return ; }
2717: }
2718: }
2719:
2720: void template109 ( ) {
2721: {
2722: const char code@var332 [@expr1073744748 190 ] =@expr1073744749 "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n"
2723:
2724:
2725:
2726: ;
2727: const char exp@var333 [@expr1073744750 227 ] =@expr1073744751 "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<c<int>,c<int>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int>,c<int>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int>,c<int>,int> { } ;"
2728:
|
2733:
2734: ;
2735: $if $(@expr1073744752 $!@expr1073744753 $assertEquals $(@expr1073744754 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2735 $, exp@var333 $, $tok_ $(@expr1073744755 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2735 $, code@var332 $) $) $) { $return ; }
2736: }
2737: {
2738: const char code@var334 [@expr1073744756 196 ] =@expr1073744757 "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<a::c<int>, a::c<int>, int>), \"\");\n"
2739:
2740:
2741:
2742: ;
2743: const char exp@var335 [@expr1073744758 503 ] =@expr1073744759 "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;"
2744:
|
2749:
2750: ;
2751: $if $(@expr1073744760 $!@expr1073744761 $assertEquals $(@expr1073744762 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2751 $, exp@var335 $, $tok_ $(@expr1073744763 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2751 $, code@var334 $) $) $) { $return ; }
2752: }
2753: {
2754: const char code@var336 [@expr1073744764 174 ] =@expr1073744765 "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n"
2755:
2756: ;
2757: const char exp@var337 [@expr1073744766 469 ] =@expr1073744767 "template < typename b , bool > struct c ; struct e<> ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;"
2758:
|
2761:
2762: ;
2763: $if $(@expr1073744768 $!@expr1073744769 $assertEquals $(@expr1073744770 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2763 $, exp@var337 $, $tok_ $(@expr1073744771 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2763 $, code@var336 $) $) $) { $return ; }
2764: }
2765: {
2766: const char code@var338 [@expr1073744772 85 ] =@expr1073744773 "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c{};\nc<int> cc;\n"
2767: ;
2768: const char exp@var339 [@expr1073744774 177 ] =@expr1073744775 "struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> ; c<int,std::is_empty<int>{}&&std::is_final<int>{}> cc ; struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> { } ;"
2769:
2770: ;
2771: $if $(@expr1073744776 $!@expr1073744777 $assertEquals $(@expr1073744778 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2771 $, exp@var339 $, $tok_ $(@expr1073744779 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2771 $, code@var338 $) $) $) { $return ; }
2772: }
2773: {
2774: const char code@var340 [@expr1073744780 81 ] =@expr1073744781 "template <typename b, bool = unknown1(b) && unknown2(b)> struct c{};\nc<int> cc;\n"
2775: ;
2776: const char exp@var341 [@expr1073744782 135 ] =@expr1073744783 "struct c<int,unknown1(int)&&unknown2(int)> ; c<int,unknown1(int)&&unknown2(int)> cc ; struct c<int,unknown1(int)&&unknown2(int)> { } ;"
2777:
2778: ;
2779: $if $(@expr1073744784 $!@expr1073744785 $assertEquals $(@expr1073744786 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2779 $, exp@var341 $, $tok_ $(@expr1073744787 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2779 $, code@var340 $) $) $) { $return ; }
2780: }
2781: }
2782:
2783: void template110 ( ) {
2784: const char code@var342 [@expr1073744788 163 ] =@expr1073744789 "template<typename T> using A = int;\ntemplate<typename T> using A<T*> = char;\ntemplate<> using A<char> = char;\ntemplate using A<char> = char;\nusing A<char> = char;"
2785:
2786:
2787:
2788: ;
2789: const char exp@var343 [@expr1073744790 189 ] =@expr1073744791 "template < typename T > using A = int ; template < typename T > using A < T * > = char ; template < > using A < char > = char ; template using A < char > = char ; using A < char > = char ;"
2790:
2791:
2792:
2793: ;
2794: $if $(@expr1073744792 $!@expr1073744793 $assertEquals $(@expr1073744794 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2794 $, exp@var343 $, $tok_ $(@expr1073744795 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2794 $, code@var342 $) $) $) { $return ; }
2795: }
2796:
2797: void template111 ( ) {
2798: const char code@var344 [@expr1073744796 100 ] =@expr1073744797 "template<typename T, typename U> struct pair;\ntemplate<typename T> using cell = pair<T*, cell<T>*>;"
2799: ;
2800: const char exp@var345 [@expr1073744798 118 ] =@expr1073744799 "template < typename T , typename U > struct pair ; template < typename T > using cell = pair < T * , cell < T > * > ;"
2801: ;
2802: $if $(@expr1073744800 $!@expr1073744801 $assertEquals $(@expr1073744802 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2802 $, exp@var345 $, $tok_ $(@expr1073744803 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2802 $, code@var344 $) $) $) { $return ; }
2803: }
2804:
2805: void template112 ( ) {
2806: const char code@var346 [@expr1073744804 169 ] =@expr1073744805 "template <int> struct a;\ntemplate <class, class b> using c = typename a<int{b::d}>::e;\ntemplate <class> struct f;\ntemplate <class b> using g = typename f<c<int, b>>::e;"
2807:
2808:
2809: ;
2810: const char exp@var347 [@expr1073744806 201 ] =@expr1073744807 "template < int > struct a ; template < class , class b > using c = typename a < int { b :: d } > :: e ; template < class > struct f ; template < class b > using g = typename f < c < int , b > > :: e ;"
2811:
2812:
2813: ;
2814: $if $(@expr1073744808 $!@expr1073744809 $assertEquals $(@expr1073744810 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2814 $, exp@var347 $, $tok_ $(@expr1073744811 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2814 $, code@var346 $) $) $) { $return ; }
2815: }
2816:
2817: void template113 ( ) {
2818: {
2819: const char code@var348 [@expr1073744812 50 ] =@expr1073744813 "template <class> class A { void f(); };\nA<int> a;"
2820: ;
2821: const char exp@var349 [@expr1073744814 58 ] =@expr1073744815 "class A<int> ; A<int> a ; class A<int> { void f ( ) ; } ;"
2822:
2823: ;
2824: $if $(@expr1073744816 $!@expr1073744817 $assertEquals $(@expr1073744818 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2824 $, exp@var349 $, $tok_ $(@expr1073744819 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2824 $, code@var348 $) $) $) { $return ; }
2825: }
2826: {
2827: const char code@var350 [@expr1073744820 52 ] =@expr1073744821 "template <struct> struct A { void f(); };\nA<int> a;"
2828: ;
2829: const char exp@var351 [@expr1073744822 60 ] =@expr1073744823 "struct A<int> ; A<int> a ; struct A<int> { void f ( ) ; } ;"
2830:
2831: ;
2832: $if $(@expr1073744824 $!@expr1073744825 $assertEquals $(@expr1073744826 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2832 $, exp@var351 $, $tok_ $(@expr1073744827 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2832 $, code@var350 $) $) $) { $return ; }
2833: }
2834: }
2835:
2836: void template114 ( ) {
2837: {
2838: const char code@var352 [@expr1073744828 224 ] =@expr1073744829 "template <typename a, a> struct b {};\ntemplate <typename> struct c;\ntemplate <typename> struct d : b<bool, std::is_polymorphic<int>{}> {};\ntemplate <bool> struct e;\ntemplate <typename a> using f = typename e<c<d<a>>::g>::h;"
2839:
2840:
2841:
2842: ;
2843: const char exp@var353 [@expr1073744830 266 ] =@expr1073744831 "template < typename a , a > struct b { } ; template < typename > struct c ; template < typename > struct d : b < bool , std :: is_polymorphic < int > { } > { } ; template < bool > struct e ; template < typename a > using f = typename e < c < d < a > > :: g > :: h ;"
2844:
2845:
2846:
2847: ;
2848: $if $(@expr1073744832 $!@expr1073744833 $assertEquals $(@expr1073744834 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2848 $, exp@var353 $, $tok_ $(@expr1073744835 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2848 $, code@var352 $) $) $) { $return ; }
2849: }
2850: {
2851: const char code@var354 [@expr1073744836 210 ] =@expr1073744837 "template <typename a, a> struct b;\ntemplate <bool, typename> struct c;\ntemplate <typename a> struct d : b<bool, std::is_empty<a>{}> {};\ntemplate <typename a> using e = typename c<std::is_final<a>{}, d<a>>::f;\n"
2852:
2853:
2854: ;
2855: const char exp@var355 [@expr1073744838 251 ] =@expr1073744839 "template < typename a , a > struct b ; template < bool , typename > struct c ; template < typename a > struct d : b < bool , std :: is_empty < a > { } > { } ; template < typename a > using e = typename c < std :: is_final < a > { } , d < a > > :: f ;"
2856:
2857:
2858: ;
2859: $if $(@expr1073744840 $!@expr1073744841 $assertEquals $(@expr1073744842 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2859 $, exp@var355 $, $tok_ $(@expr1073744843 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2859 $, code@var354 $) $) $) { $return ; }
2860: }
2861: }
2862:
2863: void template115 ( ) {
2864: const char code@var356 [@expr1073744844 279 ] =@expr1073744845 "namespace {\n    namespace b {\n        template <int c> struct B { using B<c / 2>::d; };\n    }\n    template <class, class> using e = typename b::B<int{}>;\n    namespace b {\n        template <class> struct f {};\n    }\n    template <class c> using g = b::f<e<int, c>>;\n}\ng<int> g1;"
2865:
|
2873:
2874: ;
2875: const char exp@var357 [@expr1073744846 171 ] =@expr1073744847 "namespace { namespace b { struct B<0> ; } namespace b { struct f<b::B<0>> ; } } b :: f<b::B<0>> g1 ; struct b :: B<0> { using B<0> :: d ; } ; struct b :: f<b::B<0>> { } ;"
2876:
|
2883:
2884: ;
2885: $if $(@expr1073744848 $!@expr1073744849 $assertEquals $(@expr1073744850 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2885 $, exp@var357 $, $tok_ $(@expr1073744851 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2885 $, code@var356 $) $) $) { $return ; }
2886: }
2887:
2888: void template116 ( ) {
2889: {
2890: const char code@var358 [@expr1073744852 161 ] =@expr1073744853 "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>);\ntemplate <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>){}"
2891: ;
2892: const char exp@var359 [@expr1073744854 200 ] =@expr1073744855 "template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) ; template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) { }"
2893: ;
2894: $if $(@expr1073744856 $!@expr1073744857 $assertEquals $(@expr1073744858 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2894 $, exp@var359 $, $tok_ $(@expr1073744859 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2894 $, code@var358 $) $) $) { $return ; }
2895: }
2896: {
2897: const char code@var360 [@expr1073744860 151 ] =@expr1073744861 "template <class, class a>\nauto b() -> decltype(a{}.template b<void(int, int)>()) {}\nstruct c {\n  template <class> void b();\n};\nvoid d() { b<c, c>(); }"
2898:
|
2901:
2902: ;
2903: const char exp@var361 [@expr1073744862 235 ] =@expr1073744863 "auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) ; struct c { template < class > void b ( ) ; } ; void d ( ) { b<c,c> ( ) ; } auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) { }"
2904:
|
2907:
2908: ;
2909: $if $(@expr1073744864 $!@expr1073744865 $assertEquals $(@expr1073744866 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2909 $, exp@var361 $, $tok_ $(@expr1073744867 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2909 $, code@var360 $) $) $) { $return ; }
2910: }
2911: }
2912:
2913: void template117 ( ) {
2914: const char code@var362 [@expr1073744868 51 ] =@expr1073744869 "template<typename T = void> struct X {};\nX<X<>> x;"
2915: ;
2916: const char exp@var363 [@expr1073744870 97 ] =@expr1073744871 "struct X<void> ; struct X<X<void>> ; X<X<void>> x ; struct X<void> { } ; struct X<X<void>> { } ;"
2917:
2918:
2919:
2920: ;
2921: $if $(@expr1073744872 $!@expr1073744873 $assertEquals $(@expr1073744874 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2921 $, exp@var363 $, $tok_ $(@expr1073744875 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2921 $, code@var362 $) $) $) { $return ; }
2922: }
2923:
2924: void template118 ( ) {
2925: const char code@var364 [@expr1073744876 51 ] =@expr1073744877 "template<int> struct S { void f(int i); };\nS<1> s;"
2926: ;
2927: const char exp@var365 [@expr1073744878 60 ] =@expr1073744879 "struct S<1> ; S<1> s ; struct S<1> { void f ( int i ) ; } ;"
2928:
2929:
2930: ;
2931: $if $(@expr1073744880 $!@expr1073744881 $assertEquals $(@expr1073744882 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2931 $, exp@var365 $, $tok_ $(@expr1073744883 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2931 $, code@var364 $) $) $) { $return ; }
2932: }
2933:
2934: void template119 ( ) {
2935: {
2936: const char code@var366 [@expr1073744884 245 ] =@expr1073744885 "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\ntemplate <typename T>\nconstexpr auto funcBraced = [](auto x){ return T{x};};\ndouble f(int x) { return func<double>(x); }\ndouble fBraced(int x) { return funcBraced<int>(x); }"
2937:
|
2940:
2941: ;
2942: const char exp@var367 [@expr1073744886 257 ] =@expr1073744887 "constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; constexpr auto funcBraced<int> = [ ] ( auto x ) { return int { x } ; } ; double f ( int x ) { return func<double> ( x ) ; } double fBraced ( int x ) { return funcBraced<int> ( x ) ; }"
2943:
2944:
2945: ;
2946: $if $(@expr1073744888 $!@expr1073744889 $assertEquals $(@expr1073744890 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2946 $, exp@var367 $, $tok_ $(@expr1073744891 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2946 $, code@var366 $) $) $) { $return ; }
2947: }
2948: {
2949: const char code@var368 [@expr1073744892 125 ] =@expr1073744893 "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\nvoid foo() {\n    func<int>(x);\n    func<double>(x);\n}"
2950:
|
2953:
2954: ;
2955: const char exp@var369 [@expr1073744894 196 ] =@expr1073744895 "constexpr auto func<int> = [ ] ( auto x ) { return int ( x ) ; } ; constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; void foo ( ) { func<int> ( x ) ; func<double> ( x ) ; }"
2956:
|
2959:
2960: ;
2961: $if $(@expr1073744896 $!@expr1073744897 $assertEquals $(@expr1073744898 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2961 $, exp@var369 $, $tok_ $(@expr1073744899 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2961 $, code@var368 $) $) $) { $return ; }
2962: }
2963: }
2964:
2965: void template120 ( ) {
2966: const char code@var370 [@expr1073744900 382 ] =@expr1073744901 "template<typename Tuple>\nstruct lambda_context {\n    template<typename Sig> struct result;\n    template<typename This, typename I>\n    struct result<This(terminal, placeholder)> : at<Tuple, I> {};\n};\ntemplate<typename T>\nstruct lambda {\n    template<typename Sig> struct result;\n    template<typename This>\n    struct result<This()> : lambda_context<tuple<> > {};\n};\nlambda<int> l;"
2967:
|
2977:
2978: ;
2979: const char exp@var371 [@expr1073744902 408 ] =@expr1073744903 "template < typename Tuple > struct lambda_context { template < typename Sig > struct result ; template < typename This , typename I > struct result < This ( terminal , placeholder ) > : at < Tuple , I > { } ; } ; struct lambda<int> ; lambda<int> l ; struct lambda<int> { template < typename Sig > struct result ; template < typename This > struct result < This ( ) > : lambda_context < tuple < > > { } ; } ;"
2980:
|
2989:
2990: ;
2991: $if $(@expr1073744904 $!@expr1073744905 $assertEquals $(@expr1073744906 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2991 $, exp@var371 $, $tok_ $(@expr1073744907 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 2991 $, code@var370 $) $) $) { $return ; }
2992: }
2993:
2994: void template121 ( ) {
2995: const char code@var372 [@expr1073744908 119 ] =@expr1073744909 "template <class VALUE_T, class LIST_T = std::list<VALUE_T>>\nclass TestList { };\nTestList<std::shared_ptr<int>> m_test;"
2996:
2997: ;
2998: const char exp@var373 [@expr1073744910 218 ] =@expr1073744911 "class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> ; TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> m_test ; class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> { } ;"
2999:
3000: ;
3001: $if $(@expr1073744912 $!@expr1073744913 $assertEquals $(@expr1073744914 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3001 $, exp@var373 $, $tok_ $(@expr1073744915 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3001 $, code@var372 $) $) $) { $return ; }
3002: }
3003:
3004: void template122 ( ) {
3005: const char code@var374 [@expr1073744916 207 ] =@expr1073744917 "template <class...> struct a;\nnamespace {\ntemplate <class, class> struct b;\ntemplate <template <class> class c, class... f, template <class...> class d>\nstruct b<c<f...>, d<>>;\n}\nvoid e() { using c = a<>; }"
3006:
|
3010:
3011: ;
3012: const char exp@var375 [@expr1073744918 223 ] =@expr1073744919 "template < class ... > struct a ; namespace { template < class , class > struct b ; template < template < class > class c , class ... f , template < class ... > class d > struct b < c < f ... > , d < > > ; } void e ( ) { }"
3013:
|
3017:
3018: ;
3019: $if $(@expr1073744920 $!@expr1073744921 $assertEquals $(@expr1073744922 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3019 $, exp@var375 $, $tok_ $(@expr1073744923 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3019 $, code@var374 $) $) $) { $return ; }
3020: }
3021:
3022: void template123 ( ) {
3023: const char code@var376 [@expr1073744924 255 ] =@expr1073744925 "template <class...> struct a;\nnamespace {\ntemplate <class, class, class, class>\nstruct b;\ntemplate <template <class> class c, class... d, template <class> class e, class... f>\nstruct b<c<d...>, e<f...>>;\n}\nvoid fn1() {\n  using c = a<>;\n  using e = a<>;\n}"
3024:
|
3032:
3033: ;
3034: const char exp@var377 [@expr1073744926 257 ] =@expr1073744927 "template < class ... > struct a ; namespace { template < class , class , class , class > struct b ; template < template < class > class c , class ... d , template < class > class e , class ... f > struct b < c < d ... > , e < f ... > > ; } void fn1 ( ) { }"
3035:
|
3041:
3042: ;
3043: $if $(@expr1073744928 $!@expr1073744929 $assertEquals $(@expr1073744930 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3043 $, exp@var377 $, $tok_ $(@expr1073744931 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3043 $, code@var376 $) $) $) { $return ; }
3044: }
3045:
3046: void template124 ( ) {
3047: const char code@var378 [@expr1073744932 203 ] =@expr1073744933 "template <bool> struct a;\ntemplate <bool b> using c = typename a<b>::d;\ntemplate <typename> struct e;\ntemplate <typename> struct h {\n  template <typename... f, c<h<e<typename f::d...>>::g>> void i();\n};"
3048:
|
3051:
3052: ;
3053: const char exp@var379 [@expr1073744934 239 ] =@expr1073744935 "template < bool > struct a ; template < bool b > using c = typename a < b > :: d ; template < typename > struct e ; template < typename > struct h { template < typename ... f , c < h < e < typename f :: d ... > > :: g > > void i ( ) ; } ;"
3054:
|
3057:
3058: ;
3059: $if $(@expr1073744936 $!@expr1073744937 $assertEquals $(@expr1073744938 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3059 $, exp@var379 $, $tok_ $(@expr1073744939 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3059 $, code@var378 $) $) $) { $return ; }
3060: }
3061:
3062: void template125 ( ) {
3063: $do ${ $try ${ $tok_ $(@expr1073744940 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3063 $, "template<int M, int N>\nclass GCD {\npublic:\n  enum { val = (N == 0) ? M : GCD<N, M % N>::val };\n};\nint main() {\n  GCD< 1, 0 >::val;\n}" $) $; $assertThrowFail $(@expr1073744941 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3063 $) $; $} $catch $(@expr1073744942 $const InternalError $&@expr1073744943 $) ${ $} $catch $(@expr1073744944 $... $) ${ $assertThrowFail $(@expr1073744945 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3063 $) $; $} $} $while $(@expr1073744946 $false $)
3064:
|
3069:
3070: ;
3071: }
3072:
3073: void template126 ( ) {
3074: const char code@var380 [@expr1073744947 71 ] =@expr1073744948 "template <typename b> using d = a<b>;\nstatic_assert(i<d<l<b>>>{}, \"\");"
3075: ;
3076: const char exp@var381 [@expr1073744949 49 ] =@expr1073744950 "static_assert ( i < a < l < b > > > { } , \"\" ) ;" ;
3077: $if $(@expr1073744951 $!@expr1073744952 $assertEquals $(@expr1073744953 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3077 $, exp@var381 $, $tok_ $(@expr1073744954 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3077 $, code@var380 $) $) $) { $return ; }
3078: }
3079:
3080: void template127 ( ) {
3081: {
3082: const char code@var382 [@expr1073744955 218 ] =@expr1073744956 "template <typename> struct a {\n  template <typename b> constexpr decltype(auto) operator()(b &&) const;\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nconstexpr decltype(auto) a<d>::operator()(b &&) const {}"
3083:
|
3087:
3088: ;
3089: const char exp@var383 [@expr1073744957 244 ] =@expr1073744958 "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ;"
3090:
|
3095:
3096: ;
3097: const char act@var384 [@expr1073744959 312 ] =@expr1073744960 "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ; constexpr decltype ( auto ) a<int> :: operator() ( b && ) const { }"
3098:
|
3104:
3105: ;
3106: $todoAssertEquals $(@expr1073744961 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3106 $, exp@var383 $, act@var384 $, $tok_ $(@expr1073744962 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3106 $, code@var382 $) $) ;
3107: }
3108: {
3109: const char code@var385 [@expr1073744963 187 ] =@expr1073744964 "template <typename> struct a {\n  template <typename b> static void foo();\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }"
3110:
|
3115:
3116: ;
3117: const char exp@var386 [@expr1073744965 276 ] =@expr1073744966 "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }"
3118:
|
3126:
3127: ;
3128: const char act@var387 [@expr1073744967 242 ] =@expr1073744968 "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }"
3129:
|
3136:
3137: ;
3138: $todoAssertEquals $(@expr1073744969 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3138 $, exp@var386 $, act@var387 $, $tok_ $(@expr1073744970 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3138 $, code@var385 $) $) ;
3139: }
3140: {
3141: const char code@var388 [@expr1073744971 177 ] =@expr1073744972 "template <typename> struct a {\n  template <typename b> static void foo();\n};\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }"
3142:
|
3146:
3147: ;
3148: const char exp@var389 [@expr1073744973 219 ] =@expr1073744974 "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }"
3149:
|
3155:
3156: ;
3157: const char act@var390 [@expr1073744975 231 ] =@expr1073744976 "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }"
3158:
|
3164:
3165: ;
3166: $todoAssertEquals $(@expr1073744977 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3166 $, exp@var389 $, act@var390 $, $tok_ $(@expr1073744978 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3166 $, code@var388 $) $) ;
3167: }
3168: }
3169:
3170: void template128 ( ) {
3171: const char code@var391 [@expr1073744979 105 ] =@expr1073744980 "template <typename> struct a { };\ntemplate <typename j> void h() { k.h<a<j>>; }\nvoid foo() { h<int>(); }"
3172:
3173: ;
3174: const char exp@var392 [@expr1073744981 123 ] =@expr1073744982 "struct a<int> ; void h<int> ( ) ; void foo ( ) { h<int> ( ) ; } void h<int> ( ) { k . h < a<int> > ; } struct a<int> { } ;"
3175:
3176:
3177:
3178: ;
3179: $if $(@expr1073744983 $!@expr1073744984 $assertEquals $(@expr1073744985 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3179 $, exp@var392 $, $tok_ $(@expr1073744986 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3179 $, code@var391 $) $) $) { $return ; }
3180: }
3181:
3182: void template129 ( ) {
3183: const char code@var393 [@expr1073744987 239 ] =@expr1073744988 "class LuaContext {\npublic:\n  template <typename TFunctionType, typename TType>\n  void registerFunction(TType fn) { }\n};\nvoid setupLuaBindingsDNSQuestion() {\n  g_lua.registerFunction<void (DNSQuestion ::*)(std ::string, std ::string)>();\n}"
3184:
|
3189:
3190: ;
3191: const char exp@var394 [@expr1073744989 259 ] =@expr1073744990 "class LuaContext { public: template < typename TFunctionType , typename TType > void registerFunction ( TType fn ) { } } ; void setupLuaBindingsDNSQuestion ( ) { g_lua . registerFunction < void ( DNSQuestion :: * ) ( std :: string , std :: string ) > ( ) ; }"
3192:
|
3197:
3198: ;
3199: $if $(@expr1073744991 $!@expr1073744992 $assertEquals $(@expr1073744993 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3199 $, exp@var394 $, $tok_ $(@expr1073744994 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3199 $, code@var393 $) $) $) { $return ; }
3200: }
3201:
3202: void template130 ( ) {
3203: const char code@var395 [@expr1073744995 225 ] =@expr1073744996 "template <typename...> using a = int;\ntemplate <typename, typename> using b = a<>;\ntemplate <typename, typename> void c();\ntemplate <typename d, typename> void e() { c<b<d, int>, int>; }\nvoid f() { e<int(int, ...), int>(); }"
3204:
3205:
3206:
3207: ;
3208: const char exp@var396 [@expr1073744997 169 ] =@expr1073744998 "template < typename , typename > void c ( ) ; void e<int(int,...),int> ( ) ; void f ( ) { e<int(int,...),int> ( ) ; } void e<int(int,...),int> ( ) { c < int , int > ; }"
3209:
3210:
3211: ;
3212: $if $(@expr1073744999 $!@expr1073745000 $assertEquals $(@expr1073745001 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3212 $, exp@var396 $, $tok_ $(@expr1073745002 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3212 $, code@var395 $) $) $) { $return ; }
3213: }
3214:
3215: void template131 ( ) {
3216: {
3217: const char code@var397 [@expr1073745003 55 ] =@expr1073745004 "template <long a, bool = 0 == a> struct b {};\nb<1> b1;"
3218: ;
3219: const char exp@var398 [@expr1073745005 60 ] =@expr1073745006 "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;"
3220:
3221: ;
3222: $if $(@expr1073745007 $!@expr1073745008 $assertEquals $(@expr1073745009 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3222 $, exp@var398 $, $tok_ $(@expr1073745010 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3222 $, code@var397 $) $) $) { $return ; }
3223: }
3224: {
3225: const char code@var399 [@expr1073745011 55 ] =@expr1073745012 "template <long a, bool = 0 != a> struct b {};\nb<1> b1;"
3226: ;
3227: const char exp@var400 [@expr1073745013 57 ] =@expr1073745014 "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
3228:
3229: ;
3230: $if $(@expr1073745015 $!@expr1073745016 $assertEquals $(@expr1073745017 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3230 $, exp@var400 $, $tok_ $(@expr1073745018 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3230 $, code@var399 $) $) $) { $return ; }
3231: }
3232: {
3233: const char code@var401 [@expr1073745019 54 ] =@expr1073745020 "template <long a, bool = a < 0> struct b {};\nb<1> b1;"
3234: ;
3235: const char exp@var402 [@expr1073745021 60 ] =@expr1073745022 "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;"
3236:
3237: ;
3238: $if $(@expr1073745023 $!@expr1073745024 $assertEquals $(@expr1073745025 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3238 $, exp@var402 $, $tok_ $(@expr1073745026 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3238 $, code@var401 $) $) $) { $return ; }
3239: }
3240: {
3241: const char code@var403 [@expr1073745027 54 ] =@expr1073745028 "template <long a, bool = 0 < a> struct b {};\nb<1> b1;"
3242: ;
3243: const char exp@var404 [@expr1073745029 57 ] =@expr1073745030 "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
3244:
3245: ;
3246: $if $(@expr1073745031 $!@expr1073745032 $assertEquals $(@expr1073745033 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3246 $, exp@var404 $, $tok_ $(@expr1073745034 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3246 $, code@var403 $) $) $) { $return ; }
3247: }
3248: {
3249: const char code@var405 [@expr1073745035 55 ] =@expr1073745036 "template <long a, bool = 0 <= a> struct b {};\nb<1> b1;"
3250: ;
3251: const char exp@var406 [@expr1073745037 57 ] =@expr1073745038 "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
3252:
3253: ;
3254: $if $(@expr1073745039 $!@expr1073745040 $assertEquals $(@expr1073745041 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3254 $, exp@var406 $, $tok_ $(@expr1073745042 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3254 $, code@var405 $) $) $) { $return ; }
3255: }
3256: {
3257: const char code@var407 [@expr1073745043 55 ] =@expr1073745044 "template <long a, bool = a >= 0> struct b {};\nb<1> b1;"
3258: ;
3259: const char exp@var408 [@expr1073745045 57 ] =@expr1073745046 "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
3260:
3261: ;
3262: $if $(@expr1073745047 $!@expr1073745048 $assertEquals $(@expr1073745049 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3262 $, exp@var408 $, $tok_ $(@expr1073745050 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3262 $, code@var407 $) $) $) { $return ; }
3263: }
3264: }
3265:
3266: void template132 ( ) {
3267: const char code@var409 [@expr1073745051 272 ] =@expr1073745052 "struct TrueFalse {\n  static constexpr bool v() { return true; }\n};\nint global;\ntemplate<typename T> int foo() {\n  __transaction_atomic noexcept(T::v()) { global += 1; }\n  return __transaction_atomic noexcept(T::v()) (global + 2);\n}\nint f1() {\n  return foo<TrueFalse>();\n}"
3268:
|
3276:
3277: ;
3278: const char exp@var410 [@expr1073745053 325 ] =@expr1073745054 "struct TrueFalse { static constexpr bool v ( ) { return true ; } } ; int global ; int foo<TrueFalse> ( ) ; int f1 ( ) { return foo<TrueFalse> ( ) ; } int foo<TrueFalse> ( ) { __transaction_atomic noexcept ( TrueFalse :: v ( ) ) { global += 1 ; } return __transaction_atomic noexcept ( TrueFalse :: v ( ) ) ( global + 2 ) ; }"
3279:
|
3288:
3289: ;
3290: $if $(@expr1073745055 $!@expr1073745056 $assertEquals $(@expr1073745057 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3290 $, exp@var410 $, $tok_ $(@expr1073745058 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3290 $, code@var409 $) $) $) { $return ; }
3291: }
3292:
3293: void template133 ( ) {
3294: const char code@var411 [@expr1073745059 284 ] =@expr1073745060 "template <typename a> struct bar {\n  template <typename b> static bar foo(const bar<b> &c) {\n    return bar();\n  }\n};\nbar<short> bs;\nbar<std::array<int,4>> ba;\nbar<short> b1 = bar<short>::foo<std::array<int,4>>(ba);\nbar<std::array<int,4>> b2 = bar<std::array<int,4>>::foo<short>(bs);"
3295:
|
3301:
3302: ;
3303: const char act@var412 [@expr1073745061 714 ] =@expr1073745062 "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar < short > & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar < short > & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) { return bar<short> ( ) ; }"
3304:
|
3318:
3319: ;
3320: const char exp@var413 [@expr1073745063 688 ] =@expr1073745064 "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar<short> & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar<short> & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) { return bar<short> ( ) ; }"
3321:
|
3335:
3336: ;
3337: $todoAssertEquals $(@expr1073745065 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3337 $, exp@var413 $, act@var412 $, $tok_ $(@expr1073745066 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3337 $, code@var411 $) $) ;
3338: }
3339:
3340: void template134 ( ) {
3341: const char code@var414 [@expr1073745067 100 ] =@expr1073745068 "template <int a> class e { };\ntemplate <int a> class b { e<(c > a ? 1 : 0)> d; };\nb<0> b0;\nb<1> b1;"
3342:
3343:
3344: ;
3345: const char exp@var415 [@expr1073745069 182 ] =@expr1073745070 "class e<(c>0)> ; class e<(c>1)> ; class b<0> ; class b<1> ; b<0> b0 ; b<1> b1 ; class b<0> { e<(c>0)> d ; } ; class b<1> { e<(c>1)> d ; } ; class e<(c>0)> { } ; class e<(c>1)> { } ;"
3346:
|
3349:
3350: ;
3351: $if $(@expr1073745071 $!@expr1073745072 $assertEquals $(@expr1073745073 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3351 $, exp@var415 $, $tok_ $(@expr1073745074 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3351 $, code@var414 $) $) $) { $return ; }
3352: }
3353:
3354: void template135 ( ) {
3355: const char code@var416 [@expr1073745075 68 ] =@expr1073745076 "template <int> struct a { template <int b> void c(a<b>); };\na<2> d;"
3356: ;
3357: const char exp@var417 [@expr1073745077 81 ] =@expr1073745078 "struct a<2> ; a<2> d ; struct a<2> { template < int b > void c ( a < b > ) ; } ;"
3358:
3359: ;
3360: $if $(@expr1073745079 $!@expr1073745080 $assertEquals $(@expr1073745081 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3360 $, exp@var417 $, $tok_ $(@expr1073745082 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3360 $, code@var416 $) $) $) { $return ; }
3361: }
3362:
3363: void template136 ( ) {
3364: const char code@var418 [@expr1073745083 316 ] =@expr1073745084 "namespace a {\ntemplate <typename> struct b;\ntemplate <int> struct c;\ntemplate <typename> struct d;\ntemplate <typename> struct f;\ntemplate <typename> struct g;\ntemplate <typename h>\nstruct i : c<b<f<typename h ::j>>::k && b<g<typename h ::j>>::k> {};\n}\nnamespace hana = a;\nusing e = int;\nvoid l(hana::d<hana::i<e>>);"
3365:
|
3374:
3375: ;
3376: const char exp@var419 [@expr1073745085 316 ] =@expr1073745086 "namespace a { template < typename > struct b ; template < int > struct c ; template < typename > struct d ; template < typename > struct f ; template < typename > struct g ; struct i<int> ; } void l ( a :: d < a :: i<int> > ) ; struct a :: i<int> : c < b < f < int :: j > > :: k && b < g < int :: j > > :: k > { } ;"
3377:
|
3384:
3385: ;
3386: $if $(@expr1073745087 $!@expr1073745088 $assertEquals $(@expr1073745089 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3386 $, exp@var419 $, $tok_ $(@expr1073745090 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3386 $, code@var418 $) $) $) { $return ; }
3387: }
3388:
3389: void template137 ( ) {
3390: const char code@var420 [@expr1073745091 304 ] =@expr1073745092 "template <bool> struct a;\ntemplate <bool b, class> using c = typename a<b>::d;\ntemplate <class, template <class> class, class> struct e;\ntemplate <class f, class g, class... h>\nusing i = typename e<f, g::template fn, h...>::d;\ntemplate <class... j> struct k : c<sizeof...(j), int>::template fn<j...> {};"
3391:
|
3394:
3395: ;
3396: const char exp@var421 [@expr1073745093 339 ] =@expr1073745094 "template < bool > struct a ; template < bool b , class > using c = typename a < b > :: d ; template < class , template < class > class , class > struct e ; template < class f , class g , class ... h > using i = typename e < f , g :: fn , h ... > :: d ; template < class ... j > struct k : c < sizeof... ( j ) , int > :: fn < j ... > { } ;"
3397:
|
3400:
3401: ;
3402: $if $(@expr1073745095 $!@expr1073745096 $assertEquals $(@expr1073745097 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3402 $, exp@var421 $, $tok_ $(@expr1073745098 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3402 $, code@var420 $) $) $) { $return ; }
3403: }
3404:
3405: void template138 ( ) {
3406: {
3407: const char code@var422 [@expr1073745099 167 ] =@expr1073745100 "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}"
3408:
|
3415:
3416: ;
3417: const char exp@var423 [@expr1073745101 145 ] =@expr1073745102 "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }"
3418:
|
3424:
3425: ;
3426: $if $(@expr1073745103 $!@expr1073745104 $assertEquals $(@expr1073745105 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3426 $, exp@var423 $, $tok_ $(@expr1073745106 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3426 $, code@var422 $) $) $) { $return ; }
3427: }
3428: {
3429: const char code@var424 [@expr1073745107 144 ] =@expr1073745108 "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}"
3430:
|
3436:
3437: ;
3438: const char exp@var425 [@expr1073745109 145 ] =@expr1073745110 "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }"
3439:
|
3445:
3446: ;
3447: $if $(@expr1073745111 $!@expr1073745112 $assertEquals $(@expr1073745113 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3447 $, exp@var425 $, $tok_ $(@expr1073745114 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3447 $, code@var424 $) $) $) { $return ; }
3448: }
3449: {
3450: const char code@var426 [@expr1073745115 167 ] =@expr1073745116 "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}"
3451:
|
3458:
3459: ;
3460: const char exp@var427 [@expr1073745117 145 ] =@expr1073745118 "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }"
3461:
|
3467:
3468: ;
3469: $if $(@expr1073745119 $!@expr1073745120 $assertEquals $(@expr1073745121 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3469 $, exp@var427 $, $tok_ $(@expr1073745122 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3469 $, code@var426 $) $) $) { $return ; }
3470: }
3471: {
3472: const char code@var428 [@expr1073745123 144 ] =@expr1073745124 "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}"
3473:
|
3479:
3480: ;
3481: const char exp@var429 [@expr1073745125 145 ] =@expr1073745126 "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }"
3482:
|
3488:
3489: ;
3490: $if $(@expr1073745127 $!@expr1073745128 $assertEquals $(@expr1073745129 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3490 $, exp@var429 $, $tok_ $(@expr1073745130 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3490 $, code@var428 $) $) $) { $return ; }
3491: }
3492: }
3493:
3494: void template139 ( ) {
3495: {
3496: const char code@var430 [@expr1073745131 77 ] =@expr1073745132 "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n};"
3497:
3498:
3499: ;
3500: const char exp@var431 [@expr1073745133 83 ] =@expr1073745134 "template < typename T > struct Foo { template < typename > friend struct Foo ; } ;"
3501:
3502:
3503: ;
3504: $if $(@expr1073745135 $!@expr1073745136 $assertEquals $(@expr1073745137 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3504 $, exp@var431 $, $tok_ $(@expr1073745138 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3504 $, code@var430 $) $) $) { $return ; }
3505: }
3506: {
3507: const char code@var432 [@expr1073745139 92 ] =@expr1073745140 "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n} ;\nFoo<int> foo;"
3508:
3509:
3510:
3511: ;
3512: const char exp@var433 [@expr1073745141 97 ] =@expr1073745142 "struct Foo<int> ; Foo<int> foo ; struct Foo<int> { template < typename > friend struct Foo ; } ;"
3513:
3514:
3515:
3516: ;
3517: $if $(@expr1073745143 $!@expr1073745144 $assertEquals $(@expr1073745145 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3517 $, exp@var433 $, $tok_ $(@expr1073745146 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3517 $, code@var432 $) $) $) { $return ; }
3518: }
3519: }
3520:
3521: void template140 ( ) {
3522: {
3523: const char code@var434 [@expr1073745147 123 ] =@expr1073745148 "template <typename> struct a { };\ntemplate <typename b> struct d {\n    d();\n    d(d<a<b>> e);\n};\nvoid foo() { d<char> c; }"
3524:
|
3527:
3528: ;
3529: const char exp@var435 [@expr1073745149 149 ] =@expr1073745150 "struct a<char> ; struct d<char> ; void foo ( ) { d<char> c ; } struct d<char> { d<char> ( ) ; d<char> ( d < a<char> > e ) ; } ; struct a<char> { } ;"
3530:
|
3535:
3536: ;
3537: $if $(@expr1073745151 $!@expr1073745152 $assertEquals $(@expr1073745153 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3537 $, exp@var435 $, $tok_ $(@expr1073745154 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3537 $, code@var434 $) $) $) { $return ; }
3538: }
3539: {
3540: const char code@var436 [@expr1073745155 198 ] =@expr1073745156 "namespace a {\ntemplate <typename b> using c = typename b ::d;\ntemplate <typename> constexpr bool e() { return false; }\ntemplate <typename b> class f { f(f<c<b>>); };\nstatic_assert(!e<f<char>>());\n}"
3541:
|
3544:
3545: ;
3546: const char exp@var437 [@expr1073745157 212 ] =@expr1073745158 "namespace a { constexpr bool e<f<char>> ( ) ; class f<char> ; static_assert ( ! e<f<char>> ( ) ) ; } class a :: f<char> { f<char> ( a :: f < b :: d > ) ; } ; constexpr bool a :: e<f<char>> ( ) { return false ; }"
3547:
|
3550:
3551: ;
3552: $if $(@expr1073745159 $!@expr1073745160 $assertEquals $(@expr1073745161 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3552 $, exp@var437 $, $tok_ $(@expr1073745162 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3552 $, code@var436 $) $) $) { $return ; }
3553: }
3554: }
3555:
3556: void template141 ( ) {
3557: const char code@var438 [@expr1073745163 77 ] =@expr1073745164 "struct a {\n  int c;\n  template <typename b> void d(b e) const { c < *e; }\n};"
3558:
3559:
3560: ;
3561: const char exp@var439 [@expr1073745165 82 ] =@expr1073745166 "struct a { int c ; template < typename b > void d ( b e ) const { c < * e ; } } ;"
3562:
3563:
3564: ;
3565: $if $(@expr1073745167 $!@expr1073745168 $assertEquals $(@expr1073745169 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3565 $, exp@var439 $, $tok_ $(@expr1073745170 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3565 $, code@var438 $) $) $) { $return ; }
3566: }
3567:
3568: void template142 ( ) {
3569: const char code@var440 [@expr1073745171 191 ] =@expr1073745172 "template <typename...> struct a;\ntemplate <typename b, typename c, typename... d> struct a<b c::*, d...> {\n  using typename b ::e;\n  static_assert(e::f ? sizeof...(d) : sizeof...(d), \"\");\n};"
3570:
3571:
3572:
3573: ;
3574: const char exp@var441 [@expr1073745173 210 ] =@expr1073745174 "template < typename ... > struct a ; template < typename b , typename c , typename ... d > struct a < b c :: * , d ... > { using b :: e ; static_assert ( e :: f ? sizeof... ( d ) : sizeof... ( d ) , \"\" ) ; } ;"
3575:
3576:
3577:
3578: ;
3579: $if $(@expr1073745175 $!@expr1073745176 $assertEquals $(@expr1073745177 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3579 $, exp@var441 $, $tok_ $(@expr1073745178 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3579 $, code@var440 $) $) $) { $return ; }
3580: }
3581:
3582: void template143 ( ) {
3583: const char code@var442 [@expr1073745179 213 ] =@expr1073745180 "template<int N>\nusing A1 = struct B1 { static auto constexpr value = N; };\nA1<0> a1;\ntemplate<class T>\nusing A2 = struct B2 { void f(T){} };\nA2<bool> a2;\ntemplate<class T>\nusing A3 = enum B3 {b = 0;};\nA3<int> a3;"
3584:
|
3590:
3591: ;
3592: const char exp@var443 [@expr1073745181 246 ] =@expr1073745182 "template < int N > using A1 = struct B1 { static auto constexpr value = N ; } ; A1 < 0 > a1 ; template < class T > using A2 = struct B2 { void f ( T ) { } } ; A2 < bool > a2 ; template < class T > using A3 = enum B3 { b = 0 ; } ; A3 < int > a3 ;"
3593:
|
3599:
3600: ;
3601: $if $(@expr1073745183 $!@expr1073745184 $assertEquals $(@expr1073745185 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3601 $, exp@var443 $, $tok_ $(@expr1073745186 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3601 $, code@var442 $) $) $) { $return ; }
3602: }
3603:
3604: void template144 ( ) {
3605: const char code@var444 [@expr1073745187 233 ] =@expr1073745188 "namespace a {\ntemplate <typename T, typename enable = void>\nstruct promote {\n  using type = T;\n};\ntemplate <typename T>\nstruct promote <T, typename std::enable_if< std::is_integral<T>::value && sizeof(T) < sizeof(int) >::type>{\n};\n}"
3606:
|
3612:
3613: ;
3614: const char exp@var445 [@expr1073745189 252 ] =@expr1073745190 "namespace a { template < typename T , typename enable = void > struct promote { using type = T ; } ; template < typename T > struct promote < T , std :: enable_if < std :: is_integral < T > :: value && sizeof ( T ) < sizeof ( int ) > :: type > { } ; }"
3615:
|
3621:
3622: ;
3623: $if $(@expr1073745191 $!@expr1073745192 $assertEquals $(@expr1073745193 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3623 $, exp@var445 $, $tok_ $(@expr1073745194 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3623 $, code@var444 $) $) $) { $return ; }
3624: }
3625:
3626: void template145 ( ) {
3627: const char code@var446 [@expr1073745195 77 ] =@expr1073745196 "template<template<typename, Ts = 0> class ...Cs, Cs<Ts> ...Vs> struct B { };" ;
3628: const char exp@var447 [@expr1073745197 91 ] =@expr1073745198 "template < template < typename , Ts = 0 > class ... Cs , Cs < Ts > ... Vs > struct B { } ;" ;
3629: $if $(@expr1073745199 $!@expr1073745200 $assertEquals $(@expr1073745201 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3629 $, exp@var447 $, $tok_ $(@expr1073745202 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3629 $, code@var446 $) $) $) { $return ; }
3630: }
3631:
3632: void template146 ( ) {
3633: const char code@var448 [@expr1073745203 176 ] =@expr1073745204 "template<class T> struct C { };\ntemplate<class T, template<class TT_T0, template<class TT_T1> class TT_TT> class TT, class U = TT<int, C> >\nstruct S {\n  void foo(TT<T, C>);\n};"
3634:
3635:
3636:
3637: ;
3638: const char exp@var449 [@expr1073745205 202 ] =@expr1073745206 "template < class T > struct C { } ; template < class T , template < class TT_T0 , template < class TT_T1 > class TT_TT > class TT , class U = TT < int , C > > struct S { void foo ( TT < T , C > ) ; } ;"
3639:
3640:
3641:
3642: ;
3643: $if $(@expr1073745207 $!@expr1073745208 $assertEquals $(@expr1073745209 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3643 $, exp@var449 $, $tok_ $(@expr1073745210 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3643 $, code@var448 $) $) $) { $return ; }
3644: }
3645:
3646: void template147 ( ) {
3647: const char code@var450 [@expr1073745211 72 ] =@expr1073745212 "template <template <typename> class C, typename X, C<X>*> struct b { };" ;
3648: const char exp@var451 [@expr1073745213 83 ] =@expr1073745214 "template < template < typename > class C , typename X , C < X > * > struct b { } ;" ;
3649: $if $(@expr1073745215 $!@expr1073745216 $assertEquals $(@expr1073745217 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3649 $, exp@var451 $, $tok_ $(@expr1073745218 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3649 $, code@var450 $) $) $) { $return ; }
3650: }
3651:
3652: void template148 ( ) {
3653: const char code@var452 [@expr1073745219 144 ] =@expr1073745220 "static_assert(var<S1<11, 100>> == var<S1<199, 23>> / 2\n  && var<S1<50, 120>> == var<S1<150, var<S1<10, 10>>>>\n  && var<S1<53, 23>> != 222, \"\");"
3654:
3655: ;
3656: const char exp@var453 [@expr1073745221 187 ] =@expr1073745222 "static_assert ( var < S1 < 11 , 100 > > == var < S1 < 199 , 23 > > / 2 && var < S1 < 50 , 120 > > == var < S1 < 150 , var < S1 < 10 , 10 > > > > && var < S1 < 53 , 23 > > != 222 , \"\" ) ;"
3657:
3658: ;
3659: $if $(@expr1073745223 $!@expr1073745224 $assertEquals $(@expr1073745225 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3659 $, exp@var453 $, $tok_ $(@expr1073745226 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3659 $, code@var452 $) $) $) { $return ; }
3660: }
3661:
3662: void template149 ( ) {
3663: const char code@var454 [@expr1073745227 97 ] =@expr1073745228 "BEGIN_VERSIONED_NAMESPACE_DECL\ntemplate<typename T> class Fred { };\nEND_VERSIONED_NAMESPACE_DECL"
3664:
3665: ;
3666: $do ${ $try ${ $tok_ $(@expr1073745229 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3666 $, code@var454 $) $; $assertThrowFail $(@expr1073745230 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3666 $) $; $} $catch $(@expr1073745231 $const InternalError $& $e@var455 $) ${ $assertEquals $(@expr1073745232 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3666 $, "There is an unknown macro here somewhere. Configuration is required. If BEGIN_VERSIONED_NAMESPACE_DECL is a macro then please configure it." $, $e@var455 $.@expr1073745233 $errorMessage@var456 $) $; $} $catch $(@expr1073745234 $... $) ${ $assertThrowFail $(@expr1073745235 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3666 $) $; $} $} $while $(@expr1073745236 $false $) ;
3667: }
3668:
3669: void template150 ( ) {
3670: const char code@var457 [@expr1073745237 147 ] =@expr1073745238 "struct Test {\n  template <typename T>\n  T &operator[] (T) {}\n};\nvoid foo() {\n  Test test;\n  const string type = test.operator[]<string>(\"type\");\n}"
3671:
|
3676:
3677: ;
3678: const char exp@var458 [@expr1073745239 198 ] =@expr1073745240 "struct Test { string & operator[]<string> ( string ) ; } ; void foo ( ) { Test test ; const string type = test . operator[]<string> ( \"type\" ) ; } string & Test :: operator[]<string> ( string ) { }"
3679:
|
3683:
3684: ;
3685: $if $(@expr1073745241 $!@expr1073745242 $assertEquals $(@expr1073745243 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3685 $, exp@var458 $, $tok_ $(@expr1073745244 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3685 $, code@var457 $) $) $) { $return ; }
3686: }
3687:
3688: void template151 ( ) {
3689: {
3690: const char code@var459 [@expr1073745245 425 ] =@expr1073745246 "class SimulationComponentGroupGenerator {\n  std::list<int, std::allocator<int>> build() const;\n};\ntemplate <\n  class obj_type,\n  template<class> class allocator = std::allocator,\n  template<class, class> class data_container = std::list>\nclass GenericConfigurationHandler {\n  data_container<int, std::allocator<int>> m_target_configurations;\n};\nclass TargetConfigurationHandler : public GenericConfigurationHandler<int> { };"
3691:
|
3699:
3700: ;
3701: const char exp@var460 [@expr1073745247 433 ] =@expr1073745248 "class SimulationComponentGroupGenerator { std :: list < int , std :: allocator < int > > build ( ) const ; } ; class GenericConfigurationHandler<int,std::allocator,std::list> ; class TargetConfigurationHandler : public GenericConfigurationHandler<int,std::allocator,std::list> { } ; class GenericConfigurationHandler<int,std::allocator,std::list> { std :: list < int , std :: std :: allocator < int > > m_target_configurations ; } ;"
3702:
|
3707:
3708: ;
3709: $if $(@expr1073745249 $!@expr1073745250 $assertEquals $(@expr1073745251 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3709 $, exp@var460 $, $tok_ $(@expr1073745252 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3709 $, code@var459 $) $) $) { $return ; }
3710: }
3711: {
3712: const char code@var461 [@expr1073745253 135 ] =@expr1073745254 "std::list<std::allocator<int>> a;\ntemplate <class, template <class> class allocator = std::allocator> class b {};\nclass c : b<int> {};"
3713:
3714: ;
3715: const char exp@var462 [@expr1073745255 147 ] =@expr1073745256 "std :: list < std :: allocator < int > > a ; class b<int,std::allocator> ; class c : b<int,std::allocator> { } ; class b<int,std::allocator> { } ;"
3716:
3717:
3718: ;
3719: $if $(@expr1073745257 $!@expr1073745258 $assertEquals $(@expr1073745259 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3719 $, exp@var462 $, $tok_ $(@expr1073745260 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3719 $, code@var461 $) $) $) { $return ; }
3720: }
3721: {
3722: const char code@var463 [@expr1073745261 136 ] =@expr1073745262 "template <typename> class a {};\ntemplate class a<char>;\ntemplate <class, template <class> class a = a> class b {};\nclass c : b<int> {};"
3723:
3724:
3725: ;
3726: const char exp@var464 [@expr1073745263 99 ] =@expr1073745264 "class a<char> ; class b<int,a> ; class c : b<int,a> { } ; class b<int,a> { } ; class a<char> { } ;"
3727:
3728:
3729:
3730: ;
3731: $if $(@expr1073745265 $!@expr1073745266 $assertEquals $(@expr1073745267 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3731 $, exp@var464 $, $tok_ $(@expr1073745268 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3731 $, code@var463 $) $) $) { $return ; }
3732: }
3733: }
3734:
3735: void template152 ( ) {
3736: const char code@var465 [@expr1073745269 175 ] =@expr1073745270 "class Foo {\n  template <unsigned int i>\n  bool bar() {\n    return true;\n  }\n};\ntemplate <>\nbool Foo::bar<9>() {\n  return true;\n}\nint global() {\n  int bar = 1;\n  return bar;\n}"
3737:
|
3748:
3749: ;
3750: const char exp@var466 [@expr1073745271 186 ] =@expr1073745272 "class Foo { bool bar<9> ( ) ; template < unsigned int i > bool bar ( ) { return true ; } } ; bool Foo :: bar<9> ( ) { return true ; } int global ( ) { int bar ; bar = 1 ; return bar ; }"
3751:
|
3762:
3763: ;
3764: $if $(@expr1073745273 $!@expr1073745274 $assertEquals $(@expr1073745275 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3764 $, exp@var466 $, $tok_ $(@expr1073745276 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3764 $, code@var465 $) $) $) { $return ; }
3765: }
3766:
3767: void template153 ( ) {
3768: const char code@var467 [@expr1073745277 52 ] =@expr1073745278 "template <class = b<decltype(a<h>())...>> void i();" ;
3769: const char exp@var468 [@expr1073745279 69 ] =@expr1073745280 "template < class = b < decltype ( a < h > ( ) ) ... > > void i ( ) ;" ;
3770: $if $(@expr1073745281 $!@expr1073745282 $assertEquals $(@expr1073745283 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3770 $, exp@var468 $, $tok_ $(@expr1073745284 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3770 $, code@var467 $) $) $) { $return ; }
3771: }
3772:
3773: void template154 ( ) {
3774: const char code@var469 [@expr1073745285 84 ] =@expr1073745286 "template <typename S, enable_if_t<(is_compile_string<S>::value), int>> void i(S s);" ;
3775: const char exp@var470 [@expr1073745287 102 ] =@expr1073745288 "template < typename S , enable_if_t < ( is_compile_string < S > :: value ) , int > > void i ( S s ) ;" ;
3776: $if $(@expr1073745289 $!@expr1073745290 $assertEquals $(@expr1073745291 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3776 $, exp@var470 $, $tok_ $(@expr1073745292 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3776 $, code@var469 $) $) $) { $return ; }
3777: }
3778:
3779: void template155 ( ) {
3780: const char code@var471 [@expr1073745293 95 ] =@expr1073745294 "template <int> int a = 0;\nstruct b {\n  void operator[](int);\n};\nvoid c() {\n  b d;\n  d[a<0>];\n}"
3781:
|
3786:
3787: ;
3788: const char exp@var472 [@expr1073745295 97 ] =@expr1073745296 "int a<0> ; a<0> = 0 ; struct b { void operator[] ( int ) ; } ; void c ( ) { b d ; d [ a<0> ] ; }"
3789:
|
3795:
3796: ;
3797: $if $(@expr1073745297 $!@expr1073745298 $assertEquals $(@expr1073745299 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3797 $, exp@var472 $, $tok_ $(@expr1073745300 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3797 $, code@var471 $) $) $) { $return ; }
3798: }
3799:
3800: void template156 ( ) {
3801: const char code@var473 [@expr1073745301 442 ] =@expr1073745302 "template <int a> struct c { static constexpr int d = a; };\ntemplate <bool b> using e = c<b>;\nusing f = e<false>;\ntemplate <typename> struct g : f {};\ntemplate <bool, class, class> using h = e<g<long>::d>;\ntemplate <typename> using i = e<g<double>::d>;\ntemplate <typename j> using k = e<i<j>::d>;\ntemplate <typename j> using l = h<k<j>::d, e<1 < (j)0>, f>;\ntemplate <typename> void m(int, int, int) { l<int> d; }\nvoid n() { m<int>(0, 4, 5); }"
3802:
|
3809:
3810: ;
3811: $tok_ $(@expr1073745303 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3811 $, code@var473 $) ;
3812: }
3813:
3814: void template157 ( ) {
3815: const char code@var474 [@expr1073745304 462 ] =@expr1073745305 "template <int a, bool c = a == int()> struct b1 { bool d = c; };\ntemplate <int a, bool c = a != int()> struct b2 { bool d = c; };\ntemplate <int a, bool c = a < int()> struct b3 { bool d = c; };\ntemplate <int a, bool c = a <= int()> struct b4 { bool d = c; };\ntemplate <int a, bool c = (a > int())> struct b5 { bool d = c; };\ntemplate <int a, bool c = a >= int()> struct b6 { bool d = c; };\nb1<0> var1;\nb2<0> var2;\nb3<0> var3;\nb4<0> var4;\nb5<0> var5;\nb6<0> var6;"
3816:
|
3825:
3826: ;
3827: const char exp@var475 [@expr1073745306 504 ] =@expr1073745307 "struct b1<0,true> ; struct b2<0,false> ; struct b3<0,false> ; struct b4<0,true> ; struct b5<0,false> ; struct b6<0,true> ; b1<0,true> var1 ; b2<0,false> var2 ; b3<0,false> var3 ; b4<0,true> var4 ; b5<0,false> var5 ; b6<0,true> var6 ; struct b6<0,true> { bool d ; d = true ; } ; struct b5<0,false> { bool d ; d = false ; } ; struct b4<0,true> { bool d ; d = true ; } ; struct b3<0,false> { bool d ; d = false ; } ; struct b2<0,false> { bool d ; d = false ; } ; struct b1<0,true> { bool d ; d = true ; } ;"
3828:
|
3843:
3844: ;
3845: $if $(@expr1073745308 $!@expr1073745309 $assertEquals $(@expr1073745310 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3845 $, exp@var475 $, $tok_ $(@expr1073745311 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 3845 $, code@var474 $) $) $) { $return ; }
3846: }
3847:
3848: void template158 ( ) {
3849: const char code@var476 [@expr1073745312 5055 ] =@expr1073745313 "template <typename> class a0{};\ntemplate <typename> class a1{};\ntemplate <typename> class a2{};\ntemplate <typename> class a3{};\ntemplate <typename> class a4{};\ntemplate <typename> class a5{};\ntemplate <typename> class a6{};\ntemplate <typename> class a7{};\ntemplate <typename> class a8{};\ntemplate <typename> class a9{};\ntemplate <typename> class a10{};\ntemplate <typename> class a11{};\ntemplate <typename> class a12{};\ntemplate <typename> class a13{};\ntemplate <typename> class a14{};\ntemplate <typename> class a15{};\ntemplate <typename> class a16{};\ntemplate <typename> class a17{};\ntemplate <typename> class a18{};\ntemplate <typename> class a19{};\ntemplate <typename> class a20{};\ntemplate <typename> class a21{};\ntemplate <typename> class a22{};\ntemplate <typename> class a23{};\ntemplate <typename> class a24{};\ntemplate <typename> class a25{};\ntemplate <typename> class a26{};\ntemplate <typename> class a27{};\ntemplate <typename> class a28{};\ntemplate <typename> class a29{};\ntemplate <typename> class a30{};\ntemplate <typename> class a31{};\ntemplate <typename> class a32{};\ntemplate <typename> class a33{};\ntemplate <typename> class a34{};\ntemplate <typename> class a35{};\ntemplate <typename> class a36{};\ntemplate <typename> class a37{};\ntemplate <typename> class a38{};\ntemplate <typename> class a39{};\ntemplate <typename> class a40{};\ntemplate <typename> class a41{};\ntemplate <typename> class a42{};\ntemplate <typename> class a43{};\ntemplate <typename> class a44{};\ntemplate <typename> class a45{};\ntemplate <typename> class a46{};\ntemplate <typename> class a47{};\ntemplate <typename> class a48{};\ntemplate <typename> class a49{};\ntemplate <typename> class a50{};\ntemplate <typename> class a51{};\ntemplate <typename> class a52{};\ntemplate <typename> class a53{};\ntemplate <typename> class a54{};\ntemplate <typename> class a55{};\ntemplate <typename> class a56{};\ntemplate <typename> class a57{};\ntemplate <typename> class a58{};\ntemplate <typename> class a59{};\ntemplate <typename> class a60{};\ntemplate <typename> class a61{};\ntemplate <typename> class a62{};\ntemplate <typename> class a63{};\ntemplate <typename> class a64{};\ntemplate <typename> class a65{};\ntemplate <typename> class a66{};\ntemplate <typename> class a67{};\ntemplate <typename> class a68{};\ntemplate <typename> class a69{};\ntemplate <typename> class a70{};\ntemplate <typename> class a71{};\ntemplate <typename> class a72{};\ntemplate <typename> class a73{};\ntemplate <typename> class a74{};\ntemplate <typename> class a75{};\ntemplate <typename> class a76{};\ntemplate <typename> class a77{};\ntemplate <typename> class a78{};\ntemplate <typename> class a79{};\ntemplate <typename> class a80{};\ntemplate <typename> class a81{};\ntemplate <typename> class a82{};\ntemplate <typename> class a83{};\ntemplate <typename> class a84{};\ntemplate <typename> class a85{};\ntemplate <typename> class a86{};\ntemplate <typename> class a87{};\ntemplate <typename> class a88{};\ntemplate <typename> class a89{};\ntemplate <typename> class a90{};\ntemplate <typename> class a91{};\ntemplate <typename> class a92{};\ntemplate <typename> class a93{};\ntemplate <typename> class a94{};\ntemplate <typename> class a95{};\ntemplate <typename> class a96{};\ntemplate <typename> class a97{};\ntemplate <typename> class a98{};\ntemplate <typename> class a99{};\ntemplate <typename> class a100{};\ntemplate <typename> class b {};\nb<a0<int>> d0;\nb<a1<int>> d1;\nb<a2<int>> d2;\nb<a3<int>> d3;\nb<a4<int>> d4;\nb<a5<int>> d5;\nb<a6<int>> d6;\nb<a7<int>> d7;\nb<a8<int>> d8;\nb<a9<int>> d9;\nb<a10<int>> d10;\nb<a11<int>> d11;\nb<a12<int>> d12;\nb<a13<int>> d13;\nb<a14<int>> d14;\nb<a15<int>> d15;\nb<a16<int>> d16;\nb<a17<int>> d17;\nb<a18<int>> d18;\nb<a19<int>> d19;\nb<a20<int>> d20;\nb<a21<int>> d21;\nb<a22<int>> d22;\nb<a23<int>> d23;\nb<a24<int>> d24;\nb<a25<int>> d25;\nb<a26<int>> d26;\nb<a27<int>> d27;\nb<a28<int>> d28;\nb<a29<int>> d29;\nb<a30<int>> d30;\nb<a31<int>> d31;\nb<a32<int>> d32;\nb<a33<int>> d33;\nb<a34<int>> d34;\nb<a35<int>> d35;\nb<a36<int>> d36;\nb<a37<int>> d37;\nb<a38<int>> d38;\nb<a39<int>> d39;\nb<a40<int>> d40;\nb<a41<int>> d41;\nb<a42<int>> d42;\nb<a43<int>> d43;\nb<a44<int>> d44;\nb<a45<int>> d45;\nb<a46<int>> d46;\nb<a47<int>> d47;\nb<a48<int>> d48;\nb<a49<int>> d49;\nb<a50<int>> d50;\nb<a51<int>> d51;\nb<a52<int>> d52;\nb<a53<int>> d53;\nb<a54<int>> d54;\nb<a55<int>> d55;\nb<a56<int>> d56;\nb<a57<int>> d57;\nb<a58<int>> d58;\nb<a59<int>> d59;\nb<a60<int>> d60;\nb<a61<int>> d61;\nb<a62<int>> d62;\nb<a63<int>> d63;\nb<a64<int>> d64;\nb<a65<int>> d65;\nb<a66<int>> d66;\nb<a67<int>> d67;\nb<a68<int>> d68;\nb<a69<int>> d69;\nb<a70<int>> d70;\nb<a71<int>> d71;\nb<a72<int>> d72;\nb<a73<int>> d73;\nb<a74<int>> d74;\nb<a75<int>> d75;\nb<a76<int>> d76;\nb<a77<int>> d77;\nb<a78<int>> d78;\nb<a79<int>> d79;\nb<a80<int>> d80;\nb<a81<int>> d81;\nb<a82<int>> d82;\nb<a83<int>> d83;\nb<a84<int>> d84;\nb<a85<int>> d85;\nb<a86<int>> d86;\nb<a87<int>> d87;\nb<a88<int>> d88;\nb<a89<int>> d89;\nb<a90<int>> d90;\nb<a91<int>> d91;\nb<a92<int>> d92;\nb<a93<int>> d93;\nb<a94<int>> d94;\nb<a95<int>> d95;\nb<a96<int>> d96;\nb<a97<int>> d97;\nb<a98<int>> d98;\nb<a99<int>> d99;\nb<a100<int>> d100;"
3850:
|
4050:
4051: ;
4052:
4053: $tok_ $(@expr1073745314 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4053 $, code@var476 $) ;
4054: }
4055:
4056: void template159 ( ) {
4057: const char code@var477 [@expr1073745315 314 ] =@expr1073745316 "struct impl { template <class T> static T create(); };\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nstruct tester{};\ntester<impl*, int> ti;\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nint test() { return 0; }\nint i = test<impl*, int>();"
4058:
|
4062:
4063: ;
4064: const char exp@var478 [@expr1073745317 553 ] =@expr1073745318 "struct impl { template < class T > static T create ( ) ; } ; struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ; tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ti ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int i ; i = test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) { return 0 ; } struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> { } ;"
4065:
|
4069:
4070: ;
4071: $if $(@expr1073745319 $!@expr1073745320 $assertEquals $(@expr1073745321 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4071 $, exp@var478 $, $tok_ $(@expr1073745322 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4071 $, code@var477 $) $) $) { $return ; }
4072: }
4073:
4074: void template160 ( ) {
4075: const char code@var479 [@expr1073745323 266 ] =@expr1073745324 "struct Fred {\n    template <typename T> static void foo() { }\n    template <typename T> static void foo(T) { }\n};\ntemplate void Fred::foo<char>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate void Fred::foo<float>(float);\ntemplate <> void Fred::foo<int>(int) { }"
4076:
|
4081:
4082: ;
4083: const char exp@var480 [@expr1073745325 274 ] =@expr1073745326 "struct Fred { static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<int> ( int ) ; static void foo<float> ( float ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( int ) { } void Fred :: foo<float> ( float ) { } void Fred :: foo<char> ( ) { }"
4084:
|
4091:
4092: ;
4093: $if $(@expr1073745327 $!@expr1073745328 $assertEquals $(@expr1073745329 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4093 $, exp@var480 $, $tok_ $(@expr1073745330 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4093 $, code@var479 $) $) $) { $return ; }
4094: }
4095:
4096: void template161 ( ) {
4097: const char code@var481 [@expr1073745331 239 ] =@expr1073745332 "struct JobEntry { };\ntemplate<class T>\nstruct adapter : public T {\n    template<class... Args>\n    adapter(Args&&... args) : T{ std::forward<Args>(args)... } {}\n};\nvoid foo() {\n   auto notifyJob = std::make_shared<adapter<JobEntry>> ();\n}"
4098:
|
4104:
4105: ;
4106: const char exp@var482 [@expr1073745333 4 ] =@expr1073745334 "???" ;
4107: const char act@var483 [@expr1073745335 314 ] =@expr1073745336 "struct JobEntry { } ; struct adapter<JobEntry> ; void foo ( ) { auto notifyJob ; notifyJob = std :: make_shared < adapter<JobEntry> > ( ) ; } struct adapter<JobEntry> : public JobEntry { template < class ... Args > adapter<JobEntry> ( Args && ... args ) : JobEntry { std :: forward < Args > ( args ) ... } { } } ;"
4108:
|
4114:
4115: ;
4116: $todoAssertEquals $(@expr1073745337 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4116 $, exp@var482 $, act@var483 $, $tok_ $(@expr1073745338 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4116 $, code@var481 $) $) ;
4117: }
4118:
4119: void template162 ( ) {
4120: const char code@var484 [@expr1073745339 242 ] =@expr1073745340 "template <std::size_t N>\nstruct CountryCode {\n    CountryCode(std::string cc);\n};template <std::size_t N>\nCountryCode<N>::CountryCode(std::string cc) : m_String{std::move(cc)} {\n}\ntemplate class CountryCode<2>;\ntemplate class CountryCode<3>;"
4121:
|
4127:
4128: ;
4129: const char exp@var485 [@expr1073745341 364 ] =@expr1073745342 "struct CountryCode<2> ; struct CountryCode<3> ; struct CountryCode<2> { CountryCode<2> ( std :: string cc ) ; } ; CountryCode<2> :: CountryCode<2> ( std :: string cc ) : m_String { std :: move ( cc ) } { } struct CountryCode<3> { CountryCode<3> ( std :: string cc ) ; } ; CountryCode<3> :: CountryCode<3> ( std :: string cc ) : m_String { std :: move ( cc ) } { }"
4130:
|
4139:
4140: ;
4141: $if $(@expr1073745343 $!@expr1073745344 $assertEquals $(@expr1073745345 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4141 $, exp@var485 $, $tok_ $(@expr1073745346 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4141 $, code@var484 $) $) $) { $return ; }
4142: }
4143:
4144: void template163 ( ) {
4145: const char code@var486 [@expr1073745347 71 ] =@expr1073745348 "extern \"C++\" template < typename T > T * test ( ) { return nullptr ; }" ;
4146: $if $(@expr1073745349 $!@expr1073745350 $assertEquals $(@expr1073745351 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4146 $, code@var486 $, $tok_ $(@expr1073745352 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4146 $, code@var486 $) $) $) { $return ; }
4147: }
4148:
4149: void template164 ( ) {
4150: const char code@var487 [@expr1073745353 247 ] =@expr1073745354 "template <class TYPE>\nstruct A {\n    A();\n    ~A();\n    static void f();\n};\ntemplate <class TYPE>\nA<TYPE>::A() { }\ntemplate <class TYPE>\nA<TYPE>::~A() { }\ntemplate <class TYPE>\nvoid A<TYPE>::f() { }\ntemplate class A<int>;\ntemplate class A<float>;"
4151:
|
4162:
4163: ;
4164: const char exp@var488 [@expr1073745355 340 ] =@expr1073745356 "struct A<int> ; struct A<float> ; struct A<int> { A<int> ( ) ; ~ A<int> ( ) ; static void f ( ) ; } ; A<int> :: A<int> ( ) { } A<int> :: ~ A<int> ( ) { } void A<int> :: f ( ) { } struct A<float> { A<float> ( ) ; ~ A<float> ( ) ; static void f ( ) ; } ; A<float> :: A<float> ( ) { } A<float> :: ~ A<float> ( ) { } void A<float> :: f ( ) { }"
4165:
|
4180:
4181: ;
4182: $if $(@expr1073745357 $!@expr1073745358 $assertEquals $(@expr1073745359 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4182 $, exp@var488 $, $tok_ $(@expr1073745360 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4182 $, code@var487 $) $) $) { $return ; }
4183: }
4184:
4185: void template165 ( ) {
4186: const char code@var489 [@expr1073745361 135 ] =@expr1073745362 "struct MyStruct {\n    template<class T>\n    bool operator()(const T& l, const T& r) const {\n        return l.first < r.first;\n    }\n};"
4187:
|
4190:
4191: ;
4192: const char exp@var490 [@expr1073745363 130 ] =@expr1073745364 "struct MyStruct { template < class T > bool operator() ( const T & l , const T & r ) const { return l . first < r . first ; } } ;"
4193:
|
4196:
4197: ;
4198: $if $(@expr1073745365 $!@expr1073745366 $assertEquals $(@expr1073745367 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4198 $, exp@var490 $, $tok_ $(@expr1073745368 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4198 $, code@var489 $) $) $) { $return ; }
4199: }
4200:
4201: void template166 ( ) {
4202: const char code@var491 [@expr1073745369 77 ] =@expr1073745370 "template <typename T, size_t k = (T::s < 3) ? 0 : 3>\nvoid foo() {}\nfoo<T>();"
4203:
4204: ;
4205: const char exp@var492 [@expr1073745371 90 ] =@expr1073745372 "void foo<T,(T::s<3)?0:3> ( ) ; foo<T,(T::s<3)?0:3> ( ) ; void foo<T,(T::s<3)?0:3> ( ) { }"
4206:
4207: ;
4208: $if $(@expr1073745373 $!@expr1073745374 $assertEquals $(@expr1073745375 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4208 $, exp@var492 $, $tok_ $(@expr1073745376 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4208 $, code@var491 $) $) $) { $return ; }
4209: }
4210:
4211: void template167 ( ) {
4212: const char code@var493 [@expr1073745377 340 ] =@expr1073745378 "struct MathLib {\n    template<class T> static std::string toString(T value) {\n        return std::string{};\n    }\n};\ntemplate<> std::string MathLib::toString(double value);\ntemplate<> std::string MathLib::toString(double value) {\n    return std::string{std::to_string(value)};\n}\nvoid foo() {\n    std::string str = MathLib::toString(1.0);\n}"
4213:
|
4222:
4223: ;
4224: const char exp@var494 [@expr1073745379 370 ] =@expr1073745380 "struct MathLib { static std :: string toString<double> ( double value ) ; template < class T > static std :: string toString ( T value ) { return std :: string { } ; } } ; std :: string MathLib :: toString<double> ( double value ) { return std :: string { std :: to_string ( value ) } ; } void foo ( ) { std :: string str ; str = MathLib :: toString<double> ( 1.0 ) ; }"
4225:
|
4234:
4235: ;
4236: $if $(@expr1073745381 $!@expr1073745382 $assertEquals $(@expr1073745383 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4236 $, exp@var494 $, $tok_ $(@expr1073745384 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4236 $, code@var493 $) $) $) { $return ; }
4237: }
4238:
4239: void template168 ( ) {
4240: const char code@var495 [@expr1073745385 751 ] =@expr1073745386 "template < typename T, typename U > struct type { };\ntemplate < > struct type < bool, bool > {};\ntemplate < > struct type < unsigned char, unsigned char > {};\ntemplate < > struct type < char, char > {};\ntemplate < > struct type < signed char, signed char > {};\ntemplate < > struct type < unsigned short, unsigned short > {};\ntemplate < > struct type < short, short > {};\ntemplate < > struct type < unsigned int, unsigned int > {};\ntemplate < > struct type < int, int > {};\ntemplate < > struct type < unsigned long long, unsigned long long > {};\ntemplate < > struct type < long long, long long > {};\ntemplate < > struct type < double, double > {};\ntemplate < > struct type < float, float > {};\ntemplate < > struct type < long double, long double > {};"
4241:
|
4252:
4253: ;
4254: const char exp@var496 [@expr1073745387 977 ] =@expr1073745388 "struct type<longdouble,longdouble> ; struct type<float,float> ; struct type<double,double> ; struct type<longlong,longlong> ; struct type<unsignedlonglong,unsignedlonglong> ; struct type<int,int> ; struct type<unsignedint,unsignedint> ; struct type<short,short> ; struct type<unsignedshort,unsignedshort> ; struct type<signedchar,signedchar> ; struct type<char,char> ; struct type<unsignedchar,unsignedchar> ; struct type<bool,bool> ; template < typename T , typename U > struct type { } ; struct type<bool,bool> { } ; struct type<unsignedchar,unsignedchar> { } ; struct type<char,char> { } ; struct type<signedchar,signedchar> { } ; struct type<unsignedshort,unsignedshort> { } ; struct type<short,short> { } ; struct type<unsignedint,unsignedint> { } ; struct type<int,int> { } ; struct type<unsignedlonglong,unsignedlonglong> { } ; struct type<longlong,longlong> { } ; struct type<double,double> { } ; struct type<float,float> { } ; struct type<longdouble,longdouble> { } ;"
4255:
|
4279:
4280: ;
4281: $if $(@expr1073745389 $!@expr1073745390 $assertEquals $(@expr1073745391 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4281 $, exp@var496 $, $tok_ $(@expr1073745392 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4281 $, code@var495 $) $) $) { $return ; }
4282: }
4283:
4284: void template169 ( ) {
4285: const char code@var497 [@expr1073745393 638 ] =@expr1073745394 "template < typename T> struct last { T t; };\ntemplate < typename T > struct CImgList { T t; };\nCImgList < last < bool > > c1;\nCImgList < last < signed char > > c2;\nCImgList < last < unsigned char > > c3;\nCImgList < last < char > > c4;\nCImgList < last < unsigned short > > c5;\nCImgList < last < short > > c6;\nCImgList < last < unsigned int > > c7;\nCImgList < last < int > > c8;\nCImgList < last < unsigned long > > c9;\nCImgList < last < long > > c10;\nCImgList < last < unsigned long long > > c11;\nCImgList < last < long long > > c12;\nCImgList < last < float > > c13;\nCImgList < last < double > > c14;\nCImgList < last < long double > > c15;"
4286:
|
4300:
4301: ;
4302: const char exp@var498 [@expr1073745395 2826 ] =@expr1073745396 "struct last<bool> ; struct last<signedchar> ; struct last<unsignedchar> ; struct last<char> ; struct last<unsignedshort> ; struct last<short> ; struct last<unsignedint> ; struct last<int> ; struct last<unsignedlong> ; struct last<long> ; struct last<unsignedlonglong> ; struct last<longlong> ; struct last<float> ; struct last<double> ; struct last<longdouble> ; struct CImgList<last<bool>> ; struct CImgList<last<signedchar>> ; struct CImgList<last<unsignedchar>> ; struct CImgList<last<char>> ; struct CImgList<last<unsignedshort>> ; struct CImgList<last<short>> ; struct CImgList<last<unsignedint>> ; struct CImgList<last<int>> ; struct CImgList<last<unsignedlong>> ; struct CImgList<last<long>> ; struct CImgList<last<unsignedlonglong>> ; struct CImgList<last<longlong>> ; struct CImgList<last<float>> ; struct CImgList<last<double>> ; struct CImgList<last<longdouble>> ; CImgList<last<bool>> c1 ; CImgList<last<signedchar>> c2 ; CImgList<last<unsignedchar>> c3 ; CImgList<last<char>> c4 ; CImgList<last<unsignedshort>> c5 ; CImgList<last<short>> c6 ; CImgList<last<unsignedint>> c7 ; CImgList<last<int>> c8 ; CImgList<last<unsignedlong>> c9 ; CImgList<last<long>> c10 ; CImgList<last<unsignedlonglong>> c11 ; CImgList<last<longlong>> c12 ; CImgList<last<float>> c13 ; CImgList<last<double>> c14 ; CImgList<last<longdouble>> c15 ; struct CImgList<last<bool>> { last<bool> t ; } ; struct CImgList<last<signedchar>> { last<signedchar> t ; } ; struct CImgList<last<unsignedchar>> { last<unsignedchar> t ; } ; struct CImgList<last<char>> { last<char> t ; } ; struct CImgList<last<unsignedshort>> { last<unsignedshort> t ; } ; struct CImgList<last<short>> { last<short> t ; } ; struct CImgList<last<unsignedint>> { last<unsignedint> t ; } ; struct CImgList<last<int>> { last<int> t ; } ; struct CImgList<last<unsignedlong>> { last<unsignedlong> t ; } ; struct CImgList<last<long>> { last<long> t ; } ; struct CImgList<last<unsignedlonglong>> { last<unsignedlonglong> t ; } ; struct CImgList<last<longlong>> { last<longlong> t ; } ; struct CImgList<last<float>> { last<float> t ; } ; struct CImgList<last<double>> { last<double> t ; } ; struct CImgList<last<longdouble>> { last<longdouble> t ; } ; struct last<bool> { bool t ; } ; struct last<signedchar> { signed char t ; } ; struct last<unsignedchar> { unsigned char t ; } ; struct last<char> { char t ; } ; struct last<unsignedshort> { unsigned short t ; } ; struct last<short> { short t ; } ; struct last<unsignedint> { unsigned int t ; } ; struct last<int> { int t ; } ; struct last<unsignedlong> { unsigned long t ; } ; struct last<long> { long t ; } ; struct last<unsignedlonglong> { unsigned long long t ; } ; struct last<longlong> { long long t ; } ; struct last<float> { float t ; } ; struct last<double> { double t ; } ; struct last<longdouble> { long double t ; } ;"
4303:
|
4375:
4376: ;
4377: $if $(@expr1073745397 $!@expr1073745398 $assertEquals $(@expr1073745399 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4377 $, exp@var498 $, $tok_ $(@expr1073745400 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4377 $, code@var497 $) $) $) { $return ; }
4378: }
4379:
4380: void template170 ( ) {
4381: const char code@var499 [@expr1073745401 66 ] =@expr1073745402 "template <int b> int a = 0;\nvoid c() {\n  a<1>;\n  [](auto b) {};\n}"
4382:
4383:
4384:
4385: ;
4386: const char exp@var500 [@expr1073745403 65 ] =@expr1073745404 "int a<1> ; a<1> = 0 ; void c ( ) { a<1> ; [ ] ( auto b ) { } ; }"
4387:
4388:
4389:
4390: ;
4391: $if $(@expr1073745405 $!@expr1073745406 $assertEquals $(@expr1073745407 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4391 $, exp@var500 $, $tok_ $(@expr1073745408 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4391 $, code@var499 $) $) $) { $return ; }
4392: }
4393:
4394: void template171 ( ) {
4395: const char code@var501 [@expr1073745409 200 ] =@expr1073745410 "template <int> struct c { enum { b }; };\ntemplate <int> struct h { enum { d }; enum { e }; };\ntemplate <int f, long = h<f>::d, int g = h<f>::e> class i { enum { e = c<g>::b }; };\nvoid j() { i<2> a; }"
4396:
4397:
4398: ;
4399: const char exp@var502 [@expr1073745411 292 ] =@expr1073745412 "struct c<h<2>::e> ; struct h<2> ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct h<2> { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;"
4400:
|
4404:
4405: ;
4406: const char act@var503 [@expr1073745413 292 ] =@expr1073745414 "struct c<h<2>::e> ; template < int > struct h { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;"
4407:
|
4410:
4411: ;
4412: $todoAssertEquals $(@expr1073745415 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4412 $, exp@var502 $, act@var503 $, $tok_ $(@expr1073745416 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4412 $, code@var501 $) $) ;
4413: }
4414:
4415: void template172 ( ) {
4416: const char code@var504 [@expr1073745417 104 ] =@expr1073745418 "template<typename T, typename... Args>\nvoid bar(T t, Args&&... args) { }\nvoid foo() { bar<int>(0, 1); }"
4417:
4418: ;
4419: const char exp@var505 [@expr1073745419 130 ] =@expr1073745420 "void bar<int> ( int t , Args && ... args ) ; void foo ( ) { bar<int> ( 0 , 1 ) ; } void bar<int> ( int t , Args && ... args ) { }"
4420:
4421: ;
4422: $if $(@expr1073745421 $!@expr1073745422 $assertEquals $(@expr1073745423 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4422 $, exp@var505 $, $tok_ $(@expr1073745424 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4422 $, code@var504 $) $) $) { $return ; }
4423: }
4424:
4425: void template173 ( ) {
4426: const char code@var506 [@expr1073745425 262 ] =@expr1073745426 "namespace a {\ntemplate <typename, typename> struct b;\ntemplate <template <typename, typename> class = b> class c;\nusing d = c<>;\ntemplate <template <typename, typename = void> class> class c {};\n}\nnamespace std {\ntemplate <> void swap<a::d>(a::d &, a::d &) {}\n}"
4427:
|
4433:
4434: ;
4435: const char exp@var507 [@expr1073745427 279 ] =@expr1073745428 "namespace a { template < typename , typename > struct b ; template < template < typename , typename > class > class c ; class c<b> ; } namespace std { void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) ; void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) { } } class a :: c<b> { } ;"
4436:
|
4443:
4444: ;
4445: $if $(@expr1073745429 $!@expr1073745430 $assertEquals $(@expr1073745431 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4445 $, exp@var507 $, $tok_ $(@expr1073745432 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4445 $, code@var506 $) $) $) { $return ; }
4446: }
4447:
4448: void template174 ( )
4449: {
4450: const char code@var508 [@expr1073745433 128 ] =@expr1073745434 "namespace a {\ntemplate <typename> using b = int;\ntemplate <typename c> c d() { return d<b<c>>(); }\n}\nvoid e() { a::d<int>(); }\n"
4451:
4452:
4453:
4454: ;
4455: const char exp@var509 [@expr1073745435 113 ] =@expr1073745436 "namespace a { int d<int> ( ) ; } void e ( ) { a :: d<int> ( ) ; } int a :: d<int> ( ) { return d < int > ( ) ; }"
4456:
4457: ;
4458: $if $(@expr1073745437 $!@expr1073745438 $assertEquals $(@expr1073745439 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4458 $, exp@var509 $, $tok_ $(@expr1073745440 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4458 $, code@var508 $) $) $) { $return ; }
4459: }
4460:
4461: void template175 ( )
4462: {
4463: const char code@var510 [@expr1073745441 86 ] =@expr1073745442 "template <typename T, int value> T Get() {return value;}\nchar f() { Get<int,10>(); }\n"
4464: ;
4465: const char exp@var511 [@expr1073745443 91 ] =@expr1073745444 "int Get<int,10> ( ) ; char f ( ) { Get<int,10> ( ) ; } int Get<int,10> ( ) { return 10 ; }"
4466:
4467: ;
4468: $if $(@expr1073745445 $!@expr1073745446 $assertEquals $(@expr1073745447 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4468 $, exp@var511 $, $tok_ $(@expr1073745448 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4468 $, code@var510 $) $) $) { $return ; }
4469: }
4470:
4471: void template_specialization_1 ( ) {
4472: const char code@var512 [@expr1073745449 123 ] =@expr1073745450 "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<int> s;"
4473:
4474:
4475: ;
4476: const char exp@var513 [@expr1073745451 141 ] =@expr1073745452 "template < typename T > struct C { } ; struct S<int> ; template < typename T > struct S < C < T > > { b } ; S<int> s ; struct S<int> { a } ;" ;
4477: $if $(@expr1073745453 $!@expr1073745454 $assertEquals $(@expr1073745455 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4477 $, exp@var513 $, $tok_ $(@expr1073745456 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4477 $, code@var512 $) $) $) { $return ; }
4478: }
4479:
4480: void template_specialization_2 ( ) {
4481: const char code@var514 [@expr1073745457 126 ] =@expr1073745458 "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<C<int>> s;"
4482:
4483:
4484: ;
4485: const char exp@var515 [@expr1073745459 138 ] =@expr1073745460 "template < typename T > struct C { } ; template < typename T > struct S { a } ; struct S<C<int>> ; S<C<int>> s ; struct S<C<int>> { b } ;" ;
4486: $if $(@expr1073745461 $!@expr1073745462 $assertEquals $(@expr1073745463 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4486 $, exp@var515 $, $tok_ $(@expr1073745464 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4486 $, code@var514 $) $) $) { $return ; }
4487: }
4488:
4489: void template_enum ( ) {
4490: const char code1@var516 [@expr1073745465 541 ] =@expr1073745466 "template <class T>\nstruct Unconst {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T> {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T&> {\n    typedef T& type;\n};\ntemplate <class T>\nstruct Unconst<T* const> {\n    typedef T* type;\n};\ntemplate <class T1, class T2>\nstruct type_equal {\n    enum {  value = 0   };\n};\ntemplate <class T>\nstruct type_equal<T, T> {\n    enum {  value = 1   };\n};\ntemplate<class T>\nstruct template_is_const\n{\n    enum {value = !type_equal<T, typename Unconst<T>::type>::value  };\n};"
4491:
|
4517:
4518: ;
4519: const char exp1@var517 [@expr1073745467 518 ] =@expr1073745468 "template < class T > struct Unconst { } ; template < class T > struct Unconst < const T > { } ; template < class T > struct Unconst < const T & > { } ; template < class T > struct Unconst < T * const > { } ; template < class T1 , class T2 > struct type_equal { enum Anonymous0 { value = 0 } ; } ; template < class T > struct type_equal < T , T > { enum Anonymous1 { value = 1 } ; } ; template < class T > struct template_is_const { enum Anonymous2 { value = ! type_equal < T , Unconst < T > :: type > :: value } ; } ;"
4520:
|
4524:
4525: ;
4526: $if $(@expr1073745469 $!@expr1073745470 $assertEquals $(@expr1073745471 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4526 $, exp1@var517 $, $tok_ $(@expr1073745472 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4526 $, code1@var516 $) $) $) { $return ; }
4527: }
4528:
4529: void template_default_parameter ( ) {
4530: {
4531: const char code@var518 [@expr1073745473 97 ] =@expr1073745474 "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
4532:
|
4538:
4539: ;
4540: const char expected@var519 [@expr1073745475 149 ] =@expr1073745476 "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
4541:
|
4549:
4550: ;
4551: $if $(@expr1073745477 $!@expr1073745478 $assertEquals $(@expr1073745479 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4551 $, expected@var519 $, $tok_ $(@expr1073745480 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4551 $, code@var518 $) $) $) { $return ; }
4552: }
4553: {
4554: const char code@var520 [@expr1073745481 112 ] =@expr1073745482 "template <class T, int n1=3, int n2=2>\nclass A\n{ T ar[n1+n2]; };\n\nvoid f()\n{\n    A<int> a1;\n    A<int,3> a2;\n}\n"
4555:
|
4561:
4562: ;
4563:
4564: const char expected@var521 [@expr1073745483 108 ] =@expr1073745484 "class A<int,3,2> ; void f ( ) { A<int,3,2> a1 ; A<int,3,2> a2 ; } class A<int,3,2> { int ar [ 3 + 2 ] ; } ;"
4565:
|
4570:
4571: ;
4572: $if $(@expr1073745485 $!@expr1073745486 $assertEquals $(@expr1073745487 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4572 $, expected@var521 $, $tok_ $(@expr1073745488 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4572 $, code@var520 $) $) $) { $return ; }
4573: }
4574: {
4575: const char code@var522 [@expr1073745489 102 ] =@expr1073745490 "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,(int)2> a1;\n    A<int> a2;\n}\n"
4576:
|
4582:
4583: ;
4584: const char expected@var523 [@expr1073745491 172 ] =@expr1073745492 "class A<int,(int)2> ; class A<int,3> ; void f ( ) { A<int,(int)2> a1 ; A<int,3> a2 ; } class A<int,(int)2> { int ar [ ( int ) 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
4585:
|
4593:
4594: ;
4595: $if $(@expr1073745493 $!@expr1073745494 $assertEquals $(@expr1073745495 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4595 $, expected@var523 $, $tok_ $(@expr1073745496 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4595 $, code@var522 $) $) $) { $return ; }
4596: }
4597: {
4598: const char code@var524 [@expr1073745497 150 ] =@expr1073745498 "class A { }; template<class T> class B { }; template<class T1, class T2 = B<T1>> class C { }; template<class T1 = A, typename T2 = B<A>> class D { };"
4599:
4600:
4601: ;
4602: $if $(@expr1073745499 $!@expr1073745500 $assertEquals $(@expr1073745501 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4602 $, "class A { } ; template < class T > class B { } ; template < class T1 , class T2 = B < T1 > > class C { } ; template < class T1 = A , typename T2 = B < A > > class D { } ;" $, $tok_ $(@expr1073745502 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4602 $, code@var524 $) $) $) { $return
4603:
4604:
4605: ; }
4606: }
4607: {
4608:
4609: const char code@var525 [@expr1073745503 179 ] =@expr1073745504 "template<class T, class U> class DefaultMemory {}; template<class Key, class Val, class Mem=DefaultMemory<Key,Val> > class thv_table_c  {}; thv_table_c<void *,void *> id_table_m;"
4610:
4611: ;
4612: const char exp@var526 [@expr1073745505 246 ] =@expr1073745506 "template < class T , class U > class DefaultMemory { } ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> ; thv_table_c<void*,void*,DefaultMemory<void*,void*>> id_table_m ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> { } ;"
4613:
4614:
4615: ;
4616: $if $(@expr1073745507 $!@expr1073745508 $assertEquals $(@expr1073745509 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4616 $, exp@var526 $, $tok_ $(@expr1073745510 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4616 $, code@var525 $) $) $) { $return ; }
4617: }
4618: {
4619:
4620: const char code@var527 [@expr1073745511 89 ] =@expr1073745512 "template <typename = void> struct a {\n  void c();\n};\nvoid f() {\n  a<> b;\n  b.a<>::c();\n}"
4621:
|
4625:
4626: ;
4627: $if $(@expr1073745513 $!@expr1073745514 $assertEquals $(@expr1073745515 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4627 $, "struct a<void> ; void f ( ) { a<void> b ; b . a<void> :: c ( ) ; } struct a<void> { void c ( ) ; } ;" $, $tok_ $(@expr1073745516 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4627 $, code@var527 $) $) $) { $return
4628:
|
4633:
4634: ; }
4635: }
4636: {
4637:
4638: const char code@var528 [@expr1073745517 326 ] =@expr1073745518 "template< typename T0 = void > class A;\ntemplate<>\nclass A< void > {\n    public:\n        A() { }\n        ~A() { }\n        void Print() { std::cout << \"A\" << std::endl; }\n};\nclass B : public A<> {\n    public:\n        B() { }\n        ~B() { }\n};\nint main( int argc, char* argv[] ) {\n    B b;\n    b.A<>::Print();\n    return 0;\n}"
4639:
|
4654:
4655: ;
4656: $if $(@expr1073745519 $!@expr1073745520 $assertEquals $(@expr1073745521 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4656 $, "class A<void> ; template < typename T0 > class A ; class A<void> { public: A<void> ( ) { } ~ A<void> ( ) { } void Print ( ) { std :: cout << \"A\" << std :: endl ; } } ; class B : public A<void> { public: B ( ) { } ~ B ( ) { } } ; int main ( int argc , char * argv [ ] ) { B b ; b . A<void> :: Print ( ) ; return 0 ; }" $, $tok_ $(@expr1073745522 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4656 $, code@var528 $) $) $) { $return
4657:
|
4672:
4673: ; }
4674: }
4675: }
4676:
4677: void template_forward_declared_default_parameter ( ) {
4678: {
4679: const char code@var529 [@expr1073745523 132 ] =@expr1073745524 "template <class T, int n=3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
4680:
|
4687:
4688: ;
4689:
4690: const char exp@var530 [@expr1073745525 149 ] =@expr1073745526 "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
4691:
|
4699:
4700: ;
4701: $if $(@expr1073745527 $!@expr1073745528 $assertEquals $(@expr1073745529 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4701 $, exp@var530 $, $tok_ $(@expr1073745530 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4701 $, code@var529 $) $) $) { $return ; }
4702: }
4703: {
4704: const char code@var531 [@expr1073745531 130 ] =@expr1073745532 "template <class, int = 3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
4705:
|
4712:
4713: ;
4714:
4715: const char exp@var532 [@expr1073745533 149 ] =@expr1073745534 "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
4716:
|
4724:
4725: ;
4726: $if $(@expr1073745535 $!@expr1073745536 $assertEquals $(@expr1073745537 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4726 $, exp@var532 $, $tok_ $(@expr1073745538 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4726 $, code@var531 $) $) $) { $return ; }
4727: }
4728: {
4729: const char code@var533 [@expr1073745539 289 ] =@expr1073745540 "template<typename Lhs, int TriangularPart = (int(Lhs::Flags) & LowerTriangularBit)>\nstruct ei_solve_triangular_selector;\ntemplate<typename Lhs, int UpLo>\nstruct ei_solve_triangular_selector<Lhs,UpLo> {\n};\ntemplate<typename Lhs, int TriangularPart>\nstruct ei_solve_triangular_selector { };"
4730:
|
4734:
4735: ;
4736:
4737: const char exp@var534 [@expr1073745541 364 ] =@expr1073745542 "template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector ; template < typename Lhs , int UpLo > struct ei_solve_triangular_selector < Lhs , UpLo > { } ; template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector { } ;"
4738:
|
4742:
4743: ;
4744:
4745: $if $(@expr1073745543 $!@expr1073745544 $assertEquals $(@expr1073745545 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4745 $, exp@var534 $, $tok_ $(@expr1073745546 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4745 $, code@var533 $) $) $) { $return ; }
4746: }
4747: {
4748: const char code@var535 [@expr1073745547 226 ] =@expr1073745548 "template<int A = 128, class T = wchar_t>\nclass Foo;\ntemplate<int A, class T>\nclass Foo\n{\npublic:\n  T operator[](int Index) const;\n};\ntemplate<int A, class T>\nT Foo<A, T>::operator[](int Index) const\n{\n  return T{};\n}\nFoo<> f;"
4749:
|
4760:
4761: ;
4762: const char exp@var536 [@expr1073745549 208 ] =@expr1073745550 "class Foo<128,wchar_t> ; Foo<128,wchar_t> f ; class Foo<128,wchar_t> { public: wchar_t operator[] ( int Index ) const ; } ; wchar_t Foo<128,wchar_t> :: operator[] ( int Index ) const { return wchar_t { } ; }"
4763:
4764: ;
4765: $if $(@expr1073745551 $!@expr1073745552 $assertEquals $(@expr1073745553 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4765 $, exp@var536 $, $tok_ $(@expr1073745554 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4765 $, code@var535 $) $) $) { $return ; }
4766: }
4767: }
4768:
4769: void template_default_type ( ) {
4770: const char code@var537 [@expr1073745555 206 ] =@expr1073745556 "template <typename T, typename U=T>\nclass A\n{\npublic:\n  void foo() {\n    int a;\n    a = static_cast<U>(a);\n  }\n};\n\ntemplate <typename T>\nclass B\n{\nprotected:\n  A<int> a;\n};\n\nclass C\n  : public B<int>\n{\n};\n"
4771:
|
4789:
4790: ;
4791:
4792: $tok_ $(@expr1073745557 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4792 $, code@var537 $) ;
4793:
4794:
4795: $if $(@expr1073745558 $!@expr1073745559 $assertEquals $(@expr1073745560 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4795 $, "" $, errout@var100 .@expr1073745561 str (@expr1073745562 ) $) $) { $return ; }
4796: }
4797:
4798: void template_typename ( ) {
4799: {
4800: const char code@var538 [@expr1073745563 49 ] =@expr1073745564 "template <class T>\nvoid foo(typename T::t *)\n{ }"
4801:
4802: ;
4803:
4804:
4805: const char expected@var539 [@expr1073745565 47 ] =@expr1073745566 "template < class T > void foo ( T :: t * ) { }" ;
4806: $if $(@expr1073745567 $!@expr1073745568 $assertEquals $(@expr1073745569 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4806 $, expected@var539 $, $tok_ $(@expr1073745570 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4806 $, code@var538 $) $) $) { $return ; }
4807: }
4808:
4809: {
4810: const char code@var540 [@expr1073745571 51 ] =@expr1073745572 "void f() {\n    x(sizeof typename);\n    type = 0;\n}"
4811:
4812:
4813: ;
4814:
4815: $if $(@expr1073745573 $!@expr1073745574 $assertEquals $(@expr1073745575 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4815 $, "void f ( ) { x ( sizeof ( typename ) ) ; type = 0 ; }" $, $tok_ $(@expr1073745576 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4815 $, code@var540 $) $) $) { $return ; }
4816: }
4817: }
4818:
4819: void template_constructor ( ) {
4820:
4821:
4822: const char code@var541 [@expr1073745577 60 ] =@expr1073745578 "class Fred {\n    template<class T> explicit Fred(T t) { }\n}"
4823:
4824: ;
4825: $if $(@expr1073745579 $!@expr1073745580 $assertEquals $(@expr1073745581 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4825 $, "class Fred { template < class T > explicit Fred ( T t ) { } }" $, $tok_ $(@expr1073745582 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4825 $, code@var541 $) $) $) { $return ; }
4826:
4827:
4828: const char code2@var542 [@expr1073745583 51 ] =@expr1073745584 "class Fred {\n    template<class T> Fred(T t) { }\n}"
4829:
4830: ;
4831: $if $(@expr1073745585 $!@expr1073745586 $assertEquals $(@expr1073745587 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4831 $, "class Fred { template < class T > Fred ( T t ) { } }" $, $tok_ $(@expr1073745588 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4831 $, code2@var542 $) $) $) { $return ; }
4832: }
4833:
4834: void syntax_error_templates_1 ( ) {
4835:
4836: $tok_ $(@expr1073745589 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4836 $, "x<y>z> xyz;" $) ;
4837: $if $(@expr1073745590 $!@expr1073745591 $assertEquals $(@expr1073745592 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4837 $, "" $, errout@var100 .@expr3769 str (@expr3770 ) $) $) { $return ; }
4838:
4839:
4840: $tok_ $(@expr1073745595 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4840 $, "template<class T> operator<(T a, T b) { }" $) ;
4841: $if $(@expr1073745596 $!@expr1073745597 $assertEquals $(@expr1073745598 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4841 $, "" $, errout@var100 .@expr3769 str (@expr3770 ) $) $) { $return ; }
4842:
4843:
4844: $tok_ $(@expr1073745601 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4844 $, "void f(a) int a;\n{ ;x<y; }" $)
4845: ;
4846: $if $(@expr1073745602 $!@expr1073745603 $assertEquals $(@expr1073745604 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4846 $, "" $, errout@var100 .@expr3769 str (@expr3770 ) $) $) { $return ; }
4847:
4848:
4849: $tok_ $(@expr1073745607 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4849 $, "void f()\n{ try { ;x<y; } }" $)
4850: ;
4851: $if $(@expr1073745608 $!@expr1073745609 $assertEquals $(@expr1073745610 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4851 $, "" $, errout@var100 .@expr3769 str (@expr3770 ) $) $) { $return ; }
4852:
4853:
4854: $tok_ $(@expr1073745613 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4854 $, "MACRO(({ i < x }))" $) ;
4855: $if $(@expr1073745614 $!@expr1073745615 $assertEquals $(@expr1073745616 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4855 $, "" $, errout@var100 .@expr3769 str (@expr3770 ) $) $) { $return ; }
4856:
4857:
4858: $do ${ $try ${ $tok_ $(@expr1073745619 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4858 $, "x<y<int> xyz;\n" $) $; $assertThrowFail $(@expr1073745620 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4858 $) $; $} $catch $(@expr1073745621 $const InternalError $&@expr1073745622 $) ${ $} $catch $(@expr1073745623 $... $) ${ $assertThrowFail $(@expr1073745624 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4858 $) $; $} $} $while $(@expr1073745625 $false $) ;
4859:
4860:
4861: $do ${ $try ${ $tok_ $(@expr1073745626 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4861 $, "typedef\n    typename boost::mpl::if_c<\n          _visitableIndex < boost::mpl::size< typename _Visitables::ConcreteVisitables >::value\n          , ConcreteVisitable\n          , Dummy< _visitableIndex >\n    >::type ConcreteVisitableOrDummy;\n" $) $; $assertThrowFail $(@expr1073745627 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4861 $) $; $} $catch $(@expr1073745628 $const InternalError $&@expr1073745629 $) ${ $} $catch $(@expr1073745630 $... $) ${ $assertThrowFail $(@expr1073745631 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4861 $) $; $} $} $while $(@expr1073745632 $false $)
4862:
|
4865:
4866: ;
4867:
4868:
4869: $tok_ $(@expr1073745633 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4869 $, "struct A {int a;int b};\nclass Fred {public:\n    Fred() : a({1,2}) {\n        for (int i=0;i<6;i++);\n    }\nprivate:\n    A a;\n};" $)
4870:
|
4876:
4877: ;
4878: $if $(@expr1073745634 $!@expr1073745635 $assertEquals $(@expr1073745636 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4878 $, "" $, errout@var100 .@expr3769 str (@expr3770 ) $) $) { $return ; }
4879:
4880:
4881: {
4882: const std ::@expr1073745639 string expected@var543 =@expr1073745640 "template < long Num > constexpr bool foo < bar < Num > > = true ;" ;
4883: $if $(@expr1073745641 $!@expr1073745642 $assertEquals $(@expr1073745643 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4883 $, expected@var543 $, $tok_ $(@expr1073745644 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4883 $, "template <long Num>\nconstexpr bool foo<bar<Num> > = true;\n" $) $) $) { $return
4884:
4885: ; }
4886: $if $(@expr1073745645 $!@expr1073745646 $assertEquals $(@expr1073745647 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4886 $, "" $, errout@var100 .@expr3769 str (@expr3770 ) $) $) { $return ; }
4887: $if $(@expr1073745650 $!@expr1073745651 $assertEquals $(@expr1073745652 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4887 $, expected@var543 $, $tok_ $(@expr1073745653 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4887 $, "template <long Num>\nconstexpr bool foo<bar<Num>> = true;\n" $) $) $) { $return
4888:
4889: ; }
4890: $if $(@expr1073745654 $!@expr1073745655 $assertEquals $(@expr1073745656 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4890 $, "" $, errout@var100 .@expr3769 str (@expr3770 ) $) $) { $return ; }
4891: }
4892: }
4893:
4894: void template_member_ptr ( ) {
4895: $tok_ $(@expr1073745659 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4895 $, "struct A {}; struct B { template <void (A::*)() const> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};" $)
4896:
|
4899:
4900: ;
4901: $tok_ $(@expr1073745660 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4901 $, "struct A {}; struct B { template <void (A::*)() volatile> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};" $)
4902:
|
4905:
4906: ;
4907: $tok_ $(@expr1073745661 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4907 $, "struct A {}; struct B { template <void (A::*)() const volatile> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};" $)
4908:
|
4911:
4912: ;
4913: $tok_ $(@expr1073745662 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4913 $, "struct A {}; struct B { template <void (A::*)() volatile const> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};" $)
4914:
|
4917:
4918: ;
4919: }
4920:
4921: void template_namespace_1 ( ) {
4922:
4923: const char code@var544 [@expr1073745663 73 ] =@expr1073745664 "namespace {\n  template<class T> void Fred(T value) { }\n}\nFred<int>(123);"
4924:
4925:
4926: ;
4927: $if $(@expr1073745665 $!@expr1073745666 $assertEquals $(@expr1073745667 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4927 $, "namespace { void Fred<int> ( int value ) ; } Fred<int> ( 123 ) ; void Fred<int> ( int value ) { }" $, $tok_ $(@expr1073745668 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4927 $, code@var544 $) $) $) { $return
4928:
4929:
4930:
4931: ; }
4932: }
4933:
4934: void template_namespace_2 ( ) {
4935:
4936: const char code@var545 [@expr1073745669 63 ] =@expr1073745670 "namespace X {\n  template<class T> struct S { };\n}\nX::S<int> s;"
4937:
4938:
4939: ;
4940: $if $(@expr1073745671 $!@expr1073745672 $assertEquals $(@expr1073745673 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4940 $, "namespace X { struct S<int> ; } X :: S<int> s ; struct X :: S<int> { } ;" $, $tok_ $(@expr1073745674 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4940 $, code@var545 $) $) $) { $return
4941:
4942:
4943:
4944: ; }
4945: }
4946:
4947: void template_namespace_3 ( ) {
4948: const char code@var546 [@expr1073745675 127 ] =@expr1073745676 "namespace test16 {\n  template <class T> struct foo {\n    static void *bar();\n  };\n  void *test() { return foo<int>::bar(); }\n}"
4949:
|
4952:
4953: ;
4954: $if $(@expr1073745677 $!@expr1073745678 $assertEquals $(@expr1073745679 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4954 $, "namespace test16 { struct foo<int> ; void * test ( ) { return foo<int> :: bar ( ) ; } } struct test16 :: foo<int> { static void * bar ( ) ; } ;" $, $tok_ $(@expr1073745680 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4954 $, code@var546 $) $) $) { $return
4955:
|
4961:
4962: ; }
4963: }
4964:
4965: void template_namespace_4 ( ) {
4966: const char code@var547 [@expr1073745681 149 ] =@expr1073745682 "namespace foo {\n  template<class T> class A { void dostuff() {} };\n  struct S : public A<int> {\n    void f() {\n      A<int>::dostuff();\n    }\n  };\n}"
4967:
|
4972:
4973: ;
4974: $if $(@expr1073745683 $!@expr1073745684 $assertEquals $(@expr1073745685 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4974 $, "namespace foo { class A<int> ; struct S : public A<int> { void f ( ) { A<int> :: dostuff ( ) ; } } ; } class foo :: A<int> { void dostuff ( ) { } } ;" $, $tok_ $(@expr1073745686 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4974 $, code@var547 $) $) $) { $return
4975:
|
4981:
4982: ; }
4983: }
4984:
4985: void template_namespace_5 ( ) {
4986: const char code@var548 [@expr1073745687 57 ] =@expr1073745688 "template<class C> struct S {};\nnamespace X { S<int> s; }"
4987: ;
4988: $if $(@expr1073745689 $!@expr1073745690 $assertEquals $(@expr1073745691 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4988 $, "struct S<int> ; namespace X { S<int> s ; } struct S<int> { } ;" $, $tok_ $(@expr1073745692 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 4988 $, code@var548 $) $) $) { $return
4989:
4990: ; }
4991: }
4992:
4993: void template_namespace_6 ( ) {
4994: const char code@var549 [@expr1073745693 374 ] =@expr1073745694 "namespace NS {\ntemplate <typename T> union C {\n  char dummy[sizeof(T)];\n  T value;\n  C();\n  ~C();\n  C(const C &);\n  C & operator = (const C &);\n};\n}\nNS::C<int> intC;\ntemplate <typename T> NS::C<T>::C() {}\ntemplate <typename T> NS::C<T>::~C() {}\ntemplate <typename T> NS::C<T>::C(const NS::C<T> &) {}\ntemplate <typename T> NS::C<T> & NS::C<T>::operator=(const NS::C<T> &) {}"
4995:
|
5007:
5008: ;
5009: $if $(@expr1073745695 $!@expr1073745696 $assertEquals $(@expr1073745697 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5009 $, "namespace NS { union C<int> ; } NS :: C<int> intC ; union NS :: C<int> { char dummy [ sizeof ( int ) ] ; int value ; C<int> ( ) ; ~ C<int> ( ) ; C<int> ( const NS :: C<int> & ) ; NS :: C<int> & operator= ( const NS :: C<int> & ) ; } ; NS :: C<int> :: C<int> ( ) { } NS :: C<int> :: ~ C<int> ( ) { } NS :: C<int> :: C<int> ( const NS :: C<int> & ) { } NS :: C<int> & NS :: C<int> :: operator= ( const NS :: C<int> & ) { }" $, $tok_ $(@expr1073745698 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5009 $, code@var549 $) $) $) { $return
5010:
|
5022:
5023: ; }
5024: }
5025:
5026: void template_namespace_7 ( ) {
5027: const char code@var550 [@expr1073745699 179 ] =@expr1073745700 "namespace N1 {\nnamespace N2 {\n    struct C { };\n    template <class T> struct CT { };\n    C c1;\n    CT<int> ct1;\n}\nN2::C c2;\nN2::CT<int> ct2;\n}\nN1::N2::C c3;\nN1::N2::CT<int> ct3;"
5028:
|
5037:
5038: ;
5039: $if $(@expr1073745701 $!@expr1073745702 $assertEquals $(@expr1073745703 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5039 $, "namespace N1 { namespace N2 { struct C { } ; struct CT<int> ; C c1 ; CT<int> ct1 ; } N2 :: C c2 ; N2 :: CT<int> ct2 ; } N1 :: N2 :: C c3 ; N1 :: N2 :: CT<int> ct3 ; struct N1 :: N2 :: CT<int> { } ;" $, $tok_ $(@expr1073745704 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5039 $, code@var550 $) $) $) { $return
5040:
|
5049:
5050: ; }
5051: }
5052:
5053: void template_namespace_8 ( ) {
5054: const char code@var551 [@expr1073745705 468 ] =@expr1073745706 "namespace NS1 {\nnamespace NS2 {\n    template <typename T>\n    struct Fred {\n        Fred();\n        Fred(const Fred &);\n        Fred & operator = (const Fred &);\n        ~Fred();\n    };\n    template <typename T>\n    Fred<T>::Fred() { }\n    template <typename T>\n    Fred<T>::Fred(const Fred<T> & f) { }\n    template <typename T>\n    Fred<T> & Fred<T>::operator = (const Fred<T> & f) { }\n    template <typename T>\n    Fred<T>::~Fred() { }\n}\n}\nNS1::NS2::Fred<int> fred;"
5055:
|
5072:
5073: ;
5074: $if $(@expr1073745707 $!@expr1073745708 $assertEquals $(@expr1073745709 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5074 $, "namespace NS1 { namespace NS2 { struct Fred<int> ; } } NS1 :: NS2 :: Fred<int> fred ; struct NS1 :: NS2 :: Fred<int> { Fred<int> ( ) ; Fred<int> ( const NS1 :: NS2 :: Fred<int> & ) ; NS1 :: NS2 :: Fred<int> & operator= ( const NS1 :: NS2 :: Fred<int> & ) ; ~ Fred<int> ( ) ; } ; NS1 :: NS2 :: Fred<int> :: Fred<int> ( ) { } NS1 :: NS2 :: Fred<int> :: Fred<int> ( const NS1 :: NS2 :: Fred<int> & f ) { } NS1 :: NS2 :: Fred<int> & NS1 :: NS2 :: Fred<int> :: operator= ( const NS1 :: NS2 :: Fred<int> & f ) { } NS1 :: NS2 :: Fred<int> :: ~ Fred<int> ( ) { }" $, $tok_ $(@expr1073745710 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5074 $, code@var551 $) $) $) { $return
5075:
|
5087:
5088: ; }
5089: }
5090:
5091: void template_namespace_9 ( ) {
5092: const char code@var552 [@expr1073745711 194 ] =@expr1073745712 "namespace NS {\ntemplate<int type> struct Barney;\ntemplate<> struct Barney<1> { };\ntemplate<int type>\nclass Fred {\npublic:\n  Fred();\nprivate:\n  Barney<type> m_data;\n};\ntemplate class Fred<1>;\n}\n"
5093:
|
5102:
5103: ;
5104: $if $(@expr1073745713 $!@expr1073745714 $assertEquals $(@expr1073745715 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5104 $, "namespace NS { struct Barney<1> ; template < int type > struct Barney ; struct Barney<1> { } ; class Fred<1> ; } class NS :: Fred<1> { public: Fred<1> ( ) ; private: Barney<1> m_data ; } ;" $, $tok_ $(@expr1073745716 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5104 $, code@var552 $) $) $) { $return
5105:
|
5114:
5115: ; }
5116: }
5117:
5118: void template_namespace_10 ( ) {
5119: const char code@var553 [@expr1073745717 145 ] =@expr1073745718 "namespace NS1 {\nnamespace NS2 {\ntemplate<class T>\nclass Fred {\n    T * t;\npublic:\n    Fred<T>() : t(nullptr) {}\n};\n}\n}\nNS1::NS2::Fred<int> fred;"
5120:
|
5128:
5129: ;
5130: $if $(@expr1073745719 $!@expr1073745720 $assertEquals $(@expr1073745721 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5130 $, "namespace NS1 { namespace NS2 { class Fred<int> ; } } NS1 :: NS2 :: Fred<int> fred ; class NS1 :: NS2 :: Fred<int> { int * t ; public: Fred<int> ( ) : t ( nullptr ) { } } ;" $, $tok_ $(@expr1073745722 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5130 $, code@var553 $) $) $) { $return
5131:
|
5139:
5140: ; }
5141: }
5142:
5143: void template_namespace_11 ( ) {
5144: const char code@var554 [@expr1073745723 297 ] =@expr1073745724 "namespace MyNamespace {\nclass TestClass {\npublic:\n    TestClass() {\n        SomeFunction();\n        TemplatedMethod< int >( 0 );\n    }\n    void SomeFunction() { }\nprivate:\n    template< typename T > T TemplatedMethod(T);\n};\ntemplate< typename T > T TestClass::TemplatedMethod(T t) { return t; }\n}"
5145:
|
5155:
5156: ;
5157: $if $(@expr1073745725 $!@expr1073745726 $assertEquals $(@expr1073745727 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5157 $, "namespace MyNamespace { class TestClass { public: TestClass ( ) { SomeFunction ( ) ; TemplatedMethod<int> ( 0 ) ; } void SomeFunction ( ) { } private: int TemplatedMethod<int> ( int ) ; } ; } int MyNamespace :: TestClass :: TemplatedMethod<int> ( int t ) { return t ; }" $, $tok_ $(@expr1073745728 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5157 $, code@var554 $) $) $) { $return
5158:
|
5167:
5168: ; }
5169: }
5170:
5171: void template_pointer_type ( ) {
5172: const char code@var555 [@expr1073745729 70 ] =@expr1073745730 "template<class T> void foo(const T x) {}\nvoid bar() { foo<int*>(0); }"
5173: ;
5174: $if $(@expr1073745731 $!@expr1073745732 $assertEquals $(@expr1073745733 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5174 $, "void foo<int*> ( int * const x ) ; void bar ( ) { foo<int*> ( 0 ) ; } void foo<int*> ( int * const x ) { }" $, $tok_ $(@expr1073745734 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5174 $, code@var555 $) $) $) { $return
5175:
5176: ; }
5177: }
5178:
5179: void template_array_type ( ) {
5180: $if $(@expr1073745735 $!@expr1073745736 $assertEquals $(@expr1073745737 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5180 $, "void foo<int[]> ( int [ ] x ) ; void bar ( ) { int [ 3 ] y ; foo<int[]> ( y ) ; } void foo<int[]> ( int [ ] x ) { } ;" $, $tok_ $(@expr1073745738 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5180 $, "template <class T> void foo(T x) {};\nvoid bar() {\n  int[3] y;\n  foo<int[]>(y);\n}" $) $) $) { $return
5181:
|
5186:
5187: ; }
5188: $if $(@expr1073745739 $!@expr1073745740 $assertEquals $(@expr1073745741 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5188 $, "struct A<int[2]> ; A<int[2]> y ; struct A<int[2]> { int [ 2 ] x ; } ;" $, $tok_ $(@expr1073745742 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5188 $, "template <class T> struct A { T x; };\nA<int[2]> y;" $) $) $) { $return
5189:
5190:
5191:
5192: ; }
5193:
5194:
5195:
5196: $if $(@expr1073745743 $!@expr1073745744 $assertEquals $(@expr1073745745 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5196 $, "struct A<B<int>[]> ; struct B<B<int>> ; struct C<B<int>> ; C<B<int>> y ; struct C<B<int>> : B<B<int>> { } ; struct B<B<int>> { A<B<int>[]> x ; } ; struct A<B<int>[]> { } ;" $, $tok_ $(@expr1073745746 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5196 $, "template <class  > struct A {};\ntemplate <class T> struct B { A<T[]> x; };\ntemplate <class T> struct C : B<T> {};\nC<B<int>> y;" $) $) $) { $return
5197:
|
5205:
5206: ; }
5207: }
5208:
5209: unsigned int templateParameters ( const char code@var556 [ ] ) {
5210: Tokenizer tokenizer@var557 (@expr1073745747 &@expr1073745748 settings@var102 , this@expr1073745749 ) ;
5211:
5212: std ::@expr1073745750 istringstream istr@var558 (@expr1073745751 code@var556 ) ;
5213: tokenizer@var557 .@expr1073745752 createTokens (@expr1073745753 istr@var558 , "test.cpp" ) ;
5214: tokenizer@var557 .@expr1073745754 createLinks (@expr1073745755 ) ;
5215: tokenizer@var557 .@expr1073745756 splitTemplateRightAngleBrackets (@expr1073745757 false ) ;
5216:
5217: for (@expr1073745758 const Token *@expr3935 tok1@var559 =@expr1073745760 tokenizer@var557 .@expr3937 tokens (@expr3938 ) ; tok1@var559 ; tok1@var559 =@expr1073745763 tok1@var559 .@expr1073745764 next (@expr1073745765 ) ) {
5218: if (@expr1073745766 tok1@var559 .@expr1073745767 str (@expr1073745768 ) ==@expr1073745769 "var1" ) {
5219: (@expr1073745770 const_cast < Token *@expr3935 > (@expr1073745772 tok1@var559 ) ) .@expr1073745773 varId (@expr1073745774 1 ) ; }
5220: }
5221:
5222: return TemplateSimplifier ::@expr1073745775 templateParameters (@expr1073745776 tokenizer@var557 .@expr3937 tokens (@expr3938 ) .@expr1073745779 next (@expr1073745780 ) ) ;
5223: }
5224:
5225: void templateParameters ( ) {
5226:
5227: $if $(@expr1073745781 $!@expr1073745782 $assertEquals $(@expr1073745783 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5227 $, 1U $, templateParameters (@expr1073745784 "X<struct C> x;" ) $) $) { $return ; }
5228: $if $(@expr1073745785 $!@expr1073745786 $assertEquals $(@expr1073745787 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5228 $, 1U $, templateParameters (@expr1073745788 "X<union C> x;" ) $) $) { $return ; }
5229: $if $(@expr1073745789 $!@expr1073745790 $assertEquals $(@expr1073745791 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5229 $, 1U $, templateParameters (@expr1073745792 "X<const int> x;" ) $) $) { $return ; }
5230: $if $(@expr1073745793 $!@expr1073745794 $assertEquals $(@expr1073745795 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5230 $, 1U $, templateParameters (@expr1073745796 "X<int const *> x;" ) $) $) { $return ; }
5231: $if $(@expr1073745797 $!@expr1073745798 $assertEquals $(@expr1073745799 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5231 $, 1U $, templateParameters (@expr1073745800 "X<const struct C> x;" ) $) $) { $return ; }
5232: $if $(@expr1073745801 $!@expr1073745802 $assertEquals $(@expr1073745803 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5232 $, 0U $, templateParameters (@expr1073745804 "X<len>>x;" ) $) $) { $return ; }
5233: $if $(@expr1073745805 $!@expr1073745806 $assertEquals $(@expr1073745807 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5233 $, 1U $, templateParameters (@expr1073745808 "X<typename> x;" ) $) $) { $return ; }
5234: $if $(@expr1073745809 $!@expr1073745810 $assertEquals $(@expr1073745811 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5234 $, 0U $, templateParameters (@expr1073745812 "X<...> x;" ) $) $) { $return ; }
5235: $if $(@expr1073745813 $!@expr1073745814 $assertEquals $(@expr1073745815 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5235 $, 0U $, templateParameters (@expr1073745816 "X<class T...> x;" ) $) $) { $return ; }
5236: $if $(@expr1073745817 $!@expr1073745818 $assertEquals $(@expr1073745819 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5236 $, 1U $, templateParameters (@expr1073745820 "X<class... T> x;" ) $) $) { $return ; }
5237: $if $(@expr1073745821 $!@expr1073745822 $assertEquals $(@expr1073745823 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5237 $, 0U $, templateParameters (@expr1073745824 "X<class, typename T...> x;" ) $) $) { $return ; }
5238: $if $(@expr1073745825 $!@expr1073745826 $assertEquals $(@expr1073745827 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5238 $, 2U $, templateParameters (@expr1073745828 "X<class, typename... T> x;" ) $) $) { $return ; }
5239: $if $(@expr1073745829 $!@expr1073745830 $assertEquals $(@expr1073745831 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5239 $, 2U $, templateParameters (@expr1073745832 "X<int(&)(), class> x;" ) $) $) { $return ; }
5240: $if $(@expr1073745833 $!@expr1073745834 $assertEquals $(@expr1073745835 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5240 $, 3U $, templateParameters (@expr1073745836 "X<char, int(*)(), bool> x;" ) $) $) { $return ; }
5241: $if $(@expr1073745837 $!@expr1073745838 $assertEquals $(@expr1073745839 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5241 $, 1U $, templateParameters (@expr1073745840 "X<int...> x;" ) $) $) { $return ; }
5242: $if $(@expr1073745841 $!@expr1073745842 $assertEquals $(@expr1073745843 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5242 $, 2U $, templateParameters (@expr1073745844 "X<class, typename...> x;" ) $) $) { $return ; }
5243: $if $(@expr1073745845 $!@expr1073745846 $assertEquals $(@expr1073745847 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5243 $, 2U $, templateParameters (@expr1073745848 "X<1, T> x;" ) $) $) { $return ; }
5244: $if $(@expr1073745849 $!@expr1073745850 $assertEquals $(@expr1073745851 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5244 $, 1U $, templateParameters (@expr1073745852 "X<T[]> x;" ) $) $) { $return ; }
5245: $if $(@expr1073745853 $!@expr1073745854 $assertEquals $(@expr1073745855 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5245 $, 1U $, templateParameters (@expr1073745856 "X<T[2]> x;" ) $) $) { $return ; }
5246: $if $(@expr1073745857 $!@expr1073745858 $assertEquals $(@expr1073745859 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5246 $, 1U $, templateParameters (@expr1073745860 "X<i == 0> x;" ) $) $) { $return ; }
5247: $if $(@expr1073745861 $!@expr1073745862 $assertEquals $(@expr1073745863 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5247 $, 2U $, templateParameters (@expr1073745864 "X<int, i>=0> x;" ) $) $) { $return ; }
5248: $if $(@expr1073745865 $!@expr1073745866 $assertEquals $(@expr1073745867 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5248 $, 3U $, templateParameters (@expr1073745868 "X<int, i>=0, i - 2> x;" ) $) $) { $return ; }
5249: $if $(@expr1073745869 $!@expr1073745870 $assertEquals $(@expr1073745871 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5249 $, 0U $, templateParameters (@expr1073745872 "var1<1> x;" ) $) $) { $return ; }
5250: $if $(@expr1073745873 $!@expr1073745874 $assertEquals $(@expr1073745875 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5250 $, 0U $, templateParameters (@expr1073745876 "X<1>2;" ) $) $) { $return ; }
5251: $if $(@expr1073745877 $!@expr1073745878 $assertEquals $(@expr1073745879 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5251 $, 2U $, templateParameters (@expr1073745880 "template<typename...B,typename=SameSize<B...>> x;" ) $) $) { $return ; }
5252: $if $(@expr1073745881 $!@expr1073745882 $assertEquals $(@expr1073745883 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5252 $, 2U $, templateParameters (@expr1073745884 "template<typename...B,typename=SameSize<B...> > x;" ) $) $) { $return ; }
5253: $if $(@expr1073745885 $!@expr1073745886 $assertEquals $(@expr1073745887 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5253 $, 1U $, templateParameters (@expr1073745888 "template<template<typename>...Foo> x;" ) $) $) { $return ; }
5254: $if $(@expr1073745889 $!@expr1073745890 $assertEquals $(@expr1073745891 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5254 $, 1U $, templateParameters (@expr1073745892 "template<template<typename>> x;" ) $) $) { $return ; }
5255: $if $(@expr1073745893 $!@expr1073745894 $assertEquals $(@expr1073745895 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5255 $, 1U $, templateParameters (@expr1073745896 "template<template<template<typename>>> x;" ) $) $) { $return ; }
5256: $if $(@expr1073745897 $!@expr1073745898 $assertEquals $(@expr1073745899 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5256 $, 1U $, templateParameters (@expr1073745900 "template<template<template<template<typename>>>> x;" ) $) $) { $return ; }
5257: $if $(@expr1073745901 $!@expr1073745902 $assertEquals $(@expr1073745903 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5257 $, 1U $, templateParameters (@expr1073745904 "template<template<template<template<template<typename>>>>> x;" ) $) $) { $return ; }
5258: $if $(@expr1073745905 $!@expr1073745906 $assertEquals $(@expr1073745907 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5258 $, 2U $, templateParameters (@expr1073745908 "template<template<typename>,int> x;" ) $) $) { $return ; }
5259: $if $(@expr1073745909 $!@expr1073745910 $assertEquals $(@expr1073745911 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5259 $, 2U $, templateParameters (@expr1073745912 "template<template<template<typename>>,int> x;" ) $) $) { $return ; }
5260: $if $(@expr1073745913 $!@expr1073745914 $assertEquals $(@expr1073745915 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5260 $, 2U $, templateParameters (@expr1073745916 "template<template<template<template<typename>>>,int> x;" ) $) $) { $return ; }
5261: $if $(@expr1073745917 $!@expr1073745918 $assertEquals $(@expr1073745919 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5261 $, 2U $, templateParameters (@expr1073745920 "template<template<template<template<template<typename>>>>,int> x;" ) $) $) { $return ; }
5262: $if $(@expr1073745921 $!@expr1073745922 $assertEquals $(@expr1073745923 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5262 $, 2U $, templateParameters (@expr1073745924 "template<template<typename>...Foo,template<template<template<typename>>>> x;" ) $) $) { $return ; }
5263: $if $(@expr1073745925 $!@expr1073745926 $assertEquals $(@expr1073745927 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5263 $, 3U $, templateParameters (@expr1073745928 "template<template<typename>...Foo,int,template<template<template<typename>>>> x;" ) $) $) { $return ; }
5264: $if $(@expr1073745929 $!@expr1073745930 $assertEquals $(@expr1073745931 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5264 $, 4U $, templateParameters (@expr1073745932 "template<template<typename>...Foo,int,template<template<template<typename>>>,int> x;" ) $) $) { $return ; }
5265: $if $(@expr1073745933 $!@expr1073745934 $assertEquals $(@expr1073745935 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5265 $, 2U $, templateParameters (@expr1073745936 "template<typename S, enable_if_t<(is_compile_string<S>::value), int>> void i(S s);" ) $) $) { $return ; }
5266: $if $(@expr1073745937 $!@expr1073745938 $assertEquals $(@expr1073745939 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5266 $, 2U $, templateParameters (@expr1073745940 "template<typename c, b<(c::d), int>> void e();" ) $) $) { $return ; }
5267: }
5268:
5269:
5270: int templateNamePositionHelper ( const char code@var560 [ ] , unsigned int offset@var561 = 0 ) {
5271: Tokenizer tokenizer@var562 (@expr1073745941 &@expr1073745942 settings@var102 , this@expr1073745943 ) ;
5272:
5273: std ::@expr1073745944 istringstream istr@var563 (@expr1073745945 code@var560 ) ;
5274: tokenizer@var562 .@expr1073745946 createTokens (@expr1073745947 istr@var563 , "test.cpp" ) ;
5275: tokenizer@var562 .@expr1073745948 createLinks (@expr1073745949 ) ;
5276: tokenizer@var562 .@expr1073745950 splitTemplateRightAngleBrackets (@expr1073745951 false ) ;
5277:
5278: const Token * _tok@var564 ; _tok@var564 =@expr1073745952 tokenizer@var562 .@expr1073745953 tokens (@expr1073745954 ) ;
5279: for (@expr1073745955 unsigned int i@var565 =@expr1073745956 0 ; i@var565 <@expr1073745957 offset@var561 ; ++@expr1073745958 i@var565 ) {
5280: _tok@var564 =@expr1073745959 _tok@var564 .@expr1073745960 next (@expr1073745961 ) ; }
5281: return tokenizer@var562 .@expr1073745962 mTemplateSimplifier@var566 .@expr1073745963 getTemplateNamePosition (@expr1073745964 _tok@var564 ) ;
5282: }
5283:
5284: void templateNamePosition ( ) {
5285:
5286: $if $(@expr1073745965 $!@expr1073745966 $assertEquals $(@expr1073745967 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5286 $, 2 $, templateNamePositionHelper (@expr1073745968 "template<class T> class A {};" , 4 ) $) $) { $return ; }
5287: $if $(@expr1073745969 $!@expr1073745970 $assertEquals $(@expr1073745971 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5287 $, 2 $, templateNamePositionHelper (@expr1073745972 "template<class T> struct A {};" , 4 ) $) $) { $return ; }
5288: $if $(@expr1073745973 $!@expr1073745974 $assertEquals $(@expr1073745975 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5288 $, 2 $, templateNamePositionHelper (@expr1073745976 "template<class T> class A : B {};" , 4 ) $) $) { $return ; }
5289: $if $(@expr1073745977 $!@expr1073745978 $assertEquals $(@expr1073745979 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5289 $, 2 $, templateNamePositionHelper (@expr1073745980 "template<class T> struct A : B {};" , 4 ) $) $) { $return ; }
5290:
5291: $if $(@expr1073745981 $!@expr1073745982 $assertEquals $(@expr1073745983 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5291 $, 2 $, templateNamePositionHelper (@expr1073745984 "template<class T> unsigned foo() { return 0; }" , 4 ) $) $) { $return ; }
5292: $if $(@expr1073745985 $!@expr1073745986 $assertEquals $(@expr1073745987 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5292 $, 3 $, templateNamePositionHelper (@expr1073745988 "template<class T> unsigned* foo() { return 0; }" , 4 ) $) $) { $return ; }
5293: $if $(@expr1073745989 $!@expr1073745990 $assertEquals $(@expr1073745991 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5293 $, 4 $, templateNamePositionHelper (@expr1073745992 "template<class T> unsigned** foo() { return 0; }" , 4 ) $) $) { $return ; }
5294:
5295: $if $(@expr1073745993 $!@expr1073745994 $assertEquals $(@expr1073745995 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5295 $, 3 $, templateNamePositionHelper (@expr1073745996 "template<class T> const unsigned foo() { return 0; }" , 4 ) $) $) { $return ; }
5296: $if $(@expr1073745997 $!@expr1073745998 $assertEquals $(@expr1073745999 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5296 $, 4 $, templateNamePositionHelper (@expr1073746000 "template<class T> const unsigned& foo() { return 0; }" , 4 ) $) $) { $return ; }
5297: $if $(@expr1073746001 $!@expr1073746002 $assertEquals $(@expr1073746003 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5297 $, 5 $, templateNamePositionHelper (@expr1073746004 "template<class T> const unsigned** foo() { return 0; }" , 4 ) $) $) { $return ; }
5298:
5299: $if $(@expr1073746005 $!@expr1073746006 $assertEquals $(@expr1073746007 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5299 $, 4 $, templateNamePositionHelper (@expr1073746008 "template<class T> std::string foo() { static str::string str; return str; }" , 4 ) $) $) { $return ; }
5300: $if $(@expr1073746009 $!@expr1073746010 $assertEquals $(@expr1073746011 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5300 $, 5 $, templateNamePositionHelper (@expr1073746012 "template<class T> std::string & foo() { static str::string str; return str; }" , 4 ) $) $) { $return ; }
5301: $if $(@expr1073746013 $!@expr1073746014 $assertEquals $(@expr1073746015 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5301 $, 6 $, templateNamePositionHelper (@expr1073746016 "template<class T> const std::string & foo() { static str::string str; return str; }" , 4 ) $) $) { $return ; }
5302:
5303: $if $(@expr1073746017 $!@expr1073746018 $assertEquals $(@expr1073746019 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5303 $, 9 $, templateNamePositionHelper (@expr1073746020 "template<class T> std::map<int, int> foo() { static std::map<int, int> m; return m; }" , 4 ) $) $) { $return ; }
5304: $if $(@expr1073746021 $!@expr1073746022 $assertEquals $(@expr1073746023 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5304 $, 10 $, templateNamePositionHelper (@expr1073746024 "template<class T> std::map<int, int> & foo() { static std::map<int, int> m; return m; }" , 4 ) $) $) { $return ; }
5305: $if $(@expr1073746025 $!@expr1073746026 $assertEquals $(@expr1073746027 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5305 $, 11 $, templateNamePositionHelper (@expr1073746028 "template<class T> const std::map<int, int> & foo() { static std::map<int, int> m; return m; }" , 4 ) $) $) { $return ; }
5306:
5307: $if $(@expr1073746029 $!@expr1073746030 $assertEquals $(@expr1073746031 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5307 $, 4 $, templateNamePositionHelper (@expr1073746032 "class A { template<class T> unsigned foo(); }; template<class T> unsigned A::foo() { return 0; }" , 19 ) $) $) { $return
5308:
5309: ; }
5310: $if $(@expr1073746033 $!@expr1073746034 $assertEquals $(@expr1073746035 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5310 $, 5 $, templateNamePositionHelper (@expr1073746036 "class A { template<class T> const unsigned foo(); }; template<class T> const unsigned A::foo() { return 0; }" , 20 ) $) $) { $return
5311:
5312: ; }
5313: $if $(@expr1073746037 $!@expr1073746038 $assertEquals $(@expr1073746039 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5313 $, 7 $, templateNamePositionHelper (@expr1073746040 "class A { class B { template<class T> const unsigned foo(); }; } ; template<class T> const unsigned A::B::foo() { return 0; }" , 25 ) $) $) { $return
5314:
5315: ; }
5316: $if $(@expr1073746041 $!@expr1073746042 $assertEquals $(@expr1073746043 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5316 $, 8 $, templateNamePositionHelper (@expr1073746044 "class A { class B { template<class T> const unsigned * foo(); }; } ; template<class T> const unsigned * A::B::foo() { return 0; }" , 26 ) $) $) { $return
5317:
5318: ; }
5319: $if $(@expr1073746045 $!@expr1073746046 $assertEquals $(@expr1073746047 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5319 $, 9 $, templateNamePositionHelper (@expr1073746048 "class A { class B { template<class T> const unsigned ** foo(); }; } ; template<class T> const unsigned ** A::B::foo() { return 0; }" , 27 ) $) $) { $return
5320:
5321: ; }
5322:
5323: $if $(@expr1073746049 $!@expr1073746050 $assertEquals $(@expr1073746051 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5323 $, 6 $, templateNamePositionHelper (@expr1073746052 "template<class T> class A { A(); }; template<class T> A<T>::A() {}" , 18 ) $) $) { $return
5324:
5325: ; }
5326: $if $(@expr1073746053 $!@expr1073746054 $assertEquals $(@expr1073746055 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5326 $, 8 $, templateNamePositionHelper (@expr1073746056 "template<class T, class U> class A { A(); }; template<class T, class U> A<T, U>::A() {}" , 24 ) $) $) { $return
5327:
5328: ; }
5329: $if $(@expr1073746057 $!@expr1073746058 $assertEquals $(@expr1073746059 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5329 $, 7 $, templateNamePositionHelper (@expr1073746060 "template<class T> class A { unsigned foo(); }; template<class T> unsigned A<T>::foo() { return 0; }" , 19 ) $) $) { $return
5330:
5331: ; }
5332: $if $(@expr1073746061 $!@expr1073746062 $assertEquals $(@expr1073746063 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5332 $, 9 $, templateNamePositionHelper (@expr1073746064 "template<class T, class U> class A { unsigned foo(); }; template<class T, class U> unsigned A<T, U>::foo() { return 0; }" , 25 ) $) $) { $return
5333:
5334: ; }
5335: $if $(@expr1073746065 $!@expr1073746066 $assertEquals $(@expr1073746067 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5335 $, 12 $, templateNamePositionHelper (@expr1073746068 "template<> unsigned A<int, v<char> >::foo() { return 0; }" , 2 ) $) $) { $return
5336: ; }
5337: }
5338:
5339:
5340: bool findTemplateDeclarationEndHelper ( const char code@var567 [ ] , const char pattern@var568 [ ] , unsigned int offset@var569 = 0 ) {
5341: Tokenizer tokenizer@var570 (@expr1073746069 &@expr1073746070 settings@var102 , this@expr1073746071 ) ;
5342:
5343: std ::@expr1073746072 istringstream istr@var571 (@expr1073746073 code@var567 ) ;
5344: tokenizer@var570 .@expr1073746074 createTokens (@expr1073746075 istr@var571 , "test.cpp" ) ;
5345: tokenizer@var570 .@expr1073746076 createLinks (@expr1073746077 ) ;
5346: tokenizer@var570 .@expr1073746078 splitTemplateRightAngleBrackets (@expr1073746079 false ) ;
5347:
5348: const Token * _tok@var572 ; _tok@var572 =@expr1073746080 tokenizer@var570 .@expr1073746081 tokens (@expr1073746082 ) ;
5349: for (@expr1073746083 unsigned int i@var573 =@expr1073746084 0 ; i@var573 <@expr1073746085 offset@var569 ; ++@expr1073746086 i@var573 ) {
5350: _tok@var572 =@expr1073746087 _tok@var572 .@expr1073746088 next (@expr1073746089 ) ; }
5351:
5352: const Token * tok1@var574 ; tok1@var574 =@expr1073746090 TemplateSimplifier ::@expr1073746091 findTemplateDeclarationEnd (@expr1073746092 _tok@var572 ) ;
5353:
5354: return (@expr1073746093 tok1@var574 ==@expr1073746094 Token ::@expr1073746095 findsimplematch (@expr1073746096 tokenizer@var570 .@expr1073746097 list@var575 .@expr1073746098 front (@expr1073746099 ) , pattern@var568 , strlen (@expr1073746100 pattern@var568 ) ) ) ;
5355: }
5356:
5357: void findTemplateDeclarationEnd ( ) {
5358: $if $(@expr1073746101 $!@expr1073746102 $assert_ $(@expr1073746103 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5358 $, findTemplateDeclarationEndHelper (@expr1073746104 "template <typename T> class Fred { }; int x;" , "; int x ;" ) $) $) { $return ; }
5359: $if $(@expr1073746105 $!@expr1073746106 $assert_ $(@expr1073746107 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5359 $, findTemplateDeclarationEndHelper (@expr1073746108 "template <typename T> void Fred() { } int x;" , "} int x ;" ) $) $) { $return ; }
5360: $if $(@expr1073746109 $!@expr1073746110 $assert_ $(@expr1073746111 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5360 $, findTemplateDeclarationEndHelper (@expr1073746112 "template <typename T> int Fred = 0; int x;" , "; int x ;" ) $) $) { $return ; }
5361: $if $(@expr1073746113 $!@expr1073746114 $assert_ $(@expr1073746115 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5361 $, findTemplateDeclarationEndHelper (@expr1073746116 "template <typename T> constexpr auto func = [](auto x){ return T(x);}; int x;" , "; int x ;" ) $) $) { $return ; }
5362: $if $(@expr1073746117 $!@expr1073746118 $assert_ $(@expr1073746119 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5362 $, findTemplateDeclarationEndHelper (@expr1073746120 "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>); int x;" , "; int x ;" ) $) $) { $return ; }
5363: $if $(@expr1073746121 $!@expr1073746122 $assert_ $(@expr1073746123 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5363 $, findTemplateDeclarationEndHelper (@expr1073746124 "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>){} int x;" , "} int x ;" ) $) $) { $return ; }
5364: $if $(@expr1073746125 $!@expr1073746126 $assert_ $(@expr1073746127 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5364 $, findTemplateDeclarationEndHelper (@expr1073746128 "template <typename... f, c<h<e<typename f::d...>>::g>> void i(); int x;" , "; int x ;" ) $) $) { $return ; }
5365: $if $(@expr1073746129 $!@expr1073746130 $assert_ $(@expr1073746131 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5365 $, findTemplateDeclarationEndHelper (@expr1073746132 "template <typename... f, c<h<e<typename f::d...>>::g>> void i(){} int x;" , "} int x ;" ) $) $) { $return ; }
5366: }
5367:
5368:
5369: bool getTemplateParametersInDeclarationHelper ( const char code@var576 [ ] , const std :: vector < std :: string > & params@var577 ) {
5370: Tokenizer tokenizer@var578 (@expr1073746133 &@expr1073746134 settings@var102 , this@expr1073746135 ) ;
5371:
5372: std ::@expr1073746136 istringstream istr@var579 (@expr1073746137 code@var576 ) ;
5373: tokenizer@var578 .@expr1073746138 createTokens (@expr1073746139 istr@var579 , "test.cpp" ) ;
5374: tokenizer@var578 .@expr1073746140 createLinks (@expr1073746141 ) ;
5375: tokenizer@var578 .@expr1073746142 splitTemplateRightAngleBrackets (@expr1073746143 false ) ;
5376:
5377: std ::@expr1073746144 vector < const Token *@expr1073746145 > typeParametersInDeclaration@var580 ;
5378: TemplateSimplifier ::@expr1073746146 getTemplateParametersInDeclaration (@expr1073746147 tokenizer@var578 .@expr1073746148 tokens (@expr1073746149 ) .@expr1073746150 tokAt (@expr1073746151 2 ) , typeParametersInDeclaration@var580 ) ;
5379:
5380: if (@expr1073746152 params@var577 .@expr1073746153 size (@expr1073746154 ) !=@expr1073746155 typeParametersInDeclaration@var580 .@expr4332 size (@expr4333 ) ) {
5381: return false ; }
5382:
5383: for (@expr1073746158 unsigned long i@var581 =@expr1073746159 0 ; i@var581 <@expr1073746160 typeParametersInDeclaration@var580 .@expr4332 size (@expr4333 ) ; ++@expr1073746163 i@var581 ) {
5384: if (@expr1073746164 typeParametersInDeclaration@var580 [@expr1073746165 i@var581 ] .@expr1073746166 str (@expr1073746167 ) !=@expr1073746168 params@var577 [@expr1073746169 i@var581 ] ) {
5385: return false ; }
5386: }
5387: return true ;
5388: }
5389:
5390: void getTemplateParametersInDeclaration ( ) {
5391: $if $(@expr1073746170 $!@expr1073746171 $assert_ $(@expr1073746172 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5391 $, getTemplateParametersInDeclarationHelper (@expr1073746173 "template<typename T> class Fred {};" , std ::@expr4350 vector < std ::@expr4351 string > {@expr1073746176 "T" } ) $) $) { $return ; }
5392: $if $(@expr1073746177 $!@expr1073746178 $assert_ $(@expr1073746179 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5392 $, getTemplateParametersInDeclarationHelper (@expr1073746180 "template<typename T=int> class Fred {};" , std ::@expr4350 vector < std ::@expr4351 string > {@expr1073746183 "T" } ) $) $) { $return ; }
5393: $if $(@expr1073746184 $!@expr1073746185 $assert_ $(@expr1073746186 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5393 $, getTemplateParametersInDeclarationHelper (@expr1073746187 "template<typename T,typename U> class Fred {};" , std ::@expr4350 vector < std ::@expr4351 string > {@expr1073746190 "T" , "U" } ) $) $) { $return ; }
5394: $if $(@expr1073746191 $!@expr1073746192 $assert_ $(@expr1073746193 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5394 $, getTemplateParametersInDeclarationHelper (@expr1073746194 "template<typename T,typename U=int> class Fred {};" , std ::@expr4350 vector < std ::@expr4351 string > {@expr1073746197 "T" , "U" } ) $) $) { $return ; }
5395: $if $(@expr1073746198 $!@expr1073746199 $assert_ $(@expr1073746200 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5395 $, getTemplateParametersInDeclarationHelper (@expr1073746201 "template<typename T=int,typename U=int> class Fred {};" , std ::@expr4350 vector < std ::@expr4351 string > {@expr1073746204 "T" , "U" } ) $) $) { $return ; }
5396: }
5397:
5398: void expandSpecialized1 ( ) {
5399: $if $(@expr1073746205 $!@expr1073746206 $assertEquals $(@expr1073746207 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5399 $, "class A<int> { } ;" $, $tok_ $(@expr1073746208 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5399 $, "template<> class A<int> {};" $) $) $) { $return ; }
5400: $if $(@expr1073746209 $!@expr1073746210 $assertEquals $(@expr1073746211 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5400 $, "class A<int> : public B { } ;" $, $tok_ $(@expr1073746212 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5400 $, "template<> class A<int> : public B {};" $) $) $) { $return ; }
5401: $if $(@expr1073746213 $!@expr1073746214 $assertEquals $(@expr1073746215 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5401 $, "class A<int> { A<int> ( ) ; ~ A<int> ( ) ; } ;" $, $tok_ $(@expr1073746216 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5401 $, "template<> class A<int> { A(); ~A(); };" $) $) $) { $return ; }
5402: $if $(@expr1073746217 $!@expr1073746218 $assertEquals $(@expr1073746219 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5402 $, "class A<int> { A<int> ( ) { } ~ A<int> ( ) { } } ;" $, $tok_ $(@expr1073746220 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5402 $, "template<> class A<int> { A() {} ~A() {} };" $) $) $) { $return ; }
5403: $if $(@expr1073746221 $!@expr1073746222 $assertEquals $(@expr1073746223 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5403 $, "class A<int> { A<int> ( ) ; ~ A<int> ( ) ; } ; A<int> :: A<int> ( ) { } ~ A<int> :: A<int> ( ) { }" $, $tok_ $(@expr1073746224 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5403 $, "template<> class A<int> { A(); ~A(); }; A<int>::A() { } ~A<int>::A() {}" $) $) $) { $return
5404: ; }
5405: $if $(@expr1073746225 $!@expr1073746226 $assertEquals $(@expr1073746227 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5405 $, "class A<int> { A<int> ( ) ; A<int> ( const A<int> & ) ; A<int> foo ( ) ; } ; A<int> :: A<int> ( ) { } A<int> :: A<int> ( const A<int> & ) { } A<int> A<int> :: foo ( ) { A<int> a ; return a ; }" $, $tok_ $(@expr1073746228 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5405 $, "template<> class A<int> { A(); A(const A &) ; A foo(); }; A<int>::A() { } A<int>::A(const A &) { } A<int> A<int>::foo() { A a; return a; }" $) $) $) { $return
5406: ; }
5407: }
5408:
5409: void expandSpecialized2 ( ) {
5410: {
5411: const char code@var582 [@expr1073746229 142 ] =@expr1073746230 "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};\nC<float> b;\n"
5412:
|
5418:
5419: ;
5420: const char expected@var583 [@expr1073746231 174 ] =@expr1073746232 "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ; C<float> b ;"
5421:
|
5426:
5427: ;
5428: $if $(@expr1073746233 $!@expr1073746234 $assertEquals $(@expr1073746235 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5428 $, expected@var583 $, $tok_ $(@expr1073746236 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5428 $, code@var582 $) $) $) { $return ; }
5429: }
5430: {
5431: const char code@var584 [@expr1073746237 129 ] =@expr1073746238 "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};"
5432:
|
5437:
5438: ;
5439: const char expected@var585 [@expr1073746239 161 ] =@expr1073746240 "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ;"
5440:
|
5444:
5445: ;
5446: $if $(@expr1073746241 $!@expr1073746242 $assertEquals $(@expr1073746243 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5446 $, expected@var585 $, $tok_ $(@expr1073746244 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5446 $, code@var584 $) $) $) { $return ; }
5447: }
5448: {
5449: const char code@var586 [@expr1073746245 205 ] =@expr1073746246 "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }\nC<float> b;\n"
5450:
|
5460:
5461: ;
5462: const char expected@var587 [@expr1073746247 330 ] =@expr1073746248 "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; } C<float> b ;"
5463:
|
5472:
5473: ;
5474: $if $(@expr1073746249 $!@expr1073746250 $assertEquals $(@expr1073746251 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5474 $, expected@var587 $, $tok_ $(@expr1073746252 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5474 $, code@var586 $) $) $) { $return ; }
5475: }
5476: {
5477: const char code@var588 [@expr1073746253 192 ] =@expr1073746254 "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }"
5478:
|
5487:
5488: ;
5489: const char expected@var589 [@expr1073746255 317 ] =@expr1073746256 "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; }"
5490:
|
5498:
5499: ;
5500: $if $(@expr1073746257 $!@expr1073746258 $assertEquals $(@expr1073746259 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5500 $, expected@var589 $, $tok_ $(@expr1073746260 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5500 $, code@var588 $) $) $) { $return ; }
5501: }
5502: }
5503:
5504: void expandSpecialized3 ( ) {
5505: const char code@var590 [@expr1073746261 244 ] =@expr1073746262 "template <> struct OutputU16<unsigned char> final {\n    explicit OutputU16(std::basic_ostream<unsigned char> &t) : outputStream_(t) {}\n    void operator()(unsigned short) const;\nprivate:\n    std::basic_ostream<unsigned char> &outputStream_;\n};"
5506:
|
5509:
5510: ;
5511: const char expected@var591 [@expr1073746263 258 ] =@expr1073746264 "struct OutputU16<unsignedchar> final { explicit OutputU16<unsignedchar> ( std :: basic_ostream < unsigned char > & t ) : outputStream_ ( t ) { } void operator() ( unsigned short ) const ; private: std :: basic_ostream < unsigned char > & outputStream_ ; } ;"
5512:
|
5515:
5516: ;
5517: $if $(@expr1073746265 $!@expr1073746266 $assertEquals $(@expr1073746267 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5517 $, expected@var591 $, $tok_ $(@expr1073746268 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5517 $, code@var590 $) $) $) { $return ; }
5518: }
5519:
5520: void expandSpecialized4 ( ) {
5521: {
5522: const char code@var592 [@expr1073746269 42 ] =@expr1073746270 "template<> class C<char> { };\nmap<int> m;"
5523: ;
5524: const char expected@var593 [@expr1073746271 36 ] =@expr1073746272 "class C<char> { } ; map < int > m ;"
5525: ;
5526: $if $(@expr1073746273 $!@expr1073746274 $assertEquals $(@expr1073746275 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5526 $, expected@var593 $, $tok_ $(@expr1073746276 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5526 $, code@var592 $) $) $) { $return ; }
5527: }
5528: {
5529: const char code@var594 [@expr1073746277 53 ] =@expr1073746278 "template<> class C<char> { };\nmap<int> m;\nC<char> c;"
5530:
5531: ;
5532: const char expected@var595 [@expr1073746279 48 ] =@expr1073746280 "class C<char> { } ; map < int > m ; C<char> c ;"
5533:
5534: ;
5535: $if $(@expr1073746281 $!@expr1073746282 $assertEquals $(@expr1073746283 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5535 $, expected@var595 $, $tok_ $(@expr1073746284 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5535 $, code@var594 $) $) $) { $return ; }
5536: }
5537: {
5538: const char code@var596 [@expr1073746285 77 ] =@expr1073746286 "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\n"
5539:
5540: ;
5541: const char expected@var597 [@expr1073746287 90 ] =@expr1073746288 "class C<char> ; template < typename T > class C { } ; class C<char> { } ; map < int > m ;"
5542:
5543:
5544: ;
5545: $if $(@expr1073746289 $!@expr1073746290 $assertEquals $(@expr1073746291 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5545 $, expected@var597 $, $tok_ $(@expr1073746292 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5545 $, code@var596 $) $) $) { $return ; }
5546: }
5547: {
5548: const char code@var598 [@expr1073746293 86 ] =@expr1073746294 "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;"
5549:
5550:
5551: ;
5552: const char expected@var599 [@expr1073746295 97 ] =@expr1073746296 "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; class C<int> { } ;"
5553:
|
5556:
5557: ;
5558: $if $(@expr1073746297 $!@expr1073746298 $assertEquals $(@expr1073746299 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5558 $, expected@var599 $, $tok_ $(@expr1073746300 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5558 $, code@var598 $) $) $) { $return ; }
5559: }
5560: {
5561: const char code@var600 [@expr1073746301 97 ] =@expr1073746302 "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;\nC<char> c;"
5562:
5563:
5564:
5565: ;
5566: const char expected@var601 [@expr1073746303 109 ] =@expr1073746304 "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; C<char> c ; class C<int> { } ;"
5567:
|
5571:
5572: ;
5573: $if $(@expr1073746305 $!@expr1073746306 $assertEquals $(@expr1073746307 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5573 $, expected@var601 $, $tok_ $(@expr1073746308 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5573 $, code@var600 $) $) $) { $return ; }
5574: }
5575: {
5576: const char code@var602 [@expr1073746309 119 ] =@expr1073746310 "class A {};\ntemplate<typename T> struct B;\ntemplate<> struct B<A> {};\nint f() {\n    int B[1] = {};\n    return B[0];\n}\n"
5577:
|
5581:
5582: ;
5583: const char expected@var603 [@expr1073746311 132 ] =@expr1073746312 "class A { } ; struct B<A> ; template < typename T > struct B ; struct B<A> { } ; int f ( ) { int B [ 1 ] = { } ; return B [ 0 ] ; }"
5584:
|
5589:
5590: ;
5591: $if $(@expr1073746313 $!@expr1073746314 $assertEquals $(@expr1073746315 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5591 $, expected@var603 $, $tok_ $(@expr1073746316 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5591 $, code@var602 $) $) $) { $return ; }
5592: }
5593: }
5594:
5595: void expandSpecialized5 ( ) {
5596: const char code@var604 [@expr1073746317 142 ] =@expr1073746318 "template<typename T> class hash;\ntemplate<> class hash<int> {};\nint f(int i) {\n    int hash = i;\n    const int a[2]{};\n    return a[hash];\n}\n"
5597:
|
5601:
5602: ;
5603:
5604: const char expected@var605 [@expr1073746319 163 ] =@expr1073746320 "class hash<int> ; template < typename T > class hash ; class hash<int> { } ; int f ( int i ) { int hash ; hash = i ; const int a [ 2 ] { } ; return a [ hash ] ; }"
5605:
|
5610:
5611: ;
5612:
5613: $if $(@expr1073746321 $!@expr1073746322 $assertEquals $(@expr1073746323 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5613 $, expected@var605 $, $tok_ $(@expr1073746324 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5613 $, code@var604 $) $) $) { $return ; }
5614: }
5615:
5616: void templateAlias1 ( ) {
5617: const char code@var606 [@expr1073746325 93 ] =@expr1073746326 "template<class T, int N> struct Foo {};\ntemplate<class T> using Bar = Foo<T,3>;\nBar<int> b;\n"
5618:
5619: ;
5620:
5621: const char expected@var607 [@expr1073746327 59 ] =@expr1073746328 "struct Foo<int,3> ; Foo<int,3> b ; struct Foo<int,3> { } ;"
5622:
5623: ;
5624:
5625: $if $(@expr1073746329 $!@expr1073746330 $assertEquals $(@expr1073746331 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5625 $, expected@var607 $, $tok_ $(@expr1073746332 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5625 $, code@var606 $) $) $) { $return ; }
5626: }
5627:
5628: void templateAlias2 ( ) {
5629: const char code@var608 [@expr1073746333 112 ] =@expr1073746334 "namespace A { template<class T, int N> struct Foo {}; }\ntemplate<class T> using Bar = A::Foo<T,3>;\nBar<int> b;\n"
5630:
5631: ;
5632:
5633: const char expected@var609 [@expr1073746335 85 ] =@expr1073746336 "namespace A { struct Foo<int,3> ; } A :: Foo<int,3> b ; struct A :: Foo<int,3> { } ;"
5634:
5635: ;
5636:
5637: $if $(@expr1073746337 $!@expr1073746338 $assertEquals $(@expr1073746339 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5637 $, expected@var609 $, $tok_ $(@expr1073746340 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5637 $, code@var608 $) $) $) { $return ; }
5638: }
5639:
5640: void templateAlias3 ( ) {
5641: const char code@var610 [@expr1073746341 104 ] =@expr1073746342 "template <int> struct Tag {};\ntemplate <int ID> using SPtr = std::shared_ptr<void(Tag<ID>)>;\nSPtr<0> s;"
5642:
5643: ;
5644: const char expected@var611 [@expr1073746343 78 ] =@expr1073746344 "struct Tag<0> ; std :: shared_ptr < void ( Tag<0> ) > s ; struct Tag<0> { } ;"
5645:
5646: ;
5647: $if $(@expr1073746345 $!@expr1073746346 $assertEquals $(@expr1073746347 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5647 $, expected@var611 $, $tok_ $(@expr1073746348 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5647 $, code@var610 $) $) $) { $return ; }
5648: }
5649:
5650: void templateAlias4 ( ) {
5651: const char code@var612 [@expr1073746349 131 ] =@expr1073746350 "template <class T>\nusing IntrusivePtr = boost::intrusive_ptr<T>;\ntemplate <class T> class Vertex { };\nIntrusivePtr<Vertex<int>> p;"
5652:
5653:
5654: ;
5655: const char expected@var613 [@expr1073746351 87 ] =@expr1073746352 "class Vertex<int> ; boost :: intrusive_ptr < Vertex<int> > p ; class Vertex<int> { } ;"
5656:
5657: ;
5658: $if $(@expr1073746353 $!@expr1073746354 $assertEquals $(@expr1073746355 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5658 $, expected@var613 $, $tok_ $(@expr1073746356 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5658 $, code@var612 $) $) $) { $return ; }
5659: }
5660:
5661: void templateAlias5 ( ) {
5662: const char code@var614 [@expr1073746357 92 ] =@expr1073746358 "template<typename T> using A = int;\ntemplate<typename T> using B = T;\nA<char> a;\nB<char> b;"
5663:
5664:
5665: ;
5666: const char expected@var615 [@expr1073746359 17 ] =@expr1073746360 "int a ; char b ;"
5667: ;
5668: $if $(@expr1073746361 $!@expr1073746362 $assertEquals $(@expr1073746363 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5668 $, expected@var615 $, $tok_ $(@expr1073746364 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5668 $, code@var614 $) $) $) { $return ; }
5669: }
5670:
5671:
5672: bool instantiateMatch_ ( const char code@var616 [ ] , const unsigned long numberOfArguments@var617 , const char patternAfter@var618 [ ] , const char * file@var619 , int line@var620 ) {
5673: Tokenizer tokenizer@var621 (@expr1073746365 &@expr1073746366 settings@var102 , this@expr1073746367 ) ;
5674:
5675: std ::@expr1073746368 istringstream istr@var622 (@expr1073746369 code@var616 ) ;
5676: $assert_ $(@expr1073746370 file@var619 $, line@var620 $, $(@expr1073746371 tokenizer@var621 .@expr1073746372 tokenize (@expr1073746373 istr@var622 , "test.cpp" , "" ) $) $) ;
5677:
5678: return (@expr1073746374 TemplateSimplifier ::@expr1073746375 instantiateMatch ) (@expr1073746376 tokenizer@var621 .@expr1073746377 tokens (@expr1073746378 ) , numberOfArguments@var617 , false , patternAfter@var618 ) ;
5679: }
5680:
5681: void instantiateMatchTest ( ) {
5682:
5683: $if $(@expr1073746379 $!@expr1073746380 $assertEquals $(@expr1073746381 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5683 $, false $, $instantiateMatch_ $(@expr1073746382 "ConvertHelper < From, To > c ;" $, 2 $, ":: %name% (" $, "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5683 $) $) $) { $return
5684:
5685: ; }
5686: $if $(@expr1073746383 $!@expr1073746384 $assertEquals $(@expr1073746385 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5686 $, true $, $instantiateMatch_ $(@expr1073746386 "ConvertHelper < From, To > :: Create ( ) ;" $, 2 $, ":: %name% (" $, "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5686 $) $) $) { $return
5687:
5688: ; }
5689: $if $(@expr1073746387 $!@expr1073746388 $assertEquals $(@expr1073746389 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5689 $, false $, $instantiateMatch_ $(@expr1073746390 "integral_constant < bool, sizeof ( ConvertHelper < From, To > :: Create ( ) ) > ;" $, 2 $, ":: %name% (" $, "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5689 $) $) $) { $return
5690:
5691: ; }
5692: $if $(@expr1073746391 $!@expr1073746392 $assertEquals $(@expr1073746393 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5692 $, false $, $instantiateMatch_ $(@expr1073746394 "integral_constant < bool, sizeof ( ns :: ConvertHelper < From, To > :: Create ( ) ) > ;" $, 2 $, ":: %name% (" $, "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5692 $) $) $) { $return
5693:
5694: ; }
5695: }
5696:
5697: void templateParameterWithoutName ( ) {
5698: $if $(@expr1073746395 $!@expr1073746396 $assertEquals $(@expr1073746397 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5698 $, 1U $, templateParameters (@expr1073746398 "template<typename = void> struct s;" ) $) $) { $return ; }
5699: $if $(@expr1073746399 $!@expr1073746400 $assertEquals $(@expr1073746401 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5699 $, 1U $, templateParameters (@expr1073746402 "template<template<typename = float> typename T> struct A {\n    void f();\n    void g();\n};n" ) $) $) { $return
5700:
5701:
5702: ; }
5703: }
5704:
5705: void templateTypeDeduction1 ( ) {
5706: const char code@var623 [@expr1073746403 348 ] =@expr1073746404 "template<typename T>\nvoid f(T n) { (void)n; }\nstatic void func() {\n    f(0);\n    f(0u);\n    f(0U);\n    f(0l);\n    f(0L);\n    f(0ul);\n    f(0UL);\n    f(0ll);\n    f(0LL);\n    f(0ull);\n    f(0ULL);\n    f(0.0);\n    f(0.0f);\n    f(0.0F);\n    f(0.0l);\n    f(0.0L);\n    f('c');\n    f(L'c');\n    f(\"string\");\n    f(L\"string\");\n    f(true);\n    f(false);\n}"
5707:
|
5730:
5731: ;
5732: const char expected@var624 [@expr1073746405 1717 ] =@expr1073746406 "void f<int> ( int n ) ; void f<unsignedint> ( unsigned int n ) ; void f<long> ( long n ) ; void f<unsignedlong> ( unsigned long n ) ; void f<longlong> ( long long n ) ; void f<unsignedlonglong> ( unsigned long long n ) ; void f<double> ( double n ) ; void f<float> ( float n ) ; void f<longdouble> ( long double n ) ; void f<char> ( char n ) ; void f<wchar_t> ( wchar_t n ) ; void f<constchar*> ( const char * n ) ; void f<constwchar_t*> ( const wchar_t * n ) ; void f<bool> ( bool n ) ; static void func ( ) { f<int> ( 0 ) ; f<unsignedint> ( 0u ) ; f<unsignedint> ( 0U ) ; f<long> ( 0l ) ; f<long> ( 0L ) ; f<unsignedlong> ( 0ul ) ; f<unsignedlong> ( 0UL ) ; f<longlong> ( 0ll ) ; f<longlong> ( 0LL ) ; f<unsignedlonglong> ( 0ull ) ; f<unsignedlonglong> ( 0ULL ) ; f<double> ( 0.0 ) ; f<float> ( 0.0f ) ; f<float> ( 0.0F ) ; f<longdouble> ( 0.0l ) ; f<longdouble> ( 0.0L ) ; f<char> ( 'c' ) ; f<wchar_t> ( L'c' ) ; f<constchar*> ( \"string\" ) ; f<constwchar_t*> ( L\"string\" ) ; f<bool> ( true ) ; f<bool> ( false ) ; } void f<int> ( int n ) { ( void ) n ; } void f<unsignedint> ( unsigned int n ) { ( void ) n ; } void f<long> ( long n ) { ( void ) n ; } void f<unsignedlong> ( unsigned long n ) { ( void ) n ; } void f<longlong> ( long long n ) { ( void ) n ; } void f<unsignedlonglong> ( unsigned long long n ) { ( void ) n ; } void f<double> ( double n ) { ( void ) n ; } void f<float> ( float n ) { ( void ) n ; } void f<longdouble> ( long double n ) { ( void ) n ; } void f<char> ( char n ) { ( void ) n ; } void f<wchar_t> ( wchar_t n ) { ( void ) n ; } void f<constchar*> ( const char * n ) { ( void ) n ; } void f<constwchar_t*> ( const wchar_t * n ) { ( void ) n ; } void f<bool> ( bool n ) { ( void ) n ; }"
5733:
|
5782:
5783: ;
5784:
5785: $if $(@expr1073746407 $!@expr1073746408 $assertEquals $(@expr1073746409 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5785 $, expected@var624 $, $tok_ $(@expr1073746410 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5785 $, code@var623 $) $) $) { $return ; }
5786: $if $(@expr1073746411 $!@expr1073746412 $assertEquals $(@expr1073746413 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5786 $, "" $, errout@var100 .@expr1073746414 str (@expr1073746415 ) $) $) { $return ; }
5787: }
5788:
5789: void templateTypeDeduction2 ( ) {
5790: const char code@var625 [@expr1073746416 107 ] =@expr1073746417 "template<typename T, typename U>\nvoid f(T t, U u) { }\nstatic void func() {\n    f(0, 0.0);\n    f(0.0, 0);\n}"
5791:
|
5794:
5795: ;
5796:
5797: const char expected@var626 [@expr1073746418 251 ] =@expr1073746419 "void f<int,double> ( int t , double u ) ; void f<double,int> ( double t , int u ) ; static void func ( ) { f<int,double> ( 0 , 0.0 ) ; f<double,int> ( 0.0, 0 ) ; void f<int,double> ( int t , double u ) { } void f<double,int> ( double t , int u ) { } "
5798:
|
5802:
5803: ;
5804:
5805: const char actual@var627 [@expr1073746420 119 ] =@expr1073746421 "template < typename T , typename U > void f ( T t , U u ) { } static void func ( ) { f ( 0 , 0.0 ) ; f ( 0.0 , 0 ) ; }"
5806:
|
5809:
5810: ;
5811:
5812: $todoAssertEquals $(@expr1073746422 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5812 $, expected@var626 $, actual@var627 $, $tok_ $(@expr1073746423 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5812 $, code@var625 $) $) ;
5813: }
5814:
5815: void templateTypeDeduction3 ( ) {
5816: const char code@var628 [@expr1073746424 136 ] =@expr1073746425 "struct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};\nint main() {\n    A a;\n    a.f();\n}"
5817:
|
5823:
5824: ;
5825: const char exp@var629 [@expr1073746426 159 ] =@expr1073746427 "struct A { int a ; a = 1 ; void f ( ) { g<int> ( 1 ) ; } void g<int> ( int x ) ; } ; int main ( ) { A a ; a . f ( ) ; } void A :: g<int> ( int x ) { a = 2 ; }"
5826:
|
5832:
5833: ;
5834: $if $(@expr1073746428 $!@expr1073746429 $assertEquals $(@expr1073746430 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5834 $, exp@var629 $, $tok_ $(@expr1073746431 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5834 $, code@var628 $) $) $) { $return ; }
5835: }
5836:
5837: void templateTypeDeduction4 ( ) {
5838: {
5839: const char code@var630 [@expr1073746432 90 ] =@expr1073746433 "int a = 1;\ntemplate <typename T> void f(T x, T y) { a = x + y; }\nvoid test() { f(0, 0); }"
5840:
5841: ;
5842: const char exp@var631 [@expr1073746434 131 ] =@expr1073746435 "int a ; a = 1 ; void f<int> ( int x , int y ) ; void test ( ) { f<int> ( 0 , 0 ) ; } void f<int> ( int x , int y ) { a = x + y ; }"
5843:
5844:
5845: ;
5846: $if $(@expr1073746436 $!@expr1073746437 $assertEquals $(@expr1073746438 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5846 $, exp@var631 $, $tok_ $(@expr1073746439 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5846 $, code@var630 $) $) $) { $return ; }
5847: }
5848: {
5849: const char code@var632 [@expr1073746440 97 ] =@expr1073746441 "int a = 1;\ntemplate <typename T> void f(T x, double y) { a = x + y; }\nvoid test() { f(0, 0.0); }"
5850:
5851: ;
5852: const char exp@var633 [@expr1073746442 139 ] =@expr1073746443 "int a ; a = 1 ; void f<int> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0.0 ) ; } void f<int> ( int x , double y ) { a = x + y ; }"
5853:
5854:
5855: ;
5856: $if $(@expr1073746444 $!@expr1073746445 $assertEquals $(@expr1073746446 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5856 $, exp@var633 $, $tok_ $(@expr1073746447 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5856 $, code@var632 $) $) $) { $return ; }
5857: }
5858: {
5859: const char code@var634 [@expr1073746448 97 ] =@expr1073746449 "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\nvoid test() { f(0.0, 0); }"
5860:
5861: ;
5862: const char exp@var635 [@expr1073746450 139 ] =@expr1073746451 "int a ; a = 1 ; void f<int> ( double x , int y ) ; void test ( ) { f<int> ( 0.0 , 0 ) ; } void f<int> ( double x , int y ) { a = x + y ; }"
5863:
5864:
5865: ;
5866: $if $(@expr1073746452 $!@expr1073746453 $assertEquals $(@expr1073746454 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5866 $, exp@var635 $, $tok_ $(@expr1073746455 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5866 $, code@var634 $) $) $) { $return ; }
5867: }
5868:
5869: {
5870: const char code@var636 [@expr1073746456 202 ] =@expr1073746457 "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\ntemplate <typename T> void f(int x, T y) { a = x + y; }\nvoid test() {\n    f(0, 0);\n    f(0.0, 0);\n    f(0, 0.0);\n    f(0.0, 0.0);\n}"
5871:
|
5877:
5878: ;
5879: const char exp@var637 [@expr1073746458 472 ] =@expr1073746459 "int a ; a = 1 ; void f<int> ( int x , int y ) ; void f<int> ( double x , int y ) ; void f<double> ( int x , double y ) ; void f<double> ( double x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<int> ( double x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; } void f<double> ( double x , double y ) { a = x + y ; }"
5880:
|
5892:
5893: ;
5894:
5895: const char act@var638 [@expr1073746460 358 ] =@expr1073746461 "int a ; a = 1 ; template < typename T > void f ( double x , T y ) { a = x + y ; } void f<int> ( int x , int y ) ; void f<double> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; }"
5896:
|
5904:
5905: ;
5906: $todoAssertEquals $(@expr1073746462 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5906 $, exp@var637 $, act@var638 $, $tok_ $(@expr1073746463 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5906 $, code@var636 $) $) ;
5907: }
5908: {
5909: const char code@var639 [@expr1073746464 104 ] =@expr1073746465 "int a = 1;\ntemplate <typename T, typename U> void f(T x, U y) { a = x + y; }\nvoid test() { f(0, 0.0); }"
5910:
5911: ;
5912: const char exp@var640 [@expr1073746466 160 ] =@expr1073746467 "int a ; a = 1 ; void f<int,double> ( int x , double y ) ; void test ( ) { f<int,double> ( 0 , 0.0 ) ; } void f<int,double> ( int x , double y ) { a = x + y ; }"
5913:
5914:
5915: ;
5916: const char act@var641 [@expr1073746468 124 ] =@expr1073746469 "int a ; a = 1 ; template < typename T , typename U > void f ( T x , U y ) { a = x + y ; } void test ( ) { f ( 0 , 0.0 ) ; }"
5917:
5918: ;
5919: $todoAssertEquals $(@expr1073746470 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5919 $, exp@var640 $, act@var641 $, $tok_ $(@expr1073746471 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5919 $, code@var639 $) $) ;
5920: }
5921: }
5922:
5923: void templateTypeDeduction5 ( ) {
5924: {
5925: const char code@var642 [@expr1073746472 160 ] =@expr1073746473 "class Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);"
5926:
|
5931:
5932: ;
5933: const char exp@var643 [@expr1073746474 467 ] =@expr1073746475 "class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; Fred :: Fred<int> ( int t ) { } Fred :: Fred<double> ( double t ) { } Fred :: Fred<constchar*> ( const char * t ) { } Fred :: Fred<bool> ( bool t ) { }"
5934:
|
5946:
5947: ;
5948: $if $(@expr1073746476 $!@expr1073746477 $assertEquals $(@expr1073746478 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5948 $, exp@var643 $, $tok_ $(@expr1073746479 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5948 $, code@var642 $) $) $) { $return ; }
5949: }
5950: {
5951: const char code@var644 [@expr1073746480 309 ] =@expr1073746481 "namespace NS {\nclass Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);\n}\nNS::Fred fred1 = NS::Fred(0);\nNS::Fred fred2 = NS::Fred(0.0);\nNS::Fred fred3 = NS::Fred(\"zero\");\nNS::Fred fred4 = NS::Fred(false);\n"
5952:
|
5963:
5964: ;
5965: const char exp@var645 [@expr1073746482 734 ] =@expr1073746483 "namespace NS { class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; } NS :: Fred fred1 ; fred1 = NS :: Fred<int> ( 0 ) ; NS :: Fred fred2 ; fred2 = NS :: Fred<double> ( 0.0 ) ; NS :: Fred fred3 ; fred3 = NS :: Fred<constchar*> ( \"zero\" ) ; NS :: Fred fred4 ; fred4 = NS :: Fred<bool> ( false ) ; NS :: Fred :: Fred<int> ( int t ) { } NS :: Fred :: Fred<double> ( double t ) { } NS :: Fred :: Fred<constchar*> ( const char * t ) { } NS :: Fred :: Fred<bool> ( bool t ) { }"
5966:
|
5984:
5985: ;
5986: $if $(@expr1073746484 $!@expr1073746485 $assertEquals $(@expr1073746486 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5986 $, exp@var645 $, $tok_ $(@expr1073746487 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5986 $, code@var644 $) $) $) { $return ; }
5987: }
5988: }
5989:
5990: void simplifyTemplateArgs1 ( ) {
5991: $if $(@expr1073746488 $!@expr1073746489 $assertEquals $(@expr1073746490 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5991 $, "foo<2> = 2 ; foo<2> ;" $, $tok_ $(@expr1073746491 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5991 $, "template<int N> foo = N; foo < ( 2 ) >;" $) $) $) { $return ; }
5992: $if $(@expr1073746492 $!@expr1073746493 $assertEquals $(@expr1073746494 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5992 $, "foo<2> = 2 ; foo<2> ;" $, $tok_ $(@expr1073746495 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5992 $, "template<int N> foo = N; foo < 1 + 1 >;" $) $) $) { $return ; }
5993: $if $(@expr1073746496 $!@expr1073746497 $assertEquals $(@expr1073746498 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5993 $, "foo<2> = 2 ; foo<2> ;" $, $tok_ $(@expr1073746499 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5993 $, "template<int N> foo = N; foo < ( 1 + 1 ) >;" $) $) $) { $return ; }
5994:
5995: $if $(@expr1073746500 $!@expr1073746501 $assertEquals $(@expr1073746502 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5995 $, "foo<2,2> = 4 ; foo<2,2> ;" $, $tok_ $(@expr1073746503 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5995 $, "template<int N, int M> foo = N * M; foo < ( 2 ), ( 2 ) >;" $) $) $) { $return ; }
5996: $if $(@expr1073746504 $!@expr1073746505 $assertEquals $(@expr1073746506 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5996 $, "foo<2,2> = 4 ; foo<2,2> ;" $, $tok_ $(@expr1073746507 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5996 $, "template<int N, int M> foo = N * M; foo < 1 + 1, 1 + 1 >;" $) $) $) { $return ; }
5997: $if $(@expr1073746508 $!@expr1073746509 $assertEquals $(@expr1073746510 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5997 $, "foo<2,2> = 4 ; foo<2,2> ;" $, $tok_ $(@expr1073746511 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5997 $, "template<int N, int M> foo = N * M; foo < ( 1 + 1 ), ( 1 + 1 ) >;" $) $) $) { $return ; }
5998:
5999: $if $(@expr1073746512 $!@expr1073746513 $assertEquals $(@expr1073746514 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5999 $, "foo<true> = true ; foo<true> ;" $, $tok_ $(@expr1073746515 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 5999 $, "template<bool N> foo = N; foo < true ? true : false >;" $) $) $) { $return ; }
6000: $if $(@expr1073746516 $!@expr1073746517 $assertEquals $(@expr1073746518 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6000 $, "foo<false> = false ; foo<false> ;" $, $tok_ $(@expr1073746519 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6000 $, "template<bool N> foo = N; foo < false ? true : false >;" $) $) $) { $return ; }
6001: $if $(@expr1073746520 $!@expr1073746521 $assertEquals $(@expr1073746522 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6001 $, "foo<true> = true ; foo<true> ;" $, $tok_ $(@expr1073746523 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6001 $, "template<bool N> foo = N; foo < 1 ? true : false >;" $) $) $) { $return ; }
6002: $if $(@expr1073746524 $!@expr1073746525 $assertEquals $(@expr1073746526 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6002 $, "foo<false> = false ; foo<false> ;" $, $tok_ $(@expr1073746527 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6002 $, "template<bool N> foo = N; foo < 0 ? true : false >;" $) $) $) { $return ; }
6003: $if $(@expr1073746528 $!@expr1073746529 $assertEquals $(@expr1073746530 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6003 $, "foo<true> = true ; foo<true> ;" $, $tok_ $(@expr1073746531 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6003 $, "template<bool N> foo = N; foo < (1 + 1 ) ? true : false >;" $) $) $) { $return ; }
6004: $if $(@expr1073746532 $!@expr1073746533 $assertEquals $(@expr1073746534 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6004 $, "foo<false> = false ; foo<false> ;" $, $tok_ $(@expr1073746535 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6004 $, "template<bool N> foo = N; foo < ( 1 - 1) ? true : false >;" $) $) $) { $return ; }
6005: }
6006:
6007: void simplifyTemplateArgs2 ( ) {
6008: const char code@var646 [@expr1073746536 134 ] =@expr1073746537 "template<bool T> struct a_t { static const bool t = T; };\ntypedef a_t<sizeof(void*) == sizeof(char)> a;\nvoid foo() { bool b = a::t; }"
6009:
6010: ;
6011: const char expected@var647 [@expr1073746538 122 ] =@expr1073746539 "struct a_t<false> ; void foo ( ) { bool b ; b = a_t<false> :: t ; } struct a_t<false> { static const bool t = false ; } ;"
6012:
6013: ;
6014: $if $(@expr1073746540 $!@expr1073746541 $assertEquals $(@expr1073746542 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6014 $, expected@var647 $, $tok_ $(@expr1073746543 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6014 $, code@var646 $) $) $) { $return ; }
6015: }
6016:
6017: void template_variadic_1 ( ) {
6018: const char code@var648 [@expr1073746544 90 ] =@expr1073746545 "template <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<int,int>), \"\");"
6019: ;
6020: const char expected@var649 [@expr1073746546 139 ] =@expr1073746547 "struct e<> ; struct e<int,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<int,int> ) , \"\" ) ; struct e<> { } ; struct e<int,int> { } ;"
6021:
6022: ;
6023: $if $(@expr1073746548 $!@expr1073746549 $assertEquals $(@expr1073746550 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6023 $, expected@var649 $, $tok_ $(@expr1073746551 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6023 $, code@var648 $) $) $) { $return ; }
6024: }
6025:
6026: void template_variadic_2 ( ) {
6027: const char code@var650 [@expr1073746552 146 ] =@expr1073746553 "template<typename T, typename... Args>\nvoid printf(const char *s, T value, Args... args) {}\n\nint main() {\n    printf<int, float>(\"\", foo, bar);\n}"
6028:
|
6031:
6032: ;
6033: const char expected@var651 [@expr1073746554 186 ] =@expr1073746555 "void printf<int,float> ( const char * s , int value , float ) ; int main ( ) { printf<int,float> ( \"\" , foo , bar ) ; } void printf<int,float> ( const char * s , int value , float ) { }"
6034:
6035: ;
6036: $if $(@expr1073746556 $!@expr1073746557 $assertEquals $(@expr1073746558 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6036 $, expected@var651 $, $tok_ $(@expr1073746559 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6036 $, code@var650 $) $) $) { $return ; }
6037: }
6038:
6039: void template_variadic_3 ( ) {
6040: const char code@var652 [@expr1073746560 112 ] =@expr1073746561 "template<int N, int ... M> struct A {   static void foo() {     int i = N;   } }; void bar() {   A<0>::foo(); }"
6041:
|
6046:
6047: ;
6048: const char expected@var653 [@expr1073746562 107 ] =@expr1073746563 "struct A<0> ; void bar ( ) { A<0> :: foo ( ) ; } struct A<0> { static void foo ( ) { int i ; i = 0 ; } } ;"
6049:
6050: ;
6051: $if $(@expr1073746564 $!@expr1073746565 $assertEquals $(@expr1073746566 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6051 $, expected@var653 $, $tok_ $(@expr1073746567 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6051 $, code@var652 $) $) $) { $return ; }
6052: }
6053:
6054: void template_variable_1 ( ) {
6055: {
6056: const char code@var654 [@expr1073746568 54 ] =@expr1073746569 "template <int N> const int foo = N*N;\nint x = foo<7>;"
6057: ;
6058: const char expected@var655 [@expr1073746570 45 ] =@expr1073746571 "const int foo<7> = 49 ; int x ; x = foo<7> ;"
6059: ;
6060: $if $(@expr1073746572 $!@expr1073746573 $assertEquals $(@expr1073746574 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6060 $, expected@var655 $, $tok_ $(@expr1073746575 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6060 $, code@var654 $) $) $) { $return ; }
6061: }
6062: {
6063: const char code@var656 [@expr1073746576 50 ] =@expr1073746577 "template <int> const int foo = 7;\nint x = foo<7>;"
6064: ;
6065: const char expected@var657 [@expr1073746578 44 ] =@expr1073746579 "const int foo<7> = 7 ; int x ; x = foo<7> ;"
6066: ;
6067: $if $(@expr1073746580 $!@expr1073746581 $assertEquals $(@expr1073746582 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6067 $, expected@var657 $, $tok_ $(@expr1073746583 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6067 $, code@var656 $) $) $) { $return ; }
6068: }
6069: {
6070: const char code@var658 [@expr1073746584 58 ] =@expr1073746585 "template <int N = 7> const int foo = N*N;\nint x = foo<7>;"
6071: ;
6072: const char expected@var659 [@expr1073746586 45 ] =@expr1073746587 "const int foo<7> = 49 ; int x ; x = foo<7> ;"
6073: ;
6074: $if $(@expr1073746588 $!@expr1073746589 $assertEquals $(@expr1073746590 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6074 $, expected@var659 $, $tok_ $(@expr1073746591 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6074 $, code@var658 $) $) $) { $return ; }
6075: }
6076: {
6077: const char code@var660 [@expr1073746592 57 ] =@expr1073746593 "template <int N = 7> const int foo = N*N;\nint x = foo<>;"
6078: ;
6079: const char expected@var661 [@expr1073746594 45 ] =@expr1073746595 "const int foo<7> = 49 ; int x ; x = foo<7> ;"
6080: ;
6081: $if $(@expr1073746596 $!@expr1073746597 $assertEquals $(@expr1073746598 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6081 $, expected@var661 $, $tok_ $(@expr1073746599 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6081 $, code@var660 $) $) $) { $return ; }
6082: }
6083: }
6084:
6085: void template_variable_2 ( ) {
6086: {
6087: const char code@var662 [@expr1073746600 83 ] =@expr1073746601 "template<class T> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;"
6088: ;
6089: const char expected@var663 [@expr1073746602 89 ] =@expr1073746603 "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
6090: ;
6091: $if $(@expr1073746604 $!@expr1073746605 $assertEquals $(@expr1073746606 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6091 $, expected@var663 $, $tok_ $(@expr1073746607 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6091 $, code@var662 $) $) $) { $return ; }
6092: }
6093: {
6094: const char code@var664 [@expr1073746608 89 ] =@expr1073746609 "template<class> constexpr float pi = float(3.1415926535897932385L);\nfloat x = pi<float>;"
6095: ;
6096: const char expected@var665 [@expr1073746610 89 ] =@expr1073746611 "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
6097: ;
6098: $if $(@expr1073746612 $!@expr1073746613 $assertEquals $(@expr1073746614 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6098 $, expected@var665 $, $tok_ $(@expr1073746615 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6098 $, code@var664 $) $) $) { $return ; }
6099: }
6100: {
6101: const char code@var666 [@expr1073746616 91 ] =@expr1073746617 "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;"
6102: ;
6103: const char expected@var667 [@expr1073746618 89 ] =@expr1073746619 "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
6104: ;
6105: $if $(@expr1073746620 $!@expr1073746621 $assertEquals $(@expr1073746622 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6105 $, expected@var667 $, $tok_ $(@expr1073746623 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6105 $, code@var666 $) $) $) { $return ; }
6106: }
6107: {
6108: const char code@var668 [@expr1073746624 86 ] =@expr1073746625 "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<>;"
6109: ;
6110: const char expected@var669 [@expr1073746626 89 ] =@expr1073746627 "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
6111: ;
6112: $if $(@expr1073746628 $!@expr1073746629 $assertEquals $(@expr1073746630 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6112 $, expected@var669 $, $tok_ $(@expr1073746631 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6112 $, code@var668 $) $) $) { $return ; }
6113: }
6114: }
6115:
6116: void template_variable_3 ( ) {
6117: {
6118: const char code@var670 [@expr1073746632 75 ] =@expr1073746633 "template<class T, int N> constexpr T foo = T(N*N);\nfloat x = foo<float,7>;"
6119: ;
6120: const char expected@var671 [@expr1073746634 75 ] =@expr1073746635 "constexpr float foo<float,7> = float ( 49 ) ; float x ; x = foo<float,7> ;"
6121: ;
6122: $if $(@expr1073746636 $!@expr1073746637 $assertEquals $(@expr1073746638 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6122 $, expected@var671 $, $tok_ $(@expr1073746639 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6122 $, code@var670 $) $) $) { $return ; }
6123: }
6124: {
6125: const char code@var672 [@expr1073746640 76 ] =@expr1073746641 "template<class,int> constexpr float foo = float(7);\nfloat x = foo<float,7>;"
6126: ;
6127: const char expected@var673 [@expr1073746642 74 ] =@expr1073746643 "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;"
6128: ;
6129: $if $(@expr1073746644 $!@expr1073746645 $assertEquals $(@expr1073746646 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6129 $, expected@var673 $, $tok_ $(@expr1073746647 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6129 $, code@var672 $) $) $) { $return ; }
6130: }
6131: {
6132: const char code@var674 [@expr1073746648 89 ] =@expr1073746649 "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double, 14>;"
6133: ;
6134: const char expected@var675 [@expr1073746650 81 ] =@expr1073746651 "constexpr double foo<double,14> = double ( 7 ) ; double x ; x = foo<double,14> ;"
6135: ;
6136: $if $(@expr1073746652 $!@expr1073746653 $assertEquals $(@expr1073746654 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6136 $, expected@var675 $, $tok_ $(@expr1073746655 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6136 $, code@var674 $) $) $) { $return ; }
6137: }
6138: {
6139: const char code@var676 [@expr1073746656 78 ] =@expr1073746657 "template<class T = float, int N = 7> constexpr T foo = T(7);\nfloat x = foo<>;"
6140: ;
6141: const char expected@var677 [@expr1073746658 74 ] =@expr1073746659 "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;"
6142: ;
6143: $if $(@expr1073746660 $!@expr1073746661 $assertEquals $(@expr1073746662 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6143 $, expected@var677 $, $tok_ $(@expr1073746663 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6143 $, code@var676 $) $) $) { $return ; }
6144: }
6145: {
6146: const char code@var678 [@expr1073746664 85 ] =@expr1073746665 "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double>;"
6147: ;
6148: const char expected@var679 [@expr1073746666 79 ] =@expr1073746667 "constexpr double foo<double,7> = double ( 7 ) ; double x ; x = foo<double,7> ;"
6149: ;
6150: $if $(@expr1073746668 $!@expr1073746669 $assertEquals $(@expr1073746670 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6150 $, expected@var679 $, $tok_ $(@expr1073746671 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6150 $, code@var678 $) $) $) { $return ; }
6151: }
6152: }
6153:
6154: void template_variable_4 ( ) {
6155: const char code@var680 [@expr1073746672 122 ] =@expr1073746673 "template<typename T> void test() { }\ntemplate<typename T> decltype(test<T>)* foo = &(test<T>);\nvoid bar() { foo<int>(); }"
6156:
6157: ;
6158: const char expected@var681 [@expr1073746674 130 ] =@expr1073746675 "void test<int> ( ) ; decltype ( test<int> ) * foo<int> = & ( test<int> ) ; void bar ( ) { foo<int> ( ) ; } void test<int> ( ) { }"
6159:
6160:
6161: ;
6162: $if $(@expr1073746676 $!@expr1073746677 $assertEquals $(@expr1073746678 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6162 $, expected@var681 $, $tok_ $(@expr1073746679 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6162 $, code@var680 $) $) $) { $return ; }
6163: }
6164:
6165: void simplifyDecltype ( ) {
6166: const char code@var682 [@expr1073746680 273 ] =@expr1073746681 "template<typename T> class type { };\ntype<decltype(true)> b;\ntype<decltype(0)> i;\ntype<decltype(0U)> ui;\ntype<decltype(0L)> l;\ntype<decltype(0UL)> ul;\ntype<decltype(0LL)> ll;\ntype<decltype(0ULL)> ull;\ntype<decltype(0.0)> d;\ntype<decltype(0.0F)> f;\ntype<decltype(0.0L)> ld;"
6167:
|
6175:
6176: ;
6177: const char expected@var683 [@expr1073746682 693 ] =@expr1073746683 "class type<bool> ; class type<int> ; class type<unsignedint> ; class type<long> ; class type<unsignedlong> ; class type<longlong> ; class type<unsignedlonglong> ; class type<double> ; class type<float> ; class type<longdouble> ; type<bool> b ; type<int> i ; type<unsignedint> ui ; type<long> l ; type<unsignedlong> ul ; type<longlong> ll ; type<unsignedlonglong> ull ; type<double> d ; type<float> f ; type<longdouble> ld ; class type<bool> { } ; class type<int> { } ; class type<unsignedint> { } ; class type<long> { } ; class type<unsignedlong> { } ; class type<longlong> { } ; class type<unsignedlonglong> { } ; class type<double> { } ; class type<float> { } ; class type<longdouble> { } ;"
6178:
|
6205:
6206: ;
6207: $if $(@expr1073746684 $!@expr1073746685 $assertEquals $(@expr1073746686 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6207 $, expected@var683 $, $tok_ $(@expr1073746687 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6207 $, code@var682 $) $) $) { $return ; }
6208: }
6209:
6210: void castInExpansion ( ) {
6211: const char code@var684 [@expr1073746688 194 ] =@expr1073746689 "template <int N> class C { };\ntemplate <typename TC> class Base {};\ntemplate <typename TC> class Derived : private Base<TC> {};\ntypedef Derived<C<static_cast<int>(-1)> > C_;\nclass C3 { C_ c; };"
6212:
6213:
6214:
6215: ;
6216: const char expected@var685 [@expr1073746690 279 ] =@expr1073746691 "template < int N > class C { } ; class Base<C<static_cast<int>-1>> ; class Derived<C<static_cast<int>-1>> ; class C3 { Derived<C<static_cast<int>-1>> c ; } ; class Derived<C<static_cast<int>-1>> : private Base<C<static_cast<int>-1>> { } ; class Base<C<static_cast<int>-1>> { } ;"
6217:
|
6220:
6221: ;
6222: $if $(@expr1073746692 $!@expr1073746693 $assertEquals $(@expr1073746694 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6222 $, expected@var685 $, $tok_ $(@expr1073746695 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6222 $, code@var684 $) $) $) { $return ; }
6223: }
6224:
6225: void fold_expression_1 ( ) {
6226: const char code@var686 [@expr1073746696 105 ] =@expr1073746697 "template<typename... Args> bool all(Args... args) { return (... && args); }\nx=all(true,false,true,true);"
6227: ;
6228: const char expected@var687 [@expr1073746698 150 ] =@expr1073746699 "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;" ;
6229: $if $(@expr1073746700 $!@expr1073746701 $assertEquals $(@expr1073746702 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6229 $, expected@var687 $, $tok_ $(@expr1073746703 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6229 $, code@var686 $) $) $) { $return ; }
6230: }
6231:
6232: void fold_expression_2 ( ) {
6233: const char code@var688 [@expr1073746704 105 ] =@expr1073746705 "template<typename... Args> bool all(Args... args) { return (args && ...); }\nx=all(true,false,true,true);"
6234: ;
6235: const char expected@var689 [@expr1073746706 150 ] =@expr1073746707 "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;" ;
6236: $if $(@expr1073746708 $!@expr1073746709 $assertEquals $(@expr1073746710 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6236 $, expected@var689 $, $tok_ $(@expr1073746711 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6236 $, code@var688 $) $) $) { $return ; }
6237: }
6238:
6239: void fold_expression_3 ( ) {
6240: const char code@var690 [@expr1073746712 91 ] =@expr1073746713 "template<typename... Args> int foo(Args... args) { return (12 * ... * args); }\nx=foo(1,2);"
6241: ;
6242: const char expected@var691 [@expr1073746714 127 ] =@expr1073746715 "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;" ;
6243: $if $(@expr1073746716 $!@expr1073746717 $assertEquals $(@expr1073746718 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6243 $, expected@var691 $, $tok_ $(@expr1073746719 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6243 $, code@var690 $) $) $) { $return ; }
6244: }
6245:
6246: void fold_expression_4 ( ) {
6247: const char code@var692 [@expr1073746720 92 ] =@expr1073746721 "template<typename... Args> int foo(Args... args) { return (args * ... * 123); }\nx=foo(1,2);"
6248: ;
6249: const char expected@var693 [@expr1073746722 127 ] =@expr1073746723 "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;" ;
6250: $if $(@expr1073746724 $!@expr1073746725 $assertEquals $(@expr1073746726 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6250 $, expected@var693 $, $tok_ $(@expr1073746727 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6250 $, code@var692 $) $) $) { $return ; }
6251: }
6252:
6253: void concepts1 ( ) {
6254: const char code@var694 [@expr1073746728 52 ] =@expr1073746729 "template <my_concept T> void f(T v) {}\nf<int>(123);"
6255: ;
6256: const char expected@var695 [@expr1073746730 67 ] =@expr1073746731 "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" ;
6257: $if $(@expr1073746732 $!@expr1073746733 $assertEquals $(@expr1073746734 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6257 $, expected@var695 $, $tok_ $(@expr1073746735 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6257 $, code@var694 $) $) $) { $return ; }
6258: }
6259:
6260: void requires1 ( ) {
6261: const char code@var696 [@expr1073746736 70 ] =@expr1073746737 "template <class T> requires my_concept<T> void f(T v) {}\nf<int>(123);"
6262: ;
6263: const char expected@var697 [@expr1073746738 67 ] =@expr1073746739 "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" ;
6264: $if $(@expr1073746740 $!@expr1073746741 $assertEquals $(@expr1073746742 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6264 $, expected@var697 $, $tok_ $(@expr1073746743 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6264 $, code@var696 $) $) $) { $return ; }
6265: }
6266:
6267: void requires2 ( ) {
6268: const char code@var698 [@expr1073746744 88 ] =@expr1073746745 "template<class T> requires (sizeof(T) > 1 && get_value<T>()) void f(T v){}\nf<int>(123);"
6269: ;
6270: const char expected@var699 [@expr1073746746 67 ] =@expr1073746747 "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" ;
6271: $if $(@expr1073746748 $!@expr1073746749 $assertEquals $(@expr1073746750 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6271 $, expected@var699 $, $tok_ $(@expr1073746751 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6271 $, code@var698 $) $) $) { $return ; }
6272: }
6273:
6274: void requires3 ( ) {
6275: const char code@var700 [@expr1073746752 69 ] =@expr1073746753 "template<class T> requires c1<T> && c2<T> void f(T v){}\nf<int>(123);"
6276: ;
6277: const char expected@var701 [@expr1073746754 67 ] =@expr1073746755 "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" ;
6278: $if $(@expr1073746756 $!@expr1073746757 $assertEquals $(@expr1073746758 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6278 $, expected@var701 $, $tok_ $(@expr1073746759 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6278 $, code@var700 $) $) $) { $return ; }
6279: }
6280:
6281: void requires4 ( ) {
6282: const char code@var702 [@expr1073746760 70 ] =@expr1073746761 "template <class T> void f(T v) requires my_concept<T> {}\nf<int>(123);"
6283: ;
6284: const char expected@var703 [@expr1073746762 67 ] =@expr1073746763 "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" ;
6285: $if $(@expr1073746764 $!@expr1073746765 $assertEquals $(@expr1073746766 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6285 $, expected@var703 $, $tok_ $(@expr1073746767 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6285 $, code@var702 $) $) $) { $return ; }
6286: }
6287:
6288: void requires5 ( ) {
6289: const char code@var704 [@expr1073746768 111 ] =@expr1073746769 "template <class T>\n  requires requires (T x) { x + x; }\n  T add(T a, T b) { return a + b; }\nadd<int>(123,456);"
6290:
6291:
6292: ;
6293: const char expected@var705 [@expr1073746770 108 ] =@expr1073746771 "int add<int> ( int a , int b ) ; add<int> ( 123 , 456 ) ; int add<int> ( int a , int b ) { return a + b ; }" ;
6294: $if $(@expr1073746772 $!@expr1073746773 $assertEquals $(@expr1073746774 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6294 $, expected@var705 $, $tok_ $(@expr1073746775 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6294 $, code@var704 $) $) $) { $return ; }
6295: }
6296:
6297: void explicitBool1 ( ) {
6298: const char code@var706 [@expr1073746776 42 ] =@expr1073746777 "class Fred { explicit(true) Fred(int); };" ;
6299: $if $(@expr1073746778 $!@expr1073746779 $assertEquals $(@expr1073746780 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6299 $, "class Fred { explicit Fred ( int ) ; } ;" $, $tok_ $(@expr1073746781 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6299 $, code@var706 $) $) $) { $return ; }
6300: }
6301:
6302: void explicitBool2 ( ) {
6303: const char code@var707 [@expr1073746782 43 ] =@expr1073746783 "class Fred { explicit(false) Fred(int); };" ;
6304: $if $(@expr1073746784 $!@expr1073746785 $assertEquals $(@expr1073746786 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6304 $, "class Fred { Fred ( int ) ; } ;" $, $tok_ $(@expr1073746787 "cppcheck-2.8/test/testsimplifytemplate.cpp" $, 6304 $, code@var707 $) $) $) { $return ; }
6305: }
6306: } ;
6307:
6308: $namespace ${ TestSimplifyTemplate instance_TestSimplifyTemplate@var708 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@173}
  v {!<=-1,!>=2,0@173}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 37
  "TestSimplifyTemplate" always "TestSimplifyTemplate"
Line 46
  = always 1
  true always 1
Line 48
  ( always {!<=-1,!>=2}
  "template1" always "template1"
  false always 0
  false always 0
Line 49
  ( always {!<=-1,!>=2}
  "template2" always "template2"
  false always 0
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "template3" always "template3"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "template4" always "template4"
  false always 0
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "template5" always "template5"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "template6" always "template6"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "template7" always "template7"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "template8" always "template8"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "template9" always "template9"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "template10" always "template10"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "template11" always "template11"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "template12" always "template12"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "template13" always "template13"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "template14" always "template14"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "template15" always "template15"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "template16" always "template16"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "template17" always "template17"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "template18" always "template18"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "template19" always "template19"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "template20" always "template20"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "template21" always "template21"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "template22" always "template22"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "template23" always "template23"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "template24" always "template24"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "template25" always "template25"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "template26" always "template26"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "template27" always "template27"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "template28" always "template28"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "template30" always "template30"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "template31" always "template31"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "template32" always "template32"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "template33" always "template33"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "template34" always "template34"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "template35" always "template35"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "template36" always "template36"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "template37" always "template37"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "template38" always "template38"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "template39" always "template39"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "template40" always "template40"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "template41" always "template41"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "template42" always "template42"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "template43" always "template43"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "template44" always "template44"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "template45" always "template45"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "template46" always "template46"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "template47" always "template47"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "template48" always "template48"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "template49" always "template49"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "template50" always "template50"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "template52" always "template52"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "template53" always "template53"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "template54" always "template54"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "template55" always "template55"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "template56" always "template56"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "template57" always "template57"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "template58" always "template58"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "template59" always "template59"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "template60" always "template60"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "template61" always "template61"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "template62" always "template62"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "template63" always "template63"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "template64" always "template64"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "template65" always "template65"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "template66" always "template66"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "template67" always "template67"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "template68" always "template68"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "template69" always "template69"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "template70" always "template70"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "template71" always "template71"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "template72" always "template72"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "template73" always "template73"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "template74" always "template74"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "template75" always "template75"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "template76" always "template76"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "template77" always "template77"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "template78" always "template78"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "template79" always "template79"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "template80" always "template80"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "template81" always "template81"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "template82" always "template82"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "template83" always "template83"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "template84" always "template84"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "template85" always "template85"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "template86" always "template86"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "template87" always "template87"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "template88" always "template88"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "template89" always "template89"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "template90" always "template90"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "template91" always "template91"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "template92" always "template92"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "template93" always "template93"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "template94" always "template94"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "template95" always "template95"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "template96" always "template96"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "template97" always "template97"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "template98" always "template98"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "template99" always "template99"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "template100" always "template100"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "template101" always "template101"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "template102" always "template102"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "template103" always "template103"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "template104" always "template104"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "template105" always "template105"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "template106" always "template106"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "template107" always "template107"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "template108" always "template108"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "template109" always "template109"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "template110" always "template110"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "template111" always "template111"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "template112" always "template112"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "template113" always "template113"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "template114" always "template114"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "template115" always "template115"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "template116" always "template116"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "template117" always "template117"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "template118" always "template118"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "template119" always "template119"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "template120" always "template120"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "template121" always "template121"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "template122" always "template122"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "template123" always "template123"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "template124" always "template124"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "template125" always "template125"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "template126" always "template126"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "template127" always "template127"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "template128" always "template128"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "template129" always "template129"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "template130" always "template130"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "template131" always "template131"
  false always 0
  false always 0
Line 177
  ( always {!<=-1,!>=2}
  "template132" always "template132"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "template133" always "template133"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "template134" always "template134"
  false always 0
  false always 0
Line 180
  ( always {!<=-1,!>=2}
  "template135" always "template135"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "template136" always "template136"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "template137" always "template137"
  false always 0
  false always 0
Line 183
  ( always {!<=-1,!>=2}
  "template138" always "template138"
  false always 0
  false always 0
Line 184
  ( always {!<=-1,!>=2}
  "template139" always "template139"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "template140" always "template140"
  false always 0
  false always 0
Line 186
  ( always {!<=-1,!>=2}
  "template141" always "template141"
  false always 0
  false always 0
Line 187
  ( always {!<=-1,!>=2}
  "template142" always "template142"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "template143" always "template143"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "template144" always "template144"
  false always 0
  false always 0
Line 190
  ( always {!<=-1,!>=2}
  "template145" always "template145"
  false always 0
  false always 0
Line 191
  ( always {!<=-1,!>=2}
  "template146" always "template146"
  false always 0
  false always 0
Line 192
  ( always {!<=-1,!>=2}
  "template147" always "template147"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "template148" always "template148"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "template149" always "template149"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "template150" always "template150"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "template151" always "template151"
  false always 0
  false always 0
Line 197
  ( always {!<=-1,!>=2}
  "template152" always "template152"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "template153" always "template153"
  false always 0
  false always 0
Line 199
  ( always {!<=-1,!>=2}
  "template154" always "template154"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "template155" always "template155"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "template156" always "template156"
  false always 0
  false always 0
Line 202
  ( always {!<=-1,!>=2}
  "template157" always "template157"
  false always 0
  false always 0
Line 203
  ( always {!<=-1,!>=2}
  "template158" always "template158"
  false always 0
  false always 0
Line 204
  ( always {!<=-1,!>=2}
  "template159" always "template159"
  false always 0
  false always 0
Line 205
  ( always {!<=-1,!>=2}
  "template160" always "template160"
  false always 0
  false always 0
Line 206
  ( always {!<=-1,!>=2}
  "template161" always "template161"
  false always 0
  false always 0
Line 207
  ( always {!<=-1,!>=2}
  "template162" always "template162"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "template163" always "template163"
  false always 0
  false always 0
Line 209
  ( always {!<=-1,!>=2}
  "template164" always "template164"
  false always 0
  false always 0
Line 210
  ( always {!<=-1,!>=2}
  "template165" always "template165"
  false always 0
  false always 0
Line 211
  ( always {!<=-1,!>=2}
  "template166" always "template166"
  false always 0
  false always 0
Line 212
  ( always {!<=-1,!>=2}
  "template167" always "template167"
  false always 0
  false always 0
Line 213
  ( always {!<=-1,!>=2}
  "template168" always "template168"
  false always 0
  false always 0
Line 214
  ( always {!<=-1,!>=2}
  "template169" always "template169"
  false always 0
  false always 0
Line 215
  ( always {!<=-1,!>=2}
  "template170" always "template170"
  false always 0
  false always 0
Line 216
  ( always {!<=-1,!>=2}
  "template171" always "template171"
  false always 0
  false always 0
Line 217
  ( always {!<=-1,!>=2}
  "template172" always "template172"
  false always 0
  false always 0
Line 218
  ( always {!<=-1,!>=2}
  "template173" always "template173"
  false always 0
  false always 0
Line 219
  ( always {!<=-1,!>=2}
  "template174" always "template174"
  false always 0
  false always 0
Line 220
  ( always {!<=-1,!>=2}
  "template175" always "template175"
  false always 0
  false always 0
Line 221
  ( always {!<=-1,!>=2}
  "template_specialization_1" always "template_specialization_1"
  false always 0
  false always 0
Line 222
  ( always {!<=-1,!>=2}
  "template_specialization_2" always "template_specialization_2"
  false always 0
  false always 0
Line 223
  ( always {!<=-1,!>=2}
  "template_enum" always "template_enum"
  false always 0
  false always 0
Line 224
  ( always {!<=-1,!>=2}
  "template_unhandled" always "template_unhandled"
  false always 0
  false always 0
Line 225
  ( always {!<=-1,!>=2}
  "template_default_parameter" always "template_default_parameter"
  false always 0
  false always 0
Line 226
  ( always {!<=-1,!>=2}
  "template_forward_declared_default_parameter" always "template_forward_declared_default_parameter"
  false always 0
  false always 0
Line 227
  ( always {!<=-1,!>=2}
  "template_default_type" always "template_default_type"
  false always 0
  false always 0
Line 228
  ( always {!<=-1,!>=2}
  "template_typename" always "template_typename"
  false always 0
  false always 0
Line 229
  ( always {!<=-1,!>=2}
  "template_constructor" always "template_constructor"
  false always 0
  false always 0
Line 230
  ( always {!<=-1,!>=2}
  "syntax_error_templates_1" always "syntax_error_templates_1"
  false always 0
  false always 0
Line 231
  ( always {!<=-1,!>=2}
  "template_member_ptr" always "template_member_ptr"
  false always 0
  false always 0
Line 232
  ( always {!<=-1,!>=2}
  "template_namespace_1" always "template_namespace_1"
  false always 0
  false always 0
Line 233
  ( always {!<=-1,!>=2}
  "template_namespace_2" always "template_namespace_2"
  false always 0
  false always 0
Line 234
  ( always {!<=-1,!>=2}
  "template_namespace_3" always "template_namespace_3"
  false always 0
  false always 0
Line 235
  ( always {!<=-1,!>=2}
  "template_namespace_4" always "template_namespace_4"
  false always 0
  false always 0
Line 236
  ( always {!<=-1,!>=2}
  "template_namespace_5" always "template_namespace_5"
  false always 0
  false always 0
Line 237
  ( always {!<=-1,!>=2}
  "template_namespace_6" always "template_namespace_6"
  false always 0
  false always 0
Line 238
  ( always {!<=-1,!>=2}
  "template_namespace_7" always "template_namespace_7"
  false always 0
  false always 0
Line 239
  ( always {!<=-1,!>=2}
  "template_namespace_8" always "template_namespace_8"
  false always 0
  false always 0
Line 240
  ( always {!<=-1,!>=2}
  "template_namespace_9" always "template_namespace_9"
  false always 0
  false always 0
Line 241
  ( always {!<=-1,!>=2}
  "template_namespace_10" always "template_namespace_10"
  false always 0
  false always 0
Line 242
  ( always {!<=-1,!>=2}
  "template_namespace_11" always "template_namespace_11"
  false always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
  "template_pointer_type" always "template_pointer_type"
  false always 0
  false always 0
Line 244
  ( always {!<=-1,!>=2}
  "template_array_type" always "template_array_type"
  false always 0
  false always 0
Line 247
  ( always {!<=-1,!>=2}
  "templateParameters" always "templateParameters"
  false always 0
  false always 0
Line 249
  ( always {!<=-1,!>=2}
  "templateNamePosition" always "templateNamePosition"
  false always 0
  false always 0
Line 251
  ( always {!<=-1,!>=2}
  "findTemplateDeclarationEnd" always "findTemplateDeclarationEnd"
  false always 0
  false always 0
Line 253
  ( always {!<=-1,!>=2}
  "getTemplateParametersInDeclaration" always "getTemplateParametersInDeclaration"
  false always 0
  false always 0
Line 255
  ( always {!<=-1,!>=2}
  "expandSpecialized1" always "expandSpecialized1"
  false always 0
  false always 0
Line 256
  ( always {!<=-1,!>=2}
  "expandSpecialized2" always "expandSpecialized2"
  false always 0
  false always 0
Line 257
  ( always {!<=-1,!>=2}
  "expandSpecialized3" always "expandSpecialized3"
  false always 0
  false always 0
Line 258
  ( always {!<=-1,!>=2}
  "expandSpecialized4" always "expandSpecialized4"
  false always 0
  false always 0
Line 259
  ( always {!<=-1,!>=2}
  "expandSpecialized5" always "expandSpecialized5"
  false always 0
  false always 0
Line 261
  ( always {!<=-1,!>=2}
  "templateAlias1" always "templateAlias1"
  false always 0
  false always 0
Line 262
  ( always {!<=-1,!>=2}
  "templateAlias2" always "templateAlias2"
  false always 0
  false always 0
Line 263
  ( always {!<=-1,!>=2}
  "templateAlias3" always "templateAlias3"
  false always 0
  false always 0
Line 264
  ( always {!<=-1,!>=2}
  "templateAlias4" always "templateAlias4"
  false always 0
  false always 0
Line 265
  ( always {!<=-1,!>=2}
  "templateAlias5" always "templateAlias5"
  false always 0
  false always 0
Line 268
  ( always {!<=-1,!>=2}
  "instantiateMatchTest" always "instantiateMatchTest"
  false always 0
  false always 0
Line 269
  ( always {!<=-1,!>=2}
  "templateParameterWithoutName" always "templateParameterWithoutName"
  false always 0
  false always 0
Line 271
  ( always {!<=-1,!>=2}
  "templateTypeDeduction1" always "templateTypeDeduction1"
  false always 0
  false always 0
Line 272
  ( always {!<=-1,!>=2}
  "templateTypeDeduction2" always "templateTypeDeduction2"
  false always 0
  false always 0
Line 273
  ( always {!<=-1,!>=2}
  "templateTypeDeduction3" always "templateTypeDeduction3"
  false always 0
  false always 0
Line 274
  ( always {!<=-1,!>=2}
  "templateTypeDeduction4" always "templateTypeDeduction4"
  false always 0
  false always 0
Line 275
  ( always {!<=-1,!>=2}
  "templateTypeDeduction5" always "templateTypeDeduction5"
  false always 0
  false always 0
Line 277
  ( always {!<=-1,!>=2}
  "simplifyTemplateArgs1" always "simplifyTemplateArgs1"
  false always 0
  false always 0
Line 278
  ( always {!<=-1,!>=2}
  "simplifyTemplateArgs2" always "simplifyTemplateArgs2"
  false always 0
  false always 0
Line 280
  ( always {!<=-1,!>=2}
  "template_variadic_1" always "template_variadic_1"
  false always 0
  false always 0
Line 281
  ( always {!<=-1,!>=2}
  "template_variadic_2" always "template_variadic_2"
  false always 0
  false always 0
Line 282
  ( always {!<=-1,!>=2}
  "template_variadic_3" always "template_variadic_3"
  false always 0
  false always 0
Line 284
  ( always {!<=-1,!>=2}
  "template_variable_1" always "template_variable_1"
  false always 0
  false always 0
Line 285
  ( always {!<=-1,!>=2}
  "template_variable_2" always "template_variable_2"
  false always 0
  false always 0
Line 286
  ( always {!<=-1,!>=2}
  "template_variable_3" always "template_variable_3"
  false always 0
  false always 0
Line 287
  ( always {!<=-1,!>=2}
  "template_variable_4" always "template_variable_4"
  false always 0
  false always 0
Line 289
  ( always {!<=-1,!>=2}
  "simplifyDecltype" always "simplifyDecltype"
  false always 0
  false always 0
Line 291
  ( always {!<=-1,!>=2}
  "castInExpansion" always "castInExpansion"
  false always 0
  false always 0
Line 293
  ( always {!<=-1,!>=2}
  "fold_expression_1" always "fold_expression_1"
  false always 0
  false always 0
Line 294
  ( always {!<=-1,!>=2}
  "fold_expression_2" always "fold_expression_2"
  false always 0
  false always 0
Line 295
  ( always {!<=-1,!>=2}
  "fold_expression_3" always "fold_expression_3"
  false always 0
  false always 0
Line 296
  ( always {!<=-1,!>=2}
  "fold_expression_4" always "fold_expression_4"
  false always 0
  false always 0
Line 298
  ( always {!<=-1,!>=2}
  "concepts1" always "concepts1"
  false always 0
  false always 0
Line 299
  ( always {!<=-1,!>=2}
  "requires1" always "requires1"
  false always 0
  false always 0
Line 300
  ( always {!<=-1,!>=2}
  "requires2" always "requires2"
  false always 0
  false always 0
Line 301
  ( always {!<=-1,!>=2}
  "requires3" always "requires3"
  false always 0
  false always 0
Line 302
  ( always {!<=-1,!>=2}
  "requires4" always "requires4"
  false always 0
  false always 0
Line 303
  ( always {!<=-1,!>=2}
  "requires5" always "requires5"
  false always 0
  false always 0
Line 305
  ( always {!<=-1,!>=2}
  "explicitBool1" always "explicitBool1"
  false always 0
  false always 0
Line 306
  ( always {!<=-1,!>=2}
  "explicitBool2" always "explicitBool2"
  false always 0
  false always 0
Line 310
  , always 0
  debugwarnings always {!<=-1,!>=2}
  = always 0
  false always 0
Line 311
  "" always ""
Line 313
  = {!<=-1,!>=2,1@103}
  debugwarnings {!<=-1,!>=2,1@103}
Line 315
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 317
  code possible {"class Fred { explicit(false) Fred(int); };"@1,"class Fred { explicit(true) Fred(int); };"@2,"template <class T>\n  requires requires (T x) { x + x; }\n  T add(T a, T b) { return a + b; }\nadd<int>(123,456);"@3,"template <class T> void f(T v) requires my_concept<T> {}\nf<int>(123);"@4,"template<class T> requires c1<T> && c2<T> void f(T v){}\nf<int>(123);"@5,"template<class T> requires (sizeof(T) > 1 && get_value<T>()) void f(T v){}\nf<int>(123);"@6,"template <class T> requires my_concept<T> void f(T v) {}\nf<int>(123);"@7,"template <my_concept T> void f(T v) {}\nf<int>(123);"@8,"template<typename... Args> int foo(Args... args) { return (args * ... * 123); }\nx=foo(1,2);"@9,"template<typename... Args> int foo(Args... args) { return (12 * ... * args); }\nx=foo(1,2);"@10}
Line 318
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytemplate.cpp"@1,"cppcheck-2.8/test/testsimplifytemplate.cpp"@2,"cppcheck-2.8/test/testsimplifytemplate.cpp"@3,"cppcheck-2.8/test/testsimplifytemplate.cpp"@4,"cppcheck-2.8/test/testsimplifytemplate.cpp"@5,"cppcheck-2.8/test/testsimplifytemplate.cpp"@6,"cppcheck-2.8/test/testsimplifytemplate.cpp"@7,"cppcheck-2.8/test/testsimplifytemplate.cpp"@8,"cppcheck-2.8/test/testsimplifytemplate.cpp"@9,"cppcheck-2.8/test/testsimplifytemplate.cpp"@10}
  line inconclusive {6304@1,6299@2,6294@3,6285@4,6278@5,6271@6,6264@7,6257@8,6250@9,6243@10}
  "test.cpp" always "test.cpp"
Line 320
  nullptr always 0
  true always 1
Line 324
  51 always 51
  = always "template <class T> T f(T val) { T a; }\nf<int>(10);"
  "template <class T> T f(T val) { T a; }\nf<int>(10);" always "template <class T> T f(T val) { T a; }\nf<int>(10);"
Line 327
  76 always 76
  = always "int f<int> ( int val ) ; f<int> ( 10 ) ; int f<int> ( int val ) { int a ; }"
  "int f<int> ( int val ) ; f<int> ( 10 ) ; int f<int> ( int val ) { int a ; }" always "int f<int> ( int val ) ; f<int> ( 10 ) ; int f<int> ( int val ) { int a ; }"
Line 331
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  331 always 331
  expected always "int f<int> ( int val ) ; f<int> ( 10 ) ; int f<int> ( int val ) { int a ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  331 always 331
  code always "template <class T> T f(T val) { T a; }\nf<int>(10);"
Line 335
  56 always 56
  = always "template <class T> class Fred { T a; };\nFred<int> fred;"
  "template <class T> class Fred { T a; };\nFred<int> fred;" always "template <class T> class Fred { T a; };\nFred<int> fred;"
Line 338
  65 always 65
  = always "class Fred<int> ; Fred<int> fred ; class Fred<int> { int a ; } ;"
  "class Fred<int> ; Fred<int> fred ; class Fred<int> { int a ; } ;" always "class Fred<int> ; Fred<int> fred ; class Fred<int> { int a ; } ;"
Line 342
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  342 always 342
  expected always "class Fred<int> ; Fred<int> fred ; class Fred<int> { int a ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  342 always 342
  code always "template <class T> class Fred { T a; };\nFred<int> fred;"
Line 346
  75 always 75
  = always "template <class T, int sz> class Fred { T data[sz]; };\nFred<float,4> fred;"
  "template <class T, int sz> class Fred { T data[sz]; };\nFred<float,4> fred;" always "template <class T, int sz> class Fred { T data[sz]; };\nFred<float,4> fred;"
Line 349
  88 always 88
  = always "class Fred<float,4> ; Fred<float,4> fred ; class Fred<float,4> { float data [ 4 ] ; } ;"
  "class Fred<float,4> ; Fred<float,4> fred ; class Fred<float,4> { float data [ 4 ] ; } ;" always "class Fred<float,4> ; Fred<float,4> fred ; class Fred<float,4> { float data [ 4 ] ; } ;"
Line 353
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  353 always 353
  expected always "class Fred<float,4> ; Fred<float,4> fred ; class Fred<float,4> { float data [ 4 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  353 always 353
  code always "template <class T, int sz> class Fred { T data[sz]; };\nFred<float,4> fred;"
Line 357
  61 always 61
  = always "template <class T> class Fred { Fred(); };\nFred<float> fred;"
  "template <class T> class Fred { Fred(); };\nFred<float> fred;" always "template <class T> class Fred { Fred(); };\nFred<float> fred;"
Line 360
  81 always 81
  = always "class Fred<float> ; Fred<float> fred ; class Fred<float> { Fred<float> ( ) ; } ;"
  "class Fred<float> ; Fred<float> fred ; class Fred<float> { Fred<float> ( ) ; } ;" always "class Fred<float> ; Fred<float> fred ; class Fred<float> { Fred<float> ( ) ; } ;"
Line 364
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  364 always 364
  expected always "class Fred<float> ; Fred<float> fred ; class Fred<float> { Fred<float> ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  364 always 364
  code always "template <class T> class Fred { Fred(); };\nFred<float> fred;"
Line 368
  92 always 92
  = always "template <class T> class Fred { };\ntemplate <class T> Fred<T>::Fred() { }\nFred<float> fred;"
  "template <class T> class Fred { };\ntemplate <class T> Fred<T>::Fred() { }\nFred<float> fred;" always "template <class T> class Fred { };\ntemplate <class T> Fred<T>::Fred() { }\nFred<float> fred;"
Line 372
  98 always 98
  = always "class Fred<float> ; Fred<float> fred ; class Fred<float> { } ; Fred<float> :: Fred<float> ( ) { }"
  "class Fred<float> ; Fred<float> fred ; class Fred<float> { } ; Fred<float> :: Fred<float> ( ) { }" always "class Fred<float> ; Fred<float> fred ; class Fred<float> { } ; Fred<float> :: Fred<float> ( ) { }"
Line 377
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  377 always 377
  expected always "class Fred<float> ; Fred<float> fred ; class Fred<float> { } ; Fred<float> :: Fred<float> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  377 always 377
  code always "template <class T> class Fred { };\ntemplate <class T> Fred<T>::Fred() { }\nFred<float> fred;"
Line 381
  73 always 73
  = always "template <class T> class Fred { };\nFred<float> fred1;\nFred<float> fred2;"
  "template <class T> class Fred { };\nFred<float> fred1;\nFred<float> fred2;" always "template <class T> class Fred { };\nFred<float> fred1;\nFred<float> fred2;"
Line 385
  84 always 84
  = always "class Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; class Fred<float> { } ;"
  "class Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; class Fred<float> { } ;" always "class Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; class Fred<float> { } ;"
Line 390
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  390 always 390
  expected always "class Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; class Fred<float> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  390 always 390
  code always "template <class T> class Fred { };\nFred<float> fred1;\nFred<float> fred2;"
Line 396
  65 always 65
  = always "template <class T>\nclass ABC\n{\npublic:\n    typedef ABC<T> m;\n};\n"
  "template <class T>\nclass ABC\n{\npublic:\n    typedef ABC<T> m;\n};\n" always "template <class T>\nclass ABC\n{\npublic:\n    typedef ABC<T> m;\n};\n"
Line 403
  45 always 45
  = always "template < class T > class ABC { public: } ;"
  "template < class T > class ABC { public: } ;" always "template < class T > class ABC { public: } ;"
Line 405
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  405 always 405
  expected always "template < class T > class ABC { public: } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  405 always 405
  code always "template <class T>\nclass ABC\n{\npublic:\n    typedef ABC<T> m;\n};\n"
Line 409
  150 always 150
  = always "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n};\nint main() {\n    ABC<int>::type v;\n    v.push_back(4);\n    return 0;\n}\n"
  "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n};\nint main() {\n    ABC<int>::type v;\n    v.push_back(4);\n    return 0;\n}\n" always "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n};\nint main() {\n    ABC<int>::type v;\n    v.push_back(4);\n    return 0;\n}\n"
Line 419
  122 always 122
  = always "class ABC<int> ; int main ( ) { std :: vector < int > v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;"
  "class ABC<int> ; int main ( ) { std :: vector < int > v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;" always "class ABC<int> ; int main ( ) { std :: vector < int > v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;"
Line 427
  117 always 117
  = always "class ABC<int> ; int main ( ) { ABC<int> :: type v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;"
  "class ABC<int> ; int main ( ) { ABC<int> :: type v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;" always "class ABC<int> ; int main ( ) { ABC<int> :: type v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;"
Line 435
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  435 always 435
  wanted always "class ABC<int> ; int main ( ) { std :: vector < int > v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;"
  current always "class ABC<int> ; int main ( ) { ABC<int> :: type v ; v . push_back ( 4 ) ; return 0 ; } class ABC<int> { public: } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  435 always 435
  code always "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n};\nint main() {\n    ABC<int>::type v;\n    v.push_back(4);\n    return 0;\n}\n"
Line 439
  150 always 150
  = always "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n    void f()\n    {\n      ABC<int>::type v;\n      v.push_back(4);\n    }\n};\n"
  "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n    void f()\n    {\n      ABC<int>::type v;\n      v.push_back(4);\n    }\n};\n" always "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n    void f()\n    {\n      ABC<int>::type v;\n      v.push_back(4);\n    }\n};\n"
Line 449
  109 always 109
  = always "template < typename T > class ABC { public: void f ( ) { ABC < int > :: type v ; v . push_back ( 4 ) ; } } ;"
  "template < typename T > class ABC { public: void f ( ) { ABC < int > :: type v ; v . push_back ( 4 ) ; } } ;" always "template < typename T > class ABC { public: void f ( ) { ABC < int > :: type v ; v . push_back ( 4 ) ; } } ;"
Line 456
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  456 always 456
  expected always "template < typename T > class ABC { public: void f ( ) { ABC < int > :: type v ; v . push_back ( 4 ) ; } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  456 always 456
  code always "template <typename T> class ABC {\npublic:\n    typedef std::vector<T> type;\n    void f()\n    {\n      ABC<int>::type v;\n      v.push_back(4);\n    }\n};\n"
Line 462
  290 always 290
  = always "template<typename T> class A;\ntemplate<typename T> class B;\n\ntypedef A<int> x;\ntypedef B<int> y;\n\ntemplate<typename T> class A {\n    void f() {\n        B<T> a = B<T>::g();\n        T b = 0;\n        if (b)\n            b = 0;\n    }\n};\n\ntemplate<typename T> inline B<T> h() { return B<T>(); }\n"
  "template<typename T> class A;\ntemplate<typename T> class B;\n\ntypedef A<int> x;\ntypedef B<int> y;\n\ntemplate<typename T> class A {\n    void f() {\n        B<T> a = B<T>::g();\n        T b = 0;\n        if (b)\n            b = 0;\n    }\n};\n\ntemplate<typename T> inline B<T> h() { return B<T>(); }\n" always "template<typename T> class A;\ntemplate<typename T> class B;\n\ntypedef A<int> x;\ntypedef B<int> y;\n\ntemplate<typename T> class A {\n    void f() {\n        B<T> a = B<T>::g();\n        T b = 0;\n        if (b)\n            b = 0;\n    }\n};\n\ntemplate<typename T> inline B<T> h() { return B<T>(); }\n"
Line 479
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  479 always 479
  "template < typename T > class A ; template < typename T > class B ; template < typename T > class A { void f ( ) { B < T > a ; a = B < T > :: g ( ) ; T b ; b = 0 ; if ( b ) { b = 0 ; } } } ; template < typename T > B < T > h ( ) { return B < T > ( ) ; }" always "template < typename T > class A ; template < typename T > class B ; template < typename T > class A { void f ( ) { B < T > a ; a = B < T > :: g ( ) ; T b ; b = 0 ; if ( b ) { b = 0 ; } } } ; template < typename T > B < T > h ( ) { return B < T > ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  479 always 479
  code always "template<typename T> class A;\ntemplate<typename T> class B;\n\ntypedef A<int> x;\ntypedef B<int> y;\n\ntemplate<typename T> class A {\n    void f() {\n        B<T> a = B<T>::g();\n        T b = 0;\n        if (b)\n            b = 0;\n    }\n};\n\ntemplate<typename T> inline B<T> h() { return B<T>(); }\n"
Line 484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  484 always 484
  "class A { template < typename T > int foo ( T d ) ; } ;" always "class A { template < typename T > int foo ( T d ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  484 always 484
  "class A{ template<typename T> int foo(T d);};" always "class A{ template<typename T> int foo(T d);};"
Line 488
  174 always 174
  = always "template < typename T > class A { } ;\n\nvoid f ( ) {\n    A < int > a ;\n}\n\ntemplate < typename T >\nclass B {\n    void g ( ) {\n        A < T > b = A < T > :: h ( ) ;\n    }\n} ;\n"
  "template < typename T > class A { } ;\n\nvoid f ( ) {\n    A < int > a ;\n}\n\ntemplate < typename T >\nclass B {\n    void g ( ) {\n        A < T > b = A < T > :: h ( ) ;\n    }\n} ;\n" always "template < typename T > class A { } ;\n\nvoid f ( ) {\n    A < int > a ;\n}\n\ntemplate < typename T >\nclass B {\n    void g ( ) {\n        A < T > b = A < T > :: h ( ) ;\n    }\n} ;\n"
Line 502
  148 always 148
  = always "class A<int> ; void f ( ) { A<int> a ; } template < typename T > class B { void g ( ) { A < T > b ; b = A < T > :: h ( ) ; } } ; class A<int> { } ;"
  "class A<int> ; void f ( ) { A<int> a ; } template < typename T > class B { void g ( ) { A < T > b ; b = A < T > :: h ( ) ; } } ; class A<int> { } ;" always "class A<int> ; void f ( ) { A<int> a ; } template < typename T > class B { void g ( ) { A < T > b ; b = A < T > :: h ( ) ; } } ; class A<int> { } ;"
Line 507
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  507 always 507
  expected always "class A<int> ; void f ( ) { A<int> a ; } template < typename T > class B { void g ( ) { A < T > b ; b = A < T > :: h ( ) ; } } ; class A<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  507 always 507
  code always "template < typename T > class A { } ;\n\nvoid f ( ) {\n    A < int > a ;\n}\n\ntemplate < typename T >\nclass B {\n    void g ( ) {\n        A < T > b = A < T > :: h ( ) ;\n    }\n} ;\n"
Line 511
  97 always 97
  = always "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    foo<3,int>();\n}\n"
  "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    foo<3,int>();\n}\n" always "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    foo<3,int>();\n}\n"
Line 520
  103 always 103
  = always "int * foo<3,int> ( ) ; void f ( ) { foo<3,int> ( ) ; } int * foo<3,int> ( ) { return new int [ 3 ] ; }"
  "int * foo<3,int> ( ) ; void f ( ) { foo<3,int> ( ) ; } int * foo<3,int> ( ) { return new int [ 3 ] ; }" always "int * foo<3,int> ( ) ; void f ( ) { foo<3,int> ( ) ; } int * foo<3,int> ( ) { return new int [ 3 ] ; }"
Line 526
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  526 always 526
  expected always "int * foo<3,int> ( ) ; void f ( ) { foo<3,int> ( ) ; } int * foo<3,int> ( ) { return new int [ 3 ] ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  526 always 526
  code always "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    foo<3,int>();\n}\n"
Line 530
  109 always 109
  = always "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    char * p = foo<3,char>();\n}\n"
  "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    char * p = foo<3,char>();\n}\n" always "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    char * p = foo<3,char>();\n}\n"
Line 539
  124 always 124
  = always "char * foo<3,char> ( ) ; void f ( ) { char * p ; p = foo<3,char> ( ) ; } char * foo<3,char> ( ) { return new char [ 3 ] ; }"
  "char * foo<3,char> ( ) ; void f ( ) { char * p ; p = foo<3,char> ( ) ; } char * foo<3,char> ( ) { return new char [ 3 ] ; }" always "char * foo<3,char> ( ) ; void f ( ) { char * p ; p = foo<3,char> ( ) ; } char * foo<3,char> ( ) { return new char [ 3 ] ; }"
Line 545
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  545 always 545
  expected always "char * foo<3,char> ( ) ; void f ( ) { char * p ; p = foo<3,char> ( ) ; } char * foo<3,char> ( ) { return new char [ 3 ] ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  545 always 545
  code always "template <int ui, typename T> T * foo()\n{ return new T[ui]; }\n\nvoid f ( )\n{\n    char * p = foo<3,char>();\n}\n"
Line 549
  129 always 129
  = always "template <int x, int y, int z>\nclass A : public B<x, y, (x - y) ? ((y < z) ? 1 : -1) : 0>\n{ };\n\nvoid f()\n{\n    A<12,12,11> a;\n}\n"
  "template <int x, int y, int z>\nclass A : public B<x, y, (x - y) ? ((y < z) ? 1 : -1) : 0>\n{ };\n\nvoid f()\n{\n    A<12,12,11> a;\n}\n" always "template <int x, int y, int z>\nclass A : public B<x, y, (x - y) ? ((y < z) ? 1 : -1) : 0>\n{ };\n\nvoid f()\n{\n    A<12,12,11> a;\n}\n"
Line 557
  102 always 102
  = always "class A<12,12,11> ; void f ( ) { A<12,12,11> a ; } class A<12,12,11> : public B < 12 , 12 , 0 > { } ;"
  "class A<12,12,11> ; void f ( ) { A<12,12,11> a ; } class A<12,12,11> : public B < 12 , 12 , 0 > { } ;" always "class A<12,12,11> ; void f ( ) { A<12,12,11> a ; } class A<12,12,11> : public B < 12 , 12 , 0 > { } ;"
Line 564
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  564 always 564
  expected always "class A<12,12,11> ; void f ( ) { A<12,12,11> a ; } class A<12,12,11> : public B < 12 , 12 , 0 > { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  564 always 564
  code always "template <int x, int y, int z>\nclass A : public B<x, y, (x - y) ? ((y < z) ? 1 : -1) : 0>\n{ };\n\nvoid f()\n{\n    A<12,12,11> a;\n}\n"
Line 568
  292 always 292
  = always "class BB {};\n\ntemplate <class T>\nclass AA {\npublic:\n    static AA<T> create(T* newObject);\n    static int size();\n};\n\nclass CC { public: CC(AA<BB>, int) {} };\n\nclass XX {\n    AA<CC> y;\npublic:\n    XX();\n};\n\nXX::XX():\n    y(AA<CC>::create(new CC(AA<BB>(), 0)))\n    {}\n\nint yy[AA<CC>::size()];"
  "class BB {};\n\ntemplate <class T>\nclass AA {\npublic:\n    static AA<T> create(T* newObject);\n    static int size();\n};\n\nclass CC { public: CC(AA<BB>, int) {} };\n\nclass XX {\n    AA<CC> y;\npublic:\n    XX();\n};\n\nXX::XX():\n    y(AA<CC>::create(new CC(AA<BB>(), 0)))\n    {}\n\nint yy[AA<CC>::size()];" always "class BB {};\n\ntemplate <class T>\nclass AA {\npublic:\n    static AA<T> create(T* newObject);\n    static int size();\n};\n\nclass CC { public: CC(AA<BB>, int) {} };\n\nclass XX {\n    AA<CC> y;\npublic:\n    XX();\n};\n\nXX::XX():\n    y(AA<CC>::create(new CC(AA<BB>(), 0)))\n    {}\n\nint yy[AA<CC>::size()];"
Line 590
  421 always 421
  = always "class BB { } ; class AA<BB> ; class AA<CC> ; class CC { public: CC ( AA<BB> , int ) { } } ; class XX { AA<CC> y ; public: XX ( ) ; } ; XX :: XX ( ) : y ( AA<CC> :: create ( new CC ( AA<BB> ( ) , 0 ) ) ) { } int yy [ AA<CC> :: size ( ) ] ; class AA<BB> { public: static AA<BB> create ( BB * newObject ) ; static int size ( ) ; } ; class AA<CC> { public: static AA<CC> create ( CC * newObject ) ; static int size ( ) ; } ;"
  "class BB { } ; class AA<BB> ; class AA<CC> ; class CC { public: CC ( AA<BB> , int ) { } } ; class XX { AA<CC> y ; public: XX ( ) ; } ; XX :: XX ( ) : y ( AA<CC> :: create ( new CC ( AA<BB> ( ) , 0 ) ) ) { } int yy [ AA<CC> :: size ( ) ] ; class AA<BB> { public: static AA<BB> create ( BB * newObject ) ; static int size ( ) ; } ; class AA<CC> { public: static AA<CC> create ( CC * newObject ) ; static int size ( ) ; } ;" always "class BB { } ; class AA<BB> ; class AA<CC> ; class CC { public: CC ( AA<BB> , int ) { } } ; class XX { AA<CC> y ; public: XX ( ) ; } ; XX :: XX ( ) : y ( AA<CC> :: create ( new CC ( AA<BB> ( ) , 0 ) ) ) { } int yy [ AA<CC> :: size ( ) ] ; class AA<BB> { public: static AA<BB> create ( BB * newObject ) ; static int size ( ) ; } ; class AA<CC> { public: static AA<CC> create ( CC * newObject ) ; static int size ( ) ; } ;"
Line 613
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  613 always 613
  expected always "class BB { } ; class AA<BB> ; class AA<CC> ; class CC { public: CC ( AA<BB> , int ) { } } ; class XX { AA<CC> y ; public: XX ( ) ; } ; XX :: XX ( ) : y ( AA<CC> :: create ( new CC ( AA<BB> ( ) , 0 ) ) ) { } int yy [ AA<CC> :: size ( ) ] ; class AA<BB> { public: static AA<BB> create ( BB * newObject ) ; static int size ( ) ; } ; class AA<CC> { public: static AA<CC> create ( CC * newObject ) ; static int size ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  613 always 613
  code always "class BB {};\n\ntemplate <class T>\nclass AA {\npublic:\n    static AA<T> create(T* newObject);\n    static int size();\n};\n\nclass CC { public: CC(AA<BB>, int) {} };\n\nclass XX {\n    AA<CC> y;\npublic:\n    XX();\n};\n\nXX::XX():\n    y(AA<CC>::create(new CC(AA<BB>(), 0)))\n    {}\n\nint yy[AA<CC>::size()];"
Line 617
  69 always 69
  = always "template <> void foo<int *>()\n{ x(); }\n\nint main()\n{\nfoo<int*>();\n}\n"
  "template <> void foo<int *>()\n{ x(); }\n\nint main()\n{\nfoo<int*>();\n}\n" always "template <> void foo<int *>()\n{ x(); }\n\nint main()\n{\nfoo<int*>();\n}\n"
Line 624
  85 always 85
  = always "void foo<int*> ( ) ; void foo<int*> ( ) { x ( ) ; } int main ( ) { foo<int*> ( ) ; }"
  "void foo<int*> ( ) ; void foo<int*> ( ) { x ( ) ; } int main ( ) { foo<int*> ( ) ; }" always "void foo<int*> ( ) ; void foo<int*> ( ) { x ( ) ; } int main ( ) { foo<int*> ( ) ; }"
Line 629
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  629 always 629
  expected always "void foo<int*> ( ) ; void foo<int*> ( ) { x ( ) ; } int main ( ) { foo<int*> ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  629 always 629
  code always "template <> void foo<int *>()\n{ x(); }\n\nint main()\n{\nfoo<int*>();\n}\n"
Line 633
  125 always 125
  = always "template <unsigned int i> void a()\n{\n    a<i-1>();\n}\n\ntemplate <> void a<0>()\n{ }\n\nint main()\n{\n    a<2>();\n    return 0;\n}\n"
  "template <unsigned int i> void a()\n{\n    a<i-1>();\n}\n\ntemplate <> void a<0>()\n{ }\n\nint main()\n{\n    a<2>();\n    return 0;\n}\n" always "template <unsigned int i> void a()\n{\n    a<i-1>();\n}\n\ntemplate <> void a<0>()\n{ }\n\nint main()\n{\n    a<2>();\n    return 0;\n}\n"
Line 648
  163 always 163
  = always "void a<0> ( ) ; void a<2> ( ) ; void a<1> ( ) ; void a<0> ( ) { } int main ( ) { a<2> ( ) ; return 0 ; } void a<2> ( ) { a<1> ( ) ; } void a<1> ( ) { a<0> ( ) ; }"
  "void a<0> ( ) ; void a<2> ( ) ; void a<1> ( ) ; void a<0> ( ) { } int main ( ) { a<2> ( ) ; return 0 ; } void a<2> ( ) { a<1> ( ) ; } void a<1> ( ) { a<0> ( ) ; }" always "void a<0> ( ) ; void a<2> ( ) ; void a<1> ( ) ; void a<0> ( ) { } int main ( ) { a<2> ( ) ; return 0 ; } void a<2> ( ) { a<1> ( ) ; } void a<1> ( ) { a<0> ( ) ; }"
Line 657
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  657 always 657
  expected always "void a<0> ( ) ; void a<2> ( ) ; void a<1> ( ) ; void a<0> ( ) { } int main ( ) { a<2> ( ) ; return 0 ; } void a<2> ( ) { a<1> ( ) ; } void a<1> ( ) { a<0> ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  657 always 657
  code always "template <unsigned int i> void a()\n{\n    a<i-1>();\n}\n\ntemplate <> void a<0>()\n{ }\n\nint main()\n{\n    a<2>();\n    return 0;\n}\n"
Line 660
  83 always 83
  = always "template <int n> struct vec {\n  vec() {}\n  vec(const vec<n-1>& v) {}\n};\n\nvec<4> v;"
  "template <int n> struct vec {\n  vec() {}\n  vec(const vec<n-1>& v) {}\n};\n\nvec<4> v;" always "template <int n> struct vec {\n  vec() {}\n  vec(const vec<n-1>& v) {}\n};\n\nvec<4> v;"
Line 666
  101 always 101
  = always "struct vec<4> ; vec<4> v ; struct vec<4> { vec<4> ( ) { } vec<4> ( const vec < 4 - 1 > & v ) { } } ;"
  "struct vec<4> ; vec<4> v ; struct vec<4> { vec<4> ( ) { } vec<4> ( const vec < 4 - 1 > & v ) { } } ;" always "struct vec<4> ; vec<4> v ; struct vec<4> { vec<4> ( ) { } vec<4> ( const vec < 4 - 1 > & v ) { } } ;"
Line 673
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  673 always 673
  expected2 always "struct vec<4> ; vec<4> v ; struct vec<4> { vec<4> ( ) { } vec<4> ( const vec < 4 - 1 > & v ) { } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  673 always 673
  code2 always "template <int n> struct vec {\n  vec() {}\n  vec(const vec<n-1>& v) {}\n};\n\nvec<4> v;"
Line 677
  130 always 130
  = always "template <unsigned int i> void a()\n{ }\n\ntemplate <unsigned int i> void b()\n{ a<i>(); }\n\nint main()\n{\n    b<2>();\n    return 0;\n}\n"
  "template <unsigned int i> void a()\n{ }\n\ntemplate <unsigned int i> void b()\n{ a<i>(); }\n\nint main()\n{\n    b<2>();\n    return 0;\n}\n" always "template <unsigned int i> void a()\n{ }\n\ntemplate <unsigned int i> void b()\n{ a<i>(); }\n\nint main()\n{\n    b<2>();\n    return 0;\n}\n"
Line 689
  118 always 118
  = always "void a<2> ( ) ; void b<2> ( ) ; int main ( ) { b<2> ( ) ; return 0 ; } void b<2> ( ) { a<2> ( ) ; } void a<2> ( ) { }"
  "void a<2> ( ) ; void b<2> ( ) ; int main ( ) { b<2> ( ) ; return 0 ; } void b<2> ( ) { a<2> ( ) ; } void a<2> ( ) { }" always "void a<2> ( ) ; void b<2> ( ) ; int main ( ) { b<2> ( ) ; return 0 ; } void b<2> ( ) { a<2> ( ) ; } void a<2> ( ) { }"
Line 695
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  695 always 695
  expected always "void a<2> ( ) ; void b<2> ( ) ; int main ( ) { b<2> ( ) ; return 0 ; } void b<2> ( ) { a<2> ( ) ; } void a<2> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  695 always 695
  code always "template <unsigned int i> void a()\n{ }\n\ntemplate <unsigned int i> void b()\n{ a<i>(); }\n\nint main()\n{\n    b<2>();\n    return 0;\n}\n"
Line 699
  135 always 135
  = always "template<class T>\nclass Fred\n{\n    template<class T>\n    static shared_ptr< Fred<T> > CreateFred()\n    {\n    }\n};\n\nshared_ptr<int> i;\n"
  "template<class T>\nclass Fred\n{\n    template<class T>\n    static shared_ptr< Fred<T> > CreateFred()\n    {\n    }\n};\n\nshared_ptr<int> i;\n" always "template<class T>\nclass Fred\n{\n    template<class T>\n    static shared_ptr< Fred<T> > CreateFred()\n    {\n    }\n};\n\nshared_ptr<int> i;\n"
Line 709
  134 always 134
  = always "template < class T > class Fred { template < class T > static shared_ptr < Fred < T > > CreateFred ( ) { } } ; shared_ptr < int > i ;"
  "template < class T > class Fred { template < class T > static shared_ptr < Fred < T > > CreateFred ( ) { } } ; shared_ptr < int > i ;" always "template < class T > class Fred { template < class T > static shared_ptr < Fred < T > > CreateFred ( ) { } } ; shared_ptr < int > i ;"
Line 718
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  718 always 718
  expected always "template < class T > class Fred { template < class T > static shared_ptr < Fred < T > > CreateFred ( ) { } } ; shared_ptr < int > i ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  718 always 718
  code always "template<class T>\nclass Fred\n{\n    template<class T>\n    static shared_ptr< Fred<T> > CreateFred()\n    {\n    }\n};\n\nshared_ptr<int> i;\n"
Line 722
  52 always 52
  = always "template <class T> class foo { T a; };\nfoo<int> *f;"
  "template <class T> class foo { T a; };\nfoo<int> *f;" always "template <class T> class foo { T a; };\nfoo<int> *f;"
Line 725
  61 always 61
  = always "class foo<int> ; foo<int> * f ; class foo<int> { int a ; } ;"
  "class foo<int> ; foo<int> * f ; class foo<int> { int a ; } ;" always "class foo<int> ; foo<int> * f ; class foo<int> { int a ; } ;"
Line 729
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  729 always 729
  expected always "class foo<int> ; foo<int> * f ; class foo<int> { int a ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  729 always 729
  code always "template <class T> class foo { T a; };\nfoo<int> *f;"
Line 733
  107 always 107
  = always "template <typename T> T & foo()\n{ static T temp; return temp; }\n\nvoid f ( )\n{\n    char p = foo<char>();\n}\n"
  "template <typename T> T & foo()\n{ static T temp; return temp; }\n\nvoid f ( )\n{\n    char p = foo<char>();\n}\n" always "template <typename T> T & foo()\n{ static T temp; return temp; }\n\nvoid f ( )\n{\n    char p = foo<char>();\n}\n"
Line 742
  125 always 125
  = always "char & foo<char> ( ) ; void f ( ) { char p ; p = foo<char> ( ) ; } char & foo<char> ( ) { static char temp ; return temp ; }"
  "char & foo<char> ( ) ; void f ( ) { char p ; p = foo<char> ( ) ; } char & foo<char> ( ) { static char temp ; return temp ; }" always "char & foo<char> ( ) ; void f ( ) { char p ; p = foo<char> ( ) ; } char & foo<char> ( ) { static char temp ; return temp ; }"
Line 748
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  748 always 748
  expected always "char & foo<char> ( ) ; void f ( ) { char p ; p = foo<char> ( ) ; } char & foo<char> ( ) { static char temp ; return temp ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  748 always 748
  code always "template <typename T> T & foo()\n{ static T temp; return temp; }\n\nvoid f ( )\n{\n    char p = foo<char>();\n}\n"
Line 753
  91 always 91
  = always "template <class T> class A { public:  ~A(); };\ntemplate <class T> A<T>::~A() {}\nA<int> a;\n"
  "template <class T> class A { public:  ~A(); };\ntemplate <class T> A<T>::~A() {}\nA<int> a;\n" always "template <class T> class A { public:  ~A(); };\ntemplate <class T> A<T>::~A() {}\nA<int> a;\n"
Line 758
  95 always 95
  = always "class A<int> ; A<int> a ; class A<int> { public: ~ A<int> ( ) ; } ; A<int> :: ~ A<int> ( ) { }"
  "class A<int> ; A<int> a ; class A<int> { public: ~ A<int> ( ) ; } ; A<int> :: ~ A<int> ( ) { }" always "class A<int> ; A<int> a ; class A<int> { public: ~ A<int> ( ) ; } ; A<int> :: ~ A<int> ( ) { }"
Line 762
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  762 always 762
  expected always "class A<int> ; A<int> a ; class A<int> { public: ~ A<int> ( ) ; } ; A<int> :: ~ A<int> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  762 always 762
  code always "template <class T> class A { public:  ~A(); };\ntemplate <class T> A<T>::~A() {}\nA<int> a;\n"
Line 767
  57 always 57
  = always "template <class T> struct Fred { T a; };\nFred<int> fred;"
  "template <class T> struct Fred { T a; };\nFred<int> fred;" always "template <class T> struct Fred { T a; };\nFred<int> fred;"
Line 770
  67 always 67
  = always "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { int a ; } ;"
  "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { int a ; } ;" always "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { int a ; } ;"
Line 774
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  774 always 774
  expected always "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { int a ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  774 always 774
  code always "template <class T> struct Fred { T a; };\nFred<int> fred;"
Line 778
  76 always 76
  = always "template <class T, int sz> struct Fred { T data[sz]; };\nFred<float,4> fred;"
  "template <class T, int sz> struct Fred { T data[sz]; };\nFred<float,4> fred;" always "template <class T, int sz> struct Fred { T data[sz]; };\nFred<float,4> fred;"
Line 781
  90 always 90
  = always "struct Fred<float,4> ; Fred<float,4> fred ; struct Fred<float,4> { float data [ 4 ] ; } ;"
  "struct Fred<float,4> ; Fred<float,4> fred ; struct Fred<float,4> { float data [ 4 ] ; } ;" always "struct Fred<float,4> ; Fred<float,4> fred ; struct Fred<float,4> { float data [ 4 ] ; } ;"
Line 785
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  785 always 785
  expected always "struct Fred<float,4> ; Fred<float,4> fred ; struct Fred<float,4> { float data [ 4 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  785 always 785
  code always "template <class T, int sz> struct Fred { T data[sz]; };\nFred<float,4> fred;"
Line 789
  62 always 62
  = always "template <class T> struct Fred { Fred(); };\nFred<float> fred;"
  "template <class T> struct Fred { Fred(); };\nFred<float> fred;" always "template <class T> struct Fred { Fred(); };\nFred<float> fred;"
Line 792
  83 always 83
  = always "struct Fred<float> ; Fred<float> fred ; struct Fred<float> { Fred<float> ( ) ; } ;"
  "struct Fred<float> ; Fred<float> fred ; struct Fred<float> { Fred<float> ( ) ; } ;" always "struct Fred<float> ; Fred<float> fred ; struct Fred<float> { Fred<float> ( ) ; } ;"
Line 796
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  796 always 796
  expected always "struct Fred<float> ; Fred<float> fred ; struct Fred<float> { Fred<float> ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  796 always 796
  code always "template <class T> struct Fred { Fred(); };\nFred<float> fred;"
Line 800
  74 always 74
  = always "template <class T> struct Fred { };\nFred<float> fred1;\nFred<float> fred2;"
  "template <class T> struct Fred { };\nFred<float> fred1;\nFred<float> fred2;" always "template <class T> struct Fred { };\nFred<float> fred1;\nFred<float> fred2;"
Line 804
  86 always 86
  = always "struct Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; struct Fred<float> { } ;"
  "struct Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; struct Fred<float> { } ;" always "struct Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; struct Fred<float> { } ;"
Line 809
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  809 always 809
  expected always "struct Fred<float> ; Fred<float> fred1 ; Fred<float> fred2 ; struct Fred<float> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  809 always 809
  code always "template <class T> struct Fred { };\nFred<float> fred1;\nFred<float> fred2;"
Line 814
  65 always 65
  = always "template <class T> struct Fred { T a; };\nFred<std::string> fred;"
  "template <class T> struct Fred { T a; };\nFred<std::string> fred;" always "template <class T> struct Fred { T a; };\nFred<std::string> fred;"
Line 817
  101 always 101
  = always "struct Fred<std::string> ; Fred<std::string> fred ; struct Fred<std::string> { std :: string a ; } ;"
  "struct Fred<std::string> ; Fred<std::string> fred ; struct Fred<std::string> { std :: string a ; } ;" always "struct Fred<std::string> ; Fred<std::string> fred ; struct Fred<std::string> { std :: string a ; } ;"
Line 821
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  821 always 821
  expected always "struct Fred<std::string> ; Fred<std::string> fred ; struct Fred<std::string> { std :: string a ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  821 always 821
  code always "template <class T> struct Fred { T a; };\nFred<std::string> fred;"
Line 825
  83 always 83
  = always "template <class T> void foo() { }\nvoid bar() {\n    std::cout << (foo<double>());\n}"
  "template <class T> void foo() { }\nvoid bar() {\n    std::cout << (foo<double>());\n}" always "template <class T> void foo() { }\nvoid bar() {\n    std::cout << (foo<double>());\n}"
Line 830
  102 always 102
  = always "void foo<double> ( ) ; void bar ( ) { std :: cout << ( foo<double> ( ) ) ; } void foo<double> ( ) { }"
  "void foo<double> ( ) ; void bar ( ) { std :: cout << ( foo<double> ( ) ) ; } void foo<double> ( ) { }" always "void foo<double> ( ) ; void bar ( ) { std :: cout << ( foo<double> ( ) ) ; } void foo<double> ( ) { }"
Line 836
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  836 always 836
  expected always "void foo<double> ( ) ; void bar ( ) { std :: cout << ( foo<double> ( ) ) ; } void foo<double> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  836 always 836
  code always "template <class T> void foo() { }\nvoid bar() {\n    std::cout << (foo<double>());\n}"
Line 841
  106 always 106
  = always "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<sizeof(int)>\n{};\n\nbitset<1> z;"
  "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<sizeof(int)>\n{};\n\nbitset<1> z;" always "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<sizeof(int)>\n{};\n\nbitset<1> z;"
Line 850
  107 always 107
  = always "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;"
  "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;" always "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;"
Line 855
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  855 always 855
  expected always "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  855 always 855
  code always "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<sizeof(int)>\n{};\n\nbitset<1> z;"
Line 859
  116 always 116
  = always "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<((sizeof(int)) ? : 1)>\n{};\n\nbitset<1> z;"
  "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<((sizeof(int)) ? : 1)>\n{};\n\nbitset<1> z;" always "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<((sizeof(int)) ? : 1)>\n{};\n\nbitset<1> z;"
Line 868
  107 always 107
  = always "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;"
  "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;" always "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;"
Line 873
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  873 always 873
  expected always "struct B<4> ; class bitset<1> ; bitset<1> z ; class bitset<1> : B<4> { } ; struct B<4> { int a [ 4 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  873 always 873
  code always "template<int n> struct B\n{\n  int a[n];\n};\n\ntemplate<int x> class bitset: B<((sizeof(int)) ? : 1)>\n{};\n\nbitset<1> z;"
Line 878
  104 always 104
  = always "template<class T>\nclass A { public: T x; };\n\ntemplate<class M>\nclass C: public A<char[M]> {};\n\nC<2> a;\n"
  "template<class T>\nclass A { public: T x; };\n\ntemplate<class M>\nclass C: public A<char[M]> {};\n\nC<2> a;\n" always "template<class T>\nclass A { public: T x; };\n\ntemplate<class M>\nclass C: public A<char[M]> {};\n\nC<2> a;\n"
Line 885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  885 always 885
  "class A<char[2]> ; class C<2> ; C<2> a ; class C<2> : public A<char[2]> { } ; class A<char[2]> { public: char [ 2 ] x ; } ;" always "class A<char[2]> ; class C<2> ; C<2> a ; class C<2> : public A<char[2]> { } ; class A<char[2]> { public: char [ 2 ] x ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  885 always 885
  code always "template<class T>\nclass A { public: T x; };\n\ntemplate<class M>\nclass C: public A<char[M]> {};\n\nC<2> a;\n"
Line 890
  33 always 33
  = always "X(template<class T> class Fred);"
  "X(template<class T> class Fred);" always "X(template<class T> class Fred);"
Line 891
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  891 always 891
  code always "X(template<class T> class Fred);"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  891 always 891
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  891 always 891
  false always 0
Line 896
  71 always 71
  = always "template<class A, class B> class Fred {};\nFred<int,Fred<int,int> > x;\n"
  "template<class A, class B> class Fred {};\nFred<int,Fred<int,int> > x;\n" always "template<class A, class B> class Fred {};\nFred<int,Fred<int,int> > x;\n"
Line 898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  898 always 898
  "class Fred<int,int> ; class Fred<int,Fred<int,int>> ; Fred<int,Fred<int,int>> x ; class Fred<int,int> { } ; class Fred<int,Fred<int,int>> { } ;" always "class Fred<int,int> ; class Fred<int,Fred<int,int>> ; Fred<int,Fred<int,int>> x ; class Fred<int,int> { } ; class Fred<int,Fred<int,int>> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  898 always 898
  code always "template<class A, class B> class Fred {};\nFred<int,Fred<int,int> > x;\n"
Line 907
  54 always 54
  = always "template<template<class> class A, class B> void f(){}"
  "template<template<class> class A, class B> void f(){}" always "template<template<class> class A, class B> void f(){}"
Line 908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  908 always 908
  "template < template < class > class A , class B > void f ( ) { }" always "template < template < class > class A , class B > void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  908 always 908
  code always "template<template<class> class A, class B> void f(){}"
Line 913
  41 always 41
  = always "template<class T> struct A{}; A<int&> a;"
  "template<class T> struct A{}; A<int&> a;" always "template<class T> struct A{}; A<int&> a;"
Line 914
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  914 always 914
  "struct A<int&> ; A<int&> a ; struct A<int&> { } ;" always "struct A<int&> ; A<int&> a ; struct A<int&> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  914 always 914
  code always "template<class T> struct A{}; A<int&> a;"
Line 919
  42 always 42
  = always "template<class T> struct A{}; A<int&&> a;"
  "template<class T> struct A{}; A<int&&> a;" always "template<class T> struct A{}; A<int&&> a;"
Line 920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  920 always 920
  "struct A<int&&> ; A<int&&> a ; struct A<int&&> { } ;" always "struct A<int&&> ; A<int&&> a ; struct A<int&&> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  920 always 920
  code2 always "template<class T> struct A{}; A<int&&> a;"
Line 927
  163 always 163
  = always "template <class T1, class T2, class T3, class T4 > struct A { };\n\ntemplate <class T>\nstruct B\n{\n    public:\n        A < int, Pair<T, int>, int > a;\n};\n\nB<int> b;\n"
  "template <class T1, class T2, class T3, class T4 > struct A { };\n\ntemplate <class T>\nstruct B\n{\n    public:\n        A < int, Pair<T, int>, int > a;\n};\n\nB<int> b;\n" always "template <class T1, class T2, class T3, class T4 > struct A { };\n\ntemplate <class T>\nstruct B\n{\n    public:\n        A < int, Pair<T, int>, int > a;\n};\n\nB<int> b;\n"
Line 937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  937 always 937
  "template < class T1 , class T2 , class T3 , class T4 > struct A { } ; struct B<int> ; B<int> b ; struct B<int> { public: A < int , Pair < int , int > , int > a ; } ;" always "template < class T1 , class T2 , class T3 , class T4 > struct A { } ; struct B<int> ; B<int> b ; struct B<int> { public: A < int , Pair < int , int > , int > a ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  937 always 937
  code always "template <class T1, class T2, class T3, class T4 > struct A { };\n\ntemplate <class T>\nstruct B\n{\n    public:\n        A < int, Pair<T, int>, int > a;\n};\n\nB<int> b;\n"
Line 946
  123 always 123
  = always "template<class T> struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { A<B<X<T> > > ab; };\nC<int> c;"
  "template<class T> struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { A<B<X<T> > > ab; };\nC<int> c;" always "template<class T> struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { A<B<X<T> > > ab; };\nC<int> c;"
Line 950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  950 always 950
  "struct A<B<X<int>>> ; struct B<X<int>> ; struct C<int> ; C<int> c ; struct C<int> { A<B<X<int>>> ab ; } ; struct B<X<int>> { } ; struct A<B<X<int>>> { } ;" always "struct A<B<X<int>>> ; struct B<X<int>> ; struct C<int> ; C<int> c ; struct C<int> { A<B<X<int>>> ab ; } ; struct B<X<int>> { } ; struct A<B<X<int>>> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  950 always 950
  code always "template<class T> struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { A<B<X<T> > > ab; };\nC<int> c;"
Line 961
  91 always 91
  = always "struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { };\nC< B<A> > c;"
  "struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { };\nC< B<A> > c;" always "struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { };\nC< B<A> > c;"
Line 965
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  965 always 965
  "struct A { } ; template < class T > struct B { } ; struct C<B<A>> ; C<B<A>> c ; struct C<B<A>> { } ;" always "struct A { } ; template < class T > struct B { } ; struct C<B<A>> ; C<B<A>> c ; struct C<B<A>> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  965 always 965
  code always "struct A { };\ntemplate<class T> struct B { };\ntemplate<class T> struct C { };\nC< B<A> > c;"
Line 976
  103 always 103
  = always "namespace abc {\ntemplate <typename T> struct X { void f(X<T> &x) {} };\n}\ntemplate <> int X<int>::Y(0);"
  "namespace abc {\ntemplate <typename T> struct X { void f(X<T> &x) {} };\n}\ntemplate <> int X<int>::Y(0);" always "namespace abc {\ntemplate <typename T> struct X { void f(X<T> &x) {} };\n}\ntemplate <> int X<int>::Y(0);"
Line 980
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  980 always 980
  code always "namespace abc {\ntemplate <typename T> struct X { void f(X<T> &x) {} };\n}\ntemplate <> int X<int>::Y(0);"
Line 984
  41 always 41
  = always "template <char c> class A {};\nA <'x'> a;"
  "template <char c> class A {};\nA <'x'> a;" always "template <char c> class A {};\nA <'x'> a;"
Line 986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  986 always 986
  "class A<'x'> ; A<'x'> a ; class A<'x'> { } ;" always "class A<'x'> ; A<'x'> a ; class A<'x'> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  986 always 986
  code always "template <char c> class A {};\nA <'x'> a;"
Line 992
  109 always 109
  = always "template <class T> struct X { T t; };\ntemplate <class C> struct Y { Foo < X< Bar<C> > > _foo; };\nY<int> bar;"
  "template <class T> struct X { T t; };\ntemplate <class C> struct Y { Foo < X< Bar<C> > > _foo; };\nY<int> bar;" always "template <class T> struct X { T t; };\ntemplate <class C> struct Y { Foo < X< Bar<C> > > _foo; };\nY<int> bar;"
Line 995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  995 always 995
  "struct X<Bar<int>> ; struct Y<int> ; Y<int> bar ; struct Y<int> { Foo < X<Bar<int>> > _foo ; } ; struct X<Bar<int>> { Bar < int > t ; } ;" always "struct X<Bar<int>> ; struct Y<int> ; Y<int> bar ; struct Y<int> { Foo < X<Bar<int>> > _foo ; } ; struct X<Bar<int>> { Bar < int > t ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  995 always 995
  code always "template <class T> struct X { T t; };\ntemplate <class C> struct Y { Foo < X< Bar<C> > > _foo; };\nY<int> bar;"
Line 1005
  67 always 67
  = always "class A { };\ntemplate<class T> class B {};\nB<class A> b1;\nB<A> b2;"
  "class A { };\ntemplate<class T> class B {};\nB<class A> b1;\nB<A> b2;" always "class A { };\ntemplate<class T> class B {};\nB<class A> b1;\nB<A> b2;"
Line 1009
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1009 always 1009
  "class A { } ; class B<A> ; B<A> b1 ; B<A> b2 ; class B<A> { } ;" always "class A { } ; class B<A> ; B<A> b1 ; B<A> b2 ; class B<A> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1009 always 1009
  code always "class A { };\ntemplate<class T> class B {};\nB<class A> b1;\nB<A> b2;"
Line 1013
  69 always 69
  = always "struct A { };\ntemplate<class T> class B {};\nB<struct A> b1;\nB<A> b2;"
  "struct A { };\ntemplate<class T> class B {};\nB<struct A> b1;\nB<A> b2;" always "struct A { };\ntemplate<class T> class B {};\nB<struct A> b1;\nB<A> b2;"
Line 1017
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1017 always 1017
  "struct A { } ; class B<A> ; B<A> b1 ; B<A> b2 ; class B<A> { } ;" always "struct A { } ; class B<A> ; B<A> b1 ; B<A> b2 ; class B<A> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1017 always 1017
  code always "struct A { };\ntemplate<class T> class B {};\nB<struct A> b1;\nB<A> b2;"
Line 1021
  65 always 65
  = always "enum A { };\ntemplate<class T> class B {};\nB<enum A> b1;\nB<A> b2;"
  "enum A { };\ntemplate<class T> class B {};\nB<enum A> b1;\nB<A> b2;" always "enum A { };\ntemplate<class T> class B {};\nB<enum A> b1;\nB<A> b2;"
Line 1025
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1025 always 1025
  "enum A { } ; class B<A> ; B<A> b1 ; B<A> b2 ; class B<A> { } ;" always "enum A { } ; class B<A> ; B<A> b1 ; B<A> b2 ; class B<A> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1025 always 1025
  code always "enum A { };\ntemplate<class T> class B {};\nB<enum A> b1;\nB<A> b2;"
Line 1032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1032 always 1032
  "x < int > ( ) ;" always "x < int > ( ) ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1032 always 1032
  "x<int>();" always "x<int>();"
Line 1036
  125 always 125
  = always "template <class T> class A {\n  T mT;\npublic:\n  void foo() {}\n};\n\nint main() {\n    A<A<BLA>>   gna1;\n    A<BLA>      gna2;\n}\n"
  "template <class T> class A {\n  T mT;\npublic:\n  void foo() {}\n};\n\nint main() {\n    A<A<BLA>>   gna1;\n    A<BLA>      gna2;\n}\n" always "template <class T> class A {\n  T mT;\npublic:\n  void foo() {}\n};\n\nint main() {\n    A<A<BLA>>   gna1;\n    A<BLA>      gna2;\n}\n"
Line 1046
  193 always 193
  = always "class A<BLA> ; class A<A<BLA>> ; int main ( ) { A<A<BLA>> gna1 ; A<BLA> gna2 ; } class A<BLA> { BLA mT ; public: void foo ( ) { } } ; class A<A<BLA>> { A<BLA> mT ; public: void foo ( ) { } } ;"
  "class A<BLA> ; class A<A<BLA>> ; int main ( ) { A<A<BLA>> gna1 ; A<BLA> gna2 ; } class A<BLA> { BLA mT ; public: void foo ( ) { } } ; class A<A<BLA>> { A<BLA> mT ; public: void foo ( ) { } } ;" always "class A<BLA> ; class A<A<BLA>> ; int main ( ) { A<A<BLA>> gna1 ; A<BLA> gna2 ; } class A<BLA> { BLA mT ; public: void foo ( ) { } } ; class A<A<BLA>> { A<BLA> mT ; public: void foo ( ) { } } ;"
Line 1062
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1062 always 1062
  expected always "class A<BLA> ; class A<A<BLA>> ; int main ( ) { A<A<BLA>> gna1 ; A<BLA> gna2 ; } class A<BLA> { BLA mT ; public: void foo ( ) { } } ; class A<A<BLA>> { A<BLA> mT ; public: void foo ( ) { } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1062 always 1062
  code always "template <class T> class A {\n  T mT;\npublic:\n  void foo() {}\n};\n\nint main() {\n    A<A<BLA>>   gna1;\n    A<BLA>      gna2;\n}\n"
Line 1066
  148 always 148
  = always "template<typename T> struct vector {  operator T() const;};void f() {  vector<vector<int>> v;  const vector<int> vi = static_cast<vector<int>>(v);}"
  "template<typename T> struct vector {  operator T() const;};void f() {  vector<vector<int>> v;  const vector<int> vi = static_cast<vector<int>>(v);}" always "template<typename T> struct vector {  operator T() const;};void f() {  vector<vector<int>> v;  const vector<int> vi = static_cast<vector<int>>(v);}"
Line 1073
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1073 always 1073
  code always "template<typename T> struct vector {  operator T() const;};void f() {  vector<vector<int>> v;  const vector<int> vi = static_cast<vector<int>>(v);}"
Line 1077
  94 always 94
  = always "struct A {  template<typename T> struct X { T t; };};template<> struct A::X<int> { int *t; };"
  "struct A {  template<typename T> struct X { T t; };};template<> struct A::X<int> { int *t; };" always "struct A {  template<typename T> struct X { T t; };};template<> struct A::X<int> { int *t; };"
Line 1081
  111 always 111
  = always "struct A { struct X<int> ; template < typename T > struct X { T t ; } ; } ; struct A :: X<int> { int * t ; } ;"
  "struct A { struct X<int> ; template < typename T > struct X { T t ; } ; } ; struct A :: X<int> { int * t ; } ;" always "struct A { struct X<int> ; template < typename T > struct X { T t ; } ; } ; struct A :: X<int> { int * t ; } ;"
Line 1086
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1086 always 1086
  expected always "struct A { struct X<int> ; template < typename T > struct X { T t ; } ; } ; struct A :: X<int> { int * t ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1086 always 1086
  code always "struct A {  template<typename T> struct X { T t; };};template<> struct A::X<int> { int *t; };"
Line 1090
  59 always 59
  = always "template<class T> struct X { };\nvoid f(const X<int> x) { }"
  "template<class T> struct X { };\nvoid f(const X<int> x) { }" always "template<class T> struct X { };\nvoid f(const X<int> x) { }"
Line 1092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1092 always 1092
  "struct X<int> ; void f ( const X<int> x ) { } struct X<int> { } ;" always "struct X<int> ; void f ( const X<int> x ) { } struct X<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1092 always 1092
  code1 always "template<class T> struct X { };\nvoid f(const X<int> x) { }"
Line 1096
  73 always 73
  = always "template<class T> T f(T t) { return t; }\nint x() { return f<int>(123); }"
  "template<class T> T f(T t) { return t; }\nint x() { return f<int>(123); }" always "template<class T> T f(T t) { return t; }\nint x() { return f<int>(123); }"
Line 1098
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1098 always 1098
  "int f<int> ( int t ) ; int x ( ) { return f<int> ( 123 ) ; } int f<int> ( int t ) { return t ; }" always "int f<int> ( int t ) ; int x ( ) { return f<int> ( 123 ) ; } int f<int> ( int t ) { return t ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1098 always 1098
  code2 always "template<class T> T f(T t) { return t; }\nint x() { return f<int>(123); }"
Line 1104
  140 always 140
  = always "template<typename ...Args>\nint f0(Args ...args) {\n  return ^ {\n    return sizeof...(Args);\n  }() + ^ {\n    return sizeof...(args);\n  }();\n}"
  "template<typename ...Args>\nint f0(Args ...args) {\n  return ^ {\n    return sizeof...(Args);\n  }() + ^ {\n    return sizeof...(args);\n  }();\n}" always "template<typename ...Args>\nint f0(Args ...args) {\n  return ^ {\n    return sizeof...(Args);\n  }() + ^ {\n    return sizeof...(args);\n  }();\n}"
Line 1112
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1112 always 1112
  code always "template<typename ...Args>\nint f0(Args ...args) {\n  return ^ {\n    return sizeof...(Args);\n  }() + ^ {\n    return sizeof...(args);\n  }();\n}"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1112 always 1112
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1112 always 1112
  false always 0
Line 1116
  538 always 538
  = always "template <typename T> struct E { typedef int Int; };\ntemplate <typename T> struct C { };\ntemplate <typename T> struct D { static int f() { return C<T>::f(); } };\ntemplate <typename T> inline int f2() { return D<T>::f(); }\ntemplate <typename T> int f1 (int x, T *) { int id = f2<T>(); return id; }\ntemplate <typename T> struct B { void f3(B<T> & other) { } };\nstruct A { };\ntemplate <> struct C<B<A>> {\n    static int f() { return f1<B<A>>(0, reinterpret_cast<B<A>*>(E<void*>::Int(-1))); }\n};\nint main(void) {\n    C<A> ca;\n    return 0;\n}"
  "template <typename T> struct E { typedef int Int; };\ntemplate <typename T> struct C { };\ntemplate <typename T> struct D { static int f() { return C<T>::f(); } };\ntemplate <typename T> inline int f2() { return D<T>::f(); }\ntemplate <typename T> int f1 (int x, T *) { int id = f2<T>(); return id; }\ntemplate <typename T> struct B { void f3(B<T> & other) { } };\nstruct A { };\ntemplate <> struct C<B<A>> {\n    static int f() { return f1<B<A>>(0, reinterpret_cast<B<A>*>(E<void*>::Int(-1))); }\n};\nint main(void) {\n    C<A> ca;\n    return 0;\n}" always "template <typename T> struct E { typedef int Int; };\ntemplate <typename T> struct C { };\ntemplate <typename T> struct D { static int f() { return C<T>::f(); } };\ntemplate <typename T> inline int f2() { return D<T>::f(); }\ntemplate <typename T> int f1 (int x, T *) { int id = f2<T>(); return id; }\ntemplate <typename T> struct B { void f3(B<T> & other) { } };\nstruct A { };\ntemplate <> struct C<B<A>> {\n    static int f() { return f1<B<A>>(0, reinterpret_cast<B<A>*>(E<void*>::Int(-1))); }\n};\nint main(void) {\n    C<A> ca;\n    return 0;\n}"
Line 1130
  588 always 588
  = always "struct E<void*> ; struct C<B<A>> ; struct C<A> ; struct D<B<A>> ; int f2<B<A>> ( ) ; int f1<B<A>> ( int x , B<A> * ) ; struct B<A> ; struct A { } ; struct C<B<A>> { static int f ( ) { return f1<B<A>> ( 0 , reinterpret_cast < B<A> * > ( E<void*> :: Int ( -1 ) ) ) ; } } ; int main ( ) { C<A> ca ; return 0 ; } struct B<A> { void f3 ( B<A> & other ) { } } ; int f1<B<A>> ( int x , B<A> * ) { int id ; id = f2<B<A>> ( ) ; return id ; } int f2<B<A>> ( ) { return D<B<A>> :: f ( ) ; } struct D<B<A>> { static int f ( ) { return C<B<A>> :: f ( ) ; } } ; struct C<A> { } ; struct E<void*> { } ;"
  "struct E<void*> ; struct C<B<A>> ; struct C<A> ; struct D<B<A>> ; int f2<B<A>> ( ) ; int f1<B<A>> ( int x , B<A> * ) ; struct B<A> ; struct A { } ; struct C<B<A>> { static int f ( ) { return f1<B<A>> ( 0 , reinterpret_cast < B<A> * > ( E<void*> :: Int ( -1 ) ) ) ; } } ; int main ( ) { C<A> ca ; return 0 ; } struct B<A> { void f3 ( B<A> & other ) { } } ; int f1<B<A>> ( int x , B<A> * ) { int id ; id = f2<B<A>> ( ) ; return id ; } int f2<B<A>> ( ) { return D<B<A>> :: f ( ) ; } struct D<B<A>> { static int f ( ) { return C<B<A>> :: f ( ) ; } } ; struct C<A> { } ; struct E<void*> { } ;" always "struct E<void*> ; struct C<B<A>> ; struct C<A> ; struct D<B<A>> ; int f2<B<A>> ( ) ; int f1<B<A>> ( int x , B<A> * ) ; struct B<A> ; struct A { } ; struct C<B<A>> { static int f ( ) { return f1<B<A>> ( 0 , reinterpret_cast < B<A> * > ( E<void*> :: Int ( -1 ) ) ) ; } } ; int main ( ) { C<A> ca ; return 0 ; } struct B<A> { void f3 ( B<A> & other ) { } } ; int f1<B<A>> ( int x , B<A> * ) { int id ; id = f2<B<A>> ( ) ; return id ; } int f2<B<A>> ( ) { return D<B<A>> :: f ( ) ; } struct D<B<A>> { static int f ( ) { return C<B<A>> :: f ( ) ; } } ; struct C<A> { } ; struct E<void*> { } ;"
Line 1164
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1164 always 1164
  expected always "struct E<void*> ; struct C<B<A>> ; struct C<A> ; struct D<B<A>> ; int f2<B<A>> ( ) ; int f1<B<A>> ( int x , B<A> * ) ; struct B<A> ; struct A { } ; struct C<B<A>> { static int f ( ) { return f1<B<A>> ( 0 , reinterpret_cast < B<A> * > ( E<void*> :: Int ( -1 ) ) ) ; } } ; int main ( ) { C<A> ca ; return 0 ; } struct B<A> { void f3 ( B<A> & other ) { } } ; int f1<B<A>> ( int x , B<A> * ) { int id ; id = f2<B<A>> ( ) ; return id ; } int f2<B<A>> ( ) { return D<B<A>> :: f ( ) ; } struct D<B<A>> { static int f ( ) { return C<B<A>> :: f ( ) ; } } ; struct C<A> { } ; struct E<void*> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1164 always 1164
  code always "template <typename T> struct E { typedef int Int; };\ntemplate <typename T> struct C { };\ntemplate <typename T> struct D { static int f() { return C<T>::f(); } };\ntemplate <typename T> inline int f2() { return D<T>::f(); }\ntemplate <typename T> int f1 (int x, T *) { int id = f2<T>(); return id; }\ntemplate <typename T> struct B { void f3(B<T> & other) { } };\nstruct A { };\ntemplate <> struct C<B<A>> {\n    static int f() { return f1<B<A>>(0, reinterpret_cast<B<A>*>(E<void*>::Int(-1))); }\n};\nint main(void) {\n    C<A> ca;\n    return 0;\n}"
Line 1168
  233 always 233
  = always "template<class T> struct StackContainer {  void foo(int i) {    if (0 >= 1 && i<0) {}  }};template<class T> class ZContainer : public StackContainer<T> {};struct FGSTensor {};class FoldedZContainer : public ZContainer<FGSTensor> {};"
  "template<class T> struct StackContainer {  void foo(int i) {    if (0 >= 1 && i<0) {}  }};template<class T> class ZContainer : public StackContainer<T> {};struct FGSTensor {};class FoldedZContainer : public ZContainer<FGSTensor> {};" always "template<class T> struct StackContainer {  void foo(int i) {    if (0 >= 1 && i<0) {}  }};template<class T> class ZContainer : public StackContainer<T> {};struct FGSTensor {};class FoldedZContainer : public ZContainer<FGSTensor> {};"
Line 1176
  306 always 306
  = always "struct StackContainer<FGSTensor> ; class ZContainer<FGSTensor> ; struct FGSTensor { } ; class FoldedZContainer : public ZContainer<FGSTensor> { } ; class ZContainer<FGSTensor> : public StackContainer<FGSTensor> { } ; struct StackContainer<FGSTensor> { void foo ( int i ) { if ( 0 >= 1 && i < 0 ) { } } } ;"
  "struct StackContainer<FGSTensor> ; class ZContainer<FGSTensor> ; struct FGSTensor { } ; class FoldedZContainer : public ZContainer<FGSTensor> { } ; class ZContainer<FGSTensor> : public StackContainer<FGSTensor> { } ; struct StackContainer<FGSTensor> { void foo ( int i ) { if ( 0 >= 1 && i < 0 ) { } } } ;" always "struct StackContainer<FGSTensor> ; class ZContainer<FGSTensor> ; struct FGSTensor { } ; class FoldedZContainer : public ZContainer<FGSTensor> { } ; class ZContainer<FGSTensor> : public StackContainer<FGSTensor> { } ; struct StackContainer<FGSTensor> { void foo ( int i ) { if ( 0 >= 1 && i < 0 ) { } } } ;"
Line 1186
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1186 always 1186
  expected always "struct StackContainer<FGSTensor> ; class ZContainer<FGSTensor> ; struct FGSTensor { } ; class FoldedZContainer : public ZContainer<FGSTensor> { } ; class ZContainer<FGSTensor> : public StackContainer<FGSTensor> { } ; struct StackContainer<FGSTensor> { void foo ( int i ) { if ( 0 >= 1 && i < 0 ) { } } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1186 always 1186
  code always "template<class T> struct StackContainer {  void foo(int i) {    if (0 >= 1 && i<0) {}  }};template<class T> class ZContainer : public StackContainer<T> {};struct FGSTensor {};class FoldedZContainer : public ZContainer<FGSTensor> {};"
Line 1190
  247 always 247
  = always "namespace Constants { const int fourtytwo = 42; } template <class T, int U> struct TypeMath {   static const int mult = sizeof(T) * U; }; template <class T> struct FOO {   enum { value = TypeMath<T, Constants::fourtytwo>::mult }; }; FOO<int> foo;"
  "namespace Constants { const int fourtytwo = 42; } template <class T, int U> struct TypeMath {   static const int mult = sizeof(T) * U; }; template <class T> struct FOO {   enum { value = TypeMath<T, Constants::fourtytwo>::mult }; }; FOO<int> foo;" always "namespace Constants { const int fourtytwo = 42; } template <class T, int U> struct TypeMath {   static const int mult = sizeof(T) * U; }; template <class T> struct FOO {   enum { value = TypeMath<T, Constants::fourtytwo>::mult }; }; FOO<int> foo;"
Line 1198
  337 always 337
  = always "namespace Constants { const int fourtytwo = 42 ; } struct TypeMath<int,Constants::fourtytwo> ; struct FOO<int> ; FOO<int> foo ; struct FOO<int> { enum Anonymous0 { value = TypeMath<int,Constants::fourtytwo> :: mult } ; } ; struct TypeMath<int,Constants::fourtytwo> { static const int mult = sizeof ( int ) * Constants :: fourtytwo ; } ;"
  "namespace Constants { const int fourtytwo = 42 ; } struct TypeMath<int,Constants::fourtytwo> ; struct FOO<int> ; FOO<int> foo ; struct FOO<int> { enum Anonymous0 { value = TypeMath<int,Constants::fourtytwo> :: mult } ; } ; struct TypeMath<int,Constants::fourtytwo> { static const int mult = sizeof ( int ) * Constants :: fourtytwo ; } ;" always "namespace Constants { const int fourtytwo = 42 ; } struct TypeMath<int,Constants::fourtytwo> ; struct FOO<int> ; FOO<int> foo ; struct FOO<int> { enum Anonymous0 { value = TypeMath<int,Constants::fourtytwo> :: mult } ; } ; struct TypeMath<int,Constants::fourtytwo> { static const int mult = sizeof ( int ) * Constants :: fourtytwo ; } ;"
Line 1208
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1208 always 1208
  expected always "namespace Constants { const int fourtytwo = 42 ; } struct TypeMath<int,Constants::fourtytwo> ; struct FOO<int> ; FOO<int> foo ; struct FOO<int> { enum Anonymous0 { value = TypeMath<int,Constants::fourtytwo> :: mult } ; } ; struct TypeMath<int,Constants::fourtytwo> { static const int mult = sizeof ( int ) * Constants :: fourtytwo ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1208 always 1208
  code always "namespace Constants { const int fourtytwo = 42; } template <class T, int U> struct TypeMath {   static const int mult = sizeof(T) * U; }; template <class T> struct FOO {   enum { value = TypeMath<T, Constants::fourtytwo>::mult }; }; FOO<int> foo;"
  true always 1
Line 1209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1209 always 1209
  "" always ""
Line 1213
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1213 always 1213
  "template<class T, class U> struct A { static const int value = 0; }; template <class T> struct B {   enum { value = A<typename T::type, int>::value }; };" always "template<class T, class U> struct A { static const int value = 0; }; template <class T> struct B {   enum { value = A<typename T::type, int>::value }; };"
Line 1217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1217 always 1217
  "" always ""
Line 1218
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1218 always 1218
  "template <class T, class U> struct A {}; enum { e = sizeof(A<int, int>) }; template <class T, class U> struct B {};" always "template <class T, class U> struct A {}; enum { e = sizeof(A<int, int>) }; template <class T, class U> struct B {};"
Line 1221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1221 always 1221
  "" always ""
Line 1222
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1222 always 1222
  "template<class T, class U> struct A { static const int value = 0; }; template<class T> struct B { typedef int type; }; template <class T> struct C {   enum { value = A<typename B<T>::type, int>::value }; };" always "template<class T, class U> struct A { static const int value = 0; }; template<class T> struct B { typedef int type; }; template <class T> struct C {   enum { value = A<typename B<T>::type, int>::value }; };"
Line 1227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1227 always 1227
  "" always ""
Line 1231
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1231 always 1231
  "template <typename T1, typename T2 = T3<T1> > class C1 {}; class C2 : public C1<C2> {};" always "template <typename T1, typename T2 = T3<T1> > class C1 {}; class C2 : public C1<C2> {};"
Line 1233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1233 always 1233
  "" always ""
Line 1237
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1237 always 1237
  "template <int> int f( {  } ); int foo = f<1>(0);" always "template <int> int f( {  } ); int foo = f<1>(0);"
Line 1239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1239 always 1239
  "" always ""
Line 1243
  200 always 200
  = always "template <class T> class Fred { void f(); void g(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate <class T> void Fred<T>::g() { }\ntemplate void Fred<float>::f();\ntemplate void Fred<int>::g();\n"
  "template <class T> class Fred { void f(); void g(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate <class T> void Fred<T>::g() { }\ntemplate void Fred<float>::f();\ntemplate void Fred<int>::g();\n" always "template <class T> class Fred { void f(); void g(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate <class T> void Fred<T>::g() { }\ntemplate void Fred<float>::f();\ntemplate void Fred<int>::g();\n"
Line 1249
  252 always 252
  = always "class Fred<float> ; class Fred<int> ; class Fred<float> { void f ( ) ; void g ( ) ; } ; void Fred<float> :: f ( ) { } void Fred<float> :: g ( ) { } class Fred<int> { void f ( ) ; void g ( ) ; } ; void Fred<int> :: f ( ) { } void Fred<int> :: g ( ) { }"
  "class Fred<float> ; class Fred<int> ; class Fred<float> { void f ( ) ; void g ( ) ; } ; void Fred<float> :: f ( ) { } void Fred<float> :: g ( ) { } class Fred<int> { void f ( ) ; void g ( ) ; } ; void Fred<int> :: f ( ) { } void Fred<int> :: g ( ) { }" always "class Fred<float> ; class Fred<int> ; class Fred<float> { void f ( ) ; void g ( ) ; } ; void Fred<float> :: f ( ) { } void Fred<float> :: g ( ) { } class Fred<int> { void f ( ) ; void g ( ) ; } ; void Fred<int> :: f ( ) { } void Fred<int> :: g ( ) { }"
Line 1258
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1258 always 1258
  expected always "class Fred<float> ; class Fred<int> ; class Fred<float> { void f ( ) ; void g ( ) ; } ; void Fred<float> :: f ( ) { } void Fred<float> :: g ( ) { } class Fred<int> { void f ( ) ; void g ( ) ; } ; void Fred<int> :: f ( ) { } void Fred<int> :: g ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1258 always 1258
  code always "template <class T> class Fred { void f(); void g(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate <class T> void Fred<T>::g() { }\ntemplate void Fred<float>::f();\ntemplate void Fred<int>::g();\n"
Line 1262
  159 always 159
  = always "template <class T> class Fred { void f(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate<> void Fred<float>::f() { }\ntemplate<> void Fred<int>::f() { }\n"
  "template <class T> class Fred { void f(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate<> void Fred<float>::f() { }\ntemplate<> void Fred<int>::f() { }\n" always "template <class T> class Fred { void f(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate<> void Fred<float>::f() { }\ntemplate<> void Fred<int>::f() { }\n"
Line 1267
  252 always 252
  = always "class Fred<float> ; class Fred<int> ; template < > void Fred<float> :: f ( ) { } template < > void Fred<int> :: f ( ) { } class Fred<float> { void f ( ) ; } ; void Fred<float> :: f ( ) { } class Fred<int> { void f ( ) ; } ; void Fred<int> :: f ( ) { }"
  "class Fred<float> ; class Fred<int> ; template < > void Fred<float> :: f ( ) { } template < > void Fred<int> :: f ( ) { } class Fred<float> { void f ( ) ; } ; void Fred<float> :: f ( ) { } class Fred<int> { void f ( ) ; } ; void Fred<int> :: f ( ) { }" always "class Fred<float> ; class Fred<int> ; template < > void Fred<float> :: f ( ) { } template < > void Fred<int> :: f ( ) { } class Fred<float> { void f ( ) ; } ; void Fred<float> :: f ( ) { } class Fred<int> { void f ( ) ; } ; void Fred<int> :: f ( ) { }"
Line 1276
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1276 always 1276
  expected always "class Fred<float> ; class Fred<int> ; template < > void Fred<float> :: f ( ) { } template < > void Fred<int> :: f ( ) { } class Fred<float> { void f ( ) ; } ; void Fred<float> :: f ( ) { } class Fred<int> { void f ( ) ; } ; void Fred<int> :: f ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1276 always 1276
  code always "template <class T> class Fred { void f(); };\ntemplate <class T> void Fred<T>::f() { }\ntemplate<> void Fred<float>::f() { }\ntemplate<> void Fred<int>::f() { }\n"
Line 1280
  223 always 223
  = always "template <int value> int sum() {   return value + sum<value/2>(); } template<int x, int y> int calculate_value() {   if (x != y) {     return sum<x - y>();   } else {     return 0;   } } int value = calculate_value<1,1>();"
  "template <int value> int sum() {   return value + sum<value/2>(); } template<int x, int y> int calculate_value() {   if (x != y) {     return sum<x - y>();   } else {     return 0;   } } int value = calculate_value<1,1>();" always "template <int value> int sum() {   return value + sum<value/2>(); } template<int x, int y> int calculate_value() {   if (x != y) {     return sum<x - y>();   } else {     return 0;   } } int value = calculate_value<1,1>();"
Line 1291
  229 always 229
  = always "int sum<0> ( ) ; int calculate_value<1,1> ( ) ; int value ; value = calculate_value<1,1> ( ) ; int calculate_value<1,1> ( ) { if ( 1 != 1 ) { return sum<0> ( ) ; } else { return 0 ; } } int sum<0> ( ) { return 0 + sum<0> ( ) ; }"
  "int sum<0> ( ) ; int calculate_value<1,1> ( ) ; int value ; value = calculate_value<1,1> ( ) ; int calculate_value<1,1> ( ) { if ( 1 != 1 ) { return sum<0> ( ) ; } else { return 0 ; } } int sum<0> ( ) { return 0 + sum<0> ( ) ; }" always "int sum<0> ( ) ; int calculate_value<1,1> ( ) ; int value ; value = calculate_value<1,1> ( ) ; int calculate_value<1,1> ( ) { if ( 1 != 1 ) { return sum<0> ( ) ; } else { return 0 ; } } int sum<0> ( ) { return 0 + sum<0> ( ) ; }"
Line 1304
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1304 always 1304
  expected always "int sum<0> ( ) ; int calculate_value<1,1> ( ) ; int value ; value = calculate_value<1,1> ( ) ; int calculate_value<1,1> ( ) { if ( 1 != 1 ) { return sum<0> ( ) ; } else { return 0 ; } } int sum<0> ( ) { return 0 + sum<0> ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1304 always 1304
  code always "template <int value> int sum() {   return value + sum<value/2>(); } template<int x, int y> int calculate_value() {   if (x != y) {     return sum<x - y>();   } else {     return 0;   } } int value = calculate_value<1,1>();"
Line 1308
  178 always 178
  = always "template<int N> struct Factorial {   enum { value = N * Factorial<N - 1>::value }; };template <> struct Factorial<0> {   enum { value = 1 }; };const int x = Factorial<4>::value;"
  "template<int N> struct Factorial {   enum { value = N * Factorial<N - 1>::value }; };template <> struct Factorial<0> {   enum { value = 1 }; };const int x = Factorial<4>::value;" always "template<int N> struct Factorial {   enum { value = N * Factorial<N - 1>::value }; };template <> struct Factorial<0> {   enum { value = 1 }; };const int x = Factorial<4>::value;"
Line 1315
  534 always 534
  = always "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum Anonymous1 { value = 1 } ; } ; const int x = Factorial<4> :: value ; struct Factorial<4> { enum Anonymous0 { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum Anonymous0 { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum Anonymous0 { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum Anonymous0 { value = 1 * Factorial<0> :: value } ; } ;"
  "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum Anonymous1 { value = 1 } ; } ; const int x = Factorial<4> :: value ; struct Factorial<4> { enum Anonymous0 { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum Anonymous0 { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum Anonymous0 { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum Anonymous0 { value = 1 * Factorial<0> :: value } ; } ;" always "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum Anonymous1 { value = 1 } ; } ; const int x = Factorial<4> :: value ; struct Factorial<4> { enum Anonymous0 { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum Anonymous0 { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum Anonymous0 { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum Anonymous0 { value = 1 * Factorial<0> :: value } ; } ;"
Line 1336
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1336 always 1336
  expected always "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum Anonymous1 { value = 1 } ; } ; const int x = Factorial<4> :: value ; struct Factorial<4> { enum Anonymous0 { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum Anonymous0 { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum Anonymous0 { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum Anonymous0 { value = 1 * Factorial<0> :: value } ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1336 always 1336
  code always "template<int N> struct Factorial {   enum { value = N * Factorial<N - 1>::value }; };template <> struct Factorial<0> {   enum { value = 1 }; };const int x = Factorial<4>::value;"
  true always 1
Line 1337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1337 always 1337
  "" always ""
Line 1341
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1341 always 1341
  "template<typename _Tp> _Tp* fn(); template <class T> struct A {   template <class U, class S = decltype(fn<T>())>   struct B { }; }; A<int> a;" always "template<typename _Tp> _Tp* fn(); template <class T> struct A {   template <class U, class S = decltype(fn<T>())>   struct B { }; }; A<int> a;"
Line 1351
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1351 always 1351
  "template < class T > class AtSmartPtr : public ConstCastHelper < AtSmartPtr < const T > , T > { friend struct ConstCastHelper < AtSmartPtr < const T > , T > ; AtSmartPtr ( const AtSmartPtr < T > & r ) ; } ;" always "template < class T > class AtSmartPtr : public ConstCastHelper < AtSmartPtr < const T > , T > { friend struct ConstCastHelper < AtSmartPtr < const T > , T > ; AtSmartPtr ( const AtSmartPtr < T > & r ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1351 always 1351
  "template<class T> class AtSmartPtr : public ConstCastHelper<AtSmartPtr<const T>, T>\n{\n    friend struct ConstCastHelper<AtSmartPtr<const T>, T>;\n    AtSmartPtr(const AtSmartPtr<T>& r);\n};" always "template<class T> class AtSmartPtr : public ConstCastHelper<AtSmartPtr<const T>, T>\n{\n    friend struct ConstCastHelper<AtSmartPtr<const T>, T>;\n    AtSmartPtr(const AtSmartPtr<T>& r);\n};"
Line 1363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1363 always 1363
  "struct A<int> ; struct A<int...> ; A<int> a ( 0 ) ; struct A<int> { A<int> ( int * p ) { ( A<int...> * ) ( p ) ; } } ; struct A<int...> { A<int...> ( int * p ) { ( A<int...> * ) ( p ) ; } } ;" always "struct A<int> ; struct A<int...> ; A<int> a ( 0 ) ; struct A<int> { A<int> ( int * p ) { ( A<int...> * ) ( p ) ; } } ; struct A<int...> { A<int...> ( int * p ) { ( A<int...> * ) ( p ) ; } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1363 always 1363
  "template <typename... T> struct A\n{\n    A(T* p) {\n        (A<T...>*)(p);\n    }\n};\nA<int> a(0);" always "template <typename... T> struct A\n{\n    A(T* p) {\n        (A<T...>*)(p);\n    }\n};\nA<int> a(0);"
Line 1384
  102 always 102
  = always "template<bool B> struct Foo {   std::array<int, B ? 1 : 2> mfoo; }; void foo() {   Foo<true> myFoo; }"
  "template<bool B> struct Foo {   std::array<int, B ? 1 : 2> mfoo; }; void foo() {   Foo<true> myFoo; }" always "template<bool B> struct Foo {   std::array<int, B ? 1 : 2> mfoo; }; void foo() {   Foo<true> myFoo; }"
Line 1390
  109 always 109
  = always "struct Foo<true> ; void foo ( ) { Foo<true> myFoo ; } struct Foo<true> { std :: array < int , 1 > mfoo ; } ;"
  "struct Foo<true> ; void foo ( ) { Foo<true> myFoo ; } struct Foo<true> { std :: array < int , 1 > mfoo ; } ;" always "struct Foo<true> ; void foo ( ) { Foo<true> myFoo ; } struct Foo<true> { std :: array < int , 1 > mfoo ; } ;"
Line 1396
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1396 always 1396
  expected always "struct Foo<true> ; void foo ( ) { Foo<true> myFoo ; } struct Foo<true> { std :: array < int , 1 > mfoo ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1396 always 1396
  code always "template<bool B> struct Foo {   std::array<int, B ? 1 : 2> mfoo; }; void foo() {   Foo<true> myFoo; }"
  true always 1
Line 1397
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1397 always 1397
  "" always ""
Line 1401
  75 always 75
  = always "template<class T> struct Test { Test(T); };\nTest<unsigned long> test( 0 );"
  "template<class T> struct Test { Test(T); };\nTest<unsigned long> test( 0 );" always "template<class T> struct Test { Test(T); };\nTest<unsigned long> test( 0 );"
Line 1403
  131 always 131
  = always "struct Test<unsignedlong> ; Test<unsignedlong> test ( 0 ) ; struct Test<unsignedlong> { Test<unsignedlong> ( unsigned long ) ; } ;"
  "struct Test<unsignedlong> ; Test<unsignedlong> test ( 0 ) ; struct Test<unsignedlong> { Test<unsignedlong> ( unsigned long ) ; } ;" always "struct Test<unsignedlong> ; Test<unsignedlong> test ( 0 ) ; struct Test<unsignedlong> { Test<unsignedlong> ( unsigned long ) ; } ;"
Line 1406
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1406 always 1406
  exp always "struct Test<unsignedlong> ; Test<unsignedlong> test ( 0 ) ; struct Test<unsignedlong> { Test<unsignedlong> ( unsigned long ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1406 always 1406
  code always "template<class T> struct Test { Test(T); };\nTest<unsigned long> test( 0 );"
Line 1410
  118 always 118
  = always "template <typename A>\nvoid TestArithmetic() {\n  x(1 * CheckedNumeric<A>());\n}\nvoid foo() {\n  TestArithmetic<int>();\n}"
  "template <typename A>\nvoid TestArithmetic() {\n  x(1 * CheckedNumeric<A>());\n}\nvoid foo() {\n  TestArithmetic<int>();\n}" always "template <typename A>\nvoid TestArithmetic() {\n  x(1 * CheckedNumeric<A>());\n}\nvoid foo() {\n  TestArithmetic<int>();\n}"
Line 1417
  146 always 146
  = always "void TestArithmetic<int> ( ) ; void foo ( ) { TestArithmetic<int> ( ) ; } void TestArithmetic<int> ( ) { x ( 1 * CheckedNumeric < int > ( ) ) ; }"
  "void TestArithmetic<int> ( ) ; void foo ( ) { TestArithmetic<int> ( ) ; } void TestArithmetic<int> ( ) { x ( 1 * CheckedNumeric < int > ( ) ) ; }" always "void TestArithmetic<int> ( ) ; void foo ( ) { TestArithmetic<int> ( ) ; } void TestArithmetic<int> ( ) { x ( 1 * CheckedNumeric < int > ( ) ) ; }"
Line 1424
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1424 always 1424
  exp always "void TestArithmetic<int> ( ) ; void foo ( ) { TestArithmetic<int> ( ) ; } void TestArithmetic<int> ( ) { x ( 1 * CheckedNumeric < int > ( ) ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1424 always 1424
  code always "template <typename A>\nvoid TestArithmetic() {\n  x(1 * CheckedNumeric<A>());\n}\nvoid foo() {\n  TestArithmetic<int>();\n}"
Line 1428
  322 always 322
  = always "template<int N>\nstruct Factorial {\n    enum FacHelper { value = N * Factorial<N - 1>::value };\n};\ntemplate <>\nstruct Factorial<0> {\n    enum FacHelper { value = 1 };\n};\ntemplate<int DiagonalDegree>\nint diagonalGroupTest() {\n    return Factorial<DiagonalDegree>::value;\n}\nint main () {\n    return diagonalGroupTest<4>();\n}"
  "template<int N>\nstruct Factorial {\n    enum FacHelper { value = N * Factorial<N - 1>::value };\n};\ntemplate <>\nstruct Factorial<0> {\n    enum FacHelper { value = 1 };\n};\ntemplate<int DiagonalDegree>\nint diagonalGroupTest() {\n    return Factorial<DiagonalDegree>::value;\n}\nint main () {\n    return diagonalGroupTest<4>();\n}" always "template<int N>\nstruct Factorial {\n    enum FacHelper { value = N * Factorial<N - 1>::value };\n};\ntemplate <>\nstruct Factorial<0> {\n    enum FacHelper { value = 1 };\n};\ntemplate<int DiagonalDegree>\nint diagonalGroupTest() {\n    return Factorial<DiagonalDegree>::value;\n}\nint main () {\n    return diagonalGroupTest<4>();\n}"
Line 1443
  637 always 637
  = always "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum FacHelper { value = 1 } ; } ; int diagonalGroupTest<4> ( ) ; int main ( ) { return diagonalGroupTest<4> ( ) ; } int diagonalGroupTest<4> ( ) { return Factorial<4> :: value ; } struct Factorial<4> { enum FacHelper { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum FacHelper { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum FacHelper { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum FacHelper { value = 1 * Factorial<0> :: value } ; } ;"
  "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum FacHelper { value = 1 } ; } ; int diagonalGroupTest<4> ( ) ; int main ( ) { return diagonalGroupTest<4> ( ) ; } int diagonalGroupTest<4> ( ) { return Factorial<4> :: value ; } struct Factorial<4> { enum FacHelper { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum FacHelper { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum FacHelper { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum FacHelper { value = 1 * Factorial<0> :: value } ; } ;" always "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum FacHelper { value = 1 } ; } ; int diagonalGroupTest<4> ( ) ; int main ( ) { return diagonalGroupTest<4> ( ) ; } int diagonalGroupTest<4> ( ) { return Factorial<4> :: value ; } struct Factorial<4> { enum FacHelper { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum FacHelper { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum FacHelper { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum FacHelper { value = 1 * Factorial<0> :: value } ; } ;"
Line 1456
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1456 always 1456
  exp always "struct Factorial<0> ; struct Factorial<4> ; struct Factorial<3> ; struct Factorial<2> ; struct Factorial<1> ; struct Factorial<0> { enum FacHelper { value = 1 } ; } ; int diagonalGroupTest<4> ( ) ; int main ( ) { return diagonalGroupTest<4> ( ) ; } int diagonalGroupTest<4> ( ) { return Factorial<4> :: value ; } struct Factorial<4> { enum FacHelper { value = 4 * Factorial<3> :: value } ; } ; struct Factorial<3> { enum FacHelper { value = 3 * Factorial<2> :: value } ; } ; struct Factorial<2> { enum FacHelper { value = 2 * Factorial<1> :: value } ; } ; struct Factorial<1> { enum FacHelper { value = 1 * Factorial<0> :: value } ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1456 always 1456
  code always "template<int N>\nstruct Factorial {\n    enum FacHelper { value = N * Factorial<N - 1>::value };\n};\ntemplate <>\nstruct Factorial<0> {\n    enum FacHelper { value = 1 };\n};\ntemplate<int DiagonalDegree>\nint diagonalGroupTest() {\n    return Factorial<DiagonalDegree>::value;\n}\nint main () {\n    return diagonalGroupTest<4>();\n}"
Line 1460
  176 always 176
  = always "template <typename T> struct S { typedef int type; };\ntemplate <typename T> void f() {}\ntemplate <typename T> void h() { f<typename S<T>::type(0)>(); }\n\nvoid j() { h<int>(); }"
  "template <typename T> struct S { typedef int type; };\ntemplate <typename T> void f() {}\ntemplate <typename T> void h() { f<typename S<T>::type(0)>(); }\n\nvoid j() { h<int>(); }" always "template <typename T> struct S { typedef int type; };\ntemplate <typename T> void f() {}\ntemplate <typename T> void h() { f<typename S<T>::type(0)>(); }\n\nvoid j() { h<int>(); }"
Line 1465
  189 always 189
  = always "struct S<int> ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } struct S<int> { } ; void f<S<int>::type(0)> ( ) { }"
  "struct S<int> ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } struct S<int> { } ; void f<S<int>::type(0)> ( ) { }" always "struct S<int> ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } struct S<int> { } ; void f<S<int>::type(0)> ( ) { }"
Line 1472
  192 always 192
  = always "template < typename T > struct S { } ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } void f<S<int>::type(0)> ( ) { }"
  "template < typename T > struct S { } ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } void f<S<int>::type(0)> ( ) { }" always "template < typename T > struct S { } ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } void f<S<int>::type(0)> ( ) { }"
Line 1478
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1478 always 1478
  exp always "struct S<int> ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } struct S<int> { } ; void f<S<int>::type(0)> ( ) { }"
  act always "template < typename T > struct S { } ; void f<S<int>::type(0)> ( ) ; void h<int> ( ) ; void j ( ) { h<int> ( ) ; } void h<int> ( ) { f<S<int>::type(0)> ( ) ; } void f<S<int>::type(0)> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1478 always 1478
  code always "template <typename T> struct S { typedef int type; };\ntemplate <typename T> void f() {}\ntemplate <typename T> void h() { f<typename S<T>::type(0)>(); }\n\nvoid j() { h<int>(); }"
Line 1482
  133 always 133
  = always "template <typename T> struct Foo {};\ntemplate <typename T> struct Bar {\n  void f1(Bar<T> x) {}\n  Foo<Bar<T>> f2() { }\n};\nBar<int> c;"
  "template <typename T> struct Foo {};\ntemplate <typename T> struct Bar {\n  void f1(Bar<T> x) {}\n  Foo<Bar<T>> f2() { }\n};\nBar<int> c;" always "template <typename T> struct Foo {};\ntemplate <typename T> struct Bar {\n  void f1(Bar<T> x) {}\n  Foo<Bar<T>> f2() { }\n};\nBar<int> c;"
Line 1488
  155 always 155
  = always "struct Foo<Bar<int>> ; struct Bar<int> ; Bar<int> c ; struct Bar<int> { void f1 ( Bar<int> x ) { } Foo<Bar<int>> f2 ( ) { } } ; struct Foo<Bar<int>> { } ;"
  "struct Foo<Bar<int>> ; struct Bar<int> ; Bar<int> c ; struct Bar<int> { void f1 ( Bar<int> x ) { } Foo<Bar<int>> f2 ( ) { } } ; struct Foo<Bar<int>> { } ;" always "struct Foo<Bar<int>> ; struct Bar<int> ; Bar<int> c ; struct Bar<int> { void f1 ( Bar<int> x ) { } Foo<Bar<int>> f2 ( ) { } } ; struct Foo<Bar<int>> { } ;"
Line 1496
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1496 always 1496
  exp always "struct Foo<Bar<int>> ; struct Bar<int> ; Bar<int> c ; struct Bar<int> { void f1 ( Bar<int> x ) { } Foo<Bar<int>> f2 ( ) { } } ; struct Foo<Bar<int>> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1496 always 1496
  code always "template <typename T> struct Foo {};\ntemplate <typename T> struct Bar {\n  void f1(Bar<T> x) {}\n  Foo<Bar<T>> f2() { }\n};\nBar<int> c;"
Line 1500
  236 always 236
  = always "template <class T> struct C1 {};\ntemplate <class T> void f() { x = y ? C1<int>::allocate(1) : 0; }\ntemplate <class T, unsigned S> class C3 {};\ntemplate <class T, unsigned S> C3<T, S>::C3(const C3<T, S> &v) { C1<T *> c1; }\nC3<int,6> c3;"
  "template <class T> struct C1 {};\ntemplate <class T> void f() { x = y ? C1<int>::allocate(1) : 0; }\ntemplate <class T, unsigned S> class C3 {};\ntemplate <class T, unsigned S> C3<T, S>::C3(const C3<T, S> &v) { C1<T *> c1; }\nC3<int,6> c3;" always "template <class T> struct C1 {};\ntemplate <class T> void f() { x = y ? C1<int>::allocate(1) : 0; }\ntemplate <class T, unsigned S> class C3 {};\ntemplate <class T, unsigned S> C3<T, S>::C3(const C3<T, S> &v) { C1<T *> c1; }\nC3<int,6> c3;"
Line 1505
  243 always 243
  = always "struct C1<int*> ; template < class T > void f ( ) { x = y ? ( C1 < int > :: allocate ( 1 ) ) : 0 ; } class C3<int,6> ; C3<int,6> c3 ; class C3<int,6> { } ; C3<int,6> :: C3<int,6> ( const C3<int,6> & v ) { C1<int*> c1 ; } struct C1<int*> { } ;"
  "struct C1<int*> ; template < class T > void f ( ) { x = y ? ( C1 < int > :: allocate ( 1 ) ) : 0 ; } class C3<int,6> ; C3<int,6> c3 ; class C3<int,6> { } ; C3<int,6> :: C3<int,6> ( const C3<int,6> & v ) { C1<int*> c1 ; } struct C1<int*> { } ;" always "struct C1<int*> ; template < class T > void f ( ) { x = y ? ( C1 < int > :: allocate ( 1 ) ) : 0 ; } class C3<int,6> ; C3<int,6> c3 ; class C3<int,6> { } ; C3<int,6> :: C3<int,6> ( const C3<int,6> & v ) { C1<int*> c1 ; } struct C1<int*> { } ;"
Line 1512
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1512 always 1512
  exp always "struct C1<int*> ; template < class T > void f ( ) { x = y ? ( C1 < int > :: allocate ( 1 ) ) : 0 ; } class C3<int,6> ; C3<int,6> c3 ; class C3<int,6> { } ; C3<int,6> :: C3<int,6> ( const C3<int,6> & v ) { C1<int*> c1 ; } struct C1<int*> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1512 always 1512
  code always "template <class T> struct C1 {};\ntemplate <class T> void f() { x = y ? C1<int>::allocate(1) : 0; }\ntemplate <class T, unsigned S> class C3 {};\ntemplate <class T, unsigned S> C3<T, S>::C3(const C3<T, S> &v) { C1<T *> c1; }\nC3<int,6> c3;"
Line 1516
  85 always 85
  = always "template<class T> struct TestClass { T m_hi; };TestClass<std::auto_ptr<v>> objTest3;"
  "template<class T> struct TestClass { T m_hi; };TestClass<std::auto_ptr<v>> objTest3;" always "template<class T> struct TestClass { T m_hi; };TestClass<std::auto_ptr<v>> objTest3;"
Line 1518
  146 always 146
  = always "struct TestClass<std::auto_ptr<v>> ; TestClass<std::auto_ptr<v>> objTest3 ; struct TestClass<std::auto_ptr<v>> { std :: auto_ptr < v > m_hi ; } ;"
  "struct TestClass<std::auto_ptr<v>> ; TestClass<std::auto_ptr<v>> objTest3 ; struct TestClass<std::auto_ptr<v>> { std :: auto_ptr < v > m_hi ; } ;" always "struct TestClass<std::auto_ptr<v>> ; TestClass<std::auto_ptr<v>> objTest3 ; struct TestClass<std::auto_ptr<v>> { std :: auto_ptr < v > m_hi ; } ;"
Line 1521
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1521 always 1521
  exp always "struct TestClass<std::auto_ptr<v>> ; TestClass<std::auto_ptr<v>> objTest3 ; struct TestClass<std::auto_ptr<v>> { std :: auto_ptr < v > m_hi ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1521 always 1521
  code always "template<class T> struct TestClass { T m_hi; };TestClass<std::auto_ptr<v>> objTest3;"
Line 1525
  181 always 181
  = always "template <typename T>\nbool foo(){return true;}\nstruct A {\ntemplate<int n>\nvoid t_func()\n{\n     if( n != 0 || foo<int>());\n}\nvoid t_caller()\n{\n    t_func<0>();\n    t_func<1>();\n}\n};"
  "template <typename T>\nbool foo(){return true;}\nstruct A {\ntemplate<int n>\nvoid t_func()\n{\n     if( n != 0 || foo<int>());\n}\nvoid t_caller()\n{\n    t_func<0>();\n    t_func<1>();\n}\n};" always "template <typename T>\nbool foo(){return true;}\nstruct A {\ntemplate<int n>\nvoid t_func()\n{\n     if( n != 0 || foo<int>());\n}\nvoid t_caller()\n{\n    t_func<0>();\n    t_func<1>();\n}\n};"
Line 1539
  295 always 295
  = always "bool foo<int> ( ) ; struct A { void t_func<0> ( ) ; void t_func<1> ( ) ; void t_caller ( ) { t_func<0> ( ) ; t_func<1> ( ) ; } } ; void A :: t_func<0> ( ) { if ( 0 != 0 || foo<int> ( ) ) { ; } } void A :: t_func<1> ( ) { if ( 1 != 0 || foo<int> ( ) ) { ; } } bool foo<int> ( ) { return true ; }"
  "bool foo<int> ( ) ; struct A { void t_func<0> ( ) ; void t_func<1> ( ) ; void t_caller ( ) { t_func<0> ( ) ; t_func<1> ( ) ; } } ; void A :: t_func<0> ( ) { if ( 0 != 0 || foo<int> ( ) ) { ; } } void A :: t_func<1> ( ) { if ( 1 != 0 || foo<int> ( ) ) { ; } } bool foo<int> ( ) { return true ; }" always "bool foo<int> ( ) ; struct A { void t_func<0> ( ) ; void t_func<1> ( ) ; void t_caller ( ) { t_func<0> ( ) ; t_func<1> ( ) ; } } ; void A :: t_func<0> ( ) { if ( 0 != 0 || foo<int> ( ) ) { ; } } void A :: t_func<1> ( ) { if ( 1 != 0 || foo<int> ( ) ) { ; } } bool foo<int> ( ) { return true ; }"
Line 1558
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1558 always 1558
  exp always "bool foo<int> ( ) ; struct A { void t_func<0> ( ) ; void t_func<1> ( ) ; void t_caller ( ) { t_func<0> ( ) ; t_func<1> ( ) ; } } ; void A :: t_func<0> ( ) { if ( 0 != 0 || foo<int> ( ) ) { ; } } void A :: t_func<1> ( ) { if ( 1 != 0 || foo<int> ( ) ) { ; } } bool foo<int> ( ) { return true ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1558 always 1558
  code always "template <typename T>\nbool foo(){return true;}\nstruct A {\ntemplate<int n>\nvoid t_func()\n{\n     if( n != 0 || foo<int>());\n}\nvoid t_caller()\n{\n    t_func<0>();\n    t_func<1>();\n}\n};"
Line 1562
  417 always 417
  = always "namespace bpp\n{\ntemplate<class N, class E, class DAGraphImpl>\nclass AssociationDAGraphImplObserver :\n  public AssociationGraphImplObserver<N, E, DAGraphImpl>\n{};\ntemplate<class N, class E>\nusing AssociationDAGlobalGraphObserver =  AssociationDAGraphImplObserver<N, E, DAGlobalGraph>;\n}\nusing namespace bpp;\nusing namespace std;\nint main() {\n  AssociationDAGlobalGraphObserver<string,unsigned int> grObs;\n return 1;\n}"
  "namespace bpp\n{\ntemplate<class N, class E, class DAGraphImpl>\nclass AssociationDAGraphImplObserver :\n  public AssociationGraphImplObserver<N, E, DAGraphImpl>\n{};\ntemplate<class N, class E>\nusing AssociationDAGlobalGraphObserver =  AssociationDAGraphImplObserver<N, E, DAGlobalGraph>;\n}\nusing namespace bpp;\nusing namespace std;\nint main() {\n  AssociationDAGlobalGraphObserver<string,unsigned int> grObs;\n return 1;\n}" always "namespace bpp\n{\ntemplate<class N, class E, class DAGraphImpl>\nclass AssociationDAGraphImplObserver :\n  public AssociationGraphImplObserver<N, E, DAGraphImpl>\n{};\ntemplate<class N, class E>\nusing AssociationDAGlobalGraphObserver =  AssociationDAGraphImplObserver<N, E, DAGlobalGraph>;\n}\nusing namespace bpp;\nusing namespace std;\nint main() {\n  AssociationDAGlobalGraphObserver<string,unsigned int> grObs;\n return 1;\n}"
Line 1577
  392 always 392
  = always "namespace bpp { class AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> ; } using namespace bpp ; int main ( ) { bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> grObs ; return 1 ; } class bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> : public AssociationGraphImplObserver < std :: string , unsigned int , DAGlobalGraph > { } ;"
  "namespace bpp { class AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> ; } using namespace bpp ; int main ( ) { bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> grObs ; return 1 ; } class bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> : public AssociationGraphImplObserver < std :: string , unsigned int , DAGlobalGraph > { } ;" always "namespace bpp { class AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> ; } using namespace bpp ; int main ( ) { bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> grObs ; return 1 ; } class bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> : public AssociationGraphImplObserver < std :: string , unsigned int , DAGlobalGraph > { } ;"
Line 1588
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1588 always 1588
  exp always "namespace bpp { class AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> ; } using namespace bpp ; int main ( ) { bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> grObs ; return 1 ; } class bpp :: AssociationDAGraphImplObserver<string,unsignedint,DAGlobalGraph> : public AssociationGraphImplObserver < std :: string , unsigned int , DAGlobalGraph > { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1588 always 1588
  code always "namespace bpp\n{\ntemplate<class N, class E, class DAGraphImpl>\nclass AssociationDAGraphImplObserver :\n  public AssociationGraphImplObserver<N, E, DAGraphImpl>\n{};\ntemplate<class N, class E>\nusing AssociationDAGlobalGraphObserver =  AssociationDAGraphImplObserver<N, E, DAGlobalGraph>;\n}\nusing namespace bpp;\nusing namespace std;\nint main() {\n  AssociationDAGlobalGraphObserver<string,unsigned int> grObs;\n return 1;\n}"
Line 1592
  143 always 143
  = always "template <class T> struct Fred {\n    const int ** foo();\n};\ntemplate <class T> const int ** Fred<T>::foo() { return nullptr; }\nFred<int> fred;"
  "template <class T> struct Fred {\n    const int ** foo();\n};\ntemplate <class T> const int ** Fred<T>::foo() { return nullptr; }\nFred<int> fred;" always "template <class T> struct Fred {\n    const int ** foo();\n};\ntemplate <class T> const int ** Fred<T>::foo() { return nullptr; }\nFred<int> fred;"
Line 1597
  139 always 139
  = always "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { const int * * foo ( ) ; } ; const int * * Fred<int> :: foo ( ) { return nullptr ; }"
  "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { const int * * foo ( ) ; } ; const int * * Fred<int> :: foo ( ) { return nullptr ; }" always "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { const int * * foo ( ) ; } ; const int * * Fred<int> :: foo ( ) { return nullptr ; }"
Line 1603
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1603 always 1603
  exp always "struct Fred<int> ; Fred<int> fred ; struct Fred<int> { const int * * foo ( ) ; } ; const int * * Fred<int> :: foo ( ) { return nullptr ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1603 always 1603
  code always "template <class T> struct Fred {\n    const int ** foo();\n};\ntemplate <class T> const int ** Fred<T>::foo() { return nullptr; }\nFred<int> fred;"
Line 1607
  583 always 583
  = always "template <class T> struct Container {\n  Container();\n  Container(const Container &);\n  Container & operator = (const Container &);\n  ~Container();\n  T* mElements;\n  const Container * c;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr), c(nullptr) {}\ntemplate <class T> Container<T>::Container(const Container & x) { nElements = x.nElements; c = x.c; }\ntemplate <class T> Container<T> & Container<T>::operator = (const Container & x) { mElements = x.mElements; c = x.c; return *this; }\ntemplate <class T> Container<T>::~Container() {}\nContainer<int> intContainer;"
  "template <class T> struct Container {\n  Container();\n  Container(const Container &);\n  Container & operator = (const Container &);\n  ~Container();\n  T* mElements;\n  const Container * c;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr), c(nullptr) {}\ntemplate <class T> Container<T>::Container(const Container & x) { nElements = x.nElements; c = x.c; }\ntemplate <class T> Container<T> & Container<T>::operator = (const Container & x) { mElements = x.mElements; c = x.c; return *this; }\ntemplate <class T> Container<T>::~Container() {}\nContainer<int> intContainer;" always "template <class T> struct Container {\n  Container();\n  Container(const Container &);\n  Container & operator = (const Container &);\n  ~Container();\n  T* mElements;\n  const Container * c;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr), c(nullptr) {}\ntemplate <class T> Container<T>::Container(const Container & x) { nElements = x.nElements; c = x.c; }\ntemplate <class T> Container<T> & Container<T>::operator = (const Container & x) { mElements = x.mElements; c = x.c; return *this; }\ntemplate <class T> Container<T>::~Container() {}\nContainer<int> intContainer;"
Line 1621
  635 always 635
  = always "struct Container<int> ; Container<int> intContainer ; struct Container<int> { Container<int> ( ) ; Container<int> ( const Container<int> & ) ; Container<int> & operator= ( const Container<int> & ) ; ~ Container<int> ( ) ; int * mElements ; const Container<int> * c ; } ; Container<int> :: Container<int> ( ) : mElements ( nullptr ) , c ( nullptr ) { } Container<int> :: Container<int> ( const Container<int> & x ) { nElements = x . nElements ; c = x . c ; } Container<int> & Container<int> :: operator= ( const Container<int> & x ) { mElements = x . mElements ; c = x . c ; return * this ; } Container<int> :: ~ Container<int> ( ) { }"
  "struct Container<int> ; Container<int> intContainer ; struct Container<int> { Container<int> ( ) ; Container<int> ( const Container<int> & ) ; Container<int> & operator= ( const Container<int> & ) ; ~ Container<int> ( ) ; int * mElements ; const Container<int> * c ; } ; Container<int> :: Container<int> ( ) : mElements ( nullptr ) , c ( nullptr ) { } Container<int> :: Container<int> ( const Container<int> & x ) { nElements = x . nElements ; c = x . c ; } Container<int> & Container<int> :: operator= ( const Container<int> & x ) { mElements = x . mElements ; c = x . c ; return * this ; } Container<int> :: ~ Container<int> ( ) { }" always "struct Container<int> ; Container<int> intContainer ; struct Container<int> { Container<int> ( ) ; Container<int> ( const Container<int> & ) ; Container<int> & operator= ( const Container<int> & ) ; ~ Container<int> ( ) ; int * mElements ; const Container<int> * c ; } ; Container<int> :: Container<int> ( ) : mElements ( nullptr ) , c ( nullptr ) { } Container<int> :: Container<int> ( const Container<int> & x ) { nElements = x . nElements ; c = x . c ; } Container<int> & Container<int> :: operator= ( const Container<int> & x ) { mElements = x . mElements ; c = x . c ; return * this ; } Container<int> :: ~ Container<int> ( ) { }"
Line 1636
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1636 always 1636
  expected always "struct Container<int> ; Container<int> intContainer ; struct Container<int> { Container<int> ( ) ; Container<int> ( const Container<int> & ) ; Container<int> & operator= ( const Container<int> & ) ; ~ Container<int> ( ) ; int * mElements ; const Container<int> * c ; } ; Container<int> :: Container<int> ( ) : mElements ( nullptr ) , c ( nullptr ) { } Container<int> :: Container<int> ( const Container<int> & x ) { nElements = x . nElements ; c = x . c ; } Container<int> & Container<int> :: operator= ( const Container<int> & x ) { mElements = x . mElements ; c = x . c ; return * this ; } Container<int> :: ~ Container<int> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1636 always 1636
  code always "template <class T> struct Container {\n  Container();\n  Container(const Container &);\n  Container & operator = (const Container &);\n  ~Container();\n  T* mElements;\n  const Container * c;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr), c(nullptr) {}\ntemplate <class T> Container<T>::Container(const Container & x) { nElements = x.nElements; c = x.c; }\ntemplate <class T> Container<T> & Container<T>::operator = (const Container & x) { mElements = x.mElements; c = x.c; return *this; }\ntemplate <class T> Container<T>::~Container() {}\nContainer<int> intContainer;"
Line 1640
  91 always 91
  = always "template <class T> union Fred {\n    char dummy[sizeof(T)];\n    T value;\n};\nFred<int> fred;"
  "template <class T> union Fred {\n    char dummy[sizeof(T)];\n    T value;\n};\nFred<int> fred;" always "template <class T> union Fred {\n    char dummy[sizeof(T)];\n    T value;\n};\nFred<int> fred;"
Line 1645
  101 always 101
  = always "union Fred<int> ; Fred<int> fred ; union Fred<int> { char dummy [ sizeof ( int ) ] ; int value ; } ;"
  "union Fred<int> ; Fred<int> fred ; union Fred<int> { char dummy [ sizeof ( int ) ] ; int value ; } ;" always "union Fred<int> ; Fred<int> fred ; union Fred<int> { char dummy [ sizeof ( int ) ] ; int value ; } ;"
Line 1651
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1651 always 1651
  exp always "union Fred<int> ; Fred<int> fred ; union Fred<int> { char dummy [ sizeof ( int ) ] ; int value ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1651 always 1651
  code always "template <class T> union Fred {\n    char dummy[sizeof(T)];\n    T value;\n};\nFred<int> fred;"
Line 1655
  121 always 121
  = always "class Test {\n    int test;\n    template <class T> T lookup() { return test; }\n    int Fun() { return lookup<int>(); }\n};"
  "class Test {\n    int test;\n    template <class T> T lookup() { return test; }\n    int Fun() { return lookup<int>(); }\n};" always "class Test {\n    int test;\n    template <class T> T lookup() { return test; }\n    int Fun() { return lookup<int>(); }\n};"
Line 1660
  137 always 137
  = always "class Test { int test ; int lookup<int> ( ) ; int Fun ( ) { return lookup<int> ( ) ; } } ; int Test :: lookup<int> ( ) { return test ; }"
  "class Test { int test ; int lookup<int> ( ) ; int Fun ( ) { return lookup<int> ( ) ; } } ; int Test :: lookup<int> ( ) { return test ; }" always "class Test { int test ; int lookup<int> ( ) ; int Fun ( ) { return lookup<int> ( ) ; } } ; int Test :: lookup<int> ( ) { return test ; }"
Line 1666
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1666 always 1666
  exp always "class Test { int test ; int lookup<int> ( ) ; int Fun ( ) { return lookup<int> ( ) ; } } ; int Test :: lookup<int> ( ) { return test ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1666 always 1666
  code always "class Test {\n    int test;\n    template <class T> T lookup() { return test; }\n    int Fun() { return lookup<int>(); }\n};"
Line 1670
  204 always 204
  = always "template<typename T, typename V, int KeySize = 0> class Bar;\ntemplate<>\nclass Bar<void, void> {\n};\ntemplate<typename K, typename V, int KeySize>\nclass Bar : private Bar<void, void> {\n   void foo() { }\n};"
  "template<typename T, typename V, int KeySize = 0> class Bar;\ntemplate<>\nclass Bar<void, void> {\n};\ntemplate<typename K, typename V, int KeySize>\nclass Bar : private Bar<void, void> {\n   void foo() { }\n};" always "template<typename T, typename V, int KeySize = 0> class Bar;\ntemplate<>\nclass Bar<void, void> {\n};\ntemplate<typename K, typename V, int KeySize>\nclass Bar : private Bar<void, void> {\n   void foo() { }\n};"
Line 1678
  230 always 230
  = always "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> ; class Bar<void,void> { } ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;"
  "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> ; class Bar<void,void> { } ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;" always "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> ; class Bar<void,void> { } ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;"
Line 1686
  230 always 230
  = always "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> { } ; class Bar<void,void> ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;"
  "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> { } ; class Bar<void,void> ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;" always "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> { } ; class Bar<void,void> ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;"
Line 1694
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1694 always 1694
  exp always "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> ; class Bar<void,void> { } ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;"
  act always "template < typename T , typename V , int KeySize = 0 > class Bar ; class Bar<void,void> { } ; class Bar<void,void> ; template < typename K , typename V , int KeySize = 0 > class Bar : private Bar<void,void> { void foo ( ) { } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1694 always 1694
  code always "template<typename T, typename V, int KeySize = 0> class Bar;\ntemplate<>\nclass Bar<void, void> {\n};\ntemplate<typename K, typename V, int KeySize>\nclass Bar : private Bar<void, void> {\n   void foo() { }\n};"
Line 1698
  342 always 342
  = always "int f1(int * pInterface, int x) { return 0; }\n\ntemplate< class interface_type > class Reference {\n  template< class interface_type > int i();\n  int *pInterface;\n};\n\ntemplate< class interface_type > int Reference< interface_type >::i() {\n    return f1(pInterface, interface_type::static_type());\n}\n\nReference< class XPropertyList > dostuff();"
  "int f1(int * pInterface, int x) { return 0; }\n\ntemplate< class interface_type > class Reference {\n  template< class interface_type > int i();\n  int *pInterface;\n};\n\ntemplate< class interface_type > int Reference< interface_type >::i() {\n    return f1(pInterface, interface_type::static_type());\n}\n\nReference< class XPropertyList > dostuff();" always "int f1(int * pInterface, int x) { return 0; }\n\ntemplate< class interface_type > class Reference {\n  template< class interface_type > int i();\n  int *pInterface;\n};\n\ntemplate< class interface_type > int Reference< interface_type >::i() {\n    return f1(pInterface, interface_type::static_type());\n}\n\nReference< class XPropertyList > dostuff();"
Line 1710
  328 always 328
  = always "int f1 ( int * pInterface , int x ) { return 0 ; } class Reference<XPropertyList> ; Reference<XPropertyList> dostuff ( ) ; class Reference<XPropertyList> { template < class XPropertyList > int i ( ) ; int * pInterface ; } ; int Reference<XPropertyList> :: i ( ) { return f1 ( pInterface , XPropertyList :: static_type ( ) ) ; }"
  "int f1 ( int * pInterface , int x ) { return 0 ; } class Reference<XPropertyList> ; Reference<XPropertyList> dostuff ( ) ; class Reference<XPropertyList> { template < class XPropertyList > int i ( ) ; int * pInterface ; } ; int Reference<XPropertyList> :: i ( ) { return f1 ( pInterface , XPropertyList :: static_type ( ) ) ; }" always "int f1 ( int * pInterface , int x ) { return 0 ; } class Reference<XPropertyList> ; Reference<XPropertyList> dostuff ( ) ; class Reference<XPropertyList> { template < class XPropertyList > int i ( ) ; int * pInterface ; } ; int Reference<XPropertyList> :: i ( ) { return f1 ( pInterface , XPropertyList :: static_type ( ) ) ; }"
Line 1715
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1715 always 1715
  exp always "int f1 ( int * pInterface , int x ) { return 0 ; } class Reference<XPropertyList> ; Reference<XPropertyList> dostuff ( ) ; class Reference<XPropertyList> { template < class XPropertyList > int i ( ) ; int * pInterface ; } ; int Reference<XPropertyList> :: i ( ) { return f1 ( pInterface , XPropertyList :: static_type ( ) ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1715 always 1715
  code always "int f1(int * pInterface, int x) { return 0; }\n\ntemplate< class interface_type > class Reference {\n  template< class interface_type > int i();\n  int *pInterface;\n};\n\ntemplate< class interface_type > int Reference< interface_type >::i() {\n    return f1(pInterface, interface_type::static_type());\n}\n\nReference< class XPropertyList > dostuff();"
Line 1719
  166 always 166
  = always "template <typename N, typename P> class Tokenizer;\nconst Tokenizer<Node, Path> *tokenizer() const;\ntemplate <typename N, typename P>\nTokenizer<N, P>::Tokenizer() { }"
  "template <typename N, typename P> class Tokenizer;\nconst Tokenizer<Node, Path> *tokenizer() const;\ntemplate <typename N, typename P>\nTokenizer<N, P>::Tokenizer() { }" always "template <typename N, typename P> class Tokenizer;\nconst Tokenizer<Node, Path> *tokenizer() const;\ntemplate <typename N, typename P>\nTokenizer<N, P>::Tokenizer() { }"
Line 1723
  189 always 189
  = always "template < typename N , typename P > class Tokenizer ; const Tokenizer < Node , Path > * tokenizer ( ) const ; template < typename N , typename P > Tokenizer < N , P > :: Tokenizer ( ) { }"
  "template < typename N , typename P > class Tokenizer ; const Tokenizer < Node , Path > * tokenizer ( ) const ; template < typename N , typename P > Tokenizer < N , P > :: Tokenizer ( ) { }" always "template < typename N , typename P > class Tokenizer ; const Tokenizer < Node , Path > * tokenizer ( ) const ; template < typename N , typename P > Tokenizer < N , P > :: Tokenizer ( ) { }"
Line 1727
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1727 always 1727
  exp always "template < typename N , typename P > class Tokenizer ; const Tokenizer < Node , Path > * tokenizer ( ) const ; template < typename N , typename P > Tokenizer < N , P > :: Tokenizer ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1727 always 1727
  code always "template <typename N, typename P> class Tokenizer;\nconst Tokenizer<Node, Path> *tokenizer() const;\ntemplate <typename N, typename P>\nTokenizer<N, P>::Tokenizer() { }"
Line 1731
  215 always 215
  = always "template<typename T>\nvoid keep_range(T& value, const T mini, const T maxi){}\ntemplate void keep_range<float>(float& v, const float l, const float u);\ntemplate void keep_range<int>(int& v, const int l, const int u);"
  "template<typename T>\nvoid keep_range(T& value, const T mini, const T maxi){}\ntemplate void keep_range<float>(float& v, const float l, const float u);\ntemplate void keep_range<int>(int& v, const int l, const int u);" always "template<typename T>\nvoid keep_range(T& value, const T mini, const T maxi){}\ntemplate void keep_range<float>(float& v, const float l, const float u);\ntemplate void keep_range<int>(int& v, const int l, const int u);"
Line 1735
  312 always 312
  = always "void keep_range<float> ( float & value , const float mini , const float maxi ) ; void keep_range<int> ( int & value , const int mini , const int maxi ) ; void keep_range<float> ( float & value , const float mini , const float maxi ) { } void keep_range<int> ( int & value , const int mini , const int maxi ) { }"
  "void keep_range<float> ( float & value , const float mini , const float maxi ) ; void keep_range<int> ( int & value , const int mini , const int maxi ) ; void keep_range<float> ( float & value , const float mini , const float maxi ) { } void keep_range<int> ( int & value , const int mini , const int maxi ) { }" always "void keep_range<float> ( float & value , const float mini , const float maxi ) ; void keep_range<int> ( int & value , const int mini , const int maxi ) ; void keep_range<float> ( float & value , const float mini , const float maxi ) { } void keep_range<int> ( int & value , const int mini , const int maxi ) { }"
Line 1739
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1739 always 1739
  exp always "void keep_range<float> ( float & value , const float mini , const float maxi ) ; void keep_range<int> ( int & value , const int mini , const int maxi ) ; void keep_range<float> ( float & value , const float mini , const float maxi ) { } void keep_range<int> ( int & value , const int mini , const int maxi ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1739 always 1739
  code always "template<typename T>\nvoid keep_range(T& value, const T mini, const T maxi){}\ntemplate void keep_range<float>(float& v, const float l, const float u);\ntemplate void keep_range<int>(int& v, const int l, const int u);"
Line 1743
  117 always 117
  = always "template <class T> class BTlist { };\nclass PushBackStreamBuf {\npublic:\n    void pushBack(const BTlist<int> &vec);\n};"
  "template <class T> class BTlist { };\nclass PushBackStreamBuf {\npublic:\n    void pushBack(const BTlist<int> &vec);\n};" always "template <class T> class BTlist { };\nclass PushBackStreamBuf {\npublic:\n    void pushBack(const BTlist<int> &vec);\n};"
Line 1748
  126 always 126
  = always "class BTlist<int> ; class PushBackStreamBuf { public: void pushBack ( const BTlist<int> & vec ) ; } ; class BTlist<int> { } ;"
  "class BTlist<int> ; class PushBackStreamBuf { public: void pushBack ( const BTlist<int> & vec ) ; } ; class BTlist<int> { } ;" always "class BTlist<int> ; class PushBackStreamBuf { public: void pushBack ( const BTlist<int> & vec ) ; } ; class BTlist<int> { } ;"
Line 1754
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1754 always 1754
  exp always "class BTlist<int> ; class PushBackStreamBuf { public: void pushBack ( const BTlist<int> & vec ) ; } ; class BTlist<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1754 always 1754
  code always "template <class T> class BTlist { };\nclass PushBackStreamBuf {\npublic:\n    void pushBack(const BTlist<int> &vec);\n};"
Line 1758
  163 always 163
  = always "template<typename T>\nT foo(T& value){ return value; }\ntemplate std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);"
  "template<typename T>\nT foo(T& value){ return value; }\ntemplate std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);" always "template<typename T>\nT foo(T& value){ return value; }\ntemplate std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);"
Line 1761
  275 always 275
  = always "std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }"
  "std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }" always "std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }"
Line 1763
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1763 always 1763
  exp always "std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1763 always 1763
  code always "template<typename T>\nT foo(T& value){ return value; }\ntemplate std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);"
Line 1767
  266 always 266
  = always "namespace NS {\n    template<typename T> T foo(T& value) { return value; }\n    template std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);\n}\nstd::vector<std::vector<int>> v;\nv = foo<std::vector<std::vector<int>>>(v);\n"
  "namespace NS {\n    template<typename T> T foo(T& value) { return value; }\n    template std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);\n}\nstd::vector<std::vector<int>> v;\nv = foo<std::vector<std::vector<int>>>(v);\n" always "namespace NS {\n    template<typename T> T foo(T& value) { return value; }\n    template std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);\n}\nstd::vector<std::vector<int>> v;\nv = foo<std::vector<std::vector<int>>>(v);\n"
Line 1773
  389 always 389
  = always "namespace NS { std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; } std :: vector < std :: vector < int > > v ; v = foo<std::vector<std::vector<int>>> ( v ) ; std :: vector < std :: vector < int > > NS :: foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }"
  "namespace NS { std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; } std :: vector < std :: vector < int > > v ; v = foo<std::vector<std::vector<int>>> ( v ) ; std :: vector < std :: vector < int > > NS :: foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }" always "namespace NS { std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; } std :: vector < std :: vector < int > > v ; v = foo<std::vector<std::vector<int>>> ( v ) ; std :: vector < std :: vector < int > > NS :: foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }"
Line 1779
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1779 always 1779
  exp always "namespace NS { std :: vector < std :: vector < int > > foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) ; } std :: vector < std :: vector < int > > v ; v = foo<std::vector<std::vector<int>>> ( v ) ; std :: vector < std :: vector < int > > NS :: foo<std::vector<std::vector<int>>> ( std :: vector < std :: vector < int > > & value ) { return value ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1779 always 1779
  code always "namespace NS {\n    template<typename T> T foo(T& value) { return value; }\n    template std::vector<std::vector<int>> foo<std::vector<std::vector<int>>>(std::vector<std::vector<int>>& v);\n}\nstd::vector<std::vector<int>> v;\nv = foo<std::vector<std::vector<int>>>(v);\n"
Line 1783
  232 always 232
  = always "template<typename T>\nstruct is_void : std::false_type { };\ntemplate<>\nstruct is_void<void> : std::true_type { };\nint main() {\n    std::cout << is_void<char>::value << std::endl;\n    std::cout << is_void<void>::value << std::endl;\n}"
  "template<typename T>\nstruct is_void : std::false_type { };\ntemplate<>\nstruct is_void<void> : std::true_type { };\nint main() {\n    std::cout << is_void<char>::value << std::endl;\n    std::cout << is_void<void>::value << std::endl;\n}" always "template<typename T>\nstruct is_void : std::false_type { };\ntemplate<>\nstruct is_void<void> : std::true_type { };\nint main() {\n    std::cout << is_void<char>::value << std::endl;\n    std::cout << is_void<void>::value << std::endl;\n}"
Line 1791
  266 always 266
  = always "struct is_void<void> ; struct is_void<char> ; struct is_void<void> : std :: true_type { } ; int main ( ) { std :: cout << is_void<char> :: value << std :: endl ; std :: cout << is_void<void> :: value << std :: endl ; } struct is_void<char> : std :: false_type { } ;"
  "struct is_void<void> ; struct is_void<char> ; struct is_void<void> : std :: true_type { } ; int main ( ) { std :: cout << is_void<char> :: value << std :: endl ; std :: cout << is_void<void> :: value << std :: endl ; } struct is_void<char> : std :: false_type { } ;" always "struct is_void<void> ; struct is_void<char> ; struct is_void<void> : std :: true_type { } ; int main ( ) { std :: cout << is_void<char> :: value << std :: endl ; std :: cout << is_void<void> :: value << std :: endl ; } struct is_void<char> : std :: false_type { } ;"
Line 1799
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1799 always 1799
  exp always "struct is_void<void> ; struct is_void<char> ; struct is_void<void> : std :: true_type { } ; int main ( ) { std :: cout << is_void<char> :: value << std :: endl ; std :: cout << is_void<void> :: value << std :: endl ; } struct is_void<char> : std :: false_type { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1799 always 1799
  code always "template<typename T>\nstruct is_void : std::false_type { };\ntemplate<>\nstruct is_void<void> : std::true_type { };\nint main() {\n    std::cout << is_void<char>::value << std::endl;\n    std::cout << is_void<void>::value << std::endl;\n}"
Line 1803
  71 always 71
  = always "template <typename>\nstruct Base { };\nstruct S : Base <void>::Type { };"
  "template <typename>\nstruct Base { };\nstruct S : Base <void>::Type { };" always "template <typename>\nstruct Base { };\nstruct S : Base <void>::Type { };"
Line 1806
  80 always 80
  = always "struct Base<void> ; struct S : Base<void> :: Type { } ; struct Base<void> { } ;"
  "struct Base<void> ; struct S : Base<void> :: Type { } ; struct Base<void> { } ;" always "struct Base<void> ; struct S : Base<void> :: Type { } ; struct Base<void> { } ;"
Line 1809
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1809 always 1809
  exp always "struct Base<void> ; struct S : Base<void> :: Type { } ; struct Base<void> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1809 always 1809
  code always "template <typename>\nstruct Base { };\nstruct S : Base <void>::Type { };"
Line 1813
  200 always 200
  = always "class Foo {\npublic:\n    template<typename T> void foo() { bar<T>(); }\nprivate:\n    template<typename T> void bar() { bazz(); }\n    void bazz() { }\n};\nvoid some_func() {\n    Foo x;\n    x.foo<int>();\n}"
  "class Foo {\npublic:\n    template<typename T> void foo() { bar<T>(); }\nprivate:\n    template<typename T> void bar() { bazz(); }\n    void bazz() { }\n};\nvoid some_func() {\n    Foo x;\n    x.foo<int>();\n}" always "class Foo {\npublic:\n    template<typename T> void foo() { bar<T>(); }\nprivate:\n    template<typename T> void bar() { bazz(); }\n    void bazz() { }\n};\nvoid some_func() {\n    Foo x;\n    x.foo<int>();\n}"
Line 1824
  225 always 225
  = always "class Foo { public: void foo<int> ( ) ; private: void bar<int> ( ) ; void bazz ( ) { } } ; void some_func ( ) { Foo x ; x . foo<int> ( ) ; } void Foo :: foo<int> ( ) { bar<int> ( ) ; } void Foo :: bar<int> ( ) { bazz ( ) ; }"
  "class Foo { public: void foo<int> ( ) ; private: void bar<int> ( ) ; void bazz ( ) { } } ; void some_func ( ) { Foo x ; x . foo<int> ( ) ; } void Foo :: foo<int> ( ) { bar<int> ( ) ; } void Foo :: bar<int> ( ) { bazz ( ) ; }" always "class Foo { public: void foo<int> ( ) ; private: void bar<int> ( ) ; void bazz ( ) { } } ; void some_func ( ) { Foo x ; x . foo<int> ( ) ; } void Foo :: foo<int> ( ) { bar<int> ( ) ; } void Foo :: bar<int> ( ) { bazz ( ) ; }"
Line 1837
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1837 always 1837
  exp always "class Foo { public: void foo<int> ( ) ; private: void bar<int> ( ) ; void bazz ( ) { } } ; void some_func ( ) { Foo x ; x . foo<int> ( ) ; } void Foo :: foo<int> ( ) { bar<int> ( ) ; } void Foo :: bar<int> ( ) { bazz ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1837 always 1837
  code always "class Foo {\npublic:\n    template<typename T> void foo() { bar<T>(); }\nprivate:\n    template<typename T> void bar() { bazz(); }\n    void bazz() { }\n};\nvoid some_func() {\n    Foo x;\n    x.foo<int>();\n}"
Line 1841
  124 always 124
  = always "class Fred {\n    template <typename T> T foo(T t) const { return t; }\n};\nconst void * p = Fred::foo<const void *>(nullptr);"
  "class Fred {\n    template <typename T> T foo(T t) const { return t; }\n};\nconst void * p = Fred::foo<const void *>(nullptr);" always "class Fred {\n    template <typename T> T foo(T t) const { return t; }\n};\nconst void * p = Fred::foo<const void *>(nullptr);"
Line 1845
  209 always 209
  = always "class Fred { const void * foo<constvoid*> ( const void * t ) const ; } ; const void * p ; p = Fred :: foo<constvoid*> ( nullptr ) ; const void * Fred :: foo<constvoid*> ( const void * t ) const { return t ; }"
  "class Fred { const void * foo<constvoid*> ( const void * t ) const ; } ; const void * p ; p = Fred :: foo<constvoid*> ( nullptr ) ; const void * Fred :: foo<constvoid*> ( const void * t ) const { return t ; }" always "class Fred { const void * foo<constvoid*> ( const void * t ) const ; } ; const void * p ; p = Fred :: foo<constvoid*> ( nullptr ) ; const void * Fred :: foo<constvoid*> ( const void * t ) const { return t ; }"
Line 1850
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1850 always 1850
  exp always "class Fred { const void * foo<constvoid*> ( const void * t ) const ; } ; const void * p ; p = Fred :: foo<constvoid*> ( nullptr ) ; const void * Fred :: foo<constvoid*> ( const void * t ) const { return t ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1850 always 1850
  code always "class Fred {\n    template <typename T> T foo(T t) const { return t; }\n};\nconst void * p = Fred::foo<const void *>(nullptr);"
Line 1854
  162 always 162
  = always "template <typename Type>\nstruct SortWith {\n    SortWith(Type);\n};\ntemplate <typename Type>\nSortWith<Type>::SortWith(Type) {}\nint main() {\n    SortWith<int>(0);\n}"
  "template <typename Type>\nstruct SortWith {\n    SortWith(Type);\n};\ntemplate <typename Type>\nSortWith<Type>::SortWith(Type) {}\nint main() {\n    SortWith<int>(0);\n}" always "template <typename Type>\nstruct SortWith {\n    SortWith(Type);\n};\ntemplate <typename Type>\nSortWith<Type>::SortWith(Type) {}\nint main() {\n    SortWith<int>(0);\n}"
Line 1863
  192 always 192
  = always "template < typename Type > struct SortWith { SortWith ( Type ) ; } ; SortWith<int> :: SortWith<int> ( int ) ; int main ( ) { SortWith<int> ( 0 ) ; } SortWith<int> :: SortWith<int> ( int ) { }"
  "template < typename Type > struct SortWith { SortWith ( Type ) ; } ; SortWith<int> :: SortWith<int> ( int ) ; int main ( ) { SortWith<int> ( 0 ) ; } SortWith<int> :: SortWith<int> ( int ) { }" always "template < typename Type > struct SortWith { SortWith ( Type ) ; } ; SortWith<int> :: SortWith<int> ( int ) ; int main ( ) { SortWith<int> ( 0 ) ; } SortWith<int> :: SortWith<int> ( int ) { }"
Line 1872
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1872 always 1872
  exp always "template < typename Type > struct SortWith { SortWith ( Type ) ; } ; SortWith<int> :: SortWith<int> ( int ) ; int main ( ) { SortWith<int> ( 0 ) ; } SortWith<int> :: SortWith<int> ( int ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1872 always 1872
  code always "template <typename Type>\nstruct SortWith {\n    SortWith(Type);\n};\ntemplate <typename Type>\nSortWith<Type>::SortWith(Type) {}\nint main() {\n    SortWith<int>(0);\n}"
Line 1876
  344 always 344
  = always "typedef int comp;\nconst int f16=16;\ntemplate<int x>\nclass tvec2 {};\ntemplate<int x>\nclass tvec3 {};\nnamespace swizzle {\ntemplate <comp> void swizzle(tvec2<f16> v) { }\ntemplate <comp x, comp y> void swizzle(tvec3<f16> v) { }\n}\nvoid foo() {\n  using namespace swizzle;\n  tvec2<f16> tt2;\n  swizzle<1>(tt2);\n  tvec3<f16> tt3;\n  swizzle<2,3>(tt3);\n}"
  "typedef int comp;\nconst int f16=16;\ntemplate<int x>\nclass tvec2 {};\ntemplate<int x>\nclass tvec3 {};\nnamespace swizzle {\ntemplate <comp> void swizzle(tvec2<f16> v) { }\ntemplate <comp x, comp y> void swizzle(tvec3<f16> v) { }\n}\nvoid foo() {\n  using namespace swizzle;\n  tvec2<f16> tt2;\n  swizzle<1>(tt2);\n  tvec3<f16> tt3;\n  swizzle<2,3>(tt3);\n}" always "typedef int comp;\nconst int f16=16;\ntemplate<int x>\nclass tvec2 {};\ntemplate<int x>\nclass tvec3 {};\nnamespace swizzle {\ntemplate <comp> void swizzle(tvec2<f16> v) { }\ntemplate <comp x, comp y> void swizzle(tvec3<f16> v) { }\n}\nvoid foo() {\n  using namespace swizzle;\n  tvec2<f16> tt2;\n  swizzle<1>(tt2);\n  tvec3<f16> tt3;\n  swizzle<2,3>(tt3);\n}"
Line 1893
  440 always 440
  = always "const int f16 = 16 ; class tvec2<f16> ; class tvec3<f16> ; namespace swizzle { void swizzle<1> ( tvec2<f16> v ) ; void swizzle<2,3> ( tvec3<f16> v ) ; } void foo ( ) { using namespace swizzle ; tvec2<f16> tt2 ; swizzle :: swizzle<1> ( tt2 ) ; tvec3<f16> tt3 ; swizzle :: swizzle<2,3> ( tt3 ) ; } void swizzle :: swizzle<2,3> ( tvec3<f16> v ) { } void swizzle :: swizzle<1> ( tvec2<f16> v ) { } class tvec3<f16> { } ; class tvec2<f16> { } ;"
  "const int f16 = 16 ; class tvec2<f16> ; class tvec3<f16> ; namespace swizzle { void swizzle<1> ( tvec2<f16> v ) ; void swizzle<2,3> ( tvec3<f16> v ) ; } void foo ( ) { using namespace swizzle ; tvec2<f16> tt2 ; swizzle :: swizzle<1> ( tt2 ) ; tvec3<f16> tt3 ; swizzle :: swizzle<2,3> ( tt3 ) ; } void swizzle :: swizzle<2,3> ( tvec3<f16> v ) { } void swizzle :: swizzle<1> ( tvec2<f16> v ) { } class tvec3<f16> { } ; class tvec2<f16> { } ;" always "const int f16 = 16 ; class tvec2<f16> ; class tvec3<f16> ; namespace swizzle { void swizzle<1> ( tvec2<f16> v ) ; void swizzle<2,3> ( tvec3<f16> v ) ; } void foo ( ) { using namespace swizzle ; tvec2<f16> tt2 ; swizzle :: swizzle<1> ( tt2 ) ; tvec3<f16> tt3 ; swizzle :: swizzle<2,3> ( tt3 ) ; } void swizzle :: swizzle<2,3> ( tvec3<f16> v ) { } void swizzle :: swizzle<1> ( tvec2<f16> v ) { } class tvec3<f16> { } ; class tvec2<f16> { } ;"
Line 1911
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1911 always 1911
  exp always "const int f16 = 16 ; class tvec2<f16> ; class tvec3<f16> ; namespace swizzle { void swizzle<1> ( tvec2<f16> v ) ; void swizzle<2,3> ( tvec3<f16> v ) ; } void foo ( ) { using namespace swizzle ; tvec2<f16> tt2 ; swizzle :: swizzle<1> ( tt2 ) ; tvec3<f16> tt3 ; swizzle :: swizzle<2,3> ( tt3 ) ; } void swizzle :: swizzle<2,3> ( tvec3<f16> v ) { } void swizzle :: swizzle<1> ( tvec2<f16> v ) { } class tvec3<f16> { } ; class tvec2<f16> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1911 always 1911
  code always "typedef int comp;\nconst int f16=16;\ntemplate<int x>\nclass tvec2 {};\ntemplate<int x>\nclass tvec3 {};\nnamespace swizzle {\ntemplate <comp> void swizzle(tvec2<f16> v) { }\ntemplate <comp x, comp y> void swizzle(tvec3<f16> v) { }\n}\nvoid foo() {\n  using namespace swizzle;\n  tvec2<f16> tt2;\n  swizzle<1>(tt2);\n  tvec3<f16> tt3;\n  swizzle<2,3>(tt3);\n}"
Line 1915
  223 always 223
  = always "template<typename Task>\nclass MultiConsumer {\n    MultiConsumer();\n};\ntemplate<typename Task>\nMultiConsumer<Task>::MultiConsumer() : sizeBuffer(0) {}\nMultiReads::MultiReads() {\n    mc = new MultiConsumer<reads_packet>();\n}"
  "template<typename Task>\nclass MultiConsumer {\n    MultiConsumer();\n};\ntemplate<typename Task>\nMultiConsumer<Task>::MultiConsumer() : sizeBuffer(0) {}\nMultiReads::MultiReads() {\n    mc = new MultiConsumer<reads_packet>();\n}" always "template<typename Task>\nclass MultiConsumer {\n    MultiConsumer();\n};\ntemplate<typename Task>\nMultiConsumer<Task>::MultiConsumer() : sizeBuffer(0) {}\nMultiReads::MultiReads() {\n    mc = new MultiConsumer<reads_packet>();\n}"
Line 1924
  300 always 300
  = always "template < typename Task > class MultiConsumer { MultiConsumer ( ) ; } ; MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) ; MultiReads :: MultiReads ( ) { mc = new MultiConsumer<reads_packet> ( ) ; } MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) : sizeBuffer ( 0 ) { }"
  "template < typename Task > class MultiConsumer { MultiConsumer ( ) ; } ; MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) ; MultiReads :: MultiReads ( ) { mc = new MultiConsumer<reads_packet> ( ) ; } MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) : sizeBuffer ( 0 ) { }" always "template < typename Task > class MultiConsumer { MultiConsumer ( ) ; } ; MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) ; MultiReads :: MultiReads ( ) { mc = new MultiConsumer<reads_packet> ( ) ; } MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) : sizeBuffer ( 0 ) { }"
Line 1933
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1933 always 1933
  exp always "template < typename Task > class MultiConsumer { MultiConsumer ( ) ; } ; MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) ; MultiReads :: MultiReads ( ) { mc = new MultiConsumer<reads_packet> ( ) ; } MultiConsumer<reads_packet> :: MultiConsumer<reads_packet> ( ) : sizeBuffer ( 0 ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1933 always 1933
  code always "template<typename Task>\nclass MultiConsumer {\n    MultiConsumer();\n};\ntemplate<typename Task>\nMultiConsumer<Task>::MultiConsumer() : sizeBuffer(0) {}\nMultiReads::MultiReads() {\n    mc = new MultiConsumer<reads_packet>();\n}"
Line 1938
  98 always 98
  = always "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}"
  "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}" always "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}"
Line 1942
  110 always 110
  = always "template < class b , int c , class > auto d ( ) . a < decltype ( b { } ) > :: e { d < int , c , int > ( ) ; }"
  "template < class b , int c , class > auto d ( ) . a < decltype ( b { } ) > :: e { d < int , c , int > ( ) ; }" always "template < class b , int c , class > auto d ( ) . a < decltype ( b { } ) > :: e { d < int , c , int > ( ) ; }"
Line 1946
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1946 always 1946
  exp always "template < class b , int c , class > auto d ( ) . a < decltype ( b { } ) > :: e { d < int , c , int > ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1946 always 1946
  code always "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}"
Line 1949
  131 always 131
  = always "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}void foo() { d<char, 1, int>(); }"
  "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}void foo() { d<char, 1, int>(); }" always "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}void foo() { d<char, 1, int>(); }"
Line 1954
  247 always 247
  = always "auto d<char,1,int> ( ) . a < char > :: e ; auto d<int,1,int> ( ) . a < int > :: e ; void foo ( ) { d<char,1,int> ( ) ; } auto d<char,1,int> ( ) . a < char > :: e { d<int,1,int> ( ) ; } auto d<int,1,int> ( ) . a < int > :: e { d<int,1,int> ( ) ; }"
  "auto d<char,1,int> ( ) . a < char > :: e ; auto d<int,1,int> ( ) . a < int > :: e ; void foo ( ) { d<char,1,int> ( ) ; } auto d<char,1,int> ( ) . a < char > :: e { d<int,1,int> ( ) ; } auto d<int,1,int> ( ) . a < int > :: e { d<int,1,int> ( ) ; }" always "auto d<char,1,int> ( ) . a < char > :: e ; auto d<int,1,int> ( ) . a < int > :: e ; void foo ( ) { d<char,1,int> ( ) ; } auto d<char,1,int> ( ) . a < char > :: e { d<int,1,int> ( ) ; } auto d<int,1,int> ( ) . a < int > :: e { d<int,1,int> ( ) ; }"
Line 1963
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1963 always 1963
  exp always "auto d<char,1,int> ( ) . a < char > :: e ; auto d<int,1,int> ( ) . a < int > :: e ; void foo ( ) { d<char,1,int> ( ) ; } auto d<char,1,int> ( ) . a < char > :: e { d<int,1,int> ( ) ; } auto d<int,1,int> ( ) . a < int > :: e { d<int,1,int> ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1963 always 1963
  code always "template <class b, int c, class>\nauto d() -> typename a<decltype(b{})>::e {\n  d<int, c, int>();\n}void foo() { d<char, 1, int>(); }"
Line 1968
  325 always 325
  = always "template<typename T>\nstruct C\n{\n  template<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type* = nullptr>\n  void foo();\n};\nextern template void C<int>::foo<int, nullptr>();\ntemplate<typename T>\ntemplate<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type>\nvoid C<T>::foo() {}"
  "template<typename T>\nstruct C\n{\n  template<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type* = nullptr>\n  void foo();\n};\nextern template void C<int>::foo<int, nullptr>();\ntemplate<typename T>\ntemplate<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type>\nvoid C<T>::foo() {}" always "template<typename T>\nstruct C\n{\n  template<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type* = nullptr>\n  void foo();\n};\nextern template void C<int>::foo<int, nullptr>();\ntemplate<typename T>\ntemplate<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type>\nvoid C<T>::foo() {}"
Line 1979
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1979 always 1979
  code always "template<typename T>\nstruct C\n{\n  template<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type* = nullptr>\n  void foo();\n};\nextern template void C<int>::foo<int, nullptr>();\ntemplate<typename T>\ntemplate<typename U, typename std::enable_if<(!std::is_fundamental<U>::value)>::type>\nvoid C<T>::foo() {}"
Line 1983
  160 always 160
  = always "struct S {\n  S();\n};\ntemplate <typename T>\nstruct U {\n  static S<T> u;\n};\ntemplate <typename T>\nS<T> U<T>::u;\ntemplate S<int> U<int>::u;\nS<int> &i = U<int>::u;"
  "struct S {\n  S();\n};\ntemplate <typename T>\nstruct U {\n  static S<T> u;\n};\ntemplate <typename T>\nS<T> U<T>::u;\ntemplate S<int> U<int>::u;\nS<int> &i = U<int>::u;" always "struct S {\n  S();\n};\ntemplate <typename T>\nstruct U {\n  static S<T> u;\n};\ntemplate <typename T>\nS<T> U<T>::u;\ntemplate S<int> U<int>::u;\nS<int> &i = U<int>::u;"
Line 1994
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  1994 always 1994
  code always "struct S {\n  S();\n};\ntemplate <typename T>\nstruct U {\n  static S<T> u;\n};\ntemplate <typename T>\nS<T> U<T>::u;\ntemplate S<int> U<int>::u;\nS<int> &i = U<int>::u;"
Line 1998
  153 always 153
  = always "template<typename T>\nT f1(T t) { return t; }\ntemplate const char * f1<const char *>(const char *);\ntemplate const char & f1<const char &>(const char &);"
  "template<typename T>\nT f1(T t) { return t; }\ntemplate const char * f1<const char *>(const char *);\ntemplate const char & f1<const char &>(const char &);" always "template<typename T>\nT f1(T t) { return t; }\ntemplate const char * f1<const char *>(const char *);\ntemplate const char & f1<const char &>(const char &);"
Line 2002
  222 always 222
  = always "const char * f1<constchar*> ( const char * t ) ; const char & f1<constchar&> ( const char & t ) ; const char * f1<constchar*> ( const char * t ) { return t ; } const char & f1<constchar&> ( const char & t ) { return t ; }"
  "const char * f1<constchar*> ( const char * t ) ; const char & f1<constchar&> ( const char & t ) ; const char * f1<constchar*> ( const char * t ) { return t ; } const char & f1<constchar&> ( const char & t ) { return t ; }" always "const char * f1<constchar*> ( const char * t ) ; const char & f1<constchar&> ( const char & t ) ; const char * f1<constchar*> ( const char * t ) { return t ; } const char & f1<constchar&> ( const char & t ) { return t ; }"
Line 2006
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2006 always 2006
  exp always "const char * f1<constchar*> ( const char * t ) ; const char & f1<constchar&> ( const char & t ) ; const char * f1<constchar*> ( const char * t ) { return t ; } const char & f1<constchar&> ( const char & t ) { return t ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2006 always 2006
  code always "template<typename T>\nT f1(T t) { return t; }\ntemplate const char * f1<const char *>(const char *);\ntemplate const char & f1<const char &>(const char &);"
Line 2010
  348 always 348
  = always "class CTest {\npublic:\n    template <typename T>\n    static void Greeting(T val) {\n        std::cout << val << std::endl;\n    }\nprivate:\n    static void SayHello() {\n        std::cout << \"Hello World!\" << std::endl;\n    }\n};\ntemplate<>\nvoid CTest::Greeting(bool) {\n	CTest::SayHello();\n}\nint main() {\n    CTest::Greeting<bool>(true);\n    return 0;\n}"
  "class CTest {\npublic:\n    template <typename T>\n    static void Greeting(T val) {\n        std::cout << val << std::endl;\n    }\nprivate:\n    static void SayHello() {\n        std::cout << \"Hello World!\" << std::endl;\n    }\n};\ntemplate<>\nvoid CTest::Greeting(bool) {\n	CTest::SayHello();\n}\nint main() {\n    CTest::Greeting<bool>(true);\n    return 0;\n}" always "class CTest {\npublic:\n    template <typename T>\n    static void Greeting(T val) {\n        std::cout << val << std::endl;\n    }\nprivate:\n    static void SayHello() {\n        std::cout << \"Hello World!\" << std::endl;\n    }\n};\ntemplate<>\nvoid CTest::Greeting(bool) {\n	CTest::SayHello();\n}\nint main() {\n    CTest::Greeting<bool>(true);\n    return 0;\n}"
Line 2029
  373 always 373
  = always "class CTest { public: static void Greeting<bool> ( bool ) ; template < typename T > static void Greeting ( T val ) { std :: cout << val << std :: endl ; } private: static void SayHello ( ) { std :: cout << \"Hello World!\" << std :: endl ; } } ; void CTest :: Greeting<bool> ( bool ) { CTest :: SayHello ( ) ; } int main ( ) { CTest :: Greeting<bool> ( true ) ; return 0 ; }"
  "class CTest { public: static void Greeting<bool> ( bool ) ; template < typename T > static void Greeting ( T val ) { std :: cout << val << std :: endl ; } private: static void SayHello ( ) { std :: cout << \"Hello World!\" << std :: endl ; } } ; void CTest :: Greeting<bool> ( bool ) { CTest :: SayHello ( ) ; } int main ( ) { CTest :: Greeting<bool> ( true ) ; return 0 ; }" always "class CTest { public: static void Greeting<bool> ( bool ) ; template < typename T > static void Greeting ( T val ) { std :: cout << val << std :: endl ; } private: static void SayHello ( ) { std :: cout << \"Hello World!\" << std :: endl ; } } ; void CTest :: Greeting<bool> ( bool ) { CTest :: SayHello ( ) ; } int main ( ) { CTest :: Greeting<bool> ( true ) ; return 0 ; }"
Line 2048
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2048 always 2048
  exp always "class CTest { public: static void Greeting<bool> ( bool ) ; template < typename T > static void Greeting ( T val ) { std :: cout << val << std :: endl ; } private: static void SayHello ( ) { std :: cout << \"Hello World!\" << std :: endl ; } } ; void CTest :: Greeting<bool> ( bool ) { CTest :: SayHello ( ) ; } int main ( ) { CTest :: Greeting<bool> ( true ) ; return 0 ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2048 always 2048
  code always "class CTest {\npublic:\n    template <typename T>\n    static void Greeting(T val) {\n        std::cout << val << std::endl;\n    }\nprivate:\n    static void SayHello() {\n        std::cout << \"Hello World!\" << std::endl;\n    }\n};\ntemplate<>\nvoid CTest::Greeting(bool) {\n	CTest::SayHello();\n}\nint main() {\n    CTest::Greeting<bool>(true);\n    return 0;\n}"
Line 2052
  209 always 209
  = always "struct Fred {\n    template <typename T> static void foo() { }\n};\ntemplate void Fred::foo<char>();\ntemplate void Fred::foo<float>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate <> void Fred::foo<int>() { }"
  "struct Fred {\n    template <typename T> static void foo() { }\n};\ntemplate void Fred::foo<char>();\ntemplate void Fred::foo<float>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate <> void Fred::foo<int>() { }" always "struct Fred {\n    template <typename T> static void foo() { }\n};\ntemplate void Fred::foo<char>();\ntemplate void Fred::foo<float>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate <> void Fred::foo<int>() { }"
Line 2059
  254 always 254
  = always "struct Fred { static void foo<int> ( ) ; static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<float> ( ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( ) { } void Fred :: foo<char> ( ) { } void Fred :: foo<float> ( ) { }"
  "struct Fred { static void foo<int> ( ) ; static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<float> ( ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( ) { } void Fred :: foo<char> ( ) { } void Fred :: foo<float> ( ) { }" always "struct Fred { static void foo<int> ( ) ; static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<float> ( ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( ) { } void Fred :: foo<char> ( ) { } void Fred :: foo<float> ( ) { }"
Line 2069
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2069 always 2069
  exp always "struct Fred { static void foo<int> ( ) ; static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<float> ( ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( ) { } void Fred :: foo<char> ( ) { } void Fred :: foo<float> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2069 always 2069
  code always "struct Fred {\n    template <typename T> static void foo() { }\n};\ntemplate void Fred::foo<char>();\ntemplate void Fred::foo<float>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate <> void Fred::foo<int>() { }"
Line 2073
  118 always 118
  = always "template <typename T> struct S1 {};\nvoid f(S1<double>) {}\ntemplate <typename T>\ndecltype(S1<T>().~S1<T>()) fun1() {};"
  "template <typename T> struct S1 {};\nvoid f(S1<double>) {}\ntemplate <typename T>\ndecltype(S1<T>().~S1<T>()) fun1() {};" always "template <typename T> struct S1 {};\nvoid f(S1<double>) {}\ntemplate <typename T>\ndecltype(S1<T>().~S1<T>()) fun1() {};"
Line 2077
  152 always 152
  = always "struct S1<double> ; void f ( S1<double> ) { } template < typename T > decltype ( S1 < T > ( ) . ~ S1 < T > ( ) ) fun1 ( ) { } ; struct S1<double> { } ;"
  "struct S1<double> ; void f ( S1<double> ) { } template < typename T > decltype ( S1 < T > ( ) . ~ S1 < T > ( ) ) fun1 ( ) { } ; struct S1<double> { } ;" always "struct S1<double> ; void f ( S1<double> ) { } template < typename T > decltype ( S1 < T > ( ) . ~ S1 < T > ( ) ) fun1 ( ) { } ; struct S1<double> { } ;"
Line 2082
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2082 always 2082
  exp always "struct S1<double> ; void f ( S1<double> ) { } template < typename T > decltype ( S1 < T > ( ) . ~ S1 < T > ( ) ) fun1 ( ) { } ; struct S1<double> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2082 always 2082
  code always "template <typename T> struct S1 {};\nvoid f(S1<double>) {}\ntemplate <typename T>\ndecltype(S1<T>().~S1<T>()) fun1() {};"
Line 2087
  210 always 210
  = always "template<typename T> T foo(T t) { return t; }\ntemplate<> char foo<char>(char a) { return a; }\ntemplate<> int foo<int>(int a) { return a; }\ntemplate float foo<float>(float);\ntemplate double foo<double>(double);"
  "template<typename T> T foo(T t) { return t; }\ntemplate<> char foo<char>(char a) { return a; }\ntemplate<> int foo<int>(int a) { return a; }\ntemplate float foo<float>(float);\ntemplate double foo<double>(double);" always "template<typename T> T foo(T t) { return t; }\ntemplate<> char foo<char>(char a) { return a; }\ntemplate<> int foo<int>(int a) { return a; }\ntemplate float foo<float>(float);\ntemplate double foo<double>(double);"
Line 2092
  288 always 288
  = always "int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } float foo<float> ( float t ) { return t ; } double foo<double> ( double t ) { return t ; }"
  "int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } float foo<float> ( float t ) { return t ; } double foo<double> ( double t ) { return t ; }" always "int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } float foo<float> ( float t ) { return t ; } double foo<double> ( double t ) { return t ; }"
Line 2100
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2100 always 2100
  exp always "int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } float foo<float> ( float t ) { return t ; } double foo<double> ( double t ) { return t ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2100 always 2100
  code always "template<typename T> T foo(T t) { return t; }\ntemplate<> char foo<char>(char a) { return a; }\ntemplate<> int foo<int>(int a) { return a; }\ntemplate float foo<float>(float);\ntemplate double foo<double>(double);"
Line 2103
  251 always 251
  = always "struct Fred {\n    template<typename T> T foo(T t) { return t; }\n    template<> char foo<char>(char a) { return a; }\n    template<> int foo<int>(int a) { return a; }\n};\ntemplate float Fred::foo<float>(float);\ntemplate double Fred::foo<double>(double);"
  "struct Fred {\n    template<typename T> T foo(T t) { return t; }\n    template<> char foo<char>(char a) { return a; }\n    template<> int foo<int>(int a) { return a; }\n};\ntemplate float Fred::foo<float>(float);\ntemplate double Fred::foo<double>(double);" always "struct Fred {\n    template<typename T> T foo(T t) { return t; }\n    template<> char foo<char>(char a) { return a; }\n    template<> int foo<int>(int a) { return a; }\n};\ntemplate float Fred::foo<float>(float);\ntemplate double Fred::foo<double>(double);"
Line 2110
  322 always 322
  = always "struct Fred { int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } ; float Fred :: foo<float> ( float t ) { return t ; } double Fred :: foo<double> ( double t ) { return t ; }"
  "struct Fred { int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } ; float Fred :: foo<float> ( float t ) { return t ; } double Fred :: foo<double> ( double t ) { return t ; }" always "struct Fred { int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } ; float Fred :: foo<float> ( float t ) { return t ; } double Fred :: foo<double> ( double t ) { return t ; }"
Line 2120
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2120 always 2120
  exp always "struct Fred { int foo<int> ( int a ) ; char foo<char> ( char a ) ; float foo<float> ( float t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } ; float Fred :: foo<float> ( float t ) { return t ; } double Fred :: foo<double> ( double t ) { return t ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2120 always 2120
  code always "struct Fred {\n    template<typename T> T foo(T t) { return t; }\n    template<> char foo<char>(char a) { return a; }\n    template<> int foo<int>(int a) { return a; }\n};\ntemplate float Fred::foo<float>(float);\ntemplate double Fred::foo<double>(double);"
Line 2123
  438 always 438
  = always "namespace NS1 {\n    namespace NS2 {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS2::foo<short>(short);\n        template long NS1::NS2::foo<long>(long);\n    }\n    template float NS2::foo<float>(float);\n    template bool NS1::NS2::foo<bool>(bool);\n}\ntemplate double NS1::NS2::foo<double>(double);"
  "namespace NS1 {\n    namespace NS2 {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS2::foo<short>(short);\n        template long NS1::NS2::foo<long>(long);\n    }\n    template float NS2::foo<float>(float);\n    template bool NS1::NS2::foo<bool>(bool);\n}\ntemplate double NS1::NS2::foo<double>(double);" always "namespace NS1 {\n    namespace NS2 {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS2::foo<short>(short);\n        template long NS1::NS2::foo<long>(long);\n    }\n    template float NS2::foo<float>(float);\n    template bool NS1::NS2::foo<bool>(bool);\n}\ntemplate double NS1::NS2::foo<double>(double);"
Line 2135
  607 always 607
  = always "namespace NS1 { namespace NS2 { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS2 :: foo<short> ( short t ) { return t ; } long NS1 :: NS2 :: foo<long> ( long t ) { return t ; } float NS1 :: NS2 :: foo<float> ( float t ) { return t ; } bool NS1 :: NS2 :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS2 :: foo<double> ( double t ) { return t ; }"
  "namespace NS1 { namespace NS2 { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS2 :: foo<short> ( short t ) { return t ; } long NS1 :: NS2 :: foo<long> ( long t ) { return t ; } float NS1 :: NS2 :: foo<float> ( float t ) { return t ; } bool NS1 :: NS2 :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS2 :: foo<double> ( double t ) { return t ; }" always "namespace NS1 { namespace NS2 { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS2 :: foo<short> ( short t ) { return t ; } long NS1 :: NS2 :: foo<long> ( long t ) { return t ; } float NS1 :: NS2 :: foo<float> ( float t ) { return t ; } bool NS1 :: NS2 :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS2 :: foo<double> ( double t ) { return t ; }"
Line 2153
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2153 always 2153
  exp always "namespace NS1 { namespace NS2 { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS2 :: foo<short> ( short t ) { return t ; } long NS1 :: NS2 :: foo<long> ( long t ) { return t ; } float NS1 :: NS2 :: foo<float> ( float t ) { return t ; } bool NS1 :: NS2 :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS2 :: foo<double> ( double t ) { return t ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2153 always 2153
  code always "namespace NS1 {\n    namespace NS2 {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS2::foo<short>(short);\n        template long NS1::NS2::foo<long>(long);\n    }\n    template float NS2::foo<float>(float);\n    template bool NS1::NS2::foo<bool>(bool);\n}\ntemplate double NS1::NS2::foo<double>(double);"
Line 2156
  432 always 432
  = always "namespace NS1 {\n    namespace NS {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS::foo<short>(short);\n        template long NS1::NS::foo<long>(long);\n    }\n    template float NS::foo<float>(float);\n    template bool NS1::NS::foo<bool>(bool);\n}\ntemplate double NS1::NS::foo<double>(double);"
  "namespace NS1 {\n    namespace NS {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS::foo<short>(short);\n        template long NS1::NS::foo<long>(long);\n    }\n    template float NS::foo<float>(float);\n    template bool NS1::NS::foo<bool>(bool);\n}\ntemplate double NS1::NS::foo<double>(double);" always "namespace NS1 {\n    namespace NS {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS::foo<short>(short);\n        template long NS1::NS::foo<long>(long);\n    }\n    template float NS::foo<float>(float);\n    template bool NS1::NS::foo<bool>(bool);\n}\ntemplate double NS1::NS::foo<double>(double);"
Line 2168
  601 always 601
  = always "namespace NS1 { namespace NS { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS :: foo<short> ( short t ) { return t ; } long NS1 :: NS :: foo<long> ( long t ) { return t ; } float NS1 :: NS :: foo<float> ( float t ) { return t ; } bool NS1 :: NS :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS :: foo<double> ( double t ) { return t ; }"
  "namespace NS1 { namespace NS { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS :: foo<short> ( short t ) { return t ; } long NS1 :: NS :: foo<long> ( long t ) { return t ; } float NS1 :: NS :: foo<float> ( float t ) { return t ; } bool NS1 :: NS :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS :: foo<double> ( double t ) { return t ; }" always "namespace NS1 { namespace NS { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS :: foo<short> ( short t ) { return t ; } long NS1 :: NS :: foo<long> ( long t ) { return t ; } float NS1 :: NS :: foo<float> ( float t ) { return t ; } bool NS1 :: NS :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS :: foo<double> ( double t ) { return t ; }"
Line 2186
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2186 always 2186
  exp always "namespace NS1 { namespace NS { int foo<int> ( int a ) ; char foo<char> ( char a ) ; short foo<short> ( short t ) ; long foo<long> ( long t ) ; float foo<float> ( float t ) ; bool foo<bool> ( bool t ) ; double foo<double> ( double t ) ; char foo<char> ( char a ) { return a ; } int foo<int> ( int a ) { return a ; } } } short NS1 :: NS :: foo<short> ( short t ) { return t ; } long NS1 :: NS :: foo<long> ( long t ) { return t ; } float NS1 :: NS :: foo<float> ( float t ) { return t ; } bool NS1 :: NS :: foo<bool> ( bool t ) { return t ; } double NS1 :: NS :: foo<double> ( double t ) { return t ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2186 always 2186
  code always "namespace NS1 {\n    namespace NS {\n        template<typename T> T foo(T t) { return t; }\n        template<> char foo<char>(char a) { return a; }\n        template<> int foo<int>(int a) { return a; }\n        template short NS::foo<short>(short);\n        template long NS1::NS::foo<long>(long);\n    }\n    template float NS::foo<float>(float);\n    template bool NS1::NS::foo<bool>(bool);\n}\ntemplate double NS1::NS::foo<double>(double);"
Line 2191
  212 always 212
  = always "template<class T> void foo(T const& t) { }\ntemplate<> void foo<double>(double const& d) { }\ntemplate void foo<float>(float const& f);\nint main() {\n    foo<int>(2);\n    foo<double>(3.14);\n    foo<float>(3.14f);\n}"
  "template<class T> void foo(T const& t) { }\ntemplate<> void foo<double>(double const& d) { }\ntemplate void foo<float>(float const& f);\nint main() {\n    foo<int>(2);\n    foo<double>(3.14);\n    foo<float>(3.14f);\n}" always "template<class T> void foo(T const& t) { }\ntemplate<> void foo<double>(double const& d) { }\ntemplate void foo<float>(float const& f);\nint main() {\n    foo<int>(2);\n    foo<double>(3.14);\n    foo<float>(3.14f);\n}"
Line 2199
  310 always 310
  = always "void foo<double> ( const double & d ) ; void foo<float> ( const float & t ) ; void foo<int> ( const int & t ) ; void foo<double> ( const double & d ) { } int main ( ) { foo<int> ( 2 ) ; foo<double> ( 3.14 ) ; foo<float> ( 3.14f ) ; } void foo<float> ( const float & t ) { } void foo<int> ( const int & t ) { }"
  "void foo<double> ( const double & d ) ; void foo<float> ( const float & t ) ; void foo<int> ( const int & t ) ; void foo<double> ( const double & d ) { } int main ( ) { foo<int> ( 2 ) ; foo<double> ( 3.14 ) ; foo<float> ( 3.14f ) ; } void foo<float> ( const float & t ) { } void foo<int> ( const int & t ) { }" always "void foo<double> ( const double & d ) ; void foo<float> ( const float & t ) ; void foo<int> ( const int & t ) ; void foo<double> ( const double & d ) { } int main ( ) { foo<int> ( 2 ) ; foo<double> ( 3.14 ) ; foo<float> ( 3.14f ) ; } void foo<float> ( const float & t ) { } void foo<int> ( const int & t ) { }"
Line 2210
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2210 always 2210
  exp always "void foo<double> ( const double & d ) ; void foo<float> ( const float & t ) ; void foo<int> ( const int & t ) ; void foo<double> ( const double & d ) { } int main ( ) { foo<int> ( 2 ) ; foo<double> ( 3.14 ) ; foo<float> ( 3.14f ) ; } void foo<float> ( const float & t ) { } void foo<int> ( const int & t ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2210 always 2210
  code always "template<class T> void foo(T const& t) { }\ntemplate<> void foo<double>(double const& d) { }\ntemplate void foo<float>(float const& f);\nint main() {\n    foo<int>(2);\n    foo<double>(3.14);\n    foo<float>(3.14f);\n}"
Line 2214
  292 always 292
  = always "template <typename Iterator>\nvoid ForEach() { }\ntemplate <typename Type>\nclass Vector2 : public Vector {\n    template <typename Iterator>\n    void ForEach();\npublic:\n    void process();\n};\ntemplate <typename Type>\nvoid Vector2<Type>::process() {\n    ForEach<iterator>();\n}\nVector2<string> c;"
  "template <typename Iterator>\nvoid ForEach() { }\ntemplate <typename Type>\nclass Vector2 : public Vector {\n    template <typename Iterator>\n    void ForEach();\npublic:\n    void process();\n};\ntemplate <typename Type>\nvoid Vector2<Type>::process() {\n    ForEach<iterator>();\n}\nVector2<string> c;" always "template <typename Iterator>\nvoid ForEach() { }\ntemplate <typename Type>\nclass Vector2 : public Vector {\n    template <typename Iterator>\n    void ForEach();\npublic:\n    void process();\n};\ntemplate <typename Type>\nvoid Vector2<Type>::process() {\n    ForEach<iterator>();\n}\nVector2<string> c;"
Line 2228
  289 always 289
  = always "void ForEach<iterator> ( ) ; class Vector2<string> ; Vector2<string> c ; class Vector2<string> : public Vector { template < typename Iterator > void ForEach ( ) ; public: void process ( ) ; } ; void Vector2<string> :: process ( ) { ForEach<iterator> ( ) ; } void ForEach<iterator> ( ) { }"
  "void ForEach<iterator> ( ) ; class Vector2<string> ; Vector2<string> c ; class Vector2<string> : public Vector { template < typename Iterator > void ForEach ( ) ; public: void process ( ) ; } ; void Vector2<string> :: process ( ) { ForEach<iterator> ( ) ; } void ForEach<iterator> ( ) { }" always "void ForEach<iterator> ( ) ; class Vector2<string> ; Vector2<string> c ; class Vector2<string> : public Vector { template < typename Iterator > void ForEach ( ) ; public: void process ( ) ; } ; void Vector2<string> :: process ( ) { ForEach<iterator> ( ) ; } void ForEach<iterator> ( ) { }"
Line 2242
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2242 always 2242
  exp always "void ForEach<iterator> ( ) ; class Vector2<string> ; Vector2<string> c ; class Vector2<string> : public Vector { template < typename Iterator > void ForEach ( ) ; public: void process ( ) ; } ; void Vector2<string> :: process ( ) { ForEach<iterator> ( ) ; } void ForEach<iterator> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2242 always 2242
  code always "template <typename Iterator>\nvoid ForEach() { }\ntemplate <typename Type>\nclass Vector2 : public Vector {\n    template <typename Iterator>\n    void ForEach();\npublic:\n    void process();\n};\ntemplate <typename Type>\nvoid Vector2<Type>::process() {\n    ForEach<iterator>();\n}\nVector2<string> c;"
Line 2246
  370 always 370
  = always "template <typename T>\nclass Array { };\ntemplate<typename T>\nArray<T> foo() {};\ntemplate <> Array<double> foo<double>() { }\ntemplate <> Array<std::complex<float>> foo<std::complex<float>>() { }\ntemplate <> Array<float> foo<float>() { }\ntemplate < typename T >\nArray<T> matmul() {\n    return foo<T>( );\n}\ntemplate Array<std::complex<float>> matmul<std::complex<float>>();"
  "template <typename T>\nclass Array { };\ntemplate<typename T>\nArray<T> foo() {};\ntemplate <> Array<double> foo<double>() { }\ntemplate <> Array<std::complex<float>> foo<std::complex<float>>() { }\ntemplate <> Array<float> foo<float>() { }\ntemplate < typename T >\nArray<T> matmul() {\n    return foo<T>( );\n}\ntemplate Array<std::complex<float>> matmul<std::complex<float>>();" always "template <typename T>\nclass Array { };\ntemplate<typename T>\nArray<T> foo() {};\ntemplate <> Array<double> foo<double>() { }\ntemplate <> Array<std::complex<float>> foo<std::complex<float>>() { }\ntemplate <> Array<float> foo<float>() { }\ntemplate < typename T >\nArray<T> matmul() {\n    return foo<T>( );\n}\ntemplate Array<std::complex<float>> matmul<std::complex<float>>();"
Line 2258
  626 always 626
  = always "class Array<double> ; class Array<std::complex<float>> ; class Array<float> ; Array<float> foo<float> ( ) ; Array<std::complex<float>> foo<std::complex<float>> ( ) ; Array<double> foo<double> ( ) ; template < typename T > Array < T > foo ( ) { } ; Array<double> foo<double> ( ) { } Array<std::complex<float>> foo<std::complex<float>> ( ) { } Array<float> foo<float> ( ) { } Array<std::complex<float>> matmul<std::complex<float>> ( ) ; Array<std::complex<float>> matmul<std::complex<float>> ( ) { return foo<std::complex<float>> ( ) ; } class Array<double> { } ; class Array<std::complex<float>> { } ; class Array<float> { } ;"
  "class Array<double> ; class Array<std::complex<float>> ; class Array<float> ; Array<float> foo<float> ( ) ; Array<std::complex<float>> foo<std::complex<float>> ( ) ; Array<double> foo<double> ( ) ; template < typename T > Array < T > foo ( ) { } ; Array<double> foo<double> ( ) { } Array<std::complex<float>> foo<std::complex<float>> ( ) { } Array<float> foo<float> ( ) { } Array<std::complex<float>> matmul<std::complex<float>> ( ) ; Array<std::complex<float>> matmul<std::complex<float>> ( ) { return foo<std::complex<float>> ( ) ; } class Array<double> { } ; class Array<std::complex<float>> { } ; class Array<float> { } ;" always "class Array<double> ; class Array<std::complex<float>> ; class Array<float> ; Array<float> foo<float> ( ) ; Array<std::complex<float>> foo<std::complex<float>> ( ) ; Array<double> foo<double> ( ) ; template < typename T > Array < T > foo ( ) { } ; Array<double> foo<double> ( ) { } Array<std::complex<float>> foo<std::complex<float>> ( ) { } Array<float> foo<float> ( ) { } Array<std::complex<float>> matmul<std::complex<float>> ( ) ; Array<std::complex<float>> matmul<std::complex<float>> ( ) { return foo<std::complex<float>> ( ) ; } class Array<double> { } ; class Array<std::complex<float>> { } ; class Array<float> { } ;"
Line 2276
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2276 always 2276
  exp always "class Array<double> ; class Array<std::complex<float>> ; class Array<float> ; Array<float> foo<float> ( ) ; Array<std::complex<float>> foo<std::complex<float>> ( ) ; Array<double> foo<double> ( ) ; template < typename T > Array < T > foo ( ) { } ; Array<double> foo<double> ( ) { } Array<std::complex<float>> foo<std::complex<float>> ( ) { } Array<float> foo<float> ( ) { } Array<std::complex<float>> matmul<std::complex<float>> ( ) ; Array<std::complex<float>> matmul<std::complex<float>> ( ) { return foo<std::complex<float>> ( ) ; } class Array<double> { } ; class Array<std::complex<float>> { } ; class Array<float> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2276 always 2276
  code always "template <typename T>\nclass Array { };\ntemplate<typename T>\nArray<T> foo() {};\ntemplate <> Array<double> foo<double>() { }\ntemplate <> Array<std::complex<float>> foo<std::complex<float>>() { }\ntemplate <> Array<float> foo<float>() { }\ntemplate < typename T >\nArray<T> matmul() {\n    return foo<T>( );\n}\ntemplate Array<std::complex<float>> matmul<std::complex<float>>();"
Line 2280
  114 always 114
  = always "template <typename T>\nT Value = 123;\ntemplate<>\nint Value<int> = 456;\nfloat f = Value<float>;\nint i = Value<int>;"
  "template <typename T>\nT Value = 123;\ntemplate<>\nint Value<int> = 456;\nfloat f = Value<float>;\nint i = Value<int>;" always "template <typename T>\nT Value = 123;\ntemplate<>\nint Value<int> = 456;\nfloat f = Value<float>;\nint i = Value<int>;"
Line 2286
  132 always 132
  = always "float Value<float> ; Value<float> = 123 ; int Value<int> ; Value<int> = 456 ; float f ; f = Value<float> ; int i ; i = Value<int> ;"
  "float Value<float> ; Value<float> = 123 ; int Value<int> ; Value<int> = 456 ; float f ; f = Value<float> ; int i ; i = Value<int> ;" always "float Value<float> ; Value<float> = 123 ; int Value<int> ; Value<int> = 456 ; float f ; f = Value<float> ; int i ; i = Value<int> ;"
Line 2290
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2290 always 2290
  exp always "float Value<float> ; Value<float> = 123 ; int Value<int> ; Value<int> = 456 ; float f ; f = Value<float> ; int i ; i = Value<int> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2290 always 2290
  code always "template <typename T>\nT Value = 123;\ntemplate<>\nint Value<int> = 456;\nfloat f = Value<float>;\nint i = Value<int>;"
Line 2295
  221 always 221
  = always "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f0 = fib<0>;\nlong f1 = fib<1>;\nlong f2 = fib<2>;\nlong f3 = fib<3>;"
  "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f0 = fib<0>;\nlong f1 = fib<1>;\nlong f2 = fib<2>;\nlong f3 = fib<3>;" always "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f0 = fib<0>;\nlong f1 = fib<1>;\nlong f2 = fib<2>;\nlong f3 = fib<3>;"
Line 2305
  236 always 236
  = always "constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f0 ; f0 = fib<0> ; long f1 ; f1 = fib<1> ; long f2 ; f2 = fib<2> ; long f3 ; f3 = fib<3> ;"
  "constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f0 ; f0 = fib<0> ; long f1 ; f1 = fib<1> ; long f2 ; f2 = fib<2> ; long f3 ; f3 = fib<3> ;" always "constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f0 ; f0 = fib<0> ; long f1 ; f1 = fib<1> ; long f2 ; f2 = fib<2> ; long f3 ; f3 = fib<3> ;"
Line 2313
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2313 always 2313
  exp always "constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f0 ; f0 = fib<0> ; long f1 ; f1 = fib<1> ; long f2 ; f2 = fib<2> ; long f3 ; f3 = fib<3> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2313 always 2313
  code always "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f0 = fib<0>;\nlong f1 = fib<1>;\nlong f2 = fib<2>;\nlong f3 = fib<3>;"
Line 2316
  168 always 168
  = always "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f5 = fib<5>;\n"
  "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f5 = fib<5>;\n" always "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f5 = fib<5>;\n"
Line 2323
  248 always 248
  = always "constexpr long fib<5> = fib<4> + fib<3> ; constexpr long fib<4> = fib<3> + fib<2> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f5 ; f5 = fib<5> ;"
  "constexpr long fib<5> = fib<4> + fib<3> ; constexpr long fib<4> = fib<3> + fib<2> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f5 ; f5 = fib<5> ;" always "constexpr long fib<5> = fib<4> + fib<3> ; constexpr long fib<4> = fib<3> + fib<2> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f5 ; f5 = fib<5> ;"
Line 2330
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2330 always 2330
  exp always "constexpr long fib<5> = fib<4> + fib<3> ; constexpr long fib<4> = fib<3> + fib<2> ; constexpr long fib<3> = fib<2> + fib<1> ; constexpr long fib<2> = fib<1> + fib<0> ; constexpr long fib<0> = 0 ; constexpr long fib<1> = 1 ; long f5 ; f5 = fib<5> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2330 always 2330
  code always "template<unsigned int n>\n  constexpr long fib = fib<n-1> + fib<n-2>;\ntemplate<>\n  constexpr long fib<0> = 0;\ntemplate<>\n  constexpr long fib<1> = 1;\nlong f5 = fib<5>;\n"
Line 2335
  884 always 884
  = always "namespace NS1 {\n    namespace NS2 {\n        namespace NS3 {\n            namespace NS4 {\n                template<class T>\n                class Fred {\n                    T * t;\n                public:\n                    Fred<T>() : t(nullptr) {}\n                };\n            }\n            using namespace NS4;\n            Fred<bool> fred_bool;\n            NS4::Fred<char> fred_char;\n        }\n        using namespace NS3;\n        NS4::Fred<short> fred_short;\n        using namespace NS3::NS4;\n        Fred<int> fred_int;\n        NS3::NS4::Fred<long> fred_long;\n        NS2::NS3::NS4::Fred<float> fred_float;\n        NS1::NS2::NS3::NS4::Fred<double> fred_double;\n    }\n    using namespace NS2;\n    NS3::NS4::Fred<float> fred_float1;\n    NS2::NS3::NS4::Fred<double> fred_double1;\n}\nusing namespace NS1::NS2::NS3::NS4;\nFred<bool> fred_bool1;\nNS1::NS2::NS3::NS4::Fred<int> fred_int1;"
  "namespace NS1 {\n    namespace NS2 {\n        namespace NS3 {\n            namespace NS4 {\n                template<class T>\n                class Fred {\n                    T * t;\n                public:\n                    Fred<T>() : t(nullptr) {}\n                };\n            }\n            using namespace NS4;\n            Fred<bool> fred_bool;\n            NS4::Fred<char> fred_char;\n        }\n        using namespace NS3;\n        NS4::Fred<short> fred_short;\n        using namespace NS3::NS4;\n        Fred<int> fred_int;\n        NS3::NS4::Fred<long> fred_long;\n        NS2::NS3::NS4::Fred<float> fred_float;\n        NS1::NS2::NS3::NS4::Fred<double> fred_double;\n    }\n    using namespace NS2;\n    NS3::NS4::Fred<float> fred_float1;\n    NS2::NS3::NS4::Fred<double> fred_double1;\n}\nusing namespace NS1::NS2::NS3::NS4;\nFred<bool> fred_bool1;\nNS1::NS2::NS3::NS4::Fred<int> fred_int1;" always "namespace NS1 {\n    namespace NS2 {\n        namespace NS3 {\n            namespace NS4 {\n                template<class T>\n                class Fred {\n                    T * t;\n                public:\n                    Fred<T>() : t(nullptr) {}\n                };\n            }\n            using namespace NS4;\n            Fred<bool> fred_bool;\n            NS4::Fred<char> fred_char;\n        }\n        using namespace NS3;\n        NS4::Fred<short> fred_short;\n        using namespace NS3::NS4;\n        Fred<int> fred_int;\n        NS3::NS4::Fred<long> fred_long;\n        NS2::NS3::NS4::Fred<float> fred_float;\n        NS1::NS2::NS3::NS4::Fred<double> fred_double;\n    }\n    using namespace NS2;\n    NS3::NS4::Fred<float> fred_float1;\n    NS2::NS3::NS4::Fred<double> fred_double1;\n}\nusing namespace NS1::NS2::NS3::NS4;\nFred<bool> fred_bool1;\nNS1::NS2::NS3::NS4::Fred<int> fred_int1;"
Line 2365
  1560 always 1560
  = always "namespace NS1 { namespace NS2 { namespace NS3 { namespace NS4 { class Fred<bool> ; class Fred<char> ; class Fred<short> ; class Fred<int> ; class Fred<long> ; class Fred<float> ; class Fred<double> ; } using namespace NS4 ; NS4 :: Fred<bool> fred_bool ; NS4 :: Fred<char> fred_char ; } using namespace NS3 ; NS3 :: NS4 :: Fred<short> fred_short ; using namespace NS3 :: NS4 ; NS3 :: NS4 :: Fred<int> fred_int ; NS3 :: NS4 :: Fred<long> fred_long ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> fred_double ; } using namespace NS2 ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float1 ; NS2 :: NS3 :: NS4 :: Fred<double> fred_double1 ; } using namespace NS1 :: NS2 :: NS3 :: NS4 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> fred_bool1 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> fred_int1 ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> { bool * t ; public: Fred<bool> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<char> { char * t ; public: Fred<char> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<short> { short * t ; public: Fred<short> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> { int * t ; public: Fred<int> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<long> { long * t ; public: Fred<long> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<float> { float * t ; public: Fred<float> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> { double * t ; public: Fred<double> ( ) : t ( nullptr ) { } } ;"
  "namespace NS1 { namespace NS2 { namespace NS3 { namespace NS4 { class Fred<bool> ; class Fred<char> ; class Fred<short> ; class Fred<int> ; class Fred<long> ; class Fred<float> ; class Fred<double> ; } using namespace NS4 ; NS4 :: Fred<bool> fred_bool ; NS4 :: Fred<char> fred_char ; } using namespace NS3 ; NS3 :: NS4 :: Fred<short> fred_short ; using namespace NS3 :: NS4 ; NS3 :: NS4 :: Fred<int> fred_int ; NS3 :: NS4 :: Fred<long> fred_long ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> fred_double ; } using namespace NS2 ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float1 ; NS2 :: NS3 :: NS4 :: Fred<double> fred_double1 ; } using namespace NS1 :: NS2 :: NS3 :: NS4 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> fred_bool1 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> fred_int1 ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> { bool * t ; public: Fred<bool> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<char> { char * t ; public: Fred<char> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<short> { short * t ; public: Fred<short> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> { int * t ; public: Fred<int> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<long> { long * t ; public: Fred<long> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<float> { float * t ; public: Fred<float> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> { double * t ; public: Fred<double> ( ) : t ( nullptr ) { } } ;" always "namespace NS1 { namespace NS2 { namespace NS3 { namespace NS4 { class Fred<bool> ; class Fred<char> ; class Fred<short> ; class Fred<int> ; class Fred<long> ; class Fred<float> ; class Fred<double> ; } using namespace NS4 ; NS4 :: Fred<bool> fred_bool ; NS4 :: Fred<char> fred_char ; } using namespace NS3 ; NS3 :: NS4 :: Fred<short> fred_short ; using namespace NS3 :: NS4 ; NS3 :: NS4 :: Fred<int> fred_int ; NS3 :: NS4 :: Fred<long> fred_long ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> fred_double ; } using namespace NS2 ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float1 ; NS2 :: NS3 :: NS4 :: Fred<double> fred_double1 ; } using namespace NS1 :: NS2 :: NS3 :: NS4 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> fred_bool1 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> fred_int1 ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> { bool * t ; public: Fred<bool> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<char> { char * t ; public: Fred<char> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<short> { short * t ; public: Fred<short> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> { int * t ; public: Fred<int> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<long> { long * t ; public: Fred<long> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<float> { float * t ; public: Fred<float> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> { double * t ; public: Fred<double> ( ) : t ( nullptr ) { } } ;"
Line 2431
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2431 always 2431
  exp always "namespace NS1 { namespace NS2 { namespace NS3 { namespace NS4 { class Fred<bool> ; class Fred<char> ; class Fred<short> ; class Fred<int> ; class Fred<long> ; class Fred<float> ; class Fred<double> ; } using namespace NS4 ; NS4 :: Fred<bool> fred_bool ; NS4 :: Fred<char> fred_char ; } using namespace NS3 ; NS3 :: NS4 :: Fred<short> fred_short ; using namespace NS3 :: NS4 ; NS3 :: NS4 :: Fred<int> fred_int ; NS3 :: NS4 :: Fred<long> fred_long ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> fred_double ; } using namespace NS2 ; NS2 :: NS3 :: NS4 :: Fred<float> fred_float1 ; NS2 :: NS3 :: NS4 :: Fred<double> fred_double1 ; } using namespace NS1 :: NS2 :: NS3 :: NS4 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> fred_bool1 ; NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> fred_int1 ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<bool> { bool * t ; public: Fred<bool> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<char> { char * t ; public: Fred<char> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<short> { short * t ; public: Fred<short> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<int> { int * t ; public: Fred<int> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<long> { long * t ; public: Fred<long> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<float> { float * t ; public: Fred<float> ( ) : t ( nullptr ) { } } ; class NS1 :: NS2 :: NS3 :: NS4 :: Fred<double> { double * t ; public: Fred<double> ( ) : t ( nullptr ) { } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2431 always 2431
  code always "namespace NS1 {\n    namespace NS2 {\n        namespace NS3 {\n            namespace NS4 {\n                template<class T>\n                class Fred {\n                    T * t;\n                public:\n                    Fred<T>() : t(nullptr) {}\n                };\n            }\n            using namespace NS4;\n            Fred<bool> fred_bool;\n            NS4::Fred<char> fred_char;\n        }\n        using namespace NS3;\n        NS4::Fred<short> fred_short;\n        using namespace NS3::NS4;\n        Fred<int> fred_int;\n        NS3::NS4::Fred<long> fred_long;\n        NS2::NS3::NS4::Fred<float> fred_float;\n        NS1::NS2::NS3::NS4::Fred<double> fred_double;\n    }\n    using namespace NS2;\n    NS3::NS4::Fred<float> fred_float1;\n    NS2::NS3::NS4::Fred<double> fred_double1;\n}\nusing namespace NS1::NS2::NS3::NS4;\nFred<bool> fred_bool1;\nNS1::NS2::NS3::NS4::Fred<int> fred_int1;"
Line 2435
  215 always 215
  = always "template <typename T>\nusing unique_ptr_with_deleter = std::unique_ptr<T, std::function<void(T*)>>;\nclass A {};\nstatic void func() {\n    unique_ptr_with_deleter<A> tmp(new A(), [](A* a) {\n        delete a;\n    });\n}"
  "template <typename T>\nusing unique_ptr_with_deleter = std::unique_ptr<T, std::function<void(T*)>>;\nclass A {};\nstatic void func() {\n    unique_ptr_with_deleter<A> tmp(new A(), [](A* a) {\n        delete a;\n    });\n}" always "template <typename T>\nusing unique_ptr_with_deleter = std::unique_ptr<T, std::function<void(T*)>>;\nclass A {};\nstatic void func() {\n    unique_ptr_with_deleter<A> tmp(new A(), [](A* a) {\n        delete a;\n    });\n}"
Line 2443
  149 always 149
  = always "class A { } ; static void func ( ) { std :: unique_ptr < A , std :: function < void ( A * ) > > tmp ( new A ( ) , [ ] ( A * a ) { delete a ; } ) ; }"
  "class A { } ; static void func ( ) { std :: unique_ptr < A , std :: function < void ( A * ) > > tmp ( new A ( ) , [ ] ( A * a ) { delete a ; } ) ; }" always "class A { } ; static void func ( ) { std :: unique_ptr < A , std :: function < void ( A * ) > > tmp ( new A ( ) , [ ] ( A * a ) { delete a ; } ) ; }"
Line 2449
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2449 always 2449
  exp always "class A { } ; static void func ( ) { std :: unique_ptr < A , std :: function < void ( A * ) > > tmp ( new A ( ) , [ ] ( A * a ) { delete a ; } ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2449 always 2449
  code always "template <typename T>\nusing unique_ptr_with_deleter = std::unique_ptr<T, std::function<void(T*)>>;\nclass A {};\nstatic void func() {\n    unique_ptr_with_deleter<A> tmp(new A(), [](A* a) {\n        delete a;\n    });\n}"
Line 2453
  139 always 139
  = always "template <typename T>\nclass Base {\npublic:\n    using ArrayType = std::vector<Base<T>>;\n};\nusing A = Base<int>;\nstatic A::ArrayType array;\n"
  "template <typename T>\nclass Base {\npublic:\n    using ArrayType = std::vector<Base<T>>;\n};\nusing A = Base<int>;\nstatic A::ArrayType array;\n" always "template <typename T>\nclass Base {\npublic:\n    using ArrayType = std::vector<Base<T>>;\n};\nusing A = Base<int>;\nstatic A::ArrayType array;\n"
Line 2460
  91 always 91
  = always "class Base<int> ; static std :: vector < Base<int> > array ; class Base<int> { public: } ;"
  "class Base<int> ; static std :: vector < Base<int> > array ; class Base<int> { public: } ;" always "class Base<int> ; static std :: vector < Base<int> > array ; class Base<int> { public: } ;"
Line 2466
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2466 always 2466
  exp always "class Base<int> ; static std :: vector < Base<int> > array ; class Base<int> { public: } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2466 always 2466
  code always "template <typename T>\nclass Base {\npublic:\n    using ArrayType = std::vector<Base<T>>;\n};\nusing A = Base<int>;\nstatic A::ArrayType array;\n"
Line 2470
  144 always 144
  = always "enum class Device { I2C0, I2C1 };\ntemplate <Device D>\nconst char* deviceFile;\ntemplate <>\nconst char* deviceFile<Device::I2C0> = \"/tmp/i2c-0\";\n"
  "enum class Device { I2C0, I2C1 };\ntemplate <Device D>\nconst char* deviceFile;\ntemplate <>\nconst char* deviceFile<Device::I2C0> = \"/tmp/i2c-0\";\n" always "enum class Device { I2C0, I2C1 };\ntemplate <Device D>\nconst char* deviceFile;\ntemplate <>\nconst char* deviceFile<Device::I2C0> = \"/tmp/i2c-0\";\n"
Line 2476
  166 always 166
  = always "enum class Device { I2C0 , I2C1 } ; template < Device D > const char * deviceFile ; const char * deviceFile<Device::I2C0> ; deviceFile<Device::I2C0> = \"/tmp/i2c-0\" ;"
  "enum class Device { I2C0 , I2C1 } ; template < Device D > const char * deviceFile ; const char * deviceFile<Device::I2C0> ; deviceFile<Device::I2C0> = \"/tmp/i2c-0\" ;" always "enum class Device { I2C0 , I2C1 } ; template < Device D > const char * deviceFile ; const char * deviceFile<Device::I2C0> ; deviceFile<Device::I2C0> = \"/tmp/i2c-0\" ;"
Line 2481
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2481 always 2481
  exp always "enum class Device { I2C0 , I2C1 } ; template < Device D > const char * deviceFile ; const char * deviceFile<Device::I2C0> ; deviceFile<Device::I2C0> = \"/tmp/i2c-0\" ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2481 always 2481
  code always "enum class Device { I2C0, I2C1 };\ntemplate <Device D>\nconst char* deviceFile;\ntemplate <>\nconst char* deviceFile<Device::I2C0> = \"/tmp/i2c-0\";\n"
Line 2485
  116 always 116
  = always "class A {\npublic:\n    using ArrayType = std::vector<int>;\n    void func(typename ArrayType::size_type i) {\n    }\n};"
  "class A {\npublic:\n    using ArrayType = std::vector<int>;\n    void func(typename ArrayType::size_type i) {\n    }\n};" always "class A {\npublic:\n    using ArrayType = std::vector<int>;\n    void func(typename ArrayType::size_type i) {\n    }\n};"
Line 2492
  77 always 77
  = always "class A { public: void func ( std :: vector < int > :: size_type i ) { } } ;"
  "class A { public: void func ( std :: vector < int > :: size_type i ) { } } ;" always "class A { public: void func ( std :: vector < int > :: size_type i ) { } } ;"
Line 2498
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2498 always 2498
  exp always "class A { public: void func ( std :: vector < int > :: size_type i ) { } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2498 always 2498
  code always "class A {\npublic:\n    using ArrayType = std::vector<int>;\n    void func(typename ArrayType::size_type i) {\n    }\n};"
Line 2499
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2499 always 2499
  "" always ""
Line 2503
  199 always 199
  = always "namespace ns {\ntemplate <class T>\nstruct is_floating_point\n: std::integral_constant<bool, std::is_floating_point<T>::value || true>\n{};\n}\nvoid f() {\n    if(std::is_floating_point<float>::value) {}\n}"
  "namespace ns {\ntemplate <class T>\nstruct is_floating_point\n: std::integral_constant<bool, std::is_floating_point<T>::value || true>\n{};\n}\nvoid f() {\n    if(std::is_floating_point<float>::value) {}\n}" always "namespace ns {\ntemplate <class T>\nstruct is_floating_point\n: std::integral_constant<bool, std::is_floating_point<T>::value || true>\n{};\n}\nvoid f() {\n    if(std::is_floating_point<float>::value) {}\n}"
Line 2512
  225 always 225
  = always "namespace ns { template < class T > struct is_floating_point : std :: integral_constant < bool , std :: is_floating_point < T > :: value || true > { } ; } void f ( ) { if ( std :: is_floating_point < float > :: value ) { } }"
  "namespace ns { template < class T > struct is_floating_point : std :: integral_constant < bool , std :: is_floating_point < T > :: value || true > { } ; } void f ( ) { if ( std :: is_floating_point < float > :: value ) { } }" always "namespace ns { template < class T > struct is_floating_point : std :: integral_constant < bool , std :: is_floating_point < T > :: value || true > { } ; } void f ( ) { if ( std :: is_floating_point < float > :: value ) { } }"
Line 2521
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2521 always 2521
  exp always "namespace ns { template < class T > struct is_floating_point : std :: integral_constant < bool , std :: is_floating_point < T > :: value || true > { } ; } void f ( ) { if ( std :: is_floating_point < float > :: value ) { } }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2521 always 2521
  code always "namespace ns {\ntemplate <class T>\nstruct is_floating_point\n: std::integral_constant<bool, std::is_floating_point<T>::value || true>\n{};\n}\nvoid f() {\n    if(std::is_floating_point<float>::value) {}\n}"
Line 2525
  195 always 195
  = always "namespace sample {\n  template <typename T>\n  class Sample {\n  public:\n    T function(T t);\n  };\n  template <typename T>\n  T Sample<T>::function(T t) {\n    return t;\n  }\n}\nsample::Sample<int> s1;"
  "namespace sample {\n  template <typename T>\n  class Sample {\n  public:\n    T function(T t);\n  };\n  template <typename T>\n  T Sample<T>::function(T t) {\n    return t;\n  }\n}\nsample::Sample<int> s1;" always "namespace sample {\n  template <typename T>\n  class Sample {\n  public:\n    T function(T t);\n  };\n  template <typename T>\n  T Sample<T>::function(T t) {\n    return t;\n  }\n}\nsample::Sample<int> s1;"
Line 2537
  198 always 198
  = always "namespace sample { class Sample<int> ; } sample :: Sample<int> s1 ; class sample :: Sample<int> { public: int function ( int t ) ; } ; int sample :: Sample<int> :: function ( int t ) { return t ; }"
  "namespace sample { class Sample<int> ; } sample :: Sample<int> s1 ; class sample :: Sample<int> { public: int function ( int t ) ; } ; int sample :: Sample<int> :: function ( int t ) { return t ; }" always "namespace sample { class Sample<int> ; } sample :: Sample<int> s1 ; class sample :: Sample<int> { public: int function ( int t ) ; } ; int sample :: Sample<int> :: function ( int t ) { return t ; }"
Line 2548
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2548 always 2548
  exp always "namespace sample { class Sample<int> ; } sample :: Sample<int> s1 ; class sample :: Sample<int> { public: int function ( int t ) ; } ; int sample :: Sample<int> :: function ( int t ) { return t ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2548 always 2548
  code always "namespace sample {\n  template <typename T>\n  class Sample {\n  public:\n    T function(T t);\n  };\n  template <typename T>\n  T Sample<T>::function(T t) {\n    return t;\n  }\n}\nsample::Sample<int> s1;"
Line 2552
  435 always 435
  = always "template < int i >\nauto key ( ) { return hana :: test :: ct_eq < i > { } ; }\ntemplate < int i >\nauto val ( ) { return hana :: test :: ct_eq < - i > { } ; }\ntemplate < int i , int j >\nauto p ( ) { return :: minimal_product ( key < i > ( ) , val < j > ( ) ) ; }\nint main ( ) {\n    BOOST_HANA_CONSTANT_CHECK ( hana :: equal (\n        hana :: at_key ( hana :: make_map ( p < 0 , 0 > ( ) ) , key < 0 > ( ) ) ,\n        val < 0 > ( ) ) ) ;\n}"
  "template < int i >\nauto key ( ) { return hana :: test :: ct_eq < i > { } ; }\ntemplate < int i >\nauto val ( ) { return hana :: test :: ct_eq < - i > { } ; }\ntemplate < int i , int j >\nauto p ( ) { return :: minimal_product ( key < i > ( ) , val < j > ( ) ) ; }\nint main ( ) {\n    BOOST_HANA_CONSTANT_CHECK ( hana :: equal (\n        hana :: at_key ( hana :: make_map ( p < 0 , 0 > ( ) ) , key < 0 > ( ) ) ,\n        val < 0 > ( ) ) ) ;\n}" always "template < int i >\nauto key ( ) { return hana :: test :: ct_eq < i > { } ; }\ntemplate < int i >\nauto val ( ) { return hana :: test :: ct_eq < - i > { } ; }\ntemplate < int i , int j >\nauto p ( ) { return :: minimal_product ( key < i > ( ) , val < j > ( ) ) ; }\nint main ( ) {\n    BOOST_HANA_CONSTANT_CHECK ( hana :: equal (\n        hana :: at_key ( hana :: make_map ( p < 0 , 0 > ( ) ) , key < 0 > ( ) ) ,\n        val < 0 > ( ) ) ) ;\n}"
Line 2563
  398 always 398
  = always "auto key<0> ( ) ; auto val<0> ( ) ; auto p<0,0> ( ) ; int main ( ) { BOOST_HANA_CONSTANT_CHECK ( hana :: equal ( hana :: at_key ( hana :: make_map ( p<0,0> ( ) ) , key<0> ( ) ) , val<0> ( ) ) ) ; } auto p<0,0> ( ) { return :: minimal_product ( key<0> ( ) , val<0> ( ) ) ; } auto val<0> ( ) { return hana :: test :: ct_eq < - 0 > { } ; } auto key<0> ( ) { return hana :: test :: ct_eq < 0 > { } ; }"
  "auto key<0> ( ) ; auto val<0> ( ) ; auto p<0,0> ( ) ; int main ( ) { BOOST_HANA_CONSTANT_CHECK ( hana :: equal ( hana :: at_key ( hana :: make_map ( p<0,0> ( ) ) , key<0> ( ) ) , val<0> ( ) ) ) ; } auto p<0,0> ( ) { return :: minimal_product ( key<0> ( ) , val<0> ( ) ) ; } auto val<0> ( ) { return hana :: test :: ct_eq < - 0 > { } ; } auto key<0> ( ) { return hana :: test :: ct_eq < 0 > { } ; }" always "auto key<0> ( ) ; auto val<0> ( ) ; auto p<0,0> ( ) ; int main ( ) { BOOST_HANA_CONSTANT_CHECK ( hana :: equal ( hana :: at_key ( hana :: make_map ( p<0,0> ( ) ) , key<0> ( ) ) , val<0> ( ) ) ) ; } auto p<0,0> ( ) { return :: minimal_product ( key<0> ( ) , val<0> ( ) ) ; } auto val<0> ( ) { return hana :: test :: ct_eq < - 0 > { } ; } auto key<0> ( ) { return hana :: test :: ct_eq < 0 > { } ; }"
Line 2574
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2574 always 2574
  exp always "auto key<0> ( ) ; auto val<0> ( ) ; auto p<0,0> ( ) ; int main ( ) { BOOST_HANA_CONSTANT_CHECK ( hana :: equal ( hana :: at_key ( hana :: make_map ( p<0,0> ( ) ) , key<0> ( ) ) , val<0> ( ) ) ) ; } auto p<0,0> ( ) { return :: minimal_product ( key<0> ( ) , val<0> ( ) ) ; } auto val<0> ( ) { return hana :: test :: ct_eq < - 0 > { } ; } auto key<0> ( ) { return hana :: test :: ct_eq < 0 > { } ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2574 always 2574
  code always "template < int i >\nauto key ( ) { return hana :: test :: ct_eq < i > { } ; }\ntemplate < int i >\nauto val ( ) { return hana :: test :: ct_eq < - i > { } ; }\ntemplate < int i , int j >\nauto p ( ) { return :: minimal_product ( key < i > ( ) , val < j > ( ) ) ; }\nint main ( ) {\n    BOOST_HANA_CONSTANT_CHECK ( hana :: equal (\n        hana :: at_key ( hana :: make_map ( p < 0 , 0 > ( ) ) , key < 0 > ( ) ) ,\n        val < 0 > ( ) ) ) ;\n}"
Line 2578
  189 always 189
  = always "template <template <typename> class TOUT> class ObjectCache;\ntemplate <template <typename> class TOUT>\nclass ObjectCache { };\ntemplate <typename T> class Fred {};\nObjectCache<Fred> _cache;"
  "template <template <typename> class TOUT> class ObjectCache;\ntemplate <template <typename> class TOUT>\nclass ObjectCache { };\ntemplate <typename T> class Fred {};\nObjectCache<Fred> _cache;" always "template <template <typename> class TOUT> class ObjectCache;\ntemplate <template <typename> class TOUT>\nclass ObjectCache { };\ntemplate <typename T> class Fred {};\nObjectCache<Fred> _cache;"
Line 2583
  124 always 124
  = always "class ObjectCache<Fred> ; template < typename T > class Fred { } ; ObjectCache<Fred> _cache ; class ObjectCache<Fred> { } ;"
  "class ObjectCache<Fred> ; template < typename T > class Fred { } ; ObjectCache<Fred> _cache ; class ObjectCache<Fred> { } ;" always "class ObjectCache<Fred> ; template < typename T > class Fred { } ; ObjectCache<Fred> _cache ; class ObjectCache<Fred> { } ;"
Line 2586
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2586 always 2586
  exp always "class ObjectCache<Fred> ; template < typename T > class Fred { } ; ObjectCache<Fred> _cache ; class ObjectCache<Fred> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2586 always 2586
  code always "template <template <typename> class TOUT> class ObjectCache;\ntemplate <template <typename> class TOUT>\nclass ObjectCache { };\ntemplate <typename T> class Fred {};\nObjectCache<Fred> _cache;"
Line 2590
  144 always 144
  = always "template<class T, class U> class A {\npublic:\n   int x;\n};\ntemplate<template<class T, class U> class V> class B {\n   V<char, char> i;\n};\nB<A> c;"
  "template<class T, class U> class A {\npublic:\n   int x;\n};\ntemplate<template<class T, class U> class V> class B {\n   V<char, char> i;\n};\nB<A> c;" always "template<class T, class U> class A {\npublic:\n   int x;\n};\ntemplate<template<class T, class U> class V> class B {\n   V<char, char> i;\n};\nB<A> c;"
Line 2598
  118 always 118
  = always "class A<char,char> ; class B<A> ; B<A> c ; class B<A> { A<char,char> i ; } ; class A<char,char> { public: int x ; } ;"
  "class A<char,char> ; class B<A> ; B<A> c ; class B<A> { A<char,char> i ; } ; class A<char,char> { public: int x ; } ;" always "class A<char,char> ; class B<A> ; B<A> c ; class B<A> { A<char,char> i ; } ; class A<char,char> { public: int x ; } ;"
Line 2607
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2607 always 2607
  exp always "class A<char,char> ; class B<A> ; B<A> c ; class B<A> { A<char,char> i ; } ; class A<char,char> { public: int x ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2607 always 2607
  code always "template<class T, class U> class A {\npublic:\n   int x;\n};\ntemplate<template<class T, class U> class V> class B {\n   V<char, char> i;\n};\nB<A> c;"
Line 2611
  182 always 182
  = always "template <class T1, class T2>\nvoid f() {\n  using T3 = typename T1::template T3<T2>;\n  T3 t;\n}\nstruct C3 {\n  template <typename T>\n  class T3\n  {};\n};\nvoid foo() {\n  f<C3, long>();\n}"
  "template <class T1, class T2>\nvoid f() {\n  using T3 = typename T1::template T3<T2>;\n  T3 t;\n}\nstruct C3 {\n  template <typename T>\n  class T3\n  {};\n};\nvoid foo() {\n  f<C3, long>();\n}" always "template <class T1, class T2>\nvoid f() {\n  using T3 = typename T1::template T3<T2>;\n  T3 t;\n}\nstruct C3 {\n  template <typename T>\n  class T3\n  {};\n};\nvoid foo() {\n  f<C3, long>();\n}"
Line 2624
  159 always 159
  = always "void f<C3,long> ( ) ; struct C3 { class T3<long> ; } ; void foo ( ) { f<C3,long> ( ) ; } void f<C3,long> ( ) { C3 :: T3<long> t ; } class C3 :: T3<long> { } ;"
  "void f<C3,long> ( ) ; struct C3 { class T3<long> ; } ; void foo ( ) { f<C3,long> ( ) ; } void f<C3,long> ( ) { C3 :: T3<long> t ; } class C3 :: T3<long> { } ;" always "void f<C3,long> ( ) ; struct C3 { class T3<long> ; } ; void foo ( ) { f<C3,long> ( ) ; } void f<C3,long> ( ) { C3 :: T3<long> t ; } class C3 :: T3<long> { } ;"
Line 2635
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2635 always 2635
  exp always "void f<C3,long> ( ) ; struct C3 { class T3<long> ; } ; void foo ( ) { f<C3,long> ( ) ; } void f<C3,long> ( ) { C3 :: T3<long> t ; } class C3 :: T3<long> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2635 always 2635
  code always "template <class T1, class T2>\nvoid f() {\n  using T3 = typename T1::template T3<T2>;\n  T3 t;\n}\nstruct C3 {\n  template <typename T>\n  class T3\n  {};\n};\nvoid foo() {\n  f<C3, long>();\n}"
Line 2640
  211 always 211
  = always "template <typename> struct a;\ntemplate <typename> struct b {};\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\nstruct i {\n  e<int> j();\n};\n"
  "template <typename> struct a;\ntemplate <typename> struct b {};\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\nstruct i {\n  e<int> j();\n};\n" always "template <typename> struct a;\ntemplate <typename> struct b {};\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\nstruct i {\n  e<int> j();\n};\n"
Line 2650
  219 always 219
  = always "template < typename > struct a ; struct b<c<int>::g> ; template < typename > struct c ; struct e<int> ; struct i { e<int> j ( ) ; } ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;"
  "template < typename > struct a ; struct b<c<int>::g> ; template < typename > struct c ; struct e<int> ; struct i { e<int> j ( ) ; } ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;" always "template < typename > struct a ; struct b<c<int>::g> ; template < typename > struct c ; struct e<int> ; struct i { e<int> j ( ) ; } ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;"
Line 2660
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2660 always 2660
  exp always "template < typename > struct a ; struct b<c<int>::g> ; template < typename > struct c ; struct e<int> ; struct i { e<int> j ( ) ; } ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2660 always 2660
  code always "template <typename> struct a;\ntemplate <typename> struct b {};\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\nstruct i {\n  e<int> j();\n};\n"
Line 2663
  260 always 260
  = always "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}"
  "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}" always "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}"
Line 2675
  287 always 287
  = always "namespace { template < typename > struct a ; template < typename > struct b { } ; } namespace { template < typename > struct c ; template < typename d > struct e { using f = a < b < c < d > :: g > > ; bool h ; h = f :: h ; } ; template < typename i > using j = typename e < i > :: g ; }"
  "namespace { template < typename > struct a ; template < typename > struct b { } ; } namespace { template < typename > struct c ; template < typename d > struct e { using f = a < b < c < d > :: g > > ; bool h ; h = f :: h ; } ; template < typename i > using j = typename e < i > :: g ; }" always "namespace { template < typename > struct a ; template < typename > struct b { } ; } namespace { template < typename > struct c ; template < typename d > struct e { using f = a < b < c < d > :: g > > ; bool h ; h = f :: h ; } ; template < typename i > using j = typename e < i > :: g ; }"
Line 2687
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2687 always 2687
  exp always "namespace { template < typename > struct a ; template < typename > struct b { } ; } namespace { template < typename > struct c ; template < typename d > struct e { using f = a < b < c < d > :: g > > ; bool h ; h = f :: h ; } ; template < typename i > using j = typename e < i > :: g ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2687 always 2687
  code always "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}"
Line 2690
  272 always 272
  = always "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}\nj<int> foo;"
  "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}\nj<int> foo;" always "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}\nj<int> foo;"
Line 2703
  235 always 235
  = always "namespace { template < typename > struct a ; struct b<c<int>::g> ; } namespace { template < typename > struct c ; struct e<int> ; } e<int> :: g foo ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;"
  "namespace { template < typename > struct a ; struct b<c<int>::g> ; } namespace { template < typename > struct c ; struct e<int> ; } e<int> :: g foo ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;" always "namespace { template < typename > struct a ; struct b<c<int>::g> ; } namespace { template < typename > struct c ; struct e<int> ; } e<int> :: g foo ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;"
Line 2716
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2716 always 2716
  exp always "namespace { template < typename > struct a ; struct b<c<int>::g> ; } namespace { template < typename > struct c ; struct e<int> ; } e<int> :: g foo ; struct e<int> { bool h ; h = a < b<c<int>::g> > :: h ; } ; struct b<c<int>::g> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2716 always 2716
  code always "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a<b<typename c<d>::g>>;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}\nj<int> foo;"
Line 2722
  190 always 190
  = always "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n"
  "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n" always "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n"
Line 2727
  227 always 227
  = always "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<c<int>,c<int>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int>,c<int>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int>,c<int>,int> { } ;"
  "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<c<int>,c<int>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int>,c<int>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int>,c<int>,int> { } ;" always "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<c<int>,c<int>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int>,c<int>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int>,c<int>,int> { } ;"
Line 2735
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2735 always 2735
  exp always "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<c<int>,c<int>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int>,c<int>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int>,c<int>,int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2735 always 2735
  code always "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n"
Line 2738
  196 always 196
  = always "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<a::c<int>, a::c<int>, int>), \"\");\n"
  "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<a::c<int>, a::c<int>, int>), \"\");\n" always "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<a::c<int>, a::c<int>, int>), \"\");\n"
Line 2743
  503 always 503
  = always "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;"
  "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;" always "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;"
Line 2751
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2751 always 2751
  exp always "namespace a { template < typename b , bool > struct c ; } struct e<> ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,a::c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2751 always 2751
  code always "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<a::c<int>, a::c<int>, int>), \"\");\n"
Line 2754
  174 always 174
  = always "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n"
  "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n" always "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n"
Line 2757
  469 always 469
  = always "template < typename b , bool > struct c ; struct e<> ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;"
  "template < typename b , bool > struct c ; struct e<> ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;" always "template < typename b , bool > struct c ; struct e<> ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;"
Line 2763
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2763 always 2763
  exp always "template < typename b , bool > struct c ; struct e<> ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> ) , \"\" ) ; struct e<> { } ; struct e<c<int,std::is_empty<int>{}&&std::is_final<int>{}>,c<int,std::is_empty<int>{}&&std::is_final<int>{}>,int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2763 always 2763
  code always "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n"
Line 2766
  85 always 85
  = always "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c{};\nc<int> cc;\n"
  "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c{};\nc<int> cc;\n" always "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c{};\nc<int> cc;\n"
Line 2768
  177 always 177
  = always "struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> ; c<int,std::is_empty<int>{}&&std::is_final<int>{}> cc ; struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> { } ;"
  "struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> ; c<int,std::is_empty<int>{}&&std::is_final<int>{}> cc ; struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> { } ;" always "struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> ; c<int,std::is_empty<int>{}&&std::is_final<int>{}> cc ; struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> { } ;"
Line 2771
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2771 always 2771
  exp always "struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> ; c<int,std::is_empty<int>{}&&std::is_final<int>{}> cc ; struct c<int,std::is_empty<int>{}&&std::is_final<int>{}> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2771 always 2771
  code always "template <typename b, bool = __is_empty(b) && __is_final(b)> struct c{};\nc<int> cc;\n"
Line 2774
  81 always 81
  = always "template <typename b, bool = unknown1(b) && unknown2(b)> struct c{};\nc<int> cc;\n"
  "template <typename b, bool = unknown1(b) && unknown2(b)> struct c{};\nc<int> cc;\n" always "template <typename b, bool = unknown1(b) && unknown2(b)> struct c{};\nc<int> cc;\n"
Line 2776
  135 always 135
  = always "struct c<int,unknown1(int)&&unknown2(int)> ; c<int,unknown1(int)&&unknown2(int)> cc ; struct c<int,unknown1(int)&&unknown2(int)> { } ;"
  "struct c<int,unknown1(int)&&unknown2(int)> ; c<int,unknown1(int)&&unknown2(int)> cc ; struct c<int,unknown1(int)&&unknown2(int)> { } ;" always "struct c<int,unknown1(int)&&unknown2(int)> ; c<int,unknown1(int)&&unknown2(int)> cc ; struct c<int,unknown1(int)&&unknown2(int)> { } ;"
Line 2779
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2779 always 2779
  exp always "struct c<int,unknown1(int)&&unknown2(int)> ; c<int,unknown1(int)&&unknown2(int)> cc ; struct c<int,unknown1(int)&&unknown2(int)> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2779 always 2779
  code always "template <typename b, bool = unknown1(b) && unknown2(b)> struct c{};\nc<int> cc;\n"
Line 2784
  163 always 163
  = always "template<typename T> using A = int;\ntemplate<typename T> using A<T*> = char;\ntemplate<> using A<char> = char;\ntemplate using A<char> = char;\nusing A<char> = char;"
  "template<typename T> using A = int;\ntemplate<typename T> using A<T*> = char;\ntemplate<> using A<char> = char;\ntemplate using A<char> = char;\nusing A<char> = char;" always "template<typename T> using A = int;\ntemplate<typename T> using A<T*> = char;\ntemplate<> using A<char> = char;\ntemplate using A<char> = char;\nusing A<char> = char;"
Line 2789
  189 always 189
  = always "template < typename T > using A = int ; template < typename T > using A < T * > = char ; template < > using A < char > = char ; template using A < char > = char ; using A < char > = char ;"
  "template < typename T > using A = int ; template < typename T > using A < T * > = char ; template < > using A < char > = char ; template using A < char > = char ; using A < char > = char ;" always "template < typename T > using A = int ; template < typename T > using A < T * > = char ; template < > using A < char > = char ; template using A < char > = char ; using A < char > = char ;"
Line 2794
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2794 always 2794
  exp always "template < typename T > using A = int ; template < typename T > using A < T * > = char ; template < > using A < char > = char ; template using A < char > = char ; using A < char > = char ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2794 always 2794
  code always "template<typename T> using A = int;\ntemplate<typename T> using A<T*> = char;\ntemplate<> using A<char> = char;\ntemplate using A<char> = char;\nusing A<char> = char;"
Line 2798
  100 always 100
  = always "template<typename T, typename U> struct pair;\ntemplate<typename T> using cell = pair<T*, cell<T>*>;"
  "template<typename T, typename U> struct pair;\ntemplate<typename T> using cell = pair<T*, cell<T>*>;" always "template<typename T, typename U> struct pair;\ntemplate<typename T> using cell = pair<T*, cell<T>*>;"
Line 2800
  118 always 118
  = always "template < typename T , typename U > struct pair ; template < typename T > using cell = pair < T * , cell < T > * > ;"
  "template < typename T , typename U > struct pair ; template < typename T > using cell = pair < T * , cell < T > * > ;" always "template < typename T , typename U > struct pair ; template < typename T > using cell = pair < T * , cell < T > * > ;"
Line 2802
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2802 always 2802
  exp always "template < typename T , typename U > struct pair ; template < typename T > using cell = pair < T * , cell < T > * > ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2802 always 2802
  code always "template<typename T, typename U> struct pair;\ntemplate<typename T> using cell = pair<T*, cell<T>*>;"
Line 2806
  169 always 169
  = always "template <int> struct a;\ntemplate <class, class b> using c = typename a<int{b::d}>::e;\ntemplate <class> struct f;\ntemplate <class b> using g = typename f<c<int, b>>::e;"
  "template <int> struct a;\ntemplate <class, class b> using c = typename a<int{b::d}>::e;\ntemplate <class> struct f;\ntemplate <class b> using g = typename f<c<int, b>>::e;" always "template <int> struct a;\ntemplate <class, class b> using c = typename a<int{b::d}>::e;\ntemplate <class> struct f;\ntemplate <class b> using g = typename f<c<int, b>>::e;"
Line 2810
  201 always 201
  = always "template < int > struct a ; template < class , class b > using c = typename a < int { b :: d } > :: e ; template < class > struct f ; template < class b > using g = typename f < c < int , b > > :: e ;"
  "template < int > struct a ; template < class , class b > using c = typename a < int { b :: d } > :: e ; template < class > struct f ; template < class b > using g = typename f < c < int , b > > :: e ;" always "template < int > struct a ; template < class , class b > using c = typename a < int { b :: d } > :: e ; template < class > struct f ; template < class b > using g = typename f < c < int , b > > :: e ;"
Line 2814
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2814 always 2814
  exp always "template < int > struct a ; template < class , class b > using c = typename a < int { b :: d } > :: e ; template < class > struct f ; template < class b > using g = typename f < c < int , b > > :: e ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2814 always 2814
  code always "template <int> struct a;\ntemplate <class, class b> using c = typename a<int{b::d}>::e;\ntemplate <class> struct f;\ntemplate <class b> using g = typename f<c<int, b>>::e;"
Line 2819
  50 always 50
  = always "template <class> class A { void f(); };\nA<int> a;"
  "template <class> class A { void f(); };\nA<int> a;" always "template <class> class A { void f(); };\nA<int> a;"
Line 2821
  58 always 58
  = always "class A<int> ; A<int> a ; class A<int> { void f ( ) ; } ;"
  "class A<int> ; A<int> a ; class A<int> { void f ( ) ; } ;" always "class A<int> ; A<int> a ; class A<int> { void f ( ) ; } ;"
Line 2824
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2824 always 2824
  exp always "class A<int> ; A<int> a ; class A<int> { void f ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2824 always 2824
  code always "template <class> class A { void f(); };\nA<int> a;"
Line 2827
  52 always 52
  = always "template <struct> struct A { void f(); };\nA<int> a;"
  "template <struct> struct A { void f(); };\nA<int> a;" always "template <struct> struct A { void f(); };\nA<int> a;"
Line 2829
  60 always 60
  = always "struct A<int> ; A<int> a ; struct A<int> { void f ( ) ; } ;"
  "struct A<int> ; A<int> a ; struct A<int> { void f ( ) ; } ;" always "struct A<int> ; A<int> a ; struct A<int> { void f ( ) ; } ;"
Line 2832
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2832 always 2832
  exp always "struct A<int> ; A<int> a ; struct A<int> { void f ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2832 always 2832
  code always "template <struct> struct A { void f(); };\nA<int> a;"
Line 2838
  224 always 224
  = always "template <typename a, a> struct b {};\ntemplate <typename> struct c;\ntemplate <typename> struct d : b<bool, std::is_polymorphic<int>{}> {};\ntemplate <bool> struct e;\ntemplate <typename a> using f = typename e<c<d<a>>::g>::h;"
  "template <typename a, a> struct b {};\ntemplate <typename> struct c;\ntemplate <typename> struct d : b<bool, std::is_polymorphic<int>{}> {};\ntemplate <bool> struct e;\ntemplate <typename a> using f = typename e<c<d<a>>::g>::h;" always "template <typename a, a> struct b {};\ntemplate <typename> struct c;\ntemplate <typename> struct d : b<bool, std::is_polymorphic<int>{}> {};\ntemplate <bool> struct e;\ntemplate <typename a> using f = typename e<c<d<a>>::g>::h;"
Line 2843
  266 always 266
  = always "template < typename a , a > struct b { } ; template < typename > struct c ; template < typename > struct d : b < bool , std :: is_polymorphic < int > { } > { } ; template < bool > struct e ; template < typename a > using f = typename e < c < d < a > > :: g > :: h ;"
  "template < typename a , a > struct b { } ; template < typename > struct c ; template < typename > struct d : b < bool , std :: is_polymorphic < int > { } > { } ; template < bool > struct e ; template < typename a > using f = typename e < c < d < a > > :: g > :: h ;" always "template < typename a , a > struct b { } ; template < typename > struct c ; template < typename > struct d : b < bool , std :: is_polymorphic < int > { } > { } ; template < bool > struct e ; template < typename a > using f = typename e < c < d < a > > :: g > :: h ;"
Line 2848
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2848 always 2848
  exp always "template < typename a , a > struct b { } ; template < typename > struct c ; template < typename > struct d : b < bool , std :: is_polymorphic < int > { } > { } ; template < bool > struct e ; template < typename a > using f = typename e < c < d < a > > :: g > :: h ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2848 always 2848
  code always "template <typename a, a> struct b {};\ntemplate <typename> struct c;\ntemplate <typename> struct d : b<bool, std::is_polymorphic<int>{}> {};\ntemplate <bool> struct e;\ntemplate <typename a> using f = typename e<c<d<a>>::g>::h;"
Line 2851
  210 always 210
  = always "template <typename a, a> struct b;\ntemplate <bool, typename> struct c;\ntemplate <typename a> struct d : b<bool, std::is_empty<a>{}> {};\ntemplate <typename a> using e = typename c<std::is_final<a>{}, d<a>>::f;\n"
  "template <typename a, a> struct b;\ntemplate <bool, typename> struct c;\ntemplate <typename a> struct d : b<bool, std::is_empty<a>{}> {};\ntemplate <typename a> using e = typename c<std::is_final<a>{}, d<a>>::f;\n" always "template <typename a, a> struct b;\ntemplate <bool, typename> struct c;\ntemplate <typename a> struct d : b<bool, std::is_empty<a>{}> {};\ntemplate <typename a> using e = typename c<std::is_final<a>{}, d<a>>::f;\n"
Line 2855
  251 always 251
  = always "template < typename a , a > struct b ; template < bool , typename > struct c ; template < typename a > struct d : b < bool , std :: is_empty < a > { } > { } ; template < typename a > using e = typename c < std :: is_final < a > { } , d < a > > :: f ;"
  "template < typename a , a > struct b ; template < bool , typename > struct c ; template < typename a > struct d : b < bool , std :: is_empty < a > { } > { } ; template < typename a > using e = typename c < std :: is_final < a > { } , d < a > > :: f ;" always "template < typename a , a > struct b ; template < bool , typename > struct c ; template < typename a > struct d : b < bool , std :: is_empty < a > { } > { } ; template < typename a > using e = typename c < std :: is_final < a > { } , d < a > > :: f ;"
Line 2859
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2859 always 2859
  exp always "template < typename a , a > struct b ; template < bool , typename > struct c ; template < typename a > struct d : b < bool , std :: is_empty < a > { } > { } ; template < typename a > using e = typename c < std :: is_final < a > { } , d < a > > :: f ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2859 always 2859
  code always "template <typename a, a> struct b;\ntemplate <bool, typename> struct c;\ntemplate <typename a> struct d : b<bool, std::is_empty<a>{}> {};\ntemplate <typename a> using e = typename c<std::is_final<a>{}, d<a>>::f;\n"
Line 2864
  279 always 279
  = always "namespace {\n    namespace b {\n        template <int c> struct B { using B<c / 2>::d; };\n    }\n    template <class, class> using e = typename b::B<int{}>;\n    namespace b {\n        template <class> struct f {};\n    }\n    template <class c> using g = b::f<e<int, c>>;\n}\ng<int> g1;"
  "namespace {\n    namespace b {\n        template <int c> struct B { using B<c / 2>::d; };\n    }\n    template <class, class> using e = typename b::B<int{}>;\n    namespace b {\n        template <class> struct f {};\n    }\n    template <class c> using g = b::f<e<int, c>>;\n}\ng<int> g1;" always "namespace {\n    namespace b {\n        template <int c> struct B { using B<c / 2>::d; };\n    }\n    template <class, class> using e = typename b::B<int{}>;\n    namespace b {\n        template <class> struct f {};\n    }\n    template <class c> using g = b::f<e<int, c>>;\n}\ng<int> g1;"
Line 2875
  171 always 171
  = always "namespace { namespace b { struct B<0> ; } namespace b { struct f<b::B<0>> ; } } b :: f<b::B<0>> g1 ; struct b :: B<0> { using B<0> :: d ; } ; struct b :: f<b::B<0>> { } ;"
  "namespace { namespace b { struct B<0> ; } namespace b { struct f<b::B<0>> ; } } b :: f<b::B<0>> g1 ; struct b :: B<0> { using B<0> :: d ; } ; struct b :: f<b::B<0>> { } ;" always "namespace { namespace b { struct B<0> ; } namespace b { struct f<b::B<0>> ; } } b :: f<b::B<0>> g1 ; struct b :: B<0> { using B<0> :: d ; } ; struct b :: f<b::B<0>> { } ;"
Line 2885
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2885 always 2885
  exp always "namespace { namespace b { struct B<0> ; } namespace b { struct f<b::B<0>> ; } } b :: f<b::B<0>> g1 ; struct b :: B<0> { using B<0> :: d ; } ; struct b :: f<b::B<0>> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2885 always 2885
  code always "namespace {\n    namespace b {\n        template <int c> struct B { using B<c / 2>::d; };\n    }\n    template <class, class> using e = typename b::B<int{}>;\n    namespace b {\n        template <class> struct f {};\n    }\n    template <class c> using g = b::f<e<int, c>>;\n}\ng<int> g1;"
Line 2890
  161 always 161
  = always "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>);\ntemplate <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>){}"
  "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>);\ntemplate <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>){}" always "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>);\ntemplate <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>){}"
Line 2892
  200 always 200
  = always "template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) ; template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) { }"
  "template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) ; template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) { }" always "template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) ; template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) { }"
Line 2894
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2894 always 2894
  exp always "template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) ; template < class , class a > auto b ( ) . decltype ( a { } . template b < void ( int , int ) > ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2894 always 2894
  code always "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>);\ntemplate <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>){}"
Line 2897
  151 always 151
  = always "template <class, class a>\nauto b() -> decltype(a{}.template b<void(int, int)>()) {}\nstruct c {\n  template <class> void b();\n};\nvoid d() { b<c, c>(); }"
  "template <class, class a>\nauto b() -> decltype(a{}.template b<void(int, int)>()) {}\nstruct c {\n  template <class> void b();\n};\nvoid d() { b<c, c>(); }" always "template <class, class a>\nauto b() -> decltype(a{}.template b<void(int, int)>()) {}\nstruct c {\n  template <class> void b();\n};\nvoid d() { b<c, c>(); }"
Line 2903
  235 always 235
  = always "auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) ; struct c { template < class > void b ( ) ; } ; void d ( ) { b<c,c> ( ) ; } auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) { }"
  "auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) ; struct c { template < class > void b ( ) ; } ; void d ( ) { b<c,c> ( ) ; } auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) { }" always "auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) ; struct c { template < class > void b ( ) ; } ; void d ( ) { b<c,c> ( ) ; } auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) { }"
Line 2909
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2909 always 2909
  exp always "auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) ; struct c { template < class > void b ( ) ; } ; void d ( ) { b<c,c> ( ) ; } auto b<c,c> ( ) . decltype ( c { } . template b < void ( int , int ) > ( ) ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2909 always 2909
  code always "template <class, class a>\nauto b() -> decltype(a{}.template b<void(int, int)>()) {}\nstruct c {\n  template <class> void b();\n};\nvoid d() { b<c, c>(); }"
Line 2914
  51 always 51
  = always "template<typename T = void> struct X {};\nX<X<>> x;"
  "template<typename T = void> struct X {};\nX<X<>> x;" always "template<typename T = void> struct X {};\nX<X<>> x;"
Line 2916
  97 always 97
  = always "struct X<void> ; struct X<X<void>> ; X<X<void>> x ; struct X<void> { } ; struct X<X<void>> { } ;"
  "struct X<void> ; struct X<X<void>> ; X<X<void>> x ; struct X<void> { } ; struct X<X<void>> { } ;" always "struct X<void> ; struct X<X<void>> ; X<X<void>> x ; struct X<void> { } ; struct X<X<void>> { } ;"
Line 2921
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2921 always 2921
  exp always "struct X<void> ; struct X<X<void>> ; X<X<void>> x ; struct X<void> { } ; struct X<X<void>> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2921 always 2921
  code always "template<typename T = void> struct X {};\nX<X<>> x;"
Line 2925
  51 always 51
  = always "template<int> struct S { void f(int i); };\nS<1> s;"
  "template<int> struct S { void f(int i); };\nS<1> s;" always "template<int> struct S { void f(int i); };\nS<1> s;"
Line 2927
  60 always 60
  = always "struct S<1> ; S<1> s ; struct S<1> { void f ( int i ) ; } ;"
  "struct S<1> ; S<1> s ; struct S<1> { void f ( int i ) ; } ;" always "struct S<1> ; S<1> s ; struct S<1> { void f ( int i ) ; } ;"
Line 2931
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2931 always 2931
  exp always "struct S<1> ; S<1> s ; struct S<1> { void f ( int i ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2931 always 2931
  code always "template<int> struct S { void f(int i); };\nS<1> s;"
Line 2936
  245 always 245
  = always "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\ntemplate <typename T>\nconstexpr auto funcBraced = [](auto x){ return T{x};};\ndouble f(int x) { return func<double>(x); }\ndouble fBraced(int x) { return funcBraced<int>(x); }"
  "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\ntemplate <typename T>\nconstexpr auto funcBraced = [](auto x){ return T{x};};\ndouble f(int x) { return func<double>(x); }\ndouble fBraced(int x) { return funcBraced<int>(x); }" always "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\ntemplate <typename T>\nconstexpr auto funcBraced = [](auto x){ return T{x};};\ndouble f(int x) { return func<double>(x); }\ndouble fBraced(int x) { return funcBraced<int>(x); }"
Line 2942
  257 always 257
  = always "constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; constexpr auto funcBraced<int> = [ ] ( auto x ) { return int { x } ; } ; double f ( int x ) { return func<double> ( x ) ; } double fBraced ( int x ) { return funcBraced<int> ( x ) ; }"
  "constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; constexpr auto funcBraced<int> = [ ] ( auto x ) { return int { x } ; } ; double f ( int x ) { return func<double> ( x ) ; } double fBraced ( int x ) { return funcBraced<int> ( x ) ; }" always "constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; constexpr auto funcBraced<int> = [ ] ( auto x ) { return int { x } ; } ; double f ( int x ) { return func<double> ( x ) ; } double fBraced ( int x ) { return funcBraced<int> ( x ) ; }"
Line 2946
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2946 always 2946
  exp always "constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; constexpr auto funcBraced<int> = [ ] ( auto x ) { return int { x } ; } ; double f ( int x ) { return func<double> ( x ) ; } double fBraced ( int x ) { return funcBraced<int> ( x ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2946 always 2946
  code always "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\ntemplate <typename T>\nconstexpr auto funcBraced = [](auto x){ return T{x};};\ndouble f(int x) { return func<double>(x); }\ndouble fBraced(int x) { return funcBraced<int>(x); }"
Line 2949
  125 always 125
  = always "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\nvoid foo() {\n    func<int>(x);\n    func<double>(x);\n}"
  "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\nvoid foo() {\n    func<int>(x);\n    func<double>(x);\n}" always "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\nvoid foo() {\n    func<int>(x);\n    func<double>(x);\n}"
Line 2955
  196 always 196
  = always "constexpr auto func<int> = [ ] ( auto x ) { return int ( x ) ; } ; constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; void foo ( ) { func<int> ( x ) ; func<double> ( x ) ; }"
  "constexpr auto func<int> = [ ] ( auto x ) { return int ( x ) ; } ; constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; void foo ( ) { func<int> ( x ) ; func<double> ( x ) ; }" always "constexpr auto func<int> = [ ] ( auto x ) { return int ( x ) ; } ; constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; void foo ( ) { func<int> ( x ) ; func<double> ( x ) ; }"
Line 2961
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2961 always 2961
  exp always "constexpr auto func<int> = [ ] ( auto x ) { return int ( x ) ; } ; constexpr auto func<double> = [ ] ( auto x ) { return double ( x ) ; } ; void foo ( ) { func<int> ( x ) ; func<double> ( x ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2961 always 2961
  code always "template <typename T>\nconstexpr auto func = [](auto x){ return T(x);};\nvoid foo() {\n    func<int>(x);\n    func<double>(x);\n}"
Line 2966
  382 always 382
  = always "template<typename Tuple>\nstruct lambda_context {\n    template<typename Sig> struct result;\n    template<typename This, typename I>\n    struct result<This(terminal, placeholder)> : at<Tuple, I> {};\n};\ntemplate<typename T>\nstruct lambda {\n    template<typename Sig> struct result;\n    template<typename This>\n    struct result<This()> : lambda_context<tuple<> > {};\n};\nlambda<int> l;"
  "template<typename Tuple>\nstruct lambda_context {\n    template<typename Sig> struct result;\n    template<typename This, typename I>\n    struct result<This(terminal, placeholder)> : at<Tuple, I> {};\n};\ntemplate<typename T>\nstruct lambda {\n    template<typename Sig> struct result;\n    template<typename This>\n    struct result<This()> : lambda_context<tuple<> > {};\n};\nlambda<int> l;" always "template<typename Tuple>\nstruct lambda_context {\n    template<typename Sig> struct result;\n    template<typename This, typename I>\n    struct result<This(terminal, placeholder)> : at<Tuple, I> {};\n};\ntemplate<typename T>\nstruct lambda {\n    template<typename Sig> struct result;\n    template<typename This>\n    struct result<This()> : lambda_context<tuple<> > {};\n};\nlambda<int> l;"
Line 2979
  408 always 408
  = always "template < typename Tuple > struct lambda_context { template < typename Sig > struct result ; template < typename This , typename I > struct result < This ( terminal , placeholder ) > : at < Tuple , I > { } ; } ; struct lambda<int> ; lambda<int> l ; struct lambda<int> { template < typename Sig > struct result ; template < typename This > struct result < This ( ) > : lambda_context < tuple < > > { } ; } ;"
  "template < typename Tuple > struct lambda_context { template < typename Sig > struct result ; template < typename This , typename I > struct result < This ( terminal , placeholder ) > : at < Tuple , I > { } ; } ; struct lambda<int> ; lambda<int> l ; struct lambda<int> { template < typename Sig > struct result ; template < typename This > struct result < This ( ) > : lambda_context < tuple < > > { } ; } ;" always "template < typename Tuple > struct lambda_context { template < typename Sig > struct result ; template < typename This , typename I > struct result < This ( terminal , placeholder ) > : at < Tuple , I > { } ; } ; struct lambda<int> ; lambda<int> l ; struct lambda<int> { template < typename Sig > struct result ; template < typename This > struct result < This ( ) > : lambda_context < tuple < > > { } ; } ;"
Line 2991
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2991 always 2991
  exp always "template < typename Tuple > struct lambda_context { template < typename Sig > struct result ; template < typename This , typename I > struct result < This ( terminal , placeholder ) > : at < Tuple , I > { } ; } ; struct lambda<int> ; lambda<int> l ; struct lambda<int> { template < typename Sig > struct result ; template < typename This > struct result < This ( ) > : lambda_context < tuple < > > { } ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  2991 always 2991
  code always "template<typename Tuple>\nstruct lambda_context {\n    template<typename Sig> struct result;\n    template<typename This, typename I>\n    struct result<This(terminal, placeholder)> : at<Tuple, I> {};\n};\ntemplate<typename T>\nstruct lambda {\n    template<typename Sig> struct result;\n    template<typename This>\n    struct result<This()> : lambda_context<tuple<> > {};\n};\nlambda<int> l;"
Line 2995
  119 always 119
  = always "template <class VALUE_T, class LIST_T = std::list<VALUE_T>>\nclass TestList { };\nTestList<std::shared_ptr<int>> m_test;"
  "template <class VALUE_T, class LIST_T = std::list<VALUE_T>>\nclass TestList { };\nTestList<std::shared_ptr<int>> m_test;" always "template <class VALUE_T, class LIST_T = std::list<VALUE_T>>\nclass TestList { };\nTestList<std::shared_ptr<int>> m_test;"
Line 2998
  218 always 218
  = always "class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> ; TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> m_test ; class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> { } ;"
  "class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> ; TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> m_test ; class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> { } ;" always "class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> ; TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> m_test ; class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> { } ;"
Line 3001
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3001 always 3001
  exp always "class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> ; TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> m_test ; class TestList<std::shared_ptr<int>,std::list<std::shared_ptr<int>>> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3001 always 3001
  code always "template <class VALUE_T, class LIST_T = std::list<VALUE_T>>\nclass TestList { };\nTestList<std::shared_ptr<int>> m_test;"
Line 3005
  207 always 207
  = always "template <class...> struct a;\nnamespace {\ntemplate <class, class> struct b;\ntemplate <template <class> class c, class... f, template <class...> class d>\nstruct b<c<f...>, d<>>;\n}\nvoid e() { using c = a<>; }"
  "template <class...> struct a;\nnamespace {\ntemplate <class, class> struct b;\ntemplate <template <class> class c, class... f, template <class...> class d>\nstruct b<c<f...>, d<>>;\n}\nvoid e() { using c = a<>; }" always "template <class...> struct a;\nnamespace {\ntemplate <class, class> struct b;\ntemplate <template <class> class c, class... f, template <class...> class d>\nstruct b<c<f...>, d<>>;\n}\nvoid e() { using c = a<>; }"
Line 3012
  223 always 223
  = always "template < class ... > struct a ; namespace { template < class , class > struct b ; template < template < class > class c , class ... f , template < class ... > class d > struct b < c < f ... > , d < > > ; } void e ( ) { }"
  "template < class ... > struct a ; namespace { template < class , class > struct b ; template < template < class > class c , class ... f , template < class ... > class d > struct b < c < f ... > , d < > > ; } void e ( ) { }" always "template < class ... > struct a ; namespace { template < class , class > struct b ; template < template < class > class c , class ... f , template < class ... > class d > struct b < c < f ... > , d < > > ; } void e ( ) { }"
Line 3019
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3019 always 3019
  exp always "template < class ... > struct a ; namespace { template < class , class > struct b ; template < template < class > class c , class ... f , template < class ... > class d > struct b < c < f ... > , d < > > ; } void e ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3019 always 3019
  code always "template <class...> struct a;\nnamespace {\ntemplate <class, class> struct b;\ntemplate <template <class> class c, class... f, template <class...> class d>\nstruct b<c<f...>, d<>>;\n}\nvoid e() { using c = a<>; }"
Line 3023
  255 always 255
  = always "template <class...> struct a;\nnamespace {\ntemplate <class, class, class, class>\nstruct b;\ntemplate <template <class> class c, class... d, template <class> class e, class... f>\nstruct b<c<d...>, e<f...>>;\n}\nvoid fn1() {\n  using c = a<>;\n  using e = a<>;\n}"
  "template <class...> struct a;\nnamespace {\ntemplate <class, class, class, class>\nstruct b;\ntemplate <template <class> class c, class... d, template <class> class e, class... f>\nstruct b<c<d...>, e<f...>>;\n}\nvoid fn1() {\n  using c = a<>;\n  using e = a<>;\n}" always "template <class...> struct a;\nnamespace {\ntemplate <class, class, class, class>\nstruct b;\ntemplate <template <class> class c, class... d, template <class> class e, class... f>\nstruct b<c<d...>, e<f...>>;\n}\nvoid fn1() {\n  using c = a<>;\n  using e = a<>;\n}"
Line 3034
  257 always 257
  = always "template < class ... > struct a ; namespace { template < class , class , class , class > struct b ; template < template < class > class c , class ... d , template < class > class e , class ... f > struct b < c < d ... > , e < f ... > > ; } void fn1 ( ) { }"
  "template < class ... > struct a ; namespace { template < class , class , class , class > struct b ; template < template < class > class c , class ... d , template < class > class e , class ... f > struct b < c < d ... > , e < f ... > > ; } void fn1 ( ) { }" always "template < class ... > struct a ; namespace { template < class , class , class , class > struct b ; template < template < class > class c , class ... d , template < class > class e , class ... f > struct b < c < d ... > , e < f ... > > ; } void fn1 ( ) { }"
Line 3043
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3043 always 3043
  exp always "template < class ... > struct a ; namespace { template < class , class , class , class > struct b ; template < template < class > class c , class ... d , template < class > class e , class ... f > struct b < c < d ... > , e < f ... > > ; } void fn1 ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3043 always 3043
  code always "template <class...> struct a;\nnamespace {\ntemplate <class, class, class, class>\nstruct b;\ntemplate <template <class> class c, class... d, template <class> class e, class... f>\nstruct b<c<d...>, e<f...>>;\n}\nvoid fn1() {\n  using c = a<>;\n  using e = a<>;\n}"
Line 3047
  203 always 203
  = always "template <bool> struct a;\ntemplate <bool b> using c = typename a<b>::d;\ntemplate <typename> struct e;\ntemplate <typename> struct h {\n  template <typename... f, c<h<e<typename f::d...>>::g>> void i();\n};"
  "template <bool> struct a;\ntemplate <bool b> using c = typename a<b>::d;\ntemplate <typename> struct e;\ntemplate <typename> struct h {\n  template <typename... f, c<h<e<typename f::d...>>::g>> void i();\n};" always "template <bool> struct a;\ntemplate <bool b> using c = typename a<b>::d;\ntemplate <typename> struct e;\ntemplate <typename> struct h {\n  template <typename... f, c<h<e<typename f::d...>>::g>> void i();\n};"
Line 3053
  239 always 239
  = always "template < bool > struct a ; template < bool b > using c = typename a < b > :: d ; template < typename > struct e ; template < typename > struct h { template < typename ... f , c < h < e < typename f :: d ... > > :: g > > void i ( ) ; } ;"
  "template < bool > struct a ; template < bool b > using c = typename a < b > :: d ; template < typename > struct e ; template < typename > struct h { template < typename ... f , c < h < e < typename f :: d ... > > :: g > > void i ( ) ; } ;" always "template < bool > struct a ; template < bool b > using c = typename a < b > :: d ; template < typename > struct e ; template < typename > struct h { template < typename ... f , c < h < e < typename f :: d ... > > :: g > > void i ( ) ; } ;"
Line 3059
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3059 always 3059
  exp always "template < bool > struct a ; template < bool b > using c = typename a < b > :: d ; template < typename > struct e ; template < typename > struct h { template < typename ... f , c < h < e < typename f :: d ... > > :: g > > void i ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3059 always 3059
  code always "template <bool> struct a;\ntemplate <bool b> using c = typename a<b>::d;\ntemplate <typename> struct e;\ntemplate <typename> struct h {\n  template <typename... f, c<h<e<typename f::d...>>::g>> void i();\n};"
Line 3063
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3063 always 3063
  "template<int M, int N>\nclass GCD {\npublic:\n  enum { val = (N == 0) ? M : GCD<N, M % N>::val };\n};\nint main() {\n  GCD< 1, 0 >::val;\n}" always "template<int M, int N>\nclass GCD {\npublic:\n  enum { val = (N == 0) ? M : GCD<N, M % N>::val };\n};\nint main() {\n  GCD< 1, 0 >::val;\n}"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3063 always 3063
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3063 always 3063
  false always 0
Line 3074
  71 always 71
  = always "template <typename b> using d = a<b>;\nstatic_assert(i<d<l<b>>>{}, \"\");"
  "template <typename b> using d = a<b>;\nstatic_assert(i<d<l<b>>>{}, \"\");" always "template <typename b> using d = a<b>;\nstatic_assert(i<d<l<b>>>{}, \"\");"
Line 3076
  49 always 49
  = always "static_assert ( i < a < l < b > > > { } , \"\" ) ;"
  "static_assert ( i < a < l < b > > > { } , \"\" ) ;" always "static_assert ( i < a < l < b > > > { } , \"\" ) ;"
Line 3077
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3077 always 3077
  exp always "static_assert ( i < a < l < b > > > { } , \"\" ) ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3077 always 3077
  code always "template <typename b> using d = a<b>;\nstatic_assert(i<d<l<b>>>{}, \"\");"
Line 3082
  218 always 218
  = always "template <typename> struct a {\n  template <typename b> constexpr decltype(auto) operator()(b &&) const;\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nconstexpr decltype(auto) a<d>::operator()(b &&) const {}"
  "template <typename> struct a {\n  template <typename b> constexpr decltype(auto) operator()(b &&) const;\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nconstexpr decltype(auto) a<d>::operator()(b &&) const {}" always "template <typename> struct a {\n  template <typename b> constexpr decltype(auto) operator()(b &&) const;\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nconstexpr decltype(auto) a<d>::operator()(b &&) const {}"
Line 3089
  244 always 244
  = always "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ;"
  "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ;" always "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ;"
Line 3097
  312 always 312
  = always "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ; constexpr decltype ( auto ) a<int> :: operator() ( b && ) const { }"
  "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ; constexpr decltype ( auto ) a<int> :: operator() ( b && ) const { }" always "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ; constexpr decltype ( auto ) a<int> :: operator() ( b && ) const { }"
Line 3106
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3106 always 3106
  exp always "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ;"
  act always "struct a<int> ; a<int> c ; template < typename d > template < typename b > constexpr decltype ( auto ) a < d > :: operator() ( b && ) const { } struct a<int> { template < typename b > constexpr decltype ( auto ) operator() ( b && ) const ; } ; constexpr decltype ( auto ) a<int> :: operator() ( b && ) const { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3106 always 3106
  code always "template <typename> struct a {\n  template <typename b> constexpr decltype(auto) operator()(b &&) const;\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nconstexpr decltype(auto) a<d>::operator()(b &&) const {}"
Line 3109
  187 always 187
  = always "template <typename> struct a {\n  template <typename b> static void foo();\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }"
  "template <typename> struct a {\n  template <typename b> static void foo();\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }" always "template <typename> struct a {\n  template <typename b> static void foo();\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }"
Line 3117
  276 always 276
  = always "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }"
  "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }" always "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }"
Line 3128
  242 always 242
  = always "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }"
  "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }" always "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }"
Line 3138
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3138 always 3138
  exp always "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }"
  act always "struct a<int> ; a<int> c ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3138 always 3138
  code always "template <typename> struct a {\n  template <typename b> static void foo();\n};\na<int> c;\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }"
Line 3141
  177 always 177
  = always "template <typename> struct a {\n  template <typename b> static void foo();\n};\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }"
  "template <typename> struct a {\n  template <typename b> static void foo();\n};\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }" always "template <typename> struct a {\n  template <typename b> static void foo();\n};\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }"
Line 3148
  219 always 219
  = always "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }"
  "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }" always "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }"
Line 3157
  231 always 231
  = always "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }"
  "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }" always "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }"
Line 3166
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3166 always 3166
  exp always "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { static void foo<char> ( ) ; } ; void a<int> :: foo<char> ( ) { }"
  act always "struct a<int> ; template < typename d > template < typename b > void a < d > :: foo ( ) { } void bar ( ) { a<int> :: foo < char > ( ) ; } struct a<int> { template < typename b > static void foo ( ) ; } ; void a<int> :: foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3166 always 3166
  code always "template <typename> struct a {\n  template <typename b> static void foo();\n};\ntemplate <typename d>\ntemplate <typename b>\nvoid a<d>::foo() {}\nvoid bar() { a<int>::foo<char>(); }"
Line 3171
  105 always 105
  = always "template <typename> struct a { };\ntemplate <typename j> void h() { k.h<a<j>>; }\nvoid foo() { h<int>(); }"
  "template <typename> struct a { };\ntemplate <typename j> void h() { k.h<a<j>>; }\nvoid foo() { h<int>(); }" always "template <typename> struct a { };\ntemplate <typename j> void h() { k.h<a<j>>; }\nvoid foo() { h<int>(); }"
Line 3174
  123 always 123
  = always "struct a<int> ; void h<int> ( ) ; void foo ( ) { h<int> ( ) ; } void h<int> ( ) { k . h < a<int> > ; } struct a<int> { } ;"
  "struct a<int> ; void h<int> ( ) ; void foo ( ) { h<int> ( ) ; } void h<int> ( ) { k . h < a<int> > ; } struct a<int> { } ;" always "struct a<int> ; void h<int> ( ) ; void foo ( ) { h<int> ( ) ; } void h<int> ( ) { k . h < a<int> > ; } struct a<int> { } ;"
Line 3179
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3179 always 3179
  exp always "struct a<int> ; void h<int> ( ) ; void foo ( ) { h<int> ( ) ; } void h<int> ( ) { k . h < a<int> > ; } struct a<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3179 always 3179
  code always "template <typename> struct a { };\ntemplate <typename j> void h() { k.h<a<j>>; }\nvoid foo() { h<int>(); }"
Line 3183
  239 always 239
  = always "class LuaContext {\npublic:\n  template <typename TFunctionType, typename TType>\n  void registerFunction(TType fn) { }\n};\nvoid setupLuaBindingsDNSQuestion() {\n  g_lua.registerFunction<void (DNSQuestion ::*)(std ::string, std ::string)>();\n}"
  "class LuaContext {\npublic:\n  template <typename TFunctionType, typename TType>\n  void registerFunction(TType fn) { }\n};\nvoid setupLuaBindingsDNSQuestion() {\n  g_lua.registerFunction<void (DNSQuestion ::*)(std ::string, std ::string)>();\n}" always "class LuaContext {\npublic:\n  template <typename TFunctionType, typename TType>\n  void registerFunction(TType fn) { }\n};\nvoid setupLuaBindingsDNSQuestion() {\n  g_lua.registerFunction<void (DNSQuestion ::*)(std ::string, std ::string)>();\n}"
Line 3191
  259 always 259
  = always "class LuaContext { public: template < typename TFunctionType , typename TType > void registerFunction ( TType fn ) { } } ; void setupLuaBindingsDNSQuestion ( ) { g_lua . registerFunction < void ( DNSQuestion :: * ) ( std :: string , std :: string ) > ( ) ; }"
  "class LuaContext { public: template < typename TFunctionType , typename TType > void registerFunction ( TType fn ) { } } ; void setupLuaBindingsDNSQuestion ( ) { g_lua . registerFunction < void ( DNSQuestion :: * ) ( std :: string , std :: string ) > ( ) ; }" always "class LuaContext { public: template < typename TFunctionType , typename TType > void registerFunction ( TType fn ) { } } ; void setupLuaBindingsDNSQuestion ( ) { g_lua . registerFunction < void ( DNSQuestion :: * ) ( std :: string , std :: string ) > ( ) ; }"
Line 3199
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3199 always 3199
  exp always "class LuaContext { public: template < typename TFunctionType , typename TType > void registerFunction ( TType fn ) { } } ; void setupLuaBindingsDNSQuestion ( ) { g_lua . registerFunction < void ( DNSQuestion :: * ) ( std :: string , std :: string ) > ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3199 always 3199
  code always "class LuaContext {\npublic:\n  template <typename TFunctionType, typename TType>\n  void registerFunction(TType fn) { }\n};\nvoid setupLuaBindingsDNSQuestion() {\n  g_lua.registerFunction<void (DNSQuestion ::*)(std ::string, std ::string)>();\n}"
Line 3203
  225 always 225
  = always "template <typename...> using a = int;\ntemplate <typename, typename> using b = a<>;\ntemplate <typename, typename> void c();\ntemplate <typename d, typename> void e() { c<b<d, int>, int>; }\nvoid f() { e<int(int, ...), int>(); }"
  "template <typename...> using a = int;\ntemplate <typename, typename> using b = a<>;\ntemplate <typename, typename> void c();\ntemplate <typename d, typename> void e() { c<b<d, int>, int>; }\nvoid f() { e<int(int, ...), int>(); }" always "template <typename...> using a = int;\ntemplate <typename, typename> using b = a<>;\ntemplate <typename, typename> void c();\ntemplate <typename d, typename> void e() { c<b<d, int>, int>; }\nvoid f() { e<int(int, ...), int>(); }"
Line 3208
  169 always 169
  = always "template < typename , typename > void c ( ) ; void e<int(int,...),int> ( ) ; void f ( ) { e<int(int,...),int> ( ) ; } void e<int(int,...),int> ( ) { c < int , int > ; }"
  "template < typename , typename > void c ( ) ; void e<int(int,...),int> ( ) ; void f ( ) { e<int(int,...),int> ( ) ; } void e<int(int,...),int> ( ) { c < int , int > ; }" always "template < typename , typename > void c ( ) ; void e<int(int,...),int> ( ) ; void f ( ) { e<int(int,...),int> ( ) ; } void e<int(int,...),int> ( ) { c < int , int > ; }"
Line 3212
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3212 always 3212
  exp always "template < typename , typename > void c ( ) ; void e<int(int,...),int> ( ) ; void f ( ) { e<int(int,...),int> ( ) ; } void e<int(int,...),int> ( ) { c < int , int > ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3212 always 3212
  code always "template <typename...> using a = int;\ntemplate <typename, typename> using b = a<>;\ntemplate <typename, typename> void c();\ntemplate <typename d, typename> void e() { c<b<d, int>, int>; }\nvoid f() { e<int(int, ...), int>(); }"
Line 3217
  55 always 55
  = always "template <long a, bool = 0 == a> struct b {};\nb<1> b1;"
  "template <long a, bool = 0 == a> struct b {};\nb<1> b1;" always "template <long a, bool = 0 == a> struct b {};\nb<1> b1;"
Line 3219
  60 always 60
  = always "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;"
  "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;" always "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;"
Line 3222
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3222 always 3222
  exp always "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3222 always 3222
  code always "template <long a, bool = 0 == a> struct b {};\nb<1> b1;"
Line 3225
  55 always 55
  = always "template <long a, bool = 0 != a> struct b {};\nb<1> b1;"
  "template <long a, bool = 0 != a> struct b {};\nb<1> b1;" always "template <long a, bool = 0 != a> struct b {};\nb<1> b1;"
Line 3227
  57 always 57
  = always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
  "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;" always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
Line 3230
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3230 always 3230
  exp always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3230 always 3230
  code always "template <long a, bool = 0 != a> struct b {};\nb<1> b1;"
Line 3233
  54 always 54
  = always "template <long a, bool = a < 0> struct b {};\nb<1> b1;"
  "template <long a, bool = a < 0> struct b {};\nb<1> b1;" always "template <long a, bool = a < 0> struct b {};\nb<1> b1;"
Line 3235
  60 always 60
  = always "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;"
  "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;" always "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;"
Line 3238
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3238 always 3238
  exp always "struct b<1,false> ; b<1,false> b1 ; struct b<1,false> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3238 always 3238
  code always "template <long a, bool = a < 0> struct b {};\nb<1> b1;"
Line 3241
  54 always 54
  = always "template <long a, bool = 0 < a> struct b {};\nb<1> b1;"
  "template <long a, bool = 0 < a> struct b {};\nb<1> b1;" always "template <long a, bool = 0 < a> struct b {};\nb<1> b1;"
Line 3243
  57 always 57
  = always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
  "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;" always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
Line 3246
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3246 always 3246
  exp always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3246 always 3246
  code always "template <long a, bool = 0 < a> struct b {};\nb<1> b1;"
Line 3249
  55 always 55
  = always "template <long a, bool = 0 <= a> struct b {};\nb<1> b1;"
  "template <long a, bool = 0 <= a> struct b {};\nb<1> b1;" always "template <long a, bool = 0 <= a> struct b {};\nb<1> b1;"
Line 3251
  57 always 57
  = always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
  "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;" always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
Line 3254
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3254 always 3254
  exp always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3254 always 3254
  code always "template <long a, bool = 0 <= a> struct b {};\nb<1> b1;"
Line 3257
  55 always 55
  = always "template <long a, bool = a >= 0> struct b {};\nb<1> b1;"
  "template <long a, bool = a >= 0> struct b {};\nb<1> b1;" always "template <long a, bool = a >= 0> struct b {};\nb<1> b1;"
Line 3259
  57 always 57
  = always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
  "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;" always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
Line 3262
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3262 always 3262
  exp always "struct b<1,true> ; b<1,true> b1 ; struct b<1,true> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3262 always 3262
  code always "template <long a, bool = a >= 0> struct b {};\nb<1> b1;"
Line 3267
  272 always 272
  = always "struct TrueFalse {\n  static constexpr bool v() { return true; }\n};\nint global;\ntemplate<typename T> int foo() {\n  __transaction_atomic noexcept(T::v()) { global += 1; }\n  return __transaction_atomic noexcept(T::v()) (global + 2);\n}\nint f1() {\n  return foo<TrueFalse>();\n}"
  "struct TrueFalse {\n  static constexpr bool v() { return true; }\n};\nint global;\ntemplate<typename T> int foo() {\n  __transaction_atomic noexcept(T::v()) { global += 1; }\n  return __transaction_atomic noexcept(T::v()) (global + 2);\n}\nint f1() {\n  return foo<TrueFalse>();\n}" always "struct TrueFalse {\n  static constexpr bool v() { return true; }\n};\nint global;\ntemplate<typename T> int foo() {\n  __transaction_atomic noexcept(T::v()) { global += 1; }\n  return __transaction_atomic noexcept(T::v()) (global + 2);\n}\nint f1() {\n  return foo<TrueFalse>();\n}"
Line 3278
  325 always 325
  = always "struct TrueFalse { static constexpr bool v ( ) { return true ; } } ; int global ; int foo<TrueFalse> ( ) ; int f1 ( ) { return foo<TrueFalse> ( ) ; } int foo<TrueFalse> ( ) { __transaction_atomic noexcept ( TrueFalse :: v ( ) ) { global += 1 ; } return __transaction_atomic noexcept ( TrueFalse :: v ( ) ) ( global + 2 ) ; }"
  "struct TrueFalse { static constexpr bool v ( ) { return true ; } } ; int global ; int foo<TrueFalse> ( ) ; int f1 ( ) { return foo<TrueFalse> ( ) ; } int foo<TrueFalse> ( ) { __transaction_atomic noexcept ( TrueFalse :: v ( ) ) { global += 1 ; } return __transaction_atomic noexcept ( TrueFalse :: v ( ) ) ( global + 2 ) ; }" always "struct TrueFalse { static constexpr bool v ( ) { return true ; } } ; int global ; int foo<TrueFalse> ( ) ; int f1 ( ) { return foo<TrueFalse> ( ) ; } int foo<TrueFalse> ( ) { __transaction_atomic noexcept ( TrueFalse :: v ( ) ) { global += 1 ; } return __transaction_atomic noexcept ( TrueFalse :: v ( ) ) ( global + 2 ) ; }"
Line 3290
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3290 always 3290
  exp always "struct TrueFalse { static constexpr bool v ( ) { return true ; } } ; int global ; int foo<TrueFalse> ( ) ; int f1 ( ) { return foo<TrueFalse> ( ) ; } int foo<TrueFalse> ( ) { __transaction_atomic noexcept ( TrueFalse :: v ( ) ) { global += 1 ; } return __transaction_atomic noexcept ( TrueFalse :: v ( ) ) ( global + 2 ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3290 always 3290
  code always "struct TrueFalse {\n  static constexpr bool v() { return true; }\n};\nint global;\ntemplate<typename T> int foo() {\n  __transaction_atomic noexcept(T::v()) { global += 1; }\n  return __transaction_atomic noexcept(T::v()) (global + 2);\n}\nint f1() {\n  return foo<TrueFalse>();\n}"
Line 3294
  284 always 284
  = always "template <typename a> struct bar {\n  template <typename b> static bar foo(const bar<b> &c) {\n    return bar();\n  }\n};\nbar<short> bs;\nbar<std::array<int,4>> ba;\nbar<short> b1 = bar<short>::foo<std::array<int,4>>(ba);\nbar<std::array<int,4>> b2 = bar<std::array<int,4>>::foo<short>(bs);"
  "template <typename a> struct bar {\n  template <typename b> static bar foo(const bar<b> &c) {\n    return bar();\n  }\n};\nbar<short> bs;\nbar<std::array<int,4>> ba;\nbar<short> b1 = bar<short>::foo<std::array<int,4>>(ba);\nbar<std::array<int,4>> b2 = bar<std::array<int,4>>::foo<short>(bs);" always "template <typename a> struct bar {\n  template <typename b> static bar foo(const bar<b> &c) {\n    return bar();\n  }\n};\nbar<short> bs;\nbar<std::array<int,4>> ba;\nbar<short> b1 = bar<short>::foo<std::array<int,4>>(ba);\nbar<std::array<int,4>> b2 = bar<std::array<int,4>>::foo<short>(bs);"
Line 3303
  714 always 714
  = always "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar < short > & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar < short > & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) { return bar<short> ( ) ; }"
  "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar < short > & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar < short > & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) { return bar<short> ( ) ; }" always "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar < short > & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar < short > & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) { return bar<short> ( ) ; }"
Line 3320
  688 always 688
  = always "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar<short> & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar<short> & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) { return bar<short> ( ) ; }"
  "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar<short> & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar<short> & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) { return bar<short> ( ) ; }" always "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar<short> & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar<short> & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) { return bar<short> ( ) ; }"
Line 3337
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3337 always 3337
  exp always "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar<short> & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar<short> & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar<std::array<int,4>> & c ) { return bar<short> ( ) ; }"
  act always "struct bar<short> ; struct bar<std::array<int,4>> ; bar<short> bs ; bar<std::array<int,4>> ba ; bar<short> b1 ; b1 = bar<short> :: foo<std::array<int,4>> ( ba ) ; bar<std::array<int,4>> b2 ; b2 = bar<std::array<int,4>> :: foo<short> ( bs ) ; struct bar<short> { static bar<short> foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) ; } ; struct bar<std::array<int,4>> { static bar<std::array<int,4>> foo<short> ( const bar < short > & c ) ; } ; bar<std::array<int,4>> bar<std::array<int,4>> :: foo<short> ( const bar < short > & c ) { return bar<std::array<int,4>> ( ) ; } bar<short> bar<short> :: foo<std::array<int,4>> ( const bar < std :: array < int , 4 > > & c ) { return bar<short> ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3337 always 3337
  code always "template <typename a> struct bar {\n  template <typename b> static bar foo(const bar<b> &c) {\n    return bar();\n  }\n};\nbar<short> bs;\nbar<std::array<int,4>> ba;\nbar<short> b1 = bar<short>::foo<std::array<int,4>>(ba);\nbar<std::array<int,4>> b2 = bar<std::array<int,4>>::foo<short>(bs);"
Line 3341
  100 always 100
  = always "template <int a> class e { };\ntemplate <int a> class b { e<(c > a ? 1 : 0)> d; };\nb<0> b0;\nb<1> b1;"
  "template <int a> class e { };\ntemplate <int a> class b { e<(c > a ? 1 : 0)> d; };\nb<0> b0;\nb<1> b1;" always "template <int a> class e { };\ntemplate <int a> class b { e<(c > a ? 1 : 0)> d; };\nb<0> b0;\nb<1> b1;"
Line 3345
  182 always 182
  = always "class e<(c>0)> ; class e<(c>1)> ; class b<0> ; class b<1> ; b<0> b0 ; b<1> b1 ; class b<0> { e<(c>0)> d ; } ; class b<1> { e<(c>1)> d ; } ; class e<(c>0)> { } ; class e<(c>1)> { } ;"
  "class e<(c>0)> ; class e<(c>1)> ; class b<0> ; class b<1> ; b<0> b0 ; b<1> b1 ; class b<0> { e<(c>0)> d ; } ; class b<1> { e<(c>1)> d ; } ; class e<(c>0)> { } ; class e<(c>1)> { } ;" always "class e<(c>0)> ; class e<(c>1)> ; class b<0> ; class b<1> ; b<0> b0 ; b<1> b1 ; class b<0> { e<(c>0)> d ; } ; class b<1> { e<(c>1)> d ; } ; class e<(c>0)> { } ; class e<(c>1)> { } ;"
Line 3351
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3351 always 3351
  exp always "class e<(c>0)> ; class e<(c>1)> ; class b<0> ; class b<1> ; b<0> b0 ; b<1> b1 ; class b<0> { e<(c>0)> d ; } ; class b<1> { e<(c>1)> d ; } ; class e<(c>0)> { } ; class e<(c>1)> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3351 always 3351
  code always "template <int a> class e { };\ntemplate <int a> class b { e<(c > a ? 1 : 0)> d; };\nb<0> b0;\nb<1> b1;"
Line 3355
  68 always 68
  = always "template <int> struct a { template <int b> void c(a<b>); };\na<2> d;"
  "template <int> struct a { template <int b> void c(a<b>); };\na<2> d;" always "template <int> struct a { template <int b> void c(a<b>); };\na<2> d;"
Line 3357
  81 always 81
  = always "struct a<2> ; a<2> d ; struct a<2> { template < int b > void c ( a < b > ) ; } ;"
  "struct a<2> ; a<2> d ; struct a<2> { template < int b > void c ( a < b > ) ; } ;" always "struct a<2> ; a<2> d ; struct a<2> { template < int b > void c ( a < b > ) ; } ;"
Line 3360
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3360 always 3360
  exp always "struct a<2> ; a<2> d ; struct a<2> { template < int b > void c ( a < b > ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3360 always 3360
  code always "template <int> struct a { template <int b> void c(a<b>); };\na<2> d;"
Line 3364
  316 always 316
  = always "namespace a {\ntemplate <typename> struct b;\ntemplate <int> struct c;\ntemplate <typename> struct d;\ntemplate <typename> struct f;\ntemplate <typename> struct g;\ntemplate <typename h>\nstruct i : c<b<f<typename h ::j>>::k && b<g<typename h ::j>>::k> {};\n}\nnamespace hana = a;\nusing e = int;\nvoid l(hana::d<hana::i<e>>);"
  "namespace a {\ntemplate <typename> struct b;\ntemplate <int> struct c;\ntemplate <typename> struct d;\ntemplate <typename> struct f;\ntemplate <typename> struct g;\ntemplate <typename h>\nstruct i : c<b<f<typename h ::j>>::k && b<g<typename h ::j>>::k> {};\n}\nnamespace hana = a;\nusing e = int;\nvoid l(hana::d<hana::i<e>>);" always "namespace a {\ntemplate <typename> struct b;\ntemplate <int> struct c;\ntemplate <typename> struct d;\ntemplate <typename> struct f;\ntemplate <typename> struct g;\ntemplate <typename h>\nstruct i : c<b<f<typename h ::j>>::k && b<g<typename h ::j>>::k> {};\n}\nnamespace hana = a;\nusing e = int;\nvoid l(hana::d<hana::i<e>>);"
Line 3376
  316 always 316
  = always "namespace a { template < typename > struct b ; template < int > struct c ; template < typename > struct d ; template < typename > struct f ; template < typename > struct g ; struct i<int> ; } void l ( a :: d < a :: i<int> > ) ; struct a :: i<int> : c < b < f < int :: j > > :: k && b < g < int :: j > > :: k > { } ;"
  "namespace a { template < typename > struct b ; template < int > struct c ; template < typename > struct d ; template < typename > struct f ; template < typename > struct g ; struct i<int> ; } void l ( a :: d < a :: i<int> > ) ; struct a :: i<int> : c < b < f < int :: j > > :: k && b < g < int :: j > > :: k > { } ;" always "namespace a { template < typename > struct b ; template < int > struct c ; template < typename > struct d ; template < typename > struct f ; template < typename > struct g ; struct i<int> ; } void l ( a :: d < a :: i<int> > ) ; struct a :: i<int> : c < b < f < int :: j > > :: k && b < g < int :: j > > :: k > { } ;"
Line 3386
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3386 always 3386
  exp always "namespace a { template < typename > struct b ; template < int > struct c ; template < typename > struct d ; template < typename > struct f ; template < typename > struct g ; struct i<int> ; } void l ( a :: d < a :: i<int> > ) ; struct a :: i<int> : c < b < f < int :: j > > :: k && b < g < int :: j > > :: k > { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3386 always 3386
  code always "namespace a {\ntemplate <typename> struct b;\ntemplate <int> struct c;\ntemplate <typename> struct d;\ntemplate <typename> struct f;\ntemplate <typename> struct g;\ntemplate <typename h>\nstruct i : c<b<f<typename h ::j>>::k && b<g<typename h ::j>>::k> {};\n}\nnamespace hana = a;\nusing e = int;\nvoid l(hana::d<hana::i<e>>);"
Line 3390
  304 always 304
  = always "template <bool> struct a;\ntemplate <bool b, class> using c = typename a<b>::d;\ntemplate <class, template <class> class, class> struct e;\ntemplate <class f, class g, class... h>\nusing i = typename e<f, g::template fn, h...>::d;\ntemplate <class... j> struct k : c<sizeof...(j), int>::template fn<j...> {};"
  "template <bool> struct a;\ntemplate <bool b, class> using c = typename a<b>::d;\ntemplate <class, template <class> class, class> struct e;\ntemplate <class f, class g, class... h>\nusing i = typename e<f, g::template fn, h...>::d;\ntemplate <class... j> struct k : c<sizeof...(j), int>::template fn<j...> {};" always "template <bool> struct a;\ntemplate <bool b, class> using c = typename a<b>::d;\ntemplate <class, template <class> class, class> struct e;\ntemplate <class f, class g, class... h>\nusing i = typename e<f, g::template fn, h...>::d;\ntemplate <class... j> struct k : c<sizeof...(j), int>::template fn<j...> {};"
Line 3396
  339 always 339
  = always "template < bool > struct a ; template < bool b , class > using c = typename a < b > :: d ; template < class , template < class > class , class > struct e ; template < class f , class g , class ... h > using i = typename e < f , g :: fn , h ... > :: d ; template < class ... j > struct k : c < sizeof... ( j ) , int > :: fn < j ... > { } ;"
  "template < bool > struct a ; template < bool b , class > using c = typename a < b > :: d ; template < class , template < class > class , class > struct e ; template < class f , class g , class ... h > using i = typename e < f , g :: fn , h ... > :: d ; template < class ... j > struct k : c < sizeof... ( j ) , int > :: fn < j ... > { } ;" always "template < bool > struct a ; template < bool b , class > using c = typename a < b > :: d ; template < class , template < class > class , class > struct e ; template < class f , class g , class ... h > using i = typename e < f , g :: fn , h ... > :: d ; template < class ... j > struct k : c < sizeof... ( j ) , int > :: fn < j ... > { } ;"
Line 3402
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3402 always 3402
  exp always "template < bool > struct a ; template < bool b , class > using c = typename a < b > :: d ; template < class , template < class > class , class > struct e ; template < class f , class g , class ... h > using i = typename e < f , g :: fn , h ... > :: d ; template < class ... j > struct k : c < sizeof... ( j ) , int > :: fn < j ... > { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3402 always 3402
  code always "template <bool> struct a;\ntemplate <bool b, class> using c = typename a<b>::d;\ntemplate <class, template <class> class, class> struct e;\ntemplate <class f, class g, class... h>\nusing i = typename e<f, g::template fn, h...>::d;\ntemplate <class... j> struct k : c<sizeof...(j), int>::template fn<j...> {};"
Line 3407
  167 always 167
  = always "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}"
  "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}" always "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}"
Line 3417
  145 always 145
  = always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }"
  "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }" always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }"
Line 3426
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3426 always 3426
  exp always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3426 always 3426
  code always "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}"
Line 3429
  144 always 144
  = always "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}"
  "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}" always "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}"
Line 3438
  145 always 145
  = always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }"
  "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }" always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }"
Line 3447
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3447 always 3447
  exp always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return 1 < b ; } } ; int main ( ) { return 0 ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3447 always 3447
  code always "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return 1 < b;\n  }\n};\nint main() {\n  return 0;\n}"
Line 3450
  167 always 167
  = always "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}"
  "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}" always "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}"
Line 3460
  145 always 145
  = always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }"
  "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }" always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }"
Line 3469
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3469 always 3469
  exp always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3469 always 3469
  code always "struct inferior {\n  using visitor = int;\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}"
Line 3472
  144 always 144
  = always "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}"
  "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}" always "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}"
Line 3481
  145 always 145
  = always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }"
  "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }" always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }"
Line 3490
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3490 always 3490
  exp always "struct inferior { template < typename T > bool operator() ( const T & a , const T & b ) const { return a < b ; } } ; int main ( ) { return 0 ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3490 always 3490
  code always "struct inferior {\n  template <typename T>\n  bool operator()(const T &a, const T &b) const {\n    return a < b;\n  }\n};\nint main() {\n  return 0;\n}"
Line 3496
  77 always 77
  = always "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n};"
  "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n};" always "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n};"
Line 3500
  83 always 83
  = always "template < typename T > struct Foo { template < typename > friend struct Foo ; } ;"
  "template < typename T > struct Foo { template < typename > friend struct Foo ; } ;" always "template < typename T > struct Foo { template < typename > friend struct Foo ; } ;"
Line 3504
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3504 always 3504
  exp always "template < typename T > struct Foo { template < typename > friend struct Foo ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3504 always 3504
  code always "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n};"
Line 3507
  92 always 92
  = always "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n} ;\nFoo<int> foo;"
  "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n} ;\nFoo<int> foo;" always "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n} ;\nFoo<int> foo;"
Line 3512
  97 always 97
  = always "struct Foo<int> ; Foo<int> foo ; struct Foo<int> { template < typename > friend struct Foo ; } ;"
  "struct Foo<int> ; Foo<int> foo ; struct Foo<int> { template < typename > friend struct Foo ; } ;" always "struct Foo<int> ; Foo<int> foo ; struct Foo<int> { template < typename > friend struct Foo ; } ;"
Line 3517
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3517 always 3517
  exp always "struct Foo<int> ; Foo<int> foo ; struct Foo<int> { template < typename > friend struct Foo ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3517 always 3517
  code always "template<typename T>\nstruct Foo {\n  template<typename> friend struct Foo;\n} ;\nFoo<int> foo;"
Line 3523
  123 always 123
  = always "template <typename> struct a { };\ntemplate <typename b> struct d {\n    d();\n    d(d<a<b>> e);\n};\nvoid foo() { d<char> c; }"
  "template <typename> struct a { };\ntemplate <typename b> struct d {\n    d();\n    d(d<a<b>> e);\n};\nvoid foo() { d<char> c; }" always "template <typename> struct a { };\ntemplate <typename b> struct d {\n    d();\n    d(d<a<b>> e);\n};\nvoid foo() { d<char> c; }"
Line 3529
  149 always 149
  = always "struct a<char> ; struct d<char> ; void foo ( ) { d<char> c ; } struct d<char> { d<char> ( ) ; d<char> ( d < a<char> > e ) ; } ; struct a<char> { } ;"
  "struct a<char> ; struct d<char> ; void foo ( ) { d<char> c ; } struct d<char> { d<char> ( ) ; d<char> ( d < a<char> > e ) ; } ; struct a<char> { } ;" always "struct a<char> ; struct d<char> ; void foo ( ) { d<char> c ; } struct d<char> { d<char> ( ) ; d<char> ( d < a<char> > e ) ; } ; struct a<char> { } ;"
Line 3537
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3537 always 3537
  exp always "struct a<char> ; struct d<char> ; void foo ( ) { d<char> c ; } struct d<char> { d<char> ( ) ; d<char> ( d < a<char> > e ) ; } ; struct a<char> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3537 always 3537
  code always "template <typename> struct a { };\ntemplate <typename b> struct d {\n    d();\n    d(d<a<b>> e);\n};\nvoid foo() { d<char> c; }"
Line 3540
  198 always 198
  = always "namespace a {\ntemplate <typename b> using c = typename b ::d;\ntemplate <typename> constexpr bool e() { return false; }\ntemplate <typename b> class f { f(f<c<b>>); };\nstatic_assert(!e<f<char>>());\n}"
  "namespace a {\ntemplate <typename b> using c = typename b ::d;\ntemplate <typename> constexpr bool e() { return false; }\ntemplate <typename b> class f { f(f<c<b>>); };\nstatic_assert(!e<f<char>>());\n}" always "namespace a {\ntemplate <typename b> using c = typename b ::d;\ntemplate <typename> constexpr bool e() { return false; }\ntemplate <typename b> class f { f(f<c<b>>); };\nstatic_assert(!e<f<char>>());\n}"
Line 3546
  212 always 212
  = always "namespace a { constexpr bool e<f<char>> ( ) ; class f<char> ; static_assert ( ! e<f<char>> ( ) ) ; } class a :: f<char> { f<char> ( a :: f < b :: d > ) ; } ; constexpr bool a :: e<f<char>> ( ) { return false ; }"
  "namespace a { constexpr bool e<f<char>> ( ) ; class f<char> ; static_assert ( ! e<f<char>> ( ) ) ; } class a :: f<char> { f<char> ( a :: f < b :: d > ) ; } ; constexpr bool a :: e<f<char>> ( ) { return false ; }" always "namespace a { constexpr bool e<f<char>> ( ) ; class f<char> ; static_assert ( ! e<f<char>> ( ) ) ; } class a :: f<char> { f<char> ( a :: f < b :: d > ) ; } ; constexpr bool a :: e<f<char>> ( ) { return false ; }"
Line 3552
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3552 always 3552
  exp always "namespace a { constexpr bool e<f<char>> ( ) ; class f<char> ; static_assert ( ! e<f<char>> ( ) ) ; } class a :: f<char> { f<char> ( a :: f < b :: d > ) ; } ; constexpr bool a :: e<f<char>> ( ) { return false ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3552 always 3552
  code always "namespace a {\ntemplate <typename b> using c = typename b ::d;\ntemplate <typename> constexpr bool e() { return false; }\ntemplate <typename b> class f { f(f<c<b>>); };\nstatic_assert(!e<f<char>>());\n}"
Line 3557
  77 always 77
  = always "struct a {\n  int c;\n  template <typename b> void d(b e) const { c < *e; }\n};"
  "struct a {\n  int c;\n  template <typename b> void d(b e) const { c < *e; }\n};" always "struct a {\n  int c;\n  template <typename b> void d(b e) const { c < *e; }\n};"
Line 3561
  82 always 82
  = always "struct a { int c ; template < typename b > void d ( b e ) const { c < * e ; } } ;"
  "struct a { int c ; template < typename b > void d ( b e ) const { c < * e ; } } ;" always "struct a { int c ; template < typename b > void d ( b e ) const { c < * e ; } } ;"
Line 3565
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3565 always 3565
  exp always "struct a { int c ; template < typename b > void d ( b e ) const { c < * e ; } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3565 always 3565
  code always "struct a {\n  int c;\n  template <typename b> void d(b e) const { c < *e; }\n};"
Line 3569
  191 always 191
  = always "template <typename...> struct a;\ntemplate <typename b, typename c, typename... d> struct a<b c::*, d...> {\n  using typename b ::e;\n  static_assert(e::f ? sizeof...(d) : sizeof...(d), \"\");\n};"
  "template <typename...> struct a;\ntemplate <typename b, typename c, typename... d> struct a<b c::*, d...> {\n  using typename b ::e;\n  static_assert(e::f ? sizeof...(d) : sizeof...(d), \"\");\n};" always "template <typename...> struct a;\ntemplate <typename b, typename c, typename... d> struct a<b c::*, d...> {\n  using typename b ::e;\n  static_assert(e::f ? sizeof...(d) : sizeof...(d), \"\");\n};"
Line 3574
  210 always 210
  = always "template < typename ... > struct a ; template < typename b , typename c , typename ... d > struct a < b c :: * , d ... > { using b :: e ; static_assert ( e :: f ? sizeof... ( d ) : sizeof... ( d ) , \"\" ) ; } ;"
  "template < typename ... > struct a ; template < typename b , typename c , typename ... d > struct a < b c :: * , d ... > { using b :: e ; static_assert ( e :: f ? sizeof... ( d ) : sizeof... ( d ) , \"\" ) ; } ;" always "template < typename ... > struct a ; template < typename b , typename c , typename ... d > struct a < b c :: * , d ... > { using b :: e ; static_assert ( e :: f ? sizeof... ( d ) : sizeof... ( d ) , \"\" ) ; } ;"
Line 3579
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3579 always 3579
  exp always "template < typename ... > struct a ; template < typename b , typename c , typename ... d > struct a < b c :: * , d ... > { using b :: e ; static_assert ( e :: f ? sizeof... ( d ) : sizeof... ( d ) , \"\" ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3579 always 3579
  code always "template <typename...> struct a;\ntemplate <typename b, typename c, typename... d> struct a<b c::*, d...> {\n  using typename b ::e;\n  static_assert(e::f ? sizeof...(d) : sizeof...(d), \"\");\n};"
Line 3583
  213 always 213
  = always "template<int N>\nusing A1 = struct B1 { static auto constexpr value = N; };\nA1<0> a1;\ntemplate<class T>\nusing A2 = struct B2 { void f(T){} };\nA2<bool> a2;\ntemplate<class T>\nusing A3 = enum B3 {b = 0;};\nA3<int> a3;"
  "template<int N>\nusing A1 = struct B1 { static auto constexpr value = N; };\nA1<0> a1;\ntemplate<class T>\nusing A2 = struct B2 { void f(T){} };\nA2<bool> a2;\ntemplate<class T>\nusing A3 = enum B3 {b = 0;};\nA3<int> a3;" always "template<int N>\nusing A1 = struct B1 { static auto constexpr value = N; };\nA1<0> a1;\ntemplate<class T>\nusing A2 = struct B2 { void f(T){} };\nA2<bool> a2;\ntemplate<class T>\nusing A3 = enum B3 {b = 0;};\nA3<int> a3;"
Line 3592
  246 always 246
  = always "template < int N > using A1 = struct B1 { static auto constexpr value = N ; } ; A1 < 0 > a1 ; template < class T > using A2 = struct B2 { void f ( T ) { } } ; A2 < bool > a2 ; template < class T > using A3 = enum B3 { b = 0 ; } ; A3 < int > a3 ;"
  "template < int N > using A1 = struct B1 { static auto constexpr value = N ; } ; A1 < 0 > a1 ; template < class T > using A2 = struct B2 { void f ( T ) { } } ; A2 < bool > a2 ; template < class T > using A3 = enum B3 { b = 0 ; } ; A3 < int > a3 ;" always "template < int N > using A1 = struct B1 { static auto constexpr value = N ; } ; A1 < 0 > a1 ; template < class T > using A2 = struct B2 { void f ( T ) { } } ; A2 < bool > a2 ; template < class T > using A3 = enum B3 { b = 0 ; } ; A3 < int > a3 ;"
Line 3601
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3601 always 3601
  exp always "template < int N > using A1 = struct B1 { static auto constexpr value = N ; } ; A1 < 0 > a1 ; template < class T > using A2 = struct B2 { void f ( T ) { } } ; A2 < bool > a2 ; template < class T > using A3 = enum B3 { b = 0 ; } ; A3 < int > a3 ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3601 always 3601
  code always "template<int N>\nusing A1 = struct B1 { static auto constexpr value = N; };\nA1<0> a1;\ntemplate<class T>\nusing A2 = struct B2 { void f(T){} };\nA2<bool> a2;\ntemplate<class T>\nusing A3 = enum B3 {b = 0;};\nA3<int> a3;"
Line 3605
  233 always 233
  = always "namespace a {\ntemplate <typename T, typename enable = void>\nstruct promote {\n  using type = T;\n};\ntemplate <typename T>\nstruct promote <T, typename std::enable_if< std::is_integral<T>::value && sizeof(T) < sizeof(int) >::type>{\n};\n}"
  "namespace a {\ntemplate <typename T, typename enable = void>\nstruct promote {\n  using type = T;\n};\ntemplate <typename T>\nstruct promote <T, typename std::enable_if< std::is_integral<T>::value && sizeof(T) < sizeof(int) >::type>{\n};\n}" always "namespace a {\ntemplate <typename T, typename enable = void>\nstruct promote {\n  using type = T;\n};\ntemplate <typename T>\nstruct promote <T, typename std::enable_if< std::is_integral<T>::value && sizeof(T) < sizeof(int) >::type>{\n};\n}"
Line 3614
  252 always 252
  = always "namespace a { template < typename T , typename enable = void > struct promote { using type = T ; } ; template < typename T > struct promote < T , std :: enable_if < std :: is_integral < T > :: value && sizeof ( T ) < sizeof ( int ) > :: type > { } ; }"
  "namespace a { template < typename T , typename enable = void > struct promote { using type = T ; } ; template < typename T > struct promote < T , std :: enable_if < std :: is_integral < T > :: value && sizeof ( T ) < sizeof ( int ) > :: type > { } ; }" always "namespace a { template < typename T , typename enable = void > struct promote { using type = T ; } ; template < typename T > struct promote < T , std :: enable_if < std :: is_integral < T > :: value && sizeof ( T ) < sizeof ( int ) > :: type > { } ; }"
Line 3623
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3623 always 3623
  exp always "namespace a { template < typename T , typename enable = void > struct promote { using type = T ; } ; template < typename T > struct promote < T , std :: enable_if < std :: is_integral < T > :: value && sizeof ( T ) < sizeof ( int ) > :: type > { } ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3623 always 3623
  code always "namespace a {\ntemplate <typename T, typename enable = void>\nstruct promote {\n  using type = T;\n};\ntemplate <typename T>\nstruct promote <T, typename std::enable_if< std::is_integral<T>::value && sizeof(T) < sizeof(int) >::type>{\n};\n}"
Line 3627
  77 always 77
  = always "template<template<typename, Ts = 0> class ...Cs, Cs<Ts> ...Vs> struct B { };"
  "template<template<typename, Ts = 0> class ...Cs, Cs<Ts> ...Vs> struct B { };" always "template<template<typename, Ts = 0> class ...Cs, Cs<Ts> ...Vs> struct B { };"
Line 3628
  91 always 91
  = always "template < template < typename , Ts = 0 > class ... Cs , Cs < Ts > ... Vs > struct B { } ;"
  "template < template < typename , Ts = 0 > class ... Cs , Cs < Ts > ... Vs > struct B { } ;" always "template < template < typename , Ts = 0 > class ... Cs , Cs < Ts > ... Vs > struct B { } ;"
Line 3629
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3629 always 3629
  exp always "template < template < typename , Ts = 0 > class ... Cs , Cs < Ts > ... Vs > struct B { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3629 always 3629
  code always "template<template<typename, Ts = 0> class ...Cs, Cs<Ts> ...Vs> struct B { };"
Line 3633
  176 always 176
  = always "template<class T> struct C { };\ntemplate<class T, template<class TT_T0, template<class TT_T1> class TT_TT> class TT, class U = TT<int, C> >\nstruct S {\n  void foo(TT<T, C>);\n};"
  "template<class T> struct C { };\ntemplate<class T, template<class TT_T0, template<class TT_T1> class TT_TT> class TT, class U = TT<int, C> >\nstruct S {\n  void foo(TT<T, C>);\n};" always "template<class T> struct C { };\ntemplate<class T, template<class TT_T0, template<class TT_T1> class TT_TT> class TT, class U = TT<int, C> >\nstruct S {\n  void foo(TT<T, C>);\n};"
Line 3638
  202 always 202
  = always "template < class T > struct C { } ; template < class T , template < class TT_T0 , template < class TT_T1 > class TT_TT > class TT , class U = TT < int , C > > struct S { void foo ( TT < T , C > ) ; } ;"
  "template < class T > struct C { } ; template < class T , template < class TT_T0 , template < class TT_T1 > class TT_TT > class TT , class U = TT < int , C > > struct S { void foo ( TT < T , C > ) ; } ;" always "template < class T > struct C { } ; template < class T , template < class TT_T0 , template < class TT_T1 > class TT_TT > class TT , class U = TT < int , C > > struct S { void foo ( TT < T , C > ) ; } ;"
Line 3643
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3643 always 3643
  exp always "template < class T > struct C { } ; template < class T , template < class TT_T0 , template < class TT_T1 > class TT_TT > class TT , class U = TT < int , C > > struct S { void foo ( TT < T , C > ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3643 always 3643
  code always "template<class T> struct C { };\ntemplate<class T, template<class TT_T0, template<class TT_T1> class TT_TT> class TT, class U = TT<int, C> >\nstruct S {\n  void foo(TT<T, C>);\n};"
Line 3647
  72 always 72
  = always "template <template <typename> class C, typename X, C<X>*> struct b { };"
  "template <template <typename> class C, typename X, C<X>*> struct b { };" always "template <template <typename> class C, typename X, C<X>*> struct b { };"
Line 3648
  83 always 83
  = always "template < template < typename > class C , typename X , C < X > * > struct b { } ;"
  "template < template < typename > class C , typename X , C < X > * > struct b { } ;" always "template < template < typename > class C , typename X , C < X > * > struct b { } ;"
Line 3649
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3649 always 3649
  exp always "template < template < typename > class C , typename X , C < X > * > struct b { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3649 always 3649
  code always "template <template <typename> class C, typename X, C<X>*> struct b { };"
Line 3653
  144 always 144
  = always "static_assert(var<S1<11, 100>> == var<S1<199, 23>> / 2\n  && var<S1<50, 120>> == var<S1<150, var<S1<10, 10>>>>\n  && var<S1<53, 23>> != 222, \"\");"
  "static_assert(var<S1<11, 100>> == var<S1<199, 23>> / 2\n  && var<S1<50, 120>> == var<S1<150, var<S1<10, 10>>>>\n  && var<S1<53, 23>> != 222, \"\");" always "static_assert(var<S1<11, 100>> == var<S1<199, 23>> / 2\n  && var<S1<50, 120>> == var<S1<150, var<S1<10, 10>>>>\n  && var<S1<53, 23>> != 222, \"\");"
Line 3656
  187 always 187
  = always "static_assert ( var < S1 < 11 , 100 > > == var < S1 < 199 , 23 > > / 2 && var < S1 < 50 , 120 > > == var < S1 < 150 , var < S1 < 10 , 10 > > > > && var < S1 < 53 , 23 > > != 222 , \"\" ) ;"
  "static_assert ( var < S1 < 11 , 100 > > == var < S1 < 199 , 23 > > / 2 && var < S1 < 50 , 120 > > == var < S1 < 150 , var < S1 < 10 , 10 > > > > && var < S1 < 53 , 23 > > != 222 , \"\" ) ;" always "static_assert ( var < S1 < 11 , 100 > > == var < S1 < 199 , 23 > > / 2 && var < S1 < 50 , 120 > > == var < S1 < 150 , var < S1 < 10 , 10 > > > > && var < S1 < 53 , 23 > > != 222 , \"\" ) ;"
Line 3659
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3659 always 3659
  exp always "static_assert ( var < S1 < 11 , 100 > > == var < S1 < 199 , 23 > > / 2 && var < S1 < 50 , 120 > > == var < S1 < 150 , var < S1 < 10 , 10 > > > > && var < S1 < 53 , 23 > > != 222 , \"\" ) ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3659 always 3659
  code always "static_assert(var<S1<11, 100>> == var<S1<199, 23>> / 2\n  && var<S1<50, 120>> == var<S1<150, var<S1<10, 10>>>>\n  && var<S1<53, 23>> != 222, \"\");"
Line 3663
  97 always 97
  = always "BEGIN_VERSIONED_NAMESPACE_DECL\ntemplate<typename T> class Fred { };\nEND_VERSIONED_NAMESPACE_DECL"
  "BEGIN_VERSIONED_NAMESPACE_DECL\ntemplate<typename T> class Fred { };\nEND_VERSIONED_NAMESPACE_DECL" always "BEGIN_VERSIONED_NAMESPACE_DECL\ntemplate<typename T> class Fred { };\nEND_VERSIONED_NAMESPACE_DECL"
Line 3666
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3666 always 3666
  code always "BEGIN_VERSIONED_NAMESPACE_DECL\ntemplate<typename T> class Fred { };\nEND_VERSIONED_NAMESPACE_DECL"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3666 always 3666
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3666 always 3666
  "There is an unknown macro here somewhere. Configuration is required. If BEGIN_VERSIONED_NAMESPACE_DECL is a macro then please configure it." always "There is an unknown macro here somewhere. Configuration is required. If BEGIN_VERSIONED_NAMESPACE_DECL is a macro then please configure it."
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3666 always 3666
  false always 0
Line 3670
  147 always 147
  = always "struct Test {\n  template <typename T>\n  T &operator[] (T) {}\n};\nvoid foo() {\n  Test test;\n  const string type = test.operator[]<string>(\"type\");\n}"
  "struct Test {\n  template <typename T>\n  T &operator[] (T) {}\n};\nvoid foo() {\n  Test test;\n  const string type = test.operator[]<string>(\"type\");\n}" always "struct Test {\n  template <typename T>\n  T &operator[] (T) {}\n};\nvoid foo() {\n  Test test;\n  const string type = test.operator[]<string>(\"type\");\n}"
Line 3678
  198 always 198
  = always "struct Test { string & operator[]<string> ( string ) ; } ; void foo ( ) { Test test ; const string type = test . operator[]<string> ( \"type\" ) ; } string & Test :: operator[]<string> ( string ) { }"
  "struct Test { string & operator[]<string> ( string ) ; } ; void foo ( ) { Test test ; const string type = test . operator[]<string> ( \"type\" ) ; } string & Test :: operator[]<string> ( string ) { }" always "struct Test { string & operator[]<string> ( string ) ; } ; void foo ( ) { Test test ; const string type = test . operator[]<string> ( \"type\" ) ; } string & Test :: operator[]<string> ( string ) { }"
Line 3685
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3685 always 3685
  exp always "struct Test { string & operator[]<string> ( string ) ; } ; void foo ( ) { Test test ; const string type = test . operator[]<string> ( \"type\" ) ; } string & Test :: operator[]<string> ( string ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3685 always 3685
  code always "struct Test {\n  template <typename T>\n  T &operator[] (T) {}\n};\nvoid foo() {\n  Test test;\n  const string type = test.operator[]<string>(\"type\");\n}"
Line 3690
  425 always 425
  = always "class SimulationComponentGroupGenerator {\n  std::list<int, std::allocator<int>> build() const;\n};\ntemplate <\n  class obj_type,\n  template<class> class allocator = std::allocator,\n  template<class, class> class data_container = std::list>\nclass GenericConfigurationHandler {\n  data_container<int, std::allocator<int>> m_target_configurations;\n};\nclass TargetConfigurationHandler : public GenericConfigurationHandler<int> { };"
  "class SimulationComponentGroupGenerator {\n  std::list<int, std::allocator<int>> build() const;\n};\ntemplate <\n  class obj_type,\n  template<class> class allocator = std::allocator,\n  template<class, class> class data_container = std::list>\nclass GenericConfigurationHandler {\n  data_container<int, std::allocator<int>> m_target_configurations;\n};\nclass TargetConfigurationHandler : public GenericConfigurationHandler<int> { };" always "class SimulationComponentGroupGenerator {\n  std::list<int, std::allocator<int>> build() const;\n};\ntemplate <\n  class obj_type,\n  template<class> class allocator = std::allocator,\n  template<class, class> class data_container = std::list>\nclass GenericConfigurationHandler {\n  data_container<int, std::allocator<int>> m_target_configurations;\n};\nclass TargetConfigurationHandler : public GenericConfigurationHandler<int> { };"
Line 3701
  433 always 433
  = always "class SimulationComponentGroupGenerator { std :: list < int , std :: allocator < int > > build ( ) const ; } ; class GenericConfigurationHandler<int,std::allocator,std::list> ; class TargetConfigurationHandler : public GenericConfigurationHandler<int,std::allocator,std::list> { } ; class GenericConfigurationHandler<int,std::allocator,std::list> { std :: list < int , std :: std :: allocator < int > > m_target_configurations ; } ;"
  "class SimulationComponentGroupGenerator { std :: list < int , std :: allocator < int > > build ( ) const ; } ; class GenericConfigurationHandler<int,std::allocator,std::list> ; class TargetConfigurationHandler : public GenericConfigurationHandler<int,std::allocator,std::list> { } ; class GenericConfigurationHandler<int,std::allocator,std::list> { std :: list < int , std :: std :: allocator < int > > m_target_configurations ; } ;" always "class SimulationComponentGroupGenerator { std :: list < int , std :: allocator < int > > build ( ) const ; } ; class GenericConfigurationHandler<int,std::allocator,std::list> ; class TargetConfigurationHandler : public GenericConfigurationHandler<int,std::allocator,std::list> { } ; class GenericConfigurationHandler<int,std::allocator,std::list> { std :: list < int , std :: std :: allocator < int > > m_target_configurations ; } ;"
Line 3709
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3709 always 3709
  exp always "class SimulationComponentGroupGenerator { std :: list < int , std :: allocator < int > > build ( ) const ; } ; class GenericConfigurationHandler<int,std::allocator,std::list> ; class TargetConfigurationHandler : public GenericConfigurationHandler<int,std::allocator,std::list> { } ; class GenericConfigurationHandler<int,std::allocator,std::list> { std :: list < int , std :: std :: allocator < int > > m_target_configurations ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3709 always 3709
  code always "class SimulationComponentGroupGenerator {\n  std::list<int, std::allocator<int>> build() const;\n};\ntemplate <\n  class obj_type,\n  template<class> class allocator = std::allocator,\n  template<class, class> class data_container = std::list>\nclass GenericConfigurationHandler {\n  data_container<int, std::allocator<int>> m_target_configurations;\n};\nclass TargetConfigurationHandler : public GenericConfigurationHandler<int> { };"
Line 3712
  135 always 135
  = always "std::list<std::allocator<int>> a;\ntemplate <class, template <class> class allocator = std::allocator> class b {};\nclass c : b<int> {};"
  "std::list<std::allocator<int>> a;\ntemplate <class, template <class> class allocator = std::allocator> class b {};\nclass c : b<int> {};" always "std::list<std::allocator<int>> a;\ntemplate <class, template <class> class allocator = std::allocator> class b {};\nclass c : b<int> {};"
Line 3715
  147 always 147
  = always "std :: list < std :: allocator < int > > a ; class b<int,std::allocator> ; class c : b<int,std::allocator> { } ; class b<int,std::allocator> { } ;"
  "std :: list < std :: allocator < int > > a ; class b<int,std::allocator> ; class c : b<int,std::allocator> { } ; class b<int,std::allocator> { } ;" always "std :: list < std :: allocator < int > > a ; class b<int,std::allocator> ; class c : b<int,std::allocator> { } ; class b<int,std::allocator> { } ;"
Line 3719
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3719 always 3719
  exp always "std :: list < std :: allocator < int > > a ; class b<int,std::allocator> ; class c : b<int,std::allocator> { } ; class b<int,std::allocator> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3719 always 3719
  code always "std::list<std::allocator<int>> a;\ntemplate <class, template <class> class allocator = std::allocator> class b {};\nclass c : b<int> {};"
Line 3722
  136 always 136
  = always "template <typename> class a {};\ntemplate class a<char>;\ntemplate <class, template <class> class a = a> class b {};\nclass c : b<int> {};"
  "template <typename> class a {};\ntemplate class a<char>;\ntemplate <class, template <class> class a = a> class b {};\nclass c : b<int> {};" always "template <typename> class a {};\ntemplate class a<char>;\ntemplate <class, template <class> class a = a> class b {};\nclass c : b<int> {};"
Line 3726
  99 always 99
  = always "class a<char> ; class b<int,a> ; class c : b<int,a> { } ; class b<int,a> { } ; class a<char> { } ;"
  "class a<char> ; class b<int,a> ; class c : b<int,a> { } ; class b<int,a> { } ; class a<char> { } ;" always "class a<char> ; class b<int,a> ; class c : b<int,a> { } ; class b<int,a> { } ; class a<char> { } ;"
Line 3731
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3731 always 3731
  exp always "class a<char> ; class b<int,a> ; class c : b<int,a> { } ; class b<int,a> { } ; class a<char> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3731 always 3731
  code always "template <typename> class a {};\ntemplate class a<char>;\ntemplate <class, template <class> class a = a> class b {};\nclass c : b<int> {};"
Line 3736
  175 always 175
  = always "class Foo {\n  template <unsigned int i>\n  bool bar() {\n    return true;\n  }\n};\ntemplate <>\nbool Foo::bar<9>() {\n  return true;\n}\nint global() {\n  int bar = 1;\n  return bar;\n}"
  "class Foo {\n  template <unsigned int i>\n  bool bar() {\n    return true;\n  }\n};\ntemplate <>\nbool Foo::bar<9>() {\n  return true;\n}\nint global() {\n  int bar = 1;\n  return bar;\n}" always "class Foo {\n  template <unsigned int i>\n  bool bar() {\n    return true;\n  }\n};\ntemplate <>\nbool Foo::bar<9>() {\n  return true;\n}\nint global() {\n  int bar = 1;\n  return bar;\n}"
Line 3750
  186 always 186
  = always "class Foo { bool bar<9> ( ) ; template < unsigned int i > bool bar ( ) { return true ; } } ; bool Foo :: bar<9> ( ) { return true ; } int global ( ) { int bar ; bar = 1 ; return bar ; }"
  "class Foo { bool bar<9> ( ) ; template < unsigned int i > bool bar ( ) { return true ; } } ; bool Foo :: bar<9> ( ) { return true ; } int global ( ) { int bar ; bar = 1 ; return bar ; }" always "class Foo { bool bar<9> ( ) ; template < unsigned int i > bool bar ( ) { return true ; } } ; bool Foo :: bar<9> ( ) { return true ; } int global ( ) { int bar ; bar = 1 ; return bar ; }"
Line 3764
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3764 always 3764
  exp always "class Foo { bool bar<9> ( ) ; template < unsigned int i > bool bar ( ) { return true ; } } ; bool Foo :: bar<9> ( ) { return true ; } int global ( ) { int bar ; bar = 1 ; return bar ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3764 always 3764
  code always "class Foo {\n  template <unsigned int i>\n  bool bar() {\n    return true;\n  }\n};\ntemplate <>\nbool Foo::bar<9>() {\n  return true;\n}\nint global() {\n  int bar = 1;\n  return bar;\n}"
Line 3768
  52 always 52
  = always "template <class = b<decltype(a<h>())...>> void i();"
  "template <class = b<decltype(a<h>())...>> void i();" always "template <class = b<decltype(a<h>())...>> void i();"
Line 3769
  69 always 69
  = always "template < class = b < decltype ( a < h > ( ) ) ... > > void i ( ) ;"
  "template < class = b < decltype ( a < h > ( ) ) ... > > void i ( ) ;" always "template < class = b < decltype ( a < h > ( ) ) ... > > void i ( ) ;"
Line 3770
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3770 always 3770
  exp always "template < class = b < decltype ( a < h > ( ) ) ... > > void i ( ) ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3770 always 3770
  code always "template <class = b<decltype(a<h>())...>> void i();"
Line 3774
  84 always 84
  = always "template <typename S, enable_if_t<(is_compile_string<S>::value), int>> void i(S s);"
  "template <typename S, enable_if_t<(is_compile_string<S>::value), int>> void i(S s);" always "template <typename S, enable_if_t<(is_compile_string<S>::value), int>> void i(S s);"
Line 3775
  102 always 102
  = always "template < typename S , enable_if_t < ( is_compile_string < S > :: value ) , int > > void i ( S s ) ;"
  "template < typename S , enable_if_t < ( is_compile_string < S > :: value ) , int > > void i ( S s ) ;" always "template < typename S , enable_if_t < ( is_compile_string < S > :: value ) , int > > void i ( S s ) ;"
Line 3776
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3776 always 3776
  exp always "template < typename S , enable_if_t < ( is_compile_string < S > :: value ) , int > > void i ( S s ) ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3776 always 3776
  code always "template <typename S, enable_if_t<(is_compile_string<S>::value), int>> void i(S s);"
Line 3780
  95 always 95
  = always "template <int> int a = 0;\nstruct b {\n  void operator[](int);\n};\nvoid c() {\n  b d;\n  d[a<0>];\n}"
  "template <int> int a = 0;\nstruct b {\n  void operator[](int);\n};\nvoid c() {\n  b d;\n  d[a<0>];\n}" always "template <int> int a = 0;\nstruct b {\n  void operator[](int);\n};\nvoid c() {\n  b d;\n  d[a<0>];\n}"
Line 3788
  97 always 97
  = always "int a<0> ; a<0> = 0 ; struct b { void operator[] ( int ) ; } ; void c ( ) { b d ; d [ a<0> ] ; }"
  "int a<0> ; a<0> = 0 ; struct b { void operator[] ( int ) ; } ; void c ( ) { b d ; d [ a<0> ] ; }" always "int a<0> ; a<0> = 0 ; struct b { void operator[] ( int ) ; } ; void c ( ) { b d ; d [ a<0> ] ; }"
Line 3797
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3797 always 3797
  exp always "int a<0> ; a<0> = 0 ; struct b { void operator[] ( int ) ; } ; void c ( ) { b d ; d [ a<0> ] ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3797 always 3797
  code always "template <int> int a = 0;\nstruct b {\n  void operator[](int);\n};\nvoid c() {\n  b d;\n  d[a<0>];\n}"
Line 3801
  442 always 442
  = always "template <int a> struct c { static constexpr int d = a; };\ntemplate <bool b> using e = c<b>;\nusing f = e<false>;\ntemplate <typename> struct g : f {};\ntemplate <bool, class, class> using h = e<g<long>::d>;\ntemplate <typename> using i = e<g<double>::d>;\ntemplate <typename j> using k = e<i<j>::d>;\ntemplate <typename j> using l = h<k<j>::d, e<1 < (j)0>, f>;\ntemplate <typename> void m(int, int, int) { l<int> d; }\nvoid n() { m<int>(0, 4, 5); }"
  "template <int a> struct c { static constexpr int d = a; };\ntemplate <bool b> using e = c<b>;\nusing f = e<false>;\ntemplate <typename> struct g : f {};\ntemplate <bool, class, class> using h = e<g<long>::d>;\ntemplate <typename> using i = e<g<double>::d>;\ntemplate <typename j> using k = e<i<j>::d>;\ntemplate <typename j> using l = h<k<j>::d, e<1 < (j)0>, f>;\ntemplate <typename> void m(int, int, int) { l<int> d; }\nvoid n() { m<int>(0, 4, 5); }" always "template <int a> struct c { static constexpr int d = a; };\ntemplate <bool b> using e = c<b>;\nusing f = e<false>;\ntemplate <typename> struct g : f {};\ntemplate <bool, class, class> using h = e<g<long>::d>;\ntemplate <typename> using i = e<g<double>::d>;\ntemplate <typename j> using k = e<i<j>::d>;\ntemplate <typename j> using l = h<k<j>::d, e<1 < (j)0>, f>;\ntemplate <typename> void m(int, int, int) { l<int> d; }\nvoid n() { m<int>(0, 4, 5); }"
Line 3811
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3811 always 3811
  code always "template <int a> struct c { static constexpr int d = a; };\ntemplate <bool b> using e = c<b>;\nusing f = e<false>;\ntemplate <typename> struct g : f {};\ntemplate <bool, class, class> using h = e<g<long>::d>;\ntemplate <typename> using i = e<g<double>::d>;\ntemplate <typename j> using k = e<i<j>::d>;\ntemplate <typename j> using l = h<k<j>::d, e<1 < (j)0>, f>;\ntemplate <typename> void m(int, int, int) { l<int> d; }\nvoid n() { m<int>(0, 4, 5); }"
Line 3815
  462 always 462
  = always "template <int a, bool c = a == int()> struct b1 { bool d = c; };\ntemplate <int a, bool c = a != int()> struct b2 { bool d = c; };\ntemplate <int a, bool c = a < int()> struct b3 { bool d = c; };\ntemplate <int a, bool c = a <= int()> struct b4 { bool d = c; };\ntemplate <int a, bool c = (a > int())> struct b5 { bool d = c; };\ntemplate <int a, bool c = a >= int()> struct b6 { bool d = c; };\nb1<0> var1;\nb2<0> var2;\nb3<0> var3;\nb4<0> var4;\nb5<0> var5;\nb6<0> var6;"
  "template <int a, bool c = a == int()> struct b1 { bool d = c; };\ntemplate <int a, bool c = a != int()> struct b2 { bool d = c; };\ntemplate <int a, bool c = a < int()> struct b3 { bool d = c; };\ntemplate <int a, bool c = a <= int()> struct b4 { bool d = c; };\ntemplate <int a, bool c = (a > int())> struct b5 { bool d = c; };\ntemplate <int a, bool c = a >= int()> struct b6 { bool d = c; };\nb1<0> var1;\nb2<0> var2;\nb3<0> var3;\nb4<0> var4;\nb5<0> var5;\nb6<0> var6;" always "template <int a, bool c = a == int()> struct b1 { bool d = c; };\ntemplate <int a, bool c = a != int()> struct b2 { bool d = c; };\ntemplate <int a, bool c = a < int()> struct b3 { bool d = c; };\ntemplate <int a, bool c = a <= int()> struct b4 { bool d = c; };\ntemplate <int a, bool c = (a > int())> struct b5 { bool d = c; };\ntemplate <int a, bool c = a >= int()> struct b6 { bool d = c; };\nb1<0> var1;\nb2<0> var2;\nb3<0> var3;\nb4<0> var4;\nb5<0> var5;\nb6<0> var6;"
Line 3827
  504 always 504
  = always "struct b1<0,true> ; struct b2<0,false> ; struct b3<0,false> ; struct b4<0,true> ; struct b5<0,false> ; struct b6<0,true> ; b1<0,true> var1 ; b2<0,false> var2 ; b3<0,false> var3 ; b4<0,true> var4 ; b5<0,false> var5 ; b6<0,true> var6 ; struct b6<0,true> { bool d ; d = true ; } ; struct b5<0,false> { bool d ; d = false ; } ; struct b4<0,true> { bool d ; d = true ; } ; struct b3<0,false> { bool d ; d = false ; } ; struct b2<0,false> { bool d ; d = false ; } ; struct b1<0,true> { bool d ; d = true ; } ;"
  "struct b1<0,true> ; struct b2<0,false> ; struct b3<0,false> ; struct b4<0,true> ; struct b5<0,false> ; struct b6<0,true> ; b1<0,true> var1 ; b2<0,false> var2 ; b3<0,false> var3 ; b4<0,true> var4 ; b5<0,false> var5 ; b6<0,true> var6 ; struct b6<0,true> { bool d ; d = true ; } ; struct b5<0,false> { bool d ; d = false ; } ; struct b4<0,true> { bool d ; d = true ; } ; struct b3<0,false> { bool d ; d = false ; } ; struct b2<0,false> { bool d ; d = false ; } ; struct b1<0,true> { bool d ; d = true ; } ;" always "struct b1<0,true> ; struct b2<0,false> ; struct b3<0,false> ; struct b4<0,true> ; struct b5<0,false> ; struct b6<0,true> ; b1<0,true> var1 ; b2<0,false> var2 ; b3<0,false> var3 ; b4<0,true> var4 ; b5<0,false> var5 ; b6<0,true> var6 ; struct b6<0,true> { bool d ; d = true ; } ; struct b5<0,false> { bool d ; d = false ; } ; struct b4<0,true> { bool d ; d = true ; } ; struct b3<0,false> { bool d ; d = false ; } ; struct b2<0,false> { bool d ; d = false ; } ; struct b1<0,true> { bool d ; d = true ; } ;"
Line 3845
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3845 always 3845
  exp always "struct b1<0,true> ; struct b2<0,false> ; struct b3<0,false> ; struct b4<0,true> ; struct b5<0,false> ; struct b6<0,true> ; b1<0,true> var1 ; b2<0,false> var2 ; b3<0,false> var3 ; b4<0,true> var4 ; b5<0,false> var5 ; b6<0,true> var6 ; struct b6<0,true> { bool d ; d = true ; } ; struct b5<0,false> { bool d ; d = false ; } ; struct b4<0,true> { bool d ; d = true ; } ; struct b3<0,false> { bool d ; d = false ; } ; struct b2<0,false> { bool d ; d = false ; } ; struct b1<0,true> { bool d ; d = true ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  3845 always 3845
  code always "template <int a, bool c = a == int()> struct b1 { bool d = c; };\ntemplate <int a, bool c = a != int()> struct b2 { bool d = c; };\ntemplate <int a, bool c = a < int()> struct b3 { bool d = c; };\ntemplate <int a, bool c = a <= int()> struct b4 { bool d = c; };\ntemplate <int a, bool c = (a > int())> struct b5 { bool d = c; };\ntemplate <int a, bool c = a >= int()> struct b6 { bool d = c; };\nb1<0> var1;\nb2<0> var2;\nb3<0> var3;\nb4<0> var4;\nb5<0> var5;\nb6<0> var6;"
Line 3849
  5055 always 5055
  = always "template <typename> class a0{};\ntemplate <typename> class a1{};\ntemplate <typename> class a2{};\ntemplate <typename> class a3{};\ntemplate <typename> class a4{};\ntemplate <typename> class a5{};\ntemplate <typename> class a6{};\ntemplate <typename> class a7{};\ntemplate <typename> class a8{};\ntemplate <typename> class a9{};\ntemplate <typename> class a10{};\ntemplate <typename> class a11{};\ntemplate <typename> class a12{};\ntemplate <typename> class a13{};\ntemplate <typename> class a14{};\ntemplate <typename> class a15{};\ntemplate <typename> class a16{};\ntemplate <typename> class a17{};\ntemplate <typename> class a18{};\ntemplate <typename> class a19{};\ntemplate <typename> class a20{};\ntemplate <typename> class a21{};\ntemplate <typename> class a22{};\ntemplate <typename> class a23{};\ntemplate <typename> class a24{};\ntemplate <typename> class a25{};\ntemplate <typename> class a26{};\ntemplate <typename> class a27{};\ntemplate <typename> class a28{};\ntemplate <typename> class a29{};\ntemplate <typename> class a30{};\ntemplate <typename> class a31{};\ntemplate <typename> class a32{};\ntemplate <typename> class a33{};\ntemplate <typename> class a34{};\ntemplate <typename> class a35{};\ntemplate <typename> class a36{};\ntemplate <typename> class a37{};\ntemplate <typename> class a38{};\ntemplate <typename> class a39{};\ntemplate <typename> class a40{};\ntemplate <typename> class a41{};\ntemplate <typename> class a42{};\ntemplate <typename> class a43{};\ntemplate <typename> class a44{};\ntemplate <typename> class a45{};\ntemplate <typename> class a46{};\ntemplate <typename> class a47{};\ntemplate <typename> class a48{};\ntemplate <typename> class a49{};\ntemplate <typename> class a50{};\ntemplate <typename> class a51{};\ntemplate <typename> class a52{};\ntemplate <typename> class a53{};\ntemplate <typename> class a54{};\ntemplate <typename> class a55{};\ntemplate <typename> class a56{};\ntemplate <typename> class a57{};\ntemplate <typename> class a58{};\ntemplate <typename> class a59{};\ntemplate <typename> class a60{};\ntemplate <typename> class a61{};\ntemplate <typename> class a62{};\ntemplate <typename> class a63{};\ntemplate <typename> class a64{};\ntemplate <typename> class a65{};\ntemplate <typename> class a66{};\ntemplate <typename> class a67{};\ntemplate <typename> class a68{};\ntemplate <typename> class a69{};\ntemplate <typename> class a70{};\ntemplate <typename> class a71{};\ntemplate <typename> class a72{};\ntemplate <typename> class a73{};\ntemplate <typename> class a74{};\ntemplate <typename> class a75{};\ntemplate <typename> class a76{};\ntemplate <typename> class a77{};\ntemplate <typename> class a78{};\ntemplate <typename> class a79{};\ntemplate <typename> class a80{};\ntemplate <typename> class a81{};\ntemplate <typename> class a82{};\ntemplate <typename> class a83{};\ntemplate <typename> class a84{};\ntemplate <typename> class a85{};\ntemplate <typename> class a86{};\ntemplate <typename> class a87{};\ntemplate <typename> class a88{};\ntemplate <typename> class a89{};\ntemplate <typename> class a90{};\ntemplate <typename> class a91{};\ntemplate <typename> class a92{};\ntemplate <typename> class a93{};\ntemplate <typename> class a94{};\ntemplate <typename> class a95{};\ntemplate <typename> class a96{};\ntemplate <typename> class a97{};\ntemplate <typename> class a98{};\ntemplate <typename> class a99{};\ntemplate <typename> class a100{};\ntemplate <typename> class b {};\nb<a0<int>> d0;\nb<a1<int>> d1;\nb<a2<int>> d2;\nb<a3<int>> d3;\nb<a4<int>> d4;\nb<a5<int>> d5;\nb<a6<int>> d6;\nb<a7<int>> d7;\nb<a8<int>> d8;\nb<a9<int>> d9;\nb<a10<int>> d10;\nb<a11<int>> d11;\nb<a12<int>> d12;\nb<a13<int>> d13;\nb<a14<int>> d14;\nb<a15<int>> d15;\nb<a16<int>> d16;\nb<a17<int>> d17;\nb<a18<int>> d18;\nb<a19<int>> d19;\nb<a20<int>> d20;\nb<a21<int>> d21;\nb<a22<int>> d22;\nb<a23<int>> d23;\nb<a24<int>> d24;\nb<a25<int>> d25;\nb<a26<int>> d26;\nb<a27<int>> d27;\nb<a28<int>> d28;\nb<a29<int>> d29;\nb<a30<int>> d30;\nb<a31<int>> d31;\nb<a32<int>> d32;\nb<a33<int>> d33;\nb<a34<int>> d34;\nb<a35<int>> d35;\nb<a36<int>> d36;\nb<a37<int>> d37;\nb<a38<int>> d38;\nb<a39<int>> d39;\nb<a40<int>> d40;\nb<a41<int>> d41;\nb<a42<int>> d42;\nb<a43<int>> d43;\nb<a44<int>> d44;\nb<a45<int>> d45;\nb<a46<int>> d46;\nb<a47<int>> d47;\nb<a48<int>> d48;\nb<a49<int>> d49;\nb<a50<int>> d50;\nb<a51<int>> d51;\nb<a52<int>> d52;\nb<a53<int>> d53;\nb<a54<int>> d54;\nb<a55<int>> d55;\nb<a56<int>> d56;\nb<a57<int>> d57;\nb<a58<int>> d58;\nb<a59<int>> d59;\nb<a60<int>> d60;\nb<a61<int>> d61;\nb<a62<int>> d62;\nb<a63<int>> d63;\nb<a64<int>> d64;\nb<a65<int>> d65;\nb<a66<int>> d66;\nb<a67<int>> d67;\nb<a68<int>> d68;\nb<a69<int>> d69;\nb<a70<int>> d70;\nb<a71<int>> d71;\nb<a72<int>> d72;\nb<a73<int>> d73;\nb<a74<int>> d74;\nb<a75<int>> d75;\nb<a76<int>> d76;\nb<a77<int>> d77;\nb<a78<int>> d78;\nb<a79<int>> d79;\nb<a80<int>> d80;\nb<a81<int>> d81;\nb<a82<int>> d82;\nb<a83<int>> d83;\nb<a84<int>> d84;\nb<a85<int>> d85;\nb<a86<int>> d86;\nb<a87<int>> d87;\nb<a88<int>> d88;\nb<a89<int>> d89;\nb<a90<int>> d90;\nb<a91<int>> d91;\nb<a92<int>> d92;\nb<a93<int>> d93;\nb<a94<int>> d94;\nb<a95<int>> d95;\nb<a96<int>> d96;\nb<a97<int>> d97;\nb<a98<int>> d98;\nb<a99<int>> d99;\nb<a100<int>> d100;"
  "template <typename> class a0{};\ntemplate <typename> class a1{};\ntemplate <typename> class a2{};\ntemplate <typename> class a3{};\ntemplate <typename> class a4{};\ntemplate <typename> class a5{};\ntemplate <typename> class a6{};\ntemplate <typename> class a7{};\ntemplate <typename> class a8{};\ntemplate <typename> class a9{};\ntemplate <typename> class a10{};\ntemplate <typename> class a11{};\ntemplate <typename> class a12{};\ntemplate <typename> class a13{};\ntemplate <typename> class a14{};\ntemplate <typename> class a15{};\ntemplate <typename> class a16{};\ntemplate <typename> class a17{};\ntemplate <typename> class a18{};\ntemplate <typename> class a19{};\ntemplate <typename> class a20{};\ntemplate <typename> class a21{};\ntemplate <typename> class a22{};\ntemplate <typename> class a23{};\ntemplate <typename> class a24{};\ntemplate <typename> class a25{};\ntemplate <typename> class a26{};\ntemplate <typename> class a27{};\ntemplate <typename> class a28{};\ntemplate <typename> class a29{};\ntemplate <typename> class a30{};\ntemplate <typename> class a31{};\ntemplate <typename> class a32{};\ntemplate <typename> class a33{};\ntemplate <typename> class a34{};\ntemplate <typename> class a35{};\ntemplate <typename> class a36{};\ntemplate <typename> class a37{};\ntemplate <typename> class a38{};\ntemplate <typename> class a39{};\ntemplate <typename> class a40{};\ntemplate <typename> class a41{};\ntemplate <typename> class a42{};\ntemplate <typename> class a43{};\ntemplate <typename> class a44{};\ntemplate <typename> class a45{};\ntemplate <typename> class a46{};\ntemplate <typename> class a47{};\ntemplate <typename> class a48{};\ntemplate <typename> class a49{};\ntemplate <typename> class a50{};\ntemplate <typename> class a51{};\ntemplate <typename> class a52{};\ntemplate <typename> class a53{};\ntemplate <typename> class a54{};\ntemplate <typename> class a55{};\ntemplate <typename> class a56{};\ntemplate <typename> class a57{};\ntemplate <typename> class a58{};\ntemplate <typename> class a59{};\ntemplate <typename> class a60{};\ntemplate <typename> class a61{};\ntemplate <typename> class a62{};\ntemplate <typename> class a63{};\ntemplate <typename> class a64{};\ntemplate <typename> class a65{};\ntemplate <typename> class a66{};\ntemplate <typename> class a67{};\ntemplate <typename> class a68{};\ntemplate <typename> class a69{};\ntemplate <typename> class a70{};\ntemplate <typename> class a71{};\ntemplate <typename> class a72{};\ntemplate <typename> class a73{};\ntemplate <typename> class a74{};\ntemplate <typename> class a75{};\ntemplate <typename> class a76{};\ntemplate <typename> class a77{};\ntemplate <typename> class a78{};\ntemplate <typename> class a79{};\ntemplate <typename> class a80{};\ntemplate <typename> class a81{};\ntemplate <typename> class a82{};\ntemplate <typename> class a83{};\ntemplate <typename> class a84{};\ntemplate <typename> class a85{};\ntemplate <typename> class a86{};\ntemplate <typename> class a87{};\ntemplate <typename> class a88{};\ntemplate <typename> class a89{};\ntemplate <typename> class a90{};\ntemplate <typename> class a91{};\ntemplate <typename> class a92{};\ntemplate <typename> class a93{};\ntemplate <typename> class a94{};\ntemplate <typename> class a95{};\ntemplate <typename> class a96{};\ntemplate <typename> class a97{};\ntemplate <typename> class a98{};\ntemplate <typename> class a99{};\ntemplate <typename> class a100{};\ntemplate <typename> class b {};\nb<a0<int>> d0;\nb<a1<int>> d1;\nb<a2<int>> d2;\nb<a3<int>> d3;\nb<a4<int>> d4;\nb<a5<int>> d5;\nb<a6<int>> d6;\nb<a7<int>> d7;\nb<a8<int>> d8;\nb<a9<int>> d9;\nb<a10<int>> d10;\nb<a11<int>> d11;\nb<a12<int>> d12;\nb<a13<int>> d13;\nb<a14<int>> d14;\nb<a15<int>> d15;\nb<a16<int>> d16;\nb<a17<int>> d17;\nb<a18<int>> d18;\nb<a19<int>> d19;\nb<a20<int>> d20;\nb<a21<int>> d21;\nb<a22<int>> d22;\nb<a23<int>> d23;\nb<a24<int>> d24;\nb<a25<int>> d25;\nb<a26<int>> d26;\nb<a27<int>> d27;\nb<a28<int>> d28;\nb<a29<int>> d29;\nb<a30<int>> d30;\nb<a31<int>> d31;\nb<a32<int>> d32;\nb<a33<int>> d33;\nb<a34<int>> d34;\nb<a35<int>> d35;\nb<a36<int>> d36;\nb<a37<int>> d37;\nb<a38<int>> d38;\nb<a39<int>> d39;\nb<a40<int>> d40;\nb<a41<int>> d41;\nb<a42<int>> d42;\nb<a43<int>> d43;\nb<a44<int>> d44;\nb<a45<int>> d45;\nb<a46<int>> d46;\nb<a47<int>> d47;\nb<a48<int>> d48;\nb<a49<int>> d49;\nb<a50<int>> d50;\nb<a51<int>> d51;\nb<a52<int>> d52;\nb<a53<int>> d53;\nb<a54<int>> d54;\nb<a55<int>> d55;\nb<a56<int>> d56;\nb<a57<int>> d57;\nb<a58<int>> d58;\nb<a59<int>> d59;\nb<a60<int>> d60;\nb<a61<int>> d61;\nb<a62<int>> d62;\nb<a63<int>> d63;\nb<a64<int>> d64;\nb<a65<int>> d65;\nb<a66<int>> d66;\nb<a67<int>> d67;\nb<a68<int>> d68;\nb<a69<int>> d69;\nb<a70<int>> d70;\nb<a71<int>> d71;\nb<a72<int>> d72;\nb<a73<int>> d73;\nb<a74<int>> d74;\nb<a75<int>> d75;\nb<a76<int>> d76;\nb<a77<int>> d77;\nb<a78<int>> d78;\nb<a79<int>> d79;\nb<a80<int>> d80;\nb<a81<int>> d81;\nb<a82<int>> d82;\nb<a83<int>> d83;\nb<a84<int>> d84;\nb<a85<int>> d85;\nb<a86<int>> d86;\nb<a87<int>> d87;\nb<a88<int>> d88;\nb<a89<int>> d89;\nb<a90<int>> d90;\nb<a91<int>> d91;\nb<a92<int>> d92;\nb<a93<int>> d93;\nb<a94<int>> d94;\nb<a95<int>> d95;\nb<a96<int>> d96;\nb<a97<int>> d97;\nb<a98<int>> d98;\nb<a99<int>> d99;\nb<a100<int>> d100;" always "template <typename> class a0{};\ntemplate <typename> class a1{};\ntemplate <typename> class a2{};\ntemplate <typename> class a3{};\ntemplate <typename> class a4{};\ntemplate <typename> class a5{};\ntemplate <typename> class a6{};\ntemplate <typename> class a7{};\ntemplate <typename> class a8{};\ntemplate <typename> class a9{};\ntemplate <typename> class a10{};\ntemplate <typename> class a11{};\ntemplate <typename> class a12{};\ntemplate <typename> class a13{};\ntemplate <typename> class a14{};\ntemplate <typename> class a15{};\ntemplate <typename> class a16{};\ntemplate <typename> class a17{};\ntemplate <typename> class a18{};\ntemplate <typename> class a19{};\ntemplate <typename> class a20{};\ntemplate <typename> class a21{};\ntemplate <typename> class a22{};\ntemplate <typename> class a23{};\ntemplate <typename> class a24{};\ntemplate <typename> class a25{};\ntemplate <typename> class a26{};\ntemplate <typename> class a27{};\ntemplate <typename> class a28{};\ntemplate <typename> class a29{};\ntemplate <typename> class a30{};\ntemplate <typename> class a31{};\ntemplate <typename> class a32{};\ntemplate <typename> class a33{};\ntemplate <typename> class a34{};\ntemplate <typename> class a35{};\ntemplate <typename> class a36{};\ntemplate <typename> class a37{};\ntemplate <typename> class a38{};\ntemplate <typename> class a39{};\ntemplate <typename> class a40{};\ntemplate <typename> class a41{};\ntemplate <typename> class a42{};\ntemplate <typename> class a43{};\ntemplate <typename> class a44{};\ntemplate <typename> class a45{};\ntemplate <typename> class a46{};\ntemplate <typename> class a47{};\ntemplate <typename> class a48{};\ntemplate <typename> class a49{};\ntemplate <typename> class a50{};\ntemplate <typename> class a51{};\ntemplate <typename> class a52{};\ntemplate <typename> class a53{};\ntemplate <typename> class a54{};\ntemplate <typename> class a55{};\ntemplate <typename> class a56{};\ntemplate <typename> class a57{};\ntemplate <typename> class a58{};\ntemplate <typename> class a59{};\ntemplate <typename> class a60{};\ntemplate <typename> class a61{};\ntemplate <typename> class a62{};\ntemplate <typename> class a63{};\ntemplate <typename> class a64{};\ntemplate <typename> class a65{};\ntemplate <typename> class a66{};\ntemplate <typename> class a67{};\ntemplate <typename> class a68{};\ntemplate <typename> class a69{};\ntemplate <typename> class a70{};\ntemplate <typename> class a71{};\ntemplate <typename> class a72{};\ntemplate <typename> class a73{};\ntemplate <typename> class a74{};\ntemplate <typename> class a75{};\ntemplate <typename> class a76{};\ntemplate <typename> class a77{};\ntemplate <typename> class a78{};\ntemplate <typename> class a79{};\ntemplate <typename> class a80{};\ntemplate <typename> class a81{};\ntemplate <typename> class a82{};\ntemplate <typename> class a83{};\ntemplate <typename> class a84{};\ntemplate <typename> class a85{};\ntemplate <typename> class a86{};\ntemplate <typename> class a87{};\ntemplate <typename> class a88{};\ntemplate <typename> class a89{};\ntemplate <typename> class a90{};\ntemplate <typename> class a91{};\ntemplate <typename> class a92{};\ntemplate <typename> class a93{};\ntemplate <typename> class a94{};\ntemplate <typename> class a95{};\ntemplate <typename> class a96{};\ntemplate <typename> class a97{};\ntemplate <typename> class a98{};\ntemplate <typename> class a99{};\ntemplate <typename> class a100{};\ntemplate <typename> class b {};\nb<a0<int>> d0;\nb<a1<int>> d1;\nb<a2<int>> d2;\nb<a3<int>> d3;\nb<a4<int>> d4;\nb<a5<int>> d5;\nb<a6<int>> d6;\nb<a7<int>> d7;\nb<a8<int>> d8;\nb<a9<int>> d9;\nb<a10<int>> d10;\nb<a11<int>> d11;\nb<a12<int>> d12;\nb<a13<int>> d13;\nb<a14<int>> d14;\nb<a15<int>> d15;\nb<a16<int>> d16;\nb<a17<int>> d17;\nb<a18<int>> d18;\nb<a19<int>> d19;\nb<a20<int>> d20;\nb<a21<int>> d21;\nb<a22<int>> d22;\nb<a23<int>> d23;\nb<a24<int>> d24;\nb<a25<int>> d25;\nb<a26<int>> d26;\nb<a27<int>> d27;\nb<a28<int>> d28;\nb<a29<int>> d29;\nb<a30<int>> d30;\nb<a31<int>> d31;\nb<a32<int>> d32;\nb<a33<int>> d33;\nb<a34<int>> d34;\nb<a35<int>> d35;\nb<a36<int>> d36;\nb<a37<int>> d37;\nb<a38<int>> d38;\nb<a39<int>> d39;\nb<a40<int>> d40;\nb<a41<int>> d41;\nb<a42<int>> d42;\nb<a43<int>> d43;\nb<a44<int>> d44;\nb<a45<int>> d45;\nb<a46<int>> d46;\nb<a47<int>> d47;\nb<a48<int>> d48;\nb<a49<int>> d49;\nb<a50<int>> d50;\nb<a51<int>> d51;\nb<a52<int>> d52;\nb<a53<int>> d53;\nb<a54<int>> d54;\nb<a55<int>> d55;\nb<a56<int>> d56;\nb<a57<int>> d57;\nb<a58<int>> d58;\nb<a59<int>> d59;\nb<a60<int>> d60;\nb<a61<int>> d61;\nb<a62<int>> d62;\nb<a63<int>> d63;\nb<a64<int>> d64;\nb<a65<int>> d65;\nb<a66<int>> d66;\nb<a67<int>> d67;\nb<a68<int>> d68;\nb<a69<int>> d69;\nb<a70<int>> d70;\nb<a71<int>> d71;\nb<a72<int>> d72;\nb<a73<int>> d73;\nb<a74<int>> d74;\nb<a75<int>> d75;\nb<a76<int>> d76;\nb<a77<int>> d77;\nb<a78<int>> d78;\nb<a79<int>> d79;\nb<a80<int>> d80;\nb<a81<int>> d81;\nb<a82<int>> d82;\nb<a83<int>> d83;\nb<a84<int>> d84;\nb<a85<int>> d85;\nb<a86<int>> d86;\nb<a87<int>> d87;\nb<a88<int>> d88;\nb<a89<int>> d89;\nb<a90<int>> d90;\nb<a91<int>> d91;\nb<a92<int>> d92;\nb<a93<int>> d93;\nb<a94<int>> d94;\nb<a95<int>> d95;\nb<a96<int>> d96;\nb<a97<int>> d97;\nb<a98<int>> d98;\nb<a99<int>> d99;\nb<a100<int>> d100;"
Line 4053
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4053 always 4053
  code always "template <typename> class a0{};\ntemplate <typename> class a1{};\ntemplate <typename> class a2{};\ntemplate <typename> class a3{};\ntemplate <typename> class a4{};\ntemplate <typename> class a5{};\ntemplate <typename> class a6{};\ntemplate <typename> class a7{};\ntemplate <typename> class a8{};\ntemplate <typename> class a9{};\ntemplate <typename> class a10{};\ntemplate <typename> class a11{};\ntemplate <typename> class a12{};\ntemplate <typename> class a13{};\ntemplate <typename> class a14{};\ntemplate <typename> class a15{};\ntemplate <typename> class a16{};\ntemplate <typename> class a17{};\ntemplate <typename> class a18{};\ntemplate <typename> class a19{};\ntemplate <typename> class a20{};\ntemplate <typename> class a21{};\ntemplate <typename> class a22{};\ntemplate <typename> class a23{};\ntemplate <typename> class a24{};\ntemplate <typename> class a25{};\ntemplate <typename> class a26{};\ntemplate <typename> class a27{};\ntemplate <typename> class a28{};\ntemplate <typename> class a29{};\ntemplate <typename> class a30{};\ntemplate <typename> class a31{};\ntemplate <typename> class a32{};\ntemplate <typename> class a33{};\ntemplate <typename> class a34{};\ntemplate <typename> class a35{};\ntemplate <typename> class a36{};\ntemplate <typename> class a37{};\ntemplate <typename> class a38{};\ntemplate <typename> class a39{};\ntemplate <typename> class a40{};\ntemplate <typename> class a41{};\ntemplate <typename> class a42{};\ntemplate <typename> class a43{};\ntemplate <typename> class a44{};\ntemplate <typename> class a45{};\ntemplate <typename> class a46{};\ntemplate <typename> class a47{};\ntemplate <typename> class a48{};\ntemplate <typename> class a49{};\ntemplate <typename> class a50{};\ntemplate <typename> class a51{};\ntemplate <typename> class a52{};\ntemplate <typename> class a53{};\ntemplate <typename> class a54{};\ntemplate <typename> class a55{};\ntemplate <typename> class a56{};\ntemplate <typename> class a57{};\ntemplate <typename> class a58{};\ntemplate <typename> class a59{};\ntemplate <typename> class a60{};\ntemplate <typename> class a61{};\ntemplate <typename> class a62{};\ntemplate <typename> class a63{};\ntemplate <typename> class a64{};\ntemplate <typename> class a65{};\ntemplate <typename> class a66{};\ntemplate <typename> class a67{};\ntemplate <typename> class a68{};\ntemplate <typename> class a69{};\ntemplate <typename> class a70{};\ntemplate <typename> class a71{};\ntemplate <typename> class a72{};\ntemplate <typename> class a73{};\ntemplate <typename> class a74{};\ntemplate <typename> class a75{};\ntemplate <typename> class a76{};\ntemplate <typename> class a77{};\ntemplate <typename> class a78{};\ntemplate <typename> class a79{};\ntemplate <typename> class a80{};\ntemplate <typename> class a81{};\ntemplate <typename> class a82{};\ntemplate <typename> class a83{};\ntemplate <typename> class a84{};\ntemplate <typename> class a85{};\ntemplate <typename> class a86{};\ntemplate <typename> class a87{};\ntemplate <typename> class a88{};\ntemplate <typename> class a89{};\ntemplate <typename> class a90{};\ntemplate <typename> class a91{};\ntemplate <typename> class a92{};\ntemplate <typename> class a93{};\ntemplate <typename> class a94{};\ntemplate <typename> class a95{};\ntemplate <typename> class a96{};\ntemplate <typename> class a97{};\ntemplate <typename> class a98{};\ntemplate <typename> class a99{};\ntemplate <typename> class a100{};\ntemplate <typename> class b {};\nb<a0<int>> d0;\nb<a1<int>> d1;\nb<a2<int>> d2;\nb<a3<int>> d3;\nb<a4<int>> d4;\nb<a5<int>> d5;\nb<a6<int>> d6;\nb<a7<int>> d7;\nb<a8<int>> d8;\nb<a9<int>> d9;\nb<a10<int>> d10;\nb<a11<int>> d11;\nb<a12<int>> d12;\nb<a13<int>> d13;\nb<a14<int>> d14;\nb<a15<int>> d15;\nb<a16<int>> d16;\nb<a17<int>> d17;\nb<a18<int>> d18;\nb<a19<int>> d19;\nb<a20<int>> d20;\nb<a21<int>> d21;\nb<a22<int>> d22;\nb<a23<int>> d23;\nb<a24<int>> d24;\nb<a25<int>> d25;\nb<a26<int>> d26;\nb<a27<int>> d27;\nb<a28<int>> d28;\nb<a29<int>> d29;\nb<a30<int>> d30;\nb<a31<int>> d31;\nb<a32<int>> d32;\nb<a33<int>> d33;\nb<a34<int>> d34;\nb<a35<int>> d35;\nb<a36<int>> d36;\nb<a37<int>> d37;\nb<a38<int>> d38;\nb<a39<int>> d39;\nb<a40<int>> d40;\nb<a41<int>> d41;\nb<a42<int>> d42;\nb<a43<int>> d43;\nb<a44<int>> d44;\nb<a45<int>> d45;\nb<a46<int>> d46;\nb<a47<int>> d47;\nb<a48<int>> d48;\nb<a49<int>> d49;\nb<a50<int>> d50;\nb<a51<int>> d51;\nb<a52<int>> d52;\nb<a53<int>> d53;\nb<a54<int>> d54;\nb<a55<int>> d55;\nb<a56<int>> d56;\nb<a57<int>> d57;\nb<a58<int>> d58;\nb<a59<int>> d59;\nb<a60<int>> d60;\nb<a61<int>> d61;\nb<a62<int>> d62;\nb<a63<int>> d63;\nb<a64<int>> d64;\nb<a65<int>> d65;\nb<a66<int>> d66;\nb<a67<int>> d67;\nb<a68<int>> d68;\nb<a69<int>> d69;\nb<a70<int>> d70;\nb<a71<int>> d71;\nb<a72<int>> d72;\nb<a73<int>> d73;\nb<a74<int>> d74;\nb<a75<int>> d75;\nb<a76<int>> d76;\nb<a77<int>> d77;\nb<a78<int>> d78;\nb<a79<int>> d79;\nb<a80<int>> d80;\nb<a81<int>> d81;\nb<a82<int>> d82;\nb<a83<int>> d83;\nb<a84<int>> d84;\nb<a85<int>> d85;\nb<a86<int>> d86;\nb<a87<int>> d87;\nb<a88<int>> d88;\nb<a89<int>> d89;\nb<a90<int>> d90;\nb<a91<int>> d91;\nb<a92<int>> d92;\nb<a93<int>> d93;\nb<a94<int>> d94;\nb<a95<int>> d95;\nb<a96<int>> d96;\nb<a97<int>> d97;\nb<a98<int>> d98;\nb<a99<int>> d99;\nb<a100<int>> d100;"
Line 4057
  314 always 314
  = always "struct impl { template <class T> static T create(); };\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nstruct tester{};\ntester<impl*, int> ti;\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nint test() { return 0; }\nint i = test<impl*, int>();"
  "struct impl { template <class T> static T create(); };\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nstruct tester{};\ntester<impl*, int> ti;\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nint test() { return 0; }\nint i = test<impl*, int>();" always "struct impl { template <class T> static T create(); };\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nstruct tester{};\ntester<impl*, int> ti;\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nint test() { return 0; }\nint i = test<impl*, int>();"
Line 4064
  553 always 553
  = always "struct impl { template < class T > static T create ( ) ; } ; struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ; tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ti ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int i ; i = test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) { return 0 ; } struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> { } ;"
  "struct impl { template < class T > static T create ( ) ; } ; struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ; tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ti ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int i ; i = test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) { return 0 ; } struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> { } ;" always "struct impl { template < class T > static T create ( ) ; } ; struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ; tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ti ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int i ; i = test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) { return 0 ; } struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> { } ;"
Line 4071
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4071 always 4071
  exp always "struct impl { template < class T > static T create ( ) ; } ; struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ; tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ti ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int i ; i = test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) ; int test<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> ( ) { return 0 ; } struct tester<impl*,int,decltype(impl::create<impl*>().impl::create<int>())> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4071 always 4071
  code always "struct impl { template <class T> static T create(); };\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nstruct tester{};\ntester<impl*, int> ti;\ntemplate<class T, class U, class = decltype(impl::create<T>()->impl::create<U>())>\nint test() { return 0; }\nint i = test<impl*, int>();"
Line 4075
  266 always 266
  = always "struct Fred {\n    template <typename T> static void foo() { }\n    template <typename T> static void foo(T) { }\n};\ntemplate void Fred::foo<char>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate void Fred::foo<float>(float);\ntemplate <> void Fred::foo<int>(int) { }"
  "struct Fred {\n    template <typename T> static void foo() { }\n    template <typename T> static void foo(T) { }\n};\ntemplate void Fred::foo<char>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate void Fred::foo<float>(float);\ntemplate <> void Fred::foo<int>(int) { }" always "struct Fred {\n    template <typename T> static void foo() { }\n    template <typename T> static void foo(T) { }\n};\ntemplate void Fred::foo<char>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate void Fred::foo<float>(float);\ntemplate <> void Fred::foo<int>(int) { }"
Line 4083
  274 always 274
  = always "struct Fred { static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<int> ( int ) ; static void foo<float> ( float ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( int ) { } void Fred :: foo<float> ( float ) { } void Fred :: foo<char> ( ) { }"
  "struct Fred { static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<int> ( int ) ; static void foo<float> ( float ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( int ) { } void Fred :: foo<float> ( float ) { } void Fred :: foo<char> ( ) { }" always "struct Fred { static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<int> ( int ) ; static void foo<float> ( float ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( int ) { } void Fred :: foo<float> ( float ) { } void Fred :: foo<char> ( ) { }"
Line 4093
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4093 always 4093
  exp always "struct Fred { static void foo<bool> ( ) ; static void foo<char> ( ) ; static void foo<int> ( int ) ; static void foo<float> ( float ) ; } ; void Fred :: foo<bool> ( ) { } void Fred :: foo<int> ( int ) { } void Fred :: foo<float> ( float ) { } void Fred :: foo<char> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4093 always 4093
  code always "struct Fred {\n    template <typename T> static void foo() { }\n    template <typename T> static void foo(T) { }\n};\ntemplate void Fred::foo<char>();\ntemplate <> void Fred::foo<bool>() { }\ntemplate void Fred::foo<float>(float);\ntemplate <> void Fred::foo<int>(int) { }"
Line 4097
  239 always 239
  = always "struct JobEntry { };\ntemplate<class T>\nstruct adapter : public T {\n    template<class... Args>\n    adapter(Args&&... args) : T{ std::forward<Args>(args)... } {}\n};\nvoid foo() {\n   auto notifyJob = std::make_shared<adapter<JobEntry>> ();\n}"
  "struct JobEntry { };\ntemplate<class T>\nstruct adapter : public T {\n    template<class... Args>\n    adapter(Args&&... args) : T{ std::forward<Args>(args)... } {}\n};\nvoid foo() {\n   auto notifyJob = std::make_shared<adapter<JobEntry>> ();\n}" always "struct JobEntry { };\ntemplate<class T>\nstruct adapter : public T {\n    template<class... Args>\n    adapter(Args&&... args) : T{ std::forward<Args>(args)... } {}\n};\nvoid foo() {\n   auto notifyJob = std::make_shared<adapter<JobEntry>> ();\n}"
Line 4106
  4 always 4
  = always "???"
  "???" always "???"
Line 4107
  314 always 314
  = always "struct JobEntry { } ; struct adapter<JobEntry> ; void foo ( ) { auto notifyJob ; notifyJob = std :: make_shared < adapter<JobEntry> > ( ) ; } struct adapter<JobEntry> : public JobEntry { template < class ... Args > adapter<JobEntry> ( Args && ... args ) : JobEntry { std :: forward < Args > ( args ) ... } { } } ;"
  "struct JobEntry { } ; struct adapter<JobEntry> ; void foo ( ) { auto notifyJob ; notifyJob = std :: make_shared < adapter<JobEntry> > ( ) ; } struct adapter<JobEntry> : public JobEntry { template < class ... Args > adapter<JobEntry> ( Args && ... args ) : JobEntry { std :: forward < Args > ( args ) ... } { } } ;" always "struct JobEntry { } ; struct adapter<JobEntry> ; void foo ( ) { auto notifyJob ; notifyJob = std :: make_shared < adapter<JobEntry> > ( ) ; } struct adapter<JobEntry> : public JobEntry { template < class ... Args > adapter<JobEntry> ( Args && ... args ) : JobEntry { std :: forward < Args > ( args ) ... } { } } ;"
Line 4116
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4116 always 4116
  exp always "???"
  act always "struct JobEntry { } ; struct adapter<JobEntry> ; void foo ( ) { auto notifyJob ; notifyJob = std :: make_shared < adapter<JobEntry> > ( ) ; } struct adapter<JobEntry> : public JobEntry { template < class ... Args > adapter<JobEntry> ( Args && ... args ) : JobEntry { std :: forward < Args > ( args ) ... } { } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4116 always 4116
  code always "struct JobEntry { };\ntemplate<class T>\nstruct adapter : public T {\n    template<class... Args>\n    adapter(Args&&... args) : T{ std::forward<Args>(args)... } {}\n};\nvoid foo() {\n   auto notifyJob = std::make_shared<adapter<JobEntry>> ();\n}"
Line 4120
  242 always 242
  = always "template <std::size_t N>\nstruct CountryCode {\n    CountryCode(std::string cc);\n};template <std::size_t N>\nCountryCode<N>::CountryCode(std::string cc) : m_String{std::move(cc)} {\n}\ntemplate class CountryCode<2>;\ntemplate class CountryCode<3>;"
  "template <std::size_t N>\nstruct CountryCode {\n    CountryCode(std::string cc);\n};template <std::size_t N>\nCountryCode<N>::CountryCode(std::string cc) : m_String{std::move(cc)} {\n}\ntemplate class CountryCode<2>;\ntemplate class CountryCode<3>;" always "template <std::size_t N>\nstruct CountryCode {\n    CountryCode(std::string cc);\n};template <std::size_t N>\nCountryCode<N>::CountryCode(std::string cc) : m_String{std::move(cc)} {\n}\ntemplate class CountryCode<2>;\ntemplate class CountryCode<3>;"
Line 4129
  364 always 364
  = always "struct CountryCode<2> ; struct CountryCode<3> ; struct CountryCode<2> { CountryCode<2> ( std :: string cc ) ; } ; CountryCode<2> :: CountryCode<2> ( std :: string cc ) : m_String { std :: move ( cc ) } { } struct CountryCode<3> { CountryCode<3> ( std :: string cc ) ; } ; CountryCode<3> :: CountryCode<3> ( std :: string cc ) : m_String { std :: move ( cc ) } { }"
  "struct CountryCode<2> ; struct CountryCode<3> ; struct CountryCode<2> { CountryCode<2> ( std :: string cc ) ; } ; CountryCode<2> :: CountryCode<2> ( std :: string cc ) : m_String { std :: move ( cc ) } { } struct CountryCode<3> { CountryCode<3> ( std :: string cc ) ; } ; CountryCode<3> :: CountryCode<3> ( std :: string cc ) : m_String { std :: move ( cc ) } { }" always "struct CountryCode<2> ; struct CountryCode<3> ; struct CountryCode<2> { CountryCode<2> ( std :: string cc ) ; } ; CountryCode<2> :: CountryCode<2> ( std :: string cc ) : m_String { std :: move ( cc ) } { } struct CountryCode<3> { CountryCode<3> ( std :: string cc ) ; } ; CountryCode<3> :: CountryCode<3> ( std :: string cc ) : m_String { std :: move ( cc ) } { }"
Line 4141
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4141 always 4141
  exp always "struct CountryCode<2> ; struct CountryCode<3> ; struct CountryCode<2> { CountryCode<2> ( std :: string cc ) ; } ; CountryCode<2> :: CountryCode<2> ( std :: string cc ) : m_String { std :: move ( cc ) } { } struct CountryCode<3> { CountryCode<3> ( std :: string cc ) ; } ; CountryCode<3> :: CountryCode<3> ( std :: string cc ) : m_String { std :: move ( cc ) } { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4141 always 4141
  code always "template <std::size_t N>\nstruct CountryCode {\n    CountryCode(std::string cc);\n};template <std::size_t N>\nCountryCode<N>::CountryCode(std::string cc) : m_String{std::move(cc)} {\n}\ntemplate class CountryCode<2>;\ntemplate class CountryCode<3>;"
Line 4145
  71 always 71
  = always "extern \"C++\" template < typename T > T * test ( ) { return nullptr ; }"
  "extern \"C++\" template < typename T > T * test ( ) { return nullptr ; }" always "extern \"C++\" template < typename T > T * test ( ) { return nullptr ; }"
Line 4146
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4146 always 4146
  code always "extern \"C++\" template < typename T > T * test ( ) { return nullptr ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4146 always 4146
  code always "extern \"C++\" template < typename T > T * test ( ) { return nullptr ; }"
Line 4150
  247 always 247
  = always "template <class TYPE>\nstruct A {\n    A();\n    ~A();\n    static void f();\n};\ntemplate <class TYPE>\nA<TYPE>::A() { }\ntemplate <class TYPE>\nA<TYPE>::~A() { }\ntemplate <class TYPE>\nvoid A<TYPE>::f() { }\ntemplate class A<int>;\ntemplate class A<float>;"
  "template <class TYPE>\nstruct A {\n    A();\n    ~A();\n    static void f();\n};\ntemplate <class TYPE>\nA<TYPE>::A() { }\ntemplate <class TYPE>\nA<TYPE>::~A() { }\ntemplate <class TYPE>\nvoid A<TYPE>::f() { }\ntemplate class A<int>;\ntemplate class A<float>;" always "template <class TYPE>\nstruct A {\n    A();\n    ~A();\n    static void f();\n};\ntemplate <class TYPE>\nA<TYPE>::A() { }\ntemplate <class TYPE>\nA<TYPE>::~A() { }\ntemplate <class TYPE>\nvoid A<TYPE>::f() { }\ntemplate class A<int>;\ntemplate class A<float>;"
Line 4164
  340 always 340
  = always "struct A<int> ; struct A<float> ; struct A<int> { A<int> ( ) ; ~ A<int> ( ) ; static void f ( ) ; } ; A<int> :: A<int> ( ) { } A<int> :: ~ A<int> ( ) { } void A<int> :: f ( ) { } struct A<float> { A<float> ( ) ; ~ A<float> ( ) ; static void f ( ) ; } ; A<float> :: A<float> ( ) { } A<float> :: ~ A<float> ( ) { } void A<float> :: f ( ) { }"
  "struct A<int> ; struct A<float> ; struct A<int> { A<int> ( ) ; ~ A<int> ( ) ; static void f ( ) ; } ; A<int> :: A<int> ( ) { } A<int> :: ~ A<int> ( ) { } void A<int> :: f ( ) { } struct A<float> { A<float> ( ) ; ~ A<float> ( ) ; static void f ( ) ; } ; A<float> :: A<float> ( ) { } A<float> :: ~ A<float> ( ) { } void A<float> :: f ( ) { }" always "struct A<int> ; struct A<float> ; struct A<int> { A<int> ( ) ; ~ A<int> ( ) ; static void f ( ) ; } ; A<int> :: A<int> ( ) { } A<int> :: ~ A<int> ( ) { } void A<int> :: f ( ) { } struct A<float> { A<float> ( ) ; ~ A<float> ( ) ; static void f ( ) ; } ; A<float> :: A<float> ( ) { } A<float> :: ~ A<float> ( ) { } void A<float> :: f ( ) { }"
Line 4182
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4182 always 4182
  exp always "struct A<int> ; struct A<float> ; struct A<int> { A<int> ( ) ; ~ A<int> ( ) ; static void f ( ) ; } ; A<int> :: A<int> ( ) { } A<int> :: ~ A<int> ( ) { } void A<int> :: f ( ) { } struct A<float> { A<float> ( ) ; ~ A<float> ( ) ; static void f ( ) ; } ; A<float> :: A<float> ( ) { } A<float> :: ~ A<float> ( ) { } void A<float> :: f ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4182 always 4182
  code always "template <class TYPE>\nstruct A {\n    A();\n    ~A();\n    static void f();\n};\ntemplate <class TYPE>\nA<TYPE>::A() { }\ntemplate <class TYPE>\nA<TYPE>::~A() { }\ntemplate <class TYPE>\nvoid A<TYPE>::f() { }\ntemplate class A<int>;\ntemplate class A<float>;"
Line 4186
  135 always 135
  = always "struct MyStruct {\n    template<class T>\n    bool operator()(const T& l, const T& r) const {\n        return l.first < r.first;\n    }\n};"
  "struct MyStruct {\n    template<class T>\n    bool operator()(const T& l, const T& r) const {\n        return l.first < r.first;\n    }\n};" always "struct MyStruct {\n    template<class T>\n    bool operator()(const T& l, const T& r) const {\n        return l.first < r.first;\n    }\n};"
Line 4192
  130 always 130
  = always "struct MyStruct { template < class T > bool operator() ( const T & l , const T & r ) const { return l . first < r . first ; } } ;"
  "struct MyStruct { template < class T > bool operator() ( const T & l , const T & r ) const { return l . first < r . first ; } } ;" always "struct MyStruct { template < class T > bool operator() ( const T & l , const T & r ) const { return l . first < r . first ; } } ;"
Line 4198
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4198 always 4198
  exp always "struct MyStruct { template < class T > bool operator() ( const T & l , const T & r ) const { return l . first < r . first ; } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4198 always 4198
  code always "struct MyStruct {\n    template<class T>\n    bool operator()(const T& l, const T& r) const {\n        return l.first < r.first;\n    }\n};"
Line 4202
  77 always 77
  = always "template <typename T, size_t k = (T::s < 3) ? 0 : 3>\nvoid foo() {}\nfoo<T>();"
  "template <typename T, size_t k = (T::s < 3) ? 0 : 3>\nvoid foo() {}\nfoo<T>();" always "template <typename T, size_t k = (T::s < 3) ? 0 : 3>\nvoid foo() {}\nfoo<T>();"
Line 4205
  90 always 90
  = always "void foo<T,(T::s<3)?0:3> ( ) ; foo<T,(T::s<3)?0:3> ( ) ; void foo<T,(T::s<3)?0:3> ( ) { }"
  "void foo<T,(T::s<3)?0:3> ( ) ; foo<T,(T::s<3)?0:3> ( ) ; void foo<T,(T::s<3)?0:3> ( ) { }" always "void foo<T,(T::s<3)?0:3> ( ) ; foo<T,(T::s<3)?0:3> ( ) ; void foo<T,(T::s<3)?0:3> ( ) { }"
Line 4208
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4208 always 4208
  exp always "void foo<T,(T::s<3)?0:3> ( ) ; foo<T,(T::s<3)?0:3> ( ) ; void foo<T,(T::s<3)?0:3> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4208 always 4208
  code always "template <typename T, size_t k = (T::s < 3) ? 0 : 3>\nvoid foo() {}\nfoo<T>();"
Line 4212
  340 always 340
  = always "struct MathLib {\n    template<class T> static std::string toString(T value) {\n        return std::string{};\n    }\n};\ntemplate<> std::string MathLib::toString(double value);\ntemplate<> std::string MathLib::toString(double value) {\n    return std::string{std::to_string(value)};\n}\nvoid foo() {\n    std::string str = MathLib::toString(1.0);\n}"
  "struct MathLib {\n    template<class T> static std::string toString(T value) {\n        return std::string{};\n    }\n};\ntemplate<> std::string MathLib::toString(double value);\ntemplate<> std::string MathLib::toString(double value) {\n    return std::string{std::to_string(value)};\n}\nvoid foo() {\n    std::string str = MathLib::toString(1.0);\n}" always "struct MathLib {\n    template<class T> static std::string toString(T value) {\n        return std::string{};\n    }\n};\ntemplate<> std::string MathLib::toString(double value);\ntemplate<> std::string MathLib::toString(double value) {\n    return std::string{std::to_string(value)};\n}\nvoid foo() {\n    std::string str = MathLib::toString(1.0);\n}"
Line 4224
  370 always 370
  = always "struct MathLib { static std :: string toString<double> ( double value ) ; template < class T > static std :: string toString ( T value ) { return std :: string { } ; } } ; std :: string MathLib :: toString<double> ( double value ) { return std :: string { std :: to_string ( value ) } ; } void foo ( ) { std :: string str ; str = MathLib :: toString<double> ( 1.0 ) ; }"
  "struct MathLib { static std :: string toString<double> ( double value ) ; template < class T > static std :: string toString ( T value ) { return std :: string { } ; } } ; std :: string MathLib :: toString<double> ( double value ) { return std :: string { std :: to_string ( value ) } ; } void foo ( ) { std :: string str ; str = MathLib :: toString<double> ( 1.0 ) ; }" always "struct MathLib { static std :: string toString<double> ( double value ) ; template < class T > static std :: string toString ( T value ) { return std :: string { } ; } } ; std :: string MathLib :: toString<double> ( double value ) { return std :: string { std :: to_string ( value ) } ; } void foo ( ) { std :: string str ; str = MathLib :: toString<double> ( 1.0 ) ; }"
Line 4236
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4236 always 4236
  exp always "struct MathLib { static std :: string toString<double> ( double value ) ; template < class T > static std :: string toString ( T value ) { return std :: string { } ; } } ; std :: string MathLib :: toString<double> ( double value ) { return std :: string { std :: to_string ( value ) } ; } void foo ( ) { std :: string str ; str = MathLib :: toString<double> ( 1.0 ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4236 always 4236
  code always "struct MathLib {\n    template<class T> static std::string toString(T value) {\n        return std::string{};\n    }\n};\ntemplate<> std::string MathLib::toString(double value);\ntemplate<> std::string MathLib::toString(double value) {\n    return std::string{std::to_string(value)};\n}\nvoid foo() {\n    std::string str = MathLib::toString(1.0);\n}"
Line 4240
  751 always 751
  = always "template < typename T, typename U > struct type { };\ntemplate < > struct type < bool, bool > {};\ntemplate < > struct type < unsigned char, unsigned char > {};\ntemplate < > struct type < char, char > {};\ntemplate < > struct type < signed char, signed char > {};\ntemplate < > struct type < unsigned short, unsigned short > {};\ntemplate < > struct type < short, short > {};\ntemplate < > struct type < unsigned int, unsigned int > {};\ntemplate < > struct type < int, int > {};\ntemplate < > struct type < unsigned long long, unsigned long long > {};\ntemplate < > struct type < long long, long long > {};\ntemplate < > struct type < double, double > {};\ntemplate < > struct type < float, float > {};\ntemplate < > struct type < long double, long double > {};"
  "template < typename T, typename U > struct type { };\ntemplate < > struct type < bool, bool > {};\ntemplate < > struct type < unsigned char, unsigned char > {};\ntemplate < > struct type < char, char > {};\ntemplate < > struct type < signed char, signed char > {};\ntemplate < > struct type < unsigned short, unsigned short > {};\ntemplate < > struct type < short, short > {};\ntemplate < > struct type < unsigned int, unsigned int > {};\ntemplate < > struct type < int, int > {};\ntemplate < > struct type < unsigned long long, unsigned long long > {};\ntemplate < > struct type < long long, long long > {};\ntemplate < > struct type < double, double > {};\ntemplate < > struct type < float, float > {};\ntemplate < > struct type < long double, long double > {};" always "template < typename T, typename U > struct type { };\ntemplate < > struct type < bool, bool > {};\ntemplate < > struct type < unsigned char, unsigned char > {};\ntemplate < > struct type < char, char > {};\ntemplate < > struct type < signed char, signed char > {};\ntemplate < > struct type < unsigned short, unsigned short > {};\ntemplate < > struct type < short, short > {};\ntemplate < > struct type < unsigned int, unsigned int > {};\ntemplate < > struct type < int, int > {};\ntemplate < > struct type < unsigned long long, unsigned long long > {};\ntemplate < > struct type < long long, long long > {};\ntemplate < > struct type < double, double > {};\ntemplate < > struct type < float, float > {};\ntemplate < > struct type < long double, long double > {};"
Line 4254
  977 always 977
  = always "struct type<longdouble,longdouble> ; struct type<float,float> ; struct type<double,double> ; struct type<longlong,longlong> ; struct type<unsignedlonglong,unsignedlonglong> ; struct type<int,int> ; struct type<unsignedint,unsignedint> ; struct type<short,short> ; struct type<unsignedshort,unsignedshort> ; struct type<signedchar,signedchar> ; struct type<char,char> ; struct type<unsignedchar,unsignedchar> ; struct type<bool,bool> ; template < typename T , typename U > struct type { } ; struct type<bool,bool> { } ; struct type<unsignedchar,unsignedchar> { } ; struct type<char,char> { } ; struct type<signedchar,signedchar> { } ; struct type<unsignedshort,unsignedshort> { } ; struct type<short,short> { } ; struct type<unsignedint,unsignedint> { } ; struct type<int,int> { } ; struct type<unsignedlonglong,unsignedlonglong> { } ; struct type<longlong,longlong> { } ; struct type<double,double> { } ; struct type<float,float> { } ; struct type<longdouble,longdouble> { } ;"
  "struct type<longdouble,longdouble> ; struct type<float,float> ; struct type<double,double> ; struct type<longlong,longlong> ; struct type<unsignedlonglong,unsignedlonglong> ; struct type<int,int> ; struct type<unsignedint,unsignedint> ; struct type<short,short> ; struct type<unsignedshort,unsignedshort> ; struct type<signedchar,signedchar> ; struct type<char,char> ; struct type<unsignedchar,unsignedchar> ; struct type<bool,bool> ; template < typename T , typename U > struct type { } ; struct type<bool,bool> { } ; struct type<unsignedchar,unsignedchar> { } ; struct type<char,char> { } ; struct type<signedchar,signedchar> { } ; struct type<unsignedshort,unsignedshort> { } ; struct type<short,short> { } ; struct type<unsignedint,unsignedint> { } ; struct type<int,int> { } ; struct type<unsignedlonglong,unsignedlonglong> { } ; struct type<longlong,longlong> { } ; struct type<double,double> { } ; struct type<float,float> { } ; struct type<longdouble,longdouble> { } ;" always "struct type<longdouble,longdouble> ; struct type<float,float> ; struct type<double,double> ; struct type<longlong,longlong> ; struct type<unsignedlonglong,unsignedlonglong> ; struct type<int,int> ; struct type<unsignedint,unsignedint> ; struct type<short,short> ; struct type<unsignedshort,unsignedshort> ; struct type<signedchar,signedchar> ; struct type<char,char> ; struct type<unsignedchar,unsignedchar> ; struct type<bool,bool> ; template < typename T , typename U > struct type { } ; struct type<bool,bool> { } ; struct type<unsignedchar,unsignedchar> { } ; struct type<char,char> { } ; struct type<signedchar,signedchar> { } ; struct type<unsignedshort,unsignedshort> { } ; struct type<short,short> { } ; struct type<unsignedint,unsignedint> { } ; struct type<int,int> { } ; struct type<unsignedlonglong,unsignedlonglong> { } ; struct type<longlong,longlong> { } ; struct type<double,double> { } ; struct type<float,float> { } ; struct type<longdouble,longdouble> { } ;"
Line 4281
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4281 always 4281
  exp always "struct type<longdouble,longdouble> ; struct type<float,float> ; struct type<double,double> ; struct type<longlong,longlong> ; struct type<unsignedlonglong,unsignedlonglong> ; struct type<int,int> ; struct type<unsignedint,unsignedint> ; struct type<short,short> ; struct type<unsignedshort,unsignedshort> ; struct type<signedchar,signedchar> ; struct type<char,char> ; struct type<unsignedchar,unsignedchar> ; struct type<bool,bool> ; template < typename T , typename U > struct type { } ; struct type<bool,bool> { } ; struct type<unsignedchar,unsignedchar> { } ; struct type<char,char> { } ; struct type<signedchar,signedchar> { } ; struct type<unsignedshort,unsignedshort> { } ; struct type<short,short> { } ; struct type<unsignedint,unsignedint> { } ; struct type<int,int> { } ; struct type<unsignedlonglong,unsignedlonglong> { } ; struct type<longlong,longlong> { } ; struct type<double,double> { } ; struct type<float,float> { } ; struct type<longdouble,longdouble> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4281 always 4281
  code always "template < typename T, typename U > struct type { };\ntemplate < > struct type < bool, bool > {};\ntemplate < > struct type < unsigned char, unsigned char > {};\ntemplate < > struct type < char, char > {};\ntemplate < > struct type < signed char, signed char > {};\ntemplate < > struct type < unsigned short, unsigned short > {};\ntemplate < > struct type < short, short > {};\ntemplate < > struct type < unsigned int, unsigned int > {};\ntemplate < > struct type < int, int > {};\ntemplate < > struct type < unsigned long long, unsigned long long > {};\ntemplate < > struct type < long long, long long > {};\ntemplate < > struct type < double, double > {};\ntemplate < > struct type < float, float > {};\ntemplate < > struct type < long double, long double > {};"
Line 4285
  638 always 638
  = always "template < typename T> struct last { T t; };\ntemplate < typename T > struct CImgList { T t; };\nCImgList < last < bool > > c1;\nCImgList < last < signed char > > c2;\nCImgList < last < unsigned char > > c3;\nCImgList < last < char > > c4;\nCImgList < last < unsigned short > > c5;\nCImgList < last < short > > c6;\nCImgList < last < unsigned int > > c7;\nCImgList < last < int > > c8;\nCImgList < last < unsigned long > > c9;\nCImgList < last < long > > c10;\nCImgList < last < unsigned long long > > c11;\nCImgList < last < long long > > c12;\nCImgList < last < float > > c13;\nCImgList < last < double > > c14;\nCImgList < last < long double > > c15;"
  "template < typename T> struct last { T t; };\ntemplate < typename T > struct CImgList { T t; };\nCImgList < last < bool > > c1;\nCImgList < last < signed char > > c2;\nCImgList < last < unsigned char > > c3;\nCImgList < last < char > > c4;\nCImgList < last < unsigned short > > c5;\nCImgList < last < short > > c6;\nCImgList < last < unsigned int > > c7;\nCImgList < last < int > > c8;\nCImgList < last < unsigned long > > c9;\nCImgList < last < long > > c10;\nCImgList < last < unsigned long long > > c11;\nCImgList < last < long long > > c12;\nCImgList < last < float > > c13;\nCImgList < last < double > > c14;\nCImgList < last < long double > > c15;" always "template < typename T> struct last { T t; };\ntemplate < typename T > struct CImgList { T t; };\nCImgList < last < bool > > c1;\nCImgList < last < signed char > > c2;\nCImgList < last < unsigned char > > c3;\nCImgList < last < char > > c4;\nCImgList < last < unsigned short > > c5;\nCImgList < last < short > > c6;\nCImgList < last < unsigned int > > c7;\nCImgList < last < int > > c8;\nCImgList < last < unsigned long > > c9;\nCImgList < last < long > > c10;\nCImgList < last < unsigned long long > > c11;\nCImgList < last < long long > > c12;\nCImgList < last < float > > c13;\nCImgList < last < double > > c14;\nCImgList < last < long double > > c15;"
Line 4302
  2826 always 2826
  = always "struct last<bool> ; struct last<signedchar> ; struct last<unsignedchar> ; struct last<char> ; struct last<unsignedshort> ; struct last<short> ; struct last<unsignedint> ; struct last<int> ; struct last<unsignedlong> ; struct last<long> ; struct last<unsignedlonglong> ; struct last<longlong> ; struct last<float> ; struct last<double> ; struct last<longdouble> ; struct CImgList<last<bool>> ; struct CImgList<last<signedchar>> ; struct CImgList<last<unsignedchar>> ; struct CImgList<last<char>> ; struct CImgList<last<unsignedshort>> ; struct CImgList<last<short>> ; struct CImgList<last<unsignedint>> ; struct CImgList<last<int>> ; struct CImgList<last<unsignedlong>> ; struct CImgList<last<long>> ; struct CImgList<last<unsignedlonglong>> ; struct CImgList<last<longlong>> ; struct CImgList<last<float>> ; struct CImgList<last<double>> ; struct CImgList<last<longdouble>> ; CImgList<last<bool>> c1 ; CImgList<last<signedchar>> c2 ; CImgList<last<unsignedchar>> c3 ; CImgList<last<char>> c4 ; CImgList<last<unsignedshort>> c5 ; CImgList<last<short>> c6 ; CImgList<last<unsignedint>> c7 ; CImgList<last<int>> c8 ; CImgList<last<unsignedlong>> c9 ; CImgList<last<long>> c10 ; CImgList<last<unsignedlonglong>> c11 ; CImgList<last<longlong>> c12 ; CImgList<last<float>> c13 ; CImgList<last<double>> c14 ; CImgList<last<longdouble>> c15 ; struct CImgList<last<bool>> { last<bool> t ; } ; struct CImgList<last<signedchar>> { last<signedchar> t ; } ; struct CImgList<last<unsignedchar>> { last<unsignedchar> t ; } ; struct CImgList<last<char>> { last<char> t ; } ; struct CImgList<last<unsignedshort>> { last<unsignedshort> t ; } ; struct CImgList<last<short>> { last<short> t ; } ; struct CImgList<last<unsignedint>> { last<unsignedint> t ; } ; struct CImgList<last<int>> { last<int> t ; } ; struct CImgList<last<unsignedlong>> { last<unsignedlong> t ; } ; struct CImgList<last<long>> { last<long> t ; } ; struct CImgList<last<unsignedlonglong>> { last<unsignedlonglong> t ; } ; struct CImgList<last<longlong>> { last<longlong> t ; } ; struct CImgList<last<float>> { last<float> t ; } ; struct CImgList<last<double>> { last<double> t ; } ; struct CImgList<last<longdouble>> { last<longdouble> t ; } ; struct last<bool> { bool t ; } ; struct last<signedchar> { signed char t ; } ; struct last<unsignedchar> { unsigned char t ; } ; struct last<char> { char t ; } ; struct last<unsignedshort> { unsigned short t ; } ; struct last<short> { short t ; } ; struct last<unsignedint> { unsigned int t ; } ; struct last<int> { int t ; } ; struct last<unsignedlong> { unsigned long t ; } ; struct last<long> { long t ; } ; struct last<unsignedlonglong> { unsigned long long t ; } ; struct last<longlong> { long long t ; } ; struct last<float> { float t ; } ; struct last<double> { double t ; } ; struct last<longdouble> { long double t ; } ;"
  "struct last<bool> ; struct last<signedchar> ; struct last<unsignedchar> ; struct last<char> ; struct last<unsignedshort> ; struct last<short> ; struct last<unsignedint> ; struct last<int> ; struct last<unsignedlong> ; struct last<long> ; struct last<unsignedlonglong> ; struct last<longlong> ; struct last<float> ; struct last<double> ; struct last<longdouble> ; struct CImgList<last<bool>> ; struct CImgList<last<signedchar>> ; struct CImgList<last<unsignedchar>> ; struct CImgList<last<char>> ; struct CImgList<last<unsignedshort>> ; struct CImgList<last<short>> ; struct CImgList<last<unsignedint>> ; struct CImgList<last<int>> ; struct CImgList<last<unsignedlong>> ; struct CImgList<last<long>> ; struct CImgList<last<unsignedlonglong>> ; struct CImgList<last<longlong>> ; struct CImgList<last<float>> ; struct CImgList<last<double>> ; struct CImgList<last<longdouble>> ; CImgList<last<bool>> c1 ; CImgList<last<signedchar>> c2 ; CImgList<last<unsignedchar>> c3 ; CImgList<last<char>> c4 ; CImgList<last<unsignedshort>> c5 ; CImgList<last<short>> c6 ; CImgList<last<unsignedint>> c7 ; CImgList<last<int>> c8 ; CImgList<last<unsignedlong>> c9 ; CImgList<last<long>> c10 ; CImgList<last<unsignedlonglong>> c11 ; CImgList<last<longlong>> c12 ; CImgList<last<float>> c13 ; CImgList<last<double>> c14 ; CImgList<last<longdouble>> c15 ; struct CImgList<last<bool>> { last<bool> t ; } ; struct CImgList<last<signedchar>> { last<signedchar> t ; } ; struct CImgList<last<unsignedchar>> { last<unsignedchar> t ; } ; struct CImgList<last<char>> { last<char> t ; } ; struct CImgList<last<unsignedshort>> { last<unsignedshort> t ; } ; struct CImgList<last<short>> { last<short> t ; } ; struct CImgList<last<unsignedint>> { last<unsignedint> t ; } ; struct CImgList<last<int>> { last<int> t ; } ; struct CImgList<last<unsignedlong>> { last<unsignedlong> t ; } ; struct CImgList<last<long>> { last<long> t ; } ; struct CImgList<last<unsignedlonglong>> { last<unsignedlonglong> t ; } ; struct CImgList<last<longlong>> { last<longlong> t ; } ; struct CImgList<last<float>> { last<float> t ; } ; struct CImgList<last<double>> { last<double> t ; } ; struct CImgList<last<longdouble>> { last<longdouble> t ; } ; struct last<bool> { bool t ; } ; struct last<signedchar> { signed char t ; } ; struct last<unsignedchar> { unsigned char t ; } ; struct last<char> { char t ; } ; struct last<unsignedshort> { unsigned short t ; } ; struct last<short> { short t ; } ; struct last<unsignedint> { unsigned int t ; } ; struct last<int> { int t ; } ; struct last<unsignedlong> { unsigned long t ; } ; struct last<long> { long t ; } ; struct last<unsignedlonglong> { unsigned long long t ; } ; struct last<longlong> { long long t ; } ; struct last<float> { float t ; } ; struct last<double> { double t ; } ; struct last<longdouble> { long double t ; } ;" always "struct last<bool> ; struct last<signedchar> ; struct last<unsignedchar> ; struct last<char> ; struct last<unsignedshort> ; struct last<short> ; struct last<unsignedint> ; struct last<int> ; struct last<unsignedlong> ; struct last<long> ; struct last<unsignedlonglong> ; struct last<longlong> ; struct last<float> ; struct last<double> ; struct last<longdouble> ; struct CImgList<last<bool>> ; struct CImgList<last<signedchar>> ; struct CImgList<last<unsignedchar>> ; struct CImgList<last<char>> ; struct CImgList<last<unsignedshort>> ; struct CImgList<last<short>> ; struct CImgList<last<unsignedint>> ; struct CImgList<last<int>> ; struct CImgList<last<unsignedlong>> ; struct CImgList<last<long>> ; struct CImgList<last<unsignedlonglong>> ; struct CImgList<last<longlong>> ; struct CImgList<last<float>> ; struct CImgList<last<double>> ; struct CImgList<last<longdouble>> ; CImgList<last<bool>> c1 ; CImgList<last<signedchar>> c2 ; CImgList<last<unsignedchar>> c3 ; CImgList<last<char>> c4 ; CImgList<last<unsignedshort>> c5 ; CImgList<last<short>> c6 ; CImgList<last<unsignedint>> c7 ; CImgList<last<int>> c8 ; CImgList<last<unsignedlong>> c9 ; CImgList<last<long>> c10 ; CImgList<last<unsignedlonglong>> c11 ; CImgList<last<longlong>> c12 ; CImgList<last<float>> c13 ; CImgList<last<double>> c14 ; CImgList<last<longdouble>> c15 ; struct CImgList<last<bool>> { last<bool> t ; } ; struct CImgList<last<signedchar>> { last<signedchar> t ; } ; struct CImgList<last<unsignedchar>> { last<unsignedchar> t ; } ; struct CImgList<last<char>> { last<char> t ; } ; struct CImgList<last<unsignedshort>> { last<unsignedshort> t ; } ; struct CImgList<last<short>> { last<short> t ; } ; struct CImgList<last<unsignedint>> { last<unsignedint> t ; } ; struct CImgList<last<int>> { last<int> t ; } ; struct CImgList<last<unsignedlong>> { last<unsignedlong> t ; } ; struct CImgList<last<long>> { last<long> t ; } ; struct CImgList<last<unsignedlonglong>> { last<unsignedlonglong> t ; } ; struct CImgList<last<longlong>> { last<longlong> t ; } ; struct CImgList<last<float>> { last<float> t ; } ; struct CImgList<last<double>> { last<double> t ; } ; struct CImgList<last<longdouble>> { last<longdouble> t ; } ; struct last<bool> { bool t ; } ; struct last<signedchar> { signed char t ; } ; struct last<unsignedchar> { unsigned char t ; } ; struct last<char> { char t ; } ; struct last<unsignedshort> { unsigned short t ; } ; struct last<short> { short t ; } ; struct last<unsignedint> { unsigned int t ; } ; struct last<int> { int t ; } ; struct last<unsignedlong> { unsigned long t ; } ; struct last<long> { long t ; } ; struct last<unsignedlonglong> { unsigned long long t ; } ; struct last<longlong> { long long t ; } ; struct last<float> { float t ; } ; struct last<double> { double t ; } ; struct last<longdouble> { long double t ; } ;"
Line 4377
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4377 always 4377
  exp always "struct last<bool> ; struct last<signedchar> ; struct last<unsignedchar> ; struct last<char> ; struct last<unsignedshort> ; struct last<short> ; struct last<unsignedint> ; struct last<int> ; struct last<unsignedlong> ; struct last<long> ; struct last<unsignedlonglong> ; struct last<longlong> ; struct last<float> ; struct last<double> ; struct last<longdouble> ; struct CImgList<last<bool>> ; struct CImgList<last<signedchar>> ; struct CImgList<last<unsignedchar>> ; struct CImgList<last<char>> ; struct CImgList<last<unsignedshort>> ; struct CImgList<last<short>> ; struct CImgList<last<unsignedint>> ; struct CImgList<last<int>> ; struct CImgList<last<unsignedlong>> ; struct CImgList<last<long>> ; struct CImgList<last<unsignedlonglong>> ; struct CImgList<last<longlong>> ; struct CImgList<last<float>> ; struct CImgList<last<double>> ; struct CImgList<last<longdouble>> ; CImgList<last<bool>> c1 ; CImgList<last<signedchar>> c2 ; CImgList<last<unsignedchar>> c3 ; CImgList<last<char>> c4 ; CImgList<last<unsignedshort>> c5 ; CImgList<last<short>> c6 ; CImgList<last<unsignedint>> c7 ; CImgList<last<int>> c8 ; CImgList<last<unsignedlong>> c9 ; CImgList<last<long>> c10 ; CImgList<last<unsignedlonglong>> c11 ; CImgList<last<longlong>> c12 ; CImgList<last<float>> c13 ; CImgList<last<double>> c14 ; CImgList<last<longdouble>> c15 ; struct CImgList<last<bool>> { last<bool> t ; } ; struct CImgList<last<signedchar>> { last<signedchar> t ; } ; struct CImgList<last<unsignedchar>> { last<unsignedchar> t ; } ; struct CImgList<last<char>> { last<char> t ; } ; struct CImgList<last<unsignedshort>> { last<unsignedshort> t ; } ; struct CImgList<last<short>> { last<short> t ; } ; struct CImgList<last<unsignedint>> { last<unsignedint> t ; } ; struct CImgList<last<int>> { last<int> t ; } ; struct CImgList<last<unsignedlong>> { last<unsignedlong> t ; } ; struct CImgList<last<long>> { last<long> t ; } ; struct CImgList<last<unsignedlonglong>> { last<unsignedlonglong> t ; } ; struct CImgList<last<longlong>> { last<longlong> t ; } ; struct CImgList<last<float>> { last<float> t ; } ; struct CImgList<last<double>> { last<double> t ; } ; struct CImgList<last<longdouble>> { last<longdouble> t ; } ; struct last<bool> { bool t ; } ; struct last<signedchar> { signed char t ; } ; struct last<unsignedchar> { unsigned char t ; } ; struct last<char> { char t ; } ; struct last<unsignedshort> { unsigned short t ; } ; struct last<short> { short t ; } ; struct last<unsignedint> { unsigned int t ; } ; struct last<int> { int t ; } ; struct last<unsignedlong> { unsigned long t ; } ; struct last<long> { long t ; } ; struct last<unsignedlonglong> { unsigned long long t ; } ; struct last<longlong> { long long t ; } ; struct last<float> { float t ; } ; struct last<double> { double t ; } ; struct last<longdouble> { long double t ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4377 always 4377
  code always "template < typename T> struct last { T t; };\ntemplate < typename T > struct CImgList { T t; };\nCImgList < last < bool > > c1;\nCImgList < last < signed char > > c2;\nCImgList < last < unsigned char > > c3;\nCImgList < last < char > > c4;\nCImgList < last < unsigned short > > c5;\nCImgList < last < short > > c6;\nCImgList < last < unsigned int > > c7;\nCImgList < last < int > > c8;\nCImgList < last < unsigned long > > c9;\nCImgList < last < long > > c10;\nCImgList < last < unsigned long long > > c11;\nCImgList < last < long long > > c12;\nCImgList < last < float > > c13;\nCImgList < last < double > > c14;\nCImgList < last < long double > > c15;"
Line 4381
  66 always 66
  = always "template <int b> int a = 0;\nvoid c() {\n  a<1>;\n  [](auto b) {};\n}"
  "template <int b> int a = 0;\nvoid c() {\n  a<1>;\n  [](auto b) {};\n}" always "template <int b> int a = 0;\nvoid c() {\n  a<1>;\n  [](auto b) {};\n}"
Line 4386
  65 always 65
  = always "int a<1> ; a<1> = 0 ; void c ( ) { a<1> ; [ ] ( auto b ) { } ; }"
  "int a<1> ; a<1> = 0 ; void c ( ) { a<1> ; [ ] ( auto b ) { } ; }" always "int a<1> ; a<1> = 0 ; void c ( ) { a<1> ; [ ] ( auto b ) { } ; }"
Line 4391
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4391 always 4391
  exp always "int a<1> ; a<1> = 0 ; void c ( ) { a<1> ; [ ] ( auto b ) { } ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4391 always 4391
  code always "template <int b> int a = 0;\nvoid c() {\n  a<1>;\n  [](auto b) {};\n}"
Line 4395
  200 always 200
  = always "template <int> struct c { enum { b }; };\ntemplate <int> struct h { enum { d }; enum { e }; };\ntemplate <int f, long = h<f>::d, int g = h<f>::e> class i { enum { e = c<g>::b }; };\nvoid j() { i<2> a; }"
  "template <int> struct c { enum { b }; };\ntemplate <int> struct h { enum { d }; enum { e }; };\ntemplate <int f, long = h<f>::d, int g = h<f>::e> class i { enum { e = c<g>::b }; };\nvoid j() { i<2> a; }" always "template <int> struct c { enum { b }; };\ntemplate <int> struct h { enum { d }; enum { e }; };\ntemplate <int f, long = h<f>::d, int g = h<f>::e> class i { enum { e = c<g>::b }; };\nvoid j() { i<2> a; }"
Line 4399
  292 always 292
  = always "struct c<h<2>::e> ; struct h<2> ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct h<2> { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;"
  "struct c<h<2>::e> ; struct h<2> ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct h<2> { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;" always "struct c<h<2>::e> ; struct h<2> ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct h<2> { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;"
Line 4406
  292 always 292
  = always "struct c<h<2>::e> ; template < int > struct h { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;"
  "struct c<h<2>::e> ; template < int > struct h { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;" always "struct c<h<2>::e> ; template < int > struct h { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;"
Line 4412
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4412 always 4412
  exp always "struct c<h<2>::e> ; struct h<2> ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct h<2> { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;"
  act always "struct c<h<2>::e> ; template < int > struct h { enum Anonymous1 { d } ; enum Anonymous2 { e } ; } ; class i<2,h<2>::d,h<2>::e> ; void j ( ) { i<2,h<2>::d,h<2>::e> a ; } class i<2,h<2>::d,h<2>::e> { enum Anonymous3 { e = c<h<2>::e> :: b } ; } ; struct c<h<2>::e> { enum Anonymous0 { b } ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4412 always 4412
  code always "template <int> struct c { enum { b }; };\ntemplate <int> struct h { enum { d }; enum { e }; };\ntemplate <int f, long = h<f>::d, int g = h<f>::e> class i { enum { e = c<g>::b }; };\nvoid j() { i<2> a; }"
Line 4416
  104 always 104
  = always "template<typename T, typename... Args>\nvoid bar(T t, Args&&... args) { }\nvoid foo() { bar<int>(0, 1); }"
  "template<typename T, typename... Args>\nvoid bar(T t, Args&&... args) { }\nvoid foo() { bar<int>(0, 1); }" always "template<typename T, typename... Args>\nvoid bar(T t, Args&&... args) { }\nvoid foo() { bar<int>(0, 1); }"
Line 4419
  130 always 130
  = always "void bar<int> ( int t , Args && ... args ) ; void foo ( ) { bar<int> ( 0 , 1 ) ; } void bar<int> ( int t , Args && ... args ) { }"
  "void bar<int> ( int t , Args && ... args ) ; void foo ( ) { bar<int> ( 0 , 1 ) ; } void bar<int> ( int t , Args && ... args ) { }" always "void bar<int> ( int t , Args && ... args ) ; void foo ( ) { bar<int> ( 0 , 1 ) ; } void bar<int> ( int t , Args && ... args ) { }"
Line 4422
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4422 always 4422
  exp always "void bar<int> ( int t , Args && ... args ) ; void foo ( ) { bar<int> ( 0 , 1 ) ; } void bar<int> ( int t , Args && ... args ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4422 always 4422
  code always "template<typename T, typename... Args>\nvoid bar(T t, Args&&... args) { }\nvoid foo() { bar<int>(0, 1); }"
Line 4426
  262 always 262
  = always "namespace a {\ntemplate <typename, typename> struct b;\ntemplate <template <typename, typename> class = b> class c;\nusing d = c<>;\ntemplate <template <typename, typename = void> class> class c {};\n}\nnamespace std {\ntemplate <> void swap<a::d>(a::d &, a::d &) {}\n}"
  "namespace a {\ntemplate <typename, typename> struct b;\ntemplate <template <typename, typename> class = b> class c;\nusing d = c<>;\ntemplate <template <typename, typename = void> class> class c {};\n}\nnamespace std {\ntemplate <> void swap<a::d>(a::d &, a::d &) {}\n}" always "namespace a {\ntemplate <typename, typename> struct b;\ntemplate <template <typename, typename> class = b> class c;\nusing d = c<>;\ntemplate <template <typename, typename = void> class> class c {};\n}\nnamespace std {\ntemplate <> void swap<a::d>(a::d &, a::d &) {}\n}"
Line 4435
  279 always 279
  = always "namespace a { template < typename , typename > struct b ; template < template < typename , typename > class > class c ; class c<b> ; } namespace std { void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) ; void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) { } } class a :: c<b> { } ;"
  "namespace a { template < typename , typename > struct b ; template < template < typename , typename > class > class c ; class c<b> ; } namespace std { void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) ; void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) { } } class a :: c<b> { } ;" always "namespace a { template < typename , typename > struct b ; template < template < typename , typename > class > class c ; class c<b> ; } namespace std { void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) ; void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) { } } class a :: c<b> { } ;"
Line 4445
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4445 always 4445
  exp always "namespace a { template < typename , typename > struct b ; template < template < typename , typename > class > class c ; class c<b> ; } namespace std { void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) ; void swap<a::c<b>> ( a :: c<b> & , a :: c<b> & ) { } } class a :: c<b> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4445 always 4445
  code always "namespace a {\ntemplate <typename, typename> struct b;\ntemplate <template <typename, typename> class = b> class c;\nusing d = c<>;\ntemplate <template <typename, typename = void> class> class c {};\n}\nnamespace std {\ntemplate <> void swap<a::d>(a::d &, a::d &) {}\n}"
Line 4450
  128 always 128
  = always "namespace a {\ntemplate <typename> using b = int;\ntemplate <typename c> c d() { return d<b<c>>(); }\n}\nvoid e() { a::d<int>(); }\n"
  "namespace a {\ntemplate <typename> using b = int;\ntemplate <typename c> c d() { return d<b<c>>(); }\n}\nvoid e() { a::d<int>(); }\n" always "namespace a {\ntemplate <typename> using b = int;\ntemplate <typename c> c d() { return d<b<c>>(); }\n}\nvoid e() { a::d<int>(); }\n"
Line 4455
  113 always 113
  = always "namespace a { int d<int> ( ) ; } void e ( ) { a :: d<int> ( ) ; } int a :: d<int> ( ) { return d < int > ( ) ; }"
  "namespace a { int d<int> ( ) ; } void e ( ) { a :: d<int> ( ) ; } int a :: d<int> ( ) { return d < int > ( ) ; }" always "namespace a { int d<int> ( ) ; } void e ( ) { a :: d<int> ( ) ; } int a :: d<int> ( ) { return d < int > ( ) ; }"
Line 4458
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4458 always 4458
  exp always "namespace a { int d<int> ( ) ; } void e ( ) { a :: d<int> ( ) ; } int a :: d<int> ( ) { return d < int > ( ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4458 always 4458
  code always "namespace a {\ntemplate <typename> using b = int;\ntemplate <typename c> c d() { return d<b<c>>(); }\n}\nvoid e() { a::d<int>(); }\n"
Line 4463
  86 always 86
  = always "template <typename T, int value> T Get() {return value;}\nchar f() { Get<int,10>(); }\n"
  "template <typename T, int value> T Get() {return value;}\nchar f() { Get<int,10>(); }\n" always "template <typename T, int value> T Get() {return value;}\nchar f() { Get<int,10>(); }\n"
Line 4465
  91 always 91
  = always "int Get<int,10> ( ) ; char f ( ) { Get<int,10> ( ) ; } int Get<int,10> ( ) { return 10 ; }"
  "int Get<int,10> ( ) ; char f ( ) { Get<int,10> ( ) ; } int Get<int,10> ( ) { return 10 ; }" always "int Get<int,10> ( ) ; char f ( ) { Get<int,10> ( ) ; } int Get<int,10> ( ) { return 10 ; }"
Line 4468
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4468 always 4468
  exp always "int Get<int,10> ( ) ; char f ( ) { Get<int,10> ( ) ; } int Get<int,10> ( ) { return 10 ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4468 always 4468
  code always "template <typename T, int value> T Get() {return value;}\nchar f() { Get<int,10>(); }\n"
Line 4472
  123 always 123
  = always "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<int> s;"
  "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<int> s;" always "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<int> s;"
Line 4476
  141 always 141
  = always "template < typename T > struct C { } ; struct S<int> ; template < typename T > struct S < C < T > > { b } ; S<int> s ; struct S<int> { a } ;"
  "template < typename T > struct C { } ; struct S<int> ; template < typename T > struct S < C < T > > { b } ; S<int> s ; struct S<int> { a } ;" always "template < typename T > struct C { } ; struct S<int> ; template < typename T > struct S < C < T > > { b } ; S<int> s ; struct S<int> { a } ;"
Line 4477
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4477 always 4477
  exp always "template < typename T > struct C { } ; struct S<int> ; template < typename T > struct S < C < T > > { b } ; S<int> s ; struct S<int> { a } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4477 always 4477
  code always "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<int> s;"
Line 4481
  126 always 126
  = always "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<C<int>> s;"
  "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<C<int>> s;" always "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<C<int>> s;"
Line 4485
  138 always 138
  = always "template < typename T > struct C { } ; template < typename T > struct S { a } ; struct S<C<int>> ; S<C<int>> s ; struct S<C<int>> { b } ;"
  "template < typename T > struct C { } ; template < typename T > struct S { a } ; struct S<C<int>> ; S<C<int>> s ; struct S<C<int>> { b } ;" always "template < typename T > struct C { } ; template < typename T > struct S { a } ; struct S<C<int>> ; S<C<int>> s ; struct S<C<int>> { b } ;"
Line 4486
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4486 always 4486
  exp always "template < typename T > struct C { } ; template < typename T > struct S { a } ; struct S<C<int>> ; S<C<int>> s ; struct S<C<int>> { b } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4486 always 4486
  code always "template <typename T> struct C {};\ntemplate <typename T> struct S {a};\ntemplate <typename T> struct S<C<T>> {b};\nS<C<int>> s;"
Line 4490
  541 always 541
  = always "template <class T>\nstruct Unconst {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T> {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T&> {\n    typedef T& type;\n};\ntemplate <class T>\nstruct Unconst<T* const> {\n    typedef T* type;\n};\ntemplate <class T1, class T2>\nstruct type_equal {\n    enum {  value = 0   };\n};\ntemplate <class T>\nstruct type_equal<T, T> {\n    enum {  value = 1   };\n};\ntemplate<class T>\nstruct template_is_const\n{\n    enum {value = !type_equal<T, typename Unconst<T>::type>::value  };\n};"
  "template <class T>\nstruct Unconst {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T> {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T&> {\n    typedef T& type;\n};\ntemplate <class T>\nstruct Unconst<T* const> {\n    typedef T* type;\n};\ntemplate <class T1, class T2>\nstruct type_equal {\n    enum {  value = 0   };\n};\ntemplate <class T>\nstruct type_equal<T, T> {\n    enum {  value = 1   };\n};\ntemplate<class T>\nstruct template_is_const\n{\n    enum {value = !type_equal<T, typename Unconst<T>::type>::value  };\n};" always "template <class T>\nstruct Unconst {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T> {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T&> {\n    typedef T& type;\n};\ntemplate <class T>\nstruct Unconst<T* const> {\n    typedef T* type;\n};\ntemplate <class T1, class T2>\nstruct type_equal {\n    enum {  value = 0   };\n};\ntemplate <class T>\nstruct type_equal<T, T> {\n    enum {  value = 1   };\n};\ntemplate<class T>\nstruct template_is_const\n{\n    enum {value = !type_equal<T, typename Unconst<T>::type>::value  };\n};"
Line 4519
  518 always 518
  = always "template < class T > struct Unconst { } ; template < class T > struct Unconst < const T > { } ; template < class T > struct Unconst < const T & > { } ; template < class T > struct Unconst < T * const > { } ; template < class T1 , class T2 > struct type_equal { enum Anonymous0 { value = 0 } ; } ; template < class T > struct type_equal < T , T > { enum Anonymous1 { value = 1 } ; } ; template < class T > struct template_is_const { enum Anonymous2 { value = ! type_equal < T , Unconst < T > :: type > :: value } ; } ;"
  "template < class T > struct Unconst { } ; template < class T > struct Unconst < const T > { } ; template < class T > struct Unconst < const T & > { } ; template < class T > struct Unconst < T * const > { } ; template < class T1 , class T2 > struct type_equal { enum Anonymous0 { value = 0 } ; } ; template < class T > struct type_equal < T , T > { enum Anonymous1 { value = 1 } ; } ; template < class T > struct template_is_const { enum Anonymous2 { value = ! type_equal < T , Unconst < T > :: type > :: value } ; } ;" always "template < class T > struct Unconst { } ; template < class T > struct Unconst < const T > { } ; template < class T > struct Unconst < const T & > { } ; template < class T > struct Unconst < T * const > { } ; template < class T1 , class T2 > struct type_equal { enum Anonymous0 { value = 0 } ; } ; template < class T > struct type_equal < T , T > { enum Anonymous1 { value = 1 } ; } ; template < class T > struct template_is_const { enum Anonymous2 { value = ! type_equal < T , Unconst < T > :: type > :: value } ; } ;"
Line 4526
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4526 always 4526
  exp1 always "template < class T > struct Unconst { } ; template < class T > struct Unconst < const T > { } ; template < class T > struct Unconst < const T & > { } ; template < class T > struct Unconst < T * const > { } ; template < class T1 , class T2 > struct type_equal { enum Anonymous0 { value = 0 } ; } ; template < class T > struct type_equal < T , T > { enum Anonymous1 { value = 1 } ; } ; template < class T > struct template_is_const { enum Anonymous2 { value = ! type_equal < T , Unconst < T > :: type > :: value } ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4526 always 4526
  code1 always "template <class T>\nstruct Unconst {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T> {\n    typedef T type;\n};\ntemplate <class T>\nstruct Unconst<const T&> {\n    typedef T& type;\n};\ntemplate <class T>\nstruct Unconst<T* const> {\n    typedef T* type;\n};\ntemplate <class T1, class T2>\nstruct type_equal {\n    enum {  value = 0   };\n};\ntemplate <class T>\nstruct type_equal<T, T> {\n    enum {  value = 1   };\n};\ntemplate<class T>\nstruct template_is_const\n{\n    enum {value = !type_equal<T, typename Unconst<T>::type>::value  };\n};"
Line 4531
  97 always 97
  = always "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
  "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n" always "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
Line 4540
  149 always 149
  = always "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
  "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;" always "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
Line 4551
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4551 always 4551
  expected always "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4551 always 4551
  code always "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
Line 4554
  112 always 112
  = always "template <class T, int n1=3, int n2=2>\nclass A\n{ T ar[n1+n2]; };\n\nvoid f()\n{\n    A<int> a1;\n    A<int,3> a2;\n}\n"
  "template <class T, int n1=3, int n2=2>\nclass A\n{ T ar[n1+n2]; };\n\nvoid f()\n{\n    A<int> a1;\n    A<int,3> a2;\n}\n" always "template <class T, int n1=3, int n2=2>\nclass A\n{ T ar[n1+n2]; };\n\nvoid f()\n{\n    A<int> a1;\n    A<int,3> a2;\n}\n"
Line 4564
  108 always 108
  = always "class A<int,3,2> ; void f ( ) { A<int,3,2> a1 ; A<int,3,2> a2 ; } class A<int,3,2> { int ar [ 3 + 2 ] ; } ;"
  "class A<int,3,2> ; void f ( ) { A<int,3,2> a1 ; A<int,3,2> a2 ; } class A<int,3,2> { int ar [ 3 + 2 ] ; } ;" always "class A<int,3,2> ; void f ( ) { A<int,3,2> a1 ; A<int,3,2> a2 ; } class A<int,3,2> { int ar [ 3 + 2 ] ; } ;"
Line 4572
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4572 always 4572
  expected always "class A<int,3,2> ; void f ( ) { A<int,3,2> a1 ; A<int,3,2> a2 ; } class A<int,3,2> { int ar [ 3 + 2 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4572 always 4572
  code always "template <class T, int n1=3, int n2=2>\nclass A\n{ T ar[n1+n2]; };\n\nvoid f()\n{\n    A<int> a1;\n    A<int,3> a2;\n}\n"
Line 4575
  102 always 102
  = always "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,(int)2> a1;\n    A<int> a2;\n}\n"
  "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,(int)2> a1;\n    A<int> a2;\n}\n" always "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,(int)2> a1;\n    A<int> a2;\n}\n"
Line 4584
  172 always 172
  = always "class A<int,(int)2> ; class A<int,3> ; void f ( ) { A<int,(int)2> a1 ; A<int,3> a2 ; } class A<int,(int)2> { int ar [ ( int ) 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
  "class A<int,(int)2> ; class A<int,3> ; void f ( ) { A<int,(int)2> a1 ; A<int,3> a2 ; } class A<int,(int)2> { int ar [ ( int ) 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;" always "class A<int,(int)2> ; class A<int,3> ; void f ( ) { A<int,(int)2> a1 ; A<int,3> a2 ; } class A<int,(int)2> { int ar [ ( int ) 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
Line 4595
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4595 always 4595
  expected always "class A<int,(int)2> ; class A<int,3> ; void f ( ) { A<int,(int)2> a1 ; A<int,3> a2 ; } class A<int,(int)2> { int ar [ ( int ) 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4595 always 4595
  code always "template <class T, int n=3>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,(int)2> a1;\n    A<int> a2;\n}\n"
Line 4598
  150 always 150
  = always "class A { }; template<class T> class B { }; template<class T1, class T2 = B<T1>> class C { }; template<class T1 = A, typename T2 = B<A>> class D { };"
  "class A { }; template<class T> class B { }; template<class T1, class T2 = B<T1>> class C { }; template<class T1 = A, typename T2 = B<A>> class D { };" always "class A { }; template<class T> class B { }; template<class T1, class T2 = B<T1>> class C { }; template<class T1 = A, typename T2 = B<A>> class D { };"
Line 4602
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4602 always 4602
  "class A { } ; template < class T > class B { } ; template < class T1 , class T2 = B < T1 > > class C { } ; template < class T1 = A , typename T2 = B < A > > class D { } ;" always "class A { } ; template < class T > class B { } ; template < class T1 , class T2 = B < T1 > > class C { } ; template < class T1 = A , typename T2 = B < A > > class D { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4602 always 4602
  code always "class A { }; template<class T> class B { }; template<class T1, class T2 = B<T1>> class C { }; template<class T1 = A, typename T2 = B<A>> class D { };"
Line 4609
  179 always 179
  = always "template<class T, class U> class DefaultMemory {}; template<class Key, class Val, class Mem=DefaultMemory<Key,Val> > class thv_table_c  {}; thv_table_c<void *,void *> id_table_m;"
  "template<class T, class U> class DefaultMemory {}; template<class Key, class Val, class Mem=DefaultMemory<Key,Val> > class thv_table_c  {}; thv_table_c<void *,void *> id_table_m;" always "template<class T, class U> class DefaultMemory {}; template<class Key, class Val, class Mem=DefaultMemory<Key,Val> > class thv_table_c  {}; thv_table_c<void *,void *> id_table_m;"
Line 4612
  246 always 246
  = always "template < class T , class U > class DefaultMemory { } ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> ; thv_table_c<void*,void*,DefaultMemory<void*,void*>> id_table_m ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> { } ;"
  "template < class T , class U > class DefaultMemory { } ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> ; thv_table_c<void*,void*,DefaultMemory<void*,void*>> id_table_m ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> { } ;" always "template < class T , class U > class DefaultMemory { } ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> ; thv_table_c<void*,void*,DefaultMemory<void*,void*>> id_table_m ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> { } ;"
Line 4616
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4616 always 4616
  exp always "template < class T , class U > class DefaultMemory { } ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> ; thv_table_c<void*,void*,DefaultMemory<void*,void*>> id_table_m ; class thv_table_c<void*,void*,DefaultMemory<void*,void*>> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4616 always 4616
  code always "template<class T, class U> class DefaultMemory {}; template<class Key, class Val, class Mem=DefaultMemory<Key,Val> > class thv_table_c  {}; thv_table_c<void *,void *> id_table_m;"
Line 4620
  89 always 89
  = always "template <typename = void> struct a {\n  void c();\n};\nvoid f() {\n  a<> b;\n  b.a<>::c();\n}"
  "template <typename = void> struct a {\n  void c();\n};\nvoid f() {\n  a<> b;\n  b.a<>::c();\n}" always "template <typename = void> struct a {\n  void c();\n};\nvoid f() {\n  a<> b;\n  b.a<>::c();\n}"
Line 4627
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4627 always 4627
  "struct a<void> ; void f ( ) { a<void> b ; b . a<void> :: c ( ) ; } struct a<void> { void c ( ) ; } ;" always "struct a<void> ; void f ( ) { a<void> b ; b . a<void> :: c ( ) ; } struct a<void> { void c ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4627 always 4627
  code always "template <typename = void> struct a {\n  void c();\n};\nvoid f() {\n  a<> b;\n  b.a<>::c();\n}"
Line 4638
  326 always 326
  = always "template< typename T0 = void > class A;\ntemplate<>\nclass A< void > {\n    public:\n        A() { }\n        ~A() { }\n        void Print() { std::cout << \"A\" << std::endl; }\n};\nclass B : public A<> {\n    public:\n        B() { }\n        ~B() { }\n};\nint main( int argc, char* argv[] ) {\n    B b;\n    b.A<>::Print();\n    return 0;\n}"
  "template< typename T0 = void > class A;\ntemplate<>\nclass A< void > {\n    public:\n        A() { }\n        ~A() { }\n        void Print() { std::cout << \"A\" << std::endl; }\n};\nclass B : public A<> {\n    public:\n        B() { }\n        ~B() { }\n};\nint main( int argc, char* argv[] ) {\n    B b;\n    b.A<>::Print();\n    return 0;\n}" always "template< typename T0 = void > class A;\ntemplate<>\nclass A< void > {\n    public:\n        A() { }\n        ~A() { }\n        void Print() { std::cout << \"A\" << std::endl; }\n};\nclass B : public A<> {\n    public:\n        B() { }\n        ~B() { }\n};\nint main( int argc, char* argv[] ) {\n    B b;\n    b.A<>::Print();\n    return 0;\n}"
Line 4656
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4656 always 4656
  "class A<void> ; template < typename T0 > class A ; class A<void> { public: A<void> ( ) { } ~ A<void> ( ) { } void Print ( ) { std :: cout << \"A\" << std :: endl ; } } ; class B : public A<void> { public: B ( ) { } ~ B ( ) { } } ; int main ( int argc , char * argv [ ] ) { B b ; b . A<void> :: Print ( ) ; return 0 ; }" always "class A<void> ; template < typename T0 > class A ; class A<void> { public: A<void> ( ) { } ~ A<void> ( ) { } void Print ( ) { std :: cout << \"A\" << std :: endl ; } } ; class B : public A<void> { public: B ( ) { } ~ B ( ) { } } ; int main ( int argc , char * argv [ ] ) { B b ; b . A<void> :: Print ( ) ; return 0 ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4656 always 4656
  code always "template< typename T0 = void > class A;\ntemplate<>\nclass A< void > {\n    public:\n        A() { }\n        ~A() { }\n        void Print() { std::cout << \"A\" << std::endl; }\n};\nclass B : public A<> {\n    public:\n        B() { }\n        ~B() { }\n};\nint main( int argc, char* argv[] ) {\n    B b;\n    b.A<>::Print();\n    return 0;\n}"
Line 4679
  132 always 132
  = always "template <class T, int n=3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
  "template <class T, int n=3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n" always "template <class T, int n=3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
Line 4690
  149 always 149
  = always "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
  "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;" always "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
Line 4701
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4701 always 4701
  exp always "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4701 always 4701
  code always "template <class T, int n=3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
Line 4704
  130 always 130
  = always "template <class, int = 3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
  "template <class, int = 3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n" always "template <class, int = 3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
Line 4715
  149 always 149
  = always "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
  "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;" always "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
Line 4726
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4726 always 4726
  exp always "class A<int,2> ; class A<int,3> ; void f ( ) { A<int,2> a1 ; A<int,3> a2 ; } class A<int,2> { int ar [ 2 ] ; } ; class A<int,3> { int ar [ 3 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4726 always 4726
  code always "template <class, int = 3> class A;\ntemplate <class T, int n>\nclass A\n{ T ar[n]; };\n\nvoid f()\n{\n    A<int,2> a1;\n    A<int> a2;\n}\n"
Line 4729
  289 always 289
  = always "template<typename Lhs, int TriangularPart = (int(Lhs::Flags) & LowerTriangularBit)>\nstruct ei_solve_triangular_selector;\ntemplate<typename Lhs, int UpLo>\nstruct ei_solve_triangular_selector<Lhs,UpLo> {\n};\ntemplate<typename Lhs, int TriangularPart>\nstruct ei_solve_triangular_selector { };"
  "template<typename Lhs, int TriangularPart = (int(Lhs::Flags) & LowerTriangularBit)>\nstruct ei_solve_triangular_selector;\ntemplate<typename Lhs, int UpLo>\nstruct ei_solve_triangular_selector<Lhs,UpLo> {\n};\ntemplate<typename Lhs, int TriangularPart>\nstruct ei_solve_triangular_selector { };" always "template<typename Lhs, int TriangularPart = (int(Lhs::Flags) & LowerTriangularBit)>\nstruct ei_solve_triangular_selector;\ntemplate<typename Lhs, int UpLo>\nstruct ei_solve_triangular_selector<Lhs,UpLo> {\n};\ntemplate<typename Lhs, int TriangularPart>\nstruct ei_solve_triangular_selector { };"
Line 4737
  364 always 364
  = always "template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector ; template < typename Lhs , int UpLo > struct ei_solve_triangular_selector < Lhs , UpLo > { } ; template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector { } ;"
  "template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector ; template < typename Lhs , int UpLo > struct ei_solve_triangular_selector < Lhs , UpLo > { } ; template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector { } ;" always "template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector ; template < typename Lhs , int UpLo > struct ei_solve_triangular_selector < Lhs , UpLo > { } ; template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector { } ;"
Line 4745
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4745 always 4745
  exp always "template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector ; template < typename Lhs , int UpLo > struct ei_solve_triangular_selector < Lhs , UpLo > { } ; template < typename Lhs , int TriangularPart = ( int ( Lhs :: Flags ) & LowerTriangularBit ) > struct ei_solve_triangular_selector { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4745 always 4745
  code always "template<typename Lhs, int TriangularPart = (int(Lhs::Flags) & LowerTriangularBit)>\nstruct ei_solve_triangular_selector;\ntemplate<typename Lhs, int UpLo>\nstruct ei_solve_triangular_selector<Lhs,UpLo> {\n};\ntemplate<typename Lhs, int TriangularPart>\nstruct ei_solve_triangular_selector { };"
Line 4748
  226 always 226
  = always "template<int A = 128, class T = wchar_t>\nclass Foo;\ntemplate<int A, class T>\nclass Foo\n{\npublic:\n  T operator[](int Index) const;\n};\ntemplate<int A, class T>\nT Foo<A, T>::operator[](int Index) const\n{\n  return T{};\n}\nFoo<> f;"
  "template<int A = 128, class T = wchar_t>\nclass Foo;\ntemplate<int A, class T>\nclass Foo\n{\npublic:\n  T operator[](int Index) const;\n};\ntemplate<int A, class T>\nT Foo<A, T>::operator[](int Index) const\n{\n  return T{};\n}\nFoo<> f;" always "template<int A = 128, class T = wchar_t>\nclass Foo;\ntemplate<int A, class T>\nclass Foo\n{\npublic:\n  T operator[](int Index) const;\n};\ntemplate<int A, class T>\nT Foo<A, T>::operator[](int Index) const\n{\n  return T{};\n}\nFoo<> f;"
Line 4762
  208 always 208
  = always "class Foo<128,wchar_t> ; Foo<128,wchar_t> f ; class Foo<128,wchar_t> { public: wchar_t operator[] ( int Index ) const ; } ; wchar_t Foo<128,wchar_t> :: operator[] ( int Index ) const { return wchar_t { } ; }"
  "class Foo<128,wchar_t> ; Foo<128,wchar_t> f ; class Foo<128,wchar_t> { public: wchar_t operator[] ( int Index ) const ; } ; wchar_t Foo<128,wchar_t> :: operator[] ( int Index ) const { return wchar_t { } ; }" always "class Foo<128,wchar_t> ; Foo<128,wchar_t> f ; class Foo<128,wchar_t> { public: wchar_t operator[] ( int Index ) const ; } ; wchar_t Foo<128,wchar_t> :: operator[] ( int Index ) const { return wchar_t { } ; }"
Line 4765
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4765 always 4765
  exp always "class Foo<128,wchar_t> ; Foo<128,wchar_t> f ; class Foo<128,wchar_t> { public: wchar_t operator[] ( int Index ) const ; } ; wchar_t Foo<128,wchar_t> :: operator[] ( int Index ) const { return wchar_t { } ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4765 always 4765
  code always "template<int A = 128, class T = wchar_t>\nclass Foo;\ntemplate<int A, class T>\nclass Foo\n{\npublic:\n  T operator[](int Index) const;\n};\ntemplate<int A, class T>\nT Foo<A, T>::operator[](int Index) const\n{\n  return T{};\n}\nFoo<> f;"
Line 4770
  206 always 206
  = always "template <typename T, typename U=T>\nclass A\n{\npublic:\n  void foo() {\n    int a;\n    a = static_cast<U>(a);\n  }\n};\n\ntemplate <typename T>\nclass B\n{\nprotected:\n  A<int> a;\n};\n\nclass C\n  : public B<int>\n{\n};\n"
  "template <typename T, typename U=T>\nclass A\n{\npublic:\n  void foo() {\n    int a;\n    a = static_cast<U>(a);\n  }\n};\n\ntemplate <typename T>\nclass B\n{\nprotected:\n  A<int> a;\n};\n\nclass C\n  : public B<int>\n{\n};\n" always "template <typename T, typename U=T>\nclass A\n{\npublic:\n  void foo() {\n    int a;\n    a = static_cast<U>(a);\n  }\n};\n\ntemplate <typename T>\nclass B\n{\nprotected:\n  A<int> a;\n};\n\nclass C\n  : public B<int>\n{\n};\n"
Line 4792
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4792 always 4792
  code always "template <typename T, typename U=T>\nclass A\n{\npublic:\n  void foo() {\n    int a;\n    a = static_cast<U>(a);\n  }\n};\n\ntemplate <typename T>\nclass B\n{\nprotected:\n  A<int> a;\n};\n\nclass C\n  : public B<int>\n{\n};\n"
Line 4795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4795 always 4795
  "" always ""
Line 4800
  49 always 49
  = always "template <class T>\nvoid foo(typename T::t *)\n{ }"
  "template <class T>\nvoid foo(typename T::t *)\n{ }" always "template <class T>\nvoid foo(typename T::t *)\n{ }"
Line 4805
  47 always 47
  = always "template < class T > void foo ( T :: t * ) { }"
  "template < class T > void foo ( T :: t * ) { }" always "template < class T > void foo ( T :: t * ) { }"
Line 4806
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4806 always 4806
  expected always "template < class T > void foo ( T :: t * ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4806 always 4806
  code always "template <class T>\nvoid foo(typename T::t *)\n{ }"
Line 4810
  51 always 51
  = always "void f() {\n    x(sizeof typename);\n    type = 0;\n}"
  "void f() {\n    x(sizeof typename);\n    type = 0;\n}" always "void f() {\n    x(sizeof typename);\n    type = 0;\n}"
Line 4815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4815 always 4815
  "void f ( ) { x ( sizeof ( typename ) ) ; type = 0 ; }" always "void f ( ) { x ( sizeof ( typename ) ) ; type = 0 ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4815 always 4815
  code always "void f() {\n    x(sizeof typename);\n    type = 0;\n}"
Line 4822
  60 always 60
  = always "class Fred {\n    template<class T> explicit Fred(T t) { }\n}"
  "class Fred {\n    template<class T> explicit Fred(T t) { }\n}" always "class Fred {\n    template<class T> explicit Fred(T t) { }\n}"
Line 4825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4825 always 4825
  "class Fred { template < class T > explicit Fred ( T t ) { } }" always "class Fred { template < class T > explicit Fred ( T t ) { } }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4825 always 4825
  code always "class Fred {\n    template<class T> explicit Fred(T t) { }\n}"
Line 4828
  51 always 51
  = always "class Fred {\n    template<class T> Fred(T t) { }\n}"
  "class Fred {\n    template<class T> Fred(T t) { }\n}" always "class Fred {\n    template<class T> Fred(T t) { }\n}"
Line 4831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4831 always 4831
  "class Fred { template < class T > Fred ( T t ) { } }" always "class Fred { template < class T > Fred ( T t ) { } }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4831 always 4831
  code2 always "class Fred {\n    template<class T> Fred(T t) { }\n}"
Line 4836
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4836 always 4836
  "x<y>z> xyz;" always "x<y>z> xyz;"
Line 4837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4837 always 4837
  "" always ""
Line 4840
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4840 always 4840
  "template<class T> operator<(T a, T b) { }" always "template<class T> operator<(T a, T b) { }"
Line 4841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4841 always 4841
  "" always ""
Line 4844
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4844 always 4844
  "void f(a) int a;\n{ ;x<y; }" always "void f(a) int a;\n{ ;x<y; }"
Line 4846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4846 always 4846
  "" always ""
Line 4849
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4849 always 4849
  "void f()\n{ try { ;x<y; } }" always "void f()\n{ try { ;x<y; } }"
Line 4851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4851 always 4851
  "" always ""
Line 4854
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4854 always 4854
  "MACRO(({ i < x }))" always "MACRO(({ i < x }))"
Line 4855
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4855 always 4855
  "" always ""
Line 4858
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4858 always 4858
  "x<y<int> xyz;\n" always "x<y<int> xyz;\n"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4858 always 4858
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4858 always 4858
  false always 0
Line 4861
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4861 always 4861
  "typedef\n    typename boost::mpl::if_c<\n          _visitableIndex < boost::mpl::size< typename _Visitables::ConcreteVisitables >::value\n          , ConcreteVisitable\n          , Dummy< _visitableIndex >\n    >::type ConcreteVisitableOrDummy;\n" always "typedef\n    typename boost::mpl::if_c<\n          _visitableIndex < boost::mpl::size< typename _Visitables::ConcreteVisitables >::value\n          , ConcreteVisitable\n          , Dummy< _visitableIndex >\n    >::type ConcreteVisitableOrDummy;\n"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4861 always 4861
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4861 always 4861
  false always 0
Line 4869
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4869 always 4869
  "struct A {int a;int b};\nclass Fred {public:\n    Fred() : a({1,2}) {\n        for (int i=0;i<6;i++);\n    }\nprivate:\n    A a;\n};" always "struct A {int a;int b};\nclass Fred {public:\n    Fred() : a({1,2}) {\n        for (int i=0;i<6;i++);\n    }\nprivate:\n    A a;\n};"
Line 4878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4878 always 4878
  "" always ""
Line 4882
  = always "template < long Num > constexpr bool foo < bar < Num > > = true ;"
  "template < long Num > constexpr bool foo < bar < Num > > = true ;" always "template < long Num > constexpr bool foo < bar < Num > > = true ;"
Line 4883
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4883 always 4883
  expected always {"template < long Num > constexpr bool foo < bar < Num > > = true ;",size=65}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4883 always 4883
  "template <long Num>\nconstexpr bool foo<bar<Num> > = true;\n" always "template <long Num>\nconstexpr bool foo<bar<Num> > = true;\n"
Line 4886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4886 always 4886
  "" always ""
Line 4887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4887 always 4887
  expected always "template < long Num > constexpr bool foo < bar < Num > > = true ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4887 always 4887
  "template <long Num>\nconstexpr bool foo<bar<Num>> = true;\n" always "template <long Num>\nconstexpr bool foo<bar<Num>> = true;\n"
Line 4890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4890 always 4890
  "" always ""
Line 4895
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4895 always 4895
  "struct A {}; struct B { template <void (A::*)() const> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};" always "struct A {}; struct B { template <void (A::*)() const> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};"
Line 4901
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4901 always 4901
  "struct A {}; struct B { template <void (A::*)() volatile> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};" always "struct A {}; struct B { template <void (A::*)() volatile> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};"
Line 4907
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4907 always 4907
  "struct A {}; struct B { template <void (A::*)() const volatile> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};" always "struct A {}; struct B { template <void (A::*)() const volatile> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};"
Line 4913
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4913 always 4913
  "struct A {}; struct B { template <void (A::*)() volatile const> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};" always "struct A {}; struct B { template <void (A::*)() volatile const> struct BB {}; template <bool BT> static bool foo(int) { return true; } void bar() { bool b = foo<true>(0); }};"
Line 4923
  73 always 73
  = always "namespace {\n  template<class T> void Fred(T value) { }\n}\nFred<int>(123);"
  "namespace {\n  template<class T> void Fred(T value) { }\n}\nFred<int>(123);" always "namespace {\n  template<class T> void Fred(T value) { }\n}\nFred<int>(123);"
Line 4927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4927 always 4927
  "namespace { void Fred<int> ( int value ) ; } Fred<int> ( 123 ) ; void Fred<int> ( int value ) { }" always "namespace { void Fred<int> ( int value ) ; } Fred<int> ( 123 ) ; void Fred<int> ( int value ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4927 always 4927
  code always "namespace {\n  template<class T> void Fred(T value) { }\n}\nFred<int>(123);"
Line 4936
  63 always 63
  = always "namespace X {\n  template<class T> struct S { };\n}\nX::S<int> s;"
  "namespace X {\n  template<class T> struct S { };\n}\nX::S<int> s;" always "namespace X {\n  template<class T> struct S { };\n}\nX::S<int> s;"
Line 4940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4940 always 4940
  "namespace X { struct S<int> ; } X :: S<int> s ; struct X :: S<int> { } ;" always "namespace X { struct S<int> ; } X :: S<int> s ; struct X :: S<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4940 always 4940
  code always "namespace X {\n  template<class T> struct S { };\n}\nX::S<int> s;"
Line 4948
  127 always 127
  = always "namespace test16 {\n  template <class T> struct foo {\n    static void *bar();\n  };\n  void *test() { return foo<int>::bar(); }\n}"
  "namespace test16 {\n  template <class T> struct foo {\n    static void *bar();\n  };\n  void *test() { return foo<int>::bar(); }\n}" always "namespace test16 {\n  template <class T> struct foo {\n    static void *bar();\n  };\n  void *test() { return foo<int>::bar(); }\n}"
Line 4954
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4954 always 4954
  "namespace test16 { struct foo<int> ; void * test ( ) { return foo<int> :: bar ( ) ; } } struct test16 :: foo<int> { static void * bar ( ) ; } ;" always "namespace test16 { struct foo<int> ; void * test ( ) { return foo<int> :: bar ( ) ; } } struct test16 :: foo<int> { static void * bar ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4954 always 4954
  code always "namespace test16 {\n  template <class T> struct foo {\n    static void *bar();\n  };\n  void *test() { return foo<int>::bar(); }\n}"
Line 4966
  149 always 149
  = always "namespace foo {\n  template<class T> class A { void dostuff() {} };\n  struct S : public A<int> {\n    void f() {\n      A<int>::dostuff();\n    }\n  };\n}"
  "namespace foo {\n  template<class T> class A { void dostuff() {} };\n  struct S : public A<int> {\n    void f() {\n      A<int>::dostuff();\n    }\n  };\n}" always "namespace foo {\n  template<class T> class A { void dostuff() {} };\n  struct S : public A<int> {\n    void f() {\n      A<int>::dostuff();\n    }\n  };\n}"
Line 4974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4974 always 4974
  "namespace foo { class A<int> ; struct S : public A<int> { void f ( ) { A<int> :: dostuff ( ) ; } } ; } class foo :: A<int> { void dostuff ( ) { } } ;" always "namespace foo { class A<int> ; struct S : public A<int> { void f ( ) { A<int> :: dostuff ( ) ; } } ; } class foo :: A<int> { void dostuff ( ) { } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4974 always 4974
  code always "namespace foo {\n  template<class T> class A { void dostuff() {} };\n  struct S : public A<int> {\n    void f() {\n      A<int>::dostuff();\n    }\n  };\n}"
Line 4986
  57 always 57
  = always "template<class C> struct S {};\nnamespace X { S<int> s; }"
  "template<class C> struct S {};\nnamespace X { S<int> s; }" always "template<class C> struct S {};\nnamespace X { S<int> s; }"
Line 4988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4988 always 4988
  "struct S<int> ; namespace X { S<int> s ; } struct S<int> { } ;" always "struct S<int> ; namespace X { S<int> s ; } struct S<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  4988 always 4988
  code always "template<class C> struct S {};\nnamespace X { S<int> s; }"
Line 4994
  374 always 374
  = always "namespace NS {\ntemplate <typename T> union C {\n  char dummy[sizeof(T)];\n  T value;\n  C();\n  ~C();\n  C(const C &);\n  C & operator = (const C &);\n};\n}\nNS::C<int> intC;\ntemplate <typename T> NS::C<T>::C() {}\ntemplate <typename T> NS::C<T>::~C() {}\ntemplate <typename T> NS::C<T>::C(const NS::C<T> &) {}\ntemplate <typename T> NS::C<T> & NS::C<T>::operator=(const NS::C<T> &) {}"
  "namespace NS {\ntemplate <typename T> union C {\n  char dummy[sizeof(T)];\n  T value;\n  C();\n  ~C();\n  C(const C &);\n  C & operator = (const C &);\n};\n}\nNS::C<int> intC;\ntemplate <typename T> NS::C<T>::C() {}\ntemplate <typename T> NS::C<T>::~C() {}\ntemplate <typename T> NS::C<T>::C(const NS::C<T> &) {}\ntemplate <typename T> NS::C<T> & NS::C<T>::operator=(const NS::C<T> &) {}" always "namespace NS {\ntemplate <typename T> union C {\n  char dummy[sizeof(T)];\n  T value;\n  C();\n  ~C();\n  C(const C &);\n  C & operator = (const C &);\n};\n}\nNS::C<int> intC;\ntemplate <typename T> NS::C<T>::C() {}\ntemplate <typename T> NS::C<T>::~C() {}\ntemplate <typename T> NS::C<T>::C(const NS::C<T> &) {}\ntemplate <typename T> NS::C<T> & NS::C<T>::operator=(const NS::C<T> &) {}"
Line 5009
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5009 always 5009
  "namespace NS { union C<int> ; } NS :: C<int> intC ; union NS :: C<int> { char dummy [ sizeof ( int ) ] ; int value ; C<int> ( ) ; ~ C<int> ( ) ; C<int> ( const NS :: C<int> & ) ; NS :: C<int> & operator= ( const NS :: C<int> & ) ; } ; NS :: C<int> :: C<int> ( ) { } NS :: C<int> :: ~ C<int> ( ) { } NS :: C<int> :: C<int> ( const NS :: C<int> & ) { } NS :: C<int> & NS :: C<int> :: operator= ( const NS :: C<int> & ) { }" always "namespace NS { union C<int> ; } NS :: C<int> intC ; union NS :: C<int> { char dummy [ sizeof ( int ) ] ; int value ; C<int> ( ) ; ~ C<int> ( ) ; C<int> ( const NS :: C<int> & ) ; NS :: C<int> & operator= ( const NS :: C<int> & ) ; } ; NS :: C<int> :: C<int> ( ) { } NS :: C<int> :: ~ C<int> ( ) { } NS :: C<int> :: C<int> ( const NS :: C<int> & ) { } NS :: C<int> & NS :: C<int> :: operator= ( const NS :: C<int> & ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5009 always 5009
  code always "namespace NS {\ntemplate <typename T> union C {\n  char dummy[sizeof(T)];\n  T value;\n  C();\n  ~C();\n  C(const C &);\n  C & operator = (const C &);\n};\n}\nNS::C<int> intC;\ntemplate <typename T> NS::C<T>::C() {}\ntemplate <typename T> NS::C<T>::~C() {}\ntemplate <typename T> NS::C<T>::C(const NS::C<T> &) {}\ntemplate <typename T> NS::C<T> & NS::C<T>::operator=(const NS::C<T> &) {}"
Line 5027
  179 always 179
  = always "namespace N1 {\nnamespace N2 {\n    struct C { };\n    template <class T> struct CT { };\n    C c1;\n    CT<int> ct1;\n}\nN2::C c2;\nN2::CT<int> ct2;\n}\nN1::N2::C c3;\nN1::N2::CT<int> ct3;"
  "namespace N1 {\nnamespace N2 {\n    struct C { };\n    template <class T> struct CT { };\n    C c1;\n    CT<int> ct1;\n}\nN2::C c2;\nN2::CT<int> ct2;\n}\nN1::N2::C c3;\nN1::N2::CT<int> ct3;" always "namespace N1 {\nnamespace N2 {\n    struct C { };\n    template <class T> struct CT { };\n    C c1;\n    CT<int> ct1;\n}\nN2::C c2;\nN2::CT<int> ct2;\n}\nN1::N2::C c3;\nN1::N2::CT<int> ct3;"
Line 5039
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5039 always 5039
  "namespace N1 { namespace N2 { struct C { } ; struct CT<int> ; C c1 ; CT<int> ct1 ; } N2 :: C c2 ; N2 :: CT<int> ct2 ; } N1 :: N2 :: C c3 ; N1 :: N2 :: CT<int> ct3 ; struct N1 :: N2 :: CT<int> { } ;" always "namespace N1 { namespace N2 { struct C { } ; struct CT<int> ; C c1 ; CT<int> ct1 ; } N2 :: C c2 ; N2 :: CT<int> ct2 ; } N1 :: N2 :: C c3 ; N1 :: N2 :: CT<int> ct3 ; struct N1 :: N2 :: CT<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5039 always 5039
  code always "namespace N1 {\nnamespace N2 {\n    struct C { };\n    template <class T> struct CT { };\n    C c1;\n    CT<int> ct1;\n}\nN2::C c2;\nN2::CT<int> ct2;\n}\nN1::N2::C c3;\nN1::N2::CT<int> ct3;"
Line 5054
  468 always 468
  = always "namespace NS1 {\nnamespace NS2 {\n    template <typename T>\n    struct Fred {\n        Fred();\n        Fred(const Fred &);\n        Fred & operator = (const Fred &);\n        ~Fred();\n    };\n    template <typename T>\n    Fred<T>::Fred() { }\n    template <typename T>\n    Fred<T>::Fred(const Fred<T> & f) { }\n    template <typename T>\n    Fred<T> & Fred<T>::operator = (const Fred<T> & f) { }\n    template <typename T>\n    Fred<T>::~Fred() { }\n}\n}\nNS1::NS2::Fred<int> fred;"
  "namespace NS1 {\nnamespace NS2 {\n    template <typename T>\n    struct Fred {\n        Fred();\n        Fred(const Fred &);\n        Fred & operator = (const Fred &);\n        ~Fred();\n    };\n    template <typename T>\n    Fred<T>::Fred() { }\n    template <typename T>\n    Fred<T>::Fred(const Fred<T> & f) { }\n    template <typename T>\n    Fred<T> & Fred<T>::operator = (const Fred<T> & f) { }\n    template <typename T>\n    Fred<T>::~Fred() { }\n}\n}\nNS1::NS2::Fred<int> fred;" always "namespace NS1 {\nnamespace NS2 {\n    template <typename T>\n    struct Fred {\n        Fred();\n        Fred(const Fred &);\n        Fred & operator = (const Fred &);\n        ~Fred();\n    };\n    template <typename T>\n    Fred<T>::Fred() { }\n    template <typename T>\n    Fred<T>::Fred(const Fred<T> & f) { }\n    template <typename T>\n    Fred<T> & Fred<T>::operator = (const Fred<T> & f) { }\n    template <typename T>\n    Fred<T>::~Fred() { }\n}\n}\nNS1::NS2::Fred<int> fred;"
Line 5074
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5074 always 5074
  "namespace NS1 { namespace NS2 { struct Fred<int> ; } } NS1 :: NS2 :: Fred<int> fred ; struct NS1 :: NS2 :: Fred<int> { Fred<int> ( ) ; Fred<int> ( const NS1 :: NS2 :: Fred<int> & ) ; NS1 :: NS2 :: Fred<int> & operator= ( const NS1 :: NS2 :: Fred<int> & ) ; ~ Fred<int> ( ) ; } ; NS1 :: NS2 :: Fred<int> :: Fred<int> ( ) { } NS1 :: NS2 :: Fred<int> :: Fred<int> ( const NS1 :: NS2 :: Fred<int> & f ) { } NS1 :: NS2 :: Fred<int> & NS1 :: NS2 :: Fred<int> :: operator= ( const NS1 :: NS2 :: Fred<int> & f ) { } NS1 :: NS2 :: Fred<int> :: ~ Fred<int> ( ) { }" always "namespace NS1 { namespace NS2 { struct Fred<int> ; } } NS1 :: NS2 :: Fred<int> fred ; struct NS1 :: NS2 :: Fred<int> { Fred<int> ( ) ; Fred<int> ( const NS1 :: NS2 :: Fred<int> & ) ; NS1 :: NS2 :: Fred<int> & operator= ( const NS1 :: NS2 :: Fred<int> & ) ; ~ Fred<int> ( ) ; } ; NS1 :: NS2 :: Fred<int> :: Fred<int> ( ) { } NS1 :: NS2 :: Fred<int> :: Fred<int> ( const NS1 :: NS2 :: Fred<int> & f ) { } NS1 :: NS2 :: Fred<int> & NS1 :: NS2 :: Fred<int> :: operator= ( const NS1 :: NS2 :: Fred<int> & f ) { } NS1 :: NS2 :: Fred<int> :: ~ Fred<int> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5074 always 5074
  code always "namespace NS1 {\nnamespace NS2 {\n    template <typename T>\n    struct Fred {\n        Fred();\n        Fred(const Fred &);\n        Fred & operator = (const Fred &);\n        ~Fred();\n    };\n    template <typename T>\n    Fred<T>::Fred() { }\n    template <typename T>\n    Fred<T>::Fred(const Fred<T> & f) { }\n    template <typename T>\n    Fred<T> & Fred<T>::operator = (const Fred<T> & f) { }\n    template <typename T>\n    Fred<T>::~Fred() { }\n}\n}\nNS1::NS2::Fred<int> fred;"
Line 5092
  194 always 194
  = always "namespace NS {\ntemplate<int type> struct Barney;\ntemplate<> struct Barney<1> { };\ntemplate<int type>\nclass Fred {\npublic:\n  Fred();\nprivate:\n  Barney<type> m_data;\n};\ntemplate class Fred<1>;\n}\n"
  "namespace NS {\ntemplate<int type> struct Barney;\ntemplate<> struct Barney<1> { };\ntemplate<int type>\nclass Fred {\npublic:\n  Fred();\nprivate:\n  Barney<type> m_data;\n};\ntemplate class Fred<1>;\n}\n" always "namespace NS {\ntemplate<int type> struct Barney;\ntemplate<> struct Barney<1> { };\ntemplate<int type>\nclass Fred {\npublic:\n  Fred();\nprivate:\n  Barney<type> m_data;\n};\ntemplate class Fred<1>;\n}\n"
Line 5104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5104 always 5104
  "namespace NS { struct Barney<1> ; template < int type > struct Barney ; struct Barney<1> { } ; class Fred<1> ; } class NS :: Fred<1> { public: Fred<1> ( ) ; private: Barney<1> m_data ; } ;" always "namespace NS { struct Barney<1> ; template < int type > struct Barney ; struct Barney<1> { } ; class Fred<1> ; } class NS :: Fred<1> { public: Fred<1> ( ) ; private: Barney<1> m_data ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5104 always 5104
  code always "namespace NS {\ntemplate<int type> struct Barney;\ntemplate<> struct Barney<1> { };\ntemplate<int type>\nclass Fred {\npublic:\n  Fred();\nprivate:\n  Barney<type> m_data;\n};\ntemplate class Fred<1>;\n}\n"
Line 5119
  145 always 145
  = always "namespace NS1 {\nnamespace NS2 {\ntemplate<class T>\nclass Fred {\n    T * t;\npublic:\n    Fred<T>() : t(nullptr) {}\n};\n}\n}\nNS1::NS2::Fred<int> fred;"
  "namespace NS1 {\nnamespace NS2 {\ntemplate<class T>\nclass Fred {\n    T * t;\npublic:\n    Fred<T>() : t(nullptr) {}\n};\n}\n}\nNS1::NS2::Fred<int> fred;" always "namespace NS1 {\nnamespace NS2 {\ntemplate<class T>\nclass Fred {\n    T * t;\npublic:\n    Fred<T>() : t(nullptr) {}\n};\n}\n}\nNS1::NS2::Fred<int> fred;"
Line 5130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5130 always 5130
  "namespace NS1 { namespace NS2 { class Fred<int> ; } } NS1 :: NS2 :: Fred<int> fred ; class NS1 :: NS2 :: Fred<int> { int * t ; public: Fred<int> ( ) : t ( nullptr ) { } } ;" always "namespace NS1 { namespace NS2 { class Fred<int> ; } } NS1 :: NS2 :: Fred<int> fred ; class NS1 :: NS2 :: Fred<int> { int * t ; public: Fred<int> ( ) : t ( nullptr ) { } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5130 always 5130
  code always "namespace NS1 {\nnamespace NS2 {\ntemplate<class T>\nclass Fred {\n    T * t;\npublic:\n    Fred<T>() : t(nullptr) {}\n};\n}\n}\nNS1::NS2::Fred<int> fred;"
Line 5144
  297 always 297
  = always "namespace MyNamespace {\nclass TestClass {\npublic:\n    TestClass() {\n        SomeFunction();\n        TemplatedMethod< int >( 0 );\n    }\n    void SomeFunction() { }\nprivate:\n    template< typename T > T TemplatedMethod(T);\n};\ntemplate< typename T > T TestClass::TemplatedMethod(T t) { return t; }\n}"
  "namespace MyNamespace {\nclass TestClass {\npublic:\n    TestClass() {\n        SomeFunction();\n        TemplatedMethod< int >( 0 );\n    }\n    void SomeFunction() { }\nprivate:\n    template< typename T > T TemplatedMethod(T);\n};\ntemplate< typename T > T TestClass::TemplatedMethod(T t) { return t; }\n}" always "namespace MyNamespace {\nclass TestClass {\npublic:\n    TestClass() {\n        SomeFunction();\n        TemplatedMethod< int >( 0 );\n    }\n    void SomeFunction() { }\nprivate:\n    template< typename T > T TemplatedMethod(T);\n};\ntemplate< typename T > T TestClass::TemplatedMethod(T t) { return t; }\n}"
Line 5157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5157 always 5157
  "namespace MyNamespace { class TestClass { public: TestClass ( ) { SomeFunction ( ) ; TemplatedMethod<int> ( 0 ) ; } void SomeFunction ( ) { } private: int TemplatedMethod<int> ( int ) ; } ; } int MyNamespace :: TestClass :: TemplatedMethod<int> ( int t ) { return t ; }" always "namespace MyNamespace { class TestClass { public: TestClass ( ) { SomeFunction ( ) ; TemplatedMethod<int> ( 0 ) ; } void SomeFunction ( ) { } private: int TemplatedMethod<int> ( int ) ; } ; } int MyNamespace :: TestClass :: TemplatedMethod<int> ( int t ) { return t ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5157 always 5157
  code always "namespace MyNamespace {\nclass TestClass {\npublic:\n    TestClass() {\n        SomeFunction();\n        TemplatedMethod< int >( 0 );\n    }\n    void SomeFunction() { }\nprivate:\n    template< typename T > T TemplatedMethod(T);\n};\ntemplate< typename T > T TestClass::TemplatedMethod(T t) { return t; }\n}"
Line 5172
  70 always 70
  = always "template<class T> void foo(const T x) {}\nvoid bar() { foo<int*>(0); }"
  "template<class T> void foo(const T x) {}\nvoid bar() { foo<int*>(0); }" always "template<class T> void foo(const T x) {}\nvoid bar() { foo<int*>(0); }"
Line 5174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5174 always 5174
  "void foo<int*> ( int * const x ) ; void bar ( ) { foo<int*> ( 0 ) ; } void foo<int*> ( int * const x ) { }" always "void foo<int*> ( int * const x ) ; void bar ( ) { foo<int*> ( 0 ) ; } void foo<int*> ( int * const x ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5174 always 5174
  code always "template<class T> void foo(const T x) {}\nvoid bar() { foo<int*>(0); }"
Line 5180
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5180 always 5180
  "void foo<int[]> ( int [ ] x ) ; void bar ( ) { int [ 3 ] y ; foo<int[]> ( y ) ; } void foo<int[]> ( int [ ] x ) { } ;" always "void foo<int[]> ( int [ ] x ) ; void bar ( ) { int [ 3 ] y ; foo<int[]> ( y ) ; } void foo<int[]> ( int [ ] x ) { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5180 always 5180
  "template <class T> void foo(T x) {};\nvoid bar() {\n  int[3] y;\n  foo<int[]>(y);\n}" always "template <class T> void foo(T x) {};\nvoid bar() {\n  int[3] y;\n  foo<int[]>(y);\n}"
Line 5188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5188 always 5188
  "struct A<int[2]> ; A<int[2]> y ; struct A<int[2]> { int [ 2 ] x ; } ;" always "struct A<int[2]> ; A<int[2]> y ; struct A<int[2]> { int [ 2 ] x ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5188 always 5188
  "template <class T> struct A { T x; };\nA<int[2]> y;" always "template <class T> struct A { T x; };\nA<int[2]> y;"
Line 5196
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5196 always 5196
  "struct A<B<int>[]> ; struct B<B<int>> ; struct C<B<int>> ; C<B<int>> y ; struct C<B<int>> : B<B<int>> { } ; struct B<B<int>> { A<B<int>[]> x ; } ; struct A<B<int>[]> { } ;" always "struct A<B<int>[]> ; struct B<B<int>> ; struct C<B<int>> ; C<B<int>> y ; struct C<B<int>> : B<B<int>> { } ; struct B<B<int>> { A<B<int>[]> x ; } ; struct A<B<int>[]> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5196 always 5196
  "template <class  > struct A {};\ntemplate <class T> struct B { A<T[]> x; };\ntemplate <class T> struct C : B<T> {};\nC<B<int>> y;" always "template <class  > struct A {};\ntemplate <class T> struct B { A<T[]> x; };\ntemplate <class T> struct C : B<T> {};\nC<B<int>> y;"
Line 5209
  ( always !<=-1
Line 5210
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 5212
  code possible {"template<typename = void> struct s;"@55,"template<template<typename = float> typename T> struct A {\n    void f();\n    void g();\n};n"@56,"X<struct C> x;"@123,"X<union C> x;"@124,"X<const int> x;"@125,"X<int const *> x;"@126,"X<const struct C> x;"@127,"X<len>>x;"@128,"X<typename> x;"@129,"X<...> x;"@130}
Line 5213
  "test.cpp" always "test.cpp"
Line 5215
  false always 0
Line 5218
  == always {!<=-1,!>=2}
  "var1" always "var1"
Line 5219
  1 always 1
Line 5222
  return always !<=-1
Line 5227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5227 always 5227
  1U always 1
  ( always !<=-1
  "X<struct C> x;" always "X<struct C> x;"
Line 5228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5228 always 5228
  1U always 1
  ( always !<=-1
  "X<union C> x;" always "X<union C> x;"
Line 5229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5229 always 5229
  1U always 1
  ( always !<=-1
  "X<const int> x;" always "X<const int> x;"
Line 5230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5230 always 5230
  1U always 1
  ( always !<=-1
  "X<int const *> x;" always "X<int const *> x;"
Line 5231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5231 always 5231
  1U always 1
  ( always !<=-1
  "X<const struct C> x;" always "X<const struct C> x;"
Line 5232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5232 always 5232
  0U always 0
  ( always !<=-1
  "X<len>>x;" always "X<len>>x;"
Line 5233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5233 always 5233
  1U always 1
  ( always !<=-1
  "X<typename> x;" always "X<typename> x;"
Line 5234
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5234 always 5234
  0U always 0
  ( always !<=-1
  "X<...> x;" always "X<...> x;"
Line 5235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5235 always 5235
  0U always 0
  ( always !<=-1
  "X<class T...> x;" always "X<class T...> x;"
Line 5236
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5236 always 5236
  1U always 1
  ( always !<=-1
  "X<class... T> x;" always "X<class... T> x;"
Line 5237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5237 always 5237
  0U always 0
  ( always !<=-1
  "X<class, typename T...> x;" always "X<class, typename T...> x;"
Line 5238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5238 always 5238
  2U always 2
  ( always !<=-1
  "X<class, typename... T> x;" always "X<class, typename... T> x;"
Line 5239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5239 always 5239
  2U always 2
  ( always !<=-1
  "X<int(&)(), class> x;" always "X<int(&)(), class> x;"
Line 5240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5240 always 5240
  3U always 3
  ( always !<=-1
  "X<char, int(*)(), bool> x;" always "X<char, int(*)(), bool> x;"
Line 5241
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5241 always 5241
  1U always 1
  ( always !<=-1
  "X<int...> x;" always "X<int...> x;"
Line 5242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5242 always 5242
  2U always 2
  ( always !<=-1
  "X<class, typename...> x;" always "X<class, typename...> x;"
Line 5243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5243 always 5243
  2U always 2
  ( always !<=-1
  "X<1, T> x;" always "X<1, T> x;"
Line 5244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5244 always 5244
  1U always 1
  ( always !<=-1
  "X<T[]> x;" always "X<T[]> x;"
Line 5245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5245 always 5245
  1U always 1
  ( always !<=-1
  "X<T[2]> x;" always "X<T[2]> x;"
Line 5246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5246 always 5246
  1U always 1
  ( always !<=-1
  "X<i == 0> x;" always "X<i == 0> x;"
Line 5247
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5247 always 5247
  2U always 2
  ( always !<=-1
  "X<int, i>=0> x;" always "X<int, i>=0> x;"
Line 5248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5248 always 5248
  3U always 3
  ( always !<=-1
  "X<int, i>=0, i - 2> x;" always "X<int, i>=0, i - 2> x;"
Line 5249
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5249 always 5249
  0U always 0
  ( always !<=-1
  "var1<1> x;" always "var1<1> x;"
Line 5250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5250 always 5250
  0U always 0
  ( always !<=-1
  "X<1>2;" always "X<1>2;"
Line 5251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5251 always 5251
  2U always 2
  ( always !<=-1
  "template<typename...B,typename=SameSize<B...>> x;" always "template<typename...B,typename=SameSize<B...>> x;"
Line 5252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5252 always 5252
  2U always 2
  ( always !<=-1
  "template<typename...B,typename=SameSize<B...> > x;" always "template<typename...B,typename=SameSize<B...> > x;"
Line 5253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5253 always 5253
  1U always 1
  ( always !<=-1
  "template<template<typename>...Foo> x;" always "template<template<typename>...Foo> x;"
Line 5254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5254 always 5254
  1U always 1
  ( always !<=-1
  "template<template<typename>> x;" always "template<template<typename>> x;"
Line 5255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5255 always 5255
  1U always 1
  ( always !<=-1
  "template<template<template<typename>>> x;" always "template<template<template<typename>>> x;"
Line 5256
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5256 always 5256
  1U always 1
  ( always !<=-1
  "template<template<template<template<typename>>>> x;" always "template<template<template<template<typename>>>> x;"
Line 5257
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5257 always 5257
  1U always 1
  ( always !<=-1
  "template<template<template<template<template<typename>>>>> x;" always "template<template<template<template<template<typename>>>>> x;"
Line 5258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5258 always 5258
  2U always 2
  ( always !<=-1
  "template<template<typename>,int> x;" always "template<template<typename>,int> x;"
Line 5259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5259 always 5259
  2U always 2
  ( always !<=-1
  "template<template<template<typename>>,int> x;" always "template<template<template<typename>>,int> x;"
Line 5260
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5260 always 5260
  2U always 2
  ( always !<=-1
  "template<template<template<template<typename>>>,int> x;" always "template<template<template<template<typename>>>,int> x;"
Line 5261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5261 always 5261
  2U always 2
  ( always !<=-1
  "template<template<template<template<template<typename>>>>,int> x;" always "template<template<template<template<template<typename>>>>,int> x;"
Line 5262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5262 always 5262
  2U always 2
  ( always !<=-1
  "template<template<typename>...Foo,template<template<template<typename>>>> x;" always "template<template<typename>...Foo,template<template<template<typename>>>> x;"
Line 5263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5263 always 5263
  3U always 3
  ( always !<=-1
  "template<template<typename>...Foo,int,template<template<template<typename>>>> x;" always "template<template<typename>...Foo,int,template<template<template<typename>>>> x;"
Line 5264
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5264 always 5264
  4U always 4
  ( always !<=-1
  "template<template<typename>...Foo,int,template<template<template<typename>>>,int> x;" always "template<template<typename>...Foo,int,template<template<template<typename>>>,int> x;"
Line 5265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5265 always 5265
  2U always 2
  ( always !<=-1
  "template<typename S, enable_if_t<(is_compile_string<S>::value), int>> void i(S s);" always "template<typename S, enable_if_t<(is_compile_string<S>::value), int>> void i(S s);"
Line 5266
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5266 always 5266
  2U always 2
  ( always !<=-1
  "template<typename c, b<(c::d), int>> void e();" always "template<typename c, b<(c::d), int>> void e();"
Line 5270
  , always 0
  offset always !<=-1
  = always 0
  0 always 0
Line 5271
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 5273
  code possible {"template<class T> class A {};"@97,"template<class T> struct A {};"@98,"template<class T> class A : B {};"@99,"template<class T> struct A : B {};"@100,"template<class T> unsigned foo() { return 0; }"@101,"template<class T> unsigned* foo() { return 0; }"@102,"template<class T> unsigned** foo() { return 0; }"@103,"template<class T> const unsigned foo() { return 0; }"@104,"template<class T> const unsigned& foo() { return 0; }"@105,"template<class T> const unsigned** foo() { return 0; }"@106}
Line 5274
  "test.cpp" always "test.cpp"
Line 5276
  false always 0
Line 5279
  i always !<=-1
  = always 0
  0 always 0
  i {!<=-1,0}
  < always {!<=-1,!>=2}
  offset {!<=-1,4@97,19@113,20@114,25@115,26@116,27@117,18@118,24@119,2@122}
  ++ always !<=0
  i always !<=-1
Line 5286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5286 always 5286
  2 always 2
  "template<class T> class A {};" always "template<class T> class A {};"
  4 always 4
Line 5287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5287 always 5287
  2 always 2
  "template<class T> struct A {};" always "template<class T> struct A {};"
  4 always 4
Line 5288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5288 always 5288
  2 always 2
  "template<class T> class A : B {};" always "template<class T> class A : B {};"
  4 always 4
Line 5289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5289 always 5289
  2 always 2
  "template<class T> struct A : B {};" always "template<class T> struct A : B {};"
  4 always 4
Line 5291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5291 always 5291
  2 always 2
  "template<class T> unsigned foo() { return 0; }" always "template<class T> unsigned foo() { return 0; }"
  4 always 4
Line 5292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5292 always 5292
  3 always 3
  "template<class T> unsigned* foo() { return 0; }" always "template<class T> unsigned* foo() { return 0; }"
  4 always 4
Line 5293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5293 always 5293
  4 always 4
  "template<class T> unsigned** foo() { return 0; }" always "template<class T> unsigned** foo() { return 0; }"
  4 always 4
Line 5295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5295 always 5295
  3 always 3
  "template<class T> const unsigned foo() { return 0; }" always "template<class T> const unsigned foo() { return 0; }"
  4 always 4
Line 5296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5296 always 5296
  4 always 4
  "template<class T> const unsigned& foo() { return 0; }" always "template<class T> const unsigned& foo() { return 0; }"
  4 always 4
Line 5297
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5297 always 5297
  5 always 5
  "template<class T> const unsigned** foo() { return 0; }" always "template<class T> const unsigned** foo() { return 0; }"
  4 always 4
Line 5299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5299 always 5299
  4 always 4
  "template<class T> std::string foo() { static str::string str; return str; }" always "template<class T> std::string foo() { static str::string str; return str; }"
  4 always 4
Line 5300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5300 always 5300
  5 always 5
  "template<class T> std::string & foo() { static str::string str; return str; }" always "template<class T> std::string & foo() { static str::string str; return str; }"
  4 always 4
Line 5301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5301 always 5301
  6 always 6
  "template<class T> const std::string & foo() { static str::string str; return str; }" always "template<class T> const std::string & foo() { static str::string str; return str; }"
  4 always 4
Line 5303
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5303 always 5303
  9 always 9
  "template<class T> std::map<int, int> foo() { static std::map<int, int> m; return m; }" always "template<class T> std::map<int, int> foo() { static std::map<int, int> m; return m; }"
  4 always 4
Line 5304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5304 always 5304
  10 always 10
  "template<class T> std::map<int, int> & foo() { static std::map<int, int> m; return m; }" always "template<class T> std::map<int, int> & foo() { static std::map<int, int> m; return m; }"
  4 always 4
Line 5305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5305 always 5305
  11 always 11
  "template<class T> const std::map<int, int> & foo() { static std::map<int, int> m; return m; }" always "template<class T> const std::map<int, int> & foo() { static std::map<int, int> m; return m; }"
  4 always 4
Line 5307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5307 always 5307
  4 always 4
  "class A { template<class T> unsigned foo(); }; template<class T> unsigned A::foo() { return 0; }" always "class A { template<class T> unsigned foo(); }; template<class T> unsigned A::foo() { return 0; }"
  19 always 19
Line 5310
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5310 always 5310
  5 always 5
  "class A { template<class T> const unsigned foo(); }; template<class T> const unsigned A::foo() { return 0; }" always "class A { template<class T> const unsigned foo(); }; template<class T> const unsigned A::foo() { return 0; }"
  20 always 20
Line 5313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5313 always 5313
  7 always 7
  "class A { class B { template<class T> const unsigned foo(); }; } ; template<class T> const unsigned A::B::foo() { return 0; }" always "class A { class B { template<class T> const unsigned foo(); }; } ; template<class T> const unsigned A::B::foo() { return 0; }"
  25 always 25
Line 5316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5316 always 5316
  8 always 8
  "class A { class B { template<class T> const unsigned * foo(); }; } ; template<class T> const unsigned * A::B::foo() { return 0; }" always "class A { class B { template<class T> const unsigned * foo(); }; } ; template<class T> const unsigned * A::B::foo() { return 0; }"
  26 always 26
Line 5319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5319 always 5319
  9 always 9
  "class A { class B { template<class T> const unsigned ** foo(); }; } ; template<class T> const unsigned ** A::B::foo() { return 0; }" always "class A { class B { template<class T> const unsigned ** foo(); }; } ; template<class T> const unsigned ** A::B::foo() { return 0; }"
  27 always 27
Line 5323
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5323 always 5323
  6 always 6
  "template<class T> class A { A(); }; template<class T> A<T>::A() {}" always "template<class T> class A { A(); }; template<class T> A<T>::A() {}"
  18 always 18
Line 5326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5326 always 5326
  8 always 8
  "template<class T, class U> class A { A(); }; template<class T, class U> A<T, U>::A() {}" always "template<class T, class U> class A { A(); }; template<class T, class U> A<T, U>::A() {}"
  24 always 24
Line 5329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5329 always 5329
  7 always 7
  "template<class T> class A { unsigned foo(); }; template<class T> unsigned A<T>::foo() { return 0; }" always "template<class T> class A { unsigned foo(); }; template<class T> unsigned A<T>::foo() { return 0; }"
  19 always 19
Line 5332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5332 always 5332
  9 always 9
  "template<class T, class U> class A { unsigned foo(); }; template<class T, class U> unsigned A<T, U>::foo() { return 0; }" always "template<class T, class U> class A { unsigned foo(); }; template<class T, class U> unsigned A<T, U>::foo() { return 0; }"
  25 always 25
Line 5335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5335 always 5335
  12 always 12
  "template<> unsigned A<int, v<char> >::foo() { return 0; }" always "template<> unsigned A<int, v<char> >::foo() { return 0; }"
  2 always 2
Line 5340
  ( always {!<=-1,!>=2}
  , always 0
  offset always !<=-1
  = always 0
  0 always 0
Line 5341
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 5343
  code possible {"template <typename T> class Fred { }; int x;"@89,"template <typename T> void Fred() { } int x;"@90,"template <typename T> int Fred = 0; int x;"@91,"template <typename T> constexpr auto func = [](auto x){ return T(x);}; int x;"@92,"template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>); int x;"@93,"template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>){} int x;"@94,"template <typename... f, c<h<e<typename f::d...>>::g>> void i(); int x;"@95,"template <typename... f, c<h<e<typename f::d...>>::g>> void i(){} int x;"@96}
Line 5344
  "test.cpp" always "test.cpp"
Line 5346
  false always 0
Line 5349
  i always !<=-1
  = always 0
  0 always 0
  i {!<=-1,0}
  < always {!<=-1,!>=2}
  offset {!<=-1,0}
  ++ always !<=0
  i always !<=-1
Line 5354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  pattern inconclusive {"; int x ;"@89,"} int x ;"@90,"; int x ;"@91,"; int x ;"@92,"; int x ;"@93,"} int x ;"@94,"; int x ;"@95,"} int x ;"@96}
  ( {!<=-1,9@89}
  pattern inconclusive {"; int x ;"@89,"} int x ;"@90,"; int x ;"@91,"; int x ;"@92,"; int x ;"@93,"} int x ;"@94,"; int x ;"@95,"} int x ;"@96}
Line 5358
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5358 always 5358
  ( always {!<=-1,!>=2}
  "template <typename T> class Fred { }; int x;" always "template <typename T> class Fred { }; int x;"
  "; int x ;" always "; int x ;"
Line 5359
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5359 always 5359
  ( always {!<=-1,!>=2}
  "template <typename T> void Fred() { } int x;" always "template <typename T> void Fred() { } int x;"
  "} int x ;" always "} int x ;"
Line 5360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5360 always 5360
  ( always {!<=-1,!>=2}
  "template <typename T> int Fred = 0; int x;" always "template <typename T> int Fred = 0; int x;"
  "; int x ;" always "; int x ;"
Line 5361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5361 always 5361
  ( always {!<=-1,!>=2}
  "template <typename T> constexpr auto func = [](auto x){ return T(x);}; int x;" always "template <typename T> constexpr auto func = [](auto x){ return T(x);}; int x;"
  "; int x ;" always "; int x ;"
Line 5362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5362 always 5362
  ( always {!<=-1,!>=2}
  "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>); int x;" always "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>); int x;"
  "; int x ;" always "; int x ;"
Line 5363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5363 always 5363
  ( always {!<=-1,!>=2}
  "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>){} int x;" always "template <class, class a> auto b() -> decltype(a{}.template b<void(int, int)>){} int x;"
  "} int x ;" always "} int x ;"
Line 5364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5364 always 5364
  ( always {!<=-1,!>=2}
  "template <typename... f, c<h<e<typename f::d...>>::g>> void i(); int x;" always "template <typename... f, c<h<e<typename f::d...>>::g>> void i(); int x;"
  "; int x ;" always "; int x ;"
Line 5365
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5365 always 5365
  ( always {!<=-1,!>=2}
  "template <typename... f, c<h<e<typename f::d...>>::g>> void i(){} int x;" always "template <typename... f, c<h<e<typename f::d...>>::g>> void i(){} int x;"
  "} int x ;" always "} int x ;"
Line 5369
  ( always {!<=-1,!>=2}
Line 5370
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 5372
  code possible {"template<typename T> class Fred {};"@84,"template<typename T=int> class Fred {};"@85,"template<typename T,typename U> class Fred {};"@86,"template<typename T,typename U=int> class Fred {};"@87,"template<typename T=int,typename U=int> class Fred {};"@88}
Line 5373
  "test.cpp" always "test.cpp"
Line 5375
  false always 0
Line 5378
  2 always 2
  typeParametersInDeclaration always size=0
Line 5380
  params inconclusive {size=1@84,{@84,{@85,{@86,{@87,{@88}
  ( {!<=-1,1@84}
  != always {!<=-1,!>=2}
  ( always !<=-1
Line 5381
  return always {!<=-1,!>=2}
  false always 0
Line 5383
  i always !<=-1
  = always 0
  0 always 0
  i {!<=-1,0}
  < always {!<=-1,!>=2}
  ( {!<=-1,symbolic=(params.size())}
  ++ always !<=0
  i always !<=-1
Line 5384
  i always !<=-1
  != always {!<=-1,!>=2}
  params inconclusive size=1@84
  i always !<=-1
Line 5385
  return always {!<=-1,!>=2}
  false always 0
Line 5387
  return always {!<=-1,!>=2}
  true always 1
Line 5391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5391 always 5391
  ( always {!<=-1,!>=2}
  "template<typename T> class Fred {};" always "template<typename T> class Fred {};"
  { always {size=1,{}
  "T" always "T"
Line 5392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5392 always 5392
  ( always {!<=-1,!>=2}
  "template<typename T=int> class Fred {};" always "template<typename T=int> class Fred {};"
  { always {size=1,{}
  "T" always "T"
Line 5393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5393 always 5393
  ( always {!<=-1,!>=2}
  "template<typename T,typename U> class Fred {};" always "template<typename T,typename U> class Fred {};"
  { always {
  "T" always "T"
  "U" always "U"
Line 5394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5394 always 5394
  ( always {!<=-1,!>=2}
  "template<typename T,typename U=int> class Fred {};" always "template<typename T,typename U=int> class Fred {};"
  { always {
  "T" always "T"
  "U" always "U"
Line 5395
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5395 always 5395
  ( always {!<=-1,!>=2}
  "template<typename T=int,typename U=int> class Fred {};" always "template<typename T=int,typename U=int> class Fred {};"
  { always {
  "T" always "T"
  "U" always "U"
Line 5399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5399 always 5399
  "class A<int> { } ;" always "class A<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5399 always 5399
  "template<> class A<int> {};" always "template<> class A<int> {};"
Line 5400
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5400 always 5400
  "class A<int> : public B { } ;" always "class A<int> : public B { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5400 always 5400
  "template<> class A<int> : public B {};" always "template<> class A<int> : public B {};"
Line 5401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5401 always 5401
  "class A<int> { A<int> ( ) ; ~ A<int> ( ) ; } ;" always "class A<int> { A<int> ( ) ; ~ A<int> ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5401 always 5401
  "template<> class A<int> { A(); ~A(); };" always "template<> class A<int> { A(); ~A(); };"
Line 5402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5402 always 5402
  "class A<int> { A<int> ( ) { } ~ A<int> ( ) { } } ;" always "class A<int> { A<int> ( ) { } ~ A<int> ( ) { } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5402 always 5402
  "template<> class A<int> { A() {} ~A() {} };" always "template<> class A<int> { A() {} ~A() {} };"
Line 5403
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5403 always 5403
  "class A<int> { A<int> ( ) ; ~ A<int> ( ) ; } ; A<int> :: A<int> ( ) { } ~ A<int> :: A<int> ( ) { }" always "class A<int> { A<int> ( ) ; ~ A<int> ( ) ; } ; A<int> :: A<int> ( ) { } ~ A<int> :: A<int> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5403 always 5403
  "template<> class A<int> { A(); ~A(); }; A<int>::A() { } ~A<int>::A() {}" always "template<> class A<int> { A(); ~A(); }; A<int>::A() { } ~A<int>::A() {}"
Line 5405
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5405 always 5405
  "class A<int> { A<int> ( ) ; A<int> ( const A<int> & ) ; A<int> foo ( ) ; } ; A<int> :: A<int> ( ) { } A<int> :: A<int> ( const A<int> & ) { } A<int> A<int> :: foo ( ) { A<int> a ; return a ; }" always "class A<int> { A<int> ( ) ; A<int> ( const A<int> & ) ; A<int> foo ( ) ; } ; A<int> :: A<int> ( ) { } A<int> :: A<int> ( const A<int> & ) { } A<int> A<int> :: foo ( ) { A<int> a ; return a ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5405 always 5405
  "template<> class A<int> { A(); A(const A &) ; A foo(); }; A<int>::A() { } A<int>::A(const A &) { } A<int> A<int>::foo() { A a; return a; }" always "template<> class A<int> { A(); A(const A &) ; A foo(); }; A<int>::A() { } A<int>::A(const A &) { } A<int> A<int>::foo() { A a; return a; }"
Line 5411
  142 always 142
  = always "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};\nC<float> b;\n"
  "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};\nC<float> b;\n" always "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};\nC<float> b;\n"
Line 5420
  174 always 174
  = always "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ; C<float> b ;"
  "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ; C<float> b ;" always "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ; C<float> b ;"
Line 5428
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5428 always 5428
  expected always "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ; C<float> b ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5428 always 5428
  code always "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};\nC<float> b;\n"
Line 5431
  129 always 129
  = always "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};"
  "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};" always "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};"
Line 5439
  161 always 161
  = always "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ;"
  "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ;" always "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ;"
Line 5446
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5446 always 5446
  expected always "class C<float> { public: C<float> ( ) { } C<float> ( const C<float> & ) { } ~ C<float> ( ) { } C<float> & operator= ( const C<float> & ) { return * this ; } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5446 always 5446
  code always "template <>\nclass C<float> {\npublic:\n   C() { }\n   C(const C &) { }\n   ~C() { }\n   C & operator=(const C &) { return *this; }\n};"
Line 5449
  205 always 205
  = always "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }\nC<float> b;\n"
  "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }\nC<float> b;\n" always "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }\nC<float> b;\n"
Line 5462
  330 always 330
  = always "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; } C<float> b ;"
  "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; } C<float> b ;" always "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; } C<float> b ;"
Line 5474
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5474 always 5474
  expected always "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; } C<float> b ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5474 always 5474
  code always "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }\nC<float> b;\n"
Line 5477
  192 always 192
  = always "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }"
  "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }" always "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }"
Line 5489
  317 always 317
  = always "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; }"
  "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; }" always "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; }"
Line 5500
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5500 always 5500
  expected always "class C<float> { public: C<float> ( ) ; C<float> ( const C<float> & ) ; ~ C<float> ( ) ; C<float> & operator= ( const C<float> & ) ; } ; C<float> :: C<float> ( ) { } C<float> :: C<float> ( const C<float> & ) { } C<float> :: ~ C<float> ( ) { } C<float> & C<float> :: operator= ( const C<float> & ) { return * this ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5500 always 5500
  code always "template <>\nclass C<float> {\npublic:\n   C();\n   C(const C &);\n   ~C();\n   C & operator=(const C &);\n};\nC::C() { }\nC::C(const C &) { }\nC::~C() { }\nC & C::operator=(const C &) { return *this; }"
Line 5505
  244 always 244
  = always "template <> struct OutputU16<unsigned char> final {\n    explicit OutputU16(std::basic_ostream<unsigned char> &t) : outputStream_(t) {}\n    void operator()(unsigned short) const;\nprivate:\n    std::basic_ostream<unsigned char> &outputStream_;\n};"
  "template <> struct OutputU16<unsigned char> final {\n    explicit OutputU16(std::basic_ostream<unsigned char> &t) : outputStream_(t) {}\n    void operator()(unsigned short) const;\nprivate:\n    std::basic_ostream<unsigned char> &outputStream_;\n};" always "template <> struct OutputU16<unsigned char> final {\n    explicit OutputU16(std::basic_ostream<unsigned char> &t) : outputStream_(t) {}\n    void operator()(unsigned short) const;\nprivate:\n    std::basic_ostream<unsigned char> &outputStream_;\n};"
Line 5511
  258 always 258
  = always "struct OutputU16<unsignedchar> final { explicit OutputU16<unsignedchar> ( std :: basic_ostream < unsigned char > & t ) : outputStream_ ( t ) { } void operator() ( unsigned short ) const ; private: std :: basic_ostream < unsigned char > & outputStream_ ; } ;"
  "struct OutputU16<unsignedchar> final { explicit OutputU16<unsignedchar> ( std :: basic_ostream < unsigned char > & t ) : outputStream_ ( t ) { } void operator() ( unsigned short ) const ; private: std :: basic_ostream < unsigned char > & outputStream_ ; } ;" always "struct OutputU16<unsignedchar> final { explicit OutputU16<unsignedchar> ( std :: basic_ostream < unsigned char > & t ) : outputStream_ ( t ) { } void operator() ( unsigned short ) const ; private: std :: basic_ostream < unsigned char > & outputStream_ ; } ;"
Line 5517
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5517 always 5517
  expected always "struct OutputU16<unsignedchar> final { explicit OutputU16<unsignedchar> ( std :: basic_ostream < unsigned char > & t ) : outputStream_ ( t ) { } void operator() ( unsigned short ) const ; private: std :: basic_ostream < unsigned char > & outputStream_ ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5517 always 5517
  code always "template <> struct OutputU16<unsigned char> final {\n    explicit OutputU16(std::basic_ostream<unsigned char> &t) : outputStream_(t) {}\n    void operator()(unsigned short) const;\nprivate:\n    std::basic_ostream<unsigned char> &outputStream_;\n};"
Line 5522
  42 always 42
  = always "template<> class C<char> { };\nmap<int> m;"
  "template<> class C<char> { };\nmap<int> m;" always "template<> class C<char> { };\nmap<int> m;"
Line 5524
  36 always 36
  = always "class C<char> { } ; map < int > m ;"
  "class C<char> { } ; map < int > m ;" always "class C<char> { } ; map < int > m ;"
Line 5526
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5526 always 5526
  expected always "class C<char> { } ; map < int > m ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5526 always 5526
  code always "template<> class C<char> { };\nmap<int> m;"
Line 5529
  53 always 53
  = always "template<> class C<char> { };\nmap<int> m;\nC<char> c;"
  "template<> class C<char> { };\nmap<int> m;\nC<char> c;" always "template<> class C<char> { };\nmap<int> m;\nC<char> c;"
Line 5532
  48 always 48
  = always "class C<char> { } ; map < int > m ; C<char> c ;"
  "class C<char> { } ; map < int > m ; C<char> c ;" always "class C<char> { } ; map < int > m ; C<char> c ;"
Line 5535
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5535 always 5535
  expected always "class C<char> { } ; map < int > m ; C<char> c ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5535 always 5535
  code always "template<> class C<char> { };\nmap<int> m;\nC<char> c;"
Line 5538
  77 always 77
  = always "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\n"
  "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\n" always "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\n"
Line 5541
  90 always 90
  = always "class C<char> ; template < typename T > class C { } ; class C<char> { } ; map < int > m ;"
  "class C<char> ; template < typename T > class C { } ; class C<char> { } ; map < int > m ;" always "class C<char> ; template < typename T > class C { } ; class C<char> { } ; map < int > m ;"
Line 5545
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5545 always 5545
  expected always "class C<char> ; template < typename T > class C { } ; class C<char> { } ; map < int > m ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5545 always 5545
  code always "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\n"
Line 5548
  86 always 86
  = always "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;"
  "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;" always "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;"
Line 5552
  97 always 97
  = always "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; class C<int> { } ;"
  "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; class C<int> { } ;" always "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; class C<int> { } ;"
Line 5558
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5558 always 5558
  expected always "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; class C<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5558 always 5558
  code always "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;"
Line 5561
  97 always 97
  = always "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;\nC<char> c;"
  "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;\nC<char> c;" always "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;\nC<char> c;"
Line 5566
  109 always 109
  = always "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; C<char> c ; class C<int> { } ;"
  "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; C<char> c ; class C<int> { } ;" always "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; C<char> c ; class C<int> { } ;"
Line 5573
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5573 always 5573
  expected always "class C<char> ; class C<int> ; class C<char> { } ; map < int > m ; C<int> i ; C<char> c ; class C<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5573 always 5573
  code always "template<typename T> class C { };\ntemplate<> class C<char> { };\nmap<int> m;\nC<int> i;\nC<char> c;"
Line 5576
  119 always 119
  = always "class A {};\ntemplate<typename T> struct B;\ntemplate<> struct B<A> {};\nint f() {\n    int B[1] = {};\n    return B[0];\n}\n"
  "class A {};\ntemplate<typename T> struct B;\ntemplate<> struct B<A> {};\nint f() {\n    int B[1] = {};\n    return B[0];\n}\n" always "class A {};\ntemplate<typename T> struct B;\ntemplate<> struct B<A> {};\nint f() {\n    int B[1] = {};\n    return B[0];\n}\n"
Line 5583
  132 always 132
  = always "class A { } ; struct B<A> ; template < typename T > struct B ; struct B<A> { } ; int f ( ) { int B [ 1 ] = { } ; return B [ 0 ] ; }"
  "class A { } ; struct B<A> ; template < typename T > struct B ; struct B<A> { } ; int f ( ) { int B [ 1 ] = { } ; return B [ 0 ] ; }" always "class A { } ; struct B<A> ; template < typename T > struct B ; struct B<A> { } ; int f ( ) { int B [ 1 ] = { } ; return B [ 0 ] ; }"
Line 5591
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5591 always 5591
  expected always "class A { } ; struct B<A> ; template < typename T > struct B ; struct B<A> { } ; int f ( ) { int B [ 1 ] = { } ; return B [ 0 ] ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5591 always 5591
  code always "class A {};\ntemplate<typename T> struct B;\ntemplate<> struct B<A> {};\nint f() {\n    int B[1] = {};\n    return B[0];\n}\n"
Line 5596
  142 always 142
  = always "template<typename T> class hash;\ntemplate<> class hash<int> {};\nint f(int i) {\n    int hash = i;\n    const int a[2]{};\n    return a[hash];\n}\n"
  "template<typename T> class hash;\ntemplate<> class hash<int> {};\nint f(int i) {\n    int hash = i;\n    const int a[2]{};\n    return a[hash];\n}\n" always "template<typename T> class hash;\ntemplate<> class hash<int> {};\nint f(int i) {\n    int hash = i;\n    const int a[2]{};\n    return a[hash];\n}\n"
Line 5604
  163 always 163
  = always "class hash<int> ; template < typename T > class hash ; class hash<int> { } ; int f ( int i ) { int hash ; hash = i ; const int a [ 2 ] { } ; return a [ hash ] ; }"
  "class hash<int> ; template < typename T > class hash ; class hash<int> { } ; int f ( int i ) { int hash ; hash = i ; const int a [ 2 ] { } ; return a [ hash ] ; }" always "class hash<int> ; template < typename T > class hash ; class hash<int> { } ; int f ( int i ) { int hash ; hash = i ; const int a [ 2 ] { } ; return a [ hash ] ; }"
Line 5613
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5613 always 5613
  expected always "class hash<int> ; template < typename T > class hash ; class hash<int> { } ; int f ( int i ) { int hash ; hash = i ; const int a [ 2 ] { } ; return a [ hash ] ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5613 always 5613
  code always "template<typename T> class hash;\ntemplate<> class hash<int> {};\nint f(int i) {\n    int hash = i;\n    const int a[2]{};\n    return a[hash];\n}\n"
Line 5617
  93 always 93
  = always "template<class T, int N> struct Foo {};\ntemplate<class T> using Bar = Foo<T,3>;\nBar<int> b;\n"
  "template<class T, int N> struct Foo {};\ntemplate<class T> using Bar = Foo<T,3>;\nBar<int> b;\n" always "template<class T, int N> struct Foo {};\ntemplate<class T> using Bar = Foo<T,3>;\nBar<int> b;\n"
Line 5621
  59 always 59
  = always "struct Foo<int,3> ; Foo<int,3> b ; struct Foo<int,3> { } ;"
  "struct Foo<int,3> ; Foo<int,3> b ; struct Foo<int,3> { } ;" always "struct Foo<int,3> ; Foo<int,3> b ; struct Foo<int,3> { } ;"
Line 5625
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5625 always 5625
  expected always "struct Foo<int,3> ; Foo<int,3> b ; struct Foo<int,3> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5625 always 5625
  code always "template<class T, int N> struct Foo {};\ntemplate<class T> using Bar = Foo<T,3>;\nBar<int> b;\n"
Line 5629
  112 always 112
  = always "namespace A { template<class T, int N> struct Foo {}; }\ntemplate<class T> using Bar = A::Foo<T,3>;\nBar<int> b;\n"
  "namespace A { template<class T, int N> struct Foo {}; }\ntemplate<class T> using Bar = A::Foo<T,3>;\nBar<int> b;\n" always "namespace A { template<class T, int N> struct Foo {}; }\ntemplate<class T> using Bar = A::Foo<T,3>;\nBar<int> b;\n"
Line 5633
  85 always 85
  = always "namespace A { struct Foo<int,3> ; } A :: Foo<int,3> b ; struct A :: Foo<int,3> { } ;"
  "namespace A { struct Foo<int,3> ; } A :: Foo<int,3> b ; struct A :: Foo<int,3> { } ;" always "namespace A { struct Foo<int,3> ; } A :: Foo<int,3> b ; struct A :: Foo<int,3> { } ;"
Line 5637
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5637 always 5637
  expected always "namespace A { struct Foo<int,3> ; } A :: Foo<int,3> b ; struct A :: Foo<int,3> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5637 always 5637
  code always "namespace A { template<class T, int N> struct Foo {}; }\ntemplate<class T> using Bar = A::Foo<T,3>;\nBar<int> b;\n"
Line 5641
  104 always 104
  = always "template <int> struct Tag {};\ntemplate <int ID> using SPtr = std::shared_ptr<void(Tag<ID>)>;\nSPtr<0> s;"
  "template <int> struct Tag {};\ntemplate <int ID> using SPtr = std::shared_ptr<void(Tag<ID>)>;\nSPtr<0> s;" always "template <int> struct Tag {};\ntemplate <int ID> using SPtr = std::shared_ptr<void(Tag<ID>)>;\nSPtr<0> s;"
Line 5644
  78 always 78
  = always "struct Tag<0> ; std :: shared_ptr < void ( Tag<0> ) > s ; struct Tag<0> { } ;"
  "struct Tag<0> ; std :: shared_ptr < void ( Tag<0> ) > s ; struct Tag<0> { } ;" always "struct Tag<0> ; std :: shared_ptr < void ( Tag<0> ) > s ; struct Tag<0> { } ;"
Line 5647
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5647 always 5647
  expected always "struct Tag<0> ; std :: shared_ptr < void ( Tag<0> ) > s ; struct Tag<0> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5647 always 5647
  code always "template <int> struct Tag {};\ntemplate <int ID> using SPtr = std::shared_ptr<void(Tag<ID>)>;\nSPtr<0> s;"
Line 5651
  131 always 131
  = always "template <class T>\nusing IntrusivePtr = boost::intrusive_ptr<T>;\ntemplate <class T> class Vertex { };\nIntrusivePtr<Vertex<int>> p;"
  "template <class T>\nusing IntrusivePtr = boost::intrusive_ptr<T>;\ntemplate <class T> class Vertex { };\nIntrusivePtr<Vertex<int>> p;" always "template <class T>\nusing IntrusivePtr = boost::intrusive_ptr<T>;\ntemplate <class T> class Vertex { };\nIntrusivePtr<Vertex<int>> p;"
Line 5655
  87 always 87
  = always "class Vertex<int> ; boost :: intrusive_ptr < Vertex<int> > p ; class Vertex<int> { } ;"
  "class Vertex<int> ; boost :: intrusive_ptr < Vertex<int> > p ; class Vertex<int> { } ;" always "class Vertex<int> ; boost :: intrusive_ptr < Vertex<int> > p ; class Vertex<int> { } ;"
Line 5658
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5658 always 5658
  expected always "class Vertex<int> ; boost :: intrusive_ptr < Vertex<int> > p ; class Vertex<int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5658 always 5658
  code always "template <class T>\nusing IntrusivePtr = boost::intrusive_ptr<T>;\ntemplate <class T> class Vertex { };\nIntrusivePtr<Vertex<int>> p;"
Line 5662
  92 always 92
  = always "template<typename T> using A = int;\ntemplate<typename T> using B = T;\nA<char> a;\nB<char> b;"
  "template<typename T> using A = int;\ntemplate<typename T> using B = T;\nA<char> a;\nB<char> b;" always "template<typename T> using A = int;\ntemplate<typename T> using B = T;\nA<char> a;\nB<char> b;"
Line 5666
  17 always 17
  = always "int a ; char b ;"
  "int a ; char b ;" always "int a ; char b ;"
Line 5668
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5668 always 5668
  expected always "int a ; char b ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5668 always 5668
  code always "template<typename T> using A = int;\ntemplate<typename T> using B = T;\nA<char> a;\nB<char> b;"
Line 5672
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
Line 5673
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 5675
  code possible {"ConvertHelper < From, To > c ;"@57,"ConvertHelper < From, To > :: Create ( ) ;"@58,"integral_constant < bool, sizeof ( ConvertHelper < From, To > :: Create ( ) ) > ;"@59,"integral_constant < bool, sizeof ( ns :: ConvertHelper < From, To > :: Create ( ) ) > ;"@60}
Line 5676
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytemplate.cpp"@57,"cppcheck-2.8/test/testsimplifytemplate.cpp"@58,"cppcheck-2.8/test/testsimplifytemplate.cpp"@59,"cppcheck-2.8/test/testsimplifytemplate.cpp"@60}
  line inconclusive {5683@57,5686@58,5689@59,5692@60}
  "test.cpp" always "test.cpp"
  "" always ""
Line 5678
  return always {!<=-1,!>=2}
  numberOfArguments {!<=-1,2@57}
  false always 0
  patternAfter inconclusive {":: %name% ("@57,":: %name% ("@58,":: %name% ("@59,":: %name% ("@60}
Line 5683
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5683 always 5683
  false always 0
  ( always {!<=-1,!>=2}
  "ConvertHelper < From, To > c ;" always "ConvertHelper < From, To > c ;"
  2 always 2
  ":: %name% (" always ":: %name% ("
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5683 always 5683
Line 5686
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5686 always 5686
  true always 1
  ( always {!<=-1,!>=2}
  "ConvertHelper < From, To > :: Create ( ) ;" always "ConvertHelper < From, To > :: Create ( ) ;"
  2 always 2
  ":: %name% (" always ":: %name% ("
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5686 always 5686
Line 5689
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5689 always 5689
  false always 0
  ( always {!<=-1,!>=2}
  "integral_constant < bool, sizeof ( ConvertHelper < From, To > :: Create ( ) ) > ;" always "integral_constant < bool, sizeof ( ConvertHelper < From, To > :: Create ( ) ) > ;"
  2 always 2
  ":: %name% (" always ":: %name% ("
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5689 always 5689
Line 5692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5692 always 5692
  false always 0
  ( always {!<=-1,!>=2}
  "integral_constant < bool, sizeof ( ns :: ConvertHelper < From, To > :: Create ( ) ) > ;" always "integral_constant < bool, sizeof ( ns :: ConvertHelper < From, To > :: Create ( ) ) > ;"
  2 always 2
  ":: %name% (" always ":: %name% ("
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5692 always 5692
Line 5698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5698 always 5698
  1U always 1
  ( always !<=-1
  "template<typename = void> struct s;" always "template<typename = void> struct s;"
Line 5699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5699 always 5699
  1U always 1
  ( always !<=-1
  "template<template<typename = float> typename T> struct A {\n    void f();\n    void g();\n};n" always "template<template<typename = float> typename T> struct A {\n    void f();\n    void g();\n};n"
Line 5706
  348 always 348
  = always "template<typename T>\nvoid f(T n) { (void)n; }\nstatic void func() {\n    f(0);\n    f(0u);\n    f(0U);\n    f(0l);\n    f(0L);\n    f(0ul);\n    f(0UL);\n    f(0ll);\n    f(0LL);\n    f(0ull);\n    f(0ULL);\n    f(0.0);\n    f(0.0f);\n    f(0.0F);\n    f(0.0l);\n    f(0.0L);\n    f('c');\n    f(L'c');\n    f(\"string\");\n    f(L\"string\");\n    f(true);\n    f(false);\n}"
  "template<typename T>\nvoid f(T n) { (void)n; }\nstatic void func() {\n    f(0);\n    f(0u);\n    f(0U);\n    f(0l);\n    f(0L);\n    f(0ul);\n    f(0UL);\n    f(0ll);\n    f(0LL);\n    f(0ull);\n    f(0ULL);\n    f(0.0);\n    f(0.0f);\n    f(0.0F);\n    f(0.0l);\n    f(0.0L);\n    f('c');\n    f(L'c');\n    f(\"string\");\n    f(L\"string\");\n    f(true);\n    f(false);\n}" always "template<typename T>\nvoid f(T n) { (void)n; }\nstatic void func() {\n    f(0);\n    f(0u);\n    f(0U);\n    f(0l);\n    f(0L);\n    f(0ul);\n    f(0UL);\n    f(0ll);\n    f(0LL);\n    f(0ull);\n    f(0ULL);\n    f(0.0);\n    f(0.0f);\n    f(0.0F);\n    f(0.0l);\n    f(0.0L);\n    f('c');\n    f(L'c');\n    f(\"string\");\n    f(L\"string\");\n    f(true);\n    f(false);\n}"
Line 5732
  1717 always 1717
  = always "void f<int> ( int n ) ; void f<unsignedint> ( unsigned int n ) ; void f<long> ( long n ) ; void f<unsignedlong> ( unsigned long n ) ; void f<longlong> ( long long n ) ; void f<unsignedlonglong> ( unsigned long long n ) ; void f<double> ( double n ) ; void f<float> ( float n ) ; void f<longdouble> ( long double n ) ; void f<char> ( char n ) ; void f<wchar_t> ( wchar_t n ) ; void f<constchar*> ( const char * n ) ; void f<constwchar_t*> ( const wchar_t * n ) ; void f<bool> ( bool n ) ; static void func ( ) { f<int> ( 0 ) ; f<unsignedint> ( 0u ) ; f<unsignedint> ( 0U ) ; f<long> ( 0l ) ; f<long> ( 0L ) ; f<unsignedlong> ( 0ul ) ; f<unsignedlong> ( 0UL ) ; f<longlong> ( 0ll ) ; f<longlong> ( 0LL ) ; f<unsignedlonglong> ( 0ull ) ; f<unsignedlonglong> ( 0ULL ) ; f<double> ( 0.0 ) ; f<float> ( 0.0f ) ; f<float> ( 0.0F ) ; f<longdouble> ( 0.0l ) ; f<longdouble> ( 0.0L ) ; f<char> ( 'c' ) ; f<wchar_t> ( L'c' ) ; f<constchar*> ( \"string\" ) ; f<constwchar_t*> ( L\"string\" ) ; f<bool> ( true ) ; f<bool> ( false ) ; } void f<int> ( int n ) { ( void ) n ; } void f<unsignedint> ( unsigned int n ) { ( void ) n ; } void f<long> ( long n ) { ( void ) n ; } void f<unsignedlong> ( unsigned long n ) { ( void ) n ; } void f<longlong> ( long long n ) { ( void ) n ; } void f<unsignedlonglong> ( unsigned long long n ) { ( void ) n ; } void f<double> ( double n ) { ( void ) n ; } void f<float> ( float n ) { ( void ) n ; } void f<longdouble> ( long double n ) { ( void ) n ; } void f<char> ( char n ) { ( void ) n ; } void f<wchar_t> ( wchar_t n ) { ( void ) n ; } void f<constchar*> ( const char * n ) { ( void ) n ; } void f<constwchar_t*> ( const wchar_t * n ) { ( void ) n ; } void f<bool> ( bool n ) { ( void ) n ; }"
  "void f<int> ( int n ) ; void f<unsignedint> ( unsigned int n ) ; void f<long> ( long n ) ; void f<unsignedlong> ( unsigned long n ) ; void f<longlong> ( long long n ) ; void f<unsignedlonglong> ( unsigned long long n ) ; void f<double> ( double n ) ; void f<float> ( float n ) ; void f<longdouble> ( long double n ) ; void f<char> ( char n ) ; void f<wchar_t> ( wchar_t n ) ; void f<constchar*> ( const char * n ) ; void f<constwchar_t*> ( const wchar_t * n ) ; void f<bool> ( bool n ) ; static void func ( ) { f<int> ( 0 ) ; f<unsignedint> ( 0u ) ; f<unsignedint> ( 0U ) ; f<long> ( 0l ) ; f<long> ( 0L ) ; f<unsignedlong> ( 0ul ) ; f<unsignedlong> ( 0UL ) ; f<longlong> ( 0ll ) ; f<longlong> ( 0LL ) ; f<unsignedlonglong> ( 0ull ) ; f<unsignedlonglong> ( 0ULL ) ; f<double> ( 0.0 ) ; f<float> ( 0.0f ) ; f<float> ( 0.0F ) ; f<longdouble> ( 0.0l ) ; f<longdouble> ( 0.0L ) ; f<char> ( 'c' ) ; f<wchar_t> ( L'c' ) ; f<constchar*> ( \"string\" ) ; f<constwchar_t*> ( L\"string\" ) ; f<bool> ( true ) ; f<bool> ( false ) ; } void f<int> ( int n ) { ( void ) n ; } void f<unsignedint> ( unsigned int n ) { ( void ) n ; } void f<long> ( long n ) { ( void ) n ; } void f<unsignedlong> ( unsigned long n ) { ( void ) n ; } void f<longlong> ( long long n ) { ( void ) n ; } void f<unsignedlonglong> ( unsigned long long n ) { ( void ) n ; } void f<double> ( double n ) { ( void ) n ; } void f<float> ( float n ) { ( void ) n ; } void f<longdouble> ( long double n ) { ( void ) n ; } void f<char> ( char n ) { ( void ) n ; } void f<wchar_t> ( wchar_t n ) { ( void ) n ; } void f<constchar*> ( const char * n ) { ( void ) n ; } void f<constwchar_t*> ( const wchar_t * n ) { ( void ) n ; } void f<bool> ( bool n ) { ( void ) n ; }" always "void f<int> ( int n ) ; void f<unsignedint> ( unsigned int n ) ; void f<long> ( long n ) ; void f<unsignedlong> ( unsigned long n ) ; void f<longlong> ( long long n ) ; void f<unsignedlonglong> ( unsigned long long n ) ; void f<double> ( double n ) ; void f<float> ( float n ) ; void f<longdouble> ( long double n ) ; void f<char> ( char n ) ; void f<wchar_t> ( wchar_t n ) ; void f<constchar*> ( const char * n ) ; void f<constwchar_t*> ( const wchar_t * n ) ; void f<bool> ( bool n ) ; static void func ( ) { f<int> ( 0 ) ; f<unsignedint> ( 0u ) ; f<unsignedint> ( 0U ) ; f<long> ( 0l ) ; f<long> ( 0L ) ; f<unsignedlong> ( 0ul ) ; f<unsignedlong> ( 0UL ) ; f<longlong> ( 0ll ) ; f<longlong> ( 0LL ) ; f<unsignedlonglong> ( 0ull ) ; f<unsignedlonglong> ( 0ULL ) ; f<double> ( 0.0 ) ; f<float> ( 0.0f ) ; f<float> ( 0.0F ) ; f<longdouble> ( 0.0l ) ; f<longdouble> ( 0.0L ) ; f<char> ( 'c' ) ; f<wchar_t> ( L'c' ) ; f<constchar*> ( \"string\" ) ; f<constwchar_t*> ( L\"string\" ) ; f<bool> ( true ) ; f<bool> ( false ) ; } void f<int> ( int n ) { ( void ) n ; } void f<unsignedint> ( unsigned int n ) { ( void ) n ; } void f<long> ( long n ) { ( void ) n ; } void f<unsignedlong> ( unsigned long n ) { ( void ) n ; } void f<longlong> ( long long n ) { ( void ) n ; } void f<unsignedlonglong> ( unsigned long long n ) { ( void ) n ; } void f<double> ( double n ) { ( void ) n ; } void f<float> ( float n ) { ( void ) n ; } void f<longdouble> ( long double n ) { ( void ) n ; } void f<char> ( char n ) { ( void ) n ; } void f<wchar_t> ( wchar_t n ) { ( void ) n ; } void f<constchar*> ( const char * n ) { ( void ) n ; } void f<constwchar_t*> ( const wchar_t * n ) { ( void ) n ; } void f<bool> ( bool n ) { ( void ) n ; }"
Line 5785
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5785 always 5785
  expected always "void f<int> ( int n ) ; void f<unsignedint> ( unsigned int n ) ; void f<long> ( long n ) ; void f<unsignedlong> ( unsigned long n ) ; void f<longlong> ( long long n ) ; void f<unsignedlonglong> ( unsigned long long n ) ; void f<double> ( double n ) ; void f<float> ( float n ) ; void f<longdouble> ( long double n ) ; void f<char> ( char n ) ; void f<wchar_t> ( wchar_t n ) ; void f<constchar*> ( const char * n ) ; void f<constwchar_t*> ( const wchar_t * n ) ; void f<bool> ( bool n ) ; static void func ( ) { f<int> ( 0 ) ; f<unsignedint> ( 0u ) ; f<unsignedint> ( 0U ) ; f<long> ( 0l ) ; f<long> ( 0L ) ; f<unsignedlong> ( 0ul ) ; f<unsignedlong> ( 0UL ) ; f<longlong> ( 0ll ) ; f<longlong> ( 0LL ) ; f<unsignedlonglong> ( 0ull ) ; f<unsignedlonglong> ( 0ULL ) ; f<double> ( 0.0 ) ; f<float> ( 0.0f ) ; f<float> ( 0.0F ) ; f<longdouble> ( 0.0l ) ; f<longdouble> ( 0.0L ) ; f<char> ( 'c' ) ; f<wchar_t> ( L'c' ) ; f<constchar*> ( \"string\" ) ; f<constwchar_t*> ( L\"string\" ) ; f<bool> ( true ) ; f<bool> ( false ) ; } void f<int> ( int n ) { ( void ) n ; } void f<unsignedint> ( unsigned int n ) { ( void ) n ; } void f<long> ( long n ) { ( void ) n ; } void f<unsignedlong> ( unsigned long n ) { ( void ) n ; } void f<longlong> ( long long n ) { ( void ) n ; } void f<unsignedlonglong> ( unsigned long long n ) { ( void ) n ; } void f<double> ( double n ) { ( void ) n ; } void f<float> ( float n ) { ( void ) n ; } void f<longdouble> ( long double n ) { ( void ) n ; } void f<char> ( char n ) { ( void ) n ; } void f<wchar_t> ( wchar_t n ) { ( void ) n ; } void f<constchar*> ( const char * n ) { ( void ) n ; } void f<constwchar_t*> ( const wchar_t * n ) { ( void ) n ; } void f<bool> ( bool n ) { ( void ) n ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5785 always 5785
  code always "template<typename T>\nvoid f(T n) { (void)n; }\nstatic void func() {\n    f(0);\n    f(0u);\n    f(0U);\n    f(0l);\n    f(0L);\n    f(0ul);\n    f(0UL);\n    f(0ll);\n    f(0LL);\n    f(0ull);\n    f(0ULL);\n    f(0.0);\n    f(0.0f);\n    f(0.0F);\n    f(0.0l);\n    f(0.0L);\n    f('c');\n    f(L'c');\n    f(\"string\");\n    f(L\"string\");\n    f(true);\n    f(false);\n}"
Line 5786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5786 always 5786
  "" always ""
Line 5790
  107 always 107
  = always "template<typename T, typename U>\nvoid f(T t, U u) { }\nstatic void func() {\n    f(0, 0.0);\n    f(0.0, 0);\n}"
  "template<typename T, typename U>\nvoid f(T t, U u) { }\nstatic void func() {\n    f(0, 0.0);\n    f(0.0, 0);\n}" always "template<typename T, typename U>\nvoid f(T t, U u) { }\nstatic void func() {\n    f(0, 0.0);\n    f(0.0, 0);\n}"
Line 5797
  251 always 251
  = always "void f<int,double> ( int t , double u ) ; void f<double,int> ( double t , int u ) ; static void func ( ) { f<int,double> ( 0 , 0.0 ) ; f<double,int> ( 0.0, 0 ) ; void f<int,double> ( int t , double u ) { } void f<double,int> ( double t , int u ) { } "
  "void f<int,double> ( int t , double u ) ; void f<double,int> ( double t , int u ) ; static void func ( ) { f<int,double> ( 0 , 0.0 ) ; f<double,int> ( 0.0, 0 ) ; void f<int,double> ( int t , double u ) { } void f<double,int> ( double t , int u ) { } " always "void f<int,double> ( int t , double u ) ; void f<double,int> ( double t , int u ) ; static void func ( ) { f<int,double> ( 0 , 0.0 ) ; f<double,int> ( 0.0, 0 ) ; void f<int,double> ( int t , double u ) { } void f<double,int> ( double t , int u ) { } "
Line 5805
  119 always 119
  = always "template < typename T , typename U > void f ( T t , U u ) { } static void func ( ) { f ( 0 , 0.0 ) ; f ( 0.0 , 0 ) ; }"
  "template < typename T , typename U > void f ( T t , U u ) { } static void func ( ) { f ( 0 , 0.0 ) ; f ( 0.0 , 0 ) ; }" always "template < typename T , typename U > void f ( T t , U u ) { } static void func ( ) { f ( 0 , 0.0 ) ; f ( 0.0 , 0 ) ; }"
Line 5812
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5812 always 5812
  expected always "void f<int,double> ( int t , double u ) ; void f<double,int> ( double t , int u ) ; static void func ( ) { f<int,double> ( 0 , 0.0 ) ; f<double,int> ( 0.0, 0 ) ; void f<int,double> ( int t , double u ) { } void f<double,int> ( double t , int u ) { } "
  actual always "template < typename T , typename U > void f ( T t , U u ) { } static void func ( ) { f ( 0 , 0.0 ) ; f ( 0.0 , 0 ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5812 always 5812
  code always "template<typename T, typename U>\nvoid f(T t, U u) { }\nstatic void func() {\n    f(0, 0.0);\n    f(0.0, 0);\n}"
Line 5816
  136 always 136
  = always "struct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};\nint main() {\n    A a;\n    a.f();\n}"
  "struct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};\nint main() {\n    A a;\n    a.f();\n}" always "struct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};\nint main() {\n    A a;\n    a.f();\n}"
Line 5825
  159 always 159
  = always "struct A { int a ; a = 1 ; void f ( ) { g<int> ( 1 ) ; } void g<int> ( int x ) ; } ; int main ( ) { A a ; a . f ( ) ; } void A :: g<int> ( int x ) { a = 2 ; }"
  "struct A { int a ; a = 1 ; void f ( ) { g<int> ( 1 ) ; } void g<int> ( int x ) ; } ; int main ( ) { A a ; a . f ( ) ; } void A :: g<int> ( int x ) { a = 2 ; }" always "struct A { int a ; a = 1 ; void f ( ) { g<int> ( 1 ) ; } void g<int> ( int x ) ; } ; int main ( ) { A a ; a . f ( ) ; } void A :: g<int> ( int x ) { a = 2 ; }"
Line 5834
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5834 always 5834
  exp always "struct A { int a ; a = 1 ; void f ( ) { g<int> ( 1 ) ; } void g<int> ( int x ) ; } ; int main ( ) { A a ; a . f ( ) ; } void A :: g<int> ( int x ) { a = 2 ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5834 always 5834
  code always "struct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};\nint main() {\n    A a;\n    a.f();\n}"
Line 5839
  90 always 90
  = always "int a = 1;\ntemplate <typename T> void f(T x, T y) { a = x + y; }\nvoid test() { f(0, 0); }"
  "int a = 1;\ntemplate <typename T> void f(T x, T y) { a = x + y; }\nvoid test() { f(0, 0); }" always "int a = 1;\ntemplate <typename T> void f(T x, T y) { a = x + y; }\nvoid test() { f(0, 0); }"
Line 5842
  131 always 131
  = always "int a ; a = 1 ; void f<int> ( int x , int y ) ; void test ( ) { f<int> ( 0 , 0 ) ; } void f<int> ( int x , int y ) { a = x + y ; }"
  "int a ; a = 1 ; void f<int> ( int x , int y ) ; void test ( ) { f<int> ( 0 , 0 ) ; } void f<int> ( int x , int y ) { a = x + y ; }" always "int a ; a = 1 ; void f<int> ( int x , int y ) ; void test ( ) { f<int> ( 0 , 0 ) ; } void f<int> ( int x , int y ) { a = x + y ; }"
Line 5846
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5846 always 5846
  exp always "int a ; a = 1 ; void f<int> ( int x , int y ) ; void test ( ) { f<int> ( 0 , 0 ) ; } void f<int> ( int x , int y ) { a = x + y ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5846 always 5846
  code always "int a = 1;\ntemplate <typename T> void f(T x, T y) { a = x + y; }\nvoid test() { f(0, 0); }"
Line 5849
  97 always 97
  = always "int a = 1;\ntemplate <typename T> void f(T x, double y) { a = x + y; }\nvoid test() { f(0, 0.0); }"
  "int a = 1;\ntemplate <typename T> void f(T x, double y) { a = x + y; }\nvoid test() { f(0, 0.0); }" always "int a = 1;\ntemplate <typename T> void f(T x, double y) { a = x + y; }\nvoid test() { f(0, 0.0); }"
Line 5852
  139 always 139
  = always "int a ; a = 1 ; void f<int> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0.0 ) ; } void f<int> ( int x , double y ) { a = x + y ; }"
  "int a ; a = 1 ; void f<int> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0.0 ) ; } void f<int> ( int x , double y ) { a = x + y ; }" always "int a ; a = 1 ; void f<int> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0.0 ) ; } void f<int> ( int x , double y ) { a = x + y ; }"
Line 5856
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5856 always 5856
  exp always "int a ; a = 1 ; void f<int> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0.0 ) ; } void f<int> ( int x , double y ) { a = x + y ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5856 always 5856
  code always "int a = 1;\ntemplate <typename T> void f(T x, double y) { a = x + y; }\nvoid test() { f(0, 0.0); }"
Line 5859
  97 always 97
  = always "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\nvoid test() { f(0.0, 0); }"
  "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\nvoid test() { f(0.0, 0); }" always "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\nvoid test() { f(0.0, 0); }"
Line 5862
  139 always 139
  = always "int a ; a = 1 ; void f<int> ( double x , int y ) ; void test ( ) { f<int> ( 0.0 , 0 ) ; } void f<int> ( double x , int y ) { a = x + y ; }"
  "int a ; a = 1 ; void f<int> ( double x , int y ) ; void test ( ) { f<int> ( 0.0 , 0 ) ; } void f<int> ( double x , int y ) { a = x + y ; }" always "int a ; a = 1 ; void f<int> ( double x , int y ) ; void test ( ) { f<int> ( 0.0 , 0 ) ; } void f<int> ( double x , int y ) { a = x + y ; }"
Line 5866
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5866 always 5866
  exp always "int a ; a = 1 ; void f<int> ( double x , int y ) ; void test ( ) { f<int> ( 0.0 , 0 ) ; } void f<int> ( double x , int y ) { a = x + y ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5866 always 5866
  code always "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\nvoid test() { f(0.0, 0); }"
Line 5870
  202 always 202
  = always "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\ntemplate <typename T> void f(int x, T y) { a = x + y; }\nvoid test() {\n    f(0, 0);\n    f(0.0, 0);\n    f(0, 0.0);\n    f(0.0, 0.0);\n}"
  "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\ntemplate <typename T> void f(int x, T y) { a = x + y; }\nvoid test() {\n    f(0, 0);\n    f(0.0, 0);\n    f(0, 0.0);\n    f(0.0, 0.0);\n}" always "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\ntemplate <typename T> void f(int x, T y) { a = x + y; }\nvoid test() {\n    f(0, 0);\n    f(0.0, 0);\n    f(0, 0.0);\n    f(0.0, 0.0);\n}"
Line 5879
  472 always 472
  = always "int a ; a = 1 ; void f<int> ( int x , int y ) ; void f<int> ( double x , int y ) ; void f<double> ( int x , double y ) ; void f<double> ( double x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<int> ( double x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; } void f<double> ( double x , double y ) { a = x + y ; }"
  "int a ; a = 1 ; void f<int> ( int x , int y ) ; void f<int> ( double x , int y ) ; void f<double> ( int x , double y ) ; void f<double> ( double x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<int> ( double x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; } void f<double> ( double x , double y ) { a = x + y ; }" always "int a ; a = 1 ; void f<int> ( int x , int y ) ; void f<int> ( double x , int y ) ; void f<double> ( int x , double y ) ; void f<double> ( double x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<int> ( double x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; } void f<double> ( double x , double y ) { a = x + y ; }"
Line 5895
  358 always 358
  = always "int a ; a = 1 ; template < typename T > void f ( double x , T y ) { a = x + y ; } void f<int> ( int x , int y ) ; void f<double> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; }"
  "int a ; a = 1 ; template < typename T > void f ( double x , T y ) { a = x + y ; } void f<int> ( int x , int y ) ; void f<double> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; }" always "int a ; a = 1 ; template < typename T > void f ( double x , T y ) { a = x + y ; } void f<int> ( int x , int y ) ; void f<double> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; }"
Line 5906
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5906 always 5906
  exp always "int a ; a = 1 ; void f<int> ( int x , int y ) ; void f<int> ( double x , int y ) ; void f<double> ( int x , double y ) ; void f<double> ( double x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<int> ( double x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; } void f<double> ( double x , double y ) { a = x + y ; }"
  act always "int a ; a = 1 ; template < typename T > void f ( double x , T y ) { a = x + y ; } void f<int> ( int x , int y ) ; void f<double> ( int x , double y ) ; void test ( ) { f<int> ( 0 , 0 ) ; f<int> ( 0.0 , 0 ) ; f<double> ( 0 , 0.0 ) ; f<double> ( 0.0 , 0.0 ) ; } void f<int> ( int x , int y ) { a = x + y ; } void f<double> ( int x , double y ) { a = x + y ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5906 always 5906
  code always "int a = 1;\ntemplate <typename T> void f(double x, T y) { a = x + y; }\ntemplate <typename T> void f(int x, T y) { a = x + y; }\nvoid test() {\n    f(0, 0);\n    f(0.0, 0);\n    f(0, 0.0);\n    f(0.0, 0.0);\n}"
Line 5909
  104 always 104
  = always "int a = 1;\ntemplate <typename T, typename U> void f(T x, U y) { a = x + y; }\nvoid test() { f(0, 0.0); }"
  "int a = 1;\ntemplate <typename T, typename U> void f(T x, U y) { a = x + y; }\nvoid test() { f(0, 0.0); }" always "int a = 1;\ntemplate <typename T, typename U> void f(T x, U y) { a = x + y; }\nvoid test() { f(0, 0.0); }"
Line 5912
  160 always 160
  = always "int a ; a = 1 ; void f<int,double> ( int x , double y ) ; void test ( ) { f<int,double> ( 0 , 0.0 ) ; } void f<int,double> ( int x , double y ) { a = x + y ; }"
  "int a ; a = 1 ; void f<int,double> ( int x , double y ) ; void test ( ) { f<int,double> ( 0 , 0.0 ) ; } void f<int,double> ( int x , double y ) { a = x + y ; }" always "int a ; a = 1 ; void f<int,double> ( int x , double y ) ; void test ( ) { f<int,double> ( 0 , 0.0 ) ; } void f<int,double> ( int x , double y ) { a = x + y ; }"
Line 5916
  124 always 124
  = always "int a ; a = 1 ; template < typename T , typename U > void f ( T x , U y ) { a = x + y ; } void test ( ) { f ( 0 , 0.0 ) ; }"
  "int a ; a = 1 ; template < typename T , typename U > void f ( T x , U y ) { a = x + y ; } void test ( ) { f ( 0 , 0.0 ) ; }" always "int a ; a = 1 ; template < typename T , typename U > void f ( T x , U y ) { a = x + y ; } void test ( ) { f ( 0 , 0.0 ) ; }"
Line 5919
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5919 always 5919
  exp always "int a ; a = 1 ; void f<int,double> ( int x , double y ) ; void test ( ) { f<int,double> ( 0 , 0.0 ) ; } void f<int,double> ( int x , double y ) { a = x + y ; }"
  act always "int a ; a = 1 ; template < typename T , typename U > void f ( T x , U y ) { a = x + y ; } void test ( ) { f ( 0 , 0.0 ) ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5919 always 5919
  code always "int a = 1;\ntemplate <typename T, typename U> void f(T x, U y) { a = x + y; }\nvoid test() { f(0, 0.0); }"
Line 5925
  160 always 160
  = always "class Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);"
  "class Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);" always "class Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);"
Line 5933
  467 always 467
  = always "class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; Fred :: Fred<int> ( int t ) { } Fred :: Fred<double> ( double t ) { } Fred :: Fred<constchar*> ( const char * t ) { } Fred :: Fred<bool> ( bool t ) { }"
  "class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; Fred :: Fred<int> ( int t ) { } Fred :: Fred<double> ( double t ) { } Fred :: Fred<constchar*> ( const char * t ) { } Fred :: Fred<bool> ( bool t ) { }" always "class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; Fred :: Fred<int> ( int t ) { } Fred :: Fred<double> ( double t ) { } Fred :: Fred<constchar*> ( const char * t ) { } Fred :: Fred<bool> ( bool t ) { }"
Line 5948
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5948 always 5948
  exp always "class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; Fred :: Fred<int> ( int t ) { } Fred :: Fred<double> ( double t ) { } Fred :: Fred<constchar*> ( const char * t ) { } Fred :: Fred<bool> ( bool t ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5948 always 5948
  code always "class Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);"
Line 5951
  309 always 309
  = always "namespace NS {\nclass Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);\n}\nNS::Fred fred1 = NS::Fred(0);\nNS::Fred fred2 = NS::Fred(0.0);\nNS::Fred fred3 = NS::Fred(\"zero\");\nNS::Fred fred4 = NS::Fred(false);\n"
  "namespace NS {\nclass Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);\n}\nNS::Fred fred1 = NS::Fred(0);\nNS::Fred fred2 = NS::Fred(0.0);\nNS::Fred fred3 = NS::Fred(\"zero\");\nNS::Fred fred4 = NS::Fred(false);\n" always "namespace NS {\nclass Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);\n}\nNS::Fred fred1 = NS::Fred(0);\nNS::Fred fred2 = NS::Fred(0.0);\nNS::Fred fred3 = NS::Fred(\"zero\");\nNS::Fred fred4 = NS::Fred(false);\n"
Line 5965
  734 always 734
  = always "namespace NS { class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; } NS :: Fred fred1 ; fred1 = NS :: Fred<int> ( 0 ) ; NS :: Fred fred2 ; fred2 = NS :: Fred<double> ( 0.0 ) ; NS :: Fred fred3 ; fred3 = NS :: Fred<constchar*> ( \"zero\" ) ; NS :: Fred fred4 ; fred4 = NS :: Fred<bool> ( false ) ; NS :: Fred :: Fred<int> ( int t ) { } NS :: Fred :: Fred<double> ( double t ) { } NS :: Fred :: Fred<constchar*> ( const char * t ) { } NS :: Fred :: Fred<bool> ( bool t ) { }"
  "namespace NS { class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; } NS :: Fred fred1 ; fred1 = NS :: Fred<int> ( 0 ) ; NS :: Fred fred2 ; fred2 = NS :: Fred<double> ( 0.0 ) ; NS :: Fred fred3 ; fred3 = NS :: Fred<constchar*> ( \"zero\" ) ; NS :: Fred fred4 ; fred4 = NS :: Fred<bool> ( false ) ; NS :: Fred :: Fred<int> ( int t ) { } NS :: Fred :: Fred<double> ( double t ) { } NS :: Fred :: Fred<constchar*> ( const char * t ) { } NS :: Fred :: Fred<bool> ( bool t ) { }" always "namespace NS { class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; } NS :: Fred fred1 ; fred1 = NS :: Fred<int> ( 0 ) ; NS :: Fred fred2 ; fred2 = NS :: Fred<double> ( 0.0 ) ; NS :: Fred fred3 ; fred3 = NS :: Fred<constchar*> ( \"zero\" ) ; NS :: Fred fred4 ; fred4 = NS :: Fred<bool> ( false ) ; NS :: Fred :: Fred<int> ( int t ) { } NS :: Fred :: Fred<double> ( double t ) { } NS :: Fred :: Fred<constchar*> ( const char * t ) { } NS :: Fred :: Fred<bool> ( bool t ) { }"
Line 5986
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5986 always 5986
  exp always "namespace NS { class Fred { public: Fred<int> ( int t ) ; Fred<double> ( double t ) ; Fred<constchar*> ( const char * t ) ; Fred<bool> ( bool t ) ; } ; Fred fred1 ; fred1 = Fred<int> ( 0 ) ; Fred fred2 ; fred2 = Fred<double> ( 0.0 ) ; Fred fred3 ; fred3 = Fred<constchar*> ( \"zero\" ) ; Fred fred4 ; fred4 = Fred<bool> ( false ) ; } NS :: Fred fred1 ; fred1 = NS :: Fred<int> ( 0 ) ; NS :: Fred fred2 ; fred2 = NS :: Fred<double> ( 0.0 ) ; NS :: Fred fred3 ; fred3 = NS :: Fred<constchar*> ( \"zero\" ) ; NS :: Fred fred4 ; fred4 = NS :: Fred<bool> ( false ) ; NS :: Fred :: Fred<int> ( int t ) { } NS :: Fred :: Fred<double> ( double t ) { } NS :: Fred :: Fred<constchar*> ( const char * t ) { } NS :: Fred :: Fred<bool> ( bool t ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5986 always 5986
  code always "namespace NS {\nclass Fred {\npublic:\n    template <class T> Fred(T t) { }\n};\nFred fred1 = Fred(0);\nFred fred2 = Fred(0.0);\nFred fred3 = Fred(\"zero\");\nFred fred4 = Fred(false);\n}\nNS::Fred fred1 = NS::Fred(0);\nNS::Fred fred2 = NS::Fred(0.0);\nNS::Fred fred3 = NS::Fred(\"zero\");\nNS::Fred fred4 = NS::Fred(false);\n"
Line 5991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5991 always 5991
  "foo<2> = 2 ; foo<2> ;" always "foo<2> = 2 ; foo<2> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5991 always 5991
  "template<int N> foo = N; foo < ( 2 ) >;" always "template<int N> foo = N; foo < ( 2 ) >;"
Line 5992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5992 always 5992
  "foo<2> = 2 ; foo<2> ;" always "foo<2> = 2 ; foo<2> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5992 always 5992
  "template<int N> foo = N; foo < 1 + 1 >;" always "template<int N> foo = N; foo < 1 + 1 >;"
Line 5993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5993 always 5993
  "foo<2> = 2 ; foo<2> ;" always "foo<2> = 2 ; foo<2> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5993 always 5993
  "template<int N> foo = N; foo < ( 1 + 1 ) >;" always "template<int N> foo = N; foo < ( 1 + 1 ) >;"
Line 5995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5995 always 5995
  "foo<2,2> = 4 ; foo<2,2> ;" always "foo<2,2> = 4 ; foo<2,2> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5995 always 5995
  "template<int N, int M> foo = N * M; foo < ( 2 ), ( 2 ) >;" always "template<int N, int M> foo = N * M; foo < ( 2 ), ( 2 ) >;"
Line 5996
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5996 always 5996
  "foo<2,2> = 4 ; foo<2,2> ;" always "foo<2,2> = 4 ; foo<2,2> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5996 always 5996
  "template<int N, int M> foo = N * M; foo < 1 + 1, 1 + 1 >;" always "template<int N, int M> foo = N * M; foo < 1 + 1, 1 + 1 >;"
Line 5997
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5997 always 5997
  "foo<2,2> = 4 ; foo<2,2> ;" always "foo<2,2> = 4 ; foo<2,2> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5997 always 5997
  "template<int N, int M> foo = N * M; foo < ( 1 + 1 ), ( 1 + 1 ) >;" always "template<int N, int M> foo = N * M; foo < ( 1 + 1 ), ( 1 + 1 ) >;"
Line 5999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5999 always 5999
  "foo<true> = true ; foo<true> ;" always "foo<true> = true ; foo<true> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  5999 always 5999
  "template<bool N> foo = N; foo < true ? true : false >;" always "template<bool N> foo = N; foo < true ? true : false >;"
Line 6000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6000 always 6000
  "foo<false> = false ; foo<false> ;" always "foo<false> = false ; foo<false> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6000 always 6000
  "template<bool N> foo = N; foo < false ? true : false >;" always "template<bool N> foo = N; foo < false ? true : false >;"
Line 6001
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6001 always 6001
  "foo<true> = true ; foo<true> ;" always "foo<true> = true ; foo<true> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6001 always 6001
  "template<bool N> foo = N; foo < 1 ? true : false >;" always "template<bool N> foo = N; foo < 1 ? true : false >;"
Line 6002
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6002 always 6002
  "foo<false> = false ; foo<false> ;" always "foo<false> = false ; foo<false> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6002 always 6002
  "template<bool N> foo = N; foo < 0 ? true : false >;" always "template<bool N> foo = N; foo < 0 ? true : false >;"
Line 6003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6003 always 6003
  "foo<true> = true ; foo<true> ;" always "foo<true> = true ; foo<true> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6003 always 6003
  "template<bool N> foo = N; foo < (1 + 1 ) ? true : false >;" always "template<bool N> foo = N; foo < (1 + 1 ) ? true : false >;"
Line 6004
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6004 always 6004
  "foo<false> = false ; foo<false> ;" always "foo<false> = false ; foo<false> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6004 always 6004
  "template<bool N> foo = N; foo < ( 1 - 1) ? true : false >;" always "template<bool N> foo = N; foo < ( 1 - 1) ? true : false >;"
Line 6008
  134 always 134
  = always "template<bool T> struct a_t { static const bool t = T; };\ntypedef a_t<sizeof(void*) == sizeof(char)> a;\nvoid foo() { bool b = a::t; }"
  "template<bool T> struct a_t { static const bool t = T; };\ntypedef a_t<sizeof(void*) == sizeof(char)> a;\nvoid foo() { bool b = a::t; }" always "template<bool T> struct a_t { static const bool t = T; };\ntypedef a_t<sizeof(void*) == sizeof(char)> a;\nvoid foo() { bool b = a::t; }"
Line 6011
  122 always 122
  = always "struct a_t<false> ; void foo ( ) { bool b ; b = a_t<false> :: t ; } struct a_t<false> { static const bool t = false ; } ;"
  "struct a_t<false> ; void foo ( ) { bool b ; b = a_t<false> :: t ; } struct a_t<false> { static const bool t = false ; } ;" always "struct a_t<false> ; void foo ( ) { bool b ; b = a_t<false> :: t ; } struct a_t<false> { static const bool t = false ; } ;"
Line 6014
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6014 always 6014
  expected always "struct a_t<false> ; void foo ( ) { bool b ; b = a_t<false> :: t ; } struct a_t<false> { static const bool t = false ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6014 always 6014
  code always "template<bool T> struct a_t { static const bool t = T; };\ntypedef a_t<sizeof(void*) == sizeof(char)> a;\nvoid foo() { bool b = a::t; }"
Line 6018
  90 always 90
  = always "template <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<int,int>), \"\");"
  "template <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<int,int>), \"\");" always "template <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<int,int>), \"\");"
Line 6020
  139 always 139
  = always "struct e<> ; struct e<int,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<int,int> ) , \"\" ) ; struct e<> { } ; struct e<int,int> { } ;"
  "struct e<> ; struct e<int,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<int,int> ) , \"\" ) ; struct e<> { } ; struct e<int,int> { } ;" always "struct e<> ; struct e<int,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<int,int> ) , \"\" ) ; struct e<> { } ; struct e<int,int> { } ;"
Line 6023
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6023 always 6023
  expected always "struct e<> ; struct e<int,int> ; static_assert ( sizeof ( e<> ) == sizeof ( e<int,int> ) , \"\" ) ; struct e<> { } ; struct e<int,int> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6023 always 6023
  code always "template <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<int,int>), \"\");"
Line 6027
  146 always 146
  = always "template<typename T, typename... Args>\nvoid printf(const char *s, T value, Args... args) {}\n\nint main() {\n    printf<int, float>(\"\", foo, bar);\n}"
  "template<typename T, typename... Args>\nvoid printf(const char *s, T value, Args... args) {}\n\nint main() {\n    printf<int, float>(\"\", foo, bar);\n}" always "template<typename T, typename... Args>\nvoid printf(const char *s, T value, Args... args) {}\n\nint main() {\n    printf<int, float>(\"\", foo, bar);\n}"
Line 6033
  186 always 186
  = always "void printf<int,float> ( const char * s , int value , float ) ; int main ( ) { printf<int,float> ( \"\" , foo , bar ) ; } void printf<int,float> ( const char * s , int value , float ) { }"
  "void printf<int,float> ( const char * s , int value , float ) ; int main ( ) { printf<int,float> ( \"\" , foo , bar ) ; } void printf<int,float> ( const char * s , int value , float ) { }" always "void printf<int,float> ( const char * s , int value , float ) ; int main ( ) { printf<int,float> ( \"\" , foo , bar ) ; } void printf<int,float> ( const char * s , int value , float ) { }"
Line 6036
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6036 always 6036
  expected always "void printf<int,float> ( const char * s , int value , float ) ; int main ( ) { printf<int,float> ( \"\" , foo , bar ) ; } void printf<int,float> ( const char * s , int value , float ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6036 always 6036
  code always "template<typename T, typename... Args>\nvoid printf(const char *s, T value, Args... args) {}\n\nint main() {\n    printf<int, float>(\"\", foo, bar);\n}"
Line 6040
  112 always 112
  = always "template<int N, int ... M> struct A {   static void foo() {     int i = N;   } }; void bar() {   A<0>::foo(); }"
  "template<int N, int ... M> struct A {   static void foo() {     int i = N;   } }; void bar() {   A<0>::foo(); }" always "template<int N, int ... M> struct A {   static void foo() {     int i = N;   } }; void bar() {   A<0>::foo(); }"
Line 6048
  107 always 107
  = always "struct A<0> ; void bar ( ) { A<0> :: foo ( ) ; } struct A<0> { static void foo ( ) { int i ; i = 0 ; } } ;"
  "struct A<0> ; void bar ( ) { A<0> :: foo ( ) ; } struct A<0> { static void foo ( ) { int i ; i = 0 ; } } ;" always "struct A<0> ; void bar ( ) { A<0> :: foo ( ) ; } struct A<0> { static void foo ( ) { int i ; i = 0 ; } } ;"
Line 6051
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6051 always 6051
  expected always "struct A<0> ; void bar ( ) { A<0> :: foo ( ) ; } struct A<0> { static void foo ( ) { int i ; i = 0 ; } } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6051 always 6051
  code always "template<int N, int ... M> struct A {   static void foo() {     int i = N;   } }; void bar() {   A<0>::foo(); }"
Line 6056
  54 always 54
  = always "template <int N> const int foo = N*N;\nint x = foo<7>;"
  "template <int N> const int foo = N*N;\nint x = foo<7>;" always "template <int N> const int foo = N*N;\nint x = foo<7>;"
Line 6058
  45 always 45
  = always "const int foo<7> = 49 ; int x ; x = foo<7> ;"
  "const int foo<7> = 49 ; int x ; x = foo<7> ;" always "const int foo<7> = 49 ; int x ; x = foo<7> ;"
Line 6060
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6060 always 6060
  expected always "const int foo<7> = 49 ; int x ; x = foo<7> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6060 always 6060
  code always "template <int N> const int foo = N*N;\nint x = foo<7>;"
Line 6063
  50 always 50
  = always "template <int> const int foo = 7;\nint x = foo<7>;"
  "template <int> const int foo = 7;\nint x = foo<7>;" always "template <int> const int foo = 7;\nint x = foo<7>;"
Line 6065
  44 always 44
  = always "const int foo<7> = 7 ; int x ; x = foo<7> ;"
  "const int foo<7> = 7 ; int x ; x = foo<7> ;" always "const int foo<7> = 7 ; int x ; x = foo<7> ;"
Line 6067
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6067 always 6067
  expected always "const int foo<7> = 7 ; int x ; x = foo<7> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6067 always 6067
  code always "template <int> const int foo = 7;\nint x = foo<7>;"
Line 6070
  58 always 58
  = always "template <int N = 7> const int foo = N*N;\nint x = foo<7>;"
  "template <int N = 7> const int foo = N*N;\nint x = foo<7>;" always "template <int N = 7> const int foo = N*N;\nint x = foo<7>;"
Line 6072
  45 always 45
  = always "const int foo<7> = 49 ; int x ; x = foo<7> ;"
  "const int foo<7> = 49 ; int x ; x = foo<7> ;" always "const int foo<7> = 49 ; int x ; x = foo<7> ;"
Line 6074
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6074 always 6074
  expected always "const int foo<7> = 49 ; int x ; x = foo<7> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6074 always 6074
  code always "template <int N = 7> const int foo = N*N;\nint x = foo<7>;"
Line 6077
  57 always 57
  = always "template <int N = 7> const int foo = N*N;\nint x = foo<>;"
  "template <int N = 7> const int foo = N*N;\nint x = foo<>;" always "template <int N = 7> const int foo = N*N;\nint x = foo<>;"
Line 6079
  45 always 45
  = always "const int foo<7> = 49 ; int x ; x = foo<7> ;"
  "const int foo<7> = 49 ; int x ; x = foo<7> ;" always "const int foo<7> = 49 ; int x ; x = foo<7> ;"
Line 6081
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6081 always 6081
  expected always "const int foo<7> = 49 ; int x ; x = foo<7> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6081 always 6081
  code always "template <int N = 7> const int foo = N*N;\nint x = foo<>;"
Line 6087
  83 always 83
  = always "template<class T> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;"
  "template<class T> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;" always "template<class T> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;"
Line 6089
  89 always 89
  = always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
  "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;" always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
Line 6091
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6091 always 6091
  expected always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6091 always 6091
  code always "template<class T> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;"
Line 6094
  89 always 89
  = always "template<class> constexpr float pi = float(3.1415926535897932385L);\nfloat x = pi<float>;"
  "template<class> constexpr float pi = float(3.1415926535897932385L);\nfloat x = pi<float>;" always "template<class> constexpr float pi = float(3.1415926535897932385L);\nfloat x = pi<float>;"
Line 6096
  89 always 89
  = always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
  "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;" always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
Line 6098
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6098 always 6098
  expected always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6098 always 6098
  code always "template<class> constexpr float pi = float(3.1415926535897932385L);\nfloat x = pi<float>;"
Line 6101
  91 always 91
  = always "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;"
  "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;" always "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;"
Line 6103
  89 always 89
  = always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
  "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;" always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
Line 6105
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6105 always 6105
  expected always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6105 always 6105
  code always "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<float>;"
Line 6108
  86 always 86
  = always "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<>;"
  "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<>;" always "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<>;"
Line 6110
  89 always 89
  = always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
  "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;" always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
Line 6112
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6112 always 6112
  expected always "constexpr float pi<float> = float ( 3.1415926535897932385L ) ; float x ; x = pi<float> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6112 always 6112
  code always "template<class T = float> constexpr T pi = T(3.1415926535897932385L);\nfloat x = pi<>;"
Line 6118
  75 always 75
  = always "template<class T, int N> constexpr T foo = T(N*N);\nfloat x = foo<float,7>;"
  "template<class T, int N> constexpr T foo = T(N*N);\nfloat x = foo<float,7>;" always "template<class T, int N> constexpr T foo = T(N*N);\nfloat x = foo<float,7>;"
Line 6120
  75 always 75
  = always "constexpr float foo<float,7> = float ( 49 ) ; float x ; x = foo<float,7> ;"
  "constexpr float foo<float,7> = float ( 49 ) ; float x ; x = foo<float,7> ;" always "constexpr float foo<float,7> = float ( 49 ) ; float x ; x = foo<float,7> ;"
Line 6122
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6122 always 6122
  expected always "constexpr float foo<float,7> = float ( 49 ) ; float x ; x = foo<float,7> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6122 always 6122
  code always "template<class T, int N> constexpr T foo = T(N*N);\nfloat x = foo<float,7>;"
Line 6125
  76 always 76
  = always "template<class,int> constexpr float foo = float(7);\nfloat x = foo<float,7>;"
  "template<class,int> constexpr float foo = float(7);\nfloat x = foo<float,7>;" always "template<class,int> constexpr float foo = float(7);\nfloat x = foo<float,7>;"
Line 6127
  74 always 74
  = always "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;"
  "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;" always "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;"
Line 6129
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6129 always 6129
  expected always "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6129 always 6129
  code always "template<class,int> constexpr float foo = float(7);\nfloat x = foo<float,7>;"
Line 6132
  89 always 89
  = always "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double, 14>;"
  "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double, 14>;" always "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double, 14>;"
Line 6134
  81 always 81
  = always "constexpr double foo<double,14> = double ( 7 ) ; double x ; x = foo<double,14> ;"
  "constexpr double foo<double,14> = double ( 7 ) ; double x ; x = foo<double,14> ;" always "constexpr double foo<double,14> = double ( 7 ) ; double x ; x = foo<double,14> ;"
Line 6136
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6136 always 6136
  expected always "constexpr double foo<double,14> = double ( 7 ) ; double x ; x = foo<double,14> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6136 always 6136
  code always "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double, 14>;"
Line 6139
  78 always 78
  = always "template<class T = float, int N = 7> constexpr T foo = T(7);\nfloat x = foo<>;"
  "template<class T = float, int N = 7> constexpr T foo = T(7);\nfloat x = foo<>;" always "template<class T = float, int N = 7> constexpr T foo = T(7);\nfloat x = foo<>;"
Line 6141
  74 always 74
  = always "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;"
  "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;" always "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;"
Line 6143
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6143 always 6143
  expected always "constexpr float foo<float,7> = float ( 7 ) ; float x ; x = foo<float,7> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6143 always 6143
  code always "template<class T = float, int N = 7> constexpr T foo = T(7);\nfloat x = foo<>;"
Line 6146
  85 always 85
  = always "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double>;"
  "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double>;" always "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double>;"
Line 6148
  79 always 79
  = always "constexpr double foo<double,7> = double ( 7 ) ; double x ; x = foo<double,7> ;"
  "constexpr double foo<double,7> = double ( 7 ) ; double x ; x = foo<double,7> ;" always "constexpr double foo<double,7> = double ( 7 ) ; double x ; x = foo<double,7> ;"
Line 6150
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6150 always 6150
  expected always "constexpr double foo<double,7> = double ( 7 ) ; double x ; x = foo<double,7> ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6150 always 6150
  code always "template<class T = float, int N = 7> constexpr T foo = T(7);\ndouble x = foo<double>;"
Line 6155
  122 always 122
  = always "template<typename T> void test() { }\ntemplate<typename T> decltype(test<T>)* foo = &(test<T>);\nvoid bar() { foo<int>(); }"
  "template<typename T> void test() { }\ntemplate<typename T> decltype(test<T>)* foo = &(test<T>);\nvoid bar() { foo<int>(); }" always "template<typename T> void test() { }\ntemplate<typename T> decltype(test<T>)* foo = &(test<T>);\nvoid bar() { foo<int>(); }"
Line 6158
  130 always 130
  = always "void test<int> ( ) ; decltype ( test<int> ) * foo<int> = & ( test<int> ) ; void bar ( ) { foo<int> ( ) ; } void test<int> ( ) { }"
  "void test<int> ( ) ; decltype ( test<int> ) * foo<int> = & ( test<int> ) ; void bar ( ) { foo<int> ( ) ; } void test<int> ( ) { }" always "void test<int> ( ) ; decltype ( test<int> ) * foo<int> = & ( test<int> ) ; void bar ( ) { foo<int> ( ) ; } void test<int> ( ) { }"
Line 6162
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6162 always 6162
  expected always "void test<int> ( ) ; decltype ( test<int> ) * foo<int> = & ( test<int> ) ; void bar ( ) { foo<int> ( ) ; } void test<int> ( ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6162 always 6162
  code always "template<typename T> void test() { }\ntemplate<typename T> decltype(test<T>)* foo = &(test<T>);\nvoid bar() { foo<int>(); }"
Line 6166
  273 always 273
  = always "template<typename T> class type { };\ntype<decltype(true)> b;\ntype<decltype(0)> i;\ntype<decltype(0U)> ui;\ntype<decltype(0L)> l;\ntype<decltype(0UL)> ul;\ntype<decltype(0LL)> ll;\ntype<decltype(0ULL)> ull;\ntype<decltype(0.0)> d;\ntype<decltype(0.0F)> f;\ntype<decltype(0.0L)> ld;"
  "template<typename T> class type { };\ntype<decltype(true)> b;\ntype<decltype(0)> i;\ntype<decltype(0U)> ui;\ntype<decltype(0L)> l;\ntype<decltype(0UL)> ul;\ntype<decltype(0LL)> ll;\ntype<decltype(0ULL)> ull;\ntype<decltype(0.0)> d;\ntype<decltype(0.0F)> f;\ntype<decltype(0.0L)> ld;" always "template<typename T> class type { };\ntype<decltype(true)> b;\ntype<decltype(0)> i;\ntype<decltype(0U)> ui;\ntype<decltype(0L)> l;\ntype<decltype(0UL)> ul;\ntype<decltype(0LL)> ll;\ntype<decltype(0ULL)> ull;\ntype<decltype(0.0)> d;\ntype<decltype(0.0F)> f;\ntype<decltype(0.0L)> ld;"
Line 6177
  693 always 693
  = always "class type<bool> ; class type<int> ; class type<unsignedint> ; class type<long> ; class type<unsignedlong> ; class type<longlong> ; class type<unsignedlonglong> ; class type<double> ; class type<float> ; class type<longdouble> ; type<bool> b ; type<int> i ; type<unsignedint> ui ; type<long> l ; type<unsignedlong> ul ; type<longlong> ll ; type<unsignedlonglong> ull ; type<double> d ; type<float> f ; type<longdouble> ld ; class type<bool> { } ; class type<int> { } ; class type<unsignedint> { } ; class type<long> { } ; class type<unsignedlong> { } ; class type<longlong> { } ; class type<unsignedlonglong> { } ; class type<double> { } ; class type<float> { } ; class type<longdouble> { } ;"
  "class type<bool> ; class type<int> ; class type<unsignedint> ; class type<long> ; class type<unsignedlong> ; class type<longlong> ; class type<unsignedlonglong> ; class type<double> ; class type<float> ; class type<longdouble> ; type<bool> b ; type<int> i ; type<unsignedint> ui ; type<long> l ; type<unsignedlong> ul ; type<longlong> ll ; type<unsignedlonglong> ull ; type<double> d ; type<float> f ; type<longdouble> ld ; class type<bool> { } ; class type<int> { } ; class type<unsignedint> { } ; class type<long> { } ; class type<unsignedlong> { } ; class type<longlong> { } ; class type<unsignedlonglong> { } ; class type<double> { } ; class type<float> { } ; class type<longdouble> { } ;" always "class type<bool> ; class type<int> ; class type<unsignedint> ; class type<long> ; class type<unsignedlong> ; class type<longlong> ; class type<unsignedlonglong> ; class type<double> ; class type<float> ; class type<longdouble> ; type<bool> b ; type<int> i ; type<unsignedint> ui ; type<long> l ; type<unsignedlong> ul ; type<longlong> ll ; type<unsignedlonglong> ull ; type<double> d ; type<float> f ; type<longdouble> ld ; class type<bool> { } ; class type<int> { } ; class type<unsignedint> { } ; class type<long> { } ; class type<unsignedlong> { } ; class type<longlong> { } ; class type<unsignedlonglong> { } ; class type<double> { } ; class type<float> { } ; class type<longdouble> { } ;"
Line 6207
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6207 always 6207
  expected always "class type<bool> ; class type<int> ; class type<unsignedint> ; class type<long> ; class type<unsignedlong> ; class type<longlong> ; class type<unsignedlonglong> ; class type<double> ; class type<float> ; class type<longdouble> ; type<bool> b ; type<int> i ; type<unsignedint> ui ; type<long> l ; type<unsignedlong> ul ; type<longlong> ll ; type<unsignedlonglong> ull ; type<double> d ; type<float> f ; type<longdouble> ld ; class type<bool> { } ; class type<int> { } ; class type<unsignedint> { } ; class type<long> { } ; class type<unsignedlong> { } ; class type<longlong> { } ; class type<unsignedlonglong> { } ; class type<double> { } ; class type<float> { } ; class type<longdouble> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6207 always 6207
  code always "template<typename T> class type { };\ntype<decltype(true)> b;\ntype<decltype(0)> i;\ntype<decltype(0U)> ui;\ntype<decltype(0L)> l;\ntype<decltype(0UL)> ul;\ntype<decltype(0LL)> ll;\ntype<decltype(0ULL)> ull;\ntype<decltype(0.0)> d;\ntype<decltype(0.0F)> f;\ntype<decltype(0.0L)> ld;"
Line 6211
  194 always 194
  = always "template <int N> class C { };\ntemplate <typename TC> class Base {};\ntemplate <typename TC> class Derived : private Base<TC> {};\ntypedef Derived<C<static_cast<int>(-1)> > C_;\nclass C3 { C_ c; };"
  "template <int N> class C { };\ntemplate <typename TC> class Base {};\ntemplate <typename TC> class Derived : private Base<TC> {};\ntypedef Derived<C<static_cast<int>(-1)> > C_;\nclass C3 { C_ c; };" always "template <int N> class C { };\ntemplate <typename TC> class Base {};\ntemplate <typename TC> class Derived : private Base<TC> {};\ntypedef Derived<C<static_cast<int>(-1)> > C_;\nclass C3 { C_ c; };"
Line 6216
  279 always 279
  = always "template < int N > class C { } ; class Base<C<static_cast<int>-1>> ; class Derived<C<static_cast<int>-1>> ; class C3 { Derived<C<static_cast<int>-1>> c ; } ; class Derived<C<static_cast<int>-1>> : private Base<C<static_cast<int>-1>> { } ; class Base<C<static_cast<int>-1>> { } ;"
  "template < int N > class C { } ; class Base<C<static_cast<int>-1>> ; class Derived<C<static_cast<int>-1>> ; class C3 { Derived<C<static_cast<int>-1>> c ; } ; class Derived<C<static_cast<int>-1>> : private Base<C<static_cast<int>-1>> { } ; class Base<C<static_cast<int>-1>> { } ;" always "template < int N > class C { } ; class Base<C<static_cast<int>-1>> ; class Derived<C<static_cast<int>-1>> ; class C3 { Derived<C<static_cast<int>-1>> c ; } ; class Derived<C<static_cast<int>-1>> : private Base<C<static_cast<int>-1>> { } ; class Base<C<static_cast<int>-1>> { } ;"
Line 6222
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6222 always 6222
  expected always "template < int N > class C { } ; class Base<C<static_cast<int>-1>> ; class Derived<C<static_cast<int>-1>> ; class C3 { Derived<C<static_cast<int>-1>> c ; } ; class Derived<C<static_cast<int>-1>> : private Base<C<static_cast<int>-1>> { } ; class Base<C<static_cast<int>-1>> { } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6222 always 6222
  code always "template <int N> class C { };\ntemplate <typename TC> class Base {};\ntemplate <typename TC> class Derived : private Base<TC> {};\ntypedef Derived<C<static_cast<int>(-1)> > C_;\nclass C3 { C_ c; };"
Line 6226
  105 always 105
  = always "template<typename... Args> bool all(Args... args) { return (... && args); }\nx=all(true,false,true,true);"
  "template<typename... Args> bool all(Args... args) { return (... && args); }\nx=all(true,false,true,true);" always "template<typename... Args> bool all(Args... args) { return (... && args); }\nx=all(true,false,true,true);"
Line 6228
  150 always 150
  = always "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;"
  "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;" always "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;"
Line 6229
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6229 always 6229
  expected always "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6229 always 6229
  code always "template<typename... Args> bool all(Args... args) { return (... && args); }\nx=all(true,false,true,true);"
Line 6233
  105 always 105
  = always "template<typename... Args> bool all(Args... args) { return (args && ...); }\nx=all(true,false,true,true);"
  "template<typename... Args> bool all(Args... args) { return (args && ...); }\nx=all(true,false,true,true);" always "template<typename... Args> bool all(Args... args) { return (args && ...); }\nx=all(true,false,true,true);"
Line 6235
  150 always 150
  = always "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;"
  "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;" always "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;"
Line 6236
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6236 always 6236
  expected always "template < typename ... Args > bool all ( Args ... args ) { return ( __cppcheck_fold_&&__ ( args ... ) ) ; } x = all ( true , false , true , true ) ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6236 always 6236
  code always "template<typename... Args> bool all(Args... args) { return (args && ...); }\nx=all(true,false,true,true);"
Line 6240
  91 always 91
  = always "template<typename... Args> int foo(Args... args) { return (12 * ... * args); }\nx=foo(1,2);"
  "template<typename... Args> int foo(Args... args) { return (12 * ... * args); }\nx=foo(1,2);" always "template<typename... Args> int foo(Args... args) { return (12 * ... * args); }\nx=foo(1,2);"
Line 6242
  127 always 127
  = always "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;"
  "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;" always "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;"
Line 6243
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6243 always 6243
  expected always "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6243 always 6243
  code always "template<typename... Args> int foo(Args... args) { return (12 * ... * args); }\nx=foo(1,2);"
Line 6247
  92 always 92
  = always "template<typename... Args> int foo(Args... args) { return (args * ... * 123); }\nx=foo(1,2);"
  "template<typename... Args> int foo(Args... args) { return (args * ... * 123); }\nx=foo(1,2);" always "template<typename... Args> int foo(Args... args) { return (args * ... * 123); }\nx=foo(1,2);"
Line 6249
  127 always 127
  = always "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;"
  "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;" always "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;"
Line 6250
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6250 always 6250
  expected always "template < typename ... Args > int foo ( Args ... args ) { return ( __cppcheck_fold_*__ ( args ... ) ) ; } x = foo ( 1 , 2 ) ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6250 always 6250
  code always "template<typename... Args> int foo(Args... args) { return (args * ... * 123); }\nx=foo(1,2);"
Line 6254
  52 always 52
  = always "template <my_concept T> void f(T v) {}\nf<int>(123);"
  "template <my_concept T> void f(T v) {}\nf<int>(123);" always "template <my_concept T> void f(T v) {}\nf<int>(123);"
Line 6256
  67 always 67
  = always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
Line 6257
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6257 always 6257
  expected always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6257 always 6257
  code always "template <my_concept T> void f(T v) {}\nf<int>(123);"
Line 6261
  70 always 70
  = always "template <class T> requires my_concept<T> void f(T v) {}\nf<int>(123);"
  "template <class T> requires my_concept<T> void f(T v) {}\nf<int>(123);" always "template <class T> requires my_concept<T> void f(T v) {}\nf<int>(123);"
Line 6263
  67 always 67
  = always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
Line 6264
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6264 always 6264
  expected always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6264 always 6264
  code always "template <class T> requires my_concept<T> void f(T v) {}\nf<int>(123);"
Line 6268
  88 always 88
  = always "template<class T> requires (sizeof(T) > 1 && get_value<T>()) void f(T v){}\nf<int>(123);"
  "template<class T> requires (sizeof(T) > 1 && get_value<T>()) void f(T v){}\nf<int>(123);" always "template<class T> requires (sizeof(T) > 1 && get_value<T>()) void f(T v){}\nf<int>(123);"
Line 6270
  67 always 67
  = always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
Line 6271
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6271 always 6271
  expected always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6271 always 6271
  code always "template<class T> requires (sizeof(T) > 1 && get_value<T>()) void f(T v){}\nf<int>(123);"
Line 6275
  69 always 69
  = always "template<class T> requires c1<T> && c2<T> void f(T v){}\nf<int>(123);"
  "template<class T> requires c1<T> && c2<T> void f(T v){}\nf<int>(123);" always "template<class T> requires c1<T> && c2<T> void f(T v){}\nf<int>(123);"
Line 6277
  67 always 67
  = always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
Line 6278
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6278 always 6278
  expected always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6278 always 6278
  code always "template<class T> requires c1<T> && c2<T> void f(T v){}\nf<int>(123);"
Line 6282
  70 always 70
  = always "template <class T> void f(T v) requires my_concept<T> {}\nf<int>(123);"
  "template <class T> void f(T v) requires my_concept<T> {}\nf<int>(123);" always "template <class T> void f(T v) requires my_concept<T> {}\nf<int>(123);"
Line 6284
  67 always 67
  = always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }" always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
Line 6285
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6285 always 6285
  expected always "void f<int> ( int v ) ; f<int> ( 123 ) ; void f<int> ( int v ) { }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6285 always 6285
  code always "template <class T> void f(T v) requires my_concept<T> {}\nf<int>(123);"
Line 6289
  111 always 111
  = always "template <class T>\n  requires requires (T x) { x + x; }\n  T add(T a, T b) { return a + b; }\nadd<int>(123,456);"
  "template <class T>\n  requires requires (T x) { x + x; }\n  T add(T a, T b) { return a + b; }\nadd<int>(123,456);" always "template <class T>\n  requires requires (T x) { x + x; }\n  T add(T a, T b) { return a + b; }\nadd<int>(123,456);"
Line 6293
  108 always 108
  = always "int add<int> ( int a , int b ) ; add<int> ( 123 , 456 ) ; int add<int> ( int a , int b ) { return a + b ; }"
  "int add<int> ( int a , int b ) ; add<int> ( 123 , 456 ) ; int add<int> ( int a , int b ) { return a + b ; }" always "int add<int> ( int a , int b ) ; add<int> ( 123 , 456 ) ; int add<int> ( int a , int b ) { return a + b ; }"
Line 6294
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6294 always 6294
  expected always "int add<int> ( int a , int b ) ; add<int> ( 123 , 456 ) ; int add<int> ( int a , int b ) { return a + b ; }"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6294 always 6294
  code always "template <class T>\n  requires requires (T x) { x + x; }\n  T add(T a, T b) { return a + b; }\nadd<int>(123,456);"
Line 6298
  42 always 42
  = always "class Fred { explicit(true) Fred(int); };"
  "class Fred { explicit(true) Fred(int); };" always "class Fred { explicit(true) Fred(int); };"
Line 6299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6299 always 6299
  "class Fred { explicit Fred ( int ) ; } ;" always "class Fred { explicit Fred ( int ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6299 always 6299
  code always "class Fred { explicit(true) Fred(int); };"
Line 6303
  43 always 43
  = always "class Fred { explicit(false) Fred(int); };"
  "class Fred { explicit(false) Fred(int); };" always "class Fred { explicit(false) Fred(int); };"
Line 6304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6304 always 6304
  "class Fred { Fred ( int ) ; } ;" always "class Fred { Fred ( int ) ; } ;"
  "cppcheck-2.8/test/testsimplifytemplate.cpp" always "cppcheck-2.8/test/testsimplifytemplate.cpp"
  6304 always 6304
  code always "class Fred { explicit(false) Fred(int); };"
