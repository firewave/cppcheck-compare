

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742789 expected@var22 !=@expr1073742790 actual@var23 ) {
62: std ::@expr1073742791 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742792 expected@var22 ;
64: std ::@expr1073742793 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742794 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742795 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742796 str (@expr1073742797 ) , actualStr@var26 .@expr1073742798 str (@expr1073742799 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742800 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742801 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742802 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742803 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testsimplifytokens.cpp

1:
|
30:
31: class TestSimplifyTokens : public TestFixture {
32: public:
33: TestSimplifyTokens ( ) : TestFixture ( "TestSimplifyTokens" ) { }
34:
35:
36: private:
37: Settings settings0@var102 ;
38: Settings settings1@var103 ;
39: Settings settings_std@var104 ;
40: Settings settings_windows@var105 ;
41:
42: void run ( ) override {
43: $do ${ $if $(@expr1073742806 settings_std@var104 .@expr1073742807 library@var106 $.@expr1073742808 $load $(@expr1073742809 $exename@var11 $.@expr1073742810 $c_str $(@expr1073742811 $) $, "std.cfg" $) $.@expr1073742812 $errorcode $!=@expr1073742813 $Library $::@expr1073742814 $ErrorCode $::@expr1073742815 $OK $) ${ $complainMissingLib $(@expr1073742816 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742817 $false $) ;
44: $do ${ $if $(@expr1073742818 settings_windows@var105 .@expr1073742819 library@var107 $.@expr1073742820 $load $(@expr1073742821 $exename@var11 $.@expr1073742822 $c_str $(@expr1073742823 $) $, "windows.cfg" $) $.@expr1073742824 $errorcode $!=@expr1073742825 $Library $::@expr1073742826 $ErrorCode $::@expr1073742827 $OK $) ${ $complainMissingLib $(@expr1073742828 "windows.cfg" $) $; $return $; $} $} $while $(@expr1073742829 $false $) ;
45: settings0@var102 .@expr1073742830 severity@var108 .@expr1073742831 enable (@expr1073742832 Severity ::@expr1009 portability@expr980 ) ;
46: settings1@var103 .@expr1073742834 severity@var109 .@expr1073742835 enable (@expr1073742836 Severity ::@expr1073742837 style@expr1073742805 ) ;
47: settings_windows@var105 .@expr1073742838 severity@var110 .@expr1073742839 enable (@expr1073742840 Severity ::@expr1009 portability@expr980 ) ;
48:
49:
50: settings0@var102 .@expr1073742842 checkUnusedTemplates@var111 =@expr1073742843 true ;
51: settings1@var103 .@expr1073742844 checkUnusedTemplates@var112 =@expr1073742845 true ;
52: settings_std@var104 .@expr1073742846 checkUnusedTemplates@var113 =@expr1073742847 true ;
53: settings_windows@var105 .@expr1073742848 checkUnusedTemplates@var114 =@expr1073742849 true ;
54:
|
58:
59: $do ${ $if $(@expr1073742850 $prepareTest $(@expr1073742851 "simplifyTokenList1" $) $) ${ $setVerbose $(@expr1073742852 $false $) $; simplifyTokenList1 $(@expr1073742853 $) $; $} $} $while $(@expr1073742854 $false $) ;
60:
61: $do ${ $if $(@expr1073742855 $prepareTest $(@expr1073742856 "test1" $) $) ${ $setVerbose $(@expr1073742857 $false $) $; test1 $(@expr1073742858 $) $; $} $} $while $(@expr1073742859 $false $) ;
62:
63: $do ${ $if $(@expr1073742860 $prepareTest $(@expr1073742861 "simplifyMathFunctions_sqrt" $) $) ${ $setVerbose $(@expr1073742862 $false $) $; simplifyMathFunctions_sqrt $(@expr1073742863 $) $; $} $} $while $(@expr1073742864 $false $) ;
64: $do ${ $if $(@expr1073742865 $prepareTest $(@expr1073742866 "simplifyMathFunctions_cbrt" $) $) ${ $setVerbose $(@expr1073742867 $false $) $; simplifyMathFunctions_cbrt $(@expr1073742868 $) $; $} $} $while $(@expr1073742869 $false $) ;
65: $do ${ $if $(@expr1073742870 $prepareTest $(@expr1073742871 "simplifyMathFunctions_exp" $) $) ${ $setVerbose $(@expr1073742872 $false $) $; simplifyMathFunctions_exp $(@expr1073742873 $) $; $} $} $while $(@expr1073742874 $false $) ;
66: $do ${ $if $(@expr1073742875 $prepareTest $(@expr1073742876 "simplifyMathFunctions_exp2" $) $) ${ $setVerbose $(@expr1073742877 $false $) $; simplifyMathFunctions_exp2 $(@expr1073742878 $) $; $} $} $while $(@expr1073742879 $false $) ;
67: $do ${ $if $(@expr1073742880 $prepareTest $(@expr1073742881 "simplifyMathFunctions_logb" $) $) ${ $setVerbose $(@expr1073742882 $false $) $; simplifyMathFunctions_logb $(@expr1073742883 $) $; $} $} $while $(@expr1073742884 $false $) ;
68: $do ${ $if $(@expr1073742885 $prepareTest $(@expr1073742886 "simplifyMathFunctions_log1p" $) $) ${ $setVerbose $(@expr1073742887 $false $) $; simplifyMathFunctions_log1p $(@expr1073742888 $) $; $} $} $while $(@expr1073742889 $false $) ;
69: $do ${ $if $(@expr1073742890 $prepareTest $(@expr1073742891 "simplifyMathFunctions_ilogb" $) $) ${ $setVerbose $(@expr1073742892 $false $) $; simplifyMathFunctions_ilogb $(@expr1073742893 $) $; $} $} $while $(@expr1073742894 $false $) ;
70: $do ${ $if $(@expr1073742895 $prepareTest $(@expr1073742896 "simplifyMathFunctions_log10" $) $) ${ $setVerbose $(@expr1073742897 $false $) $; simplifyMathFunctions_log10 $(@expr1073742898 $) $; $} $} $while $(@expr1073742899 $false $) ;
71: $do ${ $if $(@expr1073742900 $prepareTest $(@expr1073742901 "simplifyMathFunctions_log" $) $) ${ $setVerbose $(@expr1073742902 $false $) $; simplifyMathFunctions_log $(@expr1073742903 $) $; $} $} $while $(@expr1073742904 $false $) ;
72: $do ${ $if $(@expr1073742905 $prepareTest $(@expr1073742906 "simplifyMathFunctions_log2" $) $) ${ $setVerbose $(@expr1073742907 $false $) $; simplifyMathFunctions_log2 $(@expr1073742908 $) $; $} $} $while $(@expr1073742909 $false $) ;
73: $do ${ $if $(@expr1073742910 $prepareTest $(@expr1073742911 "simplifyMathFunctions_pow" $) $) ${ $setVerbose $(@expr1073742912 $false $) $; simplifyMathFunctions_pow $(@expr1073742913 $) $; $} $} $while $(@expr1073742914 $false $) ;
74: $do ${ $if $(@expr1073742915 $prepareTest $(@expr1073742916 "simplifyMathFunctions_fmin" $) $) ${ $setVerbose $(@expr1073742917 $false $) $; simplifyMathFunctions_fmin $(@expr1073742918 $) $; $} $} $while $(@expr1073742919 $false $) ;
75: $do ${ $if $(@expr1073742920 $prepareTest $(@expr1073742921 "simplifyMathFunctions_fmax" $) $) ${ $setVerbose $(@expr1073742922 $false $) $; simplifyMathFunctions_fmax $(@expr1073742923 $) $; $} $} $while $(@expr1073742924 $false $) ;
76: $do ${ $if $(@expr1073742925 $prepareTest $(@expr1073742926 "simplifyMathFunctions_acosh" $) $) ${ $setVerbose $(@expr1073742927 $false $) $; simplifyMathFunctions_acosh $(@expr1073742928 $) $; $} $} $while $(@expr1073742929 $false $) ;
77: $do ${ $if $(@expr1073742930 $prepareTest $(@expr1073742931 "simplifyMathFunctions_acos" $) $) ${ $setVerbose $(@expr1073742932 $false $) $; simplifyMathFunctions_acos $(@expr1073742933 $) $; $} $} $while $(@expr1073742934 $false $) ;
78: $do ${ $if $(@expr1073742935 $prepareTest $(@expr1073742936 "simplifyMathFunctions_cosh" $) $) ${ $setVerbose $(@expr1073742937 $false $) $; simplifyMathFunctions_cosh $(@expr1073742938 $) $; $} $} $while $(@expr1073742939 $false $) ;
79: $do ${ $if $(@expr1073742940 $prepareTest $(@expr1073742941 "simplifyMathFunctions_cos" $) $) ${ $setVerbose $(@expr1073742942 $false $) $; simplifyMathFunctions_cos $(@expr1073742943 $) $; $} $} $while $(@expr1073742944 $false $) ;
80: $do ${ $if $(@expr1073742945 $prepareTest $(@expr1073742946 "simplifyMathFunctions_erfc" $) $) ${ $setVerbose $(@expr1073742947 $false $) $; simplifyMathFunctions_erfc $(@expr1073742948 $) $; $} $} $while $(@expr1073742949 $false $) ;
81: $do ${ $if $(@expr1073742950 $prepareTest $(@expr1073742951 "simplifyMathFunctions_erf" $) $) ${ $setVerbose $(@expr1073742952 $false $) $; simplifyMathFunctions_erf $(@expr1073742953 $) $; $} $} $while $(@expr1073742954 $false $) ;
82: $do ${ $if $(@expr1073742955 $prepareTest $(@expr1073742956 "simplifyMathFunctions_sin" $) $) ${ $setVerbose $(@expr1073742957 $false $) $; simplifyMathFunctions_sin $(@expr1073742958 $) $; $} $} $while $(@expr1073742959 $false $) ;
83: $do ${ $if $(@expr1073742960 $prepareTest $(@expr1073742961 "simplifyMathFunctions_sinh" $) $) ${ $setVerbose $(@expr1073742962 $false $) $; simplifyMathFunctions_sinh $(@expr1073742963 $) $; $} $} $while $(@expr1073742964 $false $) ;
84: $do ${ $if $(@expr1073742965 $prepareTest $(@expr1073742966 "simplifyMathFunctions_asin" $) $) ${ $setVerbose $(@expr1073742967 $false $) $; simplifyMathFunctions_asin $(@expr1073742968 $) $; $} $} $while $(@expr1073742969 $false $) ;
85: $do ${ $if $(@expr1073742970 $prepareTest $(@expr1073742971 "simplifyMathFunctions_asinh" $) $) ${ $setVerbose $(@expr1073742972 $false $) $; simplifyMathFunctions_asinh $(@expr1073742973 $) $; $} $} $while $(@expr1073742974 $false $) ;
86: $do ${ $if $(@expr1073742975 $prepareTest $(@expr1073742976 "simplifyMathFunctions_tan" $) $) ${ $setVerbose $(@expr1073742977 $false $) $; simplifyMathFunctions_tan $(@expr1073742978 $) $; $} $} $while $(@expr1073742979 $false $) ;
87: $do ${ $if $(@expr1073742980 $prepareTest $(@expr1073742981 "simplifyMathFunctions_tanh" $) $) ${ $setVerbose $(@expr1073742982 $false $) $; simplifyMathFunctions_tanh $(@expr1073742983 $) $; $} $} $while $(@expr1073742984 $false $) ;
88: $do ${ $if $(@expr1073742985 $prepareTest $(@expr1073742986 "simplifyMathFunctions_atan" $) $) ${ $setVerbose $(@expr1073742987 $false $) $; simplifyMathFunctions_atan $(@expr1073742988 $) $; $} $} $while $(@expr1073742989 $false $) ;
89: $do ${ $if $(@expr1073742990 $prepareTest $(@expr1073742991 "simplifyMathFunctions_atanh" $) $) ${ $setVerbose $(@expr1073742992 $false $) $; simplifyMathFunctions_atanh $(@expr1073742993 $) $; $} $} $while $(@expr1073742994 $false $) ;
90: $do ${ $if $(@expr1073742995 $prepareTest $(@expr1073742996 "simplifyMathFunctions_expm1" $) $) ${ $setVerbose $(@expr1073742997 $false $) $; simplifyMathFunctions_expm1 $(@expr1073742998 $) $; $} $} $while $(@expr1073742999 $false $) ;
91: $do ${ $if $(@expr1073743000 $prepareTest $(@expr1073743001 "simplifyMathExpressions" $) $) ${ $setVerbose $(@expr1073743002 $false $) $; simplifyMathExpressions $(@expr1073743003 $) $; $} $} $while $(@expr1073743004 $false $) ;
92:
93:
94: $do ${ $if $(@expr1073743005 $prepareTest $(@expr1073743006 "simplifyAssignmentInFunctionCall" $) $) ${ $setVerbose $(@expr1073743007 $false $) $; simplifyAssignmentInFunctionCall $(@expr1073743008 $) $; $} $} $while $(@expr1073743009 $false $) ;
95:
96:
97: $do ${ $if $(@expr1073743010 $prepareTest $(@expr1073743011 "simplifyCompoundAssignment" $) $) ${ $setVerbose $(@expr1073743012 $false $) $; simplifyCompoundAssignment $(@expr1073743013 $) $; $} $} $while $(@expr1073743014 $false $) ;
98:
99: $do ${ $if $(@expr1073743015 $prepareTest $(@expr1073743016 "cast" $) $) ${ $setVerbose $(@expr1073743017 $false $) $; cast $(@expr1073743018 $) $; $} $} $while $(@expr1073743019 $false $) ;
100: $do ${ $if $(@expr1073743020 $prepareTest $(@expr1073743021 "iftruefalse" $) $) ${ $setVerbose $(@expr1073743022 $false $) $; iftruefalse $(@expr1073743023 $) $; $} $} $while $(@expr1073743024 $false $) ;
101:
102: $do ${ $if $(@expr1073743025 $prepareTest $(@expr1073743026 "combine_strings" $) $) ${ $setVerbose $(@expr1073743027 $false $) $; combine_strings $(@expr1073743028 $) $; $} $} $while $(@expr1073743029 $false $) ;
103: $do ${ $if $(@expr1073743030 $prepareTest $(@expr1073743031 "combine_wstrings" $) $) ${ $setVerbose $(@expr1073743032 $false $) $; combine_wstrings $(@expr1073743033 $) $; $} $} $while $(@expr1073743034 $false $) ;
104: $do ${ $if $(@expr1073743035 $prepareTest $(@expr1073743036 "combine_ustrings" $) $) ${ $setVerbose $(@expr1073743037 $false $) $; combine_ustrings $(@expr1073743038 $) $; $} $} $while $(@expr1073743039 $false $) ;
105: $do ${ $if $(@expr1073743040 $prepareTest $(@expr1073743041 "combine_Ustrings" $) $) ${ $setVerbose $(@expr1073743042 $false $) $; combine_Ustrings $(@expr1073743043 $) $; $} $} $while $(@expr1073743044 $false $) ;
106: $do ${ $if $(@expr1073743045 $prepareTest $(@expr1073743046 "combine_u8strings" $) $) ${ $setVerbose $(@expr1073743047 $false $) $; combine_u8strings $(@expr1073743048 $) $; $} $} $while $(@expr1073743049 $false $) ;
107: $do ${ $if $(@expr1073743050 $prepareTest $(@expr1073743051 "combine_mixedstrings" $) $) ${ $setVerbose $(@expr1073743052 $false $) $; combine_mixedstrings $(@expr1073743053 $) $; $} $} $while $(@expr1073743054 $false $) ;
108:
109: $do ${ $if $(@expr1073743055 $prepareTest $(@expr1073743056 "double_plus" $) $) ${ $setVerbose $(@expr1073743057 $false $) $; double_plus $(@expr1073743058 $) $; $} $} $while $(@expr1073743059 $false $) ;
110: $do ${ $if $(@expr1073743060 $prepareTest $(@expr1073743061 "redundant_plus" $) $) ${ $setVerbose $(@expr1073743062 $false $) $; redundant_plus $(@expr1073743063 $) $; $} $} $while $(@expr1073743064 $false $) ;
111: $do ${ $if $(@expr1073743065 $prepareTest $(@expr1073743066 "redundant_plus_numbers" $) $) ${ $setVerbose $(@expr1073743067 $false $) $; redundant_plus_numbers $(@expr1073743068 $) $; $} $} $while $(@expr1073743069 $false $) ;
112: $do ${ $if $(@expr1073743070 $prepareTest $(@expr1073743071 "parentheses1" $) $) ${ $setVerbose $(@expr1073743072 $false $) $; parentheses1 $(@expr1073743073 $) $; $} $} $while $(@expr1073743074 $false $) ;
113: $do ${ $if $(@expr1073743075 $prepareTest $(@expr1073743076 "parenthesesVar" $) $) ${ $setVerbose $(@expr1073743077 $false $) $; parenthesesVar $(@expr1073743078 $) $; $} $} $while $(@expr1073743079 $false $) ;
114: $do ${ $if $(@expr1073743080 $prepareTest $(@expr1073743081 "declareVar" $) $) ${ $setVerbose $(@expr1073743082 $false $) $; declareVar $(@expr1073743083 $) $; $} $} $while $(@expr1073743084 $false $) ;
115:
116: $do ${ $if $(@expr1073743085 $prepareTest $(@expr1073743086 "declareArray" $) $) ${ $setVerbose $(@expr1073743087 $false $) $; declareArray $(@expr1073743088 $) $; $} $} $while $(@expr1073743089 $false $) ;
117:
118: $do ${ $if $(@expr1073743090 $prepareTest $(@expr1073743091 "dontRemoveIncrement" $) $) ${ $setVerbose $(@expr1073743092 $false $) $; dontRemoveIncrement $(@expr1073743093 $) $; $} $} $while $(@expr1073743094 $false $) ;
119: $do ${ $if $(@expr1073743095 $prepareTest $(@expr1073743096 "removePostIncrement" $) $) ${ $setVerbose $(@expr1073743097 $false $) $; removePostIncrement $(@expr1073743098 $) $; $} $} $while $(@expr1073743099 $false $) ;
120: $do ${ $if $(@expr1073743100 $prepareTest $(@expr1073743101 "removePreIncrement" $) $) ${ $setVerbose $(@expr1073743102 $false $) $; removePreIncrement $(@expr1073743103 $) $; $} $} $while $(@expr1073743104 $false $) ;
121:
122: $do ${ $if $(@expr1073743105 $prepareTest $(@expr1073743106 "elseif1" $) $) ${ $setVerbose $(@expr1073743107 $false $) $; elseif1 $(@expr1073743108 $) $; $} $} $while $(@expr1073743109 $false $) ;
123:
124: $do ${ $if $(@expr1073743110 $prepareTest $(@expr1073743111 "sizeof_array" $) $) ${ $setVerbose $(@expr1073743112 $false $) $; sizeof_array $(@expr1073743113 $) $; $} $} $while $(@expr1073743114 $false $) ;
125: $do ${ $if $(@expr1073743115 $prepareTest $(@expr1073743116 "sizeof5" $) $) ${ $setVerbose $(@expr1073743117 $false $) $; sizeof5 $(@expr1073743118 $) $; $} $} $while $(@expr1073743119 $false $) ;
126: $do ${ $if $(@expr1073743120 $prepareTest $(@expr1073743121 "sizeof6" $) $) ${ $setVerbose $(@expr1073743122 $false $) $; sizeof6 $(@expr1073743123 $) $; $} $} $while $(@expr1073743124 $false $) ;
127: $do ${ $if $(@expr1073743125 $prepareTest $(@expr1073743126 "sizeof7" $) $) ${ $setVerbose $(@expr1073743127 $false $) $; sizeof7 $(@expr1073743128 $) $; $} $} $while $(@expr1073743129 $false $) ;
128: $do ${ $if $(@expr1073743130 $prepareTest $(@expr1073743131 "sizeof8" $) $) ${ $setVerbose $(@expr1073743132 $false $) $; sizeof8 $(@expr1073743133 $) $; $} $} $while $(@expr1073743134 $false $) ;
129: $do ${ $if $(@expr1073743135 $prepareTest $(@expr1073743136 "sizeof9" $) $) ${ $setVerbose $(@expr1073743137 $false $) $; sizeof9 $(@expr1073743138 $) $; $} $} $while $(@expr1073743139 $false $) ;
130: $do ${ $if $(@expr1073743140 $prepareTest $(@expr1073743141 "sizeof10" $) $) ${ $setVerbose $(@expr1073743142 $false $) $; sizeof10 $(@expr1073743143 $) $; $} $} $while $(@expr1073743144 $false $) ;
131: $do ${ $if $(@expr1073743145 $prepareTest $(@expr1073743146 "sizeof11" $) $) ${ $setVerbose $(@expr1073743147 $false $) $; sizeof11 $(@expr1073743148 $) $; $} $} $while $(@expr1073743149 $false $) ;
132: $do ${ $if $(@expr1073743150 $prepareTest $(@expr1073743151 "sizeof12" $) $) ${ $setVerbose $(@expr1073743152 $false $) $; sizeof12 $(@expr1073743153 $) $; $} $} $while $(@expr1073743154 $false $) ;
133: $do ${ $if $(@expr1073743155 $prepareTest $(@expr1073743156 "sizeof13" $) $) ${ $setVerbose $(@expr1073743157 $false $) $; sizeof13 $(@expr1073743158 $) $; $} $} $while $(@expr1073743159 $false $) ;
134: $do ${ $if $(@expr1073743160 $prepareTest $(@expr1073743161 "sizeof14" $) $) ${ $setVerbose $(@expr1073743162 $false $) $; sizeof14 $(@expr1073743163 $) $; $} $} $while $(@expr1073743164 $false $) ;
135: $do ${ $if $(@expr1073743165 $prepareTest $(@expr1073743166 "sizeof15" $) $) ${ $setVerbose $(@expr1073743167 $false $) $; sizeof15 $(@expr1073743168 $) $; $} $} $while $(@expr1073743169 $false $) ;
136: $do ${ $if $(@expr1073743170 $prepareTest $(@expr1073743171 "sizeof16" $) $) ${ $setVerbose $(@expr1073743172 $false $) $; sizeof16 $(@expr1073743173 $) $; $} $} $while $(@expr1073743174 $false $) ;
137: $do ${ $if $(@expr1073743175 $prepareTest $(@expr1073743176 "sizeof17" $) $) ${ $setVerbose $(@expr1073743177 $false $) $; sizeof17 $(@expr1073743178 $) $; $} $} $while $(@expr1073743179 $false $) ;
138: $do ${ $if $(@expr1073743180 $prepareTest $(@expr1073743181 "sizeof18" $) $) ${ $setVerbose $(@expr1073743182 $false $) $; sizeof18 $(@expr1073743183 $) $; $} $} $while $(@expr1073743184 $false $) ;
139: $do ${ $if $(@expr1073743185 $prepareTest $(@expr1073743186 "sizeof19" $) $) ${ $setVerbose $(@expr1073743187 $false $) $; sizeof19 $(@expr1073743188 $) $; $} $} $while $(@expr1073743189 $false $) ;
140: $do ${ $if $(@expr1073743190 $prepareTest $(@expr1073743191 "sizeof20" $) $) ${ $setVerbose $(@expr1073743192 $false $) $; sizeof20 $(@expr1073743193 $) $; $} $} $while $(@expr1073743194 $false $) ;
141: $do ${ $if $(@expr1073743195 $prepareTest $(@expr1073743196 "sizeof21" $) $) ${ $setVerbose $(@expr1073743197 $false $) $; sizeof21 $(@expr1073743198 $) $; $} $} $while $(@expr1073743199 $false $) ;
142: $do ${ $if $(@expr1073743200 $prepareTest $(@expr1073743201 "sizeof22" $) $) ${ $setVerbose $(@expr1073743202 $false $) $; sizeof22 $(@expr1073743203 $) $; $} $} $while $(@expr1073743204 $false $) ;
143: $do ${ $if $(@expr1073743205 $prepareTest $(@expr1073743206 "sizeofsizeof" $) $) ${ $setVerbose $(@expr1073743207 $false $) $; sizeofsizeof $(@expr1073743208 $) $; $} $} $while $(@expr1073743209 $false $) ;
144: $do ${ $if $(@expr1073743210 $prepareTest $(@expr1073743211 "casting" $) $) ${ $setVerbose $(@expr1073743212 $false $) $; casting $(@expr1073743213 $) $; $} $} $while $(@expr1073743214 $false $) ;
145:
146: $do ${ $if $(@expr1073743215 $prepareTest $(@expr1073743216 "strlen1" $) $) ${ $setVerbose $(@expr1073743217 $false $) $; strlen1 $(@expr1073743218 $) $; $} $} $while $(@expr1073743219 $false $) ;
147: $do ${ $if $(@expr1073743220 $prepareTest $(@expr1073743221 "strlen2" $) $) ${ $setVerbose $(@expr1073743222 $false $) $; strlen2 $(@expr1073743223 $) $; $} $} $while $(@expr1073743224 $false $) ;
148:
149: $do ${ $if $(@expr1073743225 $prepareTest $(@expr1073743226 "namespaces" $) $) ${ $setVerbose $(@expr1073743227 $false $) $; namespaces $(@expr1073743228 $) $; $} $} $while $(@expr1073743229 $false $) ;
150:
151:
152: $do ${ $if $(@expr1073743230 $prepareTest $(@expr1073743231 "ifassign1" $) $) ${ $setVerbose $(@expr1073743232 $false $) $; ifassign1 $(@expr1073743233 $) $; $} $} $while $(@expr1073743234 $false $) ;
153: $do ${ $if $(@expr1073743235 $prepareTest $(@expr1073743236 "ifAssignWithCast" $) $) ${ $setVerbose $(@expr1073743237 $false $) $; ifAssignWithCast $(@expr1073743238 $) $; $} $} $while $(@expr1073743239 $false $) ;
154: $do ${ $if $(@expr1073743240 $prepareTest $(@expr1073743241 "whileAssign1" $) $) ${ $setVerbose $(@expr1073743242 $false $) $; whileAssign1 $(@expr1073743243 $) $; $} $} $while $(@expr1073743244 $false $) ;
155: $do ${ $if $(@expr1073743245 $prepareTest $(@expr1073743246 "whileAssign2" $) $) ${ $setVerbose $(@expr1073743247 $false $) $; whileAssign2 $(@expr1073743248 $) $; $} $} $while $(@expr1073743249 $false $) ;
156: $do ${ $if $(@expr1073743250 $prepareTest $(@expr1073743251 "whileAssign3" $) $) ${ $setVerbose $(@expr1073743252 $false $) $; whileAssign3 $(@expr1073743253 $) $; $} $} $while $(@expr1073743254 $false $) ;
157: $do ${ $if $(@expr1073743255 $prepareTest $(@expr1073743256 "whileAssign4" $) $) ${ $setVerbose $(@expr1073743257 $false $) $; whileAssign4 $(@expr1073743258 $) $; $} $} $while $(@expr1073743259 $false $) ;
158: $do ${ $if $(@expr1073743260 $prepareTest $(@expr1073743261 "doWhileAssign" $) $) ${ $setVerbose $(@expr1073743262 $false $) $; doWhileAssign $(@expr1073743263 $) $; $} $} $while $(@expr1073743264 $false $) ;
159: $do ${ $if $(@expr1073743265 $prepareTest $(@expr1073743266 "test_4881" $) $) ${ $setVerbose $(@expr1073743267 $false $) $; test_4881 $(@expr1073743268 $) $; $} $} $while $(@expr1073743269 $false $) ;
160:
161:
162: $do ${ $if $(@expr1073743270 $prepareTest $(@expr1073743271 "not1" $) $) ${ $setVerbose $(@expr1073743272 $false $) $; not1 $(@expr1073743273 $) $; $} $} $while $(@expr1073743274 $false $) ;
163:
164:
165: $do ${ $if $(@expr1073743275 $prepareTest $(@expr1073743276 "and1" $) $) ${ $setVerbose $(@expr1073743277 $false $) $; and1 $(@expr1073743278 $) $; $} $} $while $(@expr1073743279 $false $) ;
166:
167:
168: $do ${ $if $(@expr1073743280 $prepareTest $(@expr1073743281 "or1" $) $) ${ $setVerbose $(@expr1073743282 $false $) $; or1 $(@expr1073743283 $) $; $} $} $while $(@expr1073743284 $false $) ;
169:
170: $do ${ $if $(@expr1073743285 $prepareTest $(@expr1073743286 "cAlternativeTokens" $) $) ${ $setVerbose $(@expr1073743287 $false $) $; cAlternativeTokens $(@expr1073743288 $) $; $} $} $while $(@expr1073743289 $false $) ;
171:
172: $do ${ $if $(@expr1073743290 $prepareTest $(@expr1073743291 "comma_keyword" $) $) ${ $setVerbose $(@expr1073743292 $false $) $; comma_keyword $(@expr1073743293 $) $; $} $} $while $(@expr1073743294 $false $) ;
173: $do ${ $if $(@expr1073743295 $prepareTest $(@expr1073743296 "remove_comma" $) $) ${ $setVerbose $(@expr1073743297 $false $) $; remove_comma $(@expr1073743298 $) $; $} $} $while $(@expr1073743299 $false $) ;
174:
175:
176: $do ${ $if $(@expr1073743300 $prepareTest $(@expr1073743301 "simplifyConditionOperator" $) $) ${ $setVerbose $(@expr1073743302 $false $) $; simplifyConditionOperator $(@expr1073743303 $) $; $} $} $while $(@expr1073743304 $false $) ;
177:
178:
179: $do ${ $if $(@expr1073743305 $prepareTest $(@expr1073743306 "calculations" $) $) ${ $setVerbose $(@expr1073743307 $false $) $; calculations $(@expr1073743308 $) $; $} $} $while $(@expr1073743309 $false $) ;
180: $do ${ $if $(@expr1073743310 $prepareTest $(@expr1073743311 "comparisons" $) $) ${ $setVerbose $(@expr1073743312 $false $) $; comparisons $(@expr1073743313 $) $; $} $} $while $(@expr1073743314 $false $) ;
181: $do ${ $if $(@expr1073743315 $prepareTest $(@expr1073743316 "simplifyCalculations" $) $) ${ $setVerbose $(@expr1073743317 $false $) $; simplifyCalculations $(@expr1073743318 $) $; $} $} $while $(@expr1073743319 $false $) ;
182:
183:
184: $do ${ $if $(@expr1073743320 $prepareTest $(@expr1073743321 "simplifyFlowControl" $) $) ${ $setVerbose $(@expr1073743322 $false $) $; simplifyFlowControl $(@expr1073743323 $) $; $} $} $while $(@expr1073743324 $false $) ;
185: $do ${ $if $(@expr1073743325 $prepareTest $(@expr1073743326 "flowControl" $) $) ${ $setVerbose $(@expr1073743327 $false $) $; flowControl $(@expr1073743328 $) $; $} $} $while $(@expr1073743329 $false $) ;
186:
187:
188: $do ${ $if $(@expr1073743330 $prepareTest $(@expr1073743331 "strcat1" $) $) ${ $setVerbose $(@expr1073743332 $false $) $; strcat1 $(@expr1073743333 $) $; $} $} $while $(@expr1073743334 $false $) ;
189: $do ${ $if $(@expr1073743335 $prepareTest $(@expr1073743336 "strcat2" $) $) ${ $setVerbose $(@expr1073743337 $false $) $; strcat2 $(@expr1073743338 $) $; $} $} $while $(@expr1073743339 $false $) ;
190:
191: $do ${ $if $(@expr1073743340 $prepareTest $(@expr1073743341 "simplifyAtol" $) $) ${ $setVerbose $(@expr1073743342 $false $) $; simplifyAtol $(@expr1073743343 $) $; $} $} $while $(@expr1073743344 $false $) ;
192:
193: $do ${ $if $(@expr1073743345 $prepareTest $(@expr1073743346 "simplifyOperator1" $) $) ${ $setVerbose $(@expr1073743347 $false $) $; simplifyOperator1 $(@expr1073743348 $) $; $} $} $while $(@expr1073743349 $false $) ;
194: $do ${ $if $(@expr1073743350 $prepareTest $(@expr1073743351 "simplifyOperator2" $) $) ${ $setVerbose $(@expr1073743352 $false $) $; simplifyOperator2 $(@expr1073743353 $) $; $} $} $while $(@expr1073743354 $false $) ;
195:
196: $do ${ $if $(@expr1073743355 $prepareTest $(@expr1073743356 "simplifyArrayAccessSyntax" $) $) ${ $setVerbose $(@expr1073743357 $false $) $; simplifyArrayAccessSyntax $(@expr1073743358 $) $; $} $} $while $(@expr1073743359 $false $) ;
197: $do ${ $if $(@expr1073743360 $prepareTest $(@expr1073743361 "simplify_numeric_condition" $) $) ${ $setVerbose $(@expr1073743362 $false $) $; simplify_numeric_condition $(@expr1073743363 $) $; $} $} $while $(@expr1073743364 $false $) ;
198: $do ${ $if $(@expr1073743365 $prepareTest $(@expr1073743366 "simplify_condition" $) $) ${ $setVerbose $(@expr1073743367 $false $) $; simplify_condition $(@expr1073743368 $) $; $} $} $while $(@expr1073743369 $false $) ;
199:
200: $do ${ $if $(@expr1073743370 $prepareTest $(@expr1073743371 "pointeralias1" $) $) ${ $setVerbose $(@expr1073743372 $false $) $; pointeralias1 $(@expr1073743373 $) $; $} $} $while $(@expr1073743374 $false $) ;
201: $do ${ $if $(@expr1073743375 $prepareTest $(@expr1073743376 "pointeralias2" $) $) ${ $setVerbose $(@expr1073743377 $false $) $; pointeralias2 $(@expr1073743378 $) $; $} $} $while $(@expr1073743379 $false $) ;
202: $do ${ $if $(@expr1073743380 $prepareTest $(@expr1073743381 "pointeralias3" $) $) ${ $setVerbose $(@expr1073743382 $false $) $; pointeralias3 $(@expr1073743383 $) $; $} $} $while $(@expr1073743384 $false $) ;
203: $do ${ $if $(@expr1073743385 $prepareTest $(@expr1073743386 "pointeralias4" $) $) ${ $setVerbose $(@expr1073743387 $false $) $; pointeralias4 $(@expr1073743388 $) $; $} $} $while $(@expr1073743389 $false $) ;
204:
205:
206: $do ${ $if $(@expr1073743390 $prepareTest $(@expr1073743391 "while0" $) $) ${ $setVerbose $(@expr1073743392 $false $) $; while0 $(@expr1073743393 $) $; $} $} $while $(@expr1073743394 $false $) ;
207:
208: $do ${ $if $(@expr1073743395 $prepareTest $(@expr1073743396 "while0for" $) $) ${ $setVerbose $(@expr1073743397 $false $) $; while0for $(@expr1073743398 $) $; $} $} $while $(@expr1073743399 $false $) ;
209:
210:
211: $do ${ $if $(@expr1073743400 $prepareTest $(@expr1073743401 "removestd" $) $) ${ $setVerbose $(@expr1073743402 $false $) $; removestd $(@expr1073743403 $) $; $} $} $while $(@expr1073743404 $false $) ;
212:
213:
214: $do ${ $if $(@expr1073743405 $prepareTest $(@expr1073743406 "simplifyInitVar" $) $) ${ $setVerbose $(@expr1073743407 $false $) $; simplifyInitVar $(@expr1073743408 $) $; $} $} $while $(@expr1073743409 $false $) ;
215:
216:
217: $do ${ $if $(@expr1073743410 $prepareTest $(@expr1073743411 "simplifyReference" $) $) ${ $setVerbose $(@expr1073743412 $false $) $; simplifyReference $(@expr1073743413 $) $; $} $} $while $(@expr1073743414 $false $) ;
218:
219:
220: $do ${ $if $(@expr1073743415 $prepareTest $(@expr1073743416 "simplifyRealloc" $) $) ${ $setVerbose $(@expr1073743417 $false $) $; simplifyRealloc $(@expr1073743418 $) $; $} $} $while $(@expr1073743419 $false $) ;
221:
222:
223: $do ${ $if $(@expr1073743420 $prepareTest $(@expr1073743421 "simplifyErrNoInWhile" $) $) ${ $setVerbose $(@expr1073743422 $false $) $; simplifyErrNoInWhile $(@expr1073743423 $) $; $} $} $while $(@expr1073743424 $false $) ;
224:
225:
226: $do ${ $if $(@expr1073743425 $prepareTest $(@expr1073743426 "simplifyFuncInWhile" $) $) ${ $setVerbose $(@expr1073743427 $false $) $; simplifyFuncInWhile $(@expr1073743428 $) $; $} $} $while $(@expr1073743429 $false $) ;
227:
228:
229: $do ${ $if $(@expr1073743430 $prepareTest $(@expr1073743431 "simplifyStructDecl1" $) $) ${ $setVerbose $(@expr1073743432 $false $) $; simplifyStructDecl1 $(@expr1073743433 $) $; $} $} $while $(@expr1073743434 $false $) ;
230: $do ${ $if $(@expr1073743435 $prepareTest $(@expr1073743436 "simplifyStructDecl2" $) $) ${ $setVerbose $(@expr1073743437 $false $) $; simplifyStructDecl2 $(@expr1073743438 $) $; $} $} $while $(@expr1073743439 $false $) ;
231: $do ${ $if $(@expr1073743440 $prepareTest $(@expr1073743441 "simplifyStructDecl3" $) $) ${ $setVerbose $(@expr1073743442 $false $) $; simplifyStructDecl3 $(@expr1073743443 $) $; $} $} $while $(@expr1073743444 $false $) ;
232: $do ${ $if $(@expr1073743445 $prepareTest $(@expr1073743446 "simplifyStructDecl4" $) $) ${ $setVerbose $(@expr1073743447 $false $) $; simplifyStructDecl4 $(@expr1073743448 $) $; $} $} $while $(@expr1073743449 $false $) ;
233: $do ${ $if $(@expr1073743450 $prepareTest $(@expr1073743451 "simplifyStructDecl6" $) $) ${ $setVerbose $(@expr1073743452 $false $) $; simplifyStructDecl6 $(@expr1073743453 $) $; $} $} $while $(@expr1073743454 $false $) ;
234: $do ${ $if $(@expr1073743455 $prepareTest $(@expr1073743456 "simplifyStructDecl7" $) $) ${ $setVerbose $(@expr1073743457 $false $) $; simplifyStructDecl7 $(@expr1073743458 $) $; $} $} $while $(@expr1073743459 $false $) ;
235: $do ${ $if $(@expr1073743460 $prepareTest $(@expr1073743461 "simplifyStructDecl8" $) $) ${ $setVerbose $(@expr1073743462 $false $) $; simplifyStructDecl8 $(@expr1073743463 $) $; $} $} $while $(@expr1073743464 $false $) ;
236:
237:
238:
239: $do ${ $if $(@expr1073743465 $prepareTest $(@expr1073743466 "removeUnwantedKeywords" $) $) ${ $setVerbose $(@expr1073743467 $false $) $; removeUnwantedKeywords $(@expr1073743468 $) $; $} $} $while $(@expr1073743469 $false $) ;
240:
241:
242: $do ${ $if $(@expr1073743470 $prepareTest $(@expr1073743471 "simplifyCallingConvention" $) $) ${ $setVerbose $(@expr1073743472 $false $) $; simplifyCallingConvention $(@expr1073743473 $) $; $} $} $while $(@expr1073743474 $false $) ;
243:
244:
245: $do ${ $if $(@expr1073743475 $prepareTest $(@expr1073743476 "simplifyAttribute" $) $) ${ $setVerbose $(@expr1073743477 $false $) $; simplifyAttribute $(@expr1073743478 $) $; $} $} $while $(@expr1073743479 $false $) ;
246:
247: $do ${ $if $(@expr1073743480 $prepareTest $(@expr1073743481 "simplifyFunctorCall" $) $) ${ $setVerbose $(@expr1073743482 $false $) $; simplifyFunctorCall $(@expr1073743483 $) $; $} $} $while $(@expr1073743484 $false $) ;
248:
249: $do ${ $if $(@expr1073743485 $prepareTest $(@expr1073743486 "simplifyFunctionPointer" $) $) ${ $setVerbose $(@expr1073743487 $false $) $; simplifyFunctionPointer $(@expr1073743488 $) $; $} $} $while $(@expr1073743489 $false $) ;
250:
251: $do ${ $if $(@expr1073743490 $prepareTest $(@expr1073743491 "redundant_semicolon" $) $) ${ $setVerbose $(@expr1073743492 $false $) $; redundant_semicolon $(@expr1073743493 $) $; $} $} $while $(@expr1073743494 $false $) ;
252:
253: $do ${ $if $(@expr1073743495 $prepareTest $(@expr1073743496 "simplifyFunctionReturn" $) $) ${ $setVerbose $(@expr1073743497 $false $) $; simplifyFunctionReturn $(@expr1073743498 $) $; $} $} $while $(@expr1073743499 $false $) ;
254:
255: $do ${ $if $(@expr1073743500 $prepareTest $(@expr1073743501 "return_strncat" $) $) ${ $setVerbose $(@expr1073743502 $false $) $; return_strncat $(@expr1073743503 $) $; $} $} $while $(@expr1073743504 $false $) ;
256:
|
259:
260: $do ${ $if $(@expr1073743505 $prepareTest $(@expr1073743506 "removeRedundantFor" $) $) ${ $setVerbose $(@expr1073743507 $false $) $; removeRedundantFor $(@expr1073743508 $) $; $} $} $while $(@expr1073743509 $false $) ;
261:
262: $do ${ $if $(@expr1073743510 $prepareTest $(@expr1073743511 "consecutiveBraces" $) $) ${ $setVerbose $(@expr1073743512 $false $) $; consecutiveBraces $(@expr1073743513 $) $; $} $} $while $(@expr1073743514 $false $) ;
263:
264: $do ${ $if $(@expr1073743515 $prepareTest $(@expr1073743516 "undefinedSizeArray" $) $) ${ $setVerbose $(@expr1073743517 $false $) $; undefinedSizeArray $(@expr1073743518 $) $; $} $} $while $(@expr1073743519 $false $) ;
265:
266: $do ${ $if $(@expr1073743520 $prepareTest $(@expr1073743521 "simplifyArrayAddress" $) $) ${ $setVerbose $(@expr1073743522 $false $) $; simplifyArrayAddress $(@expr1073743523 $) $; $} $} $while $(@expr1073743524 $false $) ;
267: $do ${ $if $(@expr1073743525 $prepareTest $(@expr1073743526 "simplifyCharAt" $) $) ${ $setVerbose $(@expr1073743527 $false $) $; simplifyCharAt $(@expr1073743528 $) $; $} $} $while $(@expr1073743529 $false $) ;
268: $do ${ $if $(@expr1073743530 $prepareTest $(@expr1073743531 "simplifyOverride" $) $) ${ $setVerbose $(@expr1073743532 $false $) $; simplifyOverride $(@expr1073743533 $) $; $} $} $while $(@expr1073743534 $false $) ;
269: $do ${ $if $(@expr1073743535 $prepareTest $(@expr1073743536 "simplifyNestedNamespace" $) $) ${ $setVerbose $(@expr1073743537 $false $) $; simplifyNestedNamespace $(@expr1073743538 $) $; $} $} $while $(@expr1073743539 $false $) ;
270: $do ${ $if $(@expr1073743540 $prepareTest $(@expr1073743541 "simplifyNamespaceAliases1" $) $) ${ $setVerbose $(@expr1073743542 $false $) $; simplifyNamespaceAliases1 $(@expr1073743543 $) $; $} $} $while $(@expr1073743544 $false $) ;
271: $do ${ $if $(@expr1073743545 $prepareTest $(@expr1073743546 "simplifyNamespaceAliases2" $) $) ${ $setVerbose $(@expr1073743547 $false $) $; simplifyNamespaceAliases2 $(@expr1073743548 $) $; $} $} $while $(@expr1073743549 $false $) ;
272:
273: $do ${ $if $(@expr1073743550 $prepareTest $(@expr1073743551 "simplifyKnownVariables1" $) $) ${ $setVerbose $(@expr1073743552 $false $) $; simplifyKnownVariables1 $(@expr1073743553 $) $; $} $} $while $(@expr1073743554 $false $) ;
274: $do ${ $if $(@expr1073743555 $prepareTest $(@expr1073743556 "simplifyKnownVariables2" $) $) ${ $setVerbose $(@expr1073743557 $false $) $; simplifyKnownVariables2 $(@expr1073743558 $) $; $} $} $while $(@expr1073743559 $false $) ;
275: $do ${ $if $(@expr1073743560 $prepareTest $(@expr1073743561 "simplifyKnownVariables3" $) $) ${ $setVerbose $(@expr1073743562 $false $) $; simplifyKnownVariables3 $(@expr1073743563 $) $; $} $} $while $(@expr1073743564 $false $) ;
276: $do ${ $if $(@expr1073743565 $prepareTest $(@expr1073743566 "simplifyKnownVariables4" $) $) ${ $setVerbose $(@expr1073743567 $false $) $; simplifyKnownVariables4 $(@expr1073743568 $) $; $} $} $while $(@expr1073743569 $false $) ;
277: $do ${ $if $(@expr1073743570 $prepareTest $(@expr1073743571 "simplifyKnownVariables5" $) $) ${ $setVerbose $(@expr1073743572 $false $) $; simplifyKnownVariables5 $(@expr1073743573 $) $; $} $} $while $(@expr1073743574 $false $) ;
278: $do ${ $if $(@expr1073743575 $prepareTest $(@expr1073743576 "simplifyKnownVariables6" $) $) ${ $setVerbose $(@expr1073743577 $false $) $; simplifyKnownVariables6 $(@expr1073743578 $) $; $} $} $while $(@expr1073743579 $false $) ;
279: $do ${ $if $(@expr1073743580 $prepareTest $(@expr1073743581 "simplifyKnownVariables7" $) $) ${ $setVerbose $(@expr1073743582 $false $) $; simplifyKnownVariables7 $(@expr1073743583 $) $; $} $} $while $(@expr1073743584 $false $) ;
280: $do ${ $if $(@expr1073743585 $prepareTest $(@expr1073743586 "simplifyKnownVariables8" $) $) ${ $setVerbose $(@expr1073743587 $false $) $; simplifyKnownVariables8 $(@expr1073743588 $) $; $} $} $while $(@expr1073743589 $false $) ;
281: $do ${ $if $(@expr1073743590 $prepareTest $(@expr1073743591 "simplifyKnownVariables9" $) $) ${ $setVerbose $(@expr1073743592 $false $) $; simplifyKnownVariables9 $(@expr1073743593 $) $; $} $} $while $(@expr1073743594 $false $) ;
282: $do ${ $if $(@expr1073743595 $prepareTest $(@expr1073743596 "simplifyKnownVariables10" $) $) ${ $setVerbose $(@expr1073743597 $false $) $; simplifyKnownVariables10 $(@expr1073743598 $) $; $} $} $while $(@expr1073743599 $false $) ;
283: $do ${ $if $(@expr1073743600 $prepareTest $(@expr1073743601 "simplifyKnownVariables11" $) $) ${ $setVerbose $(@expr1073743602 $false $) $; simplifyKnownVariables11 $(@expr1073743603 $) $; $} $} $while $(@expr1073743604 $false $) ;
284: $do ${ $if $(@expr1073743605 $prepareTest $(@expr1073743606 "simplifyKnownVariables13" $) $) ${ $setVerbose $(@expr1073743607 $false $) $; simplifyKnownVariables13 $(@expr1073743608 $) $; $} $} $while $(@expr1073743609 $false $) ;
285: $do ${ $if $(@expr1073743610 $prepareTest $(@expr1073743611 "simplifyKnownVariables14" $) $) ${ $setVerbose $(@expr1073743612 $false $) $; simplifyKnownVariables14 $(@expr1073743613 $) $; $} $} $while $(@expr1073743614 $false $) ;
286: $do ${ $if $(@expr1073743615 $prepareTest $(@expr1073743616 "simplifyKnownVariables15" $) $) ${ $setVerbose $(@expr1073743617 $false $) $; simplifyKnownVariables15 $(@expr1073743618 $) $; $} $} $while $(@expr1073743619 $false $) ;
287: $do ${ $if $(@expr1073743620 $prepareTest $(@expr1073743621 "simplifyKnownVariables16" $) $) ${ $setVerbose $(@expr1073743622 $false $) $; simplifyKnownVariables16 $(@expr1073743623 $) $; $} $} $while $(@expr1073743624 $false $) ;
288: $do ${ $if $(@expr1073743625 $prepareTest $(@expr1073743626 "simplifyKnownVariables17" $) $) ${ $setVerbose $(@expr1073743627 $false $) $; simplifyKnownVariables17 $(@expr1073743628 $) $; $} $} $while $(@expr1073743629 $false $) ;
289: $do ${ $if $(@expr1073743630 $prepareTest $(@expr1073743631 "simplifyKnownVariables18" $) $) ${ $setVerbose $(@expr1073743632 $false $) $; simplifyKnownVariables18 $(@expr1073743633 $) $; $} $} $while $(@expr1073743634 $false $) ;
290: $do ${ $if $(@expr1073743635 $prepareTest $(@expr1073743636 "simplifyKnownVariables19" $) $) ${ $setVerbose $(@expr1073743637 $false $) $; simplifyKnownVariables19 $(@expr1073743638 $) $; $} $} $while $(@expr1073743639 $false $) ;
291: $do ${ $if $(@expr1073743640 $prepareTest $(@expr1073743641 "simplifyKnownVariables20" $) $) ${ $setVerbose $(@expr1073743642 $false $) $; simplifyKnownVariables20 $(@expr1073743643 $) $; $} $} $while $(@expr1073743644 $false $) ;
292: $do ${ $if $(@expr1073743645 $prepareTest $(@expr1073743646 "simplifyKnownVariables21" $) $) ${ $setVerbose $(@expr1073743647 $false $) $; simplifyKnownVariables21 $(@expr1073743648 $) $; $} $} $while $(@expr1073743649 $false $) ;
293: $do ${ $if $(@expr1073743650 $prepareTest $(@expr1073743651 "simplifyKnownVariables22" $) $) ${ $setVerbose $(@expr1073743652 $false $) $; simplifyKnownVariables22 $(@expr1073743653 $) $; $} $} $while $(@expr1073743654 $false $) ;
294: $do ${ $if $(@expr1073743655 $prepareTest $(@expr1073743656 "simplifyKnownVariables23" $) $) ${ $setVerbose $(@expr1073743657 $false $) $; simplifyKnownVariables23 $(@expr1073743658 $) $; $} $} $while $(@expr1073743659 $false $) ;
295: $do ${ $if $(@expr1073743660 $prepareTest $(@expr1073743661 "simplifyKnownVariables25" $) $) ${ $setVerbose $(@expr1073743662 $false $) $; simplifyKnownVariables25 $(@expr1073743663 $) $; $} $} $while $(@expr1073743664 $false $) ;
296: $do ${ $if $(@expr1073743665 $prepareTest $(@expr1073743666 "simplifyKnownVariables27" $) $) ${ $setVerbose $(@expr1073743667 $false $) $; simplifyKnownVariables27 $(@expr1073743668 $) $; $} $} $while $(@expr1073743669 $false $) ;
297: $do ${ $if $(@expr1073743670 $prepareTest $(@expr1073743671 "simplifyKnownVariables28" $) $) ${ $setVerbose $(@expr1073743672 $false $) $; simplifyKnownVariables28 $(@expr1073743673 $) $; $} $} $while $(@expr1073743674 $false $) ;
298: $do ${ $if $(@expr1073743675 $prepareTest $(@expr1073743676 "simplifyKnownVariables29" $) $) ${ $setVerbose $(@expr1073743677 $false $) $; simplifyKnownVariables29 $(@expr1073743678 $) $; $} $} $while $(@expr1073743679 $false $) ;
299: $do ${ $if $(@expr1073743680 $prepareTest $(@expr1073743681 "simplifyKnownVariables30" $) $) ${ $setVerbose $(@expr1073743682 $false $) $; simplifyKnownVariables30 $(@expr1073743683 $) $; $} $} $while $(@expr1073743684 $false $) ;
300: $do ${ $if $(@expr1073743685 $prepareTest $(@expr1073743686 "simplifyKnownVariables31" $) $) ${ $setVerbose $(@expr1073743687 $false $) $; simplifyKnownVariables31 $(@expr1073743688 $) $; $} $} $while $(@expr1073743689 $false $) ;
301: $do ${ $if $(@expr1073743690 $prepareTest $(@expr1073743691 "simplifyKnownVariables32" $) $) ${ $setVerbose $(@expr1073743692 $false $) $; simplifyKnownVariables32 $(@expr1073743693 $) $; $} $} $while $(@expr1073743694 $false $) ;
302: $do ${ $if $(@expr1073743695 $prepareTest $(@expr1073743696 "simplifyKnownVariables33" $) $) ${ $setVerbose $(@expr1073743697 $false $) $; simplifyKnownVariables33 $(@expr1073743698 $) $; $} $} $while $(@expr1073743699 $false $) ;
303: $do ${ $if $(@expr1073743700 $prepareTest $(@expr1073743701 "simplifyKnownVariables34" $) $) ${ $setVerbose $(@expr1073743702 $false $) $; simplifyKnownVariables34 $(@expr1073743703 $) $; $} $} $while $(@expr1073743704 $false $) ;
304: $do ${ $if $(@expr1073743705 $prepareTest $(@expr1073743706 "simplifyKnownVariables35" $) $) ${ $setVerbose $(@expr1073743707 $false $) $; simplifyKnownVariables35 $(@expr1073743708 $) $; $} $} $while $(@expr1073743709 $false $) ;
305: $do ${ $if $(@expr1073743710 $prepareTest $(@expr1073743711 "simplifyKnownVariables36" $) $) ${ $setVerbose $(@expr1073743712 $false $) $; simplifyKnownVariables36 $(@expr1073743713 $) $; $} $} $while $(@expr1073743714 $false $) ;
306: $do ${ $if $(@expr1073743715 $prepareTest $(@expr1073743716 "simplifyKnownVariables37" $) $) ${ $setVerbose $(@expr1073743717 $false $) $; simplifyKnownVariables37 $(@expr1073743718 $) $; $} $} $while $(@expr1073743719 $false $) ;
307: $do ${ $if $(@expr1073743720 $prepareTest $(@expr1073743721 "simplifyKnownVariables38" $) $) ${ $setVerbose $(@expr1073743722 $false $) $; simplifyKnownVariables38 $(@expr1073743723 $) $; $} $} $while $(@expr1073743724 $false $) ;
308: $do ${ $if $(@expr1073743725 $prepareTest $(@expr1073743726 "simplifyKnownVariables39" $) $) ${ $setVerbose $(@expr1073743727 $false $) $; simplifyKnownVariables39 $(@expr1073743728 $) $; $} $} $while $(@expr1073743729 $false $) ;
309: $do ${ $if $(@expr1073743730 $prepareTest $(@expr1073743731 "simplifyKnownVariables40" $) $) ${ $setVerbose $(@expr1073743732 $false $) $; simplifyKnownVariables40 $(@expr1073743733 $) $; $} $} $while $(@expr1073743734 $false $) ;
310: $do ${ $if $(@expr1073743735 $prepareTest $(@expr1073743736 "simplifyKnownVariables41" $) $) ${ $setVerbose $(@expr1073743737 $false $) $; simplifyKnownVariables41 $(@expr1073743738 $) $; $} $} $while $(@expr1073743739 $false $) ;
311: $do ${ $if $(@expr1073743740 $prepareTest $(@expr1073743741 "simplifyKnownVariables42" $) $) ${ $setVerbose $(@expr1073743742 $false $) $; simplifyKnownVariables42 $(@expr1073743743 $) $; $} $} $while $(@expr1073743744 $false $) ;
312: $do ${ $if $(@expr1073743745 $prepareTest $(@expr1073743746 "simplifyKnownVariables43" $) $) ${ $setVerbose $(@expr1073743747 $false $) $; simplifyKnownVariables43 $(@expr1073743748 $) $; $} $} $while $(@expr1073743749 $false $) ;
313: $do ${ $if $(@expr1073743750 $prepareTest $(@expr1073743751 "simplifyKnownVariables44" $) $) ${ $setVerbose $(@expr1073743752 $false $) $; simplifyKnownVariables44 $(@expr1073743753 $) $; $} $} $while $(@expr1073743754 $false $) ;
314: $do ${ $if $(@expr1073743755 $prepareTest $(@expr1073743756 "simplifyKnownVariables45" $) $) ${ $setVerbose $(@expr1073743757 $false $) $; simplifyKnownVariables45 $(@expr1073743758 $) $; $} $} $while $(@expr1073743759 $false $) ;
315: $do ${ $if $(@expr1073743760 $prepareTest $(@expr1073743761 "simplifyKnownVariables46" $) $) ${ $setVerbose $(@expr1073743762 $false $) $; simplifyKnownVariables46 $(@expr1073743763 $) $; $} $} $while $(@expr1073743764 $false $) ;
316: $do ${ $if $(@expr1073743765 $prepareTest $(@expr1073743766 "simplifyKnownVariables47" $) $) ${ $setVerbose $(@expr1073743767 $false $) $; simplifyKnownVariables47 $(@expr1073743768 $) $; $} $} $while $(@expr1073743769 $false $) ;
317: $do ${ $if $(@expr1073743770 $prepareTest $(@expr1073743771 "simplifyKnownVariables48" $) $) ${ $setVerbose $(@expr1073743772 $false $) $; simplifyKnownVariables48 $(@expr1073743773 $) $; $} $} $while $(@expr1073743774 $false $) ;
318: $do ${ $if $(@expr1073743775 $prepareTest $(@expr1073743776 "simplifyKnownVariables49" $) $) ${ $setVerbose $(@expr1073743777 $false $) $; simplifyKnownVariables49 $(@expr1073743778 $) $; $} $} $while $(@expr1073743779 $false $) ;
319: $do ${ $if $(@expr1073743780 $prepareTest $(@expr1073743781 "simplifyKnownVariables50" $) $) ${ $setVerbose $(@expr1073743782 $false $) $; simplifyKnownVariables50 $(@expr1073743783 $) $; $} $} $while $(@expr1073743784 $false $) ;
320: $do ${ $if $(@expr1073743785 $prepareTest $(@expr1073743786 "simplifyKnownVariables51" $) $) ${ $setVerbose $(@expr1073743787 $false $) $; simplifyKnownVariables51 $(@expr1073743788 $) $; $} $} $while $(@expr1073743789 $false $) ;
321: $do ${ $if $(@expr1073743790 $prepareTest $(@expr1073743791 "simplifyKnownVariables52" $) $) ${ $setVerbose $(@expr1073743792 $false $) $; simplifyKnownVariables52 $(@expr1073743793 $) $; $} $} $while $(@expr1073743794 $false $) ;
322: $do ${ $if $(@expr1073743795 $prepareTest $(@expr1073743796 "simplifyKnownVariables53" $) $) ${ $setVerbose $(@expr1073743797 $false $) $; simplifyKnownVariables53 $(@expr1073743798 $) $; $} $} $while $(@expr1073743799 $false $) ;
323: $do ${ $if $(@expr1073743800 $prepareTest $(@expr1073743801 "simplifyKnownVariables54" $) $) ${ $setVerbose $(@expr1073743802 $false $) $; simplifyKnownVariables54 $(@expr1073743803 $) $; $} $} $while $(@expr1073743804 $false $) ;
324: $do ${ $if $(@expr1073743805 $prepareTest $(@expr1073743806 "simplifyKnownVariables55" $) $) ${ $setVerbose $(@expr1073743807 $false $) $; simplifyKnownVariables55 $(@expr1073743808 $) $; $} $} $while $(@expr1073743809 $false $) ;
325: $do ${ $if $(@expr1073743810 $prepareTest $(@expr1073743811 "simplifyKnownVariables56" $) $) ${ $setVerbose $(@expr1073743812 $false $) $; simplifyKnownVariables56 $(@expr1073743813 $) $; $} $} $while $(@expr1073743814 $false $) ;
326: $do ${ $if $(@expr1073743815 $prepareTest $(@expr1073743816 "simplifyKnownVariables57" $) $) ${ $setVerbose $(@expr1073743817 $false $) $; simplifyKnownVariables57 $(@expr1073743818 $) $; $} $} $while $(@expr1073743819 $false $) ;
327: $do ${ $if $(@expr1073743820 $prepareTest $(@expr1073743821 "simplifyKnownVariables58" $) $) ${ $setVerbose $(@expr1073743822 $false $) $; simplifyKnownVariables58 $(@expr1073743823 $) $; $} $} $while $(@expr1073743824 $false $) ;
328: $do ${ $if $(@expr1073743825 $prepareTest $(@expr1073743826 "simplifyKnownVariables59" $) $) ${ $setVerbose $(@expr1073743827 $false $) $; simplifyKnownVariables59 $(@expr1073743828 $) $; $} $} $while $(@expr1073743829 $false $) ;
329: $do ${ $if $(@expr1073743830 $prepareTest $(@expr1073743831 "simplifyKnownVariables60" $) $) ${ $setVerbose $(@expr1073743832 $false $) $; simplifyKnownVariables60 $(@expr1073743833 $) $; $} $} $while $(@expr1073743834 $false $) ;
330: $do ${ $if $(@expr1073743835 $prepareTest $(@expr1073743836 "simplifyKnownVariables61" $) $) ${ $setVerbose $(@expr1073743837 $false $) $; simplifyKnownVariables61 $(@expr1073743838 $) $; $} $} $while $(@expr1073743839 $false $) ;
331: $do ${ $if $(@expr1073743840 $prepareTest $(@expr1073743841 "simplifyKnownVariables62" $) $) ${ $setVerbose $(@expr1073743842 $false $) $; simplifyKnownVariables62 $(@expr1073743843 $) $; $} $} $while $(@expr1073743844 $false $) ;
332: $do ${ $if $(@expr1073743845 $prepareTest $(@expr1073743846 "simplifyKnownVariables63" $) $) ${ $setVerbose $(@expr1073743847 $false $) $; simplifyKnownVariables63 $(@expr1073743848 $) $; $} $} $while $(@expr1073743849 $false $) ;
333: $do ${ $if $(@expr1073743850 $prepareTest $(@expr1073743851 "simplifyKnownVariablesBailOutAssign1" $) $) ${ $setVerbose $(@expr1073743852 $false $) $; simplifyKnownVariablesBailOutAssign1 $(@expr1073743853 $) $; $} $} $while $(@expr1073743854 $false $) ;
334: $do ${ $if $(@expr1073743855 $prepareTest $(@expr1073743856 "simplifyKnownVariablesBailOutAssign2" $) $) ${ $setVerbose $(@expr1073743857 $false $) $; simplifyKnownVariablesBailOutAssign2 $(@expr1073743858 $) $; $} $} $while $(@expr1073743859 $false $) ;
335: $do ${ $if $(@expr1073743860 $prepareTest $(@expr1073743861 "simplifyKnownVariablesBailOutAssign3" $) $) ${ $setVerbose $(@expr1073743862 $false $) $; simplifyKnownVariablesBailOutAssign3 $(@expr1073743863 $) $; $} $} $while $(@expr1073743864 $false $) ;
336: $do ${ $if $(@expr1073743865 $prepareTest $(@expr1073743866 "simplifyKnownVariablesBailOutFor1" $) $) ${ $setVerbose $(@expr1073743867 $false $) $; simplifyKnownVariablesBailOutFor1 $(@expr1073743868 $) $; $} $} $while $(@expr1073743869 $false $) ;
337: $do ${ $if $(@expr1073743870 $prepareTest $(@expr1073743871 "simplifyKnownVariablesBailOutFor2" $) $) ${ $setVerbose $(@expr1073743872 $false $) $; simplifyKnownVariablesBailOutFor2 $(@expr1073743873 $) $; $} $} $while $(@expr1073743874 $false $) ;
338: $do ${ $if $(@expr1073743875 $prepareTest $(@expr1073743876 "simplifyKnownVariablesBailOutFor3" $) $) ${ $setVerbose $(@expr1073743877 $false $) $; simplifyKnownVariablesBailOutFor3 $(@expr1073743878 $) $; $} $} $while $(@expr1073743879 $false $) ;
339: $do ${ $if $(@expr1073743880 $prepareTest $(@expr1073743881 "simplifyKnownVariablesBailOutMemberFunction" $) $) ${ $setVerbose $(@expr1073743882 $false $) $; simplifyKnownVariablesBailOutMemberFunction $(@expr1073743883 $) $; $} $} $while $(@expr1073743884 $false $) ;
340: $do ${ $if $(@expr1073743885 $prepareTest $(@expr1073743886 "simplifyKnownVariablesBailOutConditionalIncrement" $) $) ${ $setVerbose $(@expr1073743887 $false $) $; simplifyKnownVariablesBailOutConditionalIncrement $(@expr1073743888 $) $; $} $} $while $(@expr1073743889 $false $) ;
341: $do ${ $if $(@expr1073743890 $prepareTest $(@expr1073743891 "simplifyKnownVariablesBailOutSwitchBreak" $) $) ${ $setVerbose $(@expr1073743892 $false $) $; simplifyKnownVariablesBailOutSwitchBreak $(@expr1073743893 $) $; $} $} $while $(@expr1073743894 $false $) ;
342: $do ${ $if $(@expr1073743895 $prepareTest $(@expr1073743896 "simplifyKnownVariablesFloat" $) $) ${ $setVerbose $(@expr1073743897 $false $) $; simplifyKnownVariablesFloat $(@expr1073743898 $) $; $} $} $while $(@expr1073743899 $false $) ;
343: $do ${ $if $(@expr1073743900 $prepareTest $(@expr1073743901 "simplifyKnownVariablesClassMember" $) $) ${ $setVerbose $(@expr1073743902 $false $) $; simplifyKnownVariablesClassMember $(@expr1073743903 $) $; $} $} $while $(@expr1073743904 $false $) ;
344: $do ${ $if $(@expr1073743905 $prepareTest $(@expr1073743906 "simplifyKnownVariablesFunctionCalls" $) $) ${ $setVerbose $(@expr1073743907 $false $) $; simplifyKnownVariablesFunctionCalls $(@expr1073743908 $) $; $} $} $while $(@expr1073743909 $false $) ;
345: $do ${ $if $(@expr1073743910 $prepareTest $(@expr1073743911 "simplifyKnownVariablesGlobalVars" $) $) ${ $setVerbose $(@expr1073743912 $false $) $; simplifyKnownVariablesGlobalVars $(@expr1073743913 $) $; $} $} $while $(@expr1073743914 $false $) ;
346: $do ${ $if $(@expr1073743915 $prepareTest $(@expr1073743916 "simplifyKnownVariablesReturn" $) $) ${ $setVerbose $(@expr1073743917 $false $) $; simplifyKnownVariablesReturn $(@expr1073743918 $) $; $} $} $while $(@expr1073743919 $false $) ;
347: $do ${ $if $(@expr1073743920 $prepareTest $(@expr1073743921 "simplifyKnownVariablesPointerAliasFunctionCall" $) $) ${ $setVerbose $(@expr1073743922 $false $) $; simplifyKnownVariablesPointerAliasFunctionCall $(@expr1073743923 $) $; $} $} $while $(@expr1073743924 $false $) ;
348: $do ${ $if $(@expr1073743925 $prepareTest $(@expr1073743926 "simplifyKnownVariablesNamespace" $) $) ${ $setVerbose $(@expr1073743927 $false $) $; simplifyKnownVariablesNamespace $(@expr1073743928 $) $; $} $} $while $(@expr1073743929 $false $) ;
349:
350: $do ${ $if $(@expr1073743930 $prepareTest $(@expr1073743931 "simplifyCasts1" $) $) ${ $setVerbose $(@expr1073743932 $false $) $; simplifyCasts1 $(@expr1073743933 $) $; $} $} $while $(@expr1073743934 $false $) ;
351: $do ${ $if $(@expr1073743935 $prepareTest $(@expr1073743936 "simplifyCasts2" $) $) ${ $setVerbose $(@expr1073743937 $false $) $; simplifyCasts2 $(@expr1073743938 $) $; $} $} $while $(@expr1073743939 $false $) ;
352: $do ${ $if $(@expr1073743940 $prepareTest $(@expr1073743941 "simplifyCasts3" $) $) ${ $setVerbose $(@expr1073743942 $false $) $; simplifyCasts3 $(@expr1073743943 $) $; $} $} $while $(@expr1073743944 $false $) ;
353: $do ${ $if $(@expr1073743945 $prepareTest $(@expr1073743946 "simplifyCasts4" $) $) ${ $setVerbose $(@expr1073743947 $false $) $; simplifyCasts4 $(@expr1073743948 $) $; $} $} $while $(@expr1073743949 $false $) ;
354: $do ${ $if $(@expr1073743950 $prepareTest $(@expr1073743951 "simplifyCasts5" $) $) ${ $setVerbose $(@expr1073743952 $false $) $; simplifyCasts5 $(@expr1073743953 $) $; $} $} $while $(@expr1073743954 $false $) ;
355: $do ${ $if $(@expr1073743955 $prepareTest $(@expr1073743956 "simplifyCasts7" $) $) ${ $setVerbose $(@expr1073743957 $false $) $; simplifyCasts7 $(@expr1073743958 $) $; $} $} $while $(@expr1073743959 $false $) ;
356: $do ${ $if $(@expr1073743960 $prepareTest $(@expr1073743961 "simplifyCasts8" $) $) ${ $setVerbose $(@expr1073743962 $false $) $; simplifyCasts8 $(@expr1073743963 $) $; $} $} $while $(@expr1073743964 $false $) ;
357: $do ${ $if $(@expr1073743965 $prepareTest $(@expr1073743966 "simplifyCasts9" $) $) ${ $setVerbose $(@expr1073743967 $false $) $; simplifyCasts9 $(@expr1073743968 $) $; $} $} $while $(@expr1073743969 $false $) ;
358: $do ${ $if $(@expr1073743970 $prepareTest $(@expr1073743971 "simplifyCasts10" $) $) ${ $setVerbose $(@expr1073743972 $false $) $; simplifyCasts10 $(@expr1073743973 $) $; $} $} $while $(@expr1073743974 $false $) ;
359: $do ${ $if $(@expr1073743975 $prepareTest $(@expr1073743976 "simplifyCasts11" $) $) ${ $setVerbose $(@expr1073743977 $false $) $; simplifyCasts11 $(@expr1073743978 $) $; $} $} $while $(@expr1073743979 $false $) ;
360: $do ${ $if $(@expr1073743980 $prepareTest $(@expr1073743981 "simplifyCasts12" $) $) ${ $setVerbose $(@expr1073743982 $false $) $; simplifyCasts12 $(@expr1073743983 $) $; $} $} $while $(@expr1073743984 $false $) ;
361: $do ${ $if $(@expr1073743985 $prepareTest $(@expr1073743986 "simplifyCasts13" $) $) ${ $setVerbose $(@expr1073743987 $false $) $; simplifyCasts13 $(@expr1073743988 $) $; $} $} $while $(@expr1073743989 $false $) ;
362: $do ${ $if $(@expr1073743990 $prepareTest $(@expr1073743991 "simplifyCasts14" $) $) ${ $setVerbose $(@expr1073743992 $false $) $; simplifyCasts14 $(@expr1073743993 $) $; $} $} $while $(@expr1073743994 $false $) ;
363: $do ${ $if $(@expr1073743995 $prepareTest $(@expr1073743996 "simplifyCasts15" $) $) ${ $setVerbose $(@expr1073743997 $false $) $; simplifyCasts15 $(@expr1073743998 $) $; $} $} $while $(@expr1073743999 $false $) ;
364: $do ${ $if $(@expr1073744000 $prepareTest $(@expr1073744001 "simplifyCasts16" $) $) ${ $setVerbose $(@expr1073744002 $false $) $; simplifyCasts16 $(@expr1073744003 $) $; $} $} $while $(@expr1073744004 $false $) ;
365: $do ${ $if $(@expr1073744005 $prepareTest $(@expr1073744006 "simplifyCasts17" $) $) ${ $setVerbose $(@expr1073744007 $false $) $; simplifyCasts17 $(@expr1073744008 $) $; $} $} $while $(@expr1073744009 $false $) ;
366:
367: $do ${ $if $(@expr1073744010 $prepareTest $(@expr1073744011 "removeRedundantAssignment" $) $) ${ $setVerbose $(@expr1073744012 $false $) $; removeRedundantAssignment $(@expr1073744013 $) $; $} $} $while $(@expr1073744014 $false $) ;
368:
369: $do ${ $if $(@expr1073744015 $prepareTest $(@expr1073744016 "simplify_constants" $) $) ${ $setVerbose $(@expr1073744017 $false $) $; simplify_constants $(@expr1073744018 $) $; $} $} $while $(@expr1073744019 $false $) ;
370: $do ${ $if $(@expr1073744020 $prepareTest $(@expr1073744021 "simplify_constants2" $) $) ${ $setVerbose $(@expr1073744022 $false $) $; simplify_constants2 $(@expr1073744023 $) $; $} $} $while $(@expr1073744024 $false $) ;
371: $do ${ $if $(@expr1073744025 $prepareTest $(@expr1073744026 "simplify_constants3" $) $) ${ $setVerbose $(@expr1073744027 $false $) $; simplify_constants3 $(@expr1073744028 $) $; $} $} $while $(@expr1073744029 $false $) ;
372: $do ${ $if $(@expr1073744030 $prepareTest $(@expr1073744031 "simplify_constants4" $) $) ${ $setVerbose $(@expr1073744032 $false $) $; simplify_constants4 $(@expr1073744033 $) $; $} $} $while $(@expr1073744034 $false $) ;
373: $do ${ $if $(@expr1073744035 $prepareTest $(@expr1073744036 "simplify_constants5" $) $) ${ $setVerbose $(@expr1073744037 $false $) $; simplify_constants5 $(@expr1073744038 $) $; $} $} $while $(@expr1073744039 $false $) ;
374: $do ${ $if $(@expr1073744040 $prepareTest $(@expr1073744041 "simplify_constants6" $) $) ${ $setVerbose $(@expr1073744042 $false $) $; simplify_constants6 $(@expr1073744043 $) $; $} $} $while $(@expr1073744044 $false $) ;
375: $do ${ $if $(@expr1073744045 $prepareTest $(@expr1073744046 "simplifyVarDeclInitLists" $) $) ${ $setVerbose $(@expr1073744047 $false $) $; simplifyVarDeclInitLists $(@expr1073744048 $) $; $} $} $while $(@expr1073744049 $false $) ;
376: }
377:
378:
379: std :: string tok_ ( const char * file@var115 , int line@var116 , const char code@var117 [ ] , bool simplify@var118 = true , Settings :: PlatformType type@var119 = Settings :: Native ) {
380: errout@var100 .@expr1073744050 str (@expr1073744051 "" ) ;
381:
382: settings0@var102 .@expr1073744052 platform (@expr1073744053 type@var119 ) ;
383: Tokenizer tokenizer@var120 (@expr1073744054 &@expr1073744055 settings0@var102 , this@expr1073744056 ) ;
384:
385: std ::@expr1073744057 istringstream istr@var121 (@expr1073744058 code@var117 ) ;
386: $assert_ $(@expr1073744059 file@var115 $, line@var116 $, $(@expr1073744060 tokenizer@var120 .@expr1073744061 tokenize (@expr1073744062 istr@var121 , "test.cpp" ) $) $) ;
387:
388: if (@expr1073744063 simplify@var118 ) {
389: tokenizer@var120 .@expr1073744064 simplifyTokenList2 (@expr1073744065 ) ; }
390:
391: return tokenizer@var120 .@expr1073744066 tokens (@expr1073744067 ) .@expr1073744068 stringifyList (@expr1073744069 nullptr , !@expr1073744070 simplify@var118 ) ;
392: }
393:
394:
395: std :: string tokWithWindows_ ( const char * file@var122 , int line@var123 , const char code@var124 [ ] , bool simplify@var125 = true , Settings :: PlatformType type@var126 = Settings :: Native ) {
396: errout@var100 .@expr1073744071 str (@expr1073744072 "" ) ;
397:
398: settings_windows@var105 .@expr1073744073 platform (@expr1073744074 type@var126 ) ;
399: Tokenizer tokenizer@var127 (@expr1073744075 &@expr1073744076 settings_windows@var105 , this@expr1073744077 ) ;
400:
401: std ::@expr1073744078 istringstream istr@var128 (@expr1073744079 code@var124 ) ;
402: $assert_ $(@expr1073744080 file@var122 $, line@var123 $, $(@expr1073744081 tokenizer@var127 .@expr1073744082 tokenize (@expr1073744083 istr@var128 , "test.cpp" ) $) $) ;
403:
404: if (@expr1073744084 simplify@var125 ) {
405: tokenizer@var127 .@expr1073744085 simplifyTokenList2 (@expr1073744086 ) ; }
406:
407: return tokenizer@var127 .@expr1073744087 tokens (@expr1073744088 ) .@expr1073744089 stringifyList (@expr1073744090 nullptr , !@expr1073744091 simplify@var125 ) ;
408: }
409:
410: std :: string tok_ ( const char * file@var129 , int line@var130 , const char code@var131 [ ] , const char filename@var132 [ ] , bool simplify@var133 = true ) {
411: errout@var100 .@expr1073744092 str (@expr1073744093 "" ) ;
412:
413: Tokenizer tokenizer@var134 (@expr1073744094 &@expr1073744095 settings0@var102 , this@expr1073744096 ) ;
414:
415: std ::@expr1073744097 istringstream istr@var135 (@expr1073744098 code@var131 ) ;
416: $assert_ $(@expr1073744099 file@var129 $, line@var130 $, $(@expr1073744100 tokenizer@var134 .@expr1073744101 tokenize (@expr1073744102 istr@var135 , filename@var132 ) $) $) ;
417: if (@expr1073744103 simplify@var133 ) {
418: tokenizer@var134 .@expr1073744104 simplifyTokenList2 (@expr1073744105 ) ; }
419:
420: return tokenizer@var134 .@expr1073744106 tokens (@expr1073744107 ) .@expr1073744108 stringifyList (@expr1073744109 nullptr , false ) ;
421: }
422:
423:
424: std :: string tokWithNewlines_ ( const char code@var136 [ ] , const char * file@var137 , int line@var138 ) {
425: errout@var100 .@expr1073744110 str (@expr1073744111 "" ) ;
426:
427: Tokenizer tokenizer@var139 (@expr1073744112 &@expr1073744113 settings0@var102 , this@expr1073744114 ) ;
428:
429: std ::@expr1073744115 istringstream istr@var140 (@expr1073744116 code@var136 ) ;
430: $assert_ $(@expr1073744117 file@var137 $, line@var138 $, $(@expr1073744118 tokenizer@var139 .@expr1073744119 tokenize (@expr1073744120 istr@var140 , "test.cpp" ) $) $) ;
431: tokenizer@var139 .@expr1073744121 simplifyTokenList2 (@expr1073744122 ) ;
432:
433: return tokenizer@var139 .@expr1073744123 tokens (@expr1073744124 ) .@expr1073744125 stringifyList (@expr1073744126 false , false , false , true , false ) ;
434: }
435:
436:
437: std :: string tokWithStdLib_ ( const char code@var141 [ ] , const char * file@var142 , int line@var143 ) {
438: errout@var100 .@expr1073744127 str (@expr1073744128 "" ) ;
439:
440: Tokenizer tokenizer@var144 (@expr1073744129 &@expr1073744130 settings_std@var104 , this@expr1073744131 ) ;
441:
442: std ::@expr1073744132 istringstream istr@var145 (@expr1073744133 code@var141 ) ;
443: $assert_ $(@expr1073744134 file@var142 $, line@var143 $, $(@expr1073744135 tokenizer@var144 .@expr1073744136 tokenize (@expr1073744137 istr@var145 , "test.cpp" ) $) $) ;
444: tokenizer@var144 .@expr1073744138 simplifyTokenList2 (@expr1073744139 ) ;
445:
446: return tokenizer@var144 .@expr1073744140 tokens (@expr1073744141 ) .@expr1073744142 stringifyList (@expr1073744143 nullptr , false ) ;
447: }
448:
449:
450: std :: string tokenizeAndStringify_ ( const char * file@var146 , int linenr@var147 , const char code@var148 [ ] , bool simplify@var149 = false , bool expand@var150 = true , Settings :: PlatformType platform@var151 = Settings :: Native , const char * filename@var152 = "test.cpp" , bool cpp11@var153 = true ) {
451: errout@var100 .@expr2322 str (@expr2323 "" ) ;
452:
453: settings1@var103 .@expr1073744148 debugwarnings@var154 =@expr1073744149 true ;
454: settings1@var103 .@expr1073744150 platform (@expr1073744151 platform@var151 ) ;
455: settings1@var103 .@expr1073744152 standards@var155 .@expr1073744153 cpp@var156 =@expr1073744154 cpp11@var153 ?@expr1073744155 Standards ::@expr1073744156 CPP11 :@expr1073744157 Standards ::@expr1073744158 CPP03@expr1073744144 ;
456:
457:
458: Tokenizer tokenizer@var157 (@expr1073744159 &@expr1073744160 settings1@var103 , this@expr1073744161 ) ;
459: std ::@expr1073744162 istringstream istr@var158 (@expr1073744163 code@var148 ) ;
460: $assert_ $(@expr1073744164 file@var146 $, linenr@var147 $, $(@expr1073744165 tokenizer@var157 .@expr1073744166 tokenize (@expr1073744167 istr@var158 , filename@var152 ) $) $) ;
461: if (@expr1073744168 simplify@var149 ) {
462: tokenizer@var157 .@expr1073744169 simplifyTokenList2 (@expr1073744170 ) ; }
463:
464:
465: const std ::@expr1073744171 string debugwarnings@var159 =@expr1073744172 errout@var100 .@expr2322 str (@expr1073744174 ) ;
466: errout@var100 .@expr2322 str (@expr2323 "" ) ;
467: std ::@expr1073744177 istringstream istr2@var160 (@expr1073744178 debugwarnings@var159 ) ;
468: std ::@expr1073744179 string line@var161 ;
469: while (@expr1073744180 std ::@expr1073744181 getline (@expr1073744182 istr2@var160 , line@var161 ) ) {
470: if (@expr1073744183 line@var161 .@expr1073744184 find (@expr1073744185 "valueflow.cpp" ) ==@expr1073744186 std ::@expr1073744187 string ::@expr1073744188 npos@expr1073744145 ) {
471: errout@var100 <<@expr1073744189 line@var161 <<@expr1073744190 "\n" ; }
472: }
473:
474: if (@expr1073744191 tokenizer@var157 .@expr2368 tokens (@expr2369 ) ) {
475: return tokenizer@var157 .@expr2368 tokens (@expr2369 ) .@expr1073744196 stringifyList (@expr1073744197 false , expand@var150 , false , true , false , nullptr , nullptr ) ; }
476: else {
477: return "" ; }
478: }
479:
480:
481: std :: string tokenizeDebugListing_ ( const char * file@var162 , int line@var163 , const char code@var164 [ ] , bool simplify@var165 = false , const char filename@var166 [ 9 ] = "test.cpp" ) {
482: errout@var100 .@expr1073744198 str (@expr1073744199 "" ) ;
483:
484: Tokenizer tokenizer@var167 (@expr1073744200 &@expr1073744201 settings0@var102 , this@expr1073744202 ) ;
485: std ::@expr1073744203 istringstream istr@var168 (@expr1073744204 code@var164 ) ;
486: $assert_ $(@expr1073744205 file@var162 $, line@var163 $, $(@expr1073744206 tokenizer@var167 .@expr1073744207 tokenize (@expr1073744208 istr@var168 , filename@var166 ) $) $) ;
487:
488: if (@expr1073744209 simplify@var165 ) {
489: tokenizer@var167 .@expr1073744210 simplifyTokenList2 (@expr1073744211 ) ; }
490:
491:
492: return tokenizer@var167 .@expr1073744212 tokens (@expr1073744213 ) .@expr1073744214 stringifyList (@expr1073744215 true ) ;
493: }
494:
495: void simplifyTokenList1 ( ) {
496:
497: $if $(@expr1073744216 $!@expr1073744217 $assertEquals $(@expr1073744218 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 497 $, "{ x = f ( ) ; while ( x == -1 ) { x = f ( ) ; } }" $, $tok_ $(@expr1073744219 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 497 $, "{ while((x=f())==-1 && errno==EINTR){}}" , true $) $) $) { $return
498: ; }
499: }
500:
501:
502:
503: void test1 ( ) {
504:
|
513:
514: $if $(@expr1073744220 $!@expr1073744221 $assertEquals $(@expr1073744222 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 514 $, "; x = p [ 1 ] ;" $, $tok_ $(@expr1073744223 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 514 $, "; x = * ( p + 1 ) ;" $) $) $) { $return ; }
515: $if $(@expr1073744224 $!@expr1073744225 $assertEquals $(@expr1073744226 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 515 $, "; x = p [ 0xA ] ;" $, $tok_ $(@expr1073744227 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 515 $, "; x = * ( p + 0xA ) ;" $) $) $) { $return ; }
516: $if $(@expr1073744228 $!@expr1073744229 $assertEquals $(@expr1073744230 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 516 $, "; x = p [ n ] ;" $, $tok_ $(@expr1073744231 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 516 $, "; x = * ( p + n ) ;" $) $) $) { $return ; }
517: $if $(@expr1073744232 $!@expr1073744233 $assertEquals $(@expr1073744234 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 517 $, "; x = y * ( p + n ) ;" $, $tok_ $(@expr1073744235 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 517 $, "; x = y * ( p + n ) ;" $) $) $) { $return ; }
518: $if $(@expr1073744236 $!@expr1073744237 $assertEquals $(@expr1073744238 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 518 $, "; x = 10 * ( p + n ) ;" $, $tok_ $(@expr1073744239 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 518 $, "; x = 10 * ( p + n ) ;" $) $) $) { $return ; }
519: $if $(@expr1073744240 $!@expr1073744241 $assertEquals $(@expr1073744242 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 519 $, "; x = y [ 10 ] * ( p + n ) ;" $, $tok_ $(@expr1073744243 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 519 $, "; x = y [ 10 ] * ( p + n ) ;" $) $) $) { $return ; }
520: $if $(@expr1073744244 $!@expr1073744245 $assertEquals $(@expr1073744246 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 520 $, "; x = ( a + m ) * ( p + n ) ;" $, $tok_ $(@expr1073744247 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 520 $, "; x = ( a + m ) * ( p + n ) ;" $) $) $) { $return ; }
521:
522:
523: $if $(@expr1073744248 $!@expr1073744249 $assertEquals $(@expr1073744250 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 523 $, "; x = p [ -1 ] ;" $, $tok_ $(@expr1073744251 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 523 $, "; x = *(p - 1);" $) $) $) { $return ; }
524: $if $(@expr1073744252 $!@expr1073744253 $assertEquals $(@expr1073744254 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 524 $, "; x = p [ -0xA ] ;" $, $tok_ $(@expr1073744255 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 524 $, "; x = *(p - 0xA);" $) $) $) { $return ; }
525: $if $(@expr1073744256 $!@expr1073744257 $assertEquals $(@expr1073744258 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 525 $, "; x = p [ - n ] ;" $, $tok_ $(@expr1073744259 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 525 $, "; x = *(p - n);" $) $) $) { $return ; }
526: $if $(@expr1073744260 $!@expr1073744261 $assertEquals $(@expr1073744262 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 526 $, "; x = y * ( p - 1 ) ;" $, $tok_ $(@expr1073744263 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 526 $, "; x = y * (p - 1);" $) $) $) { $return ; }
527: $if $(@expr1073744264 $!@expr1073744265 $assertEquals $(@expr1073744266 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 527 $, "; x = 10 * ( p - 1 ) ;" $, $tok_ $(@expr1073744267 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 527 $, "; x = 10 * (p - 1);" $) $) $) { $return ; }
528: $if $(@expr1073744268 $!@expr1073744269 $assertEquals $(@expr1073744270 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 528 $, "; x = y [ 10 ] * ( p - 1 ) ;" $, $tok_ $(@expr1073744271 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 528 $, "; x = y[10] * (p - 1);" $) $) $) { $return ; }
529: $if $(@expr1073744272 $!@expr1073744273 $assertEquals $(@expr1073744274 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 529 $, "; x = ( a - m ) * ( p - n ) ;" $, $tok_ $(@expr1073744275 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 529 $, "; x = (a - m) * (p - n);" $) $) $) { $return ; }
530:
531:
532:
533: $if $(@expr1073744276 $!@expr1073744277 $assertEquals $(@expr1073744278 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 533 $, "; a = b * ( x - y ) ;" $, $tok_ $(@expr1073744279 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 533 $, "; a = b * (x - y);" $) $) $) { $return ; }
534: $if $(@expr1073744280 $!@expr1073744281 $assertEquals $(@expr1073744282 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 534 $, "; a = b * x [ - y ] ;" $, $tok_ $(@expr1073744283 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 534 $, "; a = b * *(x - y);" $) $) $) { $return ; }
535: $if $(@expr1073744284 $!@expr1073744285 $assertEquals $(@expr1073744286 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 535 $, "; a = a * ( x - y ) ;" $, $tok_ $(@expr1073744287 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 535 $, "; a *= (x - y);" $) $) $) { $return ; }
536: $if $(@expr1073744288 $!@expr1073744289 $assertEquals $(@expr1073744290 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 536 $, "; z = a ++ * ( x - y ) ;" $, $tok_ $(@expr1073744291 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 536 $, "; z = a++ * (x - y);" $) $) $) { $return ; }
537: $if $(@expr1073744292 $!@expr1073744293 $assertEquals $(@expr1073744294 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 537 $, "; z = a ++ * ( x + y ) ;" $, $tok_ $(@expr1073744295 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 537 $, "; z = a++ * (x + y);" $) $) $) { $return ; }
538: $if $(@expr1073744296 $!@expr1073744297 $assertEquals $(@expr1073744298 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 538 $, "; z = a -- * ( x - y ) ;" $, $tok_ $(@expr1073744299 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 538 $, "; z = a-- * (x - y);" $) $) $) { $return ; }
539: $if $(@expr1073744300 $!@expr1073744301 $assertEquals $(@expr1073744302 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 539 $, "; z = a -- * ( x + y ) ;" $, $tok_ $(@expr1073744303 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 539 $, "; z = a-- * (x + y);" $) $) $) { $return ; }
540: $if $(@expr1073744304 $!@expr1073744305 $assertEquals $(@expr1073744306 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 540 $, "; z = 'a' * ( x - y ) ;" $, $tok_ $(@expr1073744307 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 540 $, "; z = 'a' * (x - y);" $) $) $) { $return ; }
541: $if $(@expr1073744308 $!@expr1073744309 $assertEquals $(@expr1073744310 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 541 $, "; z = \"a\" * ( x - y ) ;" $, $tok_ $(@expr1073744311 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 541 $, "; z = \"a\" * (x - y);" $) $) $) { $return ; }
542: $if $(@expr1073744312 $!@expr1073744313 $assertEquals $(@expr1073744314 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 542 $, "; z = 'a' * ( x + y ) ;" $, $tok_ $(@expr1073744315 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 542 $, "; z = 'a' * (x + y);" $) $) $) { $return ; }
543: $if $(@expr1073744316 $!@expr1073744317 $assertEquals $(@expr1073744318 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 543 $, "; z = \"a\" * ( x + y ) ;" $, $tok_ $(@expr1073744319 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 543 $, "; z = \"a\" * (x + y);" $) $) $) { $return ; }
544: $if $(@expr1073744320 $!@expr1073744321 $assertEquals $(@expr1073744322 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 544 $, "; z = foo ( ) * ( x + y ) ;" $, $tok_ $(@expr1073744323 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 544 $, "; z = foo() * (x + y);" $) $) $) { $return ; }
545: }
546:
547:
548:
549: void simplifyMathFunctions_erfc ( ) {
550:
551: const char code_erfc@var169 [@expr1073744324 65 ] =@expr1073744325 "void f(int x) {\n std::cout << erfc(x);\n std::cout << erfc(0L);\n}"
552:
553:
554: ;
555: const char expected_erfc@var170 [@expr1073744326 68 ] =@expr1073744327 "void f ( int x ) {\nstd :: cout << erfc ( x ) ;\nstd :: cout << 1 ;\n}"
556:
557:
558: ;
559: $if $(@expr1073744328 $!@expr1073744329 $assertEquals $(@expr1073744330 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 559 $, expected_erfc@var170 $, $tokWithNewlines_ $(@expr1073744331 code_erfc@var169 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 559 $) $) $) { $return ; }
560:
561: const char code_erfcf@var171 [@expr1073744332 71 ] =@expr1073744333 "void f(float x) {\n std::cout << erfcf(x);\n std::cout << erfcf(0.0f);\n}"
562:
563:
564: ;
565: const char expected_erfcf@var172 [@expr1073744334 71 ] =@expr1073744335 "void f ( float x ) {\nstd :: cout << erfcf ( x ) ;\nstd :: cout << 1 ;\n}"
566:
567:
568: ;
569: $if $(@expr1073744336 $!@expr1073744337 $assertEquals $(@expr1073744338 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 569 $, expected_erfcf@var172 $, $tokWithNewlines_ $(@expr1073744339 code_erfcf@var171 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 569 $) $) $) { $return ; }
570:
571: const char code_erfcl@var173 [@expr1073744340 77 ] =@expr1073744341 "void f(long double x) {\n std::cout << erfcl(x);\n std::cout << erfcl(0.0f);\n}"
572:
573:
574: ;
575: const char expected_erfcl@var174 [@expr1073744342 72 ] =@expr1073744343 "void f ( double x ) {\nstd :: cout << erfcl ( x ) ;\nstd :: cout << 1 ;\n}"
576:
577:
578: ;
579: $if $(@expr1073744344 $!@expr1073744345 $assertEquals $(@expr1073744346 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 579 $, expected_erfcl@var174 $, $tokWithNewlines_ $(@expr1073744347 code_erfcl@var173 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 579 $) $) $) { $return ; }
580: }
581:
582: void simplifyMathFunctions_cos ( ) {
583:
584: const char code_cos@var175 [@expr1073744348 63 ] =@expr1073744349 "void f(int x) {\n std::cout << cos(x);\n std::cout << cos(0L);\n}"
585:
586:
587: ;
588: const char expected_cos@var176 [@expr1073744350 67 ] =@expr1073744351 "void f ( int x ) {\nstd :: cout << cos ( x ) ;\nstd :: cout << 1 ;\n}"
589:
590:
591: ;
592: $if $(@expr1073744352 $!@expr1073744353 $assertEquals $(@expr1073744354 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 592 $, expected_cos@var176 $, $tokWithNewlines_ $(@expr1073744355 code_cos@var175 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 592 $) $) $) { $return ; }
593:
594: const char code_cosf@var177 [@expr1073744356 69 ] =@expr1073744357 "void f(float x) {\n std::cout << cosf(x);\n std::cout << cosf(0.0f);\n}"
595:
596:
597: ;
598: const char expected_cosf@var178 [@expr1073744358 70 ] =@expr1073744359 "void f ( float x ) {\nstd :: cout << cosf ( x ) ;\nstd :: cout << 1 ;\n}"
599:
600:
601: ;
602: $if $(@expr1073744360 $!@expr1073744361 $assertEquals $(@expr1073744362 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 602 $, expected_cosf@var178 $, $tokWithNewlines_ $(@expr1073744363 code_cosf@var177 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 602 $) $) $) { $return ; }
603:
604: const char code_cosl@var179 [@expr1073744364 75 ] =@expr1073744365 "void f(long double x) {\n std::cout << cosl(x);\n std::cout << cosl(0.0f);\n}"
605:
606:
607: ;
608: const char expected_cosl@var180 [@expr1073744366 71 ] =@expr1073744367 "void f ( double x ) {\nstd :: cout << cosl ( x ) ;\nstd :: cout << 1 ;\n}"
609:
610:
611: ;
612: $if $(@expr1073744368 $!@expr1073744369 $assertEquals $(@expr1073744370 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 612 $, expected_cosl@var180 $, $tokWithNewlines_ $(@expr1073744371 code_cosl@var179 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 612 $) $) $) { $return ; }
613: }
614:
615: void simplifyMathFunctions_cosh ( ) {
616:
617: const char code_cosh@var181 [@expr1073744372 65 ] =@expr1073744373 "void f(int x) {\n std::cout << cosh(x);\n std::cout << cosh(0L);\n}"
618:
619:
620: ;
621: const char expected_cosh@var182 [@expr1073744374 68 ] =@expr1073744375 "void f ( int x ) {\nstd :: cout << cosh ( x ) ;\nstd :: cout << 1 ;\n}"
622:
623:
624: ;
625: $if $(@expr1073744376 $!@expr1073744377 $assertEquals $(@expr1073744378 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 625 $, expected_cosh@var182 $, $tokWithNewlines_ $(@expr1073744379 code_cosh@var181 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 625 $) $) $) { $return ; }
626:
627: const char code_coshf@var183 [@expr1073744380 71 ] =@expr1073744381 "void f(float x) {\n std::cout << coshf(x);\n std::cout << coshf(0.0f);\n}"
628:
629:
630: ;
631: const char expected_coshf@var184 [@expr1073744382 71 ] =@expr1073744383 "void f ( float x ) {\nstd :: cout << coshf ( x ) ;\nstd :: cout << 1 ;\n}"
632:
633:
634: ;
635: $if $(@expr1073744384 $!@expr1073744385 $assertEquals $(@expr1073744386 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 635 $, expected_coshf@var184 $, $tokWithNewlines_ $(@expr1073744387 code_coshf@var183 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 635 $) $) $) { $return ; }
636:
637: const char code_coshl@var185 [@expr1073744388 77 ] =@expr1073744389 "void f(long double x) {\n std::cout << coshl(x);\n std::cout << coshl(0.0f);\n}"
638:
639:
640: ;
641: const char expected_coshl@var186 [@expr1073744390 72 ] =@expr1073744391 "void f ( double x ) {\nstd :: cout << coshl ( x ) ;\nstd :: cout << 1 ;\n}"
642:
643:
644: ;
645: $if $(@expr1073744392 $!@expr1073744393 $assertEquals $(@expr1073744394 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 645 $, expected_coshl@var186 $, $tokWithNewlines_ $(@expr1073744395 code_coshl@var185 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 645 $) $) $) { $return ; }
646: }
647:
648: void simplifyMathFunctions_acos ( ) {
649:
650: const char code_acos@var187 [@expr1073744396 65 ] =@expr1073744397 "void f(int x) {\n std::cout << acos(x);\n std::cout << acos(1L);\n}"
651:
652:
653: ;
654: const char expected_acos@var188 [@expr1073744398 68 ] =@expr1073744399 "void f ( int x ) {\nstd :: cout << acos ( x ) ;\nstd :: cout << 0 ;\n}"
655:
656:
657: ;
658: $if $(@expr1073744400 $!@expr1073744401 $assertEquals $(@expr1073744402 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 658 $, expected_acos@var188 $, $tokWithNewlines_ $(@expr1073744403 code_acos@var187 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 658 $) $) $) { $return ; }
659:
660: const char code_acosf@var189 [@expr1073744404 71 ] =@expr1073744405 "void f(float x) {\n std::cout << acosf(x);\n std::cout << acosf(1.0f);\n}"
661:
662:
663: ;
664: const char expected_acosf@var190 [@expr1073744406 71 ] =@expr1073744407 "void f ( float x ) {\nstd :: cout << acosf ( x ) ;\nstd :: cout << 0 ;\n}"
665:
666:
667: ;
668: $if $(@expr1073744408 $!@expr1073744409 $assertEquals $(@expr1073744410 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 668 $, expected_acosf@var190 $, $tokWithNewlines_ $(@expr1073744411 code_acosf@var189 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 668 $) $) $) { $return ; }
669:
670: const char code_acosl@var191 [@expr1073744412 77 ] =@expr1073744413 "void f(long double x) {\n std::cout << acosl(x);\n std::cout << acosl(1.0f);\n}"
671:
672:
673: ;
674: const char expected_acosl@var192 [@expr1073744414 72 ] =@expr1073744415 "void f ( double x ) {\nstd :: cout << acosl ( x ) ;\nstd :: cout << 0 ;\n}"
675:
676:
677: ;
678: $if $(@expr1073744416 $!@expr1073744417 $assertEquals $(@expr1073744418 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 678 $, expected_acosl@var192 $, $tokWithNewlines_ $(@expr1073744419 code_acosl@var191 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 678 $) $) $) { $return ; }
679: }
680:
681: void simplifyMathFunctions_acosh ( ) {
682:
683: const char code_acosh@var193 [@expr1073744420 67 ] =@expr1073744421 "void f(int x) {\n std::cout << acosh(x);\n std::cout << acosh(1L);\n}"
684:
685:
686: ;
687: const char expected_acosh@var194 [@expr1073744422 69 ] =@expr1073744423 "void f ( int x ) {\nstd :: cout << acosh ( x ) ;\nstd :: cout << 0 ;\n}"
688:
689:
690: ;
691: $if $(@expr1073744424 $!@expr1073744425 $assertEquals $(@expr1073744426 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 691 $, expected_acosh@var194 $, $tokWithNewlines_ $(@expr1073744427 code_acosh@var193 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 691 $) $) $) { $return ; }
692:
693: const char code_acoshf@var195 [@expr1073744428 73 ] =@expr1073744429 "void f(float x) {\n std::cout << acoshf(x);\n std::cout << acoshf(1.0f);\n}"
694:
695:
696: ;
697: const char expected_acoshf@var196 [@expr1073744430 72 ] =@expr1073744431 "void f ( float x ) {\nstd :: cout << acoshf ( x ) ;\nstd :: cout << 0 ;\n}"
698:
699:
700: ;
701: $if $(@expr1073744432 $!@expr1073744433 $assertEquals $(@expr1073744434 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 701 $, expected_acoshf@var196 $, $tokWithNewlines_ $(@expr1073744435 code_acoshf@var195 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 701 $) $) $) { $return ; }
702:
703: const char code_acoshl@var197 [@expr1073744436 79 ] =@expr1073744437 "void f(long double x) {\n std::cout << acoshl(x);\n std::cout << acoshl(1.0f);\n}"
704:
705:
706: ;
707: const char expected_acoshl@var198 [@expr1073744438 73 ] =@expr1073744439 "void f ( double x ) {\nstd :: cout << acoshl ( x ) ;\nstd :: cout << 0 ;\n}"
708:
709:
710: ;
711: $if $(@expr1073744440 $!@expr1073744441 $assertEquals $(@expr1073744442 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 711 $, expected_acoshl@var198 $, $tokWithNewlines_ $(@expr1073744443 code_acoshl@var197 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 711 $) $) $) { $return ; }
712: }
713:
714: void simplifyMathFunctions_sqrt ( ) {
715:
716: const char code_sqrt@var199 [@expr1073744444 113 ] =@expr1073744445 "void f(int x) {\n std::cout << sqrt(x);\n std::cout << sqrt(-1);\n std::cout << sqrt(0L);\n std::cout << sqrt(1L);\n}"
717:
|
720:
721: ;
722: const char expected_sqrt@var200 [@expr1073744446 116 ] =@expr1073744447 "void f ( int x ) {\nstd :: cout << sqrt ( x ) ;\nstd :: cout << sqrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
723:
|
726:
727: ;
728: $if $(@expr1073744448 $!@expr1073744449 $assertEquals $(@expr1073744450 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 728 $, expected_sqrt@var200 $, $tokWithNewlines_ $(@expr1073744451 code_sqrt@var199 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 728 $) $) $) { $return ; }
729:
730: const char code_sqrtf@var201 [@expr1073744452 125 ] =@expr1073744453 "void f(float x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0f);\n std::cout << sqrtf(0.0f);\n std::cout << sqrtf(1.0);\n}"
731:
|
734:
735: ;
736: const char expected_sqrtf@var202 [@expr1073744454 123 ] =@expr1073744455 "void f ( float x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
737:
|
740:
741: ;
742: $if $(@expr1073744456 $!@expr1073744457 $assertEquals $(@expr1073744458 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 742 $, expected_sqrtf@var202 $, $tokWithNewlines_ $(@expr1073744459 code_sqrtf@var201 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 742 $) $) $) { $return ; }
743:
744: const char code_sqrtl@var203 [@expr1073744460 129 ] =@expr1073744461 "void f(long double x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0);\n std::cout << sqrtf(0.0);\n std::cout << sqrtf(1.0);\n}"
745:
|
748:
749: ;
750: const char expected_sqrtl@var204 [@expr1073744462 123 ] =@expr1073744463 "void f ( double x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
751:
|
754:
755: ;
756: $if $(@expr1073744464 $!@expr1073744465 $assertEquals $(@expr1073744466 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 756 $, expected_sqrtl@var204 $, $tokWithNewlines_ $(@expr1073744467 code_sqrtl@var203 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 756 $) $) $) { $return ; }
757: }
758:
759: void simplifyMathFunctions_cbrt ( ) {
760:
761: const char code_cbrt@var205 [@expr1073744468 113 ] =@expr1073744469 "void f(int x) {\n std::cout << cbrt(x);\n std::cout << cbrt(-1);\n std::cout << cbrt(0L);\n std::cout << cbrt(1L);\n}"
762:
|
765:
766: ;
767: const char expected_cbrt@var206 [@expr1073744470 116 ] =@expr1073744471 "void f ( int x ) {\nstd :: cout << cbrt ( x ) ;\nstd :: cout << cbrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
768:
|
771:
772: ;
773: $if $(@expr1073744472 $!@expr1073744473 $assertEquals $(@expr1073744474 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 773 $, expected_cbrt@var206 $, $tokWithNewlines_ $(@expr1073744475 code_cbrt@var205 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 773 $) $) $) { $return ; }
774:
775: const char code_cbrtf@var207 [@expr1073744476 125 ] =@expr1073744477 "void f(float x) {\n std::cout << cbrtf(x);\n std::cout << cbrtf(-1.0f);\n std::cout << cbrtf(0.0f);\n std::cout << cbrtf(1.0);\n}"
776:
|
779:
780: ;
781: const char expected_cbrtf@var208 [@expr1073744478 123 ] =@expr1073744479 "void f ( float x ) {\nstd :: cout << cbrtf ( x ) ;\nstd :: cout << cbrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
782:
|
785:
786: ;
787: $if $(@expr1073744480 $!@expr1073744481 $assertEquals $(@expr1073744482 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 787 $, expected_cbrtf@var208 $, $tokWithNewlines_ $(@expr1073744483 code_cbrtf@var207 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 787 $) $) $) { $return ; }
788:
789: const char code_cbrtl@var209 [@expr1073744484 129 ] =@expr1073744485 "void f(long double x) {\n std::cout << cbrtl(x);\n std::cout << cbrtl(-1.0);\n std::cout << cbrtl(0.0);\n std::cout << cbrtl(1.0);\n}"
790:
|
793:
794: ;
795: const char expected_cbrtl@var210 [@expr1073744486 123 ] =@expr1073744487 "void f ( double x ) {\nstd :: cout << cbrtl ( x ) ;\nstd :: cout << cbrtl ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
796:
|
799:
800: ;
801: $if $(@expr1073744488 $!@expr1073744489 $assertEquals $(@expr1073744490 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 801 $, expected_cbrtl@var210 $, $tokWithNewlines_ $(@expr1073744491 code_cbrtl@var209 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 801 $) $) $) { $return ; }
802: }
803:
804: void simplifyMathFunctions_exp2 ( ) {
805:
806: const char code_exp2@var211 [@expr1073744492 113 ] =@expr1073744493 "void f(int x) {\n std::cout << exp2(x);\n std::cout << exp2(-1);\n std::cout << exp2(0L);\n std::cout << exp2(1L);\n}"
807:
|
810:
811: ;
812: const char expected_exp2@var212 [@expr1073744494 126 ] =@expr1073744495 "void f ( int x ) {\nstd :: cout << exp2 ( x ) ;\nstd :: cout << exp2 ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2 ( 1L ) ;\n}"
813:
|
816:
817: ;
818: $if $(@expr1073744496 $!@expr1073744497 $assertEquals $(@expr1073744498 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 818 $, expected_exp2@var212 $, $tokWithNewlines_ $(@expr1073744499 code_exp2@var211 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 818 $) $) $) { $return ; }
819:
820: const char code_exp2f@var213 [@expr1073744500 123 ] =@expr1073744501 "void f(float x) {\n std::cout << exp2f(x);\n std::cout << exp2f(-1.0);\n std::cout << exp2f(0.0);\n std::cout << exp2f(1.0);\n}"
821:
|
824:
825: ;
826: const char expected_exp2f@var214 [@expr1073744502 134 ] =@expr1073744503 "void f ( float x ) {\nstd :: cout << exp2f ( x ) ;\nstd :: cout << exp2f ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2f ( 1.0 ) ;\n}"
827:
|
830:
831: ;
832: $if $(@expr1073744504 $!@expr1073744505 $assertEquals $(@expr1073744506 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 832 $, expected_exp2f@var214 $, $tokWithNewlines_ $(@expr1073744507 code_exp2f@var213 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 832 $) $) $) { $return ; }
833:
834: const char code_exp2l@var215 [@expr1073744508 129 ] =@expr1073744509 "void f(long double x) {\n std::cout << exp2l(x);\n std::cout << exp2l(-1.0);\n std::cout << exp2l(0.0);\n std::cout << exp2l(1.0);\n}"
835:
|
838:
839: ;
840: const char expected_exp2l@var216 [@expr1073744510 135 ] =@expr1073744511 "void f ( double x ) {\nstd :: cout << exp2l ( x ) ;\nstd :: cout << exp2l ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2l ( 1.0 ) ;\n}"
841:
|
844:
845: ;
846: $if $(@expr1073744512 $!@expr1073744513 $assertEquals $(@expr1073744514 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 846 $, expected_exp2l@var216 $, $tokWithNewlines_ $(@expr1073744515 code_exp2l@var215 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 846 $) $) $) { $return ; }
847: }
848:
849: void simplifyMathFunctions_exp ( ) {
850:
851: const char code_exp@var217 [@expr1073744516 109 ] =@expr1073744517 "void f(int x) {\n std::cout << exp(x);\n std::cout << exp(-1);\n std::cout << exp(0L);\n std::cout << exp(1L);\n}"
852:
|
855:
856: ;
857: const char expected_exp@var218 [@expr1073744518 123 ] =@expr1073744519 "void f ( int x ) {\nstd :: cout << exp ( x ) ;\nstd :: cout << exp ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp ( 1L ) ;\n}"
858:
|
861:
862: ;
863: $if $(@expr1073744520 $!@expr1073744521 $assertEquals $(@expr1073744522 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 863 $, expected_exp@var218 $, $tokWithNewlines_ $(@expr1073744523 code_exp@var217 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 863 $) $) $) { $return ; }
864:
865: const char code_expf@var219 [@expr1073744524 119 ] =@expr1073744525 "void f(float x) {\n std::cout << expf(x);\n std::cout << expf(-1.0);\n std::cout << expf(0.0);\n std::cout << expf(1.0);\n}"
866:
|
869:
870: ;
871: const char expected_expf@var220 [@expr1073744526 131 ] =@expr1073744527 "void f ( float x ) {\nstd :: cout << expf ( x ) ;\nstd :: cout << expf ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expf ( 1.0 ) ;\n}"
872:
|
875:
876: ;
877: $if $(@expr1073744528 $!@expr1073744529 $assertEquals $(@expr1073744530 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 877 $, expected_expf@var220 $, $tokWithNewlines_ $(@expr1073744531 code_expf@var219 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 877 $) $) $) { $return ; }
878:
879: const char code_expl@var221 [@expr1073744532 125 ] =@expr1073744533 "void f(long double x) {\n std::cout << expl(x);\n std::cout << expl(-1.0);\n std::cout << expl(0.0);\n std::cout << expl(1.0);\n}"
880:
|
883:
884: ;
885: const char expected_expl@var222 [@expr1073744534 132 ] =@expr1073744535 "void f ( double x ) {\nstd :: cout << expl ( x ) ;\nstd :: cout << expl ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expl ( 1.0 ) ;\n}"
886:
|
889:
890: ;
891: $if $(@expr1073744536 $!@expr1073744537 $assertEquals $(@expr1073744538 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 891 $, expected_expl@var222 $, $tokWithNewlines_ $(@expr1073744539 code_expl@var221 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 891 $) $) $) { $return ; }
892: }
893:
894: void simplifyMathFunctions_erf ( ) {
895:
896: const char code_erf@var223 [@expr1073744540 86 ] =@expr1073744541 "void f(int x) {\n std::cout << erf(x);\n std::cout << erf(10);\n std::cout << erf(0L);\n}"
897:
898:
899:
900: ;
901: const char expected_erf@var224 [@expr1073744542 95 ] =@expr1073744543 "void f ( int x ) {\nstd :: cout << erf ( x ) ;\nstd :: cout << erf ( 10 ) ;\nstd :: cout << 0 ;\n}"
902:
903:
904:
905: ;
906: $if $(@expr1073744544 $!@expr1073744545 $assertEquals $(@expr1073744546 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 906 $, expected_erf@var224 $, $tokWithNewlines_ $(@expr1073744547 code_erf@var223 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 906 $) $) $) { $return ; }
907:
908: const char code_erff@var225 [@expr1073744548 93 ] =@expr1073744549 "void f(float x) {\n std::cout << erff(x);\n std::cout << erff(10);\n std::cout << erff(0.0f);\n}"
909:
910:
911:
912: ;
913: const char expected_erff@var226 [@expr1073744550 99 ] =@expr1073744551 "void f ( float x ) {\nstd :: cout << erff ( x ) ;\nstd :: cout << erff ( 10 ) ;\nstd :: cout << 0 ;\n}"
914:
915:
916:
917: ;
918: $if $(@expr1073744552 $!@expr1073744553 $assertEquals $(@expr1073744554 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 918 $, expected_erff@var226 $, $tokWithNewlines_ $(@expr1073744555 code_erff@var225 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 918 $) $) $) { $return ; }
919:
920: const char code_erfl@var227 [@expr1073744556 102 ] =@expr1073744557 "void f(long double x) {\n std::cout << erfl(x);\n std::cout << erfl(10.0f);\n std::cout << erfl(0.0f);\n}"
921:
922:
923:
924: ;
925: const char expected_erfl@var228 [@expr1073744558 103 ] =@expr1073744559 "void f ( double x ) {\nstd :: cout << erfl ( x ) ;\nstd :: cout << erfl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
926:
927:
928:
929: ;
930: $if $(@expr1073744560 $!@expr1073744561 $assertEquals $(@expr1073744562 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 930 $, expected_erfl@var228 $, $tokWithNewlines_ $(@expr1073744563 code_erfl@var227 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 930 $) $) $) { $return ; }
931: }
932:
933: void simplifyMathFunctions_atanh ( ) {
934:
935: const char code_atanh@var229 [@expr1073744564 92 ] =@expr1073744565 "void f(int x) {\n std::cout << atanh(x);\n std::cout << atanh(10);\n std::cout << atanh(0L);\n}"
936:
937:
938:
939: ;
940: const char expected_atanh@var230 [@expr1073744566 99 ] =@expr1073744567 "void f ( int x ) {\nstd :: cout << atanh ( x ) ;\nstd :: cout << atanh ( 10 ) ;\nstd :: cout << 0 ;\n}"
941:
942:
943:
944: ;
945: $if $(@expr1073744568 $!@expr1073744569 $assertEquals $(@expr1073744570 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 945 $, expected_atanh@var230 $, $tokWithNewlines_ $(@expr1073744571 code_atanh@var229 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 945 $) $) $) { $return ; }
946:
947: const char code_atanhf@var231 [@expr1073744572 99 ] =@expr1073744573 "void f(float x) {\n std::cout << atanhf(x);\n std::cout << atanhf(10);\n std::cout << atanhf(0.0f);\n}"
948:
949:
950:
951: ;
952: const char expected_atanhf@var232 [@expr1073744574 103 ] =@expr1073744575 "void f ( float x ) {\nstd :: cout << atanhf ( x ) ;\nstd :: cout << atanhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
953:
954:
955:
956: ;
957: $if $(@expr1073744576 $!@expr1073744577 $assertEquals $(@expr1073744578 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 957 $, expected_atanhf@var232 $, $tokWithNewlines_ $(@expr1073744579 code_atanhf@var231 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 957 $) $) $) { $return ; }
958:
959: const char code_atanhl@var233 [@expr1073744580 136 ] =@expr1073744581 "void f(long double x) {\n std::cout << atanhl(x);\n std::cout << atanhl(10.0f);\n std::cout << atanhl(0.0d);\n std::cout << atanhl(0.0f);\n}"
960:
|
963:
964: ;
965: const char expected_atanhl@var234 [@expr1073744582 140 ] =@expr1073744583 "void f ( double x ) {\nstd :: cout << atanhl ( x ) ;\nstd :: cout << atanhl ( 10.0f ) ;\nstd :: cout << atanhl ( 0.0d ) ;\nstd :: cout << 0 ;\n}"
966:
|
969:
970: ;
971: $if $(@expr1073744584 $!@expr1073744585 $assertEquals $(@expr1073744586 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 971 $, expected_atanhl@var234 $, $tokWithNewlines_ $(@expr1073744587 code_atanhl@var233 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 971 $) $) $) { $return ; }
972: }
973:
974: void simplifyMathFunctions_atan ( ) {
975:
976: const char code_atan@var235 [@expr1073744588 89 ] =@expr1073744589 "void f(int x) {\n std::cout << atan(x);\n std::cout << atan(10);\n std::cout << atan(0L);\n}"
977:
978:
979:
980: ;
981: const char expected_atan@var236 [@expr1073744590 97 ] =@expr1073744591 "void f ( int x ) {\nstd :: cout << atan ( x ) ;\nstd :: cout << atan ( 10 ) ;\nstd :: cout << 0 ;\n}"
982:
983:
984:
985: ;
986: $if $(@expr1073744592 $!@expr1073744593 $assertEquals $(@expr1073744594 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 986 $, expected_atan@var236 $, $tokWithNewlines_ $(@expr1073744595 code_atan@var235 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 986 $) $) $) { $return ; }
987:
988: const char code_atanf@var237 [@expr1073744596 96 ] =@expr1073744597 "void f(float x) {\n std::cout << atanf(x);\n std::cout << atanf(10);\n std::cout << atanf(0.0f);\n}"
989:
990:
991:
992: ;
993: const char expected_atanf@var238 [@expr1073744598 101 ] =@expr1073744599 "void f ( float x ) {\nstd :: cout << atanf ( x ) ;\nstd :: cout << atanf ( 10 ) ;\nstd :: cout << 0 ;\n}"
994:
995:
996:
997: ;
998: $if $(@expr1073744600 $!@expr1073744601 $assertEquals $(@expr1073744602 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 998 $, expected_atanf@var238 $, $tokWithNewlines_ $(@expr1073744603 code_atanf@var237 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 998 $) $) $) { $return ; }
999:
1000: const char code_atanl@var239 [@expr1073744604 105 ] =@expr1073744605 "void f(long double x) {\n std::cout << atanl(x);\n std::cout << atanl(10.0f);\n std::cout << atanl(0.0f);\n}"
1001:
1002:
1003:
1004: ;
1005: const char expected_atanl@var240 [@expr1073744606 105 ] =@expr1073744607 "void f ( double x ) {\nstd :: cout << atanl ( x ) ;\nstd :: cout << atanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1006:
1007:
1008:
1009: ;
1010: $if $(@expr1073744608 $!@expr1073744609 $assertEquals $(@expr1073744610 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1010 $, expected_atanl@var240 $, $tokWithNewlines_ $(@expr1073744611 code_atanl@var239 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1010 $) $) $) { $return ; }
1011: }
1012:
1013: void simplifyMathFunctions_tanh ( ) {
1014:
1015: const char code_tanh@var241 [@expr1073744612 89 ] =@expr1073744613 "void f(int x) {\n std::cout << tanh(x);\n std::cout << tanh(10);\n std::cout << tanh(0L);\n}"
1016:
1017:
1018:
1019: ;
1020: const char expected_tanh@var242 [@expr1073744614 97 ] =@expr1073744615 "void f ( int x ) {\nstd :: cout << tanh ( x ) ;\nstd :: cout << tanh ( 10 ) ;\nstd :: cout << 0 ;\n}"
1021:
1022:
1023:
1024: ;
1025: $if $(@expr1073744616 $!@expr1073744617 $assertEquals $(@expr1073744618 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1025 $, expected_tanh@var242 $, $tokWithNewlines_ $(@expr1073744619 code_tanh@var241 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1025 $) $) $) { $return ; }
1026:
1027: const char code_tanhf@var243 [@expr1073744620 96 ] =@expr1073744621 "void f(float x) {\n std::cout << tanhf(x);\n std::cout << tanhf(10);\n std::cout << tanhf(0.0f);\n}"
1028:
1029:
1030:
1031: ;
1032: const char expected_tanhf@var244 [@expr1073744622 101 ] =@expr1073744623 "void f ( float x ) {\nstd :: cout << tanhf ( x ) ;\nstd :: cout << tanhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1033:
1034:
1035:
1036: ;
1037: $if $(@expr1073744624 $!@expr1073744625 $assertEquals $(@expr1073744626 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1037 $, expected_tanhf@var244 $, $tokWithNewlines_ $(@expr1073744627 code_tanhf@var243 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1037 $) $) $) { $return ; }
1038:
1039: const char code_tanhl@var245 [@expr1073744628 105 ] =@expr1073744629 "void f(long double x) {\n std::cout << tanhl(x);\n std::cout << tanhl(10.0f);\n std::cout << tanhl(0.0f);\n}"
1040:
1041:
1042:
1043: ;
1044: const char expected_tanhl@var246 [@expr1073744630 105 ] =@expr1073744631 "void f ( double x ) {\nstd :: cout << tanhl ( x ) ;\nstd :: cout << tanhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1045:
1046:
1047:
1048: ;
1049: $if $(@expr1073744632 $!@expr1073744633 $assertEquals $(@expr1073744634 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1049 $, expected_tanhl@var246 $, $tokWithNewlines_ $(@expr1073744635 code_tanhl@var245 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1049 $) $) $) { $return ; }
1050: }
1051:
1052: void simplifyMathFunctions_tan ( ) {
1053:
1054: const char code_tan@var247 [@expr1073744636 86 ] =@expr1073744637 "void f(int x) {\n std::cout << tan(x);\n std::cout << tan(10);\n std::cout << tan(0L);\n}"
1055:
1056:
1057:
1058: ;
1059: const char expected_tan@var248 [@expr1073744638 95 ] =@expr1073744639 "void f ( int x ) {\nstd :: cout << tan ( x ) ;\nstd :: cout << tan ( 10 ) ;\nstd :: cout << 0 ;\n}"
1060:
1061:
1062:
1063: ;
1064: $if $(@expr1073744640 $!@expr1073744641 $assertEquals $(@expr1073744642 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1064 $, expected_tan@var248 $, $tokWithNewlines_ $(@expr1073744643 code_tan@var247 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1064 $) $) $) { $return ; }
1065:
1066: const char code_tanf@var249 [@expr1073744644 93 ] =@expr1073744645 "void f(float x) {\n std::cout << tanf(x);\n std::cout << tanf(10);\n std::cout << tanf(0.0f);\n}"
1067:
1068:
1069:
1070: ;
1071: const char expected_tanf@var250 [@expr1073744646 99 ] =@expr1073744647 "void f ( float x ) {\nstd :: cout << tanf ( x ) ;\nstd :: cout << tanf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1072:
1073:
1074:
1075: ;
1076: $if $(@expr1073744648 $!@expr1073744649 $assertEquals $(@expr1073744650 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1076 $, expected_tanf@var250 $, $tokWithNewlines_ $(@expr1073744651 code_tanf@var249 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1076 $) $) $) { $return ; }
1077:
1078: const char code_tanl@var251 [@expr1073744652 102 ] =@expr1073744653 "void f(long double x) {\n std::cout << tanl(x);\n std::cout << tanl(10.0f);\n std::cout << tanl(0.0f);\n}"
1079:
1080:
1081:
1082: ;
1083: const char expected_tanl@var252 [@expr1073744654 103 ] =@expr1073744655 "void f ( double x ) {\nstd :: cout << tanl ( x ) ;\nstd :: cout << tanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1084:
1085:
1086:
1087: ;
1088: $if $(@expr1073744656 $!@expr1073744657 $assertEquals $(@expr1073744658 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1088 $, expected_tanl@var252 $, $tokWithNewlines_ $(@expr1073744659 code_tanl@var251 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1088 $) $) $) { $return ; }
1089: }
1090:
1091: void simplifyMathFunctions_expm1 ( ) {
1092:
1093: const char code_expm1@var253 [@expr1073744660 92 ] =@expr1073744661 "void f(int x) {\n std::cout << expm1(x);\n std::cout << expm1(10);\n std::cout << expm1(0L);\n}"
1094:
1095:
1096:
1097: ;
1098: const char expected_expm1@var254 [@expr1073744662 99 ] =@expr1073744663 "void f ( int x ) {\nstd :: cout << expm1 ( x ) ;\nstd :: cout << expm1 ( 10 ) ;\nstd :: cout << 0 ;\n}"
1099:
1100:
1101:
1102: ;
1103: $if $(@expr1073744664 $!@expr1073744665 $assertEquals $(@expr1073744666 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1103 $, expected_expm1@var254 $, $tokWithNewlines_ $(@expr1073744667 code_expm1@var253 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1103 $) $) $) { $return ; }
1104:
1105: const char code_expm1f@var255 [@expr1073744668 99 ] =@expr1073744669 "void f(float x) {\n std::cout << expm1f(x);\n std::cout << expm1f(10);\n std::cout << expm1f(0.0f);\n}"
1106:
1107:
1108:
1109: ;
1110: const char expected_expm1f@var256 [@expr1073744670 103 ] =@expr1073744671 "void f ( float x ) {\nstd :: cout << expm1f ( x ) ;\nstd :: cout << expm1f ( 10 ) ;\nstd :: cout << 0 ;\n}"
1111:
1112:
1113:
1114: ;
1115: $if $(@expr1073744672 $!@expr1073744673 $assertEquals $(@expr1073744674 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1115 $, expected_expm1f@var256 $, $tokWithNewlines_ $(@expr1073744675 code_expm1f@var255 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1115 $) $) $) { $return ; }
1116:
1117: const char code_expm1l@var257 [@expr1073744676 108 ] =@expr1073744677 "void f(long double x) {\n std::cout << expm1l(x);\n std::cout << expm1l(10.0f);\n std::cout << expm1l(0.0f);\n}"
1118:
1119:
1120:
1121: ;
1122: const char expected_expm1l@var258 [@expr1073744678 107 ] =@expr1073744679 "void f ( double x ) {\nstd :: cout << expm1l ( x ) ;\nstd :: cout << expm1l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1123:
1124:
1125:
1126: ;
1127: $if $(@expr1073744680 $!@expr1073744681 $assertEquals $(@expr1073744682 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1127 $, expected_expm1l@var258 $, $tokWithNewlines_ $(@expr1073744683 code_expm1l@var257 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1127 $) $) $) { $return ; }
1128: }
1129:
1130: void simplifyMathFunctions_asinh ( ) {
1131:
1132: const char code_asinh@var259 [@expr1073744684 92 ] =@expr1073744685 "void f(int x) {\n std::cout << asinh(x);\n std::cout << asinh(10);\n std::cout << asinh(0L);\n}"
1133:
1134:
1135:
1136: ;
1137: const char expected_asinh@var260 [@expr1073744686 99 ] =@expr1073744687 "void f ( int x ) {\nstd :: cout << asinh ( x ) ;\nstd :: cout << asinh ( 10 ) ;\nstd :: cout << 0 ;\n}"
1138:
1139:
1140:
1141: ;
1142: $if $(@expr1073744688 $!@expr1073744689 $assertEquals $(@expr1073744690 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1142 $, expected_asinh@var260 $, $tokWithNewlines_ $(@expr1073744691 code_asinh@var259 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1142 $) $) $) { $return ; }
1143:
1144: const char code_asinhf@var261 [@expr1073744692 99 ] =@expr1073744693 "void f(float x) {\n std::cout << asinhf(x);\n std::cout << asinhf(10);\n std::cout << asinhf(0.0f);\n}"
1145:
1146:
1147:
1148: ;
1149: const char expected_asinhf@var262 [@expr1073744694 103 ] =@expr1073744695 "void f ( float x ) {\nstd :: cout << asinhf ( x ) ;\nstd :: cout << asinhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1150:
1151:
1152:
1153: ;
1154: $if $(@expr1073744696 $!@expr1073744697 $assertEquals $(@expr1073744698 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1154 $, expected_asinhf@var262 $, $tokWithNewlines_ $(@expr1073744699 code_asinhf@var261 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1154 $) $) $) { $return ; }
1155:
1156: const char code_asinhl@var263 [@expr1073744700 108 ] =@expr1073744701 "void f(long double x) {\n std::cout << asinhl(x);\n std::cout << asinhl(10.0f);\n std::cout << asinhl(0.0f);\n}"
1157:
1158:
1159:
1160: ;
1161: const char expected_asinhl@var264 [@expr1073744702 107 ] =@expr1073744703 "void f ( double x ) {\nstd :: cout << asinhl ( x ) ;\nstd :: cout << asinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1162:
1163:
1164:
1165: ;
1166: $if $(@expr1073744704 $!@expr1073744705 $assertEquals $(@expr1073744706 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1166 $, expected_asinhl@var264 $, $tokWithNewlines_ $(@expr1073744707 code_asinhl@var263 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1166 $) $) $) { $return ; }
1167: }
1168:
1169: void simplifyMathFunctions_asin ( ) {
1170:
1171: const char code_asin@var265 [@expr1073744708 89 ] =@expr1073744709 "void f(int x) {\n std::cout << asin(x);\n std::cout << asin(10);\n std::cout << asin(0L);\n}"
1172:
1173:
1174:
1175: ;
1176: const char expected_asin@var266 [@expr1073744710 97 ] =@expr1073744711 "void f ( int x ) {\nstd :: cout << asin ( x ) ;\nstd :: cout << asin ( 10 ) ;\nstd :: cout << 0 ;\n}"
1177:
1178:
1179:
1180: ;
1181: $if $(@expr1073744712 $!@expr1073744713 $assertEquals $(@expr1073744714 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1181 $, expected_asin@var266 $, $tokWithNewlines_ $(@expr1073744715 code_asin@var265 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1181 $) $) $) { $return ; }
1182:
1183: const char code_asinf@var267 [@expr1073744716 96 ] =@expr1073744717 "void f(float x) {\n std::cout << asinf(x);\n std::cout << asinf(10);\n std::cout << asinf(0.0f);\n}"
1184:
1185:
1186:
1187: ;
1188: const char expected_asinf@var268 [@expr1073744718 101 ] =@expr1073744719 "void f ( float x ) {\nstd :: cout << asinf ( x ) ;\nstd :: cout << asinf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1189:
1190:
1191:
1192: ;
1193: $if $(@expr1073744720 $!@expr1073744721 $assertEquals $(@expr1073744722 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1193 $, expected_asinf@var268 $, $tokWithNewlines_ $(@expr1073744723 code_asinf@var267 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1193 $) $) $) { $return ; }
1194:
1195: const char code_asinl@var269 [@expr1073744724 105 ] =@expr1073744725 "void f(long double x) {\n std::cout << asinl(x);\n std::cout << asinl(10.0f);\n std::cout << asinl(0.0f);\n}"
1196:
1197:
1198:
1199: ;
1200: const char expected_asinl@var270 [@expr1073744726 105 ] =@expr1073744727 "void f ( double x ) {\nstd :: cout << asinl ( x ) ;\nstd :: cout << asinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1201:
1202:
1203:
1204: ;
1205: $if $(@expr1073744728 $!@expr1073744729 $assertEquals $(@expr1073744730 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1205 $, expected_asinl@var270 $, $tokWithNewlines_ $(@expr1073744731 code_asinl@var269 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1205 $) $) $) { $return ; }
1206: }
1207:
1208: void simplifyMathFunctions_sinh ( ) {
1209:
1210: const char code_sinh@var271 [@expr1073744732 89 ] =@expr1073744733 "void f(int x) {\n std::cout << sinh(x);\n std::cout << sinh(10);\n std::cout << sinh(0L);\n}"
1211:
1212:
1213:
1214: ;
1215: const char expected_sinh@var272 [@expr1073744734 97 ] =@expr1073744735 "void f ( int x ) {\nstd :: cout << sinh ( x ) ;\nstd :: cout << sinh ( 10 ) ;\nstd :: cout << 0 ;\n}"
1216:
1217:
1218:
1219: ;
1220: $if $(@expr1073744736 $!@expr1073744737 $assertEquals $(@expr1073744738 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1220 $, expected_sinh@var272 $, $tokWithNewlines_ $(@expr1073744739 code_sinh@var271 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1220 $) $) $) { $return ; }
1221:
1222: const char code_sinhf@var273 [@expr1073744740 96 ] =@expr1073744741 "void f(float x) {\n std::cout << sinhf(x);\n std::cout << sinhf(10);\n std::cout << sinhf(0.0f);\n}"
1223:
1224:
1225:
1226: ;
1227: const char expected_sinhf@var274 [@expr1073744742 101 ] =@expr1073744743 "void f ( float x ) {\nstd :: cout << sinhf ( x ) ;\nstd :: cout << sinhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1228:
1229:
1230:
1231: ;
1232: $if $(@expr1073744744 $!@expr1073744745 $assertEquals $(@expr1073744746 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1232 $, expected_sinhf@var274 $, $tokWithNewlines_ $(@expr1073744747 code_sinhf@var273 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1232 $) $) $) { $return ; }
1233:
1234: const char code_sinhl@var275 [@expr1073744748 105 ] =@expr1073744749 "void f(long double x) {\n std::cout << sinhl(x);\n std::cout << sinhl(10.0f);\n std::cout << sinhl(0.0f);\n}"
1235:
1236:
1237:
1238: ;
1239: const char expected_sinhl@var276 [@expr1073744750 105 ] =@expr1073744751 "void f ( double x ) {\nstd :: cout << sinhl ( x ) ;\nstd :: cout << sinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1240:
1241:
1242:
1243: ;
1244: $if $(@expr1073744752 $!@expr1073744753 $assertEquals $(@expr1073744754 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1244 $, expected_sinhl@var276 $, $tokWithNewlines_ $(@expr1073744755 code_sinhl@var275 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1244 $) $) $) { $return ; }
1245: }
1246:
1247: void simplifyMathFunctions_sin ( ) {
1248:
1249: const char code_sin@var277 [@expr1073744756 86 ] =@expr1073744757 "void f(int x) {\n std::cout << sin(x);\n std::cout << sin(10);\n std::cout << sin(0L);\n}"
1250:
1251:
1252:
1253: ;
1254: const char expected_sin@var278 [@expr1073744758 95 ] =@expr1073744759 "void f ( int x ) {\nstd :: cout << sin ( x ) ;\nstd :: cout << sin ( 10 ) ;\nstd :: cout << 0 ;\n}"
1255:
1256:
1257:
1258: ;
1259: $if $(@expr1073744760 $!@expr1073744761 $assertEquals $(@expr1073744762 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1259 $, expected_sin@var278 $, $tokWithNewlines_ $(@expr1073744763 code_sin@var277 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1259 $) $) $) { $return ; }
1260:
1261: const char code_sinf@var279 [@expr1073744764 93 ] =@expr1073744765 "void f(float x) {\n std::cout << sinf(x);\n std::cout << sinf(10);\n std::cout << sinf(0.0f);\n}"
1262:
1263:
1264:
1265: ;
1266: const char expected_sinf@var280 [@expr1073744766 99 ] =@expr1073744767 "void f ( float x ) {\nstd :: cout << sinf ( x ) ;\nstd :: cout << sinf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1267:
1268:
1269:
1270: ;
1271: $if $(@expr1073744768 $!@expr1073744769 $assertEquals $(@expr1073744770 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1271 $, expected_sinf@var280 $, $tokWithNewlines_ $(@expr1073744771 code_sinf@var279 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1271 $) $) $) { $return ; }
1272:
1273: const char code_sinl@var281 [@expr1073744772 102 ] =@expr1073744773 "void f(long double x) {\n std::cout << sinl(x);\n std::cout << sinl(10.0f);\n std::cout << sinl(0.0f);\n}"
1274:
1275:
1276:
1277: ;
1278: const char expected_sinl@var282 [@expr1073744774 103 ] =@expr1073744775 "void f ( double x ) {\nstd :: cout << sinl ( x ) ;\nstd :: cout << sinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1279:
1280:
1281:
1282: ;
1283: $if $(@expr1073744776 $!@expr1073744777 $assertEquals $(@expr1073744778 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1283 $, expected_sinl@var282 $, $tokWithNewlines_ $(@expr1073744779 code_sinl@var281 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1283 $) $) $) { $return ; }
1284:
1285:
1286: const char code@var283 [@expr1073744780 44 ] =@expr1073744781 "class Foo { int sinf; Foo() : sinf(0) {} };" ;
1287: const char expected@var284 [@expr1073744782 52 ] =@expr1073744783 "class Foo { int sinf ; Foo ( ) : sinf ( 0 ) { } } ;" ;
1288: $if $(@expr1073744784 $!@expr1073744785 $assertEquals $(@expr1073744786 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1288 $, expected@var284 $, $tokWithNewlines_ $(@expr1073744787 code@var283 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1288 $) $) $) { $return ; }
1289: }
1290:
1291: void simplifyMathFunctions_ilogb ( ) {
1292:
1293: const char code_ilogb@var285 [@expr1073744788 92 ] =@expr1073744789 "void f(int x) {\n std::cout << ilogb(x);\n std::cout << ilogb(10);\n std::cout << ilogb(1L);\n}"
1294:
1295:
1296:
1297: ;
1298: const char expected_ilogb@var286 [@expr1073744790 99 ] =@expr1073744791 "void f ( int x ) {\nstd :: cout << ilogb ( x ) ;\nstd :: cout << ilogb ( 10 ) ;\nstd :: cout << 0 ;\n}"
1299:
1300:
1301:
1302: ;
1303: $if $(@expr1073744792 $!@expr1073744793 $assertEquals $(@expr1073744794 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1303 $, expected_ilogb@var286 $, $tokWithNewlines_ $(@expr1073744795 code_ilogb@var285 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1303 $) $) $) { $return ; }
1304:
1305: const char code_ilogbf@var287 [@expr1073744796 99 ] =@expr1073744797 "void f(float x) {\n std::cout << ilogbf(x);\n std::cout << ilogbf(10);\n std::cout << ilogbf(1.0f);\n}"
1306:
1307:
1308:
1309: ;
1310: const char expected_ilogbf@var288 [@expr1073744798 103 ] =@expr1073744799 "void f ( float x ) {\nstd :: cout << ilogbf ( x ) ;\nstd :: cout << ilogbf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1311:
1312:
1313:
1314: ;
1315: $if $(@expr1073744800 $!@expr1073744801 $assertEquals $(@expr1073744802 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1315 $, expected_ilogbf@var288 $, $tokWithNewlines_ $(@expr1073744803 code_ilogbf@var287 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1315 $) $) $) { $return ; }
1316:
1317: const char code_ilogbl@var289 [@expr1073744804 108 ] =@expr1073744805 "void f(long double x) {\n std::cout << ilogbl(x);\n std::cout << ilogbl(10.0f);\n std::cout << ilogbl(1.0f);\n}"
1318:
1319:
1320:
1321: ;
1322: const char expected_ilogbl@var290 [@expr1073744806 107 ] =@expr1073744807 "void f ( double x ) {\nstd :: cout << ilogbl ( x ) ;\nstd :: cout << ilogbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1323:
1324:
1325:
1326: ;
1327: $if $(@expr1073744808 $!@expr1073744809 $assertEquals $(@expr1073744810 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1327 $, expected_ilogbl@var290 $, $tokWithNewlines_ $(@expr1073744811 code_ilogbl@var289 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1327 $) $) $) { $return ; }
1328: }
1329:
1330: void simplifyMathFunctions_logb ( ) {
1331:
1332: const char code_logb@var291 [@expr1073744812 89 ] =@expr1073744813 "void f(int x) {\n std::cout << logb(x);\n std::cout << logb(10);\n std::cout << logb(1L);\n}"
1333:
1334:
1335:
1336: ;
1337: const char expected_logb@var292 [@expr1073744814 97 ] =@expr1073744815 "void f ( int x ) {\nstd :: cout << logb ( x ) ;\nstd :: cout << logb ( 10 ) ;\nstd :: cout << 0 ;\n}"
1338:
1339:
1340:
1341: ;
1342: $if $(@expr1073744816 $!@expr1073744817 $assertEquals $(@expr1073744818 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1342 $, expected_logb@var292 $, $tokWithNewlines_ $(@expr1073744819 code_logb@var291 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1342 $) $) $) { $return ; }
1343:
1344: const char code_logbf@var293 [@expr1073744820 96 ] =@expr1073744821 "void f(float x) {\n std::cout << logbf(x);\n std::cout << logbf(10);\n std::cout << logbf(1.0f);\n}"
1345:
1346:
1347:
1348: ;
1349: const char expected_logbf@var294 [@expr1073744822 101 ] =@expr1073744823 "void f ( float x ) {\nstd :: cout << logbf ( x ) ;\nstd :: cout << logbf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1350:
1351:
1352:
1353: ;
1354: $if $(@expr1073744824 $!@expr1073744825 $assertEquals $(@expr1073744826 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1354 $, expected_logbf@var294 $, $tokWithNewlines_ $(@expr1073744827 code_logbf@var293 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1354 $) $) $) { $return ; }
1355:
1356: const char code_logbl@var295 [@expr1073744828 105 ] =@expr1073744829 "void f(long double x) {\n std::cout << logbl(x);\n std::cout << logbl(10.0f);\n std::cout << logbl(1.0f);\n}"
1357:
1358:
1359:
1360: ;
1361: const char expected_logbl@var296 [@expr1073744830 105 ] =@expr1073744831 "void f ( double x ) {\nstd :: cout << logbl ( x ) ;\nstd :: cout << logbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1362:
1363:
1364:
1365: ;
1366: $if $(@expr1073744832 $!@expr1073744833 $assertEquals $(@expr1073744834 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1366 $, expected_logbl@var296 $, $tokWithNewlines_ $(@expr1073744835 code_logbl@var295 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1366 $) $) $) { $return ; }
1367: }
1368:
1369: void simplifyMathFunctions_log1p ( ) {
1370:
1371: const char code_log1p@var297 [@expr1073744836 92 ] =@expr1073744837 "void f(int x) {\n std::cout << log1p(x);\n std::cout << log1p(10);\n std::cout << log1p(0L);\n}"
1372:
1373:
1374:
1375: ;
1376: const char expected_log1p@var298 [@expr1073744838 99 ] =@expr1073744839 "void f ( int x ) {\nstd :: cout << log1p ( x ) ;\nstd :: cout << log1p ( 10 ) ;\nstd :: cout << 0 ;\n}"
1377:
1378:
1379:
1380: ;
1381: $if $(@expr1073744840 $!@expr1073744841 $assertEquals $(@expr1073744842 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1381 $, expected_log1p@var298 $, $tokWithNewlines_ $(@expr1073744843 code_log1p@var297 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1381 $) $) $) { $return ; }
1382:
1383: const char code_log1pf@var299 [@expr1073744844 99 ] =@expr1073744845 "void f(float x) {\n std::cout << log1pf(x);\n std::cout << log1pf(10);\n std::cout << log1pf(0.0f);\n}"
1384:
1385:
1386:
1387: ;
1388: const char expected_log1pf@var300 [@expr1073744846 103 ] =@expr1073744847 "void f ( float x ) {\nstd :: cout << log1pf ( x ) ;\nstd :: cout << log1pf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1389:
1390:
1391:
1392: ;
1393: $if $(@expr1073744848 $!@expr1073744849 $assertEquals $(@expr1073744850 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1393 $, expected_log1pf@var300 $, $tokWithNewlines_ $(@expr1073744851 code_log1pf@var299 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1393 $) $) $) { $return ; }
1394:
1395: const char code_log1pl@var301 [@expr1073744852 108 ] =@expr1073744853 "void f(long double x) {\n std::cout << log1pl(x);\n std::cout << log1pl(10.0f);\n std::cout << log1pl(0.0f);\n}"
1396:
1397:
1398:
1399: ;
1400: const char expected_log1pl@var302 [@expr1073744854 107 ] =@expr1073744855 "void f ( double x ) {\nstd :: cout << log1pl ( x ) ;\nstd :: cout << log1pl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1401:
1402:
1403:
1404: ;
1405: $if $(@expr1073744856 $!@expr1073744857 $assertEquals $(@expr1073744858 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1405 $, expected_log1pl@var302 $, $tokWithNewlines_ $(@expr1073744859 code_log1pl@var301 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1405 $) $) $) { $return ; }
1406: }
1407:
1408: void simplifyMathFunctions_log10 ( ) {
1409:
1410: const char code_log10@var303 [@expr1073744860 92 ] =@expr1073744861 "void f(int x) {\n std::cout << log10(x);\n std::cout << log10(10);\n std::cout << log10(1L);\n}"
1411:
1412:
1413:
1414: ;
1415: const char expected_log10@var304 [@expr1073744862 99 ] =@expr1073744863 "void f ( int x ) {\nstd :: cout << log10 ( x ) ;\nstd :: cout << log10 ( 10 ) ;\nstd :: cout << 0 ;\n}"
1416:
1417:
1418:
1419: ;
1420: $if $(@expr1073744864 $!@expr1073744865 $assertEquals $(@expr1073744866 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1420 $, expected_log10@var304 $, $tokWithNewlines_ $(@expr1073744867 code_log10@var303 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1420 $) $) $) { $return ; }
1421:
1422: const char code_log10f@var305 [@expr1073744868 99 ] =@expr1073744869 "void f(float x) {\n std::cout << log10f(x);\n std::cout << log10f(10);\n std::cout << log10f(1.0f);\n}"
1423:
1424:
1425:
1426: ;
1427: const char expected_log10f@var306 [@expr1073744870 103 ] =@expr1073744871 "void f ( float x ) {\nstd :: cout << log10f ( x ) ;\nstd :: cout << log10f ( 10 ) ;\nstd :: cout << 0 ;\n}"
1428:
1429:
1430:
1431: ;
1432: $if $(@expr1073744872 $!@expr1073744873 $assertEquals $(@expr1073744874 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1432 $, expected_log10f@var306 $, $tokWithNewlines_ $(@expr1073744875 code_log10f@var305 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1432 $) $) $) { $return ; }
1433:
1434: const char code_log10l@var307 [@expr1073744876 108 ] =@expr1073744877 "void f(long double x) {\n std::cout << log10l(x);\n std::cout << log10l(10.0f);\n std::cout << log10l(1.0f);\n}"
1435:
1436:
1437:
1438: ;
1439: const char expected_log10l@var308 [@expr1073744878 107 ] =@expr1073744879 "void f ( double x ) {\nstd :: cout << log10l ( x ) ;\nstd :: cout << log10l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1440:
1441:
1442:
1443: ;
1444: $if $(@expr1073744880 $!@expr1073744881 $assertEquals $(@expr1073744882 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1444 $, expected_log10l@var308 $, $tokWithNewlines_ $(@expr1073744883 code_log10l@var307 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1444 $) $) $) { $return ; }
1445:
1446: }
1447: void simplifyMathFunctions_log ( ) {
1448:
1449: const char code_log@var309 [@expr1073744884 86 ] =@expr1073744885 "void f(int x) {\n std::cout << log(x);\n std::cout << log(10);\n std::cout << log(1L);\n}"
1450:
1451:
1452:
1453: ;
1454: const char expected_log@var310 [@expr1073744886 95 ] =@expr1073744887 "void f ( int x ) {\nstd :: cout << log ( x ) ;\nstd :: cout << log ( 10 ) ;\nstd :: cout << 0 ;\n}"
1455:
1456:
1457:
1458: ;
1459: $if $(@expr1073744888 $!@expr1073744889 $assertEquals $(@expr1073744890 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1459 $, expected_log@var310 $, $tokWithNewlines_ $(@expr1073744891 code_log@var309 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1459 $) $) $) { $return ; }
1460:
1461: const char code_logf@var311 [@expr1073744892 93 ] =@expr1073744893 "void f(float x) {\n std::cout << logf(x);\n std::cout << logf(10);\n std::cout << logf(1.0f);\n}"
1462:
1463:
1464:
1465: ;
1466: const char expected_logf@var312 [@expr1073744894 99 ] =@expr1073744895 "void f ( float x ) {\nstd :: cout << logf ( x ) ;\nstd :: cout << logf ( 10 ) ;\nstd :: cout << 0 ;\n}"
1467:
1468:
1469:
1470: ;
1471: $if $(@expr1073744896 $!@expr1073744897 $assertEquals $(@expr1073744898 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1471 $, expected_logf@var312 $, $tokWithNewlines_ $(@expr1073744899 code_logf@var311 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1471 $) $) $) { $return ; }
1472:
1473: const char code_logl@var313 [@expr1073744900 102 ] =@expr1073744901 "void f(long double x) {\n std::cout << logl(x);\n std::cout << logl(10.0f);\n std::cout << logl(1.0f);\n}"
1474:
1475:
1476:
1477: ;
1478: const char expected_logl@var314 [@expr1073744902 103 ] =@expr1073744903 "void f ( double x ) {\nstd :: cout << logl ( x ) ;\nstd :: cout << logl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1479:
1480:
1481:
1482: ;
1483: $if $(@expr1073744904 $!@expr1073744905 $assertEquals $(@expr1073744906 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1483 $, expected_logl@var314 $, $tokWithNewlines_ $(@expr1073744907 code_logl@var313 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1483 $) $) $) { $return ; }
1484: }
1485:
1486: void simplifyMathFunctions_log2 ( ) {
1487:
1488: const char code_log2@var315 [@expr1073744908 89 ] =@expr1073744909 "void f(int x) {\n std::cout << log2(x);\n std::cout << log2(10);\n std::cout << log2(1L);\n}"
1489:
1490:
1491:
1492: ;
1493: const char expected_log2@var316 [@expr1073744910 97 ] =@expr1073744911 "void f ( int x ) {\nstd :: cout << log2 ( x ) ;\nstd :: cout << log2 ( 10 ) ;\nstd :: cout << 0 ;\n}"
1494:
1495:
1496:
1497: ;
1498: $if $(@expr1073744912 $!@expr1073744913 $assertEquals $(@expr1073744914 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1498 $, expected_log2@var316 $, $tokWithNewlines_ $(@expr1073744915 code_log2@var315 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1498 $) $) $) { $return ; }
1499:
1500: const char code_log2f@var317 [@expr1073744916 96 ] =@expr1073744917 "void f(float x) {\n std::cout << log2f(x);\n std::cout << log2f(10);\n std::cout << log2f(1.0f);\n}"
1501:
1502:
1503:
1504: ;
1505: const char expected_log2f@var318 [@expr1073744918 101 ] =@expr1073744919 "void f ( float x ) {\nstd :: cout << log2f ( x ) ;\nstd :: cout << log2f ( 10 ) ;\nstd :: cout << 0 ;\n}"
1506:
1507:
1508:
1509: ;
1510: $if $(@expr1073744920 $!@expr1073744921 $assertEquals $(@expr1073744922 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1510 $, expected_log2f@var318 $, $tokWithNewlines_ $(@expr1073744923 code_log2f@var317 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1510 $) $) $) { $return ; }
1511:
1512: const char code_log2l@var319 [@expr1073744924 105 ] =@expr1073744925 "void f(long double x) {\n std::cout << log2l(x);\n std::cout << log2l(10.0f);\n std::cout << log2l(1.0f);\n}"
1513:
1514:
1515:
1516: ;
1517: const char expected_log2l@var320 [@expr1073744926 105 ] =@expr1073744927 "void f ( double x ) {\nstd :: cout << log2l ( x ) ;\nstd :: cout << log2l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
1518:
1519:
1520:
1521: ;
1522: $if $(@expr1073744928 $!@expr1073744929 $assertEquals $(@expr1073744930 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1522 $, expected_log2l@var320 $, $tokWithNewlines_ $(@expr1073744931 code_log2l@var319 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1522 $) $) $) { $return ; }
1523: }
1524:
1525: void simplifyMathFunctions_pow ( ) {
1526:
1527: const char code_pow@var321 [@expr1073744932 352 ] =@expr1073744933 "void f() {\n std::cout << pow(-1.0,1);\n std::cout << pow(1.0,1);\n std::cout << pow(0,1);\n std::cout << pow(1,-6);\n std::cout << powf(-1.0,1.0f);\n std::cout << powf(1.0,1.0f);\n std::cout << powf(0,1.0f);\n std::cout << powf(1.0,-6.0f);\n std::cout << powl(-1.0,1.0);\n std::cout << powl(1.0,1.0);\n std::cout << powl(0,1.0);\n std::cout << powl(1.0,-6.0d);\n}"
1528:
|
1539:
1540: ;
1541:
1542: const char expected_pow@var322 [@expr1073744934 252 ] =@expr1073744935 "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
1543:
|
1554:
1555: ;
1556: $if $(@expr1073744936 $!@expr1073744937 $assertEquals $(@expr1073744938 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1556 $, expected_pow@var322 $, $tokWithNewlines_ $(@expr1073744939 code_pow@var321 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1556 $) $) $) { $return ; }
1557:
1558:
1559:
1560: const char code_pow1@var323 [@expr1073744940 49 ] =@expr1073744941 "int f(const Fred &fred) {return fred.pow(12,3);}" ;
1561: const char expected_pow1@var324 [@expr1073744942 63 ] =@expr1073744943 "int f ( const Fred & fred ) { return fred . pow ( 12 , 3 ) ; }" ;
1562: $if $(@expr1073744944 $!@expr1073744945 $assertEquals $(@expr1073744946 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1562 $, expected_pow1@var324 $, $tokWithNewlines_ $(@expr1073744947 code_pow1@var323 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1562 $) $) $) { $return ; }
1563:
1564: const char code_pow2@var325 [@expr1073744948 27 ] =@expr1073744949 "int f() {return pow(0,0);}" ;
1565: const char expected_pow2@var326 [@expr1073744950 25 ] =@expr1073744951 "int f ( ) { return 1 ; }" ;
1566: $if $(@expr1073744952 $!@expr1073744953 $assertEquals $(@expr1073744954 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1566 $, expected_pow2@var326 $, $tokWithNewlines_ $(@expr1073744955 code_pow2@var325 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1566 $) $) $) { $return ; }
1567:
1568: const char code_pow3@var327 [@expr1073744956 27 ] =@expr1073744957 "int f() {return pow(0,1);}" ;
1569: const char expected_pow3@var328 [@expr1073744958 25 ] =@expr1073744959 "int f ( ) { return 0 ; }" ;
1570: $if $(@expr1073744960 $!@expr1073744961 $assertEquals $(@expr1073744962 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1570 $, expected_pow3@var328 $, $tokWithNewlines_ $(@expr1073744963 code_pow3@var327 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1570 $) $) $) { $return ; }
1571:
1572: const char code_pow4@var329 [@expr1073744964 27 ] =@expr1073744965 "int f() {return pow(1,0);}" ;
1573: const char expected_pow4@var330 [@expr1073744966 25 ] =@expr1073744967 "int f ( ) { return 1 ; }" ;
1574: $if $(@expr1073744968 $!@expr1073744969 $assertEquals $(@expr1073744970 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1574 $, expected_pow4@var330 $, $tokWithNewlines_ $(@expr1073744971 code_pow4@var329 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1574 $) $) $) { $return ; }
1575: }
1576:
1577: void simplifyMathFunctions_fmin ( ) {
1578:
1579: const char code_fmin@var331 [@expr1073744972 259 ] =@expr1073744973 "void f() {\n std::cout << fmin(-1.0,0);\n std::cout << fmin(1.0,0);\n std::cout << fmin(0,0);\n std::cout << fminf(-1.0,0);\n std::cout << fminf(1.0,0);\n std::cout << fminf(0,0);\n std::cout << fminl(-1.0,0);\n std::cout << fminl(1.0,0);\n std::cout << fminl(0,0);\n}"
1580:
|
1588:
1589: ;
1590:
1591: const char expected_fmin@var332 [@expr1073744974 195 ] =@expr1073744975 "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\n}"
1592:
|
1600:
1601: ;
1602: $if $(@expr1073744976 $!@expr1073744977 $assertEquals $(@expr1073744978 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1602 $, expected_fmin@var332 $, $tokWithNewlines_ $(@expr1073744979 code_fmin@var331 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1602 $) $) $) { $return ; }
1603:
1604:
1605: const char code_fmin1@var333 [@expr1073744980 38 ] =@expr1073744981 "float f(float f) { return fmin(f,0);}" ;
1606: const char expected_fmin1@var334 [@expr1073744982 48 ] =@expr1073744983 "float f ( float f ) { return fmin ( f , 0 ) ; }" ;
1607: $if $(@expr1073744984 $!@expr1073744985 $assertEquals $(@expr1073744986 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1607 $, expected_fmin1@var334 $, $tokWithNewlines_ $(@expr1073744987 code_fmin1@var333 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1607 $) $) $) { $return ; }
1608: }
1609:
1610: void simplifyMathFunctions_fmax ( ) {
1611:
1612: const char code_fmax@var335 [@expr1073744988 259 ] =@expr1073744989 "void f() {\n std::cout << fmax(-1.0,0);\n std::cout << fmax(1.0,0);\n std::cout << fmax(0,0);\n std::cout << fmaxf(-1.0,0);\n std::cout << fmaxf(1.0,0);\n std::cout << fmaxf(0,0);\n std::cout << fmaxl(-1.0,0);\n std::cout << fmaxl(1.0,0);\n std::cout << fmaxl(0,0);\n}"
1613:
|
1621:
1622: ;
1623:
1624: const char expected_fmax@var336 [@expr1073744990 192 ] =@expr1073744991 "void f ( ) {\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\n}"
1625:
|
1633:
1634: ;
1635: $if $(@expr1073744992 $!@expr1073744993 $assertEquals $(@expr1073744994 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1635 $, expected_fmax@var336 $, $tokWithNewlines_ $(@expr1073744995 code_fmax@var335 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1635 $) $) $) { $return ; }
1636:
1637:
1638: const char code_fmax1@var337 [@expr1073744996 38 ] =@expr1073744997 "float f(float f) { return fmax(f,0);}" ;
1639: const char expected_fmax1@var338 [@expr1073744998 48 ] =@expr1073744999 "float f ( float f ) { return fmax ( f , 0 ) ; }" ;
1640: $if $(@expr1073745000 $!@expr1073745001 $assertEquals $(@expr1073745002 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1640 $, expected_fmax1@var338 $, $tokWithNewlines_ $(@expr1073745003 code_fmax1@var337 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1640 $) $) $) { $return ; }
1641: }
1642:
1643: void simplifyMathExpressions ( ) {
1644: const char code1@var339 [@expr1073745004 991 ] =@expr1073745005 "void foo() {\n    std::cout<<pow(sin(x),2)+pow(cos(x),2);\n    std::cout<<pow(sin(pow(sin(y),2)+pow(cos(y),2)),2)+pow(cos(pow(sin(y),2)+pow(cos(y),2)),2);\n    std::cout<<pow(sin(x),2.0)+pow(cos(x),2.0);\n    std::cout<<pow(sin(x*y+z),2.0)+pow(cos(x*y+z),2.0);\n    std::cout<<pow(sin(x*y+z),2)+pow(cos(x*y+z),2);\n    std::cout<<pow(cos(x),2)+pow(sin(x),2);\n    std::cout<<pow(cos(x),2.0)+pow(sin(x),2.0);\n    std::cout<<pow(cos(x*y+z),2.0)+pow(sin(x*y+z),2.0);\n    std::cout<<pow(cos(x*y+z),2)+pow(sin(x*y+z),2);\n    std::cout<<pow(sinh(x*y+z),2)-pow(cosh(x*y+z),2);\n    std::cout<<pow(sinh(x),2)-pow(cosh(x),2);\n    std::cout<<pow(sinh(x*y+z),2.0)-pow(cosh(x*y+z),2.0);\n    std::cout<<pow(sinh(x),2.0)-pow(cosh(x),2.0);\n    std::cout<<pow(cosh(x*y+z),2)-pow(sinh(x*y+z),2);\n    std::cout<<pow(cosh(x),2)-pow(sinh(x),2);\n    std::cout<<pow(cosh(x*y+z),2.0)-pow(sinh(x*y+z),2.0);\n    std::cout<<pow(cosh(x),2.0)-pow(sinh(x),2.0);\n    std::cout<<pow(cosh(pow(x,1)),2.0)-pow(sinh(pow(x,1)),2.0);\n}"
1645:
|
1662:
1663: ;
1664:
1665: const char expected1@var340 [@expr1073745006 368 ] =@expr1073745007 "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
1666:
|
1683:
1684: ;
1685: $if $(@expr1073745008 $!@expr1073745009 $assertEquals $(@expr1073745010 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1685 $, expected1@var340 $, $tokWithNewlines_ $(@expr1073745011 code1@var339 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1685 $) $) $) { $return ; }
1686:
1687: const char code2@var341 [@expr1073745012 455 ] =@expr1073745013 "void f ( ) {\na = pow ( sin ( x ) , 2 ) + pow ( cos ( y ) , 2 ) ;\nb = pow ( sinh ( x ) , 2 ) - pow ( cosh ( y ) , 2 ) ;\nc = pow ( sin ( x ) , 2.0 ) + pow ( cos ( y ) , 2.0 ) ;\nd = pow ( sinh ( x ) , 2.0 ) - pow ( cosh ( y ) , 2.0 ) ;\ne = pow ( cos ( x ) , 2 ) + pow ( sin ( y ) , 2 ) ;\nf = pow ( cosh ( x ) , 2 ) - pow ( sinh ( y ) , 2 ) ;\ng = pow ( cos ( x ) , 2.0 ) + pow ( sin ( y ) , 2.0 ) ;\nh = pow ( cosh ( x ) , 2.0 ) - pow ( sinh ( y ) , 2.0 ) ;\n}"
1688:
|
1695:
1696: ;
1697: $if $(@expr1073745014 $!@expr1073745015 $assertEquals $(@expr1073745016 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1697 $, code2@var341 $, $tokWithNewlines_ $(@expr1073745017 code2@var341 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1697 $) $) $) { $return ; }
1698:
1699: const char code3@var342 [@expr1073745018 1073 ] =@expr1073745019 "void foo() {\n    std::cout<<powf(sinf(x),2)+powf(cosf(x),2);\n    std::cout<<powf(sinf(powf(sinf(y),2)+powf(cosf(y),2)),2)+powf(cosf(powf(sinf(y),2)+powf(cosf(y),2)),2);\n    std::cout<<powf(sinf(x),2.0)+powf(cosf(x),2.0);\n    std::cout<<powf(sinf(x*y+z),2.0)+powf(cosf(x*y+z),2.0);\n    std::cout<<powf(sinf(x*y+z),2)+powf(cosf(x*y+z),2);\n    std::cout<<powf(cosf(x),2)+powf(sinf(x),2);\n    std::cout<<powf(cosf(x),2.0)+powf(sinf(x),2.0);\n    std::cout<<powf(cosf(x*y+z),2.0)+powf(sinf(x*y+z),2.0);\n    std::cout<<powf(cosf(x*y+z),2)+powf(sinf(x*y+z),2);\n    std::cout<<powf(sinhf(x*y+z),2)-powf(coshf(x*y+z),2);\n    std::cout<<powf(sinhf(x),2)-powf(coshf(x),2);\n    std::cout<<powf(sinhf(x*y+z),2.0)-powf(coshf(x*y+z),2.0);\n    std::cout<<powf(sinhf(x),2.0)-powf(coshf(x),2.0);\n    std::cout<<powf(coshf(x*y+z),2)-powf(sinhf(x*y+z),2);\n    std::cout<<powf(coshf(x),2)-powf(sinhf(x),2);\n    std::cout<<powf(coshf(x*y+z),2.0)-powf(sinhf(x*y+z),2.0);\n    std::cout<<powf(coshf(x),2.0)-powf(sinhf(x),2.0);\n    std::cout<<powf(coshf(powf(x,1)),2.0)-powf(sinhf(powf(x,1)),2.0);\n}"
1700:
|
1717:
1718: ;
1719:
1720: const char expected3@var343 [@expr1073745020 368 ] =@expr1073745021 "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
1721:
|
1738:
1739: ;
1740: $if $(@expr1073745022 $!@expr1073745023 $assertEquals $(@expr1073745024 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1740 $, expected3@var343 $, $tokWithNewlines_ $(@expr1073745025 code3@var342 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1740 $) $) $) { $return ; }
1741:
1742: const char code4@var344 [@expr1073745026 487 ] =@expr1073745027 "void f ( ) {\na = powf ( sinf ( x ) , 2 ) + powf ( cosf ( y ) , 2 ) ;\nb = powf ( sinhf ( x ) , 2 ) - powf ( coshf ( y ) , 2 ) ;\nc = powf ( sinf ( x ) , 2.0 ) + powf ( cosf ( y ) , 2.0 ) ;\nd = powf ( sinhf ( x ) , 2.0 ) - powf ( coshf ( y ) , 2.0 ) ;\ne = powf ( cosf ( x ) , 2 ) + powf ( sinf ( y ) , 2 ) ;\nf = powf ( coshf ( x ) , 2 ) - powf ( sinhf ( y ) , 2 ) ;\ng = powf ( cosf ( x ) , 2.0 ) + powf ( sinf ( y ) , 2.0 ) ;\nh = powf ( coshf ( x ) , 2.0 ) - powf ( sinhf ( y ) , 2.0 ) ;\n}"
1743:
|
1750:
1751: ;
1752: $if $(@expr1073745028 $!@expr1073745029 $assertEquals $(@expr1073745030 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1752 $, code4@var344 $, $tokWithNewlines_ $(@expr1073745031 code4@var344 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1752 $) $) $) { $return ; }
1753:
1754: const char code5@var345 [@expr1073745032 1072 ] =@expr1073745033 "void foo() {\n    std::cout<<powf(sinl(x),2)+powl(cosl(x),2);\n    std::cout<<pow(sinl(powl(sinl(y),2)+powl(cosl(y),2)),2)+powl(cosl(powl(sinl(y),2)+powl(cosl(y),2)),2);\n    std::cout<<powl(sinl(x),2.0)+powl(cosl(x),2.0);\n    std::cout<<powl(sinl(x*y+z),2.0)+powl(cosl(x*y+z),2.0);\n    std::cout<<powl(sinl(x*y+z),2)+powl(cosl(x*y+z),2);\n    std::cout<<powl(cosl(x),2)+powl(sinl(x),2);\n    std::cout<<powl(cosl(x),2.0)+powl(sinl(x),2.0);\n    std::cout<<powl(cosl(x*y+z),2.0)+powl(sinl(x*y+z),2.0);\n    std::cout<<powl(cosl(x*y+z),2)+powl(sinl(x*y+z),2);\n    std::cout<<powl(sinhl(x*y+z),2)-powl(coshl(x*y+z),2);\n    std::cout<<powl(sinhl(x),2)-powl(coshl(x),2);\n    std::cout<<powl(sinhl(x*y+z),2.0)-powl(coshl(x*y+z),2.0);\n    std::cout<<powl(sinhl(x),2.0)-powl(coshl(x),2.0);\n    std::cout<<powl(coshl(x*y+z),2)-powl(sinhl(x*y+z),2);\n    std::cout<<powl(coshl(x),2)-powl(sinhl(x),2);\n    std::cout<<powl(coshl(x*y+z),2.0)-powl(sinhl(x*y+z),2.0);\n    std::cout<<powl(coshl(x),2.0)-powl(sinhl(x),2.0);\n    std::cout<<powl(coshl(powl(x,1)),2.0)-powl(sinhl(powl(x,1)),2.0);\n}"
1755:
|
1772:
1773: ;
1774:
1775: const char expected5@var346 [@expr1073745034 368 ] =@expr1073745035 "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
1776:
|
1793:
1794: ;
1795: $if $(@expr1073745036 $!@expr1073745037 $assertEquals $(@expr1073745038 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1795 $, expected5@var346 $, $tokWithNewlines_ $(@expr1073745039 code5@var345 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1795 $) $) $) { $return ; }
1796:
1797:
1798: const char code6@var347 [@expr1073745040 487 ] =@expr1073745041 "void f ( ) {\na = powl ( sinl ( x ) , 2 ) + powl ( cosl ( y ) , 2 ) ;\nb = powl ( sinhl ( x ) , 2 ) - powl ( coshl ( y ) , 2 ) ;\nc = powl ( sinl ( x ) , 2.0 ) + powl ( cosl ( y ) , 2.0 ) ;\nd = powl ( sinhl ( x ) , 2.0 ) - powl ( coshl ( y ) , 2.0 ) ;\ne = powl ( cosl ( x ) , 2 ) + powl ( sinl ( y ) , 2 ) ;\nf = powl ( coshl ( x ) , 2 ) - powl ( sinhl ( y ) , 2 ) ;\ng = powl ( cosl ( x ) , 2.0 ) + powl ( sinl ( y ) , 2.0 ) ;\nh = powl ( coshl ( x ) , 2.0 ) - powl ( sinhl ( y ) , 2.0 ) ;\n}"
1799:
|
1806:
1807: ;
1808: $if $(@expr1073745042 $!@expr1073745043 $assertEquals $(@expr1073745044 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1808 $, code6@var347 $, $tokWithNewlines_ $(@expr1073745045 code6@var347 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1808 $) $) $) { $return ; }
1809: }
1810:
1811:
1812: void simplifyAssignmentInFunctionCall ( ) {
1813: $if $(@expr1073745046 $!@expr1073745047 $assertEquals $(@expr1073745048 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1813 $, "; x = g ( ) ; f ( x ) ;" $, $tok_ $(@expr1073745049 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1813 $, ";f(x=g());" $) $) $) { $return ; }
1814: $if $(@expr1073745050 $!@expr1073745051 $assertEquals $(@expr1073745052 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1814 $, "; hs = ( xyz_t ) { h . centerX , h . centerY , 1 + index } ; putInput ( hs , 1 ) ;" $, $tok_ $(@expr1073745053 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1814 $, ";putInput(hs = (xyz_t) { h->centerX, h->centerY, 1 + index }, 1);" $) $) $) { $return ; }
1815: }
1816:
1817: void simplifyCompoundAssignment ( ) {
1818: $if $(@expr1073745054 $!@expr1073745055 $assertEquals $(@expr1073745056 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1818 $, "; x = x + y ;" $, $tok_ $(@expr1073745057 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1818 $, "; x += y;" $) $) $) { $return ; }
1819: $if $(@expr1073745058 $!@expr1073745059 $assertEquals $(@expr1073745060 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1819 $, "; x = x - y ;" $, $tok_ $(@expr1073745061 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1819 $, "; x -= y;" $) $) $) { $return ; }
1820: $if $(@expr1073745062 $!@expr1073745063 $assertEquals $(@expr1073745064 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1820 $, "; x = x * y ;" $, $tok_ $(@expr1073745065 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1820 $, "; x *= y;" $) $) $) { $return ; }
1821: $if $(@expr1073745066 $!@expr1073745067 $assertEquals $(@expr1073745068 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1821 $, "; x = x / y ;" $, $tok_ $(@expr1073745069 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1821 $, "; x /= y;" $) $) $) { $return ; }
1822: $if $(@expr1073745070 $!@expr1073745071 $assertEquals $(@expr1073745072 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1822 $, "; x = x % y ;" $, $tok_ $(@expr1073745073 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1822 $, "; x %= y;" $) $) $) { $return ; }
1823: $if $(@expr1073745074 $!@expr1073745075 $assertEquals $(@expr1073745076 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1823 $, "; x = x & y ;" $, $tok_ $(@expr1073745077 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1823 $, "; x &= y;" $) $) $) { $return ; }
1824: $if $(@expr1073745078 $!@expr1073745079 $assertEquals $(@expr1073745080 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1824 $, "; x = x | y ;" $, $tok_ $(@expr1073745081 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1824 $, "; x |= y;" $) $) $) { $return ; }
1825: $if $(@expr1073745082 $!@expr1073745083 $assertEquals $(@expr1073745084 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1825 $, "; x = x ^ y ;" $, $tok_ $(@expr1073745085 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1825 $, "; x ^= y;" $) $) $) { $return ; }
1826: $if $(@expr1073745086 $!@expr1073745087 $assertEquals $(@expr1073745088 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1826 $, "; x = x << y ;" $, $tok_ $(@expr1073745089 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1826 $, "; x <<= y;" $) $) $) { $return ; }
1827: $if $(@expr1073745090 $!@expr1073745091 $assertEquals $(@expr1073745092 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1827 $, "; x = x >> y ;" $, $tok_ $(@expr1073745093 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1827 $, "; x >>= y;" $) $) $) { $return ; }
1828:
1829: $if $(@expr1073745094 $!@expr1073745095 $assertEquals $(@expr1073745096 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1829 $, "{ x = x + y ; }" $, $tok_ $(@expr1073745097 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1829 $, "{ x += y;}" $) $) $) { $return ; }
1830: $if $(@expr1073745098 $!@expr1073745099 $assertEquals $(@expr1073745100 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1830 $, "{ x = x - y ; }" $, $tok_ $(@expr1073745101 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1830 $, "{ x -= y;}" $) $) $) { $return ; }
1831: $if $(@expr1073745102 $!@expr1073745103 $assertEquals $(@expr1073745104 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1831 $, "{ x = x * y ; }" $, $tok_ $(@expr1073745105 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1831 $, "{ x *= y;}" $) $) $) { $return ; }
1832: $if $(@expr1073745106 $!@expr1073745107 $assertEquals $(@expr1073745108 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1832 $, "{ x = x / y ; }" $, $tok_ $(@expr1073745109 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1832 $, "{ x /= y;}" $) $) $) { $return ; }
1833: $if $(@expr1073745110 $!@expr1073745111 $assertEquals $(@expr1073745112 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1833 $, "{ x = x % y ; }" $, $tok_ $(@expr1073745113 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1833 $, "{ x %= y;}" $) $) $) { $return ; }
1834: $if $(@expr1073745114 $!@expr1073745115 $assertEquals $(@expr1073745116 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1834 $, "{ x = x & y ; }" $, $tok_ $(@expr1073745117 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1834 $, "{ x &= y;}" $) $) $) { $return ; }
1835: $if $(@expr1073745118 $!@expr1073745119 $assertEquals $(@expr1073745120 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1835 $, "{ x = x | y ; }" $, $tok_ $(@expr1073745121 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1835 $, "{ x |= y;}" $) $) $) { $return ; }
1836: $if $(@expr1073745122 $!@expr1073745123 $assertEquals $(@expr1073745124 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1836 $, "{ x = x ^ y ; }" $, $tok_ $(@expr1073745125 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1836 $, "{ x ^= y;}" $) $) $) { $return ; }
1837: $if $(@expr1073745126 $!@expr1073745127 $assertEquals $(@expr1073745128 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1837 $, "{ x = x << y ; }" $, $tok_ $(@expr1073745129 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1837 $, "{ x <<= y;}" $) $) $) { $return ; }
1838: $if $(@expr1073745130 $!@expr1073745131 $assertEquals $(@expr1073745132 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1838 $, "{ x = x >> y ; }" $, $tok_ $(@expr1073745133 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1838 $, "{ x >>= y;}" $) $) $) { $return ; }
1839:
1840: $if $(@expr1073745134 $!@expr1073745135 $assertEquals $(@expr1073745136 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1840 $, "; * p = * p + y ;" $, $tok_ $(@expr1073745137 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1840 $, "; *p += y;" $) $) $) { $return ; }
1841: $if $(@expr1073745138 $!@expr1073745139 $assertEquals $(@expr1073745140 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1841 $, "; ( * p ) = ( * p ) + y ;" $, $tok_ $(@expr1073745141 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1841 $, "; (*p) += y;" $) $) $) { $return ; }
1842: $if $(@expr1073745142 $!@expr1073745143 $assertEquals $(@expr1073745144 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1842 $, "; * ( p [ 0 ] ) = * ( p [ 0 ] ) + y ;" $, $tok_ $(@expr1073745145 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1842 $, "; *(p[0]) += y;" $) $) $) { $return ; }
1843: $if $(@expr1073745146 $!@expr1073745147 $assertEquals $(@expr1073745148 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1843 $, "; p [ { 1 , 2 } ] = p [ { 1 , 2 } ] + y ;" $, $tok_ $(@expr1073745149 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1843 $, "; p[{1,2}] += y;" $) $) $) { $return ; }
1844:
1845: $if $(@expr1073745150 $!@expr1073745151 $assertEquals $(@expr1073745152 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1845 $, "void foo ( ) { switch ( n ) { case 0 : ; x = x + y ; break ; } }" $, $tok_ $(@expr1073745153 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1845 $, "void foo() { switch (n) { case 0: x += y; break; } }" $) $) $) { $return ; }
1846:
1847: $if $(@expr1073745154 $!@expr1073745155 $assertEquals $(@expr1073745156 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1847 $, "; x . y = x . y + 1 ;" $, $tok_ $(@expr1073745157 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1847 $, "; x.y += 1;" $) $) $) { $return ; }
1848:
1849: $if $(@expr1073745158 $!@expr1073745159 $assertEquals $(@expr1073745160 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1849 $, "; x [ 0 ] = x [ 0 ] + 1 ;" $, $tok_ $(@expr1073745161 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1849 $, "; x[0] += 1;" $) $) $) { $return ; }
1850: $if $(@expr1073745162 $!@expr1073745163 $assertEquals $(@expr1073745164 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1850 $, "; x [ y - 1 ] = x [ y - 1 ] + 1 ;" $, $tok_ $(@expr1073745165 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1850 $, "; x[y-1] += 1;" $) $) $) { $return ; }
1851: $if $(@expr1073745166 $!@expr1073745167 $assertEquals $(@expr1073745168 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1851 $, "; x [ y ] = x [ y ++ ] + 1 ;" $, $tok_ $(@expr1073745169 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1851 $, "; x[y++] += 1;" $) $) $) { $return ; }
1852: $if $(@expr1073745170 $!@expr1073745171 $assertEquals $(@expr1073745172 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1852 $, "; x [ ++ y ] = x [ y ] + 1 ;" $, $tok_ $(@expr1073745173 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1852 $, "; x[++y] += 1;" $) $) $) { $return ; }
1853:
1854: $if $(@expr1073745174 $!@expr1073745175 $assertEquals $(@expr1073745176 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1854 $, ";" $, $tok_ $(@expr1073745177 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1854 $, ";x += 0;" $) $) $) { $return ; }
1855: $todoAssertEquals $(@expr1073745178 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1855 $, ";" $, "; x = x + '\\0' ;" $, $tok_ $(@expr1073745179 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1855 $, "; x += '\\0'; " $) $) ;
1856: $if $(@expr1073745180 $!@expr1073745181 $assertEquals $(@expr1073745182 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1856 $, ";" $, $tok_ $(@expr1073745183 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1856 $, ";x -= 0;" $) $) $) { $return ; }
1857: $if $(@expr1073745184 $!@expr1073745185 $assertEquals $(@expr1073745186 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1857 $, ";" $, $tok_ $(@expr1073745187 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1857 $, ";x |= 0;" $) $) $) { $return ; }
1858: $if $(@expr1073745188 $!@expr1073745189 $assertEquals $(@expr1073745190 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1858 $, ";" $, $tok_ $(@expr1073745191 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1858 $, ";x *= 1;" $) $) $) { $return ; }
1859: $if $(@expr1073745192 $!@expr1073745193 $assertEquals $(@expr1073745194 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1859 $, ";" $, $tok_ $(@expr1073745195 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1859 $, ";x /= 1;" $) $) $) { $return ; }
1860:
1861: $if $(@expr1073745196 $!@expr1073745197 $assertEquals $(@expr1073745198 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1861 $, "; a . x ( ) = a . x ( ) + 1 ;" $, $tok_ $(@expr1073745199 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1861 $, "; a.x() += 1;" $) $) $) { $return ; }
1862: $if $(@expr1073745200 $!@expr1073745201 $assertEquals $(@expr1073745202 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1862 $, "; x ( 1 ) = x ( 1 ) + 1 ;" $, $tok_ $(@expr1073745203 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1862 $, "; x(1) += 1;" $) $) $) { $return ; }
1863:
1864:
1865: $if $(@expr1073745204 $!@expr1073745205 $assertEquals $(@expr1073745206 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1865 $, "{ j = j - i ; }" $, $tok_ $(@expr1073745207 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1865 $, "{if (false) {} else { j -= i; }}" $) $) $) { $return ; }
1866:
1867:
1868: $if $(@expr1073745208 $!@expr1073745209 $assertEquals $(@expr1073745210 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1868 $, "; a = a + ( b ? c : d ) ;" $, $tok_ $(@expr1073745211 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1868 $, "; a+=b?c:d;" $) $) $) { $return ; }
1869: $if $(@expr1073745212 $!@expr1073745213 $assertEquals $(@expr1073745214 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1869 $, "; a = a * ( b + 1 ) ;" $, $tok_ $(@expr1073745215 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1869 $, "; a*=b+1;" $) $) $) { $return ; }
1870:
1871: $if $(@expr1073745216 $!@expr1073745217 $assertEquals $(@expr1073745218 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1871 $, "; a = a + ( b && c ) ;" $, $tok_ $(@expr1073745219 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1871 $, "; a+=b&&c;" $) $) $) { $return ; }
1872: $if $(@expr1073745220 $!@expr1073745221 $assertEquals $(@expr1073745222 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1872 $, "; a = a * ( b || c ) ;" $, $tok_ $(@expr1073745223 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1872 $, "; a*=b||c;" $) $) $) { $return ; }
1873: $if $(@expr1073745224 $!@expr1073745225 $assertEquals $(@expr1073745226 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1873 $, "; a = a | ( b == c ) ;" $, $tok_ $(@expr1073745227 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1873 $, "; a|=b==c;" $) $) $) { $return ; }
1874:
1875:
1876: $if $(@expr1073745228 $!@expr1073745229 $assertEquals $(@expr1073745230 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1876 $, "; a = a + ( b = 1 ) ;" $, $tok_ $(@expr1073745231 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1876 $, "; a += b = 1;" $) $) $) { $return ; }
1877:
1878:
1879: $if $(@expr1073745232 $!@expr1073745233 $assertEquals $(@expr1073745234 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1879 $, "; foo = foo + [ & ] ( ) { } ;" $, $tok_ $(@expr1073745235 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1879 $, "; foo += [&]() {int i;};" $) $) $) { $return ; }
1880:
1881:
1882: $if $(@expr1073745236 $!@expr1073745237 $assertEquals $(@expr1073745238 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1882 $, "{ return ( a = b ) += c ; }" $, $tok_ $(@expr1073745239 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1882 $, "{ return (a = b) += c; }" $) $) $) { $return ; }
1883: }
1884:
1885:
1886: void cast ( ) {
1887: $if $(@expr1073745240 $!@expr1073745241 $assertEquals $(@expr1073745242 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1887 $, "{ if ( p == 0 ) { ; } }" $, $tok_ $(@expr1073745243 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1887 $, "{if (p == (char *)0);}" $) $) $) { $return ; }
1888: $if $(@expr1073745244 $!@expr1073745245 $assertEquals $(@expr1073745246 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1888 $, "{ return str ; }" $, $tok_ $(@expr1073745247 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1888 $, "{return (char *)str;}" $) $) $) { $return ; }
1889:
1890: $if $(@expr1073745248 $!@expr1073745249 $assertEquals $(@expr1073745250 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1890 $, "{ if ( * a ) }" $, $tok_ $(@expr1073745251 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1890 $, "{if ((char)*a)}" $) $) $) { $return ; }
1891: $if $(@expr1073745252 $!@expr1073745253 $assertEquals $(@expr1073745254 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1891 $, "{ if ( & a ) }" $, $tok_ $(@expr1073745255 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1891 $, "{if ((int)&a)}" $) $) $) { $return ; }
1892: $if $(@expr1073745256 $!@expr1073745257 $assertEquals $(@expr1073745258 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1892 $, "{ if ( * a ) }" $, $tok_ $(@expr1073745259 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1892 $, "{if ((unsigned int)(unsigned char)*a)}" $) $) $) { $return ; }
1893: $if $(@expr1073745260 $!@expr1073745261 $assertEquals $(@expr1073745262 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1893 $, "class A { A operator* ( int ) ; } ;" $, $tok_ $(@expr1073745263 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1893 $, "class A { A operator *(int); };" $) $) $) { $return ; }
1894: $if $(@expr1073745264 $!@expr1073745265 $assertEquals $(@expr1073745266 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1894 $, "class A { A operator* ( int ) const ; } ;" $, $tok_ $(@expr1073745267 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1894 $, "class A { A operator *(int) const; };" $) $) $) { $return ; }
1895: $if $(@expr1073745268 $!@expr1073745269 $assertEquals $(@expr1073745270 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1895 $, "{ if ( p == 0 ) { ; } }" $, $tok_ $(@expr1073745271 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1895 $, "{ if (p == (char *)(char *)0); }" $) $) $) { $return ; }
1896: $if $(@expr1073745272 $!@expr1073745273 $assertEquals $(@expr1073745274 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1896 $, "{ if ( p == 0 ) { ; } }" $, $tok_ $(@expr1073745275 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1896 $, "{ if (p == (char **)0); }" $) $) $) { $return ; }
1897:
1898:
1899: $if $(@expr1073745276 $!@expr1073745277 $assertEquals $(@expr1073745278 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1899 $, "; * ( ( char * ) p + 1 ) = 0 ;" $, $tok_ $(@expr1073745279 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1899 $, "; *((char *)p + 1) = 0;" $) $) $) { $return ; }
1900:
1901: $if $(@expr1073745280 $!@expr1073745281 $assertEquals $(@expr1073745282 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1901 $, "{ if ( true ) }" $, $tok_ $(@expr1073745283 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1901 $, "{ if ((unsigned char)1) }" $) $) $) { $return ; }
1902: $if $(@expr1073745284 $!@expr1073745285 $assertEquals $(@expr1073745286 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1902 $, "f ( 200 )" $, $tok_ $(@expr1073745287 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1902 $, "f((unsigned char)200)" $) $) $) { $return ; }
1903: $if $(@expr1073745288 $!@expr1073745289 $assertEquals $(@expr1073745290 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1903 $, "f ( ( char ) 1234 )" $, $tok_ $(@expr1073745291 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1903 $, "f((char)1234)" $) $) $) { $return ; }
1904: }
1905:
1906:
1907: void iftruefalse ( ) {
1908: {
1909: const char code1@var348 [@expr1073745292 70 ] =@expr1073745293 " void f() { int a; bool use = false; if( use ) { a=0; } else {a=1;} }" ;
1910: const char code2@var349 [@expr1073745294 46 ] =@expr1073745295 " void f() { int a; bool use = false; {a=1;} }" ;
1911: $if $(@expr1073745296 $!@expr1073745297 $assertEquals $(@expr1073745298 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1911 $, $tok_ $(@expr1073745299 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1911 $, code2@var349 $) $, $tok_ $(@expr1073745300 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1911 $, code1@var348 $) $) $) { $return ; }
1912: }
1913:
1914: {
1915: const char code1@var350 [@expr1073745301 69 ] =@expr1073745302 " void f() { int a; bool use = true; if( use ) { a=0; } else {a=1;} }" ;
1916: const char code2@var351 [@expr1073745303 47 ] =@expr1073745304 " void f() { int a; bool use = true; { a=0; } }" ;
1917: $if $(@expr1073745305 $!@expr1073745306 $assertEquals $(@expr1073745307 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1917 $, $tok_ $(@expr1073745308 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1917 $, code2@var351 $) $, $tok_ $(@expr1073745309 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1917 $, code1@var350 $) $) $) { $return ; }
1918: }
1919:
1920: {
1921: const char code1@var352 [@expr1073745310 65 ] =@expr1073745311 " void f() { int a; int use = 5; if( use ) { a=0; } else {a=1;} }" ;
1922: const char code2@var353 [@expr1073745312 43 ] =@expr1073745313 " void f() { int a; int use = 5; { a=0; } }" ;
1923: $if $(@expr1073745314 $!@expr1073745315 $assertEquals $(@expr1073745316 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1923 $, $tok_ $(@expr1073745317 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1923 $, code2@var353 $) $, $tok_ $(@expr1073745318 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1923 $, code1@var352 $) $) $) { $return ; }
1924: }
1925:
1926: {
1927: const char code1@var354 [@expr1073745319 65 ] =@expr1073745320 " void f() { int a; int use = 0; if( use ) { a=0; } else {a=1;} }" ;
1928: const char code2@var355 [@expr1073745321 41 ] =@expr1073745322 " void f() { int a; int use = 0; {a=1;} }" ;
1929: $if $(@expr1073745323 $!@expr1073745324 $assertEquals $(@expr1073745325 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1929 $, $tok_ $(@expr1073745326 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1929 $, code2@var355 $) $, $tok_ $(@expr1073745327 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1929 $, code1@var354 $) $) $) { $return ; }
1930: }
1931:
1932: {
1933: const char code1@var356 [@expr1073745328 73 ] =@expr1073745329 " void f() { int a; bool use = false; if( use ) a=0; else a=1; int c=1; }" ;
1934: const char code2@var357 [@expr1073745330 57 ] =@expr1073745331 " void f() { int a; bool use = false; { a=1; } int c=1; }" ;
1935: $if $(@expr1073745332 $!@expr1073745333 $assertEquals $(@expr1073745334 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1935 $, $tok_ $(@expr1073745335 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1935 $, code2@var357 $) $, $tok_ $(@expr1073745336 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1935 $, code1@var356 $) $) $) { $return ; }
1936: }
1937:
1938: {
1939: const char code1@var358 [@expr1073745337 72 ] =@expr1073745338 " void f() { int a; bool use = true; if( use ) a=0; else a=1; int c=1; }" ;
1940: const char code2@var359 [@expr1073745339 56 ] =@expr1073745340 " void f() { int a; bool use = true; { a=0; } int c=1; }" ;
1941: $if $(@expr1073745341 $!@expr1073745342 $assertEquals $(@expr1073745343 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1941 $, $tok_ $(@expr1073745344 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1941 $, code2@var359 $) $, $tok_ $(@expr1073745345 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1941 $, code1@var358 $) $) $) { $return ; }
1942: }
1943:
1944: {
1945: const char code1@var360 [@expr1073745346 82 ] =@expr1073745347 " void f() { int a; bool use = false; if( use ) a=0; else if( bb ) a=1; int c=1; }" ;
1946: const char code2@var361 [@expr1073745348 91 ] =@expr1073745349 " void f ( ) { int a ; bool use ; use = false ; { if ( bb ) { a = 1 ; } } int c ; c = 1 ; }" ;
1947: $if $(@expr1073745350 $!@expr1073745351 $assertEquals $(@expr1073745352 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1947 $, $tok_ $(@expr1073745353 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1947 $, code2@var361 $) $, $tok_ $(@expr1073745354 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1947 $, code1@var360 $) $) $) { $return ; }
1948: }
1949:
1950: {
1951: const char code1@var362 [@expr1073745355 81 ] =@expr1073745356 " void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; int c=1; }" ;
1952: const char code2@var363 [@expr1073745357 55 ] =@expr1073745358 " void f() { int a; bool use = true; { a=0;} int c=1; }" ;
1953: $if $(@expr1073745359 $!@expr1073745360 $assertEquals $(@expr1073745361 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1953 $, $tok_ $(@expr1073745362 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1953 $, code2@var363 $) $, $tok_ $(@expr1073745363 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1953 $, code1@var362 $) $) $) { $return ; }
1954: }
1955:
1956: {
1957: const char code1@var364 [@expr1073745364 117 ] =@expr1073745365 "void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; else if( cc ) a=33; else { gg = 0; } int c=1; }" ;
1958: const char code2@var365 [@expr1073745366 15 ] =@expr1073745367 "void f ( ) { }" ;
1959: $if $(@expr1073745368 $!@expr1073745369 $assertEquals $(@expr1073745370 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1959 $, code2@var365 $, $tok_ $(@expr1073745371 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1959 $, code1@var364 $) $) $) { $return ; }
1960: }
1961:
1962: {
1963: const char code1@var366 [@expr1073745372 67 ] =@expr1073745373 " void f() { if( aa ) { a=0; } else if( true ) a=1; else { a=2; } }" ;
1964: const char code2@var367 [@expr1073745374 59 ] =@expr1073745375 " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 1 ; } } }" ;
1965: $if $(@expr1073745376 $!@expr1073745377 $assertEquals $(@expr1073745378 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1965 $, $tok_ $(@expr1073745379 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1965 $, code2@var367 $) $, $tok_ $(@expr1073745380 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1965 $, code1@var366 $) $) $) { $return ; }
1966: }
1967:
1968: {
1969: const char code1@var368 [@expr1073745381 68 ] =@expr1073745382 " void f() { if( aa ) { a=0; } else if( false ) a=1; else { a=2; } }" ;
1970: const char code2@var369 [@expr1073745383 59 ] =@expr1073745384 " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 2 ; } } }" ;
1971: $if $(@expr1073745385 $!@expr1073745386 $assertEquals $(@expr1073745387 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1971 $, $tok_ $(@expr1073745388 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1971 $, code2@var369 $) $, $tok_ $(@expr1073745389 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1971 $, code1@var368 $) $) $) { $return ; }
1972: }
1973:
1974: {
1975: const char code1@var370 [@expr1073745390 50 ] =@expr1073745391 "static const int x=1; void f() { if(x) { a=0; } }" ;
1976: $if $(@expr1073745392 $!@expr1073745393 $assertEquals $(@expr1073745394 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1976 $, "void f ( ) { a = 0 ; }" $, $tok_ $(@expr1073745395 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1976 $, code1@var370 $) $) $) { $return ; }
1977: }
1978: }
1979:
1980: void combine_strings ( ) {
1981: const char code1@var371 [@expr1073745397 54 ] =@expr1073745398 "void foo()\n{\nconst char *a =\n{\n\"hello \"\n\"world\"\n};\n}\n"
1982:
|
1987:
1988: ;
1989:
1990: const char code2@var372 [@expr1073745399 51 ] =@expr1073745400 "void foo()\n{\nconst char *a =\n{\n\"hello world\"\n};\n}\n"
1991:
|
1995:
1996: ;
1997: $if $(@expr1073745401 $!@expr1073745402 $assertEquals $(@expr1073745403 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1997 $, $tok_ $(@expr1073745404 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1997 $, code2@var372 $) $, $tok_ $(@expr1073745405 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 1997 $, code1@var371 $) $) $) { $return ; }
1998:
1999: const char code3@var373 [@expr1073745406 25 ] =@expr1073745407 "x = L\"1\" TEXT(\"2\") L\"3\";" ;
2000: $if $(@expr1073745408 $!@expr1073745409 $assertEquals $(@expr1073745410 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2000 $, "x = L\"123\" ;" $, $tok_ $(@expr1073745411 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2000 $, code3@var373 , false , Settings ::@expr3588 Win64@expr3572 $) $) $) { $return ; }
2001:
2002: const char code4@var374 [@expr1073745413 20 ] =@expr1073745414 "x = TEXT(\"1\") L\"2\";" ;
2003: $if $(@expr1073745415 $!@expr1073745416 $assertEquals $(@expr1073745417 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2003 $, "x = L\"1\" L\"2\" ;" $, $tok_ $(@expr1073745418 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2003 $, code4@var374 , false , Settings ::@expr3588 Win64@expr3572 $) $) $) { $return ; }
2004: }
2005:
2006: void combine_wstrings ( ) {
2007: const char code@var375 [@expr1073745420 27 ] =@expr1073745421 "a = L\"hello \"  L\"world\" ;\n" ;
2008:
2009: const char expected@var376 [@expr1073745422 21 ] =@expr1073745423 "a = L\"hello world\" ;" ;
2010:
2011: Tokenizer tokenizer@var377 (@expr1073745424 &@expr1073745425 settings0@var102 , this@expr1073745426 ) ;
2012: std ::@expr1073745427 istringstream istr@var378 (@expr1073745428 code@var375 ) ;
2013: $if $(@expr1073745429 $!@expr1073745430 $assert_ $(@expr1073745431 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2013 $, $(@expr1073745432 tokenizer@var377 .@expr1073745433 tokenize (@expr1073745434 istr@var378 , "test.cpp" ) $) $) $) { $return ; }
2014:
2015: $if $(@expr1073745435 $!@expr1073745436 $assertEquals $(@expr1073745437 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2015 $, expected@var376 $, $(@expr1073745438 tokenizer@var377 .@expr1073745439 tokens (@expr1073745440 ) .@expr1073745441 stringifyList (@expr1073745442 nullptr , false ) $) $) $) { $return ; }
2016: }
2017:
2018: void combine_ustrings ( ) {
2019: const char code@var379 [@expr1073745443 20 ] =@expr1073745444 "abcd = u\"ab\" u\"cd\";" ;
2020:
2021: const char expected@var380 [@expr1073745445 17 ] =@expr1073745446 "abcd = u\"abcd\" ;" ;
2022:
2023: Tokenizer tokenizer@var381 (@expr1073745447 &@expr1073745448 settings0@var102 , this@expr1073745449 ) ;
2024: std ::@expr1073745450 istringstream istr@var382 (@expr1073745451 code@var379 ) ;
2025: $if $(@expr1073745452 $!@expr1073745453 $assert_ $(@expr1073745454 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2025 $, $(@expr1073745455 tokenizer@var381 .@expr1073745456 tokenize (@expr1073745457 istr@var382 , "test.cpp" ) $) $) $) { $return ; }
2026:
2027: $if $(@expr1073745458 $!@expr1073745459 $assertEquals $(@expr1073745460 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2027 $, expected@var380 $, $(@expr1073745461 tokenizer@var381 .@expr1073745462 tokens (@expr1073745463 ) .@expr1073745464 stringifyList (@expr1073745465 nullptr , false ) $) $) $) { $return ; }
2028: }
2029:
2030: void combine_Ustrings ( ) {
2031: const char code@var383 [@expr1073745466 20 ] =@expr1073745467 "abcd = U\"ab\" U\"cd\";" ;
2032:
2033: const char expected@var384 [@expr1073745468 17 ] =@expr1073745469 "abcd = U\"abcd\" ;" ;
2034:
2035: Tokenizer tokenizer@var385 (@expr1073745470 &@expr1073745471 settings0@var102 , this@expr1073745472 ) ;
2036: std ::@expr1073745473 istringstream istr@var386 (@expr1073745474 code@var383 ) ;
2037: $if $(@expr1073745475 $!@expr1073745476 $assert_ $(@expr1073745477 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2037 $, $(@expr1073745478 tokenizer@var385 .@expr1073745479 tokenize (@expr1073745480 istr@var386 , "test.cpp" ) $) $) $) { $return ; }
2038:
2039: $if $(@expr1073745481 $!@expr1073745482 $assertEquals $(@expr1073745483 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2039 $, expected@var384 $, $(@expr1073745484 tokenizer@var385 .@expr1073745485 tokens (@expr1073745486 ) .@expr1073745487 stringifyList (@expr1073745488 nullptr , false ) $) $) $) { $return ; }
2040: }
2041:
2042: void combine_u8strings ( ) {
2043: const char code@var387 [@expr1073745489 22 ] =@expr1073745490 "abcd = u8\"ab\" u8\"cd\";" ;
2044:
2045: const char expected@var388 [@expr1073745491 18 ] =@expr1073745492 "abcd = u8\"abcd\" ;" ;
2046:
2047: Tokenizer tokenizer@var389 (@expr1073745493 &@expr1073745494 settings0@var102 , this@expr1073745495 ) ;
2048: std ::@expr1073745496 istringstream istr@var390 (@expr1073745497 code@var387 ) ;
2049: $if $(@expr1073745498 $!@expr1073745499 $assert_ $(@expr1073745500 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2049 $, $(@expr1073745501 tokenizer@var389 .@expr1073745502 tokenize (@expr1073745503 istr@var390 , "test.cpp" ) $) $) $) { $return ; }
2050:
2051: $if $(@expr1073745504 $!@expr1073745505 $assertEquals $(@expr1073745506 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2051 $, expected@var388 $, $(@expr1073745507 tokenizer@var389 .@expr1073745508 tokens (@expr1073745509 ) .@expr1073745510 stringifyList (@expr1073745511 nullptr , false ) $) $) $) { $return ; }
2052: }
2053:
2054: void combine_mixedstrings ( ) {
2055: const char code@var391 [@expr1073745512 26 ] =@expr1073745513 "abcdef = \"ab\" L\"cd\" \"ef\";" ;
2056:
2057: const char expected@var392 [@expr1073745514 21 ] =@expr1073745515 "abcdef = L\"abcdef\" ;" ;
2058:
2059: Tokenizer tokenizer@var393 (@expr1073745516 &@expr1073745517 settings0@var102 , this@expr1073745518 ) ;
2060: std ::@expr1073745519 istringstream istr@var394 (@expr1073745520 code@var391 ) ;
2061: $if $(@expr1073745521 $!@expr1073745522 $assert_ $(@expr1073745523 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2061 $, $(@expr1073745524 tokenizer@var393 .@expr1073745525 tokenize (@expr1073745526 istr@var394 , "test.cpp" ) $) $) $) { $return ; }
2062:
2063: $if $(@expr1073745527 $!@expr1073745528 $assertEquals $(@expr1073745529 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2063 $, expected@var392 $, $(@expr1073745530 tokenizer@var393 .@expr1073745531 tokens (@expr1073745532 ) .@expr1073745533 stringifyList (@expr1073745534 nullptr , false ) $) $) $) { $return ; }
2064: }
2065:
2066: void double_plus ( ) {
2067: {
2068: const char code1@var395 [@expr1073745535 43 ] =@expr1073745536 "void foo( int a )\n{\na++;\na--;\n++a;\n--a;\n}\n"
2069:
|
2073:
2074: ;
2075: $if $(@expr1073745537 $!@expr1073745538 $assertEquals $(@expr1073745539 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2075 $, "void foo ( int a ) { a ++ ; a -- ; ++ a ; -- a ; }" $, $tok_ $(@expr1073745540 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2075 $, code1@var395 $) $) $) { $return ; }
2076: }
2077: {
2078: const char code1@var396 [@expr1073745541 30 ] =@expr1073745542 "void foo( int a )\n{\na=a+a;\n}\n"
2079:
2080:
2081: ;
2082: $if $(@expr1073745543 $!@expr1073745544 $assertEquals $(@expr1073745545 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2082 $, "void foo ( int a ) { a = a + a ; }" $, $tok_ $(@expr1073745546 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2082 $, code1@var396 $) $) $) { $return ; }
2083: }
2084: {
2085: const char code1@var397 [@expr1073745547 39 ] =@expr1073745548 "void foo( int a, int b )\n{\na=a+++b;\n}\n"
2086:
2087:
2088: ;
2089: $if $(@expr1073745549 $!@expr1073745550 $assertEquals $(@expr1073745551 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2089 $, "void foo ( int a , int b ) { a = a ++ + b ; }" $, $tok_ $(@expr1073745552 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2089 $, code1@var397 $) $) $) { $return ; }
2090: }
2091: {
2092: const char code1@var398 [@expr1073745553 39 ] =@expr1073745554 "void foo( int a, int b )\n{\na=a---b;\n}\n"
2093:
2094:
2095: ;
2096: $if $(@expr1073745555 $!@expr1073745556 $assertEquals $(@expr1073745557 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2096 $, "void foo ( int a , int b ) { a = a -- - b ; }" $, $tok_ $(@expr1073745558 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2096 $, code1@var398 $) $) $) { $return ; }
2097: }
2098: {
2099: const char code1@var399 [@expr1073745559 39 ] =@expr1073745560 "void foo( int a, int b )\n{\na=a--+b;\n}\n"
2100:
2101:
2102: ;
2103: $if $(@expr1073745561 $!@expr1073745562 $assertEquals $(@expr1073745563 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2103 $, "void foo ( int a , int b ) { a = a -- + b ; }" $, $tok_ $(@expr1073745564 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2103 $, code1@var399 $) $) $) { $return ; }
2104: }
2105: {
2106: const char code1@var400 [@expr1073745565 39 ] =@expr1073745566 "void foo( int a, int b )\n{\na=a++-b;\n}\n"
2107:
2108:
2109: ;
2110: $if $(@expr1073745567 $!@expr1073745568 $assertEquals $(@expr1073745569 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2110 $, "void foo ( int a , int b ) { a = a ++ - b ; }" $, $tok_ $(@expr1073745570 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2110 $, code1@var400 $) $) $) { $return ; }
2111: }
2112: {
2113: const char code1@var401 [@expr1073745571 39 ] =@expr1073745572 "void foo( int a, int b )\n{\na=a+--b;\n}\n"
2114:
2115:
2116: ;
2117: $if $(@expr1073745573 $!@expr1073745574 $assertEquals $(@expr1073745575 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2117 $, "void foo ( int a , int b ) { a = a + -- b ; }" $, $tok_ $(@expr1073745576 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2117 $, code1@var401 $) $) $) { $return ; }
2118: }
2119: {
2120: const char code1@var402 [@expr1073745577 39 ] =@expr1073745578 "void foo( int a, int b )\n{\na=a-++b;\n}\n"
2121:
2122:
2123: ;
2124: $if $(@expr1073745579 $!@expr1073745580 $assertEquals $(@expr1073745581 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2124 $, "void foo ( int a , int b ) { a = a - ++ b ; }" $, $tok_ $(@expr1073745582 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2124 $, code1@var402 $) $) $) { $return ; }
2125: }
2126: }
2127:
2128: void redundant_plus ( ) {
2129: {
2130: const char code1@var403 [@expr1073745583 41 ] =@expr1073745584 "void foo( int a, int b )\n{\na=a + + b;\n}\n"
2131:
2132:
2133: ;
2134: $if $(@expr1073745585 $!@expr1073745586 $assertEquals $(@expr1073745587 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2134 $, "void foo ( int a , int b ) { a = a + b ; }" $, $tok_ $(@expr1073745588 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2134 $, code1@var403 $) $) $) { $return ; }
2135: }
2136: {
2137: const char code1@var404 [@expr1073745589 43 ] =@expr1073745590 "void foo( int a, int b )\n{\na=a + + + b;\n}\n"
2138:
2139:
2140: ;
2141: $if $(@expr1073745591 $!@expr1073745592 $assertEquals $(@expr1073745593 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2141 $, "void foo ( int a , int b ) { a = a + b ; }" $, $tok_ $(@expr1073745594 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2141 $, code1@var404 $) $) $) { $return ; }
2142: }
2143: {
2144: const char code1@var405 [@expr1073745595 41 ] =@expr1073745596 "void foo( int a, int b )\n{\na=a + - b;\n}\n"
2145:
2146:
2147: ;
2148: $if $(@expr1073745597 $!@expr1073745598 $assertEquals $(@expr1073745599 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2148 $, "void foo ( int a , int b ) { a = a - b ; }" $, $tok_ $(@expr1073745600 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2148 $, code1@var405 $) $) $) { $return ; }
2149: }
2150: {
2151: const char code1@var406 [@expr1073745601 41 ] =@expr1073745602 "void foo( int a, int b )\n{\na=a - + b;\n}\n"
2152:
2153:
2154: ;
2155: $if $(@expr1073745603 $!@expr1073745604 $assertEquals $(@expr1073745605 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2155 $, "void foo ( int a , int b ) { a = a - b ; }" $, $tok_ $(@expr1073745606 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2155 $, code1@var406 $) $) $) { $return ; }
2156: }
2157: {
2158: const char code1@var407 [@expr1073745607 41 ] =@expr1073745608 "void foo( int a, int b )\n{\na=a - - b;\n}\n"
2159:
2160:
2161: ;
2162: $if $(@expr1073745609 $!@expr1073745610 $assertEquals $(@expr1073745611 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2162 $, "void foo ( int a , int b ) { a = a + b ; }" $, $tok_ $(@expr1073745612 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2162 $, code1@var407 $) $) $) { $return ; }
2163: }
2164: {
2165: const char code1@var408 [@expr1073745613 43 ] =@expr1073745614 "void foo( int a, int b )\n{\na=a - + - b;\n}\n"
2166:
2167:
2168: ;
2169: $if $(@expr1073745615 $!@expr1073745616 $assertEquals $(@expr1073745617 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2169 $, "void foo ( int a , int b ) { a = a + b ; }" $, $tok_ $(@expr1073745618 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2169 $, code1@var408 $) $) $) { $return ; }
2170: }
2171: {
2172: const char code1@var409 [@expr1073745619 43 ] =@expr1073745620 "void foo( int a, int b )\n{\na=a - - - b;\n}\n"
2173:
2174:
2175: ;
2176: $if $(@expr1073745621 $!@expr1073745622 $assertEquals $(@expr1073745623 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2176 $, "void foo ( int a , int b ) { a = a - b ; }" $, $tok_ $(@expr1073745624 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2176 $, code1@var409 $) $) $) { $return ; }
2177: }
2178: }
2179:
2180: void redundant_plus_numbers ( ) {
2181: {
2182: const char code1@var410 [@expr1073745625 34 ] =@expr1073745626 "void foo( int a )\n{\na=a + + 1;\n}\n"
2183:
2184:
2185: ;
2186: $if $(@expr1073745627 $!@expr1073745628 $assertEquals $(@expr1073745629 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2186 $, "void foo ( int a ) { a = a + 1 ; }" $, $tok_ $(@expr1073745630 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2186 $, code1@var410 $) $) $) { $return ; }
2187: }
2188: {
2189: const char code1@var411 [@expr1073745631 36 ] =@expr1073745632 "void foo( int a )\n{\na=a + + + 1;\n}\n"
2190:
2191:
2192: ;
2193: $if $(@expr1073745633 $!@expr1073745634 $assertEquals $(@expr1073745635 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2193 $, "void foo ( int a ) { a = a + 1 ; }" $, $tok_ $(@expr1073745636 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2193 $, code1@var411 $) $) $) { $return ; }
2194: }
2195: {
2196: const char code1@var412 [@expr1073745637 34 ] =@expr1073745638 "void foo( int a )\n{\na=a + - 1;\n}\n"
2197:
2198:
2199: ;
2200: $if $(@expr1073745639 $!@expr1073745640 $assertEquals $(@expr1073745641 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2200 $, "void foo ( int a ) { a = a - 1 ; }" $, $tok_ $(@expr1073745642 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2200 $, code1@var412 $) $) $) { $return ; }
2201: }
2202: {
2203: const char code1@var413 [@expr1073745643 34 ] =@expr1073745644 "void foo( int a )\n{\na=a - + 1;\n}\n"
2204:
2205:
2206: ;
2207: $if $(@expr1073745645 $!@expr1073745646 $assertEquals $(@expr1073745647 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2207 $, "void foo ( int a ) { a = a - 1 ; }" $, $tok_ $(@expr1073745648 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2207 $, code1@var413 $) $) $) { $return ; }
2208: }
2209: {
2210: const char code1@var414 [@expr1073745649 34 ] =@expr1073745650 "void foo( int a )\n{\na=a - - 1;\n}\n"
2211:
2212:
2213: ;
2214: $if $(@expr1073745651 $!@expr1073745652 $assertEquals $(@expr1073745653 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2214 $, "void foo ( int a ) { a = a + 1 ; }" $, $tok_ $(@expr1073745654 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2214 $, code1@var414 $) $) $) { $return ; }
2215: }
2216: {
2217: const char code1@var415 [@expr1073745655 36 ] =@expr1073745656 "void foo( int a )\n{\na=a - + - 1;\n}\n"
2218:
2219:
2220: ;
2221: $if $(@expr1073745657 $!@expr1073745658 $assertEquals $(@expr1073745659 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2221 $, "void foo ( int a ) { a = a + 1 ; }" $, $tok_ $(@expr1073745660 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2221 $, code1@var415 $) $) $) { $return ; }
2222: }
2223: {
2224: const char code1@var416 [@expr1073745661 36 ] =@expr1073745662 "void foo( int a )\n{\na=a - - - 1;\n}\n"
2225:
2226:
2227: ;
2228: $if $(@expr1073745663 $!@expr1073745664 $assertEquals $(@expr1073745665 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2228 $, "void foo ( int a ) { a = a - 1 ; }" $, $tok_ $(@expr1073745666 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2228 $, code1@var416 $) $) $) { $return ; }
2229: }
2230: }
2231:
2232:
2233: void parentheses1 ( ) {
2234: $if $(@expr1073745667 $!@expr1073745668 $assertEquals $(@expr1073745669 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2234 $, "a <= 110 ;" $, $tok_ $(@expr1073745670 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2234 $, "a <= (10+100);" $) $) $) { $return ; }
2235: $if $(@expr1073745671 $!@expr1073745672 $assertEquals $(@expr1073745673 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2235 $, "{ while ( x ( ) == -1 ) { } }" $, $tok_ $(@expr1073745674 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2235 $, "{while((x()) == -1){ }}" $) $) $) { $return ; }
2236: }
2237:
2238: void parenthesesVar ( ) {
2239:
2240: $if $(@expr1073745675 $!@expr1073745676 $assertEquals $(@expr1073745677 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2240 $, "a = p ;" $, $tok_ $(@expr1073745678 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2240 $, "a = (p);" $) $) $) { $return ; }
2241: $if $(@expr1073745679 $!@expr1073745680 $assertEquals $(@expr1073745681 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2241 $, "void f ( ) { if ( a < p ) { } }" $, $tok_ $(@expr1073745682 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2241 $, "void f(){if(a<(p)){}}" $) $) $) { $return ; }
2242: $if $(@expr1073745683 $!@expr1073745684 $assertEquals $(@expr1073745685 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2242 $, "void f ( ) { int p ; if ( p == -1 ) { } }" $, $tok_ $(@expr1073745686 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2242 $, "void f(){int p; if((p)==-1){}}" $) $) $) { $return ; }
2243: $if $(@expr1073745687 $!@expr1073745688 $assertEquals $(@expr1073745689 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2243 $, "void f ( ) { int p ; if ( -1 == p ) { } }" $, $tok_ $(@expr1073745690 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2243 $, "void f(){int p; if(-1==(p)){}}" $) $) $) { $return ; }
2244: $if $(@expr1073745691 $!@expr1073745692 $assertEquals $(@expr1073745693 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2244 $, "void f ( ) { int p ; if ( p ) { } }" $, $tok_ $(@expr1073745694 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2244 $, "void f(){int p; if((p)){}}" $) $) $) { $return ; }
2245: $if $(@expr1073745695 $!@expr1073745696 $assertEquals $(@expr1073745697 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2245 $, "void f ( ) { return p ; }" $, $tok_ $(@expr1073745698 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2245 $, "void f(){return (p);}" $) $) $) { $return ; }
2246: $if $(@expr1073745699 $!@expr1073745700 $assertEquals $(@expr1073745701 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2246 $, "void f ( ) { int * p ; if ( * p == 0 ) { } }" $, $tok_ $(@expr1073745702 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2246 $, "void f(){int *p; if (*(p) == 0) {}}" $) $) $) { $return ; }
2247: $if $(@expr1073745703 $!@expr1073745704 $assertEquals $(@expr1073745705 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2247 $, "void f ( ) { int * p ; if ( * p == 0 ) { } }" $, $tok_ $(@expr1073745706 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2247 $, "void f(){int *p; if (*p == 0) {}}" $) $) $) { $return ; }
2248: $if $(@expr1073745707 $!@expr1073745708 $assertEquals $(@expr1073745709 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2248 $, "void f ( int & p ) { p = 1 ; }" $, $tok_ $(@expr1073745710 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2248 $, "void f(int &p) {(p) = 1;}" $) $) $) { $return ; }
2249: $if $(@expr1073745711 $!@expr1073745712 $assertEquals $(@expr1073745713 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2249 $, "void f ( ) { int p [ 10 ] ; p [ 0 ] = 1 ; }" $, $tok_ $(@expr1073745714 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2249 $, "void f(){int p[10]; (p)[0] = 1;}" $) $) $) { $return ; }
2250: $if $(@expr1073745715 $!@expr1073745716 $assertEquals $(@expr1073745717 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2250 $, "void f ( ) { int p ; if ( p == 0 ) { } }" $, $tok_ $(@expr1073745718 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2250 $, "void f(){int p; if ((p) == 0) {}}" $) $) $) { $return ; }
2251: $if $(@expr1073745719 $!@expr1073745720 $assertEquals $(@expr1073745721 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2251 $, "void f ( ) { int * p ; * p = 1 ; }" $, $tok_ $(@expr1073745722 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2251 $, "void f(){int *p; *(p) = 1;}" $) $) $) { $return ; }
2252: $if $(@expr1073745723 $!@expr1073745724 $assertEquals $(@expr1073745725 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2252 $, "void f ( ) { int p ; if ( p ) { } p = 1 ; }" $, $tok_ $(@expr1073745726 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2252 $, "void f(){int p; if ( p ) { } (p) = 1;}" $) $) $) { $return ; }
2253: $if $(@expr1073745727 $!@expr1073745728 $assertEquals $(@expr1073745729 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2253 $, "void f ( ) { a . b ; }" $, $tok_ $(@expr1073745730 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2253 $, "void f ( ) { ( & a ) -> b ; }" $) $) $) { $return ; }
2254:
2255:
2256: $if $(@expr1073745731 $!@expr1073745732 $assertEquals $(@expr1073745733 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2256 $, "b = a ;" $, $tok_ $(@expr1073745734 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2256 $, "b = (char)a;" $) $) $) { $return ; }
2257: $if $(@expr1073745735 $!@expr1073745736 $assertEquals $(@expr1073745737 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2257 $, "cast < char * > ( p ) ;" $, $tok_ $(@expr1073745738 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2257 $, "cast<char *>(p);" $) $) $) { $return ; }
2258: $if $(@expr1073745739 $!@expr1073745740 $assertEquals $(@expr1073745741 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2258 $, "void f ( ) { return ( a + b ) * c ; }" $, $tok_ $(@expr1073745742 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2258 $, "void f(){return (a+b)*c;}" $) $) $) { $return ; }
2259: $if $(@expr1073745743 $!@expr1073745744 $assertEquals $(@expr1073745745 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2259 $, "void f ( ) { int p ; if ( 2 * p == 0 ) { } }" $, $tok_ $(@expr1073745746 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2259 $, "void f(){int p; if (2*p == 0) {}}" $) $) $) { $return ; }
2260: $if $(@expr1073745747 $!@expr1073745748 $assertEquals $(@expr1073745749 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2260 $, "void f ( ) { DIR * f ; f = opendir ( dirname ) ; if ( closedir ( f ) ) { } }" $, $tok_ $(@expr1073745750 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2260 $, "void f(){DIR * f = opendir(dirname);if (closedir(f)){}}" $) $) $) { $return ; }
2261: $if $(@expr1073745751 $!@expr1073745752 $assertEquals $(@expr1073745753 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2261 $, "void foo ( int p ) { if ( p >= 0 ) { ; } }" $, $tok_ $(@expr1073745754 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2261 $, "void foo(int p){if((p)>=0);}" $) $) $) { $return ; }
2262: }
2263:
2264: void declareVar ( ) {
2265: const char code@var417 [@expr1073745755 42 ] =@expr1073745756 "void f ( ) { char str [ 100 ] = \"100\" ; }" ;
2266: $if $(@expr1073745757 $!@expr1073745758 $assertEquals $(@expr1073745759 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2266 $, code@var417 $, $tok_ $(@expr1073745760 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2266 $, code@var417 $) $) $) { $return ; }
2267: }
2268:
2269: void declareArray ( ) {
2270: const char code1@var418 [@expr1073745761 38 ] =@expr1073745762 "void f ( ) { char str [ ] = \"100\" ; }" ;
2271: const char expected1@var419 [@expr1073745763 40 ] =@expr1073745764 "void f ( ) { char str [ 4 ] = \"100\" ; }" ;
2272: $if $(@expr1073745765 $!@expr1073745766 $assertEquals $(@expr1073745767 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2272 $, expected1@var419 $, $tok_ $(@expr1073745768 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2272 $, code1@var418 $) $) $) { $return ; }
2273:
2274: const char code2@var420 [@expr1073745769 23 ] =@expr1073745770 "char str [ ] = \"\\x00\";" ;
2275: const char expected2@var421 [@expr1073745771 24 ] =@expr1073745772 "char str [ 2 ] = \"\\0\" ;" ;
2276: $if $(@expr1073745773 $!@expr1073745774 $assertEquals $(@expr1073745775 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2276 $, expected2@var421 $, $tok_ $(@expr1073745776 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2276 $, code2@var420 $) $) $) { $return ; }
2277:
2278: const char code3@var422 [@expr1073745777 21 ] =@expr1073745778 "char str [ ] = \"\\0\";" ;
2279: const char expected3@var423 [@expr1073745779 24 ] =@expr1073745780 "char str [ 2 ] = \"\\0\" ;" ;
2280: $if $(@expr1073745781 $!@expr1073745782 $assertEquals $(@expr1073745783 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2280 $, expected3@var423 $, $tok_ $(@expr1073745784 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2280 $, code3@var422 $) $) $) { $return ; }
2281:
2282: const char code4@var424 [@expr1073745785 23 ] =@expr1073745786 "char str [ ] = \"\\n\\n\";" ;
2283: const char expected4@var425 [@expr1073745787 26 ] =@expr1073745788 "char str [ 3 ] = \"\\n\\n\" ;" ;
2284: $if $(@expr1073745789 $!@expr1073745790 $assertEquals $(@expr1073745791 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2284 $, expected4@var425 $, $tok_ $(@expr1073745792 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2284 $, code4@var424 $) $) $) { $return ; }
2285: }
2286:
2287: void dontRemoveIncrement ( ) {
2288: {
2289: const char code@var426 [@expr1073745793 84 ] =@expr1073745794 "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    a++;\n}\n"
2290:
|
2295:
2296: ;
2297: $if $(@expr1073745795 $!@expr1073745796 $assertEquals $(@expr1073745797 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2297 $, "void f ( int a ) { if ( a > 10 ) { a = 5 ; } else { a = 10 ; } a ++ ; }" $, $tok_ $(@expr1073745798 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2297 $, code@var426 $) $) $) { $return ; }
2298: }
2299:
2300: {
2301: const char code@var427 [@expr1073745799 84 ] =@expr1073745800 "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    ++a;\n}\n"
2302:
|
2307:
2308: ;
2309: $if $(@expr1073745801 $!@expr1073745802 $assertEquals $(@expr1073745803 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2309 $, "void f ( int a ) { if ( a > 10 ) { a = 5 ; } else { a = 10 ; } ++ a ; }" $, $tok_ $(@expr1073745804 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2309 $, code@var427 $) $) $) { $return ; }
2310: }
2311: }
2312:
2313: void removePostIncrement ( ) {
2314: const char code@var428 [@expr1073745805 71 ] =@expr1073745806 "void f(int &c)\n{\n    c = 0;\n    c++;\n    if (c>0) { c++; }\n    c++;\n}\n"
2315:
|
2319:
2320: ;
2321: $todoAssertEquals $(@expr1073745807 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2321 $, "void f ( int & c ) { c = 3 ; { ; } ; }" $, "void f ( int & c ) { c = 1 ; { c ++ ; } c ++ ; }" $, $tok_ $(@expr1073745808 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2321 $, code@var428 $) $)
2322: ;
2323: }
2324:
2325:
2326: void removePreIncrement ( ) {
2327: {
2328: const char code@var429 [@expr1073745809 71 ] =@expr1073745810 "void f(int &c)\n{\n    c = 0;\n    ++c;\n    if (c>0) { ++c; }\n    ++c;\n}\n"
2329:
|
2333:
2334: ;
2335: $todoAssertEquals $(@expr1073745811 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2335 $, "void f ( int & c ) { c = 3 ; { ; } ; }" $, "void f ( int & c ) { c = 1 ; { ++ c ; } ++ c ; }" $, $tok_ $(@expr1073745812 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2335 $, code@var429 $) $)
2336: ;
2337: }
2338:
2339: {
2340: const char code@var430 [@expr1073745813 40 ] =@expr1073745814 "void f()\n{\n char a[] = \"p\";\n ++a[0];\n}\n"
2341:
2342:
2343:
2344: ;
2345: $if $(@expr1073745815 $!@expr1073745816 $assertEquals $(@expr1073745817 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2345 $, "void f ( ) { char a [ 2 ] = \"p\" ; ++ a [ 0 ] ; }" $, $tok_ $(@expr1073745818 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2345 $, code@var430 $) $) $) { $return ; }
2346: }
2347: }
2348:
2349: void elseif1 ( ) {
2350: const char code@var431 [@expr1073745819 55 ] =@expr1073745820 "void f(){ if(x) {} else if(ab) { cd } else { ef }gh; }" ;
2351: $if $(@expr1073745821 $!@expr1073745822 $assertEquals $(@expr1073745823 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2351 $, "\n\n##file 0\n1: void f ( ) { if ( x ) { } else { if ( ab ) { cd } else { ef } } gh ; }\n" $, $tokenizeDebugListing_ $(@expr1073745824 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2351 $, code@var431 $) $) $) { $return ; }
2352:
2353:
2354: $if $(@expr1073745825 $!@expr1073745826 $assertEquals $(@expr1073745827 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2354 $, "\n\n##file 0\n1: void f ( ) { if ( x ) { } else { if ( x ) { } } }\n" $, $tokenizeDebugListing_ $(@expr1073745828 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2354 $, "void f(){ if(x) {} else if (x) { } }" $) $) $) { $return ; }
2355:
2356: {
2357: const char src@var432 [@expr1073745829 111 ] =@expr1073745830 "void f(int g,int f) {\nif(g==1) {poo();}\nelse if( g == 2 )\n{\n if( f == 0 ){coo();}\n else if( f==1)\n  goo();\n}\n}"
2358:
|
2364:
2365: ;
2366:
2367: const char expected@var433 [@expr1073745831 149 ] =@expr1073745832 "void f ( int g , int f ) { if ( g == 1 ) { poo ( ) ; } else { if ( g == 2 ) { if ( f == 0 ) { coo ( ) ; } else { if ( f == 1 ) { goo ( ) ; } } } } }"
2368:
|
2381:
2382: ;
2383: $if $(@expr1073745833 $!@expr1073745834 $assertEquals $(@expr1073745835 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2383 $, $tok_ $(@expr1073745836 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2383 $, expected@var433 $) $, $tok_ $(@expr1073745837 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2383 $, src@var432 $) $) $) { $return ; }
2384: }
2385:
2386:
2387: {
2388: const char src@var434 [@expr1073745838 56 ] =@expr1073745839 "( []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() );" ;
2389: const char expected@var435 [@expr1073745840 91 ] =@expr1073745841 "\n\n##file 0\n1: ( [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ) ;\n" ;
2390: $if $(@expr1073745842 $!@expr1073745843 $assertEquals $(@expr1073745844 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2390 $, expected@var435 $, $tokenizeDebugListing_ $(@expr1073745845 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2390 $, src@var434 $) $) $) { $return ; }
2391: }
2392: {
2393: const char src@var436 [@expr1073745846 56 ] =@expr1073745847 "[ []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() ];" ;
2394: const char expected@var437 [@expr1073745848 91 ] =@expr1073745849 "\n\n##file 0\n1: [ [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ] ;\n" ;
2395: $if $(@expr1073745850 $!@expr1073745851 $assertEquals $(@expr1073745852 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2395 $, expected@var437 $, $tokenizeDebugListing_ $(@expr1073745853 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2395 $, src@var436 $) $) $) { $return ; }
2396: }
2397: {
2398: const char src@var438 [@expr1073745854 57 ] =@expr1073745855 "= { []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() }" ;
2399: const char expected@var439 [@expr1073745856 91 ] =@expr1073745857 "\n\n##file 0\n1: = { [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) }\n" ;
2400: $if $(@expr1073745858 $!@expr1073745859 $assertEquals $(@expr1073745860 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2400 $, expected@var439 $, $tokenizeDebugListing_ $(@expr1073745861 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2400 $, src@var438 $) $) $) { $return ; }
2401: }
2402: }
2403:
2404:
2405: unsigned int sizeofFromTokenizer ( const char type@var440 [ ] ) {
2406: Tokenizer tokenizer@var441 (@expr1073745862 &@expr1073745863 settings0@var102 , this@expr1073745864 ) ;
2407: tokenizer@var441 .@expr1073745865 fillTypeSizes (@expr1073745866 ) ;
2408: Token tok1@var442 ;
2409: tok1@var442 .@expr1073745867 str (@expr1073745868 type@var440 ) ;
2410: return tokenizer@var441 .@expr1073745869 sizeOfType (@expr1073745870 &@expr1073745871 tok1@var442 ) ;
2411: }
2412:
2413:
2414:
2415: void sizeof_array ( ) {
2416: const char * code@var443 ;
2417:
2418: code@var443 =@expr1073745872 "void foo()\n{\n    int i[4];\n    sizeof(i);\n    sizeof(*i);\n}\n"
2419:
|
2422:
2423: ;
2424: $if $(@expr1073745873 $!@expr1073745874 $assertEquals $(@expr1073745875 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2424 $, "void foo ( ) { int i [ 4 ] ; 16 ; 4 ; }" $, $tok_ $(@expr1073745876 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2424 $, code@var443 $) $) $) { $return ; }
2425:
2426: code@var443 =@expr1073745877 "static int i[4];\nvoid f()\n{\n    int i[10];\n    sizeof(i);\n}\n"
2427:
|
2430:
2431: ;
2432: $if $(@expr1073745878 $!@expr1073745879 $assertEquals $(@expr1073745880 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2432 $, "static int i [ 4 ] ; void f ( ) { int i [ 10 ] ; 40 ; }" $, $tok_ $(@expr1073745881 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2432 $, code@var443 $) $) $) { $return ; }
2433: {
2434: code@var443 =@expr1073745882 "int i[10];\nsizeof(i[0]);\n"
2435: ;
2436: $if $(@expr1073745883 $!@expr1073745884 $assertEquals $(@expr1073745885 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2436 $, "int i [ 10 ] ; 4 ;" $, $tok_ $(@expr1073745886 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2436 $, code@var443 $) $) $) { $return ; }
2437:
2438: code@var443 =@expr1073745887 "int i[10];\nsizeof i[0];\n"
2439: ;
2440: $if $(@expr1073745888 $!@expr1073745889 $assertEquals $(@expr1073745890 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2440 $, "int i [ 10 ] ; 4 ;" $, $tok_ $(@expr1073745891 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2440 $, code@var443 $) $) $) { $return ; }
2441: }
2442:
2443: code@var443 =@expr1073745892 "char i[2][20];\nsizeof(i[1]);\nsizeof(i);"
2444:
2445: ;
2446: $if $(@expr1073745893 $!@expr1073745894 $assertEquals $(@expr1073745895 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2446 $, "char i [ 2 ] [ 20 ] ; 20 ; 40 ;" $, $tok_ $(@expr1073745896 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2446 $, code@var443 $) $) $) { $return ; }
2447:
2448: code@var443 =@expr1073745897 "char i[2][20][30];\nsizeof(i[1][4][2]);\nsizeof(***i);\nsizeof(i[1][4]);\nsizeof(**i);\nsizeof(i[1]);\nsizeof(*i);\nsizeof(i);"
2449:
|
2454:
2455: ;
2456: $if $(@expr1073745898 $!@expr1073745899 $assertEquals $(@expr1073745900 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2456 $, "char i [ 2 ] [ 20 ] [ 30 ] ; 1 ; 1 ; 30 ; 30 ; 600 ; 600 ; 1200 ;" $, $tok_ $(@expr1073745901 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2456 $, code@var443 $) $) $) { $return ; }
2457:
2458: code@var443 =@expr1073745902 "sizeof(char[20]);\nsizeof(char[20][3]);\nsizeof(char[unknown][3]);"
2459:
2460: ;
2461: $if $(@expr1073745903 $!@expr1073745904 $assertEquals $(@expr1073745905 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2461 $, "20 ; 60 ; sizeof ( char [ unknown ] [ 3 ] ) ;" $, $tok_ $(@expr1073745906 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2461 $, code@var443 $) $) $) { $return ; }
2462:
2463: code@var443 =@expr1073745907 "char(*Helper())[1];\nsizeof(*Helper());\n"
2464: ;
2465: $todoAssertEquals $(@expr1073745908 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2465 $, "char ( * Helper ( ) ) [ 1 ] ; 1 ;" $, "char ( * Helper ( ) ) [ 1 ] ; sizeof ( * Helper ( ) ) ;" $, $tok_ $(@expr1073745909 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2465 $, code@var443 $) $) ;
2466: }
2467:
2468: void sizeof5 ( ) {
2469: const char code@var444 [@expr1073745910 70 ] =@expr1073745911
2470: "{const char * names[2];for (int i = 0; i != sizeof(names[0]); i++){}}"
2471:
2472:
2473:
2474: ;
2475: std ::@expr1073745912 ostringstream expected@var445 ;
2476: expected@var445 <<@expr1073745913 "{ const char * names [ 2 ] ; for ( int i = 0 ; i != " <<@expr1073745914 sizeofFromTokenizer (@expr1073745915 "*" ) <<@expr1073745916 " ; i ++ ) { } }" ;
2477: $if $(@expr1073745917 $!@expr1073745918 $assertEquals $(@expr1073745919 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2477 $, expected@var445 .@expr1073745920 str (@expr1073745921 ) $, $tok_ $(@expr1073745922 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2477 $, code@var444 $) $) $) { $return ; }
2478: }
2479:
2480: void sizeof6 ( ) {
2481: const char code@var446 [@expr1073745923 20 ] =@expr1073745924 ";int i;\nsizeof(i);\n"
2482: ;
2483:
2484: std ::@expr1073745925 ostringstream expected@var447 ;
2485: expected@var447 <<@expr1073745926 "; int i ; " <<@expr1073745927 sizeof (@expr1073745928 int ) <<@expr1073745929 " ;" ;
2486:
2487: $if $(@expr1073745930 $!@expr1073745931 $assertEquals $(@expr1073745932 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2487 $, expected@var447 .@expr1073745933 str (@expr1073745934 ) $, $tok_ $(@expr1073745935 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2487 $, code@var446 $) $) $) { $return ; }
2488: }
2489:
2490: void sizeof7 ( ) {
2491: const char code@var448 [@expr1073745938 29 ] =@expr1073745939 ";INT32 i[10];\nsizeof(i[0]);\n"
2492: ;
2493: $if $(@expr1073745940 $!@expr1073745941 $assertEquals $(@expr1073745942 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2493 $, "; INT32 i [ 10 ] ; sizeof ( i [ 0 ] ) ;" $, $tok_ $(@expr1073745943 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2493 $, code@var448 , true , Settings ::@expr1073745944 Native@expr1073745936 $) $) $) { $return ; }
2494: $if $(@expr1073745945 $!@expr1073745946 $assertEquals $(@expr1073745947 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2494 $, "; int i [ 10 ] ; 4 ;" $, $tokWithWindows_ $(@expr1073745948 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2494 $, code@var448 , true , Settings ::@expr1073745949 Win32A@expr1073745937 $) $) $) { $return ; }
2495: }
2496:
2497: void sizeof8 ( ) {
2498: {
2499: const char code@var449 [@expr1073745950 53 ] =@expr1073745951 "void f()\n{\n  char* ptrs[2];\n  a = sizeof( ptrs );\n}\n"
2500:
2501:
2502:
2503: ;
2504: std ::@expr1073745952 ostringstream oss@var450 ;
2505: oss@var450 <<@expr1073745953 (@expr1073745954 sizeofFromTokenizer (@expr4131 "*" ) *@expr1073745956 2 ) ;
2506: $if $(@expr1073745957 $!@expr1073745958 $assertEquals $(@expr1073745959 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2506 $, "void f ( ) { char * ptrs [ 2 ] ; a = " +@expr1073745960 oss@var450 .@expr1073745961 str (@expr1073745962 ) +@expr1073745963 " ; }" $, $tok_ $(@expr1073745964 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2506 $, code@var449 $) $) $) { $return ; }
2507: }
2508:
2509: {
2510: const char code@var451 [@expr1073745965 54 ] =@expr1073745966 "void f()\n{\n  char* ptrs[55];\n  a = sizeof( ptrs );\n}\n"
2511:
2512:
2513:
2514: ;
2515: std ::@expr1073745967 ostringstream oss@var452 ;
2516: oss@var452 <<@expr1073745968 (@expr1073745969 sizeofFromTokenizer (@expr4131 "*" ) *@expr1073745971 55 ) ;
2517: $if $(@expr1073745972 $!@expr1073745973 $assertEquals $(@expr1073745974 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2517 $, "void f ( ) { char * ptrs [ 55 ] ; a = " +@expr1073745975 oss@var452 .@expr1073745976 str (@expr1073745977 ) +@expr1073745978 " ; }" $, $tok_ $(@expr1073745979 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2517 $, code@var451 $) $) $) { $return ; }
2518: }
2519:
2520:
2521: {
2522: const char code@var453 [@expr1073745980 50 ] =@expr1073745981 "void f()\n{\n  char* ptrs;\n  a = sizeof( ptrs );\n}\n"
2523:
2524:
2525:
2526: ;
2527: std ::@expr1073745982 ostringstream oss@var454 ;
2528: oss@var454 <<@expr1073745983 sizeofFromTokenizer (@expr4131 "*" ) ;
2529: $if $(@expr1073745985 $!@expr1073745986 $assertEquals $(@expr1073745987 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2529 $, "void f ( ) { a = " +@expr1073745988 oss@var454 .@expr1073745989 str (@expr1073745990 ) +@expr1073745991 " ; }" $, $tok_ $(@expr1073745992 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2529 $, code@var453 $) $) $) { $return ; }
2530: }
2531: }
2532:
2533: void sizeof9 ( ) {
2534:
2535: {
2536: const char code@var455 [@expr1073745993 38 ] =@expr1073745994 "; const char *str = \"1\"; sizeof(str);" ;
2537:
2538: std ::@expr1073745995 ostringstream expected@var456 ;
2539: expected@var456 <<@expr1073745996 "; const char * str ; str = \"1\" ; " <<@expr1073745997 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073745999 " ;" ;
2540:
2541: $if $(@expr1073746000 $!@expr1073746001 $assertEquals $(@expr1073746002 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2541 $, expected@var456 .@expr1073746003 str (@expr1073746004 ) $, $tok_ $(@expr1073746005 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2541 $, code@var455 $) $) $) { $return ; }
2542: }
2543:
2544: {
2545: const char code@var457 [@expr1073746006 39 ] =@expr1073746007 "; const char str[] = \"1\"; sizeof(str);" ;
2546:
2547: std ::@expr1073746008 ostringstream expected@var458 ;
2548: expected@var458 <<@expr1073746009 "; const char str [ 2 ] = \"1\" ; " <<@expr1073746010 sizeofFromTokenizer (@expr4187 "char" ) *@expr1073746012 2 <<@expr1073746013 " ;" ;
2549:
2550: $if $(@expr1073746014 $!@expr1073746015 $assertEquals $(@expr1073746016 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2550 $, expected@var458 .@expr1073746017 str (@expr1073746018 ) $, $tok_ $(@expr1073746019 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2550 $, code@var457 $) $) $) { $return ; }
2551: }
2552:
2553: {
2554:
2555: const char code@var459 [@expr1073746020 41 ] =@expr1073746021 "; const char str[] = {'1'}; sizeof(str);" ;
2556: $if $(@expr1073746022 $!@expr1073746023 $assertEquals $(@expr1073746024 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2556 $, "; const char str [ 1 ] = { '1' } ; 1 ;" $, $tok_ $(@expr1073746025 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2556 $, code@var459 $) $) $) { $return ; }
2557: }
2558:
2559: {
2560:
2561: const char code@var460 [@expr1073746026 43 ] =@expr1073746027 "; const char str[] = {\"abc\"}; sizeof(str);" ;
2562: $if $(@expr1073746028 $!@expr1073746029 $assertEquals $(@expr1073746030 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2562 $, "; const char str [ 4 ] = \"abc\" ; 4 ;" $, $tok_ $(@expr1073746031 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2562 $, code@var460 $) $) $) { $return ; }
2563: }
2564:
2565:
2566: {
2567: std ::@expr1073746032 ostringstream expected@var461 ;
2568: expected@var461 <<@expr1073746033 "; " <<@expr1073746034 (@expr1073746035 sizeof (@expr1073746036 "123" ) ) <<@expr1073746037 " ;" ;
2569:
2570: $if $(@expr1073746038 $!@expr1073746039 $assertEquals $(@expr1073746040 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2570 $, expected@var461 .@expr4217 str (@expr4218 ) $, $tok_ $(@expr1073746043 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2570 $, "; sizeof \"123\";" $) $) $) { $return ; }
2571: $if $(@expr1073746044 $!@expr1073746045 $assertEquals $(@expr1073746046 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2571 $, expected@var461 .@expr4217 str (@expr4218 ) $, $tok_ $(@expr1073746049 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2571 $, "; sizeof(\"123\");" $) $) $) { $return ; }
2572: }
2573:
2574: {
2575: const char code@var462 [@expr1073746050 68 ] =@expr1073746051 "void f(char *a,char *b, char *c){g(sizeof(a),sizeof(b),sizeof(c));}"
2576: ;
2577: std ::@expr1073746052 ostringstream expected@var463 ;
2578: expected@var463 <<@expr1073746053 "void f ( char * a , char * b , char * c ) { g ( " <<@expr1073746054
2579: sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746056 " , " <<@expr1073746057 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746059 " , " <<@expr1073746060 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746062 " ) ; }" ;
2580: $if $(@expr1073746063 $!@expr1073746064 $assertEquals $(@expr1073746065 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2580 $, expected@var463 .@expr1073746066 str (@expr1073746067 ) $, $tok_ $(@expr1073746068 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2580 $, code@var462 $) $) $) { $return ; }
2581: }
2582:
2583: {
2584: const char code@var464 [@expr1073746069 65 ] =@expr1073746070 "void f(char a,char b, char c){g(sizeof(a),sizeof(b),sizeof(c));}"
2585: ;
2586: std ::@expr1073746071 ostringstream expected@var465 ;
2587: expected@var465 <<@expr1073746072 "void f ( char a , char b , char c ) { g ( " <<@expr1073746073
2588: sizeofFromTokenizer (@expr4187 "char" ) <<@expr1073746075 " , " <<@expr1073746076 sizeofFromTokenizer (@expr4187 "char" ) <<@expr1073746078 " , " <<@expr1073746079 sizeofFromTokenizer (@expr4187 "char" ) <<@expr1073746081 " ) ; }" ;
2589: $if $(@expr1073746082 $!@expr1073746083 $assertEquals $(@expr1073746084 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2589 $, expected@var465 .@expr1073746085 str (@expr1073746086 ) $, $tok_ $(@expr1073746087 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2589 $, code@var464 $) $) $) { $return ; }
2590: }
2591:
2592: {
2593: const char code@var466 [@expr1073746088 86 ] =@expr1073746089 "void f(const char *a,const char *b, const char *c){g(sizeof(a),sizeof(b),sizeof(c));}"
2594: ;
2595: std ::@expr1073746090 ostringstream expected@var467 ;
2596: expected@var467 <<@expr1073746091 "void f ( const char * a , const char * b , const char * c ) { g ( " <<@expr1073746092
2597: sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746094 " , " <<@expr1073746095 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746097 " , " <<@expr1073746098 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746100 " ) ; }" ;
2598: $if $(@expr1073746101 $!@expr1073746102 $assertEquals $(@expr1073746103 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2598 $, expected@var467 .@expr1073746104 str (@expr1073746105 ) $, $tok_ $(@expr1073746106 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2598 $, code@var466 $) $) $) { $return ; }
2599: }
2600:
2601: {
2602: const char code@var468 [@expr1073746107 77 ] =@expr1073746108 "void f(char a[10],char b[10], char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
2603: ;
2604: std ::@expr1073746109 ostringstream expected@var469 ;
2605: expected@var469 <<@expr1073746110 "void f ( char a [ 10 ] , char b [ 10 ] , char c [ 10 ] ) { g ( " <<@expr1073746111
2606: sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746113 " , " <<@expr1073746114 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746116 " , " <<@expr1073746117 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746119 " ) ; }" ;
2607: $if $(@expr1073746120 $!@expr1073746121 $assertEquals $(@expr1073746122 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2607 $, expected@var469 .@expr1073746123 str (@expr1073746124 ) $, $tok_ $(@expr1073746125 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2607 $, code@var468 $) $) $) { $return ; }
2608: }
2609:
2610: {
2611: const char code@var470 [@expr1073746126 95 ] =@expr1073746127 "void f(const char a[10],const char b[10], const char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
2612: ;
2613: std ::@expr1073746128 ostringstream expected@var471 ;
2614: expected@var471 <<@expr1073746129 "void f ( const char a [ 10 ] , const char b [ 10 ] , const char c [ 10 ] ) { g ( "
2615:
2616: <<@expr1073746130
2617: sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746132 " , " <<@expr1073746133 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746135 " , " <<@expr1073746136 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746138 " ) ; }" ;
2618: $if $(@expr1073746139 $!@expr1073746140 $assertEquals $(@expr1073746141 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2618 $, expected@var471 .@expr1073746142 str (@expr1073746143 ) $, $tok_ $(@expr1073746144 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2618 $, code@var470 $) $) $) { $return ; }
2619: }
2620:
2621: {
2622: const char code@var472 [@expr1073746145 98 ] =@expr1073746146 "void f(const char *a[10],const char *b[10], const char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
2623: ;
2624: std ::@expr1073746147 ostringstream expected@var473 ;
2625: expected@var473 <<@expr1073746148 "void f ( const char * a [ 10 ] , const char * b [ 10 ] , const char * c [ 10 ] ) { g ( "
2626:
2627: <<@expr1073746149
2628: sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746151 " , " <<@expr1073746152 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746154 " , " <<@expr1073746155 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746157 " ) ; }" ;
2629: $if $(@expr1073746158 $!@expr1073746159 $assertEquals $(@expr1073746160 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2629 $, expected@var473 .@expr1073746161 str (@expr1073746162 ) $, $tok_ $(@expr1073746163 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2629 $, code@var472 $) $) $) { $return ; }
2630: }
2631:
2632: {
2633: const char code@var474 [@expr1073746164 80 ] =@expr1073746165 "void f(char *a[10],char *b[10], char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
2634: ;
2635: std ::@expr1073746166 ostringstream expected@var475 ;
2636: expected@var475 <<@expr1073746167 "void f ( char * a [ 10 ] , char * b [ 10 ] , char * c [ 10 ] ) { g ( " <<@expr1073746168
2637: sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746170 " , " <<@expr1073746171 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746173 " , " <<@expr1073746174 sizeofFromTokenizer (@expr4174 "*" ) <<@expr1073746176 " ) ; }" ;
2638: $if $(@expr1073746177 $!@expr1073746178 $assertEquals $(@expr1073746179 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2638 $, expected@var475 .@expr1073746180 str (@expr1073746181 ) $, $tok_ $(@expr1073746182 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2638 $, code@var474 $) $) $) { $return ; }
2639: }
2640:
2641: {
2642: std ::@expr1073746183 ostringstream expected@var476 ;
2643: expected@var476 <<@expr1073746184 "; " <<@expr1073746185 sizeof (@expr1073746186 "\"quote\"" ) ;
2644: $if $(@expr1073746187 $!@expr1073746188 $assertEquals $(@expr1073746189 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2644 $, expected@var476 .@expr1073746190 str (@expr1073746191 ) $, $tok_ $(@expr1073746192 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2644 $, "; sizeof(\"\\\"quote\\\"\")" $) $) $) { $return ; }
2645: }
2646:
2647: {
2648: std ::@expr1073746193 ostringstream expected@var477 ;
2649: expected@var477 <<@expr1073746194 "void f ( ) { char str [ 100 ] = \"100\" ; " <<@expr1073746195 sizeofFromTokenizer (@expr4187 "char" ) *@expr1073746197 100 <<@expr1073746198 " }" ;
2650: $if $(@expr1073746199 $!@expr1073746200 $assertEquals $(@expr1073746201 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2650 $, expected@var477 .@expr1073746202 str (@expr1073746203 ) $, $tok_ $(@expr1073746204 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2650 $, "void f ( ) { char str [ 100 ] = \"100\" ; sizeof ( str ) }" $) $) $) { $return ; }
2651: }
2652: }
2653:
2654: void sizeof10 ( ) {
2655:
2656: const char code@var478 [@expr1073746206 78 ] =@expr1073746207 "int m ; compat_ulong_t um ; long size ; size = sizeof ( m ) / sizeof ( um ) ;"
2657:
2658: ;
2659:
2660: $if $(@expr1073746208 $!@expr1073746209 $assertEquals $(@expr1073746210 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2660 $, code@var478 $, $tok_ $(@expr1073746211 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2660 $, code@var478 , true , Settings ::@expr1073746212 Win32A@expr1073746205 $) $) $) { $return ; }
2661: }
2662:
2663: void sizeof11 ( ) {
2664:
2665: const char code@var479 [@expr1073746213 115 ] =@expr1073746214 "void f()\n{\n    char buf2[4];\n    sizeof buf2;\n}\n\nvoid g()\n{\n    struct A a[2];\n    char buf[32];\n    sizeof buf;\n}"
2666:
|
2675:
2676: ;
2677:
2678: const char expected@var480 [@expr1073746215 94 ] =@expr1073746216 "void f ( ) { char buf2 [ 4 ] ; 4 ; } void g ( ) { struct A a [ 2 ] ; char buf [ 32 ] ; 32 ; }"
2679:
|
2688:
2689: ;
2690:
2691: $if $(@expr1073746217 $!@expr1073746218 $assertEquals $(@expr1073746219 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2691 $, expected@var480 $, $tok_ $(@expr1073746220 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2691 $, code@var479 $) $) $) { $return ; }
2692: }
2693:
2694: void sizeof12 ( ) {
2695:
2696: const char code@var481 [@expr1073746221 42 ] =@expr1073746222 "void f()\n{\n    int *p;\n    (sizeof *p);\n}"
2697:
2698:
2699:
2700: ;
2701:
2702: const char expected@var482 [@expr1073746223 19 ] =@expr1073746224 "void f ( ) { 4 ; }"
2703:
2704:
2705:
2706: ;
2707:
2708: $if $(@expr1073746225 $!@expr1073746226 $assertEquals $(@expr1073746227 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2708 $, expected@var482 $, $tok_ $(@expr1073746228 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2708 $, code@var481 $) $) $) { $return ; }
2709: }
2710:
2711: void sizeof13 ( ) {
2712:
2713: const char code@var483 [@expr1073746229 88 ] =@expr1073746230 "int main()\n{\n    char *a;\n    a = malloc(sizeof(*a));\n}\n\nstruct B\n{\n    char * b[2];\n};"
2714:
|
2721:
2722: ;
2723: const char expected@var484 [@expr1073746231 79 ] =@expr1073746232 "int main ( ) { char * a ; a = malloc ( 1 ) ; } struct B { char * b [ 2 ] ; } ;"
2724:
|
2730:
2731: ;
2732: $if $(@expr1073746233 $!@expr1073746234 $assertEquals $(@expr1073746235 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2732 $, expected@var484 $, $tok_ $(@expr1073746236 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2732 $, code@var483 $) $) $) { $return ; }
2733: }
2734:
2735: void sizeof14 ( ) {
2736:
2737: const char code@var485 [@expr1073746237 55 ] =@expr1073746238 "void f()\n{\n    A **a;\n    int aa = sizeof *(*a)->b;\n}\n"
2738:
2739:
2740:
2741: ;
2742: const char expected@var486 [@expr1073746239 66 ] =@expr1073746240 "void f ( ) { A * * a ; int aa ; aa = sizeof ( * ( * a ) . b ) ; }"
2743:
2744:
2745:
2746: ;
2747: $if $(@expr1073746241 $!@expr1073746242 $assertEquals $(@expr1073746243 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2747 $, expected@var486 $, $tok_ $(@expr1073746244 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2747 $, code@var485 $) $) $) { $return ; }
2748:
2749:
2750: $if $(@expr1073746245 $!@expr1073746246 $assertEquals $(@expr1073746247 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2750 $, "sizeof ( ! ! ( a == 1 ) ) ;" $, $tok_ $(@expr1073746248 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2750 $, "sizeof !!(a==1);" $) $) $) { $return ; }
2751: }
2752:
2753: void sizeof15 ( ) {
2754:
2755: $tok_ $(@expr1073746249 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2755 $, "void f()\n{\n    int *n;\n    sizeof *(n);\n}" $)
2756:
2757:
2758:
2759: ;
2760: $if $(@expr1073746250 $!@expr1073746251 $assertEquals $(@expr1073746252 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2760 $, "" $, errout@var100 .@expr1073746253 str (@expr1073746254 ) $) $) { $return ; }
2761: }
2762:
2763: void sizeof16 ( ) {
2764:
2765: const char code@var487 [@expr1073746255 55 ] =@expr1073746256 "void f()\n{\n    int a;\n    printf(\"%i\", sizeof a++);\n}\n"
2766:
2767:
2768:
2769: ;
2770: $if $(@expr1073746257 $!@expr1073746258 $assertEquals $(@expr1073746259 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2770 $, "void f ( ) { int a ; printf ( \"%i\" , sizeof ( a ++ ) ) ; }" $, $tok_ $(@expr1073746260 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2770 $, code@var487 $) $) $) { $return ; }
2771: $if $(@expr1073746261 $!@expr1073746262 $assertEquals $(@expr1073746263 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2771 $, "" $, errout@var100 .@expr1073746264 str (@expr1073746265 ) $) $) { $return ; }
2772: }
2773:
2774: void sizeof17 ( ) {
2775:
2776: const char code@var488 [@expr1073746266 43 ] =@expr1073746267 "void f()\n{\n    sizeof 1;\n    while (0);\n}\n"
2777:
2778:
2779:
2780: ;
2781: $if $(@expr1073746268 $!@expr1073746269 $assertEquals $(@expr1073746270 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2781 $, "void f ( ) { sizeof ( 1 ) ; }" $, $tok_ $(@expr1073746271 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2781 $, code@var488 $) $) $) { $return ; }
2782: $if $(@expr1073746272 $!@expr1073746273 $assertEquals $(@expr1073746274 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2782 $, "" $, errout@var100 .@expr1073746275 str (@expr1073746276 ) $) $) { $return ; }
2783: }
2784:
2785: void sizeof18 ( ) {
2786: {
2787: std ::@expr1073746277 ostringstream expected@var489 ;
2788: expected@var489 <<@expr1073746278 sizeof (@expr1073746279 short ) ;
2789:
2790: {
2791: const char code@var490 [@expr1073746280 37 ] =@expr1073746281 "void f()\n{\n    sizeof(short int);\n}\n"
2792:
2793:
2794: ;
2795: $if $(@expr1073746282 $!@expr1073746283 $assertEquals $(@expr1073746284 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2795 $, "void f ( ) { " +@expr4461 expected@var489 .@expr4462 str (@expr4463 ) +@expr4464 " ; }" $, $tok_ $(@expr1073746289 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2795 $, code@var490 $) $) $) { $return ; }
2796: $if $(@expr1073746290 $!@expr1073746291 $assertEquals $(@expr1073746292 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2796 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2797: }
2798:
2799: {
2800: const char code@var491 [@expr1073746295 46 ] =@expr1073746296 "void f()\n{\n    sizeof(unsigned short int);\n}\n"
2801:
2802:
2803: ;
2804: $if $(@expr1073746297 $!@expr1073746298 $assertEquals $(@expr1073746299 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2804 $, "void f ( ) { " +@expr4461 expected@var489 .@expr4462 str (@expr4463 ) +@expr4464 " ; }" $, $tok_ $(@expr1073746304 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2804 $, code@var491 $) $) $) { $return ; }
2805: $if $(@expr1073746305 $!@expr1073746306 $assertEquals $(@expr1073746307 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2805 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2806: }
2807:
2808: {
2809: const char code@var492 [@expr1073746310 46 ] =@expr1073746311 "void f()\n{\n    sizeof(short unsigned int);\n}\n"
2810:
2811:
2812: ;
2813: $if $(@expr1073746312 $!@expr1073746313 $assertEquals $(@expr1073746314 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2813 $, "void f ( ) { " +@expr4461 expected@var489 .@expr4462 str (@expr4463 ) +@expr4464 " ; }" $, $tok_ $(@expr1073746319 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2813 $, code@var492 $) $) $) { $return ; }
2814: $if $(@expr1073746320 $!@expr1073746321 $assertEquals $(@expr1073746322 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2814 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2815: }
2816:
2817: {
2818: const char code@var493 [@expr1073746325 44 ] =@expr1073746326 "void f()\n{\n    sizeof(signed short int);\n}\n"
2819:
2820:
2821: ;
2822: $if $(@expr1073746327 $!@expr1073746328 $assertEquals $(@expr1073746329 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2822 $, "void f ( ) { " +@expr4461 expected@var489 .@expr4462 str (@expr4463 ) +@expr4464 " ; }" $, $tok_ $(@expr1073746334 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2822 $, code@var493 $) $) $) { $return ; }
2823: $if $(@expr1073746335 $!@expr1073746336 $assertEquals $(@expr1073746337 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2823 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2824: }
2825: }
2826:
2827: {
2828: std ::@expr1073746340 ostringstream expected@var494 ;
2829: expected@var494 <<@expr1073746341 sizeof (@expr1073746342 long long ) ;
2830:
2831: {
2832: const char code@var495 [@expr1073746343 37 ] =@expr1073746344 "void f()\n{\n    sizeof(long long);\n}\n"
2833:
2834:
2835: ;
2836: $if $(@expr1073746345 $!@expr1073746346 $assertEquals $(@expr1073746347 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2836 $, "void f ( ) { " +@expr4524 expected@var494 .@expr4525 str (@expr4526 ) +@expr4527 " ; }" $, $tok_ $(@expr1073746352 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2836 $, code@var495 $) $) $) { $return ; }
2837: $if $(@expr1073746353 $!@expr1073746354 $assertEquals $(@expr1073746355 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2837 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2838: }
2839:
2840: {
2841: const char code@var496 [@expr1073746358 44 ] =@expr1073746359 "void f()\n{\n    sizeof(signed long long);\n}\n"
2842:
2843:
2844: ;
2845: $if $(@expr1073746360 $!@expr1073746361 $assertEquals $(@expr1073746362 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2845 $, "void f ( ) { " +@expr4524 expected@var494 .@expr4525 str (@expr4526 ) +@expr4527 " ; }" $, $tok_ $(@expr1073746367 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2845 $, code@var496 $) $) $) { $return ; }
2846: $if $(@expr1073746368 $!@expr1073746369 $assertEquals $(@expr1073746370 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2846 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2847: }
2848:
2849: {
2850: const char code@var497 [@expr1073746373 46 ] =@expr1073746374 "void f()\n{\n    sizeof(unsigned long long);\n}\n"
2851:
2852:
2853: ;
2854: $if $(@expr1073746375 $!@expr1073746376 $assertEquals $(@expr1073746377 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2854 $, "void f ( ) { " +@expr4524 expected@var494 .@expr4525 str (@expr4526 ) +@expr4527 " ; }" $, $tok_ $(@expr1073746382 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2854 $, code@var497 $) $) $) { $return ; }
2855: $if $(@expr1073746383 $!@expr1073746384 $assertEquals $(@expr1073746385 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2855 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2856: }
2857:
2858: {
2859: const char code@var498 [@expr1073746388 46 ] =@expr1073746389 "void f()\n{\n    sizeof(long unsigned long);\n}\n"
2860:
2861:
2862: ;
2863: $if $(@expr1073746390 $!@expr1073746391 $assertEquals $(@expr1073746392 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2863 $, "void f ( ) { " +@expr4524 expected@var494 .@expr4525 str (@expr4526 ) +@expr4527 " ; }" $, $tok_ $(@expr1073746397 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2863 $, code@var498 $) $) $) { $return ; }
2864: $if $(@expr1073746398 $!@expr1073746399 $assertEquals $(@expr1073746400 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2864 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2865: }
2866:
2867: {
2868: const char code@var499 [@expr1073746403 41 ] =@expr1073746404 "void f()\n{\n    sizeof(long long int);\n}\n"
2869:
2870:
2871: ;
2872: $if $(@expr1073746405 $!@expr1073746406 $assertEquals $(@expr1073746407 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2872 $, "void f ( ) { " +@expr4524 expected@var494 .@expr4525 str (@expr4526 ) +@expr4527 " ; }" $, $tok_ $(@expr1073746412 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2872 $, code@var499 $) $) $) { $return ; }
2873: $if $(@expr1073746413 $!@expr1073746414 $assertEquals $(@expr1073746415 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2873 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2874: }
2875:
2876: {
2877: const char code@var500 [@expr1073746418 48 ] =@expr1073746419 "void f()\n{\n    sizeof(signed long long int);\n}\n"
2878:
2879:
2880: ;
2881: $if $(@expr1073746420 $!@expr1073746421 $assertEquals $(@expr1073746422 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2881 $, "void f ( ) { " +@expr4524 expected@var494 .@expr4525 str (@expr4526 ) +@expr4527 " ; }" $, $tok_ $(@expr1073746427 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2881 $, code@var500 $) $) $) { $return ; }
2882: $if $(@expr1073746428 $!@expr1073746429 $assertEquals $(@expr1073746430 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2882 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2883: }
2884:
2885: {
2886: const char code@var501 [@expr1073746433 50 ] =@expr1073746434 "void f()\n{\n    sizeof(unsigned long long int);\n}\n"
2887:
2888:
2889: ;
2890: $if $(@expr1073746435 $!@expr1073746436 $assertEquals $(@expr1073746437 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2890 $, "void f ( ) { " +@expr4524 expected@var494 .@expr4525 str (@expr4526 ) +@expr4527 " ; }" $, $tok_ $(@expr1073746442 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2890 $, code@var501 $) $) $) { $return ; }
2891: $if $(@expr1073746443 $!@expr1073746444 $assertEquals $(@expr1073746445 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2891 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2892: }
2893:
2894: {
2895: const char code@var502 [@expr1073746448 50 ] =@expr1073746449 "void f()\n{\n    sizeof(long unsigned long int);\n}\n"
2896:
2897:
2898: ;
2899: $if $(@expr1073746450 $!@expr1073746451 $assertEquals $(@expr1073746452 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2899 $, "void f ( ) { " +@expr4524 expected@var494 .@expr4525 str (@expr4526 ) +@expr4527 " ; }" $, $tok_ $(@expr1073746457 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2899 $, code@var502 $) $) $) { $return ; }
2900: $if $(@expr1073746458 $!@expr1073746459 $assertEquals $(@expr1073746460 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2900 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2901: }
2902: }
2903:
2904: {
2905: const char code@var503 [@expr1073746463 33 ] =@expr1073746464 "void f()\n{\n    sizeof(char*);\n}\n"
2906:
2907:
2908: ;
2909: std ::@expr1073746465 ostringstream expected@var504 ;
2910: expected@var504 <<@expr1073746466 sizeof (@expr4643 int *@expr4644 ) ;
2911: $if $(@expr1073746469 $!@expr1073746470 $assertEquals $(@expr1073746471 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2911 $, "void f ( ) { " +@expr1073746472 expected@var504 .@expr1073746473 str (@expr1073746474 ) +@expr1073746475 " ; }" $, $tok_ $(@expr1073746476 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2911 $, code@var503 $) $) $) { $return ; }
2912: $if $(@expr1073746477 $!@expr1073746478 $assertEquals $(@expr1073746479 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2912 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2913: }
2914:
2915: {
2916: const char code@var505 [@expr1073746482 41 ] =@expr1073746483 "void f()\n{\n    sizeof(unsigned int*);\n}\n"
2917:
2918:
2919: ;
2920: std ::@expr1073746484 ostringstream expected@var506 ;
2921: expected@var506 <<@expr1073746485 sizeof (@expr4643 int *@expr4644 ) ;
2922: $if $(@expr1073746488 $!@expr1073746489 $assertEquals $(@expr1073746490 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2922 $, "void f ( ) { " +@expr1073746491 expected@var506 .@expr1073746492 str (@expr1073746493 ) +@expr1073746494 " ; }" $, $tok_ $(@expr1073746495 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2922 $, code@var505 $) $) $) { $return ; }
2923: $if $(@expr1073746496 $!@expr1073746497 $assertEquals $(@expr1073746498 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2923 $, "" $, errout@var100 .@expr4469 str (@expr4470 ) $) $) { $return ; }
2924: }
2925: }
2926:
2927: void sizeof19 ( ) {
2928:
2929: {
2930: const char code@var507 [@expr1073746501 30 ] =@expr1073746502 "void f()\n{\n    sizeof 'x';\n}\n"
2931:
2932:
2933: ;
2934: std ::@expr1073746503 ostringstream sz@var508 ;
2935: sz@var508 <<@expr1073746504 sizeof (@expr4681 'x' ) ;
2936: $if $(@expr1073746506 $!@expr1073746507 $assertEquals $(@expr1073746508 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2936 $, "void f ( ) { " +@expr1073746509 sz@var508 .@expr1073746510 str (@expr1073746511 ) +@expr1073746512 " ; }" $, $tok_ $(@expr1073746513 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2936 $, code@var507 $) $) $) { $return ; }
2937: $if $(@expr1073746514 $!@expr1073746515 $assertEquals $(@expr1073746516 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2937 $, "" $, errout@var100 .@expr4693 str (@expr4694 ) $) $) { $return ; }
2938: }
2939:
2940: {
2941: const char code@var509 [@expr1073746519 31 ] =@expr1073746520 "void f()\n{\n    sizeof('x');\n}\n"
2942:
2943:
2944: ;
2945: std ::@expr1073746521 ostringstream sz@var510 ;
2946: sz@var510 <<@expr1073746522 sizeof (@expr4681 'x' ) ;
2947: $if $(@expr1073746524 $!@expr1073746525 $assertEquals $(@expr1073746526 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2947 $, "void f ( ) { " +@expr1073746527 sz@var510 .@expr1073746528 str (@expr1073746529 ) +@expr1073746530 " ; }" $, $tok_ $(@expr1073746531 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2947 $, code@var509 $) $) $) { $return ; }
2948: $if $(@expr1073746532 $!@expr1073746533 $assertEquals $(@expr1073746534 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2948 $, "" $, errout@var100 .@expr4693 str (@expr4694 ) $) $) { $return ; }
2949: }
2950: }
2951:
2952: void sizeof20 ( ) {
2953:
2954: const char code@var511 [@expr1073746537 95 ] =@expr1073746538 "struct struct_a {\n  char a[20];\n};\n\nvoid foo() {\n  struct_a a;\n  append(sizeof a).append();\n}\n"
2955:
|
2960:
2961: ;
2962: $if $(@expr1073746539 $!@expr1073746540 $assertEquals $(@expr1073746541 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2962 $, "struct struct_a { char a [ 20 ] ; } ; void foo ( ) { struct_a a ; append ( sizeof ( a ) ) . append ( ) ; }" $, $tok_ $(@expr1073746542 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2962 $, code@var511 $) $) $) { $return
2963:
2964:
2965:
2966: ; }
2967: }
2968:
2969: void sizeof21 ( ) {
2970:
2971: const char code@var512 [@expr1073746543 212 ] =@expr1073746544 "struct Internal {\n    int operator()(const Args&... args) const {\n        int n = sizeof...(Args);\n        return n;\n    }\n};\n\nint main() {\n    Internal internal;\n    int n = 0; n = internal(1);\n    return 0;\n}\n"
2972:
|
2981:
2982: ;
2983:
2984:
2985: $tok_ $(@expr1073746545 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2985 $, code@var512 $) ;
2986: }
2987:
2988: void sizeof22 ( ) {
2989:
2990: const char code@var513 [@expr1073746546 46 ] =@expr1073746547 "foo(sizeof(uint32_t), sizeof(std::uint32_t));" ;
2991: $todoAssertEquals $(@expr1073746548 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2991 $, "foo ( 4 , 4 ) ;" $, "foo ( 4 , sizeof ( std :: uint32_t ) ) ;" $, $tokWithStdLib_ $(@expr1073746549 code@var513 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 2991 $) $) ;
2992: }
2993:
2994: void sizeofsizeof ( ) {
2995:
2996: const char code@var514 [@expr1073746550 35 ] =@expr1073746551 "void f()\n{\n    sizeof sizeof 1;\n}\n"
2997:
2998:
2999: ;
3000: $if $(@expr1073746552 $!@expr1073746553 $assertEquals $(@expr1073746554 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3000 $, "void f ( ) { sizeof ( sizeof ( 1 ) ) ; }" $, $tok_ $(@expr1073746555 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3000 $, code@var514 $) $) $) { $return ; }
3001: $if $(@expr1073746556 $!@expr1073746557 $assertEquals $(@expr1073746558 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3001 $, "" $, errout@var100 .@expr1073746559 str (@expr1073746560 ) $) $) { $return ; }
3002: }
3003:
3004: void casting ( ) {
3005: {
3006: const char code@var515 [@expr1073746561 63 ] =@expr1073746562 "void f()\n{\nfor (int i = 0; i < static_cast<int>(3); ++i) {}\n}\n"
3007:
3008:
3009: ;
3010:
3011: const char expected@var516 [@expr1073746563 52 ] =@expr1073746564 "void f ( ) { for ( int i = 0 ; i < 3 ; ++ i ) { } }" ;
3012:
3013: $if $(@expr1073746565 $!@expr1073746566 $assertEquals $(@expr1073746567 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3013 $, expected@var516 $, $tok_ $(@expr1073746568 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3013 $, code@var515 $) $) $) { $return ; }
3014: }
3015:
3016: {
3017: const char code@var517 [@expr1073746569 49 ] =@expr1073746570 "void f()\n{\n    p = const_cast<char *> qtu ();\n}\n"
3018:
3019:
3020: ;
3021:
3022: const char expected@var518 [@expr1073746571 51 ] =@expr1073746572 "void f ( ) { p = const_cast < char * > qtu ( ) ; }" ;
3023:
3024: $if $(@expr1073746573 $!@expr1073746574 $assertEquals $(@expr1073746575 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3024 $, expected@var518 $, $tok_ $(@expr1073746576 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3024 $, code@var517 $) $) $) { $return ; }
3025: }
3026:
3027: {
3028:
3029: const char code@var519 [@expr1073746577 55 ] =@expr1073746578 "void f()\n{\n    return dynamic_cast<Foo *>((bar()));\n}\n"
3030:
3031:
3032: ;
3033: const char expected@var520 [@expr1073746579 32 ] =@expr1073746580 "void f ( ) { return bar ( ) ; }" ;
3034:
3035: $if $(@expr1073746581 $!@expr1073746582 $assertEquals $(@expr1073746583 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3035 $, expected@var520 $, $tok_ $(@expr1073746584 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3035 $, code@var519 $) $) $) { $return ; }
3036: }
3037: }
3038:
3039:
3040: void strlen1 ( ) {
3041: $if $(@expr1073746585 $!@expr1073746586 $assertEquals $(@expr1073746587 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3041 $, "4" $, $tok_ $(@expr1073746588 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3041 $, "strlen(\"abcd\")" $) $) $) { $return ; }
3042:
3043: {
3044: const char code@var521 [@expr1073746589 57 ] =@expr1073746590 "void f()\n{\n    const char *s = \"abcd\";\n    strlen(s);\n}\n"
3045:
3046:
3047:
3048: ;
3049: const char expected@var522 [@expr1073746591 49 ] =@expr1073746592 "void f ( ) { const char * s ; s = \"abcd\" ; 4 ; }"
3050:
|
3053:
3054: ;
3055: $if $(@expr1073746593 $!@expr1073746594 $assertEquals $(@expr1073746595 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3055 $, expected@var522 $, $tok_ $(@expr1073746596 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3055 $, code@var521 $) $) $) { $return ; }
3056: }
3057:
3058: {
3059: const char code@var523 [@expr1073746597 60 ] =@expr1073746598 "void f()\n{\n    const char s [ ] = \"abcd\";\n    strlen(s);\n}\n"
3060:
3061:
3062:
3063: ;
3064: const char expected@var524 [@expr1073746599 49 ] =@expr1073746600 "void f ( ) { const char s [ 5 ] = \"abcd\" ; 4 ; }"
3065:
3066:
3067:
3068: ;
3069: $if $(@expr1073746601 $!@expr1073746602 $assertEquals $(@expr1073746603 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3069 $, expected@var524 $, $tok_ $(@expr1073746604 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3069 $, code@var523 $) $) $) { $return ; }
3070: }
3071:
3072: }
3073:
3074: void strlen2 ( ) {
3075:
3076: $if $(@expr1073746605 $!@expr1073746606 $assertEquals $(@expr1073746607 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3076 $, "i = -4 ;" $, $tok_ $(@expr1073746608 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3076 $, "i = (strlen(\"abcd\") - 8);" $) $) $) { $return
3077: ; }
3078: }
3079:
3080:
3081: void namespaces ( ) {
3082: {
3083: const char code@var525 [@expr1073746609 18 ] =@expr1073746610 "namespace std { }" ;
3084:
3085: $if $(@expr1073746611 $!@expr1073746612 $assertEquals $(@expr1073746613 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3085 $, ";" $, $tok_ $(@expr1073746614 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3085 $, code@var525 $) $) $) { $return ; }
3086: }
3087:
3088: {
3089: const char code@var526 [@expr1073746615 20 ] =@expr1073746616 "; namespace std { }" ;
3090:
3091: $if $(@expr1073746617 $!@expr1073746618 $assertEquals $(@expr1073746619 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3091 $, ";" $, $tok_ $(@expr1073746620 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3091 $, code@var526 $) $) $) { $return ; }
3092: }
3093:
3094: {
3095: const char code@var527 [@expr1073746621 62 ] =@expr1073746622 "using namespace std; namespace a{ namespace b{ void f(){} } }" ;
3096:
3097: const char expected@var528 [@expr1073746623 47 ] =@expr1073746624 "namespace a { namespace b { void f ( ) { } } }" ;
3098:
3099: $if $(@expr1073746625 $!@expr1073746626 $assertEquals $(@expr1073746627 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3099 $, expected@var528 $, $tok_ $(@expr1073746628 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3099 $, code@var527 $) $) $) { $return ; }
3100: }
3101:
3102: {
3103: const char code@var529 [@expr1073746629 26 ] =@expr1073746630 "namespace b{ void f(){} }" ;
3104:
3105: const char expected@var530 [@expr1073746631 31 ] =@expr1073746632 "namespace b { void f ( ) { } }" ;
3106:
3107: $if $(@expr1073746633 $!@expr1073746634 $assertEquals $(@expr1073746635 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3107 $, expected@var530 $, $tok_ $(@expr1073746636 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3107 $, code@var529 $) $) $) { $return ; }
3108: }
3109:
3110: {
3111: const char code@var531 [@expr1073746637 26 ] =@expr1073746638 "void f(int namespace) { }" ;
3112:
3113: const char expected@var532 [@expr1073746639 29 ] =@expr1073746640 "void f ( int namespace ) { }" ;
3114:
3115: $if $(@expr1073746641 $!@expr1073746642 $assertEquals $(@expr1073746643 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3115 $, expected@var532 $, $tok_ $(@expr1073746644 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3115 $, code@var531 $) $) $) { $return ; }
3116: }
3117: }
3118:
3119:
3120: std :: string simplifyIfAndWhileAssign_ ( const char code@var533 [ ] , const char * file@var534 , int line@var535 ) {
3121:
3122: Tokenizer tokenizer@var536 (@expr1073746645 &@expr1073746646 settings0@var102 , this@expr1073746647 ) ;
3123: std ::@expr1073746648 istringstream istr@var537 (@expr1073746649 code@var533 ) ;
3124: $assert_ $(@expr1073746650 file@var534 $, line@var535 $, $(@expr1073746651 tokenizer@var536 .@expr1073746652 tokenize (@expr1073746653 istr@var537 , "test.cpp" ) $) $) ;
3125:
3126: tokenizer@var536 .@expr1073746654 simplifyIfAndWhileAssign (@expr1073746655 ) ;
3127:
3128: return tokenizer@var536 .@expr1073746656 tokens (@expr1073746657 ) .@expr1073746658 stringifyList (@expr1073746659 nullptr , false ) ;
3129: }
3130:
3131: void ifassign1 ( ) {
3132: $if $(@expr1073746660 $!@expr1073746661 $assertEquals $(@expr1073746662 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3132 $, "{ a = b ; if ( a ) { ; } }" $, $simplifyIfAndWhileAssign_ $(@expr1073746663 "{if(a=b);}" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3132 $) $) $) { $return ; }
3133: $if $(@expr1073746664 $!@expr1073746665 $assertEquals $(@expr1073746666 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3133 $, "{ a = b ( ) ; if ( a ) { ; } }" $, $simplifyIfAndWhileAssign_ $(@expr1073746667 "{if((a=b()));}" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3133 $) $) $) { $return ; }
3134: $if $(@expr1073746668 $!@expr1073746669 $assertEquals $(@expr1073746670 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3134 $, "{ a = b ( ) ; if ( ! ( a ) ) { ; } }" $, $simplifyIfAndWhileAssign_ $(@expr1073746671 "{if(!(a=b()));}" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3134 $) $) $) { $return ; }
3135: $if $(@expr1073746672 $!@expr1073746673 $assertEquals $(@expr1073746674 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3135 $, "{ a . x = b ( ) ; if ( ! ( a . x ) ) { ; } }" $, $simplifyIfAndWhileAssign_ $(@expr1073746675 "{if(!(a->x=b()));}" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3135 $) $) $) { $return ; }
3136: $if $(@expr1073746676 $!@expr1073746677 $assertEquals $(@expr1073746678 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3136 $, "void f ( ) { A ( ) a = b ; if ( a ) { ; } }" $, $simplifyIfAndWhileAssign_ $(@expr1073746679 "void f() { A() if(a=b); }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3136 $) $) $) { $return ; }
3137: $if $(@expr1073746680 $!@expr1073746681 $assertEquals $(@expr1073746682 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3137 $, "void foo ( int a ) { a = b ( ) ; if ( a >= 0 ) { ; } }" $, $tok_ $(@expr1073746683 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3137 $, "void foo(int a) {if((a=b())>=0);}" $) $) $) { $return ; }
3138: $todoAssertEquals $(@expr1073746684 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3138 $, "void foo ( A a ) { a . c = b ( ) ; if ( 0 <= a . c ) { ; } }" $, "void foo ( A a ) { a . c = b ( ) ; if ( a . c >= 0 ) { ; } }" $, $tok_ $(@expr1073746685 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3138 $, "void foo(A a) {if((a.c=b())>=0);}" $) $)
3139:
3140: ;
3141: }
3142:
3143: void ifAssignWithCast ( ) {
3144: const char * code@var538 ; code@var538 =@expr1073746686 "void foo()\n{\nFILE *f;\nif( (f = fopen(\"foo\", \"r\")) == ((FILE*)NULL) )\nreturn(-1);\nfclose(f);\n}\n"
3145:
|
3149:
3150: ;
3151: const char * expected@var539 ; expected@var539 =@expr1073746687 "void foo ( ) { FILE * f ; f = fopen ( \"foo\" , \"r\" ) ; if ( f == NULL ) { return -1 ; } fclose ( f ) ; }"
3152:
|
3159:
3160: ;
3161: $if $(@expr1073746688 $!@expr1073746689 $assertEquals $(@expr1073746690 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3161 $, expected@var539 $, $tok_ $(@expr1073746691 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3161 $, code@var538 $) $) $) { $return ; }
3162: }
3163:
3164: void whileAssign1 ( ) {
3165: $if $(@expr1073746692 $!@expr1073746693 $assertEquals $(@expr1073746694 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3165 $, "{ a = b ; while ( a ) { b = 0 ; a = b ; } }" $, $simplifyIfAndWhileAssign_ $(@expr1073746695 "{while(a=b) { b = 0; }}" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3165 $) $) $) { $return ; }
3166: $if $(@expr1073746696 $!@expr1073746697 $assertEquals $(@expr1073746698 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3166 $, "{ a . b = c ; while ( a . b ) { c = 0 ; a . b = c ; } }" $, $simplifyIfAndWhileAssign_ $(@expr1073746699 "{while(a.b=c) { c=0; }}" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3166 $) $) $) { $return ; }
3167: $if $(@expr1073746700 $!@expr1073746701 $assertEquals $(@expr1073746702 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3167 $, "{ struct hfs_bnode * node ; struct hfs_btree * tree ; node = tree . node_hash [ i ++ ] ; while ( node ) { node = tree . node_hash [ i ++ ] ; } }" $, $tok_ $(@expr1073746703 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3167 $, "{struct hfs_bnode *node;struct hfs_btree *tree;while ((node = tree->node_hash[i++])) { }}" $) $) $) { $return
3168:
|
3176:
3177: ; }
3178: $if $(@expr1073746704 $!@expr1073746705 $assertEquals $(@expr1073746706 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3178 $, "{ char * s ; s = new char [ 10 ] ; while ( ! s ) { s = new char [ 10 ] ; } }" $, $tok_ $(@expr1073746707 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3178 $, "{ char *s; while (0 == (s=new char[10])) { } }" $) $) $) { $return
3179: ; }
3180: }
3181:
3182: void whileAssign2 ( ) {
3183:
3184: $tok_ $(@expr1073746708 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3184 $, "void f()\n{\n  int b;\n  while (b = sizeof (struct foo { int i0;}))\n    ;\n  if (!(0 <= b ))\n    ;\n}" $)
3185:
|
3190:
3191: ;
3192: $if $(@expr1073746709 $!@expr1073746710 $assertEquals $(@expr1073746711 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3192 $, "" $, errout@var100 .@expr1073746712 str (@expr1073746713 ) $) $) { $return ; }
3193: }
3194:
3195: void whileAssign3 ( ) {
3196:
3197: const char code@var540 [@expr1073746714 41 ] =@expr1073746715 "void f() {\n  int a;\n  while (a = x());\n}"
3198:
3199:
3200: ;
3201: $if $(@expr1073746716 $!@expr1073746717 $assertEquals $(@expr1073746718 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3201 $, "\n\n##file 0\n1: void f ( ) {\n2: int a@1 ;\n3: a@1 = x ( ) ; while ( a@1 ) { ; a@1 = x ( ) ; }\n4: }\n" $, $tokenizeDebugListing_ $(@expr1073746719 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3201 $, code@var540 , true , "test.c" $) $) $) { $return
3202:
3203:
3204:
3205: ; }
3206: }
3207:
3208: void whileAssign4 ( ) {
3209: errout@var100 .@expr1073746720 str (@expr1073746721 "" ) ;
3210:
3211: Tokenizer tokenizer@var541 (@expr1073746722 &@expr1073746723 settings0@var102 , this@expr1073746724 ) ;
3212: std ::@expr1073746725 istringstream istr@var542 (@expr1073746726 "{ while (!(m = q->push<Message>(x))) {} }" ) ;
3213: $if $(@expr1073746727 $!@expr1073746728 $assert_ $(@expr1073746729 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3213 $, $(@expr1073746730 tokenizer@var541 .@expr1073746731 tokenize (@expr1073746732 istr@var542 , "test.cpp" ) $) $) $) { $return ; }
3214: tokenizer@var541 .@expr1073746733 simplifyTokenList2 (@expr1073746734 ) ;
3215:
3216: $if $(@expr1073746735 $!@expr1073746736 $assertEquals $(@expr1073746737 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3216 $, "{ m = q . push < Message > ( x ) ; while ( ! m ) { m = q . push < Message > ( x ) ; } }" $, $(@expr1073746738 tokenizer@var541 .@expr4915 tokens (@expr4916 ) .@expr1073746741 stringifyList (@expr1073746742 nullptr , false ) $) $) $) { $return ; }
3217: $if $(@expr1073746743 $!@expr1073746744 $assert_ $(@expr1073746745 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3217 $, tokenizer@var541 .@expr4915 tokens (@expr4916 ) .@expr4924 tokAt (@expr4925 26 ) !=@expr1073746750 nullptr $) $) { $return ; }
3218: if (@expr1073746751 tokenizer@var541 .@expr4915 tokens (@expr4916 ) .@expr4924 tokAt (@expr4925 26 ) ) {
3219: $if $(@expr1073746756 $!@expr1073746757 $assert_ $(@expr1073746758 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3219 $, tokenizer@var541 .@expr4915 tokens (@expr4916 ) .@expr4937 linkAt (@expr1073746762 6 ) ==@expr1073746763 tokenizer@var541 .@expr4915 tokens (@expr4916 ) .@expr4924 tokAt (@expr1073746767 8 ) $) $) { $return ; }
3220: $if $(@expr1073746768 $!@expr1073746769 $assert_ $(@expr1073746770 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3220 $, tokenizer@var541 .@expr4915 tokens (@expr4916 ) .@expr4937 linkAt (@expr1073746774 24 ) ==@expr1073746775 tokenizer@var541 .@expr4915 tokens (@expr4916 ) .@expr4924 tokAt (@expr4925 26 ) $) $) { $return ; }
3221: }
3222: }
3223:
3224: void doWhileAssign ( ) {
3225: $if $(@expr1073746780 $!@expr1073746781 $assertEquals $(@expr1073746782 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3225 $, "{ do { a = b ; } while ( a ) ; }" $, $simplifyIfAndWhileAssign_ $(@expr1073746783 "{ do { } while(a=b); }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3225 $) $) $) { $return ; }
3226: $if $(@expr1073746784 $!@expr1073746785 $assertEquals $(@expr1073746786 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3226 $, "{ do { a . a = 0 ; a . b = c ; } while ( a . b ) ; }" $, $simplifyIfAndWhileAssign_ $(@expr1073746787 "{ do { a.a = 0; } while(a.b=c); }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3226 $) $) $) { $return ; }
3227: $if $(@expr1073746788 $!@expr1073746789 $assertEquals $(@expr1073746790 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3227 $, "{ struct hfs_bnode * node ; struct hfs_btree * tree ; do { node = tree . node_hash [ i ++ ] ; } while ( node ) ; }" $, $tok_ $(@expr1073746791 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3227 $, "{struct hfs_bnode *node;struct hfs_btree *tree;do { } while((node = tree->node_hash[i++]));}" $) $) $) { $return
3228:
|
3235:
3236: ; }
3237: $if $(@expr1073746792 $!@expr1073746793 $assertEquals $(@expr1073746794 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3237 $, "void foo ( ) { char * s ; do { s = new char [ 10 ] ; } while ( ! s ) ; }" $, $tok_ $(@expr1073746795 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3237 $, "void foo() { char *s; do { } while (0 == (s=new char[10])); }" $) $) $) { $return
3238: ; }
3239:
3240: $if $(@expr1073746796 $!@expr1073746797 $assertEquals $(@expr1073746798 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3240 $, "void foo ( ) { do { current = f ( ) ; } while ( ( current ) != NULL ) ; }" $, $simplifyIfAndWhileAssign_ $(@expr1073746799 "void foo() { do { } while((current=f()) != NULL); }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3240 $) $) $) { $return ; }
3241: }
3242:
3243: void not1 ( ) {
3244: $if $(@expr1073746800 $!@expr1073746801 $assertEquals $(@expr1073746802 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3244 $, "void f ( ) { if ( ! p ) { ; } }" $, $tok_ $(@expr1073746803 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3244 $, "void f() { if (not p); }" , "test.c" , false $) $) $) { $return ; }
3245: $if $(@expr1073746804 $!@expr1073746805 $assertEquals $(@expr1073746806 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3245 $, "void f ( ) { if ( p && ! q ) { ; } }" $, $tok_ $(@expr1073746807 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3245 $, "void f() { if (p && not q); }" , "test.c" , false $) $) $) { $return ; }
3246: $if $(@expr1073746808 $!@expr1073746809 $assertEquals $(@expr1073746810 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3246 $, "void f ( ) { a = ! ( p && q ) ; }" $, $tok_ $(@expr1073746811 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3246 $, "void f() { a = not(p && q); }" , "test.c" , false $) $) $) { $return ; }
3247:
3248:
3249: $if $(@expr1073746812 $!@expr1073746813 $assertEquals $(@expr1073746814 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3249 $, "struct not { int x ; } ;" $, $tok_ $(@expr1073746815 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3249 $, "struct not { int x; };" , "test.c" , false $) $) $) { $return ; }
3250: $if $(@expr1073746816 $!@expr1073746817 $assertEquals $(@expr1073746818 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3250 $, "void f ( ) { not p ; compl c ; }" $, $tok_ $(@expr1073746819 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3250 $, " void f() { not p; compl c; }" , "test.c" , false $) $) $) { $return ; }
3251: $if $(@expr1073746820 $!@expr1073746821 $assertEquals $(@expr1073746822 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3251 $, "void foo ( not i ) ;" $, $tok_ $(@expr1073746823 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3251 $, "void foo(not i);" , "test.c" , false $) $) $) { $return ; }
3252: $if $(@expr1073746824 $!@expr1073746825 $assertEquals $(@expr1073746826 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3252 $, "int foo ( not i ) { return g ( i ) ; }" $, $tok_ $(@expr1073746827 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3252 $, "int foo(not i) { return g(i); }" , "test.c" , false $) $) $) { $return ; }
3253: }
3254:
3255: void and1 ( ) {
3256: $if $(@expr1073746828 $!@expr1073746829 $assertEquals $(@expr1073746830 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3256 $, "void f ( ) { if ( p && q ) { ; } }" $, $tok_ $(@expr1073746831 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3256 $, "void f() { if (p and q) ; }" , "test.c" , false $) $) $) { $return
3257: ; }
3258:
3259: $if $(@expr1073746832 $!@expr1073746833 $assertEquals $(@expr1073746834 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3259 $, "void f ( ) { if ( foo ( ) && q ) { ; } }" $, $tok_ $(@expr1073746835 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3259 $, "void f() { if (foo() and q) ; }" , "test.c" , false $) $) $) { $return
3260: ; }
3261:
3262: $if $(@expr1073746836 $!@expr1073746837 $assertEquals $(@expr1073746838 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3262 $, "void f ( ) { if ( foo ( ) && bar ( ) ) { ; } }" $, $tok_ $(@expr1073746839 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3262 $, "void f() { if (foo() and bar()) ; }" , "test.c" , false $) $) $) { $return
3263: ; }
3264:
3265: $if $(@expr1073746840 $!@expr1073746841 $assertEquals $(@expr1073746842 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3265 $, "void f ( ) { if ( p && bar ( ) ) { ; } }" $, $tok_ $(@expr1073746843 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3265 $, "void f() { if (p and bar()) ; }" , "test.c" , false $) $) $) { $return
3266: ; }
3267:
3268: $if $(@expr1073746844 $!@expr1073746845 $assertEquals $(@expr1073746846 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3268 $, "void f ( ) { if ( p && ! q ) { ; } }" $, $tok_ $(@expr1073746847 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3268 $, "void f() { if (p and not q) ; }" , "test.c" , false $) $) $) { $return
3269: ; }
3270:
3271: $if $(@expr1073746848 $!@expr1073746849 $assertEquals $(@expr1073746850 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3271 $, "void f ( ) { r = a && b ; }" $, $tok_ $(@expr1073746851 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3271 $, "void f() { r = a and b; }" , "test.c" , false $) $) $) { $return
3272: ; }
3273:
3274: $if $(@expr1073746852 $!@expr1073746853 $assertEquals $(@expr1073746854 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3274 $, "void f ( ) { r = ( a || b ) && ( c || d ) ; }" $, $tok_ $(@expr1073746855 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3274 $, "void f() { r = (a || b) and (c || d); }" , "test.c" , false $) $) $) { $return
3275: ; }
3276:
3277: $if $(@expr1073746856 $!@expr1073746857 $assertEquals $(@expr1073746858 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3277 $, "void f ( ) { if ( test1 [ i ] == 'A' && test2 [ i ] == 'C' ) { } }" $, $tok_ $(@expr1073746859 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3277 $, "void f() { if (test1[i] == 'A' and test2[i] == 'C') {} }" , "test.c" , false $) $) $) { $return
3278: ; }
3279: }
3280:
3281: void or1 ( ) {
3282: $if $(@expr1073746860 $!@expr1073746861 $assertEquals $(@expr1073746862 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3282 $, "void f ( ) { if ( p || q ) { ; } }" $, $tok_ $(@expr1073746863 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3282 $, "void f() { if (p or q) ; }" , "test.c" , false $) $) $) { $return
3283: ; }
3284:
3285: $if $(@expr1073746864 $!@expr1073746865 $assertEquals $(@expr1073746866 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3285 $, "void f ( ) { if ( foo ( ) || q ) { ; } }" $, $tok_ $(@expr1073746867 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3285 $, "void f() { if (foo() or q) ; }" , "test.c" , false $) $) $) { $return
3286: ; }
3287:
3288: $if $(@expr1073746868 $!@expr1073746869 $assertEquals $(@expr1073746870 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3288 $, "void f ( ) { if ( foo ( ) || bar ( ) ) { ; } }" $, $tok_ $(@expr1073746871 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3288 $, "void f() { if (foo() or bar()) ; }" , "test.c" , false $) $) $) { $return
3289: ; }
3290:
3291: $if $(@expr1073746872 $!@expr1073746873 $assertEquals $(@expr1073746874 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3291 $, "void f ( ) { if ( p || bar ( ) ) { ; } }" $, $tok_ $(@expr1073746875 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3291 $, "void f() { if (p or bar()) ; }" , "test.c" , false $) $) $) { $return
3292: ; }
3293:
3294: $if $(@expr1073746876 $!@expr1073746877 $assertEquals $(@expr1073746878 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3294 $, "void f ( ) { if ( p || ! q ) { ; } }" $, $tok_ $(@expr1073746879 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3294 $, "void f() { if (p or not q) ; }" , "test.c" , false $) $) $) { $return
3295: ; }
3296:
3297: $if $(@expr1073746880 $!@expr1073746881 $assertEquals $(@expr1073746882 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3297 $, "void f ( ) { r = a || b ; }" $, $tok_ $(@expr1073746883 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3297 $, "void f() { r = a or b; }" , "test.c" , false $) $) $) { $return
3298: ; }
3299:
3300: $if $(@expr1073746884 $!@expr1073746885 $assertEquals $(@expr1073746886 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3300 $, "void f ( ) { r = ( a && b ) || ( c && d ) ; }" $, $tok_ $(@expr1073746887 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3300 $, "void f() { r = (a && b) or (c && d); }" , "test.c" , false $) $) $) { $return
3301: ; }
3302: }
3303:
3304: void cAlternativeTokens ( ) {
3305: $if $(@expr1073746888 $!@expr1073746889 $assertEquals $(@expr1073746890 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3305 $, "void f ( ) { err |= ( ( r & s ) && ! t ) ; }" $, $tok_ $(@expr1073746891 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3305 $, "void f() { err or_eq ((r bitand s) and not t); }" , "test.c" , false $) $) $) { $return
3306: ; }
3307: $if $(@expr1073746892 $!@expr1073746893 $assertEquals $(@expr1073746894 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3307 $, "void f ( ) const { r = f ( a [ 4 ] | 0x0F , ~ c , ! d ) ; }" $, $tok_ $(@expr1073746895 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3307 $, "void f() const { r = f(a[4] bitor 0x0F, compl c, not d) ; }" , "test.c" , false $) $) $) { $return
3308: ; }
3309:
3310: }
3311:
3312: void comma_keyword ( ) {
3313: {
3314: const char code@var543 [@expr1073746896 57 ] =@expr1073746897 "void foo()\n{\n    char *a, *b;\n    delete a, delete b;\n}\n"
3315:
3316:
3317:
3318: ;
3319: $if $(@expr1073746898 $!@expr1073746899 $assertEquals $(@expr1073746900 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3319 $, "void foo ( ) { char * a ; char * b ; delete a ; delete b ; }" $, $tok_ $(@expr1073746901 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3319 $, code@var543 $) $) $) { $return ; }
3320: }
3321:
3322: {
3323: const char code@var544 [@expr1073746902 37 ] =@expr1073746903 "void foo()\n{\n    struct A *a, *b;\n}\n"
3324:
3325:
3326: ;
3327: $if $(@expr1073746904 $!@expr1073746905 $assertEquals $(@expr1073746906 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3327 $, "void foo ( ) { struct A * a ; struct A * b ; }" $, $tok_ $(@expr1073746907 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3327 $, code@var544 $) $) $) { $return ; }
3328: }
3329:
3330: {
3331: const char code@var545 [@expr1073746908 39 ] =@expr1073746909 "void foo()\n{\n    struct A **a, **b;\n}\n"
3332:
3333:
3334: ;
3335: $if $(@expr1073746910 $!@expr1073746911 $assertEquals $(@expr1073746912 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3335 $, "void foo ( ) { struct A * * a ; struct A * * b ; }" $, $tok_ $(@expr1073746913 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3335 $, code@var545 $) $) $) { $return ; }
3336: }
3337:
3338: {
3339: const char code@var546 [@expr1073746914 50 ] =@expr1073746915 "void foo()\n{\n    char *a, *b;\n    delete a, b;\n}\n"
3340:
3341:
3342:
3343: ;
3344: $if $(@expr1073746916 $!@expr1073746917 $assertEquals $(@expr1073746918 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3344 $, "void foo ( ) { char * a ; char * b ; delete a ; b ; }" $, $tok_ $(@expr1073746919 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3344 $, code@var546 $) $) $) { $return ; }
3345: }
3346:
3347: {
3348: const char code@var547 [@expr1073746920 57 ] =@expr1073746921 "void foo()\n{\n    char *a, *b, *c;\n    delete a, b, c;\n}\n"
3349:
3350:
3351:
3352: ;
3353:
3354: $if $(@expr1073746922 $!@expr1073746923 $assertEquals $(@expr1073746924 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3354 $, "void foo ( ) { char * a ; char * b ; char * c ; delete a ; b , c ; }" $, $tok_ $(@expr1073746925 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3354 $, code@var547 $) $) $) { $return ; }
3355: }
3356:
3357: {
3358: const char code@var548 [@expr1073746926 65 ] =@expr1073746927 "void foo()\n{\n    char *a, *b;\n    if (x)\n        delete a, b;\n}\n"
3359:
|
3362:
3363: ;
3364: $if $(@expr1073746928 $!@expr1073746929 $assertEquals $(@expr1073746930 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3364 $, "void foo ( ) { char * a ; char * b ; if ( x ) { delete a ; b ; } }" $, $tok_ $(@expr1073746931 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3364 $, code@var548 $) $) $) { $return ; }
3365: }
3366:
3367: {
3368: const char code@var549 [@expr1073746932 73 ] =@expr1073746933 "void foo()\n{\n    char *a, *b, *c;\n    if (x) \n        delete a, b, c;\n}\n"
3369:
|
3372:
3373: ;
3374:
3375: $if $(@expr1073746934 $!@expr1073746935 $assertEquals $(@expr1073746936 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3375 $, "void foo ( ) { char * a ; char * b ; char * c ; if ( x ) { delete a ; b , c ; } }" $, $tok_ $(@expr1073746937 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3375 $, code@var549 $) $) $) { $return ; }
3376: }
3377:
3378: {
3379: const char code@var550 [@expr1073746938 40 ] =@expr1073746939 "void foo()\n{\n    char **a, **b, **c;\n}\n"
3380:
3381:
3382: ;
3383: $if $(@expr1073746940 $!@expr1073746941 $assertEquals $(@expr1073746942 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3383 $, "void foo ( ) { char * * a ; char * * b ; char * * c ; }" $, $tok_ $(@expr1073746943 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3383 $, code@var550 $) $) $) { $return ; }
3384: }
3385:
3386: {
3387: const char code@var551 [@expr1073746944 104 ] =@expr1073746945 "int f()\n{\n    if (something)\n        return a(2, c(3, 4)), b(3), 10;\n    return a(), b(0, 0, 0), 10;\n}\n"
3388:
|
3391:
3392: ;
3393: $if $(@expr1073746946 $!@expr1073746947 $assertEquals $(@expr1073746948 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3393 $, "int f ( ) { if ( something ) { a ( 2 , c ( 3 , 4 ) ) ; b ( 3 ) ; return 10 ; } a ( ) ; b ( 0 , 0 , 0 ) ; return 10 ; }" $, $tok_ $(@expr1073746949 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3393 $, code@var551 $) $) $) { $return
3394:
|
3403:
3404: ; }
3405: }
3406:
3407: {
3408: const char code@var552 [@expr1073746950 40 ] =@expr1073746951 "void foo()\n{\n    delete [] a, a = 0;\n}\n"
3409:
3410:
3411: ;
3412: $if $(@expr1073746952 $!@expr1073746953 $assertEquals $(@expr1073746954 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3412 $, "void foo ( ) { delete [ ] a ; a = 0 ; }" $, $tok_ $(@expr1073746955 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3412 $, code@var552 $) $) $) { $return ; }
3413: }
3414:
3415: {
3416: const char code@var553 [@expr1073746956 37 ] =@expr1073746957 "void foo()\n{\n    delete a, a = 0;\n}\n"
3417:
3418:
3419: ;
3420: $if $(@expr1073746958 $!@expr1073746959 $assertEquals $(@expr1073746960 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3420 $, "void foo ( ) { delete a ; a = 0 ; }" $, $tok_ $(@expr1073746961 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3420 $, code@var553 $) $) $) { $return ; }
3421: }
3422:
3423: {
3424: const char code@var554 [@expr1073746962 45 ] =@expr1073746963 "void foo()\n{\n    if( x ) delete a, a = 0;\n}\n"
3425:
3426:
3427: ;
3428: $if $(@expr1073746964 $!@expr1073746965 $assertEquals $(@expr1073746966 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3428 $, "void foo ( ) { if ( x ) { delete a ; a = 0 ; } }" $, $tok_ $(@expr1073746967 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3428 $, code@var554 $) $) $) { $return ; }
3429: }
3430:
3431: {
3432: const char code@var555 [@expr1073746968 62 ] =@expr1073746969 "void f()\n{\n    for(int a,b; a < 10; a = a + 1, b = b + 1);\n}\n"
3433:
3434:
3435: ;
3436: $if $(@expr1073746970 $!@expr1073746971 $assertEquals $(@expr1073746972 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3436 $, "void f ( ) { for ( int a , b ; a < 10 ; a = a + 1 , b = b + 1 ) { ; } }" $, $tok_ $(@expr1073746973 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3436 $, code@var555 $) $) $) { $return ; }
3437: }
3438:
3439: {
3440: const char code@var556 [@expr1073746974 71 ] =@expr1073746975 "void f()\n{\n    char buf[BUFSIZ], **p;\n    char *ptrs[BUFSIZ], **pp;\n}\n"
3441:
3442:
3443:
3444: ;
3445: $if $(@expr1073746976 $!@expr1073746977 $assertEquals $(@expr1073746978 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3445 $, "void f ( ) { char buf [ BUFSIZ ] ; char * * p ; char * ptrs [ BUFSIZ ] ; char * * pp ; }" $, $tok_ $(@expr1073746979 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3445 $, code@var556 $) $) $) { $return ; }
3446: }
3447:
3448: {
3449:
3450: const char code@var557 [@expr1073746980 54 ] =@expr1073746981 "template < class T = X > class A : public B , C { } ;" ;
3451: $if $(@expr1073746982 $!@expr1073746983 $assertEquals $(@expr1073746984 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3451 $, code@var557 $, $tok_ $(@expr1073746985 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3451 $, code@var557 $) $) $) { $return ; }
3452: }
3453: }
3454:
3455: void remove_comma ( ) {
3456: {
3457: const char code@var558 [@expr1073746986 49 ] =@expr1073746987 "void f()\n{\n  int a,b;\n  if( a )\n  a=0,\n  b=0;\n}\n"
3458:
|
3462:
3463: ;
3464: $if $(@expr1073746988 $!@expr1073746989 $assertEquals $(@expr1073746990 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3464 $, "void f ( ) { int a ; int b ; if ( a ) { a = 0 ; b = 0 ; } }" $, $tok_ $(@expr1073746991 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3464 $, code@var558 $) $) $) { $return ; }
3465: }
3466:
3467: {
3468: $if $(@expr1073746992 $!@expr1073746993 $assertEquals $(@expr1073746994 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3468 $, "a ? ( b = c , d ) : e ;" $, $tok_ $(@expr1073746995 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3468 $, "a ? b = c , d : e ;" $) $) $) { $return ; }
3469: }
3470:
3471: {
3472: $if $(@expr1073746996 $!@expr1073746997 $assertEquals $(@expr1073746998 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3472 $, "{ return a ? ( b = c , d ) : e ; }" $, $tok_ $(@expr1073746999 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3472 $, "{ return a ? b = c , d : e ; }" $) $) $) { $return ; }
3473: }
3474:
3475: {
3476: const char code@var559 [@expr1073747000 57 ] =@expr1073747001 "void f()\n{\n  A a,b;\n  if( a.f )\n  a.f=b.f,\n  a.g=b.g;\n}\n"
3477:
|
3481:
3482: ;
3483: $if $(@expr1073747002 $!@expr1073747003 $assertEquals $(@expr1073747004 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3483 $, "void f ( ) { A a ; A b ; if ( a . f ) { a . f = b . f ; a . g = b . g ; } }" $, $tok_ $(@expr1073747005 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3483 $, code@var559 $) $) $) { $return ; }
3484: }
3485:
3486:
3487: {
3488: const char code@var560 [@expr1073747006 45 ] =@expr1073747007 "void f()\n{\n  int a = b<T<char,3>, int>();\n}\n"
3489:
3490:
3491: ;
3492: $if $(@expr1073747008 $!@expr1073747009 $assertEquals $(@expr1073747010 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3492 $, "void f ( ) { int a ; a = b < T < char , 3 > , int > ( ) ; }" $, $tok_ $(@expr1073747011 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3492 $, code@var560 $) $) $) { $return ; }
3493: }
3494:
3495: {
3496: const char code@var561 [@expr1073747012 60 ] =@expr1073747013 "void f() {\n  a = new std::map<std::string, std::string>;\n}\n"
3497:
3498: ;
3499: $if $(@expr1073747014 $!@expr1073747015 $assertEquals $(@expr1073747016 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3499 $, "void f ( ) { a = new std :: map < std :: string , std :: string > ; }" $, $tok_ $(@expr1073747017 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3499 $, code@var561 $) $) $) { $return ; }
3500: }
3501:
3502: {
3503:
3504: const char code@var562 [@expr1073747018 53 ] =@expr1073747019 "const C<1,2,3> foo ()\n{\n    return C<1,2,3>(x,y);\n}\n"
3505:
3506:
3507: ;
3508: const char expected@var563 [@expr1073747020 69 ] =@expr1073747021 "const C < 1 , 2 , 3 > foo ( ) { return C < 1 , 2 , 3 > ( x , y ) ; }"
3509:
3510:
3511: ;
3512: $if $(@expr1073747022 $!@expr1073747023 $assertEquals $(@expr1073747024 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3512 $, expected@var563 $, $tok_ $(@expr1073747025 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3512 $, code@var562 $) $) $) { $return ; }
3513: }
3514:
3515: {
3516: const char code@var564 [@expr1073747026 45 ] =@expr1073747027 "int foo ()\n{\n    return doSomething(), 0;\n}\n"
3517:
3518:
3519: ;
3520: const char expected@var565 [@expr1073747028 45 ] =@expr1073747029 "int foo ( ) { doSomething ( ) ; return 0 ; }"
3521:
3522:
3523: ;
3524: $if $(@expr1073747030 $!@expr1073747031 $assertEquals $(@expr1073747032 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3524 $, expected@var565 $, $tok_ $(@expr1073747033 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3524 $, code@var564 $) $) $) { $return ; }
3525: }
3526:
3527: {
3528: const char code@var566 [@expr1073747034 37 ] =@expr1073747035 "int foo ()\n{\n    return a=1, b=2;\n}\n"
3529:
3530:
3531: ;
3532: const char expected@var567 [@expr1073747036 39 ] =@expr1073747037 "int foo ( ) { a = 1 ; return b = 2 ; }"
3533:
3534:
3535: ;
3536: $if $(@expr1073747038 $!@expr1073747039 $assertEquals $(@expr1073747040 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3536 $, expected@var567 $, $tok_ $(@expr1073747041 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3536 $, code@var566 $) $) $) { $return ; }
3537: }
3538:
3539: {
3540: const char code@var568 [@expr1073747042 41 ] =@expr1073747043 "tr = (struct reg){ .a = (1), .c = (2) };" ;
3541: const char expected@var569 [@expr1073747044 44 ] =@expr1073747045 "tr = ( struct reg ) { . a = 1 , . c = 2 } ;" ;
3542: $if $(@expr1073747046 $!@expr1073747047 $assertEquals $(@expr1073747048 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3542 $, expected@var569 $, $tok_ $(@expr1073747049 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3542 $, code@var568 $) $) $) { $return ; }
3543: }
3544: }
3545:
3546: void simplifyConditionOperator ( ) {
3547: {
3548: const char code@var570 [@expr1073747050 19 ] =@expr1073747051 "(0?(false?1:2):3);" ;
3549: $if $(@expr1073747052 $!@expr1073747053 $assertEquals $(@expr1073747054 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3549 $, "( 3 ) ;" $, $tok_ $(@expr1073747055 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3549 $, code@var570 $) $) $) { $return ; }
3550: }
3551:
3552: {
3553: const char code@var571 [@expr1073747056 19 ] =@expr1073747057 "(1?(false?1:2):3);" ;
3554: $if $(@expr1073747058 $!@expr1073747059 $assertEquals $(@expr1073747060 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3554 $, "( 2 ) ;" $, $tok_ $(@expr1073747061 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3554 $, code@var571 $) $) $) { $return ; }
3555: }
3556:
3557: {
3558: const char code@var572 [@expr1073747062 26 ] =@expr1073747063 "int a = (1?0:1 == 1?0:1);" ;
3559: $if $(@expr1073747064 $!@expr1073747065 $assertEquals $(@expr1073747066 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3559 $, "int a ; a = 0 ;" $, $tok_ $(@expr1073747067 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3559 $, code@var572 $) $) $) { $return ; }
3560: }
3561:
3562: {
3563: const char code@var573 [@expr1073747068 13 ] =@expr1073747069 "(1?0:foo());" ;
3564: $if $(@expr1073747070 $!@expr1073747071 $assertEquals $(@expr1073747072 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3564 $, "( 0 ) ;" $, $tok_ $(@expr1073747073 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3564 $, code@var573 $) $) $) { $return ; }
3565: }
3566:
3567: {
3568: const char code@var574 [@expr1073747074 50 ] =@expr1073747075 "void f () { switch(n) { case 1?0:foo(): break; }}" ;
3569:
3570: $do ${ $try ${ $tok_ $(@expr1073747076 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3570 $, code@var574 $) $; $} $catch $(@expr1073747077 $const InternalError $&@expr1073747078 $) ${ $} $catch $(@expr1073747079 $... $) ${ $assertThrow $(@expr1073747080 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3570 $) $; $} $} $while $(@expr1073747081 $false $) ;
3571:
3572: }
3573:
3574: {
3575: const char code@var575 [@expr1073747082 54 ] =@expr1073747083 "void f () { switch(n) { case 1?0?1:0:foo(): break; }}" ;
3576:
3577: $do ${ $try ${ $tok_ $(@expr1073747084 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3577 $, code@var575 $) $; $} $catch $(@expr1073747085 $const InternalError $&@expr1073747086 $) ${ $} $catch $(@expr1073747087 $... $) ${ $assertThrow $(@expr1073747088 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3577 $) $; $} $} $while $(@expr1073747089 $false $) ;
3578: }
3579:
3580: {
3581: const char code@var576 [@expr1073747090 50 ] =@expr1073747091 "void f () { switch(n) { case 0?foo():1: break; }}" ;
3582:
3583: $do ${ $try ${ $tok_ $(@expr1073747092 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3583 $, code@var576 $) $; $} $catch $(@expr1073747093 $const InternalError $&@expr1073747094 $) ${ $} $catch $(@expr1073747095 $... $) ${ $assertThrow $(@expr1073747096 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3583 $) $; $} $} $while $(@expr1073747097 $false $) ;
3584: }
3585:
3586: {
3587: const char code@var577 [@expr1073747098 26 ] =@expr1073747099 "( true ? a ( ) : b ( ) );" ;
3588: $if $(@expr1073747100 $!@expr1073747101 $assertEquals $(@expr1073747102 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3588 $, "( a ( ) ) ;" $, $tok_ $(@expr1073747103 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3588 $, code@var577 $) $) $) { $return ; }
3589: }
3590:
3591: {
3592: const char code@var578 [@expr1073747104 30 ] =@expr1073747105 "( true ? abc . a : abc . b );" ;
3593: $if $(@expr1073747106 $!@expr1073747107 $assertEquals $(@expr1073747108 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3593 $, "( abc . a ) ;" $, $tok_ $(@expr1073747109 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3593 $, code@var578 $) $) $) { $return ; }
3594: }
3595:
3596: {
3597: const char code@var579 [@expr1073747110 54 ] =@expr1073747111 "void f()\n{\n  bool x = false;\n  int b = x ? 44 : 3;\n}\n"
3598:
3599:
3600:
3601: ;
3602: $if $(@expr1073747112 $!@expr1073747113 $assertEquals $(@expr1073747114 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3602 $, "void f ( ) { }" $, $tok_ $(@expr1073747115 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3602 $, code@var579 $) $) $) { $return ; }
3603: }
3604:
3605: {
3606: const char code@var580 [@expr1073747116 36 ] =@expr1073747117 "int vals[] = { 0x13, 1?0x01:0x00 };" ;
3607: $if $(@expr1073747118 $!@expr1073747119 $assertEquals $(@expr1073747120 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3607 $, "int vals [ 2 ] = { 0x13 , 0x01 } ;" $, $tok_ $(@expr1073747121 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3607 $, code@var580 $) $) $) { $return ; }
3608: }
3609:
3610: {
3611: const char code@var581 [@expr1073747122 36 ] =@expr1073747123 "int vals[] = { 0x13, 0?0x01:0x00 };" ;
3612: $if $(@expr1073747124 $!@expr1073747125 $assertEquals $(@expr1073747126 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3612 $, "int vals [ 2 ] = { 0x13 , 0x00 } ;" $, $tok_ $(@expr1073747127 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3612 $, code@var581 $) $) $) { $return ; }
3613: }
3614:
3615: {
3616: const char code@var582 [@expr1073747128 22 ] =@expr1073747129 "a = 1 ? 0 : ({ 0; });" ;
3617: $if $(@expr1073747130 $!@expr1073747131 $assertEquals $(@expr1073747132 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3617 $, "a = 0 ;" $, $tok_ $(@expr1073747133 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3617 $, code@var582 $) $) $) { $return ; }
3618: }
3619:
3620:
3621: {
3622: const char code@var583 [@expr1073747134 28 ] =@expr1073747135 "; a = 1 ? : x; b = 0 ? : 2;" ;
3623: $if $(@expr1073747136 $!@expr1073747137 $assertEquals $(@expr1073747138 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3623 $, "; a = 1 ; b = 2 ;" $, $tok_ $(@expr1073747139 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3623 $, code@var583 $) $) $) { $return ; }
3624: }
3625:
3626:
3627: $if $(@expr1073747140 $!@expr1073747141 $assertEquals $(@expr1073747142 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3627 $, "0 ; x = { ? y : z ; }" $, $tok_ $(@expr1073747143 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3627 $, "0; x = { ? y : z; }" $) $) $) { $return ; }
3628:
3629: {
3630:
3631: $if $(@expr1073747144 $!@expr1073747145 $assertEquals $(@expr1073747146 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3631 $, "; x = 2 ;" $, $tok_ $(@expr1073747147 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3631 $, "; x = (true)?2:4;" $) $) $) { $return ; }
3632: $if $(@expr1073747148 $!@expr1073747149 $assertEquals $(@expr1073747150 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3632 $, "; x = 4 ;" $, $tok_ $(@expr1073747151 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3632 $, "; x = (false)?2:4;" $) $) $) { $return ; }
3633: $if $(@expr1073747152 $!@expr1073747153 $assertEquals $(@expr1073747154 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3633 $, "; x = * a ;" $, $tok_ $(@expr1073747155 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3633 $, "; x = (true)?*a:*b;" $) $) $) { $return ; }
3634: $if $(@expr1073747156 $!@expr1073747157 $assertEquals $(@expr1073747158 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3634 $, "; x = * b ;" $, $tok_ $(@expr1073747159 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3634 $, "; x = (false)?*a:*b;" $) $) $) { $return ; }
3635: $if $(@expr1073747160 $!@expr1073747161 $assertEquals $(@expr1073747162 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3635 $, "void f ( ) { return 1 ; }" $, $tok_ $(@expr1073747163 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3635 $, "void f() { char *p=0; return (p==0)?1:2; }" $) $) $) { $return ; }
3636: }
3637:
3638: {
3639:
3640: $do ${ $try ${ $tok_ $(@expr1073747164 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3640 $, "; type = decay_t<decltype(true ? declval<T>() : declval<U>())>;" $) $; $} $catch $(@expr1073747165 $const InternalError $&@expr1073747166 $) ${ $} $catch $(@expr1073747167 $... $) ${ $assertThrow $(@expr1073747168 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3640 $) $; $} $} $while $(@expr1073747169 $false $) ;
3641: $do ${ $try ${ $tok_ $(@expr1073747170 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3641 $, "; type = decay_t<decltype(false ? declval<T>() : declval<U>())>;" $) $; $} $catch $(@expr1073747171 $const InternalError $&@expr1073747172 $) ${ $} $catch $(@expr1073747173 $... $) ${ $assertThrow $(@expr1073747174 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3641 $) $; $} $} $while $(@expr1073747175 $false $) ;
3642: }
3643: }
3644:
3645: void calculations ( ) {
3646: {
3647: const char code@var584 [@expr1073747177 10 ] =@expr1073747178 "a[i+8+2];" ;
3648: $if $(@expr1073747179 $!@expr1073747180 $assertEquals $(@expr1073747181 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3648 $, "a [ i + 10 ] ;" $, $tok_ $(@expr1073747182 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3648 $, code@var584 $) $) $) { $return ; }
3649: }
3650: {
3651: const char code@var585 [@expr1073747183 10 ] =@expr1073747184 "a[8+2+i];" ;
3652: $if $(@expr1073747185 $!@expr1073747186 $assertEquals $(@expr1073747187 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3652 $, "a [ 10 + i ] ;" $, $tok_ $(@expr1073747188 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3652 $, code@var585 $) $) $) { $return ; }
3653: }
3654: {
3655: const char code@var586 [@expr1073747189 20 ] =@expr1073747190 "a[i + 2 * (2 * 4)];" ;
3656: $if $(@expr1073747191 $!@expr1073747192 $assertEquals $(@expr1073747193 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3656 $, "a [ i + 16 ] ;" $, $tok_ $(@expr1073747194 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3656 $, code@var586 $) $) $) { $return ; }
3657: }
3658: {
3659: const char code@var587 [@expr1073747195 17 ] =@expr1073747196 "a[i + 100 - 90];" ;
3660: $if $(@expr1073747197 $!@expr1073747198 $assertEquals $(@expr1073747199 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3660 $, "a [ i + 10 ] ;" $, $tok_ $(@expr1073747200 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3660 $, code@var587 $) $) $) { $return ; }
3661: }
3662: {
3663: const char code@var588 [@expr1073747201 30 ] =@expr1073747202 "a[1+1+1+1+1+1+1+1+1+1-2+5-3];" ;
3664: $if $(@expr1073747203 $!@expr1073747204 $assertEquals $(@expr1073747205 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3664 $, "a [ 10 ] ;" $, $tok_ $(@expr1073747206 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3664 $, code@var588 $) $) $) { $return ; }
3665: }
3666: {
3667: const char code@var589 [@expr1073747207 16 ] =@expr1073747208 "a[10+10-10-10];" ;
3668: $if $(@expr1073747209 $!@expr1073747210 $assertEquals $(@expr1073747211 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3668 $, "a [ 0 ] ;" $, $tok_ $(@expr1073747212 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3668 $, code@var589 $) $) $) { $return ; }
3669: }
3670:
3671: $if $(@expr1073747213 $!@expr1073747214 $assertEquals $(@expr1073747215 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3671 $, "a [ 4 ] ;" $, $tok_ $(@expr1073747216 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3671 $, "a[1+3|4];" $) $) $) { $return ; }
3672: $if $(@expr1073747217 $!@expr1073747218 $assertEquals $(@expr1073747219 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3672 $, "a [ 4U ] ;" $, $tok_ $(@expr1073747220 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3672 $, "a[1+3|4U];" $) $) $) { $return ; }
3673: $if $(@expr1073747221 $!@expr1073747222 $assertEquals $(@expr1073747223 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3673 $, "a [ 3 ] ;" $, $tok_ $(@expr1073747224 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3673 $, "a[1+2&3];" $) $) $) { $return ; }
3674: $if $(@expr1073747225 $!@expr1073747226 $assertEquals $(@expr1073747227 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3674 $, "a [ 3U ] ;" $, $tok_ $(@expr1073747228 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3674 $, "a[1+2&3U];" $) $) $) { $return ; }
3675: $if $(@expr1073747229 $!@expr1073747230 $assertEquals $(@expr1073747231 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3675 $, "a [ 5 ] ;" $, $tok_ $(@expr1073747232 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3675 $, "a[1-0^4];" $) $) $) { $return ; }
3676: $if $(@expr1073747233 $!@expr1073747234 $assertEquals $(@expr1073747235 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3676 $, "a [ 5U ] ;" $, $tok_ $(@expr1073747236 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3676 $, "a[1-0^4U];" $) $) $) { $return ; }
3677:
3678: $if $(@expr1073747237 $!@expr1073747238 $assertEquals $(@expr1073747239 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3678 $, "x = 1 + 2 * y ;" $, $tok_ $(@expr1073747240 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3678 $, "x=1+2*y;" $) $) $) { $return ; }
3679: $if $(@expr1073747241 $!@expr1073747242 $assertEquals $(@expr1073747243 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3679 $, "x = 7 ;" $, $tok_ $(@expr1073747244 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3679 $, "x=1+2*3;" $) $) $) { $return ; }
3680: $if $(@expr1073747245 $!@expr1073747246 $assertEquals $(@expr1073747247 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3680 $, "x = 47185 ;" $, $tok_ $(@expr1073747248 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3680 $, "x=(65536*72/100);" $) $) $) { $return ; }
3681: $if $(@expr1073747249 $!@expr1073747250 $assertEquals $(@expr1073747251 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3681 $, "x = 900 ;" $, $tok_ $(@expr1073747252 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3681 $, "x = 1500000 / ((145000 - 55000) * 1000 / 54000);" $) $) $) { $return ; }
3682: $if $(@expr1073747253 $!@expr1073747254 $assertEquals $(@expr1073747255 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3682 $, "int a [ 8 ] ;" $, $tok_ $(@expr1073747256 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3682 $, "int a[5+6/2];" $) $) $) { $return ; }
3683: $if $(@expr1073747257 $!@expr1073747258 $assertEquals $(@expr1073747259 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3683 $, "int a [ 4 ] ;" $, $tok_ $(@expr1073747260 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3683 $, "int a[(10)-1-5];" $) $) $) { $return ; }
3684: $if $(@expr1073747261 $!@expr1073747262 $assertEquals $(@expr1073747263 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3684 $, "int a [ i - 9 ] ;" $, $tok_ $(@expr1073747264 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3684 $, "int a[i - 10 + 1];" $) $) $) { $return ; }
3685: $if $(@expr1073747265 $!@expr1073747266 $assertEquals $(@expr1073747267 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3685 $, "int a [ i - 11 ] ;" $, $tok_ $(@expr1073747268 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3685 $, "int a[i - 10 - 1];" $) $) $) { $return ; }
3686:
3687: $if $(@expr1073747269 $!@expr1073747270 $assertEquals $(@expr1073747271 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3687 $, "x = y ;" $, $tok_ $(@expr1073747272 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3687 $, "x=0+y+0-0;" $) $) $) { $return ; }
3688: $if $(@expr1073747273 $!@expr1073747274 $assertEquals $(@expr1073747275 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3688 $, "x = 0 ;" $, $tok_ $(@expr1073747276 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3688 $, "x=0*y;" $) $) $) { $return ; }
3689:
3690: $if $(@expr1073747277 $!@expr1073747278 $assertEquals $(@expr1073747279 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3690 $, "x = 501 ;" $, $tok_ $(@expr1073747280 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3690 $, "x = 1000 + 2 >> 1;" $) $) $) { $return ; }
3691: $if $(@expr1073747281 $!@expr1073747282 $assertEquals $(@expr1073747283 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3691 $, "x = 125 ;" $, $tok_ $(@expr1073747284 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3691 $, "x = 1000 / 2 >> 2;" $) $) $) { $return ; }
3692:
3693: {
3694:
3695: const char code@var590 [@expr1073747285 31 ] =@expr1073747286 "void * operator new[](size_t);" ;
3696: $if $(@expr1073747287 $!@expr1073747288 $assertEquals $(@expr1073747289 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3696 $, "void * operatornew[] ( long ) ;" $, $tok_ $(@expr1073747290 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3696 $, code@var590 , true , Settings ::@expr1073747291 Win32A@expr1073747176 $) $) $) { $return ; }
3697: }
3698:
3699: $if $(@expr1073747292 $!@expr1073747293 $assertEquals $(@expr1073747294 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3699 $, "; a [ 0 ] ;" $, $tok_ $(@expr1073747295 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3699 $, ";a[0*(*p)];" $) $) $) { $return ; }
3700:
3701: $if $(@expr1073747296 $!@expr1073747297 $assertEquals $(@expr1073747298 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3701 $, ";" $, $tok_ $(@expr1073747299 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3701 $, "; x = x + 0;" $) $) $) { $return ; }
3702:
3703: $if $(@expr1073747300 $!@expr1073747301 $assertEquals $(@expr1073747302 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3703 $, "{ if ( a == 2 ) { } }" $, $tok_ $(@expr1073747303 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3703 $, "{if (a==1+1){}}" $) $) $) { $return ; }
3704: $if $(@expr1073747304 $!@expr1073747305 $assertEquals $(@expr1073747306 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3704 $, "{ if ( a + 2 != 6 ) { } }" $, $tok_ $(@expr1073747307 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3704 $, "{if (a+1+1!=1+2+3){}}" $) $) $) { $return ; }
3705: $if $(@expr1073747308 $!@expr1073747309 $assertEquals $(@expr1073747310 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3705 $, "{ if ( 4 < a ) { } }" $, $tok_ $(@expr1073747311 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3705 $, "{if (14-2*5<a*4/(2*2)){}}" $) $) $) { $return ; }
3706:
3707: $if $(@expr1073747312 $!@expr1073747313 $assertEquals $(@expr1073747314 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3707 $, "( y / 2 - 2 ) ;" $, $tok_ $(@expr1073747315 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3707 $, "(y / 2 - 2);" $) $) $) { $return ; }
3708: $if $(@expr1073747316 $!@expr1073747317 $assertEquals $(@expr1073747318 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3708 $, "( y % 2 - 2 ) ;" $, $tok_ $(@expr1073747319 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3708 $, "(y % 2 - 2);" $) $) $) { $return ; }
3709:
3710: $if $(@expr1073747320 $!@expr1073747321 $assertEquals $(@expr1073747322 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3710 $, "( 4 ) ;" $, $tok_ $(@expr1073747323 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3710 $, "(1 * 2 / 1 * 2);" $) $) $) { $return ; }
3711:
3712: $if $(@expr1073747324 $!@expr1073747325 $assertEquals $(@expr1073747326 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3712 $, "x ( 60129542144 ) ;" $, $tok_ $(@expr1073747327 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3712 $, "x(14<<4+17<<300%17);" $) $) $) { $return ; }
3713: $if $(@expr1073747328 $!@expr1073747329 $assertEquals $(@expr1073747330 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3713 $, "x ( 1 ) ;" $, $tok_ $(@expr1073747331 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3713 $, "x(8|5&6+0 && 7);" $) $) $) { $return ; }
3714: $if $(@expr1073747332 $!@expr1073747333 $assertEquals $(@expr1073747334 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3714 $, "x ( 1 ) ;" $, $tok_ $(@expr1073747335 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3714 $, "x(2 && 4<<4<<5 && 4);" $) $) $) { $return ; }
3715: $if $(@expr1073747336 $!@expr1073747337 $assertEquals $(@expr1073747338 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3715 $, "x ( 1 ) ;" $, $tok_ $(@expr1073747339 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3715 $, "x(9&&8%5%4/3);" $) $) $) { $return ; }
3716: $if $(@expr1073747340 $!@expr1073747341 $assertEquals $(@expr1073747342 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3716 $, "x ( 1 ) ;" $, $tok_ $(@expr1073747343 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3716 $, "x(2 && 2|5<<2%4);" $) $) $) { $return ; }
3717: $if $(@expr1073747344 $!@expr1073747345 $assertEquals $(@expr1073747346 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3717 $, "x ( -2 << 6 | 1 ) ;" $, $tok_ $(@expr1073747347 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3717 $, "x(1-3<<6|5/3);" $) $) $) { $return ; }
3718: $if $(@expr1073747348 $!@expr1073747349 $assertEquals $(@expr1073747350 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3718 $, "x ( 2 ) ;" $, $tok_ $(@expr1073747351 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3718 $, "x(2|0*0&2>>1+0%2*1);" $) $) $) { $return ; }
3719: $if $(@expr1073747352 $!@expr1073747353 $assertEquals $(@expr1073747354 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3719 $, "x ( 0 & 4 != 1 ) ;" $, $tok_ $(@expr1073747355 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3719 $, "x(4%1<<1&4!=1);" $) $) $) { $return ; }
3720: $if $(@expr1073747356 $!@expr1073747357 $assertEquals $(@expr1073747358 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3720 $, "x ( true ) ;" $, $tok_ $(@expr1073747359 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3720 $, "x(0&&4>0==2||4);" $) $) $) { $return ; }
3721:
3722:
3723: $if $(@expr1073747360 $!@expr1073747361 $assertEquals $(@expr1073747362 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3723 $, "new ( auto ) ( 4 ) ;" $, $tok_ $(@expr1073747363 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3723 $, "new (auto)(4);" $) $) $) { $return ; }
3724: }
3725:
3726: void comparisons ( ) {
3727: $if $(@expr1073747364 $!@expr1073747365 $assertEquals $(@expr1073747366 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3727 $, "( 1 ) ;" $, $tok_ $(@expr1073747367 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3727 $, "( 1 < 2 );" $) $) $) { $return ; }
3728: $if $(@expr1073747368 $!@expr1073747369 $assertEquals $(@expr1073747370 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3728 $, "( x && true ) ;" $, $tok_ $(@expr1073747371 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3728 $, "( x && 1 < 2 );" $) $) $) { $return ; }
3729: $if $(@expr1073747372 $!@expr1073747373 $assertEquals $(@expr1073747374 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3729 $, "( 5 ) ;" $, $tok_ $(@expr1073747375 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3729 $, "( 1 < 2 && 3 < 4 ? 5 : 6 );" $) $) $) { $return ; }
3730: $if $(@expr1073747376 $!@expr1073747377 $assertEquals $(@expr1073747378 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3730 $, "( 6 ) ;" $, $tok_ $(@expr1073747379 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3730 $, "( 1 > 2 && 3 > 4 ? 5 : 6 );" $) $) $) { $return ; }
3731: }
3732:
3733: void simplifyCalculations ( ) {
3734: $if $(@expr1073747380 $!@expr1073747381 $assertEquals $(@expr1073747382 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3734 $, "void foo ( char str [ ] ) { char x ; x = * str ; }" $, $tok_ $(@expr1073747383 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3734 $, "void foo ( char str [ ] ) { char x = 0 | ( * str ) ; }" $) $) $) { $return
3735: ; }
3736: $if $(@expr1073747384 $!@expr1073747385 $assertEquals $(@expr1073747386 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3736 $, "void foo ( ) { if ( b ) { } }" $, $tok_ $(@expr1073747387 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3736 $, "void foo ( ) { if (b + 0) { } }" $) $) $) { $return
3737: ; }
3738: $if $(@expr1073747388 $!@expr1073747389 $assertEquals $(@expr1073747390 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3738 $, "void foo ( ) { if ( b ) { } }" $, $tok_ $(@expr1073747391 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3738 $, "void foo ( ) { if (0 + b) { } }" $) $) $) { $return
3739: ; }
3740: $if $(@expr1073747392 $!@expr1073747393 $assertEquals $(@expr1073747394 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3740 $, "void foo ( ) { if ( b ) { } }" $, $tok_ $(@expr1073747395 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3740 $, "void foo ( ) { if (b - 0) { } }" $) $) $) { $return
3741: ; }
3742: $if $(@expr1073747396 $!@expr1073747397 $assertEquals $(@expr1073747398 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3742 $, "void foo ( ) { if ( b ) { } }" $, $tok_ $(@expr1073747399 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3742 $, "void foo ( ) { if (b * 1) { } }" $) $) $) { $return
3743: ; }
3744: $if $(@expr1073747400 $!@expr1073747401 $assertEquals $(@expr1073747402 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3744 $, "void foo ( ) { if ( b ) { } }" $, $tok_ $(@expr1073747403 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3744 $, "void foo ( ) { if (1 * b) { } }" $) $) $) { $return
3745: ; }
3746:
3747:
3748: $if $(@expr1073747404 $!@expr1073747405 $assertEquals $(@expr1073747406 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3748 $, "void foo ( ) { if ( b ) { } }" $, $tok_ $(@expr1073747407 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3748 $, "void foo ( ) { if (b | 0) { } }" $) $) $) { $return
3749: ; }
3750: $if $(@expr1073747408 $!@expr1073747409 $assertEquals $(@expr1073747410 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3750 $, "void foo ( ) { if ( b ) { } }" $, $tok_ $(@expr1073747411 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3750 $, "void foo ( ) { if (0 | b) { } }" $) $) $) { $return
3751: ; }
3752: $if $(@expr1073747412 $!@expr1073747413 $assertEquals $(@expr1073747414 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3752 $, "void foo ( int b ) { int a ; a = b ; bar ( a ) ; }" $, $tok_ $(@expr1073747415 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3752 $, "void foo ( int b ) { int a = b | 0 ; bar ( a ) ; }" $) $) $) { $return
3753: ; }
3754: $if $(@expr1073747416 $!@expr1073747417 $assertEquals $(@expr1073747418 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3754 $, "void foo ( int b ) { int a ; a = b ; bar ( a ) ; }" $, $tok_ $(@expr1073747419 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3754 $, "void foo ( int b ) { int a = 0 | b ; bar ( a ) ; }" $) $) $) { $return
3755: ; }
3756:
3757:
3758: $if $(@expr1073747420 $!@expr1073747421 $assertEquals $(@expr1073747422 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3758 $, "int f ( ) { return 15 ; }" $, $tok_ $(@expr1073747423 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3758 $, "int f() { int a = 10; int b = 5; return a + b; }" $) $) $) { $return
3759: ; }
3760: $if $(@expr1073747424 $!@expr1073747425 $assertEquals $(@expr1073747426 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3760 $, "int f ( ) { return a ; }" $, $tok_ $(@expr1073747427 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3760 $, "int f() { return a * 1; }" $) $) $) { $return
3761: ; }
3762: $if $(@expr1073747428 $!@expr1073747429 $assertEquals $(@expr1073747430 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3762 $, "int f ( int a ) { return 0 ; }" $, $tok_ $(@expr1073747431 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3762 $, "int f(int a) { return 0 * a; }" $) $) $) { $return
3763: ; }
3764: $if $(@expr1073747432 $!@expr1073747433 $assertEquals $(@expr1073747434 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3764 $, "bool f ( int i ) { switch ( i ) { case 15 : ; return true ; } }" $, $tok_ $(@expr1073747435 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3764 $, "bool f(int i) { switch (i) { case 10 + 5: return true; } }" $) $) $) { $return
3765: ; }
3766:
3767:
3768: $if $(@expr1073747436 $!@expr1073747437 $assertEquals $(@expr1073747438 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3768 $, "int foo ( ) { return 1 ; }" $, $tok_ $(@expr1073747439 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3768 $, "int foo ( ) { int i; int j; i = 1 || j; return i; }" $) $) $) { $return
3769: ; }
3770:
3771: $if $(@expr1073747440 $!@expr1073747441 $assertEquals $(@expr1073747442 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3771 $, "int foo ( ) { return 0 ; }" $, $tok_ $(@expr1073747443 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3771 $, "int foo ( ) { int i; int j; i = 0 && j; return i; }" $) $) $) { $return
3772: ; }
3773:
3774:
3775: $if $(@expr1073747444 $!@expr1073747445 $assertEquals $(@expr1073747446 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3775 $, "( 0 ) ;" $, $tok_ $(@expr1073747447 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3775 $, "( 0 && a < 123 );" $) $) $) { $return
3776: ; }
3777: $if $(@expr1073747448 $!@expr1073747449 $assertEquals $(@expr1073747450 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3777 $, "( 0 ) ;" $, $tok_ $(@expr1073747451 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3777 $, "( 0 && a[123] );" $) $) $) { $return
3778: ; }
3779:
3780:
3781: $if $(@expr1073747452 $!@expr1073747453 $assertEquals $(@expr1073747454 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3781 $, "dostuff ( 1 ) ;" $, $tok_ $(@expr1073747455 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3781 $, "dostuff(9&&8);" $) $) $) { $return ; }
3782: }
3783:
3784:
3785:
3786: void simplifyFlowControl ( ) {
3787: const char code1@var591 [@expr1073747456 30 ] =@expr1073747457 "void f() {\n  return;\n  y();\n}"
3788:
3789:
3790: ;
3791: $if $(@expr1073747458 $!@expr1073747459 $assertEquals $(@expr1073747460 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3791 $, "void f ( ) { return ; }" $, $tokWithStdLib_ $(@expr1073747461 code1@var591 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3791 $) $) $) { $return ; }
3792:
3793: const char code2@var592 [@expr1073747462 31 ] =@expr1073747463 "void f() {\n  exit(0);\n  y();\n}"
3794:
3795:
3796: ;
3797: $if $(@expr1073747464 $!@expr1073747465 $assertEquals $(@expr1073747466 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3797 $, "void f ( ) { exit ( 0 ) ; }" $, $tokWithStdLib_ $(@expr1073747467 code2@var592 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3797 $) $) $) { $return ; }
3798:
3799: const char code3@var593 [@expr1073747468 33 ] =@expr1073747469 "void f() {\n  x.abort();\n  y();\n}"
3800:
3801:
3802: ;
3803: $if $(@expr1073747470 $!@expr1073747471 $assertEquals $(@expr1073747472 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3803 $, "void f ( ) { x . abort ( ) ; y ( ) ; }" $, $tokWithStdLib_ $(@expr1073747473 code3@var593 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3803 $) $) $) { $return ; }
3804: }
3805:
3806: void flowControl ( ) {
3807: {
3808: $if $(@expr1073747474 $!@expr1073747475 $assertEquals $(@expr1073747476 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3808 $, "void f ( ) { exit ( 0 ) ; }" $, $tokWithStdLib_ $(@expr1073747477 "void f() { exit(0); foo(); }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3808 $) $) $) { $return ; }
3809: $if $(@expr1073747478 $!@expr1073747479 $assertEquals $(@expr1073747480 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3809 $, "void f ( ) { exit ( 0 ) ; }" $, $tokWithStdLib_ $(@expr1073747481 "void f() { exit(0); if (m) foo(); }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3809 $) $) $) { $return ; }
3810: $if $(@expr1073747482 $!@expr1073747483 $assertEquals $(@expr1073747484 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3810 $, "void f ( int n ) { if ( n ) { exit ( 0 ) ; } foo ( ) ; }" $, $tokWithStdLib_ $(@expr1073747485 "void f(int n) { if (n) { exit(0); } foo(); }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3810 $) $) $) { $return ; }
3811: $if $(@expr1073747486 $!@expr1073747487 $assertEquals $(@expr1073747488 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3811 $, "void f ( ) { exit ( 0 ) ; }" $, $tokWithStdLib_ $(@expr1073747489 "void f() { exit(0); dead(); switch (n) { case 1: deadcode () ; default: deadcode (); } }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3811 $) $) $) { $return ; }
3812:
3813: $if $(@expr1073747490 $!@expr1073747491 $assertEquals $(@expr1073747492 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3813 $, "int f ( int n ) { switch ( n ) { case 0 : ; exit ( 0 ) ; default : ; exit ( 0 ) ; } exit ( 0 ) ; }" $, $tokWithStdLib_ $(@expr1073747493 "int f(int n) { switch (n) {case 0: exit(0); n*=2; default: exit(0); n*=6;} exit(0); foo();}" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3813 $) $) $) { $return
3814: ; }
3815:
3816: $if $(@expr1073747494 $!@expr1073747495 $assertEquals $(@expr1073747496 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3816 $, "void f ( int i ) { goto label ; { label : ; exit ( 0 ) ; } }" $, $tokWithStdLib_ $(@expr1073747497 "void f (int i) { goto label; switch(i) { label: exit(0); } }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3816 $) $) $) { $return ; }
3817:
3818: $if $(@expr1073747498 $!@expr1073747499 $assertEquals $(@expr1073747500 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3818 $, "void f ( ) { MACRO ( exit ( 0 ) ) }" $, $tokWithStdLib_ $(@expr1073747501 "void f() { MACRO(exit(0)) }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3818 $) $) $) { $return ; }
3819: $if $(@expr1073747502 $!@expr1073747503 $assertEquals $(@expr1073747504 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3819 $, "void f ( ) { MACRO ( bar1 , exit ( 0 ) ) }" $, $tokWithStdLib_ $(@expr1073747505 "void f() { MACRO(bar1, exit(0)) }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3819 $) $) $) { $return ; }
3820: }
3821:
3822: {
3823: const char * code@var594 ; code@var594 =@expr1073747506 "void f(){    if (k>0) goto label;    exit(0);    if (tnt)    {        {            check();            k=0;        }        label:        bar();    } }"
3824:
|
3834:
3835: ;
3836: $if $(@expr1073747507 $!@expr1073747508 $assertEquals $(@expr1073747509 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3836 $, "void f ( ) { if ( k > 0 ) { goto label ; } exit ( 0 ) ; { label : ; bar ( ) ; } }" $, $tokWithStdLib_ $(@expr1073747510 code@var594 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3836 $) $) $) { $return ; }
3837: }
3838:
3839: {
3840: const char * code@var595 ; code@var595 =@expr1073747511 "void foo () {    exit(0);    {        boo();        while (n) { --n; }        {            label:            ok();        }    }}"
3841:
|
3849:
3850: ;
3851: $if $(@expr1073747512 $!@expr1073747513 $assertEquals $(@expr1073747514 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3851 $, "void foo ( ) { exit ( 0 ) ; { label : ; ok ( ) ; } }" $, $tokWithStdLib_ $(@expr1073747515 code@var595 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3851 $) $) $) { $return ; }
3852: }
3853:
3854: {
3855: const char * code@var596 ; code@var596 =@expr1073747516 "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break;    }}"
3856:
|
3863:
3864: ;
3865: const char * expected@var597 ; expected@var597 =@expr1073747517 "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }" ;
3866: $if $(@expr1073747518 $!@expr1073747519 $assertEquals $(@expr1073747520 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3866 $, expected@var597 $, $tokWithStdLib_ $(@expr1073747521 code@var596 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3866 $) $) $) { $return ; }
3867: }
3868:
3869: {
3870: const char * code@var598 ; code@var598 =@expr1073747522 "void foo () {    exit(0);    switch (n) {        case 1:            {                foo();            }            label:            bar();    }}"
3871:
|
3879:
3880: ;
3881: const char * expected@var599 ; expected@var599 =@expr1073747523 "void foo ( ) { exit ( 0 ) ; { label : ; bar ( ) ; } }" ;
3882: $if $(@expr1073747524 $!@expr1073747525 $assertEquals $(@expr1073747526 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3882 $, expected@var599 $, $tokWithStdLib_ $(@expr1073747527 code@var598 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3882 $) $) $) { $return ; }
3883: }
3884:
3885: {
3886: const char * code@var600 ; code@var600 =@expr1073747528 "void foo () {    exit(0);    switch (n) {        case a:            {                foo();            }        case b|c:            bar();    }}"
3887:
|
3895:
3896: ;
3897: const char * expected@var601 ; expected@var601 =@expr1073747529 "void foo ( ) { exit ( 0 ) ; }" ;
3898: $if $(@expr1073747530 $!@expr1073747531 $assertEquals $(@expr1073747532 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3898 $, expected@var601 $, $tokWithStdLib_ $(@expr1073747533 code@var600 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3898 $) $) $) { $return ; }
3899: }
3900:
3901: {
3902: const char * code@var602 ; code@var602 =@expr1073747534 "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break; break;    }}"
3903:
|
3910:
3911: ;
3912: const char * expected@var603 ; expected@var603 =@expr1073747535 "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }" ;
3913: $if $(@expr1073747536 $!@expr1073747537 $assertEquals $(@expr1073747538 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3913 $, expected@var603 $, $tokWithStdLib_ $(@expr1073747539 code@var602 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3913 $) $) $) { $return ; }
3914: }
3915:
3916: {
3917: const char * code@var604 ; code@var604 =@expr1073747540 "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break;    }}"
3918:
|
3925:
3926: ;
3927: const char * expected@var605 ; expected@var605 =@expr1073747541 "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }" ;
3928: $if $(@expr1073747542 $!@expr1073747543 $assertEquals $(@expr1073747544 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3928 $, expected@var605 $, $tokWithStdLib_ $(@expr1073747545 code@var604 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3928 $) $) $) { $return ; }
3929: }
3930:
3931: {
3932: const char * code@var606 ; code@var606 =@expr1073747546 "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break; break;    }}"
3933:
|
3940:
3941: ;
3942: const char * expected@var607 ; expected@var607 =@expr1073747547 "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }" ;
3943: $if $(@expr1073747548 $!@expr1073747549 $assertEquals $(@expr1073747550 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3943 $, expected@var607 $, $tokWithStdLib_ $(@expr1073747551 code@var606 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3943 $) $) $) { $return ; }
3944: }
3945:
3946: {
3947: const char * code@var608 ; code@var608 =@expr1073747552 "int f() { switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0) } exit(0);case 2: exit(0); { random(); } tack(); switch(y) { case 1: exit(0); case 2: exit(0); } exit(0); } exit(0); }"
3948:
3949:
3950:
3951: ;
3952: $if $(@expr1073747553 $!@expr1073747554 $assertEquals $(@expr1073747555 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3952 $, "int f ( ) { switch ( x ) { case 1 : ; exit ( 0 ) ; case 2 : ; exit ( 0 ) ; } exit ( 0 ) ; }" $, $tokWithStdLib_ $(@expr1073747556 code@var608 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3952 $) $) $) { $return ; }
3953: }
3954:
3955: {
3956: const char * code@var609 ; code@var609 =@expr1073747557 "int f() {switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0); } exit(0);case 2: switch(y) { case 1: exit(0); bar2(); foo(); case 2: exit(0); }exit(0); } exit(0); }"
3957:
3958:
3959: ;
3960: const char * expected@var610 ; expected@var610 =@expr1073747558 "int f ( ) { switch ( x ) { case 1 : ; exit ( 0 ) ; case 2 : ; switch ( y ) { case 1 : ; exit ( 0 ) ; case 2 : ; exit ( 0 ) ; } exit ( 0 ) ; } exit ( 0 ) ; }"
3961:
3962:
3963: ;
3964: $if $(@expr1073747559 $!@expr1073747560 $assertEquals $(@expr1073747561 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3964 $, expected@var610 $, $tokWithStdLib_ $(@expr1073747562 code@var609 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3964 $) $) $) { $return ; }
3965: }
3966:
3967: {
3968: const char * code@var611 ; code@var611 =@expr1073747563 "void foo () {    switch (i) { case 0: switch (j) { case 0: exit(0); }        case 1: switch (j) { case -1: exit(0); }        case 2: switch (j) { case -2: exit(0); }        case 3: if (blah6) {exit(0);} break; } }"
3969:
3970:
3971:
3972: ;
3973: const char * expected@var612 ; expected@var612 =@expr1073747564 "void foo ( ) { switch ( i ) { case 0 : ; switch ( j ) { case 0 : ; exit ( 0 ) ; } case 1 : ; switch ( j ) { case -1 : ; exit ( 0 ) ; } case 2 : ; switch ( j ) { case -2 : ; exit ( 0 ) ; } case 3 : ; if ( blah6 ) { exit ( 0 ) ; } break ; } }"
3974:
3975:
3976:
3977: ;
3978: $if $(@expr1073747565 $!@expr1073747566 $assertEquals $(@expr1073747567 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3978 $, expected@var612 $, $tokWithStdLib_ $(@expr1073747568 code@var611 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3978 $) $) $) { $return ; }
3979: }
3980:
3981: {
3982: const char * code@var613 ; code@var613 =@expr1073747569 "void foo () {    exit(0);    switch (i) { case 0: switch (j) { case 0: foo(); }        case 1: switch (j) { case -1: bar(); label:; ok(); }        case 3: if (blah6) { boo(); break; } } }"
3983:
3984:
3985:
3986: ;
3987: const char * expected@var614 ; expected@var614 =@expr1073747570 "void foo ( ) { exit ( 0 ) ; { { label : ; ok ( ) ; } case 3 : ; if ( blah6 ) { boo ( ) ; break ; } } }" ;
3988: $if $(@expr1073747571 $!@expr1073747572 $assertEquals $(@expr1073747573 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3988 $, expected@var614 $, $tokWithStdLib_ $(@expr1073747574 code@var613 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 3988 $) $) $) { $return ; }
3989: }
3990:
3991: {
3992: const char * code@var615 ; code@var615 =@expr1073747575 "void foo() {     switch ( t ) {     case 0:          if ( t ) switch ( b ) {}          break;     case 1:          exit(0);          return 0;     }     return 0;}"
3993:
|
4001:
4002: ;
4003: const char * expected@var616 ; expected@var616 =@expr1073747576 "void foo ( ) { switch ( t ) { case 0 : ; if ( t ) { switch ( b ) { } } break ; case 1 : ; exit ( 0 ) ; } return 0 ; }"
4004:
|
4011:
4012: ;
4013: $if $(@expr1073747577 $!@expr1073747578 $assertEquals $(@expr1073747579 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4013 $, expected@var616 $, $tokWithStdLib_ $(@expr1073747580 code@var615 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4013 $) $) $) { $return ; }
4014: }
4015:
4016: {
4017: const char code@var617 [@expr1073747581 127 ] =@expr1073747582 "void foo()\n{\n    A *a = 0;\n    if (!a) {\n        nondeadcode;\n        return;\n        dead;\n    }\n    stilldead;\n    a->_a;\n}\n"
4018:
|
4026:
4027: ;
4028: const char expected@var618 [@expr1073747583 60 ] =@expr1073747584 "void foo ( ) { A * a ; a = 0 ; { nondeadcode ; return ; } }"
4029:
|
4033:
4034: ;
4035: $if $(@expr1073747585 $!@expr1073747586 $assertEquals $(@expr1073747587 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4035 $, expected@var618 $, $tokWithStdLib_ $(@expr1073747588 code@var617 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4035 $) $) $) { $return ; }
4036: }
4037:
4038: {
4039: const char code@var619 [@expr1073747589 98 ] =@expr1073747590 "class Fred\n{\npublic:\n    bool foo() const { return f; }\n    bool exit();\n\nprivate:\n   bool f;\n};\n"
4040:
|
4046:
4047: ;
4048: const char expected@var620 [@expr1073747591 93 ] =@expr1073747592 "class Fred { public: bool foo ( ) const { return f ; } bool exit ( ) ; private: bool f ; } ;"
4049:
|
4055:
4056: ;
4057: $if $(@expr1073747593 $!@expr1073747594 $assertEquals $(@expr1073747595 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4057 $, expected@var620 $, $tokWithStdLib_ $(@expr1073747596 code@var619 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4057 $) $) $) { $return ; }
4058: }
4059:
4060: {
4061: const char code@var621 [@expr1073747597 122 ] =@expr1073747598 "class abort { };\n\nclass Fred\n{\n    public:\n    bool foo() const { return f; }\n    abort exit();\n\n    private:\nbool f;\n};\n"
4062:
|
4070:
4071: ;
4072: const char expected@var622 [@expr1073747599 112 ] =@expr1073747600 "class abort { } ; class Fred { public: bool foo ( ) const { return f ; } abort exit ( ) ; private: bool f ; } ;"
4073:
|
4080:
4081: ;
4082: $if $(@expr1073747601 $!@expr1073747602 $assertEquals $(@expr1073747603 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4082 $, expected@var622 $, $tokWithStdLib_ $(@expr1073747604 code@var621 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4082 $) $) $) { $return ; }
4083: }
4084:
4085: $if $(@expr1073747605 $!@expr1073747606 $assertEquals $(@expr1073747607 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4085 $, "void foo ( ) { exit ( 0 ) ; }" $, $tokWithStdLib_ $(@expr1073747608 "void foo() { do { exit(0); } while (true); }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4085 $) $) $) { $return
4086: ; }
4087:
4088:
4089: $tokWithStdLib_ $(@expr1073747609 "void foo() {\n  goto label;\n  for (int i = 0; i < 0; ++i) {\n    ;\nlabel:\n    ;\n  }\n}" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4089 $)
4090:
|
4095:
4096: ;
4097: }
4098:
4099: void strcat1 ( ) {
4100: const char code@var623 [@expr1073747610 94 ] =@expr1073747611 "; strcat(strcat(strcat(strcat(strcat(strcat(dst, \"this \"), \"\"), \"is \"), \"a \"), \"test\"), \".\");" ;
4101: const char expect@var624 [@expr1073747612 149 ] =@expr1073747613 "; strcat ( dst , \"this \" ) ; strcat ( dst , \"\" ) ; strcat ( dst , \"is \" ) ; strcat ( dst , \"a \" ) ; strcat ( dst , \"test\" ) ; strcat ( dst , \".\" ) ;"
4102:
|
4106:
4107: ;
4108:
4109: $if $(@expr1073747614 $!@expr1073747615 $assertEquals $(@expr1073747616 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4109 $, expect@var624 $, $tok_ $(@expr1073747617 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4109 $, code@var623 $) $) $) { $return ; }
4110: }
4111: void strcat2 ( ) {
4112: const char code@var625 [@expr1073747618 36 ] =@expr1073747619 "; strcat(strcat(dst, foo[0]), \" \");" ;
4113: const char expect@var626 [@expr1073747620 54 ] =@expr1073747621 "; strcat ( dst , foo [ 0 ] ) ; strcat ( dst , \" \" ) ;"
4114:
4115: ;
4116:
4117: $if $(@expr1073747622 $!@expr1073747623 $assertEquals $(@expr1073747624 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4117 $, expect@var626 $, $tok_ $(@expr1073747625 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4117 $, code@var625 $) $) $) { $return ; }
4118: }
4119:
4120: void simplifyAtol ( ) {
4121: $if $(@expr1073747626 $!@expr1073747627 $assertEquals $(@expr1073747628 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4121 $, "a = std :: atol ( x ) ;" $, $tok_ $(@expr1073747629 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4121 $, "a = std::atol(x);" $) $) $) { $return ; }
4122: $if $(@expr1073747630 $!@expr1073747631 $assertEquals $(@expr1073747632 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4122 $, "a = atol ( \"text\" ) ;" $, $tok_ $(@expr1073747633 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4122 $, "a = atol(\"text\");" $) $) $) { $return ; }
4123: $if $(@expr1073747634 $!@expr1073747635 $assertEquals $(@expr1073747636 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4123 $, "a = 0 ;" $, $tok_ $(@expr1073747637 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4123 $, "a = std::atol(\"0\");" $) $) $) { $return ; }
4124: $if $(@expr1073747638 $!@expr1073747639 $assertEquals $(@expr1073747640 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4124 $, "a = 10 ;" $, $tok_ $(@expr1073747641 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4124 $, "a = atol(\"0xa\");" $) $) $) { $return ; }
4125: }
4126:
4127: void simplifyOperator1 ( ) {
4128:
4129: const char code@var627 [@expr1073747642 85 ] =@expr1073747643 "class c {\npublic:\n    operator std::string() const;\n    operator string() const;\n};\n"
4130:
4131:
4132:
4133: ;
4134: const char expected@var628 [@expr1073747644 81 ] =@expr1073747645 "class c { public: operatorstd::string ( ) const ; operatorstring ( ) const ; } ;"
4135:
4136:
4137:
4138: ;
4139: $if $(@expr1073747646 $!@expr1073747647 $assertEquals $(@expr1073747648 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4139 $, expected@var628 $, $tok_ $(@expr1073747649 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4139 $, code@var627 $) $) $) { $return ; }
4140: }
4141:
4142: void simplifyOperator2 ( ) {
4143:
4144: $if $(@expr1073747650 $!@expr1073747651 $assertEquals $(@expr1073747652 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4144 $, "template < class T > class SharedPtr { SharedPtr & operator= ( const SharedPtr < Y > & r ) ; } ; class TClass { public: TClass & operator= ( const TClass & rhs ) ; } ; TClass :: TClass ( const TClass & other ) { operator= ( other ) ; }" $, $tok_ $(@expr1073747653 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4144 $, "template<class T>\n    class SharedPtr {\n    SharedPtr& operator=(SharedPtr<Y> const & r);\n};\nclass TClass {\npublic:\n    TClass& operator=(const TClass& rhs);\n};\nTClass::TClass(const TClass &other) {\n    operator=(other);\n}" $) $) $) { $return
4145:
|
4160:
4161: ; }
4162: }
4163:
4164: void simplifyArrayAccessSyntax ( ) {
4165: $if $(@expr1073747654 $!@expr1073747655 $assertEquals $(@expr1073747656 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4165 $, "\n\n##file 0\n1: int a@1 ; a@1 [ 13 ] ;\n" $, $tokenizeDebugListing_ $(@expr1073747657 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4165 $, "int a; 13[a];" $) $) $) { $return
4166: ; }
4167: }
4168:
4169: void simplify_numeric_condition ( ) {
4170: {
4171: const char code@var629 [@expr1073747658 47 ] =@expr1073747659
4172: "void f()\n{\nint x = 0;\nif( !x || 0 )\n{ g();\n}\n}"
4173:
|
4177:
4178: ;
4179:
4180: $if $(@expr1073747660 $!@expr1073747661 $assertEquals $(@expr1073747662 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4180 $, "void f ( ) { g ( ) ; }" $, $tok_ $(@expr1073747663 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4180 $, code@var629 $) $) $) { $return ; }
4181: }
4182:
4183: {
4184: const char code@var630 [@expr1073747664 42 ] =@expr1073747665
4185: "void f()\n{\nint x = 1;\nif( !x )\n{ g();\n}\n}"
4186:
|
4190:
4191: ;
4192:
4193: $if $(@expr1073747666 $!@expr1073747667 $assertEquals $(@expr1073747668 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4193 $, "void f ( ) { }" $, $tok_ $(@expr1073747669 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4193 $, code@var630 $) $) $) { $return ; }
4194: }
4195:
4196: {
4197: const char code@var631 [@expr1073747670 46 ] =@expr1073747671
4198: "void f()\n{\nbool x = true;\nif( !x )\n{ g();\n}\n}"
4199:
|
4203:
4204: ;
4205:
4206: $if $(@expr1073747672 $!@expr1073747673 $assertEquals $(@expr1073747674 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4206 $, "void f ( ) { }" $, $tok_ $(@expr1073747675 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4206 $, code@var631 $) $) $) { $return ; }
4207: }
4208:
4209: {
4210: const char code@var632 [@expr1073747676 47 ] =@expr1073747677
4211: "void f()\n{\nbool x = false;\nif( !x )\n{ g();\n}\n}"
4212:
|
4216:
4217: ;
4218:
4219: $if $(@expr1073747678 $!@expr1073747679 $assertEquals $(@expr1073747680 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4219 $, "void f ( ) { g ( ) ; }" $, $tok_ $(@expr1073747681 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4219 $, code@var632 $) $) $) { $return ; }
4220: }
4221:
4222: {
4223: const char code@var633 [@expr1073747682 29 ] =@expr1073747683 "void f()\n{\n    if (5==5);\n}\n"
4224:
4225:
4226: ;
4227:
4228: $if $(@expr1073747684 $!@expr1073747685 $assertEquals $(@expr1073747686 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4228 $, "void f ( ) { ; }" $, $tok_ $(@expr1073747687 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4228 $, code@var633 $) $) $) { $return ; }
4229: }
4230:
4231: {
4232: const char code@var634 [@expr1073747688 28 ] =@expr1073747689 "void f()\n{\n    if (4<5);\n}\n"
4233:
4234:
4235: ;
4236:
4237: $if $(@expr1073747690 $!@expr1073747691 $assertEquals $(@expr1073747692 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4237 $, "void f ( ) { ; }" $, $tok_ $(@expr1073747693 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4237 $, code@var634 $) $) $) { $return ; }
4238: }
4239:
4240: {
4241: const char code@var635 [@expr1073747694 28 ] =@expr1073747695 "void f()\n{\n    if (5<5);\n}\n"
4242:
4243:
4244: ;
4245:
4246: $if $(@expr1073747696 $!@expr1073747697 $assertEquals $(@expr1073747698 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4246 $, "void f ( ) { }" $, $tok_ $(@expr1073747699 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4246 $, code@var635 $) $) $) { $return ; }
4247: }
4248:
4249: {
4250: const char code@var636 [@expr1073747700 41 ] =@expr1073747701 "void f()\n{\n    if (13>12?true:false);\n}\n"
4251:
4252:
4253: ;
4254:
4255: $if $(@expr1073747702 $!@expr1073747703 $assertEquals $(@expr1073747704 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4255 $, "void f ( ) { ; }" $, $tok_ $(@expr1073747705 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4255 $, code@var636 $) $) $) { $return ; }
4256: }
4257:
4258: {
4259:
4260: const char code@var637 [@expr1073747706 57 ] =@expr1073747707
4261: "void f() {\nif (-1e-2 == -0.01) \n    g();\nelse\n    h();\n}"
4262:
|
4265:
4266: ;
4267: $if $(@expr1073747708 $!@expr1073747709 $assertEquals $(@expr1073747710 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4267 $, "void f ( ) { if ( -1e-2 == -0.01 ) { g ( ) ; } else { h ( ) ; } }" $, $tok_ $(@expr1073747711 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4267 $, code@var637 $) $) $) { $return
4268: ; }
4269: }
4270: }
4271:
4272: void simplify_condition ( ) {
4273: {
4274: const char code@var638 [@expr1073747712 39 ] =@expr1073747713
4275: "void f(int a)\n{\nif (a && false) g();\n}"
4276:
4277:
4278: ;
4279: $if $(@expr1073747714 $!@expr1073747715 $assertEquals $(@expr1073747716 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4279 $, "void f ( int a ) { }" $, $tok_ $(@expr1073747717 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4279 $, code@var638 $) $) $) { $return ; }
4280: }
4281:
4282: {
4283: const char code@var639 [@expr1073747718 39 ] =@expr1073747719
4284: "void f(int a)\n{\nif (false && a) g();\n}"
4285:
4286:
4287: ;
4288: $if $(@expr1073747720 $!@expr1073747721 $assertEquals $(@expr1073747722 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4288 $, "void f ( int a ) { }" $, $tok_ $(@expr1073747723 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4288 $, code@var639 $) $) $) { $return ; }
4289: }
4290:
4291: {
4292: const char code@var640 [@expr1073747724 38 ] =@expr1073747725
4293: "void f(int a)\n{\nif (true || a) g();\n}"
4294:
4295:
4296: ;
4297: $if $(@expr1073747726 $!@expr1073747727 $assertEquals $(@expr1073747728 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4297 $, "void f ( int a ) { g ( ) ; }" $, $tok_ $(@expr1073747729 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4297 $, code@var640 $) $) $) { $return ; }
4298: }
4299:
4300: {
4301: const char code@var641 [@expr1073747730 38 ] =@expr1073747731
4302: "void f(int a)\n{\nif (a || true) g();\n}"
4303:
4304:
4305: ;
4306: $if $(@expr1073747732 $!@expr1073747733 $assertEquals $(@expr1073747734 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4306 $, "void f ( int a ) { g ( ) ; }" $, $tok_ $(@expr1073747735 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4306 $, code@var641 $) $) $) { $return ; }
4307: }
4308:
4309: {
4310: const char code@var642 [@expr1073747736 43 ] =@expr1073747737
4311: "void f(int a)\n{\nif (a || true || b) g();\n}"
4312:
4313:
4314: ;
4315: $if $(@expr1073747738 $!@expr1073747739 $assertEquals $(@expr1073747740 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4315 $, "void f ( int a ) { g ( ) ; }" $, $tok_ $(@expr1073747741 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4315 $, code@var642 $) $) $) { $return ; }
4316: }
4317:
4318: {
4319: const char code@var643 [@expr1073747742 44 ] =@expr1073747743
4320: "void f(int a)\n{\nif (a && false && b) g();\n}"
4321:
4322:
4323: ;
4324: $if $(@expr1073747744 $!@expr1073747745 $assertEquals $(@expr1073747746 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4324 $, "void f ( int a ) { }" $, $tok_ $(@expr1073747747 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4324 $, code@var643 $) $) $) { $return ; }
4325: }
4326:
4327: {
4328: const char code@var644 [@expr1073747748 56 ] =@expr1073747749
4329: "void f(int a)\n{\nif (a || (b && false && c) || d) g();\n}"
4330:
4331:
4332: ;
4333: $if $(@expr1073747750 $!@expr1073747751 $assertEquals $(@expr1073747752 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4333 $, "void f ( int a ) { if ( a || d ) { g ( ) ; } }" $, $tok_ $(@expr1073747753 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4333 $, code@var644 $) $) $) { $return ; }
4334: }
4335:
4336: {
4337: const char code@var645 [@expr1073747754 57 ] =@expr1073747755
4338: "void f(int a)\n{\nif ((a && b) || true || (c && d)) g();\n}"
4339:
4340:
4341: ;
4342: $if $(@expr1073747756 $!@expr1073747757 $assertEquals $(@expr1073747758 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4342 $, "void f ( int a ) { g ( ) ; }" $, $tok_ $(@expr1073747759 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4342 $, code@var645 $) $) $) { $return ; }
4343: }
4344:
4345: {
4346:
4347: const char code@var646 [@expr1073747760 31 ] =@expr1073747761
4348: "void f() {\nif (12 && 7) g();\n}"
4349:
4350: ;
4351: $if $(@expr1073747762 $!@expr1073747763 $assertEquals $(@expr1073747764 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4351 $, "void f ( ) { g ( ) ; }" $, $tok_ $(@expr1073747765 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4351 $, code@var646 $) $) $) { $return ; }
4352: }
4353: }
4354:
4355:
4356: void pointeralias1 ( ) {
4357: {
4358: const char code@var647 [@expr1073747766 61 ] =@expr1073747767 "void f(char *p1)\n{\n    char *p = p1;\n    p1 = 0;    x(p);\n}\n"
4359:
|
4362:
4363: ;
4364:
4365: const char expected@var648 [@expr1073747768 64 ] =@expr1073747769 "void f ( char * p1 ) { char * p ; p = p1 ; p1 = 0 ; x ( p ) ; }"
4366:
|
4369:
4370: ;
4371:
4372: $if $(@expr1073747770 $!@expr1073747771 $assertEquals $(@expr1073747772 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4372 $, expected@var648 $, $tok_ $(@expr1073747773 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4372 $, code@var647 $) $) $) { $return ; }
4373: }
4374:
4375: {
4376: const char code@var649 [@expr1073747774 68 ] =@expr1073747775 "void foo(Result* ptr)\n{\n    Result* obj = ptr;\n    ++obj->total;\n}\n"
4377:
4378:
4379:
4380: ;
4381:
4382: const char expected@var650 [@expr1073747776 74 ] =@expr1073747777 "void foo ( Result * ptr ) { Result * obj ; obj = ptr ; ++ obj . total ; }"
4383:
4384:
4385:
4386: ;
4387:
4388: $if $(@expr1073747778 $!@expr1073747779 $assertEquals $(@expr1073747780 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4388 $, expected@var650 $, $tok_ $(@expr1073747781 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4388 $, code@var649 $) $) $) { $return ; }
4389: }
4390: }
4391:
4392: void pointeralias2 ( ) {
4393: const char code@var651 [@expr1073747782 57 ] =@expr1073747783 "void f()\n{\n    int i;\n    int *p = &i;\n    return *p;\n}\n"
4394:
|
4397:
4398: ;
4399: $if $(@expr1073747784 $!@expr1073747785 $assertEquals $(@expr1073747786 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4399 $, "void f ( ) { int i ; return i ; }" $, $tok_ $(@expr1073747787 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4399 $, code@var651 $) $) $) { $return ; }
4400: }
4401:
4402: void pointeralias3 ( ) {
4403: const char code@var652 [@expr1073747788 81 ] =@expr1073747789 "void f()\n{\n    int i, j, *p;\n    if (ab) p = &i;\n    else p = &j;\n    *p = 0;\n}\n"
4404:
|
4408:
4409: ;
4410: const char expected@var653 [@expr1073747790 94 ] =@expr1073747791 "void f ( ) { int i ; int j ; int * p ; if ( ab ) { p = & i ; } else { p = & j ; } * p = 0 ; }"
4411:
|
4415:
4416: ;
4417: $if $(@expr1073747792 $!@expr1073747793 $assertEquals $(@expr1073747794 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4417 $, expected@var653 $, $tok_ $(@expr1073747795 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4417 $, code@var652 $) $) $) { $return ; }
4418: }
4419:
4420: void pointeralias4 ( ) {
4421: const char code@var654 [@expr1073747796 67 ] =@expr1073747797 "int f()\n{\n    int i;\n    int *p = &i;\n    *p = 5;\n    return i;\n}\n"
4422:
|
4426:
4427: ;
4428: const char expected@var655 [@expr1073747798 25 ] =@expr1073747799 "int f ( ) { return 5 ; }"
4429:
4430:
4431: ;
4432: $if $(@expr1073747800 $!@expr1073747801 $assertEquals $(@expr1073747802 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4432 $, expected@var655 $, $tok_ $(@expr1073747803 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4432 $, code@var654 $) $) $) { $return ; }
4433: }
4434:
4435: void while0 ( ) {
4436: $if $(@expr1073747804 $!@expr1073747805 $assertEquals $(@expr1073747806 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4436 $, "void foo ( ) { x = 1 ; }" $, $tok_ $(@expr1073747807 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4436 $, "void foo() { do { x = 1 ; } while (0);}" $) $) $) { $return ; }
4437: $if $(@expr1073747808 $!@expr1073747809 $assertEquals $(@expr1073747810 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4437 $, "void foo ( ) { return 0 ; }" $, $tok_ $(@expr1073747811 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4437 $, "void foo() { do { return 0; } while (0);}" $) $) $) { $return ; }
4438: $if $(@expr1073747812 $!@expr1073747813 $assertEquals $(@expr1073747814 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4438 $, "void foo ( ) { goto label ; }" $, $tok_ $(@expr1073747815 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4438 $, "void foo() { do { goto label; } while (0); }" $) $) $) { $return ; }
4439: $if $(@expr1073747816 $!@expr1073747817 $assertEquals $(@expr1073747818 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4439 $, "void foo ( ) { continue ; }" $, $tok_ $(@expr1073747819 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4439 $, "void foo() { do { continue ; } while (0); }" $) $) $) { $return ; }
4440: $if $(@expr1073747820 $!@expr1073747821 $assertEquals $(@expr1073747822 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4440 $, "void foo ( ) { break ; }" $, $tok_ $(@expr1073747823 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4440 $, "void foo() { do { break; } while (0); }" $) $) $) { $return ; }
4441: $if $(@expr1073747824 $!@expr1073747825 $assertEquals $(@expr1073747826 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4441 $, "void foo ( ) { }" $, $tok_ $(@expr1073747827 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4441 $, "void foo() { while (false) { a; } }" $) $) $) { $return ; }
4442: $if $(@expr1073747828 $!@expr1073747829 $assertEquals $(@expr1073747830 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4442 $, "void foo ( ) { }" $, $tok_ $(@expr1073747831 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4442 $, "void foo() { while (false) { switch (n) { case 0: return; default: break; } n*=1; } }" $) $) $) { $return ; }
4443: }
4444:
4445: void while0for ( ) {
4446:
4447: $if $(@expr1073747832 $!@expr1073747833 $assertEquals $(@expr1073747834 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4447 $, "void f ( ) { int i ; for ( i = 0 ; i < 0 ; i ++ ) { } }" $, $tok_ $(@expr1073747835 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4447 $, "void f() { int i; for (i = 0; i < 0; i++) { a; } }" $) $) $) { $return ; }
4448:
4449: $if $(@expr1073747836 $!@expr1073747837 $assertEquals $(@expr1073747838 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4449 $, "void f ( ) { int i ; for ( i = 0 ; i < 0 ; i ++ ) { } }" $, $tok_ $(@expr1073747839 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4449 $, "void f() { int i; for (i = 0; i < 0; i++) { foo(); break; } }" $) $) $) { $return ; }
4450: $if $(@expr1073747840 $!@expr1073747841 $assertEquals $(@expr1073747842 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4450 $, "void f ( ) { int i ; for ( i = 0 ; i < 0 ; i ++ ) { } }" $, $tok_ $(@expr1073747843 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4450 $, "void f() { int i; for (i = 0; i < 0; i++) { foo(); continue; } }" $) $) $) { $return ; }
4451: $if $(@expr1073747844 $!@expr1073747845 $assertEquals $(@expr1073747846 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4451 $, "void f ( ) { }" $, $tok_ $(@expr1073747847 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4451 $, "void f() { for (int i = 0; i < 0; i++) { a; } }" $) $) $) { $return ; }
4452: $if $(@expr1073747848 $!@expr1073747849 $assertEquals $(@expr1073747850 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4452 $, "void f ( ) { }" $, $tok_ $(@expr1073747851 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4452 $, "void f() { for (unsigned int i = 0; i < 0; i++) { a; } }" $) $) $) { $return ; }
4453: $if $(@expr1073747852 $!@expr1073747853 $assertEquals $(@expr1073747854 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4453 $, "void f ( ) { }" $, $tok_ $(@expr1073747855 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4453 $, "void f() { for (long long i = 0; i < 0; i++) { a; } }" $) $) $) { $return ; }
4454: $if $(@expr1073747856 $!@expr1073747857 $assertEquals $(@expr1073747858 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4454 $, "void f ( ) { }" $, $tok_ $(@expr1073747859 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4454 $, "void f() { for (signed long long i = 0; i < 0; i++) { a; } }" $) $) $) { $return ; }
4455: $if $(@expr1073747860 $!@expr1073747861 $assertEquals $(@expr1073747862 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4455 $, "void f ( ) { }" $, $tok_ $(@expr1073747863 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4455 $, "void f() { int n = 0; for (signed long long i = 0; i < n; i++) { a; } }" $) $) $) { $return ; }
4456:
4457: $if $(@expr1073747864 $!@expr1073747865 $assertEquals $(@expr1073747866 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4457 $, "void f ( ) { int i ; for ( i = 0 ; i < 0 ; ++ i ) { } return i ; }" $, $tok_ $(@expr1073747867 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4457 $, "void f() { int i; for (i=0;i<0;++i){ dostuff(); } return i; }" $) $) $) { $return ; }
4458: }
4459:
4460: void removestd ( ) {
4461: $if $(@expr1073747868 $!@expr1073747869 $assertEquals $(@expr1073747870 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4461 $, "; strcpy ( a , b ) ;" $, $tok_ $(@expr1073747871 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4461 $, "; std::strcpy(a,b);" $) $) $) { $return ; }
4462: $if $(@expr1073747872 $!@expr1073747873 $assertEquals $(@expr1073747874 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4462 $, "; strcat ( a , b ) ;" $, $tok_ $(@expr1073747875 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4462 $, "; std::strcat(a,b);" $) $) $) { $return ; }
4463: $if $(@expr1073747876 $!@expr1073747877 $assertEquals $(@expr1073747878 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4463 $, "; strncpy ( a , b , 10 ) ;" $, $tok_ $(@expr1073747879 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4463 $, "; std::strncpy(a,b,10);" $) $) $) { $return ; }
4464: $if $(@expr1073747880 $!@expr1073747881 $assertEquals $(@expr1073747882 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4464 $, "; strncat ( a , b , 10 ) ;" $, $tok_ $(@expr1073747883 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4464 $, "; std::strncat(a,b,10);" $) $) $) { $return ; }
4465: $if $(@expr1073747884 $!@expr1073747885 $assertEquals $(@expr1073747886 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4465 $, "; free ( p ) ;" $, $tok_ $(@expr1073747887 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4465 $, "; std::free(p);" $) $) $) { $return ; }
4466: $if $(@expr1073747888 $!@expr1073747889 $assertEquals $(@expr1073747890 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4466 $, "; malloc ( 10 ) ;" $, $tok_ $(@expr1073747891 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4466 $, "; std::malloc(10);" $) $) $) { $return ; }
4467: }
4468:
4469: void simplifyInitVar ( ) {
4470:
4471: {
4472: const char code@var656 [@expr1073747892 26 ] =@expr1073747893 "void foo() { int *p(0); }" ;
4473: $if $(@expr1073747894 $!@expr1073747895 $assertEquals $(@expr1073747896 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4473 $, "void foo ( ) { }" $, $tok_ $(@expr1073747897 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4473 $, code@var656 $) $) $) { $return ; }
4474: }
4475:
4476: {
4477: const char code@var657 [@expr1073747898 25 ] =@expr1073747899 "void foo() { int p(0); }" ;
4478: $if $(@expr1073747900 $!@expr1073747901 $assertEquals $(@expr1073747902 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4478 $, "void foo ( ) { }" $, $tok_ $(@expr1073747903 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4478 $, code@var657 $) $) $) { $return ; }
4479: }
4480:
4481: {
4482: const char code@var658 [@expr1073747904 24 ] =@expr1073747905 "void a() { foo *p(0); }" ;
4483: $if $(@expr1073747906 $!@expr1073747907 $assertEquals $(@expr1073747908 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4483 $, "void a ( ) { }" $, $tok_ $(@expr1073747909 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4483 $, code@var658 $) $) $) { $return ; }
4484: }
4485: }
4486:
4487: void simplifyReference ( ) {
4488: $if $(@expr1073747910 $!@expr1073747911 $assertEquals $(@expr1073747912 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4488 $, "void f ( ) { int a ; a ++ ; }" $, $tok_ $(@expr1073747913 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4488 $, "void f() { int a; int &b(a); b++; }" $) $) $) { $return
4489: ; }
4490: $if $(@expr1073747914 $!@expr1073747915 $assertEquals $(@expr1073747916 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4490 $, "void f ( ) { int a ; a ++ ; }" $, $tok_ $(@expr1073747917 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4490 $, "void f() { int a; int &b = a; b++; }" $) $) $) { $return
4491: ; }
4492:
4493: $if $(@expr1073747918 $!@expr1073747919 $assertEquals $(@expr1073747920 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4493 $, "void test ( ) { c . f ( 7 ) ; }" $, $tok_ $(@expr1073747921 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4493 $, "void test() { c.f(7); T3 &t3 = c; }" $) $) $) { $return
4494: ; }
4495: }
4496:
4497: void simplifyRealloc ( ) {
4498: $if $(@expr1073747922 $!@expr1073747923 $assertEquals $(@expr1073747924 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4498 $, "; free ( p ) ; p = 0 ;" $, $tok_ $(@expr1073747925 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4498 $, "; p = realloc(p, 0);" $) $) $) { $return ; }
4499: $if $(@expr1073747926 $!@expr1073747927 $assertEquals $(@expr1073747928 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4499 $, "; p = malloc ( 100 ) ;" $, $tok_ $(@expr1073747929 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4499 $, "; p = realloc(0, 100);" $) $) $) { $return ; }
4500: $if $(@expr1073747930 $!@expr1073747931 $assertEquals $(@expr1073747932 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4500 $, "; p = malloc ( 0 ) ;" $, $tok_ $(@expr1073747933 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4500 $, "; p = realloc(0, 0);" $) $) $) { $return ; }
4501: $if $(@expr1073747934 $!@expr1073747935 $assertEquals $(@expr1073747936 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4501 $, "; free ( q ) ; p = 0 ;" $, $tok_ $(@expr1073747937 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4501 $, "; p = realloc(q, 0);" $) $) $) { $return ; }
4502: $if $(@expr1073747938 $!@expr1073747939 $assertEquals $(@expr1073747940 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4502 $, "; free ( * q ) ; p = 0 ;" $, $tok_ $(@expr1073747941 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4502 $, "; p = realloc(*q, 0);" $) $) $) { $return ; }
4503: $if $(@expr1073747942 $!@expr1073747943 $assertEquals $(@expr1073747944 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4503 $, "; free ( f ( z ) ) ; p = 0 ;" $, $tok_ $(@expr1073747945 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4503 $, "; p = realloc(f(z), 0);" $) $) $) { $return ; }
4504: $if $(@expr1073747946 $!@expr1073747947 $assertEquals $(@expr1073747948 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4504 $, "; p = malloc ( n * m ) ;" $, $tok_ $(@expr1073747949 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4504 $, "; p = realloc(0, n*m);" $) $) $) { $return ; }
4505: $if $(@expr1073747950 $!@expr1073747951 $assertEquals $(@expr1073747952 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4505 $, "; p = malloc ( f ( 1 ) ) ;" $, $tok_ $(@expr1073747953 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4505 $, "; p = realloc(0, f(1));" $) $) $) { $return ; }
4506: }
4507:
4508: void simplifyErrNoInWhile ( ) {
4509: $if $(@expr1073747954 $!@expr1073747955 $assertEquals $(@expr1073747956 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4509 $, "{ while ( f ( ) ) { } }" $, $tok_ $(@expr1073747957 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4509 $, "{ while (f() && errno == EINTR) { } }" $) $) $) { $return
4510: ; }
4511: $if $(@expr1073747958 $!@expr1073747959 $assertEquals $(@expr1073747960 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4511 $, "{ while ( f ( ) ) { } }" $, $tok_ $(@expr1073747961 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4511 $, "{ while (f() && (errno == EINTR)) { } }" $) $) $) { $return
4512: ; }
4513: }
4514:
4515: void simplifyFuncInWhile ( ) {
4516: $if $(@expr1073747962 $!@expr1073747963 $assertEquals $(@expr1073747964 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4516 $, "{ int cppcheck:r1 = fclose ( f ) ; while ( cppcheck:r1 ) { foo ( ) ; cppcheck:r1 = fclose ( f ) ; } }" $, $tok_ $(@expr1073747965 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4516 $, "{while(fclose(f))foo();}" $) $) $) { $return
4517:
|
4523:
4524: ; }
4525:
4526: $if $(@expr1073747966 $!@expr1073747967 $assertEquals $(@expr1073747968 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4526 $, "{ int cppcheck:r1 = fclose ( f ) ; while ( cppcheck:r1 ) { ; cppcheck:r1 = fclose ( f ) ; } }" $, $tok_ $(@expr1073747969 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4526 $, "{while(fclose(f));}" $) $) $) { $return
4527:
|
4532:
4533: ; }
4534:
4535: $if $(@expr1073747970 $!@expr1073747971 $assertEquals $(@expr1073747972 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4535 $, "{ int cppcheck:r1 = fclose ( f ) ; while ( cppcheck:r1 ) { ; cppcheck:r1 = fclose ( f ) ; } int cppcheck:r2 = fclose ( g ) ; while ( cppcheck:r2 ) { ; cppcheck:r2 = fclose ( g ) ; } }" $, $tok_ $(@expr1073747973 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4535 $, "{while(fclose(f)); while(fclose(g));}" $) $) $) { $return
4536:
|
4546:
4547: ; }
4548: }
4549:
4550: void simplifyStructDecl1 ( ) {
4551: {
4552: const char code@var659 [@expr1073747974 20 ] =@expr1073747975 "struct ABC { } abc;" ;
4553: const char expected@var660 [@expr1073747976 34 ] =@expr1073747977 "struct ABC { } ; struct ABC abc ;" ;
4554: $if $(@expr1073747978 $!@expr1073747979 $assertEquals $(@expr1073747980 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4554 $, expected@var660 $, $tok_ $(@expr1073747981 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4554 $, code@var659 , false $) $) $) { $return ; }
4555: }
4556:
4557: {
4558: const char code@var661 [@expr1073747982 23 ] =@expr1073747983 "struct ABC { } * pabc;" ;
4559: const char expected@var662 [@expr1073747984 37 ] =@expr1073747985 "struct ABC { } ; struct ABC * pabc ;" ;
4560: $if $(@expr1073747986 $!@expr1073747987 $assertEquals $(@expr1073747988 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4560 $, expected@var662 $, $tok_ $(@expr1073747989 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4560 $, code@var661 , false $) $) $) { $return ; }
4561: }
4562:
4563: {
4564: const char code@var663 [@expr1073747990 23 ] =@expr1073747991 "struct ABC { } abc[4];" ;
4565: const char expected@var664 [@expr1073747992 40 ] =@expr1073747993 "struct ABC { } ; struct ABC abc [ 4 ] ;" ;
4566: $if $(@expr1073747994 $!@expr1073747995 $assertEquals $(@expr1073747996 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4566 $, expected@var664 $, $tok_ $(@expr1073747997 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4566 $, code@var663 , false $) $) $) { $return ; }
4567: }
4568:
4569: {
4570: const char code@var665 [@expr1073747998 25 ] =@expr1073747999 "struct ABC { } abc, def;" ;
4571: const char expected@var666 [@expr1073748000 51 ] =@expr1073748001 "struct ABC { } ; struct ABC abc ; struct ABC def ;" ;
4572: $if $(@expr1073748002 $!@expr1073748003 $assertEquals $(@expr1073748004 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4572 $, expected@var666 $, $tok_ $(@expr1073748005 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4572 $, code@var665 , false $) $) $) { $return ; }
4573: }
4574:
4575: {
4576: const char code@var667 [@expr1073748006 28 ] =@expr1073748007 "struct ABC { } abc, * pabc;" ;
4577: const char expected@var668 [@expr1073748008 54 ] =@expr1073748009 "struct ABC { } ; struct ABC abc ; struct ABC * pabc ;" ;
4578: $if $(@expr1073748010 $!@expr1073748011 $assertEquals $(@expr1073748012 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4578 $, expected@var668 $, $tok_ $(@expr1073748013 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4578 $, code@var667 , false $) $) $) { $return ; }
4579: }
4580:
4581: {
4582: const char code@var669 [@expr1073748014 39 ] =@expr1073748015 "struct ABC { struct DEF {} def; } abc;" ;
4583: const char expected@var670 [@expr1073748016 68 ] =@expr1073748017 "struct ABC { struct DEF { } ; struct DEF def ; } ; struct ABC abc ;" ;
4584: $if $(@expr1073748018 $!@expr1073748019 $assertEquals $(@expr1073748020 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4584 $, expected@var670 $, $tok_ $(@expr1073748021 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4584 $, code@var669 , false $) $) $) { $return ; }
4585: }
4586:
4587: {
4588: const char code@var671 [@expr1073748022 16 ] =@expr1073748023 "struct { } abc;" ;
4589: const char expected@var672 [@expr1073748024 48 ] =@expr1073748025 "struct Anonymous0 { } ; struct Anonymous0 abc ;" ;
4590: $if $(@expr1073748026 $!@expr1073748027 $assertEquals $(@expr1073748028 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4590 $, expected@var672 $, $tok_ $(@expr1073748029 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4590 $, code@var671 , false $) $) $) { $return ; }
4591: }
4592:
4593: {
4594: const char code@var673 [@expr1073748030 19 ] =@expr1073748031 "struct { } * pabc;" ;
4595: const char expected@var674 [@expr1073748032 51 ] =@expr1073748033 "struct Anonymous0 { } ; struct Anonymous0 * pabc ;" ;
4596: $if $(@expr1073748034 $!@expr1073748035 $assertEquals $(@expr1073748036 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4596 $, expected@var674 $, $tok_ $(@expr1073748037 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4596 $, code@var673 , false $) $) $) { $return ; }
4597: }
4598:
4599: {
4600: const char code@var675 [@expr1073748038 19 ] =@expr1073748039 "struct { } abc[4];" ;
4601: const char expected@var676 [@expr1073748040 54 ] =@expr1073748041 "struct Anonymous0 { } ; struct Anonymous0 abc [ 4 ] ;" ;
4602: $if $(@expr1073748042 $!@expr1073748043 $assertEquals $(@expr1073748044 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4602 $, expected@var676 $, $tok_ $(@expr1073748045 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4602 $, code@var675 , false $) $) $) { $return ; }
4603: }
4604:
4605: {
4606: const char code@var677 [@expr1073748046 38 ] =@expr1073748047 "struct {int a;} const array[3] = {0};" ;
4607: const char expected@var678 [@expr1073748048 78 ] =@expr1073748049 "struct Anonymous0 { int a ; } ; struct Anonymous0 const array [ 3 ] = { 0 } ;" ;
4608: $if $(@expr1073748050 $!@expr1073748051 $assertEquals $(@expr1073748052 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4608 $, expected@var678 $, $tok_ $(@expr1073748053 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4608 $, code@var677 , false $) $) $) { $return ; }
4609: }
4610:
4611: {
4612: const char code@var679 [@expr1073748054 45 ] =@expr1073748055 "static struct {int a;} const array[3] = {0};" ;
4613: const char expected@var680 [@expr1073748056 85 ] =@expr1073748057 "struct Anonymous0 { int a ; } ; static struct Anonymous0 const array [ 3 ] = { 0 } ;" ;
4614: $if $(@expr1073748058 $!@expr1073748059 $assertEquals $(@expr1073748060 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4614 $, expected@var680 $, $tok_ $(@expr1073748061 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4614 $, code@var679 , false $) $) $) { $return ; }
4615: }
4616:
4617: {
4618: const char code@var681 [@expr1073748062 21 ] =@expr1073748063 "struct { } abc, def;" ;
4619: const char expected@var682 [@expr1073748064 72 ] =@expr1073748065 "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 def ;" ;
4620: $if $(@expr1073748066 $!@expr1073748067 $assertEquals $(@expr1073748068 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4620 $, expected@var682 $, $tok_ $(@expr1073748069 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4620 $, code@var681 , false $) $) $) { $return ; }
4621: }
4622:
4623: {
4624: const char code@var683 [@expr1073748070 24 ] =@expr1073748071 "struct { } abc, * pabc;" ;
4625: const char expected@var684 [@expr1073748072 75 ] =@expr1073748073 "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 * pabc ;" ;
4626: $if $(@expr1073748074 $!@expr1073748075 $assertEquals $(@expr1073748076 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4626 $, expected@var684 $, $tok_ $(@expr1073748077 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4626 $, code@var683 , false $) $) $) { $return ; }
4627: }
4628:
4629: {
4630: const char code@var685 [@expr1073748078 35 ] =@expr1073748079 "struct { struct DEF {} def; } abc;" ;
4631: const char expected@var686 [@expr1073748080 82 ] =@expr1073748081 "struct Anonymous0 { struct DEF { } ; struct DEF def ; } ; struct Anonymous0 abc ;" ;
4632: $if $(@expr1073748082 $!@expr1073748083 $assertEquals $(@expr1073748084 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4632 $, expected@var686 $, $tok_ $(@expr1073748085 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4632 $, code@var685 , false $) $) $) { $return ; }
4633: }
4634:
4635: {
4636: const char code@var687 [@expr1073748086 35 ] =@expr1073748087 "struct ABC { struct {} def; } abc;" ;
4637: const char expected@var688 [@expr1073748088 82 ] =@expr1073748089 "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; struct ABC abc ;" ;
4638: $if $(@expr1073748090 $!@expr1073748091 $assertEquals $(@expr1073748092 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4638 $, expected@var688 $, $tok_ $(@expr1073748093 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4638 $, code@var687 , false $) $) $) { $return ; }
4639: }
4640:
4641: {
4642: const char code@var689 [@expr1073748094 31 ] =@expr1073748095 "struct { struct {} def; } abc;" ;
4643: const char expected@var690 [@expr1073748096 96 ] =@expr1073748097 "struct Anonymous0 { struct Anonymous1 { } ; struct Anonymous1 def ; } ; struct Anonymous0 abc ;" ;
4644: $if $(@expr1073748098 $!@expr1073748099 $assertEquals $(@expr1073748100 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4644 $, expected@var690 $, $tok_ $(@expr1073748101 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4644 $, code@var689 , false $) $) $) { $return ; }
4645: }
4646:
4647: {
4648: const char code@var691 [@expr1073748102 35 ] =@expr1073748103 "union ABC { int i; float f; } abc;" ;
4649: const char expected@var692 [@expr1073748104 50 ] =@expr1073748105 "union ABC { int i ; float f ; } ; union ABC abc ;" ;
4650: $if $(@expr1073748106 $!@expr1073748107 $assertEquals $(@expr1073748108 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4650 $, expected@var692 $, $tok_ $(@expr1073748109 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4650 $, code@var691 , false $) $) $) { $return ; }
4651: }
4652:
4653: {
4654: const char code@var693 [@expr1073748110 31 ] =@expr1073748111 "struct ABC { struct {} def; };" ;
4655: const char expected@var694 [@expr1073748112 65 ] =@expr1073748113 "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;" ;
4656: $if $(@expr1073748114 $!@expr1073748115 $assertEquals $(@expr1073748116 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4656 $, expected@var694 $, $tok_ $(@expr1073748117 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4656 $, code@var693 , false $) $) $) { $return ; }
4657: }
4658:
4659: {
4660: const char code@var695 [@expr1073748118 44 ] =@expr1073748119 "struct ABC : public XYZ { struct {} def; };" ;
4661: const char expected@var696 [@expr1073748120 78 ] =@expr1073748121 "struct ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;" ;
4662: $if $(@expr1073748122 $!@expr1073748123 $assertEquals $(@expr1073748124 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4662 $, expected@var696 $, $tok_ $(@expr1073748125 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4662 $, code@var695 , false $) $) $) { $return ; }
4663: }
4664:
4665: {
4666: const char code@var697 [@expr1073748126 26 ] =@expr1073748127 "struct { int x; }; int y;" ;
4667: const char expected@var698 [@expr1073748128 16 ] =@expr1073748129 "int x ; int y ;" ;
4668: $if $(@expr1073748130 $!@expr1073748131 $assertEquals $(@expr1073748132 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4668 $, expected@var698 $, $tok_ $(@expr1073748133 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4668 $, code@var697 , false $) $) $) { $return ; }
4669: }
4670:
4671: {
4672: const char code@var699 [@expr1073748134 19 ] =@expr1073748135 "struct { int x; };" ;
4673: const char expected@var700 [@expr1073748136 8 ] =@expr1073748137 "int x ;" ;
4674: $if $(@expr1073748138 $!@expr1073748139 $assertEquals $(@expr1073748140 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4674 $, expected@var700 $, $tok_ $(@expr1073748141 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4674 $, code@var699 , false $) $) $) { $return ; }
4675: }
4676:
4677: {
4678: const char code@var701 [@expr1073748142 12 ] =@expr1073748143 "struct { };" ;
4679: const char expected@var702 [@expr1073748144 2 ] =@expr1073748145 ";" ;
4680: $if $(@expr1073748146 $!@expr1073748147 $assertEquals $(@expr1073748148 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4680 $, expected@var702 $, $tok_ $(@expr1073748149 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4680 $, code@var701 , false $) $) $) { $return ; }
4681: }
4682:
4683: {
4684: const char code@var703 [@expr1073748150 38 ] =@expr1073748151 "struct { struct { struct { } ; } ; };" ;
4685: const char expected@var704 [@expr1073748152 2 ] =@expr1073748153 ";" ;
4686: $if $(@expr1073748154 $!@expr1073748155 $assertEquals $(@expr1073748156 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4686 $, expected@var704 $, $tok_ $(@expr1073748157 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4686 $, code@var703 , false $) $) $) { $return ; }
4687: }
4688:
4689:
4690: {
4691: const char code@var705 [@expr1073748158 28 ] =@expr1073748159 "static struct ABC { } abc ;" ;
4692: const char expected@var706 [@expr1073748160 41 ] =@expr1073748161 "struct ABC { } ; static struct ABC abc ;" ;
4693: $if $(@expr1073748162 $!@expr1073748163 $assertEquals $(@expr1073748164 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4693 $, expected@var706 $, $tok_ $(@expr1073748165 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4693 $, code@var705 , false $) $) $) { $return ; }
4694: }
4695:
4696:
4697: {
4698: const char code@var707 [@expr1073748166 43 ] =@expr1073748167 "void f() { int A(1),B(2),C=3,D,E(5),F=6; }" ;
4699: const char expected@var708 [@expr1073748168 103 ] =@expr1073748169 "void f ( ) { int A ; A = 1 ; int B ; B = 2 ; int C ; C = 3 ; int D ; int E ; E = 5 ; int F ; F = 6 ; }" ;
4700: $if $(@expr1073748170 $!@expr1073748171 $assertEquals $(@expr1073748172 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4700 $, expected@var708 $, $tok_ $(@expr1073748173 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4700 $, code@var707 , false $) $) $) { $return ; }
4701: }
4702:
4703:
4704: {
4705: const char code@var709 [@expr1073748174 39 ] =@expr1073748175 "void f() { class : foo<int> { } abc; }" ;
4706: const char expected@var710 [@expr1073748176 69 ] =@expr1073748177 "void f ( ) { class Anonymous0 : foo < int > { } ; Anonymous0 abc ; }" ;
4707: $if $(@expr1073748178 $!@expr1073748179 $assertEquals $(@expr1073748180 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4707 $, expected@var710 $, $tok_ $(@expr1073748181 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4707 $, code@var709 , false $) $) $) { $return ; }
4708: }
4709: }
4710:
4711: void simplifyStructDecl2 ( ) {
4712: const char code@var711 [@expr1073748182 19 ] =@expr1073748183 "struct { char c; }" ;
4713: const char expected@var712 [@expr1073748184 20 ] =@expr1073748185 "struct { char c ; }" ;
4714: $if $(@expr1073748186 $!@expr1073748187 $assertEquals $(@expr1073748188 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4714 $, expected@var712 $, $tok_ $(@expr1073748189 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4714 $, code@var711 , false $) $) $) { $return ; }
4715: }
4716:
4717: void simplifyStructDecl3 ( ) {
4718: {
4719: const char code@var713 [@expr1073748190 19 ] =@expr1073748191 "class ABC { } abc;" ;
4720: const char expected@var714 [@expr1073748192 26 ] =@expr1073748193 "class ABC { } ; ABC abc ;" ;
4721: $if $(@expr1073748194 $!@expr1073748195 $assertEquals $(@expr1073748196 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4721 $, expected@var714 $, $tok_ $(@expr1073748197 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4721 $, code@var713 , false $) $) $) { $return ; }
4722: }
4723:
4724: {
4725: const char code@var715 [@expr1073748198 22 ] =@expr1073748199 "class ABC { } * pabc;" ;
4726: const char expected@var716 [@expr1073748200 29 ] =@expr1073748201 "class ABC { } ; ABC * pabc ;" ;
4727: $if $(@expr1073748202 $!@expr1073748203 $assertEquals $(@expr1073748204 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4727 $, expected@var716 $, $tok_ $(@expr1073748205 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4727 $, code@var715 , false $) $) $) { $return ; }
4728: }
4729:
4730: {
4731: const char code@var717 [@expr1073748206 22 ] =@expr1073748207 "class ABC { } abc[4];" ;
4732: const char expected@var718 [@expr1073748208 32 ] =@expr1073748209 "class ABC { } ; ABC abc [ 4 ] ;" ;
4733: $if $(@expr1073748210 $!@expr1073748211 $assertEquals $(@expr1073748212 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4733 $, expected@var718 $, $tok_ $(@expr1073748213 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4733 $, code@var717 , false $) $) $) { $return ; }
4734: }
4735:
4736: {
4737: const char code@var719 [@expr1073748214 24 ] =@expr1073748215 "class ABC { } abc, def;" ;
4738: const char expected@var720 [@expr1073748216 36 ] =@expr1073748217 "class ABC { } ; ABC abc ; ABC def ;" ;
4739: $if $(@expr1073748218 $!@expr1073748219 $assertEquals $(@expr1073748220 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4739 $, expected@var720 $, $tok_ $(@expr1073748221 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4739 $, code@var719 , false $) $) $) { $return ; }
4740: }
4741:
4742: {
4743: const char code@var721 [@expr1073748222 27 ] =@expr1073748223 "class ABC { } abc, * pabc;" ;
4744: const char expected@var722 [@expr1073748224 39 ] =@expr1073748225 "class ABC { } ; ABC abc ; ABC * pabc ;" ;
4745: $if $(@expr1073748226 $!@expr1073748227 $assertEquals $(@expr1073748228 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4745 $, expected@var722 $, $tok_ $(@expr1073748229 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4745 $, code@var721 , false $) $) $) { $return ; }
4746: }
4747:
4748: {
4749: const char code@var723 [@expr1073748230 37 ] =@expr1073748231 "class ABC { class DEF {} def; } abc;" ;
4750: const char expected@var724 [@expr1073748232 52 ] =@expr1073748233 "class ABC { class DEF { } ; DEF def ; } ; ABC abc ;" ;
4751: $if $(@expr1073748234 $!@expr1073748235 $assertEquals $(@expr1073748236 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4751 $, expected@var724 $, $tok_ $(@expr1073748237 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4751 $, code@var723 , false $) $) $) { $return ; }
4752: }
4753:
4754: {
4755: const char code@var725 [@expr1073748238 15 ] =@expr1073748239 "class { } abc;" ;
4756: const char expected@var726 [@expr1073748240 16 ] =@expr1073748241 "class { } abc ;" ;
4757: $if $(@expr1073748242 $!@expr1073748243 $assertEquals $(@expr1073748244 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4757 $, expected@var726 $, $tok_ $(@expr1073748245 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4757 $, code@var725 , false $) $) $) { $return ; }
4758: }
4759:
4760: {
4761: const char code@var727 [@expr1073748246 18 ] =@expr1073748247 "class { } * pabc;" ;
4762: const char expected@var728 [@expr1073748248 19 ] =@expr1073748249 "class { } * pabc ;" ;
4763: $if $(@expr1073748250 $!@expr1073748251 $assertEquals $(@expr1073748252 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4763 $, expected@var728 $, $tok_ $(@expr1073748253 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4763 $, code@var727 , false $) $) $) { $return ; }
4764: }
4765:
4766: {
4767: const char code@var729 [@expr1073748254 18 ] =@expr1073748255 "class { } abc[4];" ;
4768: const char expected@var730 [@expr1073748256 22 ] =@expr1073748257 "class { } abc [ 4 ] ;" ;
4769: $if $(@expr1073748258 $!@expr1073748259 $assertEquals $(@expr1073748260 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4769 $, expected@var730 $, $tok_ $(@expr1073748261 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4769 $, code@var729 , false $) $) $) { $return ; }
4770: }
4771:
4772: {
4773: const char code@var731 [@expr1073748262 20 ] =@expr1073748263 "class { } abc, def;" ;
4774: const char expected@var732 [@expr1073748264 22 ] =@expr1073748265 "class { } abc , def ;" ;
4775: $if $(@expr1073748266 $!@expr1073748267 $assertEquals $(@expr1073748268 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4775 $, expected@var732 $, $tok_ $(@expr1073748269 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4775 $, code@var731 , false $) $) $) { $return ; }
4776: }
4777:
4778: {
4779: const char code@var733 [@expr1073748270 23 ] =@expr1073748271 "class { } abc, * pabc;" ;
4780: const char expected@var734 [@expr1073748272 25 ] =@expr1073748273 "class { } abc , * pabc ;" ;
4781: $if $(@expr1073748274 $!@expr1073748275 $assertEquals $(@expr1073748276 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4781 $, expected@var734 $, $tok_ $(@expr1073748277 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4781 $, code@var733 , false $) $) $) { $return ; }
4782: }
4783:
4784: {
4785: const char code@var735 [@expr1073748278 34 ] =@expr1073748279 "struct { class DEF {} def; } abc;" ;
4786: const char expected@var736 [@expr1073748280 74 ] =@expr1073748281 "struct Anonymous0 { class DEF { } ; DEF def ; } ; struct Anonymous0 abc ;" ;
4787: $if $(@expr1073748282 $!@expr1073748283 $assertEquals $(@expr1073748284 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4787 $, expected@var736 $, $tok_ $(@expr1073748285 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4787 $, code@var735 , false $) $) $) { $return ; }
4788: }
4789:
4790: {
4791: const char code@var737 [@expr1073748286 34 ] =@expr1073748287 "class ABC { struct {} def; } abc;" ;
4792: const char expected@var738 [@expr1073748288 74 ] =@expr1073748289 "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; ABC abc ;" ;
4793: $if $(@expr1073748290 $!@expr1073748291 $assertEquals $(@expr1073748292 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4793 $, expected@var738 $, $tok_ $(@expr1073748293 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4793 $, code@var737 , false $) $) $) { $return ; }
4794: }
4795:
4796: {
4797: const char code@var739 [@expr1073748294 29 ] =@expr1073748295 "class { class {} def; } abc;" ;
4798: const char expected@var740 [@expr1073748296 32 ] =@expr1073748297 "class { class { } def ; } abc ;" ;
4799: $if $(@expr1073748298 $!@expr1073748299 $assertEquals $(@expr1073748300 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4799 $, expected@var740 $, $tok_ $(@expr1073748301 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4799 $, code@var739 , false $) $) $) { $return ; }
4800: }
4801:
4802: {
4803: const char code@var741 [@expr1073748302 30 ] =@expr1073748303 "class ABC { struct {} def; };" ;
4804: const char expected@var742 [@expr1073748304 64 ] =@expr1073748305 "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;" ;
4805: $if $(@expr1073748306 $!@expr1073748307 $assertEquals $(@expr1073748308 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4805 $, expected@var742 $, $tok_ $(@expr1073748309 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4805 $, code@var741 , false $) $) $) { $return ; }
4806: }
4807:
4808: {
4809: const char code@var743 [@expr1073748310 43 ] =@expr1073748311 "class ABC : public XYZ { struct {} def; };" ;
4810: const char expected@var744 [@expr1073748312 77 ] =@expr1073748313 "class ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;" ;
4811: $if $(@expr1073748314 $!@expr1073748315 $assertEquals $(@expr1073748316 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4811 $, expected@var744 $, $tok_ $(@expr1073748317 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4811 $, code@var743 , false $) $) $) { $return ; }
4812: }
4813:
4814: {
4815: const char code@var745 [@expr1073748318 25 ] =@expr1073748319 "class { int x; }; int y;" ;
4816: const char expected@var746 [@expr1073748320 28 ] =@expr1073748321 "class { int x ; } ; int y ;" ;
4817: $if $(@expr1073748322 $!@expr1073748323 $assertEquals $(@expr1073748324 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4817 $, expected@var746 $, $tok_ $(@expr1073748325 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4817 $, code@var745 , false $) $) $) { $return ; }
4818: }
4819:
4820: {
4821: const char code@var747 [@expr1073748326 18 ] =@expr1073748327 "class { int x; };" ;
4822: const char expected@var748 [@expr1073748328 20 ] =@expr1073748329 "class { int x ; } ;" ;
4823: $if $(@expr1073748330 $!@expr1073748331 $assertEquals $(@expr1073748332 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4823 $, expected@var748 $, $tok_ $(@expr1073748333 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4823 $, code@var747 , false $) $) $) { $return ; }
4824: }
4825:
4826: {
4827: const char code@var749 [@expr1073748334 11 ] =@expr1073748335 "class { };" ;
4828: const char expected@var750 [@expr1073748336 12 ] =@expr1073748337 "class { } ;" ;
4829: $if $(@expr1073748338 $!@expr1073748339 $assertEquals $(@expr1073748340 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4829 $, expected@var750 $, $tok_ $(@expr1073748341 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4829 $, code@var749 , false $) $) $) { $return ; }
4830: }
4831:
4832: {
4833: const char code@var751 [@expr1073748342 37 ] =@expr1073748343 "class { struct { struct { } ; } ; };" ;
4834: const char expected@var752 [@expr1073748344 12 ] =@expr1073748345 "class { } ;" ;
4835: $if $(@expr1073748346 $!@expr1073748347 $assertEquals $(@expr1073748348 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4835 $, expected@var752 $, $tok_ $(@expr1073748349 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4835 $, code@var751 , false $) $) $) { $return ; }
4836: }
4837: }
4838:
4839: void simplifyStructDecl4 ( ) {
4840: const char code@var753 [@expr1073748350 197 ] =@expr1073748351 "class ABC {\n    void foo() {\n        union {\n            int i;\n            float f;\n        };\n        struct Fee { } fee;\n    }\n    union {\n        long long ll;\n        double d;\n    };\n} abc;\n"
4841:
|
4851:
4852: ;
4853: const char expected@var754 [@expr1073748352 139 ] =@expr1073748353 "class ABC { void foo ( ) { int i ; float & f = i ; struct Fee { } ; struct Fee fee ; } union { long long ll ; double d ; } ; } ; ABC abc ;"
4854:
|
4862:
4863: ;
4864: $if $(@expr1073748354 $!@expr1073748355 $assertEquals $(@expr1073748356 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4864 $, expected@var754 $, $tok_ $(@expr1073748357 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4864 $, code@var753 , false $) $) $) { $return ; }
4865: }
4866:
4867: void simplifyStructDecl6 ( ) {
4868: $if $(@expr1073748358 $!@expr1073748359 $assertEquals $(@expr1073748360 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4868 $, "struct A { char integers [ X ] ; } ; struct A arrays ; arrays = { { 0 } } ;" $, $tok_ $(@expr1073748361 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4868 $, "struct A {\n    char integers[X];\n} arrays = {{0}};" , false $) $) $) { $return
4869:
|
4872:
4873: ; }
4874: }
4875:
4876: void simplifyStructDecl7 ( ) {
4877: $if $(@expr1073748362 $!@expr1073748363 $assertEquals $(@expr1073748364 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4877 $, "struct Anonymous0 { char x ; } ; struct Anonymous0 a [ 2 ] ;" $, $tok_ $(@expr1073748365 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4877 $, "struct { char x; } a[2];" , false $) $) $) { $return
4878: ; }
4879: $if $(@expr1073748366 $!@expr1073748367 $assertEquals $(@expr1073748368 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4879 $, "struct Anonymous0 { char x ; } ; static struct Anonymous0 a [ 2 ] ;" $, $tok_ $(@expr1073748369 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4879 $, "static struct { char x; } a[2];" , false $) $) $) { $return
4880: ; }
4881: }
4882:
4883: void simplifyStructDecl8 ( ) {
4884: $if $(@expr1073748370 $!@expr1073748371 $assertEquals $(@expr1073748372 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4884 $, "enum A { x , y , z } ; enum A a ; a = x ;" $, $tok_ $(@expr1073748373 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4884 $, "enum A { x, y, z } a(x);" , false $) $) $) { $return ; }
4885: $if $(@expr1073748374 $!@expr1073748375 $assertEquals $(@expr1073748376 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4885 $, "enum B { x , y , z } ; enum B b ; b = x ;" $, $tok_ $(@expr1073748377 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4885 $, "enum B { x , y, z } b{x};" , false $) $) $) { $return ; }
4886: $if $(@expr1073748378 $!@expr1073748379 $assertEquals $(@expr1073748380 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4886 $, "struct C { int i ; } ; struct C c ; c = { 0 } ;" $, $tok_ $(@expr1073748381 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4886 $, "struct C { int i; } c{0};" , false $) $) $) { $return ; }
4887: $if $(@expr1073748382 $!@expr1073748383 $assertEquals $(@expr1073748384 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4887 $, "enum Anonymous0 { x , y , z } ; enum Anonymous0 d ; d = x ;" $, $tok_ $(@expr1073748385 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4887 $, "enum { x, y, z } d(x);" , false $) $) $) { $return ; }
4888: $if $(@expr1073748386 $!@expr1073748387 $assertEquals $(@expr1073748388 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4888 $, "enum Anonymous0 { x , y , z } ; enum Anonymous0 e ; e = x ;" $, $tok_ $(@expr1073748389 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4888 $, "enum { x, y, z } e{x};" , false $) $) $) { $return ; }
4889: $if $(@expr1073748390 $!@expr1073748391 $assertEquals $(@expr1073748392 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4889 $, "struct Anonymous0 { int i ; } ; struct Anonymous0 f ; f = { 0 } ;" $, $tok_ $(@expr1073748393 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4889 $, "struct { int i; } f{0};" , false $) $) $) { $return ; }
4890: $if $(@expr1073748394 $!@expr1073748395 $assertEquals $(@expr1073748396 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4890 $, "struct Anonymous0 { } ; struct Anonymous0 x ; x = { 0 } ;" $, $tok_ $(@expr1073748397 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4890 $, "struct {} x = {0};" , false $) $) $) { $return ; }
4891: $if $(@expr1073748398 $!@expr1073748399 $assertEquals $(@expr1073748400 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4891 $, "enum G : short { x , y , z } ; enum G g ; g = x ;" $, $tok_ $(@expr1073748401 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4891 $, "enum G : short { x, y, z } g(x);" , false $) $) $) { $return ; }
4892: $if $(@expr1073748402 $!@expr1073748403 $assertEquals $(@expr1073748404 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4892 $, "enum H : short { x , y , z } ; enum H h ; h = x ;" $, $tok_ $(@expr1073748405 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4892 $, "enum H : short { x, y, z } h{x};" , false $) $) $) { $return ; }
4893: $if $(@expr1073748406 $!@expr1073748407 $assertEquals $(@expr1073748408 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4893 $, "enum class I : short { x , y , z } ; enum I i ; i = x ;" $, $tok_ $(@expr1073748409 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4893 $, "enum class I : short { x, y, z } i(x);" , false $) $) $) { $return ; }
4894: $if $(@expr1073748410 $!@expr1073748411 $assertEquals $(@expr1073748412 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4894 $, "enum class J : short { x , y , z } ; enum J j ; j = x ;" $, $tok_ $(@expr1073748413 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4894 $, "enum class J : short { x, y, z } j{x};" , false $) $) $) { $return ; }
4895: }
4896:
4897: void removeUnwantedKeywords ( ) {
4898: $if $(@expr1073748414 $!@expr1073748415 $assertEquals $(@expr1073748416 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4898 $, "int var ;" $, $tok_ $(@expr1073748417 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4898 $, "register int var ;" , true $) $) $) { $return ; }
4899: $if $(@expr1073748418 $!@expr1073748419 $assertEquals $(@expr1073748420 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4899 $, "short var ;" $, $tok_ $(@expr1073748421 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4899 $, "register short int var ;" , true $) $) $) { $return ; }
4900: $if $(@expr1073748422 $!@expr1073748423 $assertEquals $(@expr1073748424 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4900 $, "int foo ( ) { }" $, $tok_ $(@expr1073748425 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4900 $, "inline int foo ( ) { }" , true $) $) $) { $return ; }
4901: $if $(@expr1073748426 $!@expr1073748427 $assertEquals $(@expr1073748428 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4901 $, "int foo ( ) { }" $, $tok_ $(@expr1073748429 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4901 $, "__inline int foo ( ) { }" , true $) $) $) { $return ; }
4902: $if $(@expr1073748430 $!@expr1073748431 $assertEquals $(@expr1073748432 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4902 $, "int foo ( ) { }" $, $tok_ $(@expr1073748433 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4902 $, "__forceinline int foo ( ) { }" , true $) $) $) { $return ; }
4903: $if $(@expr1073748434 $!@expr1073748435 $assertEquals $(@expr1073748436 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4903 $, "constexpr int foo ( ) { }" $, $tok_ $(@expr1073748437 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4903 $, "constexpr int foo() { }" , true $) $) $) { $return ; }
4904: $if $(@expr1073748438 $!@expr1073748439 $assertEquals $(@expr1073748440 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4904 $, "void f ( ) { int final [ 10 ] ; }" $, $tok_ $(@expr1073748441 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4904 $, "void f() { int final[10]; }" , true $) $) $) { $return ; }
4905: $if $(@expr1073748442 $!@expr1073748443 $assertEquals $(@expr1073748444 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4905 $, "int * p ;" $, $tok_ $(@expr1073748445 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4905 $, "int * __restrict p;" , "test.c" $) $) $) { $return ; }
4906: $if $(@expr1073748446 $!@expr1073748447 $assertEquals $(@expr1073748448 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4906 $, "int * * p ;" $, $tok_ $(@expr1073748449 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4906 $, "int * __restrict__ * p;" , "test.c" $) $) $) { $return ; }
4907: $if $(@expr1073748450 $!@expr1073748451 $assertEquals $(@expr1073748452 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4907 $, "void foo ( float * a , float * b ) ;" $, $tok_ $(@expr1073748453 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4907 $, "void foo(float * __restrict__ a, float * __restrict__ b);" , "test.c" $) $) $) { $return ; }
4908: $if $(@expr1073748454 $!@expr1073748455 $assertEquals $(@expr1073748456 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4908 $, "int * p ;" $, $tok_ $(@expr1073748457 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4908 $, "int * restrict p;" , "test.c" $) $) $) { $return ; }
4909: $if $(@expr1073748458 $!@expr1073748459 $assertEquals $(@expr1073748460 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4909 $, "int * * p ;" $, $tok_ $(@expr1073748461 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4909 $, "int * restrict * p;" , "test.c" $) $) $) { $return ; }
4910: $if $(@expr1073748462 $!@expr1073748463 $assertEquals $(@expr1073748464 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4910 $, "void foo ( float * a , float * b ) ;" $, $tok_ $(@expr1073748465 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4910 $, "void foo(float * restrict a, float * restrict b);" , "test.c" $) $) $) { $return ; }
4911: $if $(@expr1073748466 $!@expr1073748467 $assertEquals $(@expr1073748468 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4911 $, "void foo ( int restrict ) ;" $, $tok_ $(@expr1073748469 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4911 $, "void foo(int restrict);" $) $) $) { $return ; }
4912: $if $(@expr1073748470 $!@expr1073748471 $assertEquals $(@expr1073748472 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4912 $, "int * p ;" $, $tok_ $(@expr1073748473 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4912 $, "typedef int * __restrict__ rint; rint p;" , "test.c" $) $) $) { $return ; }
4913:
4914:
4915: $if $(@expr1073748474 $!@expr1073748475 $assertEquals $(@expr1073748476 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4915 $, "a = b . _inline ;" $, $tok_ $(@expr1073748477 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4915 $, "a = b._inline;" , true $) $) $) { $return ; }
4916:
4917: $if $(@expr1073748478 $!@expr1073748479 $assertEquals $(@expr1073748480 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4917 $, "int i ; i = 0 ;" $, $tok_ $(@expr1073748481 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4917 $, "auto int i = 0;" , "test.c" $) $) $) { $return ; }
4918: $if $(@expr1073748482 $!@expr1073748483 $assertEquals $(@expr1073748484 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4918 $, "auto i ; i = 0 ;" $, $tok_ $(@expr1073748485 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4918 $, "auto i = 0;" , "test.cpp" $) $) $) { $return ; }
4919: }
4920:
4921: void simplifyCallingConvention ( ) {
4922: $if $(@expr1073748488 $!@expr1073748489 $assertEquals $(@expr1073748490 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4922 $, "int f ( ) ;" $, $tok_ $(@expr1073748491 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4922 $, "int __cdecl f();" , true $) $) $) { $return ; }
4923: $if $(@expr1073748492 $!@expr1073748493 $assertEquals $(@expr1073748494 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4923 $, "int f ( ) ;" $, $tok_ $(@expr1073748495 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4923 $, "int __stdcall f();" , true $) $) $) { $return ; }
4924: $if $(@expr1073748496 $!@expr1073748497 $assertEquals $(@expr1073748498 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4924 $, "int f ( ) ;" $, $tok_ $(@expr1073748499 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4924 $, "int __fastcall f();" , true $) $) $) { $return ; }
4925: $if $(@expr1073748500 $!@expr1073748501 $assertEquals $(@expr1073748502 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4925 $, "int f ( ) ;" $, $tok_ $(@expr1073748503 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4925 $, "int __clrcall f();" , true $) $) $) { $return ; }
4926: $if $(@expr1073748504 $!@expr1073748505 $assertEquals $(@expr1073748506 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4926 $, "int f ( ) ;" $, $tok_ $(@expr1073748507 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4926 $, "int __thiscall f();" , true $) $) $) { $return ; }
4927: $if $(@expr1073748508 $!@expr1073748509 $assertEquals $(@expr1073748510 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4927 $, "int f ( ) ;" $, $tok_ $(@expr1073748511 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4927 $, "int __syscall f();" , true $) $) $) { $return ; }
4928: $if $(@expr1073748512 $!@expr1073748513 $assertEquals $(@expr1073748514 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4928 $, "int f ( ) ;" $, $tok_ $(@expr1073748515 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4928 $, "int __pascal f();" , true $) $) $) { $return ; }
4929: $if $(@expr1073748516 $!@expr1073748517 $assertEquals $(@expr1073748518 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4929 $, "int f ( ) ;" $, $tok_ $(@expr1073748519 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4929 $, "int __fortran f();" , true $) $) $) { $return ; }
4930: $if $(@expr1073748520 $!@expr1073748521 $assertEquals $(@expr1073748522 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4930 $, "int f ( ) ;" $, $tok_ $(@expr1073748523 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4930 $, "int __far __cdecl f();" , true $) $) $) { $return ; }
4931: $if $(@expr1073748524 $!@expr1073748525 $assertEquals $(@expr1073748526 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4931 $, "int f ( ) ;" $, $tok_ $(@expr1073748527 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4931 $, "int __far __stdcall f();" , true $) $) $) { $return ; }
4932: $if $(@expr1073748528 $!@expr1073748529 $assertEquals $(@expr1073748530 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4932 $, "int f ( ) ;" $, $tok_ $(@expr1073748531 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4932 $, "int __far __fastcall f();" , true $) $) $) { $return ; }
4933: $if $(@expr1073748532 $!@expr1073748533 $assertEquals $(@expr1073748534 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4933 $, "int f ( ) ;" $, $tok_ $(@expr1073748535 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4933 $, "int __far __clrcall f();" , true $) $) $) { $return ; }
4934: $if $(@expr1073748536 $!@expr1073748537 $assertEquals $(@expr1073748538 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4934 $, "int f ( ) ;" $, $tok_ $(@expr1073748539 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4934 $, "int __far __thiscall f();" , true $) $) $) { $return ; }
4935: $if $(@expr1073748540 $!@expr1073748541 $assertEquals $(@expr1073748542 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4935 $, "int f ( ) ;" $, $tok_ $(@expr1073748543 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4935 $, "int __far __syscall f();" , true $) $) $) { $return ; }
4936: $if $(@expr1073748544 $!@expr1073748545 $assertEquals $(@expr1073748546 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4936 $, "int f ( ) ;" $, $tok_ $(@expr1073748547 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4936 $, "int __far __pascal f();" , true $) $) $) { $return ; }
4937: $if $(@expr1073748548 $!@expr1073748549 $assertEquals $(@expr1073748550 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4937 $, "int f ( ) ;" $, $tok_ $(@expr1073748551 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4937 $, "int __far __fortran f();" , true $) $) $) { $return ; }
4938: $if $(@expr1073748552 $!@expr1073748553 $assertEquals $(@expr1073748554 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4938 $, "int f ( ) ;" $, $tok_ $(@expr1073748555 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4938 $, "int WINAPI f();" , true , Settings ::@expr6732 Win32A@expr6662 $) $) $) { $return ; }
4939: $if $(@expr1073748557 $!@expr1073748558 $assertEquals $(@expr1073748559 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4939 $, "int f ( ) ;" $, $tok_ $(@expr1073748560 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4939 $, "int APIENTRY f();" , true , Settings ::@expr6732 Win32A@expr6662 $) $) $) { $return ; }
4940: $if $(@expr1073748562 $!@expr1073748563 $assertEquals $(@expr1073748564 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4940 $, "int f ( ) ;" $, $tok_ $(@expr1073748565 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4940 $, "int CALLBACK f();" , true , Settings ::@expr6732 Win32A@expr6662 $) $) $) { $return ; }
4941:
4942:
4943: $if $(@expr1073748567 $!@expr1073748568 $assertEquals $(@expr1073748569 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4943 $, "enum E { CALLBACK } ;" $, $tok_ $(@expr1073748570 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4943 $, "enum E { CALLBACK } ;" , true , Settings ::@expr1073748571 Unix32@expr1073748487 $) $) $) { $return ; }
4944: }
4945:
4946: void simplifyAttribute ( ) {
4947: $if $(@expr1073748572 $!@expr1073748573 $assertEquals $(@expr1073748574 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4947 $, "int f ( ) ;" $, $tok_ $(@expr1073748575 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4947 $, "__attribute__ ((visibility(\"default\"))) int f();" , true $) $) $) { $return ; }
4948: $if $(@expr1073748576 $!@expr1073748577 $assertEquals $(@expr1073748578 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4948 $, "int f ( ) ;" $, $tok_ $(@expr1073748579 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4948 $, "__attribute__((visibility(\"default\"))) int f();" , true $) $) $) { $return ; }
4949: $if $(@expr1073748580 $!@expr1073748581 $assertEquals $(@expr1073748582 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4949 $, "int f ( ) ;" $, $tok_ $(@expr1073748583 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4949 $, "__attribute ((visibility(\"default\"))) int f();" , true $) $) $) { $return ; }
4950: $if $(@expr1073748584 $!@expr1073748585 $assertEquals $(@expr1073748586 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4950 $, "int f ( ) ;" $, $tok_ $(@expr1073748587 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4950 $, "__attribute__ ((visibility(\"default\"))) __attribute__ ((warn_unused_result)) int f();" , true $) $) $) { $return ; }
4951: $if $(@expr1073748588 $!@expr1073748589 $assertEquals $(@expr1073748590 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4951 $, "blah :: blah f ( ) ;" $, $tok_ $(@expr1073748591 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4951 $, "__attribute__ ((visibility(\"default\"))) blah::blah f();" , true $) $) $) { $return ; }
4952: $if $(@expr1073748592 $!@expr1073748593 $assertEquals $(@expr1073748594 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4952 $, "template < T > Result < T > f ( ) ;" $, $tok_ $(@expr1073748595 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4952 $, "template<T> __attribute__ ((warn_unused_result)) Result<T> f();" , true $) $) $) { $return ; }
4953: $if $(@expr1073748596 $!@expr1073748597 $assertEquals $(@expr1073748598 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4953 $, "template < T , U > Result < T , U > f ( ) ;" $, $tok_ $(@expr1073748599 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4953 $, "template<T, U> __attribute__ ((warn_unused_result)) Result<T, U> f();" , true $) $) $) { $return ; }
4954: }
4955:
4956: void simplifyFunctorCall ( ) {
4957: $if $(@expr1073748600 $!@expr1073748601 $assertEquals $(@expr1073748602 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4957 $, "IncrementFunctor ( ) ( a ) ;" $, $tok_ $(@expr1073748603 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4957 $, "IncrementFunctor()(a);" , true $) $) $) { $return ; }
4958: }
4959:
4960:
4961: void simplifyFunctionPointer ( ) {
4962: $if $(@expr1073748604 $!@expr1073748605 $assertEquals $(@expr1073748606 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4962 $, "f ( double x , double ( * y ) ( ) ) ;" $, $tok_ $(@expr1073748607 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4962 $, "f (double x, double (*y) ());" , true $) $) $) { $return ; }
4963: }
4964:
4965: void redundant_semicolon ( ) {
4966: $if $(@expr1073748608 $!@expr1073748609 $assertEquals $(@expr1073748610 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4966 $, "void f ( ) { ; }" $, $tok_ $(@expr1073748611 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4966 $, "void f() { ; }" , false $) $) $) { $return ; }
4967: $if $(@expr1073748612 $!@expr1073748613 $assertEquals $(@expr1073748614 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4967 $, "void f ( ) { ; }" $, $tok_ $(@expr1073748615 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4967 $, "void f() { do { ; } while (0); }" , true $) $) $) { $return ; }
4968: }
4969:
4970: void simplifyFunctionReturn ( ) {
4971: {
4972: const char code@var755 [@expr1073748616 166 ] =@expr1073748617 "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};"
4973:
|
4978:
4979: ;
4980: const char expected@var756 [@expr1073748618 116 ] =@expr1073748619 "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ;"
4981:
|
4985:
4986: ;
4987: $if $(@expr1073748620 $!@expr1073748621 $assertEquals $(@expr1073748622 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4987 $, expected@var756 $, $tok_ $(@expr1073748623 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 4987 $, code@var755 , false $) $) $) { $return ; }
4988: }
4989: {
4990: const char code@var757 [@expr1073748624 113 ] =@expr1073748625 "class Fred {\n    std::string s;\n    const std::string & foo();\n};\nconst std::string & Fred::foo() { return \"\"; }"
4991:
4992:
4993:
4994: ;
4995: const char expected@var758 [@expr1073748626 121 ] =@expr1073748627 "class Fred { std :: string s ; const std :: string & foo ( ) ; } ; const std :: string & Fred :: foo ( ) { return \"\" ; }"
4996:
4997:
4998:
4999: ;
5000: $if $(@expr1073748628 $!@expr1073748629 $assertEquals $(@expr1073748630 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5000 $, expected@var758 $, $tok_ $(@expr1073748631 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5000 $, code@var757 , false $) $) $) { $return ; }
5001: }
5002: {
5003:
5004:
5005:
5006: const char code@var759 [@expr1073748632 345 ] =@expr1073748633 "extern \"C\" void abort ();\ntemplate <int a> inline int fact2 ();\ntemplate <int a> inline int fact () {\n  return a * fact2<a-1> ();\n}\ntemplate <> inline int fact<1> () {\n  return 1;\n}\ntemplate <int a> inline int fact2 () {\n  return a * fact<a-1>();\n}\ntemplate <> inline int fact2<1> () {\n  return 1;\n}\nint main() {\n  fact2<3> ();\n  fact2<2> ();\n}"
5007:
|
5022:
5023: ;
5024: $tok_ $(@expr1073748634 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5024 $, code@var759 $) ;
5025: }
5026: }
5027:
5028: void return_strncat ( ) {
5029: {
5030: const char code@var760 [@expr1073748635 95 ] =@expr1073748636 "char *f()\n{\n    char *temp=malloc(2);\n    strcpy(temp,\"\");\n    return (strncat(temp,\"a\",1));\n}"
5031:
|
5034:
5035: ;
5036: $if $(@expr1073748637 $!@expr1073748638 $assertEquals $(@expr1073748639 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5036 $, "char * f ( ) { char * temp ; temp = malloc ( 2 ) ; strcpy ( temp , \"\" ) ; strncat ( temp , \"a\" , 1 ) ; return temp ; }" $, $tok_ $(@expr1073748640 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5036 $, code@var760 , true $) $) $) { $return
5037:
|
5041:
5042: ; }
5043: }
5044: {
5045: const char code@var761 [@expr1073748641 121 ] =@expr1073748642 "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(*temp,\"a\",1));\n}"
5046:
|
5050:
5051: ;
5052: $if $(@expr1073748643 $!@expr1073748644 $assertEquals $(@expr1073748645 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5052 $, "char * f ( ) { char * * temp ; temp = malloc ( 8 ) ; * temp = malloc ( 2 ) ; strcpy ( * temp , \"\" ) ; strncat ( * temp , \"a\" , 1 ) ; return * temp ; }" $, $tok_ $(@expr1073748646 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5052 $, code@var761 , true $) $) $) { $return
5053:
|
5058:
5059: ; }
5060: }
5061: {
5062: const char code@var762 [@expr1073748647 134 ] =@expr1073748648 "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(temp[0],foo(b),calc(c-d)));\n}"
5063:
|
5067:
5068: ;
5069: $if $(@expr1073748649 $!@expr1073748650 $assertEquals $(@expr1073748651 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5069 $, "char * f ( ) { char * * temp ; temp = malloc ( 8 ) ; * temp = malloc ( 2 ) ; strcpy ( * temp , \"\" ) ; strncat ( temp [ 0 ] , foo ( b ) , calc ( c - d ) ) ; return temp [ 0 ] ; }" $, $tok_ $(@expr1073748652 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5069 $, code@var762 , true $) $) $) { $return
5070:
|
5075:
5076: ; }
5077: }
5078: }
5079:
5080: void removeRedundantFor ( ) {
5081: {
5082: const char code@var763 [@expr1073748653 53 ] =@expr1073748654 "void f() {    for(x=0;x<1;x++) {        y = 1;    }}"
5083:
5084:
5085:
5086: ;
5087: $if $(@expr1073748655 $!@expr1073748656 $assertEquals $(@expr1073748657 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5087 $, "void f ( ) { { y = 1 ; } x = 1 ; }" $, $tok_ $(@expr1073748658 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5087 $, code@var763 , true $) $) $) { $return ; }
5088: }
5089:
5090: {
5091: const char code@var764 [@expr1073748659 57 ] =@expr1073748660 "void f() {    for(x=0;x<1;x++) {        y = 1 + x;    }}"
5092:
5093:
5094:
5095: ;
5096: $if $(@expr1073748661 $!@expr1073748662 $assertEquals $(@expr1073748663 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5096 $, "void f ( ) { x = 0 ; { y = 1 + x ; } x = 1 ; }" $, $tok_ $(@expr1073748664 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5096 $, code@var764 , true $) $) $) { $return ; }
5097: }
5098:
5099: {
5100: const char code@var765 [@expr1073748665 71 ] =@expr1073748666 "void f() {    foo();    for(int x=0;x<1;x++) {        y = 1 + x;    }}"
5101:
|
5104:
5105: ;
5106: $if $(@expr1073748667 $!@expr1073748668 $assertEquals $(@expr1073748669 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5106 $, "void f ( ) { foo ( ) ; { int x = 0 ; y = 1 + x ; } }" $, $tok_ $(@expr1073748670 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5106 $, code@var765 , true $) $) $) { $return ; }
5107: }
5108: }
5109:
5110: void consecutiveBraces ( ) {
5111: $if $(@expr1073748671 $!@expr1073748672 $assertEquals $(@expr1073748673 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5111 $, "void f ( ) { }" $, $tok_ $(@expr1073748674 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5111 $, "void f(){{}}" , true $) $) $) { $return ; }
5112: $if $(@expr1073748675 $!@expr1073748676 $assertEquals $(@expr1073748677 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5112 $, "void f ( ) { }" $, $tok_ $(@expr1073748678 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5112 $, "void f(){{{}}}" , true $) $) $) { $return ; }
5113: $if $(@expr1073748679 $!@expr1073748680 $assertEquals $(@expr1073748681 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5113 $, "void f ( ) { for ( ; ; ) { } }" $, $tok_ $(@expr1073748682 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5113 $, "void f () { for(;;){} }" , true $) $) $) { $return ; }
5114: $if $(@expr1073748683 $!@expr1073748684 $assertEquals $(@expr1073748685 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5114 $, "void f ( ) { { scope_lock lock ; foo ( ) ; } { scope_lock lock ; bar ( ) ; } }" $, $tok_ $(@expr1073748686 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5114 $, "void f () { {scope_lock lock; foo();} {scope_lock lock; bar();} }" , true $) $) $) { $return ; }
5115: }
5116:
5117: void undefinedSizeArray ( ) {
5118: $if $(@expr1073748687 $!@expr1073748688 $assertEquals $(@expr1073748689 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5118 $, "int * x ;" $, $tok_ $(@expr1073748690 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5118 $, "int x [];" $) $) $) { $return ; }
5119: $if $(@expr1073748691 $!@expr1073748692 $assertEquals $(@expr1073748693 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5119 $, "int * * x ;" $, $tok_ $(@expr1073748694 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5119 $, "int x [][];" $) $) $) { $return ; }
5120: $if $(@expr1073748695 $!@expr1073748696 $assertEquals $(@expr1073748697 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5120 $, "int * * x ;" $, $tok_ $(@expr1073748698 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5120 $, "int * x [];" $) $) $) { $return ; }
5121: $if $(@expr1073748699 $!@expr1073748700 $assertEquals $(@expr1073748701 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5121 $, "int * * * x ;" $, $tok_ $(@expr1073748702 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5121 $, "int * x [][];" $) $) $) { $return ; }
5122: $if $(@expr1073748703 $!@expr1073748704 $assertEquals $(@expr1073748705 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5122 $, "int * * * * x ;" $, $tok_ $(@expr1073748706 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5122 $, "int * * x [][];" $) $) $) { $return ; }
5123: $if $(@expr1073748707 $!@expr1073748708 $assertEquals $(@expr1073748709 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5123 $, "void f ( int x [ ] , double y [ ] ) { }" $, $tok_ $(@expr1073748710 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5123 $, "void f(int x[], double y[]) { }" $) $) $) { $return ; }
5124: $if $(@expr1073748711 $!@expr1073748712 $assertEquals $(@expr1073748713 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5124 $, "int x [ 13 ] = { [ 11 ] = 2 , [ 12 ] = 3 } ;" $, $tok_ $(@expr1073748714 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5124 $, "int x[] = {[11]=2, [12]=3};" $) $) $) { $return ; }
5125: }
5126:
5127: void simplifyArrayAddress ( ) {
5128: const char code@var766 [@expr1073748715 68 ] =@expr1073748716 "void foo() {\n    int a[10];\n    memset(&a[4], 0, 20*sizeof(int));\n}"
5129:
5130:
5131: ;
5132: $if $(@expr1073748717 $!@expr1073748718 $assertEquals $(@expr1073748719 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5132 $, "void foo ( ) { int a [ 10 ] ; memset ( a + 4 , 0 , 80 ) ; }" $, $tok_ $(@expr1073748720 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5132 $, code@var766 , true $) $) $) { $return
5133:
5134:
5135: ; }
5136: }
5137:
5138: void simplifyCharAt ( ) {
5139: $if $(@expr1073748721 $!@expr1073748722 $assertEquals $(@expr1073748723 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5139 $, "'h' ;" $, $tok_ $(@expr1073748724 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5139 $, "\"hello\"[0] ;" $) $) $) { $return ; }
5140: $if $(@expr1073748725 $!@expr1073748726 $assertEquals $(@expr1073748727 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5140 $, "'\\n' ;" $, $tok_ $(@expr1073748728 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5140 $, "\"\\n\"[0] ;" $) $) $) { $return ; }
5141: $if $(@expr1073748729 $!@expr1073748730 $assertEquals $(@expr1073748731 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5141 $, "'\\0' ;" $, $tok_ $(@expr1073748732 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5141 $, "\"hello\"[5] ;" $) $) $) { $return ; }
5142: $if $(@expr1073748733 $!@expr1073748734 $assertEquals $(@expr1073748735 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5142 $, "'\\0' ;" $, $tok_ $(@expr1073748736 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5142 $, "\"\"[0] ;" $) $) $) { $return ; }
5143: $if $(@expr1073748737 $!@expr1073748738 $assertEquals $(@expr1073748739 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5143 $, "'\\0' ;" $, $tok_ $(@expr1073748740 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5143 $, "\"\\0\"[0] ;" $) $) $) { $return ; }
5144: $if $(@expr1073748741 $!@expr1073748742 $assertEquals $(@expr1073748743 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5144 $, "'\\n' ;" $, $tok_ $(@expr1073748744 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5144 $, "\"hello\\nworld\"[5] ;" $) $) $) { $return ; }
5145: $if $(@expr1073748745 $!@expr1073748746 $assertEquals $(@expr1073748747 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5145 $, "'w' ;" $, $tok_ $(@expr1073748748 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5145 $, "\"hello world\"[6] ;" $) $) $) { $return ; }
5146: $if $(@expr1073748749 $!@expr1073748750 $assertEquals $(@expr1073748751 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5146 $, "\"hello\" [ 7 ] ;" $, $tok_ $(@expr1073748752 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5146 $, "\"hello\"[7] ;" $) $) $) { $return ; }
5147: $if $(@expr1073748753 $!@expr1073748754 $assertEquals $(@expr1073748755 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5147 $, "\"hello\" [ -1 ] ;" $, $tok_ $(@expr1073748756 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5147 $, "\"hello\"[-1] ;" $) $) $) { $return ; }
5148: }
5149:
5150: void test_4881 ( ) {
5151: const char code@var767 [@expr1073748757 158 ] =@expr1073748758 "int evallex() {\n  int c, t;\nagain:\n   do {\n      if ((c = macroid(c)) == EOF_CHAR || c == '\\n') {\n      }\n   } while ((t = type[c]) == LET && catenate());\n}\n"
5152:
|
5157:
5158: ;
5159: $if $(@expr1073748759 $!@expr1073748760 $assertEquals $(@expr1073748761 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5159 $, "int evallex ( ) { int c ; int t ; again : ; do { c = macroid ( c ) ; if ( c == EOF_CHAR || c == '\\n' ) { } t = type [ c ] ; } while ( t == LET && catenate ( ) ) ; }" $, $tok_ $(@expr1073748762 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5159 $, code@var767 , true $) $) $) { $return
5160: ; }
5161: }
5162:
5163: void simplifyOverride ( ) {
5164: const char code@var768 [@expr1073748763 106 ] =@expr1073748764 "void fun() {\n    unsigned char override[] = {0x01, 0x02};\n    doSomething(override, sizeof(override));\n}\n"
5165:
5166:
5167: ;
5168: $if $(@expr1073748765 $!@expr1073748766 $assertEquals $(@expr1073748767 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5168 $, "void fun ( ) { char override [ 2 ] = { 0x01 , 0x02 } ; doSomething ( override , 2 ) ; }" $, $tok_ $(@expr1073748768 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5168 $, code@var768 , true $) $) $) { $return
5169: ; }
5170: }
5171:
5172: void simplifyNestedNamespace ( ) {
5173: $if $(@expr1073748769 $!@expr1073748770 $assertEquals $(@expr1073748771 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5173 $, "namespace A { namespace B { namespace C { int i ; } } }" $, $tok_ $(@expr1073748772 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5173 $, "namespace A::B::C { int i; }" $) $) $) { $return ; }
5174: }
5175:
5176: void simplifyNamespaceAliases1 ( ) {
5177: $if $(@expr1073748773 $!@expr1073748774 $assertEquals $(@expr1073748775 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5177 $, ";" $, $tok_ $(@expr1073748776 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5177 $, "namespace ios = boost::iostreams;" $) $) $) { $return
5178: ; }
5179: $if $(@expr1073748777 $!@expr1073748778 $assertEquals $(@expr1073748779 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5179 $, "boost :: iostreams :: istream foo ( \"foo\" ) ;" $, $tok_ $(@expr1073748780 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5179 $, "namespace ios = boost::iostreams; ios::istream foo(\"foo\");" $) $) $) { $return
5180: ; }
5181: $if $(@expr1073748781 $!@expr1073748782 $assertEquals $(@expr1073748783 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5181 $, "boost :: iostreams :: istream foo ( \"foo\" ) ;" $, $tok_ $(@expr1073748784 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5181 $, "using namespace std; namespace ios = boost::iostreams; ios::istream foo(\"foo\");" $) $) $) { $return
5182: ; }
5183: $if $(@expr1073748785 $!@expr1073748786 $assertEquals $(@expr1073748787 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5183 $, ";" $, $tok_ $(@expr1073748788 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5183 $, "using namespace std; namespace ios = boost::iostreams;" $) $) $) { $return
5184: ; }
5185: $if $(@expr1073748789 $!@expr1073748790 $assertEquals $(@expr1073748791 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5185 $, "namespace NS { boost :: iostreams :: istream foo ( \"foo\" ) ; }" $, $tok_ $(@expr1073748792 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5185 $, "namespace NS { using namespace std; namespace ios = boost::iostreams; ios::istream foo(\"foo\"); }" $) $) $) { $return
5186: ; }
5187:
5188:
5189: $if $(@expr1073748793 $!@expr1073748794 $assertEquals $(@expr1073748795 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5189 $, ";" $, $tok_ $(@expr1073748796 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5189 $, "namespace ios = boost::iostreams;\nnamespace ios = boost::iostreams;" $) $) $) { $return
5190: ; }
5191: $if $(@expr1073748797 $!@expr1073748798 $assertEquals $(@expr1073748799 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5191 $, ";" $, $tok_ $(@expr1073748800 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5191 $, "namespace ios = boost::iostreams;\nnamespace ios = boost::iostreams;\nnamespace ios = boost::iostreams;" $) $) $) { $return
5192: ; }
5193: $if $(@expr1073748801 $!@expr1073748802 $assertEquals $(@expr1073748803 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5193 $, "namespace A { namespace B { void foo ( ) { bar ( A :: B :: ab ( ) ) ; } } }" $, $tok_ $(@expr1073748804 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5193 $, "namespace A::B {namespace AB = A::B;void foo() {    namespace AB = A::B;    bar(AB::ab());}namespace AB = A::B;}" $) $) $) { $return
5194:
|
5200:
5201: ; }
5202:
5203:
5204: $todoAssertEquals $(@expr1073748805 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5204 $, "namespace A { namespace B { void foo ( ) { bar ( A :: B :: ab ( ) ) ; { baz ( A :: a ( ) ) ; } bar ( A :: B :: ab ( ) ) ; } } }" $, "namespace A { namespace B { void foo ( ) { bar ( A :: B :: ab ( ) ) ; { baz ( A :: B :: a ( ) ) ; } bar ( A :: B :: ab ( ) ) ; } } }" $, $tok_ $(@expr1073748806 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5204 $, "namespace A::B {namespace AB = A::B;void foo() {    namespace AB = A::B;    bar(AB::ab());    {         namespace AB = A;         baz(AB::a());    }    bar(AB::ab());}namespace AB = A::B;}" $) $)
5205:
|
5217:
5218: ;
5219:
5220:
5221: $if $(@expr1073748807 $!@expr1073748808 $assertEquals $(@expr1073748809 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5221 $, "namespace external { namespace ns { class A { public: static void f ( const std :: string & json ) ; } ; } } namespace external { namespace ns { void A :: f ( const std :: string & json ) { } } }" $, $tok_ $(@expr1073748810 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5221 $, "namespace external::ns {    class A {    public:        static void f(const std::string& json);    };}namespace json = rapidjson;namespace external::ns {    void A::f(const std::string& json) { }}" $) $) $) { $return
5222:
|
5238:
5239: ; }
5240: }
5241:
5242: void simplifyNamespaceAliases2 ( ) {
5243: $if $(@expr1073748811 $!@expr1073748812 $assertEquals $(@expr1073748813 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5243 $, "void foo ( ) { int maxResults ; maxResults = :: a :: b :: c :: d :: ef :: MAX ; }" $, $tok_ $(@expr1073748814 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5243 $, "namespace ef = ::a::b::c::d::ef;void foo(){  int maxResults = ::a::b::c::d::ef::MAX;}" $) $) $) { $return
5244:
|
5250:
5251: ; }
5252: }
5253:
5254:
5255: std :: string simplifyKnownVariables_ ( const char code@var769 [ ] , const char * file@var770 , int line@var771 ) {
5256: errout@var100 .@expr1073748815 str (@expr1073748816 "" ) ;
5257:
5258: Tokenizer tokenizer@var772 (@expr1073748817 &@expr1073748818 settings0@var102 , this@expr1073748819 ) ;
5259: std ::@expr1073748820 istringstream istr@var773 (@expr1073748821 code@var769 ) ;
5260: $assert_ $(@expr1073748822 file@var770 $, line@var771 $, $(@expr1073748823 tokenizer@var772 .@expr1073748824 tokenize (@expr1073748825 istr@var773 , "test.cpp" ) $) $) ;
5261:
5262: tokenizer@var772 .@expr1073748826 simplifyKnownVariables (@expr1073748827 ) ;
5263:
5264: return tokenizer@var772 .@expr1073748828 tokens (@expr1073748829 ) .@expr1073748830 stringifyList (@expr1073748831 nullptr , false ) ;
5265: }
5266:
5267: void simplifyKnownVariables1 ( ) {
5268: {
5269: const char code@var774 [@expr1073748832 42 ] =@expr1073748833 "void f()\n{\n    int a = 10;\n    if (a);\n}\n"
5270:
5271:
5272:
5273: ;
5274:
5275: $if $(@expr1073748834 $!@expr1073748835 $assertEquals $(@expr1073748836 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5275 $, "void f ( ) { int a ; a = 10 ; if ( 10 ) { ; } }" $, $simplifyKnownVariables_ $(@expr1073748837 code@var774 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5275 $) $) $) { $return
5276:
5277: ; }
5278: }
5279:
5280: {
5281: const char code@var775 [@expr1073748838 43 ] =@expr1073748839 "void f()\n{\n    int a = 10;\n    if (!a);\n}\n"
5282:
5283:
5284:
5285: ;
5286:
5287: $if $(@expr1073748840 $!@expr1073748841 $assertEquals $(@expr1073748842 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5287 $, "void f ( ) { int a ; a = 10 ; if ( ! 10 ) { ; } }" $, $simplifyKnownVariables_ $(@expr1073748843 code@var775 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5287 $) $) $) { $return
5288:
5289: ; }
5290: }
5291: }
5292:
5293: void simplifyKnownVariables2 ( ) {
5294: const char code@var776 [@expr1073748844 55 ] =@expr1073748845 "void f()\n{\n    int a = 10;\n    a = g();\n    if (a);\n}\n"
5295:
|
5298:
5299: ;
5300:
5301: $if $(@expr1073748846 $!@expr1073748847 $assertEquals $(@expr1073748848 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5301 $, "void f ( ) { int a ; a = 10 ; a = g ( ) ; if ( a ) { ; } }" $, $simplifyKnownVariables_ $(@expr1073748849 code@var776 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5301 $) $) $) { $return
5302:
5303: ; }
5304: }
5305:
5306: void simplifyKnownVariables3 ( ) {
5307: const char code@var777 [@expr1073748850 87 ] =@expr1073748851 "void f()\n{\n    int a = 4;\n    while(true){\n    break;\n    a = 10;\n    }\n    if (a);\n}\n"
5308:
|
5314:
5315: ;
5316:
5317: $if $(@expr1073748852 $!@expr1073748853 $assertEquals $(@expr1073748854 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5317 $, "void f ( ) { int a ; a = 4 ; while ( true ) { break ; a = 10 ; } if ( a ) { ; } }" $, $simplifyKnownVariables_ $(@expr1073748855 code@var777 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5317 $) $) $) { $return
5318:
5319: ; }
5320: }
5321:
5322: void simplifyKnownVariables4 ( ) {
5323: const char code@var778 [@expr1073748856 45 ] =@expr1073748857 "void f()\n{\n    int a = 4;\n    if ( g(a));\n}\n"
5324:
5325:
5326:
5327: ;
5328:
5329:
5330: $if $(@expr1073748858 $!@expr1073748859 $assertEquals $(@expr1073748860 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5330 $, "void f ( ) { int a ; a = 4 ; if ( g ( a ) ) { ; } }" $, $simplifyKnownVariables_ $(@expr1073748861 code@var778 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5330 $) $) $) { $return
5331:
5332: ; }
5333: }
5334:
5335: void simplifyKnownVariables5 ( ) {
5336: const char code@var779 [@expr1073748862 47 ] =@expr1073748863 "void f()\n{\n    int a = 4;\n    if ( a = 5 );\n}\n"
5337:
5338:
5339:
5340: ;
5341:
5342: $if $(@expr1073748864 $!@expr1073748865 $assertEquals $(@expr1073748866 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5342 $, "void f ( ) { int a ; a = 4 ; if ( a = 5 ) { ; } }" $, $simplifyKnownVariables_ $(@expr1073748867 code@var779 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5342 $) $) $) { $return
5343:
5344: ; }
5345: }
5346:
5347: void simplifyKnownVariables6 ( ) {
5348: const char code@var780 [@expr1073748868 61 ] =@expr1073748869 "void f()\n{\n    char str[2];    int a = 4;\n    str[a] = 0;\n}\n"
5349:
|
5352:
5353: ;
5354:
5355: $if $(@expr1073748870 $!@expr1073748871 $assertEquals $(@expr1073748872 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5355 $, "void f ( ) { char str [ 2 ] ; int a ; a = 4 ; str [ 4 ] = 0 ; }" $, $simplifyKnownVariables_ $(@expr1073748873 code@var780 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5355 $) $) $) { $return
5356:
5357: ; }
5358: }
5359:
5360: void simplifyKnownVariables7 ( ) {
5361: const char code@var781 [@expr1073748874 68 ] =@expr1073748875 "void foo()\n{\n    int i = 22;\n    abc[i++] = 1;\n    abc[++i] = 2;\n}\n"
5362:
|
5365:
5366: ;
5367:
5368: $if $(@expr1073748876 $!@expr1073748877 $assertEquals $(@expr1073748878 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5368 $, "void foo ( ) { int i ; i = 24 ; abc [ 22 ] = 1 ; abc [ 24 ] = 2 ; }" $, $simplifyKnownVariables_ $(@expr1073748879 code@var781 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5368 $) $) $) { $return
5369:
5370: ; }
5371: }
5372:
5373: void simplifyKnownVariables8 ( ) {
5374: const char code@var782 [@expr1073748880 57 ] =@expr1073748881 "void foo()\n{\n    int i = 22;\n    i++;\n    abc[i] = 0;\n}\n"
5375:
|
5378:
5379: ;
5380:
5381: $if $(@expr1073748882 $!@expr1073748883 $assertEquals $(@expr1073748884 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5381 $, "void foo ( ) { int i ; i = 23 ; abc [ 23 ] = 0 ; }" $, $simplifyKnownVariables_ $(@expr1073748885 code@var782 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5381 $) $) $) { $return
5382:
5383: ; }
5384: }
5385:
5386: void simplifyKnownVariables9 ( ) {
5387: const char code@var783 [@expr1073748886 63 ] =@expr1073748887 "void foo()\n{\n    int a = 1, b = 2;\n    if (a < b)\n        ;\n}\n"
5388:
|
5391:
5392: ;
5393:
5394: $if $(@expr1073748888 $!@expr1073748889 $assertEquals $(@expr1073748890 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5394 $, "void foo ( ) { int a ; a = 1 ; int b ; b = 2 ; if ( 1 < 2 ) { ; } }" $, $simplifyKnownVariables_ $(@expr1073748891 code@var783 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5394 $) $) $) { $return
5395:
5396: ; }
5397: }
5398:
5399: void simplifyKnownVariables10 ( ) {
5400: {
5401: const char code@var784 [@expr1073748892 81 ] =@expr1073748893 "void f()\n{\n  bool b=false;\n\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n"
5402:
|
5412:
5413: ;
5414:
5415: const std ::@expr1073748894 string expected1@var785 (@expr1073748895 "void f ( ) { bool b ; b = false ; { b = true ; }"
5416:
5417: ) ;
5418:
5419: $todoAssertEquals $(@expr1073748896 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5419 $, expected1@var785 +@expr1073748897 " if ( true ) { a ( ) ; } }" $, expected1@var785 +@expr1073748898 " if ( b ) { a ( ) ; } }" $, $simplifyKnownVariables_ $(@expr1073748899 code@var784 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5419 $) $)
5420:
5421:
5422: ;
5423:
5424: }
5425:
5426: {
5427: const char code@var786 [@expr1073748900 97 ] =@expr1073748901 "void f()\n{\n  bool b=false;\n  { b = false; }\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n"
5428:
|
5438:
5439: ;
5440:
5441: $todoAssertEquals $(@expr1073748902 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5441 $, "void f ( ) { bool b ; b = false ; { b = false ; } { b = true ; } if ( true ) { a ( ) ; } }" $, "void f ( ) { bool b ; b = false ; { b = false ; } { b = true ; } if ( b ) { a ( ) ; } }" $, $simplifyKnownVariables_ $(@expr1073748903 code@var786 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5441 $) $)
5442:
5443:
5444: ;
5445: }
5446:
5447: {
5448: const char code@var787 [@expr1073748904 86 ] =@expr1073748905 "void f()\n{\n  int b=0;\n  b = 1;\n  for( int i = 0; i < 10; i++ )  {\n  }\n\n  return b;\n}\n"
5449:
|
5456:
5457: ;
5458:
5459: $if $(@expr1073748906 $!@expr1073748907 $assertEquals $(@expr1073748908 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5459 $, "void f ( ) { int b ; b = 0 ; b = 1 ; for ( int i = 0 ; i < 10 ; i ++ ) { } return 1 ; }" $, $simplifyKnownVariables_ $(@expr1073748909 code@var787 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5459 $) $) $) { $return
5460:
5461: ; }
5462: }
5463: }
5464:
5465: void simplifyKnownVariables11 ( ) {
5466: const char code@var788 [@expr1073748910 48 ] =@expr1073748911 "const int foo = 0;\nint main()\n{\n  int foo=0;\n}\n"
5467:
5468:
5469:
5470: ;
5471:
5472: $if $(@expr1073748912 $!@expr1073748913 $assertEquals $(@expr1073748914 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5472 $, "int main ( ) { int foo ; foo = 0 ; }" $, $simplifyKnownVariables_ $(@expr1073748915 code@var788 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5472 $) $) $) { $return
5473:
5474: ; }
5475: }
5476:
5477: void simplifyKnownVariables13 ( ) {
5478: const char code@var789 [@expr1073748916 48 ] =@expr1073748917 "void f()\n{\n    int i = 10;\n    while(--i) {}\n}\n"
5479:
5480:
5481:
5482: ;
5483:
5484: $if $(@expr1073748918 $!@expr1073748919 $assertEquals $(@expr1073748920 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5484 $, "void f ( ) { int i ; i = 10 ; while ( -- i ) { } }" $, $simplifyKnownVariables_ $(@expr1073748921 code@var789 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5484 $) $) $) { $return
5485:
5486: ; }
5487: }
5488:
5489: void simplifyKnownVariables14 ( ) {
5490:
5491: const char code@var790 [@expr1073748922 64 ] =@expr1073748923 "void f ( ) { int n ; n = 1 ; do { ++ n ; } while ( n < 10 ) ; }" ;
5492: $if $(@expr1073748924 $!@expr1073748925 $assertEquals $(@expr1073748926 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5492 $, code@var790 $, $simplifyKnownVariables_ $(@expr1073748927 code@var790 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5492 $) $) $) { $return ; }
5493: }
5494:
5495: void simplifyKnownVariables15 ( ) {
5496: {
5497: const char code@var791 [@expr1073748928 63 ] =@expr1073748929 "int main()\n{\n  int x=5;\n  std::cout << 10 / x << std::endl;\n}\n"
5498:
5499:
5500:
5501: ;
5502:
5503: $if $(@expr1073748930 $!@expr1073748931 $assertEquals $(@expr1073748932 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5503 $, "int main ( ) { int x ; x = 5 ; std :: cout << 10 / 5 << std :: endl ; }" $, $simplifyKnownVariables_ $(@expr1073748933 code@var791 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5503 $) $) $) { $return
5504:
5505: ; }
5506: }
5507:
5508: {
5509: const char code@var792 [@expr1073748934 71 ] =@expr1073748935 "int main()\n{\n  int x=5;\n  std::cout << x / ( x == 1 ) << std::endl;\n}\n"
5510:
5511:
5512:
5513: ;
5514:
5515: $if $(@expr1073748936 $!@expr1073748937 $assertEquals $(@expr1073748938 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5515 $, "int main ( ) { int x ; x = 5 ; std :: cout << 5 / ( 5 == 1 ) << std :: endl ; }" $, $simplifyKnownVariables_ $(@expr1073748939 code@var792 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5515 $) $) $) { $return
5516:
5517: ; }
5518: }
5519: }
5520:
5521: void simplifyKnownVariables16 ( ) {
5522:
5523: const char code@var793 [@expr1073748940 43 ] =@expr1073748941 "void f ( ) { int n = 1; DISPATCH(while); }" ;
5524: $do ${ $try ${ $simplifyKnownVariables_ $(@expr1073748942 code@var793 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5524 $) $; $assertThrowFail $(@expr1073748943 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5524 $) $; $} $catch $(@expr1073748944 $const InternalError $&@expr1073748945 $) ${ $} $catch $(@expr1073748946 $... $) ${ $assertThrowFail $(@expr1073748947 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5524 $) $; $} $} $while $(@expr1073748948 $false $) ;
5525: }
5526:
5527: void simplifyKnownVariables17 ( ) {
5528:
5529: const char code@var794 [@expr1073748949 56 ] =@expr1073748950 "void f ( ) { char *s = malloc(100);mp_ptr p = s; p++; }" ;
5530: $if $(@expr1073748951 $!@expr1073748952 $assertEquals $(@expr1073748953 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5530 $, "void f ( ) { char * s ; s = malloc ( 100 ) ; mp_ptr p ; p = s ; p ++ ; }" $, $simplifyKnownVariables_ $(@expr1073748954 code@var794 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5530 $) $) $) { $return
5531:
5532: ; }
5533: }
5534:
5535: void simplifyKnownVariables18 ( ) {
5536: const char code@var795 [@expr1073748955 56 ] =@expr1073748956 "void f ( ) { char *s = malloc(100);mp_ptr p = s; ++p; }" ;
5537: $if $(@expr1073748957 $!@expr1073748958 $assertEquals $(@expr1073748959 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5537 $, "void f ( ) { char * s ; s = malloc ( 100 ) ; mp_ptr p ; p = s ; ++ p ; }" $, $simplifyKnownVariables_ $(@expr1073748960 code@var795 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5537 $) $) $) { $return
5538:
5539: ; }
5540: }
5541:
5542: void simplifyKnownVariables19 ( ) {
5543: const char code@var796 [@expr1073748961 73 ] =@expr1073748962 "void f ( ) { int i=0; do { if (i>0) { a(); } i=b(); } while (i != 12); }" ;
5544: $if $(@expr1073748963 $!@expr1073748964 $assertEquals $(@expr1073748965 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5544 $, "void f ( ) { int i ; i = 0 ; do { if ( i > 0 ) { a ( ) ; } i = b ( ) ; } while ( i != 12 ) ; }" $, $simplifyKnownVariables_ $(@expr1073748966 code@var796 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5544 $) $) $) { $return
5545:
5546: ; }
5547: }
5548:
5549: void simplifyKnownVariables20 ( ) {
5550: const char code@var797 [@expr1073748967 68 ] =@expr1073748968 "void f()\n{\n    int i = 0;\n    if (x) {\n        if (i) i=0;\n    }\n}\n"
5551:
|
5555:
5556: ;
5557:
5558: $if $(@expr1073748969 $!@expr1073748970 $assertEquals $(@expr1073748971 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5558 $, "void f ( ) { int i ; i = 0 ; if ( x ) { if ( 0 ) { i = 0 ; } } }" $, $simplifyKnownVariables_ $(@expr1073748972 code@var797 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5558 $) $) $) { $return
5559:
5560: ; }
5561: }
5562:
5563: void simplifyKnownVariables21 ( ) {
5564: const char code@var798 [@expr1073748973 59 ] =@expr1073748974 "void foo() { int n = 10; for (int i = 0; i < n; ++i) { } }" ;
5565:
5566: $if $(@expr1073748975 $!@expr1073748976 $assertEquals $(@expr1073748977 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5566 $, "void foo ( ) { int n ; n = 10 ; for ( int i = 0 ; i < 10 ; ++ i ) { } }" $, $simplifyKnownVariables_ $(@expr1073748978 code@var798 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5566 $) $) $) { $return
5567:
5568: ; }
5569:
5570: $if $(@expr1073748979 $!@expr1073748980 $assertEquals $(@expr1073748981 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5570 $, "void foo ( int i ) { int n ; n = i ; for ( i = 0 ; i < n ; ++ i ) { } }" $, $simplifyKnownVariables_ $(@expr1073748982 "void foo(int i) { int n = i; for (i = 0; i < n; ++i) { } }" $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5570 $) $) $) { $return
5571:
5572: ; }
5573: }
5574:
5575: void simplifyKnownVariables22 ( ) {
5576:
5577: {
5578: const char code@var799 [@expr1073748983 50 ] =@expr1073748984 "void foo()\n{\n    int n = 10;\n    i = (n >> 1);\n}\n"
5579:
5580:
5581:
5582: ;
5583:
5584: $if $(@expr1073748985 $!@expr1073748986 $assertEquals $(@expr1073748987 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5584 $, "void foo ( ) { int n ; n = 10 ; i = 10 >> 1 ; }" $, $simplifyKnownVariables_ $(@expr1073748988 code@var799 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5584 $) $) $) { $return
5585:
5586: ; }
5587: }
5588: {
5589: const char code@var800 [@expr1073748989 50 ] =@expr1073748990 "void foo()\n{\n    int n = 10;\n    i = (n << 1);\n}\n"
5590:
5591:
5592:
5593: ;
5594:
5595: $if $(@expr1073748991 $!@expr1073748992 $assertEquals $(@expr1073748993 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5595 $, "void foo ( ) { int n ; n = 10 ; i = 10 << 1 ; }" $, $simplifyKnownVariables_ $(@expr1073748994 code@var800 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5595 $) $) $) { $return
5596:
5597: ; }
5598: }
5599: {
5600: const char code@var801 [@expr1073748995 50 ] =@expr1073748996 "void foo()\n{\n    int n = 10;\n    i = (1 << n);\n}\n"
5601:
5602:
5603:
5604: ;
5605:
5606: $if $(@expr1073748997 $!@expr1073748998 $assertEquals $(@expr1073748999 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5606 $, "void foo ( ) { int n ; n = 10 ; i = 1 << 10 ; }" $, $simplifyKnownVariables_ $(@expr1073749000 code@var801 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5606 $) $) $) { $return
5607:
5608: ; }
5609: }
5610: {
5611: const char code@var802 [@expr1073749001 50 ] =@expr1073749002 "void foo()\n{\n    int n = 10;\n    i = (1 >> n);\n}\n"
5612:
5613:
5614:
5615: ;
5616:
5617: $if $(@expr1073749003 $!@expr1073749004 $assertEquals $(@expr1073749005 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5617 $, "void foo ( ) { int n ; n = 10 ; i = 1 >> 10 ; }" $, $simplifyKnownVariables_ $(@expr1073749006 code@var802 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5617 $) $) $) { $return
5618:
5619: ; }
5620: }
5621: }
5622:
5623: void simplifyKnownVariables23 ( ) {
5624:
5625: const char code@var803 [@expr1073749007 124 ] =@expr1073749008 "void foo(int x)\n{\n    int a[10], c = 0;\n    if (x) {\n        a[c] = 0;\n        c++;\n    } else {\n        a[c] = 0;\n    }\n}\n"
5626:
|
5633:
5634: ;
5635:
5636: $todoAssertEquals $(@expr1073749009 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5636 $, "void foo ( int x ) { int a [ 10 ] ; int c ; c = 0 ; if ( x ) { a [ 0 ] = 0 ; c = 1 ; } else { a [ 0 ] = 0 ; } }" $, "void foo ( int x ) { int a [ 10 ] ; int c ; c = 0 ; if ( x ) { a [ 0 ] = 0 ; c ++ ; } else { a [ c ] = 0 ; } }" $, $simplifyKnownVariables_ $(@expr1073749010 code@var803 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5636 $) $)
5637:
|
5650:
5651: ;
5652: }
5653:
5654: void simplifyKnownVariables25 ( ) {
5655: {
5656:
5657: const char code@var804 [@expr1073749011 137 ] =@expr1073749012 "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) {\n        if (*str == 0) goto label;\n    }\n    return;\nlabel:\n    str[i] = 0;\n}\n"
5658:
|
5665:
5666: ;
5667:
5668:
5669: $if $(@expr1073749013 $!@expr1073749014 $assertEquals $(@expr1073749015 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5669 $, "void foo ( char * str ) { int i ; for ( i = 0 ; i < 10 ; ++ i ) { if ( * str == 0 ) { goto label ; } } return ; label : ; str [ i ] = 0 ; }" $, $simplifyKnownVariables_ $(@expr1073749016 code@var804 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5669 $) $) $) { $return
5670:
|
5679:
5680: ; }
5681: }
5682:
5683: {
5684:
5685: const char code@var805 [@expr1073749017 91 ] =@expr1073749018 "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) { }\n    return;\n    str[i] = 0;\n}\n"
5686:
|
5690:
5691: ;
5692:
5693:
5694: $if $(@expr1073749019 $!@expr1073749020 $assertEquals $(@expr1073749021 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5694 $, "void foo ( char * str ) { int i ; for ( i = 0 ; i < 10 ; ++ i ) { } return ; str [ i ] = 0 ; }" $, $simplifyKnownVariables_ $(@expr1073749022 code@var805 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5694 $) $) $) { $return
5695:
|
5701:
5702: ; }
5703: }
5704: }
5705:
5706: void simplifyKnownVariables27 ( ) {
5707:
5708: const char code@var806 [@expr1073749023 76 ] =@expr1073749024 "void foo()\n{\n    int i1 = 1;\n    int i2 = 2;\n    int i3 = (i1 + i2) * 3;\n}\n"
5709:
|
5712:
5713: ;
5714: $if $(@expr1073749025 $!@expr1073749026 $assertEquals $(@expr1073749027 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5714 $, "void foo ( ) { int i1 ; i1 = 1 ; int i2 ; i2 = 2 ; int i3 ; i3 = ( 1 + 2 ) * 3 ; }" $, $simplifyKnownVariables_ $(@expr1073749028 code@var806 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5714 $) $) $) { $return
5715:
|
5720:
5721: ; }
5722: }
5723:
5724: void simplifyKnownVariables28 ( ) {
5725: const char code@var807 [@expr1073749029 68 ] =@expr1073749030 "void foo(int g)\n{\n  int i = 2;\n  if (g) {\n  }\n  if (i > 0) {\n  }\n}\n"
5726:
|
5731:
5732: ;
5733: $if $(@expr1073749031 $!@expr1073749032 $assertEquals $(@expr1073749033 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5733 $, "void foo ( int g ) { int i ; i = 2 ; if ( g ) { } if ( 2 > 0 ) { } }" $, $simplifyKnownVariables_ $(@expr1073749034 code@var807 $, "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5733 $) $) $) { $return
5734:
|
5739:
5740: ; }
5741: }
5742:
5743: void simplifyKnownVariables29 ( ) {
5744: {
5745: const char code@var808 [@expr1073749035 69 ] =@expr1073749036 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h + i;\n}\n"
5746:
|
5749:
5750: ;
5751: const char expected@var809 [@expr1073749037 83 ] =@expr1073749038 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 + v@2 ;\n6: }\n"
5752:
|
5757:
5758: ;
5759: $if $(@expr1073749039 $!@expr1073749040 $assertEquals $(@expr1073749041 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5759 $, expected@var809 $, $tokenizeDebugListing_ $(@expr1073749042 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5759 $, code@var808 , true $) $) $) { $return ; }
5760: }
5761:
5762: {
5763: const char code@var810 [@expr1073749043 69 ] =@expr1073749044 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h - i;\n}\n"
5764:
|
5767:
5768: ;
5769: const char expected@var811 [@expr1073749045 83 ] =@expr1073749046 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 - v@2 ;\n6: }\n"
5770:
|
5775:
5776: ;
5777: $if $(@expr1073749047 $!@expr1073749048 $assertEquals $(@expr1073749049 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5777 $, expected@var811 $, $tokenizeDebugListing_ $(@expr1073749050 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5777 $, code@var810 , true $) $) $) { $return ; }
5778: }
5779:
5780: {
5781: const char code@var812 [@expr1073749051 69 ] =@expr1073749052 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h * i;\n}\n"
5782:
|
5785:
5786: ;
5787: const char expected@var813 [@expr1073749053 83 ] =@expr1073749054 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 * v@2 ;\n6: }\n"
5788:
|
5793:
5794: ;
5795: $if $(@expr1073749055 $!@expr1073749056 $assertEquals $(@expr1073749057 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5795 $, expected@var813 $, $tokenizeDebugListing_ $(@expr1073749058 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5795 $, code@var812 , true $) $) $) { $return ; }
5796: }
5797:
5798: {
5799: const char code@var814 [@expr1073749059 69 ] =@expr1073749060 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h / i;\n}\n"
5800:
|
5803:
5804: ;
5805: const char expected@var815 [@expr1073749061 83 ] =@expr1073749062 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 / v@2 ;\n6: }\n"
5806:
|
5811:
5812: ;
5813: $if $(@expr1073749063 $!@expr1073749064 $assertEquals $(@expr1073749065 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5813 $, expected@var815 $, $tokenizeDebugListing_ $(@expr1073749066 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5813 $, code@var814 , true $) $) $) { $return ; }
5814: }
5815:
5816: {
5817: const char code@var816 [@expr1073749067 69 ] =@expr1073749068 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h & i;\n}\n"
5818:
|
5821:
5822: ;
5823: const char expected@var817 [@expr1073749069 83 ] =@expr1073749070 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 & v@2 ;\n6: }\n"
5824:
|
5829:
5830: ;
5831: $if $(@expr1073749071 $!@expr1073749072 $assertEquals $(@expr1073749073 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5831 $, expected@var817 $, $tokenizeDebugListing_ $(@expr1073749074 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5831 $, code@var816 , true $) $) $) { $return ; }
5832: }
5833:
5834: {
5835: const char code@var818 [@expr1073749075 69 ] =@expr1073749076 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h | i;\n}\n"
5836:
|
5839:
5840: ;
5841: const char expected@var819 [@expr1073749077 83 ] =@expr1073749078 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 | v@2 ;\n6: }\n"
5842:
|
5847:
5848: ;
5849: $if $(@expr1073749079 $!@expr1073749080 $assertEquals $(@expr1073749081 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5849 $, expected@var819 $, $tokenizeDebugListing_ $(@expr1073749082 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5849 $, code@var818 , true $) $) $) { $return ; }
5850: }
5851:
5852: {
5853: const char code@var820 [@expr1073749083 69 ] =@expr1073749084 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h ^ i;\n}\n"
5854:
|
5857:
5858: ;
5859: const char expected@var821 [@expr1073749085 83 ] =@expr1073749086 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 ^ v@2 ;\n6: }\n"
5860:
|
5865:
5866: ;
5867: $if $(@expr1073749087 $!@expr1073749088 $assertEquals $(@expr1073749089 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5867 $, expected@var821 $, $tokenizeDebugListing_ $(@expr1073749090 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5867 $, code@var820 , true $) $) $) { $return ; }
5868: }
5869:
5870: {
5871: const char code@var822 [@expr1073749091 69 ] =@expr1073749092 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h % i;\n}\n"
5872:
|
5875:
5876: ;
5877: const char expected@var823 [@expr1073749093 83 ] =@expr1073749094 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 % v@2 ;\n6: }\n"
5878:
|
5883:
5884: ;
5885: $if $(@expr1073749095 $!@expr1073749096 $assertEquals $(@expr1073749097 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5885 $, expected@var823 $, $tokenizeDebugListing_ $(@expr1073749098 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5885 $, code@var822 , true $) $) $) { $return ; }
5886: }
5887:
5888: {
5889: const char code@var824 [@expr1073749099 70 ] =@expr1073749100 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >> i;\n}\n"
5890:
|
5893:
5894: ;
5895: const char expected@var825 [@expr1073749101 84 ] =@expr1073749102 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >> v@2 ;\n6: }\n"
5896:
|
5901:
5902: ;
5903: $if $(@expr1073749103 $!@expr1073749104 $assertEquals $(@expr1073749105 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5903 $, expected@var825 $, $tokenizeDebugListing_ $(@expr1073749106 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5903 $, code@var824 , true $) $) $) { $return ; }
5904: }
5905:
5906: {
5907: const char code@var826 [@expr1073749107 70 ] =@expr1073749108 "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h << i;\n}\n"
5908:
|
5911:
5912: ;
5913: const char expected@var827 [@expr1073749109 84 ] =@expr1073749110 "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 << v@2 ;\n6: }\n"
5914:
|
5919:
5920: ;
5921: $if $(@expr1073749111 $!@expr1073749112 $assertEquals $(@expr1073749113 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5921 $, expected@var827 $, $tokenizeDebugListing_ $(@expr1073749114 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5921 $, code@var826 , true $) $) $) { $return ; }
5922: }
5923:
5924: {
5925: const char code@var828 [@expr1073749115 71 ] =@expr1073749116 "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h == i;\n}\n"
5926:
|
5929:
5930: ;
5931: const char expected@var829 [@expr1073749117 85 ] =@expr1073749118 "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 == v@2 ;\n6: }\n"
5932:
|
5937:
5938: ;
5939: $if $(@expr1073749119 $!@expr1073749120 $assertEquals $(@expr1073749121 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5939 $, expected@var829 $, $tokenizeDebugListing_ $(@expr1073749122 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5939 $, code@var828 , true $) $) $) { $return ; }
5940: }
5941:
5942: {
5943: const char code@var830 [@expr1073749123 71 ] =@expr1073749124 "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h != i;\n}\n"
5944:
|
5947:
5948: ;
5949: const char expected@var831 [@expr1073749125 85 ] =@expr1073749126 "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 != v@2 ;\n6: }\n"
5950:
|
5955:
5956: ;
5957: $if $(@expr1073749127 $!@expr1073749128 $assertEquals $(@expr1073749129 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5957 $, expected@var831 $, $tokenizeDebugListing_ $(@expr1073749130 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5957 $, code@var830 , true $) $) $) { $return ; }
5958: }
5959:
5960: {
5961: const char code@var832 [@expr1073749131 70 ] =@expr1073749132 "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h > i;\n}\n"
5962:
|
5965:
5966: ;
5967: const char expected@var833 [@expr1073749133 84 ] =@expr1073749134 "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 > v@2 ;\n6: }\n"
5968:
|
5973:
5974: ;
5975: $if $(@expr1073749135 $!@expr1073749136 $assertEquals $(@expr1073749137 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5975 $, expected@var833 $, $tokenizeDebugListing_ $(@expr1073749138 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5975 $, code@var832 , true $) $) $) { $return ; }
5976: }
5977:
5978: {
5979: const char code@var834 [@expr1073749139 71 ] =@expr1073749140 "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >= i;\n}\n"
5980:
|
5983:
5984: ;
5985: const char expected@var835 [@expr1073749141 85 ] =@expr1073749142 "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >= v@2 ;\n6: }\n"
5986:
|
5991:
5992: ;
5993: $if $(@expr1073749143 $!@expr1073749144 $assertEquals $(@expr1073749145 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5993 $, expected@var835 $, $tokenizeDebugListing_ $(@expr1073749146 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 5993 $, code@var834 , true $) $) $) { $return ; }
5994: }
5995:
5996: {
5997: const char code@var836 [@expr1073749147 70 ] =@expr1073749148 "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h < i;\n}\n"
5998:
|
6001:
6002: ;
6003: const char expected@var837 [@expr1073749149 84 ] =@expr1073749150 "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 < v@2 ;\n6: }\n"
6004:
|
6009:
6010: ;
6011: $if $(@expr1073749151 $!@expr1073749152 $assertEquals $(@expr1073749153 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6011 $, expected@var837 $, $tokenizeDebugListing_ $(@expr1073749154 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6011 $, code@var836 , true $) $) $) { $return ; }
6012: }
6013:
6014: {
6015: const char code@var838 [@expr1073749155 71 ] =@expr1073749156 "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h <= i;\n}\n"
6016:
|
6019:
6020: ;
6021: const char expected@var839 [@expr1073749157 85 ] =@expr1073749158 "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 <= v@2 ;\n6: }\n"
6022:
|
6027:
6028: ;
6029: $if $(@expr1073749159 $!@expr1073749160 $assertEquals $(@expr1073749161 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6029 $, expected@var839 $, $tokenizeDebugListing_ $(@expr1073749162 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6029 $, code@var838 , true $) $) $) { $return ; }
6030: }
6031:
6032: {
6033: const char code@var840 [@expr1073749163 71 ] =@expr1073749164 "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h && i;\n}\n"
6034:
|
6037:
6038: ;
6039: const char expected@var841 [@expr1073749165 85 ] =@expr1073749166 "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 && v@2 ;\n6: }\n"
6040:
|
6045:
6046: ;
6047: $if $(@expr1073749167 $!@expr1073749168 $assertEquals $(@expr1073749169 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6047 $, expected@var841 $, $tokenizeDebugListing_ $(@expr1073749170 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6047 $, code@var840 , true $) $) $) { $return ; }
6048: }
6049:
6050: {
6051: const char code@var842 [@expr1073749171 71 ] =@expr1073749172 "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h || i;\n}\n"
6052:
|
6055:
6056: ;
6057: const char expected@var843 [@expr1073749173 85 ] =@expr1073749174 "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 || v@2 ;\n6: }\n"
6058:
|
6063:
6064: ;
6065: $if $(@expr1073749175 $!@expr1073749176 $assertEquals $(@expr1073749177 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6065 $, expected@var843 $, $tokenizeDebugListing_ $(@expr1073749178 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6065 $, code@var842 , true $) $) $) { $return ; }
6066: }
6067: }
6068:
6069: void simplifyKnownVariables30 ( ) {
6070: const char code@var844 [@expr1073749179 105 ] =@expr1073749180 "int foo() {\n  iterator it1 = ints.begin();\n  iterator it2 = it1;\n  for (++it2;it2!=ints.end();++it2);\n}\n"
6071:
6072:
6073:
6074: ;
6075: const char expected@var845 [@expr1073749181 137 ] =@expr1073749182 "int foo ( ) {\niterator it1 ; it1 = ints . begin ( ) ;\niterator it2 ; it2 = it1 ;\nfor ( ++ it2 ; it2 != ints . end ( ) ; ++ it2 ) { ; }\n}"
6076:
6077:
6078:
6079: ;
6080: $if $(@expr1073749183 $!@expr1073749184 $assertEquals $(@expr1073749185 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6080 $, expected@var845 $, $tokenizeAndStringify_ $(@expr1073749186 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6080 $, code@var844 , true $) $) $) { $return ; }
6081: }
6082:
6083: void simplifyKnownVariables31 ( ) {
6084: const char code@var846 [@expr1073749187 84 ] =@expr1073749188 "void foo(const char str[]) {\n    const char *p = str;\n    if (p[0] == 0) {\n    }\n}\n"
6085:
6086:
6087:
6088: ;
6089: const char expected@var847 [@expr1073749189 89 ] =@expr1073749190 "void foo ( const char str [ ] ) {\nconst char * p ; p = str ;\nif ( str [ 0 ] == 0 ) {\n}\n}"
6090:
6091:
6092:
6093: ;
6094: $if $(@expr1073749191 $!@expr1073749192 $assertEquals $(@expr1073749193 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6094 $, expected@var847 $, $tokenizeAndStringify_ $(@expr1073749194 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6094 $, code@var846 , true $) $) $) { $return ; }
6095: }
6096:
6097: void simplifyKnownVariables32 ( ) {
6098: {
6099: const char code@var848 [@expr1073749195 51 ] =@expr1073749196 "void foo() {\n    const int x = 0;\n    bar(0,x);\n}\n"
6100:
6101:
6102: ;
6103: const char expected@var849 [@expr1073749197 34 ] =@expr1073749198 "void foo ( ) {\n\nbar ( 0 , 0 ) ;\n}" ;
6104: $if $(@expr1073749199 $!@expr1073749200 $assertEquals $(@expr1073749201 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6104 $, expected@var849 $, $tokenizeAndStringify_ $(@expr1073749202 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6104 $, code@var848 , true $) $) $) { $return ; }
6105: }
6106:
6107: {
6108: const char code@var850 [@expr1073749203 41 ] =@expr1073749204 "static int const SZ = 22; char str[SZ];\n" ;
6109: $if $(@expr1073749205 $!@expr1073749206 $assertEquals $(@expr1073749207 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6109 $, "char str [ 22 ] ;" $, $tokenizeAndStringify_ $(@expr1073749208 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6109 $, code@var850 , true $) $) $) { $return ; }
6110: }
6111: }
6112:
6113: void simplifyKnownVariables33 ( ) {
6114: const char code@var851 [@expr1073749209 74 ] =@expr1073749210 "static void foo(struct Foo *foo) {\n    foo->a = 23;\n    x[foo->a] = 0;\n}\n"
6115:
6116:
6117: ;
6118: const char expected@var852 [@expr1073749211 71 ] =@expr1073749212 "static void foo ( struct Foo * foo ) {\nfoo . a = 23 ;\nx [ 23 ] = 0 ;\n}"
6119:
6120:
6121: ;
6122: $if $(@expr1073749213 $!@expr1073749214 $assertEquals $(@expr1073749215 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6122 $, expected@var852 $, $tokenizeAndStringify_ $(@expr1073749216 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6122 $, code@var851 , true $) $) $) { $return ; }
6123: }
6124:
6125: void simplifyKnownVariables34 ( ) {
6126: const char code@var853 [@expr1073749217 80 ] =@expr1073749218 "void f() {\n    int x = 10;\n    do { cin >> x; } while (x > 5);\n    a[x] = 0;\n}\n"
6127:
6128:
6129:
6130: ;
6131: const char expected@var854 [@expr1073749219 82 ] =@expr1073749220 "void f ( ) {\nint x ; x = 10 ;\ndo { cin >> x ; } while ( x > 5 ) ;\na [ x ] = 0 ;\n}"
6132:
6133:
6134:
6135: ;
6136: $if $(@expr1073749221 $!@expr1073749222 $assertEquals $(@expr1073749223 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6136 $, expected@var854 $, $tokenizeAndStringify_ $(@expr1073749224 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6136 $, code@var853 , true $) $) $) { $return ; }
6137: }
6138:
6139: void simplifyKnownVariables35 ( ) {
6140:
6141: const char code@var855 [@expr1073749225 82 ] =@expr1073749226 "int f() {    int x = 0;    if (x == 0) {        return 0;    }    return 10 / x;}"
6142:
|
6146:
6147: ;
6148: const char expected@var856 [@expr1073749227 45 ] =@expr1073749228 "int f ( ) { int x ; x = 0 ; { return 0 ; } }" ;
6149: $if $(@expr1073749229 $!@expr1073749230 $assertEquals $(@expr1073749231 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6149 $, expected@var856 $, $tokenizeAndStringify_ $(@expr1073749232 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6149 $, code@var855 , true $) $) $) { $return ; }
6150: }
6151:
6152: void simplifyKnownVariables36 ( ) {
6153:
6154: const char code@var857 [@expr1073749233 57 ] =@expr1073749234 "void f() {    const char *q = \"hello\";    strcpy(p, q);}"
6155:
6156:
6157: ;
6158: const char expected@var858 [@expr1073749235 71 ] =@expr1073749236 "void f ( ) { const char * q ; q = \"hello\" ; strcpy ( p , \"hello\" ) ; }" ;
6159: $if $(@expr1073749237 $!@expr1073749238 $assertEquals $(@expr1073749239 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6159 $, expected@var858 $, $tokenizeAndStringify_ $(@expr1073749240 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6159 $, code@var857 , true $) $) $) { $return ; }
6160:
6161:
6162: const char code2@var859 [@expr1073749241 57 ] =@expr1073749242 "void f() {  char buf[10] = \"ab\";    memset(buf, 0, 10);}"
6163:
6164:
6165: ;
6166: const char expected2@var860 [@expr1073749243 66 ] =@expr1073749244 "void f ( ) { char buf [ 10 ] = \"ab\" ; memset ( buf , 0 , 10 ) ; }" ;
6167: $if $(@expr1073749245 $!@expr1073749246 $assertEquals $(@expr1073749247 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6167 $, expected2@var860 $, $tokenizeAndStringify_ $(@expr1073749248 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6167 $, code2@var859 , true $) $) $) { $return ; }
6168: }
6169:
6170: void simplifyKnownVariables37 ( ) {
6171:
6172: const char code@var861 [@expr1073749249 143 ] =@expr1073749250 "void f() {\n    double x = 0;\n    for (int iter=0; iter<42; iter++) {\n        int EvaldF = 1;\n        if (EvaldF)\n            Eval (x);\n    }\n}"
6173:
|
6178:
6179: ;
6180: const char expected@var862 [@expr1073749251 96 ] =@expr1073749252 "void f ( ) {\ndouble x ; x = 0 ;\nfor ( int iter = 0 ; iter < 42 ; iter ++ ) {\n\n\nEval ( x ) ;\n}\n}"
6181:
|
6186:
6187: ;
6188: $if $(@expr1073749253 $!@expr1073749254 $assertEquals $(@expr1073749255 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6188 $, expected@var862 $, $tokenizeAndStringify_ $(@expr1073749256 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6188 $, code@var861 , true $) $) $) { $return ; }
6189: }
6190:
6191: void simplifyKnownVariables38 ( ) {
6192:
6193: const char code@var863 [@expr1073749257 60 ] =@expr1073749258 "void f() {\n    int x = 0;\n    int y = 1;\n    if (x || y);\n}"
6194:
6195:
6196:
6197: ;
6198: const char expected@var864 [@expr1073749259 19 ] =@expr1073749260 "void f ( ) {\n\n\n;\n}"
6199:
6200:
6201:
6202: ;
6203: $if $(@expr1073749261 $!@expr1073749262 $assertEquals $(@expr1073749263 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6203 $, expected@var864 $, $tokenizeAndStringify_ $(@expr1073749264 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6203 $, code@var863 , true $) $) $) { $return ; }
6204: }
6205:
6206: void simplifyKnownVariables39 ( ) {
6207:
6208: {
6209: const char code@var865 [@expr1073749265 55 ] =@expr1073749266 "void f() {\n    int *x;\n    int *y = x;\n    delete y;\n}"
6210:
6211:
6212:
6213: ;
6214: $if $(@expr1073749267 $!@expr1073749268 $assertEquals $(@expr1073749269 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6214 $, "void f ( ) {\nint * x ;\n\ndelete x ;\n}" $, $tokenizeAndStringify_ $(@expr1073749270 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6214 $, code@var865 , true $) $) $) { $return ; }
6215: }
6216: {
6217: const char code@var866 [@expr1073749271 58 ] =@expr1073749272 "void f() {\n    int *x;\n    int *y = x;\n    delete [] y;\n}"
6218:
6219:
6220:
6221: ;
6222: $if $(@expr1073749273 $!@expr1073749274 $assertEquals $(@expr1073749275 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6222 $, "void f ( ) {\nint * x ;\n\ndelete [ ] x ;\n}" $, $tokenizeAndStringify_ $(@expr1073749276 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6222 $, code@var866 , true $) $) $) { $return ; }
6223: }
6224: }
6225:
6226:
6227: void simplifyKnownVariables40 ( ) {
6228: const char code@var867 [@expr1073749277 54 ] =@expr1073749278 "void f() {\n    char c1 = 'a';\n    char c2 = { c1 };\n}"
6229:
6230:
6231: ;
6232: $if $(@expr1073749279 $!@expr1073749280 $assertEquals $(@expr1073749281 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6232 $, "void f ( ) {\n\nchar c2 ; c2 = { 'a' } ;\n}" $, $tokenizeAndStringify_ $(@expr1073749282 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6232 $, code@var867 , true $) $) $) { $return ; }
6233: }
6234:
6235: void simplifyKnownVariables41 ( ) {
6236: const char code@var868 [@expr1073749283 79 ] =@expr1073749284 "void f() {\n    int x = 0;\n    const int *p; p = &x;\n    if (p) { return 0; }\n}"
6237:
6238:
6239:
6240: ;
6241: $if $(@expr1073749285 $!@expr1073749286 $assertEquals $(@expr1073749287 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6241 $, "void f ( ) {\nint x ; x = 0 ;\nconst int * p ; p = & x ;\nif ( & x ) { return 0 ; }\n}" $, $tokenizeAndStringify_ $(@expr1073749288 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6241 $, code@var868 , true $) $) $) { $return ; }
6242: }
6243:
6244: void simplifyKnownVariables42 ( ) {
6245: {
6246: const char code@var869 [@expr1073749290 91 ] =@expr1073749291 "void f() {\n    char str1[10], str2[10];\n    strcpy(str1, \"abc\");\n    strcpy(str2, str1);\n}"
6247:
6248:
6249:
6250: ;
6251: const char expected@var870 [@expr1073749292 105 ] =@expr1073749293 "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nstrcpy ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}"
6252:
6253:
6254:
6255: ;
6256: $if $(@expr1073749294 $!@expr1073749295 $assertEquals $(@expr1073749296 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6256 $, expected@var870 $, $tokenizeAndStringify_ $(@expr1073749297 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6256 $, code@var869 , true $) $) $) { $return ; }
6257: }
6258:
6259: {
6260: const char code@var871 [@expr1073749298 70 ] =@expr1073749299 "void f() {\n   char a[10];\n   strcpy(a, \"hello\");\n   strcat(a, \"!\");\n}"
6261:
6262:
6263:
6264: ;
6265: const char expected@var872 [@expr1073749300 77 ] =@expr1073749301 "void f ( ) {\nchar a [ 10 ] ;\nstrcpy ( a , \"hello\" ) ;\nstrcat ( a , \"!\" ) ;\n}"
6266:
6267:
6268:
6269: ;
6270: $if $(@expr1073749302 $!@expr1073749303 $assertEquals $(@expr1073749304 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6270 $, expected@var872 $, $tokenizeAndStringify_ $(@expr1073749305 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6270 $, code@var871 , true , true , Settings ::@expr1073749306 Native@expr1073749289 , "test.c" $) $) $) { $return ; }
6271: }
6272:
6273: {
6274: const char code@var873 [@expr1073749307 67 ] =@expr1073749308 "void f() {    char *s = malloc(10);    strcpy(s, \"\");    free(s);}"
6275:
6276:
6277:
6278: ;
6279: const char expected@var874 [@expr1073749309 79 ] =@expr1073749310 "void f ( ) { char * s ; s = malloc ( 10 ) ; strcpy ( s , \"\" ) ; free ( s ) ; }"
6280:
6281:
6282:
6283: ;
6284: $if $(@expr1073749311 $!@expr1073749312 $assertEquals $(@expr1073749313 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6284 $, expected@var874 $, $tokenizeAndStringify_ $(@expr1073749314 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6284 $, code@var873 , true $) $) $) { $return ; }
6285: }
6286:
6287: {
6288: const char code@var875 [@expr1073749315 59 ] =@expr1073749316 "void f(char *p, char *q) {    strcpy(p, \"abc\");    q = p;}"
6289:
6290:
6291: ;
6292: const char expected@var876 [@expr1073749317 66 ] =@expr1073749318 "void f ( char * p , char * q ) { strcpy ( p , \"abc\" ) ; q = p ; }"
6293:
6294:
6295: ;
6296: $if $(@expr1073749319 $!@expr1073749320 $assertEquals $(@expr1073749321 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6296 $, expected@var876 $, $tokenizeAndStringify_ $(@expr1073749322 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6296 $, code@var875 , true $) $) $) { $return ; }
6297: }
6298:
6299:
6300: {
6301: const char code@var877 [@expr1073749323 73 ] =@expr1073749324 "void f() {\n    char s[10];\n    strcpy(s, \"123\");\n    if (s[6] == ' ');\n}"
6302:
6303:
6304:
6305: ;
6306: const char expected@var878 [@expr1073749325 82 ] =@expr1073749326 "void f ( ) {\nchar s [ 10 ] ;\nstrcpy ( s , \"123\" ) ;\nif ( s [ 6 ] == ' ' ) { ; }\n}"
6307:
6308:
6309:
6310: ;
6311: $if $(@expr1073749327 $!@expr1073749328 $assertEquals $(@expr1073749329 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6311 $, expected@var878 $, $tokenizeAndStringify_ $(@expr1073749330 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6311 $, code@var877 , true $) $) $) { $return ; }
6312: }
6313: }
6314:
6315: void simplifyKnownVariables43 ( ) {
6316: {
6317: const char code@var879 [@expr1073749331 56 ] =@expr1073749332 "void f() {\n    int a, *p; p = &a;\n    { int a = *p; }\n}"
6318:
6319:
6320: ;
6321: const char expected@var880 [@expr1073749333 65 ] =@expr1073749334 "void f ( ) {\nint a ; int * p ; p = & a ;\n{ int a ; a = * p ; }\n}"
6322:
6323:
6324: ;
6325: $if $(@expr1073749335 $!@expr1073749336 $assertEquals $(@expr1073749337 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6325 $, expected@var880 $, $tokenizeAndStringify_ $(@expr1073749338 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6325 $, code@var879 , true $) $) $) { $return ; }
6326: }
6327:
6328: {
6329: const char code@var881 [@expr1073749339 59 ] =@expr1073749340 "void f() {\n    int *a, **p; p = &a;\n    { int *a = *p; }\n}"
6330:
6331:
6332: ;
6333: const char expected@var882 [@expr1073749341 71 ] =@expr1073749342 "void f ( ) {\nint * a ; int * * p ; p = & a ;\n{ int * a ; a = * p ; }\n}"
6334:
6335:
6336: ;
6337: $if $(@expr1073749343 $!@expr1073749344 $assertEquals $(@expr1073749345 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6337 $, expected@var882 $, $tokenizeAndStringify_ $(@expr1073749346 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6337 $, code@var881 , true $) $) $) { $return ; }
6338: }
6339: }
6340:
6341: void simplifyKnownVariables44 ( ) {
6342: const char code@var883 [@expr1073749347 48 ] =@expr1073749348 "void a() {\n    static int i = 10;\n    b(i++);\n}"
6343:
6344:
6345: ;
6346: const char expected@var884 [@expr1073749349 48 ] =@expr1073749350 "void a ( ) {\nstatic int i = 10 ;\nb ( i ++ ) ;\n}"
6347:
6348:
6349: ;
6350: $if $(@expr1073749351 $!@expr1073749352 $assertEquals $(@expr1073749353 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6350 $, expected@var884 $, $tokenizeAndStringify_ $(@expr1073749354 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6350 $, code@var883 , true $) $) $) { $return ; }
6351: }
6352:
6353: void simplifyKnownVariables45 ( ) {
6354: const char code@var885 [@expr1073749355 74 ] =@expr1073749356 "class Fred {\nprivate:\n    const static int NUM = 2;\n    int array[NUM];\n}"
6355:
6356:
6357:
6358: ;
6359: const char expected@var886 [@expr1073749357 43 ] =@expr1073749358 "class Fred {\nprivate:\n\nint array [ 2 ] ;\n}"
6360:
6361:
6362:
6363: ;
6364: $if $(@expr1073749359 $!@expr1073749360 $assertEquals $(@expr1073749361 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6364 $, expected@var886 $, $tokenizeAndStringify_ $(@expr1073749362 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6364 $, code@var885 , true $) $) $) { $return ; }
6365: }
6366:
6367: void simplifyKnownVariables46 ( ) {
6368: const char code@var887 [@expr1073749364 56 ] =@expr1073749365 "void f() {\n    int x = 0;\n    cin >> x;\n    return x;\n}"
6369:
6370:
6371:
6372: ;
6373:
6374: {
6375: const char expected@var888 [@expr1073749366 53 ] =@expr1073749367 "void f ( ) {\nint x ; x = 0 ;\ncin >> x ;\nreturn x ;\n}"
6376:
6377:
6378:
6379: ;
6380: $if $(@expr1073749368 $!@expr1073749369 $assertEquals $(@expr1073749370 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6380 $, expected@var888 $, $tokenizeAndStringify_ $(@expr1073749371 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6380 $, code@var887 , true , true , Settings ::@expr7548 Native@expr7539 , "test.cpp" $) $) $) { $return ; }
6381: }
6382:
6383: {
6384: const char expected@var889 [@expr1073749373 38 ] =@expr1073749374 "void f ( ) {\n\ncin >> 0 ;\nreturn 0 ;\n}"
6385:
6386:
6387:
6388: ;
6389: $if $(@expr1073749375 $!@expr1073749376 $assertEquals $(@expr1073749377 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6389 $, expected@var889 $, $tokenizeAndStringify_ $(@expr1073749378 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6389 $, code@var887 , true , true , Settings ::@expr7548 Native@expr7539 , "test.c" $) $) $) { $return ; }
6390: }
6391: }
6392:
6393: void simplifyKnownVariables47 ( ) {
6394:
6395: const char code@var890 [@expr1073749381 54 ] =@expr1073749382 "void f() {\n    int x = 0;\n    cin >> std::hex >> x;\n}"
6396:
6397:
6398: ;
6399: const char expected@var891 [@expr1073749383 56 ] =@expr1073749384 "void f ( ) {\nint x ; x = 0 ;\ncin >> std :: hex >> x ;\n}"
6400:
6401:
6402: ;
6403: $if $(@expr1073749385 $!@expr1073749386 $assertEquals $(@expr1073749387 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6403 $, expected@var891 $, $tokenizeAndStringify_ $(@expr1073749388 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6403 $, code@var890 , true , true , Settings ::@expr1073749389 Native@expr1073749380 , "test.cpp" $) $) $) { $return ; }
6404: }
6405:
6406: void simplifyKnownVariables48 ( ) {
6407:
6408: const char code@var892 [@expr1073749391 75 ] =@expr1073749392 "void f(int sz) {\n    int i;\n    for (i = 0; ((i<sz) && (sz>3)); ++i) { }\n}"
6409:
6410:
6411: ;
6412: const char expected@var893 [@expr1073749393 82 ] =@expr1073749394 "void f ( int sz ) {\nint i ;\nfor ( i = 0 ; ( i < sz ) && ( sz > 3 ) ; ++ i ) { }\n}"
6413:
6414:
6415: ;
6416: $if $(@expr1073749395 $!@expr1073749396 $assertEquals $(@expr1073749397 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6416 $, expected@var893 $, $tokenizeAndStringify_ $(@expr1073749398 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6416 $, code@var892 , true , true , Settings ::@expr1073749399 Native@expr1073749390 , "test.c" $) $) $) { $return ; }
6417: }
6418:
6419: void simplifyKnownVariables49 ( ) {
6420: const char code@var894 [@expr1073749401 99 ] =@expr1073749402 "void f(int sz) {\n    switch (x) {\n    case 1: sz = 2; continue;\n    case 2: x = sz; break;\n    }\n}"
6421:
|
6424:
6425: ;
6426: const char expected@var895 [@expr1073749403 98 ] =@expr1073749404 "void f ( int sz ) {\nswitch ( x ) {\ncase 1 : ; sz = 2 ; continue ;\ncase 2 : ; x = sz ; break ;\n}\n}"
6427:
|
6430:
6431: ;
6432: $if $(@expr1073749405 $!@expr1073749406 $assertEquals $(@expr1073749407 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6432 $, expected@var895 $, $tokenizeAndStringify_ $(@expr1073749408 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6432 $, code@var894 , true , true , Settings ::@expr1073749409 Native@expr1073749400 , "test.c" $) $) $) { $return ; }
6433: }
6434:
6435: void simplifyKnownVariables50 ( ) {
6436: {
6437: const char code@var896 [@expr1073749410 91 ] =@expr1073749411 "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"%%\");\n    strcpy(str2, str1);\n}"
6438:
6439:
6440:
6441: ;
6442: const char expected@var897 [@expr1073749412 103 ] =@expr1073749413 "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"%%\" ) ;\nstrcpy ( str2 , \"%\" ) ;\n}"
6443:
6444:
6445:
6446: ;
6447: $if $(@expr1073749414 $!@expr1073749415 $assertEquals $(@expr1073749416 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6447 $, expected@var897 $, $tokenizeAndStringify_ $(@expr1073749417 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6447 $, code@var896 , true $) $) $) { $return ; }
6448: }
6449: {
6450: const char code@var898 [@expr1073749418 112 ] =@expr1073749419 "void f() {\n    char str1[25], str2[25];\n    sprintf(str1, \"abcdef%%%% and %% and %\");\n    strcpy(str2, str1);\n}"
6451:
6452:
6453:
6454: ;
6455: const char expected@var899 [@expr1073749420 143 ] =@expr1073749421 "void f ( ) {\nchar str1 [ 25 ] ; char str2 [ 25 ] ;\nsprintf ( str1 , \"abcdef%%%% and %% and %\" ) ;\nstrcpy ( str2 , \"abcdef%% and % and %\" ) ;\n}"
6456:
6457:
6458:
6459: ;
6460: $if $(@expr1073749422 $!@expr1073749423 $assertEquals $(@expr1073749424 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6460 $, expected@var899 $, $tokenizeAndStringify_ $(@expr1073749425 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6460 $, code@var898 , true $) $) $) { $return ; }
6461: }
6462: {
6463: const char code@var900 [@expr1073749426 92 ] =@expr1073749427 "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"abc\");\n    strcpy(str2, str1);\n}"
6464:
6465:
6466:
6467: ;
6468: const char expected@var901 [@expr1073749428 106 ] =@expr1073749429 "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}"
6469:
6470:
6471:
6472: ;
6473: $if $(@expr1073749430 $!@expr1073749431 $assertEquals $(@expr1073749432 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6473 $, expected@var901 $, $tokenizeAndStringify_ $(@expr1073749433 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6473 $, code@var900 , true $) $) $) { $return ; }
6474: }
6475: {
6476:
6477: const char code@var902 [@expr1073749434 281 ] =@expr1073749435 "const char * foo ( ) {\nconst char x1 = 'b' ;\nf ( & x1 ) ;\nconst char x2 = 'b' ;\nf ( y , & x2 ) ;\nconst char x3 = 'b' ;\nt = & x3 ;\nconst char x4 = 'b' ;\nt = y + & x4 ;\nconst char x5 = 'b' ;\nz [ & x5 ] = y ;\nconst char x6 = 'b' ;\nv = { & x6 } ;\nconst char x7 = 'b' ;\nreturn & x7 ;\n}"
6478:
|
6491:
6492: ;
6493: $if $(@expr1073749436 $!@expr1073749437 $assertEquals $(@expr1073749438 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6493 $, code@var902 $, $tokenizeAndStringify_ $(@expr1073749439 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6493 $, code@var902 , true $) $) $) { $return ; }
6494: }
6495: {
6496:
6497: const char code@var903 [@expr1073749440 259 ] =@expr1073749441 "const int * foo ( ) {\nconst int x1 = 1 ;\nf ( & x1 ) ;\nconst int x2 = 1 ;\nf ( y , & x2 ) ;\nconst int x3 = 1 ;\nt = & x3 ;\nconst int x4 = 1 ;\nt = y + & x4 ;\nconst int x5 = 1 ;\nz [ & x5 ] = y ;\nconst int x6 = 1 ;\nv = { & x6 } ;\nconst int x7 = 1 ;\nreturn & x7 ;\n}"
6498:
|
6511:
6512: ;
6513: $if $(@expr1073749442 $!@expr1073749443 $assertEquals $(@expr1073749444 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6513 $, code@var903 $, $tokenizeAndStringify_ $(@expr1073749445 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6513 $, code@var903 , true $) $) $) { $return ; }
6514: }
6515: }
6516:
6517: void simplifyKnownVariables51 ( ) {
6518: const char code@var904 [@expr1073749446 110 ] =@expr1073749447 "void mhz_M(int enough) {\n  TYPE *x=&x, **p=x, **q = NULL;\n  BENCH1(q = _mhz_M(n); n = 1;)\n  use_pointer(q);\n}"
6519:
6520:
6521:
6522: ;
6523: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073749448 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6523 $, code@var904 , true $) $; $assertThrowFail $(@expr1073749449 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6523 $) $; $} $catch $(@expr1073749450 $const InternalError $&@expr1073749451 $) ${ $} $catch $(@expr1073749452 $... $) ${ $assertThrowFail $(@expr1073749453 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6523 $) $; $} $} $while $(@expr1073749454 $false $) ;
6524: }
6525:
6526: void simplifyKnownVariables52 ( ) {
6527: $if $(@expr1073749455 $!@expr1073749456 $assertEquals $(@expr1073749457 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6527 $, "void f ( ) { int y ; y = 34 + z ; }" $, $tokenizeAndStringify_ $(@expr1073749458 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6527 $, "void f() { int x=34; int y=x+z; }" , true $) $) $) { $return ; }
6528: $if $(@expr1073749459 $!@expr1073749460 $assertEquals $(@expr1073749461 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6528 $, "void f ( ) { int y ; y = 34 - z ; }" $, $tokenizeAndStringify_ $(@expr1073749462 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6528 $, "void f() { int x=34; int y=x-z; }" , true $) $) $) { $return ; }
6529: $if $(@expr1073749463 $!@expr1073749464 $assertEquals $(@expr1073749465 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6529 $, "void f ( ) { int y ; y = 34 * z ; }" $, $tokenizeAndStringify_ $(@expr1073749466 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6529 $, "void f() { int x=34; int y=x*z; }" , true $) $) $) { $return ; }
6530: $if $(@expr1073749467 $!@expr1073749468 $assertEquals $(@expr1073749469 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6530 $, "void f ( ) { int y ; y = 34 / z ; }" $, $tokenizeAndStringify_ $(@expr1073749470 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6530 $, "void f() { int x=34; int y=x/z; }" , true $) $) $) { $return ; }
6531: $if $(@expr1073749471 $!@expr1073749472 $assertEquals $(@expr1073749473 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6531 $, "void f ( ) { int y ; y = 34 % z ; }" $, $tokenizeAndStringify_ $(@expr1073749474 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6531 $, "void f() { int x=34; int y=x%z; }" , true $) $) $) { $return ; }
6532: $if $(@expr1073749475 $!@expr1073749476 $assertEquals $(@expr1073749477 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6532 $, "void f ( ) { int y ; y = 34 & z ; }" $, $tokenizeAndStringify_ $(@expr1073749478 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6532 $, "void f() { int x=34; int y=x&z; }" , true $) $) $) { $return ; }
6533: $if $(@expr1073749479 $!@expr1073749480 $assertEquals $(@expr1073749481 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6533 $, "void f ( ) { int y ; y = 34 | z ; }" $, $tokenizeAndStringify_ $(@expr1073749482 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6533 $, "void f() { int x=34; int y=x|z; }" , true $) $) $) { $return ; }
6534: $if $(@expr1073749483 $!@expr1073749484 $assertEquals $(@expr1073749485 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6534 $, "void f ( ) { int y ; y = 34 ^ z ; }" $, $tokenizeAndStringify_ $(@expr1073749486 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6534 $, "void f() { int x=34; int y=x^z; }" , true $) $) $) { $return ; }
6535: $if $(@expr1073749487 $!@expr1073749488 $assertEquals $(@expr1073749489 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6535 $, "void f ( ) { int y ; y = 34 << z ; }" $, $tokenizeAndStringify_ $(@expr1073749490 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6535 $, "void f() { int x=34; int y=x<<z; }" , true $) $) $) { $return ; }
6536: $if $(@expr1073749491 $!@expr1073749492 $assertEquals $(@expr1073749493 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6536 $, "void f ( ) { int y ; y = 34 >> z ; }" $, $tokenizeAndStringify_ $(@expr1073749494 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6536 $, "void f() { int x=34; int y=x>>z; }" , true $) $) $) { $return ; }
6537: $if $(@expr1073749495 $!@expr1073749496 $assertEquals $(@expr1073749497 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6537 $, "void f ( ) { int y ; y = 34 && z ; }" $, $tokenizeAndStringify_ $(@expr1073749498 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6537 $, "void f() { int x=34; int y=x&&z; }" , true $) $) $) { $return ; }
6538: $if $(@expr1073749499 $!@expr1073749500 $assertEquals $(@expr1073749501 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6538 $, "void f ( ) { int y ; y = 34 || z ; }" $, $tokenizeAndStringify_ $(@expr1073749502 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6538 $, "void f() { int x=34; int y=x||z; }" , true $) $) $) { $return ; }
6539: $if $(@expr1073749503 $!@expr1073749504 $assertEquals $(@expr1073749505 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6539 $, "void f ( ) { int y ; y = 34 > z ; }" $, $tokenizeAndStringify_ $(@expr1073749506 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6539 $, "void f() { int x=34; int y=x>z; }" , true $) $) $) { $return ; }
6540: $if $(@expr1073749507 $!@expr1073749508 $assertEquals $(@expr1073749509 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6540 $, "void f ( ) { int y ; y = 34 >= z ; }" $, $tokenizeAndStringify_ $(@expr1073749510 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6540 $, "void f() { int x=34; int y=x>=z; }" , true $) $) $) { $return ; }
6541: $if $(@expr1073749511 $!@expr1073749512 $assertEquals $(@expr1073749513 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6541 $, "void f ( ) { int y ; y = 34 < z ; }" $, $tokenizeAndStringify_ $(@expr1073749514 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6541 $, "void f() { int x=34; int y=x<z; }" , true $) $) $) { $return ; }
6542: $if $(@expr1073749515 $!@expr1073749516 $assertEquals $(@expr1073749517 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6542 $, "void f ( ) { int y ; y = 34 <= z ; }" $, $tokenizeAndStringify_ $(@expr1073749518 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6542 $, "void f() { int x=34; int y=x<=z; }" , true $) $) $) { $return ; }
6543: $if $(@expr1073749519 $!@expr1073749520 $assertEquals $(@expr1073749521 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6543 $, "void f ( ) { int y ; y = 34 == z ; }" $, $tokenizeAndStringify_ $(@expr1073749522 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6543 $, "void f() { int x=34; int y=x==z; }" , true $) $) $) { $return ; }
6544: $if $(@expr1073749523 $!@expr1073749524 $assertEquals $(@expr1073749525 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6544 $, "void f ( ) { int y ; y = 34 != z ; }" $, $tokenizeAndStringify_ $(@expr1073749526 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6544 $, "void f() { int x=34; int y=x!=z; }" , true $) $) $) { $return ; }
6545:
6546:
6547: $if $(@expr1073749527 $!@expr1073749528 $assertEquals $(@expr1073749529 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6547 $, "void f ( ) { }" $, $tokenizeAndStringify_ $(@expr1073749530 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6547 $, "void f() { char *p = 0; int result = p && (!*p); }" , true $) $) $) { $return ; }
6548: $if $(@expr1073749531 $!@expr1073749532 $assertEquals $(@expr1073749533 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6548 $, "void f ( ) { }" $, $tokenizeAndStringify_ $(@expr1073749534 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6548 $, "void f() { Foo *p = 0; bool b = (p && (p->type() == 1)); }" , true $) $) $) { $return ; }
6549: }
6550:
6551: void simplifyKnownVariables53 ( ) {
6552: $if $(@expr1073749535 $!@expr1073749536 $assertEquals $(@expr1073749537 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6552 $, "void f ( ) { int x ; x = abc ( ) ; }" $, $tokenizeAndStringify_ $(@expr1073749538 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6552 $, "void f() { int x; int &ref=x; ref=abc(); }" , true $) $) $) { $return ; }
6553: $if $(@expr1073749539 $!@expr1073749540 $assertEquals $(@expr1073749541 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6553 $, "void f ( ) { int * p ; p = abc ( ) ; }" $, $tokenizeAndStringify_ $(@expr1073749542 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6553 $, "void f() { int *p; int *&ref=p; ref=abc(); }" , true $) $) $) { $return ; }
6554: }
6555:
6556: void simplifyKnownVariables54 ( ) {
6557: $if $(@expr1073749543 $!@expr1073749544 $assertEquals $(@expr1073749545 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6557 $, "void f ( int * p ) { * -- p = 0 ; * p = 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749546 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6557 $, "void f(int*p) { *--p=0; *p=0; }" , true $) $) $) { $return ; }
6558: }
6559:
6560: void simplifyKnownVariables55 ( ) {
6561: $if $(@expr1073749547 $!@expr1073749548 $assertEquals $(@expr1073749549 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6561 $, "void f ( ) { int a ; if ( a > 0 ) { } }" $, $tokenizeAndStringify_ $(@expr1073749550 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6561 $, "void f() { int a; int *p=&a; if (*p>0) {} }" , true $) $) $) { $return ; }
6562: $if $(@expr1073749551 $!@expr1073749552 $assertEquals $(@expr1073749553 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6562 $, "void f ( ) { int a ; struct AB ab ; ab . a = & a ; if ( a > 0 ) { } }" $, $tokenizeAndStringify_ $(@expr1073749554 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6562 $, "void f() { int a; struct AB ab; ab.a = &a; if (*ab.a>0) {} }" , true $) $) $) { $return ; }
6563: $if $(@expr1073749555 $!@expr1073749556 $assertEquals $(@expr1073749557 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6563 $, "void f ( ) { int a ; if ( x > a ) { } }" $, $tokenizeAndStringify_ $(@expr1073749558 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6563 $, "void f() { int a; int *p=&a; if (x>*p) {} }" , true $) $) $) { $return ; }
6564: }
6565:
6566: void simplifyKnownVariables56 ( ) {
6567: $if $(@expr1073749559 $!@expr1073749560 $assertEquals $(@expr1073749561 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6567 $, "void f ( ) { int a ; a = 0 ; int b ; b = 0 ; * p >> a >> b ; return a / b ; }" $, $tokenizeAndStringify_ $(@expr1073749562 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6567 $, "void f() { int a=0,b=0; *p>>a>>b; return a/b; }" , true $) $) $) { $return
6568: ; }
6569: }
6570:
6571: void simplifyKnownVariables57 ( ) {
6572: $if $(@expr1073749563 $!@expr1073749564 $assertEquals $(@expr1073749565 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6572 $, "unsigned long long x ; x = 9223372036854775808UL ;" $, $tokenizeAndStringify_ $(@expr1073749566 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6572 $, "unsigned long long x = 1UL << 63 ;" , true $) $) $) { $return ; }
6573: $if $(@expr1073749567 $!@expr1073749568 $assertEquals $(@expr1073749569 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6573 $, "long long x ; x = -9223372036854775808L ;" $, $tokenizeAndStringify_ $(@expr1073749570 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6573 $, "long long x = 1L << 63 ;" , true $) $) $) { $return ; }
6574: }
6575:
6576: void simplifyKnownVariables58 ( ) {
6577: const char code@var905 [@expr1073749571 142 ] =@expr1073749572 "enum e { VAL1 = 1, VAL2 }; typedef char arr_t[VAL2]; int foo(int) ; void bar () {   throw foo (VAL1); } int baz() {   return sizeof(arr_t); }"
6578:
|
6584:
6585: ;
6586: $if $(@expr1073749573 $!@expr1073749574 $assertEquals $(@expr1073749575 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6586 $, "enum e { VAL1 = 1 , VAL2 } ; int foo ( int ) ; void bar ( ) { throw foo ( VAL1 ) ; } int baz ( ) { return sizeof ( char [ VAL2 ] ) ; }" $, $tokenizeAndStringify_ $(@expr1073749576 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6586 $, code@var905 , true $) $) $) { $return
6587:
|
6592:
6593: ; }
6594: }
6595:
6596: void simplifyKnownVariables59 ( ) {
6597: const char code@var906 [@expr1073749577 95 ] =@expr1073749578 "void f() {\n  int a[3], i, j;\n  for(i = 0, j = 1; i < 3, j < 12; i++,j++) {\n    a[i] = 0;\n  }\n}"
6598:
|
6601:
6602: ;
6603: $if $(@expr1073749579 $!@expr1073749580 $assertEquals $(@expr1073749581 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6603 $, "void f ( ) {\nint a [ 3 ] ; int i ; int j ;\nfor ( i = 0 , j = 1 ; i < 3 , j < 12 ; i ++ , j ++ ) {\na [ i ] = 0 ;\n}\n}" $, $tokenizeAndStringify_ $(@expr1073749582 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6603 $, code@var906 , true $) $) $) { $return
6604:
|
6607:
6608: ; }
6609: }
6610:
6611: void simplifyKnownVariables60 ( ) {
6612: const char code@var907 [@expr1073749583 159 ] =@expr1073749584 "void f() {\n  int i = 1;\n  const int * const constPtrToConst = &i;\n  std::cout << *constPtrToConst << std::endl;\n  std::cout << constPtrToConst << std::endl;\n}"
6613:
|
6616:
6617: ;
6618: $if $(@expr1073749585 $!@expr1073749586 $assertEquals $(@expr1073749587 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6618 $, "void f ( ) {\nint i ; i = 1 ;\nconst int * const constPtrToConst ; constPtrToConst = & i ;\nstd :: cout << i << std :: endl ;\nstd :: cout << & i << std :: endl ;\n}" $, $tokenizeAndStringify_ $(@expr1073749588 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6618 $, code@var907 , true $) $) $) { $return
6619:
|
6622:
6623: ; }
6624: }
6625:
6626: void simplifyKnownVariables61 ( ) {
6627: $tokenizeAndStringify_ $(@expr1073749589 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6627 $, "static const int XX = 0;\nenum E { XX };\nstruct s {\n  enum Bar {\n    XX,\n    Other\n  };\n  enum { XX };\n};" , true $)
6628:
|
6634:
6635: ;
6636: $if $(@expr1073749590 $!@expr1073749591 $assertEquals $(@expr1073749592 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6636 $, "" $, errout@var100 .@expr1073749593 str (@expr1073749594 ) $) $) { $return ; }
6637: }
6638:
6639: void simplifyKnownVariables62 ( ) {
6640: $if $(@expr1073749595 $!@expr1073749596 $assertEquals $(@expr1073749597 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6640 $, "void foo ( std :: string str ) {\nchar * p ; p = & str [ 0 ] ;\n* p = 0 ;\n}" $, $tokenizeAndStringify_ $(@expr1073749598 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6640 $, "void foo(std::string str) {\n  char *p = &str[0];\n  *p = 0;\n}" , true $) $) $) { $return
6641:
|
6646:
6647: ; }
6648: }
6649:
6650: void simplifyKnownVariables63 ( ) {
6651: $tokenizeAndStringify_ $(@expr1073749599 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6651 $, "typedef void (*a)();\nenum class E { a };\n" $)
6652: ;
6653: $if $(@expr1073749600 $!@expr1073749601 $assertEquals $(@expr1073749602 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6653 $, "" $, errout@var100 .@expr1073749603 str (@expr1073749604 ) $) $) { $return ; }
6654: }
6655:
6656: void simplifyKnownVariablesBailOutAssign1 ( ) {
6657: const char code@var908 [@expr1073749605 70 ] =@expr1073749606 "int foo() {\n    int i; i = 0;\n    if (x) { i = 10; }\n    return i;\n}\n"
6658:
6659:
6660:
6661: ;
6662: const char expected@var909 [@expr1073749607 65 ] =@expr1073749608 "int foo ( ) {\nint i ; i = 0 ;\nif ( x ) { i = 10 ; }\nreturn i ;\n}"
6663:
6664:
6665:
6666: ;
6667: $if $(@expr1073749609 $!@expr1073749610 $assertEquals $(@expr1073749611 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6667 $, expected@var909 $, $tokenizeAndStringify_ $(@expr1073749612 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6667 $, code@var908 , true $) $) $) { $return ; }
6668: }
6669:
6670: void simplifyKnownVariablesBailOutAssign2 ( ) {
6671:
6672: const char code@var910 [@expr1073749613 93 ] =@expr1073749614 "void f(struct ABC *list) {\n    struct ABC *last = NULL;\n    nr = (last = list->prev)->nr;\n}\n"
6673:
6674:
6675: ;
6676: const char expected@var911 [@expr1073749615 102 ] =@expr1073749616 "void f ( struct ABC * list ) {\nstruct ABC * last ; last = NULL ;\nnr = ( last = list . prev ) . nr ;\n}"
6677:
6678:
6679: ;
6680: $if $(@expr1073749617 $!@expr1073749618 $assertEquals $(@expr1073749619 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6680 $, expected@var911 $, $tokenizeAndStringify_ $(@expr1073749620 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6680 $, code@var910 , true $) $) $) { $return ; }
6681: }
6682:
6683: void simplifyKnownVariablesBailOutAssign3 ( ) {
6684: const char code@var912 [@expr1073749621 79 ] =@expr1073749622 "void f() {\n    int *p = 0;\n    a = p = (VdbeCursor*)pMem->z;\n    return p ;\n}\n"
6685:
6686:
6687:
6688: ;
6689: const char expected@var913 [@expr1073749623 63 ] =@expr1073749624 "void f ( ) {\nint * p ; p = 0 ;\na = p = pMem . z ;\nreturn p ;\n}"
6690:
6691:
6692:
6693: ;
6694: $if $(@expr1073749625 $!@expr1073749626 $assertEquals $(@expr1073749627 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6694 $, expected@var913 $, $tokenizeAndStringify_ $(@expr1073749628 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6694 $, code@var912 , true $) $) $) { $return ; }
6695: }
6696:
6697: void simplifyKnownVariablesBailOutFor1 ( ) {
6698: const char code@var914 [@expr1073749629 53 ] =@expr1073749630 "void foo() {\n    for (int i = 0; i < 10; ++i) { }\n}\n"
6699:
6700: ;
6701: const char expected@var915 [@expr1073749631 55 ] =@expr1073749632 "void foo ( ) {\nfor ( int i = 0 ; i < 10 ; ++ i ) { }\n}"
6702:
6703: ;
6704: $if $(@expr1073749633 $!@expr1073749634 $assertEquals $(@expr1073749635 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6704 $, expected@var915 $, $tokenizeAndStringify_ $(@expr1073749636 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6704 $, code@var914 , true $) $) $) { $return ; }
6705: $if $(@expr1073749637 $!@expr1073749638 $assertEquals $(@expr1073749639 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6705 $, "" $, errout@var100 .@expr1073749640 str (@expr1073749641 ) $) $) { $return ; }
6706: }
6707:
6708: void simplifyKnownVariablesBailOutFor2 ( ) {
6709: const char code@var916 [@expr1073749642 59 ] =@expr1073749643 "void foo() {\n    int i = 0;\n    while (i < 10) { ++i; }\n}\n"
6710:
6711:
6712: ;
6713: const char expected@var917 [@expr1073749644 61 ] =@expr1073749645 "void foo ( ) {\nint i ; i = 0 ;\nwhile ( i < 10 ) { ++ i ; }\n}"
6714:
6715:
6716: ;
6717: $if $(@expr1073749646 $!@expr1073749647 $assertEquals $(@expr1073749648 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6717 $, expected@var917 $, $tokenizeAndStringify_ $(@expr1073749649 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6717 $, code@var916 , true $) $) $) { $return ; }
6718: $if $(@expr1073749650 $!@expr1073749651 $assertEquals $(@expr1073749652 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6718 $, "" $, errout@var100 .@expr1073749653 str (@expr1073749654 ) $) $) { $return ; }
6719: }
6720:
6721: void simplifyKnownVariablesBailOutFor3 ( ) {
6722: const char code@var918 [@expr1073749655 82 ] =@expr1073749656 "void foo() {\n    for (std::string::size_type pos = 0; pos < 10; ++pos)\n    { }\n}\n"
6723:
6724:
6725: ;
6726: const char expected@var919 [@expr1073749657 84 ] =@expr1073749658 "void foo ( ) {\nfor ( std :: string :: size_type pos = 0 ; pos < 10 ; ++ pos )\n{ }\n}"
6727:
6728:
6729: ;
6730: $if $(@expr1073749659 $!@expr1073749660 $assertEquals $(@expr1073749661 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6730 $, expected@var919 $, $tokenizeAndStringify_ $(@expr1073749662 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6730 $, code@var918 , true $) $) $) { $return ; }
6731: $if $(@expr1073749663 $!@expr1073749664 $assertEquals $(@expr1073749665 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6731 $, "" $, errout@var100 .@expr1073749666 str (@expr1073749667 ) $) $) { $return ; }
6732: }
6733:
6734: void simplifyKnownVariablesBailOutMemberFunction ( ) {
6735: const char code@var920 [@expr1073749668 47 ] =@expr1073749669 "void foo(obj a) {\n    obj b = a;\n    b.f();\n}\n"
6736:
6737:
6738: ;
6739: const char expected@var921 [@expr1073749670 51 ] =@expr1073749671 "void foo ( obj a ) {\nobj b ; b = a ;\nb . f ( ) ;\n}"
6740:
6741:
6742: ;
6743: $if $(@expr1073749672 $!@expr1073749673 $assertEquals $(@expr1073749674 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6743 $, expected@var921 $, $tokenizeAndStringify_ $(@expr1073749675 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6743 $, code@var920 , true $) $) $) { $return ; }
6744: }
6745:
6746: void simplifyKnownVariablesBailOutConditionalIncrement ( ) {
6747: const char code@var922 [@expr1073749676 74 ] =@expr1073749677 "int f() {\n    int a = 0;\n    if (x) {\n        ++a;\n    }\n    return a;\n}\n"
6748:
|
6752:
6753: ;
6754: $tokenizeAndStringify_ $(@expr1073749678 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6754 $, code@var922 , true $) ;
6755: $if $(@expr1073749679 $!@expr1073749680 $assertEquals $(@expr1073749681 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6755 $, "" $, errout@var100 .@expr1073749682 str (@expr1073749683 ) $) $) { $return ; }
6756: }
6757:
6758: void simplifyKnownVariablesBailOutSwitchBreak ( ) {
6759:
6760: const char code@var923 [@expr1073749684 226 ] =@expr1073749685 "int f(char *x) {\n    char *p;\n    char *q;\n\n    switch (x & 0x3)\n    {\n        case 1:\n            p = x;\n            x = p;\n            break;\n        case 2:\n            q = x;\n            x = q;\n            break;\n    }\n}\n"
6761:
|
6774:
6775: ;
6776:
6777: const char expected@var924 [@expr1073749686 139 ] =@expr1073749687 "int f ( char * x ) {\nchar * p ;\nchar * q ;\n\nswitch ( x & 0x3 )\n{\ncase 1 : ;\np = x ;\nx = p ;\nbreak ;\ncase 2 : ;\nq = x ;\nx = q ;\nbreak ;\n}\n}"
6778:
|
6791:
6792: ;
6793:
6794: $if $(@expr1073749688 $!@expr1073749689 $assertEquals $(@expr1073749690 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6794 $, expected@var924 $, $tokenizeAndStringify_ $(@expr1073749691 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6794 $, code@var923 , true $) $) $) { $return ; }
6795: }
6796:
6797: void simplifyKnownVariablesFloat ( ) {
6798:
6799: const char code@var925 [@expr1073749692 47 ] =@expr1073749693 "void f() {\n    float a = 40;\n    x(10 / a);\n}\n"
6800:
6801:
6802: ;
6803:
6804: const char expected@var926 [@expr1073749694 29 ] =@expr1073749695 "void f ( ) {\n\nx ( 0.25 ) ;\n}" ;
6805:
6806: $if $(@expr1073749696 $!@expr1073749697 $assertEquals $(@expr1073749698 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6806 $, expected@var926 $, $tokenizeAndStringify_ $(@expr1073749699 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6806 $, code@var925 , true $) $) $) { $return ; }
6807:
6808:
6809: const char code2@var927 [@expr1073749700 48 ] =@expr1073749701 "double f() {    double a = false;    return a;}"
6810:
6811:
6812: ;
6813: $if $(@expr1073749702 $!@expr1073749703 $assertEquals $(@expr1073749704 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6813 $, "double f ( ) { return 0.0 ; }" $, $tokenizeAndStringify_ $(@expr1073749705 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6813 $, code2@var927 , true $) $) $) { $return ; }
6814:
6815:
6816: const char code3@var928 [@expr1073749706 55 ] =@expr1073749707 "void f() {    double a = 1e+007;\n    std::cout << a;\n}"
6817:
6818:
6819: ;
6820: $if $(@expr1073749708 $!@expr1073749709 $assertEquals $(@expr1073749710 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6820 $, "void f ( ) {\nstd :: cout << 1e+007 ;\n}" $, $tokenizeAndStringify_ $(@expr1073749711 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6820 $, code3@var928 , true $) $) $) { $return ; }
6821:
6822: const char code4@var929 [@expr1073749712 50 ] =@expr1073749713 "void f() {    double a = 1;\n    std::cout << a;\n}"
6823:
6824:
6825: ;
6826: $if $(@expr1073749714 $!@expr1073749715 $assertEquals $(@expr1073749716 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6826 $, "void f ( ) {\nstd :: cout << 1.0 ;\n}" $, $tokenizeAndStringify_ $(@expr1073749717 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6826 $, code4@var929 , true $) $) $) { $return ; }
6827: }
6828:
6829: void simplifyKnownVariablesFunctionCalls ( ) {
6830: {
6831: const char code@var930 [@expr1073749718 51 ] =@expr1073749719 "void a(int x);void b() {    int x = 123;    a(x);}"
6832:
6833:
6834:
6835: ;
6836: const char expected@var931 [@expr1073749720 46 ] =@expr1073749721 "void a ( int x ) ; void b ( ) { a ( 123 ) ; }" ;
6837: $if $(@expr1073749722 $!@expr1073749723 $assertEquals $(@expr1073749724 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6837 $, expected@var931 $, $tokenizeAndStringify_ $(@expr1073749725 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6837 $, code@var930 , true $) $) $) { $return ; }
6838: }
6839:
6840: {
6841: const char code@var932 [@expr1073749726 52 ] =@expr1073749727 "void a(int &x);void b() {    int x = 123;    a(x);}"
6842:
6843:
6844:
6845: ;
6846: const char expected@var933 [@expr1073749728 64 ] =@expr1073749729 "void a ( int & x ) ; void b ( ) { int x ; x = 123 ; a ( x ) ; }" ;
6847: $if $(@expr1073749730 $!@expr1073749731 $assertEquals $(@expr1073749732 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6847 $, expected@var933 $, $tokenizeAndStringify_ $(@expr1073749733 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6847 $, code@var932 , true $) $) $) { $return ; }
6848: }
6849: }
6850:
6851: void simplifyKnownVariablesGlobalVars ( ) {
6852:
6853: const char code@var934 [@expr1073749734 66 ] =@expr1073749735 "static int x;void f() {    x = 123;    while (!x) { dostuff(); }}"
6854:
6855:
6856:
6857: ;
6858: $if $(@expr1073749736 $!@expr1073749737 $assertEquals $(@expr1073749738 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6858 $, "static int x ; void f ( ) { x = 123 ; while ( ! x ) { dostuff ( ) ; } }" $, $tokenizeAndStringify_ $(@expr1073749739 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6858 $, code@var934 , true $) $) $) { $return ; }
6859: }
6860:
6861: void simplifyKnownVariablesReturn ( ) {
6862: const char code@var935 [@expr1073749740 42 ] =@expr1073749741 "int a() {    int x = 123;    return (x);}"
6863:
6864:
6865: ;
6866: $if $(@expr1073749742 $!@expr1073749743 $assertEquals $(@expr1073749744 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6866 $, "int a ( ) { return 123 ; }" $, $tokenizeAndStringify_ $(@expr1073749745 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6866 $, code@var935 , true $) $) $) { $return ; }
6867: }
6868:
6869: void simplifyKnownVariablesPointerAliasFunctionCall ( ) {
6870: const char code@var936 [@expr1073749746 111 ] =@expr1073749747 "int main() {\n  char* data = new char[100];\n  char** dataPtr = &data;\n  printf(\"test\");\n  delete [] *dataPtr;\n}"
6871:
|
6874:
6875: ;
6876: const char exp@var937 [@expr1073749748 133 ] =@expr1073749749 "int main ( ) {\nchar * data ; data = new char [ 100 ] ;\nchar * * dataPtr ; dataPtr = & data ;\nprintf ( \"test\" ) ;\ndelete [ ] data ;\n}"
6877:
|
6880:
6881: ;
6882: $if $(@expr1073749750 $!@expr1073749751 $assertEquals $(@expr1073749752 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6882 $, exp@var937 $, $tokenizeAndStringify_ $(@expr1073749753 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6882 $, code@var936 , true $) $) $) { $return ; }
6883: }
6884:
6885: void simplifyKnownVariablesNamespace ( ) {
6886: {
6887: const char code@var938 [@expr1073749754 165 ] =@expr1073749755 "namespace N {\n    const int n = 0;\n    namespace M { const int m = 0; }\n}\nusing namespace N;\nint i(n);\nint j(M::m);\nusing namespace N::M;\nint k(m);\nint l(N::M::m);\n"
6888:
|
6895:
6896: ;
6897: const char exp@var939 [@expr1073749756 243 ] =@expr1073749757 "\n\n##file 0\n1: namespace N {\n2: const int n@1 = 0 ;\n3: namespace M { const int m@2 = 0 ; }\n4: }\n5: using namespace N ;\n6: int i ; i = n@1 ;\n7: int j ( M :: m@2 ) ;\n8: using namespace N :: M ;\n9: int k ; k = m@2 ;\n10: int l ( N :: M :: m@2 ) ;\n"
6898:
|
6906:
6907: ;
6908: $if $(@expr1073749758 $!@expr1073749759 $assertEquals $(@expr1073749760 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6908 $, exp@var939 $, $tokenizeDebugListing_ $(@expr1073749761 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6908 $, code@var938 $) $) $) { $return ; }
6909: }
6910: {
6911: const char code@var940 [@expr1073749762 230 ] =@expr1073749763 "using namespace X;\nnamespace N {\n    struct A {\n        static int i;\n        struct B {\n            double x;\n            void f();\n        };\n    };\n}\nnamespace N {\n    int A::i = 0;\n    void A::B::f() {\n        x = 0;\n    }\n}\n"
6912:
|
6925:
6926: ;
6927: const char exp@var941 [@expr1073749764 246 ] =@expr1073749765 "\n\n##file 0\n1: using namespace X ;\n2: namespace N {\n3: struct A {\n4: static int i@1 ;\n5: struct B {\n6: double x@2 ;\n7: void f ( ) ;\n8: } ;\n9: } ;\n10: }\n11: namespace N {\n12: int A :: i@1 = 0 ;\n13: void A :: B :: f ( ) {\n14: x@2 = 0 ;\n15: }\n16: }\n"
6928:
|
6942:
6943: ;
6944: $if $(@expr1073749766 $!@expr1073749767 $assertEquals $(@expr1073749768 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6944 $, exp@var941 $, $tokenizeDebugListing_ $(@expr1073749769 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6944 $, code@var940 $) $) $) { $return ; }
6945: }
6946: }
6947:
6948: void simplifyKnownVariablesClassMember ( ) {
6949:
6950: {
6951: const char code@var942 [@expr1073749771 81 ] =@expr1073749772 "char *a;\nvoid f(const char *s) {\n    a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"
6952:
|
6955:
6956: ;
6957:
6958: const std ::@expr1073749773 string s@var943 (@expr1073749774 $tokenizeAndStringify_ $(@expr1073749775 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6958 $, code@var942 , true $) ) ;
6959: $if $(@expr1073749776 $!@expr1073749777 $assertEquals $(@expr1073749778 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6959 $, true $, s@var943 .@expr1073749779 find (@expr1073749780 "memcpy ( a , s , 10 ) ;" ) !=@expr1073749781 std ::@expr7958 string ::@expr7959 npos@expr7946 $) $) { $return ; }
6960: }
6961:
6962:
6963: {
6964: const char code@var944 [@expr1073749784 78 ] =@expr1073749785 "void f(const char *s) {\n    char *a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"
6965:
6966:
6967:
6968: ;
6969:
6970: const std ::@expr1073749786 string s@var945 (@expr1073749787 $tokenizeAndStringify_ $(@expr1073749788 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6970 $, code@var944 , true $) ) ;
6971: $todoAssertEquals $(@expr1073749789 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6971 $, true $, false $, s@var945 .@expr1073749790 find (@expr1073749791 "memcpy ( 0 , s , 10 ) ;" ) !=@expr1073749792 std ::@expr7958 string ::@expr7959 npos@expr7946 $) ;
6972: }
6973: }
6974:
6975:
6976:
6977: void simplifyCasts1 ( ) {
6978: const char code@var946 [@expr1073749795 15 ] =@expr1073749796 "int *f(int *);" ;
6979: $if $(@expr1073749797 $!@expr1073749798 $assertEquals $(@expr1073749799 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6979 $, "int * f ( int * ) ;" $, $tok_ $(@expr1073749800 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6979 $, code@var946 $) $) $) { $return ; }
6980: }
6981:
6982:
6983: void simplifyCasts2 ( ) {
6984: const char code@var947 [@expr1073749801 44 ] =@expr1073749802 "t = (static_cast<std::vector<int> *>(&p));\n" ;
6985: $if $(@expr1073749803 $!@expr1073749804 $assertEquals $(@expr1073749805 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6985 $, "t = & p ;" $, $tok_ $(@expr1073749806 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6985 $, code@var947 $) $) $) { $return ; }
6986: }
6987:
6988: void simplifyCasts3 ( ) {
6989:
6990: const char code@var948 [@expr1073749807 51 ] =@expr1073749808 "assert (iplen >= (unsigned) ipv4->ip_hl * 4 + 20);" ;
6991: const char expected@var949 [@expr1073749809 44 ] =@expr1073749810 "assert ( iplen >= ipv4 . ip_hl * 4 + 20 ) ;" ;
6992: $if $(@expr1073749811 $!@expr1073749812 $assertEquals $(@expr1073749813 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6992 $, expected@var949 $, $tok_ $(@expr1073749814 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6992 $, code@var948 $) $) $) { $return ; }
6993: }
6994:
6995: void simplifyCasts4 ( ) {
6996:
6997: const char code@var950 [@expr1073749815 29 ] =@expr1073749816 "{if (a >= (unsigned)(b)) {}}" ;
6998: const char expected@var951 [@expr1073749817 34 ] =@expr1073749818 "{ if ( a >= ( int ) ( b ) ) { } }" ;
6999: $if $(@expr1073749819 $!@expr1073749820 $assertEquals $(@expr1073749821 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6999 $, expected@var951 $, $tok_ $(@expr1073749822 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 6999 $, code@var950 $) $) $) { $return ; }
7000: }
7001:
7002: void simplifyCasts5 ( ) {
7003:
7004: $if $(@expr1073749823 $!@expr1073749824 $assertEquals $(@expr1073749825 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7004 $, "a . data = f ;" $, $tok_ $(@expr1073749826 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7004 $, "a->data = reinterpret_cast<void*>(static_cast<intptr_t>(f));" $) $) $) { $return ; }
7005: }
7006:
7007: void simplifyCasts7 ( ) {
7008: $if $(@expr1073749827 $!@expr1073749828 $assertEquals $(@expr1073749829 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7008 $, "str = malloc ( 3 )" $, $tok_ $(@expr1073749830 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7008 $, "str=(char **)malloc(3)" $) $) $) { $return ; }
7009: }
7010:
7011: void simplifyCasts8 ( ) {
7012: $if $(@expr1073749831 $!@expr1073749832 $assertEquals $(@expr1073749833 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7012 $, "ptr1 = ptr2" $, $tok_ $(@expr1073749834 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7012 $, "ptr1=(int *   **)ptr2" $) $) $) { $return ; }
7013: }
7014:
7015: void simplifyCasts9 ( ) {
7016: $if $(@expr1073749835 $!@expr1073749836 $assertEquals $(@expr1073749837 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7016 $, "f ( ( double ) ( v1 ) * v2 )" $, $tok_ $(@expr1073749838 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7016 $, "f((double)(v1)*v2)" $) $) $) { $return ; }
7017: $if $(@expr1073749839 $!@expr1073749840 $assertEquals $(@expr1073749841 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7017 $, "int v1 ; f ( ( double ) ( v1 ) * v2 )" $, $tok_ $(@expr1073749842 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7017 $, "int v1; f((double)(v1)*v2)" $) $) $) { $return ; }
7018: $if $(@expr1073749843 $!@expr1073749844 $assertEquals $(@expr1073749845 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7018 $, "f ( ( A ) ( B ) & x )" $, $tok_ $(@expr1073749846 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7018 $, "f((A)(B)&x)" $) $) $) { $return ; }
7019: }
7020:
7021: void simplifyCasts10 ( ) {
7022: $if $(@expr1073749847 $!@expr1073749848 $assertEquals $(@expr1073749849 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7022 $, "; ( * f ) ( p ) ;" $, $tok_ $(@expr1073749850 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7022 $, "; (*(void (*)(char *))f)(p);" $) $) $) { $return ; }
7023: }
7024:
7025: void simplifyCasts11 ( ) {
7026: $if $(@expr1073749851 $!@expr1073749852 $assertEquals $(@expr1073749853 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7026 $, "; x = 0 ;" $, $tok_ $(@expr1073749854 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7026 $, "; *(int *)&x = 0;" $) $) $) { $return ; }
7027: }
7028:
7029: void simplifyCasts12 ( ) {
7030:
7031: $if $(@expr1073749855 $!@expr1073749856 $assertEquals $(@expr1073749857 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7031 $, "; ( ( short * ) data ) [ 5 ] = 0 ;" $, $tokenizeAndStringify_ $(@expr1073749858 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7031 $, "; ((short*)data)[5] = 0;" , true $) $) $) { $return ; }
7032: }
7033:
7034: void simplifyCasts13 ( ) {
7035:
7036: $if $(@expr1073749859 $!@expr1073749860 $assertEquals $(@expr1073749861 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7036 $, "; int x ; x = * y ;" $, $tok_ $(@expr1073749862 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7036 $, ";int x=(int)*y;" $) $) $) { $return ; }
7037: $if $(@expr1073749863 $!@expr1073749864 $assertEquals $(@expr1073749865 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7037 $, "; int x ; x = & y ;" $, $tok_ $(@expr1073749866 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7037 $, ";int x=(int)&y;" $) $) $) { $return ; }
7038: $todoAssertEquals $(@expr1073749867 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7038 $, "; int x ; x = ( INT ) * y ;" $, "; int x ; x = * y ;" $, $tok_ $(@expr1073749868 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7038 $, ";int x=(INT)*y;" $) $)
7039:
7040: ;
7041: $todoAssertEquals $(@expr1073749869 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7041 $, "; int x ; x = ( INT ) & y ;" $, "; int x ; x = & y ;" $, $tok_ $(@expr1073749870 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7041 $, ";int x=(INT)&y;" $) $)
7042:
7043: ;
7044:
7045:
7046: $if $(@expr1073749871 $!@expr1073749872 $assertEquals $(@expr1073749873 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7046 $, "; float angle ; angle = tilt ;" $, $tok_ $(@expr1073749874 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7046 $, "; float angle = (float) tilt;" $) $) $) { $return ; }
7047: $if $(@expr1073749875 $!@expr1073749876 $assertEquals $(@expr1073749877 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7047 $, "; float angle ; angle = ( float ) - tilt ;" $, $tok_ $(@expr1073749878 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7047 $, "; float angle = (float) -tilt;" $) $) $) { $return ; }
7048: $if $(@expr1073749879 $!@expr1073749880 $assertEquals $(@expr1073749881 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7048 $, "; float angle ; angle = ( float ) + tilt ;" $, $tok_ $(@expr1073749882 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7048 $, "; float angle = (float) +tilt;" $) $) $) { $return ; }
7049: $if $(@expr1073749883 $!@expr1073749884 $assertEquals $(@expr1073749885 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7049 $, "; int a ; a = ( int ) ~ c ;" $, $tok_ $(@expr1073749886 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7049 $, "; int a = (int)~c;" $) $) $) { $return ; }
7050: }
7051:
7052: void simplifyCasts14 ( ) {
7053:
7054: $if $(@expr1073749887 $!@expr1073749888 $assertEquals $(@expr1073749889 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7054 $, "( ! ( & s ) . a ) ;" $, $tok_ $(@expr1073749890 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7054 $, "(! ( (struct S const *) &s)->a);" $) $) $) { $return ; }
7055:
7056: $if $(@expr1073749891 $!@expr1073749892 $assertEquals $(@expr1073749893 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7056 $, "bar ( & ptr ) ;" $, $tok_ $(@expr1073749894 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7056 $, "bar((const X**)&ptr);" $) $) $) { $return ; }
7057: }
7058:
7059: void simplifyCasts15 ( ) {
7060: $if $(@expr1073749895 $!@expr1073749896 $assertEquals $(@expr1073749897 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7060 $, "a + ( b ? 60 : 0 ) ;" $, $tok_ $(@expr1073749898 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7060 $, "a + static_cast<int>(b ? 60 : 0);" $) $) $) { $return
7061: ; }
7062: }
7063:
7064: void simplifyCasts16 ( ) {
7065: $if $(@expr1073749899 $!@expr1073749900 $assertEquals $(@expr1073749901 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7065 $, "Get ( pArray ) ;" $, $tok_ $(@expr1073749902 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7065 $, "Get((CObject*&)pArray);" $) $) $) { $return
7066: ; }
7067: }
7068:
7069: void simplifyCasts17 ( ) {
7070: $if $(@expr1073749903 $!@expr1073749904 $assertEquals $(@expr1073749905 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7070 $, "{ if ( a ( b ) ( c ) >= 3 ) { } }" $, $tok_ $(@expr1073749906 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7070 $, "{ if (a(b)(c) >= 3) { } }" $) $) $) { $return
7071: ; }
7072: }
7073:
7074:
7075: void removeRedundantAssignment ( ) {
7076: $if $(@expr1073749907 $!@expr1073749908 $assertEquals $(@expr1073749909 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7076 $, "void f ( ) { }" $, $tok_ $(@expr1073749910 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7076 $, "void f() { int *p, *q; p = q; }" $) $) $) { $return ; }
7077: $if $(@expr1073749911 $!@expr1073749912 $assertEquals $(@expr1073749913 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7077 $, "void f ( ) { }" $, $tok_ $(@expr1073749914 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7077 $, "void f() { int *p = 0, *q; p = q; }" $) $) $) { $return ; }
7078: $if $(@expr1073749915 $!@expr1073749916 $assertEquals $(@expr1073749917 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7078 $, "int f ( int * x ) { return * x ; }" $, $tok_ $(@expr1073749918 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7078 $, "int f(int *x) { return *x; }" $) $) $) { $return ; }
7079: }
7080:
7081: void simplify_constants ( ) {
7082: const char code@var952 [@expr1073749919 78 ] =@expr1073749920
7083: "void f() {\nconst int a = 45;\nif( a )\n{ int b = a; }\n}\nvoid g() {\nint a = 2;\n}"
7084:
|
7089:
7090: ;
7091: $if $(@expr1073749921 $!@expr1073749922 $assertEquals $(@expr1073749923 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7091 $, "void f ( ) { } void g ( ) { }" $, $tok_ $(@expr1073749924 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7091 $, code@var952 $) $) $) { $return ; }
7092: }
7093:
7094: void simplify_constants2 ( ) {
7095: const char code@var953 [@expr1073749925 74 ] =@expr1073749926
7096: "void f( Foo &foo, Foo *foo2 ) {\nconst int a = 45;\nfoo.a=a+a;\nfoo2->a=a;\n}"
7097:
7098:
7099:
7100: ;
7101: $if $(@expr1073749927 $!@expr1073749928 $assertEquals $(@expr1073749929 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7101 $, "void f ( Foo & foo , Foo * foo2 ) { foo . a = 90 ; foo2 . a = 45 ; }" $, $tok_ $(@expr1073749930 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7101 $, code@var953 $) $) $) { $return ; }
7102: }
7103:
7104: void simplify_constants3 ( ) {
7105: const char code@var954 [@expr1073749931 100 ] =@expr1073749932
7106: "static const char str[] = \"abcd\";\nstatic const unsigned int SZ = sizeof(str);\nvoid f() {\na = SZ;\n}\n"
7107:
7108:
7109:
7110: ;
7111: const char expected@var955 [@expr1073749933 62 ] =@expr1073749934
7112: "static const char str [ 5 ] = \"abcd\" ; void f ( ) { a = 5 ; }" ;
7113: $if $(@expr1073749935 $!@expr1073749936 $assertEquals $(@expr1073749937 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7113 $, expected@var955 $, $tok_ $(@expr1073749938 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7113 $, code@var954 $) $) $) { $return ; }
7114: }
7115:
7116: void simplify_constants4 ( ) {
7117: const char code@var956 [@expr1073749939 80 ] =@expr1073749940 "static const int bSize = 4;\nstatic const int aSize = 50;\nx = bSize;\ny = aSize;\n"
7118:
7119:
7120: ;
7121: $if $(@expr1073749941 $!@expr1073749942 $assertEquals $(@expr1073749943 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7121 $, "x = 4 ; y = 50 ;" $, $tok_ $(@expr1073749944 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7121 $, code@var956 $) $) $) { $return ; }
7122: }
7123:
7124: void simplify_constants5 ( ) {
7125: const char code@var957 [@expr1073749945 150 ] =@expr1073749946 "int buffer[10];\nstatic const int NELEMS = sizeof(buffer)/sizeof(int);\nstatic const int NELEMS2(sizeof(buffer)/sizeof(int));\nx = NELEMS;\ny = NELEMS2;\n"
7126:
7127:
7128:
7129: ;
7130: $if $(@expr1073749947 $!@expr1073749948 $assertEquals $(@expr1073749949 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7130 $, "int buffer [ 10 ] ; x = 10 ; y = 10 ;" $, $tok_ $(@expr1073749950 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7130 $, code@var957 $) $) $) { $return ; }
7131: }
7132:
7133: void simplify_constants6 ( ) {
7134: {
7135: const char code@var958 [@expr1073749951 103 ] =@expr1073749952 "template < class T > struct foo ;\nvoid bar ( ) {\nfoo < 1 ? 0 ? 1 : 6 : 2 > x ;\nfoo < 1 ? 0 : 2 > y ;\n}"
7136:
7137:
7138:
7139: ;
7140: const char exp@var959 [@expr1073749953 79 ] =@expr1073749954 "template < class T > struct foo ; void bar ( ) { foo < 6 > x ; foo < 0 > y ; }"
7141:
7142:
7143:
7144: ;
7145: $if $(@expr1073749955 $!@expr1073749956 $assertEquals $(@expr1073749957 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7145 $, exp@var959 $, $tok_ $(@expr1073749958 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7145 $, code@var958 $) $) $) { $return ; }
7146: }
7147: {
7148: const char code@var960 [@expr1073749959 32 ] =@expr1073749960 "bool b = true ? false : 1 > 2 ;" ;
7149: const char exp@var961 [@expr1073749961 21 ] =@expr1073749962 "bool b ; b = false ;" ;
7150: $if $(@expr1073749963 $!@expr1073749964 $assertEquals $(@expr1073749965 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7150 $, exp@var961 $, $tok_ $(@expr1073749966 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7150 $, code@var960 $) $) $) { $return ; }
7151: }
7152: }
7153:
7154: void simplifyVarDeclInitLists ( )
7155: {
7156: const char code@var962 [@expr1073749967 30 ] =@expr1073749968 "std::vector<int> v{a * b, 1};" ;
7157: const char exp@var963 [@expr1073749969 40 ] =@expr1073749970 "std :: vector < int > v { a * b , 1 } ;" ;
7158: $if $(@expr1073749971 $!@expr1073749972 $assertEquals $(@expr1073749973 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7158 $, exp@var963 $, $tok_ $(@expr1073749974 "cppcheck-2.8/test/testsimplifytokens.cpp" $, 7158 $, code@var962 $) $) $) { $return ; }
7159: }
7160: } ;
7161:
7162: $namespace ${ TestSimplifyTokens instance_TestSimplifyTokens@var964 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@193}
  v {!<=-1,!>=2,0@193}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 33
  "TestSimplifyTokens" always "TestSimplifyTokens"
Line 43
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 44
  ( {lifetime[Object]=(exename),!0}
  "windows.cfg" always "windows.cfg"
  != always {!<=-1,!>=2}
  "windows.cfg" always "windows.cfg"
  false always 0
Line 50
  = always 1
  true always 1
Line 51
  = always 1
  true always 1
Line 52
  = always 1
  true always 1
Line 53
  = always 1
  true always 1
Line 59
  ( always {!<=-1,!>=2}
  "simplifyTokenList1" always "simplifyTokenList1"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "test1" always "test1"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_sqrt" always "simplifyMathFunctions_sqrt"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_cbrt" always "simplifyMathFunctions_cbrt"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_exp" always "simplifyMathFunctions_exp"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_exp2" always "simplifyMathFunctions_exp2"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_logb" always "simplifyMathFunctions_logb"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_log1p" always "simplifyMathFunctions_log1p"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_ilogb" always "simplifyMathFunctions_ilogb"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_log10" always "simplifyMathFunctions_log10"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_log" always "simplifyMathFunctions_log"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_log2" always "simplifyMathFunctions_log2"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_pow" always "simplifyMathFunctions_pow"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_fmin" always "simplifyMathFunctions_fmin"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_fmax" always "simplifyMathFunctions_fmax"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_acosh" always "simplifyMathFunctions_acosh"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_acos" always "simplifyMathFunctions_acos"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_cosh" always "simplifyMathFunctions_cosh"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_cos" always "simplifyMathFunctions_cos"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_erfc" always "simplifyMathFunctions_erfc"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_erf" always "simplifyMathFunctions_erf"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_sin" always "simplifyMathFunctions_sin"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_sinh" always "simplifyMathFunctions_sinh"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_asin" always "simplifyMathFunctions_asin"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_asinh" always "simplifyMathFunctions_asinh"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_tan" always "simplifyMathFunctions_tan"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_tanh" always "simplifyMathFunctions_tanh"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_atan" always "simplifyMathFunctions_atan"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_atanh" always "simplifyMathFunctions_atanh"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "simplifyMathFunctions_expm1" always "simplifyMathFunctions_expm1"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "simplifyMathExpressions" always "simplifyMathExpressions"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "simplifyAssignmentInFunctionCall" always "simplifyAssignmentInFunctionCall"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "simplifyCompoundAssignment" always "simplifyCompoundAssignment"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "cast" always "cast"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "iftruefalse" always "iftruefalse"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "combine_strings" always "combine_strings"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "combine_wstrings" always "combine_wstrings"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "combine_ustrings" always "combine_ustrings"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "combine_Ustrings" always "combine_Ustrings"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "combine_u8strings" always "combine_u8strings"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "combine_mixedstrings" always "combine_mixedstrings"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "double_plus" always "double_plus"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "redundant_plus" always "redundant_plus"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "redundant_plus_numbers" always "redundant_plus_numbers"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "parentheses1" always "parentheses1"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "parenthesesVar" always "parenthesesVar"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "declareVar" always "declareVar"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "declareArray" always "declareArray"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "dontRemoveIncrement" always "dontRemoveIncrement"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "removePostIncrement" always "removePostIncrement"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "removePreIncrement" always "removePreIncrement"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "elseif1" always "elseif1"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "sizeof_array" always "sizeof_array"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "sizeof5" always "sizeof5"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "sizeof6" always "sizeof6"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "sizeof7" always "sizeof7"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "sizeof8" always "sizeof8"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "sizeof9" always "sizeof9"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "sizeof10" always "sizeof10"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "sizeof11" always "sizeof11"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "sizeof12" always "sizeof12"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "sizeof13" always "sizeof13"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "sizeof14" always "sizeof14"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "sizeof15" always "sizeof15"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "sizeof16" always "sizeof16"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "sizeof17" always "sizeof17"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "sizeof18" always "sizeof18"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "sizeof19" always "sizeof19"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "sizeof20" always "sizeof20"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "sizeof21" always "sizeof21"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "sizeof22" always "sizeof22"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "sizeofsizeof" always "sizeofsizeof"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "casting" always "casting"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "strlen1" always "strlen1"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "strlen2" always "strlen2"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "namespaces" always "namespaces"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "ifassign1" always "ifassign1"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "ifAssignWithCast" always "ifAssignWithCast"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "whileAssign1" always "whileAssign1"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "whileAssign2" always "whileAssign2"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "whileAssign3" always "whileAssign3"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "whileAssign4" always "whileAssign4"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "doWhileAssign" always "doWhileAssign"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "test_4881" always "test_4881"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "not1" always "not1"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "and1" always "and1"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "or1" always "or1"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "cAlternativeTokens" always "cAlternativeTokens"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "comma_keyword" always "comma_keyword"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "remove_comma" always "remove_comma"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "simplifyConditionOperator" always "simplifyConditionOperator"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "calculations" always "calculations"
  false always 0
  false always 0
Line 180
  ( always {!<=-1,!>=2}
  "comparisons" always "comparisons"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "simplifyCalculations" always "simplifyCalculations"
  false always 0
  false always 0
Line 184
  ( always {!<=-1,!>=2}
  "simplifyFlowControl" always "simplifyFlowControl"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "flowControl" always "flowControl"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "strcat1" always "strcat1"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "strcat2" always "strcat2"
  false always 0
  false always 0
Line 191
  ( always {!<=-1,!>=2}
  "simplifyAtol" always "simplifyAtol"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "simplifyOperator1" always "simplifyOperator1"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "simplifyOperator2" always "simplifyOperator2"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "simplifyArrayAccessSyntax" always "simplifyArrayAccessSyntax"
  false always 0
  false always 0
Line 197
  ( always {!<=-1,!>=2}
  "simplify_numeric_condition" always "simplify_numeric_condition"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "simplify_condition" always "simplify_condition"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "pointeralias1" always "pointeralias1"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "pointeralias2" always "pointeralias2"
  false always 0
  false always 0
Line 202
  ( always {!<=-1,!>=2}
  "pointeralias3" always "pointeralias3"
  false always 0
  false always 0
Line 203
  ( always {!<=-1,!>=2}
  "pointeralias4" always "pointeralias4"
  false always 0
  false always 0
Line 206
  ( always {!<=-1,!>=2}
  "while0" always "while0"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "while0for" always "while0for"
  false always 0
  false always 0
Line 211
  ( always {!<=-1,!>=2}
  "removestd" always "removestd"
  false always 0
  false always 0
Line 214
  ( always {!<=-1,!>=2}
  "simplifyInitVar" always "simplifyInitVar"
  false always 0
  false always 0
Line 217
  ( always {!<=-1,!>=2}
  "simplifyReference" always "simplifyReference"
  false always 0
  false always 0
Line 220
  ( always {!<=-1,!>=2}
  "simplifyRealloc" always "simplifyRealloc"
  false always 0
  false always 0
Line 223
  ( always {!<=-1,!>=2}
  "simplifyErrNoInWhile" always "simplifyErrNoInWhile"
  false always 0
  false always 0
Line 226
  ( always {!<=-1,!>=2}
  "simplifyFuncInWhile" always "simplifyFuncInWhile"
  false always 0
  false always 0
Line 229
  ( always {!<=-1,!>=2}
  "simplifyStructDecl1" always "simplifyStructDecl1"
  false always 0
  false always 0
Line 230
  ( always {!<=-1,!>=2}
  "simplifyStructDecl2" always "simplifyStructDecl2"
  false always 0
  false always 0
Line 231
  ( always {!<=-1,!>=2}
  "simplifyStructDecl3" always "simplifyStructDecl3"
  false always 0
  false always 0
Line 232
  ( always {!<=-1,!>=2}
  "simplifyStructDecl4" always "simplifyStructDecl4"
  false always 0
  false always 0
Line 233
  ( always {!<=-1,!>=2}
  "simplifyStructDecl6" always "simplifyStructDecl6"
  false always 0
  false always 0
Line 234
  ( always {!<=-1,!>=2}
  "simplifyStructDecl7" always "simplifyStructDecl7"
  false always 0
  false always 0
Line 235
  ( always {!<=-1,!>=2}
  "simplifyStructDecl8" always "simplifyStructDecl8"
  false always 0
  false always 0
Line 239
  ( always {!<=-1,!>=2}
  "removeUnwantedKeywords" always "removeUnwantedKeywords"
  false always 0
  false always 0
Line 242
  ( always {!<=-1,!>=2}
  "simplifyCallingConvention" always "simplifyCallingConvention"
  false always 0
  false always 0
Line 245
  ( always {!<=-1,!>=2}
  "simplifyAttribute" always "simplifyAttribute"
  false always 0
  false always 0
Line 247
  ( always {!<=-1,!>=2}
  "simplifyFunctorCall" always "simplifyFunctorCall"
  false always 0
  false always 0
Line 249
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointer" always "simplifyFunctionPointer"
  false always 0
  false always 0
Line 251
  ( always {!<=-1,!>=2}
  "redundant_semicolon" always "redundant_semicolon"
  false always 0
  false always 0
Line 253
  ( always {!<=-1,!>=2}
  "simplifyFunctionReturn" always "simplifyFunctionReturn"
  false always 0
  false always 0
Line 255
  ( always {!<=-1,!>=2}
  "return_strncat" always "return_strncat"
  false always 0
  false always 0
Line 260
  ( always {!<=-1,!>=2}
  "removeRedundantFor" always "removeRedundantFor"
  false always 0
  false always 0
Line 262
  ( always {!<=-1,!>=2}
  "consecutiveBraces" always "consecutiveBraces"
  false always 0
  false always 0
Line 264
  ( always {!<=-1,!>=2}
  "undefinedSizeArray" always "undefinedSizeArray"
  false always 0
  false always 0
Line 266
  ( always {!<=-1,!>=2}
  "simplifyArrayAddress" always "simplifyArrayAddress"
  false always 0
  false always 0
Line 267
  ( always {!<=-1,!>=2}
  "simplifyCharAt" always "simplifyCharAt"
  false always 0
  false always 0
Line 268
  ( always {!<=-1,!>=2}
  "simplifyOverride" always "simplifyOverride"
  false always 0
  false always 0
Line 269
  ( always {!<=-1,!>=2}
  "simplifyNestedNamespace" always "simplifyNestedNamespace"
  false always 0
  false always 0
Line 270
  ( always {!<=-1,!>=2}
  "simplifyNamespaceAliases1" always "simplifyNamespaceAliases1"
  false always 0
  false always 0
Line 271
  ( always {!<=-1,!>=2}
  "simplifyNamespaceAliases2" always "simplifyNamespaceAliases2"
  false always 0
  false always 0
Line 273
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables1" always "simplifyKnownVariables1"
  false always 0
  false always 0
Line 274
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables2" always "simplifyKnownVariables2"
  false always 0
  false always 0
Line 275
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables3" always "simplifyKnownVariables3"
  false always 0
  false always 0
Line 276
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables4" always "simplifyKnownVariables4"
  false always 0
  false always 0
Line 277
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables5" always "simplifyKnownVariables5"
  false always 0
  false always 0
Line 278
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables6" always "simplifyKnownVariables6"
  false always 0
  false always 0
Line 279
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables7" always "simplifyKnownVariables7"
  false always 0
  false always 0
Line 280
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables8" always "simplifyKnownVariables8"
  false always 0
  false always 0
Line 281
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables9" always "simplifyKnownVariables9"
  false always 0
  false always 0
Line 282
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables10" always "simplifyKnownVariables10"
  false always 0
  false always 0
Line 283
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables11" always "simplifyKnownVariables11"
  false always 0
  false always 0
Line 284
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables13" always "simplifyKnownVariables13"
  false always 0
  false always 0
Line 285
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables14" always "simplifyKnownVariables14"
  false always 0
  false always 0
Line 286
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables15" always "simplifyKnownVariables15"
  false always 0
  false always 0
Line 287
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables16" always "simplifyKnownVariables16"
  false always 0
  false always 0
Line 288
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables17" always "simplifyKnownVariables17"
  false always 0
  false always 0
Line 289
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables18" always "simplifyKnownVariables18"
  false always 0
  false always 0
Line 290
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables19" always "simplifyKnownVariables19"
  false always 0
  false always 0
Line 291
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables20" always "simplifyKnownVariables20"
  false always 0
  false always 0
Line 292
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables21" always "simplifyKnownVariables21"
  false always 0
  false always 0
Line 293
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables22" always "simplifyKnownVariables22"
  false always 0
  false always 0
Line 294
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables23" always "simplifyKnownVariables23"
  false always 0
  false always 0
Line 295
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables25" always "simplifyKnownVariables25"
  false always 0
  false always 0
Line 296
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables27" always "simplifyKnownVariables27"
  false always 0
  false always 0
Line 297
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables28" always "simplifyKnownVariables28"
  false always 0
  false always 0
Line 298
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables29" always "simplifyKnownVariables29"
  false always 0
  false always 0
Line 299
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables30" always "simplifyKnownVariables30"
  false always 0
  false always 0
Line 300
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables31" always "simplifyKnownVariables31"
  false always 0
  false always 0
Line 301
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables32" always "simplifyKnownVariables32"
  false always 0
  false always 0
Line 302
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables33" always "simplifyKnownVariables33"
  false always 0
  false always 0
Line 303
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables34" always "simplifyKnownVariables34"
  false always 0
  false always 0
Line 304
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables35" always "simplifyKnownVariables35"
  false always 0
  false always 0
Line 305
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables36" always "simplifyKnownVariables36"
  false always 0
  false always 0
Line 306
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables37" always "simplifyKnownVariables37"
  false always 0
  false always 0
Line 307
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables38" always "simplifyKnownVariables38"
  false always 0
  false always 0
Line 308
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables39" always "simplifyKnownVariables39"
  false always 0
  false always 0
Line 309
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables40" always "simplifyKnownVariables40"
  false always 0
  false always 0
Line 310
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables41" always "simplifyKnownVariables41"
  false always 0
  false always 0
Line 311
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables42" always "simplifyKnownVariables42"
  false always 0
  false always 0
Line 312
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables43" always "simplifyKnownVariables43"
  false always 0
  false always 0
Line 313
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables44" always "simplifyKnownVariables44"
  false always 0
  false always 0
Line 314
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables45" always "simplifyKnownVariables45"
  false always 0
  false always 0
Line 315
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables46" always "simplifyKnownVariables46"
  false always 0
  false always 0
Line 316
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables47" always "simplifyKnownVariables47"
  false always 0
  false always 0
Line 317
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables48" always "simplifyKnownVariables48"
  false always 0
  false always 0
Line 318
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables49" always "simplifyKnownVariables49"
  false always 0
  false always 0
Line 319
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables50" always "simplifyKnownVariables50"
  false always 0
  false always 0
Line 320
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables51" always "simplifyKnownVariables51"
  false always 0
  false always 0
Line 321
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables52" always "simplifyKnownVariables52"
  false always 0
  false always 0
Line 322
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables53" always "simplifyKnownVariables53"
  false always 0
  false always 0
Line 323
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables54" always "simplifyKnownVariables54"
  false always 0
  false always 0
Line 324
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables55" always "simplifyKnownVariables55"
  false always 0
  false always 0
Line 325
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables56" always "simplifyKnownVariables56"
  false always 0
  false always 0
Line 326
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables57" always "simplifyKnownVariables57"
  false always 0
  false always 0
Line 327
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables58" always "simplifyKnownVariables58"
  false always 0
  false always 0
Line 328
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables59" always "simplifyKnownVariables59"
  false always 0
  false always 0
Line 329
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables60" always "simplifyKnownVariables60"
  false always 0
  false always 0
Line 330
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables61" always "simplifyKnownVariables61"
  false always 0
  false always 0
Line 331
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables62" always "simplifyKnownVariables62"
  false always 0
  false always 0
Line 332
  ( always {!<=-1,!>=2}
  "simplifyKnownVariables63" always "simplifyKnownVariables63"
  false always 0
  false always 0
Line 333
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesBailOutAssign1" always "simplifyKnownVariablesBailOutAssign1"
  false always 0
  false always 0
Line 334
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesBailOutAssign2" always "simplifyKnownVariablesBailOutAssign2"
  false always 0
  false always 0
Line 335
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesBailOutAssign3" always "simplifyKnownVariablesBailOutAssign3"
  false always 0
  false always 0
Line 336
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesBailOutFor1" always "simplifyKnownVariablesBailOutFor1"
  false always 0
  false always 0
Line 337
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesBailOutFor2" always "simplifyKnownVariablesBailOutFor2"
  false always 0
  false always 0
Line 338
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesBailOutFor3" always "simplifyKnownVariablesBailOutFor3"
  false always 0
  false always 0
Line 339
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesBailOutMemberFunction" always "simplifyKnownVariablesBailOutMemberFunction"
  false always 0
  false always 0
Line 340
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesBailOutConditionalIncrement" always "simplifyKnownVariablesBailOutConditionalIncrement"
  false always 0
  false always 0
Line 341
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesBailOutSwitchBreak" always "simplifyKnownVariablesBailOutSwitchBreak"
  false always 0
  false always 0
Line 342
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesFloat" always "simplifyKnownVariablesFloat"
  false always 0
  false always 0
Line 343
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesClassMember" always "simplifyKnownVariablesClassMember"
  false always 0
  false always 0
Line 344
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesFunctionCalls" always "simplifyKnownVariablesFunctionCalls"
  false always 0
  false always 0
Line 345
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesGlobalVars" always "simplifyKnownVariablesGlobalVars"
  false always 0
  false always 0
Line 346
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesReturn" always "simplifyKnownVariablesReturn"
  false always 0
  false always 0
Line 347
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesPointerAliasFunctionCall" always "simplifyKnownVariablesPointerAliasFunctionCall"
  false always 0
  false always 0
Line 348
  ( always {!<=-1,!>=2}
  "simplifyKnownVariablesNamespace" always "simplifyKnownVariablesNamespace"
  false always 0
  false always 0
Line 350
  ( always {!<=-1,!>=2}
  "simplifyCasts1" always "simplifyCasts1"
  false always 0
  false always 0
Line 351
  ( always {!<=-1,!>=2}
  "simplifyCasts2" always "simplifyCasts2"
  false always 0
  false always 0
Line 352
  ( always {!<=-1,!>=2}
  "simplifyCasts3" always "simplifyCasts3"
  false always 0
  false always 0
Line 353
  ( always {!<=-1,!>=2}
  "simplifyCasts4" always "simplifyCasts4"
  false always 0
  false always 0
Line 354
  ( always {!<=-1,!>=2}
  "simplifyCasts5" always "simplifyCasts5"
  false always 0
  false always 0
Line 355
  ( always {!<=-1,!>=2}
  "simplifyCasts7" always "simplifyCasts7"
  false always 0
  false always 0
Line 356
  ( always {!<=-1,!>=2}
  "simplifyCasts8" always "simplifyCasts8"
  false always 0
  false always 0
Line 357
  ( always {!<=-1,!>=2}
  "simplifyCasts9" always "simplifyCasts9"
  false always 0
  false always 0
Line 358
  ( always {!<=-1,!>=2}
  "simplifyCasts10" always "simplifyCasts10"
  false always 0
  false always 0
Line 359
  ( always {!<=-1,!>=2}
  "simplifyCasts11" always "simplifyCasts11"
  false always 0
  false always 0
Line 360
  ( always {!<=-1,!>=2}
  "simplifyCasts12" always "simplifyCasts12"
  false always 0
  false always 0
Line 361
  ( always {!<=-1,!>=2}
  "simplifyCasts13" always "simplifyCasts13"
  false always 0
  false always 0
Line 362
  ( always {!<=-1,!>=2}
  "simplifyCasts14" always "simplifyCasts14"
  false always 0
  false always 0
Line 363
  ( always {!<=-1,!>=2}
  "simplifyCasts15" always "simplifyCasts15"
  false always 0
  false always 0
Line 364
  ( always {!<=-1,!>=2}
  "simplifyCasts16" always "simplifyCasts16"
  false always 0
  false always 0
Line 365
  ( always {!<=-1,!>=2}
  "simplifyCasts17" always "simplifyCasts17"
  false always 0
  false always 0
Line 367
  ( always {!<=-1,!>=2}
  "removeRedundantAssignment" always "removeRedundantAssignment"
  false always 0
  false always 0
Line 369
  ( always {!<=-1,!>=2}
  "simplify_constants" always "simplify_constants"
  false always 0
  false always 0
Line 370
  ( always {!<=-1,!>=2}
  "simplify_constants2" always "simplify_constants2"
  false always 0
  false always 0
Line 371
  ( always {!<=-1,!>=2}
  "simplify_constants3" always "simplify_constants3"
  false always 0
  false always 0
Line 372
  ( always {!<=-1,!>=2}
  "simplify_constants4" always "simplify_constants4"
  false always 0
  false always 0
Line 373
  ( always {!<=-1,!>=2}
  "simplify_constants5" always "simplify_constants5"
  false always 0
  false always 0
Line 374
  ( always {!<=-1,!>=2}
  "simplify_constants6" always "simplify_constants6"
  false always 0
  false always 0
Line 375
  ( always {!<=-1,!>=2}
  "simplifyVarDeclInitLists" always "simplifyVarDeclInitLists"
  false always 0
  false always 0
Line 379
  , always 1
  simplify always {!<=-1,!>=2}
  = always 1
  true always 1
Line 380
  "" always ""
Line 383
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 385
  code possible {"std::vector<int> v{a * b, 1};"@1,"template < class T > struct foo ;\nvoid bar ( ) {\nfoo < 1 ? 0 ? 1 : 6 : 2 > x ;\nfoo < 1 ? 0 : 2 > y ;\n}"@2,"bool b = true ? false : 1 > 2 ;"@3,"int buffer[10];\nstatic const int NELEMS = sizeof(buffer)/sizeof(int);\nstatic const int NELEMS2(sizeof(buffer)/sizeof(int));\nx = NELEMS;\ny = NELEMS2;\n"@4,"static const int bSize = 4;\nstatic const int aSize = 50;\nx = bSize;\ny = aSize;\n"@5,"static const char str[] = \"abcd\";\nstatic const unsigned int SZ = sizeof(str);\nvoid f() {\na = SZ;\n}\n"@6,"void f( Foo &foo, Foo *foo2 ) {\nconst int a = 45;\nfoo.a=a+a;\nfoo2->a=a;\n}"@7,"void f() {\nconst int a = 45;\nif( a )\n{ int b = a; }\n}\nvoid g() {\nint a = 2;\n}"@8,"void f() { int *p, *q; p = q; }"@9,"void f() { int *p = 0, *q; p = q; }"@10}
Line 386
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytokens.cpp"@1,"cppcheck-2.8/test/testsimplifytokens.cpp"@2,"cppcheck-2.8/test/testsimplifytokens.cpp"@3,"cppcheck-2.8/test/testsimplifytokens.cpp"@4,"cppcheck-2.8/test/testsimplifytokens.cpp"@5,"cppcheck-2.8/test/testsimplifytokens.cpp"@6,"cppcheck-2.8/test/testsimplifytokens.cpp"@7,"cppcheck-2.8/test/testsimplifytokens.cpp"@8,"cppcheck-2.8/test/testsimplifytokens.cpp"@9,"cppcheck-2.8/test/testsimplifytokens.cpp"@10}
  line inconclusive {7158@1,7145@2,7150@3,7130@4,7121@5,7113@6,7101@7,7091@8,7076@9,7077@10}
  "test.cpp" always "test.cpp"
Line 388
  simplify {!<=-1,!>=2,1@194,0@223}
Line 391
  nullptr always 0
  ! {!<=-1,!>=2,0@194,1@223}
  simplify {!<=-1,!>=2,1@194,0@223}
Line 395
  , always 1
  simplify always {!<=-1,!>=2}
  = always 1
  true always 1
Line 396
  "" always ""
Line 399
  & {lifetime[Address]=(settings_windows),!0}
  this always !0
Line 401
  code possible ";INT32 i[10];\nsizeof(i[0]);\n"@170
Line 402
  ( always {!<=-1,!>=2}
  file inconclusive "cppcheck-2.8/test/testsimplifytokens.cpp"@170
  line inconclusive 2494@170
  "test.cpp" always "test.cpp"
Line 404
  simplify {!<=-1,!>=2,1@170}
Line 407
  nullptr always 0
  ! {!<=-1,!>=2,0@170}
  simplify {!<=-1,!>=2,1@170}
Line 410
  , always 1
  simplify always {!<=-1,!>=2}
  = always 1
  true always 1
Line 411
  "" always ""
Line 413
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 415
  code possible {"int * __restrict p;"@8,"int * __restrict__ * p;"@9,"void foo(float * __restrict__ a, float * __restrict__ b);"@10,"int * restrict p;"@11,"int * restrict * p;"@12,"void foo(float * restrict a, float * restrict b);"@13,"typedef int * __restrict__ rint; rint p;"@15,"auto int i = 0;"@17,"auto i = 0;"@18,"void f() { err or_eq ((r bitand s) and not t); }"@40}
Line 416
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytokens.cpp"@8,"cppcheck-2.8/test/testsimplifytokens.cpp"@9,"cppcheck-2.8/test/testsimplifytokens.cpp"@10,"cppcheck-2.8/test/testsimplifytokens.cpp"@11,"cppcheck-2.8/test/testsimplifytokens.cpp"@12,"cppcheck-2.8/test/testsimplifytokens.cpp"@13,"cppcheck-2.8/test/testsimplifytokens.cpp"@15,"cppcheck-2.8/test/testsimplifytokens.cpp"@17,"cppcheck-2.8/test/testsimplifytokens.cpp"@18,"cppcheck-2.8/test/testsimplifytokens.cpp"@40}
  line inconclusive {4905@8,4906@9,4907@10,4908@11,4909@12,4910@13,4912@15,4917@17,4918@18,3305@40}
  filename inconclusive {"test.c"@8,"test.c"@9,"test.c"@10,"test.c"@11,"test.c"@12,"test.c"@13,"test.c"@15,"test.c"@17,"test.cpp"@18,"test.c"@40}
Line 417
  simplify {!<=-1,!>=2,0@40}
Line 420
  nullptr always 0
  false always 0
Line 425
  "" always ""
Line 427
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 429
  code possible {"void foo() {\n    std::cout<<pow(sin(x),2)+pow(cos(x),2);\n    std::cout<<pow(sin(pow(sin(y),2)+pow(cos(y),2)),2)+pow(cos(pow(sin(y),2)+pow(cos(y),2)),2);\n    std::cout<<pow(sin(x),2.0)+pow(cos(x),2.0);\n    std::cout<<pow(sin(x*y+z),2.0)+pow(cos(x*y+z),2.0);\n    std::cout<<pow(sin(x*y+z),2)+pow(cos(x*y+z),2);\n    std::cout<<pow(cos(x),2)+pow(sin(x),2);\n    std::cout<<pow(cos(x),2.0)+pow(sin(x),2.0);\n    std::cout<<pow(cos(x*y+z),2.0)+pow(sin(x*y+z),2.0);\n    std::cout<<pow(cos(x*y+z),2)+pow(sin(x*y+z),2);\n    std::cout<<pow(sinh(x*y+z),2)-pow(cosh(x*y+z),2);\n    std::cout<<pow(sinh(x),2)-pow(cosh(x),2);\n    std::cout<<pow(sinh(x*y+z),2.0)-pow(cosh(x*y+z),2.0);\n    std::cout<<pow(sinh(x),2.0)-pow(cosh(x),2.0);\n    std::cout<<pow(cosh(x*y+z),2)-pow(sinh(x*y+z),2);\n    std::cout<<pow(cosh(x),2)-pow(sinh(x),2);\n    std::cout<<pow(cosh(x*y+z),2.0)-pow(sinh(x*y+z),2.0);\n    std::cout<<pow(cosh(x),2.0)-pow(sinh(x),2.0);\n    std::cout<<pow(cosh(pow(x,1)),2.0)-pow(sinh(pow(x,1)),2.0);\n}"@75,"void f ( ) {\na = pow ( sin ( x ) , 2 ) + pow ( cos ( y ) , 2 ) ;\nb = pow ( sinh ( x ) , 2 ) - pow ( cosh ( y ) , 2 ) ;\nc = pow ( sin ( x ) , 2.0 ) + pow ( cos ( y ) , 2.0 ) ;\nd = pow ( sinh ( x ) , 2.0 ) - pow ( cosh ( y ) , 2.0 ) ;\ne = pow ( cos ( x ) , 2 ) + pow ( sin ( y ) , 2 ) ;\nf = pow ( cosh ( x ) , 2 ) - pow ( sinh ( y ) , 2 ) ;\ng = pow ( cos ( x ) , 2.0 ) + pow ( sin ( y ) , 2.0 ) ;\nh = pow ( cosh ( x ) , 2.0 ) - pow ( sinh ( y ) , 2.0 ) ;\n}"@76,"void foo() {\n    std::cout<<powf(sinf(x),2)+powf(cosf(x),2);\n    std::cout<<powf(sinf(powf(sinf(y),2)+powf(cosf(y),2)),2)+powf(cosf(powf(sinf(y),2)+powf(cosf(y),2)),2);\n    std::cout<<powf(sinf(x),2.0)+powf(cosf(x),2.0);\n    std::cout<<powf(sinf(x*y+z),2.0)+powf(cosf(x*y+z),2.0);\n    std::cout<<powf(sinf(x*y+z),2)+powf(cosf(x*y+z),2);\n    std::cout<<powf(cosf(x),2)+powf(sinf(x),2);\n    std::cout<<powf(cosf(x),2.0)+powf(sinf(x),2.0);\n    std::cout<<powf(cosf(x*y+z),2.0)+powf(sinf(x*y+z),2.0);\n    std::cout<<powf(cosf(x*y+z),2)+powf(sinf(x*y+z),2);\n    std::cout<<powf(sinhf(x*y+z),2)-powf(coshf(x*y+z),2);\n    std::cout<<powf(sinhf(x),2)-powf(coshf(x),2);\n    std::cout<<powf(sinhf(x*y+z),2.0)-powf(coshf(x*y+z),2.0);\n    std::cout<<powf(sinhf(x),2.0)-powf(coshf(x),2.0);\n    std::cout<<powf(coshf(x*y+z),2)-powf(sinhf(x*y+z),2);\n    std::cout<<powf(coshf(x),2)-powf(sinhf(x),2);\n    std::cout<<powf(coshf(x*y+z),2.0)-powf(sinhf(x*y+z),2.0);\n    std::cout<<powf(coshf(x),2.0)-powf(sinhf(x),2.0);\n    std::cout<<powf(coshf(powf(x,1)),2.0)-powf(sinhf(powf(x,1)),2.0);\n}"@77,"void f ( ) {\na = powf ( sinf ( x ) , 2 ) + powf ( cosf ( y ) , 2 ) ;\nb = powf ( sinhf ( x ) , 2 ) - powf ( coshf ( y ) , 2 ) ;\nc = powf ( sinf ( x ) , 2.0 ) + powf ( cosf ( y ) , 2.0 ) ;\nd = powf ( sinhf ( x ) , 2.0 ) - powf ( coshf ( y ) , 2.0 ) ;\ne = powf ( cosf ( x ) , 2 ) + powf ( sinf ( y ) , 2 ) ;\nf = powf ( coshf ( x ) , 2 ) - powf ( sinhf ( y ) , 2 ) ;\ng = powf ( cosf ( x ) , 2.0 ) + powf ( sinf ( y ) , 2.0 ) ;\nh = powf ( coshf ( x ) , 2.0 ) - powf ( sinhf ( y ) , 2.0 ) ;\n}"@78,"void foo() {\n    std::cout<<powf(sinl(x),2)+powl(cosl(x),2);\n    std::cout<<pow(sinl(powl(sinl(y),2)+powl(cosl(y),2)),2)+powl(cosl(powl(sinl(y),2)+powl(cosl(y),2)),2);\n    std::cout<<powl(sinl(x),2.0)+powl(cosl(x),2.0);\n    std::cout<<powl(sinl(x*y+z),2.0)+powl(cosl(x*y+z),2.0);\n    std::cout<<powl(sinl(x*y+z),2)+powl(cosl(x*y+z),2);\n    std::cout<<powl(cosl(x),2)+powl(sinl(x),2);\n    std::cout<<powl(cosl(x),2.0)+powl(sinl(x),2.0);\n    std::cout<<powl(cosl(x*y+z),2.0)+powl(sinl(x*y+z),2.0);\n    std::cout<<powl(cosl(x*y+z),2)+powl(sinl(x*y+z),2);\n    std::cout<<powl(sinhl(x*y+z),2)-powl(coshl(x*y+z),2);\n    std::cout<<powl(sinhl(x),2)-powl(coshl(x),2);\n    std::cout<<powl(sinhl(x*y+z),2.0)-powl(coshl(x*y+z),2.0);\n    std::cout<<powl(sinhl(x),2.0)-powl(coshl(x),2.0);\n    std::cout<<powl(coshl(x*y+z),2)-powl(sinhl(x*y+z),2);\n    std::cout<<powl(coshl(x),2)-powl(sinhl(x),2);\n    std::cout<<powl(coshl(x*y+z),2.0)-powl(sinhl(x*y+z),2.0);\n    std::cout<<powl(coshl(x),2.0)-powl(sinhl(x),2.0);\n    std::cout<<powl(coshl(powl(x,1)),2.0)-powl(sinhl(powl(x,1)),2.0);\n}"@79,"void f ( ) {\na = powl ( sinl ( x ) , 2 ) + powl ( cosl ( y ) , 2 ) ;\nb = powl ( sinhl ( x ) , 2 ) - powl ( coshl ( y ) , 2 ) ;\nc = powl ( sinl ( x ) , 2.0 ) + powl ( cosl ( y ) , 2.0 ) ;\nd = powl ( sinhl ( x ) , 2.0 ) - powl ( coshl ( y ) , 2.0 ) ;\ne = powl ( cosl ( x ) , 2 ) + powl ( sinl ( y ) , 2 ) ;\nf = powl ( coshl ( x ) , 2 ) - powl ( sinhl ( y ) , 2 ) ;\ng = powl ( cosl ( x ) , 2.0 ) + powl ( sinl ( y ) , 2.0 ) ;\nh = powl ( coshl ( x ) , 2.0 ) - powl ( sinhl ( y ) , 2.0 ) ;\n}"@80,"void f() {\n std::cout << fmax(-1.0,0);\n std::cout << fmax(1.0,0);\n std::cout << fmax(0,0);\n std::cout << fmaxf(-1.0,0);\n std::cout << fmaxf(1.0,0);\n std::cout << fmaxf(0,0);\n std::cout << fmaxl(-1.0,0);\n std::cout << fmaxl(1.0,0);\n std::cout << fmaxl(0,0);\n}"@81,"float f(float f) { return fmax(f,0);}"@82,"void f() {\n std::cout << fmin(-1.0,0);\n std::cout << fmin(1.0,0);\n std::cout << fmin(0,0);\n std::cout << fminf(-1.0,0);\n std::cout << fminf(1.0,0);\n std::cout << fminf(0,0);\n std::cout << fminl(-1.0,0);\n std::cout << fminl(1.0,0);\n std::cout << fminl(0,0);\n}"@83,"float f(float f) { return fmin(f,0);}"@84}
Line 430
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytokens.cpp"@75,"cppcheck-2.8/test/testsimplifytokens.cpp"@76,"cppcheck-2.8/test/testsimplifytokens.cpp"@77,"cppcheck-2.8/test/testsimplifytokens.cpp"@78,"cppcheck-2.8/test/testsimplifytokens.cpp"@79,"cppcheck-2.8/test/testsimplifytokens.cpp"@80,"cppcheck-2.8/test/testsimplifytokens.cpp"@81,"cppcheck-2.8/test/testsimplifytokens.cpp"@82,"cppcheck-2.8/test/testsimplifytokens.cpp"@83,"cppcheck-2.8/test/testsimplifytokens.cpp"@84}
  line inconclusive {1685@75,1697@76,1740@77,1752@78,1795@79,1808@80,1635@81,1640@82,1602@83,1607@84}
  "test.cpp" always "test.cpp"
Line 433
  false always 0
  false always 0
  false always 0
  true always 1
  false always 0
Line 438
  "" always ""
Line 440
  & {lifetime[Address]=(settings_std),!0}
  this always !0
Line 442
  code possible {"void f() { exit(0); foo(); }"@154,"void f() { exit(0); if (m) foo(); }"@155,"void f(int n) { if (n) { exit(0); } foo(); }"@156,"void f() { exit(0); dead(); switch (n) { case 1: deadcode () ; default: deadcode (); } }"@157,"int f(int n) { switch (n) {case 0: exit(0); n*=2; default: exit(0); n*=6;} exit(0); foo();}"@158,"void f (int i) { goto label; switch(i) { label: exit(0); } }"@159,"void f() { MACRO(exit(0)) }"@160,"void f() { MACRO(bar1, exit(0)) }"@161,"void f(){    if (k>0) goto label;    exit(0);    if (tnt)    {        {            check();            k=0;        }        label:        bar();    } }"@162,"void foo () {    exit(0);    {        boo();        while (n) { --n; }        {            label:            ok();        }    }}"@163}
Line 443
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytokens.cpp"@154,"cppcheck-2.8/test/testsimplifytokens.cpp"@155,"cppcheck-2.8/test/testsimplifytokens.cpp"@156,"cppcheck-2.8/test/testsimplifytokens.cpp"@157,"cppcheck-2.8/test/testsimplifytokens.cpp"@158,"cppcheck-2.8/test/testsimplifytokens.cpp"@159,"cppcheck-2.8/test/testsimplifytokens.cpp"@160,"cppcheck-2.8/test/testsimplifytokens.cpp"@161,"cppcheck-2.8/test/testsimplifytokens.cpp"@162,"cppcheck-2.8/test/testsimplifytokens.cpp"@163}
  line inconclusive {3808@154,3809@155,3810@156,3811@157,3813@158,3816@159,3818@160,3819@161,3836@162,3851@163}
  "test.cpp" always "test.cpp"
Line 446
  nullptr always 0
  false always 0
Line 450
  , always 0
  simplify always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 1
  expand always {!<=-1,!>=2}
  = always 1
  true always 1
  , always "test.cpp"
  = always "test.cpp"
  "test.cpp" always "test.cpp"
  , always 1
  cpp11 always {!<=-1,!>=2}
  = always 1
  true always 1
Line 451
  "" always ""
Line 453
  = always 1
  true always 1
Line 455
  cpp11 always {!<=-1,!>=2}
Line 458
  & {lifetime[Address]=(settings1),!0}
  this always !0
Line 459
  code possible {"; ((short*)data)[5] = 0;"@25,"char *a;\nvoid f(const char *s) {\n    a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"@38,"void f(const char *s) {\n    char *a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"@39,"int main() {\n  char* data = new char[100];\n  char** dataPtr = &data;\n  printf(\"test\");\n  delete [] *dataPtr;\n}"@42,"int a() {    int x = 123;    return (x);}"@43,"static int x;void f() {    x = 123;    while (!x) { dostuff(); }}"@44,"void a(int x);void b() {    int x = 123;    a(x);}"@45,"void a(int &x);void b() {    int x = 123;    a(x);}"@46,"void f() {\n    float a = 40;\n    x(10 / a);\n}\n"@47,"double f() {    double a = false;    return a;}"@48}
Line 460
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytokens.cpp"@25,"cppcheck-2.8/test/testsimplifytokens.cpp"@38,"cppcheck-2.8/test/testsimplifytokens.cpp"@39,"cppcheck-2.8/test/testsimplifytokens.cpp"@42,"cppcheck-2.8/test/testsimplifytokens.cpp"@43,"cppcheck-2.8/test/testsimplifytokens.cpp"@44,"cppcheck-2.8/test/testsimplifytokens.cpp"@45,"cppcheck-2.8/test/testsimplifytokens.cpp"@46,"cppcheck-2.8/test/testsimplifytokens.cpp"@47,"cppcheck-2.8/test/testsimplifytokens.cpp"@48}
  linenr inconclusive {7031@25,6958@38,6970@39,6882@42,6866@43,6858@44,6837@45,6847@46,6806@47,6813@48}
  filename {"test.c"@101,"test.c"@102,"test.cpp"@103,"test.cpp"@104,"test.c"@105,"test.c"@111,"test.cpp"}
Line 461
  simplify {!<=-1,!>=2,1@25}
Line 466
  "" always ""
Line 469
  line possible size=0
Line 470
  ( always !<=-1
  "valueflow.cpp" always "valueflow.cpp"
  == always {!<=-1,!>=2}
Line 471
  "\n" always "\n"
Line 475
  false always 0
  expand always {!<=-1,!>=2}
  false always 0
  true always 1
  false always 0
  nullptr always 0
  nullptr always 0
Line 477
  "" always ""
Line 481
  , always 0
  simplify always {!<=-1,!>=2}
  = always 0
  false always 0
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 482
  "" always ""
Line 484
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 485
  code possible {"namespace N {\n    const int n = 0;\n    namespace M { const int m = 0; }\n}\nusing namespace N;\nint i(n);\nint j(M::m);\nusing namespace N::M;\nint k(m);\nint l(N::M::m);\n"@40,"using namespace X;\nnamespace N {\n    struct A {\n        static int i;\n        struct B {\n            double x;\n            void f();\n        };\n    };\n}\nnamespace N {\n    int A::i = 0;\n    void A::B::f() {\n        x = 0;\n    }\n}\n"@41,"int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h + i;\n}\n"@130,"int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h - i;\n}\n"@131,"int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h * i;\n}\n"@132,"int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h / i;\n}\n"@133,"int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h & i;\n}\n"@134,"int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h | i;\n}\n"@135,"int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h ^ i;\n}\n"@136,"int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h % i;\n}\n"@137}
Line 486
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytokens.cpp"@40,"cppcheck-2.8/test/testsimplifytokens.cpp"@41,"cppcheck-2.8/test/testsimplifytokens.cpp"@130,"cppcheck-2.8/test/testsimplifytokens.cpp"@131,"cppcheck-2.8/test/testsimplifytokens.cpp"@132,"cppcheck-2.8/test/testsimplifytokens.cpp"@133,"cppcheck-2.8/test/testsimplifytokens.cpp"@134,"cppcheck-2.8/test/testsimplifytokens.cpp"@135,"cppcheck-2.8/test/testsimplifytokens.cpp"@136,"cppcheck-2.8/test/testsimplifytokens.cpp"@137}
  line inconclusive {6908@40,6944@41,5759@130,5777@131,5795@132,5813@133,5831@134,5849@135,5867@136,5885@137}
  filename inconclusive "test.c"@69
Line 488
  simplify {!<=-1,!>=2,1@130}
Line 492
  true always 1
Line 497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  497 always 497
  "{ x = f ( ) ; while ( x == -1 ) { x = f ( ) ; } }" always "{ x = f ( ) ; while ( x == -1 ) { x = f ( ) ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  497 always 497
  "{ while((x=f())==-1 && errno==EINTR){}}" always "{ while((x=f())==-1 && errno==EINTR){}}"
  true always 1
Line 514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  514 always 514
  "; x = p [ 1 ] ;" always "; x = p [ 1 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  514 always 514
  "; x = * ( p + 1 ) ;" always "; x = * ( p + 1 ) ;"
Line 515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  515 always 515
  "; x = p [ 0xA ] ;" always "; x = p [ 0xA ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  515 always 515
  "; x = * ( p + 0xA ) ;" always "; x = * ( p + 0xA ) ;"
Line 516
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  516 always 516
  "; x = p [ n ] ;" always "; x = p [ n ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  516 always 516
  "; x = * ( p + n ) ;" always "; x = * ( p + n ) ;"
Line 517
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  517 always 517
  "; x = y * ( p + n ) ;" always "; x = y * ( p + n ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  517 always 517
  "; x = y * ( p + n ) ;" always "; x = y * ( p + n ) ;"
Line 518
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  518 always 518
  "; x = 10 * ( p + n ) ;" always "; x = 10 * ( p + n ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  518 always 518
  "; x = 10 * ( p + n ) ;" always "; x = 10 * ( p + n ) ;"
Line 519
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  519 always 519
  "; x = y [ 10 ] * ( p + n ) ;" always "; x = y [ 10 ] * ( p + n ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  519 always 519
  "; x = y [ 10 ] * ( p + n ) ;" always "; x = y [ 10 ] * ( p + n ) ;"
Line 520
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  520 always 520
  "; x = ( a + m ) * ( p + n ) ;" always "; x = ( a + m ) * ( p + n ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  520 always 520
  "; x = ( a + m ) * ( p + n ) ;" always "; x = ( a + m ) * ( p + n ) ;"
Line 523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  523 always 523
  "; x = p [ -1 ] ;" always "; x = p [ -1 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  523 always 523
  "; x = *(p - 1);" always "; x = *(p - 1);"
Line 524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  524 always 524
  "; x = p [ -0xA ] ;" always "; x = p [ -0xA ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  524 always 524
  "; x = *(p - 0xA);" always "; x = *(p - 0xA);"
Line 525
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  525 always 525
  "; x = p [ - n ] ;" always "; x = p [ - n ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  525 always 525
  "; x = *(p - n);" always "; x = *(p - n);"
Line 526
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  526 always 526
  "; x = y * ( p - 1 ) ;" always "; x = y * ( p - 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  526 always 526
  "; x = y * (p - 1);" always "; x = y * (p - 1);"
Line 527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  527 always 527
  "; x = 10 * ( p - 1 ) ;" always "; x = 10 * ( p - 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  527 always 527
  "; x = 10 * (p - 1);" always "; x = 10 * (p - 1);"
Line 528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  528 always 528
  "; x = y [ 10 ] * ( p - 1 ) ;" always "; x = y [ 10 ] * ( p - 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  528 always 528
  "; x = y[10] * (p - 1);" always "; x = y[10] * (p - 1);"
Line 529
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  529 always 529
  "; x = ( a - m ) * ( p - n ) ;" always "; x = ( a - m ) * ( p - n ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  529 always 529
  "; x = (a - m) * (p - n);" always "; x = (a - m) * (p - n);"
Line 533
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  533 always 533
  "; a = b * ( x - y ) ;" always "; a = b * ( x - y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  533 always 533
  "; a = b * (x - y);" always "; a = b * (x - y);"
Line 534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  534 always 534
  "; a = b * x [ - y ] ;" always "; a = b * x [ - y ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  534 always 534
  "; a = b * *(x - y);" always "; a = b * *(x - y);"
Line 535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  535 always 535
  "; a = a * ( x - y ) ;" always "; a = a * ( x - y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  535 always 535
  "; a *= (x - y);" always "; a *= (x - y);"
Line 536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  536 always 536
  "; z = a ++ * ( x - y ) ;" always "; z = a ++ * ( x - y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  536 always 536
  "; z = a++ * (x - y);" always "; z = a++ * (x - y);"
Line 537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  537 always 537
  "; z = a ++ * ( x + y ) ;" always "; z = a ++ * ( x + y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  537 always 537
  "; z = a++ * (x + y);" always "; z = a++ * (x + y);"
Line 538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  538 always 538
  "; z = a -- * ( x - y ) ;" always "; z = a -- * ( x - y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  538 always 538
  "; z = a-- * (x - y);" always "; z = a-- * (x - y);"
Line 539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  539 always 539
  "; z = a -- * ( x + y ) ;" always "; z = a -- * ( x + y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  539 always 539
  "; z = a-- * (x + y);" always "; z = a-- * (x + y);"
Line 540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  540 always 540
  "; z = 'a' * ( x - y ) ;" always "; z = 'a' * ( x - y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  540 always 540
  "; z = 'a' * (x - y);" always "; z = 'a' * (x - y);"
Line 541
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  541 always 541
  "; z = \"a\" * ( x - y ) ;" always "; z = \"a\" * ( x - y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  541 always 541
  "; z = \"a\" * (x - y);" always "; z = \"a\" * (x - y);"
Line 542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  542 always 542
  "; z = 'a' * ( x + y ) ;" always "; z = 'a' * ( x + y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  542 always 542
  "; z = 'a' * (x + y);" always "; z = 'a' * (x + y);"
Line 543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  543 always 543
  "; z = \"a\" * ( x + y ) ;" always "; z = \"a\" * ( x + y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  543 always 543
  "; z = \"a\" * (x + y);" always "; z = \"a\" * (x + y);"
Line 544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  544 always 544
  "; z = foo ( ) * ( x + y ) ;" always "; z = foo ( ) * ( x + y ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  544 always 544
  "; z = foo() * (x + y);" always "; z = foo() * (x + y);"
Line 551
  65 always 65
  = always "void f(int x) {\n std::cout << erfc(x);\n std::cout << erfc(0L);\n}"
  "void f(int x) {\n std::cout << erfc(x);\n std::cout << erfc(0L);\n}" always "void f(int x) {\n std::cout << erfc(x);\n std::cout << erfc(0L);\n}"
Line 555
  68 always 68
  = always "void f ( int x ) {\nstd :: cout << erfc ( x ) ;\nstd :: cout << 1 ;\n}"
  "void f ( int x ) {\nstd :: cout << erfc ( x ) ;\nstd :: cout << 1 ;\n}" always "void f ( int x ) {\nstd :: cout << erfc ( x ) ;\nstd :: cout << 1 ;\n}"
Line 559
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  559 always 559
  expected_erfc always "void f ( int x ) {\nstd :: cout << erfc ( x ) ;\nstd :: cout << 1 ;\n}"
  code_erfc always "void f(int x) {\n std::cout << erfc(x);\n std::cout << erfc(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  559 always 559
Line 561
  71 always 71
  = always "void f(float x) {\n std::cout << erfcf(x);\n std::cout << erfcf(0.0f);\n}"
  "void f(float x) {\n std::cout << erfcf(x);\n std::cout << erfcf(0.0f);\n}" always "void f(float x) {\n std::cout << erfcf(x);\n std::cout << erfcf(0.0f);\n}"
Line 565
  71 always 71
  = always "void f ( float x ) {\nstd :: cout << erfcf ( x ) ;\nstd :: cout << 1 ;\n}"
  "void f ( float x ) {\nstd :: cout << erfcf ( x ) ;\nstd :: cout << 1 ;\n}" always "void f ( float x ) {\nstd :: cout << erfcf ( x ) ;\nstd :: cout << 1 ;\n}"
Line 569
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  569 always 569
  expected_erfcf always "void f ( float x ) {\nstd :: cout << erfcf ( x ) ;\nstd :: cout << 1 ;\n}"
  code_erfcf always "void f(float x) {\n std::cout << erfcf(x);\n std::cout << erfcf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  569 always 569
Line 571
  77 always 77
  = always "void f(long double x) {\n std::cout << erfcl(x);\n std::cout << erfcl(0.0f);\n}"
  "void f(long double x) {\n std::cout << erfcl(x);\n std::cout << erfcl(0.0f);\n}" always "void f(long double x) {\n std::cout << erfcl(x);\n std::cout << erfcl(0.0f);\n}"
Line 575
  72 always 72
  = always "void f ( double x ) {\nstd :: cout << erfcl ( x ) ;\nstd :: cout << 1 ;\n}"
  "void f ( double x ) {\nstd :: cout << erfcl ( x ) ;\nstd :: cout << 1 ;\n}" always "void f ( double x ) {\nstd :: cout << erfcl ( x ) ;\nstd :: cout << 1 ;\n}"
Line 579
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  579 always 579
  expected_erfcl always "void f ( double x ) {\nstd :: cout << erfcl ( x ) ;\nstd :: cout << 1 ;\n}"
  code_erfcl always "void f(long double x) {\n std::cout << erfcl(x);\n std::cout << erfcl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  579 always 579
Line 584
  63 always 63
  = always "void f(int x) {\n std::cout << cos(x);\n std::cout << cos(0L);\n}"
  "void f(int x) {\n std::cout << cos(x);\n std::cout << cos(0L);\n}" always "void f(int x) {\n std::cout << cos(x);\n std::cout << cos(0L);\n}"
Line 588
  67 always 67
  = always "void f ( int x ) {\nstd :: cout << cos ( x ) ;\nstd :: cout << 1 ;\n}"
  "void f ( int x ) {\nstd :: cout << cos ( x ) ;\nstd :: cout << 1 ;\n}" always "void f ( int x ) {\nstd :: cout << cos ( x ) ;\nstd :: cout << 1 ;\n}"
Line 592
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  592 always 592
  expected_cos always "void f ( int x ) {\nstd :: cout << cos ( x ) ;\nstd :: cout << 1 ;\n}"
  code_cos always "void f(int x) {\n std::cout << cos(x);\n std::cout << cos(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  592 always 592
Line 594
  69 always 69
  = always "void f(float x) {\n std::cout << cosf(x);\n std::cout << cosf(0.0f);\n}"
  "void f(float x) {\n std::cout << cosf(x);\n std::cout << cosf(0.0f);\n}" always "void f(float x) {\n std::cout << cosf(x);\n std::cout << cosf(0.0f);\n}"
Line 598
  70 always 70
  = always "void f ( float x ) {\nstd :: cout << cosf ( x ) ;\nstd :: cout << 1 ;\n}"
  "void f ( float x ) {\nstd :: cout << cosf ( x ) ;\nstd :: cout << 1 ;\n}" always "void f ( float x ) {\nstd :: cout << cosf ( x ) ;\nstd :: cout << 1 ;\n}"
Line 602
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  602 always 602
  expected_cosf always "void f ( float x ) {\nstd :: cout << cosf ( x ) ;\nstd :: cout << 1 ;\n}"
  code_cosf always "void f(float x) {\n std::cout << cosf(x);\n std::cout << cosf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  602 always 602
Line 604
  75 always 75
  = always "void f(long double x) {\n std::cout << cosl(x);\n std::cout << cosl(0.0f);\n}"
  "void f(long double x) {\n std::cout << cosl(x);\n std::cout << cosl(0.0f);\n}" always "void f(long double x) {\n std::cout << cosl(x);\n std::cout << cosl(0.0f);\n}"
Line 608
  71 always 71
  = always "void f ( double x ) {\nstd :: cout << cosl ( x ) ;\nstd :: cout << 1 ;\n}"
  "void f ( double x ) {\nstd :: cout << cosl ( x ) ;\nstd :: cout << 1 ;\n}" always "void f ( double x ) {\nstd :: cout << cosl ( x ) ;\nstd :: cout << 1 ;\n}"
Line 612
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  612 always 612
  expected_cosl always "void f ( double x ) {\nstd :: cout << cosl ( x ) ;\nstd :: cout << 1 ;\n}"
  code_cosl always "void f(long double x) {\n std::cout << cosl(x);\n std::cout << cosl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  612 always 612
Line 617
  65 always 65
  = always "void f(int x) {\n std::cout << cosh(x);\n std::cout << cosh(0L);\n}"
  "void f(int x) {\n std::cout << cosh(x);\n std::cout << cosh(0L);\n}" always "void f(int x) {\n std::cout << cosh(x);\n std::cout << cosh(0L);\n}"
Line 621
  68 always 68
  = always "void f ( int x ) {\nstd :: cout << cosh ( x ) ;\nstd :: cout << 1 ;\n}"
  "void f ( int x ) {\nstd :: cout << cosh ( x ) ;\nstd :: cout << 1 ;\n}" always "void f ( int x ) {\nstd :: cout << cosh ( x ) ;\nstd :: cout << 1 ;\n}"
Line 625
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  625 always 625
  expected_cosh always "void f ( int x ) {\nstd :: cout << cosh ( x ) ;\nstd :: cout << 1 ;\n}"
  code_cosh always "void f(int x) {\n std::cout << cosh(x);\n std::cout << cosh(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  625 always 625
Line 627
  71 always 71
  = always "void f(float x) {\n std::cout << coshf(x);\n std::cout << coshf(0.0f);\n}"
  "void f(float x) {\n std::cout << coshf(x);\n std::cout << coshf(0.0f);\n}" always "void f(float x) {\n std::cout << coshf(x);\n std::cout << coshf(0.0f);\n}"
Line 631
  71 always 71
  = always "void f ( float x ) {\nstd :: cout << coshf ( x ) ;\nstd :: cout << 1 ;\n}"
  "void f ( float x ) {\nstd :: cout << coshf ( x ) ;\nstd :: cout << 1 ;\n}" always "void f ( float x ) {\nstd :: cout << coshf ( x ) ;\nstd :: cout << 1 ;\n}"
Line 635
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  635 always 635
  expected_coshf always "void f ( float x ) {\nstd :: cout << coshf ( x ) ;\nstd :: cout << 1 ;\n}"
  code_coshf always "void f(float x) {\n std::cout << coshf(x);\n std::cout << coshf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  635 always 635
Line 637
  77 always 77
  = always "void f(long double x) {\n std::cout << coshl(x);\n std::cout << coshl(0.0f);\n}"
  "void f(long double x) {\n std::cout << coshl(x);\n std::cout << coshl(0.0f);\n}" always "void f(long double x) {\n std::cout << coshl(x);\n std::cout << coshl(0.0f);\n}"
Line 641
  72 always 72
  = always "void f ( double x ) {\nstd :: cout << coshl ( x ) ;\nstd :: cout << 1 ;\n}"
  "void f ( double x ) {\nstd :: cout << coshl ( x ) ;\nstd :: cout << 1 ;\n}" always "void f ( double x ) {\nstd :: cout << coshl ( x ) ;\nstd :: cout << 1 ;\n}"
Line 645
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  645 always 645
  expected_coshl always "void f ( double x ) {\nstd :: cout << coshl ( x ) ;\nstd :: cout << 1 ;\n}"
  code_coshl always "void f(long double x) {\n std::cout << coshl(x);\n std::cout << coshl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  645 always 645
Line 650
  65 always 65
  = always "void f(int x) {\n std::cout << acos(x);\n std::cout << acos(1L);\n}"
  "void f(int x) {\n std::cout << acos(x);\n std::cout << acos(1L);\n}" always "void f(int x) {\n std::cout << acos(x);\n std::cout << acos(1L);\n}"
Line 654
  68 always 68
  = always "void f ( int x ) {\nstd :: cout << acos ( x ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << acos ( x ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << acos ( x ) ;\nstd :: cout << 0 ;\n}"
Line 658
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  658 always 658
  expected_acos always "void f ( int x ) {\nstd :: cout << acos ( x ) ;\nstd :: cout << 0 ;\n}"
  code_acos always "void f(int x) {\n std::cout << acos(x);\n std::cout << acos(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  658 always 658
Line 660
  71 always 71
  = always "void f(float x) {\n std::cout << acosf(x);\n std::cout << acosf(1.0f);\n}"
  "void f(float x) {\n std::cout << acosf(x);\n std::cout << acosf(1.0f);\n}" always "void f(float x) {\n std::cout << acosf(x);\n std::cout << acosf(1.0f);\n}"
Line 664
  71 always 71
  = always "void f ( float x ) {\nstd :: cout << acosf ( x ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << acosf ( x ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << acosf ( x ) ;\nstd :: cout << 0 ;\n}"
Line 668
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  668 always 668
  expected_acosf always "void f ( float x ) {\nstd :: cout << acosf ( x ) ;\nstd :: cout << 0 ;\n}"
  code_acosf always "void f(float x) {\n std::cout << acosf(x);\n std::cout << acosf(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  668 always 668
Line 670
  77 always 77
  = always "void f(long double x) {\n std::cout << acosl(x);\n std::cout << acosl(1.0f);\n}"
  "void f(long double x) {\n std::cout << acosl(x);\n std::cout << acosl(1.0f);\n}" always "void f(long double x) {\n std::cout << acosl(x);\n std::cout << acosl(1.0f);\n}"
Line 674
  72 always 72
  = always "void f ( double x ) {\nstd :: cout << acosl ( x ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << acosl ( x ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << acosl ( x ) ;\nstd :: cout << 0 ;\n}"
Line 678
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  678 always 678
  expected_acosl always "void f ( double x ) {\nstd :: cout << acosl ( x ) ;\nstd :: cout << 0 ;\n}"
  code_acosl always "void f(long double x) {\n std::cout << acosl(x);\n std::cout << acosl(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  678 always 678
Line 683
  67 always 67
  = always "void f(int x) {\n std::cout << acosh(x);\n std::cout << acosh(1L);\n}"
  "void f(int x) {\n std::cout << acosh(x);\n std::cout << acosh(1L);\n}" always "void f(int x) {\n std::cout << acosh(x);\n std::cout << acosh(1L);\n}"
Line 687
  69 always 69
  = always "void f ( int x ) {\nstd :: cout << acosh ( x ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << acosh ( x ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << acosh ( x ) ;\nstd :: cout << 0 ;\n}"
Line 691
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  691 always 691
  expected_acosh always "void f ( int x ) {\nstd :: cout << acosh ( x ) ;\nstd :: cout << 0 ;\n}"
  code_acosh always "void f(int x) {\n std::cout << acosh(x);\n std::cout << acosh(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  691 always 691
Line 693
  73 always 73
  = always "void f(float x) {\n std::cout << acoshf(x);\n std::cout << acoshf(1.0f);\n}"
  "void f(float x) {\n std::cout << acoshf(x);\n std::cout << acoshf(1.0f);\n}" always "void f(float x) {\n std::cout << acoshf(x);\n std::cout << acoshf(1.0f);\n}"
Line 697
  72 always 72
  = always "void f ( float x ) {\nstd :: cout << acoshf ( x ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << acoshf ( x ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << acoshf ( x ) ;\nstd :: cout << 0 ;\n}"
Line 701
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  701 always 701
  expected_acoshf always "void f ( float x ) {\nstd :: cout << acoshf ( x ) ;\nstd :: cout << 0 ;\n}"
  code_acoshf always "void f(float x) {\n std::cout << acoshf(x);\n std::cout << acoshf(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  701 always 701
Line 703
  79 always 79
  = always "void f(long double x) {\n std::cout << acoshl(x);\n std::cout << acoshl(1.0f);\n}"
  "void f(long double x) {\n std::cout << acoshl(x);\n std::cout << acoshl(1.0f);\n}" always "void f(long double x) {\n std::cout << acoshl(x);\n std::cout << acoshl(1.0f);\n}"
Line 707
  73 always 73
  = always "void f ( double x ) {\nstd :: cout << acoshl ( x ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << acoshl ( x ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << acoshl ( x ) ;\nstd :: cout << 0 ;\n}"
Line 711
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  711 always 711
  expected_acoshl always "void f ( double x ) {\nstd :: cout << acoshl ( x ) ;\nstd :: cout << 0 ;\n}"
  code_acoshl always "void f(long double x) {\n std::cout << acoshl(x);\n std::cout << acoshl(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  711 always 711
Line 716
  113 always 113
  = always "void f(int x) {\n std::cout << sqrt(x);\n std::cout << sqrt(-1);\n std::cout << sqrt(0L);\n std::cout << sqrt(1L);\n}"
  "void f(int x) {\n std::cout << sqrt(x);\n std::cout << sqrt(-1);\n std::cout << sqrt(0L);\n std::cout << sqrt(1L);\n}" always "void f(int x) {\n std::cout << sqrt(x);\n std::cout << sqrt(-1);\n std::cout << sqrt(0L);\n std::cout << sqrt(1L);\n}"
Line 722
  116 always 116
  = always "void f ( int x ) {\nstd :: cout << sqrt ( x ) ;\nstd :: cout << sqrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  "void f ( int x ) {\nstd :: cout << sqrt ( x ) ;\nstd :: cout << sqrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}" always "void f ( int x ) {\nstd :: cout << sqrt ( x ) ;\nstd :: cout << sqrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
Line 728
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  728 always 728
  expected_sqrt always "void f ( int x ) {\nstd :: cout << sqrt ( x ) ;\nstd :: cout << sqrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  code_sqrt always "void f(int x) {\n std::cout << sqrt(x);\n std::cout << sqrt(-1);\n std::cout << sqrt(0L);\n std::cout << sqrt(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  728 always 728
Line 730
  125 always 125
  = always "void f(float x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0f);\n std::cout << sqrtf(0.0f);\n std::cout << sqrtf(1.0);\n}"
  "void f(float x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0f);\n std::cout << sqrtf(0.0f);\n std::cout << sqrtf(1.0);\n}" always "void f(float x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0f);\n std::cout << sqrtf(0.0f);\n std::cout << sqrtf(1.0);\n}"
Line 736
  123 always 123
  = always "void f ( float x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  "void f ( float x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}" always "void f ( float x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
Line 742
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  742 always 742
  expected_sqrtf always "void f ( float x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  code_sqrtf always "void f(float x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0f);\n std::cout << sqrtf(0.0f);\n std::cout << sqrtf(1.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  742 always 742
Line 744
  129 always 129
  = always "void f(long double x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0);\n std::cout << sqrtf(0.0);\n std::cout << sqrtf(1.0);\n}"
  "void f(long double x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0);\n std::cout << sqrtf(0.0);\n std::cout << sqrtf(1.0);\n}" always "void f(long double x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0);\n std::cout << sqrtf(0.0);\n std::cout << sqrtf(1.0);\n}"
Line 750
  123 always 123
  = always "void f ( double x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  "void f ( double x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}" always "void f ( double x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
Line 756
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  756 always 756
  expected_sqrtl always "void f ( double x ) {\nstd :: cout << sqrtf ( x ) ;\nstd :: cout << sqrtf ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  code_sqrtl always "void f(long double x) {\n std::cout << sqrtf(x);\n std::cout << sqrtf(-1.0);\n std::cout << sqrtf(0.0);\n std::cout << sqrtf(1.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  756 always 756
Line 761
  113 always 113
  = always "void f(int x) {\n std::cout << cbrt(x);\n std::cout << cbrt(-1);\n std::cout << cbrt(0L);\n std::cout << cbrt(1L);\n}"
  "void f(int x) {\n std::cout << cbrt(x);\n std::cout << cbrt(-1);\n std::cout << cbrt(0L);\n std::cout << cbrt(1L);\n}" always "void f(int x) {\n std::cout << cbrt(x);\n std::cout << cbrt(-1);\n std::cout << cbrt(0L);\n std::cout << cbrt(1L);\n}"
Line 767
  116 always 116
  = always "void f ( int x ) {\nstd :: cout << cbrt ( x ) ;\nstd :: cout << cbrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  "void f ( int x ) {\nstd :: cout << cbrt ( x ) ;\nstd :: cout << cbrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}" always "void f ( int x ) {\nstd :: cout << cbrt ( x ) ;\nstd :: cout << cbrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
Line 773
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  773 always 773
  expected_cbrt always "void f ( int x ) {\nstd :: cout << cbrt ( x ) ;\nstd :: cout << cbrt ( -1 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  code_cbrt always "void f(int x) {\n std::cout << cbrt(x);\n std::cout << cbrt(-1);\n std::cout << cbrt(0L);\n std::cout << cbrt(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  773 always 773
Line 775
  125 always 125
  = always "void f(float x) {\n std::cout << cbrtf(x);\n std::cout << cbrtf(-1.0f);\n std::cout << cbrtf(0.0f);\n std::cout << cbrtf(1.0);\n}"
  "void f(float x) {\n std::cout << cbrtf(x);\n std::cout << cbrtf(-1.0f);\n std::cout << cbrtf(0.0f);\n std::cout << cbrtf(1.0);\n}" always "void f(float x) {\n std::cout << cbrtf(x);\n std::cout << cbrtf(-1.0f);\n std::cout << cbrtf(0.0f);\n std::cout << cbrtf(1.0);\n}"
Line 781
  123 always 123
  = always "void f ( float x ) {\nstd :: cout << cbrtf ( x ) ;\nstd :: cout << cbrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  "void f ( float x ) {\nstd :: cout << cbrtf ( x ) ;\nstd :: cout << cbrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}" always "void f ( float x ) {\nstd :: cout << cbrtf ( x ) ;\nstd :: cout << cbrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
Line 787
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  787 always 787
  expected_cbrtf always "void f ( float x ) {\nstd :: cout << cbrtf ( x ) ;\nstd :: cout << cbrtf ( -1.0f ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  code_cbrtf always "void f(float x) {\n std::cout << cbrtf(x);\n std::cout << cbrtf(-1.0f);\n std::cout << cbrtf(0.0f);\n std::cout << cbrtf(1.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  787 always 787
Line 789
  129 always 129
  = always "void f(long double x) {\n std::cout << cbrtl(x);\n std::cout << cbrtl(-1.0);\n std::cout << cbrtl(0.0);\n std::cout << cbrtl(1.0);\n}"
  "void f(long double x) {\n std::cout << cbrtl(x);\n std::cout << cbrtl(-1.0);\n std::cout << cbrtl(0.0);\n std::cout << cbrtl(1.0);\n}" always "void f(long double x) {\n std::cout << cbrtl(x);\n std::cout << cbrtl(-1.0);\n std::cout << cbrtl(0.0);\n std::cout << cbrtl(1.0);\n}"
Line 795
  123 always 123
  = always "void f ( double x ) {\nstd :: cout << cbrtl ( x ) ;\nstd :: cout << cbrtl ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  "void f ( double x ) {\nstd :: cout << cbrtl ( x ) ;\nstd :: cout << cbrtl ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}" always "void f ( double x ) {\nstd :: cout << cbrtl ( x ) ;\nstd :: cout << cbrtl ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
Line 801
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  801 always 801
  expected_cbrtl always "void f ( double x ) {\nstd :: cout << cbrtl ( x ) ;\nstd :: cout << cbrtl ( -1.0 ) ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  code_cbrtl always "void f(long double x) {\n std::cout << cbrtl(x);\n std::cout << cbrtl(-1.0);\n std::cout << cbrtl(0.0);\n std::cout << cbrtl(1.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  801 always 801
Line 806
  113 always 113
  = always "void f(int x) {\n std::cout << exp2(x);\n std::cout << exp2(-1);\n std::cout << exp2(0L);\n std::cout << exp2(1L);\n}"
  "void f(int x) {\n std::cout << exp2(x);\n std::cout << exp2(-1);\n std::cout << exp2(0L);\n std::cout << exp2(1L);\n}" always "void f(int x) {\n std::cout << exp2(x);\n std::cout << exp2(-1);\n std::cout << exp2(0L);\n std::cout << exp2(1L);\n}"
Line 812
  126 always 126
  = always "void f ( int x ) {\nstd :: cout << exp2 ( x ) ;\nstd :: cout << exp2 ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2 ( 1L ) ;\n}"
  "void f ( int x ) {\nstd :: cout << exp2 ( x ) ;\nstd :: cout << exp2 ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2 ( 1L ) ;\n}" always "void f ( int x ) {\nstd :: cout << exp2 ( x ) ;\nstd :: cout << exp2 ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2 ( 1L ) ;\n}"
Line 818
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  818 always 818
  expected_exp2 always "void f ( int x ) {\nstd :: cout << exp2 ( x ) ;\nstd :: cout << exp2 ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2 ( 1L ) ;\n}"
  code_exp2 always "void f(int x) {\n std::cout << exp2(x);\n std::cout << exp2(-1);\n std::cout << exp2(0L);\n std::cout << exp2(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  818 always 818
Line 820
  123 always 123
  = always "void f(float x) {\n std::cout << exp2f(x);\n std::cout << exp2f(-1.0);\n std::cout << exp2f(0.0);\n std::cout << exp2f(1.0);\n}"
  "void f(float x) {\n std::cout << exp2f(x);\n std::cout << exp2f(-1.0);\n std::cout << exp2f(0.0);\n std::cout << exp2f(1.0);\n}" always "void f(float x) {\n std::cout << exp2f(x);\n std::cout << exp2f(-1.0);\n std::cout << exp2f(0.0);\n std::cout << exp2f(1.0);\n}"
Line 826
  134 always 134
  = always "void f ( float x ) {\nstd :: cout << exp2f ( x ) ;\nstd :: cout << exp2f ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2f ( 1.0 ) ;\n}"
  "void f ( float x ) {\nstd :: cout << exp2f ( x ) ;\nstd :: cout << exp2f ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2f ( 1.0 ) ;\n}" always "void f ( float x ) {\nstd :: cout << exp2f ( x ) ;\nstd :: cout << exp2f ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2f ( 1.0 ) ;\n}"
Line 832
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  832 always 832
  expected_exp2f always "void f ( float x ) {\nstd :: cout << exp2f ( x ) ;\nstd :: cout << exp2f ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2f ( 1.0 ) ;\n}"
  code_exp2f always "void f(float x) {\n std::cout << exp2f(x);\n std::cout << exp2f(-1.0);\n std::cout << exp2f(0.0);\n std::cout << exp2f(1.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  832 always 832
Line 834
  129 always 129
  = always "void f(long double x) {\n std::cout << exp2l(x);\n std::cout << exp2l(-1.0);\n std::cout << exp2l(0.0);\n std::cout << exp2l(1.0);\n}"
  "void f(long double x) {\n std::cout << exp2l(x);\n std::cout << exp2l(-1.0);\n std::cout << exp2l(0.0);\n std::cout << exp2l(1.0);\n}" always "void f(long double x) {\n std::cout << exp2l(x);\n std::cout << exp2l(-1.0);\n std::cout << exp2l(0.0);\n std::cout << exp2l(1.0);\n}"
Line 840
  135 always 135
  = always "void f ( double x ) {\nstd :: cout << exp2l ( x ) ;\nstd :: cout << exp2l ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2l ( 1.0 ) ;\n}"
  "void f ( double x ) {\nstd :: cout << exp2l ( x ) ;\nstd :: cout << exp2l ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2l ( 1.0 ) ;\n}" always "void f ( double x ) {\nstd :: cout << exp2l ( x ) ;\nstd :: cout << exp2l ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2l ( 1.0 ) ;\n}"
Line 846
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  846 always 846
  expected_exp2l always "void f ( double x ) {\nstd :: cout << exp2l ( x ) ;\nstd :: cout << exp2l ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp2l ( 1.0 ) ;\n}"
  code_exp2l always "void f(long double x) {\n std::cout << exp2l(x);\n std::cout << exp2l(-1.0);\n std::cout << exp2l(0.0);\n std::cout << exp2l(1.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  846 always 846
Line 851
  109 always 109
  = always "void f(int x) {\n std::cout << exp(x);\n std::cout << exp(-1);\n std::cout << exp(0L);\n std::cout << exp(1L);\n}"
  "void f(int x) {\n std::cout << exp(x);\n std::cout << exp(-1);\n std::cout << exp(0L);\n std::cout << exp(1L);\n}" always "void f(int x) {\n std::cout << exp(x);\n std::cout << exp(-1);\n std::cout << exp(0L);\n std::cout << exp(1L);\n}"
Line 857
  123 always 123
  = always "void f ( int x ) {\nstd :: cout << exp ( x ) ;\nstd :: cout << exp ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp ( 1L ) ;\n}"
  "void f ( int x ) {\nstd :: cout << exp ( x ) ;\nstd :: cout << exp ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp ( 1L ) ;\n}" always "void f ( int x ) {\nstd :: cout << exp ( x ) ;\nstd :: cout << exp ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp ( 1L ) ;\n}"
Line 863
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  863 always 863
  expected_exp always "void f ( int x ) {\nstd :: cout << exp ( x ) ;\nstd :: cout << exp ( -1 ) ;\nstd :: cout << 1 ;\nstd :: cout << exp ( 1L ) ;\n}"
  code_exp always "void f(int x) {\n std::cout << exp(x);\n std::cout << exp(-1);\n std::cout << exp(0L);\n std::cout << exp(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  863 always 863
Line 865
  119 always 119
  = always "void f(float x) {\n std::cout << expf(x);\n std::cout << expf(-1.0);\n std::cout << expf(0.0);\n std::cout << expf(1.0);\n}"
  "void f(float x) {\n std::cout << expf(x);\n std::cout << expf(-1.0);\n std::cout << expf(0.0);\n std::cout << expf(1.0);\n}" always "void f(float x) {\n std::cout << expf(x);\n std::cout << expf(-1.0);\n std::cout << expf(0.0);\n std::cout << expf(1.0);\n}"
Line 871
  131 always 131
  = always "void f ( float x ) {\nstd :: cout << expf ( x ) ;\nstd :: cout << expf ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expf ( 1.0 ) ;\n}"
  "void f ( float x ) {\nstd :: cout << expf ( x ) ;\nstd :: cout << expf ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expf ( 1.0 ) ;\n}" always "void f ( float x ) {\nstd :: cout << expf ( x ) ;\nstd :: cout << expf ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expf ( 1.0 ) ;\n}"
Line 877
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  877 always 877
  expected_expf always "void f ( float x ) {\nstd :: cout << expf ( x ) ;\nstd :: cout << expf ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expf ( 1.0 ) ;\n}"
  code_expf always "void f(float x) {\n std::cout << expf(x);\n std::cout << expf(-1.0);\n std::cout << expf(0.0);\n std::cout << expf(1.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  877 always 877
Line 879
  125 always 125
  = always "void f(long double x) {\n std::cout << expl(x);\n std::cout << expl(-1.0);\n std::cout << expl(0.0);\n std::cout << expl(1.0);\n}"
  "void f(long double x) {\n std::cout << expl(x);\n std::cout << expl(-1.0);\n std::cout << expl(0.0);\n std::cout << expl(1.0);\n}" always "void f(long double x) {\n std::cout << expl(x);\n std::cout << expl(-1.0);\n std::cout << expl(0.0);\n std::cout << expl(1.0);\n}"
Line 885
  132 always 132
  = always "void f ( double x ) {\nstd :: cout << expl ( x ) ;\nstd :: cout << expl ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expl ( 1.0 ) ;\n}"
  "void f ( double x ) {\nstd :: cout << expl ( x ) ;\nstd :: cout << expl ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expl ( 1.0 ) ;\n}" always "void f ( double x ) {\nstd :: cout << expl ( x ) ;\nstd :: cout << expl ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expl ( 1.0 ) ;\n}"
Line 891
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  891 always 891
  expected_expl always "void f ( double x ) {\nstd :: cout << expl ( x ) ;\nstd :: cout << expl ( -1.0 ) ;\nstd :: cout << 1 ;\nstd :: cout << expl ( 1.0 ) ;\n}"
  code_expl always "void f(long double x) {\n std::cout << expl(x);\n std::cout << expl(-1.0);\n std::cout << expl(0.0);\n std::cout << expl(1.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  891 always 891
Line 896
  86 always 86
  = always "void f(int x) {\n std::cout << erf(x);\n std::cout << erf(10);\n std::cout << erf(0L);\n}"
  "void f(int x) {\n std::cout << erf(x);\n std::cout << erf(10);\n std::cout << erf(0L);\n}" always "void f(int x) {\n std::cout << erf(x);\n std::cout << erf(10);\n std::cout << erf(0L);\n}"
Line 901
  95 always 95
  = always "void f ( int x ) {\nstd :: cout << erf ( x ) ;\nstd :: cout << erf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << erf ( x ) ;\nstd :: cout << erf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << erf ( x ) ;\nstd :: cout << erf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 906
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  906 always 906
  expected_erf always "void f ( int x ) {\nstd :: cout << erf ( x ) ;\nstd :: cout << erf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_erf always "void f(int x) {\n std::cout << erf(x);\n std::cout << erf(10);\n std::cout << erf(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  906 always 906
Line 908
  93 always 93
  = always "void f(float x) {\n std::cout << erff(x);\n std::cout << erff(10);\n std::cout << erff(0.0f);\n}"
  "void f(float x) {\n std::cout << erff(x);\n std::cout << erff(10);\n std::cout << erff(0.0f);\n}" always "void f(float x) {\n std::cout << erff(x);\n std::cout << erff(10);\n std::cout << erff(0.0f);\n}"
Line 913
  99 always 99
  = always "void f ( float x ) {\nstd :: cout << erff ( x ) ;\nstd :: cout << erff ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << erff ( x ) ;\nstd :: cout << erff ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << erff ( x ) ;\nstd :: cout << erff ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 918
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  918 always 918
  expected_erff always "void f ( float x ) {\nstd :: cout << erff ( x ) ;\nstd :: cout << erff ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_erff always "void f(float x) {\n std::cout << erff(x);\n std::cout << erff(10);\n std::cout << erff(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  918 always 918
Line 920
  102 always 102
  = always "void f(long double x) {\n std::cout << erfl(x);\n std::cout << erfl(10.0f);\n std::cout << erfl(0.0f);\n}"
  "void f(long double x) {\n std::cout << erfl(x);\n std::cout << erfl(10.0f);\n std::cout << erfl(0.0f);\n}" always "void f(long double x) {\n std::cout << erfl(x);\n std::cout << erfl(10.0f);\n std::cout << erfl(0.0f);\n}"
Line 925
  103 always 103
  = always "void f ( double x ) {\nstd :: cout << erfl ( x ) ;\nstd :: cout << erfl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << erfl ( x ) ;\nstd :: cout << erfl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << erfl ( x ) ;\nstd :: cout << erfl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 930
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  930 always 930
  expected_erfl always "void f ( double x ) {\nstd :: cout << erfl ( x ) ;\nstd :: cout << erfl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_erfl always "void f(long double x) {\n std::cout << erfl(x);\n std::cout << erfl(10.0f);\n std::cout << erfl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  930 always 930
Line 935
  92 always 92
  = always "void f(int x) {\n std::cout << atanh(x);\n std::cout << atanh(10);\n std::cout << atanh(0L);\n}"
  "void f(int x) {\n std::cout << atanh(x);\n std::cout << atanh(10);\n std::cout << atanh(0L);\n}" always "void f(int x) {\n std::cout << atanh(x);\n std::cout << atanh(10);\n std::cout << atanh(0L);\n}"
Line 940
  99 always 99
  = always "void f ( int x ) {\nstd :: cout << atanh ( x ) ;\nstd :: cout << atanh ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << atanh ( x ) ;\nstd :: cout << atanh ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << atanh ( x ) ;\nstd :: cout << atanh ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 945
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  945 always 945
  expected_atanh always "void f ( int x ) {\nstd :: cout << atanh ( x ) ;\nstd :: cout << atanh ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_atanh always "void f(int x) {\n std::cout << atanh(x);\n std::cout << atanh(10);\n std::cout << atanh(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  945 always 945
Line 947
  99 always 99
  = always "void f(float x) {\n std::cout << atanhf(x);\n std::cout << atanhf(10);\n std::cout << atanhf(0.0f);\n}"
  "void f(float x) {\n std::cout << atanhf(x);\n std::cout << atanhf(10);\n std::cout << atanhf(0.0f);\n}" always "void f(float x) {\n std::cout << atanhf(x);\n std::cout << atanhf(10);\n std::cout << atanhf(0.0f);\n}"
Line 952
  103 always 103
  = always "void f ( float x ) {\nstd :: cout << atanhf ( x ) ;\nstd :: cout << atanhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << atanhf ( x ) ;\nstd :: cout << atanhf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << atanhf ( x ) ;\nstd :: cout << atanhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 957
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  957 always 957
  expected_atanhf always "void f ( float x ) {\nstd :: cout << atanhf ( x ) ;\nstd :: cout << atanhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_atanhf always "void f(float x) {\n std::cout << atanhf(x);\n std::cout << atanhf(10);\n std::cout << atanhf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  957 always 957
Line 959
  136 always 136
  = always "void f(long double x) {\n std::cout << atanhl(x);\n std::cout << atanhl(10.0f);\n std::cout << atanhl(0.0d);\n std::cout << atanhl(0.0f);\n}"
  "void f(long double x) {\n std::cout << atanhl(x);\n std::cout << atanhl(10.0f);\n std::cout << atanhl(0.0d);\n std::cout << atanhl(0.0f);\n}" always "void f(long double x) {\n std::cout << atanhl(x);\n std::cout << atanhl(10.0f);\n std::cout << atanhl(0.0d);\n std::cout << atanhl(0.0f);\n}"
Line 965
  140 always 140
  = always "void f ( double x ) {\nstd :: cout << atanhl ( x ) ;\nstd :: cout << atanhl ( 10.0f ) ;\nstd :: cout << atanhl ( 0.0d ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << atanhl ( x ) ;\nstd :: cout << atanhl ( 10.0f ) ;\nstd :: cout << atanhl ( 0.0d ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << atanhl ( x ) ;\nstd :: cout << atanhl ( 10.0f ) ;\nstd :: cout << atanhl ( 0.0d ) ;\nstd :: cout << 0 ;\n}"
Line 971
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  971 always 971
  expected_atanhl always "void f ( double x ) {\nstd :: cout << atanhl ( x ) ;\nstd :: cout << atanhl ( 10.0f ) ;\nstd :: cout << atanhl ( 0.0d ) ;\nstd :: cout << 0 ;\n}"
  code_atanhl always "void f(long double x) {\n std::cout << atanhl(x);\n std::cout << atanhl(10.0f);\n std::cout << atanhl(0.0d);\n std::cout << atanhl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  971 always 971
Line 976
  89 always 89
  = always "void f(int x) {\n std::cout << atan(x);\n std::cout << atan(10);\n std::cout << atan(0L);\n}"
  "void f(int x) {\n std::cout << atan(x);\n std::cout << atan(10);\n std::cout << atan(0L);\n}" always "void f(int x) {\n std::cout << atan(x);\n std::cout << atan(10);\n std::cout << atan(0L);\n}"
Line 981
  97 always 97
  = always "void f ( int x ) {\nstd :: cout << atan ( x ) ;\nstd :: cout << atan ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << atan ( x ) ;\nstd :: cout << atan ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << atan ( x ) ;\nstd :: cout << atan ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 986
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  986 always 986
  expected_atan always "void f ( int x ) {\nstd :: cout << atan ( x ) ;\nstd :: cout << atan ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_atan always "void f(int x) {\n std::cout << atan(x);\n std::cout << atan(10);\n std::cout << atan(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  986 always 986
Line 988
  96 always 96
  = always "void f(float x) {\n std::cout << atanf(x);\n std::cout << atanf(10);\n std::cout << atanf(0.0f);\n}"
  "void f(float x) {\n std::cout << atanf(x);\n std::cout << atanf(10);\n std::cout << atanf(0.0f);\n}" always "void f(float x) {\n std::cout << atanf(x);\n std::cout << atanf(10);\n std::cout << atanf(0.0f);\n}"
Line 993
  101 always 101
  = always "void f ( float x ) {\nstd :: cout << atanf ( x ) ;\nstd :: cout << atanf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << atanf ( x ) ;\nstd :: cout << atanf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << atanf ( x ) ;\nstd :: cout << atanf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 998
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  998 always 998
  expected_atanf always "void f ( float x ) {\nstd :: cout << atanf ( x ) ;\nstd :: cout << atanf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_atanf always "void f(float x) {\n std::cout << atanf(x);\n std::cout << atanf(10);\n std::cout << atanf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  998 always 998
Line 1000
  105 always 105
  = always "void f(long double x) {\n std::cout << atanl(x);\n std::cout << atanl(10.0f);\n std::cout << atanl(0.0f);\n}"
  "void f(long double x) {\n std::cout << atanl(x);\n std::cout << atanl(10.0f);\n std::cout << atanl(0.0f);\n}" always "void f(long double x) {\n std::cout << atanl(x);\n std::cout << atanl(10.0f);\n std::cout << atanl(0.0f);\n}"
Line 1005
  105 always 105
  = always "void f ( double x ) {\nstd :: cout << atanl ( x ) ;\nstd :: cout << atanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << atanl ( x ) ;\nstd :: cout << atanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << atanl ( x ) ;\nstd :: cout << atanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1010
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1010 always 1010
  expected_atanl always "void f ( double x ) {\nstd :: cout << atanl ( x ) ;\nstd :: cout << atanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_atanl always "void f(long double x) {\n std::cout << atanl(x);\n std::cout << atanl(10.0f);\n std::cout << atanl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1010 always 1010
Line 1015
  89 always 89
  = always "void f(int x) {\n std::cout << tanh(x);\n std::cout << tanh(10);\n std::cout << tanh(0L);\n}"
  "void f(int x) {\n std::cout << tanh(x);\n std::cout << tanh(10);\n std::cout << tanh(0L);\n}" always "void f(int x) {\n std::cout << tanh(x);\n std::cout << tanh(10);\n std::cout << tanh(0L);\n}"
Line 1020
  97 always 97
  = always "void f ( int x ) {\nstd :: cout << tanh ( x ) ;\nstd :: cout << tanh ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << tanh ( x ) ;\nstd :: cout << tanh ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << tanh ( x ) ;\nstd :: cout << tanh ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1025
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1025 always 1025
  expected_tanh always "void f ( int x ) {\nstd :: cout << tanh ( x ) ;\nstd :: cout << tanh ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_tanh always "void f(int x) {\n std::cout << tanh(x);\n std::cout << tanh(10);\n std::cout << tanh(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1025 always 1025
Line 1027
  96 always 96
  = always "void f(float x) {\n std::cout << tanhf(x);\n std::cout << tanhf(10);\n std::cout << tanhf(0.0f);\n}"
  "void f(float x) {\n std::cout << tanhf(x);\n std::cout << tanhf(10);\n std::cout << tanhf(0.0f);\n}" always "void f(float x) {\n std::cout << tanhf(x);\n std::cout << tanhf(10);\n std::cout << tanhf(0.0f);\n}"
Line 1032
  101 always 101
  = always "void f ( float x ) {\nstd :: cout << tanhf ( x ) ;\nstd :: cout << tanhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << tanhf ( x ) ;\nstd :: cout << tanhf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << tanhf ( x ) ;\nstd :: cout << tanhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1037
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1037 always 1037
  expected_tanhf always "void f ( float x ) {\nstd :: cout << tanhf ( x ) ;\nstd :: cout << tanhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_tanhf always "void f(float x) {\n std::cout << tanhf(x);\n std::cout << tanhf(10);\n std::cout << tanhf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1037 always 1037
Line 1039
  105 always 105
  = always "void f(long double x) {\n std::cout << tanhl(x);\n std::cout << tanhl(10.0f);\n std::cout << tanhl(0.0f);\n}"
  "void f(long double x) {\n std::cout << tanhl(x);\n std::cout << tanhl(10.0f);\n std::cout << tanhl(0.0f);\n}" always "void f(long double x) {\n std::cout << tanhl(x);\n std::cout << tanhl(10.0f);\n std::cout << tanhl(0.0f);\n}"
Line 1044
  105 always 105
  = always "void f ( double x ) {\nstd :: cout << tanhl ( x ) ;\nstd :: cout << tanhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << tanhl ( x ) ;\nstd :: cout << tanhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << tanhl ( x ) ;\nstd :: cout << tanhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1049
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1049 always 1049
  expected_tanhl always "void f ( double x ) {\nstd :: cout << tanhl ( x ) ;\nstd :: cout << tanhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_tanhl always "void f(long double x) {\n std::cout << tanhl(x);\n std::cout << tanhl(10.0f);\n std::cout << tanhl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1049 always 1049
Line 1054
  86 always 86
  = always "void f(int x) {\n std::cout << tan(x);\n std::cout << tan(10);\n std::cout << tan(0L);\n}"
  "void f(int x) {\n std::cout << tan(x);\n std::cout << tan(10);\n std::cout << tan(0L);\n}" always "void f(int x) {\n std::cout << tan(x);\n std::cout << tan(10);\n std::cout << tan(0L);\n}"
Line 1059
  95 always 95
  = always "void f ( int x ) {\nstd :: cout << tan ( x ) ;\nstd :: cout << tan ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << tan ( x ) ;\nstd :: cout << tan ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << tan ( x ) ;\nstd :: cout << tan ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1064
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1064 always 1064
  expected_tan always "void f ( int x ) {\nstd :: cout << tan ( x ) ;\nstd :: cout << tan ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_tan always "void f(int x) {\n std::cout << tan(x);\n std::cout << tan(10);\n std::cout << tan(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1064 always 1064
Line 1066
  93 always 93
  = always "void f(float x) {\n std::cout << tanf(x);\n std::cout << tanf(10);\n std::cout << tanf(0.0f);\n}"
  "void f(float x) {\n std::cout << tanf(x);\n std::cout << tanf(10);\n std::cout << tanf(0.0f);\n}" always "void f(float x) {\n std::cout << tanf(x);\n std::cout << tanf(10);\n std::cout << tanf(0.0f);\n}"
Line 1071
  99 always 99
  = always "void f ( float x ) {\nstd :: cout << tanf ( x ) ;\nstd :: cout << tanf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << tanf ( x ) ;\nstd :: cout << tanf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << tanf ( x ) ;\nstd :: cout << tanf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1076
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1076 always 1076
  expected_tanf always "void f ( float x ) {\nstd :: cout << tanf ( x ) ;\nstd :: cout << tanf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_tanf always "void f(float x) {\n std::cout << tanf(x);\n std::cout << tanf(10);\n std::cout << tanf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1076 always 1076
Line 1078
  102 always 102
  = always "void f(long double x) {\n std::cout << tanl(x);\n std::cout << tanl(10.0f);\n std::cout << tanl(0.0f);\n}"
  "void f(long double x) {\n std::cout << tanl(x);\n std::cout << tanl(10.0f);\n std::cout << tanl(0.0f);\n}" always "void f(long double x) {\n std::cout << tanl(x);\n std::cout << tanl(10.0f);\n std::cout << tanl(0.0f);\n}"
Line 1083
  103 always 103
  = always "void f ( double x ) {\nstd :: cout << tanl ( x ) ;\nstd :: cout << tanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << tanl ( x ) ;\nstd :: cout << tanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << tanl ( x ) ;\nstd :: cout << tanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1088
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1088 always 1088
  expected_tanl always "void f ( double x ) {\nstd :: cout << tanl ( x ) ;\nstd :: cout << tanl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_tanl always "void f(long double x) {\n std::cout << tanl(x);\n std::cout << tanl(10.0f);\n std::cout << tanl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1088 always 1088
Line 1093
  92 always 92
  = always "void f(int x) {\n std::cout << expm1(x);\n std::cout << expm1(10);\n std::cout << expm1(0L);\n}"
  "void f(int x) {\n std::cout << expm1(x);\n std::cout << expm1(10);\n std::cout << expm1(0L);\n}" always "void f(int x) {\n std::cout << expm1(x);\n std::cout << expm1(10);\n std::cout << expm1(0L);\n}"
Line 1098
  99 always 99
  = always "void f ( int x ) {\nstd :: cout << expm1 ( x ) ;\nstd :: cout << expm1 ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << expm1 ( x ) ;\nstd :: cout << expm1 ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << expm1 ( x ) ;\nstd :: cout << expm1 ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1103
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1103 always 1103
  expected_expm1 always "void f ( int x ) {\nstd :: cout << expm1 ( x ) ;\nstd :: cout << expm1 ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_expm1 always "void f(int x) {\n std::cout << expm1(x);\n std::cout << expm1(10);\n std::cout << expm1(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1103 always 1103
Line 1105
  99 always 99
  = always "void f(float x) {\n std::cout << expm1f(x);\n std::cout << expm1f(10);\n std::cout << expm1f(0.0f);\n}"
  "void f(float x) {\n std::cout << expm1f(x);\n std::cout << expm1f(10);\n std::cout << expm1f(0.0f);\n}" always "void f(float x) {\n std::cout << expm1f(x);\n std::cout << expm1f(10);\n std::cout << expm1f(0.0f);\n}"
Line 1110
  103 always 103
  = always "void f ( float x ) {\nstd :: cout << expm1f ( x ) ;\nstd :: cout << expm1f ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << expm1f ( x ) ;\nstd :: cout << expm1f ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << expm1f ( x ) ;\nstd :: cout << expm1f ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1115
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1115 always 1115
  expected_expm1f always "void f ( float x ) {\nstd :: cout << expm1f ( x ) ;\nstd :: cout << expm1f ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_expm1f always "void f(float x) {\n std::cout << expm1f(x);\n std::cout << expm1f(10);\n std::cout << expm1f(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1115 always 1115
Line 1117
  108 always 108
  = always "void f(long double x) {\n std::cout << expm1l(x);\n std::cout << expm1l(10.0f);\n std::cout << expm1l(0.0f);\n}"
  "void f(long double x) {\n std::cout << expm1l(x);\n std::cout << expm1l(10.0f);\n std::cout << expm1l(0.0f);\n}" always "void f(long double x) {\n std::cout << expm1l(x);\n std::cout << expm1l(10.0f);\n std::cout << expm1l(0.0f);\n}"
Line 1122
  107 always 107
  = always "void f ( double x ) {\nstd :: cout << expm1l ( x ) ;\nstd :: cout << expm1l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << expm1l ( x ) ;\nstd :: cout << expm1l ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << expm1l ( x ) ;\nstd :: cout << expm1l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1127
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1127 always 1127
  expected_expm1l always "void f ( double x ) {\nstd :: cout << expm1l ( x ) ;\nstd :: cout << expm1l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_expm1l always "void f(long double x) {\n std::cout << expm1l(x);\n std::cout << expm1l(10.0f);\n std::cout << expm1l(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1127 always 1127
Line 1132
  92 always 92
  = always "void f(int x) {\n std::cout << asinh(x);\n std::cout << asinh(10);\n std::cout << asinh(0L);\n}"
  "void f(int x) {\n std::cout << asinh(x);\n std::cout << asinh(10);\n std::cout << asinh(0L);\n}" always "void f(int x) {\n std::cout << asinh(x);\n std::cout << asinh(10);\n std::cout << asinh(0L);\n}"
Line 1137
  99 always 99
  = always "void f ( int x ) {\nstd :: cout << asinh ( x ) ;\nstd :: cout << asinh ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << asinh ( x ) ;\nstd :: cout << asinh ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << asinh ( x ) ;\nstd :: cout << asinh ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1142
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1142 always 1142
  expected_asinh always "void f ( int x ) {\nstd :: cout << asinh ( x ) ;\nstd :: cout << asinh ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_asinh always "void f(int x) {\n std::cout << asinh(x);\n std::cout << asinh(10);\n std::cout << asinh(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1142 always 1142
Line 1144
  99 always 99
  = always "void f(float x) {\n std::cout << asinhf(x);\n std::cout << asinhf(10);\n std::cout << asinhf(0.0f);\n}"
  "void f(float x) {\n std::cout << asinhf(x);\n std::cout << asinhf(10);\n std::cout << asinhf(0.0f);\n}" always "void f(float x) {\n std::cout << asinhf(x);\n std::cout << asinhf(10);\n std::cout << asinhf(0.0f);\n}"
Line 1149
  103 always 103
  = always "void f ( float x ) {\nstd :: cout << asinhf ( x ) ;\nstd :: cout << asinhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << asinhf ( x ) ;\nstd :: cout << asinhf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << asinhf ( x ) ;\nstd :: cout << asinhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1154
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1154 always 1154
  expected_asinhf always "void f ( float x ) {\nstd :: cout << asinhf ( x ) ;\nstd :: cout << asinhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_asinhf always "void f(float x) {\n std::cout << asinhf(x);\n std::cout << asinhf(10);\n std::cout << asinhf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1154 always 1154
Line 1156
  108 always 108
  = always "void f(long double x) {\n std::cout << asinhl(x);\n std::cout << asinhl(10.0f);\n std::cout << asinhl(0.0f);\n}"
  "void f(long double x) {\n std::cout << asinhl(x);\n std::cout << asinhl(10.0f);\n std::cout << asinhl(0.0f);\n}" always "void f(long double x) {\n std::cout << asinhl(x);\n std::cout << asinhl(10.0f);\n std::cout << asinhl(0.0f);\n}"
Line 1161
  107 always 107
  = always "void f ( double x ) {\nstd :: cout << asinhl ( x ) ;\nstd :: cout << asinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << asinhl ( x ) ;\nstd :: cout << asinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << asinhl ( x ) ;\nstd :: cout << asinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1166
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1166 always 1166
  expected_asinhl always "void f ( double x ) {\nstd :: cout << asinhl ( x ) ;\nstd :: cout << asinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_asinhl always "void f(long double x) {\n std::cout << asinhl(x);\n std::cout << asinhl(10.0f);\n std::cout << asinhl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1166 always 1166
Line 1171
  89 always 89
  = always "void f(int x) {\n std::cout << asin(x);\n std::cout << asin(10);\n std::cout << asin(0L);\n}"
  "void f(int x) {\n std::cout << asin(x);\n std::cout << asin(10);\n std::cout << asin(0L);\n}" always "void f(int x) {\n std::cout << asin(x);\n std::cout << asin(10);\n std::cout << asin(0L);\n}"
Line 1176
  97 always 97
  = always "void f ( int x ) {\nstd :: cout << asin ( x ) ;\nstd :: cout << asin ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << asin ( x ) ;\nstd :: cout << asin ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << asin ( x ) ;\nstd :: cout << asin ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1181
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1181 always 1181
  expected_asin always "void f ( int x ) {\nstd :: cout << asin ( x ) ;\nstd :: cout << asin ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_asin always "void f(int x) {\n std::cout << asin(x);\n std::cout << asin(10);\n std::cout << asin(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1181 always 1181
Line 1183
  96 always 96
  = always "void f(float x) {\n std::cout << asinf(x);\n std::cout << asinf(10);\n std::cout << asinf(0.0f);\n}"
  "void f(float x) {\n std::cout << asinf(x);\n std::cout << asinf(10);\n std::cout << asinf(0.0f);\n}" always "void f(float x) {\n std::cout << asinf(x);\n std::cout << asinf(10);\n std::cout << asinf(0.0f);\n}"
Line 1188
  101 always 101
  = always "void f ( float x ) {\nstd :: cout << asinf ( x ) ;\nstd :: cout << asinf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << asinf ( x ) ;\nstd :: cout << asinf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << asinf ( x ) ;\nstd :: cout << asinf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1193
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1193 always 1193
  expected_asinf always "void f ( float x ) {\nstd :: cout << asinf ( x ) ;\nstd :: cout << asinf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_asinf always "void f(float x) {\n std::cout << asinf(x);\n std::cout << asinf(10);\n std::cout << asinf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1193 always 1193
Line 1195
  105 always 105
  = always "void f(long double x) {\n std::cout << asinl(x);\n std::cout << asinl(10.0f);\n std::cout << asinl(0.0f);\n}"
  "void f(long double x) {\n std::cout << asinl(x);\n std::cout << asinl(10.0f);\n std::cout << asinl(0.0f);\n}" always "void f(long double x) {\n std::cout << asinl(x);\n std::cout << asinl(10.0f);\n std::cout << asinl(0.0f);\n}"
Line 1200
  105 always 105
  = always "void f ( double x ) {\nstd :: cout << asinl ( x ) ;\nstd :: cout << asinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << asinl ( x ) ;\nstd :: cout << asinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << asinl ( x ) ;\nstd :: cout << asinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1205
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1205 always 1205
  expected_asinl always "void f ( double x ) {\nstd :: cout << asinl ( x ) ;\nstd :: cout << asinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_asinl always "void f(long double x) {\n std::cout << asinl(x);\n std::cout << asinl(10.0f);\n std::cout << asinl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1205 always 1205
Line 1210
  89 always 89
  = always "void f(int x) {\n std::cout << sinh(x);\n std::cout << sinh(10);\n std::cout << sinh(0L);\n}"
  "void f(int x) {\n std::cout << sinh(x);\n std::cout << sinh(10);\n std::cout << sinh(0L);\n}" always "void f(int x) {\n std::cout << sinh(x);\n std::cout << sinh(10);\n std::cout << sinh(0L);\n}"
Line 1215
  97 always 97
  = always "void f ( int x ) {\nstd :: cout << sinh ( x ) ;\nstd :: cout << sinh ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << sinh ( x ) ;\nstd :: cout << sinh ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << sinh ( x ) ;\nstd :: cout << sinh ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1220
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1220 always 1220
  expected_sinh always "void f ( int x ) {\nstd :: cout << sinh ( x ) ;\nstd :: cout << sinh ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_sinh always "void f(int x) {\n std::cout << sinh(x);\n std::cout << sinh(10);\n std::cout << sinh(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1220 always 1220
Line 1222
  96 always 96
  = always "void f(float x) {\n std::cout << sinhf(x);\n std::cout << sinhf(10);\n std::cout << sinhf(0.0f);\n}"
  "void f(float x) {\n std::cout << sinhf(x);\n std::cout << sinhf(10);\n std::cout << sinhf(0.0f);\n}" always "void f(float x) {\n std::cout << sinhf(x);\n std::cout << sinhf(10);\n std::cout << sinhf(0.0f);\n}"
Line 1227
  101 always 101
  = always "void f ( float x ) {\nstd :: cout << sinhf ( x ) ;\nstd :: cout << sinhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << sinhf ( x ) ;\nstd :: cout << sinhf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << sinhf ( x ) ;\nstd :: cout << sinhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1232
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1232 always 1232
  expected_sinhf always "void f ( float x ) {\nstd :: cout << sinhf ( x ) ;\nstd :: cout << sinhf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_sinhf always "void f(float x) {\n std::cout << sinhf(x);\n std::cout << sinhf(10);\n std::cout << sinhf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1232 always 1232
Line 1234
  105 always 105
  = always "void f(long double x) {\n std::cout << sinhl(x);\n std::cout << sinhl(10.0f);\n std::cout << sinhl(0.0f);\n}"
  "void f(long double x) {\n std::cout << sinhl(x);\n std::cout << sinhl(10.0f);\n std::cout << sinhl(0.0f);\n}" always "void f(long double x) {\n std::cout << sinhl(x);\n std::cout << sinhl(10.0f);\n std::cout << sinhl(0.0f);\n}"
Line 1239
  105 always 105
  = always "void f ( double x ) {\nstd :: cout << sinhl ( x ) ;\nstd :: cout << sinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << sinhl ( x ) ;\nstd :: cout << sinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << sinhl ( x ) ;\nstd :: cout << sinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1244
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1244 always 1244
  expected_sinhl always "void f ( double x ) {\nstd :: cout << sinhl ( x ) ;\nstd :: cout << sinhl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_sinhl always "void f(long double x) {\n std::cout << sinhl(x);\n std::cout << sinhl(10.0f);\n std::cout << sinhl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1244 always 1244
Line 1249
  86 always 86
  = always "void f(int x) {\n std::cout << sin(x);\n std::cout << sin(10);\n std::cout << sin(0L);\n}"
  "void f(int x) {\n std::cout << sin(x);\n std::cout << sin(10);\n std::cout << sin(0L);\n}" always "void f(int x) {\n std::cout << sin(x);\n std::cout << sin(10);\n std::cout << sin(0L);\n}"
Line 1254
  95 always 95
  = always "void f ( int x ) {\nstd :: cout << sin ( x ) ;\nstd :: cout << sin ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << sin ( x ) ;\nstd :: cout << sin ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << sin ( x ) ;\nstd :: cout << sin ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1259
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1259 always 1259
  expected_sin always "void f ( int x ) {\nstd :: cout << sin ( x ) ;\nstd :: cout << sin ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_sin always "void f(int x) {\n std::cout << sin(x);\n std::cout << sin(10);\n std::cout << sin(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1259 always 1259
Line 1261
  93 always 93
  = always "void f(float x) {\n std::cout << sinf(x);\n std::cout << sinf(10);\n std::cout << sinf(0.0f);\n}"
  "void f(float x) {\n std::cout << sinf(x);\n std::cout << sinf(10);\n std::cout << sinf(0.0f);\n}" always "void f(float x) {\n std::cout << sinf(x);\n std::cout << sinf(10);\n std::cout << sinf(0.0f);\n}"
Line 1266
  99 always 99
  = always "void f ( float x ) {\nstd :: cout << sinf ( x ) ;\nstd :: cout << sinf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << sinf ( x ) ;\nstd :: cout << sinf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << sinf ( x ) ;\nstd :: cout << sinf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1271
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1271 always 1271
  expected_sinf always "void f ( float x ) {\nstd :: cout << sinf ( x ) ;\nstd :: cout << sinf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_sinf always "void f(float x) {\n std::cout << sinf(x);\n std::cout << sinf(10);\n std::cout << sinf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1271 always 1271
Line 1273
  102 always 102
  = always "void f(long double x) {\n std::cout << sinl(x);\n std::cout << sinl(10.0f);\n std::cout << sinl(0.0f);\n}"
  "void f(long double x) {\n std::cout << sinl(x);\n std::cout << sinl(10.0f);\n std::cout << sinl(0.0f);\n}" always "void f(long double x) {\n std::cout << sinl(x);\n std::cout << sinl(10.0f);\n std::cout << sinl(0.0f);\n}"
Line 1278
  103 always 103
  = always "void f ( double x ) {\nstd :: cout << sinl ( x ) ;\nstd :: cout << sinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << sinl ( x ) ;\nstd :: cout << sinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << sinl ( x ) ;\nstd :: cout << sinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1283
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1283 always 1283
  expected_sinl always "void f ( double x ) {\nstd :: cout << sinl ( x ) ;\nstd :: cout << sinl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_sinl always "void f(long double x) {\n std::cout << sinl(x);\n std::cout << sinl(10.0f);\n std::cout << sinl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1283 always 1283
Line 1286
  44 always 44
  = always "class Foo { int sinf; Foo() : sinf(0) {} };"
  "class Foo { int sinf; Foo() : sinf(0) {} };" always "class Foo { int sinf; Foo() : sinf(0) {} };"
Line 1287
  52 always 52
  = always "class Foo { int sinf ; Foo ( ) : sinf ( 0 ) { } } ;"
  "class Foo { int sinf ; Foo ( ) : sinf ( 0 ) { } } ;" always "class Foo { int sinf ; Foo ( ) : sinf ( 0 ) { } } ;"
Line 1288
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1288 always 1288
  expected always "class Foo { int sinf ; Foo ( ) : sinf ( 0 ) { } } ;"
  code always "class Foo { int sinf; Foo() : sinf(0) {} };"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1288 always 1288
Line 1293
  92 always 92
  = always "void f(int x) {\n std::cout << ilogb(x);\n std::cout << ilogb(10);\n std::cout << ilogb(1L);\n}"
  "void f(int x) {\n std::cout << ilogb(x);\n std::cout << ilogb(10);\n std::cout << ilogb(1L);\n}" always "void f(int x) {\n std::cout << ilogb(x);\n std::cout << ilogb(10);\n std::cout << ilogb(1L);\n}"
Line 1298
  99 always 99
  = always "void f ( int x ) {\nstd :: cout << ilogb ( x ) ;\nstd :: cout << ilogb ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << ilogb ( x ) ;\nstd :: cout << ilogb ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << ilogb ( x ) ;\nstd :: cout << ilogb ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1303
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1303 always 1303
  expected_ilogb always "void f ( int x ) {\nstd :: cout << ilogb ( x ) ;\nstd :: cout << ilogb ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_ilogb always "void f(int x) {\n std::cout << ilogb(x);\n std::cout << ilogb(10);\n std::cout << ilogb(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1303 always 1303
Line 1305
  99 always 99
  = always "void f(float x) {\n std::cout << ilogbf(x);\n std::cout << ilogbf(10);\n std::cout << ilogbf(1.0f);\n}"
  "void f(float x) {\n std::cout << ilogbf(x);\n std::cout << ilogbf(10);\n std::cout << ilogbf(1.0f);\n}" always "void f(float x) {\n std::cout << ilogbf(x);\n std::cout << ilogbf(10);\n std::cout << ilogbf(1.0f);\n}"
Line 1310
  103 always 103
  = always "void f ( float x ) {\nstd :: cout << ilogbf ( x ) ;\nstd :: cout << ilogbf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << ilogbf ( x ) ;\nstd :: cout << ilogbf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << ilogbf ( x ) ;\nstd :: cout << ilogbf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1315
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1315 always 1315
  expected_ilogbf always "void f ( float x ) {\nstd :: cout << ilogbf ( x ) ;\nstd :: cout << ilogbf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_ilogbf always "void f(float x) {\n std::cout << ilogbf(x);\n std::cout << ilogbf(10);\n std::cout << ilogbf(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1315 always 1315
Line 1317
  108 always 108
  = always "void f(long double x) {\n std::cout << ilogbl(x);\n std::cout << ilogbl(10.0f);\n std::cout << ilogbl(1.0f);\n}"
  "void f(long double x) {\n std::cout << ilogbl(x);\n std::cout << ilogbl(10.0f);\n std::cout << ilogbl(1.0f);\n}" always "void f(long double x) {\n std::cout << ilogbl(x);\n std::cout << ilogbl(10.0f);\n std::cout << ilogbl(1.0f);\n}"
Line 1322
  107 always 107
  = always "void f ( double x ) {\nstd :: cout << ilogbl ( x ) ;\nstd :: cout << ilogbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << ilogbl ( x ) ;\nstd :: cout << ilogbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << ilogbl ( x ) ;\nstd :: cout << ilogbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1327
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1327 always 1327
  expected_ilogbl always "void f ( double x ) {\nstd :: cout << ilogbl ( x ) ;\nstd :: cout << ilogbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_ilogbl always "void f(long double x) {\n std::cout << ilogbl(x);\n std::cout << ilogbl(10.0f);\n std::cout << ilogbl(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1327 always 1327
Line 1332
  89 always 89
  = always "void f(int x) {\n std::cout << logb(x);\n std::cout << logb(10);\n std::cout << logb(1L);\n}"
  "void f(int x) {\n std::cout << logb(x);\n std::cout << logb(10);\n std::cout << logb(1L);\n}" always "void f(int x) {\n std::cout << logb(x);\n std::cout << logb(10);\n std::cout << logb(1L);\n}"
Line 1337
  97 always 97
  = always "void f ( int x ) {\nstd :: cout << logb ( x ) ;\nstd :: cout << logb ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << logb ( x ) ;\nstd :: cout << logb ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << logb ( x ) ;\nstd :: cout << logb ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1342
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1342 always 1342
  expected_logb always "void f ( int x ) {\nstd :: cout << logb ( x ) ;\nstd :: cout << logb ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_logb always "void f(int x) {\n std::cout << logb(x);\n std::cout << logb(10);\n std::cout << logb(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1342 always 1342
Line 1344
  96 always 96
  = always "void f(float x) {\n std::cout << logbf(x);\n std::cout << logbf(10);\n std::cout << logbf(1.0f);\n}"
  "void f(float x) {\n std::cout << logbf(x);\n std::cout << logbf(10);\n std::cout << logbf(1.0f);\n}" always "void f(float x) {\n std::cout << logbf(x);\n std::cout << logbf(10);\n std::cout << logbf(1.0f);\n}"
Line 1349
  101 always 101
  = always "void f ( float x ) {\nstd :: cout << logbf ( x ) ;\nstd :: cout << logbf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << logbf ( x ) ;\nstd :: cout << logbf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << logbf ( x ) ;\nstd :: cout << logbf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1354
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1354 always 1354
  expected_logbf always "void f ( float x ) {\nstd :: cout << logbf ( x ) ;\nstd :: cout << logbf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_logbf always "void f(float x) {\n std::cout << logbf(x);\n std::cout << logbf(10);\n std::cout << logbf(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1354 always 1354
Line 1356
  105 always 105
  = always "void f(long double x) {\n std::cout << logbl(x);\n std::cout << logbl(10.0f);\n std::cout << logbl(1.0f);\n}"
  "void f(long double x) {\n std::cout << logbl(x);\n std::cout << logbl(10.0f);\n std::cout << logbl(1.0f);\n}" always "void f(long double x) {\n std::cout << logbl(x);\n std::cout << logbl(10.0f);\n std::cout << logbl(1.0f);\n}"
Line 1361
  105 always 105
  = always "void f ( double x ) {\nstd :: cout << logbl ( x ) ;\nstd :: cout << logbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << logbl ( x ) ;\nstd :: cout << logbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << logbl ( x ) ;\nstd :: cout << logbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1366
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1366 always 1366
  expected_logbl always "void f ( double x ) {\nstd :: cout << logbl ( x ) ;\nstd :: cout << logbl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_logbl always "void f(long double x) {\n std::cout << logbl(x);\n std::cout << logbl(10.0f);\n std::cout << logbl(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1366 always 1366
Line 1371
  92 always 92
  = always "void f(int x) {\n std::cout << log1p(x);\n std::cout << log1p(10);\n std::cout << log1p(0L);\n}"
  "void f(int x) {\n std::cout << log1p(x);\n std::cout << log1p(10);\n std::cout << log1p(0L);\n}" always "void f(int x) {\n std::cout << log1p(x);\n std::cout << log1p(10);\n std::cout << log1p(0L);\n}"
Line 1376
  99 always 99
  = always "void f ( int x ) {\nstd :: cout << log1p ( x ) ;\nstd :: cout << log1p ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << log1p ( x ) ;\nstd :: cout << log1p ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << log1p ( x ) ;\nstd :: cout << log1p ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1381
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1381 always 1381
  expected_log1p always "void f ( int x ) {\nstd :: cout << log1p ( x ) ;\nstd :: cout << log1p ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_log1p always "void f(int x) {\n std::cout << log1p(x);\n std::cout << log1p(10);\n std::cout << log1p(0L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1381 always 1381
Line 1383
  99 always 99
  = always "void f(float x) {\n std::cout << log1pf(x);\n std::cout << log1pf(10);\n std::cout << log1pf(0.0f);\n}"
  "void f(float x) {\n std::cout << log1pf(x);\n std::cout << log1pf(10);\n std::cout << log1pf(0.0f);\n}" always "void f(float x) {\n std::cout << log1pf(x);\n std::cout << log1pf(10);\n std::cout << log1pf(0.0f);\n}"
Line 1388
  103 always 103
  = always "void f ( float x ) {\nstd :: cout << log1pf ( x ) ;\nstd :: cout << log1pf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << log1pf ( x ) ;\nstd :: cout << log1pf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << log1pf ( x ) ;\nstd :: cout << log1pf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1393
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1393 always 1393
  expected_log1pf always "void f ( float x ) {\nstd :: cout << log1pf ( x ) ;\nstd :: cout << log1pf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_log1pf always "void f(float x) {\n std::cout << log1pf(x);\n std::cout << log1pf(10);\n std::cout << log1pf(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1393 always 1393
Line 1395
  108 always 108
  = always "void f(long double x) {\n std::cout << log1pl(x);\n std::cout << log1pl(10.0f);\n std::cout << log1pl(0.0f);\n}"
  "void f(long double x) {\n std::cout << log1pl(x);\n std::cout << log1pl(10.0f);\n std::cout << log1pl(0.0f);\n}" always "void f(long double x) {\n std::cout << log1pl(x);\n std::cout << log1pl(10.0f);\n std::cout << log1pl(0.0f);\n}"
Line 1400
  107 always 107
  = always "void f ( double x ) {\nstd :: cout << log1pl ( x ) ;\nstd :: cout << log1pl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << log1pl ( x ) ;\nstd :: cout << log1pl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << log1pl ( x ) ;\nstd :: cout << log1pl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1405
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1405 always 1405
  expected_log1pl always "void f ( double x ) {\nstd :: cout << log1pl ( x ) ;\nstd :: cout << log1pl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_log1pl always "void f(long double x) {\n std::cout << log1pl(x);\n std::cout << log1pl(10.0f);\n std::cout << log1pl(0.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1405 always 1405
Line 1410
  92 always 92
  = always "void f(int x) {\n std::cout << log10(x);\n std::cout << log10(10);\n std::cout << log10(1L);\n}"
  "void f(int x) {\n std::cout << log10(x);\n std::cout << log10(10);\n std::cout << log10(1L);\n}" always "void f(int x) {\n std::cout << log10(x);\n std::cout << log10(10);\n std::cout << log10(1L);\n}"
Line 1415
  99 always 99
  = always "void f ( int x ) {\nstd :: cout << log10 ( x ) ;\nstd :: cout << log10 ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << log10 ( x ) ;\nstd :: cout << log10 ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << log10 ( x ) ;\nstd :: cout << log10 ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1420
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1420 always 1420
  expected_log10 always "void f ( int x ) {\nstd :: cout << log10 ( x ) ;\nstd :: cout << log10 ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_log10 always "void f(int x) {\n std::cout << log10(x);\n std::cout << log10(10);\n std::cout << log10(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1420 always 1420
Line 1422
  99 always 99
  = always "void f(float x) {\n std::cout << log10f(x);\n std::cout << log10f(10);\n std::cout << log10f(1.0f);\n}"
  "void f(float x) {\n std::cout << log10f(x);\n std::cout << log10f(10);\n std::cout << log10f(1.0f);\n}" always "void f(float x) {\n std::cout << log10f(x);\n std::cout << log10f(10);\n std::cout << log10f(1.0f);\n}"
Line 1427
  103 always 103
  = always "void f ( float x ) {\nstd :: cout << log10f ( x ) ;\nstd :: cout << log10f ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << log10f ( x ) ;\nstd :: cout << log10f ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << log10f ( x ) ;\nstd :: cout << log10f ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1432
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1432 always 1432
  expected_log10f always "void f ( float x ) {\nstd :: cout << log10f ( x ) ;\nstd :: cout << log10f ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_log10f always "void f(float x) {\n std::cout << log10f(x);\n std::cout << log10f(10);\n std::cout << log10f(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1432 always 1432
Line 1434
  108 always 108
  = always "void f(long double x) {\n std::cout << log10l(x);\n std::cout << log10l(10.0f);\n std::cout << log10l(1.0f);\n}"
  "void f(long double x) {\n std::cout << log10l(x);\n std::cout << log10l(10.0f);\n std::cout << log10l(1.0f);\n}" always "void f(long double x) {\n std::cout << log10l(x);\n std::cout << log10l(10.0f);\n std::cout << log10l(1.0f);\n}"
Line 1439
  107 always 107
  = always "void f ( double x ) {\nstd :: cout << log10l ( x ) ;\nstd :: cout << log10l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << log10l ( x ) ;\nstd :: cout << log10l ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << log10l ( x ) ;\nstd :: cout << log10l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1444
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1444 always 1444
  expected_log10l always "void f ( double x ) {\nstd :: cout << log10l ( x ) ;\nstd :: cout << log10l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_log10l always "void f(long double x) {\n std::cout << log10l(x);\n std::cout << log10l(10.0f);\n std::cout << log10l(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1444 always 1444
Line 1449
  86 always 86
  = always "void f(int x) {\n std::cout << log(x);\n std::cout << log(10);\n std::cout << log(1L);\n}"
  "void f(int x) {\n std::cout << log(x);\n std::cout << log(10);\n std::cout << log(1L);\n}" always "void f(int x) {\n std::cout << log(x);\n std::cout << log(10);\n std::cout << log(1L);\n}"
Line 1454
  95 always 95
  = always "void f ( int x ) {\nstd :: cout << log ( x ) ;\nstd :: cout << log ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << log ( x ) ;\nstd :: cout << log ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << log ( x ) ;\nstd :: cout << log ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1459
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1459 always 1459
  expected_log always "void f ( int x ) {\nstd :: cout << log ( x ) ;\nstd :: cout << log ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_log always "void f(int x) {\n std::cout << log(x);\n std::cout << log(10);\n std::cout << log(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1459 always 1459
Line 1461
  93 always 93
  = always "void f(float x) {\n std::cout << logf(x);\n std::cout << logf(10);\n std::cout << logf(1.0f);\n}"
  "void f(float x) {\n std::cout << logf(x);\n std::cout << logf(10);\n std::cout << logf(1.0f);\n}" always "void f(float x) {\n std::cout << logf(x);\n std::cout << logf(10);\n std::cout << logf(1.0f);\n}"
Line 1466
  99 always 99
  = always "void f ( float x ) {\nstd :: cout << logf ( x ) ;\nstd :: cout << logf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << logf ( x ) ;\nstd :: cout << logf ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << logf ( x ) ;\nstd :: cout << logf ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1471
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1471 always 1471
  expected_logf always "void f ( float x ) {\nstd :: cout << logf ( x ) ;\nstd :: cout << logf ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_logf always "void f(float x) {\n std::cout << logf(x);\n std::cout << logf(10);\n std::cout << logf(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1471 always 1471
Line 1473
  102 always 102
  = always "void f(long double x) {\n std::cout << logl(x);\n std::cout << logl(10.0f);\n std::cout << logl(1.0f);\n}"
  "void f(long double x) {\n std::cout << logl(x);\n std::cout << logl(10.0f);\n std::cout << logl(1.0f);\n}" always "void f(long double x) {\n std::cout << logl(x);\n std::cout << logl(10.0f);\n std::cout << logl(1.0f);\n}"
Line 1478
  103 always 103
  = always "void f ( double x ) {\nstd :: cout << logl ( x ) ;\nstd :: cout << logl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << logl ( x ) ;\nstd :: cout << logl ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << logl ( x ) ;\nstd :: cout << logl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1483
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1483 always 1483
  expected_logl always "void f ( double x ) {\nstd :: cout << logl ( x ) ;\nstd :: cout << logl ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_logl always "void f(long double x) {\n std::cout << logl(x);\n std::cout << logl(10.0f);\n std::cout << logl(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1483 always 1483
Line 1488
  89 always 89
  = always "void f(int x) {\n std::cout << log2(x);\n std::cout << log2(10);\n std::cout << log2(1L);\n}"
  "void f(int x) {\n std::cout << log2(x);\n std::cout << log2(10);\n std::cout << log2(1L);\n}" always "void f(int x) {\n std::cout << log2(x);\n std::cout << log2(10);\n std::cout << log2(1L);\n}"
Line 1493
  97 always 97
  = always "void f ( int x ) {\nstd :: cout << log2 ( x ) ;\nstd :: cout << log2 ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( int x ) {\nstd :: cout << log2 ( x ) ;\nstd :: cout << log2 ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( int x ) {\nstd :: cout << log2 ( x ) ;\nstd :: cout << log2 ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1498
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1498 always 1498
  expected_log2 always "void f ( int x ) {\nstd :: cout << log2 ( x ) ;\nstd :: cout << log2 ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_log2 always "void f(int x) {\n std::cout << log2(x);\n std::cout << log2(10);\n std::cout << log2(1L);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1498 always 1498
Line 1500
  96 always 96
  = always "void f(float x) {\n std::cout << log2f(x);\n std::cout << log2f(10);\n std::cout << log2f(1.0f);\n}"
  "void f(float x) {\n std::cout << log2f(x);\n std::cout << log2f(10);\n std::cout << log2f(1.0f);\n}" always "void f(float x) {\n std::cout << log2f(x);\n std::cout << log2f(10);\n std::cout << log2f(1.0f);\n}"
Line 1505
  101 always 101
  = always "void f ( float x ) {\nstd :: cout << log2f ( x ) ;\nstd :: cout << log2f ( 10 ) ;\nstd :: cout << 0 ;\n}"
  "void f ( float x ) {\nstd :: cout << log2f ( x ) ;\nstd :: cout << log2f ( 10 ) ;\nstd :: cout << 0 ;\n}" always "void f ( float x ) {\nstd :: cout << log2f ( x ) ;\nstd :: cout << log2f ( 10 ) ;\nstd :: cout << 0 ;\n}"
Line 1510
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1510 always 1510
  expected_log2f always "void f ( float x ) {\nstd :: cout << log2f ( x ) ;\nstd :: cout << log2f ( 10 ) ;\nstd :: cout << 0 ;\n}"
  code_log2f always "void f(float x) {\n std::cout << log2f(x);\n std::cout << log2f(10);\n std::cout << log2f(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1510 always 1510
Line 1512
  105 always 105
  = always "void f(long double x) {\n std::cout << log2l(x);\n std::cout << log2l(10.0f);\n std::cout << log2l(1.0f);\n}"
  "void f(long double x) {\n std::cout << log2l(x);\n std::cout << log2l(10.0f);\n std::cout << log2l(1.0f);\n}" always "void f(long double x) {\n std::cout << log2l(x);\n std::cout << log2l(10.0f);\n std::cout << log2l(1.0f);\n}"
Line 1517
  105 always 105
  = always "void f ( double x ) {\nstd :: cout << log2l ( x ) ;\nstd :: cout << log2l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  "void f ( double x ) {\nstd :: cout << log2l ( x ) ;\nstd :: cout << log2l ( 10.0f ) ;\nstd :: cout << 0 ;\n}" always "void f ( double x ) {\nstd :: cout << log2l ( x ) ;\nstd :: cout << log2l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
Line 1522
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1522 always 1522
  expected_log2l always "void f ( double x ) {\nstd :: cout << log2l ( x ) ;\nstd :: cout << log2l ( 10.0f ) ;\nstd :: cout << 0 ;\n}"
  code_log2l always "void f(long double x) {\n std::cout << log2l(x);\n std::cout << log2l(10.0f);\n std::cout << log2l(1.0f);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1522 always 1522
Line 1527
  352 always 352
  = always "void f() {\n std::cout << pow(-1.0,1);\n std::cout << pow(1.0,1);\n std::cout << pow(0,1);\n std::cout << pow(1,-6);\n std::cout << powf(-1.0,1.0f);\n std::cout << powf(1.0,1.0f);\n std::cout << powf(0,1.0f);\n std::cout << powf(1.0,-6.0f);\n std::cout << powl(-1.0,1.0);\n std::cout << powl(1.0,1.0);\n std::cout << powl(0,1.0);\n std::cout << powl(1.0,-6.0d);\n}"
  "void f() {\n std::cout << pow(-1.0,1);\n std::cout << pow(1.0,1);\n std::cout << pow(0,1);\n std::cout << pow(1,-6);\n std::cout << powf(-1.0,1.0f);\n std::cout << powf(1.0,1.0f);\n std::cout << powf(0,1.0f);\n std::cout << powf(1.0,-6.0f);\n std::cout << powl(-1.0,1.0);\n std::cout << powl(1.0,1.0);\n std::cout << powl(0,1.0);\n std::cout << powl(1.0,-6.0d);\n}" always "void f() {\n std::cout << pow(-1.0,1);\n std::cout << pow(1.0,1);\n std::cout << pow(0,1);\n std::cout << pow(1,-6);\n std::cout << powf(-1.0,1.0f);\n std::cout << powf(1.0,1.0f);\n std::cout << powf(0,1.0f);\n std::cout << powf(1.0,-6.0f);\n std::cout << powl(-1.0,1.0);\n std::cout << powl(1.0,1.0);\n std::cout << powl(0,1.0);\n std::cout << powl(1.0,-6.0d);\n}"
Line 1542
  252 always 252
  = always "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}" always "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
Line 1556
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1556 always 1556
  expected_pow always "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\nstd :: cout << -1.0 ;\nstd :: cout << 1 ;\nstd :: cout << 0 ;\nstd :: cout << 1 ;\n}"
  code_pow always "void f() {\n std::cout << pow(-1.0,1);\n std::cout << pow(1.0,1);\n std::cout << pow(0,1);\n std::cout << pow(1,-6);\n std::cout << powf(-1.0,1.0f);\n std::cout << powf(1.0,1.0f);\n std::cout << powf(0,1.0f);\n std::cout << powf(1.0,-6.0f);\n std::cout << powl(-1.0,1.0);\n std::cout << powl(1.0,1.0);\n std::cout << powl(0,1.0);\n std::cout << powl(1.0,-6.0d);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1556 always 1556
Line 1560
  49 always 49
  = always "int f(const Fred &fred) {return fred.pow(12,3);}"
  "int f(const Fred &fred) {return fred.pow(12,3);}" always "int f(const Fred &fred) {return fred.pow(12,3);}"
Line 1561
  63 always 63
  = always "int f ( const Fred & fred ) { return fred . pow ( 12 , 3 ) ; }"
  "int f ( const Fred & fred ) { return fred . pow ( 12 , 3 ) ; }" always "int f ( const Fred & fred ) { return fred . pow ( 12 , 3 ) ; }"
Line 1562
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1562 always 1562
  expected_pow1 always "int f ( const Fred & fred ) { return fred . pow ( 12 , 3 ) ; }"
  code_pow1 always "int f(const Fred &fred) {return fred.pow(12,3);}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1562 always 1562
Line 1564
  27 always 27
  = always "int f() {return pow(0,0);}"
  "int f() {return pow(0,0);}" always "int f() {return pow(0,0);}"
Line 1565
  25 always 25
  = always "int f ( ) { return 1 ; }"
  "int f ( ) { return 1 ; }" always "int f ( ) { return 1 ; }"
Line 1566
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1566 always 1566
  expected_pow2 always "int f ( ) { return 1 ; }"
  code_pow2 always "int f() {return pow(0,0);}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1566 always 1566
Line 1568
  27 always 27
  = always "int f() {return pow(0,1);}"
  "int f() {return pow(0,1);}" always "int f() {return pow(0,1);}"
Line 1569
  25 always 25
  = always "int f ( ) { return 0 ; }"
  "int f ( ) { return 0 ; }" always "int f ( ) { return 0 ; }"
Line 1570
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1570 always 1570
  expected_pow3 always "int f ( ) { return 0 ; }"
  code_pow3 always "int f() {return pow(0,1);}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1570 always 1570
Line 1572
  27 always 27
  = always "int f() {return pow(1,0);}"
  "int f() {return pow(1,0);}" always "int f() {return pow(1,0);}"
Line 1573
  25 always 25
  = always "int f ( ) { return 1 ; }"
  "int f ( ) { return 1 ; }" always "int f ( ) { return 1 ; }"
Line 1574
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1574 always 1574
  expected_pow4 always "int f ( ) { return 1 ; }"
  code_pow4 always "int f() {return pow(1,0);}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1574 always 1574
Line 1579
  259 always 259
  = always "void f() {\n std::cout << fmin(-1.0,0);\n std::cout << fmin(1.0,0);\n std::cout << fmin(0,0);\n std::cout << fminf(-1.0,0);\n std::cout << fminf(1.0,0);\n std::cout << fminf(0,0);\n std::cout << fminl(-1.0,0);\n std::cout << fminl(1.0,0);\n std::cout << fminl(0,0);\n}"
  "void f() {\n std::cout << fmin(-1.0,0);\n std::cout << fmin(1.0,0);\n std::cout << fmin(0,0);\n std::cout << fminf(-1.0,0);\n std::cout << fminf(1.0,0);\n std::cout << fminf(0,0);\n std::cout << fminl(-1.0,0);\n std::cout << fminl(1.0,0);\n std::cout << fminl(0,0);\n}" always "void f() {\n std::cout << fmin(-1.0,0);\n std::cout << fmin(1.0,0);\n std::cout << fmin(0,0);\n std::cout << fminf(-1.0,0);\n std::cout << fminf(1.0,0);\n std::cout << fminf(0,0);\n std::cout << fminl(-1.0,0);\n std::cout << fminl(1.0,0);\n std::cout << fminl(0,0);\n}"
Line 1591
  195 always 195
  = always "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\n}"
  "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\n}" always "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\n}"
Line 1602
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1602 always 1602
  expected_fmin always "void f ( ) {\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << -1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\n}"
  code_fmin always "void f() {\n std::cout << fmin(-1.0,0);\n std::cout << fmin(1.0,0);\n std::cout << fmin(0,0);\n std::cout << fminf(-1.0,0);\n std::cout << fminf(1.0,0);\n std::cout << fminf(0,0);\n std::cout << fminl(-1.0,0);\n std::cout << fminl(1.0,0);\n std::cout << fminl(0,0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1602 always 1602
Line 1605
  38 always 38
  = always "float f(float f) { return fmin(f,0);}"
  "float f(float f) { return fmin(f,0);}" always "float f(float f) { return fmin(f,0);}"
Line 1606
  48 always 48
  = always "float f ( float f ) { return fmin ( f , 0 ) ; }"
  "float f ( float f ) { return fmin ( f , 0 ) ; }" always "float f ( float f ) { return fmin ( f , 0 ) ; }"
Line 1607
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1607 always 1607
  expected_fmin1 always "float f ( float f ) { return fmin ( f , 0 ) ; }"
  code_fmin1 always "float f(float f) { return fmin(f,0);}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1607 always 1607
Line 1612
  259 always 259
  = always "void f() {\n std::cout << fmax(-1.0,0);\n std::cout << fmax(1.0,0);\n std::cout << fmax(0,0);\n std::cout << fmaxf(-1.0,0);\n std::cout << fmaxf(1.0,0);\n std::cout << fmaxf(0,0);\n std::cout << fmaxl(-1.0,0);\n std::cout << fmaxl(1.0,0);\n std::cout << fmaxl(0,0);\n}"
  "void f() {\n std::cout << fmax(-1.0,0);\n std::cout << fmax(1.0,0);\n std::cout << fmax(0,0);\n std::cout << fmaxf(-1.0,0);\n std::cout << fmaxf(1.0,0);\n std::cout << fmaxf(0,0);\n std::cout << fmaxl(-1.0,0);\n std::cout << fmaxl(1.0,0);\n std::cout << fmaxl(0,0);\n}" always "void f() {\n std::cout << fmax(-1.0,0);\n std::cout << fmax(1.0,0);\n std::cout << fmax(0,0);\n std::cout << fmaxf(-1.0,0);\n std::cout << fmaxf(1.0,0);\n std::cout << fmaxf(0,0);\n std::cout << fmaxl(-1.0,0);\n std::cout << fmaxl(1.0,0);\n std::cout << fmaxl(0,0);\n}"
Line 1624
  192 always 192
  = always "void f ( ) {\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\n}"
  "void f ( ) {\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\n}" always "void f ( ) {\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\n}"
Line 1635
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1635 always 1635
  expected_fmax always "void f ( ) {\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\nstd :: cout << 0 ;\nstd :: cout << 1.0 ;\nstd :: cout << 0 ;\n}"
  code_fmax always "void f() {\n std::cout << fmax(-1.0,0);\n std::cout << fmax(1.0,0);\n std::cout << fmax(0,0);\n std::cout << fmaxf(-1.0,0);\n std::cout << fmaxf(1.0,0);\n std::cout << fmaxf(0,0);\n std::cout << fmaxl(-1.0,0);\n std::cout << fmaxl(1.0,0);\n std::cout << fmaxl(0,0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1635 always 1635
Line 1638
  38 always 38
  = always "float f(float f) { return fmax(f,0);}"
  "float f(float f) { return fmax(f,0);}" always "float f(float f) { return fmax(f,0);}"
Line 1639
  48 always 48
  = always "float f ( float f ) { return fmax ( f , 0 ) ; }"
  "float f ( float f ) { return fmax ( f , 0 ) ; }" always "float f ( float f ) { return fmax ( f , 0 ) ; }"
Line 1640
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1640 always 1640
  expected_fmax1 always "float f ( float f ) { return fmax ( f , 0 ) ; }"
  code_fmax1 always "float f(float f) { return fmax(f,0);}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1640 always 1640
Line 1644
  991 always 991
  = always "void foo() {\n    std::cout<<pow(sin(x),2)+pow(cos(x),2);\n    std::cout<<pow(sin(pow(sin(y),2)+pow(cos(y),2)),2)+pow(cos(pow(sin(y),2)+pow(cos(y),2)),2);\n    std::cout<<pow(sin(x),2.0)+pow(cos(x),2.0);\n    std::cout<<pow(sin(x*y+z),2.0)+pow(cos(x*y+z),2.0);\n    std::cout<<pow(sin(x*y+z),2)+pow(cos(x*y+z),2);\n    std::cout<<pow(cos(x),2)+pow(sin(x),2);\n    std::cout<<pow(cos(x),2.0)+pow(sin(x),2.0);\n    std::cout<<pow(cos(x*y+z),2.0)+pow(sin(x*y+z),2.0);\n    std::cout<<pow(cos(x*y+z),2)+pow(sin(x*y+z),2);\n    std::cout<<pow(sinh(x*y+z),2)-pow(cosh(x*y+z),2);\n    std::cout<<pow(sinh(x),2)-pow(cosh(x),2);\n    std::cout<<pow(sinh(x*y+z),2.0)-pow(cosh(x*y+z),2.0);\n    std::cout<<pow(sinh(x),2.0)-pow(cosh(x),2.0);\n    std::cout<<pow(cosh(x*y+z),2)-pow(sinh(x*y+z),2);\n    std::cout<<pow(cosh(x),2)-pow(sinh(x),2);\n    std::cout<<pow(cosh(x*y+z),2.0)-pow(sinh(x*y+z),2.0);\n    std::cout<<pow(cosh(x),2.0)-pow(sinh(x),2.0);\n    std::cout<<pow(cosh(pow(x,1)),2.0)-pow(sinh(pow(x,1)),2.0);\n}"
  "void foo() {\n    std::cout<<pow(sin(x),2)+pow(cos(x),2);\n    std::cout<<pow(sin(pow(sin(y),2)+pow(cos(y),2)),2)+pow(cos(pow(sin(y),2)+pow(cos(y),2)),2);\n    std::cout<<pow(sin(x),2.0)+pow(cos(x),2.0);\n    std::cout<<pow(sin(x*y+z),2.0)+pow(cos(x*y+z),2.0);\n    std::cout<<pow(sin(x*y+z),2)+pow(cos(x*y+z),2);\n    std::cout<<pow(cos(x),2)+pow(sin(x),2);\n    std::cout<<pow(cos(x),2.0)+pow(sin(x),2.0);\n    std::cout<<pow(cos(x*y+z),2.0)+pow(sin(x*y+z),2.0);\n    std::cout<<pow(cos(x*y+z),2)+pow(sin(x*y+z),2);\n    std::cout<<pow(sinh(x*y+z),2)-pow(cosh(x*y+z),2);\n    std::cout<<pow(sinh(x),2)-pow(cosh(x),2);\n    std::cout<<pow(sinh(x*y+z),2.0)-pow(cosh(x*y+z),2.0);\n    std::cout<<pow(sinh(x),2.0)-pow(cosh(x),2.0);\n    std::cout<<pow(cosh(x*y+z),2)-pow(sinh(x*y+z),2);\n    std::cout<<pow(cosh(x),2)-pow(sinh(x),2);\n    std::cout<<pow(cosh(x*y+z),2.0)-pow(sinh(x*y+z),2.0);\n    std::cout<<pow(cosh(x),2.0)-pow(sinh(x),2.0);\n    std::cout<<pow(cosh(pow(x,1)),2.0)-pow(sinh(pow(x,1)),2.0);\n}" always "void foo() {\n    std::cout<<pow(sin(x),2)+pow(cos(x),2);\n    std::cout<<pow(sin(pow(sin(y),2)+pow(cos(y),2)),2)+pow(cos(pow(sin(y),2)+pow(cos(y),2)),2);\n    std::cout<<pow(sin(x),2.0)+pow(cos(x),2.0);\n    std::cout<<pow(sin(x*y+z),2.0)+pow(cos(x*y+z),2.0);\n    std::cout<<pow(sin(x*y+z),2)+pow(cos(x*y+z),2);\n    std::cout<<pow(cos(x),2)+pow(sin(x),2);\n    std::cout<<pow(cos(x),2.0)+pow(sin(x),2.0);\n    std::cout<<pow(cos(x*y+z),2.0)+pow(sin(x*y+z),2.0);\n    std::cout<<pow(cos(x*y+z),2)+pow(sin(x*y+z),2);\n    std::cout<<pow(sinh(x*y+z),2)-pow(cosh(x*y+z),2);\n    std::cout<<pow(sinh(x),2)-pow(cosh(x),2);\n    std::cout<<pow(sinh(x*y+z),2.0)-pow(cosh(x*y+z),2.0);\n    std::cout<<pow(sinh(x),2.0)-pow(cosh(x),2.0);\n    std::cout<<pow(cosh(x*y+z),2)-pow(sinh(x*y+z),2);\n    std::cout<<pow(cosh(x),2)-pow(sinh(x),2);\n    std::cout<<pow(cosh(x*y+z),2.0)-pow(sinh(x*y+z),2.0);\n    std::cout<<pow(cosh(x),2.0)-pow(sinh(x),2.0);\n    std::cout<<pow(cosh(pow(x,1)),2.0)-pow(sinh(pow(x,1)),2.0);\n}"
Line 1665
  368 always 368
  = always "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
  "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}" always "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
Line 1685
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1685 always 1685
  expected1 always "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
  code1 always "void foo() {\n    std::cout<<pow(sin(x),2)+pow(cos(x),2);\n    std::cout<<pow(sin(pow(sin(y),2)+pow(cos(y),2)),2)+pow(cos(pow(sin(y),2)+pow(cos(y),2)),2);\n    std::cout<<pow(sin(x),2.0)+pow(cos(x),2.0);\n    std::cout<<pow(sin(x*y+z),2.0)+pow(cos(x*y+z),2.0);\n    std::cout<<pow(sin(x*y+z),2)+pow(cos(x*y+z),2);\n    std::cout<<pow(cos(x),2)+pow(sin(x),2);\n    std::cout<<pow(cos(x),2.0)+pow(sin(x),2.0);\n    std::cout<<pow(cos(x*y+z),2.0)+pow(sin(x*y+z),2.0);\n    std::cout<<pow(cos(x*y+z),2)+pow(sin(x*y+z),2);\n    std::cout<<pow(sinh(x*y+z),2)-pow(cosh(x*y+z),2);\n    std::cout<<pow(sinh(x),2)-pow(cosh(x),2);\n    std::cout<<pow(sinh(x*y+z),2.0)-pow(cosh(x*y+z),2.0);\n    std::cout<<pow(sinh(x),2.0)-pow(cosh(x),2.0);\n    std::cout<<pow(cosh(x*y+z),2)-pow(sinh(x*y+z),2);\n    std::cout<<pow(cosh(x),2)-pow(sinh(x),2);\n    std::cout<<pow(cosh(x*y+z),2.0)-pow(sinh(x*y+z),2.0);\n    std::cout<<pow(cosh(x),2.0)-pow(sinh(x),2.0);\n    std::cout<<pow(cosh(pow(x,1)),2.0)-pow(sinh(pow(x,1)),2.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1685 always 1685
Line 1687
  455 always 455
  = always "void f ( ) {\na = pow ( sin ( x ) , 2 ) + pow ( cos ( y ) , 2 ) ;\nb = pow ( sinh ( x ) , 2 ) - pow ( cosh ( y ) , 2 ) ;\nc = pow ( sin ( x ) , 2.0 ) + pow ( cos ( y ) , 2.0 ) ;\nd = pow ( sinh ( x ) , 2.0 ) - pow ( cosh ( y ) , 2.0 ) ;\ne = pow ( cos ( x ) , 2 ) + pow ( sin ( y ) , 2 ) ;\nf = pow ( cosh ( x ) , 2 ) - pow ( sinh ( y ) , 2 ) ;\ng = pow ( cos ( x ) , 2.0 ) + pow ( sin ( y ) , 2.0 ) ;\nh = pow ( cosh ( x ) , 2.0 ) - pow ( sinh ( y ) , 2.0 ) ;\n}"
  "void f ( ) {\na = pow ( sin ( x ) , 2 ) + pow ( cos ( y ) , 2 ) ;\nb = pow ( sinh ( x ) , 2 ) - pow ( cosh ( y ) , 2 ) ;\nc = pow ( sin ( x ) , 2.0 ) + pow ( cos ( y ) , 2.0 ) ;\nd = pow ( sinh ( x ) , 2.0 ) - pow ( cosh ( y ) , 2.0 ) ;\ne = pow ( cos ( x ) , 2 ) + pow ( sin ( y ) , 2 ) ;\nf = pow ( cosh ( x ) , 2 ) - pow ( sinh ( y ) , 2 ) ;\ng = pow ( cos ( x ) , 2.0 ) + pow ( sin ( y ) , 2.0 ) ;\nh = pow ( cosh ( x ) , 2.0 ) - pow ( sinh ( y ) , 2.0 ) ;\n}" always "void f ( ) {\na = pow ( sin ( x ) , 2 ) + pow ( cos ( y ) , 2 ) ;\nb = pow ( sinh ( x ) , 2 ) - pow ( cosh ( y ) , 2 ) ;\nc = pow ( sin ( x ) , 2.0 ) + pow ( cos ( y ) , 2.0 ) ;\nd = pow ( sinh ( x ) , 2.0 ) - pow ( cosh ( y ) , 2.0 ) ;\ne = pow ( cos ( x ) , 2 ) + pow ( sin ( y ) , 2 ) ;\nf = pow ( cosh ( x ) , 2 ) - pow ( sinh ( y ) , 2 ) ;\ng = pow ( cos ( x ) , 2.0 ) + pow ( sin ( y ) , 2.0 ) ;\nh = pow ( cosh ( x ) , 2.0 ) - pow ( sinh ( y ) , 2.0 ) ;\n}"
Line 1697
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1697 always 1697
  code2 always "void f ( ) {\na = pow ( sin ( x ) , 2 ) + pow ( cos ( y ) , 2 ) ;\nb = pow ( sinh ( x ) , 2 ) - pow ( cosh ( y ) , 2 ) ;\nc = pow ( sin ( x ) , 2.0 ) + pow ( cos ( y ) , 2.0 ) ;\nd = pow ( sinh ( x ) , 2.0 ) - pow ( cosh ( y ) , 2.0 ) ;\ne = pow ( cos ( x ) , 2 ) + pow ( sin ( y ) , 2 ) ;\nf = pow ( cosh ( x ) , 2 ) - pow ( sinh ( y ) , 2 ) ;\ng = pow ( cos ( x ) , 2.0 ) + pow ( sin ( y ) , 2.0 ) ;\nh = pow ( cosh ( x ) , 2.0 ) - pow ( sinh ( y ) , 2.0 ) ;\n}"
  code2 always "void f ( ) {\na = pow ( sin ( x ) , 2 ) + pow ( cos ( y ) , 2 ) ;\nb = pow ( sinh ( x ) , 2 ) - pow ( cosh ( y ) , 2 ) ;\nc = pow ( sin ( x ) , 2.0 ) + pow ( cos ( y ) , 2.0 ) ;\nd = pow ( sinh ( x ) , 2.0 ) - pow ( cosh ( y ) , 2.0 ) ;\ne = pow ( cos ( x ) , 2 ) + pow ( sin ( y ) , 2 ) ;\nf = pow ( cosh ( x ) , 2 ) - pow ( sinh ( y ) , 2 ) ;\ng = pow ( cos ( x ) , 2.0 ) + pow ( sin ( y ) , 2.0 ) ;\nh = pow ( cosh ( x ) , 2.0 ) - pow ( sinh ( y ) , 2.0 ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1697 always 1697
Line 1699
  1073 always 1073
  = always "void foo() {\n    std::cout<<powf(sinf(x),2)+powf(cosf(x),2);\n    std::cout<<powf(sinf(powf(sinf(y),2)+powf(cosf(y),2)),2)+powf(cosf(powf(sinf(y),2)+powf(cosf(y),2)),2);\n    std::cout<<powf(sinf(x),2.0)+powf(cosf(x),2.0);\n    std::cout<<powf(sinf(x*y+z),2.0)+powf(cosf(x*y+z),2.0);\n    std::cout<<powf(sinf(x*y+z),2)+powf(cosf(x*y+z),2);\n    std::cout<<powf(cosf(x),2)+powf(sinf(x),2);\n    std::cout<<powf(cosf(x),2.0)+powf(sinf(x),2.0);\n    std::cout<<powf(cosf(x*y+z),2.0)+powf(sinf(x*y+z),2.0);\n    std::cout<<powf(cosf(x*y+z),2)+powf(sinf(x*y+z),2);\n    std::cout<<powf(sinhf(x*y+z),2)-powf(coshf(x*y+z),2);\n    std::cout<<powf(sinhf(x),2)-powf(coshf(x),2);\n    std::cout<<powf(sinhf(x*y+z),2.0)-powf(coshf(x*y+z),2.0);\n    std::cout<<powf(sinhf(x),2.0)-powf(coshf(x),2.0);\n    std::cout<<powf(coshf(x*y+z),2)-powf(sinhf(x*y+z),2);\n    std::cout<<powf(coshf(x),2)-powf(sinhf(x),2);\n    std::cout<<powf(coshf(x*y+z),2.0)-powf(sinhf(x*y+z),2.0);\n    std::cout<<powf(coshf(x),2.0)-powf(sinhf(x),2.0);\n    std::cout<<powf(coshf(powf(x,1)),2.0)-powf(sinhf(powf(x,1)),2.0);\n}"
  "void foo() {\n    std::cout<<powf(sinf(x),2)+powf(cosf(x),2);\n    std::cout<<powf(sinf(powf(sinf(y),2)+powf(cosf(y),2)),2)+powf(cosf(powf(sinf(y),2)+powf(cosf(y),2)),2);\n    std::cout<<powf(sinf(x),2.0)+powf(cosf(x),2.0);\n    std::cout<<powf(sinf(x*y+z),2.0)+powf(cosf(x*y+z),2.0);\n    std::cout<<powf(sinf(x*y+z),2)+powf(cosf(x*y+z),2);\n    std::cout<<powf(cosf(x),2)+powf(sinf(x),2);\n    std::cout<<powf(cosf(x),2.0)+powf(sinf(x),2.0);\n    std::cout<<powf(cosf(x*y+z),2.0)+powf(sinf(x*y+z),2.0);\n    std::cout<<powf(cosf(x*y+z),2)+powf(sinf(x*y+z),2);\n    std::cout<<powf(sinhf(x*y+z),2)-powf(coshf(x*y+z),2);\n    std::cout<<powf(sinhf(x),2)-powf(coshf(x),2);\n    std::cout<<powf(sinhf(x*y+z),2.0)-powf(coshf(x*y+z),2.0);\n    std::cout<<powf(sinhf(x),2.0)-powf(coshf(x),2.0);\n    std::cout<<powf(coshf(x*y+z),2)-powf(sinhf(x*y+z),2);\n    std::cout<<powf(coshf(x),2)-powf(sinhf(x),2);\n    std::cout<<powf(coshf(x*y+z),2.0)-powf(sinhf(x*y+z),2.0);\n    std::cout<<powf(coshf(x),2.0)-powf(sinhf(x),2.0);\n    std::cout<<powf(coshf(powf(x,1)),2.0)-powf(sinhf(powf(x,1)),2.0);\n}" always "void foo() {\n    std::cout<<powf(sinf(x),2)+powf(cosf(x),2);\n    std::cout<<powf(sinf(powf(sinf(y),2)+powf(cosf(y),2)),2)+powf(cosf(powf(sinf(y),2)+powf(cosf(y),2)),2);\n    std::cout<<powf(sinf(x),2.0)+powf(cosf(x),2.0);\n    std::cout<<powf(sinf(x*y+z),2.0)+powf(cosf(x*y+z),2.0);\n    std::cout<<powf(sinf(x*y+z),2)+powf(cosf(x*y+z),2);\n    std::cout<<powf(cosf(x),2)+powf(sinf(x),2);\n    std::cout<<powf(cosf(x),2.0)+powf(sinf(x),2.0);\n    std::cout<<powf(cosf(x*y+z),2.0)+powf(sinf(x*y+z),2.0);\n    std::cout<<powf(cosf(x*y+z),2)+powf(sinf(x*y+z),2);\n    std::cout<<powf(sinhf(x*y+z),2)-powf(coshf(x*y+z),2);\n    std::cout<<powf(sinhf(x),2)-powf(coshf(x),2);\n    std::cout<<powf(sinhf(x*y+z),2.0)-powf(coshf(x*y+z),2.0);\n    std::cout<<powf(sinhf(x),2.0)-powf(coshf(x),2.0);\n    std::cout<<powf(coshf(x*y+z),2)-powf(sinhf(x*y+z),2);\n    std::cout<<powf(coshf(x),2)-powf(sinhf(x),2);\n    std::cout<<powf(coshf(x*y+z),2.0)-powf(sinhf(x*y+z),2.0);\n    std::cout<<powf(coshf(x),2.0)-powf(sinhf(x),2.0);\n    std::cout<<powf(coshf(powf(x,1)),2.0)-powf(sinhf(powf(x,1)),2.0);\n}"
Line 1720
  368 always 368
  = always "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
  "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}" always "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
Line 1740
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1740 always 1740
  expected3 always "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
  code3 always "void foo() {\n    std::cout<<powf(sinf(x),2)+powf(cosf(x),2);\n    std::cout<<powf(sinf(powf(sinf(y),2)+powf(cosf(y),2)),2)+powf(cosf(powf(sinf(y),2)+powf(cosf(y),2)),2);\n    std::cout<<powf(sinf(x),2.0)+powf(cosf(x),2.0);\n    std::cout<<powf(sinf(x*y+z),2.0)+powf(cosf(x*y+z),2.0);\n    std::cout<<powf(sinf(x*y+z),2)+powf(cosf(x*y+z),2);\n    std::cout<<powf(cosf(x),2)+powf(sinf(x),2);\n    std::cout<<powf(cosf(x),2.0)+powf(sinf(x),2.0);\n    std::cout<<powf(cosf(x*y+z),2.0)+powf(sinf(x*y+z),2.0);\n    std::cout<<powf(cosf(x*y+z),2)+powf(sinf(x*y+z),2);\n    std::cout<<powf(sinhf(x*y+z),2)-powf(coshf(x*y+z),2);\n    std::cout<<powf(sinhf(x),2)-powf(coshf(x),2);\n    std::cout<<powf(sinhf(x*y+z),2.0)-powf(coshf(x*y+z),2.0);\n    std::cout<<powf(sinhf(x),2.0)-powf(coshf(x),2.0);\n    std::cout<<powf(coshf(x*y+z),2)-powf(sinhf(x*y+z),2);\n    std::cout<<powf(coshf(x),2)-powf(sinhf(x),2);\n    std::cout<<powf(coshf(x*y+z),2.0)-powf(sinhf(x*y+z),2.0);\n    std::cout<<powf(coshf(x),2.0)-powf(sinhf(x),2.0);\n    std::cout<<powf(coshf(powf(x,1)),2.0)-powf(sinhf(powf(x,1)),2.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1740 always 1740
Line 1742
  487 always 487
  = always "void f ( ) {\na = powf ( sinf ( x ) , 2 ) + powf ( cosf ( y ) , 2 ) ;\nb = powf ( sinhf ( x ) , 2 ) - powf ( coshf ( y ) , 2 ) ;\nc = powf ( sinf ( x ) , 2.0 ) + powf ( cosf ( y ) , 2.0 ) ;\nd = powf ( sinhf ( x ) , 2.0 ) - powf ( coshf ( y ) , 2.0 ) ;\ne = powf ( cosf ( x ) , 2 ) + powf ( sinf ( y ) , 2 ) ;\nf = powf ( coshf ( x ) , 2 ) - powf ( sinhf ( y ) , 2 ) ;\ng = powf ( cosf ( x ) , 2.0 ) + powf ( sinf ( y ) , 2.0 ) ;\nh = powf ( coshf ( x ) , 2.0 ) - powf ( sinhf ( y ) , 2.0 ) ;\n}"
  "void f ( ) {\na = powf ( sinf ( x ) , 2 ) + powf ( cosf ( y ) , 2 ) ;\nb = powf ( sinhf ( x ) , 2 ) - powf ( coshf ( y ) , 2 ) ;\nc = powf ( sinf ( x ) , 2.0 ) + powf ( cosf ( y ) , 2.0 ) ;\nd = powf ( sinhf ( x ) , 2.0 ) - powf ( coshf ( y ) , 2.0 ) ;\ne = powf ( cosf ( x ) , 2 ) + powf ( sinf ( y ) , 2 ) ;\nf = powf ( coshf ( x ) , 2 ) - powf ( sinhf ( y ) , 2 ) ;\ng = powf ( cosf ( x ) , 2.0 ) + powf ( sinf ( y ) , 2.0 ) ;\nh = powf ( coshf ( x ) , 2.0 ) - powf ( sinhf ( y ) , 2.0 ) ;\n}" always "void f ( ) {\na = powf ( sinf ( x ) , 2 ) + powf ( cosf ( y ) , 2 ) ;\nb = powf ( sinhf ( x ) , 2 ) - powf ( coshf ( y ) , 2 ) ;\nc = powf ( sinf ( x ) , 2.0 ) + powf ( cosf ( y ) , 2.0 ) ;\nd = powf ( sinhf ( x ) , 2.0 ) - powf ( coshf ( y ) , 2.0 ) ;\ne = powf ( cosf ( x ) , 2 ) + powf ( sinf ( y ) , 2 ) ;\nf = powf ( coshf ( x ) , 2 ) - powf ( sinhf ( y ) , 2 ) ;\ng = powf ( cosf ( x ) , 2.0 ) + powf ( sinf ( y ) , 2.0 ) ;\nh = powf ( coshf ( x ) , 2.0 ) - powf ( sinhf ( y ) , 2.0 ) ;\n}"
Line 1752
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1752 always 1752
  code4 always "void f ( ) {\na = powf ( sinf ( x ) , 2 ) + powf ( cosf ( y ) , 2 ) ;\nb = powf ( sinhf ( x ) , 2 ) - powf ( coshf ( y ) , 2 ) ;\nc = powf ( sinf ( x ) , 2.0 ) + powf ( cosf ( y ) , 2.0 ) ;\nd = powf ( sinhf ( x ) , 2.0 ) - powf ( coshf ( y ) , 2.0 ) ;\ne = powf ( cosf ( x ) , 2 ) + powf ( sinf ( y ) , 2 ) ;\nf = powf ( coshf ( x ) , 2 ) - powf ( sinhf ( y ) , 2 ) ;\ng = powf ( cosf ( x ) , 2.0 ) + powf ( sinf ( y ) , 2.0 ) ;\nh = powf ( coshf ( x ) , 2.0 ) - powf ( sinhf ( y ) , 2.0 ) ;\n}"
  code4 always "void f ( ) {\na = powf ( sinf ( x ) , 2 ) + powf ( cosf ( y ) , 2 ) ;\nb = powf ( sinhf ( x ) , 2 ) - powf ( coshf ( y ) , 2 ) ;\nc = powf ( sinf ( x ) , 2.0 ) + powf ( cosf ( y ) , 2.0 ) ;\nd = powf ( sinhf ( x ) , 2.0 ) - powf ( coshf ( y ) , 2.0 ) ;\ne = powf ( cosf ( x ) , 2 ) + powf ( sinf ( y ) , 2 ) ;\nf = powf ( coshf ( x ) , 2 ) - powf ( sinhf ( y ) , 2 ) ;\ng = powf ( cosf ( x ) , 2.0 ) + powf ( sinf ( y ) , 2.0 ) ;\nh = powf ( coshf ( x ) , 2.0 ) - powf ( sinhf ( y ) , 2.0 ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1752 always 1752
Line 1754
  1072 always 1072
  = always "void foo() {\n    std::cout<<powf(sinl(x),2)+powl(cosl(x),2);\n    std::cout<<pow(sinl(powl(sinl(y),2)+powl(cosl(y),2)),2)+powl(cosl(powl(sinl(y),2)+powl(cosl(y),2)),2);\n    std::cout<<powl(sinl(x),2.0)+powl(cosl(x),2.0);\n    std::cout<<powl(sinl(x*y+z),2.0)+powl(cosl(x*y+z),2.0);\n    std::cout<<powl(sinl(x*y+z),2)+powl(cosl(x*y+z),2);\n    std::cout<<powl(cosl(x),2)+powl(sinl(x),2);\n    std::cout<<powl(cosl(x),2.0)+powl(sinl(x),2.0);\n    std::cout<<powl(cosl(x*y+z),2.0)+powl(sinl(x*y+z),2.0);\n    std::cout<<powl(cosl(x*y+z),2)+powl(sinl(x*y+z),2);\n    std::cout<<powl(sinhl(x*y+z),2)-powl(coshl(x*y+z),2);\n    std::cout<<powl(sinhl(x),2)-powl(coshl(x),2);\n    std::cout<<powl(sinhl(x*y+z),2.0)-powl(coshl(x*y+z),2.0);\n    std::cout<<powl(sinhl(x),2.0)-powl(coshl(x),2.0);\n    std::cout<<powl(coshl(x*y+z),2)-powl(sinhl(x*y+z),2);\n    std::cout<<powl(coshl(x),2)-powl(sinhl(x),2);\n    std::cout<<powl(coshl(x*y+z),2.0)-powl(sinhl(x*y+z),2.0);\n    std::cout<<powl(coshl(x),2.0)-powl(sinhl(x),2.0);\n    std::cout<<powl(coshl(powl(x,1)),2.0)-powl(sinhl(powl(x,1)),2.0);\n}"
  "void foo() {\n    std::cout<<powf(sinl(x),2)+powl(cosl(x),2);\n    std::cout<<pow(sinl(powl(sinl(y),2)+powl(cosl(y),2)),2)+powl(cosl(powl(sinl(y),2)+powl(cosl(y),2)),2);\n    std::cout<<powl(sinl(x),2.0)+powl(cosl(x),2.0);\n    std::cout<<powl(sinl(x*y+z),2.0)+powl(cosl(x*y+z),2.0);\n    std::cout<<powl(sinl(x*y+z),2)+powl(cosl(x*y+z),2);\n    std::cout<<powl(cosl(x),2)+powl(sinl(x),2);\n    std::cout<<powl(cosl(x),2.0)+powl(sinl(x),2.0);\n    std::cout<<powl(cosl(x*y+z),2.0)+powl(sinl(x*y+z),2.0);\n    std::cout<<powl(cosl(x*y+z),2)+powl(sinl(x*y+z),2);\n    std::cout<<powl(sinhl(x*y+z),2)-powl(coshl(x*y+z),2);\n    std::cout<<powl(sinhl(x),2)-powl(coshl(x),2);\n    std::cout<<powl(sinhl(x*y+z),2.0)-powl(coshl(x*y+z),2.0);\n    std::cout<<powl(sinhl(x),2.0)-powl(coshl(x),2.0);\n    std::cout<<powl(coshl(x*y+z),2)-powl(sinhl(x*y+z),2);\n    std::cout<<powl(coshl(x),2)-powl(sinhl(x),2);\n    std::cout<<powl(coshl(x*y+z),2.0)-powl(sinhl(x*y+z),2.0);\n    std::cout<<powl(coshl(x),2.0)-powl(sinhl(x),2.0);\n    std::cout<<powl(coshl(powl(x,1)),2.0)-powl(sinhl(powl(x,1)),2.0);\n}" always "void foo() {\n    std::cout<<powf(sinl(x),2)+powl(cosl(x),2);\n    std::cout<<pow(sinl(powl(sinl(y),2)+powl(cosl(y),2)),2)+powl(cosl(powl(sinl(y),2)+powl(cosl(y),2)),2);\n    std::cout<<powl(sinl(x),2.0)+powl(cosl(x),2.0);\n    std::cout<<powl(sinl(x*y+z),2.0)+powl(cosl(x*y+z),2.0);\n    std::cout<<powl(sinl(x*y+z),2)+powl(cosl(x*y+z),2);\n    std::cout<<powl(cosl(x),2)+powl(sinl(x),2);\n    std::cout<<powl(cosl(x),2.0)+powl(sinl(x),2.0);\n    std::cout<<powl(cosl(x*y+z),2.0)+powl(sinl(x*y+z),2.0);\n    std::cout<<powl(cosl(x*y+z),2)+powl(sinl(x*y+z),2);\n    std::cout<<powl(sinhl(x*y+z),2)-powl(coshl(x*y+z),2);\n    std::cout<<powl(sinhl(x),2)-powl(coshl(x),2);\n    std::cout<<powl(sinhl(x*y+z),2.0)-powl(coshl(x*y+z),2.0);\n    std::cout<<powl(sinhl(x),2.0)-powl(coshl(x),2.0);\n    std::cout<<powl(coshl(x*y+z),2)-powl(sinhl(x*y+z),2);\n    std::cout<<powl(coshl(x),2)-powl(sinhl(x),2);\n    std::cout<<powl(coshl(x*y+z),2.0)-powl(sinhl(x*y+z),2.0);\n    std::cout<<powl(coshl(x),2.0)-powl(sinhl(x),2.0);\n    std::cout<<powl(coshl(powl(x,1)),2.0)-powl(sinhl(powl(x,1)),2.0);\n}"
Line 1775
  368 always 368
  = always "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
  "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}" always "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
Line 1795
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1795 always 1795
  expected5 always "void foo ( ) {\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << 1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\nstd :: cout << -1 ;\n}"
  code5 always "void foo() {\n    std::cout<<powf(sinl(x),2)+powl(cosl(x),2);\n    std::cout<<pow(sinl(powl(sinl(y),2)+powl(cosl(y),2)),2)+powl(cosl(powl(sinl(y),2)+powl(cosl(y),2)),2);\n    std::cout<<powl(sinl(x),2.0)+powl(cosl(x),2.0);\n    std::cout<<powl(sinl(x*y+z),2.0)+powl(cosl(x*y+z),2.0);\n    std::cout<<powl(sinl(x*y+z),2)+powl(cosl(x*y+z),2);\n    std::cout<<powl(cosl(x),2)+powl(sinl(x),2);\n    std::cout<<powl(cosl(x),2.0)+powl(sinl(x),2.0);\n    std::cout<<powl(cosl(x*y+z),2.0)+powl(sinl(x*y+z),2.0);\n    std::cout<<powl(cosl(x*y+z),2)+powl(sinl(x*y+z),2);\n    std::cout<<powl(sinhl(x*y+z),2)-powl(coshl(x*y+z),2);\n    std::cout<<powl(sinhl(x),2)-powl(coshl(x),2);\n    std::cout<<powl(sinhl(x*y+z),2.0)-powl(coshl(x*y+z),2.0);\n    std::cout<<powl(sinhl(x),2.0)-powl(coshl(x),2.0);\n    std::cout<<powl(coshl(x*y+z),2)-powl(sinhl(x*y+z),2);\n    std::cout<<powl(coshl(x),2)-powl(sinhl(x),2);\n    std::cout<<powl(coshl(x*y+z),2.0)-powl(sinhl(x*y+z),2.0);\n    std::cout<<powl(coshl(x),2.0)-powl(sinhl(x),2.0);\n    std::cout<<powl(coshl(powl(x,1)),2.0)-powl(sinhl(powl(x,1)),2.0);\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1795 always 1795
Line 1798
  487 always 487
  = always "void f ( ) {\na = powl ( sinl ( x ) , 2 ) + powl ( cosl ( y ) , 2 ) ;\nb = powl ( sinhl ( x ) , 2 ) - powl ( coshl ( y ) , 2 ) ;\nc = powl ( sinl ( x ) , 2.0 ) + powl ( cosl ( y ) , 2.0 ) ;\nd = powl ( sinhl ( x ) , 2.0 ) - powl ( coshl ( y ) , 2.0 ) ;\ne = powl ( cosl ( x ) , 2 ) + powl ( sinl ( y ) , 2 ) ;\nf = powl ( coshl ( x ) , 2 ) - powl ( sinhl ( y ) , 2 ) ;\ng = powl ( cosl ( x ) , 2.0 ) + powl ( sinl ( y ) , 2.0 ) ;\nh = powl ( coshl ( x ) , 2.0 ) - powl ( sinhl ( y ) , 2.0 ) ;\n}"
  "void f ( ) {\na = powl ( sinl ( x ) , 2 ) + powl ( cosl ( y ) , 2 ) ;\nb = powl ( sinhl ( x ) , 2 ) - powl ( coshl ( y ) , 2 ) ;\nc = powl ( sinl ( x ) , 2.0 ) + powl ( cosl ( y ) , 2.0 ) ;\nd = powl ( sinhl ( x ) , 2.0 ) - powl ( coshl ( y ) , 2.0 ) ;\ne = powl ( cosl ( x ) , 2 ) + powl ( sinl ( y ) , 2 ) ;\nf = powl ( coshl ( x ) , 2 ) - powl ( sinhl ( y ) , 2 ) ;\ng = powl ( cosl ( x ) , 2.0 ) + powl ( sinl ( y ) , 2.0 ) ;\nh = powl ( coshl ( x ) , 2.0 ) - powl ( sinhl ( y ) , 2.0 ) ;\n}" always "void f ( ) {\na = powl ( sinl ( x ) , 2 ) + powl ( cosl ( y ) , 2 ) ;\nb = powl ( sinhl ( x ) , 2 ) - powl ( coshl ( y ) , 2 ) ;\nc = powl ( sinl ( x ) , 2.0 ) + powl ( cosl ( y ) , 2.0 ) ;\nd = powl ( sinhl ( x ) , 2.0 ) - powl ( coshl ( y ) , 2.0 ) ;\ne = powl ( cosl ( x ) , 2 ) + powl ( sinl ( y ) , 2 ) ;\nf = powl ( coshl ( x ) , 2 ) - powl ( sinhl ( y ) , 2 ) ;\ng = powl ( cosl ( x ) , 2.0 ) + powl ( sinl ( y ) , 2.0 ) ;\nh = powl ( coshl ( x ) , 2.0 ) - powl ( sinhl ( y ) , 2.0 ) ;\n}"
Line 1808
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1808 always 1808
  code6 always "void f ( ) {\na = powl ( sinl ( x ) , 2 ) + powl ( cosl ( y ) , 2 ) ;\nb = powl ( sinhl ( x ) , 2 ) - powl ( coshl ( y ) , 2 ) ;\nc = powl ( sinl ( x ) , 2.0 ) + powl ( cosl ( y ) , 2.0 ) ;\nd = powl ( sinhl ( x ) , 2.0 ) - powl ( coshl ( y ) , 2.0 ) ;\ne = powl ( cosl ( x ) , 2 ) + powl ( sinl ( y ) , 2 ) ;\nf = powl ( coshl ( x ) , 2 ) - powl ( sinhl ( y ) , 2 ) ;\ng = powl ( cosl ( x ) , 2.0 ) + powl ( sinl ( y ) , 2.0 ) ;\nh = powl ( coshl ( x ) , 2.0 ) - powl ( sinhl ( y ) , 2.0 ) ;\n}"
  code6 always "void f ( ) {\na = powl ( sinl ( x ) , 2 ) + powl ( cosl ( y ) , 2 ) ;\nb = powl ( sinhl ( x ) , 2 ) - powl ( coshl ( y ) , 2 ) ;\nc = powl ( sinl ( x ) , 2.0 ) + powl ( cosl ( y ) , 2.0 ) ;\nd = powl ( sinhl ( x ) , 2.0 ) - powl ( coshl ( y ) , 2.0 ) ;\ne = powl ( cosl ( x ) , 2 ) + powl ( sinl ( y ) , 2 ) ;\nf = powl ( coshl ( x ) , 2 ) - powl ( sinhl ( y ) , 2 ) ;\ng = powl ( cosl ( x ) , 2.0 ) + powl ( sinl ( y ) , 2.0 ) ;\nh = powl ( coshl ( x ) , 2.0 ) - powl ( sinhl ( y ) , 2.0 ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1808 always 1808
Line 1813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1813 always 1813
  "; x = g ( ) ; f ( x ) ;" always "; x = g ( ) ; f ( x ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1813 always 1813
  ";f(x=g());" always ";f(x=g());"
Line 1814
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1814 always 1814
  "; hs = ( xyz_t ) { h . centerX , h . centerY , 1 + index } ; putInput ( hs , 1 ) ;" always "; hs = ( xyz_t ) { h . centerX , h . centerY , 1 + index } ; putInput ( hs , 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1814 always 1814
  ";putInput(hs = (xyz_t) { h->centerX, h->centerY, 1 + index }, 1);" always ";putInput(hs = (xyz_t) { h->centerX, h->centerY, 1 + index }, 1);"
Line 1818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1818 always 1818
  "; x = x + y ;" always "; x = x + y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1818 always 1818
  "; x += y;" always "; x += y;"
Line 1819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1819 always 1819
  "; x = x - y ;" always "; x = x - y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1819 always 1819
  "; x -= y;" always "; x -= y;"
Line 1820
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1820 always 1820
  "; x = x * y ;" always "; x = x * y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1820 always 1820
  "; x *= y;" always "; x *= y;"
Line 1821
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1821 always 1821
  "; x = x / y ;" always "; x = x / y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1821 always 1821
  "; x /= y;" always "; x /= y;"
Line 1822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1822 always 1822
  "; x = x % y ;" always "; x = x % y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1822 always 1822
  "; x %= y;" always "; x %= y;"
Line 1823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1823 always 1823
  "; x = x & y ;" always "; x = x & y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1823 always 1823
  "; x &= y;" always "; x &= y;"
Line 1824
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1824 always 1824
  "; x = x | y ;" always "; x = x | y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1824 always 1824
  "; x |= y;" always "; x |= y;"
Line 1825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1825 always 1825
  "; x = x ^ y ;" always "; x = x ^ y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1825 always 1825
  "; x ^= y;" always "; x ^= y;"
Line 1826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1826 always 1826
  "; x = x << y ;" always "; x = x << y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1826 always 1826
  "; x <<= y;" always "; x <<= y;"
Line 1827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1827 always 1827
  "; x = x >> y ;" always "; x = x >> y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1827 always 1827
  "; x >>= y;" always "; x >>= y;"
Line 1829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1829 always 1829
  "{ x = x + y ; }" always "{ x = x + y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1829 always 1829
  "{ x += y;}" always "{ x += y;}"
Line 1830
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1830 always 1830
  "{ x = x - y ; }" always "{ x = x - y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1830 always 1830
  "{ x -= y;}" always "{ x -= y;}"
Line 1831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1831 always 1831
  "{ x = x * y ; }" always "{ x = x * y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1831 always 1831
  "{ x *= y;}" always "{ x *= y;}"
Line 1832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1832 always 1832
  "{ x = x / y ; }" always "{ x = x / y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1832 always 1832
  "{ x /= y;}" always "{ x /= y;}"
Line 1833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1833 always 1833
  "{ x = x % y ; }" always "{ x = x % y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1833 always 1833
  "{ x %= y;}" always "{ x %= y;}"
Line 1834
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1834 always 1834
  "{ x = x & y ; }" always "{ x = x & y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1834 always 1834
  "{ x &= y;}" always "{ x &= y;}"
Line 1835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1835 always 1835
  "{ x = x | y ; }" always "{ x = x | y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1835 always 1835
  "{ x |= y;}" always "{ x |= y;}"
Line 1836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1836 always 1836
  "{ x = x ^ y ; }" always "{ x = x ^ y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1836 always 1836
  "{ x ^= y;}" always "{ x ^= y;}"
Line 1837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1837 always 1837
  "{ x = x << y ; }" always "{ x = x << y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1837 always 1837
  "{ x <<= y;}" always "{ x <<= y;}"
Line 1838
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1838 always 1838
  "{ x = x >> y ; }" always "{ x = x >> y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1838 always 1838
  "{ x >>= y;}" always "{ x >>= y;}"
Line 1840
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1840 always 1840
  "; * p = * p + y ;" always "; * p = * p + y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1840 always 1840
  "; *p += y;" always "; *p += y;"
Line 1841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1841 always 1841
  "; ( * p ) = ( * p ) + y ;" always "; ( * p ) = ( * p ) + y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1841 always 1841
  "; (*p) += y;" always "; (*p) += y;"
Line 1842
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1842 always 1842
  "; * ( p [ 0 ] ) = * ( p [ 0 ] ) + y ;" always "; * ( p [ 0 ] ) = * ( p [ 0 ] ) + y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1842 always 1842
  "; *(p[0]) += y;" always "; *(p[0]) += y;"
Line 1843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1843 always 1843
  "; p [ { 1 , 2 } ] = p [ { 1 , 2 } ] + y ;" always "; p [ { 1 , 2 } ] = p [ { 1 , 2 } ] + y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1843 always 1843
  "; p[{1,2}] += y;" always "; p[{1,2}] += y;"
Line 1845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1845 always 1845
  "void foo ( ) { switch ( n ) { case 0 : ; x = x + y ; break ; } }" always "void foo ( ) { switch ( n ) { case 0 : ; x = x + y ; break ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1845 always 1845
  "void foo() { switch (n) { case 0: x += y; break; } }" always "void foo() { switch (n) { case 0: x += y; break; } }"
Line 1847
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1847 always 1847
  "; x . y = x . y + 1 ;" always "; x . y = x . y + 1 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1847 always 1847
  "; x.y += 1;" always "; x.y += 1;"
Line 1849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1849 always 1849
  "; x [ 0 ] = x [ 0 ] + 1 ;" always "; x [ 0 ] = x [ 0 ] + 1 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1849 always 1849
  "; x[0] += 1;" always "; x[0] += 1;"
Line 1850
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1850 always 1850
  "; x [ y - 1 ] = x [ y - 1 ] + 1 ;" always "; x [ y - 1 ] = x [ y - 1 ] + 1 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1850 always 1850
  "; x[y-1] += 1;" always "; x[y-1] += 1;"
Line 1851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1851 always 1851
  "; x [ y ] = x [ y ++ ] + 1 ;" always "; x [ y ] = x [ y ++ ] + 1 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1851 always 1851
  "; x[y++] += 1;" always "; x[y++] += 1;"
Line 1852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1852 always 1852
  "; x [ ++ y ] = x [ y ] + 1 ;" always "; x [ ++ y ] = x [ y ] + 1 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1852 always 1852
  "; x[++y] += 1;" always "; x[++y] += 1;"
Line 1854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1854 always 1854
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1854 always 1854
  ";x += 0;" always ";x += 0;"
Line 1855
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1855 always 1855
  ";" always ";"
  "; x = x + '\\0' ;" always "; x = x + '\\0' ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1855 always 1855
  "; x += '\\0'; " always "; x += '\\0'; "
Line 1856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1856 always 1856
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1856 always 1856
  ";x -= 0;" always ";x -= 0;"
Line 1857
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1857 always 1857
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1857 always 1857
  ";x |= 0;" always ";x |= 0;"
Line 1858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1858 always 1858
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1858 always 1858
  ";x *= 1;" always ";x *= 1;"
Line 1859
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1859 always 1859
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1859 always 1859
  ";x /= 1;" always ";x /= 1;"
Line 1861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1861 always 1861
  "; a . x ( ) = a . x ( ) + 1 ;" always "; a . x ( ) = a . x ( ) + 1 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1861 always 1861
  "; a.x() += 1;" always "; a.x() += 1;"
Line 1862
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1862 always 1862
  "; x ( 1 ) = x ( 1 ) + 1 ;" always "; x ( 1 ) = x ( 1 ) + 1 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1862 always 1862
  "; x(1) += 1;" always "; x(1) += 1;"
Line 1865
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1865 always 1865
  "{ j = j - i ; }" always "{ j = j - i ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1865 always 1865
  "{if (false) {} else { j -= i; }}" always "{if (false) {} else { j -= i; }}"
Line 1868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1868 always 1868
  "; a = a + ( b ? c : d ) ;" always "; a = a + ( b ? c : d ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1868 always 1868
  "; a+=b?c:d;" always "; a+=b?c:d;"
Line 1869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1869 always 1869
  "; a = a * ( b + 1 ) ;" always "; a = a * ( b + 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1869 always 1869
  "; a*=b+1;" always "; a*=b+1;"
Line 1871
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1871 always 1871
  "; a = a + ( b && c ) ;" always "; a = a + ( b && c ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1871 always 1871
  "; a+=b&&c;" always "; a+=b&&c;"
Line 1872
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1872 always 1872
  "; a = a * ( b || c ) ;" always "; a = a * ( b || c ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1872 always 1872
  "; a*=b||c;" always "; a*=b||c;"
Line 1873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1873 always 1873
  "; a = a | ( b == c ) ;" always "; a = a | ( b == c ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1873 always 1873
  "; a|=b==c;" always "; a|=b==c;"
Line 1876
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1876 always 1876
  "; a = a + ( b = 1 ) ;" always "; a = a + ( b = 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1876 always 1876
  "; a += b = 1;" always "; a += b = 1;"
Line 1879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1879 always 1879
  "; foo = foo + [ & ] ( ) { } ;" always "; foo = foo + [ & ] ( ) { } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1879 always 1879
  "; foo += [&]() {int i;};" always "; foo += [&]() {int i;};"
Line 1882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1882 always 1882
  "{ return ( a = b ) += c ; }" always "{ return ( a = b ) += c ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1882 always 1882
  "{ return (a = b) += c; }" always "{ return (a = b) += c; }"
Line 1887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1887 always 1887
  "{ if ( p == 0 ) { ; } }" always "{ if ( p == 0 ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1887 always 1887
  "{if (p == (char *)0);}" always "{if (p == (char *)0);}"
Line 1888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1888 always 1888
  "{ return str ; }" always "{ return str ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1888 always 1888
  "{return (char *)str;}" always "{return (char *)str;}"
Line 1890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1890 always 1890
  "{ if ( * a ) }" always "{ if ( * a ) }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1890 always 1890
  "{if ((char)*a)}" always "{if ((char)*a)}"
Line 1891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1891 always 1891
  "{ if ( & a ) }" always "{ if ( & a ) }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1891 always 1891
  "{if ((int)&a)}" always "{if ((int)&a)}"
Line 1892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1892 always 1892
  "{ if ( * a ) }" always "{ if ( * a ) }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1892 always 1892
  "{if ((unsigned int)(unsigned char)*a)}" always "{if ((unsigned int)(unsigned char)*a)}"
Line 1893
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1893 always 1893
  "class A { A operator* ( int ) ; } ;" always "class A { A operator* ( int ) ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1893 always 1893
  "class A { A operator *(int); };" always "class A { A operator *(int); };"
Line 1894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1894 always 1894
  "class A { A operator* ( int ) const ; } ;" always "class A { A operator* ( int ) const ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1894 always 1894
  "class A { A operator *(int) const; };" always "class A { A operator *(int) const; };"
Line 1895
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1895 always 1895
  "{ if ( p == 0 ) { ; } }" always "{ if ( p == 0 ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1895 always 1895
  "{ if (p == (char *)(char *)0); }" always "{ if (p == (char *)(char *)0); }"
Line 1896
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1896 always 1896
  "{ if ( p == 0 ) { ; } }" always "{ if ( p == 0 ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1896 always 1896
  "{ if (p == (char **)0); }" always "{ if (p == (char **)0); }"
Line 1899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1899 always 1899
  "; * ( ( char * ) p + 1 ) = 0 ;" always "; * ( ( char * ) p + 1 ) = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1899 always 1899
  "; *((char *)p + 1) = 0;" always "; *((char *)p + 1) = 0;"
Line 1901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1901 always 1901
  "{ if ( true ) }" always "{ if ( true ) }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1901 always 1901
  "{ if ((unsigned char)1) }" always "{ if ((unsigned char)1) }"
Line 1902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1902 always 1902
  "f ( 200 )" always "f ( 200 )"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1902 always 1902
  "f((unsigned char)200)" always "f((unsigned char)200)"
Line 1903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1903 always 1903
  "f ( ( char ) 1234 )" always "f ( ( char ) 1234 )"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1903 always 1903
  "f((char)1234)" always "f((char)1234)"
Line 1909
  70 always 70
  = always " void f() { int a; bool use = false; if( use ) { a=0; } else {a=1;} }"
  " void f() { int a; bool use = false; if( use ) { a=0; } else {a=1;} }" always " void f() { int a; bool use = false; if( use ) { a=0; } else {a=1;} }"
Line 1910
  46 always 46
  = always " void f() { int a; bool use = false; {a=1;} }"
  " void f() { int a; bool use = false; {a=1;} }" always " void f() { int a; bool use = false; {a=1;} }"
Line 1911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1911 always 1911
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1911 always 1911
  code2 always " void f() { int a; bool use = false; {a=1;} }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1911 always 1911
  code1 always " void f() { int a; bool use = false; if( use ) { a=0; } else {a=1;} }"
Line 1915
  69 always 69
  = always " void f() { int a; bool use = true; if( use ) { a=0; } else {a=1;} }"
  " void f() { int a; bool use = true; if( use ) { a=0; } else {a=1;} }" always " void f() { int a; bool use = true; if( use ) { a=0; } else {a=1;} }"
Line 1916
  47 always 47
  = always " void f() { int a; bool use = true; { a=0; } }"
  " void f() { int a; bool use = true; { a=0; } }" always " void f() { int a; bool use = true; { a=0; } }"
Line 1917
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1917 always 1917
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1917 always 1917
  code2 always " void f() { int a; bool use = true; { a=0; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1917 always 1917
  code1 always " void f() { int a; bool use = true; if( use ) { a=0; } else {a=1;} }"
Line 1921
  65 always 65
  = always " void f() { int a; int use = 5; if( use ) { a=0; } else {a=1;} }"
  " void f() { int a; int use = 5; if( use ) { a=0; } else {a=1;} }" always " void f() { int a; int use = 5; if( use ) { a=0; } else {a=1;} }"
Line 1922
  43 always 43
  = always " void f() { int a; int use = 5; { a=0; } }"
  " void f() { int a; int use = 5; { a=0; } }" always " void f() { int a; int use = 5; { a=0; } }"
Line 1923
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1923 always 1923
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1923 always 1923
  code2 always " void f() { int a; int use = 5; { a=0; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1923 always 1923
  code1 always " void f() { int a; int use = 5; if( use ) { a=0; } else {a=1;} }"
Line 1927
  65 always 65
  = always " void f() { int a; int use = 0; if( use ) { a=0; } else {a=1;} }"
  " void f() { int a; int use = 0; if( use ) { a=0; } else {a=1;} }" always " void f() { int a; int use = 0; if( use ) { a=0; } else {a=1;} }"
Line 1928
  41 always 41
  = always " void f() { int a; int use = 0; {a=1;} }"
  " void f() { int a; int use = 0; {a=1;} }" always " void f() { int a; int use = 0; {a=1;} }"
Line 1929
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1929 always 1929
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1929 always 1929
  code2 always " void f() { int a; int use = 0; {a=1;} }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1929 always 1929
  code1 always " void f() { int a; int use = 0; if( use ) { a=0; } else {a=1;} }"
Line 1933
  73 always 73
  = always " void f() { int a; bool use = false; if( use ) a=0; else a=1; int c=1; }"
  " void f() { int a; bool use = false; if( use ) a=0; else a=1; int c=1; }" always " void f() { int a; bool use = false; if( use ) a=0; else a=1; int c=1; }"
Line 1934
  57 always 57
  = always " void f() { int a; bool use = false; { a=1; } int c=1; }"
  " void f() { int a; bool use = false; { a=1; } int c=1; }" always " void f() { int a; bool use = false; { a=1; } int c=1; }"
Line 1935
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1935 always 1935
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1935 always 1935
  code2 always " void f() { int a; bool use = false; { a=1; } int c=1; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1935 always 1935
  code1 always " void f() { int a; bool use = false; if( use ) a=0; else a=1; int c=1; }"
Line 1939
  72 always 72
  = always " void f() { int a; bool use = true; if( use ) a=0; else a=1; int c=1; }"
  " void f() { int a; bool use = true; if( use ) a=0; else a=1; int c=1; }" always " void f() { int a; bool use = true; if( use ) a=0; else a=1; int c=1; }"
Line 1940
  56 always 56
  = always " void f() { int a; bool use = true; { a=0; } int c=1; }"
  " void f() { int a; bool use = true; { a=0; } int c=1; }" always " void f() { int a; bool use = true; { a=0; } int c=1; }"
Line 1941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1941 always 1941
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1941 always 1941
  code2 always " void f() { int a; bool use = true; { a=0; } int c=1; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1941 always 1941
  code1 always " void f() { int a; bool use = true; if( use ) a=0; else a=1; int c=1; }"
Line 1945
  82 always 82
  = always " void f() { int a; bool use = false; if( use ) a=0; else if( bb ) a=1; int c=1; }"
  " void f() { int a; bool use = false; if( use ) a=0; else if( bb ) a=1; int c=1; }" always " void f() { int a; bool use = false; if( use ) a=0; else if( bb ) a=1; int c=1; }"
Line 1946
  91 always 91
  = always " void f ( ) { int a ; bool use ; use = false ; { if ( bb ) { a = 1 ; } } int c ; c = 1 ; }"
  " void f ( ) { int a ; bool use ; use = false ; { if ( bb ) { a = 1 ; } } int c ; c = 1 ; }" always " void f ( ) { int a ; bool use ; use = false ; { if ( bb ) { a = 1 ; } } int c ; c = 1 ; }"
Line 1947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1947 always 1947
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1947 always 1947
  code2 always " void f ( ) { int a ; bool use ; use = false ; { if ( bb ) { a = 1 ; } } int c ; c = 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1947 always 1947
  code1 always " void f() { int a; bool use = false; if( use ) a=0; else if( bb ) a=1; int c=1; }"
Line 1951
  81 always 81
  = always " void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; int c=1; }"
  " void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; int c=1; }" always " void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; int c=1; }"
Line 1952
  55 always 55
  = always " void f() { int a; bool use = true; { a=0;} int c=1; }"
  " void f() { int a; bool use = true; { a=0;} int c=1; }" always " void f() { int a; bool use = true; { a=0;} int c=1; }"
Line 1953
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1953 always 1953
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1953 always 1953
  code2 always " void f() { int a; bool use = true; { a=0;} int c=1; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1953 always 1953
  code1 always " void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; int c=1; }"
Line 1957
  117 always 117
  = always "void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; else if( cc ) a=33; else { gg = 0; } int c=1; }"
  "void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; else if( cc ) a=33; else { gg = 0; } int c=1; }" always "void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; else if( cc ) a=33; else { gg = 0; } int c=1; }"
Line 1958
  15 always 15
  = always "void f ( ) { }"
  "void f ( ) { }" always "void f ( ) { }"
Line 1959
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1959 always 1959
  code2 always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1959 always 1959
  code1 always "void f() { int a; bool use = true; if( use ) a=0; else if( bb ) a=1; else if( cc ) a=33; else { gg = 0; } int c=1; }"
Line 1963
  67 always 67
  = always " void f() { if( aa ) { a=0; } else if( true ) a=1; else { a=2; } }"
  " void f() { if( aa ) { a=0; } else if( true ) a=1; else { a=2; } }" always " void f() { if( aa ) { a=0; } else if( true ) a=1; else { a=2; } }"
Line 1964
  59 always 59
  = always " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 1 ; } } }"
  " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 1 ; } } }" always " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 1 ; } } }"
Line 1965
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1965 always 1965
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1965 always 1965
  code2 always " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 1 ; } } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1965 always 1965
  code1 always " void f() { if( aa ) { a=0; } else if( true ) a=1; else { a=2; } }"
Line 1969
  68 always 68
  = always " void f() { if( aa ) { a=0; } else if( false ) a=1; else { a=2; } }"
  " void f() { if( aa ) { a=0; } else if( false ) a=1; else { a=2; } }" always " void f() { if( aa ) { a=0; } else if( false ) a=1; else { a=2; } }"
Line 1970
  59 always 59
  = always " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 2 ; } } }"
  " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 2 ; } } }" always " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 2 ; } } }"
Line 1971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1971 always 1971
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1971 always 1971
  code2 always " void f ( ) { if ( aa ) { a = 0 ; } else { { a = 2 ; } } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1971 always 1971
  code1 always " void f() { if( aa ) { a=0; } else if( false ) a=1; else { a=2; } }"
Line 1975
  50 always 50
  = always "static const int x=1; void f() { if(x) { a=0; } }"
  "static const int x=1; void f() { if(x) { a=0; } }" always "static const int x=1; void f() { if(x) { a=0; } }"
Line 1976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1976 always 1976
  "void f ( ) { a = 0 ; }" always "void f ( ) { a = 0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1976 always 1976
  code1 always "static const int x=1; void f() { if(x) { a=0; } }"
Line 1981
  54 always 54
  = always "void foo()\n{\nconst char *a =\n{\n\"hello \"\n\"world\"\n};\n}\n"
  "void foo()\n{\nconst char *a =\n{\n\"hello \"\n\"world\"\n};\n}\n" always "void foo()\n{\nconst char *a =\n{\n\"hello \"\n\"world\"\n};\n}\n"
Line 1990
  51 always 51
  = always "void foo()\n{\nconst char *a =\n{\n\"hello world\"\n};\n}\n"
  "void foo()\n{\nconst char *a =\n{\n\"hello world\"\n};\n}\n" always "void foo()\n{\nconst char *a =\n{\n\"hello world\"\n};\n}\n"
Line 1997
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1997 always 1997
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1997 always 1997
  code2 always "void foo()\n{\nconst char *a =\n{\n\"hello world\"\n};\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  1997 always 1997
  code1 always "void foo()\n{\nconst char *a =\n{\n\"hello \"\n\"world\"\n};\n}\n"
Line 1999
  25 always 25
  = always "x = L\"1\" TEXT(\"2\") L\"3\";"
  "x = L\"1\" TEXT(\"2\") L\"3\";" always "x = L\"1\" TEXT(\"2\") L\"3\";"
Line 2000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2000 always 2000
  "x = L\"123\" ;" always "x = L\"123\" ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2000 always 2000
  code3 always "x = L\"1\" TEXT(\"2\") L\"3\";"
  false always 0
Line 2002
  20 always 20
  = always "x = TEXT(\"1\") L\"2\";"
  "x = TEXT(\"1\") L\"2\";" always "x = TEXT(\"1\") L\"2\";"
Line 2003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2003 always 2003
  "x = L\"1\" L\"2\" ;" always "x = L\"1\" L\"2\" ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2003 always 2003
  code4 always "x = TEXT(\"1\") L\"2\";"
  false always 0
Line 2007
  27 always 27
  = always "a = L\"hello \"  L\"world\" ;\n"
  "a = L\"hello \"  L\"world\" ;\n" always "a = L\"hello \"  L\"world\" ;\n"
Line 2009
  21 always 21
  = always "a = L\"hello world\" ;"
  "a = L\"hello world\" ;" always "a = L\"hello world\" ;"
Line 2011
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2012
  code always "a = L\"hello \"  L\"world\" ;\n"
Line 2013
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2013 always 2013
  "test.cpp" always "test.cpp"
Line 2015
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2015 always 2015
  expected always "a = L\"hello world\" ;"
  nullptr always 0
  false always 0
Line 2019
  20 always 20
  = always "abcd = u\"ab\" u\"cd\";"
  "abcd = u\"ab\" u\"cd\";" always "abcd = u\"ab\" u\"cd\";"
Line 2021
  17 always 17
  = always "abcd = u\"abcd\" ;"
  "abcd = u\"abcd\" ;" always "abcd = u\"abcd\" ;"
Line 2023
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2024
  code always "abcd = u\"ab\" u\"cd\";"
Line 2025
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2025 always 2025
  "test.cpp" always "test.cpp"
Line 2027
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2027 always 2027
  expected always "abcd = u\"abcd\" ;"
  nullptr always 0
  false always 0
Line 2031
  20 always 20
  = always "abcd = U\"ab\" U\"cd\";"
  "abcd = U\"ab\" U\"cd\";" always "abcd = U\"ab\" U\"cd\";"
Line 2033
  17 always 17
  = always "abcd = U\"abcd\" ;"
  "abcd = U\"abcd\" ;" always "abcd = U\"abcd\" ;"
Line 2035
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2036
  code always "abcd = U\"ab\" U\"cd\";"
Line 2037
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2037 always 2037
  "test.cpp" always "test.cpp"
Line 2039
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2039 always 2039
  expected always "abcd = U\"abcd\" ;"
  nullptr always 0
  false always 0
Line 2043
  22 always 22
  = always "abcd = u8\"ab\" u8\"cd\";"
  "abcd = u8\"ab\" u8\"cd\";" always "abcd = u8\"ab\" u8\"cd\";"
Line 2045
  18 always 18
  = always "abcd = u8\"abcd\" ;"
  "abcd = u8\"abcd\" ;" always "abcd = u8\"abcd\" ;"
Line 2047
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2048
  code always "abcd = u8\"ab\" u8\"cd\";"
Line 2049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2049 always 2049
  "test.cpp" always "test.cpp"
Line 2051
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2051 always 2051
  expected always "abcd = u8\"abcd\" ;"
  nullptr always 0
  false always 0
Line 2055
  26 always 26
  = always "abcdef = \"ab\" L\"cd\" \"ef\";"
  "abcdef = \"ab\" L\"cd\" \"ef\";" always "abcdef = \"ab\" L\"cd\" \"ef\";"
Line 2057
  21 always 21
  = always "abcdef = L\"abcdef\" ;"
  "abcdef = L\"abcdef\" ;" always "abcdef = L\"abcdef\" ;"
Line 2059
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2060
  code always "abcdef = \"ab\" L\"cd\" \"ef\";"
Line 2061
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2061 always 2061
  "test.cpp" always "test.cpp"
Line 2063
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2063 always 2063
  expected always "abcdef = L\"abcdef\" ;"
  nullptr always 0
  false always 0
Line 2068
  43 always 43
  = always "void foo( int a )\n{\na++;\na--;\n++a;\n--a;\n}\n"
  "void foo( int a )\n{\na++;\na--;\n++a;\n--a;\n}\n" always "void foo( int a )\n{\na++;\na--;\n++a;\n--a;\n}\n"
Line 2075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2075 always 2075
  "void foo ( int a ) { a ++ ; a -- ; ++ a ; -- a ; }" always "void foo ( int a ) { a ++ ; a -- ; ++ a ; -- a ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2075 always 2075
  code1 always "void foo( int a )\n{\na++;\na--;\n++a;\n--a;\n}\n"
Line 2078
  30 always 30
  = always "void foo( int a )\n{\na=a+a;\n}\n"
  "void foo( int a )\n{\na=a+a;\n}\n" always "void foo( int a )\n{\na=a+a;\n}\n"
Line 2082
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2082 always 2082
  "void foo ( int a ) { a = a + a ; }" always "void foo ( int a ) { a = a + a ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2082 always 2082
  code1 always "void foo( int a )\n{\na=a+a;\n}\n"
Line 2085
  39 always 39
  = always "void foo( int a, int b )\n{\na=a+++b;\n}\n"
  "void foo( int a, int b )\n{\na=a+++b;\n}\n" always "void foo( int a, int b )\n{\na=a+++b;\n}\n"
Line 2089
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2089 always 2089
  "void foo ( int a , int b ) { a = a ++ + b ; }" always "void foo ( int a , int b ) { a = a ++ + b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2089 always 2089
  code1 always "void foo( int a, int b )\n{\na=a+++b;\n}\n"
Line 2092
  39 always 39
  = always "void foo( int a, int b )\n{\na=a---b;\n}\n"
  "void foo( int a, int b )\n{\na=a---b;\n}\n" always "void foo( int a, int b )\n{\na=a---b;\n}\n"
Line 2096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2096 always 2096
  "void foo ( int a , int b ) { a = a -- - b ; }" always "void foo ( int a , int b ) { a = a -- - b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2096 always 2096
  code1 always "void foo( int a, int b )\n{\na=a---b;\n}\n"
Line 2099
  39 always 39
  = always "void foo( int a, int b )\n{\na=a--+b;\n}\n"
  "void foo( int a, int b )\n{\na=a--+b;\n}\n" always "void foo( int a, int b )\n{\na=a--+b;\n}\n"
Line 2103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2103 always 2103
  "void foo ( int a , int b ) { a = a -- + b ; }" always "void foo ( int a , int b ) { a = a -- + b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2103 always 2103
  code1 always "void foo( int a, int b )\n{\na=a--+b;\n}\n"
Line 2106
  39 always 39
  = always "void foo( int a, int b )\n{\na=a++-b;\n}\n"
  "void foo( int a, int b )\n{\na=a++-b;\n}\n" always "void foo( int a, int b )\n{\na=a++-b;\n}\n"
Line 2110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2110 always 2110
  "void foo ( int a , int b ) { a = a ++ - b ; }" always "void foo ( int a , int b ) { a = a ++ - b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2110 always 2110
  code1 always "void foo( int a, int b )\n{\na=a++-b;\n}\n"
Line 2113
  39 always 39
  = always "void foo( int a, int b )\n{\na=a+--b;\n}\n"
  "void foo( int a, int b )\n{\na=a+--b;\n}\n" always "void foo( int a, int b )\n{\na=a+--b;\n}\n"
Line 2117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2117 always 2117
  "void foo ( int a , int b ) { a = a + -- b ; }" always "void foo ( int a , int b ) { a = a + -- b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2117 always 2117
  code1 always "void foo( int a, int b )\n{\na=a+--b;\n}\n"
Line 2120
  39 always 39
  = always "void foo( int a, int b )\n{\na=a-++b;\n}\n"
  "void foo( int a, int b )\n{\na=a-++b;\n}\n" always "void foo( int a, int b )\n{\na=a-++b;\n}\n"
Line 2124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2124 always 2124
  "void foo ( int a , int b ) { a = a - ++ b ; }" always "void foo ( int a , int b ) { a = a - ++ b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2124 always 2124
  code1 always "void foo( int a, int b )\n{\na=a-++b;\n}\n"
Line 2130
  41 always 41
  = always "void foo( int a, int b )\n{\na=a + + b;\n}\n"
  "void foo( int a, int b )\n{\na=a + + b;\n}\n" always "void foo( int a, int b )\n{\na=a + + b;\n}\n"
Line 2134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2134 always 2134
  "void foo ( int a , int b ) { a = a + b ; }" always "void foo ( int a , int b ) { a = a + b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2134 always 2134
  code1 always "void foo( int a, int b )\n{\na=a + + b;\n}\n"
Line 2137
  43 always 43
  = always "void foo( int a, int b )\n{\na=a + + + b;\n}\n"
  "void foo( int a, int b )\n{\na=a + + + b;\n}\n" always "void foo( int a, int b )\n{\na=a + + + b;\n}\n"
Line 2141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2141 always 2141
  "void foo ( int a , int b ) { a = a + b ; }" always "void foo ( int a , int b ) { a = a + b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2141 always 2141
  code1 always "void foo( int a, int b )\n{\na=a + + + b;\n}\n"
Line 2144
  41 always 41
  = always "void foo( int a, int b )\n{\na=a + - b;\n}\n"
  "void foo( int a, int b )\n{\na=a + - b;\n}\n" always "void foo( int a, int b )\n{\na=a + - b;\n}\n"
Line 2148
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2148 always 2148
  "void foo ( int a , int b ) { a = a - b ; }" always "void foo ( int a , int b ) { a = a - b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2148 always 2148
  code1 always "void foo( int a, int b )\n{\na=a + - b;\n}\n"
Line 2151
  41 always 41
  = always "void foo( int a, int b )\n{\na=a - + b;\n}\n"
  "void foo( int a, int b )\n{\na=a - + b;\n}\n" always "void foo( int a, int b )\n{\na=a - + b;\n}\n"
Line 2155
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2155 always 2155
  "void foo ( int a , int b ) { a = a - b ; }" always "void foo ( int a , int b ) { a = a - b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2155 always 2155
  code1 always "void foo( int a, int b )\n{\na=a - + b;\n}\n"
Line 2158
  41 always 41
  = always "void foo( int a, int b )\n{\na=a - - b;\n}\n"
  "void foo( int a, int b )\n{\na=a - - b;\n}\n" always "void foo( int a, int b )\n{\na=a - - b;\n}\n"
Line 2162
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2162 always 2162
  "void foo ( int a , int b ) { a = a + b ; }" always "void foo ( int a , int b ) { a = a + b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2162 always 2162
  code1 always "void foo( int a, int b )\n{\na=a - - b;\n}\n"
Line 2165
  43 always 43
  = always "void foo( int a, int b )\n{\na=a - + - b;\n}\n"
  "void foo( int a, int b )\n{\na=a - + - b;\n}\n" always "void foo( int a, int b )\n{\na=a - + - b;\n}\n"
Line 2169
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2169 always 2169
  "void foo ( int a , int b ) { a = a + b ; }" always "void foo ( int a , int b ) { a = a + b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2169 always 2169
  code1 always "void foo( int a, int b )\n{\na=a - + - b;\n}\n"
Line 2172
  43 always 43
  = always "void foo( int a, int b )\n{\na=a - - - b;\n}\n"
  "void foo( int a, int b )\n{\na=a - - - b;\n}\n" always "void foo( int a, int b )\n{\na=a - - - b;\n}\n"
Line 2176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2176 always 2176
  "void foo ( int a , int b ) { a = a - b ; }" always "void foo ( int a , int b ) { a = a - b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2176 always 2176
  code1 always "void foo( int a, int b )\n{\na=a - - - b;\n}\n"
Line 2182
  34 always 34
  = always "void foo( int a )\n{\na=a + + 1;\n}\n"
  "void foo( int a )\n{\na=a + + 1;\n}\n" always "void foo( int a )\n{\na=a + + 1;\n}\n"
Line 2186
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2186 always 2186
  "void foo ( int a ) { a = a + 1 ; }" always "void foo ( int a ) { a = a + 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2186 always 2186
  code1 always "void foo( int a )\n{\na=a + + 1;\n}\n"
Line 2189
  36 always 36
  = always "void foo( int a )\n{\na=a + + + 1;\n}\n"
  "void foo( int a )\n{\na=a + + + 1;\n}\n" always "void foo( int a )\n{\na=a + + + 1;\n}\n"
Line 2193
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2193 always 2193
  "void foo ( int a ) { a = a + 1 ; }" always "void foo ( int a ) { a = a + 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2193 always 2193
  code1 always "void foo( int a )\n{\na=a + + + 1;\n}\n"
Line 2196
  34 always 34
  = always "void foo( int a )\n{\na=a + - 1;\n}\n"
  "void foo( int a )\n{\na=a + - 1;\n}\n" always "void foo( int a )\n{\na=a + - 1;\n}\n"
Line 2200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2200 always 2200
  "void foo ( int a ) { a = a - 1 ; }" always "void foo ( int a ) { a = a - 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2200 always 2200
  code1 always "void foo( int a )\n{\na=a + - 1;\n}\n"
Line 2203
  34 always 34
  = always "void foo( int a )\n{\na=a - + 1;\n}\n"
  "void foo( int a )\n{\na=a - + 1;\n}\n" always "void foo( int a )\n{\na=a - + 1;\n}\n"
Line 2207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2207 always 2207
  "void foo ( int a ) { a = a - 1 ; }" always "void foo ( int a ) { a = a - 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2207 always 2207
  code1 always "void foo( int a )\n{\na=a - + 1;\n}\n"
Line 2210
  34 always 34
  = always "void foo( int a )\n{\na=a - - 1;\n}\n"
  "void foo( int a )\n{\na=a - - 1;\n}\n" always "void foo( int a )\n{\na=a - - 1;\n}\n"
Line 2214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2214 always 2214
  "void foo ( int a ) { a = a + 1 ; }" always "void foo ( int a ) { a = a + 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2214 always 2214
  code1 always "void foo( int a )\n{\na=a - - 1;\n}\n"
Line 2217
  36 always 36
  = always "void foo( int a )\n{\na=a - + - 1;\n}\n"
  "void foo( int a )\n{\na=a - + - 1;\n}\n" always "void foo( int a )\n{\na=a - + - 1;\n}\n"
Line 2221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2221 always 2221
  "void foo ( int a ) { a = a + 1 ; }" always "void foo ( int a ) { a = a + 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2221 always 2221
  code1 always "void foo( int a )\n{\na=a - + - 1;\n}\n"
Line 2224
  36 always 36
  = always "void foo( int a )\n{\na=a - - - 1;\n}\n"
  "void foo( int a )\n{\na=a - - - 1;\n}\n" always "void foo( int a )\n{\na=a - - - 1;\n}\n"
Line 2228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2228 always 2228
  "void foo ( int a ) { a = a - 1 ; }" always "void foo ( int a ) { a = a - 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2228 always 2228
  code1 always "void foo( int a )\n{\na=a - - - 1;\n}\n"
Line 2234
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2234 always 2234
  "a <= 110 ;" always "a <= 110 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2234 always 2234
  "a <= (10+100);" always "a <= (10+100);"
Line 2235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2235 always 2235
  "{ while ( x ( ) == -1 ) { } }" always "{ while ( x ( ) == -1 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2235 always 2235
  "{while((x()) == -1){ }}" always "{while((x()) == -1){ }}"
Line 2240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2240 always 2240
  "a = p ;" always "a = p ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2240 always 2240
  "a = (p);" always "a = (p);"
Line 2241
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2241 always 2241
  "void f ( ) { if ( a < p ) { } }" always "void f ( ) { if ( a < p ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2241 always 2241
  "void f(){if(a<(p)){}}" always "void f(){if(a<(p)){}}"
Line 2242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2242 always 2242
  "void f ( ) { int p ; if ( p == -1 ) { } }" always "void f ( ) { int p ; if ( p == -1 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2242 always 2242
  "void f(){int p; if((p)==-1){}}" always "void f(){int p; if((p)==-1){}}"
Line 2243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2243 always 2243
  "void f ( ) { int p ; if ( -1 == p ) { } }" always "void f ( ) { int p ; if ( -1 == p ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2243 always 2243
  "void f(){int p; if(-1==(p)){}}" always "void f(){int p; if(-1==(p)){}}"
Line 2244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2244 always 2244
  "void f ( ) { int p ; if ( p ) { } }" always "void f ( ) { int p ; if ( p ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2244 always 2244
  "void f(){int p; if((p)){}}" always "void f(){int p; if((p)){}}"
Line 2245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2245 always 2245
  "void f ( ) { return p ; }" always "void f ( ) { return p ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2245 always 2245
  "void f(){return (p);}" always "void f(){return (p);}"
Line 2246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2246 always 2246
  "void f ( ) { int * p ; if ( * p == 0 ) { } }" always "void f ( ) { int * p ; if ( * p == 0 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2246 always 2246
  "void f(){int *p; if (*(p) == 0) {}}" always "void f(){int *p; if (*(p) == 0) {}}"
Line 2247
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2247 always 2247
  "void f ( ) { int * p ; if ( * p == 0 ) { } }" always "void f ( ) { int * p ; if ( * p == 0 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2247 always 2247
  "void f(){int *p; if (*p == 0) {}}" always "void f(){int *p; if (*p == 0) {}}"
Line 2248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2248 always 2248
  "void f ( int & p ) { p = 1 ; }" always "void f ( int & p ) { p = 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2248 always 2248
  "void f(int &p) {(p) = 1;}" always "void f(int &p) {(p) = 1;}"
Line 2249
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2249 always 2249
  "void f ( ) { int p [ 10 ] ; p [ 0 ] = 1 ; }" always "void f ( ) { int p [ 10 ] ; p [ 0 ] = 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2249 always 2249
  "void f(){int p[10]; (p)[0] = 1;}" always "void f(){int p[10]; (p)[0] = 1;}"
Line 2250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2250 always 2250
  "void f ( ) { int p ; if ( p == 0 ) { } }" always "void f ( ) { int p ; if ( p == 0 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2250 always 2250
  "void f(){int p; if ((p) == 0) {}}" always "void f(){int p; if ((p) == 0) {}}"
Line 2251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2251 always 2251
  "void f ( ) { int * p ; * p = 1 ; }" always "void f ( ) { int * p ; * p = 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2251 always 2251
  "void f(){int *p; *(p) = 1;}" always "void f(){int *p; *(p) = 1;}"
Line 2252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2252 always 2252
  "void f ( ) { int p ; if ( p ) { } p = 1 ; }" always "void f ( ) { int p ; if ( p ) { } p = 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2252 always 2252
  "void f(){int p; if ( p ) { } (p) = 1;}" always "void f(){int p; if ( p ) { } (p) = 1;}"
Line 2253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2253 always 2253
  "void f ( ) { a . b ; }" always "void f ( ) { a . b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2253 always 2253
  "void f ( ) { ( & a ) -> b ; }" always "void f ( ) { ( & a ) -> b ; }"
Line 2256
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2256 always 2256
  "b = a ;" always "b = a ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2256 always 2256
  "b = (char)a;" always "b = (char)a;"
Line 2257
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2257 always 2257
  "cast < char * > ( p ) ;" always "cast < char * > ( p ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2257 always 2257
  "cast<char *>(p);" always "cast<char *>(p);"
Line 2258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2258 always 2258
  "void f ( ) { return ( a + b ) * c ; }" always "void f ( ) { return ( a + b ) * c ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2258 always 2258
  "void f(){return (a+b)*c;}" always "void f(){return (a+b)*c;}"
Line 2259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2259 always 2259
  "void f ( ) { int p ; if ( 2 * p == 0 ) { } }" always "void f ( ) { int p ; if ( 2 * p == 0 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2259 always 2259
  "void f(){int p; if (2*p == 0) {}}" always "void f(){int p; if (2*p == 0) {}}"
Line 2260
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2260 always 2260
  "void f ( ) { DIR * f ; f = opendir ( dirname ) ; if ( closedir ( f ) ) { } }" always "void f ( ) { DIR * f ; f = opendir ( dirname ) ; if ( closedir ( f ) ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2260 always 2260
  "void f(){DIR * f = opendir(dirname);if (closedir(f)){}}" always "void f(){DIR * f = opendir(dirname);if (closedir(f)){}}"
Line 2261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2261 always 2261
  "void foo ( int p ) { if ( p >= 0 ) { ; } }" always "void foo ( int p ) { if ( p >= 0 ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2261 always 2261
  "void foo(int p){if((p)>=0);}" always "void foo(int p){if((p)>=0);}"
Line 2265
  42 always 42
  = always "void f ( ) { char str [ 100 ] = \"100\" ; }"
  "void f ( ) { char str [ 100 ] = \"100\" ; }" always "void f ( ) { char str [ 100 ] = \"100\" ; }"
Line 2266
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2266 always 2266
  code always "void f ( ) { char str [ 100 ] = \"100\" ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2266 always 2266
  code always "void f ( ) { char str [ 100 ] = \"100\" ; }"
Line 2270
  38 always 38
  = always "void f ( ) { char str [ ] = \"100\" ; }"
  "void f ( ) { char str [ ] = \"100\" ; }" always "void f ( ) { char str [ ] = \"100\" ; }"
Line 2271
  40 always 40
  = always "void f ( ) { char str [ 4 ] = \"100\" ; }"
  "void f ( ) { char str [ 4 ] = \"100\" ; }" always "void f ( ) { char str [ 4 ] = \"100\" ; }"
Line 2272
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2272 always 2272
  expected1 always "void f ( ) { char str [ 4 ] = \"100\" ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2272 always 2272
  code1 always "void f ( ) { char str [ ] = \"100\" ; }"
Line 2274
  23 always 23
  = always "char str [ ] = \"\\x00\";"
  "char str [ ] = \"\\x00\";" always "char str [ ] = \"\\x00\";"
Line 2275
  24 always 24
  = always "char str [ 2 ] = \"\\0\" ;"
  "char str [ 2 ] = \"\\0\" ;" always "char str [ 2 ] = \"\\0\" ;"
Line 2276
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2276 always 2276
  expected2 always "char str [ 2 ] = \"\\0\" ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2276 always 2276
  code2 always "char str [ ] = \"\\x00\";"
Line 2278
  21 always 21
  = always "char str [ ] = \"\\0\";"
  "char str [ ] = \"\\0\";" always "char str [ ] = \"\\0\";"
Line 2279
  24 always 24
  = always "char str [ 2 ] = \"\\0\" ;"
  "char str [ 2 ] = \"\\0\" ;" always "char str [ 2 ] = \"\\0\" ;"
Line 2280
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2280 always 2280
  expected3 always "char str [ 2 ] = \"\\0\" ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2280 always 2280
  code3 always "char str [ ] = \"\\0\";"
Line 2282
  23 always 23
  = always "char str [ ] = \"\\n\\n\";"
  "char str [ ] = \"\\n\\n\";" always "char str [ ] = \"\\n\\n\";"
Line 2283
  26 always 26
  = always "char str [ 3 ] = \"\\n\\n\" ;"
  "char str [ 3 ] = \"\\n\\n\" ;" always "char str [ 3 ] = \"\\n\\n\" ;"
Line 2284
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2284 always 2284
  expected4 always "char str [ 3 ] = \"\\n\\n\" ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2284 always 2284
  code4 always "char str [ ] = \"\\n\\n\";"
Line 2289
  84 always 84
  = always "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    a++;\n}\n"
  "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    a++;\n}\n" always "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    a++;\n}\n"
Line 2297
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2297 always 2297
  "void f ( int a ) { if ( a > 10 ) { a = 5 ; } else { a = 10 ; } a ++ ; }" always "void f ( int a ) { if ( a > 10 ) { a = 5 ; } else { a = 10 ; } a ++ ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2297 always 2297
  code always "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    a++;\n}\n"
Line 2301
  84 always 84
  = always "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    ++a;\n}\n"
  "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    ++a;\n}\n" always "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    ++a;\n}\n"
Line 2309
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2309 always 2309
  "void f ( int a ) { if ( a > 10 ) { a = 5 ; } else { a = 10 ; } ++ a ; }" always "void f ( int a ) { if ( a > 10 ) { a = 5 ; } else { a = 10 ; } ++ a ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2309 always 2309
  code always "void f(int a)\n{\n    if (a > 10)\n        a = 5;\n    else\n        a = 10;\n    ++a;\n}\n"
Line 2314
  71 always 71
  = always "void f(int &c)\n{\n    c = 0;\n    c++;\n    if (c>0) { c++; }\n    c++;\n}\n"
  "void f(int &c)\n{\n    c = 0;\n    c++;\n    if (c>0) { c++; }\n    c++;\n}\n" always "void f(int &c)\n{\n    c = 0;\n    c++;\n    if (c>0) { c++; }\n    c++;\n}\n"
Line 2321
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2321 always 2321
  "void f ( int & c ) { c = 3 ; { ; } ; }" always "void f ( int & c ) { c = 3 ; { ; } ; }"
  "void f ( int & c ) { c = 1 ; { c ++ ; } c ++ ; }" always "void f ( int & c ) { c = 1 ; { c ++ ; } c ++ ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2321 always 2321
  code always "void f(int &c)\n{\n    c = 0;\n    c++;\n    if (c>0) { c++; }\n    c++;\n}\n"
Line 2328
  71 always 71
  = always "void f(int &c)\n{\n    c = 0;\n    ++c;\n    if (c>0) { ++c; }\n    ++c;\n}\n"
  "void f(int &c)\n{\n    c = 0;\n    ++c;\n    if (c>0) { ++c; }\n    ++c;\n}\n" always "void f(int &c)\n{\n    c = 0;\n    ++c;\n    if (c>0) { ++c; }\n    ++c;\n}\n"
Line 2335
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2335 always 2335
  "void f ( int & c ) { c = 3 ; { ; } ; }" always "void f ( int & c ) { c = 3 ; { ; } ; }"
  "void f ( int & c ) { c = 1 ; { ++ c ; } ++ c ; }" always "void f ( int & c ) { c = 1 ; { ++ c ; } ++ c ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2335 always 2335
  code always "void f(int &c)\n{\n    c = 0;\n    ++c;\n    if (c>0) { ++c; }\n    ++c;\n}\n"
Line 2340
  40 always 40
  = always "void f()\n{\n char a[] = \"p\";\n ++a[0];\n}\n"
  "void f()\n{\n char a[] = \"p\";\n ++a[0];\n}\n" always "void f()\n{\n char a[] = \"p\";\n ++a[0];\n}\n"
Line 2345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2345 always 2345
  "void f ( ) { char a [ 2 ] = \"p\" ; ++ a [ 0 ] ; }" always "void f ( ) { char a [ 2 ] = \"p\" ; ++ a [ 0 ] ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2345 always 2345
  code always "void f()\n{\n char a[] = \"p\";\n ++a[0];\n}\n"
Line 2350
  55 always 55
  = always "void f(){ if(x) {} else if(ab) { cd } else { ef }gh; }"
  "void f(){ if(x) {} else if(ab) { cd } else { ef }gh; }" always "void f(){ if(x) {} else if(ab) { cd } else { ef }gh; }"
Line 2351
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2351 always 2351
  "\n\n##file 0\n1: void f ( ) { if ( x ) { } else { if ( ab ) { cd } else { ef } } gh ; }\n" always "\n\n##file 0\n1: void f ( ) { if ( x ) { } else { if ( ab ) { cd } else { ef } } gh ; }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2351 always 2351
  code always "void f(){ if(x) {} else if(ab) { cd } else { ef }gh; }"
Line 2354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2354 always 2354
  "\n\n##file 0\n1: void f ( ) { if ( x ) { } else { if ( x ) { } } }\n" always "\n\n##file 0\n1: void f ( ) { if ( x ) { } else { if ( x ) { } } }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2354 always 2354
  "void f(){ if(x) {} else if (x) { } }" always "void f(){ if(x) {} else if (x) { } }"
Line 2357
  111 always 111
  = always "void f(int g,int f) {\nif(g==1) {poo();}\nelse if( g == 2 )\n{\n if( f == 0 ){coo();}\n else if( f==1)\n  goo();\n}\n}"
  "void f(int g,int f) {\nif(g==1) {poo();}\nelse if( g == 2 )\n{\n if( f == 0 ){coo();}\n else if( f==1)\n  goo();\n}\n}" always "void f(int g,int f) {\nif(g==1) {poo();}\nelse if( g == 2 )\n{\n if( f == 0 ){coo();}\n else if( f==1)\n  goo();\n}\n}"
Line 2367
  149 always 149
  = always "void f ( int g , int f ) { if ( g == 1 ) { poo ( ) ; } else { if ( g == 2 ) { if ( f == 0 ) { coo ( ) ; } else { if ( f == 1 ) { goo ( ) ; } } } } }"
  "void f ( int g , int f ) { if ( g == 1 ) { poo ( ) ; } else { if ( g == 2 ) { if ( f == 0 ) { coo ( ) ; } else { if ( f == 1 ) { goo ( ) ; } } } } }" always "void f ( int g , int f ) { if ( g == 1 ) { poo ( ) ; } else { if ( g == 2 ) { if ( f == 0 ) { coo ( ) ; } else { if ( f == 1 ) { goo ( ) ; } } } } }"
Line 2383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2383 always 2383
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2383 always 2383
  expected always "void f ( int g , int f ) { if ( g == 1 ) { poo ( ) ; } else { if ( g == 2 ) { if ( f == 0 ) { coo ( ) ; } else { if ( f == 1 ) { goo ( ) ; } } } } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2383 always 2383
  src always "void f(int g,int f) {\nif(g==1) {poo();}\nelse if( g == 2 )\n{\n if( f == 0 ){coo();}\n else if( f==1)\n  goo();\n}\n}"
Line 2388
  56 always 56
  = always "( []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() );"
  "( []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() );" always "( []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() );"
Line 2389
  91 always 91
  = always "\n\n##file 0\n1: ( [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ) ;\n"
  "\n\n##file 0\n1: ( [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ) ;\n" always "\n\n##file 0\n1: ( [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ) ;\n"
Line 2390
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2390 always 2390
  expected always "\n\n##file 0\n1: ( [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ) ;\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2390 always 2390
  src always "( []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() );"
Line 2393
  56 always 56
  = always "[ []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() ];"
  "[ []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() ];" always "[ []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() ];"
Line 2394
  91 always 91
  = always "\n\n##file 0\n1: [ [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ] ;\n"
  "\n\n##file 0\n1: [ [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ] ;\n" always "\n\n##file 0\n1: [ [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ] ;\n"
Line 2395
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2395 always 2395
  expected always "\n\n##file 0\n1: [ [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) ] ;\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2395 always 2395
  src always "[ []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() ];"
Line 2398
  57 always 57
  = always "= { []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() }"
  "= { []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() }" always "= { []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() }"
Line 2399
  91 always 91
  = always "\n\n##file 0\n1: = { [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) }\n"
  "\n\n##file 0\n1: = { [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) }\n" always "\n\n##file 0\n1: = { [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) }\n"
Line 2400
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2400 always 2400
  expected always "\n\n##file 0\n1: = { [ ] { if ( ab ) { cd } else { if ( ef ) { gh } else { ij } } kl } ( ) }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2400 always 2400
  src always "= { []{if (ab) {cd}else if(ef) { gh } else { ij }kl}() }"
Line 2405
  ( always !<=-1
Line 2406
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2409
  type possible {"*"@124,"char"@126,"*"@132,"*"@133,"*"@134,"char"@136,"char"@137,"char"@138,"*"@140,"*"@141}
Line 2410
  return always !<=-1
  & {lifetime[Address]=(tok1),!0}
Line 2418
  = always "void foo()\n{\n    int i[4];\n    sizeof(i);\n    sizeof(*i);\n}\n"
  "void foo()\n{\n    int i[4];\n    sizeof(i);\n    sizeof(*i);\n}\n" always "void foo()\n{\n    int i[4];\n    sizeof(i);\n    sizeof(*i);\n}\n"
Line 2424
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2424 always 2424
  "void foo ( ) { int i [ 4 ] ; 16 ; 4 ; }" always "void foo ( ) { int i [ 4 ] ; 16 ; 4 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2424 always 2424
  code always "void foo()\n{\n    int i[4];\n    sizeof(i);\n    sizeof(*i);\n}\n"
Line 2426
  = always "static int i[4];\nvoid f()\n{\n    int i[10];\n    sizeof(i);\n}\n"
  "static int i[4];\nvoid f()\n{\n    int i[10];\n    sizeof(i);\n}\n" always "static int i[4];\nvoid f()\n{\n    int i[10];\n    sizeof(i);\n}\n"
Line 2432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2432 always 2432
  "static int i [ 4 ] ; void f ( ) { int i [ 10 ] ; 40 ; }" always "static int i [ 4 ] ; void f ( ) { int i [ 10 ] ; 40 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2432 always 2432
  code always "static int i[4];\nvoid f()\n{\n    int i[10];\n    sizeof(i);\n}\n"
Line 2434
  = always "int i[10];\nsizeof(i[0]);\n"
  "int i[10];\nsizeof(i[0]);\n" always "int i[10];\nsizeof(i[0]);\n"
Line 2436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2436 always 2436
  "int i [ 10 ] ; 4 ;" always "int i [ 10 ] ; 4 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2436 always 2436
  code always "int i[10];\nsizeof(i[0]);\n"
Line 2438
  = always "int i[10];\nsizeof i[0];\n"
  "int i[10];\nsizeof i[0];\n" always "int i[10];\nsizeof i[0];\n"
Line 2440
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2440 always 2440
  "int i [ 10 ] ; 4 ;" always "int i [ 10 ] ; 4 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2440 always 2440
  code always "int i[10];\nsizeof i[0];\n"
Line 2443
  = always "char i[2][20];\nsizeof(i[1]);\nsizeof(i);"
  "char i[2][20];\nsizeof(i[1]);\nsizeof(i);" always "char i[2][20];\nsizeof(i[1]);\nsizeof(i);"
Line 2446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2446 always 2446
  "char i [ 2 ] [ 20 ] ; 20 ; 40 ;" always "char i [ 2 ] [ 20 ] ; 20 ; 40 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2446 always 2446
  code always "char i[2][20];\nsizeof(i[1]);\nsizeof(i);"
Line 2448
  = always "char i[2][20][30];\nsizeof(i[1][4][2]);\nsizeof(***i);\nsizeof(i[1][4]);\nsizeof(**i);\nsizeof(i[1]);\nsizeof(*i);\nsizeof(i);"
  "char i[2][20][30];\nsizeof(i[1][4][2]);\nsizeof(***i);\nsizeof(i[1][4]);\nsizeof(**i);\nsizeof(i[1]);\nsizeof(*i);\nsizeof(i);" always "char i[2][20][30];\nsizeof(i[1][4][2]);\nsizeof(***i);\nsizeof(i[1][4]);\nsizeof(**i);\nsizeof(i[1]);\nsizeof(*i);\nsizeof(i);"
Line 2456
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2456 always 2456
  "char i [ 2 ] [ 20 ] [ 30 ] ; 1 ; 1 ; 30 ; 30 ; 600 ; 600 ; 1200 ;" always "char i [ 2 ] [ 20 ] [ 30 ] ; 1 ; 1 ; 30 ; 30 ; 600 ; 600 ; 1200 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2456 always 2456
  code always "char i[2][20][30];\nsizeof(i[1][4][2]);\nsizeof(***i);\nsizeof(i[1][4]);\nsizeof(**i);\nsizeof(i[1]);\nsizeof(*i);\nsizeof(i);"
Line 2458
  = always "sizeof(char[20]);\nsizeof(char[20][3]);\nsizeof(char[unknown][3]);"
  "sizeof(char[20]);\nsizeof(char[20][3]);\nsizeof(char[unknown][3]);" always "sizeof(char[20]);\nsizeof(char[20][3]);\nsizeof(char[unknown][3]);"
Line 2461
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2461 always 2461
  "20 ; 60 ; sizeof ( char [ unknown ] [ 3 ] ) ;" always "20 ; 60 ; sizeof ( char [ unknown ] [ 3 ] ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2461 always 2461
  code always "sizeof(char[20]);\nsizeof(char[20][3]);\nsizeof(char[unknown][3]);"
Line 2463
  = always "char(*Helper())[1];\nsizeof(*Helper());\n"
  "char(*Helper())[1];\nsizeof(*Helper());\n" always "char(*Helper())[1];\nsizeof(*Helper());\n"
Line 2465
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2465 always 2465
  "char ( * Helper ( ) ) [ 1 ] ; 1 ;" always "char ( * Helper ( ) ) [ 1 ] ; 1 ;"
  "char ( * Helper ( ) ) [ 1 ] ; sizeof ( * Helper ( ) ) ;" always "char ( * Helper ( ) ) [ 1 ] ; sizeof ( * Helper ( ) ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2465 always 2465
  code always "char(*Helper())[1];\nsizeof(*Helper());\n"
Line 2469
  70 always 70
  = always "{const char * names[2];for (int i = 0; i != sizeof(names[0]); i++){}}"
Line 2470
  "{const char * names[2];for (int i = 0; i != sizeof(names[0]); i++){}}" always "{const char * names[2];for (int i = 0; i != sizeof(names[0]); i++){}}"
Line 2476
  "{ const char * names [ 2 ] ; for ( int i = 0 ; i != " always "{ const char * names [ 2 ] ; for ( int i = 0 ; i != "
  ( always !<=-1
  "*" always "*"
  " ; i ++ ) { } }" always " ; i ++ ) { } }"
Line 2477
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2477 always 2477
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2477 always 2477
  code always "{const char * names[2];for (int i = 0; i != sizeof(names[0]); i++){}}"
Line 2481
  20 always 20
  = always ";int i;\nsizeof(i);\n"
  ";int i;\nsizeof(i);\n" always ";int i;\nsizeof(i);\n"
Line 2485
  "; int i ; " always "; int i ; "
  ( always 4
  " ;" always " ;"
Line 2487
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2487 always 2487
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2487 always 2487
  code always ";int i;\nsizeof(i);\n"
Line 2491
  29 always 29
  = always ";INT32 i[10];\nsizeof(i[0]);\n"
  ";INT32 i[10];\nsizeof(i[0]);\n" always ";INT32 i[10];\nsizeof(i[0]);\n"
Line 2493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2493 always 2493
  "; INT32 i [ 10 ] ; sizeof ( i [ 0 ] ) ;" always "; INT32 i [ 10 ] ; sizeof ( i [ 0 ] ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2493 always 2493
  code always ";INT32 i[10];\nsizeof(i[0]);\n"
  true always 1
Line 2494
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2494 always 2494
  "; int i [ 10 ] ; 4 ;" always "; int i [ 10 ] ; 4 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2494 always 2494
  code always ";INT32 i[10];\nsizeof(i[0]);\n"
  true always 1
Line 2499
  53 always 53
  = always "void f()\n{\n  char* ptrs[2];\n  a = sizeof( ptrs );\n}\n"
  "void f()\n{\n  char* ptrs[2];\n  a = sizeof( ptrs );\n}\n" always "void f()\n{\n  char* ptrs[2];\n  a = sizeof( ptrs );\n}\n"
Line 2505
  ( always !<=-1
  "*" always "*"
  * always !<=-1
  2 always 2
Line 2506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2506 always 2506
  "void f ( ) { char * ptrs [ 2 ] ; a = " always "void f ( ) { char * ptrs [ 2 ] ; a = "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2506 always 2506
  code always "void f()\n{\n  char* ptrs[2];\n  a = sizeof( ptrs );\n}\n"
Line 2510
  54 always 54
  = always "void f()\n{\n  char* ptrs[55];\n  a = sizeof( ptrs );\n}\n"
  "void f()\n{\n  char* ptrs[55];\n  a = sizeof( ptrs );\n}\n" always "void f()\n{\n  char* ptrs[55];\n  a = sizeof( ptrs );\n}\n"
Line 2516
  ( always !<=-1
  "*" always "*"
  * always !<=-1
  55 always 55
Line 2517
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2517 always 2517
  "void f ( ) { char * ptrs [ 55 ] ; a = " always "void f ( ) { char * ptrs [ 55 ] ; a = "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2517 always 2517
  code always "void f()\n{\n  char* ptrs[55];\n  a = sizeof( ptrs );\n}\n"
Line 2522
  50 always 50
  = always "void f()\n{\n  char* ptrs;\n  a = sizeof( ptrs );\n}\n"
  "void f()\n{\n  char* ptrs;\n  a = sizeof( ptrs );\n}\n" always "void f()\n{\n  char* ptrs;\n  a = sizeof( ptrs );\n}\n"
Line 2528
  ( always !<=-1
  "*" always "*"
Line 2529
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2529 always 2529
  "void f ( ) { a = " always "void f ( ) { a = "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2529 always 2529
  code always "void f()\n{\n  char* ptrs;\n  a = sizeof( ptrs );\n}\n"
Line 2536
  38 always 38
  = always "; const char *str = \"1\"; sizeof(str);"
  "; const char *str = \"1\"; sizeof(str);" always "; const char *str = \"1\"; sizeof(str);"
Line 2539
  "; const char * str ; str = \"1\" ; " always "; const char * str ; str = \"1\" ; "
  ( always !<=-1
  "*" always "*"
  " ;" always " ;"
Line 2541
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2541 always 2541
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2541 always 2541
  code always "; const char *str = \"1\"; sizeof(str);"
Line 2545
  39 always 39
  = always "; const char str[] = \"1\"; sizeof(str);"
  "; const char str[] = \"1\"; sizeof(str);" always "; const char str[] = \"1\"; sizeof(str);"
Line 2548
  "; const char str [ 2 ] = \"1\" ; " always "; const char str [ 2 ] = \"1\" ; "
  ( always !<=-1
  "char" always "char"
  * always !<=-1
  2 always 2
  " ;" always " ;"
Line 2550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2550 always 2550
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2550 always 2550
  code always "; const char str[] = \"1\"; sizeof(str);"
Line 2555
  41 always 41
  = always "; const char str[] = {'1'}; sizeof(str);"
  "; const char str[] = {'1'}; sizeof(str);" always "; const char str[] = {'1'}; sizeof(str);"
Line 2556
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2556 always 2556
  "; const char str [ 1 ] = { '1' } ; 1 ;" always "; const char str [ 1 ] = { '1' } ; 1 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2556 always 2556
  code always "; const char str[] = {'1'}; sizeof(str);"
Line 2561
  43 always 43
  = always "; const char str[] = {\"abc\"}; sizeof(str);"
  "; const char str[] = {\"abc\"}; sizeof(str);" always "; const char str[] = {\"abc\"}; sizeof(str);"
Line 2562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2562 always 2562
  "; const char str [ 4 ] = \"abc\" ; 4 ;" always "; const char str [ 4 ] = \"abc\" ; 4 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2562 always 2562
  code always "; const char str[] = {\"abc\"}; sizeof(str);"
Line 2568
  "; " always "; "
  ( always 4
  "123" always "123"
  " ;" always " ;"
Line 2570
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2570 always 2570
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2570 always 2570
  "; sizeof \"123\";" always "; sizeof \"123\";"
Line 2571
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2571 always 2571
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2571 always 2571
  "; sizeof(\"123\");" always "; sizeof(\"123\");"
Line 2575
  68 always 68
  = always "void f(char *a,char *b, char *c){g(sizeof(a),sizeof(b),sizeof(c));}"
  "void f(char *a,char *b, char *c){g(sizeof(a),sizeof(b),sizeof(c));}" always "void f(char *a,char *b, char *c){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2578
  "void f ( char * a , char * b , char * c ) { g ( " always "void f ( char * a , char * b , char * c ) { g ( "
Line 2579
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " ) ; }" always " ) ; }"
Line 2580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2580 always 2580
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2580 always 2580
  code always "void f(char *a,char *b, char *c){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2584
  65 always 65
  = always "void f(char a,char b, char c){g(sizeof(a),sizeof(b),sizeof(c));}"
  "void f(char a,char b, char c){g(sizeof(a),sizeof(b),sizeof(c));}" always "void f(char a,char b, char c){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2587
  "void f ( char a , char b , char c ) { g ( " always "void f ( char a , char b , char c ) { g ( "
Line 2588
  ( always !<=-1
  "char" always "char"
  " , " always " , "
  ( always !<=-1
  "char" always "char"
  " , " always " , "
  ( always !<=-1
  "char" always "char"
  " ) ; }" always " ) ; }"
Line 2589
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2589 always 2589
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2589 always 2589
  code always "void f(char a,char b, char c){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2593
  86 always 86
  = always "void f(const char *a,const char *b, const char *c){g(sizeof(a),sizeof(b),sizeof(c));}"
  "void f(const char *a,const char *b, const char *c){g(sizeof(a),sizeof(b),sizeof(c));}" always "void f(const char *a,const char *b, const char *c){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2596
  "void f ( const char * a , const char * b , const char * c ) { g ( " always "void f ( const char * a , const char * b , const char * c ) { g ( "
Line 2597
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " ) ; }" always " ) ; }"
Line 2598
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2598 always 2598
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2598 always 2598
  code always "void f(const char *a,const char *b, const char *c){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2602
  77 always 77
  = always "void f(char a[10],char b[10], char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
  "void f(char a[10],char b[10], char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}" always "void f(char a[10],char b[10], char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2605
  "void f ( char a [ 10 ] , char b [ 10 ] , char c [ 10 ] ) { g ( " always "void f ( char a [ 10 ] , char b [ 10 ] , char c [ 10 ] ) { g ( "
Line 2606
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " ) ; }" always " ) ; }"
Line 2607
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2607 always 2607
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2607 always 2607
  code always "void f(char a[10],char b[10], char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2611
  95 always 95
  = always "void f(const char a[10],const char b[10], const char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
  "void f(const char a[10],const char b[10], const char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}" always "void f(const char a[10],const char b[10], const char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2614
  "void f ( const char a [ 10 ] , const char b [ 10 ] , const char c [ 10 ] ) { g ( " always "void f ( const char a [ 10 ] , const char b [ 10 ] , const char c [ 10 ] ) { g ( "
Line 2617
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " ) ; }" always " ) ; }"
Line 2618
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2618 always 2618
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2618 always 2618
  code always "void f(const char a[10],const char b[10], const char c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2622
  98 always 98
  = always "void f(const char *a[10],const char *b[10], const char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
  "void f(const char *a[10],const char *b[10], const char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}" always "void f(const char *a[10],const char *b[10], const char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2625
  "void f ( const char * a [ 10 ] , const char * b [ 10 ] , const char * c [ 10 ] ) { g ( " always "void f ( const char * a [ 10 ] , const char * b [ 10 ] , const char * c [ 10 ] ) { g ( "
Line 2628
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " ) ; }" always " ) ; }"
Line 2629
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2629 always 2629
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2629 always 2629
  code always "void f(const char *a[10],const char *b[10], const char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2633
  80 always 80
  = always "void f(char *a[10],char *b[10], char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
  "void f(char *a[10],char *b[10], char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}" always "void f(char *a[10],char *b[10], char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2636
  "void f ( char * a [ 10 ] , char * b [ 10 ] , char * c [ 10 ] ) { g ( " always "void f ( char * a [ 10 ] , char * b [ 10 ] , char * c [ 10 ] ) { g ( "
Line 2637
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " , " always " , "
  ( always !<=-1
  "*" always "*"
  " ) ; }" always " ) ; }"
Line 2638
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2638 always 2638
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2638 always 2638
  code always "void f(char *a[10],char *b[10], char *c[10]){g(sizeof(a),sizeof(b),sizeof(c));}"
Line 2643
  "; " always "; "
  ( always 8
  "\"quote\"" always "\"quote\""
Line 2644
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2644 always 2644
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2644 always 2644
  "; sizeof(\"\\\"quote\\\"\")" always "; sizeof(\"\\\"quote\\\"\")"
Line 2649
  "void f ( ) { char str [ 100 ] = \"100\" ; " always "void f ( ) { char str [ 100 ] = \"100\" ; "
  ( always !<=-1
  "char" always "char"
  * always !<=-1
  100 always 100
  " }" always " }"
Line 2650
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2650 always 2650
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2650 always 2650
  "void f ( ) { char str [ 100 ] = \"100\" ; sizeof ( str ) }" always "void f ( ) { char str [ 100 ] = \"100\" ; sizeof ( str ) }"
Line 2656
  78 always 78
  = always "int m ; compat_ulong_t um ; long size ; size = sizeof ( m ) / sizeof ( um ) ;"
  "int m ; compat_ulong_t um ; long size ; size = sizeof ( m ) / sizeof ( um ) ;" always "int m ; compat_ulong_t um ; long size ; size = sizeof ( m ) / sizeof ( um ) ;"
Line 2660
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2660 always 2660
  code always "int m ; compat_ulong_t um ; long size ; size = sizeof ( m ) / sizeof ( um ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2660 always 2660
  code always "int m ; compat_ulong_t um ; long size ; size = sizeof ( m ) / sizeof ( um ) ;"
  true always 1
Line 2665
  115 always 115
  = always "void f()\n{\n    char buf2[4];\n    sizeof buf2;\n}\n\nvoid g()\n{\n    struct A a[2];\n    char buf[32];\n    sizeof buf;\n}"
  "void f()\n{\n    char buf2[4];\n    sizeof buf2;\n}\n\nvoid g()\n{\n    struct A a[2];\n    char buf[32];\n    sizeof buf;\n}" always "void f()\n{\n    char buf2[4];\n    sizeof buf2;\n}\n\nvoid g()\n{\n    struct A a[2];\n    char buf[32];\n    sizeof buf;\n}"
Line 2678
  94 always 94
  = always "void f ( ) { char buf2 [ 4 ] ; 4 ; } void g ( ) { struct A a [ 2 ] ; char buf [ 32 ] ; 32 ; }"
  "void f ( ) { char buf2 [ 4 ] ; 4 ; } void g ( ) { struct A a [ 2 ] ; char buf [ 32 ] ; 32 ; }" always "void f ( ) { char buf2 [ 4 ] ; 4 ; } void g ( ) { struct A a [ 2 ] ; char buf [ 32 ] ; 32 ; }"
Line 2691
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2691 always 2691
  expected always "void f ( ) { char buf2 [ 4 ] ; 4 ; } void g ( ) { struct A a [ 2 ] ; char buf [ 32 ] ; 32 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2691 always 2691
  code always "void f()\n{\n    char buf2[4];\n    sizeof buf2;\n}\n\nvoid g()\n{\n    struct A a[2];\n    char buf[32];\n    sizeof buf;\n}"
Line 2696
  42 always 42
  = always "void f()\n{\n    int *p;\n    (sizeof *p);\n}"
  "void f()\n{\n    int *p;\n    (sizeof *p);\n}" always "void f()\n{\n    int *p;\n    (sizeof *p);\n}"
Line 2702
  19 always 19
  = always "void f ( ) { 4 ; }"
  "void f ( ) { 4 ; }" always "void f ( ) { 4 ; }"
Line 2708
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2708 always 2708
  expected always "void f ( ) { 4 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2708 always 2708
  code always "void f()\n{\n    int *p;\n    (sizeof *p);\n}"
Line 2713
  88 always 88
  = always "int main()\n{\n    char *a;\n    a = malloc(sizeof(*a));\n}\n\nstruct B\n{\n    char * b[2];\n};"
  "int main()\n{\n    char *a;\n    a = malloc(sizeof(*a));\n}\n\nstruct B\n{\n    char * b[2];\n};" always "int main()\n{\n    char *a;\n    a = malloc(sizeof(*a));\n}\n\nstruct B\n{\n    char * b[2];\n};"
Line 2723
  79 always 79
  = always "int main ( ) { char * a ; a = malloc ( 1 ) ; } struct B { char * b [ 2 ] ; } ;"
  "int main ( ) { char * a ; a = malloc ( 1 ) ; } struct B { char * b [ 2 ] ; } ;" always "int main ( ) { char * a ; a = malloc ( 1 ) ; } struct B { char * b [ 2 ] ; } ;"
Line 2732
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2732 always 2732
  expected always "int main ( ) { char * a ; a = malloc ( 1 ) ; } struct B { char * b [ 2 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2732 always 2732
  code always "int main()\n{\n    char *a;\n    a = malloc(sizeof(*a));\n}\n\nstruct B\n{\n    char * b[2];\n};"
Line 2737
  55 always 55
  = always "void f()\n{\n    A **a;\n    int aa = sizeof *(*a)->b;\n}\n"
  "void f()\n{\n    A **a;\n    int aa = sizeof *(*a)->b;\n}\n" always "void f()\n{\n    A **a;\n    int aa = sizeof *(*a)->b;\n}\n"
Line 2742
  66 always 66
  = always "void f ( ) { A * * a ; int aa ; aa = sizeof ( * ( * a ) . b ) ; }"
  "void f ( ) { A * * a ; int aa ; aa = sizeof ( * ( * a ) . b ) ; }" always "void f ( ) { A * * a ; int aa ; aa = sizeof ( * ( * a ) . b ) ; }"
Line 2747
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2747 always 2747
  expected always "void f ( ) { A * * a ; int aa ; aa = sizeof ( * ( * a ) . b ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2747 always 2747
  code always "void f()\n{\n    A **a;\n    int aa = sizeof *(*a)->b;\n}\n"
Line 2750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2750 always 2750
  "sizeof ( ! ! ( a == 1 ) ) ;" always "sizeof ( ! ! ( a == 1 ) ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2750 always 2750
  "sizeof !!(a==1);" always "sizeof !!(a==1);"
Line 2755
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2755 always 2755
  "void f()\n{\n    int *n;\n    sizeof *(n);\n}" always "void f()\n{\n    int *n;\n    sizeof *(n);\n}"
Line 2760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2760 always 2760
  "" always ""
Line 2765
  55 always 55
  = always "void f()\n{\n    int a;\n    printf(\"%i\", sizeof a++);\n}\n"
  "void f()\n{\n    int a;\n    printf(\"%i\", sizeof a++);\n}\n" always "void f()\n{\n    int a;\n    printf(\"%i\", sizeof a++);\n}\n"
Line 2770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2770 always 2770
  "void f ( ) { int a ; printf ( \"%i\" , sizeof ( a ++ ) ) ; }" always "void f ( ) { int a ; printf ( \"%i\" , sizeof ( a ++ ) ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2770 always 2770
  code always "void f()\n{\n    int a;\n    printf(\"%i\", sizeof a++);\n}\n"
Line 2771
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2771 always 2771
  "" always ""
Line 2776
  43 always 43
  = always "void f()\n{\n    sizeof 1;\n    while (0);\n}\n"
  "void f()\n{\n    sizeof 1;\n    while (0);\n}\n" always "void f()\n{\n    sizeof 1;\n    while (0);\n}\n"
Line 2781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2781 always 2781
  "void f ( ) { sizeof ( 1 ) ; }" always "void f ( ) { sizeof ( 1 ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2781 always 2781
  code always "void f()\n{\n    sizeof 1;\n    while (0);\n}\n"
Line 2782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2782 always 2782
  "" always ""
Line 2788
  ( always 2
Line 2791
  37 always 37
  = always "void f()\n{\n    sizeof(short int);\n}\n"
  "void f()\n{\n    sizeof(short int);\n}\n" always "void f()\n{\n    sizeof(short int);\n}\n"
Line 2795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2795 always 2795
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2795 always 2795
  code always "void f()\n{\n    sizeof(short int);\n}\n"
Line 2796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2796 always 2796
  "" always ""
Line 2800
  46 always 46
  = always "void f()\n{\n    sizeof(unsigned short int);\n}\n"
  "void f()\n{\n    sizeof(unsigned short int);\n}\n" always "void f()\n{\n    sizeof(unsigned short int);\n}\n"
Line 2804
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2804 always 2804
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2804 always 2804
  code always "void f()\n{\n    sizeof(unsigned short int);\n}\n"
Line 2805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2805 always 2805
  "" always ""
Line 2809
  46 always 46
  = always "void f()\n{\n    sizeof(short unsigned int);\n}\n"
  "void f()\n{\n    sizeof(short unsigned int);\n}\n" always "void f()\n{\n    sizeof(short unsigned int);\n}\n"
Line 2813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2813 always 2813
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2813 always 2813
  code always "void f()\n{\n    sizeof(short unsigned int);\n}\n"
Line 2814
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2814 always 2814
  "" always ""
Line 2818
  44 always 44
  = always "void f()\n{\n    sizeof(signed short int);\n}\n"
  "void f()\n{\n    sizeof(signed short int);\n}\n" always "void f()\n{\n    sizeof(signed short int);\n}\n"
Line 2822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2822 always 2822
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2822 always 2822
  code always "void f()\n{\n    sizeof(signed short int);\n}\n"
Line 2823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2823 always 2823
  "" always ""
Line 2829
  ( always 8
Line 2832
  37 always 37
  = always "void f()\n{\n    sizeof(long long);\n}\n"
  "void f()\n{\n    sizeof(long long);\n}\n" always "void f()\n{\n    sizeof(long long);\n}\n"
Line 2836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2836 always 2836
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2836 always 2836
  code always "void f()\n{\n    sizeof(long long);\n}\n"
Line 2837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2837 always 2837
  "" always ""
Line 2841
  44 always 44
  = always "void f()\n{\n    sizeof(signed long long);\n}\n"
  "void f()\n{\n    sizeof(signed long long);\n}\n" always "void f()\n{\n    sizeof(signed long long);\n}\n"
Line 2845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2845 always 2845
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2845 always 2845
  code always "void f()\n{\n    sizeof(signed long long);\n}\n"
Line 2846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2846 always 2846
  "" always ""
Line 2850
  46 always 46
  = always "void f()\n{\n    sizeof(unsigned long long);\n}\n"
  "void f()\n{\n    sizeof(unsigned long long);\n}\n" always "void f()\n{\n    sizeof(unsigned long long);\n}\n"
Line 2854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2854 always 2854
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2854 always 2854
  code always "void f()\n{\n    sizeof(unsigned long long);\n}\n"
Line 2855
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2855 always 2855
  "" always ""
Line 2859
  46 always 46
  = always "void f()\n{\n    sizeof(long unsigned long);\n}\n"
  "void f()\n{\n    sizeof(long unsigned long);\n}\n" always "void f()\n{\n    sizeof(long unsigned long);\n}\n"
Line 2863
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2863 always 2863
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2863 always 2863
  code always "void f()\n{\n    sizeof(long unsigned long);\n}\n"
Line 2864
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2864 always 2864
  "" always ""
Line 2868
  41 always 41
  = always "void f()\n{\n    sizeof(long long int);\n}\n"
  "void f()\n{\n    sizeof(long long int);\n}\n" always "void f()\n{\n    sizeof(long long int);\n}\n"
Line 2872
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2872 always 2872
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2872 always 2872
  code always "void f()\n{\n    sizeof(long long int);\n}\n"
Line 2873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2873 always 2873
  "" always ""
Line 2877
  48 always 48
  = always "void f()\n{\n    sizeof(signed long long int);\n}\n"
  "void f()\n{\n    sizeof(signed long long int);\n}\n" always "void f()\n{\n    sizeof(signed long long int);\n}\n"
Line 2881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2881 always 2881
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2881 always 2881
  code always "void f()\n{\n    sizeof(signed long long int);\n}\n"
Line 2882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2882 always 2882
  "" always ""
Line 2886
  50 always 50
  = always "void f()\n{\n    sizeof(unsigned long long int);\n}\n"
  "void f()\n{\n    sizeof(unsigned long long int);\n}\n" always "void f()\n{\n    sizeof(unsigned long long int);\n}\n"
Line 2890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2890 always 2890
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2890 always 2890
  code always "void f()\n{\n    sizeof(unsigned long long int);\n}\n"
Line 2891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2891 always 2891
  "" always ""
Line 2895
  50 always 50
  = always "void f()\n{\n    sizeof(long unsigned long int);\n}\n"
  "void f()\n{\n    sizeof(long unsigned long int);\n}\n" always "void f()\n{\n    sizeof(long unsigned long int);\n}\n"
Line 2899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2899 always 2899
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2899 always 2899
  code always "void f()\n{\n    sizeof(long unsigned long int);\n}\n"
Line 2900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2900 always 2900
  "" always ""
Line 2905
  33 always 33
  = always "void f()\n{\n    sizeof(char*);\n}\n"
  "void f()\n{\n    sizeof(char*);\n}\n" always "void f()\n{\n    sizeof(char*);\n}\n"
Line 2910
  ( always 8
Line 2911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2911 always 2911
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2911 always 2911
  code always "void f()\n{\n    sizeof(char*);\n}\n"
Line 2912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2912 always 2912
  "" always ""
Line 2916
  41 always 41
  = always "void f()\n{\n    sizeof(unsigned int*);\n}\n"
  "void f()\n{\n    sizeof(unsigned int*);\n}\n" always "void f()\n{\n    sizeof(unsigned int*);\n}\n"
Line 2921
  ( always 8
Line 2922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2922 always 2922
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2922 always 2922
  code always "void f()\n{\n    sizeof(unsigned int*);\n}\n"
Line 2923
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2923 always 2923
  "" always ""
Line 2930
  30 always 30
  = always "void f()\n{\n    sizeof 'x';\n}\n"
  "void f()\n{\n    sizeof 'x';\n}\n" always "void f()\n{\n    sizeof 'x';\n}\n"
Line 2935
  ( always 1
Line 2936
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2936 always 2936
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2936 always 2936
  code always "void f()\n{\n    sizeof 'x';\n}\n"
Line 2937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2937 always 2937
  "" always ""
Line 2941
  31 always 31
  = always "void f()\n{\n    sizeof('x');\n}\n"
  "void f()\n{\n    sizeof('x');\n}\n" always "void f()\n{\n    sizeof('x');\n}\n"
Line 2946
  ( always 1
Line 2947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2947 always 2947
  "void f ( ) { " always "void f ( ) { "
  " ; }" always " ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2947 always 2947
  code always "void f()\n{\n    sizeof('x');\n}\n"
Line 2948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2948 always 2948
  "" always ""
Line 2954
  95 always 95
  = always "struct struct_a {\n  char a[20];\n};\n\nvoid foo() {\n  struct_a a;\n  append(sizeof a).append();\n}\n"
  "struct struct_a {\n  char a[20];\n};\n\nvoid foo() {\n  struct_a a;\n  append(sizeof a).append();\n}\n" always "struct struct_a {\n  char a[20];\n};\n\nvoid foo() {\n  struct_a a;\n  append(sizeof a).append();\n}\n"
Line 2962
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2962 always 2962
  "struct struct_a { char a [ 20 ] ; } ; void foo ( ) { struct_a a ; append ( sizeof ( a ) ) . append ( ) ; }" always "struct struct_a { char a [ 20 ] ; } ; void foo ( ) { struct_a a ; append ( sizeof ( a ) ) . append ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2962 always 2962
  code always "struct struct_a {\n  char a[20];\n};\n\nvoid foo() {\n  struct_a a;\n  append(sizeof a).append();\n}\n"
Line 2971
  212 always 212
  = always "struct Internal {\n    int operator()(const Args&... args) const {\n        int n = sizeof...(Args);\n        return n;\n    }\n};\n\nint main() {\n    Internal internal;\n    int n = 0; n = internal(1);\n    return 0;\n}\n"
  "struct Internal {\n    int operator()(const Args&... args) const {\n        int n = sizeof...(Args);\n        return n;\n    }\n};\n\nint main() {\n    Internal internal;\n    int n = 0; n = internal(1);\n    return 0;\n}\n" always "struct Internal {\n    int operator()(const Args&... args) const {\n        int n = sizeof...(Args);\n        return n;\n    }\n};\n\nint main() {\n    Internal internal;\n    int n = 0; n = internal(1);\n    return 0;\n}\n"
Line 2985
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2985 always 2985
  code always "struct Internal {\n    int operator()(const Args&... args) const {\n        int n = sizeof...(Args);\n        return n;\n    }\n};\n\nint main() {\n    Internal internal;\n    int n = 0; n = internal(1);\n    return 0;\n}\n"
Line 2990
  46 always 46
  = always "foo(sizeof(uint32_t), sizeof(std::uint32_t));"
  "foo(sizeof(uint32_t), sizeof(std::uint32_t));" always "foo(sizeof(uint32_t), sizeof(std::uint32_t));"
Line 2991
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2991 always 2991
  "foo ( 4 , 4 ) ;" always "foo ( 4 , 4 ) ;"
  "foo ( 4 , sizeof ( std :: uint32_t ) ) ;" always "foo ( 4 , sizeof ( std :: uint32_t ) ) ;"
  code always "foo(sizeof(uint32_t), sizeof(std::uint32_t));"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  2991 always 2991
Line 2996
  35 always 35
  = always "void f()\n{\n    sizeof sizeof 1;\n}\n"
  "void f()\n{\n    sizeof sizeof 1;\n}\n" always "void f()\n{\n    sizeof sizeof 1;\n}\n"
Line 3000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3000 always 3000
  "void f ( ) { sizeof ( sizeof ( 1 ) ) ; }" always "void f ( ) { sizeof ( sizeof ( 1 ) ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3000 always 3000
  code always "void f()\n{\n    sizeof sizeof 1;\n}\n"
Line 3001
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3001 always 3001
  "" always ""
Line 3006
  63 always 63
  = always "void f()\n{\nfor (int i = 0; i < static_cast<int>(3); ++i) {}\n}\n"
  "void f()\n{\nfor (int i = 0; i < static_cast<int>(3); ++i) {}\n}\n" always "void f()\n{\nfor (int i = 0; i < static_cast<int>(3); ++i) {}\n}\n"
Line 3011
  52 always 52
  = always "void f ( ) { for ( int i = 0 ; i < 3 ; ++ i ) { } }"
  "void f ( ) { for ( int i = 0 ; i < 3 ; ++ i ) { } }" always "void f ( ) { for ( int i = 0 ; i < 3 ; ++ i ) { } }"
Line 3013
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3013 always 3013
  expected always "void f ( ) { for ( int i = 0 ; i < 3 ; ++ i ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3013 always 3013
  code always "void f()\n{\nfor (int i = 0; i < static_cast<int>(3); ++i) {}\n}\n"
Line 3017
  49 always 49
  = always "void f()\n{\n    p = const_cast<char *> qtu ();\n}\n"
  "void f()\n{\n    p = const_cast<char *> qtu ();\n}\n" always "void f()\n{\n    p = const_cast<char *> qtu ();\n}\n"
Line 3022
  51 always 51
  = always "void f ( ) { p = const_cast < char * > qtu ( ) ; }"
  "void f ( ) { p = const_cast < char * > qtu ( ) ; }" always "void f ( ) { p = const_cast < char * > qtu ( ) ; }"
Line 3024
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3024 always 3024
  expected always "void f ( ) { p = const_cast < char * > qtu ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3024 always 3024
  code always "void f()\n{\n    p = const_cast<char *> qtu ();\n}\n"
Line 3029
  55 always 55
  = always "void f()\n{\n    return dynamic_cast<Foo *>((bar()));\n}\n"
  "void f()\n{\n    return dynamic_cast<Foo *>((bar()));\n}\n" always "void f()\n{\n    return dynamic_cast<Foo *>((bar()));\n}\n"
Line 3033
  32 always 32
  = always "void f ( ) { return bar ( ) ; }"
  "void f ( ) { return bar ( ) ; }" always "void f ( ) { return bar ( ) ; }"
Line 3035
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3035 always 3035
  expected always "void f ( ) { return bar ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3035 always 3035
  code always "void f()\n{\n    return dynamic_cast<Foo *>((bar()));\n}\n"
Line 3041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3041 always 3041
  "4" always "4"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3041 always 3041
  "strlen(\"abcd\")" always "strlen(\"abcd\")"
Line 3044
  57 always 57
  = always "void f()\n{\n    const char *s = \"abcd\";\n    strlen(s);\n}\n"
  "void f()\n{\n    const char *s = \"abcd\";\n    strlen(s);\n}\n" always "void f()\n{\n    const char *s = \"abcd\";\n    strlen(s);\n}\n"
Line 3049
  49 always 49
  = always "void f ( ) { const char * s ; s = \"abcd\" ; 4 ; }"
  "void f ( ) { const char * s ; s = \"abcd\" ; 4 ; }" always "void f ( ) { const char * s ; s = \"abcd\" ; 4 ; }"
Line 3055
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3055 always 3055
  expected always "void f ( ) { const char * s ; s = \"abcd\" ; 4 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3055 always 3055
  code always "void f()\n{\n    const char *s = \"abcd\";\n    strlen(s);\n}\n"
Line 3059
  60 always 60
  = always "void f()\n{\n    const char s [ ] = \"abcd\";\n    strlen(s);\n}\n"
  "void f()\n{\n    const char s [ ] = \"abcd\";\n    strlen(s);\n}\n" always "void f()\n{\n    const char s [ ] = \"abcd\";\n    strlen(s);\n}\n"
Line 3064
  49 always 49
  = always "void f ( ) { const char s [ 5 ] = \"abcd\" ; 4 ; }"
  "void f ( ) { const char s [ 5 ] = \"abcd\" ; 4 ; }" always "void f ( ) { const char s [ 5 ] = \"abcd\" ; 4 ; }"
Line 3069
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3069 always 3069
  expected always "void f ( ) { const char s [ 5 ] = \"abcd\" ; 4 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3069 always 3069
  code always "void f()\n{\n    const char s [ ] = \"abcd\";\n    strlen(s);\n}\n"
Line 3076
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3076 always 3076
  "i = -4 ;" always "i = -4 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3076 always 3076
  "i = (strlen(\"abcd\") - 8);" always "i = (strlen(\"abcd\") - 8);"
Line 3083
  18 always 18
  = always "namespace std { }"
  "namespace std { }" always "namespace std { }"
Line 3085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3085 always 3085
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3085 always 3085
  code always "namespace std { }"
Line 3089
  20 always 20
  = always "; namespace std { }"
  "; namespace std { }" always "; namespace std { }"
Line 3091
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3091 always 3091
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3091 always 3091
  code always "; namespace std { }"
Line 3095
  62 always 62
  = always "using namespace std; namespace a{ namespace b{ void f(){} } }"
  "using namespace std; namespace a{ namespace b{ void f(){} } }" always "using namespace std; namespace a{ namespace b{ void f(){} } }"
Line 3097
  47 always 47
  = always "namespace a { namespace b { void f ( ) { } } }"
  "namespace a { namespace b { void f ( ) { } } }" always "namespace a { namespace b { void f ( ) { } } }"
Line 3099
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3099 always 3099
  expected always "namespace a { namespace b { void f ( ) { } } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3099 always 3099
  code always "using namespace std; namespace a{ namespace b{ void f(){} } }"
Line 3103
  26 always 26
  = always "namespace b{ void f(){} }"
  "namespace b{ void f(){} }" always "namespace b{ void f(){} }"
Line 3105
  31 always 31
  = always "namespace b { void f ( ) { } }"
  "namespace b { void f ( ) { } }" always "namespace b { void f ( ) { } }"
Line 3107
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3107 always 3107
  expected always "namespace b { void f ( ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3107 always 3107
  code always "namespace b{ void f(){} }"
Line 3111
  26 always 26
  = always "void f(int namespace) { }"
  "void f(int namespace) { }" always "void f(int namespace) { }"
Line 3113
  29 always 29
  = always "void f ( int namespace ) { }"
  "void f ( int namespace ) { }" always "void f ( int namespace ) { }"
Line 3115
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3115 always 3115
  expected always "void f ( int namespace ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3115 always 3115
  code always "void f(int namespace) { }"
Line 3122
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3123
  code possible {"{ do { } while(a=b); }"@64,"{ do { a.a = 0; } while(a.b=c); }"@65,"void foo() { do { } while((current=f()) != NULL); }"@68,"{while(a=b) { b = 0; }}"@71,"{while(a.b=c) { c=0; }}"@72,"{if(a=b);}"@76,"{if((a=b()));}"@77,"{if(!(a=b()));}"@78,"{if(!(a->x=b()));}"@79,"void f() { A() if(a=b); }"@80}
Line 3124
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytokens.cpp"@64,"cppcheck-2.8/test/testsimplifytokens.cpp"@65,"cppcheck-2.8/test/testsimplifytokens.cpp"@68,"cppcheck-2.8/test/testsimplifytokens.cpp"@71,"cppcheck-2.8/test/testsimplifytokens.cpp"@72,"cppcheck-2.8/test/testsimplifytokens.cpp"@76,"cppcheck-2.8/test/testsimplifytokens.cpp"@77,"cppcheck-2.8/test/testsimplifytokens.cpp"@78,"cppcheck-2.8/test/testsimplifytokens.cpp"@79,"cppcheck-2.8/test/testsimplifytokens.cpp"@80}
  line inconclusive {3225@64,3226@65,3240@68,3165@71,3166@72,3132@76,3133@77,3134@78,3135@79,3136@80}
  "test.cpp" always "test.cpp"
Line 3128
  nullptr always 0
  false always 0
Line 3132
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3132 always 3132
  "{ a = b ; if ( a ) { ; } }" always "{ a = b ; if ( a ) { ; } }"
  "{if(a=b);}" always "{if(a=b);}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3132 always 3132
Line 3133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3133 always 3133
  "{ a = b ( ) ; if ( a ) { ; } }" always "{ a = b ( ) ; if ( a ) { ; } }"
  "{if((a=b()));}" always "{if((a=b()));}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3133 always 3133
Line 3134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3134 always 3134
  "{ a = b ( ) ; if ( ! ( a ) ) { ; } }" always "{ a = b ( ) ; if ( ! ( a ) ) { ; } }"
  "{if(!(a=b()));}" always "{if(!(a=b()));}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3134 always 3134
Line 3135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3135 always 3135
  "{ a . x = b ( ) ; if ( ! ( a . x ) ) { ; } }" always "{ a . x = b ( ) ; if ( ! ( a . x ) ) { ; } }"
  "{if(!(a->x=b()));}" always "{if(!(a->x=b()));}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3135 always 3135
Line 3136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3136 always 3136
  "void f ( ) { A ( ) a = b ; if ( a ) { ; } }" always "void f ( ) { A ( ) a = b ; if ( a ) { ; } }"
  "void f() { A() if(a=b); }" always "void f() { A() if(a=b); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3136 always 3136
Line 3137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3137 always 3137
  "void foo ( int a ) { a = b ( ) ; if ( a >= 0 ) { ; } }" always "void foo ( int a ) { a = b ( ) ; if ( a >= 0 ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3137 always 3137
  "void foo(int a) {if((a=b())>=0);}" always "void foo(int a) {if((a=b())>=0);}"
Line 3138
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3138 always 3138
  "void foo ( A a ) { a . c = b ( ) ; if ( 0 <= a . c ) { ; } }" always "void foo ( A a ) { a . c = b ( ) ; if ( 0 <= a . c ) { ; } }"
  "void foo ( A a ) { a . c = b ( ) ; if ( a . c >= 0 ) { ; } }" always "void foo ( A a ) { a . c = b ( ) ; if ( a . c >= 0 ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3138 always 3138
  "void foo(A a) {if((a.c=b())>=0);}" always "void foo(A a) {if((a.c=b())>=0);}"
Line 3144
  = always "void foo()\n{\nFILE *f;\nif( (f = fopen(\"foo\", \"r\")) == ((FILE*)NULL) )\nreturn(-1);\nfclose(f);\n}\n"
  "void foo()\n{\nFILE *f;\nif( (f = fopen(\"foo\", \"r\")) == ((FILE*)NULL) )\nreturn(-1);\nfclose(f);\n}\n" always "void foo()\n{\nFILE *f;\nif( (f = fopen(\"foo\", \"r\")) == ((FILE*)NULL) )\nreturn(-1);\nfclose(f);\n}\n"
Line 3151
  = always "void foo ( ) { FILE * f ; f = fopen ( \"foo\" , \"r\" ) ; if ( f == NULL ) { return -1 ; } fclose ( f ) ; }"
  "void foo ( ) { FILE * f ; f = fopen ( \"foo\" , \"r\" ) ; if ( f == NULL ) { return -1 ; } fclose ( f ) ; }" always "void foo ( ) { FILE * f ; f = fopen ( \"foo\" , \"r\" ) ; if ( f == NULL ) { return -1 ; } fclose ( f ) ; }"
Line 3161
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3161 always 3161
  expected always "void foo ( ) { FILE * f ; f = fopen ( \"foo\" , \"r\" ) ; if ( f == NULL ) { return -1 ; } fclose ( f ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3161 always 3161
  code always "void foo()\n{\nFILE *f;\nif( (f = fopen(\"foo\", \"r\")) == ((FILE*)NULL) )\nreturn(-1);\nfclose(f);\n}\n"
Line 3165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3165 always 3165
  "{ a = b ; while ( a ) { b = 0 ; a = b ; } }" always "{ a = b ; while ( a ) { b = 0 ; a = b ; } }"
  "{while(a=b) { b = 0; }}" always "{while(a=b) { b = 0; }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3165 always 3165
Line 3166
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3166 always 3166
  "{ a . b = c ; while ( a . b ) { c = 0 ; a . b = c ; } }" always "{ a . b = c ; while ( a . b ) { c = 0 ; a . b = c ; } }"
  "{while(a.b=c) { c=0; }}" always "{while(a.b=c) { c=0; }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3166 always 3166
Line 3167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3167 always 3167
  "{ struct hfs_bnode * node ; struct hfs_btree * tree ; node = tree . node_hash [ i ++ ] ; while ( node ) { node = tree . node_hash [ i ++ ] ; } }" always "{ struct hfs_bnode * node ; struct hfs_btree * tree ; node = tree . node_hash [ i ++ ] ; while ( node ) { node = tree . node_hash [ i ++ ] ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3167 always 3167
  "{struct hfs_bnode *node;struct hfs_btree *tree;while ((node = tree->node_hash[i++])) { }}" always "{struct hfs_bnode *node;struct hfs_btree *tree;while ((node = tree->node_hash[i++])) { }}"
Line 3178
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3178 always 3178
  "{ char * s ; s = new char [ 10 ] ; while ( ! s ) { s = new char [ 10 ] ; } }" always "{ char * s ; s = new char [ 10 ] ; while ( ! s ) { s = new char [ 10 ] ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3178 always 3178
  "{ char *s; while (0 == (s=new char[10])) { } }" always "{ char *s; while (0 == (s=new char[10])) { } }"
Line 3184
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3184 always 3184
  "void f()\n{\n  int b;\n  while (b = sizeof (struct foo { int i0;}))\n    ;\n  if (!(0 <= b ))\n    ;\n}" always "void f()\n{\n  int b;\n  while (b = sizeof (struct foo { int i0;}))\n    ;\n  if (!(0 <= b ))\n    ;\n}"
Line 3192
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3192 always 3192
  "" always ""
Line 3197
  41 always 41
  = always "void f() {\n  int a;\n  while (a = x());\n}"
  "void f() {\n  int a;\n  while (a = x());\n}" always "void f() {\n  int a;\n  while (a = x());\n}"
Line 3201
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3201 always 3201
  "\n\n##file 0\n1: void f ( ) {\n2: int a@1 ;\n3: a@1 = x ( ) ; while ( a@1 ) { ; a@1 = x ( ) ; }\n4: }\n" always "\n\n##file 0\n1: void f ( ) {\n2: int a@1 ;\n3: a@1 = x ( ) ; while ( a@1 ) { ; a@1 = x ( ) ; }\n4: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3201 always 3201
  code always "void f() {\n  int a;\n  while (a = x());\n}"
  true always 1
  "test.c" always "test.c"
Line 3209
  "" always ""
Line 3211
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3212
  "{ while (!(m = q->push<Message>(x))) {} }" always "{ while (!(m = q->push<Message>(x))) {} }"
Line 3213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3213 always 3213
  "test.cpp" always "test.cpp"
Line 3216
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3216 always 3216
  "{ m = q . push < Message > ( x ) ; while ( ! m ) { m = q . push < Message > ( x ) ; } }" always "{ m = q . push < Message > ( x ) ; while ( ! m ) { m = q . push < Message > ( x ) ; } }"
  nullptr always 0
  false always 0
Line 3217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3217 always 3217
  26 always 26
  != always {!<=-1,!>=2}
  nullptr always 0
Line 3218
  26 always 26
Line 3219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3219 always 3219
  6 always 6
  == always {!<=-1,!>=2}
  8 always 8
Line 3220
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3220 always 3220
  24 always 24
  == always {!<=-1,!>=2}
  26 always 26
Line 3225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3225 always 3225
  "{ do { a = b ; } while ( a ) ; }" always "{ do { a = b ; } while ( a ) ; }"
  "{ do { } while(a=b); }" always "{ do { } while(a=b); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3225 always 3225
Line 3226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3226 always 3226
  "{ do { a . a = 0 ; a . b = c ; } while ( a . b ) ; }" always "{ do { a . a = 0 ; a . b = c ; } while ( a . b ) ; }"
  "{ do { a.a = 0; } while(a.b=c); }" always "{ do { a.a = 0; } while(a.b=c); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3226 always 3226
Line 3227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3227 always 3227
  "{ struct hfs_bnode * node ; struct hfs_btree * tree ; do { node = tree . node_hash [ i ++ ] ; } while ( node ) ; }" always "{ struct hfs_bnode * node ; struct hfs_btree * tree ; do { node = tree . node_hash [ i ++ ] ; } while ( node ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3227 always 3227
  "{struct hfs_bnode *node;struct hfs_btree *tree;do { } while((node = tree->node_hash[i++]));}" always "{struct hfs_bnode *node;struct hfs_btree *tree;do { } while((node = tree->node_hash[i++]));}"
Line 3237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3237 always 3237
  "void foo ( ) { char * s ; do { s = new char [ 10 ] ; } while ( ! s ) ; }" always "void foo ( ) { char * s ; do { s = new char [ 10 ] ; } while ( ! s ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3237 always 3237
  "void foo() { char *s; do { } while (0 == (s=new char[10])); }" always "void foo() { char *s; do { } while (0 == (s=new char[10])); }"
Line 3240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3240 always 3240
  "void foo ( ) { do { current = f ( ) ; } while ( ( current ) != NULL ) ; }" always "void foo ( ) { do { current = f ( ) ; } while ( ( current ) != NULL ) ; }"
  "void foo() { do { } while((current=f()) != NULL); }" always "void foo() { do { } while((current=f()) != NULL); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3240 always 3240
Line 3244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3244 always 3244
  "void f ( ) { if ( ! p ) { ; } }" always "void f ( ) { if ( ! p ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3244 always 3244
  "void f() { if (not p); }" always "void f() { if (not p); }"
  "test.c" always "test.c"
  false always 0
Line 3245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3245 always 3245
  "void f ( ) { if ( p && ! q ) { ; } }" always "void f ( ) { if ( p && ! q ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3245 always 3245
  "void f() { if (p && not q); }" always "void f() { if (p && not q); }"
  "test.c" always "test.c"
  false always 0
Line 3246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3246 always 3246
  "void f ( ) { a = ! ( p && q ) ; }" always "void f ( ) { a = ! ( p && q ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3246 always 3246
  "void f() { a = not(p && q); }" always "void f() { a = not(p && q); }"
  "test.c" always "test.c"
  false always 0
Line 3249
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3249 always 3249
  "struct not { int x ; } ;" always "struct not { int x ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3249 always 3249
  "struct not { int x; };" always "struct not { int x; };"
  "test.c" always "test.c"
  false always 0
Line 3250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3250 always 3250
  "void f ( ) { not p ; compl c ; }" always "void f ( ) { not p ; compl c ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3250 always 3250
  " void f() { not p; compl c; }" always " void f() { not p; compl c; }"
  "test.c" always "test.c"
  false always 0
Line 3251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3251 always 3251
  "void foo ( not i ) ;" always "void foo ( not i ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3251 always 3251
  "void foo(not i);" always "void foo(not i);"
  "test.c" always "test.c"
  false always 0
Line 3252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3252 always 3252
  "int foo ( not i ) { return g ( i ) ; }" always "int foo ( not i ) { return g ( i ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3252 always 3252
  "int foo(not i) { return g(i); }" always "int foo(not i) { return g(i); }"
  "test.c" always "test.c"
  false always 0
Line 3256
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3256 always 3256
  "void f ( ) { if ( p && q ) { ; } }" always "void f ( ) { if ( p && q ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3256 always 3256
  "void f() { if (p and q) ; }" always "void f() { if (p and q) ; }"
  "test.c" always "test.c"
  false always 0
Line 3259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3259 always 3259
  "void f ( ) { if ( foo ( ) && q ) { ; } }" always "void f ( ) { if ( foo ( ) && q ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3259 always 3259
  "void f() { if (foo() and q) ; }" always "void f() { if (foo() and q) ; }"
  "test.c" always "test.c"
  false always 0
Line 3262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3262 always 3262
  "void f ( ) { if ( foo ( ) && bar ( ) ) { ; } }" always "void f ( ) { if ( foo ( ) && bar ( ) ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3262 always 3262
  "void f() { if (foo() and bar()) ; }" always "void f() { if (foo() and bar()) ; }"
  "test.c" always "test.c"
  false always 0
Line 3265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3265 always 3265
  "void f ( ) { if ( p && bar ( ) ) { ; } }" always "void f ( ) { if ( p && bar ( ) ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3265 always 3265
  "void f() { if (p and bar()) ; }" always "void f() { if (p and bar()) ; }"
  "test.c" always "test.c"
  false always 0
Line 3268
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3268 always 3268
  "void f ( ) { if ( p && ! q ) { ; } }" always "void f ( ) { if ( p && ! q ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3268 always 3268
  "void f() { if (p and not q) ; }" always "void f() { if (p and not q) ; }"
  "test.c" always "test.c"
  false always 0
Line 3271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3271 always 3271
  "void f ( ) { r = a && b ; }" always "void f ( ) { r = a && b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3271 always 3271
  "void f() { r = a and b; }" always "void f() { r = a and b; }"
  "test.c" always "test.c"
  false always 0
Line 3274
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3274 always 3274
  "void f ( ) { r = ( a || b ) && ( c || d ) ; }" always "void f ( ) { r = ( a || b ) && ( c || d ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3274 always 3274
  "void f() { r = (a || b) and (c || d); }" always "void f() { r = (a || b) and (c || d); }"
  "test.c" always "test.c"
  false always 0
Line 3277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3277 always 3277
  "void f ( ) { if ( test1 [ i ] == 'A' && test2 [ i ] == 'C' ) { } }" always "void f ( ) { if ( test1 [ i ] == 'A' && test2 [ i ] == 'C' ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3277 always 3277
  "void f() { if (test1[i] == 'A' and test2[i] == 'C') {} }" always "void f() { if (test1[i] == 'A' and test2[i] == 'C') {} }"
  "test.c" always "test.c"
  false always 0
Line 3282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3282 always 3282
  "void f ( ) { if ( p || q ) { ; } }" always "void f ( ) { if ( p || q ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3282 always 3282
  "void f() { if (p or q) ; }" always "void f() { if (p or q) ; }"
  "test.c" always "test.c"
  false always 0
Line 3285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3285 always 3285
  "void f ( ) { if ( foo ( ) || q ) { ; } }" always "void f ( ) { if ( foo ( ) || q ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3285 always 3285
  "void f() { if (foo() or q) ; }" always "void f() { if (foo() or q) ; }"
  "test.c" always "test.c"
  false always 0
Line 3288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3288 always 3288
  "void f ( ) { if ( foo ( ) || bar ( ) ) { ; } }" always "void f ( ) { if ( foo ( ) || bar ( ) ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3288 always 3288
  "void f() { if (foo() or bar()) ; }" always "void f() { if (foo() or bar()) ; }"
  "test.c" always "test.c"
  false always 0
Line 3291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3291 always 3291
  "void f ( ) { if ( p || bar ( ) ) { ; } }" always "void f ( ) { if ( p || bar ( ) ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3291 always 3291
  "void f() { if (p or bar()) ; }" always "void f() { if (p or bar()) ; }"
  "test.c" always "test.c"
  false always 0
Line 3294
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3294 always 3294
  "void f ( ) { if ( p || ! q ) { ; } }" always "void f ( ) { if ( p || ! q ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3294 always 3294
  "void f() { if (p or not q) ; }" always "void f() { if (p or not q) ; }"
  "test.c" always "test.c"
  false always 0
Line 3297
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3297 always 3297
  "void f ( ) { r = a || b ; }" always "void f ( ) { r = a || b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3297 always 3297
  "void f() { r = a or b; }" always "void f() { r = a or b; }"
  "test.c" always "test.c"
  false always 0
Line 3300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3300 always 3300
  "void f ( ) { r = ( a && b ) || ( c && d ) ; }" always "void f ( ) { r = ( a && b ) || ( c && d ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3300 always 3300
  "void f() { r = (a && b) or (c && d); }" always "void f() { r = (a && b) or (c && d); }"
  "test.c" always "test.c"
  false always 0
Line 3305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3305 always 3305
  "void f ( ) { err |= ( ( r & s ) && ! t ) ; }" always "void f ( ) { err |= ( ( r & s ) && ! t ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3305 always 3305
  "void f() { err or_eq ((r bitand s) and not t); }" always "void f() { err or_eq ((r bitand s) and not t); }"
  "test.c" always "test.c"
  false always 0
Line 3307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3307 always 3307
  "void f ( ) const { r = f ( a [ 4 ] | 0x0F , ~ c , ! d ) ; }" always "void f ( ) const { r = f ( a [ 4 ] | 0x0F , ~ c , ! d ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3307 always 3307
  "void f() const { r = f(a[4] bitor 0x0F, compl c, not d) ; }" always "void f() const { r = f(a[4] bitor 0x0F, compl c, not d) ; }"
  "test.c" always "test.c"
  false always 0
Line 3314
  57 always 57
  = always "void foo()\n{\n    char *a, *b;\n    delete a, delete b;\n}\n"
  "void foo()\n{\n    char *a, *b;\n    delete a, delete b;\n}\n" always "void foo()\n{\n    char *a, *b;\n    delete a, delete b;\n}\n"
Line 3319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3319 always 3319
  "void foo ( ) { char * a ; char * b ; delete a ; delete b ; }" always "void foo ( ) { char * a ; char * b ; delete a ; delete b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3319 always 3319
  code always "void foo()\n{\n    char *a, *b;\n    delete a, delete b;\n}\n"
Line 3323
  37 always 37
  = always "void foo()\n{\n    struct A *a, *b;\n}\n"
  "void foo()\n{\n    struct A *a, *b;\n}\n" always "void foo()\n{\n    struct A *a, *b;\n}\n"
Line 3327
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3327 always 3327
  "void foo ( ) { struct A * a ; struct A * b ; }" always "void foo ( ) { struct A * a ; struct A * b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3327 always 3327
  code always "void foo()\n{\n    struct A *a, *b;\n}\n"
Line 3331
  39 always 39
  = always "void foo()\n{\n    struct A **a, **b;\n}\n"
  "void foo()\n{\n    struct A **a, **b;\n}\n" always "void foo()\n{\n    struct A **a, **b;\n}\n"
Line 3335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3335 always 3335
  "void foo ( ) { struct A * * a ; struct A * * b ; }" always "void foo ( ) { struct A * * a ; struct A * * b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3335 always 3335
  code always "void foo()\n{\n    struct A **a, **b;\n}\n"
Line 3339
  50 always 50
  = always "void foo()\n{\n    char *a, *b;\n    delete a, b;\n}\n"
  "void foo()\n{\n    char *a, *b;\n    delete a, b;\n}\n" always "void foo()\n{\n    char *a, *b;\n    delete a, b;\n}\n"
Line 3344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3344 always 3344
  "void foo ( ) { char * a ; char * b ; delete a ; b ; }" always "void foo ( ) { char * a ; char * b ; delete a ; b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3344 always 3344
  code always "void foo()\n{\n    char *a, *b;\n    delete a, b;\n}\n"
Line 3348
  57 always 57
  = always "void foo()\n{\n    char *a, *b, *c;\n    delete a, b, c;\n}\n"
  "void foo()\n{\n    char *a, *b, *c;\n    delete a, b, c;\n}\n" always "void foo()\n{\n    char *a, *b, *c;\n    delete a, b, c;\n}\n"
Line 3354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3354 always 3354
  "void foo ( ) { char * a ; char * b ; char * c ; delete a ; b , c ; }" always "void foo ( ) { char * a ; char * b ; char * c ; delete a ; b , c ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3354 always 3354
  code always "void foo()\n{\n    char *a, *b, *c;\n    delete a, b, c;\n}\n"
Line 3358
  65 always 65
  = always "void foo()\n{\n    char *a, *b;\n    if (x)\n        delete a, b;\n}\n"
  "void foo()\n{\n    char *a, *b;\n    if (x)\n        delete a, b;\n}\n" always "void foo()\n{\n    char *a, *b;\n    if (x)\n        delete a, b;\n}\n"
Line 3364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3364 always 3364
  "void foo ( ) { char * a ; char * b ; if ( x ) { delete a ; b ; } }" always "void foo ( ) { char * a ; char * b ; if ( x ) { delete a ; b ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3364 always 3364
  code always "void foo()\n{\n    char *a, *b;\n    if (x)\n        delete a, b;\n}\n"
Line 3368
  73 always 73
  = always "void foo()\n{\n    char *a, *b, *c;\n    if (x) \n        delete a, b, c;\n}\n"
  "void foo()\n{\n    char *a, *b, *c;\n    if (x) \n        delete a, b, c;\n}\n" always "void foo()\n{\n    char *a, *b, *c;\n    if (x) \n        delete a, b, c;\n}\n"
Line 3375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3375 always 3375
  "void foo ( ) { char * a ; char * b ; char * c ; if ( x ) { delete a ; b , c ; } }" always "void foo ( ) { char * a ; char * b ; char * c ; if ( x ) { delete a ; b , c ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3375 always 3375
  code always "void foo()\n{\n    char *a, *b, *c;\n    if (x) \n        delete a, b, c;\n}\n"
Line 3379
  40 always 40
  = always "void foo()\n{\n    char **a, **b, **c;\n}\n"
  "void foo()\n{\n    char **a, **b, **c;\n}\n" always "void foo()\n{\n    char **a, **b, **c;\n}\n"
Line 3383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3383 always 3383
  "void foo ( ) { char * * a ; char * * b ; char * * c ; }" always "void foo ( ) { char * * a ; char * * b ; char * * c ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3383 always 3383
  code always "void foo()\n{\n    char **a, **b, **c;\n}\n"
Line 3387
  104 always 104
  = always "int f()\n{\n    if (something)\n        return a(2, c(3, 4)), b(3), 10;\n    return a(), b(0, 0, 0), 10;\n}\n"
  "int f()\n{\n    if (something)\n        return a(2, c(3, 4)), b(3), 10;\n    return a(), b(0, 0, 0), 10;\n}\n" always "int f()\n{\n    if (something)\n        return a(2, c(3, 4)), b(3), 10;\n    return a(), b(0, 0, 0), 10;\n}\n"
Line 3393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3393 always 3393
  "int f ( ) { if ( something ) { a ( 2 , c ( 3 , 4 ) ) ; b ( 3 ) ; return 10 ; } a ( ) ; b ( 0 , 0 , 0 ) ; return 10 ; }" always "int f ( ) { if ( something ) { a ( 2 , c ( 3 , 4 ) ) ; b ( 3 ) ; return 10 ; } a ( ) ; b ( 0 , 0 , 0 ) ; return 10 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3393 always 3393
  code always "int f()\n{\n    if (something)\n        return a(2, c(3, 4)), b(3), 10;\n    return a(), b(0, 0, 0), 10;\n}\n"
Line 3408
  40 always 40
  = always "void foo()\n{\n    delete [] a, a = 0;\n}\n"
  "void foo()\n{\n    delete [] a, a = 0;\n}\n" always "void foo()\n{\n    delete [] a, a = 0;\n}\n"
Line 3412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3412 always 3412
  "void foo ( ) { delete [ ] a ; a = 0 ; }" always "void foo ( ) { delete [ ] a ; a = 0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3412 always 3412
  code always "void foo()\n{\n    delete [] a, a = 0;\n}\n"
Line 3416
  37 always 37
  = always "void foo()\n{\n    delete a, a = 0;\n}\n"
  "void foo()\n{\n    delete a, a = 0;\n}\n" always "void foo()\n{\n    delete a, a = 0;\n}\n"
Line 3420
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3420 always 3420
  "void foo ( ) { delete a ; a = 0 ; }" always "void foo ( ) { delete a ; a = 0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3420 always 3420
  code always "void foo()\n{\n    delete a, a = 0;\n}\n"
Line 3424
  45 always 45
  = always "void foo()\n{\n    if( x ) delete a, a = 0;\n}\n"
  "void foo()\n{\n    if( x ) delete a, a = 0;\n}\n" always "void foo()\n{\n    if( x ) delete a, a = 0;\n}\n"
Line 3428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3428 always 3428
  "void foo ( ) { if ( x ) { delete a ; a = 0 ; } }" always "void foo ( ) { if ( x ) { delete a ; a = 0 ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3428 always 3428
  code always "void foo()\n{\n    if( x ) delete a, a = 0;\n}\n"
Line 3432
  62 always 62
  = always "void f()\n{\n    for(int a,b; a < 10; a = a + 1, b = b + 1);\n}\n"
  "void f()\n{\n    for(int a,b; a < 10; a = a + 1, b = b + 1);\n}\n" always "void f()\n{\n    for(int a,b; a < 10; a = a + 1, b = b + 1);\n}\n"
Line 3436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3436 always 3436
  "void f ( ) { for ( int a , b ; a < 10 ; a = a + 1 , b = b + 1 ) { ; } }" always "void f ( ) { for ( int a , b ; a < 10 ; a = a + 1 , b = b + 1 ) { ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3436 always 3436
  code always "void f()\n{\n    for(int a,b; a < 10; a = a + 1, b = b + 1);\n}\n"
Line 3440
  71 always 71
  = always "void f()\n{\n    char buf[BUFSIZ], **p;\n    char *ptrs[BUFSIZ], **pp;\n}\n"
  "void f()\n{\n    char buf[BUFSIZ], **p;\n    char *ptrs[BUFSIZ], **pp;\n}\n" always "void f()\n{\n    char buf[BUFSIZ], **p;\n    char *ptrs[BUFSIZ], **pp;\n}\n"
Line 3445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3445 always 3445
  "void f ( ) { char buf [ BUFSIZ ] ; char * * p ; char * ptrs [ BUFSIZ ] ; char * * pp ; }" always "void f ( ) { char buf [ BUFSIZ ] ; char * * p ; char * ptrs [ BUFSIZ ] ; char * * pp ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3445 always 3445
  code always "void f()\n{\n    char buf[BUFSIZ], **p;\n    char *ptrs[BUFSIZ], **pp;\n}\n"
Line 3450
  54 always 54
  = always "template < class T = X > class A : public B , C { } ;"
  "template < class T = X > class A : public B , C { } ;" always "template < class T = X > class A : public B , C { } ;"
Line 3451
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3451 always 3451
  code always "template < class T = X > class A : public B , C { } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3451 always 3451
  code always "template < class T = X > class A : public B , C { } ;"
Line 3457
  49 always 49
  = always "void f()\n{\n  int a,b;\n  if( a )\n  a=0,\n  b=0;\n}\n"
  "void f()\n{\n  int a,b;\n  if( a )\n  a=0,\n  b=0;\n}\n" always "void f()\n{\n  int a,b;\n  if( a )\n  a=0,\n  b=0;\n}\n"
Line 3464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3464 always 3464
  "void f ( ) { int a ; int b ; if ( a ) { a = 0 ; b = 0 ; } }" always "void f ( ) { int a ; int b ; if ( a ) { a = 0 ; b = 0 ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3464 always 3464
  code always "void f()\n{\n  int a,b;\n  if( a )\n  a=0,\n  b=0;\n}\n"
Line 3468
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3468 always 3468
  "a ? ( b = c , d ) : e ;" always "a ? ( b = c , d ) : e ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3468 always 3468
  "a ? b = c , d : e ;" always "a ? b = c , d : e ;"
Line 3472
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3472 always 3472
  "{ return a ? ( b = c , d ) : e ; }" always "{ return a ? ( b = c , d ) : e ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3472 always 3472
  "{ return a ? b = c , d : e ; }" always "{ return a ? b = c , d : e ; }"
Line 3476
  57 always 57
  = always "void f()\n{\n  A a,b;\n  if( a.f )\n  a.f=b.f,\n  a.g=b.g;\n}\n"
  "void f()\n{\n  A a,b;\n  if( a.f )\n  a.f=b.f,\n  a.g=b.g;\n}\n" always "void f()\n{\n  A a,b;\n  if( a.f )\n  a.f=b.f,\n  a.g=b.g;\n}\n"
Line 3483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3483 always 3483
  "void f ( ) { A a ; A b ; if ( a . f ) { a . f = b . f ; a . g = b . g ; } }" always "void f ( ) { A a ; A b ; if ( a . f ) { a . f = b . f ; a . g = b . g ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3483 always 3483
  code always "void f()\n{\n  A a,b;\n  if( a.f )\n  a.f=b.f,\n  a.g=b.g;\n}\n"
Line 3488
  45 always 45
  = always "void f()\n{\n  int a = b<T<char,3>, int>();\n}\n"
  "void f()\n{\n  int a = b<T<char,3>, int>();\n}\n" always "void f()\n{\n  int a = b<T<char,3>, int>();\n}\n"
Line 3492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3492 always 3492
  "void f ( ) { int a ; a = b < T < char , 3 > , int > ( ) ; }" always "void f ( ) { int a ; a = b < T < char , 3 > , int > ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3492 always 3492
  code always "void f()\n{\n  int a = b<T<char,3>, int>();\n}\n"
Line 3496
  60 always 60
  = always "void f() {\n  a = new std::map<std::string, std::string>;\n}\n"
  "void f() {\n  a = new std::map<std::string, std::string>;\n}\n" always "void f() {\n  a = new std::map<std::string, std::string>;\n}\n"
Line 3499
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3499 always 3499
  "void f ( ) { a = new std :: map < std :: string , std :: string > ; }" always "void f ( ) { a = new std :: map < std :: string , std :: string > ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3499 always 3499
  code always "void f() {\n  a = new std::map<std::string, std::string>;\n}\n"
Line 3504
  53 always 53
  = always "const C<1,2,3> foo ()\n{\n    return C<1,2,3>(x,y);\n}\n"
  "const C<1,2,3> foo ()\n{\n    return C<1,2,3>(x,y);\n}\n" always "const C<1,2,3> foo ()\n{\n    return C<1,2,3>(x,y);\n}\n"
Line 3508
  69 always 69
  = always "const C < 1 , 2 , 3 > foo ( ) { return C < 1 , 2 , 3 > ( x , y ) ; }"
  "const C < 1 , 2 , 3 > foo ( ) { return C < 1 , 2 , 3 > ( x , y ) ; }" always "const C < 1 , 2 , 3 > foo ( ) { return C < 1 , 2 , 3 > ( x , y ) ; }"
Line 3512
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3512 always 3512
  expected always "const C < 1 , 2 , 3 > foo ( ) { return C < 1 , 2 , 3 > ( x , y ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3512 always 3512
  code always "const C<1,2,3> foo ()\n{\n    return C<1,2,3>(x,y);\n}\n"
Line 3516
  45 always 45
  = always "int foo ()\n{\n    return doSomething(), 0;\n}\n"
  "int foo ()\n{\n    return doSomething(), 0;\n}\n" always "int foo ()\n{\n    return doSomething(), 0;\n}\n"
Line 3520
  45 always 45
  = always "int foo ( ) { doSomething ( ) ; return 0 ; }"
  "int foo ( ) { doSomething ( ) ; return 0 ; }" always "int foo ( ) { doSomething ( ) ; return 0 ; }"
Line 3524
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3524 always 3524
  expected always "int foo ( ) { doSomething ( ) ; return 0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3524 always 3524
  code always "int foo ()\n{\n    return doSomething(), 0;\n}\n"
Line 3528
  37 always 37
  = always "int foo ()\n{\n    return a=1, b=2;\n}\n"
  "int foo ()\n{\n    return a=1, b=2;\n}\n" always "int foo ()\n{\n    return a=1, b=2;\n}\n"
Line 3532
  39 always 39
  = always "int foo ( ) { a = 1 ; return b = 2 ; }"
  "int foo ( ) { a = 1 ; return b = 2 ; }" always "int foo ( ) { a = 1 ; return b = 2 ; }"
Line 3536
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3536 always 3536
  expected always "int foo ( ) { a = 1 ; return b = 2 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3536 always 3536
  code always "int foo ()\n{\n    return a=1, b=2;\n}\n"
Line 3540
  41 always 41
  = always "tr = (struct reg){ .a = (1), .c = (2) };"
  "tr = (struct reg){ .a = (1), .c = (2) };" always "tr = (struct reg){ .a = (1), .c = (2) };"
Line 3541
  44 always 44
  = always "tr = ( struct reg ) { . a = 1 , . c = 2 } ;"
  "tr = ( struct reg ) { . a = 1 , . c = 2 } ;" always "tr = ( struct reg ) { . a = 1 , . c = 2 } ;"
Line 3542
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3542 always 3542
  expected always "tr = ( struct reg ) { . a = 1 , . c = 2 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3542 always 3542
  code always "tr = (struct reg){ .a = (1), .c = (2) };"
Line 3548
  19 always 19
  = always "(0?(false?1:2):3);"
  "(0?(false?1:2):3);" always "(0?(false?1:2):3);"
Line 3549
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3549 always 3549
  "( 3 ) ;" always "( 3 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3549 always 3549
  code always "(0?(false?1:2):3);"
Line 3553
  19 always 19
  = always "(1?(false?1:2):3);"
  "(1?(false?1:2):3);" always "(1?(false?1:2):3);"
Line 3554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3554 always 3554
  "( 2 ) ;" always "( 2 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3554 always 3554
  code always "(1?(false?1:2):3);"
Line 3558
  26 always 26
  = always "int a = (1?0:1 == 1?0:1);"
  "int a = (1?0:1 == 1?0:1);" always "int a = (1?0:1 == 1?0:1);"
Line 3559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3559 always 3559
  "int a ; a = 0 ;" always "int a ; a = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3559 always 3559
  code always "int a = (1?0:1 == 1?0:1);"
Line 3563
  13 always 13
  = always "(1?0:foo());"
  "(1?0:foo());" always "(1?0:foo());"
Line 3564
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3564 always 3564
  "( 0 ) ;" always "( 0 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3564 always 3564
  code always "(1?0:foo());"
Line 3568
  50 always 50
  = always "void f () { switch(n) { case 1?0:foo(): break; }}"
  "void f () { switch(n) { case 1?0:foo(): break; }}" always "void f () { switch(n) { case 1?0:foo(): break; }}"
Line 3570
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3570 always 3570
  code always "void f () { switch(n) { case 1?0:foo(): break; }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3570 always 3570
  false always 0
Line 3575
  54 always 54
  = always "void f () { switch(n) { case 1?0?1:0:foo(): break; }}"
  "void f () { switch(n) { case 1?0?1:0:foo(): break; }}" always "void f () { switch(n) { case 1?0?1:0:foo(): break; }}"
Line 3577
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3577 always 3577
  code always "void f () { switch(n) { case 1?0?1:0:foo(): break; }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3577 always 3577
  false always 0
Line 3581
  50 always 50
  = always "void f () { switch(n) { case 0?foo():1: break; }}"
  "void f () { switch(n) { case 0?foo():1: break; }}" always "void f () { switch(n) { case 0?foo():1: break; }}"
Line 3583
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3583 always 3583
  code always "void f () { switch(n) { case 0?foo():1: break; }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3583 always 3583
  false always 0
Line 3587
  26 always 26
  = always "( true ? a ( ) : b ( ) );"
  "( true ? a ( ) : b ( ) );" always "( true ? a ( ) : b ( ) );"
Line 3588
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3588 always 3588
  "( a ( ) ) ;" always "( a ( ) ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3588 always 3588
  code always "( true ? a ( ) : b ( ) );"
Line 3592
  30 always 30
  = always "( true ? abc . a : abc . b );"
  "( true ? abc . a : abc . b );" always "( true ? abc . a : abc . b );"
Line 3593
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3593 always 3593
  "( abc . a ) ;" always "( abc . a ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3593 always 3593
  code always "( true ? abc . a : abc . b );"
Line 3597
  54 always 54
  = always "void f()\n{\n  bool x = false;\n  int b = x ? 44 : 3;\n}\n"
  "void f()\n{\n  bool x = false;\n  int b = x ? 44 : 3;\n}\n" always "void f()\n{\n  bool x = false;\n  int b = x ? 44 : 3;\n}\n"
Line 3602
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3602 always 3602
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3602 always 3602
  code always "void f()\n{\n  bool x = false;\n  int b = x ? 44 : 3;\n}\n"
Line 3606
  36 always 36
  = always "int vals[] = { 0x13, 1?0x01:0x00 };"
  "int vals[] = { 0x13, 1?0x01:0x00 };" always "int vals[] = { 0x13, 1?0x01:0x00 };"
Line 3607
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3607 always 3607
  "int vals [ 2 ] = { 0x13 , 0x01 } ;" always "int vals [ 2 ] = { 0x13 , 0x01 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3607 always 3607
  code always "int vals[] = { 0x13, 1?0x01:0x00 };"
Line 3611
  36 always 36
  = always "int vals[] = { 0x13, 0?0x01:0x00 };"
  "int vals[] = { 0x13, 0?0x01:0x00 };" always "int vals[] = { 0x13, 0?0x01:0x00 };"
Line 3612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3612 always 3612
  "int vals [ 2 ] = { 0x13 , 0x00 } ;" always "int vals [ 2 ] = { 0x13 , 0x00 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3612 always 3612
  code always "int vals[] = { 0x13, 0?0x01:0x00 };"
Line 3616
  22 always 22
  = always "a = 1 ? 0 : ({ 0; });"
  "a = 1 ? 0 : ({ 0; });" always "a = 1 ? 0 : ({ 0; });"
Line 3617
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3617 always 3617
  "a = 0 ;" always "a = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3617 always 3617
  code always "a = 1 ? 0 : ({ 0; });"
Line 3622
  28 always 28
  = always "; a = 1 ? : x; b = 0 ? : 2;"
  "; a = 1 ? : x; b = 0 ? : 2;" always "; a = 1 ? : x; b = 0 ? : 2;"
Line 3623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3623 always 3623
  "; a = 1 ; b = 2 ;" always "; a = 1 ; b = 2 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3623 always 3623
  code always "; a = 1 ? : x; b = 0 ? : 2;"
Line 3627
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3627 always 3627
  "0 ; x = { ? y : z ; }" always "0 ; x = { ? y : z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3627 always 3627
  "0; x = { ? y : z; }" always "0; x = { ? y : z; }"
Line 3631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3631 always 3631
  "; x = 2 ;" always "; x = 2 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3631 always 3631
  "; x = (true)?2:4;" always "; x = (true)?2:4;"
Line 3632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3632 always 3632
  "; x = 4 ;" always "; x = 4 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3632 always 3632
  "; x = (false)?2:4;" always "; x = (false)?2:4;"
Line 3633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3633 always 3633
  "; x = * a ;" always "; x = * a ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3633 always 3633
  "; x = (true)?*a:*b;" always "; x = (true)?*a:*b;"
Line 3634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3634 always 3634
  "; x = * b ;" always "; x = * b ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3634 always 3634
  "; x = (false)?*a:*b;" always "; x = (false)?*a:*b;"
Line 3635
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3635 always 3635
  "void f ( ) { return 1 ; }" always "void f ( ) { return 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3635 always 3635
  "void f() { char *p=0; return (p==0)?1:2; }" always "void f() { char *p=0; return (p==0)?1:2; }"
Line 3640
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3640 always 3640
  "; type = decay_t<decltype(true ? declval<T>() : declval<U>())>;" always "; type = decay_t<decltype(true ? declval<T>() : declval<U>())>;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3640 always 3640
  false always 0
Line 3641
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3641 always 3641
  "; type = decay_t<decltype(false ? declval<T>() : declval<U>())>;" always "; type = decay_t<decltype(false ? declval<T>() : declval<U>())>;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3641 always 3641
  false always 0
Line 3647
  10 always 10
  = always "a[i+8+2];"
  "a[i+8+2];" always "a[i+8+2];"
Line 3648
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3648 always 3648
  "a [ i + 10 ] ;" always "a [ i + 10 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3648 always 3648
  code always "a[i+8+2];"
Line 3651
  10 always 10
  = always "a[8+2+i];"
  "a[8+2+i];" always "a[8+2+i];"
Line 3652
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3652 always 3652
  "a [ 10 + i ] ;" always "a [ 10 + i ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3652 always 3652
  code always "a[8+2+i];"
Line 3655
  20 always 20
  = always "a[i + 2 * (2 * 4)];"
  "a[i + 2 * (2 * 4)];" always "a[i + 2 * (2 * 4)];"
Line 3656
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3656 always 3656
  "a [ i + 16 ] ;" always "a [ i + 16 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3656 always 3656
  code always "a[i + 2 * (2 * 4)];"
Line 3659
  17 always 17
  = always "a[i + 100 - 90];"
  "a[i + 100 - 90];" always "a[i + 100 - 90];"
Line 3660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3660 always 3660
  "a [ i + 10 ] ;" always "a [ i + 10 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3660 always 3660
  code always "a[i + 100 - 90];"
Line 3663
  30 always 30
  = always "a[1+1+1+1+1+1+1+1+1+1-2+5-3];"
  "a[1+1+1+1+1+1+1+1+1+1-2+5-3];" always "a[1+1+1+1+1+1+1+1+1+1-2+5-3];"
Line 3664
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3664 always 3664
  "a [ 10 ] ;" always "a [ 10 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3664 always 3664
  code always "a[1+1+1+1+1+1+1+1+1+1-2+5-3];"
Line 3667
  16 always 16
  = always "a[10+10-10-10];"
  "a[10+10-10-10];" always "a[10+10-10-10];"
Line 3668
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3668 always 3668
  "a [ 0 ] ;" always "a [ 0 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3668 always 3668
  code always "a[10+10-10-10];"
Line 3671
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3671 always 3671
  "a [ 4 ] ;" always "a [ 4 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3671 always 3671
  "a[1+3|4];" always "a[1+3|4];"
Line 3672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3672 always 3672
  "a [ 4U ] ;" always "a [ 4U ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3672 always 3672
  "a[1+3|4U];" always "a[1+3|4U];"
Line 3673
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3673 always 3673
  "a [ 3 ] ;" always "a [ 3 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3673 always 3673
  "a[1+2&3];" always "a[1+2&3];"
Line 3674
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3674 always 3674
  "a [ 3U ] ;" always "a [ 3U ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3674 always 3674
  "a[1+2&3U];" always "a[1+2&3U];"
Line 3675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3675 always 3675
  "a [ 5 ] ;" always "a [ 5 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3675 always 3675
  "a[1-0^4];" always "a[1-0^4];"
Line 3676
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3676 always 3676
  "a [ 5U ] ;" always "a [ 5U ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3676 always 3676
  "a[1-0^4U];" always "a[1-0^4U];"
Line 3678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3678 always 3678
  "x = 1 + 2 * y ;" always "x = 1 + 2 * y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3678 always 3678
  "x=1+2*y;" always "x=1+2*y;"
Line 3679
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3679 always 3679
  "x = 7 ;" always "x = 7 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3679 always 3679
  "x=1+2*3;" always "x=1+2*3;"
Line 3680
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3680 always 3680
  "x = 47185 ;" always "x = 47185 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3680 always 3680
  "x=(65536*72/100);" always "x=(65536*72/100);"
Line 3681
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3681 always 3681
  "x = 900 ;" always "x = 900 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3681 always 3681
  "x = 1500000 / ((145000 - 55000) * 1000 / 54000);" always "x = 1500000 / ((145000 - 55000) * 1000 / 54000);"
Line 3682
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3682 always 3682
  "int a [ 8 ] ;" always "int a [ 8 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3682 always 3682
  "int a[5+6/2];" always "int a[5+6/2];"
Line 3683
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3683 always 3683
  "int a [ 4 ] ;" always "int a [ 4 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3683 always 3683
  "int a[(10)-1-5];" always "int a[(10)-1-5];"
Line 3684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3684 always 3684
  "int a [ i - 9 ] ;" always "int a [ i - 9 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3684 always 3684
  "int a[i - 10 + 1];" always "int a[i - 10 + 1];"
Line 3685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3685 always 3685
  "int a [ i - 11 ] ;" always "int a [ i - 11 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3685 always 3685
  "int a[i - 10 - 1];" always "int a[i - 10 - 1];"
Line 3687
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3687 always 3687
  "x = y ;" always "x = y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3687 always 3687
  "x=0+y+0-0;" always "x=0+y+0-0;"
Line 3688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3688 always 3688
  "x = 0 ;" always "x = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3688 always 3688
  "x=0*y;" always "x=0*y;"
Line 3690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3690 always 3690
  "x = 501 ;" always "x = 501 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3690 always 3690
  "x = 1000 + 2 >> 1;" always "x = 1000 + 2 >> 1;"
Line 3691
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3691 always 3691
  "x = 125 ;" always "x = 125 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3691 always 3691
  "x = 1000 / 2 >> 2;" always "x = 1000 / 2 >> 2;"
Line 3695
  31 always 31
  = always "void * operator new[](size_t);"
  "void * operator new[](size_t);" always "void * operator new[](size_t);"
Line 3696
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3696 always 3696
  "void * operatornew[] ( long ) ;" always "void * operatornew[] ( long ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3696 always 3696
  code always "void * operator new[](size_t);"
  true always 1
Line 3699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3699 always 3699
  "; a [ 0 ] ;" always "; a [ 0 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3699 always 3699
  ";a[0*(*p)];" always ";a[0*(*p)];"
Line 3701
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3701 always 3701
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3701 always 3701
  "; x = x + 0;" always "; x = x + 0;"
Line 3703
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3703 always 3703
  "{ if ( a == 2 ) { } }" always "{ if ( a == 2 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3703 always 3703
  "{if (a==1+1){}}" always "{if (a==1+1){}}"
Line 3704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3704 always 3704
  "{ if ( a + 2 != 6 ) { } }" always "{ if ( a + 2 != 6 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3704 always 3704
  "{if (a+1+1!=1+2+3){}}" always "{if (a+1+1!=1+2+3){}}"
Line 3705
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3705 always 3705
  "{ if ( 4 < a ) { } }" always "{ if ( 4 < a ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3705 always 3705
  "{if (14-2*5<a*4/(2*2)){}}" always "{if (14-2*5<a*4/(2*2)){}}"
Line 3707
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3707 always 3707
  "( y / 2 - 2 ) ;" always "( y / 2 - 2 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3707 always 3707
  "(y / 2 - 2);" always "(y / 2 - 2);"
Line 3708
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3708 always 3708
  "( y % 2 - 2 ) ;" always "( y % 2 - 2 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3708 always 3708
  "(y % 2 - 2);" always "(y % 2 - 2);"
Line 3710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3710 always 3710
  "( 4 ) ;" always "( 4 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3710 always 3710
  "(1 * 2 / 1 * 2);" always "(1 * 2 / 1 * 2);"
Line 3712
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3712 always 3712
  "x ( 60129542144 ) ;" always "x ( 60129542144 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3712 always 3712
  "x(14<<4+17<<300%17);" always "x(14<<4+17<<300%17);"
Line 3713
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3713 always 3713
  "x ( 1 ) ;" always "x ( 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3713 always 3713
  "x(8|5&6+0 && 7);" always "x(8|5&6+0 && 7);"
Line 3714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3714 always 3714
  "x ( 1 ) ;" always "x ( 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3714 always 3714
  "x(2 && 4<<4<<5 && 4);" always "x(2 && 4<<4<<5 && 4);"
Line 3715
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3715 always 3715
  "x ( 1 ) ;" always "x ( 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3715 always 3715
  "x(9&&8%5%4/3);" always "x(9&&8%5%4/3);"
Line 3716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3716 always 3716
  "x ( 1 ) ;" always "x ( 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3716 always 3716
  "x(2 && 2|5<<2%4);" always "x(2 && 2|5<<2%4);"
Line 3717
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3717 always 3717
  "x ( -2 << 6 | 1 ) ;" always "x ( -2 << 6 | 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3717 always 3717
  "x(1-3<<6|5/3);" always "x(1-3<<6|5/3);"
Line 3718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3718 always 3718
  "x ( 2 ) ;" always "x ( 2 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3718 always 3718
  "x(2|0*0&2>>1+0%2*1);" always "x(2|0*0&2>>1+0%2*1);"
Line 3719
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3719 always 3719
  "x ( 0 & 4 != 1 ) ;" always "x ( 0 & 4 != 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3719 always 3719
  "x(4%1<<1&4!=1);" always "x(4%1<<1&4!=1);"
Line 3720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3720 always 3720
  "x ( true ) ;" always "x ( true ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3720 always 3720
  "x(0&&4>0==2||4);" always "x(0&&4>0==2||4);"
Line 3723
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3723 always 3723
  "new ( auto ) ( 4 ) ;" always "new ( auto ) ( 4 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3723 always 3723
  "new (auto)(4);" always "new (auto)(4);"
Line 3727
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3727 always 3727
  "( 1 ) ;" always "( 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3727 always 3727
  "( 1 < 2 );" always "( 1 < 2 );"
Line 3728
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3728 always 3728
  "( x && true ) ;" always "( x && true ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3728 always 3728
  "( x && 1 < 2 );" always "( x && 1 < 2 );"
Line 3729
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3729 always 3729
  "( 5 ) ;" always "( 5 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3729 always 3729
  "( 1 < 2 && 3 < 4 ? 5 : 6 );" always "( 1 < 2 && 3 < 4 ? 5 : 6 );"
Line 3730
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3730 always 3730
  "( 6 ) ;" always "( 6 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3730 always 3730
  "( 1 > 2 && 3 > 4 ? 5 : 6 );" always "( 1 > 2 && 3 > 4 ? 5 : 6 );"
Line 3734
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3734 always 3734
  "void foo ( char str [ ] ) { char x ; x = * str ; }" always "void foo ( char str [ ] ) { char x ; x = * str ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3734 always 3734
  "void foo ( char str [ ] ) { char x = 0 | ( * str ) ; }" always "void foo ( char str [ ] ) { char x = 0 | ( * str ) ; }"
Line 3736
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3736 always 3736
  "void foo ( ) { if ( b ) { } }" always "void foo ( ) { if ( b ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3736 always 3736
  "void foo ( ) { if (b + 0) { } }" always "void foo ( ) { if (b + 0) { } }"
Line 3738
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3738 always 3738
  "void foo ( ) { if ( b ) { } }" always "void foo ( ) { if ( b ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3738 always 3738
  "void foo ( ) { if (0 + b) { } }" always "void foo ( ) { if (0 + b) { } }"
Line 3740
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3740 always 3740
  "void foo ( ) { if ( b ) { } }" always "void foo ( ) { if ( b ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3740 always 3740
  "void foo ( ) { if (b - 0) { } }" always "void foo ( ) { if (b - 0) { } }"
Line 3742
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3742 always 3742
  "void foo ( ) { if ( b ) { } }" always "void foo ( ) { if ( b ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3742 always 3742
  "void foo ( ) { if (b * 1) { } }" always "void foo ( ) { if (b * 1) { } }"
Line 3744
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3744 always 3744
  "void foo ( ) { if ( b ) { } }" always "void foo ( ) { if ( b ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3744 always 3744
  "void foo ( ) { if (1 * b) { } }" always "void foo ( ) { if (1 * b) { } }"
Line 3748
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3748 always 3748
  "void foo ( ) { if ( b ) { } }" always "void foo ( ) { if ( b ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3748 always 3748
  "void foo ( ) { if (b | 0) { } }" always "void foo ( ) { if (b | 0) { } }"
Line 3750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3750 always 3750
  "void foo ( ) { if ( b ) { } }" always "void foo ( ) { if ( b ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3750 always 3750
  "void foo ( ) { if (0 | b) { } }" always "void foo ( ) { if (0 | b) { } }"
Line 3752
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3752 always 3752
  "void foo ( int b ) { int a ; a = b ; bar ( a ) ; }" always "void foo ( int b ) { int a ; a = b ; bar ( a ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3752 always 3752
  "void foo ( int b ) { int a = b | 0 ; bar ( a ) ; }" always "void foo ( int b ) { int a = b | 0 ; bar ( a ) ; }"
Line 3754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3754 always 3754
  "void foo ( int b ) { int a ; a = b ; bar ( a ) ; }" always "void foo ( int b ) { int a ; a = b ; bar ( a ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3754 always 3754
  "void foo ( int b ) { int a = 0 | b ; bar ( a ) ; }" always "void foo ( int b ) { int a = 0 | b ; bar ( a ) ; }"
Line 3758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3758 always 3758
  "int f ( ) { return 15 ; }" always "int f ( ) { return 15 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3758 always 3758
  "int f() { int a = 10; int b = 5; return a + b; }" always "int f() { int a = 10; int b = 5; return a + b; }"
Line 3760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3760 always 3760
  "int f ( ) { return a ; }" always "int f ( ) { return a ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3760 always 3760
  "int f() { return a * 1; }" always "int f() { return a * 1; }"
Line 3762
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3762 always 3762
  "int f ( int a ) { return 0 ; }" always "int f ( int a ) { return 0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3762 always 3762
  "int f(int a) { return 0 * a; }" always "int f(int a) { return 0 * a; }"
Line 3764
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3764 always 3764
  "bool f ( int i ) { switch ( i ) { case 15 : ; return true ; } }" always "bool f ( int i ) { switch ( i ) { case 15 : ; return true ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3764 always 3764
  "bool f(int i) { switch (i) { case 10 + 5: return true; } }" always "bool f(int i) { switch (i) { case 10 + 5: return true; } }"
Line 3768
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3768 always 3768
  "int foo ( ) { return 1 ; }" always "int foo ( ) { return 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3768 always 3768
  "int foo ( ) { int i; int j; i = 1 || j; return i; }" always "int foo ( ) { int i; int j; i = 1 || j; return i; }"
Line 3771
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3771 always 3771
  "int foo ( ) { return 0 ; }" always "int foo ( ) { return 0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3771 always 3771
  "int foo ( ) { int i; int j; i = 0 && j; return i; }" always "int foo ( ) { int i; int j; i = 0 && j; return i; }"
Line 3775
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3775 always 3775
  "( 0 ) ;" always "( 0 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3775 always 3775
  "( 0 && a < 123 );" always "( 0 && a < 123 );"
Line 3777
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3777 always 3777
  "( 0 ) ;" always "( 0 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3777 always 3777
  "( 0 && a[123] );" always "( 0 && a[123] );"
Line 3781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3781 always 3781
  "dostuff ( 1 ) ;" always "dostuff ( 1 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3781 always 3781
  "dostuff(9&&8);" always "dostuff(9&&8);"
Line 3787
  30 always 30
  = always "void f() {\n  return;\n  y();\n}"
  "void f() {\n  return;\n  y();\n}" always "void f() {\n  return;\n  y();\n}"
Line 3791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3791 always 3791
  "void f ( ) { return ; }" always "void f ( ) { return ; }"
  code1 always "void f() {\n  return;\n  y();\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3791 always 3791
Line 3793
  31 always 31
  = always "void f() {\n  exit(0);\n  y();\n}"
  "void f() {\n  exit(0);\n  y();\n}" always "void f() {\n  exit(0);\n  y();\n}"
Line 3797
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3797 always 3797
  "void f ( ) { exit ( 0 ) ; }" always "void f ( ) { exit ( 0 ) ; }"
  code2 always "void f() {\n  exit(0);\n  y();\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3797 always 3797
Line 3799
  33 always 33
  = always "void f() {\n  x.abort();\n  y();\n}"
  "void f() {\n  x.abort();\n  y();\n}" always "void f() {\n  x.abort();\n  y();\n}"
Line 3803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3803 always 3803
  "void f ( ) { x . abort ( ) ; y ( ) ; }" always "void f ( ) { x . abort ( ) ; y ( ) ; }"
  code3 always "void f() {\n  x.abort();\n  y();\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3803 always 3803
Line 3808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3808 always 3808
  "void f ( ) { exit ( 0 ) ; }" always "void f ( ) { exit ( 0 ) ; }"
  "void f() { exit(0); foo(); }" always "void f() { exit(0); foo(); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3808 always 3808
Line 3809
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3809 always 3809
  "void f ( ) { exit ( 0 ) ; }" always "void f ( ) { exit ( 0 ) ; }"
  "void f() { exit(0); if (m) foo(); }" always "void f() { exit(0); if (m) foo(); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3809 always 3809
Line 3810
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3810 always 3810
  "void f ( int n ) { if ( n ) { exit ( 0 ) ; } foo ( ) ; }" always "void f ( int n ) { if ( n ) { exit ( 0 ) ; } foo ( ) ; }"
  "void f(int n) { if (n) { exit(0); } foo(); }" always "void f(int n) { if (n) { exit(0); } foo(); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3810 always 3810
Line 3811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3811 always 3811
  "void f ( ) { exit ( 0 ) ; }" always "void f ( ) { exit ( 0 ) ; }"
  "void f() { exit(0); dead(); switch (n) { case 1: deadcode () ; default: deadcode (); } }" always "void f() { exit(0); dead(); switch (n) { case 1: deadcode () ; default: deadcode (); } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3811 always 3811
Line 3813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3813 always 3813
  "int f ( int n ) { switch ( n ) { case 0 : ; exit ( 0 ) ; default : ; exit ( 0 ) ; } exit ( 0 ) ; }" always "int f ( int n ) { switch ( n ) { case 0 : ; exit ( 0 ) ; default : ; exit ( 0 ) ; } exit ( 0 ) ; }"
  "int f(int n) { switch (n) {case 0: exit(0); n*=2; default: exit(0); n*=6;} exit(0); foo();}" always "int f(int n) { switch (n) {case 0: exit(0); n*=2; default: exit(0); n*=6;} exit(0); foo();}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3813 always 3813
Line 3816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3816 always 3816
  "void f ( int i ) { goto label ; { label : ; exit ( 0 ) ; } }" always "void f ( int i ) { goto label ; { label : ; exit ( 0 ) ; } }"
  "void f (int i) { goto label; switch(i) { label: exit(0); } }" always "void f (int i) { goto label; switch(i) { label: exit(0); } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3816 always 3816
Line 3818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3818 always 3818
  "void f ( ) { MACRO ( exit ( 0 ) ) }" always "void f ( ) { MACRO ( exit ( 0 ) ) }"
  "void f() { MACRO(exit(0)) }" always "void f() { MACRO(exit(0)) }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3818 always 3818
Line 3819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3819 always 3819
  "void f ( ) { MACRO ( bar1 , exit ( 0 ) ) }" always "void f ( ) { MACRO ( bar1 , exit ( 0 ) ) }"
  "void f() { MACRO(bar1, exit(0)) }" always "void f() { MACRO(bar1, exit(0)) }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3819 always 3819
Line 3823
  = always "void f(){    if (k>0) goto label;    exit(0);    if (tnt)    {        {            check();            k=0;        }        label:        bar();    } }"
  "void f(){    if (k>0) goto label;    exit(0);    if (tnt)    {        {            check();            k=0;        }        label:        bar();    } }" always "void f(){    if (k>0) goto label;    exit(0);    if (tnt)    {        {            check();            k=0;        }        label:        bar();    } }"
Line 3836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3836 always 3836
  "void f ( ) { if ( k > 0 ) { goto label ; } exit ( 0 ) ; { label : ; bar ( ) ; } }" always "void f ( ) { if ( k > 0 ) { goto label ; } exit ( 0 ) ; { label : ; bar ( ) ; } }"
  code always "void f(){    if (k>0) goto label;    exit(0);    if (tnt)    {        {            check();            k=0;        }        label:        bar();    } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3836 always 3836
Line 3840
  = always "void foo () {    exit(0);    {        boo();        while (n) { --n; }        {            label:            ok();        }    }}"
  "void foo () {    exit(0);    {        boo();        while (n) { --n; }        {            label:            ok();        }    }}" always "void foo () {    exit(0);    {        boo();        while (n) { --n; }        {            label:            ok();        }    }}"
Line 3851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3851 always 3851
  "void foo ( ) { exit ( 0 ) ; { label : ; ok ( ) ; } }" always "void foo ( ) { exit ( 0 ) ; { label : ; ok ( ) ; } }"
  code always "void foo () {    exit(0);    {        boo();        while (n) { --n; }        {            label:            ok();        }    }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3851 always 3851
Line 3855
  = always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break;    }}"
  "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break;    }}" always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break;    }}"
Line 3865
  = always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
  "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }" always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
Line 3866
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3866 always 3866
  expected always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
  code always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break;    }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3866 always 3866
Line 3870
  = always "void foo () {    exit(0);    switch (n) {        case 1:            {                foo();            }            label:            bar();    }}"
  "void foo () {    exit(0);    switch (n) {        case 1:            {                foo();            }            label:            bar();    }}" always "void foo () {    exit(0);    switch (n) {        case 1:            {                foo();            }            label:            bar();    }}"
Line 3881
  = always "void foo ( ) { exit ( 0 ) ; { label : ; bar ( ) ; } }"
  "void foo ( ) { exit ( 0 ) ; { label : ; bar ( ) ; } }" always "void foo ( ) { exit ( 0 ) ; { label : ; bar ( ) ; } }"
Line 3882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3882 always 3882
  expected always "void foo ( ) { exit ( 0 ) ; { label : ; bar ( ) ; } }"
  code always "void foo () {    exit(0);    switch (n) {        case 1:            {                foo();            }            label:            bar();    }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3882 always 3882
Line 3886
  = always "void foo () {    exit(0);    switch (n) {        case a:            {                foo();            }        case b|c:            bar();    }}"
  "void foo () {    exit(0);    switch (n) {        case a:            {                foo();            }        case b|c:            bar();    }}" always "void foo () {    exit(0);    switch (n) {        case a:            {                foo();            }        case b|c:            bar();    }}"
Line 3897
  = always "void foo ( ) { exit ( 0 ) ; }"
  "void foo ( ) { exit ( 0 ) ; }" always "void foo ( ) { exit ( 0 ) ; }"
Line 3898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3898 always 3898
  expected always "void foo ( ) { exit ( 0 ) ; }"
  code always "void foo () {    exit(0);    switch (n) {        case a:            {                foo();            }        case b|c:            bar();    }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3898 always 3898
Line 3902
  = always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break; break;    }}"
  "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break; break;    }}" always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break; break;    }}"
Line 3912
  = always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
  "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }" always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
Line 3913
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3913 always 3913
  expected always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
  code always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break;        default:            break; break;    }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3913 always 3913
Line 3917
  = always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break;    }}"
  "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break;    }}" always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break;    }}"
Line 3927
  = always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
  "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }" always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
Line 3928
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3928 always 3928
  expected always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
  code always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break;    }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3928 always 3928
Line 3932
  = always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break; break;    }}"
  "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break; break;    }}" always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break; break;    }}"
Line 3942
  = always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
  "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }" always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
Line 3943
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3943 always 3943
  expected always "void foo ( ) { exit ( 0 ) ; { label : ; foo ( ) ; break ; } }"
  code always "void foo () {    exit(0);    switch (n) {        case 1:            label:            foo(); break; break;        default:            break; break;    }}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3943 always 3943
Line 3947
  = always "int f() { switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0) } exit(0);case 2: exit(0); { random(); } tack(); switch(y) { case 1: exit(0); case 2: exit(0); } exit(0); } exit(0); }"
  "int f() { switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0) } exit(0);case 2: exit(0); { random(); } tack(); switch(y) { case 1: exit(0); case 2: exit(0); } exit(0); } exit(0); }" always "int f() { switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0) } exit(0);case 2: exit(0); { random(); } tack(); switch(y) { case 1: exit(0); case 2: exit(0); } exit(0); } exit(0); }"
Line 3952
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3952 always 3952
  "int f ( ) { switch ( x ) { case 1 : ; exit ( 0 ) ; case 2 : ; exit ( 0 ) ; } exit ( 0 ) ; }" always "int f ( ) { switch ( x ) { case 1 : ; exit ( 0 ) ; case 2 : ; exit ( 0 ) ; } exit ( 0 ) ; }"
  code always "int f() { switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0) } exit(0);case 2: exit(0); { random(); } tack(); switch(y) { case 1: exit(0); case 2: exit(0); } exit(0); } exit(0); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3952 always 3952
Line 3956
  = always "int f() {switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0); } exit(0);case 2: switch(y) { case 1: exit(0); bar2(); foo(); case 2: exit(0); }exit(0); } exit(0); }"
  "int f() {switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0); } exit(0);case 2: switch(y) { case 1: exit(0); bar2(); foo(); case 2: exit(0); }exit(0); } exit(0); }" always "int f() {switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0); } exit(0);case 2: switch(y) { case 1: exit(0); bar2(); foo(); case 2: exit(0); }exit(0); } exit(0); }"
Line 3960
  = always "int f ( ) { switch ( x ) { case 1 : ; exit ( 0 ) ; case 2 : ; switch ( y ) { case 1 : ; exit ( 0 ) ; case 2 : ; exit ( 0 ) ; } exit ( 0 ) ; } exit ( 0 ) ; }"
  "int f ( ) { switch ( x ) { case 1 : ; exit ( 0 ) ; case 2 : ; switch ( y ) { case 1 : ; exit ( 0 ) ; case 2 : ; exit ( 0 ) ; } exit ( 0 ) ; } exit ( 0 ) ; }" always "int f ( ) { switch ( x ) { case 1 : ; exit ( 0 ) ; case 2 : ; switch ( y ) { case 1 : ; exit ( 0 ) ; case 2 : ; exit ( 0 ) ; } exit ( 0 ) ; } exit ( 0 ) ; }"
Line 3964
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3964 always 3964
  expected always "int f ( ) { switch ( x ) { case 1 : ; exit ( 0 ) ; case 2 : ; switch ( y ) { case 1 : ; exit ( 0 ) ; case 2 : ; exit ( 0 ) ; } exit ( 0 ) ; } exit ( 0 ) ; }"
  code always "int f() {switch (x) { case 1: exit(0); bar(); tack; { ticak(); exit(0); } exit(0);case 2: switch(y) { case 1: exit(0); bar2(); foo(); case 2: exit(0); }exit(0); } exit(0); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3964 always 3964
Line 3968
  = always "void foo () {    switch (i) { case 0: switch (j) { case 0: exit(0); }        case 1: switch (j) { case -1: exit(0); }        case 2: switch (j) { case -2: exit(0); }        case 3: if (blah6) {exit(0);} break; } }"
  "void foo () {    switch (i) { case 0: switch (j) { case 0: exit(0); }        case 1: switch (j) { case -1: exit(0); }        case 2: switch (j) { case -2: exit(0); }        case 3: if (blah6) {exit(0);} break; } }" always "void foo () {    switch (i) { case 0: switch (j) { case 0: exit(0); }        case 1: switch (j) { case -1: exit(0); }        case 2: switch (j) { case -2: exit(0); }        case 3: if (blah6) {exit(0);} break; } }"
Line 3973
  = always "void foo ( ) { switch ( i ) { case 0 : ; switch ( j ) { case 0 : ; exit ( 0 ) ; } case 1 : ; switch ( j ) { case -1 : ; exit ( 0 ) ; } case 2 : ; switch ( j ) { case -2 : ; exit ( 0 ) ; } case 3 : ; if ( blah6 ) { exit ( 0 ) ; } break ; } }"
  "void foo ( ) { switch ( i ) { case 0 : ; switch ( j ) { case 0 : ; exit ( 0 ) ; } case 1 : ; switch ( j ) { case -1 : ; exit ( 0 ) ; } case 2 : ; switch ( j ) { case -2 : ; exit ( 0 ) ; } case 3 : ; if ( blah6 ) { exit ( 0 ) ; } break ; } }" always "void foo ( ) { switch ( i ) { case 0 : ; switch ( j ) { case 0 : ; exit ( 0 ) ; } case 1 : ; switch ( j ) { case -1 : ; exit ( 0 ) ; } case 2 : ; switch ( j ) { case -2 : ; exit ( 0 ) ; } case 3 : ; if ( blah6 ) { exit ( 0 ) ; } break ; } }"
Line 3978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3978 always 3978
  expected always "void foo ( ) { switch ( i ) { case 0 : ; switch ( j ) { case 0 : ; exit ( 0 ) ; } case 1 : ; switch ( j ) { case -1 : ; exit ( 0 ) ; } case 2 : ; switch ( j ) { case -2 : ; exit ( 0 ) ; } case 3 : ; if ( blah6 ) { exit ( 0 ) ; } break ; } }"
  code always "void foo () {    switch (i) { case 0: switch (j) { case 0: exit(0); }        case 1: switch (j) { case -1: exit(0); }        case 2: switch (j) { case -2: exit(0); }        case 3: if (blah6) {exit(0);} break; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3978 always 3978
Line 3982
  = always "void foo () {    exit(0);    switch (i) { case 0: switch (j) { case 0: foo(); }        case 1: switch (j) { case -1: bar(); label:; ok(); }        case 3: if (blah6) { boo(); break; } } }"
  "void foo () {    exit(0);    switch (i) { case 0: switch (j) { case 0: foo(); }        case 1: switch (j) { case -1: bar(); label:; ok(); }        case 3: if (blah6) { boo(); break; } } }" always "void foo () {    exit(0);    switch (i) { case 0: switch (j) { case 0: foo(); }        case 1: switch (j) { case -1: bar(); label:; ok(); }        case 3: if (blah6) { boo(); break; } } }"
Line 3987
  = always "void foo ( ) { exit ( 0 ) ; { { label : ; ok ( ) ; } case 3 : ; if ( blah6 ) { boo ( ) ; break ; } } }"
  "void foo ( ) { exit ( 0 ) ; { { label : ; ok ( ) ; } case 3 : ; if ( blah6 ) { boo ( ) ; break ; } } }" always "void foo ( ) { exit ( 0 ) ; { { label : ; ok ( ) ; } case 3 : ; if ( blah6 ) { boo ( ) ; break ; } } }"
Line 3988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3988 always 3988
  expected always "void foo ( ) { exit ( 0 ) ; { { label : ; ok ( ) ; } case 3 : ; if ( blah6 ) { boo ( ) ; break ; } } }"
  code always "void foo () {    exit(0);    switch (i) { case 0: switch (j) { case 0: foo(); }        case 1: switch (j) { case -1: bar(); label:; ok(); }        case 3: if (blah6) { boo(); break; } } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  3988 always 3988
Line 3992
  = always "void foo() {     switch ( t ) {     case 0:          if ( t ) switch ( b ) {}          break;     case 1:          exit(0);          return 0;     }     return 0;}"
  "void foo() {     switch ( t ) {     case 0:          if ( t ) switch ( b ) {}          break;     case 1:          exit(0);          return 0;     }     return 0;}" always "void foo() {     switch ( t ) {     case 0:          if ( t ) switch ( b ) {}          break;     case 1:          exit(0);          return 0;     }     return 0;}"
Line 4003
  = always "void foo ( ) { switch ( t ) { case 0 : ; if ( t ) { switch ( b ) { } } break ; case 1 : ; exit ( 0 ) ; } return 0 ; }"
  "void foo ( ) { switch ( t ) { case 0 : ; if ( t ) { switch ( b ) { } } break ; case 1 : ; exit ( 0 ) ; } return 0 ; }" always "void foo ( ) { switch ( t ) { case 0 : ; if ( t ) { switch ( b ) { } } break ; case 1 : ; exit ( 0 ) ; } return 0 ; }"
Line 4013
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4013 always 4013
  expected always "void foo ( ) { switch ( t ) { case 0 : ; if ( t ) { switch ( b ) { } } break ; case 1 : ; exit ( 0 ) ; } return 0 ; }"
  code always "void foo() {     switch ( t ) {     case 0:          if ( t ) switch ( b ) {}          break;     case 1:          exit(0);          return 0;     }     return 0;}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4013 always 4013
Line 4017
  127 always 127
  = always "void foo()\n{\n    A *a = 0;\n    if (!a) {\n        nondeadcode;\n        return;\n        dead;\n    }\n    stilldead;\n    a->_a;\n}\n"
  "void foo()\n{\n    A *a = 0;\n    if (!a) {\n        nondeadcode;\n        return;\n        dead;\n    }\n    stilldead;\n    a->_a;\n}\n" always "void foo()\n{\n    A *a = 0;\n    if (!a) {\n        nondeadcode;\n        return;\n        dead;\n    }\n    stilldead;\n    a->_a;\n}\n"
Line 4028
  60 always 60
  = always "void foo ( ) { A * a ; a = 0 ; { nondeadcode ; return ; } }"
  "void foo ( ) { A * a ; a = 0 ; { nondeadcode ; return ; } }" always "void foo ( ) { A * a ; a = 0 ; { nondeadcode ; return ; } }"
Line 4035
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4035 always 4035
  expected always "void foo ( ) { A * a ; a = 0 ; { nondeadcode ; return ; } }"
  code always "void foo()\n{\n    A *a = 0;\n    if (!a) {\n        nondeadcode;\n        return;\n        dead;\n    }\n    stilldead;\n    a->_a;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4035 always 4035
Line 4039
  98 always 98
  = always "class Fred\n{\npublic:\n    bool foo() const { return f; }\n    bool exit();\n\nprivate:\n   bool f;\n};\n"
  "class Fred\n{\npublic:\n    bool foo() const { return f; }\n    bool exit();\n\nprivate:\n   bool f;\n};\n" always "class Fred\n{\npublic:\n    bool foo() const { return f; }\n    bool exit();\n\nprivate:\n   bool f;\n};\n"
Line 4048
  93 always 93
  = always "class Fred { public: bool foo ( ) const { return f ; } bool exit ( ) ; private: bool f ; } ;"
  "class Fred { public: bool foo ( ) const { return f ; } bool exit ( ) ; private: bool f ; } ;" always "class Fred { public: bool foo ( ) const { return f ; } bool exit ( ) ; private: bool f ; } ;"
Line 4057
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4057 always 4057
  expected always "class Fred { public: bool foo ( ) const { return f ; } bool exit ( ) ; private: bool f ; } ;"
  code always "class Fred\n{\npublic:\n    bool foo() const { return f; }\n    bool exit();\n\nprivate:\n   bool f;\n};\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4057 always 4057
Line 4061
  122 always 122
  = always "class abort { };\n\nclass Fred\n{\n    public:\n    bool foo() const { return f; }\n    abort exit();\n\n    private:\nbool f;\n};\n"
  "class abort { };\n\nclass Fred\n{\n    public:\n    bool foo() const { return f; }\n    abort exit();\n\n    private:\nbool f;\n};\n" always "class abort { };\n\nclass Fred\n{\n    public:\n    bool foo() const { return f; }\n    abort exit();\n\n    private:\nbool f;\n};\n"
Line 4072
  112 always 112
  = always "class abort { } ; class Fred { public: bool foo ( ) const { return f ; } abort exit ( ) ; private: bool f ; } ;"
  "class abort { } ; class Fred { public: bool foo ( ) const { return f ; } abort exit ( ) ; private: bool f ; } ;" always "class abort { } ; class Fred { public: bool foo ( ) const { return f ; } abort exit ( ) ; private: bool f ; } ;"
Line 4082
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4082 always 4082
  expected always "class abort { } ; class Fred { public: bool foo ( ) const { return f ; } abort exit ( ) ; private: bool f ; } ;"
  code always "class abort { };\n\nclass Fred\n{\n    public:\n    bool foo() const { return f; }\n    abort exit();\n\n    private:\nbool f;\n};\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4082 always 4082
Line 4085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4085 always 4085
  "void foo ( ) { exit ( 0 ) ; }" always "void foo ( ) { exit ( 0 ) ; }"
  "void foo() { do { exit(0); } while (true); }" always "void foo() { do { exit(0); } while (true); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4085 always 4085
Line 4089
  "void foo() {\n  goto label;\n  for (int i = 0; i < 0; ++i) {\n    ;\nlabel:\n    ;\n  }\n}" always "void foo() {\n  goto label;\n  for (int i = 0; i < 0; ++i) {\n    ;\nlabel:\n    ;\n  }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4089 always 4089
Line 4100
  94 always 94
  = always "; strcat(strcat(strcat(strcat(strcat(strcat(dst, \"this \"), \"\"), \"is \"), \"a \"), \"test\"), \".\");"
  "; strcat(strcat(strcat(strcat(strcat(strcat(dst, \"this \"), \"\"), \"is \"), \"a \"), \"test\"), \".\");" always "; strcat(strcat(strcat(strcat(strcat(strcat(dst, \"this \"), \"\"), \"is \"), \"a \"), \"test\"), \".\");"
Line 4101
  149 always 149
  = always "; strcat ( dst , \"this \" ) ; strcat ( dst , \"\" ) ; strcat ( dst , \"is \" ) ; strcat ( dst , \"a \" ) ; strcat ( dst , \"test\" ) ; strcat ( dst , \".\" ) ;"
  "; strcat ( dst , \"this \" ) ; strcat ( dst , \"\" ) ; strcat ( dst , \"is \" ) ; strcat ( dst , \"a \" ) ; strcat ( dst , \"test\" ) ; strcat ( dst , \".\" ) ;" always "; strcat ( dst , \"this \" ) ; strcat ( dst , \"\" ) ; strcat ( dst , \"is \" ) ; strcat ( dst , \"a \" ) ; strcat ( dst , \"test\" ) ; strcat ( dst , \".\" ) ;"
Line 4109
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4109 always 4109
  expect always "; strcat ( dst , \"this \" ) ; strcat ( dst , \"\" ) ; strcat ( dst , \"is \" ) ; strcat ( dst , \"a \" ) ; strcat ( dst , \"test\" ) ; strcat ( dst , \".\" ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4109 always 4109
  code always "; strcat(strcat(strcat(strcat(strcat(strcat(dst, \"this \"), \"\"), \"is \"), \"a \"), \"test\"), \".\");"
Line 4112
  36 always 36
  = always "; strcat(strcat(dst, foo[0]), \" \");"
  "; strcat(strcat(dst, foo[0]), \" \");" always "; strcat(strcat(dst, foo[0]), \" \");"
Line 4113
  54 always 54
  = always "; strcat ( dst , foo [ 0 ] ) ; strcat ( dst , \" \" ) ;"
  "; strcat ( dst , foo [ 0 ] ) ; strcat ( dst , \" \" ) ;" always "; strcat ( dst , foo [ 0 ] ) ; strcat ( dst , \" \" ) ;"
Line 4117
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4117 always 4117
  expect always "; strcat ( dst , foo [ 0 ] ) ; strcat ( dst , \" \" ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4117 always 4117
  code always "; strcat(strcat(dst, foo[0]), \" \");"
Line 4121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4121 always 4121
  "a = std :: atol ( x ) ;" always "a = std :: atol ( x ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4121 always 4121
  "a = std::atol(x);" always "a = std::atol(x);"
Line 4122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4122 always 4122
  "a = atol ( \"text\" ) ;" always "a = atol ( \"text\" ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4122 always 4122
  "a = atol(\"text\");" always "a = atol(\"text\");"
Line 4123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4123 always 4123
  "a = 0 ;" always "a = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4123 always 4123
  "a = std::atol(\"0\");" always "a = std::atol(\"0\");"
Line 4124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4124 always 4124
  "a = 10 ;" always "a = 10 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4124 always 4124
  "a = atol(\"0xa\");" always "a = atol(\"0xa\");"
Line 4129
  85 always 85
  = always "class c {\npublic:\n    operator std::string() const;\n    operator string() const;\n};\n"
  "class c {\npublic:\n    operator std::string() const;\n    operator string() const;\n};\n" always "class c {\npublic:\n    operator std::string() const;\n    operator string() const;\n};\n"
Line 4134
  81 always 81
  = always "class c { public: operatorstd::string ( ) const ; operatorstring ( ) const ; } ;"
  "class c { public: operatorstd::string ( ) const ; operatorstring ( ) const ; } ;" always "class c { public: operatorstd::string ( ) const ; operatorstring ( ) const ; } ;"
Line 4139
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4139 always 4139
  expected always "class c { public: operatorstd::string ( ) const ; operatorstring ( ) const ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4139 always 4139
  code always "class c {\npublic:\n    operator std::string() const;\n    operator string() const;\n};\n"
Line 4144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4144 always 4144
  "template < class T > class SharedPtr { SharedPtr & operator= ( const SharedPtr < Y > & r ) ; } ; class TClass { public: TClass & operator= ( const TClass & rhs ) ; } ; TClass :: TClass ( const TClass & other ) { operator= ( other ) ; }" always "template < class T > class SharedPtr { SharedPtr & operator= ( const SharedPtr < Y > & r ) ; } ; class TClass { public: TClass & operator= ( const TClass & rhs ) ; } ; TClass :: TClass ( const TClass & other ) { operator= ( other ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4144 always 4144
  "template<class T>\n    class SharedPtr {\n    SharedPtr& operator=(SharedPtr<Y> const & r);\n};\nclass TClass {\npublic:\n    TClass& operator=(const TClass& rhs);\n};\nTClass::TClass(const TClass &other) {\n    operator=(other);\n}" always "template<class T>\n    class SharedPtr {\n    SharedPtr& operator=(SharedPtr<Y> const & r);\n};\nclass TClass {\npublic:\n    TClass& operator=(const TClass& rhs);\n};\nTClass::TClass(const TClass &other) {\n    operator=(other);\n}"
Line 4165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4165 always 4165
  "\n\n##file 0\n1: int a@1 ; a@1 [ 13 ] ;\n" always "\n\n##file 0\n1: int a@1 ; a@1 [ 13 ] ;\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4165 always 4165
  "int a; 13[a];" always "int a; 13[a];"
Line 4171
  47 always 47
  = always "void f()\n{\nint x = 0;\nif( !x || 0 )\n{ g();\n}\n}"
Line 4172
  "void f()\n{\nint x = 0;\nif( !x || 0 )\n{ g();\n}\n}" always "void f()\n{\nint x = 0;\nif( !x || 0 )\n{ g();\n}\n}"
Line 4180
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4180 always 4180
  "void f ( ) { g ( ) ; }" always "void f ( ) { g ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4180 always 4180
  code always "void f()\n{\nint x = 0;\nif( !x || 0 )\n{ g();\n}\n}"
Line 4184
  42 always 42
  = always "void f()\n{\nint x = 1;\nif( !x )\n{ g();\n}\n}"
Line 4185
  "void f()\n{\nint x = 1;\nif( !x )\n{ g();\n}\n}" always "void f()\n{\nint x = 1;\nif( !x )\n{ g();\n}\n}"
Line 4193
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4193 always 4193
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4193 always 4193
  code always "void f()\n{\nint x = 1;\nif( !x )\n{ g();\n}\n}"
Line 4197
  46 always 46
  = always "void f()\n{\nbool x = true;\nif( !x )\n{ g();\n}\n}"
Line 4198
  "void f()\n{\nbool x = true;\nif( !x )\n{ g();\n}\n}" always "void f()\n{\nbool x = true;\nif( !x )\n{ g();\n}\n}"
Line 4206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4206 always 4206
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4206 always 4206
  code always "void f()\n{\nbool x = true;\nif( !x )\n{ g();\n}\n}"
Line 4210
  47 always 47
  = always "void f()\n{\nbool x = false;\nif( !x )\n{ g();\n}\n}"
Line 4211
  "void f()\n{\nbool x = false;\nif( !x )\n{ g();\n}\n}" always "void f()\n{\nbool x = false;\nif( !x )\n{ g();\n}\n}"
Line 4219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4219 always 4219
  "void f ( ) { g ( ) ; }" always "void f ( ) { g ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4219 always 4219
  code always "void f()\n{\nbool x = false;\nif( !x )\n{ g();\n}\n}"
Line 4223
  29 always 29
  = always "void f()\n{\n    if (5==5);\n}\n"
  "void f()\n{\n    if (5==5);\n}\n" always "void f()\n{\n    if (5==5);\n}\n"
Line 4228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4228 always 4228
  "void f ( ) { ; }" always "void f ( ) { ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4228 always 4228
  code always "void f()\n{\n    if (5==5);\n}\n"
Line 4232
  28 always 28
  = always "void f()\n{\n    if (4<5);\n}\n"
  "void f()\n{\n    if (4<5);\n}\n" always "void f()\n{\n    if (4<5);\n}\n"
Line 4237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4237 always 4237
  "void f ( ) { ; }" always "void f ( ) { ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4237 always 4237
  code always "void f()\n{\n    if (4<5);\n}\n"
Line 4241
  28 always 28
  = always "void f()\n{\n    if (5<5);\n}\n"
  "void f()\n{\n    if (5<5);\n}\n" always "void f()\n{\n    if (5<5);\n}\n"
Line 4246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4246 always 4246
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4246 always 4246
  code always "void f()\n{\n    if (5<5);\n}\n"
Line 4250
  41 always 41
  = always "void f()\n{\n    if (13>12?true:false);\n}\n"
  "void f()\n{\n    if (13>12?true:false);\n}\n" always "void f()\n{\n    if (13>12?true:false);\n}\n"
Line 4255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4255 always 4255
  "void f ( ) { ; }" always "void f ( ) { ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4255 always 4255
  code always "void f()\n{\n    if (13>12?true:false);\n}\n"
Line 4260
  57 always 57
  = always "void f() {\nif (-1e-2 == -0.01) \n    g();\nelse\n    h();\n}"
Line 4261
  "void f() {\nif (-1e-2 == -0.01) \n    g();\nelse\n    h();\n}" always "void f() {\nif (-1e-2 == -0.01) \n    g();\nelse\n    h();\n}"
Line 4267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4267 always 4267
  "void f ( ) { if ( -1e-2 == -0.01 ) { g ( ) ; } else { h ( ) ; } }" always "void f ( ) { if ( -1e-2 == -0.01 ) { g ( ) ; } else { h ( ) ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4267 always 4267
  code always "void f() {\nif (-1e-2 == -0.01) \n    g();\nelse\n    h();\n}"
Line 4274
  39 always 39
  = always "void f(int a)\n{\nif (a && false) g();\n}"
Line 4275
  "void f(int a)\n{\nif (a && false) g();\n}" always "void f(int a)\n{\nif (a && false) g();\n}"
Line 4279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4279 always 4279
  "void f ( int a ) { }" always "void f ( int a ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4279 always 4279
  code always "void f(int a)\n{\nif (a && false) g();\n}"
Line 4283
  39 always 39
  = always "void f(int a)\n{\nif (false && a) g();\n}"
Line 4284
  "void f(int a)\n{\nif (false && a) g();\n}" always "void f(int a)\n{\nif (false && a) g();\n}"
Line 4288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4288 always 4288
  "void f ( int a ) { }" always "void f ( int a ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4288 always 4288
  code always "void f(int a)\n{\nif (false && a) g();\n}"
Line 4292
  38 always 38
  = always "void f(int a)\n{\nif (true || a) g();\n}"
Line 4293
  "void f(int a)\n{\nif (true || a) g();\n}" always "void f(int a)\n{\nif (true || a) g();\n}"
Line 4297
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4297 always 4297
  "void f ( int a ) { g ( ) ; }" always "void f ( int a ) { g ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4297 always 4297
  code always "void f(int a)\n{\nif (true || a) g();\n}"
Line 4301
  38 always 38
  = always "void f(int a)\n{\nif (a || true) g();\n}"
Line 4302
  "void f(int a)\n{\nif (a || true) g();\n}" always "void f(int a)\n{\nif (a || true) g();\n}"
Line 4306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4306 always 4306
  "void f ( int a ) { g ( ) ; }" always "void f ( int a ) { g ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4306 always 4306
  code always "void f(int a)\n{\nif (a || true) g();\n}"
Line 4310
  43 always 43
  = always "void f(int a)\n{\nif (a || true || b) g();\n}"
Line 4311
  "void f(int a)\n{\nif (a || true || b) g();\n}" always "void f(int a)\n{\nif (a || true || b) g();\n}"
Line 4315
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4315 always 4315
  "void f ( int a ) { g ( ) ; }" always "void f ( int a ) { g ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4315 always 4315
  code always "void f(int a)\n{\nif (a || true || b) g();\n}"
Line 4319
  44 always 44
  = always "void f(int a)\n{\nif (a && false && b) g();\n}"
Line 4320
  "void f(int a)\n{\nif (a && false && b) g();\n}" always "void f(int a)\n{\nif (a && false && b) g();\n}"
Line 4324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4324 always 4324
  "void f ( int a ) { }" always "void f ( int a ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4324 always 4324
  code always "void f(int a)\n{\nif (a && false && b) g();\n}"
Line 4328
  56 always 56
  = always "void f(int a)\n{\nif (a || (b && false && c) || d) g();\n}"
Line 4329
  "void f(int a)\n{\nif (a || (b && false && c) || d) g();\n}" always "void f(int a)\n{\nif (a || (b && false && c) || d) g();\n}"
Line 4333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4333 always 4333
  "void f ( int a ) { if ( a || d ) { g ( ) ; } }" always "void f ( int a ) { if ( a || d ) { g ( ) ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4333 always 4333
  code always "void f(int a)\n{\nif (a || (b && false && c) || d) g();\n}"
Line 4337
  57 always 57
  = always "void f(int a)\n{\nif ((a && b) || true || (c && d)) g();\n}"
Line 4338
  "void f(int a)\n{\nif ((a && b) || true || (c && d)) g();\n}" always "void f(int a)\n{\nif ((a && b) || true || (c && d)) g();\n}"
Line 4342
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4342 always 4342
  "void f ( int a ) { g ( ) ; }" always "void f ( int a ) { g ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4342 always 4342
  code always "void f(int a)\n{\nif ((a && b) || true || (c && d)) g();\n}"
Line 4347
  31 always 31
  = always "void f() {\nif (12 && 7) g();\n}"
Line 4348
  "void f() {\nif (12 && 7) g();\n}" always "void f() {\nif (12 && 7) g();\n}"
Line 4351
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4351 always 4351
  "void f ( ) { g ( ) ; }" always "void f ( ) { g ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4351 always 4351
  code always "void f() {\nif (12 && 7) g();\n}"
Line 4358
  61 always 61
  = always "void f(char *p1)\n{\n    char *p = p1;\n    p1 = 0;    x(p);\n}\n"
  "void f(char *p1)\n{\n    char *p = p1;\n    p1 = 0;    x(p);\n}\n" always "void f(char *p1)\n{\n    char *p = p1;\n    p1 = 0;    x(p);\n}\n"
Line 4365
  64 always 64
  = always "void f ( char * p1 ) { char * p ; p = p1 ; p1 = 0 ; x ( p ) ; }"
  "void f ( char * p1 ) { char * p ; p = p1 ; p1 = 0 ; x ( p ) ; }" always "void f ( char * p1 ) { char * p ; p = p1 ; p1 = 0 ; x ( p ) ; }"
Line 4372
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4372 always 4372
  expected always "void f ( char * p1 ) { char * p ; p = p1 ; p1 = 0 ; x ( p ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4372 always 4372
  code always "void f(char *p1)\n{\n    char *p = p1;\n    p1 = 0;    x(p);\n}\n"
Line 4376
  68 always 68
  = always "void foo(Result* ptr)\n{\n    Result* obj = ptr;\n    ++obj->total;\n}\n"
  "void foo(Result* ptr)\n{\n    Result* obj = ptr;\n    ++obj->total;\n}\n" always "void foo(Result* ptr)\n{\n    Result* obj = ptr;\n    ++obj->total;\n}\n"
Line 4382
  74 always 74
  = always "void foo ( Result * ptr ) { Result * obj ; obj = ptr ; ++ obj . total ; }"
  "void foo ( Result * ptr ) { Result * obj ; obj = ptr ; ++ obj . total ; }" always "void foo ( Result * ptr ) { Result * obj ; obj = ptr ; ++ obj . total ; }"
Line 4388
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4388 always 4388
  expected always "void foo ( Result * ptr ) { Result * obj ; obj = ptr ; ++ obj . total ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4388 always 4388
  code always "void foo(Result* ptr)\n{\n    Result* obj = ptr;\n    ++obj->total;\n}\n"
Line 4393
  57 always 57
  = always "void f()\n{\n    int i;\n    int *p = &i;\n    return *p;\n}\n"
  "void f()\n{\n    int i;\n    int *p = &i;\n    return *p;\n}\n" always "void f()\n{\n    int i;\n    int *p = &i;\n    return *p;\n}\n"
Line 4399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4399 always 4399
  "void f ( ) { int i ; return i ; }" always "void f ( ) { int i ; return i ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4399 always 4399
  code always "void f()\n{\n    int i;\n    int *p = &i;\n    return *p;\n}\n"
Line 4403
  81 always 81
  = always "void f()\n{\n    int i, j, *p;\n    if (ab) p = &i;\n    else p = &j;\n    *p = 0;\n}\n"
  "void f()\n{\n    int i, j, *p;\n    if (ab) p = &i;\n    else p = &j;\n    *p = 0;\n}\n" always "void f()\n{\n    int i, j, *p;\n    if (ab) p = &i;\n    else p = &j;\n    *p = 0;\n}\n"
Line 4410
  94 always 94
  = always "void f ( ) { int i ; int j ; int * p ; if ( ab ) { p = & i ; } else { p = & j ; } * p = 0 ; }"
  "void f ( ) { int i ; int j ; int * p ; if ( ab ) { p = & i ; } else { p = & j ; } * p = 0 ; }" always "void f ( ) { int i ; int j ; int * p ; if ( ab ) { p = & i ; } else { p = & j ; } * p = 0 ; }"
Line 4417
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4417 always 4417
  expected always "void f ( ) { int i ; int j ; int * p ; if ( ab ) { p = & i ; } else { p = & j ; } * p = 0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4417 always 4417
  code always "void f()\n{\n    int i, j, *p;\n    if (ab) p = &i;\n    else p = &j;\n    *p = 0;\n}\n"
Line 4421
  67 always 67
  = always "int f()\n{\n    int i;\n    int *p = &i;\n    *p = 5;\n    return i;\n}\n"
  "int f()\n{\n    int i;\n    int *p = &i;\n    *p = 5;\n    return i;\n}\n" always "int f()\n{\n    int i;\n    int *p = &i;\n    *p = 5;\n    return i;\n}\n"
Line 4428
  25 always 25
  = always "int f ( ) { return 5 ; }"
  "int f ( ) { return 5 ; }" always "int f ( ) { return 5 ; }"
Line 4432
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4432 always 4432
  expected always "int f ( ) { return 5 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4432 always 4432
  code always "int f()\n{\n    int i;\n    int *p = &i;\n    *p = 5;\n    return i;\n}\n"
Line 4436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4436 always 4436
  "void foo ( ) { x = 1 ; }" always "void foo ( ) { x = 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4436 always 4436
  "void foo() { do { x = 1 ; } while (0);}" always "void foo() { do { x = 1 ; } while (0);}"
Line 4437
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4437 always 4437
  "void foo ( ) { return 0 ; }" always "void foo ( ) { return 0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4437 always 4437
  "void foo() { do { return 0; } while (0);}" always "void foo() { do { return 0; } while (0);}"
Line 4438
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4438 always 4438
  "void foo ( ) { goto label ; }" always "void foo ( ) { goto label ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4438 always 4438
  "void foo() { do { goto label; } while (0); }" always "void foo() { do { goto label; } while (0); }"
Line 4439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4439 always 4439
  "void foo ( ) { continue ; }" always "void foo ( ) { continue ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4439 always 4439
  "void foo() { do { continue ; } while (0); }" always "void foo() { do { continue ; } while (0); }"
Line 4440
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4440 always 4440
  "void foo ( ) { break ; }" always "void foo ( ) { break ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4440 always 4440
  "void foo() { do { break; } while (0); }" always "void foo() { do { break; } while (0); }"
Line 4441
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4441 always 4441
  "void foo ( ) { }" always "void foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4441 always 4441
  "void foo() { while (false) { a; } }" always "void foo() { while (false) { a; } }"
Line 4442
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4442 always 4442
  "void foo ( ) { }" always "void foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4442 always 4442
  "void foo() { while (false) { switch (n) { case 0: return; default: break; } n*=1; } }" always "void foo() { while (false) { switch (n) { case 0: return; default: break; } n*=1; } }"
Line 4447
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4447 always 4447
  "void f ( ) { int i ; for ( i = 0 ; i < 0 ; i ++ ) { } }" always "void f ( ) { int i ; for ( i = 0 ; i < 0 ; i ++ ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4447 always 4447
  "void f() { int i; for (i = 0; i < 0; i++) { a; } }" always "void f() { int i; for (i = 0; i < 0; i++) { a; } }"
Line 4449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4449 always 4449
  "void f ( ) { int i ; for ( i = 0 ; i < 0 ; i ++ ) { } }" always "void f ( ) { int i ; for ( i = 0 ; i < 0 ; i ++ ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4449 always 4449
  "void f() { int i; for (i = 0; i < 0; i++) { foo(); break; } }" always "void f() { int i; for (i = 0; i < 0; i++) { foo(); break; } }"
Line 4450
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4450 always 4450
  "void f ( ) { int i ; for ( i = 0 ; i < 0 ; i ++ ) { } }" always "void f ( ) { int i ; for ( i = 0 ; i < 0 ; i ++ ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4450 always 4450
  "void f() { int i; for (i = 0; i < 0; i++) { foo(); continue; } }" always "void f() { int i; for (i = 0; i < 0; i++) { foo(); continue; } }"
Line 4451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4451 always 4451
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4451 always 4451
  "void f() { for (int i = 0; i < 0; i++) { a; } }" always "void f() { for (int i = 0; i < 0; i++) { a; } }"
Line 4452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4452 always 4452
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4452 always 4452
  "void f() { for (unsigned int i = 0; i < 0; i++) { a; } }" always "void f() { for (unsigned int i = 0; i < 0; i++) { a; } }"
Line 4453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4453 always 4453
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4453 always 4453
  "void f() { for (long long i = 0; i < 0; i++) { a; } }" always "void f() { for (long long i = 0; i < 0; i++) { a; } }"
Line 4454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4454 always 4454
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4454 always 4454
  "void f() { for (signed long long i = 0; i < 0; i++) { a; } }" always "void f() { for (signed long long i = 0; i < 0; i++) { a; } }"
Line 4455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4455 always 4455
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4455 always 4455
  "void f() { int n = 0; for (signed long long i = 0; i < n; i++) { a; } }" always "void f() { int n = 0; for (signed long long i = 0; i < n; i++) { a; } }"
Line 4457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4457 always 4457
  "void f ( ) { int i ; for ( i = 0 ; i < 0 ; ++ i ) { } return i ; }" always "void f ( ) { int i ; for ( i = 0 ; i < 0 ; ++ i ) { } return i ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4457 always 4457
  "void f() { int i; for (i=0;i<0;++i){ dostuff(); } return i; }" always "void f() { int i; for (i=0;i<0;++i){ dostuff(); } return i; }"
Line 4461
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4461 always 4461
  "; strcpy ( a , b ) ;" always "; strcpy ( a , b ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4461 always 4461
  "; std::strcpy(a,b);" always "; std::strcpy(a,b);"
Line 4462
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4462 always 4462
  "; strcat ( a , b ) ;" always "; strcat ( a , b ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4462 always 4462
  "; std::strcat(a,b);" always "; std::strcat(a,b);"
Line 4463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4463 always 4463
  "; strncpy ( a , b , 10 ) ;" always "; strncpy ( a , b , 10 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4463 always 4463
  "; std::strncpy(a,b,10);" always "; std::strncpy(a,b,10);"
Line 4464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4464 always 4464
  "; strncat ( a , b , 10 ) ;" always "; strncat ( a , b , 10 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4464 always 4464
  "; std::strncat(a,b,10);" always "; std::strncat(a,b,10);"
Line 4465
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4465 always 4465
  "; free ( p ) ;" always "; free ( p ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4465 always 4465
  "; std::free(p);" always "; std::free(p);"
Line 4466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4466 always 4466
  "; malloc ( 10 ) ;" always "; malloc ( 10 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4466 always 4466
  "; std::malloc(10);" always "; std::malloc(10);"
Line 4472
  26 always 26
  = always "void foo() { int *p(0); }"
  "void foo() { int *p(0); }" always "void foo() { int *p(0); }"
Line 4473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4473 always 4473
  "void foo ( ) { }" always "void foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4473 always 4473
  code always "void foo() { int *p(0); }"
Line 4477
  25 always 25
  = always "void foo() { int p(0); }"
  "void foo() { int p(0); }" always "void foo() { int p(0); }"
Line 4478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4478 always 4478
  "void foo ( ) { }" always "void foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4478 always 4478
  code always "void foo() { int p(0); }"
Line 4482
  24 always 24
  = always "void a() { foo *p(0); }"
  "void a() { foo *p(0); }" always "void a() { foo *p(0); }"
Line 4483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4483 always 4483
  "void a ( ) { }" always "void a ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4483 always 4483
  code always "void a() { foo *p(0); }"
Line 4488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4488 always 4488
  "void f ( ) { int a ; a ++ ; }" always "void f ( ) { int a ; a ++ ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4488 always 4488
  "void f() { int a; int &b(a); b++; }" always "void f() { int a; int &b(a); b++; }"
Line 4490
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4490 always 4490
  "void f ( ) { int a ; a ++ ; }" always "void f ( ) { int a ; a ++ ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4490 always 4490
  "void f() { int a; int &b = a; b++; }" always "void f() { int a; int &b = a; b++; }"
Line 4493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4493 always 4493
  "void test ( ) { c . f ( 7 ) ; }" always "void test ( ) { c . f ( 7 ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4493 always 4493
  "void test() { c.f(7); T3 &t3 = c; }" always "void test() { c.f(7); T3 &t3 = c; }"
Line 4498
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4498 always 4498
  "; free ( p ) ; p = 0 ;" always "; free ( p ) ; p = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4498 always 4498
  "; p = realloc(p, 0);" always "; p = realloc(p, 0);"
Line 4499
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4499 always 4499
  "; p = malloc ( 100 ) ;" always "; p = malloc ( 100 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4499 always 4499
  "; p = realloc(0, 100);" always "; p = realloc(0, 100);"
Line 4500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4500 always 4500
  "; p = malloc ( 0 ) ;" always "; p = malloc ( 0 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4500 always 4500
  "; p = realloc(0, 0);" always "; p = realloc(0, 0);"
Line 4501
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4501 always 4501
  "; free ( q ) ; p = 0 ;" always "; free ( q ) ; p = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4501 always 4501
  "; p = realloc(q, 0);" always "; p = realloc(q, 0);"
Line 4502
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4502 always 4502
  "; free ( * q ) ; p = 0 ;" always "; free ( * q ) ; p = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4502 always 4502
  "; p = realloc(*q, 0);" always "; p = realloc(*q, 0);"
Line 4503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4503 always 4503
  "; free ( f ( z ) ) ; p = 0 ;" always "; free ( f ( z ) ) ; p = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4503 always 4503
  "; p = realloc(f(z), 0);" always "; p = realloc(f(z), 0);"
Line 4504
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4504 always 4504
  "; p = malloc ( n * m ) ;" always "; p = malloc ( n * m ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4504 always 4504
  "; p = realloc(0, n*m);" always "; p = realloc(0, n*m);"
Line 4505
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4505 always 4505
  "; p = malloc ( f ( 1 ) ) ;" always "; p = malloc ( f ( 1 ) ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4505 always 4505
  "; p = realloc(0, f(1));" always "; p = realloc(0, f(1));"
Line 4509
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4509 always 4509
  "{ while ( f ( ) ) { } }" always "{ while ( f ( ) ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4509 always 4509
  "{ while (f() && errno == EINTR) { } }" always "{ while (f() && errno == EINTR) { } }"
Line 4511
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4511 always 4511
  "{ while ( f ( ) ) { } }" always "{ while ( f ( ) ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4511 always 4511
  "{ while (f() && (errno == EINTR)) { } }" always "{ while (f() && (errno == EINTR)) { } }"
Line 4516
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4516 always 4516
  "{ int cppcheck:r1 = fclose ( f ) ; while ( cppcheck:r1 ) { foo ( ) ; cppcheck:r1 = fclose ( f ) ; } }" always "{ int cppcheck:r1 = fclose ( f ) ; while ( cppcheck:r1 ) { foo ( ) ; cppcheck:r1 = fclose ( f ) ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4516 always 4516
  "{while(fclose(f))foo();}" always "{while(fclose(f))foo();}"
Line 4526
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4526 always 4526
  "{ int cppcheck:r1 = fclose ( f ) ; while ( cppcheck:r1 ) { ; cppcheck:r1 = fclose ( f ) ; } }" always "{ int cppcheck:r1 = fclose ( f ) ; while ( cppcheck:r1 ) { ; cppcheck:r1 = fclose ( f ) ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4526 always 4526
  "{while(fclose(f));}" always "{while(fclose(f));}"
Line 4535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4535 always 4535
  "{ int cppcheck:r1 = fclose ( f ) ; while ( cppcheck:r1 ) { ; cppcheck:r1 = fclose ( f ) ; } int cppcheck:r2 = fclose ( g ) ; while ( cppcheck:r2 ) { ; cppcheck:r2 = fclose ( g ) ; } }" always "{ int cppcheck:r1 = fclose ( f ) ; while ( cppcheck:r1 ) { ; cppcheck:r1 = fclose ( f ) ; } int cppcheck:r2 = fclose ( g ) ; while ( cppcheck:r2 ) { ; cppcheck:r2 = fclose ( g ) ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4535 always 4535
  "{while(fclose(f)); while(fclose(g));}" always "{while(fclose(f)); while(fclose(g));}"
Line 4552
  20 always 20
  = always "struct ABC { } abc;"
  "struct ABC { } abc;" always "struct ABC { } abc;"
Line 4553
  34 always 34
  = always "struct ABC { } ; struct ABC abc ;"
  "struct ABC { } ; struct ABC abc ;" always "struct ABC { } ; struct ABC abc ;"
Line 4554
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4554 always 4554
  expected always "struct ABC { } ; struct ABC abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4554 always 4554
  code always "struct ABC { } abc;"
  false always 0
Line 4558
  23 always 23
  = always "struct ABC { } * pabc;"
  "struct ABC { } * pabc;" always "struct ABC { } * pabc;"
Line 4559
  37 always 37
  = always "struct ABC { } ; struct ABC * pabc ;"
  "struct ABC { } ; struct ABC * pabc ;" always "struct ABC { } ; struct ABC * pabc ;"
Line 4560
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4560 always 4560
  expected always "struct ABC { } ; struct ABC * pabc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4560 always 4560
  code always "struct ABC { } * pabc;"
  false always 0
Line 4564
  23 always 23
  = always "struct ABC { } abc[4];"
  "struct ABC { } abc[4];" always "struct ABC { } abc[4];"
Line 4565
  40 always 40
  = always "struct ABC { } ; struct ABC abc [ 4 ] ;"
  "struct ABC { } ; struct ABC abc [ 4 ] ;" always "struct ABC { } ; struct ABC abc [ 4 ] ;"
Line 4566
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4566 always 4566
  expected always "struct ABC { } ; struct ABC abc [ 4 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4566 always 4566
  code always "struct ABC { } abc[4];"
  false always 0
Line 4570
  25 always 25
  = always "struct ABC { } abc, def;"
  "struct ABC { } abc, def;" always "struct ABC { } abc, def;"
Line 4571
  51 always 51
  = always "struct ABC { } ; struct ABC abc ; struct ABC def ;"
  "struct ABC { } ; struct ABC abc ; struct ABC def ;" always "struct ABC { } ; struct ABC abc ; struct ABC def ;"
Line 4572
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4572 always 4572
  expected always "struct ABC { } ; struct ABC abc ; struct ABC def ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4572 always 4572
  code always "struct ABC { } abc, def;"
  false always 0
Line 4576
  28 always 28
  = always "struct ABC { } abc, * pabc;"
  "struct ABC { } abc, * pabc;" always "struct ABC { } abc, * pabc;"
Line 4577
  54 always 54
  = always "struct ABC { } ; struct ABC abc ; struct ABC * pabc ;"
  "struct ABC { } ; struct ABC abc ; struct ABC * pabc ;" always "struct ABC { } ; struct ABC abc ; struct ABC * pabc ;"
Line 4578
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4578 always 4578
  expected always "struct ABC { } ; struct ABC abc ; struct ABC * pabc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4578 always 4578
  code always "struct ABC { } abc, * pabc;"
  false always 0
Line 4582
  39 always 39
  = always "struct ABC { struct DEF {} def; } abc;"
  "struct ABC { struct DEF {} def; } abc;" always "struct ABC { struct DEF {} def; } abc;"
Line 4583
  68 always 68
  = always "struct ABC { struct DEF { } ; struct DEF def ; } ; struct ABC abc ;"
  "struct ABC { struct DEF { } ; struct DEF def ; } ; struct ABC abc ;" always "struct ABC { struct DEF { } ; struct DEF def ; } ; struct ABC abc ;"
Line 4584
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4584 always 4584
  expected always "struct ABC { struct DEF { } ; struct DEF def ; } ; struct ABC abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4584 always 4584
  code always "struct ABC { struct DEF {} def; } abc;"
  false always 0
Line 4588
  16 always 16
  = always "struct { } abc;"
  "struct { } abc;" always "struct { } abc;"
Line 4589
  48 always 48
  = always "struct Anonymous0 { } ; struct Anonymous0 abc ;"
  "struct Anonymous0 { } ; struct Anonymous0 abc ;" always "struct Anonymous0 { } ; struct Anonymous0 abc ;"
Line 4590
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4590 always 4590
  expected always "struct Anonymous0 { } ; struct Anonymous0 abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4590 always 4590
  code always "struct { } abc;"
  false always 0
Line 4594
  19 always 19
  = always "struct { } * pabc;"
  "struct { } * pabc;" always "struct { } * pabc;"
Line 4595
  51 always 51
  = always "struct Anonymous0 { } ; struct Anonymous0 * pabc ;"
  "struct Anonymous0 { } ; struct Anonymous0 * pabc ;" always "struct Anonymous0 { } ; struct Anonymous0 * pabc ;"
Line 4596
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4596 always 4596
  expected always "struct Anonymous0 { } ; struct Anonymous0 * pabc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4596 always 4596
  code always "struct { } * pabc;"
  false always 0
Line 4600
  19 always 19
  = always "struct { } abc[4];"
  "struct { } abc[4];" always "struct { } abc[4];"
Line 4601
  54 always 54
  = always "struct Anonymous0 { } ; struct Anonymous0 abc [ 4 ] ;"
  "struct Anonymous0 { } ; struct Anonymous0 abc [ 4 ] ;" always "struct Anonymous0 { } ; struct Anonymous0 abc [ 4 ] ;"
Line 4602
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4602 always 4602
  expected always "struct Anonymous0 { } ; struct Anonymous0 abc [ 4 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4602 always 4602
  code always "struct { } abc[4];"
  false always 0
Line 4606
  38 always 38
  = always "struct {int a;} const array[3] = {0};"
  "struct {int a;} const array[3] = {0};" always "struct {int a;} const array[3] = {0};"
Line 4607
  78 always 78
  = always "struct Anonymous0 { int a ; } ; struct Anonymous0 const array [ 3 ] = { 0 } ;"
  "struct Anonymous0 { int a ; } ; struct Anonymous0 const array [ 3 ] = { 0 } ;" always "struct Anonymous0 { int a ; } ; struct Anonymous0 const array [ 3 ] = { 0 } ;"
Line 4608
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4608 always 4608
  expected always "struct Anonymous0 { int a ; } ; struct Anonymous0 const array [ 3 ] = { 0 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4608 always 4608
  code always "struct {int a;} const array[3] = {0};"
  false always 0
Line 4612
  45 always 45
  = always "static struct {int a;} const array[3] = {0};"
  "static struct {int a;} const array[3] = {0};" always "static struct {int a;} const array[3] = {0};"
Line 4613
  85 always 85
  = always "struct Anonymous0 { int a ; } ; static struct Anonymous0 const array [ 3 ] = { 0 } ;"
  "struct Anonymous0 { int a ; } ; static struct Anonymous0 const array [ 3 ] = { 0 } ;" always "struct Anonymous0 { int a ; } ; static struct Anonymous0 const array [ 3 ] = { 0 } ;"
Line 4614
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4614 always 4614
  expected always "struct Anonymous0 { int a ; } ; static struct Anonymous0 const array [ 3 ] = { 0 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4614 always 4614
  code always "static struct {int a;} const array[3] = {0};"
  false always 0
Line 4618
  21 always 21
  = always "struct { } abc, def;"
  "struct { } abc, def;" always "struct { } abc, def;"
Line 4619
  72 always 72
  = always "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 def ;"
  "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 def ;" always "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 def ;"
Line 4620
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4620 always 4620
  expected always "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 def ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4620 always 4620
  code always "struct { } abc, def;"
  false always 0
Line 4624
  24 always 24
  = always "struct { } abc, * pabc;"
  "struct { } abc, * pabc;" always "struct { } abc, * pabc;"
Line 4625
  75 always 75
  = always "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 * pabc ;"
  "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 * pabc ;" always "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 * pabc ;"
Line 4626
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4626 always 4626
  expected always "struct Anonymous0 { } ; struct Anonymous0 abc ; struct Anonymous0 * pabc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4626 always 4626
  code always "struct { } abc, * pabc;"
  false always 0
Line 4630
  35 always 35
  = always "struct { struct DEF {} def; } abc;"
  "struct { struct DEF {} def; } abc;" always "struct { struct DEF {} def; } abc;"
Line 4631
  82 always 82
  = always "struct Anonymous0 { struct DEF { } ; struct DEF def ; } ; struct Anonymous0 abc ;"
  "struct Anonymous0 { struct DEF { } ; struct DEF def ; } ; struct Anonymous0 abc ;" always "struct Anonymous0 { struct DEF { } ; struct DEF def ; } ; struct Anonymous0 abc ;"
Line 4632
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4632 always 4632
  expected always "struct Anonymous0 { struct DEF { } ; struct DEF def ; } ; struct Anonymous0 abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4632 always 4632
  code always "struct { struct DEF {} def; } abc;"
  false always 0
Line 4636
  35 always 35
  = always "struct ABC { struct {} def; } abc;"
  "struct ABC { struct {} def; } abc;" always "struct ABC { struct {} def; } abc;"
Line 4637
  82 always 82
  = always "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; struct ABC abc ;"
  "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; struct ABC abc ;" always "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; struct ABC abc ;"
Line 4638
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4638 always 4638
  expected always "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; struct ABC abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4638 always 4638
  code always "struct ABC { struct {} def; } abc;"
  false always 0
Line 4642
  31 always 31
  = always "struct { struct {} def; } abc;"
  "struct { struct {} def; } abc;" always "struct { struct {} def; } abc;"
Line 4643
  96 always 96
  = always "struct Anonymous0 { struct Anonymous1 { } ; struct Anonymous1 def ; } ; struct Anonymous0 abc ;"
  "struct Anonymous0 { struct Anonymous1 { } ; struct Anonymous1 def ; } ; struct Anonymous0 abc ;" always "struct Anonymous0 { struct Anonymous1 { } ; struct Anonymous1 def ; } ; struct Anonymous0 abc ;"
Line 4644
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4644 always 4644
  expected always "struct Anonymous0 { struct Anonymous1 { } ; struct Anonymous1 def ; } ; struct Anonymous0 abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4644 always 4644
  code always "struct { struct {} def; } abc;"
  false always 0
Line 4648
  35 always 35
  = always "union ABC { int i; float f; } abc;"
  "union ABC { int i; float f; } abc;" always "union ABC { int i; float f; } abc;"
Line 4649
  50 always 50
  = always "union ABC { int i ; float f ; } ; union ABC abc ;"
  "union ABC { int i ; float f ; } ; union ABC abc ;" always "union ABC { int i ; float f ; } ; union ABC abc ;"
Line 4650
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4650 always 4650
  expected always "union ABC { int i ; float f ; } ; union ABC abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4650 always 4650
  code always "union ABC { int i; float f; } abc;"
  false always 0
Line 4654
  31 always 31
  = always "struct ABC { struct {} def; };"
  "struct ABC { struct {} def; };" always "struct ABC { struct {} def; };"
Line 4655
  65 always 65
  = always "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
  "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;" always "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
Line 4656
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4656 always 4656
  expected always "struct ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4656 always 4656
  code always "struct ABC { struct {} def; };"
  false always 0
Line 4660
  44 always 44
  = always "struct ABC : public XYZ { struct {} def; };"
  "struct ABC : public XYZ { struct {} def; };" always "struct ABC : public XYZ { struct {} def; };"
Line 4661
  78 always 78
  = always "struct ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
  "struct ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;" always "struct ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
Line 4662
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4662 always 4662
  expected always "struct ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4662 always 4662
  code always "struct ABC : public XYZ { struct {} def; };"
  false always 0
Line 4666
  26 always 26
  = always "struct { int x; }; int y;"
  "struct { int x; }; int y;" always "struct { int x; }; int y;"
Line 4667
  16 always 16
  = always "int x ; int y ;"
  "int x ; int y ;" always "int x ; int y ;"
Line 4668
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4668 always 4668
  expected always "int x ; int y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4668 always 4668
  code always "struct { int x; }; int y;"
  false always 0
Line 4672
  19 always 19
  = always "struct { int x; };"
  "struct { int x; };" always "struct { int x; };"
Line 4673
  8 always 8
  = always "int x ;"
  "int x ;" always "int x ;"
Line 4674
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4674 always 4674
  expected always "int x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4674 always 4674
  code always "struct { int x; };"
  false always 0
Line 4678
  12 always 12
  = always "struct { };"
  "struct { };" always "struct { };"
Line 4679
  2 always 2
  = always ";"
  ";" always ";"
Line 4680
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4680 always 4680
  expected always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4680 always 4680
  code always "struct { };"
  false always 0
Line 4684
  38 always 38
  = always "struct { struct { struct { } ; } ; };"
  "struct { struct { struct { } ; } ; };" always "struct { struct { struct { } ; } ; };"
Line 4685
  2 always 2
  = always ";"
  ";" always ";"
Line 4686
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4686 always 4686
  expected always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4686 always 4686
  code always "struct { struct { struct { } ; } ; };"
  false always 0
Line 4691
  28 always 28
  = always "static struct ABC { } abc ;"
  "static struct ABC { } abc ;" always "static struct ABC { } abc ;"
Line 4692
  41 always 41
  = always "struct ABC { } ; static struct ABC abc ;"
  "struct ABC { } ; static struct ABC abc ;" always "struct ABC { } ; static struct ABC abc ;"
Line 4693
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4693 always 4693
  expected always "struct ABC { } ; static struct ABC abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4693 always 4693
  code always "static struct ABC { } abc ;"
  false always 0
Line 4698
  43 always 43
  = always "void f() { int A(1),B(2),C=3,D,E(5),F=6; }"
  "void f() { int A(1),B(2),C=3,D,E(5),F=6; }" always "void f() { int A(1),B(2),C=3,D,E(5),F=6; }"
Line 4699
  103 always 103
  = always "void f ( ) { int A ; A = 1 ; int B ; B = 2 ; int C ; C = 3 ; int D ; int E ; E = 5 ; int F ; F = 6 ; }"
  "void f ( ) { int A ; A = 1 ; int B ; B = 2 ; int C ; C = 3 ; int D ; int E ; E = 5 ; int F ; F = 6 ; }" always "void f ( ) { int A ; A = 1 ; int B ; B = 2 ; int C ; C = 3 ; int D ; int E ; E = 5 ; int F ; F = 6 ; }"
Line 4700
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4700 always 4700
  expected always "void f ( ) { int A ; A = 1 ; int B ; B = 2 ; int C ; C = 3 ; int D ; int E ; E = 5 ; int F ; F = 6 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4700 always 4700
  code always "void f() { int A(1),B(2),C=3,D,E(5),F=6; }"
  false always 0
Line 4705
  39 always 39
  = always "void f() { class : foo<int> { } abc; }"
  "void f() { class : foo<int> { } abc; }" always "void f() { class : foo<int> { } abc; }"
Line 4706
  69 always 69
  = always "void f ( ) { class Anonymous0 : foo < int > { } ; Anonymous0 abc ; }"
  "void f ( ) { class Anonymous0 : foo < int > { } ; Anonymous0 abc ; }" always "void f ( ) { class Anonymous0 : foo < int > { } ; Anonymous0 abc ; }"
Line 4707
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4707 always 4707
  expected always "void f ( ) { class Anonymous0 : foo < int > { } ; Anonymous0 abc ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4707 always 4707
  code always "void f() { class : foo<int> { } abc; }"
  false always 0
Line 4712
  19 always 19
  = always "struct { char c; }"
  "struct { char c; }" always "struct { char c; }"
Line 4713
  20 always 20
  = always "struct { char c ; }"
  "struct { char c ; }" always "struct { char c ; }"
Line 4714
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4714 always 4714
  expected always "struct { char c ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4714 always 4714
  code always "struct { char c; }"
  false always 0
Line 4719
  19 always 19
  = always "class ABC { } abc;"
  "class ABC { } abc;" always "class ABC { } abc;"
Line 4720
  26 always 26
  = always "class ABC { } ; ABC abc ;"
  "class ABC { } ; ABC abc ;" always "class ABC { } ; ABC abc ;"
Line 4721
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4721 always 4721
  expected always "class ABC { } ; ABC abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4721 always 4721
  code always "class ABC { } abc;"
  false always 0
Line 4725
  22 always 22
  = always "class ABC { } * pabc;"
  "class ABC { } * pabc;" always "class ABC { } * pabc;"
Line 4726
  29 always 29
  = always "class ABC { } ; ABC * pabc ;"
  "class ABC { } ; ABC * pabc ;" always "class ABC { } ; ABC * pabc ;"
Line 4727
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4727 always 4727
  expected always "class ABC { } ; ABC * pabc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4727 always 4727
  code always "class ABC { } * pabc;"
  false always 0
Line 4731
  22 always 22
  = always "class ABC { } abc[4];"
  "class ABC { } abc[4];" always "class ABC { } abc[4];"
Line 4732
  32 always 32
  = always "class ABC { } ; ABC abc [ 4 ] ;"
  "class ABC { } ; ABC abc [ 4 ] ;" always "class ABC { } ; ABC abc [ 4 ] ;"
Line 4733
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4733 always 4733
  expected always "class ABC { } ; ABC abc [ 4 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4733 always 4733
  code always "class ABC { } abc[4];"
  false always 0
Line 4737
  24 always 24
  = always "class ABC { } abc, def;"
  "class ABC { } abc, def;" always "class ABC { } abc, def;"
Line 4738
  36 always 36
  = always "class ABC { } ; ABC abc ; ABC def ;"
  "class ABC { } ; ABC abc ; ABC def ;" always "class ABC { } ; ABC abc ; ABC def ;"
Line 4739
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4739 always 4739
  expected always "class ABC { } ; ABC abc ; ABC def ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4739 always 4739
  code always "class ABC { } abc, def;"
  false always 0
Line 4743
  27 always 27
  = always "class ABC { } abc, * pabc;"
  "class ABC { } abc, * pabc;" always "class ABC { } abc, * pabc;"
Line 4744
  39 always 39
  = always "class ABC { } ; ABC abc ; ABC * pabc ;"
  "class ABC { } ; ABC abc ; ABC * pabc ;" always "class ABC { } ; ABC abc ; ABC * pabc ;"
Line 4745
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4745 always 4745
  expected always "class ABC { } ; ABC abc ; ABC * pabc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4745 always 4745
  code always "class ABC { } abc, * pabc;"
  false always 0
Line 4749
  37 always 37
  = always "class ABC { class DEF {} def; } abc;"
  "class ABC { class DEF {} def; } abc;" always "class ABC { class DEF {} def; } abc;"
Line 4750
  52 always 52
  = always "class ABC { class DEF { } ; DEF def ; } ; ABC abc ;"
  "class ABC { class DEF { } ; DEF def ; } ; ABC abc ;" always "class ABC { class DEF { } ; DEF def ; } ; ABC abc ;"
Line 4751
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4751 always 4751
  expected always "class ABC { class DEF { } ; DEF def ; } ; ABC abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4751 always 4751
  code always "class ABC { class DEF {} def; } abc;"
  false always 0
Line 4755
  15 always 15
  = always "class { } abc;"
  "class { } abc;" always "class { } abc;"
Line 4756
  16 always 16
  = always "class { } abc ;"
  "class { } abc ;" always "class { } abc ;"
Line 4757
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4757 always 4757
  expected always "class { } abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4757 always 4757
  code always "class { } abc;"
  false always 0
Line 4761
  18 always 18
  = always "class { } * pabc;"
  "class { } * pabc;" always "class { } * pabc;"
Line 4762
  19 always 19
  = always "class { } * pabc ;"
  "class { } * pabc ;" always "class { } * pabc ;"
Line 4763
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4763 always 4763
  expected always "class { } * pabc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4763 always 4763
  code always "class { } * pabc;"
  false always 0
Line 4767
  18 always 18
  = always "class { } abc[4];"
  "class { } abc[4];" always "class { } abc[4];"
Line 4768
  22 always 22
  = always "class { } abc [ 4 ] ;"
  "class { } abc [ 4 ] ;" always "class { } abc [ 4 ] ;"
Line 4769
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4769 always 4769
  expected always "class { } abc [ 4 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4769 always 4769
  code always "class { } abc[4];"
  false always 0
Line 4773
  20 always 20
  = always "class { } abc, def;"
  "class { } abc, def;" always "class { } abc, def;"
Line 4774
  22 always 22
  = always "class { } abc , def ;"
  "class { } abc , def ;" always "class { } abc , def ;"
Line 4775
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4775 always 4775
  expected always "class { } abc , def ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4775 always 4775
  code always "class { } abc, def;"
  false always 0
Line 4779
  23 always 23
  = always "class { } abc, * pabc;"
  "class { } abc, * pabc;" always "class { } abc, * pabc;"
Line 4780
  25 always 25
  = always "class { } abc , * pabc ;"
  "class { } abc , * pabc ;" always "class { } abc , * pabc ;"
Line 4781
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4781 always 4781
  expected always "class { } abc , * pabc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4781 always 4781
  code always "class { } abc, * pabc;"
  false always 0
Line 4785
  34 always 34
  = always "struct { class DEF {} def; } abc;"
  "struct { class DEF {} def; } abc;" always "struct { class DEF {} def; } abc;"
Line 4786
  74 always 74
  = always "struct Anonymous0 { class DEF { } ; DEF def ; } ; struct Anonymous0 abc ;"
  "struct Anonymous0 { class DEF { } ; DEF def ; } ; struct Anonymous0 abc ;" always "struct Anonymous0 { class DEF { } ; DEF def ; } ; struct Anonymous0 abc ;"
Line 4787
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4787 always 4787
  expected always "struct Anonymous0 { class DEF { } ; DEF def ; } ; struct Anonymous0 abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4787 always 4787
  code always "struct { class DEF {} def; } abc;"
  false always 0
Line 4791
  34 always 34
  = always "class ABC { struct {} def; } abc;"
  "class ABC { struct {} def; } abc;" always "class ABC { struct {} def; } abc;"
Line 4792
  74 always 74
  = always "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; ABC abc ;"
  "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; ABC abc ;" always "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; ABC abc ;"
Line 4793
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4793 always 4793
  expected always "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ; ABC abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4793 always 4793
  code always "class ABC { struct {} def; } abc;"
  false always 0
Line 4797
  29 always 29
  = always "class { class {} def; } abc;"
  "class { class {} def; } abc;" always "class { class {} def; } abc;"
Line 4798
  32 always 32
  = always "class { class { } def ; } abc ;"
  "class { class { } def ; } abc ;" always "class { class { } def ; } abc ;"
Line 4799
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4799 always 4799
  expected always "class { class { } def ; } abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4799 always 4799
  code always "class { class {} def; } abc;"
  false always 0
Line 4803
  30 always 30
  = always "class ABC { struct {} def; };"
  "class ABC { struct {} def; };" always "class ABC { struct {} def; };"
Line 4804
  64 always 64
  = always "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
  "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;" always "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
Line 4805
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4805 always 4805
  expected always "class ABC { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4805 always 4805
  code always "class ABC { struct {} def; };"
  false always 0
Line 4809
  43 always 43
  = always "class ABC : public XYZ { struct {} def; };"
  "class ABC : public XYZ { struct {} def; };" always "class ABC : public XYZ { struct {} def; };"
Line 4810
  77 always 77
  = always "class ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
  "class ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;" always "class ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
Line 4811
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4811 always 4811
  expected always "class ABC : public XYZ { struct Anonymous0 { } ; struct Anonymous0 def ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4811 always 4811
  code always "class ABC : public XYZ { struct {} def; };"
  false always 0
Line 4815
  25 always 25
  = always "class { int x; }; int y;"
  "class { int x; }; int y;" always "class { int x; }; int y;"
Line 4816
  28 always 28
  = always "class { int x ; } ; int y ;"
  "class { int x ; } ; int y ;" always "class { int x ; } ; int y ;"
Line 4817
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4817 always 4817
  expected always "class { int x ; } ; int y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4817 always 4817
  code always "class { int x; }; int y;"
  false always 0
Line 4821
  18 always 18
  = always "class { int x; };"
  "class { int x; };" always "class { int x; };"
Line 4822
  20 always 20
  = always "class { int x ; } ;"
  "class { int x ; } ;" always "class { int x ; } ;"
Line 4823
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4823 always 4823
  expected always "class { int x ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4823 always 4823
  code always "class { int x; };"
  false always 0
Line 4827
  11 always 11
  = always "class { };"
  "class { };" always "class { };"
Line 4828
  12 always 12
  = always "class { } ;"
  "class { } ;" always "class { } ;"
Line 4829
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4829 always 4829
  expected always "class { } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4829 always 4829
  code always "class { };"
  false always 0
Line 4833
  37 always 37
  = always "class { struct { struct { } ; } ; };"
  "class { struct { struct { } ; } ; };" always "class { struct { struct { } ; } ; };"
Line 4834
  12 always 12
  = always "class { } ;"
  "class { } ;" always "class { } ;"
Line 4835
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4835 always 4835
  expected always "class { } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4835 always 4835
  code always "class { struct { struct { } ; } ; };"
  false always 0
Line 4840
  197 always 197
  = always "class ABC {\n    void foo() {\n        union {\n            int i;\n            float f;\n        };\n        struct Fee { } fee;\n    }\n    union {\n        long long ll;\n        double d;\n    };\n} abc;\n"
  "class ABC {\n    void foo() {\n        union {\n            int i;\n            float f;\n        };\n        struct Fee { } fee;\n    }\n    union {\n        long long ll;\n        double d;\n    };\n} abc;\n" always "class ABC {\n    void foo() {\n        union {\n            int i;\n            float f;\n        };\n        struct Fee { } fee;\n    }\n    union {\n        long long ll;\n        double d;\n    };\n} abc;\n"
Line 4853
  139 always 139
  = always "class ABC { void foo ( ) { int i ; float & f = i ; struct Fee { } ; struct Fee fee ; } union { long long ll ; double d ; } ; } ; ABC abc ;"
  "class ABC { void foo ( ) { int i ; float & f = i ; struct Fee { } ; struct Fee fee ; } union { long long ll ; double d ; } ; } ; ABC abc ;" always "class ABC { void foo ( ) { int i ; float & f = i ; struct Fee { } ; struct Fee fee ; } union { long long ll ; double d ; } ; } ; ABC abc ;"
Line 4864
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4864 always 4864
  expected always "class ABC { void foo ( ) { int i ; float & f = i ; struct Fee { } ; struct Fee fee ; } union { long long ll ; double d ; } ; } ; ABC abc ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4864 always 4864
  code always "class ABC {\n    void foo() {\n        union {\n            int i;\n            float f;\n        };\n        struct Fee { } fee;\n    }\n    union {\n        long long ll;\n        double d;\n    };\n} abc;\n"
  false always 0
Line 4868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4868 always 4868
  "struct A { char integers [ X ] ; } ; struct A arrays ; arrays = { { 0 } } ;" always "struct A { char integers [ X ] ; } ; struct A arrays ; arrays = { { 0 } } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4868 always 4868
  "struct A {\n    char integers[X];\n} arrays = {{0}};" always "struct A {\n    char integers[X];\n} arrays = {{0}};"
  false always 0
Line 4877
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4877 always 4877
  "struct Anonymous0 { char x ; } ; struct Anonymous0 a [ 2 ] ;" always "struct Anonymous0 { char x ; } ; struct Anonymous0 a [ 2 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4877 always 4877
  "struct { char x; } a[2];" always "struct { char x; } a[2];"
  false always 0
Line 4879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4879 always 4879
  "struct Anonymous0 { char x ; } ; static struct Anonymous0 a [ 2 ] ;" always "struct Anonymous0 { char x ; } ; static struct Anonymous0 a [ 2 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4879 always 4879
  "static struct { char x; } a[2];" always "static struct { char x; } a[2];"
  false always 0
Line 4884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4884 always 4884
  "enum A { x , y , z } ; enum A a ; a = x ;" always "enum A { x , y , z } ; enum A a ; a = x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4884 always 4884
  "enum A { x, y, z } a(x);" always "enum A { x, y, z } a(x);"
  false always 0
Line 4885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4885 always 4885
  "enum B { x , y , z } ; enum B b ; b = x ;" always "enum B { x , y , z } ; enum B b ; b = x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4885 always 4885
  "enum B { x , y, z } b{x};" always "enum B { x , y, z } b{x};"
  false always 0
Line 4886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4886 always 4886
  "struct C { int i ; } ; struct C c ; c = { 0 } ;" always "struct C { int i ; } ; struct C c ; c = { 0 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4886 always 4886
  "struct C { int i; } c{0};" always "struct C { int i; } c{0};"
  false always 0
Line 4887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4887 always 4887
  "enum Anonymous0 { x , y , z } ; enum Anonymous0 d ; d = x ;" always "enum Anonymous0 { x , y , z } ; enum Anonymous0 d ; d = x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4887 always 4887
  "enum { x, y, z } d(x);" always "enum { x, y, z } d(x);"
  false always 0
Line 4888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4888 always 4888
  "enum Anonymous0 { x , y , z } ; enum Anonymous0 e ; e = x ;" always "enum Anonymous0 { x , y , z } ; enum Anonymous0 e ; e = x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4888 always 4888
  "enum { x, y, z } e{x};" always "enum { x, y, z } e{x};"
  false always 0
Line 4889
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4889 always 4889
  "struct Anonymous0 { int i ; } ; struct Anonymous0 f ; f = { 0 } ;" always "struct Anonymous0 { int i ; } ; struct Anonymous0 f ; f = { 0 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4889 always 4889
  "struct { int i; } f{0};" always "struct { int i; } f{0};"
  false always 0
Line 4890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4890 always 4890
  "struct Anonymous0 { } ; struct Anonymous0 x ; x = { 0 } ;" always "struct Anonymous0 { } ; struct Anonymous0 x ; x = { 0 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4890 always 4890
  "struct {} x = {0};" always "struct {} x = {0};"
  false always 0
Line 4891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4891 always 4891
  "enum G : short { x , y , z } ; enum G g ; g = x ;" always "enum G : short { x , y , z } ; enum G g ; g = x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4891 always 4891
  "enum G : short { x, y, z } g(x);" always "enum G : short { x, y, z } g(x);"
  false always 0
Line 4892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4892 always 4892
  "enum H : short { x , y , z } ; enum H h ; h = x ;" always "enum H : short { x , y , z } ; enum H h ; h = x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4892 always 4892
  "enum H : short { x, y, z } h{x};" always "enum H : short { x, y, z } h{x};"
  false always 0
Line 4893
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4893 always 4893
  "enum class I : short { x , y , z } ; enum I i ; i = x ;" always "enum class I : short { x , y , z } ; enum I i ; i = x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4893 always 4893
  "enum class I : short { x, y, z } i(x);" always "enum class I : short { x, y, z } i(x);"
  false always 0
Line 4894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4894 always 4894
  "enum class J : short { x , y , z } ; enum J j ; j = x ;" always "enum class J : short { x , y , z } ; enum J j ; j = x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4894 always 4894
  "enum class J : short { x, y, z } j{x};" always "enum class J : short { x, y, z } j{x};"
  false always 0
Line 4898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4898 always 4898
  "int var ;" always "int var ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4898 always 4898
  "register int var ;" always "register int var ;"
  true always 1
Line 4899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4899 always 4899
  "short var ;" always "short var ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4899 always 4899
  "register short int var ;" always "register short int var ;"
  true always 1
Line 4900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4900 always 4900
  "int foo ( ) { }" always "int foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4900 always 4900
  "inline int foo ( ) { }" always "inline int foo ( ) { }"
  true always 1
Line 4901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4901 always 4901
  "int foo ( ) { }" always "int foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4901 always 4901
  "__inline int foo ( ) { }" always "__inline int foo ( ) { }"
  true always 1
Line 4902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4902 always 4902
  "int foo ( ) { }" always "int foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4902 always 4902
  "__forceinline int foo ( ) { }" always "__forceinline int foo ( ) { }"
  true always 1
Line 4903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4903 always 4903
  "constexpr int foo ( ) { }" always "constexpr int foo ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4903 always 4903
  "constexpr int foo() { }" always "constexpr int foo() { }"
  true always 1
Line 4904
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4904 always 4904
  "void f ( ) { int final [ 10 ] ; }" always "void f ( ) { int final [ 10 ] ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4904 always 4904
  "void f() { int final[10]; }" always "void f() { int final[10]; }"
  true always 1
Line 4905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4905 always 4905
  "int * p ;" always "int * p ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4905 always 4905
  "int * __restrict p;" always "int * __restrict p;"
  "test.c" always "test.c"
Line 4906
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4906 always 4906
  "int * * p ;" always "int * * p ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4906 always 4906
  "int * __restrict__ * p;" always "int * __restrict__ * p;"
  "test.c" always "test.c"
Line 4907
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4907 always 4907
  "void foo ( float * a , float * b ) ;" always "void foo ( float * a , float * b ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4907 always 4907
  "void foo(float * __restrict__ a, float * __restrict__ b);" always "void foo(float * __restrict__ a, float * __restrict__ b);"
  "test.c" always "test.c"
Line 4908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4908 always 4908
  "int * p ;" always "int * p ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4908 always 4908
  "int * restrict p;" always "int * restrict p;"
  "test.c" always "test.c"
Line 4909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4909 always 4909
  "int * * p ;" always "int * * p ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4909 always 4909
  "int * restrict * p;" always "int * restrict * p;"
  "test.c" always "test.c"
Line 4910
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4910 always 4910
  "void foo ( float * a , float * b ) ;" always "void foo ( float * a , float * b ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4910 always 4910
  "void foo(float * restrict a, float * restrict b);" always "void foo(float * restrict a, float * restrict b);"
  "test.c" always "test.c"
Line 4911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4911 always 4911
  "void foo ( int restrict ) ;" always "void foo ( int restrict ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4911 always 4911
  "void foo(int restrict);" always "void foo(int restrict);"
Line 4912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4912 always 4912
  "int * p ;" always "int * p ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4912 always 4912
  "typedef int * __restrict__ rint; rint p;" always "typedef int * __restrict__ rint; rint p;"
  "test.c" always "test.c"
Line 4915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4915 always 4915
  "a = b . _inline ;" always "a = b . _inline ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4915 always 4915
  "a = b._inline;" always "a = b._inline;"
  true always 1
Line 4917
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4917 always 4917
  "int i ; i = 0 ;" always "int i ; i = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4917 always 4917
  "auto int i = 0;" always "auto int i = 0;"
  "test.c" always "test.c"
Line 4918
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4918 always 4918
  "auto i ; i = 0 ;" always "auto i ; i = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4918 always 4918
  "auto i = 0;" always "auto i = 0;"
  "test.cpp" always "test.cpp"
Line 4922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4922 always 4922
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4922 always 4922
  "int __cdecl f();" always "int __cdecl f();"
  true always 1
Line 4923
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4923 always 4923
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4923 always 4923
  "int __stdcall f();" always "int __stdcall f();"
  true always 1
Line 4924
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4924 always 4924
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4924 always 4924
  "int __fastcall f();" always "int __fastcall f();"
  true always 1
Line 4925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4925 always 4925
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4925 always 4925
  "int __clrcall f();" always "int __clrcall f();"
  true always 1
Line 4926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4926 always 4926
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4926 always 4926
  "int __thiscall f();" always "int __thiscall f();"
  true always 1
Line 4927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4927 always 4927
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4927 always 4927
  "int __syscall f();" always "int __syscall f();"
  true always 1
Line 4928
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4928 always 4928
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4928 always 4928
  "int __pascal f();" always "int __pascal f();"
  true always 1
Line 4929
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4929 always 4929
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4929 always 4929
  "int __fortran f();" always "int __fortran f();"
  true always 1
Line 4930
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4930 always 4930
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4930 always 4930
  "int __far __cdecl f();" always "int __far __cdecl f();"
  true always 1
Line 4931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4931 always 4931
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4931 always 4931
  "int __far __stdcall f();" always "int __far __stdcall f();"
  true always 1
Line 4932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4932 always 4932
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4932 always 4932
  "int __far __fastcall f();" always "int __far __fastcall f();"
  true always 1
Line 4933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4933 always 4933
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4933 always 4933
  "int __far __clrcall f();" always "int __far __clrcall f();"
  true always 1
Line 4934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4934 always 4934
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4934 always 4934
  "int __far __thiscall f();" always "int __far __thiscall f();"
  true always 1
Line 4935
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4935 always 4935
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4935 always 4935
  "int __far __syscall f();" always "int __far __syscall f();"
  true always 1
Line 4936
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4936 always 4936
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4936 always 4936
  "int __far __pascal f();" always "int __far __pascal f();"
  true always 1
Line 4937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4937 always 4937
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4937 always 4937
  "int __far __fortran f();" always "int __far __fortran f();"
  true always 1
Line 4938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4938 always 4938
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4938 always 4938
  "int WINAPI f();" always "int WINAPI f();"
  true always 1
Line 4939
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4939 always 4939
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4939 always 4939
  "int APIENTRY f();" always "int APIENTRY f();"
  true always 1
Line 4940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4940 always 4940
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4940 always 4940
  "int CALLBACK f();" always "int CALLBACK f();"
  true always 1
Line 4943
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4943 always 4943
  "enum E { CALLBACK } ;" always "enum E { CALLBACK } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4943 always 4943
  "enum E { CALLBACK } ;" always "enum E { CALLBACK } ;"
  true always 1
Line 4947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4947 always 4947
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4947 always 4947
  "__attribute__ ((visibility(\"default\"))) int f();" always "__attribute__ ((visibility(\"default\"))) int f();"
  true always 1
Line 4948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4948 always 4948
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4948 always 4948
  "__attribute__((visibility(\"default\"))) int f();" always "__attribute__((visibility(\"default\"))) int f();"
  true always 1
Line 4949
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4949 always 4949
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4949 always 4949
  "__attribute ((visibility(\"default\"))) int f();" always "__attribute ((visibility(\"default\"))) int f();"
  true always 1
Line 4950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4950 always 4950
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4950 always 4950
  "__attribute__ ((visibility(\"default\"))) __attribute__ ((warn_unused_result)) int f();" always "__attribute__ ((visibility(\"default\"))) __attribute__ ((warn_unused_result)) int f();"
  true always 1
Line 4951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4951 always 4951
  "blah :: blah f ( ) ;" always "blah :: blah f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4951 always 4951
  "__attribute__ ((visibility(\"default\"))) blah::blah f();" always "__attribute__ ((visibility(\"default\"))) blah::blah f();"
  true always 1
Line 4952
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4952 always 4952
  "template < T > Result < T > f ( ) ;" always "template < T > Result < T > f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4952 always 4952
  "template<T> __attribute__ ((warn_unused_result)) Result<T> f();" always "template<T> __attribute__ ((warn_unused_result)) Result<T> f();"
  true always 1
Line 4953
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4953 always 4953
  "template < T , U > Result < T , U > f ( ) ;" always "template < T , U > Result < T , U > f ( ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4953 always 4953
  "template<T, U> __attribute__ ((warn_unused_result)) Result<T, U> f();" always "template<T, U> __attribute__ ((warn_unused_result)) Result<T, U> f();"
  true always 1
Line 4957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4957 always 4957
  "IncrementFunctor ( ) ( a ) ;" always "IncrementFunctor ( ) ( a ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4957 always 4957
  "IncrementFunctor()(a);" always "IncrementFunctor()(a);"
  true always 1
Line 4962
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4962 always 4962
  "f ( double x , double ( * y ) ( ) ) ;" always "f ( double x , double ( * y ) ( ) ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4962 always 4962
  "f (double x, double (*y) ());" always "f (double x, double (*y) ());"
  true always 1
Line 4966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4966 always 4966
  "void f ( ) { ; }" always "void f ( ) { ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4966 always 4966
  "void f() { ; }" always "void f() { ; }"
  false always 0
Line 4967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4967 always 4967
  "void f ( ) { ; }" always "void f ( ) { ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4967 always 4967
  "void f() { do { ; } while (0); }" always "void f() { do { ; } while (0); }"
  true always 1
Line 4972
  166 always 166
  = always "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};"
  "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};" always "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};"
Line 4980
  116 always 116
  = always "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ;"
  "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ;" always "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ;"
Line 4987
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4987 always 4987
  expected always "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  4987 always 4987
  code always "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};"
  false always 0
Line 4990
  113 always 113
  = always "class Fred {\n    std::string s;\n    const std::string & foo();\n};\nconst std::string & Fred::foo() { return \"\"; }"
  "class Fred {\n    std::string s;\n    const std::string & foo();\n};\nconst std::string & Fred::foo() { return \"\"; }" always "class Fred {\n    std::string s;\n    const std::string & foo();\n};\nconst std::string & Fred::foo() { return \"\"; }"
Line 4995
  121 always 121
  = always "class Fred { std :: string s ; const std :: string & foo ( ) ; } ; const std :: string & Fred :: foo ( ) { return \"\" ; }"
  "class Fred { std :: string s ; const std :: string & foo ( ) ; } ; const std :: string & Fred :: foo ( ) { return \"\" ; }" always "class Fred { std :: string s ; const std :: string & foo ( ) ; } ; const std :: string & Fred :: foo ( ) { return \"\" ; }"
Line 5000
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5000 always 5000
  expected always "class Fred { std :: string s ; const std :: string & foo ( ) ; } ; const std :: string & Fred :: foo ( ) { return \"\" ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5000 always 5000
  code always "class Fred {\n    std::string s;\n    const std::string & foo();\n};\nconst std::string & Fred::foo() { return \"\"; }"
  false always 0
Line 5006
  345 always 345
  = always "extern \"C\" void abort ();\ntemplate <int a> inline int fact2 ();\ntemplate <int a> inline int fact () {\n  return a * fact2<a-1> ();\n}\ntemplate <> inline int fact<1> () {\n  return 1;\n}\ntemplate <int a> inline int fact2 () {\n  return a * fact<a-1>();\n}\ntemplate <> inline int fact2<1> () {\n  return 1;\n}\nint main() {\n  fact2<3> ();\n  fact2<2> ();\n}"
  "extern \"C\" void abort ();\ntemplate <int a> inline int fact2 ();\ntemplate <int a> inline int fact () {\n  return a * fact2<a-1> ();\n}\ntemplate <> inline int fact<1> () {\n  return 1;\n}\ntemplate <int a> inline int fact2 () {\n  return a * fact<a-1>();\n}\ntemplate <> inline int fact2<1> () {\n  return 1;\n}\nint main() {\n  fact2<3> ();\n  fact2<2> ();\n}" always "extern \"C\" void abort ();\ntemplate <int a> inline int fact2 ();\ntemplate <int a> inline int fact () {\n  return a * fact2<a-1> ();\n}\ntemplate <> inline int fact<1> () {\n  return 1;\n}\ntemplate <int a> inline int fact2 () {\n  return a * fact<a-1>();\n}\ntemplate <> inline int fact2<1> () {\n  return 1;\n}\nint main() {\n  fact2<3> ();\n  fact2<2> ();\n}"
Line 5024
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5024 always 5024
  code always "extern \"C\" void abort ();\ntemplate <int a> inline int fact2 ();\ntemplate <int a> inline int fact () {\n  return a * fact2<a-1> ();\n}\ntemplate <> inline int fact<1> () {\n  return 1;\n}\ntemplate <int a> inline int fact2 () {\n  return a * fact<a-1>();\n}\ntemplate <> inline int fact2<1> () {\n  return 1;\n}\nint main() {\n  fact2<3> ();\n  fact2<2> ();\n}"
Line 5030
  95 always 95
  = always "char *f()\n{\n    char *temp=malloc(2);\n    strcpy(temp,\"\");\n    return (strncat(temp,\"a\",1));\n}"
  "char *f()\n{\n    char *temp=malloc(2);\n    strcpy(temp,\"\");\n    return (strncat(temp,\"a\",1));\n}" always "char *f()\n{\n    char *temp=malloc(2);\n    strcpy(temp,\"\");\n    return (strncat(temp,\"a\",1));\n}"
Line 5036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5036 always 5036
  "char * f ( ) { char * temp ; temp = malloc ( 2 ) ; strcpy ( temp , \"\" ) ; strncat ( temp , \"a\" , 1 ) ; return temp ; }" always "char * f ( ) { char * temp ; temp = malloc ( 2 ) ; strcpy ( temp , \"\" ) ; strncat ( temp , \"a\" , 1 ) ; return temp ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5036 always 5036
  code always "char *f()\n{\n    char *temp=malloc(2);\n    strcpy(temp,\"\");\n    return (strncat(temp,\"a\",1));\n}"
  true always 1
Line 5045
  121 always 121
  = always "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(*temp,\"a\",1));\n}"
  "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(*temp,\"a\",1));\n}" always "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(*temp,\"a\",1));\n}"
Line 5052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5052 always 5052
  "char * f ( ) { char * * temp ; temp = malloc ( 8 ) ; * temp = malloc ( 2 ) ; strcpy ( * temp , \"\" ) ; strncat ( * temp , \"a\" , 1 ) ; return * temp ; }" always "char * f ( ) { char * * temp ; temp = malloc ( 8 ) ; * temp = malloc ( 2 ) ; strcpy ( * temp , \"\" ) ; strncat ( * temp , \"a\" , 1 ) ; return * temp ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5052 always 5052
  code always "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(*temp,\"a\",1));\n}"
  true always 1
Line 5062
  134 always 134
  = always "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(temp[0],foo(b),calc(c-d)));\n}"
  "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(temp[0],foo(b),calc(c-d)));\n}" always "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(temp[0],foo(b),calc(c-d)));\n}"
Line 5069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5069 always 5069
  "char * f ( ) { char * * temp ; temp = malloc ( 8 ) ; * temp = malloc ( 2 ) ; strcpy ( * temp , \"\" ) ; strncat ( temp [ 0 ] , foo ( b ) , calc ( c - d ) ) ; return temp [ 0 ] ; }" always "char * f ( ) { char * * temp ; temp = malloc ( 8 ) ; * temp = malloc ( 2 ) ; strcpy ( * temp , \"\" ) ; strncat ( temp [ 0 ] , foo ( b ) , calc ( c - d ) ) ; return temp [ 0 ] ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5069 always 5069
  code always "char *f()\n{\n    char **temp=malloc(8);\n    *temp = malloc(2);\n    strcpy(*temp,\"\");\n    return (strncat(temp[0],foo(b),calc(c-d)));\n}"
  true always 1
Line 5082
  53 always 53
  = always "void f() {    for(x=0;x<1;x++) {        y = 1;    }}"
  "void f() {    for(x=0;x<1;x++) {        y = 1;    }}" always "void f() {    for(x=0;x<1;x++) {        y = 1;    }}"
Line 5087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5087 always 5087
  "void f ( ) { { y = 1 ; } x = 1 ; }" always "void f ( ) { { y = 1 ; } x = 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5087 always 5087
  code always "void f() {    for(x=0;x<1;x++) {        y = 1;    }}"
  true always 1
Line 5091
  57 always 57
  = always "void f() {    for(x=0;x<1;x++) {        y = 1 + x;    }}"
  "void f() {    for(x=0;x<1;x++) {        y = 1 + x;    }}" always "void f() {    for(x=0;x<1;x++) {        y = 1 + x;    }}"
Line 5096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5096 always 5096
  "void f ( ) { x = 0 ; { y = 1 + x ; } x = 1 ; }" always "void f ( ) { x = 0 ; { y = 1 + x ; } x = 1 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5096 always 5096
  code always "void f() {    for(x=0;x<1;x++) {        y = 1 + x;    }}"
  true always 1
Line 5100
  71 always 71
  = always "void f() {    foo();    for(int x=0;x<1;x++) {        y = 1 + x;    }}"
  "void f() {    foo();    for(int x=0;x<1;x++) {        y = 1 + x;    }}" always "void f() {    foo();    for(int x=0;x<1;x++) {        y = 1 + x;    }}"
Line 5106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5106 always 5106
  "void f ( ) { foo ( ) ; { int x = 0 ; y = 1 + x ; } }" always "void f ( ) { foo ( ) ; { int x = 0 ; y = 1 + x ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5106 always 5106
  code always "void f() {    foo();    for(int x=0;x<1;x++) {        y = 1 + x;    }}"
  true always 1
Line 5111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5111 always 5111
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5111 always 5111
  "void f(){{}}" always "void f(){{}}"
  true always 1
Line 5112
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5112 always 5112
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5112 always 5112
  "void f(){{{}}}" always "void f(){{{}}}"
  true always 1
Line 5113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5113 always 5113
  "void f ( ) { for ( ; ; ) { } }" always "void f ( ) { for ( ; ; ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5113 always 5113
  "void f () { for(;;){} }" always "void f () { for(;;){} }"
  true always 1
Line 5114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5114 always 5114
  "void f ( ) { { scope_lock lock ; foo ( ) ; } { scope_lock lock ; bar ( ) ; } }" always "void f ( ) { { scope_lock lock ; foo ( ) ; } { scope_lock lock ; bar ( ) ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5114 always 5114
  "void f () { {scope_lock lock; foo();} {scope_lock lock; bar();} }" always "void f () { {scope_lock lock; foo();} {scope_lock lock; bar();} }"
  true always 1
Line 5118
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5118 always 5118
  "int * x ;" always "int * x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5118 always 5118
  "int x [];" always "int x [];"
Line 5119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5119 always 5119
  "int * * x ;" always "int * * x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5119 always 5119
  "int x [][];" always "int x [][];"
Line 5120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5120 always 5120
  "int * * x ;" always "int * * x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5120 always 5120
  "int * x [];" always "int * x [];"
Line 5121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5121 always 5121
  "int * * * x ;" always "int * * * x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5121 always 5121
  "int * x [][];" always "int * x [][];"
Line 5122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5122 always 5122
  "int * * * * x ;" always "int * * * * x ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5122 always 5122
  "int * * x [][];" always "int * * x [][];"
Line 5123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5123 always 5123
  "void f ( int x [ ] , double y [ ] ) { }" always "void f ( int x [ ] , double y [ ] ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5123 always 5123
  "void f(int x[], double y[]) { }" always "void f(int x[], double y[]) { }"
Line 5124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5124 always 5124
  "int x [ 13 ] = { [ 11 ] = 2 , [ 12 ] = 3 } ;" always "int x [ 13 ] = { [ 11 ] = 2 , [ 12 ] = 3 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5124 always 5124
  "int x[] = {[11]=2, [12]=3};" always "int x[] = {[11]=2, [12]=3};"
Line 5128
  68 always 68
  = always "void foo() {\n    int a[10];\n    memset(&a[4], 0, 20*sizeof(int));\n}"
  "void foo() {\n    int a[10];\n    memset(&a[4], 0, 20*sizeof(int));\n}" always "void foo() {\n    int a[10];\n    memset(&a[4], 0, 20*sizeof(int));\n}"
Line 5132
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5132 always 5132
  "void foo ( ) { int a [ 10 ] ; memset ( a + 4 , 0 , 80 ) ; }" always "void foo ( ) { int a [ 10 ] ; memset ( a + 4 , 0 , 80 ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5132 always 5132
  code always "void foo() {\n    int a[10];\n    memset(&a[4], 0, 20*sizeof(int));\n}"
  true always 1
Line 5139
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5139 always 5139
  "'h' ;" always "'h' ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5139 always 5139
  "\"hello\"[0] ;" always "\"hello\"[0] ;"
Line 5140
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5140 always 5140
  "'\\n' ;" always "'\\n' ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5140 always 5140
  "\"\\n\"[0] ;" always "\"\\n\"[0] ;"
Line 5141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5141 always 5141
  "'\\0' ;" always "'\\0' ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5141 always 5141
  "\"hello\"[5] ;" always "\"hello\"[5] ;"
Line 5142
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5142 always 5142
  "'\\0' ;" always "'\\0' ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5142 always 5142
  "\"\"[0] ;" always "\"\"[0] ;"
Line 5143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5143 always 5143
  "'\\0' ;" always "'\\0' ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5143 always 5143
  "\"\\0\"[0] ;" always "\"\\0\"[0] ;"
Line 5144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5144 always 5144
  "'\\n' ;" always "'\\n' ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5144 always 5144
  "\"hello\\nworld\"[5] ;" always "\"hello\\nworld\"[5] ;"
Line 5145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5145 always 5145
  "'w' ;" always "'w' ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5145 always 5145
  "\"hello world\"[6] ;" always "\"hello world\"[6] ;"
Line 5146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5146 always 5146
  "\"hello\" [ 7 ] ;" always "\"hello\" [ 7 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5146 always 5146
  "\"hello\"[7] ;" always "\"hello\"[7] ;"
Line 5147
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5147 always 5147
  "\"hello\" [ -1 ] ;" always "\"hello\" [ -1 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5147 always 5147
  "\"hello\"[-1] ;" always "\"hello\"[-1] ;"
Line 5151
  158 always 158
  = always "int evallex() {\n  int c, t;\nagain:\n   do {\n      if ((c = macroid(c)) == EOF_CHAR || c == '\\n') {\n      }\n   } while ((t = type[c]) == LET && catenate());\n}\n"
  "int evallex() {\n  int c, t;\nagain:\n   do {\n      if ((c = macroid(c)) == EOF_CHAR || c == '\\n') {\n      }\n   } while ((t = type[c]) == LET && catenate());\n}\n" always "int evallex() {\n  int c, t;\nagain:\n   do {\n      if ((c = macroid(c)) == EOF_CHAR || c == '\\n') {\n      }\n   } while ((t = type[c]) == LET && catenate());\n}\n"
Line 5159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5159 always 5159
  "int evallex ( ) { int c ; int t ; again : ; do { c = macroid ( c ) ; if ( c == EOF_CHAR || c == '\\n' ) { } t = type [ c ] ; } while ( t == LET && catenate ( ) ) ; }" always "int evallex ( ) { int c ; int t ; again : ; do { c = macroid ( c ) ; if ( c == EOF_CHAR || c == '\\n' ) { } t = type [ c ] ; } while ( t == LET && catenate ( ) ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5159 always 5159
  code always "int evallex() {\n  int c, t;\nagain:\n   do {\n      if ((c = macroid(c)) == EOF_CHAR || c == '\\n') {\n      }\n   } while ((t = type[c]) == LET && catenate());\n}\n"
  true always 1
Line 5164
  106 always 106
  = always "void fun() {\n    unsigned char override[] = {0x01, 0x02};\n    doSomething(override, sizeof(override));\n}\n"
  "void fun() {\n    unsigned char override[] = {0x01, 0x02};\n    doSomething(override, sizeof(override));\n}\n" always "void fun() {\n    unsigned char override[] = {0x01, 0x02};\n    doSomething(override, sizeof(override));\n}\n"
Line 5168
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5168 always 5168
  "void fun ( ) { char override [ 2 ] = { 0x01 , 0x02 } ; doSomething ( override , 2 ) ; }" always "void fun ( ) { char override [ 2 ] = { 0x01 , 0x02 } ; doSomething ( override , 2 ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5168 always 5168
  code always "void fun() {\n    unsigned char override[] = {0x01, 0x02};\n    doSomething(override, sizeof(override));\n}\n"
  true always 1
Line 5173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5173 always 5173
  "namespace A { namespace B { namespace C { int i ; } } }" always "namespace A { namespace B { namespace C { int i ; } } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5173 always 5173
  "namespace A::B::C { int i; }" always "namespace A::B::C { int i; }"
Line 5177
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5177 always 5177
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5177 always 5177
  "namespace ios = boost::iostreams;" always "namespace ios = boost::iostreams;"
Line 5179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5179 always 5179
  "boost :: iostreams :: istream foo ( \"foo\" ) ;" always "boost :: iostreams :: istream foo ( \"foo\" ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5179 always 5179
  "namespace ios = boost::iostreams; ios::istream foo(\"foo\");" always "namespace ios = boost::iostreams; ios::istream foo(\"foo\");"
Line 5181
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5181 always 5181
  "boost :: iostreams :: istream foo ( \"foo\" ) ;" always "boost :: iostreams :: istream foo ( \"foo\" ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5181 always 5181
  "using namespace std; namespace ios = boost::iostreams; ios::istream foo(\"foo\");" always "using namespace std; namespace ios = boost::iostreams; ios::istream foo(\"foo\");"
Line 5183
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5183 always 5183
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5183 always 5183
  "using namespace std; namespace ios = boost::iostreams;" always "using namespace std; namespace ios = boost::iostreams;"
Line 5185
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5185 always 5185
  "namespace NS { boost :: iostreams :: istream foo ( \"foo\" ) ; }" always "namespace NS { boost :: iostreams :: istream foo ( \"foo\" ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5185 always 5185
  "namespace NS { using namespace std; namespace ios = boost::iostreams; ios::istream foo(\"foo\"); }" always "namespace NS { using namespace std; namespace ios = boost::iostreams; ios::istream foo(\"foo\"); }"
Line 5189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5189 always 5189
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5189 always 5189
  "namespace ios = boost::iostreams;\nnamespace ios = boost::iostreams;" always "namespace ios = boost::iostreams;\nnamespace ios = boost::iostreams;"
Line 5191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5191 always 5191
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5191 always 5191
  "namespace ios = boost::iostreams;\nnamespace ios = boost::iostreams;\nnamespace ios = boost::iostreams;" always "namespace ios = boost::iostreams;\nnamespace ios = boost::iostreams;\nnamespace ios = boost::iostreams;"
Line 5193
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5193 always 5193
  "namespace A { namespace B { void foo ( ) { bar ( A :: B :: ab ( ) ) ; } } }" always "namespace A { namespace B { void foo ( ) { bar ( A :: B :: ab ( ) ) ; } } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5193 always 5193
  "namespace A::B {namespace AB = A::B;void foo() {    namespace AB = A::B;    bar(AB::ab());}namespace AB = A::B;}" always "namespace A::B {namespace AB = A::B;void foo() {    namespace AB = A::B;    bar(AB::ab());}namespace AB = A::B;}"
Line 5204
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5204 always 5204
  "namespace A { namespace B { void foo ( ) { bar ( A :: B :: ab ( ) ) ; { baz ( A :: a ( ) ) ; } bar ( A :: B :: ab ( ) ) ; } } }" always "namespace A { namespace B { void foo ( ) { bar ( A :: B :: ab ( ) ) ; { baz ( A :: a ( ) ) ; } bar ( A :: B :: ab ( ) ) ; } } }"
  "namespace A { namespace B { void foo ( ) { bar ( A :: B :: ab ( ) ) ; { baz ( A :: B :: a ( ) ) ; } bar ( A :: B :: ab ( ) ) ; } } }" always "namespace A { namespace B { void foo ( ) { bar ( A :: B :: ab ( ) ) ; { baz ( A :: B :: a ( ) ) ; } bar ( A :: B :: ab ( ) ) ; } } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5204 always 5204
  "namespace A::B {namespace AB = A::B;void foo() {    namespace AB = A::B;    bar(AB::ab());    {         namespace AB = A;         baz(AB::a());    }    bar(AB::ab());}namespace AB = A::B;}" always "namespace A::B {namespace AB = A::B;void foo() {    namespace AB = A::B;    bar(AB::ab());    {         namespace AB = A;         baz(AB::a());    }    bar(AB::ab());}namespace AB = A::B;}"
Line 5221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5221 always 5221
  "namespace external { namespace ns { class A { public: static void f ( const std :: string & json ) ; } ; } } namespace external { namespace ns { void A :: f ( const std :: string & json ) { } } }" always "namespace external { namespace ns { class A { public: static void f ( const std :: string & json ) ; } ; } } namespace external { namespace ns { void A :: f ( const std :: string & json ) { } } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5221 always 5221
  "namespace external::ns {    class A {    public:        static void f(const std::string& json);    };}namespace json = rapidjson;namespace external::ns {    void A::f(const std::string& json) { }}" always "namespace external::ns {    class A {    public:        static void f(const std::string& json);    };}namespace json = rapidjson;namespace external::ns {    void A::f(const std::string& json) { }}"
Line 5243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5243 always 5243
  "void foo ( ) { int maxResults ; maxResults = :: a :: b :: c :: d :: ef :: MAX ; }" always "void foo ( ) { int maxResults ; maxResults = :: a :: b :: c :: d :: ef :: MAX ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5243 always 5243
  "namespace ef = ::a::b::c::d::ef;void foo(){  int maxResults = ::a::b::c::d::ef::MAX;}" always "namespace ef = ::a::b::c::d::ef;void foo(){  int maxResults = ::a::b::c::d::ef::MAX;}"
Line 5256
  "" always ""
Line 5258
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 5259
  code possible {"void foo(int g)\n{\n  int i = 2;\n  if (g) {\n  }\n  if (i > 0) {\n  }\n}\n"@148,"void foo()\n{\n    int i1 = 1;\n    int i2 = 2;\n    int i3 = (i1 + i2) * 3;\n}\n"@149,"void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) {\n        if (*str == 0) goto label;\n    }\n    return;\nlabel:\n    str[i] = 0;\n}\n"@150,"void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) { }\n    return;\n    str[i] = 0;\n}\n"@151,"void foo(int x)\n{\n    int a[10], c = 0;\n    if (x) {\n        a[c] = 0;\n        c++;\n    } else {\n        a[c] = 0;\n    }\n}\n"@152,"void foo()\n{\n    int n = 10;\n    i = (n >> 1);\n}\n"@153,"void foo()\n{\n    int n = 10;\n    i = (n << 1);\n}\n"@154,"void foo()\n{\n    int n = 10;\n    i = (1 << n);\n}\n"@155,"void foo()\n{\n    int n = 10;\n    i = (1 >> n);\n}\n"@156,"void foo() { int n = 10; for (int i = 0; i < n; ++i) { } }"@157}
Line 5260
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytokens.cpp"@148,"cppcheck-2.8/test/testsimplifytokens.cpp"@149,"cppcheck-2.8/test/testsimplifytokens.cpp"@150,"cppcheck-2.8/test/testsimplifytokens.cpp"@151,"cppcheck-2.8/test/testsimplifytokens.cpp"@152,"cppcheck-2.8/test/testsimplifytokens.cpp"@153,"cppcheck-2.8/test/testsimplifytokens.cpp"@154,"cppcheck-2.8/test/testsimplifytokens.cpp"@155,"cppcheck-2.8/test/testsimplifytokens.cpp"@156,"cppcheck-2.8/test/testsimplifytokens.cpp"@157}
  line inconclusive {5733@148,5714@149,5669@150,5694@151,5636@152,5584@153,5595@154,5606@155,5617@156,5566@157}
  "test.cpp" always "test.cpp"
Line 5264
  nullptr always 0
  false always 0
Line 5269
  42 always 42
  = always "void f()\n{\n    int a = 10;\n    if (a);\n}\n"
  "void f()\n{\n    int a = 10;\n    if (a);\n}\n" always "void f()\n{\n    int a = 10;\n    if (a);\n}\n"
Line 5275
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5275 always 5275
  "void f ( ) { int a ; a = 10 ; if ( 10 ) { ; } }" always "void f ( ) { int a ; a = 10 ; if ( 10 ) { ; } }"
  code always "void f()\n{\n    int a = 10;\n    if (a);\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5275 always 5275
Line 5281
  43 always 43
  = always "void f()\n{\n    int a = 10;\n    if (!a);\n}\n"
  "void f()\n{\n    int a = 10;\n    if (!a);\n}\n" always "void f()\n{\n    int a = 10;\n    if (!a);\n}\n"
Line 5287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5287 always 5287
  "void f ( ) { int a ; a = 10 ; if ( ! 10 ) { ; } }" always "void f ( ) { int a ; a = 10 ; if ( ! 10 ) { ; } }"
  code always "void f()\n{\n    int a = 10;\n    if (!a);\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5287 always 5287
Line 5294
  55 always 55
  = always "void f()\n{\n    int a = 10;\n    a = g();\n    if (a);\n}\n"
  "void f()\n{\n    int a = 10;\n    a = g();\n    if (a);\n}\n" always "void f()\n{\n    int a = 10;\n    a = g();\n    if (a);\n}\n"
Line 5301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5301 always 5301
  "void f ( ) { int a ; a = 10 ; a = g ( ) ; if ( a ) { ; } }" always "void f ( ) { int a ; a = 10 ; a = g ( ) ; if ( a ) { ; } }"
  code always "void f()\n{\n    int a = 10;\n    a = g();\n    if (a);\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5301 always 5301
Line 5307
  87 always 87
  = always "void f()\n{\n    int a = 4;\n    while(true){\n    break;\n    a = 10;\n    }\n    if (a);\n}\n"
  "void f()\n{\n    int a = 4;\n    while(true){\n    break;\n    a = 10;\n    }\n    if (a);\n}\n" always "void f()\n{\n    int a = 4;\n    while(true){\n    break;\n    a = 10;\n    }\n    if (a);\n}\n"
Line 5317
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5317 always 5317
  "void f ( ) { int a ; a = 4 ; while ( true ) { break ; a = 10 ; } if ( a ) { ; } }" always "void f ( ) { int a ; a = 4 ; while ( true ) { break ; a = 10 ; } if ( a ) { ; } }"
  code always "void f()\n{\n    int a = 4;\n    while(true){\n    break;\n    a = 10;\n    }\n    if (a);\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5317 always 5317
Line 5323
  45 always 45
  = always "void f()\n{\n    int a = 4;\n    if ( g(a));\n}\n"
  "void f()\n{\n    int a = 4;\n    if ( g(a));\n}\n" always "void f()\n{\n    int a = 4;\n    if ( g(a));\n}\n"
Line 5330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5330 always 5330
  "void f ( ) { int a ; a = 4 ; if ( g ( a ) ) { ; } }" always "void f ( ) { int a ; a = 4 ; if ( g ( a ) ) { ; } }"
  code always "void f()\n{\n    int a = 4;\n    if ( g(a));\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5330 always 5330
Line 5336
  47 always 47
  = always "void f()\n{\n    int a = 4;\n    if ( a = 5 );\n}\n"
  "void f()\n{\n    int a = 4;\n    if ( a = 5 );\n}\n" always "void f()\n{\n    int a = 4;\n    if ( a = 5 );\n}\n"
Line 5342
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5342 always 5342
  "void f ( ) { int a ; a = 4 ; if ( a = 5 ) { ; } }" always "void f ( ) { int a ; a = 4 ; if ( a = 5 ) { ; } }"
  code always "void f()\n{\n    int a = 4;\n    if ( a = 5 );\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5342 always 5342
Line 5348
  61 always 61
  = always "void f()\n{\n    char str[2];    int a = 4;\n    str[a] = 0;\n}\n"
  "void f()\n{\n    char str[2];    int a = 4;\n    str[a] = 0;\n}\n" always "void f()\n{\n    char str[2];    int a = 4;\n    str[a] = 0;\n}\n"
Line 5355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5355 always 5355
  "void f ( ) { char str [ 2 ] ; int a ; a = 4 ; str [ 4 ] = 0 ; }" always "void f ( ) { char str [ 2 ] ; int a ; a = 4 ; str [ 4 ] = 0 ; }"
  code always "void f()\n{\n    char str[2];    int a = 4;\n    str[a] = 0;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5355 always 5355
Line 5361
  68 always 68
  = always "void foo()\n{\n    int i = 22;\n    abc[i++] = 1;\n    abc[++i] = 2;\n}\n"
  "void foo()\n{\n    int i = 22;\n    abc[i++] = 1;\n    abc[++i] = 2;\n}\n" always "void foo()\n{\n    int i = 22;\n    abc[i++] = 1;\n    abc[++i] = 2;\n}\n"
Line 5368
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5368 always 5368
  "void foo ( ) { int i ; i = 24 ; abc [ 22 ] = 1 ; abc [ 24 ] = 2 ; }" always "void foo ( ) { int i ; i = 24 ; abc [ 22 ] = 1 ; abc [ 24 ] = 2 ; }"
  code always "void foo()\n{\n    int i = 22;\n    abc[i++] = 1;\n    abc[++i] = 2;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5368 always 5368
Line 5374
  57 always 57
  = always "void foo()\n{\n    int i = 22;\n    i++;\n    abc[i] = 0;\n}\n"
  "void foo()\n{\n    int i = 22;\n    i++;\n    abc[i] = 0;\n}\n" always "void foo()\n{\n    int i = 22;\n    i++;\n    abc[i] = 0;\n}\n"
Line 5381
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5381 always 5381
  "void foo ( ) { int i ; i = 23 ; abc [ 23 ] = 0 ; }" always "void foo ( ) { int i ; i = 23 ; abc [ 23 ] = 0 ; }"
  code always "void foo()\n{\n    int i = 22;\n    i++;\n    abc[i] = 0;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5381 always 5381
Line 5387
  63 always 63
  = always "void foo()\n{\n    int a = 1, b = 2;\n    if (a < b)\n        ;\n}\n"
  "void foo()\n{\n    int a = 1, b = 2;\n    if (a < b)\n        ;\n}\n" always "void foo()\n{\n    int a = 1, b = 2;\n    if (a < b)\n        ;\n}\n"
Line 5394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5394 always 5394
  "void foo ( ) { int a ; a = 1 ; int b ; b = 2 ; if ( 1 < 2 ) { ; } }" always "void foo ( ) { int a ; a = 1 ; int b ; b = 2 ; if ( 1 < 2 ) { ; } }"
  code always "void foo()\n{\n    int a = 1, b = 2;\n    if (a < b)\n        ;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5394 always 5394
Line 5401
  81 always 81
  = always "void f()\n{\n  bool b=false;\n\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n"
  "void f()\n{\n  bool b=false;\n\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n" always "void f()\n{\n  bool b=false;\n\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n"
Line 5415
  "void f ( ) { bool b ; b = false ; { b = true ; }" always "void f ( ) { bool b ; b = false ; { b = true ; }"
Line 5419
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5419 always 5419
  " if ( true ) { a ( ) ; } }" always " if ( true ) { a ( ) ; } }"
  " if ( b ) { a ( ) ; } }" always " if ( b ) { a ( ) ; } }"
  code always "void f()\n{\n  bool b=false;\n\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5419 always 5419
Line 5427
  97 always 97
  = always "void f()\n{\n  bool b=false;\n  { b = false; }\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n"
  "void f()\n{\n  bool b=false;\n  { b = false; }\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n" always "void f()\n{\n  bool b=false;\n  { b = false; }\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n"
Line 5441
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5441 always 5441
  "void f ( ) { bool b ; b = false ; { b = false ; } { b = true ; } if ( true ) { a ( ) ; } }" always "void f ( ) { bool b ; b = false ; { b = false ; } { b = true ; } if ( true ) { a ( ) ; } }"
  "void f ( ) { bool b ; b = false ; { b = false ; } { b = true ; } if ( b ) { a ( ) ; } }" always "void f ( ) { bool b ; b = false ; { b = false ; } { b = true ; } if ( b ) { a ( ) ; } }"
  code always "void f()\n{\n  bool b=false;\n  { b = false; }\n  {\n    b = true;\n  }\n\n  if( b )\n  {\n    a();\n  }\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5441 always 5441
Line 5448
  86 always 86
  = always "void f()\n{\n  int b=0;\n  b = 1;\n  for( int i = 0; i < 10; i++ )  {\n  }\n\n  return b;\n}\n"
  "void f()\n{\n  int b=0;\n  b = 1;\n  for( int i = 0; i < 10; i++ )  {\n  }\n\n  return b;\n}\n" always "void f()\n{\n  int b=0;\n  b = 1;\n  for( int i = 0; i < 10; i++ )  {\n  }\n\n  return b;\n}\n"
Line 5459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5459 always 5459
  "void f ( ) { int b ; b = 0 ; b = 1 ; for ( int i = 0 ; i < 10 ; i ++ ) { } return 1 ; }" always "void f ( ) { int b ; b = 0 ; b = 1 ; for ( int i = 0 ; i < 10 ; i ++ ) { } return 1 ; }"
  code always "void f()\n{\n  int b=0;\n  b = 1;\n  for( int i = 0; i < 10; i++ )  {\n  }\n\n  return b;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5459 always 5459
Line 5466
  48 always 48
  = always "const int foo = 0;\nint main()\n{\n  int foo=0;\n}\n"
  "const int foo = 0;\nint main()\n{\n  int foo=0;\n}\n" always "const int foo = 0;\nint main()\n{\n  int foo=0;\n}\n"
Line 5472
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5472 always 5472
  "int main ( ) { int foo ; foo = 0 ; }" always "int main ( ) { int foo ; foo = 0 ; }"
  code always "const int foo = 0;\nint main()\n{\n  int foo=0;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5472 always 5472
Line 5478
  48 always 48
  = always "void f()\n{\n    int i = 10;\n    while(--i) {}\n}\n"
  "void f()\n{\n    int i = 10;\n    while(--i) {}\n}\n" always "void f()\n{\n    int i = 10;\n    while(--i) {}\n}\n"
Line 5484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5484 always 5484
  "void f ( ) { int i ; i = 10 ; while ( -- i ) { } }" always "void f ( ) { int i ; i = 10 ; while ( -- i ) { } }"
  code always "void f()\n{\n    int i = 10;\n    while(--i) {}\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5484 always 5484
Line 5491
  64 always 64
  = always "void f ( ) { int n ; n = 1 ; do { ++ n ; } while ( n < 10 ) ; }"
  "void f ( ) { int n ; n = 1 ; do { ++ n ; } while ( n < 10 ) ; }" always "void f ( ) { int n ; n = 1 ; do { ++ n ; } while ( n < 10 ) ; }"
Line 5492
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5492 always 5492
  code always "void f ( ) { int n ; n = 1 ; do { ++ n ; } while ( n < 10 ) ; }"
  code always "void f ( ) { int n ; n = 1 ; do { ++ n ; } while ( n < 10 ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5492 always 5492
Line 5497
  63 always 63
  = always "int main()\n{\n  int x=5;\n  std::cout << 10 / x << std::endl;\n}\n"
  "int main()\n{\n  int x=5;\n  std::cout << 10 / x << std::endl;\n}\n" always "int main()\n{\n  int x=5;\n  std::cout << 10 / x << std::endl;\n}\n"
Line 5503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5503 always 5503
  "int main ( ) { int x ; x = 5 ; std :: cout << 10 / 5 << std :: endl ; }" always "int main ( ) { int x ; x = 5 ; std :: cout << 10 / 5 << std :: endl ; }"
  code always "int main()\n{\n  int x=5;\n  std::cout << 10 / x << std::endl;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5503 always 5503
Line 5509
  71 always 71
  = always "int main()\n{\n  int x=5;\n  std::cout << x / ( x == 1 ) << std::endl;\n}\n"
  "int main()\n{\n  int x=5;\n  std::cout << x / ( x == 1 ) << std::endl;\n}\n" always "int main()\n{\n  int x=5;\n  std::cout << x / ( x == 1 ) << std::endl;\n}\n"
Line 5515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5515 always 5515
  "int main ( ) { int x ; x = 5 ; std :: cout << 5 / ( 5 == 1 ) << std :: endl ; }" always "int main ( ) { int x ; x = 5 ; std :: cout << 5 / ( 5 == 1 ) << std :: endl ; }"
  code always "int main()\n{\n  int x=5;\n  std::cout << x / ( x == 1 ) << std::endl;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5515 always 5515
Line 5523
  43 always 43
  = always "void f ( ) { int n = 1; DISPATCH(while); }"
  "void f ( ) { int n = 1; DISPATCH(while); }" always "void f ( ) { int n = 1; DISPATCH(while); }"
Line 5524
  code always "void f ( ) { int n = 1; DISPATCH(while); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5524 always 5524
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5524 always 5524
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5524 always 5524
  false always 0
Line 5529
  56 always 56
  = always "void f ( ) { char *s = malloc(100);mp_ptr p = s; p++; }"
  "void f ( ) { char *s = malloc(100);mp_ptr p = s; p++; }" always "void f ( ) { char *s = malloc(100);mp_ptr p = s; p++; }"
Line 5530
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5530 always 5530
  "void f ( ) { char * s ; s = malloc ( 100 ) ; mp_ptr p ; p = s ; p ++ ; }" always "void f ( ) { char * s ; s = malloc ( 100 ) ; mp_ptr p ; p = s ; p ++ ; }"
  code always "void f ( ) { char *s = malloc(100);mp_ptr p = s; p++; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5530 always 5530
Line 5536
  56 always 56
  = always "void f ( ) { char *s = malloc(100);mp_ptr p = s; ++p; }"
  "void f ( ) { char *s = malloc(100);mp_ptr p = s; ++p; }" always "void f ( ) { char *s = malloc(100);mp_ptr p = s; ++p; }"
Line 5537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5537 always 5537
  "void f ( ) { char * s ; s = malloc ( 100 ) ; mp_ptr p ; p = s ; ++ p ; }" always "void f ( ) { char * s ; s = malloc ( 100 ) ; mp_ptr p ; p = s ; ++ p ; }"
  code always "void f ( ) { char *s = malloc(100);mp_ptr p = s; ++p; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5537 always 5537
Line 5543
  73 always 73
  = always "void f ( ) { int i=0; do { if (i>0) { a(); } i=b(); } while (i != 12); }"
  "void f ( ) { int i=0; do { if (i>0) { a(); } i=b(); } while (i != 12); }" always "void f ( ) { int i=0; do { if (i>0) { a(); } i=b(); } while (i != 12); }"
Line 5544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5544 always 5544
  "void f ( ) { int i ; i = 0 ; do { if ( i > 0 ) { a ( ) ; } i = b ( ) ; } while ( i != 12 ) ; }" always "void f ( ) { int i ; i = 0 ; do { if ( i > 0 ) { a ( ) ; } i = b ( ) ; } while ( i != 12 ) ; }"
  code always "void f ( ) { int i=0; do { if (i>0) { a(); } i=b(); } while (i != 12); }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5544 always 5544
Line 5550
  68 always 68
  = always "void f()\n{\n    int i = 0;\n    if (x) {\n        if (i) i=0;\n    }\n}\n"
  "void f()\n{\n    int i = 0;\n    if (x) {\n        if (i) i=0;\n    }\n}\n" always "void f()\n{\n    int i = 0;\n    if (x) {\n        if (i) i=0;\n    }\n}\n"
Line 5558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5558 always 5558
  "void f ( ) { int i ; i = 0 ; if ( x ) { if ( 0 ) { i = 0 ; } } }" always "void f ( ) { int i ; i = 0 ; if ( x ) { if ( 0 ) { i = 0 ; } } }"
  code always "void f()\n{\n    int i = 0;\n    if (x) {\n        if (i) i=0;\n    }\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5558 always 5558
Line 5564
  59 always 59
  = always "void foo() { int n = 10; for (int i = 0; i < n; ++i) { } }"
  "void foo() { int n = 10; for (int i = 0; i < n; ++i) { } }" always "void foo() { int n = 10; for (int i = 0; i < n; ++i) { } }"
Line 5566
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5566 always 5566
  "void foo ( ) { int n ; n = 10 ; for ( int i = 0 ; i < 10 ; ++ i ) { } }" always "void foo ( ) { int n ; n = 10 ; for ( int i = 0 ; i < 10 ; ++ i ) { } }"
  code always "void foo() { int n = 10; for (int i = 0; i < n; ++i) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5566 always 5566
Line 5570
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5570 always 5570
  "void foo ( int i ) { int n ; n = i ; for ( i = 0 ; i < n ; ++ i ) { } }" always "void foo ( int i ) { int n ; n = i ; for ( i = 0 ; i < n ; ++ i ) { } }"
  "void foo(int i) { int n = i; for (i = 0; i < n; ++i) { } }" always "void foo(int i) { int n = i; for (i = 0; i < n; ++i) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5570 always 5570
Line 5578
  50 always 50
  = always "void foo()\n{\n    int n = 10;\n    i = (n >> 1);\n}\n"
  "void foo()\n{\n    int n = 10;\n    i = (n >> 1);\n}\n" always "void foo()\n{\n    int n = 10;\n    i = (n >> 1);\n}\n"
Line 5584
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5584 always 5584
  "void foo ( ) { int n ; n = 10 ; i = 10 >> 1 ; }" always "void foo ( ) { int n ; n = 10 ; i = 10 >> 1 ; }"
  code always "void foo()\n{\n    int n = 10;\n    i = (n >> 1);\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5584 always 5584
Line 5589
  50 always 50
  = always "void foo()\n{\n    int n = 10;\n    i = (n << 1);\n}\n"
  "void foo()\n{\n    int n = 10;\n    i = (n << 1);\n}\n" always "void foo()\n{\n    int n = 10;\n    i = (n << 1);\n}\n"
Line 5595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5595 always 5595
  "void foo ( ) { int n ; n = 10 ; i = 10 << 1 ; }" always "void foo ( ) { int n ; n = 10 ; i = 10 << 1 ; }"
  code always "void foo()\n{\n    int n = 10;\n    i = (n << 1);\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5595 always 5595
Line 5600
  50 always 50
  = always "void foo()\n{\n    int n = 10;\n    i = (1 << n);\n}\n"
  "void foo()\n{\n    int n = 10;\n    i = (1 << n);\n}\n" always "void foo()\n{\n    int n = 10;\n    i = (1 << n);\n}\n"
Line 5606
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5606 always 5606
  "void foo ( ) { int n ; n = 10 ; i = 1 << 10 ; }" always "void foo ( ) { int n ; n = 10 ; i = 1 << 10 ; }"
  code always "void foo()\n{\n    int n = 10;\n    i = (1 << n);\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5606 always 5606
Line 5611
  50 always 50
  = always "void foo()\n{\n    int n = 10;\n    i = (1 >> n);\n}\n"
  "void foo()\n{\n    int n = 10;\n    i = (1 >> n);\n}\n" always "void foo()\n{\n    int n = 10;\n    i = (1 >> n);\n}\n"
Line 5617
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5617 always 5617
  "void foo ( ) { int n ; n = 10 ; i = 1 >> 10 ; }" always "void foo ( ) { int n ; n = 10 ; i = 1 >> 10 ; }"
  code always "void foo()\n{\n    int n = 10;\n    i = (1 >> n);\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5617 always 5617
Line 5625
  124 always 124
  = always "void foo(int x)\n{\n    int a[10], c = 0;\n    if (x) {\n        a[c] = 0;\n        c++;\n    } else {\n        a[c] = 0;\n    }\n}\n"
  "void foo(int x)\n{\n    int a[10], c = 0;\n    if (x) {\n        a[c] = 0;\n        c++;\n    } else {\n        a[c] = 0;\n    }\n}\n" always "void foo(int x)\n{\n    int a[10], c = 0;\n    if (x) {\n        a[c] = 0;\n        c++;\n    } else {\n        a[c] = 0;\n    }\n}\n"
Line 5636
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5636 always 5636
  "void foo ( int x ) { int a [ 10 ] ; int c ; c = 0 ; if ( x ) { a [ 0 ] = 0 ; c = 1 ; } else { a [ 0 ] = 0 ; } }" always "void foo ( int x ) { int a [ 10 ] ; int c ; c = 0 ; if ( x ) { a [ 0 ] = 0 ; c = 1 ; } else { a [ 0 ] = 0 ; } }"
  "void foo ( int x ) { int a [ 10 ] ; int c ; c = 0 ; if ( x ) { a [ 0 ] = 0 ; c ++ ; } else { a [ c ] = 0 ; } }" always "void foo ( int x ) { int a [ 10 ] ; int c ; c = 0 ; if ( x ) { a [ 0 ] = 0 ; c ++ ; } else { a [ c ] = 0 ; } }"
  code always "void foo(int x)\n{\n    int a[10], c = 0;\n    if (x) {\n        a[c] = 0;\n        c++;\n    } else {\n        a[c] = 0;\n    }\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5636 always 5636
Line 5657
  137 always 137
  = always "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) {\n        if (*str == 0) goto label;\n    }\n    return;\nlabel:\n    str[i] = 0;\n}\n"
  "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) {\n        if (*str == 0) goto label;\n    }\n    return;\nlabel:\n    str[i] = 0;\n}\n" always "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) {\n        if (*str == 0) goto label;\n    }\n    return;\nlabel:\n    str[i] = 0;\n}\n"
Line 5669
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5669 always 5669
  "void foo ( char * str ) { int i ; for ( i = 0 ; i < 10 ; ++ i ) { if ( * str == 0 ) { goto label ; } } return ; label : ; str [ i ] = 0 ; }" always "void foo ( char * str ) { int i ; for ( i = 0 ; i < 10 ; ++ i ) { if ( * str == 0 ) { goto label ; } } return ; label : ; str [ i ] = 0 ; }"
  code always "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) {\n        if (*str == 0) goto label;\n    }\n    return;\nlabel:\n    str[i] = 0;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5669 always 5669
Line 5685
  91 always 91
  = always "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) { }\n    return;\n    str[i] = 0;\n}\n"
  "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) { }\n    return;\n    str[i] = 0;\n}\n" always "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) { }\n    return;\n    str[i] = 0;\n}\n"
Line 5694
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5694 always 5694
  "void foo ( char * str ) { int i ; for ( i = 0 ; i < 10 ; ++ i ) { } return ; str [ i ] = 0 ; }" always "void foo ( char * str ) { int i ; for ( i = 0 ; i < 10 ; ++ i ) { } return ; str [ i ] = 0 ; }"
  code always "void foo(char *str)\n{\n    int i;\n    for (i=0;i<10;++i) { }\n    return;\n    str[i] = 0;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5694 always 5694
Line 5708
  76 always 76
  = always "void foo()\n{\n    int i1 = 1;\n    int i2 = 2;\n    int i3 = (i1 + i2) * 3;\n}\n"
  "void foo()\n{\n    int i1 = 1;\n    int i2 = 2;\n    int i3 = (i1 + i2) * 3;\n}\n" always "void foo()\n{\n    int i1 = 1;\n    int i2 = 2;\n    int i3 = (i1 + i2) * 3;\n}\n"
Line 5714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5714 always 5714
  "void foo ( ) { int i1 ; i1 = 1 ; int i2 ; i2 = 2 ; int i3 ; i3 = ( 1 + 2 ) * 3 ; }" always "void foo ( ) { int i1 ; i1 = 1 ; int i2 ; i2 = 2 ; int i3 ; i3 = ( 1 + 2 ) * 3 ; }"
  code always "void foo()\n{\n    int i1 = 1;\n    int i2 = 2;\n    int i3 = (i1 + i2) * 3;\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5714 always 5714
Line 5725
  68 always 68
  = always "void foo(int g)\n{\n  int i = 2;\n  if (g) {\n  }\n  if (i > 0) {\n  }\n}\n"
  "void foo(int g)\n{\n  int i = 2;\n  if (g) {\n  }\n  if (i > 0) {\n  }\n}\n" always "void foo(int g)\n{\n  int i = 2;\n  if (g) {\n  }\n  if (i > 0) {\n  }\n}\n"
Line 5733
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5733 always 5733
  "void foo ( int g ) { int i ; i = 2 ; if ( g ) { } if ( 2 > 0 ) { } }" always "void foo ( int g ) { int i ; i = 2 ; if ( g ) { } if ( 2 > 0 ) { } }"
  code always "void foo(int g)\n{\n  int i = 2;\n  if (g) {\n  }\n  if (i > 0) {\n  }\n}\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5733 always 5733
Line 5745
  69 always 69
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h + i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h + i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h + i;\n}\n"
Line 5751
  83 always 83
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 + v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 + v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 + v@2 ;\n6: }\n"
Line 5759
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5759 always 5759
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 + v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5759 always 5759
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h + i;\n}\n"
  true always 1
Line 5763
  69 always 69
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h - i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h - i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h - i;\n}\n"
Line 5769
  83 always 83
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 - v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 - v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 - v@2 ;\n6: }\n"
Line 5777
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5777 always 5777
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 - v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5777 always 5777
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h - i;\n}\n"
  true always 1
Line 5781
  69 always 69
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h * i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h * i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h * i;\n}\n"
Line 5787
  83 always 83
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 * v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 * v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 * v@2 ;\n6: }\n"
Line 5795
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5795 always 5795
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 * v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5795 always 5795
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h * i;\n}\n"
  true always 1
Line 5799
  69 always 69
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h / i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h / i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h / i;\n}\n"
Line 5805
  83 always 83
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 / v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 / v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 / v@2 ;\n6: }\n"
Line 5813
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5813 always 5813
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 / v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5813 always 5813
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h / i;\n}\n"
  true always 1
Line 5817
  69 always 69
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h & i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h & i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h & i;\n}\n"
Line 5823
  83 always 83
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 & v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 & v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 & v@2 ;\n6: }\n"
Line 5831
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5831 always 5831
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 & v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5831 always 5831
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h & i;\n}\n"
  true always 1
Line 5835
  69 always 69
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h | i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h | i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h | i;\n}\n"
Line 5841
  83 always 83
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 | v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 | v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 | v@2 ;\n6: }\n"
Line 5849
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5849 always 5849
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 | v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5849 always 5849
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h | i;\n}\n"
  true always 1
Line 5853
  69 always 69
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h ^ i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h ^ i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h ^ i;\n}\n"
Line 5859
  83 always 83
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 ^ v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 ^ v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 ^ v@2 ;\n6: }\n"
Line 5867
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5867 always 5867
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 ^ v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5867 always 5867
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h ^ i;\n}\n"
  true always 1
Line 5871
  69 always 69
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h % i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h % i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h % i;\n}\n"
Line 5877
  83 always 83
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 % v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 % v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 % v@2 ;\n6: }\n"
Line 5885
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5885 always 5885
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 % v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5885 always 5885
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h % i;\n}\n"
  true always 1
Line 5889
  70 always 70
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >> i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >> i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >> i;\n}\n"
Line 5895
  84 always 84
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >> v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >> v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >> v@2 ;\n6: }\n"
Line 5903
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5903 always 5903
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >> v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5903 always 5903
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >> i;\n}\n"
  true always 1
Line 5907
  70 always 70
  = always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h << i;\n}\n"
  "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h << i;\n}\n" always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h << i;\n}\n"
Line 5913
  84 always 84
  = always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 << v@2 ;\n6: }\n"
  "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 << v@2 ;\n6: }\n" always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 << v@2 ;\n6: }\n"
Line 5921
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5921 always 5921
  expected always "\n\n##file 0\n1: int foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 << v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5921 always 5921
  code always "int foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h << i;\n}\n"
  true always 1
Line 5925
  71 always 71
  = always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h == i;\n}\n"
  "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h == i;\n}\n" always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h == i;\n}\n"
Line 5931
  85 always 85
  = always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 == v@2 ;\n6: }\n"
  "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 == v@2 ;\n6: }\n" always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 == v@2 ;\n6: }\n"
Line 5939
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5939 always 5939
  expected always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 == v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5939 always 5939
  code always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h == i;\n}\n"
  true always 1
Line 5943
  71 always 71
  = always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h != i;\n}\n"
  "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h != i;\n}\n" always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h != i;\n}\n"
Line 5949
  85 always 85
  = always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 != v@2 ;\n6: }\n"
  "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 != v@2 ;\n6: }\n" always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 != v@2 ;\n6: }\n"
Line 5957
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5957 always 5957
  expected always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 != v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5957 always 5957
  code always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h != i;\n}\n"
  true always 1
Line 5961
  70 always 70
  = always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h > i;\n}\n"
  "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h > i;\n}\n" always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h > i;\n}\n"
Line 5967
  84 always 84
  = always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 > v@2 ;\n6: }\n"
  "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 > v@2 ;\n6: }\n" always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 > v@2 ;\n6: }\n"
Line 5975
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5975 always 5975
  expected always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 > v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5975 always 5975
  code always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h > i;\n}\n"
  true always 1
Line 5979
  71 always 71
  = always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >= i;\n}\n"
  "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >= i;\n}\n" always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >= i;\n}\n"
Line 5985
  85 always 85
  = always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >= v@2 ;\n6: }\n"
  "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >= v@2 ;\n6: }\n" always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >= v@2 ;\n6: }\n"
Line 5993
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5993 always 5993
  expected always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 >= v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  5993 always 5993
  code always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h >= i;\n}\n"
  true always 1
Line 5997
  70 always 70
  = always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h < i;\n}\n"
  "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h < i;\n}\n" always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h < i;\n}\n"
Line 6003
  84 always 84
  = always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 < v@2 ;\n6: }\n"
  "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 < v@2 ;\n6: }\n" always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 < v@2 ;\n6: }\n"
Line 6011
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6011 always 6011
  expected always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 < v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6011 always 6011
  code always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h < i;\n}\n"
  true always 1
Line 6015
  71 always 71
  = always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h <= i;\n}\n"
  "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h <= i;\n}\n" always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h <= i;\n}\n"
Line 6021
  85 always 85
  = always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 <= v@2 ;\n6: }\n"
  "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 <= v@2 ;\n6: }\n" always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 <= v@2 ;\n6: }\n"
Line 6029
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6029 always 6029
  expected always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 <= v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6029 always 6029
  code always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h <= i;\n}\n"
  true always 1
Line 6033
  71 always 71
  = always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h && i;\n}\n"
  "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h && i;\n}\n" always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h && i;\n}\n"
Line 6039
  85 always 85
  = always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 && v@2 ;\n6: }\n"
  "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 && v@2 ;\n6: }\n" always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 && v@2 ;\n6: }\n"
Line 6047
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6047 always 6047
  expected always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 && v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6047 always 6047
  code always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h && i;\n}\n"
  true always 1
Line 6051
  71 always 71
  = always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h || i;\n}\n"
  "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h || i;\n}\n" always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h || i;\n}\n"
Line 6057
  85 always 85
  = always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 || v@2 ;\n6: }\n"
  "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 || v@2 ;\n6: }\n" always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 || v@2 ;\n6: }\n"
Line 6065
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6065 always 6065
  expected always "\n\n##file 0\n1: bool foo ( int u@1 , int v@2 )\n2: {\n3:\n4:\n5: return u@1 || v@2 ;\n6: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6065 always 6065
  code always "bool foo(int u, int v)\n{\n  int h = u;\n  int i = v;\n  return h || i;\n}\n"
  true always 1
Line 6070
  105 always 105
  = always "int foo() {\n  iterator it1 = ints.begin();\n  iterator it2 = it1;\n  for (++it2;it2!=ints.end();++it2);\n}\n"
  "int foo() {\n  iterator it1 = ints.begin();\n  iterator it2 = it1;\n  for (++it2;it2!=ints.end();++it2);\n}\n" always "int foo() {\n  iterator it1 = ints.begin();\n  iterator it2 = it1;\n  for (++it2;it2!=ints.end();++it2);\n}\n"
Line 6075
  137 always 137
  = always "int foo ( ) {\niterator it1 ; it1 = ints . begin ( ) ;\niterator it2 ; it2 = it1 ;\nfor ( ++ it2 ; it2 != ints . end ( ) ; ++ it2 ) { ; }\n}"
  "int foo ( ) {\niterator it1 ; it1 = ints . begin ( ) ;\niterator it2 ; it2 = it1 ;\nfor ( ++ it2 ; it2 != ints . end ( ) ; ++ it2 ) { ; }\n}" always "int foo ( ) {\niterator it1 ; it1 = ints . begin ( ) ;\niterator it2 ; it2 = it1 ;\nfor ( ++ it2 ; it2 != ints . end ( ) ; ++ it2 ) { ; }\n}"
Line 6080
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6080 always 6080
  expected always "int foo ( ) {\niterator it1 ; it1 = ints . begin ( ) ;\niterator it2 ; it2 = it1 ;\nfor ( ++ it2 ; it2 != ints . end ( ) ; ++ it2 ) { ; }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6080 always 6080
  code always "int foo() {\n  iterator it1 = ints.begin();\n  iterator it2 = it1;\n  for (++it2;it2!=ints.end();++it2);\n}\n"
  true always 1
Line 6084
  84 always 84
  = always "void foo(const char str[]) {\n    const char *p = str;\n    if (p[0] == 0) {\n    }\n}\n"
  "void foo(const char str[]) {\n    const char *p = str;\n    if (p[0] == 0) {\n    }\n}\n" always "void foo(const char str[]) {\n    const char *p = str;\n    if (p[0] == 0) {\n    }\n}\n"
Line 6089
  89 always 89
  = always "void foo ( const char str [ ] ) {\nconst char * p ; p = str ;\nif ( str [ 0 ] == 0 ) {\n}\n}"
  "void foo ( const char str [ ] ) {\nconst char * p ; p = str ;\nif ( str [ 0 ] == 0 ) {\n}\n}" always "void foo ( const char str [ ] ) {\nconst char * p ; p = str ;\nif ( str [ 0 ] == 0 ) {\n}\n}"
Line 6094
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6094 always 6094
  expected always "void foo ( const char str [ ] ) {\nconst char * p ; p = str ;\nif ( str [ 0 ] == 0 ) {\n}\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6094 always 6094
  code always "void foo(const char str[]) {\n    const char *p = str;\n    if (p[0] == 0) {\n    }\n}\n"
  true always 1
Line 6099
  51 always 51
  = always "void foo() {\n    const int x = 0;\n    bar(0,x);\n}\n"
  "void foo() {\n    const int x = 0;\n    bar(0,x);\n}\n" always "void foo() {\n    const int x = 0;\n    bar(0,x);\n}\n"
Line 6103
  34 always 34
  = always "void foo ( ) {\n\nbar ( 0 , 0 ) ;\n}"
  "void foo ( ) {\n\nbar ( 0 , 0 ) ;\n}" always "void foo ( ) {\n\nbar ( 0 , 0 ) ;\n}"
Line 6104
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6104 always 6104
  expected always "void foo ( ) {\n\nbar ( 0 , 0 ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6104 always 6104
  code always "void foo() {\n    const int x = 0;\n    bar(0,x);\n}\n"
  true always 1
Line 6108
  41 always 41
  = always "static int const SZ = 22; char str[SZ];\n"
  "static int const SZ = 22; char str[SZ];\n" always "static int const SZ = 22; char str[SZ];\n"
Line 6109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6109 always 6109
  "char str [ 22 ] ;" always "char str [ 22 ] ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6109 always 6109
  code always "static int const SZ = 22; char str[SZ];\n"
  true always 1
Line 6114
  74 always 74
  = always "static void foo(struct Foo *foo) {\n    foo->a = 23;\n    x[foo->a] = 0;\n}\n"
  "static void foo(struct Foo *foo) {\n    foo->a = 23;\n    x[foo->a] = 0;\n}\n" always "static void foo(struct Foo *foo) {\n    foo->a = 23;\n    x[foo->a] = 0;\n}\n"
Line 6118
  71 always 71
  = always "static void foo ( struct Foo * foo ) {\nfoo . a = 23 ;\nx [ 23 ] = 0 ;\n}"
  "static void foo ( struct Foo * foo ) {\nfoo . a = 23 ;\nx [ 23 ] = 0 ;\n}" always "static void foo ( struct Foo * foo ) {\nfoo . a = 23 ;\nx [ 23 ] = 0 ;\n}"
Line 6122
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6122 always 6122
  expected always "static void foo ( struct Foo * foo ) {\nfoo . a = 23 ;\nx [ 23 ] = 0 ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6122 always 6122
  code always "static void foo(struct Foo *foo) {\n    foo->a = 23;\n    x[foo->a] = 0;\n}\n"
  true always 1
Line 6126
  80 always 80
  = always "void f() {\n    int x = 10;\n    do { cin >> x; } while (x > 5);\n    a[x] = 0;\n}\n"
  "void f() {\n    int x = 10;\n    do { cin >> x; } while (x > 5);\n    a[x] = 0;\n}\n" always "void f() {\n    int x = 10;\n    do { cin >> x; } while (x > 5);\n    a[x] = 0;\n}\n"
Line 6131
  82 always 82
  = always "void f ( ) {\nint x ; x = 10 ;\ndo { cin >> x ; } while ( x > 5 ) ;\na [ x ] = 0 ;\n}"
  "void f ( ) {\nint x ; x = 10 ;\ndo { cin >> x ; } while ( x > 5 ) ;\na [ x ] = 0 ;\n}" always "void f ( ) {\nint x ; x = 10 ;\ndo { cin >> x ; } while ( x > 5 ) ;\na [ x ] = 0 ;\n}"
Line 6136
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6136 always 6136
  expected always "void f ( ) {\nint x ; x = 10 ;\ndo { cin >> x ; } while ( x > 5 ) ;\na [ x ] = 0 ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6136 always 6136
  code always "void f() {\n    int x = 10;\n    do { cin >> x; } while (x > 5);\n    a[x] = 0;\n}\n"
  true always 1
Line 6141
  82 always 82
  = always "int f() {    int x = 0;    if (x == 0) {        return 0;    }    return 10 / x;}"
  "int f() {    int x = 0;    if (x == 0) {        return 0;    }    return 10 / x;}" always "int f() {    int x = 0;    if (x == 0) {        return 0;    }    return 10 / x;}"
Line 6148
  45 always 45
  = always "int f ( ) { int x ; x = 0 ; { return 0 ; } }"
  "int f ( ) { int x ; x = 0 ; { return 0 ; } }" always "int f ( ) { int x ; x = 0 ; { return 0 ; } }"
Line 6149
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6149 always 6149
  expected always "int f ( ) { int x ; x = 0 ; { return 0 ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6149 always 6149
  code always "int f() {    int x = 0;    if (x == 0) {        return 0;    }    return 10 / x;}"
  true always 1
Line 6154
  57 always 57
  = always "void f() {    const char *q = \"hello\";    strcpy(p, q);}"
  "void f() {    const char *q = \"hello\";    strcpy(p, q);}" always "void f() {    const char *q = \"hello\";    strcpy(p, q);}"
Line 6158
  71 always 71
  = always "void f ( ) { const char * q ; q = \"hello\" ; strcpy ( p , \"hello\" ) ; }"
  "void f ( ) { const char * q ; q = \"hello\" ; strcpy ( p , \"hello\" ) ; }" always "void f ( ) { const char * q ; q = \"hello\" ; strcpy ( p , \"hello\" ) ; }"
Line 6159
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6159 always 6159
  expected always "void f ( ) { const char * q ; q = \"hello\" ; strcpy ( p , \"hello\" ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6159 always 6159
  code always "void f() {    const char *q = \"hello\";    strcpy(p, q);}"
  true always 1
Line 6162
  57 always 57
  = always "void f() {  char buf[10] = \"ab\";    memset(buf, 0, 10);}"
  "void f() {  char buf[10] = \"ab\";    memset(buf, 0, 10);}" always "void f() {  char buf[10] = \"ab\";    memset(buf, 0, 10);}"
Line 6166
  66 always 66
  = always "void f ( ) { char buf [ 10 ] = \"ab\" ; memset ( buf , 0 , 10 ) ; }"
  "void f ( ) { char buf [ 10 ] = \"ab\" ; memset ( buf , 0 , 10 ) ; }" always "void f ( ) { char buf [ 10 ] = \"ab\" ; memset ( buf , 0 , 10 ) ; }"
Line 6167
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6167 always 6167
  expected2 always "void f ( ) { char buf [ 10 ] = \"ab\" ; memset ( buf , 0 , 10 ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6167 always 6167
  code2 always "void f() {  char buf[10] = \"ab\";    memset(buf, 0, 10);}"
  true always 1
Line 6172
  143 always 143
  = always "void f() {\n    double x = 0;\n    for (int iter=0; iter<42; iter++) {\n        int EvaldF = 1;\n        if (EvaldF)\n            Eval (x);\n    }\n}"
  "void f() {\n    double x = 0;\n    for (int iter=0; iter<42; iter++) {\n        int EvaldF = 1;\n        if (EvaldF)\n            Eval (x);\n    }\n}" always "void f() {\n    double x = 0;\n    for (int iter=0; iter<42; iter++) {\n        int EvaldF = 1;\n        if (EvaldF)\n            Eval (x);\n    }\n}"
Line 6180
  96 always 96
  = always "void f ( ) {\ndouble x ; x = 0 ;\nfor ( int iter = 0 ; iter < 42 ; iter ++ ) {\n\n\nEval ( x ) ;\n}\n}"
  "void f ( ) {\ndouble x ; x = 0 ;\nfor ( int iter = 0 ; iter < 42 ; iter ++ ) {\n\n\nEval ( x ) ;\n}\n}" always "void f ( ) {\ndouble x ; x = 0 ;\nfor ( int iter = 0 ; iter < 42 ; iter ++ ) {\n\n\nEval ( x ) ;\n}\n}"
Line 6188
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6188 always 6188
  expected always "void f ( ) {\ndouble x ; x = 0 ;\nfor ( int iter = 0 ; iter < 42 ; iter ++ ) {\n\n\nEval ( x ) ;\n}\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6188 always 6188
  code always "void f() {\n    double x = 0;\n    for (int iter=0; iter<42; iter++) {\n        int EvaldF = 1;\n        if (EvaldF)\n            Eval (x);\n    }\n}"
  true always 1
Line 6193
  60 always 60
  = always "void f() {\n    int x = 0;\n    int y = 1;\n    if (x || y);\n}"
  "void f() {\n    int x = 0;\n    int y = 1;\n    if (x || y);\n}" always "void f() {\n    int x = 0;\n    int y = 1;\n    if (x || y);\n}"
Line 6198
  19 always 19
  = always "void f ( ) {\n\n\n;\n}"
  "void f ( ) {\n\n\n;\n}" always "void f ( ) {\n\n\n;\n}"
Line 6203
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6203 always 6203
  expected always "void f ( ) {\n\n\n;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6203 always 6203
  code always "void f() {\n    int x = 0;\n    int y = 1;\n    if (x || y);\n}"
  true always 1
Line 6209
  55 always 55
  = always "void f() {\n    int *x;\n    int *y = x;\n    delete y;\n}"
  "void f() {\n    int *x;\n    int *y = x;\n    delete y;\n}" always "void f() {\n    int *x;\n    int *y = x;\n    delete y;\n}"
Line 6214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6214 always 6214
  "void f ( ) {\nint * x ;\n\ndelete x ;\n}" always "void f ( ) {\nint * x ;\n\ndelete x ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6214 always 6214
  code always "void f() {\n    int *x;\n    int *y = x;\n    delete y;\n}"
  true always 1
Line 6217
  58 always 58
  = always "void f() {\n    int *x;\n    int *y = x;\n    delete [] y;\n}"
  "void f() {\n    int *x;\n    int *y = x;\n    delete [] y;\n}" always "void f() {\n    int *x;\n    int *y = x;\n    delete [] y;\n}"
Line 6222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6222 always 6222
  "void f ( ) {\nint * x ;\n\ndelete [ ] x ;\n}" always "void f ( ) {\nint * x ;\n\ndelete [ ] x ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6222 always 6222
  code always "void f() {\n    int *x;\n    int *y = x;\n    delete [] y;\n}"
  true always 1
Line 6228
  54 always 54
  = always "void f() {\n    char c1 = 'a';\n    char c2 = { c1 };\n}"
  "void f() {\n    char c1 = 'a';\n    char c2 = { c1 };\n}" always "void f() {\n    char c1 = 'a';\n    char c2 = { c1 };\n}"
Line 6232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6232 always 6232
  "void f ( ) {\n\nchar c2 ; c2 = { 'a' } ;\n}" always "void f ( ) {\n\nchar c2 ; c2 = { 'a' } ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6232 always 6232
  code always "void f() {\n    char c1 = 'a';\n    char c2 = { c1 };\n}"
  true always 1
Line 6236
  79 always 79
  = always "void f() {\n    int x = 0;\n    const int *p; p = &x;\n    if (p) { return 0; }\n}"
  "void f() {\n    int x = 0;\n    const int *p; p = &x;\n    if (p) { return 0; }\n}" always "void f() {\n    int x = 0;\n    const int *p; p = &x;\n    if (p) { return 0; }\n}"
Line 6241
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6241 always 6241
  "void f ( ) {\nint x ; x = 0 ;\nconst int * p ; p = & x ;\nif ( & x ) { return 0 ; }\n}" always "void f ( ) {\nint x ; x = 0 ;\nconst int * p ; p = & x ;\nif ( & x ) { return 0 ; }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6241 always 6241
  code always "void f() {\n    int x = 0;\n    const int *p; p = &x;\n    if (p) { return 0; }\n}"
  true always 1
Line 6246
  91 always 91
  = always "void f() {\n    char str1[10], str2[10];\n    strcpy(str1, \"abc\");\n    strcpy(str2, str1);\n}"
  "void f() {\n    char str1[10], str2[10];\n    strcpy(str1, \"abc\");\n    strcpy(str2, str1);\n}" always "void f() {\n    char str1[10], str2[10];\n    strcpy(str1, \"abc\");\n    strcpy(str2, str1);\n}"
Line 6251
  105 always 105
  = always "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nstrcpy ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}"
  "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nstrcpy ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}" always "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nstrcpy ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}"
Line 6256
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6256 always 6256
  expected always "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nstrcpy ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6256 always 6256
  code always "void f() {\n    char str1[10], str2[10];\n    strcpy(str1, \"abc\");\n    strcpy(str2, str1);\n}"
  true always 1
Line 6260
  70 always 70
  = always "void f() {\n   char a[10];\n   strcpy(a, \"hello\");\n   strcat(a, \"!\");\n}"
  "void f() {\n   char a[10];\n   strcpy(a, \"hello\");\n   strcat(a, \"!\");\n}" always "void f() {\n   char a[10];\n   strcpy(a, \"hello\");\n   strcat(a, \"!\");\n}"
Line 6265
  77 always 77
  = always "void f ( ) {\nchar a [ 10 ] ;\nstrcpy ( a , \"hello\" ) ;\nstrcat ( a , \"!\" ) ;\n}"
  "void f ( ) {\nchar a [ 10 ] ;\nstrcpy ( a , \"hello\" ) ;\nstrcat ( a , \"!\" ) ;\n}" always "void f ( ) {\nchar a [ 10 ] ;\nstrcpy ( a , \"hello\" ) ;\nstrcat ( a , \"!\" ) ;\n}"
Line 6270
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6270 always 6270
  expected always "void f ( ) {\nchar a [ 10 ] ;\nstrcpy ( a , \"hello\" ) ;\nstrcat ( a , \"!\" ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6270 always 6270
  code always "void f() {\n   char a[10];\n   strcpy(a, \"hello\");\n   strcat(a, \"!\");\n}"
  true always 1
  true always 1
  "test.c" always "test.c"
Line 6274
  67 always 67
  = always "void f() {    char *s = malloc(10);    strcpy(s, \"\");    free(s);}"
  "void f() {    char *s = malloc(10);    strcpy(s, \"\");    free(s);}" always "void f() {    char *s = malloc(10);    strcpy(s, \"\");    free(s);}"
Line 6279
  79 always 79
  = always "void f ( ) { char * s ; s = malloc ( 10 ) ; strcpy ( s , \"\" ) ; free ( s ) ; }"
  "void f ( ) { char * s ; s = malloc ( 10 ) ; strcpy ( s , \"\" ) ; free ( s ) ; }" always "void f ( ) { char * s ; s = malloc ( 10 ) ; strcpy ( s , \"\" ) ; free ( s ) ; }"
Line 6284
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6284 always 6284
  expected always "void f ( ) { char * s ; s = malloc ( 10 ) ; strcpy ( s , \"\" ) ; free ( s ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6284 always 6284
  code always "void f() {    char *s = malloc(10);    strcpy(s, \"\");    free(s);}"
  true always 1
Line 6288
  59 always 59
  = always "void f(char *p, char *q) {    strcpy(p, \"abc\");    q = p;}"
  "void f(char *p, char *q) {    strcpy(p, \"abc\");    q = p;}" always "void f(char *p, char *q) {    strcpy(p, \"abc\");    q = p;}"
Line 6292
  66 always 66
  = always "void f ( char * p , char * q ) { strcpy ( p , \"abc\" ) ; q = p ; }"
  "void f ( char * p , char * q ) { strcpy ( p , \"abc\" ) ; q = p ; }" always "void f ( char * p , char * q ) { strcpy ( p , \"abc\" ) ; q = p ; }"
Line 6296
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6296 always 6296
  expected always "void f ( char * p , char * q ) { strcpy ( p , \"abc\" ) ; q = p ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6296 always 6296
  code always "void f(char *p, char *q) {    strcpy(p, \"abc\");    q = p;}"
  true always 1
Line 6301
  73 always 73
  = always "void f() {\n    char s[10];\n    strcpy(s, \"123\");\n    if (s[6] == ' ');\n}"
  "void f() {\n    char s[10];\n    strcpy(s, \"123\");\n    if (s[6] == ' ');\n}" always "void f() {\n    char s[10];\n    strcpy(s, \"123\");\n    if (s[6] == ' ');\n}"
Line 6306
  82 always 82
  = always "void f ( ) {\nchar s [ 10 ] ;\nstrcpy ( s , \"123\" ) ;\nif ( s [ 6 ] == ' ' ) { ; }\n}"
  "void f ( ) {\nchar s [ 10 ] ;\nstrcpy ( s , \"123\" ) ;\nif ( s [ 6 ] == ' ' ) { ; }\n}" always "void f ( ) {\nchar s [ 10 ] ;\nstrcpy ( s , \"123\" ) ;\nif ( s [ 6 ] == ' ' ) { ; }\n}"
Line 6311
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6311 always 6311
  expected always "void f ( ) {\nchar s [ 10 ] ;\nstrcpy ( s , \"123\" ) ;\nif ( s [ 6 ] == ' ' ) { ; }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6311 always 6311
  code always "void f() {\n    char s[10];\n    strcpy(s, \"123\");\n    if (s[6] == ' ');\n}"
  true always 1
Line 6317
  56 always 56
  = always "void f() {\n    int a, *p; p = &a;\n    { int a = *p; }\n}"
  "void f() {\n    int a, *p; p = &a;\n    { int a = *p; }\n}" always "void f() {\n    int a, *p; p = &a;\n    { int a = *p; }\n}"
Line 6321
  65 always 65
  = always "void f ( ) {\nint a ; int * p ; p = & a ;\n{ int a ; a = * p ; }\n}"
  "void f ( ) {\nint a ; int * p ; p = & a ;\n{ int a ; a = * p ; }\n}" always "void f ( ) {\nint a ; int * p ; p = & a ;\n{ int a ; a = * p ; }\n}"
Line 6325
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6325 always 6325
  expected always "void f ( ) {\nint a ; int * p ; p = & a ;\n{ int a ; a = * p ; }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6325 always 6325
  code always "void f() {\n    int a, *p; p = &a;\n    { int a = *p; }\n}"
  true always 1
Line 6329
  59 always 59
  = always "void f() {\n    int *a, **p; p = &a;\n    { int *a = *p; }\n}"
  "void f() {\n    int *a, **p; p = &a;\n    { int *a = *p; }\n}" always "void f() {\n    int *a, **p; p = &a;\n    { int *a = *p; }\n}"
Line 6333
  71 always 71
  = always "void f ( ) {\nint * a ; int * * p ; p = & a ;\n{ int * a ; a = * p ; }\n}"
  "void f ( ) {\nint * a ; int * * p ; p = & a ;\n{ int * a ; a = * p ; }\n}" always "void f ( ) {\nint * a ; int * * p ; p = & a ;\n{ int * a ; a = * p ; }\n}"
Line 6337
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6337 always 6337
  expected always "void f ( ) {\nint * a ; int * * p ; p = & a ;\n{ int * a ; a = * p ; }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6337 always 6337
  code always "void f() {\n    int *a, **p; p = &a;\n    { int *a = *p; }\n}"
  true always 1
Line 6342
  48 always 48
  = always "void a() {\n    static int i = 10;\n    b(i++);\n}"
  "void a() {\n    static int i = 10;\n    b(i++);\n}" always "void a() {\n    static int i = 10;\n    b(i++);\n}"
Line 6346
  48 always 48
  = always "void a ( ) {\nstatic int i = 10 ;\nb ( i ++ ) ;\n}"
  "void a ( ) {\nstatic int i = 10 ;\nb ( i ++ ) ;\n}" always "void a ( ) {\nstatic int i = 10 ;\nb ( i ++ ) ;\n}"
Line 6350
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6350 always 6350
  expected always "void a ( ) {\nstatic int i = 10 ;\nb ( i ++ ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6350 always 6350
  code always "void a() {\n    static int i = 10;\n    b(i++);\n}"
  true always 1
Line 6354
  74 always 74
  = always "class Fred {\nprivate:\n    const static int NUM = 2;\n    int array[NUM];\n}"
  "class Fred {\nprivate:\n    const static int NUM = 2;\n    int array[NUM];\n}" always "class Fred {\nprivate:\n    const static int NUM = 2;\n    int array[NUM];\n}"
Line 6359
  43 always 43
  = always "class Fred {\nprivate:\n\nint array [ 2 ] ;\n}"
  "class Fred {\nprivate:\n\nint array [ 2 ] ;\n}" always "class Fred {\nprivate:\n\nint array [ 2 ] ;\n}"
Line 6364
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6364 always 6364
  expected always "class Fred {\nprivate:\n\nint array [ 2 ] ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6364 always 6364
  code always "class Fred {\nprivate:\n    const static int NUM = 2;\n    int array[NUM];\n}"
  true always 1
Line 6368
  56 always 56
  = always "void f() {\n    int x = 0;\n    cin >> x;\n    return x;\n}"
  "void f() {\n    int x = 0;\n    cin >> x;\n    return x;\n}" always "void f() {\n    int x = 0;\n    cin >> x;\n    return x;\n}"
Line 6375
  53 always 53
  = always "void f ( ) {\nint x ; x = 0 ;\ncin >> x ;\nreturn x ;\n}"
  "void f ( ) {\nint x ; x = 0 ;\ncin >> x ;\nreturn x ;\n}" always "void f ( ) {\nint x ; x = 0 ;\ncin >> x ;\nreturn x ;\n}"
Line 6380
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6380 always 6380
  expected always "void f ( ) {\nint x ; x = 0 ;\ncin >> x ;\nreturn x ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6380 always 6380
  code always "void f() {\n    int x = 0;\n    cin >> x;\n    return x;\n}"
  true always 1
  true always 1
  "test.cpp" always "test.cpp"
Line 6384
  38 always 38
  = always "void f ( ) {\n\ncin >> 0 ;\nreturn 0 ;\n}"
  "void f ( ) {\n\ncin >> 0 ;\nreturn 0 ;\n}" always "void f ( ) {\n\ncin >> 0 ;\nreturn 0 ;\n}"
Line 6389
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6389 always 6389
  expected always "void f ( ) {\n\ncin >> 0 ;\nreturn 0 ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6389 always 6389
  code always "void f() {\n    int x = 0;\n    cin >> x;\n    return x;\n}"
  true always 1
  true always 1
  "test.c" always "test.c"
Line 6395
  54 always 54
  = always "void f() {\n    int x = 0;\n    cin >> std::hex >> x;\n}"
  "void f() {\n    int x = 0;\n    cin >> std::hex >> x;\n}" always "void f() {\n    int x = 0;\n    cin >> std::hex >> x;\n}"
Line 6399
  56 always 56
  = always "void f ( ) {\nint x ; x = 0 ;\ncin >> std :: hex >> x ;\n}"
  "void f ( ) {\nint x ; x = 0 ;\ncin >> std :: hex >> x ;\n}" always "void f ( ) {\nint x ; x = 0 ;\ncin >> std :: hex >> x ;\n}"
Line 6403
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6403 always 6403
  expected always "void f ( ) {\nint x ; x = 0 ;\ncin >> std :: hex >> x ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6403 always 6403
  code always "void f() {\n    int x = 0;\n    cin >> std::hex >> x;\n}"
  true always 1
  true always 1
  "test.cpp" always "test.cpp"
Line 6408
  75 always 75
  = always "void f(int sz) {\n    int i;\n    for (i = 0; ((i<sz) && (sz>3)); ++i) { }\n}"
  "void f(int sz) {\n    int i;\n    for (i = 0; ((i<sz) && (sz>3)); ++i) { }\n}" always "void f(int sz) {\n    int i;\n    for (i = 0; ((i<sz) && (sz>3)); ++i) { }\n}"
Line 6412
  82 always 82
  = always "void f ( int sz ) {\nint i ;\nfor ( i = 0 ; ( i < sz ) && ( sz > 3 ) ; ++ i ) { }\n}"
  "void f ( int sz ) {\nint i ;\nfor ( i = 0 ; ( i < sz ) && ( sz > 3 ) ; ++ i ) { }\n}" always "void f ( int sz ) {\nint i ;\nfor ( i = 0 ; ( i < sz ) && ( sz > 3 ) ; ++ i ) { }\n}"
Line 6416
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6416 always 6416
  expected always "void f ( int sz ) {\nint i ;\nfor ( i = 0 ; ( i < sz ) && ( sz > 3 ) ; ++ i ) { }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6416 always 6416
  code always "void f(int sz) {\n    int i;\n    for (i = 0; ((i<sz) && (sz>3)); ++i) { }\n}"
  true always 1
  true always 1
  "test.c" always "test.c"
Line 6420
  99 always 99
  = always "void f(int sz) {\n    switch (x) {\n    case 1: sz = 2; continue;\n    case 2: x = sz; break;\n    }\n}"
  "void f(int sz) {\n    switch (x) {\n    case 1: sz = 2; continue;\n    case 2: x = sz; break;\n    }\n}" always "void f(int sz) {\n    switch (x) {\n    case 1: sz = 2; continue;\n    case 2: x = sz; break;\n    }\n}"
Line 6426
  98 always 98
  = always "void f ( int sz ) {\nswitch ( x ) {\ncase 1 : ; sz = 2 ; continue ;\ncase 2 : ; x = sz ; break ;\n}\n}"
  "void f ( int sz ) {\nswitch ( x ) {\ncase 1 : ; sz = 2 ; continue ;\ncase 2 : ; x = sz ; break ;\n}\n}" always "void f ( int sz ) {\nswitch ( x ) {\ncase 1 : ; sz = 2 ; continue ;\ncase 2 : ; x = sz ; break ;\n}\n}"
Line 6432
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6432 always 6432
  expected always "void f ( int sz ) {\nswitch ( x ) {\ncase 1 : ; sz = 2 ; continue ;\ncase 2 : ; x = sz ; break ;\n}\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6432 always 6432
  code always "void f(int sz) {\n    switch (x) {\n    case 1: sz = 2; continue;\n    case 2: x = sz; break;\n    }\n}"
  true always 1
  true always 1
  "test.c" always "test.c"
Line 6437
  91 always 91
  = always "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"%%\");\n    strcpy(str2, str1);\n}"
  "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"%%\");\n    strcpy(str2, str1);\n}" always "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"%%\");\n    strcpy(str2, str1);\n}"
Line 6442
  103 always 103
  = always "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"%%\" ) ;\nstrcpy ( str2 , \"%\" ) ;\n}"
  "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"%%\" ) ;\nstrcpy ( str2 , \"%\" ) ;\n}" always "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"%%\" ) ;\nstrcpy ( str2 , \"%\" ) ;\n}"
Line 6447
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6447 always 6447
  expected always "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"%%\" ) ;\nstrcpy ( str2 , \"%\" ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6447 always 6447
  code always "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"%%\");\n    strcpy(str2, str1);\n}"
  true always 1
Line 6450
  112 always 112
  = always "void f() {\n    char str1[25], str2[25];\n    sprintf(str1, \"abcdef%%%% and %% and %\");\n    strcpy(str2, str1);\n}"
  "void f() {\n    char str1[25], str2[25];\n    sprintf(str1, \"abcdef%%%% and %% and %\");\n    strcpy(str2, str1);\n}" always "void f() {\n    char str1[25], str2[25];\n    sprintf(str1, \"abcdef%%%% and %% and %\");\n    strcpy(str2, str1);\n}"
Line 6455
  143 always 143
  = always "void f ( ) {\nchar str1 [ 25 ] ; char str2 [ 25 ] ;\nsprintf ( str1 , \"abcdef%%%% and %% and %\" ) ;\nstrcpy ( str2 , \"abcdef%% and % and %\" ) ;\n}"
  "void f ( ) {\nchar str1 [ 25 ] ; char str2 [ 25 ] ;\nsprintf ( str1 , \"abcdef%%%% and %% and %\" ) ;\nstrcpy ( str2 , \"abcdef%% and % and %\" ) ;\n}" always "void f ( ) {\nchar str1 [ 25 ] ; char str2 [ 25 ] ;\nsprintf ( str1 , \"abcdef%%%% and %% and %\" ) ;\nstrcpy ( str2 , \"abcdef%% and % and %\" ) ;\n}"
Line 6460
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6460 always 6460
  expected always "void f ( ) {\nchar str1 [ 25 ] ; char str2 [ 25 ] ;\nsprintf ( str1 , \"abcdef%%%% and %% and %\" ) ;\nstrcpy ( str2 , \"abcdef%% and % and %\" ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6460 always 6460
  code always "void f() {\n    char str1[25], str2[25];\n    sprintf(str1, \"abcdef%%%% and %% and %\");\n    strcpy(str2, str1);\n}"
  true always 1
Line 6463
  92 always 92
  = always "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"abc\");\n    strcpy(str2, str1);\n}"
  "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"abc\");\n    strcpy(str2, str1);\n}" always "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"abc\");\n    strcpy(str2, str1);\n}"
Line 6468
  106 always 106
  = always "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}"
  "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}" always "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}"
Line 6473
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6473 always 6473
  expected always "void f ( ) {\nchar str1 [ 10 ] ; char str2 [ 10 ] ;\nsprintf ( str1 , \"abc\" ) ;\nstrcpy ( str2 , \"abc\" ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6473 always 6473
  code always "void f() {\n    char str1[10], str2[10];\n    sprintf(str1, \"abc\");\n    strcpy(str2, str1);\n}"
  true always 1
Line 6477
  281 always 281
  = always "const char * foo ( ) {\nconst char x1 = 'b' ;\nf ( & x1 ) ;\nconst char x2 = 'b' ;\nf ( y , & x2 ) ;\nconst char x3 = 'b' ;\nt = & x3 ;\nconst char x4 = 'b' ;\nt = y + & x4 ;\nconst char x5 = 'b' ;\nz [ & x5 ] = y ;\nconst char x6 = 'b' ;\nv = { & x6 } ;\nconst char x7 = 'b' ;\nreturn & x7 ;\n}"
  "const char * foo ( ) {\nconst char x1 = 'b' ;\nf ( & x1 ) ;\nconst char x2 = 'b' ;\nf ( y , & x2 ) ;\nconst char x3 = 'b' ;\nt = & x3 ;\nconst char x4 = 'b' ;\nt = y + & x4 ;\nconst char x5 = 'b' ;\nz [ & x5 ] = y ;\nconst char x6 = 'b' ;\nv = { & x6 } ;\nconst char x7 = 'b' ;\nreturn & x7 ;\n}" always "const char * foo ( ) {\nconst char x1 = 'b' ;\nf ( & x1 ) ;\nconst char x2 = 'b' ;\nf ( y , & x2 ) ;\nconst char x3 = 'b' ;\nt = & x3 ;\nconst char x4 = 'b' ;\nt = y + & x4 ;\nconst char x5 = 'b' ;\nz [ & x5 ] = y ;\nconst char x6 = 'b' ;\nv = { & x6 } ;\nconst char x7 = 'b' ;\nreturn & x7 ;\n}"
Line 6493
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6493 always 6493
  code always "const char * foo ( ) {\nconst char x1 = 'b' ;\nf ( & x1 ) ;\nconst char x2 = 'b' ;\nf ( y , & x2 ) ;\nconst char x3 = 'b' ;\nt = & x3 ;\nconst char x4 = 'b' ;\nt = y + & x4 ;\nconst char x5 = 'b' ;\nz [ & x5 ] = y ;\nconst char x6 = 'b' ;\nv = { & x6 } ;\nconst char x7 = 'b' ;\nreturn & x7 ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6493 always 6493
  code always "const char * foo ( ) {\nconst char x1 = 'b' ;\nf ( & x1 ) ;\nconst char x2 = 'b' ;\nf ( y , & x2 ) ;\nconst char x3 = 'b' ;\nt = & x3 ;\nconst char x4 = 'b' ;\nt = y + & x4 ;\nconst char x5 = 'b' ;\nz [ & x5 ] = y ;\nconst char x6 = 'b' ;\nv = { & x6 } ;\nconst char x7 = 'b' ;\nreturn & x7 ;\n}"
  true always 1
Line 6497
  259 always 259
  = always "const int * foo ( ) {\nconst int x1 = 1 ;\nf ( & x1 ) ;\nconst int x2 = 1 ;\nf ( y , & x2 ) ;\nconst int x3 = 1 ;\nt = & x3 ;\nconst int x4 = 1 ;\nt = y + & x4 ;\nconst int x5 = 1 ;\nz [ & x5 ] = y ;\nconst int x6 = 1 ;\nv = { & x6 } ;\nconst int x7 = 1 ;\nreturn & x7 ;\n}"
  "const int * foo ( ) {\nconst int x1 = 1 ;\nf ( & x1 ) ;\nconst int x2 = 1 ;\nf ( y , & x2 ) ;\nconst int x3 = 1 ;\nt = & x3 ;\nconst int x4 = 1 ;\nt = y + & x4 ;\nconst int x5 = 1 ;\nz [ & x5 ] = y ;\nconst int x6 = 1 ;\nv = { & x6 } ;\nconst int x7 = 1 ;\nreturn & x7 ;\n}" always "const int * foo ( ) {\nconst int x1 = 1 ;\nf ( & x1 ) ;\nconst int x2 = 1 ;\nf ( y , & x2 ) ;\nconst int x3 = 1 ;\nt = & x3 ;\nconst int x4 = 1 ;\nt = y + & x4 ;\nconst int x5 = 1 ;\nz [ & x5 ] = y ;\nconst int x6 = 1 ;\nv = { & x6 } ;\nconst int x7 = 1 ;\nreturn & x7 ;\n}"
Line 6513
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6513 always 6513
  code always "const int * foo ( ) {\nconst int x1 = 1 ;\nf ( & x1 ) ;\nconst int x2 = 1 ;\nf ( y , & x2 ) ;\nconst int x3 = 1 ;\nt = & x3 ;\nconst int x4 = 1 ;\nt = y + & x4 ;\nconst int x5 = 1 ;\nz [ & x5 ] = y ;\nconst int x6 = 1 ;\nv = { & x6 } ;\nconst int x7 = 1 ;\nreturn & x7 ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6513 always 6513
  code always "const int * foo ( ) {\nconst int x1 = 1 ;\nf ( & x1 ) ;\nconst int x2 = 1 ;\nf ( y , & x2 ) ;\nconst int x3 = 1 ;\nt = & x3 ;\nconst int x4 = 1 ;\nt = y + & x4 ;\nconst int x5 = 1 ;\nz [ & x5 ] = y ;\nconst int x6 = 1 ;\nv = { & x6 } ;\nconst int x7 = 1 ;\nreturn & x7 ;\n}"
  true always 1
Line 6518
  110 always 110
  = always "void mhz_M(int enough) {\n  TYPE *x=&x, **p=x, **q = NULL;\n  BENCH1(q = _mhz_M(n); n = 1;)\n  use_pointer(q);\n}"
  "void mhz_M(int enough) {\n  TYPE *x=&x, **p=x, **q = NULL;\n  BENCH1(q = _mhz_M(n); n = 1;)\n  use_pointer(q);\n}" always "void mhz_M(int enough) {\n  TYPE *x=&x, **p=x, **q = NULL;\n  BENCH1(q = _mhz_M(n); n = 1;)\n  use_pointer(q);\n}"
Line 6523
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6523 always 6523
  code always "void mhz_M(int enough) {\n  TYPE *x=&x, **p=x, **q = NULL;\n  BENCH1(q = _mhz_M(n); n = 1;)\n  use_pointer(q);\n}"
  true always 1
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6523 always 6523
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6523 always 6523
  false always 0
Line 6527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6527 always 6527
  "void f ( ) { int y ; y = 34 + z ; }" always "void f ( ) { int y ; y = 34 + z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6527 always 6527
  "void f() { int x=34; int y=x+z; }" always "void f() { int x=34; int y=x+z; }"
  true always 1
Line 6528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6528 always 6528
  "void f ( ) { int y ; y = 34 - z ; }" always "void f ( ) { int y ; y = 34 - z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6528 always 6528
  "void f() { int x=34; int y=x-z; }" always "void f() { int x=34; int y=x-z; }"
  true always 1
Line 6529
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6529 always 6529
  "void f ( ) { int y ; y = 34 * z ; }" always "void f ( ) { int y ; y = 34 * z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6529 always 6529
  "void f() { int x=34; int y=x*z; }" always "void f() { int x=34; int y=x*z; }"
  true always 1
Line 6530
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6530 always 6530
  "void f ( ) { int y ; y = 34 / z ; }" always "void f ( ) { int y ; y = 34 / z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6530 always 6530
  "void f() { int x=34; int y=x/z; }" always "void f() { int x=34; int y=x/z; }"
  true always 1
Line 6531
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6531 always 6531
  "void f ( ) { int y ; y = 34 % z ; }" always "void f ( ) { int y ; y = 34 % z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6531 always 6531
  "void f() { int x=34; int y=x%z; }" always "void f() { int x=34; int y=x%z; }"
  true always 1
Line 6532
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6532 always 6532
  "void f ( ) { int y ; y = 34 & z ; }" always "void f ( ) { int y ; y = 34 & z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6532 always 6532
  "void f() { int x=34; int y=x&z; }" always "void f() { int x=34; int y=x&z; }"
  true always 1
Line 6533
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6533 always 6533
  "void f ( ) { int y ; y = 34 | z ; }" always "void f ( ) { int y ; y = 34 | z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6533 always 6533
  "void f() { int x=34; int y=x|z; }" always "void f() { int x=34; int y=x|z; }"
  true always 1
Line 6534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6534 always 6534
  "void f ( ) { int y ; y = 34 ^ z ; }" always "void f ( ) { int y ; y = 34 ^ z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6534 always 6534
  "void f() { int x=34; int y=x^z; }" always "void f() { int x=34; int y=x^z; }"
  true always 1
Line 6535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6535 always 6535
  "void f ( ) { int y ; y = 34 << z ; }" always "void f ( ) { int y ; y = 34 << z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6535 always 6535
  "void f() { int x=34; int y=x<<z; }" always "void f() { int x=34; int y=x<<z; }"
  true always 1
Line 6536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6536 always 6536
  "void f ( ) { int y ; y = 34 >> z ; }" always "void f ( ) { int y ; y = 34 >> z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6536 always 6536
  "void f() { int x=34; int y=x>>z; }" always "void f() { int x=34; int y=x>>z; }"
  true always 1
Line 6537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6537 always 6537
  "void f ( ) { int y ; y = 34 && z ; }" always "void f ( ) { int y ; y = 34 && z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6537 always 6537
  "void f() { int x=34; int y=x&&z; }" always "void f() { int x=34; int y=x&&z; }"
  true always 1
Line 6538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6538 always 6538
  "void f ( ) { int y ; y = 34 || z ; }" always "void f ( ) { int y ; y = 34 || z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6538 always 6538
  "void f() { int x=34; int y=x||z; }" always "void f() { int x=34; int y=x||z; }"
  true always 1
Line 6539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6539 always 6539
  "void f ( ) { int y ; y = 34 > z ; }" always "void f ( ) { int y ; y = 34 > z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6539 always 6539
  "void f() { int x=34; int y=x>z; }" always "void f() { int x=34; int y=x>z; }"
  true always 1
Line 6540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6540 always 6540
  "void f ( ) { int y ; y = 34 >= z ; }" always "void f ( ) { int y ; y = 34 >= z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6540 always 6540
  "void f() { int x=34; int y=x>=z; }" always "void f() { int x=34; int y=x>=z; }"
  true always 1
Line 6541
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6541 always 6541
  "void f ( ) { int y ; y = 34 < z ; }" always "void f ( ) { int y ; y = 34 < z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6541 always 6541
  "void f() { int x=34; int y=x<z; }" always "void f() { int x=34; int y=x<z; }"
  true always 1
Line 6542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6542 always 6542
  "void f ( ) { int y ; y = 34 <= z ; }" always "void f ( ) { int y ; y = 34 <= z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6542 always 6542
  "void f() { int x=34; int y=x<=z; }" always "void f() { int x=34; int y=x<=z; }"
  true always 1
Line 6543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6543 always 6543
  "void f ( ) { int y ; y = 34 == z ; }" always "void f ( ) { int y ; y = 34 == z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6543 always 6543
  "void f() { int x=34; int y=x==z; }" always "void f() { int x=34; int y=x==z; }"
  true always 1
Line 6544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6544 always 6544
  "void f ( ) { int y ; y = 34 != z ; }" always "void f ( ) { int y ; y = 34 != z ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6544 always 6544
  "void f() { int x=34; int y=x!=z; }" always "void f() { int x=34; int y=x!=z; }"
  true always 1
Line 6547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6547 always 6547
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6547 always 6547
  "void f() { char *p = 0; int result = p && (!*p); }" always "void f() { char *p = 0; int result = p && (!*p); }"
  true always 1
Line 6548
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6548 always 6548
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6548 always 6548
  "void f() { Foo *p = 0; bool b = (p && (p->type() == 1)); }" always "void f() { Foo *p = 0; bool b = (p && (p->type() == 1)); }"
  true always 1
Line 6552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6552 always 6552
  "void f ( ) { int x ; x = abc ( ) ; }" always "void f ( ) { int x ; x = abc ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6552 always 6552
  "void f() { int x; int &ref=x; ref=abc(); }" always "void f() { int x; int &ref=x; ref=abc(); }"
  true always 1
Line 6553
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6553 always 6553
  "void f ( ) { int * p ; p = abc ( ) ; }" always "void f ( ) { int * p ; p = abc ( ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6553 always 6553
  "void f() { int *p; int *&ref=p; ref=abc(); }" always "void f() { int *p; int *&ref=p; ref=abc(); }"
  true always 1
Line 6557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6557 always 6557
  "void f ( int * p ) { * -- p = 0 ; * p = 0 ; }" always "void f ( int * p ) { * -- p = 0 ; * p = 0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6557 always 6557
  "void f(int*p) { *--p=0; *p=0; }" always "void f(int*p) { *--p=0; *p=0; }"
  true always 1
Line 6561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6561 always 6561
  "void f ( ) { int a ; if ( a > 0 ) { } }" always "void f ( ) { int a ; if ( a > 0 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6561 always 6561
  "void f() { int a; int *p=&a; if (*p>0) {} }" always "void f() { int a; int *p=&a; if (*p>0) {} }"
  true always 1
Line 6562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6562 always 6562
  "void f ( ) { int a ; struct AB ab ; ab . a = & a ; if ( a > 0 ) { } }" always "void f ( ) { int a ; struct AB ab ; ab . a = & a ; if ( a > 0 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6562 always 6562
  "void f() { int a; struct AB ab; ab.a = &a; if (*ab.a>0) {} }" always "void f() { int a; struct AB ab; ab.a = &a; if (*ab.a>0) {} }"
  true always 1
Line 6563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6563 always 6563
  "void f ( ) { int a ; if ( x > a ) { } }" always "void f ( ) { int a ; if ( x > a ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6563 always 6563
  "void f() { int a; int *p=&a; if (x>*p) {} }" always "void f() { int a; int *p=&a; if (x>*p) {} }"
  true always 1
Line 6567
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6567 always 6567
  "void f ( ) { int a ; a = 0 ; int b ; b = 0 ; * p >> a >> b ; return a / b ; }" always "void f ( ) { int a ; a = 0 ; int b ; b = 0 ; * p >> a >> b ; return a / b ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6567 always 6567
  "void f() { int a=0,b=0; *p>>a>>b; return a/b; }" always "void f() { int a=0,b=0; *p>>a>>b; return a/b; }"
  true always 1
Line 6572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6572 always 6572
  "unsigned long long x ; x = 9223372036854775808UL ;" always "unsigned long long x ; x = 9223372036854775808UL ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6572 always 6572
  "unsigned long long x = 1UL << 63 ;" always "unsigned long long x = 1UL << 63 ;"
  true always 1
Line 6573
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6573 always 6573
  "long long x ; x = -9223372036854775808L ;" always "long long x ; x = -9223372036854775808L ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6573 always 6573
  "long long x = 1L << 63 ;" always "long long x = 1L << 63 ;"
  true always 1
Line 6577
  142 always 142
  = always "enum e { VAL1 = 1, VAL2 }; typedef char arr_t[VAL2]; int foo(int) ; void bar () {   throw foo (VAL1); } int baz() {   return sizeof(arr_t); }"
  "enum e { VAL1 = 1, VAL2 }; typedef char arr_t[VAL2]; int foo(int) ; void bar () {   throw foo (VAL1); } int baz() {   return sizeof(arr_t); }" always "enum e { VAL1 = 1, VAL2 }; typedef char arr_t[VAL2]; int foo(int) ; void bar () {   throw foo (VAL1); } int baz() {   return sizeof(arr_t); }"
Line 6586
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6586 always 6586
  "enum e { VAL1 = 1 , VAL2 } ; int foo ( int ) ; void bar ( ) { throw foo ( VAL1 ) ; } int baz ( ) { return sizeof ( char [ VAL2 ] ) ; }" always "enum e { VAL1 = 1 , VAL2 } ; int foo ( int ) ; void bar ( ) { throw foo ( VAL1 ) ; } int baz ( ) { return sizeof ( char [ VAL2 ] ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6586 always 6586
  code always "enum e { VAL1 = 1, VAL2 }; typedef char arr_t[VAL2]; int foo(int) ; void bar () {   throw foo (VAL1); } int baz() {   return sizeof(arr_t); }"
  true always 1
Line 6597
  95 always 95
  = always "void f() {\n  int a[3], i, j;\n  for(i = 0, j = 1; i < 3, j < 12; i++,j++) {\n    a[i] = 0;\n  }\n}"
  "void f() {\n  int a[3], i, j;\n  for(i = 0, j = 1; i < 3, j < 12; i++,j++) {\n    a[i] = 0;\n  }\n}" always "void f() {\n  int a[3], i, j;\n  for(i = 0, j = 1; i < 3, j < 12; i++,j++) {\n    a[i] = 0;\n  }\n}"
Line 6603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6603 always 6603
  "void f ( ) {\nint a [ 3 ] ; int i ; int j ;\nfor ( i = 0 , j = 1 ; i < 3 , j < 12 ; i ++ , j ++ ) {\na [ i ] = 0 ;\n}\n}" always "void f ( ) {\nint a [ 3 ] ; int i ; int j ;\nfor ( i = 0 , j = 1 ; i < 3 , j < 12 ; i ++ , j ++ ) {\na [ i ] = 0 ;\n}\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6603 always 6603
  code always "void f() {\n  int a[3], i, j;\n  for(i = 0, j = 1; i < 3, j < 12; i++,j++) {\n    a[i] = 0;\n  }\n}"
  true always 1
Line 6612
  159 always 159
  = always "void f() {\n  int i = 1;\n  const int * const constPtrToConst = &i;\n  std::cout << *constPtrToConst << std::endl;\n  std::cout << constPtrToConst << std::endl;\n}"
  "void f() {\n  int i = 1;\n  const int * const constPtrToConst = &i;\n  std::cout << *constPtrToConst << std::endl;\n  std::cout << constPtrToConst << std::endl;\n}" always "void f() {\n  int i = 1;\n  const int * const constPtrToConst = &i;\n  std::cout << *constPtrToConst << std::endl;\n  std::cout << constPtrToConst << std::endl;\n}"
Line 6618
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6618 always 6618
  "void f ( ) {\nint i ; i = 1 ;\nconst int * const constPtrToConst ; constPtrToConst = & i ;\nstd :: cout << i << std :: endl ;\nstd :: cout << & i << std :: endl ;\n}" always "void f ( ) {\nint i ; i = 1 ;\nconst int * const constPtrToConst ; constPtrToConst = & i ;\nstd :: cout << i << std :: endl ;\nstd :: cout << & i << std :: endl ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6618 always 6618
  code always "void f() {\n  int i = 1;\n  const int * const constPtrToConst = &i;\n  std::cout << *constPtrToConst << std::endl;\n  std::cout << constPtrToConst << std::endl;\n}"
  true always 1
Line 6627
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6627 always 6627
  "static const int XX = 0;\nenum E { XX };\nstruct s {\n  enum Bar {\n    XX,\n    Other\n  };\n  enum { XX };\n};" always "static const int XX = 0;\nenum E { XX };\nstruct s {\n  enum Bar {\n    XX,\n    Other\n  };\n  enum { XX };\n};"
  true always 1
Line 6636
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6636 always 6636
  "" always ""
Line 6640
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6640 always 6640
  "void foo ( std :: string str ) {\nchar * p ; p = & str [ 0 ] ;\n* p = 0 ;\n}" always "void foo ( std :: string str ) {\nchar * p ; p = & str [ 0 ] ;\n* p = 0 ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6640 always 6640
  "void foo(std::string str) {\n  char *p = &str[0];\n  *p = 0;\n}" always "void foo(std::string str) {\n  char *p = &str[0];\n  *p = 0;\n}"
  true always 1
Line 6651
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6651 always 6651
  "typedef void (*a)();\nenum class E { a };\n" always "typedef void (*a)();\nenum class E { a };\n"
Line 6653
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6653 always 6653
  "" always ""
Line 6657
  70 always 70
  = always "int foo() {\n    int i; i = 0;\n    if (x) { i = 10; }\n    return i;\n}\n"
  "int foo() {\n    int i; i = 0;\n    if (x) { i = 10; }\n    return i;\n}\n" always "int foo() {\n    int i; i = 0;\n    if (x) { i = 10; }\n    return i;\n}\n"
Line 6662
  65 always 65
  = always "int foo ( ) {\nint i ; i = 0 ;\nif ( x ) { i = 10 ; }\nreturn i ;\n}"
  "int foo ( ) {\nint i ; i = 0 ;\nif ( x ) { i = 10 ; }\nreturn i ;\n}" always "int foo ( ) {\nint i ; i = 0 ;\nif ( x ) { i = 10 ; }\nreturn i ;\n}"
Line 6667
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6667 always 6667
  expected always "int foo ( ) {\nint i ; i = 0 ;\nif ( x ) { i = 10 ; }\nreturn i ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6667 always 6667
  code always "int foo() {\n    int i; i = 0;\n    if (x) { i = 10; }\n    return i;\n}\n"
  true always 1
Line 6672
  93 always 93
  = always "void f(struct ABC *list) {\n    struct ABC *last = NULL;\n    nr = (last = list->prev)->nr;\n}\n"
  "void f(struct ABC *list) {\n    struct ABC *last = NULL;\n    nr = (last = list->prev)->nr;\n}\n" always "void f(struct ABC *list) {\n    struct ABC *last = NULL;\n    nr = (last = list->prev)->nr;\n}\n"
Line 6676
  102 always 102
  = always "void f ( struct ABC * list ) {\nstruct ABC * last ; last = NULL ;\nnr = ( last = list . prev ) . nr ;\n}"
  "void f ( struct ABC * list ) {\nstruct ABC * last ; last = NULL ;\nnr = ( last = list . prev ) . nr ;\n}" always "void f ( struct ABC * list ) {\nstruct ABC * last ; last = NULL ;\nnr = ( last = list . prev ) . nr ;\n}"
Line 6680
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6680 always 6680
  expected always "void f ( struct ABC * list ) {\nstruct ABC * last ; last = NULL ;\nnr = ( last = list . prev ) . nr ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6680 always 6680
  code always "void f(struct ABC *list) {\n    struct ABC *last = NULL;\n    nr = (last = list->prev)->nr;\n}\n"
  true always 1
Line 6684
  79 always 79
  = always "void f() {\n    int *p = 0;\n    a = p = (VdbeCursor*)pMem->z;\n    return p ;\n}\n"
  "void f() {\n    int *p = 0;\n    a = p = (VdbeCursor*)pMem->z;\n    return p ;\n}\n" always "void f() {\n    int *p = 0;\n    a = p = (VdbeCursor*)pMem->z;\n    return p ;\n}\n"
Line 6689
  63 always 63
  = always "void f ( ) {\nint * p ; p = 0 ;\na = p = pMem . z ;\nreturn p ;\n}"
  "void f ( ) {\nint * p ; p = 0 ;\na = p = pMem . z ;\nreturn p ;\n}" always "void f ( ) {\nint * p ; p = 0 ;\na = p = pMem . z ;\nreturn p ;\n}"
Line 6694
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6694 always 6694
  expected always "void f ( ) {\nint * p ; p = 0 ;\na = p = pMem . z ;\nreturn p ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6694 always 6694
  code always "void f() {\n    int *p = 0;\n    a = p = (VdbeCursor*)pMem->z;\n    return p ;\n}\n"
  true always 1
Line 6698
  53 always 53
  = always "void foo() {\n    for (int i = 0; i < 10; ++i) { }\n}\n"
  "void foo() {\n    for (int i = 0; i < 10; ++i) { }\n}\n" always "void foo() {\n    for (int i = 0; i < 10; ++i) { }\n}\n"
Line 6701
  55 always 55
  = always "void foo ( ) {\nfor ( int i = 0 ; i < 10 ; ++ i ) { }\n}"
  "void foo ( ) {\nfor ( int i = 0 ; i < 10 ; ++ i ) { }\n}" always "void foo ( ) {\nfor ( int i = 0 ; i < 10 ; ++ i ) { }\n}"
Line 6704
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6704 always 6704
  expected always "void foo ( ) {\nfor ( int i = 0 ; i < 10 ; ++ i ) { }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6704 always 6704
  code always "void foo() {\n    for (int i = 0; i < 10; ++i) { }\n}\n"
  true always 1
Line 6705
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6705 always 6705
  "" always ""
Line 6709
  59 always 59
  = always "void foo() {\n    int i = 0;\n    while (i < 10) { ++i; }\n}\n"
  "void foo() {\n    int i = 0;\n    while (i < 10) { ++i; }\n}\n" always "void foo() {\n    int i = 0;\n    while (i < 10) { ++i; }\n}\n"
Line 6713
  61 always 61
  = always "void foo ( ) {\nint i ; i = 0 ;\nwhile ( i < 10 ) { ++ i ; }\n}"
  "void foo ( ) {\nint i ; i = 0 ;\nwhile ( i < 10 ) { ++ i ; }\n}" always "void foo ( ) {\nint i ; i = 0 ;\nwhile ( i < 10 ) { ++ i ; }\n}"
Line 6717
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6717 always 6717
  expected always "void foo ( ) {\nint i ; i = 0 ;\nwhile ( i < 10 ) { ++ i ; }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6717 always 6717
  code always "void foo() {\n    int i = 0;\n    while (i < 10) { ++i; }\n}\n"
  true always 1
Line 6718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6718 always 6718
  "" always ""
Line 6722
  82 always 82
  = always "void foo() {\n    for (std::string::size_type pos = 0; pos < 10; ++pos)\n    { }\n}\n"
  "void foo() {\n    for (std::string::size_type pos = 0; pos < 10; ++pos)\n    { }\n}\n" always "void foo() {\n    for (std::string::size_type pos = 0; pos < 10; ++pos)\n    { }\n}\n"
Line 6726
  84 always 84
  = always "void foo ( ) {\nfor ( std :: string :: size_type pos = 0 ; pos < 10 ; ++ pos )\n{ }\n}"
  "void foo ( ) {\nfor ( std :: string :: size_type pos = 0 ; pos < 10 ; ++ pos )\n{ }\n}" always "void foo ( ) {\nfor ( std :: string :: size_type pos = 0 ; pos < 10 ; ++ pos )\n{ }\n}"
Line 6730
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6730 always 6730
  expected always "void foo ( ) {\nfor ( std :: string :: size_type pos = 0 ; pos < 10 ; ++ pos )\n{ }\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6730 always 6730
  code always "void foo() {\n    for (std::string::size_type pos = 0; pos < 10; ++pos)\n    { }\n}\n"
  true always 1
Line 6731
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6731 always 6731
  "" always ""
Line 6735
  47 always 47
  = always "void foo(obj a) {\n    obj b = a;\n    b.f();\n}\n"
  "void foo(obj a) {\n    obj b = a;\n    b.f();\n}\n" always "void foo(obj a) {\n    obj b = a;\n    b.f();\n}\n"
Line 6739
  51 always 51
  = always "void foo ( obj a ) {\nobj b ; b = a ;\nb . f ( ) ;\n}"
  "void foo ( obj a ) {\nobj b ; b = a ;\nb . f ( ) ;\n}" always "void foo ( obj a ) {\nobj b ; b = a ;\nb . f ( ) ;\n}"
Line 6743
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6743 always 6743
  expected always "void foo ( obj a ) {\nobj b ; b = a ;\nb . f ( ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6743 always 6743
  code always "void foo(obj a) {\n    obj b = a;\n    b.f();\n}\n"
  true always 1
Line 6747
  74 always 74
  = always "int f() {\n    int a = 0;\n    if (x) {\n        ++a;\n    }\n    return a;\n}\n"
  "int f() {\n    int a = 0;\n    if (x) {\n        ++a;\n    }\n    return a;\n}\n" always "int f() {\n    int a = 0;\n    if (x) {\n        ++a;\n    }\n    return a;\n}\n"
Line 6754
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6754 always 6754
  code always "int f() {\n    int a = 0;\n    if (x) {\n        ++a;\n    }\n    return a;\n}\n"
  true always 1
Line 6755
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6755 always 6755
  "" always ""
Line 6760
  226 always 226
  = always "int f(char *x) {\n    char *p;\n    char *q;\n\n    switch (x & 0x3)\n    {\n        case 1:\n            p = x;\n            x = p;\n            break;\n        case 2:\n            q = x;\n            x = q;\n            break;\n    }\n}\n"
  "int f(char *x) {\n    char *p;\n    char *q;\n\n    switch (x & 0x3)\n    {\n        case 1:\n            p = x;\n            x = p;\n            break;\n        case 2:\n            q = x;\n            x = q;\n            break;\n    }\n}\n" always "int f(char *x) {\n    char *p;\n    char *q;\n\n    switch (x & 0x3)\n    {\n        case 1:\n            p = x;\n            x = p;\n            break;\n        case 2:\n            q = x;\n            x = q;\n            break;\n    }\n}\n"
Line 6777
  139 always 139
  = always "int f ( char * x ) {\nchar * p ;\nchar * q ;\n\nswitch ( x & 0x3 )\n{\ncase 1 : ;\np = x ;\nx = p ;\nbreak ;\ncase 2 : ;\nq = x ;\nx = q ;\nbreak ;\n}\n}"
  "int f ( char * x ) {\nchar * p ;\nchar * q ;\n\nswitch ( x & 0x3 )\n{\ncase 1 : ;\np = x ;\nx = p ;\nbreak ;\ncase 2 : ;\nq = x ;\nx = q ;\nbreak ;\n}\n}" always "int f ( char * x ) {\nchar * p ;\nchar * q ;\n\nswitch ( x & 0x3 )\n{\ncase 1 : ;\np = x ;\nx = p ;\nbreak ;\ncase 2 : ;\nq = x ;\nx = q ;\nbreak ;\n}\n}"
Line 6794
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6794 always 6794
  expected always "int f ( char * x ) {\nchar * p ;\nchar * q ;\n\nswitch ( x & 0x3 )\n{\ncase 1 : ;\np = x ;\nx = p ;\nbreak ;\ncase 2 : ;\nq = x ;\nx = q ;\nbreak ;\n}\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6794 always 6794
  code always "int f(char *x) {\n    char *p;\n    char *q;\n\n    switch (x & 0x3)\n    {\n        case 1:\n            p = x;\n            x = p;\n            break;\n        case 2:\n            q = x;\n            x = q;\n            break;\n    }\n}\n"
  true always 1
Line 6799
  47 always 47
  = always "void f() {\n    float a = 40;\n    x(10 / a);\n}\n"
  "void f() {\n    float a = 40;\n    x(10 / a);\n}\n" always "void f() {\n    float a = 40;\n    x(10 / a);\n}\n"
Line 6804
  29 always 29
  = always "void f ( ) {\n\nx ( 0.25 ) ;\n}"
  "void f ( ) {\n\nx ( 0.25 ) ;\n}" always "void f ( ) {\n\nx ( 0.25 ) ;\n}"
Line 6806
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6806 always 6806
  expected always "void f ( ) {\n\nx ( 0.25 ) ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6806 always 6806
  code always "void f() {\n    float a = 40;\n    x(10 / a);\n}\n"
  true always 1
Line 6809
  48 always 48
  = always "double f() {    double a = false;    return a;}"
  "double f() {    double a = false;    return a;}" always "double f() {    double a = false;    return a;}"
Line 6813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6813 always 6813
  "double f ( ) { return 0.0 ; }" always "double f ( ) { return 0.0 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6813 always 6813
  code2 always "double f() {    double a = false;    return a;}"
  true always 1
Line 6816
  55 always 55
  = always "void f() {    double a = 1e+007;\n    std::cout << a;\n}"
  "void f() {    double a = 1e+007;\n    std::cout << a;\n}" always "void f() {    double a = 1e+007;\n    std::cout << a;\n}"
Line 6820
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6820 always 6820
  "void f ( ) {\nstd :: cout << 1e+007 ;\n}" always "void f ( ) {\nstd :: cout << 1e+007 ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6820 always 6820
  code3 always "void f() {    double a = 1e+007;\n    std::cout << a;\n}"
  true always 1
Line 6822
  50 always 50
  = always "void f() {    double a = 1;\n    std::cout << a;\n}"
  "void f() {    double a = 1;\n    std::cout << a;\n}" always "void f() {    double a = 1;\n    std::cout << a;\n}"
Line 6826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6826 always 6826
  "void f ( ) {\nstd :: cout << 1.0 ;\n}" always "void f ( ) {\nstd :: cout << 1.0 ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6826 always 6826
  code4 always "void f() {    double a = 1;\n    std::cout << a;\n}"
  true always 1
Line 6831
  51 always 51
  = always "void a(int x);void b() {    int x = 123;    a(x);}"
  "void a(int x);void b() {    int x = 123;    a(x);}" always "void a(int x);void b() {    int x = 123;    a(x);}"
Line 6836
  46 always 46
  = always "void a ( int x ) ; void b ( ) { a ( 123 ) ; }"
  "void a ( int x ) ; void b ( ) { a ( 123 ) ; }" always "void a ( int x ) ; void b ( ) { a ( 123 ) ; }"
Line 6837
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6837 always 6837
  expected always "void a ( int x ) ; void b ( ) { a ( 123 ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6837 always 6837
  code always "void a(int x);void b() {    int x = 123;    a(x);}"
  true always 1
Line 6841
  52 always 52
  = always "void a(int &x);void b() {    int x = 123;    a(x);}"
  "void a(int &x);void b() {    int x = 123;    a(x);}" always "void a(int &x);void b() {    int x = 123;    a(x);}"
Line 6846
  64 always 64
  = always "void a ( int & x ) ; void b ( ) { int x ; x = 123 ; a ( x ) ; }"
  "void a ( int & x ) ; void b ( ) { int x ; x = 123 ; a ( x ) ; }" always "void a ( int & x ) ; void b ( ) { int x ; x = 123 ; a ( x ) ; }"
Line 6847
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6847 always 6847
  expected always "void a ( int & x ) ; void b ( ) { int x ; x = 123 ; a ( x ) ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6847 always 6847
  code always "void a(int &x);void b() {    int x = 123;    a(x);}"
  true always 1
Line 6853
  66 always 66
  = always "static int x;void f() {    x = 123;    while (!x) { dostuff(); }}"
  "static int x;void f() {    x = 123;    while (!x) { dostuff(); }}" always "static int x;void f() {    x = 123;    while (!x) { dostuff(); }}"
Line 6858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6858 always 6858
  "static int x ; void f ( ) { x = 123 ; while ( ! x ) { dostuff ( ) ; } }" always "static int x ; void f ( ) { x = 123 ; while ( ! x ) { dostuff ( ) ; } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6858 always 6858
  code always "static int x;void f() {    x = 123;    while (!x) { dostuff(); }}"
  true always 1
Line 6862
  42 always 42
  = always "int a() {    int x = 123;    return (x);}"
  "int a() {    int x = 123;    return (x);}" always "int a() {    int x = 123;    return (x);}"
Line 6866
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6866 always 6866
  "int a ( ) { return 123 ; }" always "int a ( ) { return 123 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6866 always 6866
  code always "int a() {    int x = 123;    return (x);}"
  true always 1
Line 6870
  111 always 111
  = always "int main() {\n  char* data = new char[100];\n  char** dataPtr = &data;\n  printf(\"test\");\n  delete [] *dataPtr;\n}"
  "int main() {\n  char* data = new char[100];\n  char** dataPtr = &data;\n  printf(\"test\");\n  delete [] *dataPtr;\n}" always "int main() {\n  char* data = new char[100];\n  char** dataPtr = &data;\n  printf(\"test\");\n  delete [] *dataPtr;\n}"
Line 6876
  133 always 133
  = always "int main ( ) {\nchar * data ; data = new char [ 100 ] ;\nchar * * dataPtr ; dataPtr = & data ;\nprintf ( \"test\" ) ;\ndelete [ ] data ;\n}"
  "int main ( ) {\nchar * data ; data = new char [ 100 ] ;\nchar * * dataPtr ; dataPtr = & data ;\nprintf ( \"test\" ) ;\ndelete [ ] data ;\n}" always "int main ( ) {\nchar * data ; data = new char [ 100 ] ;\nchar * * dataPtr ; dataPtr = & data ;\nprintf ( \"test\" ) ;\ndelete [ ] data ;\n}"
Line 6882
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6882 always 6882
  exp always "int main ( ) {\nchar * data ; data = new char [ 100 ] ;\nchar * * dataPtr ; dataPtr = & data ;\nprintf ( \"test\" ) ;\ndelete [ ] data ;\n}"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6882 always 6882
  code always "int main() {\n  char* data = new char[100];\n  char** dataPtr = &data;\n  printf(\"test\");\n  delete [] *dataPtr;\n}"
  true always 1
Line 6887
  165 always 165
  = always "namespace N {\n    const int n = 0;\n    namespace M { const int m = 0; }\n}\nusing namespace N;\nint i(n);\nint j(M::m);\nusing namespace N::M;\nint k(m);\nint l(N::M::m);\n"
  "namespace N {\n    const int n = 0;\n    namespace M { const int m = 0; }\n}\nusing namespace N;\nint i(n);\nint j(M::m);\nusing namespace N::M;\nint k(m);\nint l(N::M::m);\n" always "namespace N {\n    const int n = 0;\n    namespace M { const int m = 0; }\n}\nusing namespace N;\nint i(n);\nint j(M::m);\nusing namespace N::M;\nint k(m);\nint l(N::M::m);\n"
Line 6897
  243 always 243
  = always "\n\n##file 0\n1: namespace N {\n2: const int n@1 = 0 ;\n3: namespace M { const int m@2 = 0 ; }\n4: }\n5: using namespace N ;\n6: int i ; i = n@1 ;\n7: int j ( M :: m@2 ) ;\n8: using namespace N :: M ;\n9: int k ; k = m@2 ;\n10: int l ( N :: M :: m@2 ) ;\n"
  "\n\n##file 0\n1: namespace N {\n2: const int n@1 = 0 ;\n3: namespace M { const int m@2 = 0 ; }\n4: }\n5: using namespace N ;\n6: int i ; i = n@1 ;\n7: int j ( M :: m@2 ) ;\n8: using namespace N :: M ;\n9: int k ; k = m@2 ;\n10: int l ( N :: M :: m@2 ) ;\n" always "\n\n##file 0\n1: namespace N {\n2: const int n@1 = 0 ;\n3: namespace M { const int m@2 = 0 ; }\n4: }\n5: using namespace N ;\n6: int i ; i = n@1 ;\n7: int j ( M :: m@2 ) ;\n8: using namespace N :: M ;\n9: int k ; k = m@2 ;\n10: int l ( N :: M :: m@2 ) ;\n"
Line 6908
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6908 always 6908
  exp always "\n\n##file 0\n1: namespace N {\n2: const int n@1 = 0 ;\n3: namespace M { const int m@2 = 0 ; }\n4: }\n5: using namespace N ;\n6: int i ; i = n@1 ;\n7: int j ( M :: m@2 ) ;\n8: using namespace N :: M ;\n9: int k ; k = m@2 ;\n10: int l ( N :: M :: m@2 ) ;\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6908 always 6908
  code always "namespace N {\n    const int n = 0;\n    namespace M { const int m = 0; }\n}\nusing namespace N;\nint i(n);\nint j(M::m);\nusing namespace N::M;\nint k(m);\nint l(N::M::m);\n"
Line 6911
  230 always 230
  = always "using namespace X;\nnamespace N {\n    struct A {\n        static int i;\n        struct B {\n            double x;\n            void f();\n        };\n    };\n}\nnamespace N {\n    int A::i = 0;\n    void A::B::f() {\n        x = 0;\n    }\n}\n"
  "using namespace X;\nnamespace N {\n    struct A {\n        static int i;\n        struct B {\n            double x;\n            void f();\n        };\n    };\n}\nnamespace N {\n    int A::i = 0;\n    void A::B::f() {\n        x = 0;\n    }\n}\n" always "using namespace X;\nnamespace N {\n    struct A {\n        static int i;\n        struct B {\n            double x;\n            void f();\n        };\n    };\n}\nnamespace N {\n    int A::i = 0;\n    void A::B::f() {\n        x = 0;\n    }\n}\n"
Line 6927
  246 always 246
  = always "\n\n##file 0\n1: using namespace X ;\n2: namespace N {\n3: struct A {\n4: static int i@1 ;\n5: struct B {\n6: double x@2 ;\n7: void f ( ) ;\n8: } ;\n9: } ;\n10: }\n11: namespace N {\n12: int A :: i@1 = 0 ;\n13: void A :: B :: f ( ) {\n14: x@2 = 0 ;\n15: }\n16: }\n"
  "\n\n##file 0\n1: using namespace X ;\n2: namespace N {\n3: struct A {\n4: static int i@1 ;\n5: struct B {\n6: double x@2 ;\n7: void f ( ) ;\n8: } ;\n9: } ;\n10: }\n11: namespace N {\n12: int A :: i@1 = 0 ;\n13: void A :: B :: f ( ) {\n14: x@2 = 0 ;\n15: }\n16: }\n" always "\n\n##file 0\n1: using namespace X ;\n2: namespace N {\n3: struct A {\n4: static int i@1 ;\n5: struct B {\n6: double x@2 ;\n7: void f ( ) ;\n8: } ;\n9: } ;\n10: }\n11: namespace N {\n12: int A :: i@1 = 0 ;\n13: void A :: B :: f ( ) {\n14: x@2 = 0 ;\n15: }\n16: }\n"
Line 6944
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6944 always 6944
  exp always "\n\n##file 0\n1: using namespace X ;\n2: namespace N {\n3: struct A {\n4: static int i@1 ;\n5: struct B {\n6: double x@2 ;\n7: void f ( ) ;\n8: } ;\n9: } ;\n10: }\n11: namespace N {\n12: int A :: i@1 = 0 ;\n13: void A :: B :: f ( ) {\n14: x@2 = 0 ;\n15: }\n16: }\n"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6944 always 6944
  code always "using namespace X;\nnamespace N {\n    struct A {\n        static int i;\n        struct B {\n            double x;\n            void f();\n        };\n    };\n}\nnamespace N {\n    int A::i = 0;\n    void A::B::f() {\n        x = 0;\n    }\n}\n"
Line 6951
  81 always 81
  = always "char *a;\nvoid f(const char *s) {\n    a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"
  "char *a;\nvoid f(const char *s) {\n    a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n" always "char *a;\nvoid f(const char *s) {\n    a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"
Line 6958
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6958 always 6958
  code always "char *a;\nvoid f(const char *s) {\n    a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"
  true always 1
Line 6959
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6959 always 6959
  true always 1
  ( always !<=-1
  "memcpy ( a , s , 10 ) ;" always "memcpy ( a , s , 10 ) ;"
  != always {!<=-1,!>=2}
Line 6964
  78 always 78
  = always "void f(const char *s) {\n    char *a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"
  "void f(const char *s) {\n    char *a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n" always "void f(const char *s) {\n    char *a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"
Line 6970
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6970 always 6970
  code always "void f(const char *s) {\n    char *a = NULL;\n    x();\n    memcpy(a, s, 10);\n}\n"
  true always 1
Line 6971
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6971 always 6971
  true always 1
  false always 0
  ( always !<=-1
  "memcpy ( 0 , s , 10 ) ;" always "memcpy ( 0 , s , 10 ) ;"
  != always {!<=-1,!>=2}
Line 6978
  15 always 15
  = always "int *f(int *);"
  "int *f(int *);" always "int *f(int *);"
Line 6979
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6979 always 6979
  "int * f ( int * ) ;" always "int * f ( int * ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6979 always 6979
  code always "int *f(int *);"
Line 6984
  44 always 44
  = always "t = (static_cast<std::vector<int> *>(&p));\n"
  "t = (static_cast<std::vector<int> *>(&p));\n" always "t = (static_cast<std::vector<int> *>(&p));\n"
Line 6985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6985 always 6985
  "t = & p ;" always "t = & p ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6985 always 6985
  code always "t = (static_cast<std::vector<int> *>(&p));\n"
Line 6990
  51 always 51
  = always "assert (iplen >= (unsigned) ipv4->ip_hl * 4 + 20);"
  "assert (iplen >= (unsigned) ipv4->ip_hl * 4 + 20);" always "assert (iplen >= (unsigned) ipv4->ip_hl * 4 + 20);"
Line 6991
  44 always 44
  = always "assert ( iplen >= ipv4 . ip_hl * 4 + 20 ) ;"
  "assert ( iplen >= ipv4 . ip_hl * 4 + 20 ) ;" always "assert ( iplen >= ipv4 . ip_hl * 4 + 20 ) ;"
Line 6992
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6992 always 6992
  expected always "assert ( iplen >= ipv4 . ip_hl * 4 + 20 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6992 always 6992
  code always "assert (iplen >= (unsigned) ipv4->ip_hl * 4 + 20);"
Line 6997
  29 always 29
  = always "{if (a >= (unsigned)(b)) {}}"
  "{if (a >= (unsigned)(b)) {}}" always "{if (a >= (unsigned)(b)) {}}"
Line 6998
  34 always 34
  = always "{ if ( a >= ( int ) ( b ) ) { } }"
  "{ if ( a >= ( int ) ( b ) ) { } }" always "{ if ( a >= ( int ) ( b ) ) { } }"
Line 6999
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6999 always 6999
  expected always "{ if ( a >= ( int ) ( b ) ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  6999 always 6999
  code always "{if (a >= (unsigned)(b)) {}}"
Line 7004
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7004 always 7004
  "a . data = f ;" always "a . data = f ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7004 always 7004
  "a->data = reinterpret_cast<void*>(static_cast<intptr_t>(f));" always "a->data = reinterpret_cast<void*>(static_cast<intptr_t>(f));"
Line 7008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7008 always 7008
  "str = malloc ( 3 )" always "str = malloc ( 3 )"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7008 always 7008
  "str=(char **)malloc(3)" always "str=(char **)malloc(3)"
Line 7012
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7012 always 7012
  "ptr1 = ptr2" always "ptr1 = ptr2"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7012 always 7012
  "ptr1=(int *   **)ptr2" always "ptr1=(int *   **)ptr2"
Line 7016
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7016 always 7016
  "f ( ( double ) ( v1 ) * v2 )" always "f ( ( double ) ( v1 ) * v2 )"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7016 always 7016
  "f((double)(v1)*v2)" always "f((double)(v1)*v2)"
Line 7017
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7017 always 7017
  "int v1 ; f ( ( double ) ( v1 ) * v2 )" always "int v1 ; f ( ( double ) ( v1 ) * v2 )"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7017 always 7017
  "int v1; f((double)(v1)*v2)" always "int v1; f((double)(v1)*v2)"
Line 7018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7018 always 7018
  "f ( ( A ) ( B ) & x )" always "f ( ( A ) ( B ) & x )"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7018 always 7018
  "f((A)(B)&x)" always "f((A)(B)&x)"
Line 7022
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7022 always 7022
  "; ( * f ) ( p ) ;" always "; ( * f ) ( p ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7022 always 7022
  "; (*(void (*)(char *))f)(p);" always "; (*(void (*)(char *))f)(p);"
Line 7026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7026 always 7026
  "; x = 0 ;" always "; x = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7026 always 7026
  "; *(int *)&x = 0;" always "; *(int *)&x = 0;"
Line 7031
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7031 always 7031
  "; ( ( short * ) data ) [ 5 ] = 0 ;" always "; ( ( short * ) data ) [ 5 ] = 0 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7031 always 7031
  "; ((short*)data)[5] = 0;" always "; ((short*)data)[5] = 0;"
  true always 1
Line 7036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7036 always 7036
  "; int x ; x = * y ;" always "; int x ; x = * y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7036 always 7036
  ";int x=(int)*y;" always ";int x=(int)*y;"
Line 7037
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7037 always 7037
  "; int x ; x = & y ;" always "; int x ; x = & y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7037 always 7037
  ";int x=(int)&y;" always ";int x=(int)&y;"
Line 7038
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7038 always 7038
  "; int x ; x = ( INT ) * y ;" always "; int x ; x = ( INT ) * y ;"
  "; int x ; x = * y ;" always "; int x ; x = * y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7038 always 7038
  ";int x=(INT)*y;" always ";int x=(INT)*y;"
Line 7041
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7041 always 7041
  "; int x ; x = ( INT ) & y ;" always "; int x ; x = ( INT ) & y ;"
  "; int x ; x = & y ;" always "; int x ; x = & y ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7041 always 7041
  ";int x=(INT)&y;" always ";int x=(INT)&y;"
Line 7046
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7046 always 7046
  "; float angle ; angle = tilt ;" always "; float angle ; angle = tilt ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7046 always 7046
  "; float angle = (float) tilt;" always "; float angle = (float) tilt;"
Line 7047
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7047 always 7047
  "; float angle ; angle = ( float ) - tilt ;" always "; float angle ; angle = ( float ) - tilt ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7047 always 7047
  "; float angle = (float) -tilt;" always "; float angle = (float) -tilt;"
Line 7048
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7048 always 7048
  "; float angle ; angle = ( float ) + tilt ;" always "; float angle ; angle = ( float ) + tilt ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7048 always 7048
  "; float angle = (float) +tilt;" always "; float angle = (float) +tilt;"
Line 7049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7049 always 7049
  "; int a ; a = ( int ) ~ c ;" always "; int a ; a = ( int ) ~ c ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7049 always 7049
  "; int a = (int)~c;" always "; int a = (int)~c;"
Line 7054
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7054 always 7054
  "( ! ( & s ) . a ) ;" always "( ! ( & s ) . a ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7054 always 7054
  "(! ( (struct S const *) &s)->a);" always "(! ( (struct S const *) &s)->a);"
Line 7056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7056 always 7056
  "bar ( & ptr ) ;" always "bar ( & ptr ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7056 always 7056
  "bar((const X**)&ptr);" always "bar((const X**)&ptr);"
Line 7060
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7060 always 7060
  "a + ( b ? 60 : 0 ) ;" always "a + ( b ? 60 : 0 ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7060 always 7060
  "a + static_cast<int>(b ? 60 : 0);" always "a + static_cast<int>(b ? 60 : 0);"
Line 7065
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7065 always 7065
  "Get ( pArray ) ;" always "Get ( pArray ) ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7065 always 7065
  "Get((CObject*&)pArray);" always "Get((CObject*&)pArray);"
Line 7070
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7070 always 7070
  "{ if ( a ( b ) ( c ) >= 3 ) { } }" always "{ if ( a ( b ) ( c ) >= 3 ) { } }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7070 always 7070
  "{ if (a(b)(c) >= 3) { } }" always "{ if (a(b)(c) >= 3) { } }"
Line 7076
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7076 always 7076
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7076 always 7076
  "void f() { int *p, *q; p = q; }" always "void f() { int *p, *q; p = q; }"
Line 7077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7077 always 7077
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7077 always 7077
  "void f() { int *p = 0, *q; p = q; }" always "void f() { int *p = 0, *q; p = q; }"
Line 7078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7078 always 7078
  "int f ( int * x ) { return * x ; }" always "int f ( int * x ) { return * x ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7078 always 7078
  "int f(int *x) { return *x; }" always "int f(int *x) { return *x; }"
Line 7082
  78 always 78
  = always "void f() {\nconst int a = 45;\nif( a )\n{ int b = a; }\n}\nvoid g() {\nint a = 2;\n}"
Line 7083
  "void f() {\nconst int a = 45;\nif( a )\n{ int b = a; }\n}\nvoid g() {\nint a = 2;\n}" always "void f() {\nconst int a = 45;\nif( a )\n{ int b = a; }\n}\nvoid g() {\nint a = 2;\n}"
Line 7091
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7091 always 7091
  "void f ( ) { } void g ( ) { }" always "void f ( ) { } void g ( ) { }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7091 always 7091
  code always "void f() {\nconst int a = 45;\nif( a )\n{ int b = a; }\n}\nvoid g() {\nint a = 2;\n}"
Line 7095
  74 always 74
  = always "void f( Foo &foo, Foo *foo2 ) {\nconst int a = 45;\nfoo.a=a+a;\nfoo2->a=a;\n}"
Line 7096
  "void f( Foo &foo, Foo *foo2 ) {\nconst int a = 45;\nfoo.a=a+a;\nfoo2->a=a;\n}" always "void f( Foo &foo, Foo *foo2 ) {\nconst int a = 45;\nfoo.a=a+a;\nfoo2->a=a;\n}"
Line 7101
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7101 always 7101
  "void f ( Foo & foo , Foo * foo2 ) { foo . a = 90 ; foo2 . a = 45 ; }" always "void f ( Foo & foo , Foo * foo2 ) { foo . a = 90 ; foo2 . a = 45 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7101 always 7101
  code always "void f( Foo &foo, Foo *foo2 ) {\nconst int a = 45;\nfoo.a=a+a;\nfoo2->a=a;\n}"
Line 7105
  100 always 100
  = always "static const char str[] = \"abcd\";\nstatic const unsigned int SZ = sizeof(str);\nvoid f() {\na = SZ;\n}\n"
Line 7106
  "static const char str[] = \"abcd\";\nstatic const unsigned int SZ = sizeof(str);\nvoid f() {\na = SZ;\n}\n" always "static const char str[] = \"abcd\";\nstatic const unsigned int SZ = sizeof(str);\nvoid f() {\na = SZ;\n}\n"
Line 7111
  62 always 62
  = always "static const char str [ 5 ] = \"abcd\" ; void f ( ) { a = 5 ; }"
Line 7112
  "static const char str [ 5 ] = \"abcd\" ; void f ( ) { a = 5 ; }" always "static const char str [ 5 ] = \"abcd\" ; void f ( ) { a = 5 ; }"
Line 7113
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7113 always 7113
  expected always "static const char str [ 5 ] = \"abcd\" ; void f ( ) { a = 5 ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7113 always 7113
  code always "static const char str[] = \"abcd\";\nstatic const unsigned int SZ = sizeof(str);\nvoid f() {\na = SZ;\n}\n"
Line 7117
  80 always 80
  = always "static const int bSize = 4;\nstatic const int aSize = 50;\nx = bSize;\ny = aSize;\n"
  "static const int bSize = 4;\nstatic const int aSize = 50;\nx = bSize;\ny = aSize;\n" always "static const int bSize = 4;\nstatic const int aSize = 50;\nx = bSize;\ny = aSize;\n"
Line 7121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7121 always 7121
  "x = 4 ; y = 50 ;" always "x = 4 ; y = 50 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7121 always 7121
  code always "static const int bSize = 4;\nstatic const int aSize = 50;\nx = bSize;\ny = aSize;\n"
Line 7125
  150 always 150
  = always "int buffer[10];\nstatic const int NELEMS = sizeof(buffer)/sizeof(int);\nstatic const int NELEMS2(sizeof(buffer)/sizeof(int));\nx = NELEMS;\ny = NELEMS2;\n"
  "int buffer[10];\nstatic const int NELEMS = sizeof(buffer)/sizeof(int);\nstatic const int NELEMS2(sizeof(buffer)/sizeof(int));\nx = NELEMS;\ny = NELEMS2;\n" always "int buffer[10];\nstatic const int NELEMS = sizeof(buffer)/sizeof(int);\nstatic const int NELEMS2(sizeof(buffer)/sizeof(int));\nx = NELEMS;\ny = NELEMS2;\n"
Line 7130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7130 always 7130
  "int buffer [ 10 ] ; x = 10 ; y = 10 ;" always "int buffer [ 10 ] ; x = 10 ; y = 10 ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7130 always 7130
  code always "int buffer[10];\nstatic const int NELEMS = sizeof(buffer)/sizeof(int);\nstatic const int NELEMS2(sizeof(buffer)/sizeof(int));\nx = NELEMS;\ny = NELEMS2;\n"
Line 7135
  103 always 103
  = always "template < class T > struct foo ;\nvoid bar ( ) {\nfoo < 1 ? 0 ? 1 : 6 : 2 > x ;\nfoo < 1 ? 0 : 2 > y ;\n}"
  "template < class T > struct foo ;\nvoid bar ( ) {\nfoo < 1 ? 0 ? 1 : 6 : 2 > x ;\nfoo < 1 ? 0 : 2 > y ;\n}" always "template < class T > struct foo ;\nvoid bar ( ) {\nfoo < 1 ? 0 ? 1 : 6 : 2 > x ;\nfoo < 1 ? 0 : 2 > y ;\n}"
Line 7140
  79 always 79
  = always "template < class T > struct foo ; void bar ( ) { foo < 6 > x ; foo < 0 > y ; }"
  "template < class T > struct foo ; void bar ( ) { foo < 6 > x ; foo < 0 > y ; }" always "template < class T > struct foo ; void bar ( ) { foo < 6 > x ; foo < 0 > y ; }"
Line 7145
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7145 always 7145
  exp always "template < class T > struct foo ; void bar ( ) { foo < 6 > x ; foo < 0 > y ; }"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7145 always 7145
  code always "template < class T > struct foo ;\nvoid bar ( ) {\nfoo < 1 ? 0 ? 1 : 6 : 2 > x ;\nfoo < 1 ? 0 : 2 > y ;\n}"
Line 7148
  32 always 32
  = always "bool b = true ? false : 1 > 2 ;"
  "bool b = true ? false : 1 > 2 ;" always "bool b = true ? false : 1 > 2 ;"
Line 7149
  21 always 21
  = always "bool b ; b = false ;"
  "bool b ; b = false ;" always "bool b ; b = false ;"
Line 7150
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7150 always 7150
  exp always "bool b ; b = false ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7150 always 7150
  code always "bool b = true ? false : 1 > 2 ;"
Line 7156
  30 always 30
  = always "std::vector<int> v{a * b, 1};"
  "std::vector<int> v{a * b, 1};" always "std::vector<int> v{a * b, 1};"
Line 7157
  40 always 40
  = always "std :: vector < int > v { a * b , 1 } ;"
  "std :: vector < int > v { a * b , 1 } ;" always "std :: vector < int > v { a * b , 1 } ;"
Line 7158
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7158 always 7158
  exp always "std :: vector < int > v { a * b , 1 } ;"
  "cppcheck-2.8/test/testsimplifytokens.cpp" always "cppcheck-2.8/test/testsimplifytokens.cpp"
  7158 always 7158
  code always "std::vector<int> v{a * b, 1};"
