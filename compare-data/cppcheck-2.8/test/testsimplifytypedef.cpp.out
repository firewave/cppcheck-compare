

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742375 expected@var22 !=@expr1073742376 actual@var23 ) {
62: std ::@expr1073742377 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742378 expected@var22 ;
64: std ::@expr1073742379 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742380 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742381 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742382 str (@expr1073742383 ) , actualStr@var26 .@expr1073742384 str (@expr1073742385 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742386 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742387 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742388 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742389 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testsimplifytypedef.cpp

1:
|
36:
37: class TestSimplifyTypedef : public TestFixture {
38: public:
39: TestSimplifyTypedef ( ) : TestFixture ( "TestSimplifyTypedef" ) { }
40:
41:
42: private:
43: Settings settings0@var102 ;
44: Settings settings1@var103 ;
45: Settings settings2@var104 ;
46:
47: void run ( ) override {
48: settings0@var102 .@expr1073742391 severity@var105 .@expr1073742392 enable (@expr1073742393 Severity ::@expr570 style@expr566 ) ;
49: settings2@var104 .@expr1073742395 severity@var106 .@expr1073742396 enable (@expr1073742397 Severity ::@expr570 style@expr566 ) ;
50:
51:
52: settings0@var102 .@expr1073742399 checkUnusedTemplates@var107 =@expr1073742400 true ;
53: settings1@var103 .@expr1073742401 checkUnusedTemplates@var108 =@expr1073742402 true ;
54: settings2@var104 .@expr1073742403 checkUnusedTemplates@var109 =@expr1073742404 true ;
55:
56: $do ${ $if $(@expr1073742405 $prepareTest $(@expr1073742406 "simplifyTypedef1" $) $) ${ $setVerbose $(@expr1073742407 $false $) $; simplifyTypedef1 $(@expr1073742408 $) $; $} $} $while $(@expr1073742409 $false $) ;
57: $do ${ $if $(@expr1073742410 $prepareTest $(@expr1073742411 "simplifyTypedef2" $) $) ${ $setVerbose $(@expr1073742412 $false $) $; simplifyTypedef2 $(@expr1073742413 $) $; $} $} $while $(@expr1073742414 $false $) ;
58: $do ${ $if $(@expr1073742415 $prepareTest $(@expr1073742416 "simplifyTypedef3" $) $) ${ $setVerbose $(@expr1073742417 $false $) $; simplifyTypedef3 $(@expr1073742418 $) $; $} $} $while $(@expr1073742419 $false $) ;
59: $do ${ $if $(@expr1073742420 $prepareTest $(@expr1073742421 "simplifyTypedef4" $) $) ${ $setVerbose $(@expr1073742422 $false $) $; simplifyTypedef4 $(@expr1073742423 $) $; $} $} $while $(@expr1073742424 $false $) ;
60: $do ${ $if $(@expr1073742425 $prepareTest $(@expr1073742426 "simplifyTypedef5" $) $) ${ $setVerbose $(@expr1073742427 $false $) $; simplifyTypedef5 $(@expr1073742428 $) $; $} $} $while $(@expr1073742429 $false $) ;
61: $do ${ $if $(@expr1073742430 $prepareTest $(@expr1073742431 "simplifyTypedef6" $) $) ${ $setVerbose $(@expr1073742432 $false $) $; simplifyTypedef6 $(@expr1073742433 $) $; $} $} $while $(@expr1073742434 $false $) ;
62: $do ${ $if $(@expr1073742435 $prepareTest $(@expr1073742436 "simplifyTypedef7" $) $) ${ $setVerbose $(@expr1073742437 $false $) $; simplifyTypedef7 $(@expr1073742438 $) $; $} $} $while $(@expr1073742439 $false $) ;
63: $do ${ $if $(@expr1073742440 $prepareTest $(@expr1073742441 "simplifyTypedef8" $) $) ${ $setVerbose $(@expr1073742442 $false $) $; simplifyTypedef8 $(@expr1073742443 $) $; $} $} $while $(@expr1073742444 $false $) ;
64: $do ${ $if $(@expr1073742445 $prepareTest $(@expr1073742446 "simplifyTypedef9" $) $) ${ $setVerbose $(@expr1073742447 $false $) $; simplifyTypedef9 $(@expr1073742448 $) $; $} $} $while $(@expr1073742449 $false $) ;
65: $do ${ $if $(@expr1073742450 $prepareTest $(@expr1073742451 "simplifyTypedef10" $) $) ${ $setVerbose $(@expr1073742452 $false $) $; simplifyTypedef10 $(@expr1073742453 $) $; $} $} $while $(@expr1073742454 $false $) ;
66: $do ${ $if $(@expr1073742455 $prepareTest $(@expr1073742456 "simplifyTypedef11" $) $) ${ $setVerbose $(@expr1073742457 $false $) $; simplifyTypedef11 $(@expr1073742458 $) $; $} $} $while $(@expr1073742459 $false $) ;
67: $do ${ $if $(@expr1073742460 $prepareTest $(@expr1073742461 "simplifyTypedef12" $) $) ${ $setVerbose $(@expr1073742462 $false $) $; simplifyTypedef12 $(@expr1073742463 $) $; $} $} $while $(@expr1073742464 $false $) ;
68: $do ${ $if $(@expr1073742465 $prepareTest $(@expr1073742466 "simplifyTypedef13" $) $) ${ $setVerbose $(@expr1073742467 $false $) $; simplifyTypedef13 $(@expr1073742468 $) $; $} $} $while $(@expr1073742469 $false $) ;
69: $do ${ $if $(@expr1073742470 $prepareTest $(@expr1073742471 "simplifyTypedef14" $) $) ${ $setVerbose $(@expr1073742472 $false $) $; simplifyTypedef14 $(@expr1073742473 $) $; $} $} $while $(@expr1073742474 $false $) ;
70: $do ${ $if $(@expr1073742475 $prepareTest $(@expr1073742476 "simplifyTypedef15" $) $) ${ $setVerbose $(@expr1073742477 $false $) $; simplifyTypedef15 $(@expr1073742478 $) $; $} $} $while $(@expr1073742479 $false $) ;
71: $do ${ $if $(@expr1073742480 $prepareTest $(@expr1073742481 "simplifyTypedef16" $) $) ${ $setVerbose $(@expr1073742482 $false $) $; simplifyTypedef16 $(@expr1073742483 $) $; $} $} $while $(@expr1073742484 $false $) ;
72: $do ${ $if $(@expr1073742485 $prepareTest $(@expr1073742486 "simplifyTypedef17" $) $) ${ $setVerbose $(@expr1073742487 $false $) $; simplifyTypedef17 $(@expr1073742488 $) $; $} $} $while $(@expr1073742489 $false $) ;
73: $do ${ $if $(@expr1073742490 $prepareTest $(@expr1073742491 "simplifyTypedef18" $) $) ${ $setVerbose $(@expr1073742492 $false $) $; simplifyTypedef18 $(@expr1073742493 $) $; $} $} $while $(@expr1073742494 $false $) ;
74: $do ${ $if $(@expr1073742495 $prepareTest $(@expr1073742496 "simplifyTypedef19" $) $) ${ $setVerbose $(@expr1073742497 $false $) $; simplifyTypedef19 $(@expr1073742498 $) $; $} $} $while $(@expr1073742499 $false $) ;
75: $do ${ $if $(@expr1073742500 $prepareTest $(@expr1073742501 "simplifyTypedef20" $) $) ${ $setVerbose $(@expr1073742502 $false $) $; simplifyTypedef20 $(@expr1073742503 $) $; $} $} $while $(@expr1073742504 $false $) ;
76: $do ${ $if $(@expr1073742505 $prepareTest $(@expr1073742506 "simplifyTypedef21" $) $) ${ $setVerbose $(@expr1073742507 $false $) $; simplifyTypedef21 $(@expr1073742508 $) $; $} $} $while $(@expr1073742509 $false $) ;
77: $do ${ $if $(@expr1073742510 $prepareTest $(@expr1073742511 "simplifyTypedef22" $) $) ${ $setVerbose $(@expr1073742512 $false $) $; simplifyTypedef22 $(@expr1073742513 $) $; $} $} $while $(@expr1073742514 $false $) ;
78: $do ${ $if $(@expr1073742515 $prepareTest $(@expr1073742516 "simplifyTypedef23" $) $) ${ $setVerbose $(@expr1073742517 $false $) $; simplifyTypedef23 $(@expr1073742518 $) $; $} $} $while $(@expr1073742519 $false $) ;
79: $do ${ $if $(@expr1073742520 $prepareTest $(@expr1073742521 "simplifyTypedef24" $) $) ${ $setVerbose $(@expr1073742522 $false $) $; simplifyTypedef24 $(@expr1073742523 $) $; $} $} $while $(@expr1073742524 $false $) ;
80: $do ${ $if $(@expr1073742525 $prepareTest $(@expr1073742526 "simplifyTypedef25" $) $) ${ $setVerbose $(@expr1073742527 $false $) $; simplifyTypedef25 $(@expr1073742528 $) $; $} $} $while $(@expr1073742529 $false $) ;
81: $do ${ $if $(@expr1073742530 $prepareTest $(@expr1073742531 "simplifyTypedef26" $) $) ${ $setVerbose $(@expr1073742532 $false $) $; simplifyTypedef26 $(@expr1073742533 $) $; $} $} $while $(@expr1073742534 $false $) ;
82: $do ${ $if $(@expr1073742535 $prepareTest $(@expr1073742536 "simplifyTypedef27" $) $) ${ $setVerbose $(@expr1073742537 $false $) $; simplifyTypedef27 $(@expr1073742538 $) $; $} $} $while $(@expr1073742539 $false $) ;
83: $do ${ $if $(@expr1073742540 $prepareTest $(@expr1073742541 "simplifyTypedef28" $) $) ${ $setVerbose $(@expr1073742542 $false $) $; simplifyTypedef28 $(@expr1073742543 $) $; $} $} $while $(@expr1073742544 $false $) ;
84: $do ${ $if $(@expr1073742545 $prepareTest $(@expr1073742546 "simplifyTypedef29" $) $) ${ $setVerbose $(@expr1073742547 $false $) $; simplifyTypedef29 $(@expr1073742548 $) $; $} $} $while $(@expr1073742549 $false $) ;
85: $do ${ $if $(@expr1073742550 $prepareTest $(@expr1073742551 "simplifyTypedef30" $) $) ${ $setVerbose $(@expr1073742552 $false $) $; simplifyTypedef30 $(@expr1073742553 $) $; $} $} $while $(@expr1073742554 $false $) ;
86: $do ${ $if $(@expr1073742555 $prepareTest $(@expr1073742556 "simplifyTypedef31" $) $) ${ $setVerbose $(@expr1073742557 $false $) $; simplifyTypedef31 $(@expr1073742558 $) $; $} $} $while $(@expr1073742559 $false $) ;
87: $do ${ $if $(@expr1073742560 $prepareTest $(@expr1073742561 "simplifyTypedef32" $) $) ${ $setVerbose $(@expr1073742562 $false $) $; simplifyTypedef32 $(@expr1073742563 $) $; $} $} $while $(@expr1073742564 $false $) ;
88: $do ${ $if $(@expr1073742565 $prepareTest $(@expr1073742566 "simplifyTypedef33" $) $) ${ $setVerbose $(@expr1073742567 $false $) $; simplifyTypedef33 $(@expr1073742568 $) $; $} $} $while $(@expr1073742569 $false $) ;
89: $do ${ $if $(@expr1073742570 $prepareTest $(@expr1073742571 "simplifyTypedef34" $) $) ${ $setVerbose $(@expr1073742572 $false $) $; simplifyTypedef34 $(@expr1073742573 $) $; $} $} $while $(@expr1073742574 $false $) ;
90: $do ${ $if $(@expr1073742575 $prepareTest $(@expr1073742576 "simplifyTypedef35" $) $) ${ $setVerbose $(@expr1073742577 $false $) $; simplifyTypedef35 $(@expr1073742578 $) $; $} $} $while $(@expr1073742579 $false $) ;
91: $do ${ $if $(@expr1073742580 $prepareTest $(@expr1073742581 "simplifyTypedef36" $) $) ${ $setVerbose $(@expr1073742582 $false $) $; simplifyTypedef36 $(@expr1073742583 $) $; $} $} $while $(@expr1073742584 $false $) ;
92: $do ${ $if $(@expr1073742585 $prepareTest $(@expr1073742586 "simplifyTypedef37" $) $) ${ $setVerbose $(@expr1073742587 $false $) $; simplifyTypedef37 $(@expr1073742588 $) $; $} $} $while $(@expr1073742589 $false $) ;
93: $do ${ $if $(@expr1073742590 $prepareTest $(@expr1073742591 "simplifyTypedef38" $) $) ${ $setVerbose $(@expr1073742592 $false $) $; simplifyTypedef38 $(@expr1073742593 $) $; $} $} $while $(@expr1073742594 $false $) ;
94: $do ${ $if $(@expr1073742595 $prepareTest $(@expr1073742596 "simplifyTypedef43" $) $) ${ $setVerbose $(@expr1073742597 $false $) $; simplifyTypedef43 $(@expr1073742598 $) $; $} $} $while $(@expr1073742599 $false $) ;
95: $do ${ $if $(@expr1073742600 $prepareTest $(@expr1073742601 "simplifyTypedef44" $) $) ${ $setVerbose $(@expr1073742602 $false $) $; simplifyTypedef44 $(@expr1073742603 $) $; $} $} $while $(@expr1073742604 $false $) ;
96: $do ${ $if $(@expr1073742605 $prepareTest $(@expr1073742606 "simplifyTypedef45" $) $) ${ $setVerbose $(@expr1073742607 $false $) $; simplifyTypedef45 $(@expr1073742608 $) $; $} $} $while $(@expr1073742609 $false $) ;
97: $do ${ $if $(@expr1073742610 $prepareTest $(@expr1073742611 "simplifyTypedef46" $) $) ${ $setVerbose $(@expr1073742612 $false $) $; simplifyTypedef46 $(@expr1073742613 $) $; $} $} $while $(@expr1073742614 $false $) ;
98: $do ${ $if $(@expr1073742615 $prepareTest $(@expr1073742616 "simplifyTypedef47" $) $) ${ $setVerbose $(@expr1073742617 $false $) $; simplifyTypedef47 $(@expr1073742618 $) $; $} $} $while $(@expr1073742619 $false $) ;
99: $do ${ $if $(@expr1073742620 $prepareTest $(@expr1073742621 "simplifyTypedef48" $) $) ${ $setVerbose $(@expr1073742622 $false $) $; simplifyTypedef48 $(@expr1073742623 $) $; $} $} $while $(@expr1073742624 $false $) ;
100: $do ${ $if $(@expr1073742625 $prepareTest $(@expr1073742626 "simplifyTypedef49" $) $) ${ $setVerbose $(@expr1073742627 $false $) $; simplifyTypedef49 $(@expr1073742628 $) $; $} $} $while $(@expr1073742629 $false $) ;
101: $do ${ $if $(@expr1073742630 $prepareTest $(@expr1073742631 "simplifyTypedef50" $) $) ${ $setVerbose $(@expr1073742632 $false $) $; simplifyTypedef50 $(@expr1073742633 $) $; $} $} $while $(@expr1073742634 $false $) ;
102: $do ${ $if $(@expr1073742635 $prepareTest $(@expr1073742636 "simplifyTypedef51" $) $) ${ $setVerbose $(@expr1073742637 $false $) $; simplifyTypedef51 $(@expr1073742638 $) $; $} $} $while $(@expr1073742639 $false $) ;
103: $do ${ $if $(@expr1073742640 $prepareTest $(@expr1073742641 "simplifyTypedef52" $) $) ${ $setVerbose $(@expr1073742642 $false $) $; simplifyTypedef52 $(@expr1073742643 $) $; $} $} $while $(@expr1073742644 $false $) ;
104: $do ${ $if $(@expr1073742645 $prepareTest $(@expr1073742646 "simplifyTypedef54" $) $) ${ $setVerbose $(@expr1073742647 $false $) $; simplifyTypedef54 $(@expr1073742648 $) $; $} $} $while $(@expr1073742649 $false $) ;
105: $do ${ $if $(@expr1073742650 $prepareTest $(@expr1073742651 "simplifyTypedef55" $) $) ${ $setVerbose $(@expr1073742652 $false $) $; simplifyTypedef55 $(@expr1073742653 $) $; $} $} $while $(@expr1073742654 $false $) ;
106: $do ${ $if $(@expr1073742655 $prepareTest $(@expr1073742656 "simplifyTypedef56" $) $) ${ $setVerbose $(@expr1073742657 $false $) $; simplifyTypedef56 $(@expr1073742658 $) $; $} $} $while $(@expr1073742659 $false $) ;
107: $do ${ $if $(@expr1073742660 $prepareTest $(@expr1073742661 "simplifyTypedef57" $) $) ${ $setVerbose $(@expr1073742662 $false $) $; simplifyTypedef57 $(@expr1073742663 $) $; $} $} $while $(@expr1073742664 $false $) ;
108: $do ${ $if $(@expr1073742665 $prepareTest $(@expr1073742666 "simplifyTypedef58" $) $) ${ $setVerbose $(@expr1073742667 $false $) $; simplifyTypedef58 $(@expr1073742668 $) $; $} $} $while $(@expr1073742669 $false $) ;
109: $do ${ $if $(@expr1073742670 $prepareTest $(@expr1073742671 "simplifyTypedef59" $) $) ${ $setVerbose $(@expr1073742672 $false $) $; simplifyTypedef59 $(@expr1073742673 $) $; $} $} $while $(@expr1073742674 $false $) ;
110: $do ${ $if $(@expr1073742675 $prepareTest $(@expr1073742676 "simplifyTypedef60" $) $) ${ $setVerbose $(@expr1073742677 $false $) $; simplifyTypedef60 $(@expr1073742678 $) $; $} $} $while $(@expr1073742679 $false $) ;
111: $do ${ $if $(@expr1073742680 $prepareTest $(@expr1073742681 "simplifyTypedef61" $) $) ${ $setVerbose $(@expr1073742682 $false $) $; simplifyTypedef61 $(@expr1073742683 $) $; $} $} $while $(@expr1073742684 $false $) ;
112: $do ${ $if $(@expr1073742685 $prepareTest $(@expr1073742686 "simplifyTypedef62" $) $) ${ $setVerbose $(@expr1073742687 $false $) $; simplifyTypedef62 $(@expr1073742688 $) $; $} $} $while $(@expr1073742689 $false $) ;
113: $do ${ $if $(@expr1073742690 $prepareTest $(@expr1073742691 "simplifyTypedef63" $) $) ${ $setVerbose $(@expr1073742692 $false $) $; simplifyTypedef63 $(@expr1073742693 $) $; $} $} $while $(@expr1073742694 $false $) ;
114: $do ${ $if $(@expr1073742695 $prepareTest $(@expr1073742696 "simplifyTypedef64" $) $) ${ $setVerbose $(@expr1073742697 $false $) $; simplifyTypedef64 $(@expr1073742698 $) $; $} $} $while $(@expr1073742699 $false $) ;
115: $do ${ $if $(@expr1073742700 $prepareTest $(@expr1073742701 "simplifyTypedef65" $) $) ${ $setVerbose $(@expr1073742702 $false $) $; simplifyTypedef65 $(@expr1073742703 $) $; $} $} $while $(@expr1073742704 $false $) ;
116: $do ${ $if $(@expr1073742705 $prepareTest $(@expr1073742706 "simplifyTypedef66" $) $) ${ $setVerbose $(@expr1073742707 $false $) $; simplifyTypedef66 $(@expr1073742708 $) $; $} $} $while $(@expr1073742709 $false $) ;
117: $do ${ $if $(@expr1073742710 $prepareTest $(@expr1073742711 "simplifyTypedef67" $) $) ${ $setVerbose $(@expr1073742712 $false $) $; simplifyTypedef67 $(@expr1073742713 $) $; $} $} $while $(@expr1073742714 $false $) ;
118: $do ${ $if $(@expr1073742715 $prepareTest $(@expr1073742716 "simplifyTypedef68" $) $) ${ $setVerbose $(@expr1073742717 $false $) $; simplifyTypedef68 $(@expr1073742718 $) $; $} $} $while $(@expr1073742719 $false $) ;
119: $do ${ $if $(@expr1073742720 $prepareTest $(@expr1073742721 "simplifyTypedef69" $) $) ${ $setVerbose $(@expr1073742722 $false $) $; simplifyTypedef69 $(@expr1073742723 $) $; $} $} $while $(@expr1073742724 $false $) ;
120: $do ${ $if $(@expr1073742725 $prepareTest $(@expr1073742726 "simplifyTypedef70" $) $) ${ $setVerbose $(@expr1073742727 $false $) $; simplifyTypedef70 $(@expr1073742728 $) $; $} $} $while $(@expr1073742729 $false $) ;
121: $do ${ $if $(@expr1073742730 $prepareTest $(@expr1073742731 "simplifyTypedef71" $) $) ${ $setVerbose $(@expr1073742732 $false $) $; simplifyTypedef71 $(@expr1073742733 $) $; $} $} $while $(@expr1073742734 $false $) ;
122: $do ${ $if $(@expr1073742735 $prepareTest $(@expr1073742736 "simplifyTypedef72" $) $) ${ $setVerbose $(@expr1073742737 $false $) $; simplifyTypedef72 $(@expr1073742738 $) $; $} $} $while $(@expr1073742739 $false $) ;
123: $do ${ $if $(@expr1073742740 $prepareTest $(@expr1073742741 "simplifyTypedef73" $) $) ${ $setVerbose $(@expr1073742742 $false $) $; simplifyTypedef73 $(@expr1073742743 $) $; $} $} $while $(@expr1073742744 $false $) ;
124: $do ${ $if $(@expr1073742745 $prepareTest $(@expr1073742746 "simplifyTypedef74" $) $) ${ $setVerbose $(@expr1073742747 $false $) $; simplifyTypedef74 $(@expr1073742748 $) $; $} $} $while $(@expr1073742749 $false $) ;
125: $do ${ $if $(@expr1073742750 $prepareTest $(@expr1073742751 "simplifyTypedef75" $) $) ${ $setVerbose $(@expr1073742752 $false $) $; simplifyTypedef75 $(@expr1073742753 $) $; $} $} $while $(@expr1073742754 $false $) ;
126: $do ${ $if $(@expr1073742755 $prepareTest $(@expr1073742756 "simplifyTypedef76" $) $) ${ $setVerbose $(@expr1073742757 $false $) $; simplifyTypedef76 $(@expr1073742758 $) $; $} $} $while $(@expr1073742759 $false $) ;
127: $do ${ $if $(@expr1073742760 $prepareTest $(@expr1073742761 "simplifyTypedef77" $) $) ${ $setVerbose $(@expr1073742762 $false $) $; simplifyTypedef77 $(@expr1073742763 $) $; $} $} $while $(@expr1073742764 $false $) ;
128: $do ${ $if $(@expr1073742765 $prepareTest $(@expr1073742766 "simplifyTypedef78" $) $) ${ $setVerbose $(@expr1073742767 $false $) $; simplifyTypedef78 $(@expr1073742768 $) $; $} $} $while $(@expr1073742769 $false $) ;
129: $do ${ $if $(@expr1073742770 $prepareTest $(@expr1073742771 "simplifyTypedef79" $) $) ${ $setVerbose $(@expr1073742772 $false $) $; simplifyTypedef79 $(@expr1073742773 $) $; $} $} $while $(@expr1073742774 $false $) ;
130: $do ${ $if $(@expr1073742775 $prepareTest $(@expr1073742776 "simplifyTypedef80" $) $) ${ $setVerbose $(@expr1073742777 $false $) $; simplifyTypedef80 $(@expr1073742778 $) $; $} $} $while $(@expr1073742779 $false $) ;
131: $do ${ $if $(@expr1073742780 $prepareTest $(@expr1073742781 "simplifyTypedef81" $) $) ${ $setVerbose $(@expr1073742782 $false $) $; simplifyTypedef81 $(@expr1073742783 $) $; $} $} $while $(@expr1073742784 $false $) ;
132: $do ${ $if $(@expr1073742785 $prepareTest $(@expr1073742786 "simplifyTypedef82" $) $) ${ $setVerbose $(@expr1073742787 $false $) $; simplifyTypedef82 $(@expr1073742788 $) $; $} $} $while $(@expr1073742789 $false $) ;
133: $do ${ $if $(@expr1073742790 $prepareTest $(@expr1073742791 "simplifyTypedef83" $) $) ${ $setVerbose $(@expr1073742792 $false $) $; simplifyTypedef83 $(@expr1073742793 $) $; $} $} $while $(@expr1073742794 $false $) ;
134: $do ${ $if $(@expr1073742795 $prepareTest $(@expr1073742796 "simplifyTypedef84" $) $) ${ $setVerbose $(@expr1073742797 $false $) $; simplifyTypedef84 $(@expr1073742798 $) $; $} $} $while $(@expr1073742799 $false $) ;
135: $do ${ $if $(@expr1073742800 $prepareTest $(@expr1073742801 "simplifyTypedef85" $) $) ${ $setVerbose $(@expr1073742802 $false $) $; simplifyTypedef85 $(@expr1073742803 $) $; $} $} $while $(@expr1073742804 $false $) ;
136: $do ${ $if $(@expr1073742805 $prepareTest $(@expr1073742806 "simplifyTypedef86" $) $) ${ $setVerbose $(@expr1073742807 $false $) $; simplifyTypedef86 $(@expr1073742808 $) $; $} $} $while $(@expr1073742809 $false $) ;
137: $do ${ $if $(@expr1073742810 $prepareTest $(@expr1073742811 "simplifyTypedef87" $) $) ${ $setVerbose $(@expr1073742812 $false $) $; simplifyTypedef87 $(@expr1073742813 $) $; $} $} $while $(@expr1073742814 $false $) ;
138: $do ${ $if $(@expr1073742815 $prepareTest $(@expr1073742816 "simplifyTypedef88" $) $) ${ $setVerbose $(@expr1073742817 $false $) $; simplifyTypedef88 $(@expr1073742818 $) $; $} $} $while $(@expr1073742819 $false $) ;
139: $do ${ $if $(@expr1073742820 $prepareTest $(@expr1073742821 "simplifyTypedef89" $) $) ${ $setVerbose $(@expr1073742822 $false $) $; simplifyTypedef89 $(@expr1073742823 $) $; $} $} $while $(@expr1073742824 $false $) ;
140: $do ${ $if $(@expr1073742825 $prepareTest $(@expr1073742826 "simplifyTypedef90" $) $) ${ $setVerbose $(@expr1073742827 $false $) $; simplifyTypedef90 $(@expr1073742828 $) $; $} $} $while $(@expr1073742829 $false $) ;
141: $do ${ $if $(@expr1073742830 $prepareTest $(@expr1073742831 "simplifyTypedef91" $) $) ${ $setVerbose $(@expr1073742832 $false $) $; simplifyTypedef91 $(@expr1073742833 $) $; $} $} $while $(@expr1073742834 $false $) ;
142: $do ${ $if $(@expr1073742835 $prepareTest $(@expr1073742836 "simplifyTypedef92" $) $) ${ $setVerbose $(@expr1073742837 $false $) $; simplifyTypedef92 $(@expr1073742838 $) $; $} $} $while $(@expr1073742839 $false $) ;
143: $do ${ $if $(@expr1073742840 $prepareTest $(@expr1073742841 "simplifyTypedef93" $) $) ${ $setVerbose $(@expr1073742842 $false $) $; simplifyTypedef93 $(@expr1073742843 $) $; $} $} $while $(@expr1073742844 $false $) ;
144: $do ${ $if $(@expr1073742845 $prepareTest $(@expr1073742846 "simplifyTypedef94" $) $) ${ $setVerbose $(@expr1073742847 $false $) $; simplifyTypedef94 $(@expr1073742848 $) $; $} $} $while $(@expr1073742849 $false $) ;
145: $do ${ $if $(@expr1073742850 $prepareTest $(@expr1073742851 "simplifyTypedef95" $) $) ${ $setVerbose $(@expr1073742852 $false $) $; simplifyTypedef95 $(@expr1073742853 $) $; $} $} $while $(@expr1073742854 $false $) ;
146: $do ${ $if $(@expr1073742855 $prepareTest $(@expr1073742856 "simplifyTypedef96" $) $) ${ $setVerbose $(@expr1073742857 $false $) $; simplifyTypedef96 $(@expr1073742858 $) $; $} $} $while $(@expr1073742859 $false $) ;
147: $do ${ $if $(@expr1073742860 $prepareTest $(@expr1073742861 "simplifyTypedef97" $) $) ${ $setVerbose $(@expr1073742862 $false $) $; simplifyTypedef97 $(@expr1073742863 $) $; $} $} $while $(@expr1073742864 $false $) ;
148: $do ${ $if $(@expr1073742865 $prepareTest $(@expr1073742866 "simplifyTypedef99" $) $) ${ $setVerbose $(@expr1073742867 $false $) $; simplifyTypedef99 $(@expr1073742868 $) $; $} $} $while $(@expr1073742869 $false $) ;
149: $do ${ $if $(@expr1073742870 $prepareTest $(@expr1073742871 "simplifyTypedef100" $) $) ${ $setVerbose $(@expr1073742872 $false $) $; simplifyTypedef100 $(@expr1073742873 $) $; $} $} $while $(@expr1073742874 $false $) ;
150: $do ${ $if $(@expr1073742875 $prepareTest $(@expr1073742876 "simplifyTypedef101" $) $) ${ $setVerbose $(@expr1073742877 $false $) $; simplifyTypedef101 $(@expr1073742878 $) $; $} $} $while $(@expr1073742879 $false $) ;
151: $do ${ $if $(@expr1073742880 $prepareTest $(@expr1073742881 "simplifyTypedef102" $) $) ${ $setVerbose $(@expr1073742882 $false $) $; simplifyTypedef102 $(@expr1073742883 $) $; $} $} $while $(@expr1073742884 $false $) ;
152: $do ${ $if $(@expr1073742885 $prepareTest $(@expr1073742886 "simplifyTypedef103" $) $) ${ $setVerbose $(@expr1073742887 $false $) $; simplifyTypedef103 $(@expr1073742888 $) $; $} $} $while $(@expr1073742889 $false $) ;
153: $do ${ $if $(@expr1073742890 $prepareTest $(@expr1073742891 "simplifyTypedef104" $) $) ${ $setVerbose $(@expr1073742892 $false $) $; simplifyTypedef104 $(@expr1073742893 $) $; $} $} $while $(@expr1073742894 $false $) ;
154: $do ${ $if $(@expr1073742895 $prepareTest $(@expr1073742896 "simplifyTypedef105" $) $) ${ $setVerbose $(@expr1073742897 $false $) $; simplifyTypedef105 $(@expr1073742898 $) $; $} $} $while $(@expr1073742899 $false $) ;
155: $do ${ $if $(@expr1073742900 $prepareTest $(@expr1073742901 "simplifyTypedef106" $) $) ${ $setVerbose $(@expr1073742902 $false $) $; simplifyTypedef106 $(@expr1073742903 $) $; $} $} $while $(@expr1073742904 $false $) ;
156: $do ${ $if $(@expr1073742905 $prepareTest $(@expr1073742906 "simplifyTypedef107" $) $) ${ $setVerbose $(@expr1073742907 $false $) $; simplifyTypedef107 $(@expr1073742908 $) $; $} $} $while $(@expr1073742909 $false $) ;
157: $do ${ $if $(@expr1073742910 $prepareTest $(@expr1073742911 "simplifyTypedef108" $) $) ${ $setVerbose $(@expr1073742912 $false $) $; simplifyTypedef108 $(@expr1073742913 $) $; $} $} $while $(@expr1073742914 $false $) ;
158: $do ${ $if $(@expr1073742915 $prepareTest $(@expr1073742916 "simplifyTypedef109" $) $) ${ $setVerbose $(@expr1073742917 $false $) $; simplifyTypedef109 $(@expr1073742918 $) $; $} $} $while $(@expr1073742919 $false $) ;
159: $do ${ $if $(@expr1073742920 $prepareTest $(@expr1073742921 "simplifyTypedef110" $) $) ${ $setVerbose $(@expr1073742922 $false $) $; simplifyTypedef110 $(@expr1073742923 $) $; $} $} $while $(@expr1073742924 $false $) ;
160: $do ${ $if $(@expr1073742925 $prepareTest $(@expr1073742926 "simplifyTypedef111" $) $) ${ $setVerbose $(@expr1073742927 $false $) $; simplifyTypedef111 $(@expr1073742928 $) $; $} $} $while $(@expr1073742929 $false $) ;
161: $do ${ $if $(@expr1073742930 $prepareTest $(@expr1073742931 "simplifyTypedef112" $) $) ${ $setVerbose $(@expr1073742932 $false $) $; simplifyTypedef112 $(@expr1073742933 $) $; $} $} $while $(@expr1073742934 $false $) ;
162: $do ${ $if $(@expr1073742935 $prepareTest $(@expr1073742936 "simplifyTypedef113" $) $) ${ $setVerbose $(@expr1073742937 $false $) $; simplifyTypedef113 $(@expr1073742938 $) $; $} $} $while $(@expr1073742939 $false $) ;
163: $do ${ $if $(@expr1073742940 $prepareTest $(@expr1073742941 "simplifyTypedef114" $) $) ${ $setVerbose $(@expr1073742942 $false $) $; simplifyTypedef114 $(@expr1073742943 $) $; $} $} $while $(@expr1073742944 $false $) ;
164: $do ${ $if $(@expr1073742945 $prepareTest $(@expr1073742946 "simplifyTypedef115" $) $) ${ $setVerbose $(@expr1073742947 $false $) $; simplifyTypedef115 $(@expr1073742948 $) $; $} $} $while $(@expr1073742949 $false $) ;
165: $do ${ $if $(@expr1073742950 $prepareTest $(@expr1073742951 "simplifyTypedef116" $) $) ${ $setVerbose $(@expr1073742952 $false $) $; simplifyTypedef116 $(@expr1073742953 $) $; $} $} $while $(@expr1073742954 $false $) ;
166: $do ${ $if $(@expr1073742955 $prepareTest $(@expr1073742956 "simplifyTypedef117" $) $) ${ $setVerbose $(@expr1073742957 $false $) $; simplifyTypedef117 $(@expr1073742958 $) $; $} $} $while $(@expr1073742959 $false $) ;
167: $do ${ $if $(@expr1073742960 $prepareTest $(@expr1073742961 "simplifyTypedef118" $) $) ${ $setVerbose $(@expr1073742962 $false $) $; simplifyTypedef118 $(@expr1073742963 $) $; $} $} $while $(@expr1073742964 $false $) ;
168: $do ${ $if $(@expr1073742965 $prepareTest $(@expr1073742966 "simplifyTypedef119" $) $) ${ $setVerbose $(@expr1073742967 $false $) $; simplifyTypedef119 $(@expr1073742968 $) $; $} $} $while $(@expr1073742969 $false $) ;
169: $do ${ $if $(@expr1073742970 $prepareTest $(@expr1073742971 "simplifyTypedef120" $) $) ${ $setVerbose $(@expr1073742972 $false $) $; simplifyTypedef120 $(@expr1073742973 $) $; $} $} $while $(@expr1073742974 $false $) ;
170: $do ${ $if $(@expr1073742975 $prepareTest $(@expr1073742976 "simplifyTypedef121" $) $) ${ $setVerbose $(@expr1073742977 $false $) $; simplifyTypedef121 $(@expr1073742978 $) $; $} $} $while $(@expr1073742979 $false $) ;
171: $do ${ $if $(@expr1073742980 $prepareTest $(@expr1073742981 "simplifyTypedef122" $) $) ${ $setVerbose $(@expr1073742982 $false $) $; simplifyTypedef122 $(@expr1073742983 $) $; $} $} $while $(@expr1073742984 $false $) ;
172: $do ${ $if $(@expr1073742985 $prepareTest $(@expr1073742986 "simplifyTypedef123" $) $) ${ $setVerbose $(@expr1073742987 $false $) $; simplifyTypedef123 $(@expr1073742988 $) $; $} $} $while $(@expr1073742989 $false $) ;
173: $do ${ $if $(@expr1073742990 $prepareTest $(@expr1073742991 "simplifyTypedef124" $) $) ${ $setVerbose $(@expr1073742992 $false $) $; simplifyTypedef124 $(@expr1073742993 $) $; $} $} $while $(@expr1073742994 $false $) ;
174: $do ${ $if $(@expr1073742995 $prepareTest $(@expr1073742996 "simplifyTypedef125" $) $) ${ $setVerbose $(@expr1073742997 $false $) $; simplifyTypedef125 $(@expr1073742998 $) $; $} $} $while $(@expr1073742999 $false $) ;
175: $do ${ $if $(@expr1073743000 $prepareTest $(@expr1073743001 "simplifyTypedef126" $) $) ${ $setVerbose $(@expr1073743002 $false $) $; simplifyTypedef126 $(@expr1073743003 $) $; $} $} $while $(@expr1073743004 $false $) ;
176: $do ${ $if $(@expr1073743005 $prepareTest $(@expr1073743006 "simplifyTypedef127" $) $) ${ $setVerbose $(@expr1073743007 $false $) $; simplifyTypedef127 $(@expr1073743008 $) $; $} $} $while $(@expr1073743009 $false $) ;
177: $do ${ $if $(@expr1073743010 $prepareTest $(@expr1073743011 "simplifyTypedef128" $) $) ${ $setVerbose $(@expr1073743012 $false $) $; simplifyTypedef128 $(@expr1073743013 $) $; $} $} $while $(@expr1073743014 $false $) ;
178: $do ${ $if $(@expr1073743015 $prepareTest $(@expr1073743016 "simplifyTypedef129" $) $) ${ $setVerbose $(@expr1073743017 $false $) $; simplifyTypedef129 $(@expr1073743018 $) $; $} $} $while $(@expr1073743019 $false $) ;
179: $do ${ $if $(@expr1073743020 $prepareTest $(@expr1073743021 "simplifyTypedef130" $) $) ${ $setVerbose $(@expr1073743022 $false $) $; simplifyTypedef130 $(@expr1073743023 $) $; $} $} $while $(@expr1073743024 $false $) ;
180: $do ${ $if $(@expr1073743025 $prepareTest $(@expr1073743026 "simplifyTypedef131" $) $) ${ $setVerbose $(@expr1073743027 $false $) $; simplifyTypedef131 $(@expr1073743028 $) $; $} $} $while $(@expr1073743029 $false $) ;
181: $do ${ $if $(@expr1073743030 $prepareTest $(@expr1073743031 "simplifyTypedef132" $) $) ${ $setVerbose $(@expr1073743032 $false $) $; simplifyTypedef132 $(@expr1073743033 $) $; $} $} $while $(@expr1073743034 $false $) ;
182: $do ${ $if $(@expr1073743035 $prepareTest $(@expr1073743036 "simplifyTypedef133" $) $) ${ $setVerbose $(@expr1073743037 $false $) $; simplifyTypedef133 $(@expr1073743038 $) $; $} $} $while $(@expr1073743039 $false $) ;
183: $do ${ $if $(@expr1073743040 $prepareTest $(@expr1073743041 "simplifyTypedef134" $) $) ${ $setVerbose $(@expr1073743042 $false $) $; simplifyTypedef134 $(@expr1073743043 $) $; $} $} $while $(@expr1073743044 $false $) ;
184: $do ${ $if $(@expr1073743045 $prepareTest $(@expr1073743046 "simplifyTypedef135" $) $) ${ $setVerbose $(@expr1073743047 $false $) $; simplifyTypedef135 $(@expr1073743048 $) $; $} $} $while $(@expr1073743049 $false $) ;
185: $do ${ $if $(@expr1073743050 $prepareTest $(@expr1073743051 "simplifyTypedef136" $) $) ${ $setVerbose $(@expr1073743052 $false $) $; simplifyTypedef136 $(@expr1073743053 $) $; $} $} $while $(@expr1073743054 $false $) ;
186: $do ${ $if $(@expr1073743055 $prepareTest $(@expr1073743056 "simplifyTypedef137" $) $) ${ $setVerbose $(@expr1073743057 $false $) $; simplifyTypedef137 $(@expr1073743058 $) $; $} $} $while $(@expr1073743059 $false $) ;
187: $do ${ $if $(@expr1073743060 $prepareTest $(@expr1073743061 "simplifyTypedef138" $) $) ${ $setVerbose $(@expr1073743062 $false $) $; simplifyTypedef138 $(@expr1073743063 $) $; $} $} $while $(@expr1073743064 $false $) ;
188: $do ${ $if $(@expr1073743065 $prepareTest $(@expr1073743066 "simplifyTypedef139" $) $) ${ $setVerbose $(@expr1073743067 $false $) $; simplifyTypedef139 $(@expr1073743068 $) $; $} $} $while $(@expr1073743069 $false $) ;
189: $do ${ $if $(@expr1073743070 $prepareTest $(@expr1073743071 "simplifyTypedef140" $) $) ${ $setVerbose $(@expr1073743072 $false $) $; simplifyTypedef140 $(@expr1073743073 $) $; $} $} $while $(@expr1073743074 $false $) ;
190: $do ${ $if $(@expr1073743075 $prepareTest $(@expr1073743076 "simplifyTypedef141" $) $) ${ $setVerbose $(@expr1073743077 $false $) $; simplifyTypedef141 $(@expr1073743078 $) $; $} $} $while $(@expr1073743079 $false $) ;
191:
192: $do ${ $if $(@expr1073743080 $prepareTest $(@expr1073743081 "simplifyTypedefFunction1" $) $) ${ $setVerbose $(@expr1073743082 $false $) $; simplifyTypedefFunction1 $(@expr1073743083 $) $; $} $} $while $(@expr1073743084 $false $) ;
193: $do ${ $if $(@expr1073743085 $prepareTest $(@expr1073743086 "simplifyTypedefFunction2" $) $) ${ $setVerbose $(@expr1073743087 $false $) $; simplifyTypedefFunction2 $(@expr1073743088 $) $; $} $} $while $(@expr1073743089 $false $) ;
194: $do ${ $if $(@expr1073743090 $prepareTest $(@expr1073743091 "simplifyTypedefFunction3" $) $) ${ $setVerbose $(@expr1073743092 $false $) $; simplifyTypedefFunction3 $(@expr1073743093 $) $; $} $} $while $(@expr1073743094 $false $) ;
195: $do ${ $if $(@expr1073743095 $prepareTest $(@expr1073743096 "simplifyTypedefFunction4" $) $) ${ $setVerbose $(@expr1073743097 $false $) $; simplifyTypedefFunction4 $(@expr1073743098 $) $; $} $} $while $(@expr1073743099 $false $) ;
196: $do ${ $if $(@expr1073743100 $prepareTest $(@expr1073743101 "simplifyTypedefFunction5" $) $) ${ $setVerbose $(@expr1073743102 $false $) $; simplifyTypedefFunction5 $(@expr1073743103 $) $; $} $} $while $(@expr1073743104 $false $) ;
197: $do ${ $if $(@expr1073743105 $prepareTest $(@expr1073743106 "simplifyTypedefFunction6" $) $) ${ $setVerbose $(@expr1073743107 $false $) $; simplifyTypedefFunction6 $(@expr1073743108 $) $; $} $} $while $(@expr1073743109 $false $) ;
198: $do ${ $if $(@expr1073743110 $prepareTest $(@expr1073743111 "simplifyTypedefFunction7" $) $) ${ $setVerbose $(@expr1073743112 $false $) $; simplifyTypedefFunction7 $(@expr1073743113 $) $; $} $} $while $(@expr1073743114 $false $) ;
199: $do ${ $if $(@expr1073743115 $prepareTest $(@expr1073743116 "simplifyTypedefFunction8" $) $) ${ $setVerbose $(@expr1073743117 $false $) $; simplifyTypedefFunction8 $(@expr1073743118 $) $; $} $} $while $(@expr1073743119 $false $) ;
200: $do ${ $if $(@expr1073743120 $prepareTest $(@expr1073743121 "simplifyTypedefFunction9" $) $) ${ $setVerbose $(@expr1073743122 $false $) $; simplifyTypedefFunction9 $(@expr1073743123 $) $; $} $} $while $(@expr1073743124 $false $) ;
201: $do ${ $if $(@expr1073743125 $prepareTest $(@expr1073743126 "simplifyTypedefFunction10" $) $) ${ $setVerbose $(@expr1073743127 $false $) $; simplifyTypedefFunction10 $(@expr1073743128 $) $; $} $} $while $(@expr1073743129 $false $) ;
202:
203: $do ${ $if $(@expr1073743130 $prepareTest $(@expr1073743131 "simplifyTypedefShadow" $) $) ${ $setVerbose $(@expr1073743132 $false $) $; simplifyTypedefShadow $(@expr1073743133 $) $; $} $} $while $(@expr1073743134 $false $) ;
204:
205: $do ${ $if $(@expr1073743135 $prepareTest $(@expr1073743136 "simplifyTypedefMacro" $) $) ${ $setVerbose $(@expr1073743137 $false $) $; simplifyTypedefMacro $(@expr1073743138 $) $; $} $} $while $(@expr1073743139 $false $) ;
206: }
207:
208:
209: std :: string tok_ ( const char * file@var110 , int line@var111 , const char code@var112 [ ] , bool simplify@var113 = true , Settings :: PlatformType type@var114 = Settings :: Native , bool debugwarnings@var115 = true ) {
210: errout@var100 .@expr1073743141 str (@expr1073743142 "" ) ;
211:
212: settings0@var102 .@expr1073743143 certainty@var116 .@expr1073743144 enable (@expr1073743145 Certainty ::@expr1073743146 inconclusive@expr1073743140 ) ;
213: settings0@var102 .@expr1073743147 debugwarnings@var117 =@expr1073743148 debugwarnings@var115 ;
214: settings0@var102 .@expr1073743149 platform (@expr1073743150 type@var114 ) ;
215: Tokenizer tokenizer@var118 (@expr1073743151 &@expr1073743152 settings0@var102 , this@expr1073743153 ) ;
216:
217: std ::@expr1073743154 istringstream istr@var119 (@expr1073743155 code@var112 ) ;
218: $assert_ $(@expr1073743156 file@var110 $, line@var111 $, $(@expr1073743157 tokenizer@var118 .@expr1073743158 tokenize (@expr1073743159 istr@var119 , "test.cpp" ) $) $) ;
219:
220: return tokenizer@var118 .@expr1073743160 tokens (@expr1073743161 ) .@expr1073743162 stringifyList (@expr1073743163 nullptr , !@expr1073743164 simplify@var113 ) ;
221: }
222:
223: std :: string simplifyTypedef ( const char code@var120 [ ] ) {
224: errout@var100 .@expr1073743165 str (@expr1073743166 "" ) ;
225:
226: Tokenizer tokenizer@var121 (@expr1073743167 &@expr1073743168 settings1@var103 , this@expr1073743169 ) ;
227:
228: std ::@expr1073743170 istringstream istr@var122 (@expr1073743171 code@var120 ) ;
229: tokenizer@var121 .@expr1073743172 list@var123 .@expr1073743173 createTokens (@expr1073743174 istr@var122 ) ;
230: tokenizer@var121 .@expr1073743175 createLinks (@expr1073743176 ) ;
231: tokenizer@var121 .@expr1073743177 simplifyTypedef (@expr1073743178 ) ;
232:
233: return tokenizer@var121 .@expr1073743179 tokens (@expr1073743180 ) .@expr1073743181 stringifyList (@expr1073743182 nullptr , false ) ;
234: }
235:
236:
237: std :: string simplifyTypedefP ( const char code@var124 [ ] ) {
238:
239: errout@var100 .@expr1073743183 str (@expr1073743184 "" ) ;
240:
241:
242: std ::@expr1073743185 vector < std ::@expr1362 string > files@var125 (@expr1073743187 1 , "test.cpp" ) ;
243: std ::@expr1073743188 istringstream istr@var126 (@expr1073743189 code@var124 ) ;
244: const simplecpp ::@expr1073743190 TokenList tokens1@var127 (@expr1073743191 istr@var126 , files@var125 , files@var125 [@expr1073743192 0 ] ) ;
245:
246:
247: simplecpp ::@expr1073743193 TokenList tokens2@var128 (@expr1073743194 files@var125 ) ;
248: std ::@expr1073743195 map < std ::@expr1362 string , simplecpp ::@expr1362 TokenList *@expr1073743198 > filedata@var129 ;
249: simplecpp ::@expr1073743199 preprocess (@expr1073743200 tokens2@var128 , tokens1@var127 , files@var125 , filedata@var129 , simplecpp ::@expr1073743201 DUI (@expr1073743202 ) ) ;
250:
251:
252: Tokenizer tokenizer@var130 (@expr1073743203 &@expr1073743204 settings0@var102 , this@expr1073743205 ) ;
253: tokenizer@var130 .@expr1073743206 createTokens (@expr1073743207 std ::@expr1073743208 move (@expr1073743209 tokens2@var128 ) ) ;
254: tokenizer@var130 .@expr1073743210 createLinks (@expr1073743211 ) ;
255: tokenizer@var130 .@expr1073743212 simplifyTypedef (@expr1073743213 ) ;
256:
257: return tokenizer@var130 .@expr1073743214 tokens (@expr1073743215 ) .@expr1073743216 stringifyList (@expr1073743217 nullptr , false ) ;
258: }
259:
260:
261: void checkSimplifyTypedef_ ( const char code@var131 [ ] , const char * file@var132 , int line@var133 ) {
262: errout@var100 .@expr1073743219 str (@expr1073743220 "" ) ;
263:
264: settings2@var104 .@expr1073743221 certainty@var134 .@expr1073743222 enable (@expr1073743223 Certainty ::@expr1073743224 inconclusive@expr1073743218 ) ;
265: settings2@var104 .@expr1073743225 debugwarnings@var135 =@expr1073743226 true ;
266: Tokenizer tokenizer@var136 (@expr1073743227 &@expr1073743228 settings2@var104 , this@expr1073743229 ) ;
267: std ::@expr1073743230 istringstream istr@var137 (@expr1073743231 code@var131 ) ;
268: $assert_ $(@expr1073743232 file@var132 $, line@var133 $, $(@expr1073743233 tokenizer@var136 .@expr1073743234 tokenize (@expr1073743235 istr@var137 , "test.cpp" ) $) $) ;
269: }
270:
271:
272:
273: void simplifyTypedef1 ( ) {
274: const char code@var138 [@expr1073743236 145 ] =@expr1073743237 "class A\n{\npublic:\n typedef wchar_t duplicate;\n void foo() {}\n};\ntypedef A duplicate;\nint main()\n{\n duplicate a;\n a.foo();\n A::duplicate c = 0;\n}"
275:
|
285:
286: ;
287:
288: const char expected@var139 [@expr1073743238 96 ] =@expr1073743239
289: "class A { public: void foo ( ) { } } ; int main ( ) { A a ; a . foo ( ) ; wchar_t c ; c = 0 ; }"
290:
|
299:
300: ;
301: $if $(@expr1073743240 $!@expr1073743241 $assertEquals $(@expr1073743242 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 301 $, expected@var139 $, $tok_ $(@expr1073743243 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 301 $, code@var138 , false $) $) $) { $return ; }
302: }
303:
304: void simplifyTypedef2 ( ) {
305: const char code@var140 [@expr1073743244 119 ] =@expr1073743245 "class A;\ntypedef A duplicate;\nclass A\n{\npublic:\ntypedef wchar_t duplicate;\nduplicate foo() { wchar_t b; return b; }\n};"
306:
|
311:
312: ;
313:
314: const char expected@var141 [@expr1073743246 75 ] =@expr1073743247
315: "class A ; class A { public: wchar_t foo ( ) { wchar_t b ; return b ; } } ;"
316:
|
320:
321: ;
322: $if $(@expr1073743248 $!@expr1073743249 $assertEquals $(@expr1073743250 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 322 $, expected@var141 $, $tok_ $(@expr1073743251 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 322 $, code@var140 $) $) $) { $return ; }
323: }
324:
325: void simplifyTypedef3 ( ) {
326: const char code@var142 [@expr1073743252 129 ] =@expr1073743253 "class A {};\ntypedef A duplicate;\nwchar_t foo()\n{\ntypedef wchar_t duplicate;\nduplicate b;\nreturn b;\n}\nint main()\n{\nduplicate b;\n}"
327:
|
336:
337: ;
338:
339: const char expected@var143 [@expr1073743254 80 ] =@expr1073743255
340: "class A { } ; wchar_t foo ( ) { wchar_t b ; return b ; } int main ( ) { A b ; }"
341:
|
349:
350: ;
351: $if $(@expr1073743256 $!@expr1073743257 $assertEquals $(@expr1073743258 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 351 $, expected@var143 $, $tok_ $(@expr1073743259 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 351 $, code@var142 $) $) $) { $return ; }
352: }
353:
354: void simplifyTypedef4 ( ) {
355: const char code@var144 [@expr1073743260 117 ] =@expr1073743261 "typedef int s32;\ntypedef unsigned int u32;\nvoid f()\n{\n    s32 ivar = -2;\n    u32 uvar = 2;\n    return uvar / ivar;\n}"
356:
|
361:
362: ;
363:
364: const char expected@var145 [@expr1073743262 90 ] =@expr1073743263
365: "void f ( ) { int ivar ; ivar = -2 ; unsigned int uvar ; uvar = 2 ; return uvar / ivar ; }"
366:
|
369:
370: ;
371: $if $(@expr1073743264 $!@expr1073743265 $assertEquals $(@expr1073743266 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 371 $, expected@var145 $, $tok_ $(@expr1073743267 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 371 $, code@var144 , false $) $) $) { $return ; }
372: }
373:
374: void simplifyTypedef5 ( ) {
375:
376: const char code@var146 [@expr1073743268 89 ] =@expr1073743269
377: "typedef struct yy_buffer_state *YY_BUFFER_STATE;\nvoid f()\n{\n    YY_BUFFER_STATE state;\n}"
378:
379:
380:
381: ;
382:
383: const char expected@var147 [@expr1073743270 48 ] =@expr1073743271
384: "void f ( ) { struct yy_buffer_state * state ; }"
385:
386:
387: ;
388:
389: $if $(@expr1073743272 $!@expr1073743273 $assertEquals $(@expr1073743274 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 389 $, expected@var147 $, $tok_ $(@expr1073743275 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 389 $, code@var146 , false $) $) $) { $return ; }
390: }
391:
392: void simplifyTypedef6 ( ) {
393:
394: const char code@var148 [@expr1073743276 111 ] =@expr1073743277
395: "namespace VL {\n    typedef float float_t ;\n    inline VL::float_t fast_atan2(VL::float_t y, VL::float_t x){}\n}"
396:
397:
398: ;
399:
400: const char expected@var149 [@expr1073743278 60 ] =@expr1073743279
401: "namespace VL { float fast_atan2 ( float y , float x ) { } }"
402:
403:
404: ;
405:
406: $if $(@expr1073743280 $!@expr1073743281 $assertEquals $(@expr1073743282 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 406 $, expected@var149 $, $tok_ $(@expr1073743283 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 406 $, code@var148 , false $) $) $) { $return ; }
407: }
408:
409: void simplifyTypedef7 ( ) {
410: const char code@var150 [@expr1073743284 34 ] =@expr1073743285 "typedef int abc ; Fred :: abc f ;"
411: ;
412: const char expected@var151 [@expr1073743286 16 ] =@expr1073743287 "Fred :: abc f ;" ;
413: $if $(@expr1073743288 $!@expr1073743289 $assertEquals $(@expr1073743290 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 413 $, expected@var151 $, $tok_ $(@expr1073743291 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 413 $, code@var150 , false $) $) $) { $return ; }
414: }
415:
416: void simplifyTypedef8 ( ) {
417: const char code@var152 [@expr1073743292 296 ] =@expr1073743293 "typedef int INT;\ntypedef unsigned int UINT;\ntypedef int * PINT;\ntypedef unsigned int * PUINT;\ntypedef int & RINT;\ntypedef unsigned int & RUINT;\ntypedef const int & RCINT;\ntypedef const unsigned int & RCUINT;\nINT ti;\nUINT tui;\nPINT tpi;\nPUINT tpui;\nRINT tri;\nRUINT trui;\nRCINT trci;\nRCUINT trcui;"
418:
|
431:
432: ;
433:
434: const char expected@var153 [@expr1073743294 144 ] =@expr1073743295
435: "int ti ; unsigned int tui ; int * tpi ; unsigned int * tpui ; int & tri ; unsigned int & trui ; const int & trci ; const unsigned int & trcui ;"
436:
|
441:
442: ;
443:
444: $if $(@expr1073743296 $!@expr1073743297 $assertEquals $(@expr1073743298 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 444 $, expected@var153 $, $tok_ $(@expr1073743299 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 444 $, code@var152 , false $) $) $) { $return ; }
445: }
446:
447: void simplifyTypedef9 ( ) {
448: const char code@var154 [@expr1073743300 156 ] =@expr1073743301 "typedef struct s S, * PS;\ntypedef struct t { int a; } T, *TP;\ntypedef struct { int a; } U;\ntypedef struct { int a; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;"
449:
|
456:
457: ;
458:
459: const char expected@var155 [@expr1073743302 169 ] =@expr1073743303
460: "struct t { int a ; } ; struct U { int a ; } ; struct Unnamed0 { int a ; } ; struct s s ; struct s * ps ; struct t t ; struct t * tp ; struct U u ; struct Unnamed0 * v ;"
461:
|
467:
468: ;
469:
470: $if $(@expr1073743304 $!@expr1073743305 $assertEquals $(@expr1073743306 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 470 $, expected@var155 $, $tok_ $(@expr1073743307 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 470 $, code@var154 , false $) $) $) { $return ; }
471: }
472:
473: void simplifyTypedef10 ( ) {
474: const char code@var156 [@expr1073743308 180 ] =@expr1073743309 "typedef union s S, * PS;\ntypedef union t { int a; float b ; } T, *TP;\ntypedef union { int a; float b; } U;\ntypedef union { int a; float b; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;"
475:
|
482:
483: ;
484:
485: const char expected@var157 [@expr1073743310 190 ] =@expr1073743311
486: "union t { int a ; float b ; } ; union U { int a ; float b ; } ; union Unnamed0 { int a ; float b ; } ; union s s ; union s * ps ; union t t ; union t * tp ; union U u ; union Unnamed0 * v ;"
487:
|
493:
494: ;
495:
496: $if $(@expr1073743312 $!@expr1073743313 $assertEquals $(@expr1073743314 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 496 $, expected@var157 $, $tok_ $(@expr1073743315 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 496 $, code@var156 , false $) $) $) { $return ; }
497: }
498:
499: void simplifyTypedef11 ( ) {
500: const char code@var158 [@expr1073743316 108 ] =@expr1073743317 "typedef enum { a = 0 , b = 1 , c = 2 } abc;\ntypedef enum xyz { x = 0 , y = 1 , z = 2 } XYZ;\nabc e1;\nXYZ e2;"
501:
502:
503: ;
504:
505: const char expected@var159 [@expr1073743318 97 ] =@expr1073743319 "enum abc { a = 0 , b = 1 , c = 2 } ; enum xyz { x = 0 , y = 1 , z = 2 } ; abc e1 ; enum xyz e2 ;"
506:
507:
508: ;
509:
510: $if $(@expr1073743320 $!@expr1073743321 $assertEquals $(@expr1073743322 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 510 $, expected@var159 $, $tok_ $(@expr1073743323 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 510 $, code@var158 , false $) $) $) { $return ; }
511: }
512:
513: void simplifyTypedef12 ( ) {
514: const char code@var160 [@expr1073743324 189 ] =@expr1073743325 "typedef vector<int> V1;\ntypedef std::vector<int> V2;\ntypedef std::vector<std::vector<int> > V3;\ntypedef std::list<int>::iterator IntListIterator;\nV1 v1;\nV2 v2;\nV3 v3;\nIntListIterator iter;"
515:
|
520:
521: ;
522:
523: const char expected@var161 [@expr1073743326 131 ] =@expr1073743327
524: "vector < int > v1 ; std :: vector < int > v2 ; std :: vector < std :: vector < int > > v3 ; std :: list < int > :: iterator iter ;"
525:
526:
527: ;
528:
529: $if $(@expr1073743328 $!@expr1073743329 $assertEquals $(@expr1073743330 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 529 $, expected@var161 $, $tok_ $(@expr1073743331 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 529 $, code@var160 , false $) $) $) { $return ; }
530: }
531:
532: void simplifyTypedef13 ( ) {
533:
534: const char code@var162 [@expr1073743332 95 ] =@expr1073743333 "typedef std::pair<int(*)(void*), void*> Func;typedef std::vector<Func> CallQueue;int main() {}"
535:
536: ;
537:
538:
539: $tok_ $(@expr1073743334 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 539 $, code@var162 $) ;
540: $if $(@expr1073743335 $!@expr1073743336 $assertEquals $(@expr1073743337 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 540 $, "" $, errout@var100 .@expr1073743338 str (@expr1073743339 ) $) $) { $return ; }
541: }
542:
543: void simplifyTypedef14 ( ) {
544:
545: const char code@var163 [@expr1073743340 224 ] =@expr1073743341 "template <typename F, unsigned int N> struct E{    typedef E<F,(N>0)?(N-1):0> v;    typedef typename add<v,v>::val val;    FP_M(val);};template <typename F> struct E <F,0>{    typedef typename D<1>::val val;    FP_M(val);};"
546:
|
554:
555: ;
556:
557:
558: $do ${ $try ${ $tok_ $(@expr1073743342 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 558 $, code@var163 , true , Settings ::@expr1073743343 Native , false $) $; $} $catch $(@expr1073743344 $const InternalError $&@expr1073743345 $) ${ $} $catch $(@expr1073743346 $... $) ${ $assertThrow $(@expr1073743347 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 558 $) $; $} $} $while $(@expr1073743348 $false $) ;
559:
560: }
561:
562: void simplifyTypedef15 ( ) {
563: {
564: const char code@var164 [@expr1073743349 33 ] =@expr1073743350 "typedef char frame[10];\nframe f;"
565: ;
566:
567: const char expected@var165 [@expr1073743351 16 ] =@expr1073743352 "char f [ 10 ] ;" ;
568:
569: $if $(@expr1073743353 $!@expr1073743354 $assertEquals $(@expr1073743355 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 569 $, expected@var165 $, $tok_ $(@expr1073743356 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 569 $, code@var164 , false $) $) $) { $return ; }
570: }
571:
572: {
573: const char code@var166 [@expr1073743357 42 ] =@expr1073743358 "typedef unsigned char frame[10];\nframe f;"
574: ;
575:
576: const char expected@var167 [@expr1073743359 25 ] =@expr1073743360 "unsigned char f [ 10 ] ;" ;
577:
578: $if $(@expr1073743361 $!@expr1073743362 $assertEquals $(@expr1073743363 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 578 $, expected@var167 $, $tok_ $(@expr1073743364 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 578 $, code@var166 , false $) $) $) { $return ; }
579: }
580: }
581:
582: void simplifyTypedef16 ( ) {
583:
584: const char code@var168 [@expr1073743365 89 ] =@expr1073743366 "typedef char MOT8;\ntypedef  MOT8 CHFOO[4096];\ntypedef struct {\n   CHFOO freem;\n} STRFOO;"
585:
586:
587:
588: ;
589:
590:
591: $tok_ $(@expr1073743367 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 591 $, code@var168 $) ;
592: $if $(@expr1073743368 $!@expr1073743369 $assertEquals $(@expr1073743370 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 592 $, "" $, errout@var100 .@expr1073743371 str (@expr1073743372 ) $) $) { $return ; }
593: }
594:
595: void simplifyTypedef17 ( ) {
596: const char code@var169 [@expr1073743373 46 ] =@expr1073743374 "typedef char * PCHAR, CHAR;\nPCHAR pc;\nCHAR c;"
597:
598: ;
599:
600: const char expected@var170 [@expr1073743375 21 ] =@expr1073743376
601: "char * pc ; char c ;"
602: ;
603:
604: $if $(@expr1073743377 $!@expr1073743378 $assertEquals $(@expr1073743379 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 604 $, expected@var170 $, $tok_ $(@expr1073743380 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 604 $, code@var169 , false $) $) $) { $return ; }
605: }
606:
607: void simplifyTypedef18 ( ) {
608: const char code@var171 [@expr1073743381 31 ] =@expr1073743382 "typedef vector<int[4]> a;\na b;"
609: ;
610: $if $(@expr1073743383 $!@expr1073743384 $assertEquals $(@expr1073743385 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 610 $, "vector < int [ 4 ] > b ;" $, $tok_ $(@expr1073743386 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 610 $, code@var171 $) $) $) { $return ; }
611: }
612:
613: void simplifyTypedef19 ( ) {
614: {
615:
616: const char code@var172 [@expr1073743387 45 ] =@expr1073743388 "typedef struct {} A, *B, **C;\nA a;\nB b;\nC c;"
617:
618:
619: ;
620:
621: const char expected@var173 [@expr1073743389 60 ] =@expr1073743390
622: "struct A { } ; struct A a ; struct A * b ; struct A * * c ;"
623:
624:
625: ;
626:
627: $if $(@expr1073743391 $!@expr1073743392 $assertEquals $(@expr1073743393 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 627 $, expected@var173 $, $tok_ $(@expr1073743394 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 627 $, code@var172 , false $) $) $) { $return ; }
628: }
629:
630: {
631: const char code@var174 [@expr1073743395 43 ] =@expr1073743396 "typedef struct {} A, *********B;\nA a;\nB b;"
632:
633: ;
634:
635: const char expected@var175 [@expr1073743397 59 ] =@expr1073743398
636: "struct A { } ; struct A a ; struct A * * * * * * * * * b ;"
637:
638: ;
639:
640: $if $(@expr1073743399 $!@expr1073743400 $assertEquals $(@expr1073743401 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 640 $, expected@var175 $, $tok_ $(@expr1073743402 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 640 $, code@var174 , false $) $) $) { $return ; }
641: }
642:
643: {
644: const char code@var176 [@expr1073743403 53 ] =@expr1073743404 "typedef struct {} **********A, *B, C;\nA a;\nB b;\nC c;"
645:
646:
647: ;
648:
649: const char expected@var177 [@expr1073743405 104 ] =@expr1073743406
650: "struct Unnamed0 { } ; struct Unnamed0 * * * * * * * * * * a ; struct Unnamed0 * b ; struct Unnamed0 c ;"
651:
652:
653: ;
654:
655: $if $(@expr1073743407 $!@expr1073743408 $assertEquals $(@expr1073743409 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 655 $, expected@var177 $, $tok_ $(@expr1073743410 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 655 $, code@var176 , false $) $) $) { $return ; }
656: }
657: }
658:
659: void simplifyTypedef20 ( ) {
660:
661: const char code@var178 [@expr1073743411 76 ] =@expr1073743412 "typedef jobject invoke_t (jobject, Proxy *, Method *, JArray< jobject > *);" ;
662: $if $(@expr1073743413 $!@expr1073743414 $assertEquals $(@expr1073743415 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 662 $, ";" $, $tok_ $(@expr1073743416 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 662 $, code@var178 $) $) $) { $return ; }
663: }
664:
665: void simplifyTypedef21 ( ) {
666: const char code@var179 [@expr1073743417 71 ] =@expr1073743418 "typedef void (* PF)();\ntypedef void * (* PFV)(void *);\nPF pf;\nPFV pfv;"
667:
668:
669: ;
670:
671: const char expected@var180 [@expr1073743419 50 ] =@expr1073743420
672: "void ( * pf ) ( ) ; void * ( * pfv ) ( void * ) ;"
673:
674:
675: ;
676:
677: $if $(@expr1073743421 $!@expr1073743422 $assertEquals $(@expr1073743423 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 677 $, expected@var180 $, simplifyTypedef (@expr1073743424 code@var179 ) $) $) { $return ; }
678: }
679:
680: void simplifyTypedef22 ( ) {
681: {
682: const char code@var181 [@expr1073743425 107 ] =@expr1073743426 "class Fred {\n    typedef void (*testfp)();\n    testfp get() { return test; }\n    static void test() { }\n};"
683:
684:
685:
686: ;
687:
688: const char expected@var182 [@expr1073743427 75 ] =@expr1073743428
689: "class Fred { void * get ( ) { return test ; } static void test ( ) { } } ;"
690:
691:
692:
693: ;
694:
695: $if $(@expr1073743429 $!@expr1073743430 $assertEquals $(@expr1073743431 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 695 $, expected@var182 $, $tok_ $(@expr1073743432 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 695 $, code@var181 , false $) $) $) { $return ; }
696: }
697:
698: {
699: const char code@var183 [@expr1073743433 135 ] =@expr1073743434 "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get() { return test; }\n    static void * test(void * p) { return p; }\n};"
700:
701:
702:
703: ;
704:
705: const char expected@var184 [@expr1073743435 99 ] =@expr1073743436
706: "class Fred { void * * get ( ) { return test ; } static void * test ( void * p ) { return p ; } } ;"
707:
708:
709:
710: ;
711:
712: $if $(@expr1073743437 $!@expr1073743438 $assertEquals $(@expr1073743439 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 712 $, expected@var184 $, $tok_ $(@expr1073743440 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 712 $, code@var183 , false $) $) $) { $return ; }
713: }
714:
715: {
716: const char code@var185 [@expr1073743441 167 ] =@expr1073743442 "class Fred {\n    typedef unsigned int * (*testfp)(unsigned int *);\n    testfp get() { return test; }\n    static unsigned int * test(unsigned int * p) { return p; }\n};"
717:
718:
719:
720: ;
721:
722: const char expected@var186 [@expr1073743443 123 ] =@expr1073743444
723: "class Fred { unsigned int * * get ( ) { return test ; } static unsigned int * test ( unsigned int * p ) { return p ; } } ;"
724:
725:
726:
727: ;
728:
729: $if $(@expr1073743445 $!@expr1073743446 $assertEquals $(@expr1073743447 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 729 $, expected@var186 $, $tok_ $(@expr1073743448 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 729 $, code@var185 , false $) $) $) { $return ; }
730: }
731:
732: {
733: const char code@var187 [@expr1073743449 191 ] =@expr1073743450 "class Fred {\n    typedef const unsigned int * (*testfp)(const unsigned int *);\n    testfp get() { return test; }\n    static const unsigned int * test(const unsigned int * p) { return p; }\n};"
734:
735:
736:
737: ;
738:
739:
740: const char expected@var188 [@expr1073743451 141 ] =@expr1073743452
741: "class Fred { const unsigned int * * get ( ) { return test ; } static const unsigned int * test ( const unsigned int * p ) { return p ; } } ;"
742:
743:
744:
745: ;
746:
747: $if $(@expr1073743453 $!@expr1073743454 $assertEquals $(@expr1073743455 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 747 $, expected@var188 $, $tok_ $(@expr1073743456 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 747 $, code@var187 , false $) $) $) { $return ; }
748: }
749:
750: {
751: const char code@var189 [@expr1073743457 140 ] =@expr1073743458 "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get(int i) { return test; }\n    static void * test(void * p) { return p; }\n};"
752:
753:
754:
755: ;
756:
757: const char expected@var190 [@expr1073743459 105 ] =@expr1073743460
758: "class Fred { void * * get ( int i ) { return test ; } static void * test ( void * p ) { return p ; } } ;"
759:
760:
761:
762: ;
763:
764: $if $(@expr1073743461 $!@expr1073743462 $assertEquals $(@expr1073743463 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 764 $, expected@var190 $, $tok_ $(@expr1073743464 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 764 $, code@var189 , false $) $) $) { $return ; }
765: }
766: }
767:
768: void simplifyTypedef23 ( ) {
769: const char code@var191 [@expr1073743465 128 ] =@expr1073743466 "typedef bool (*Callback) (int i);\nvoid    addCallback(Callback callback) { }\nvoid    addCallback1(Callback callback, int j) { }"
770:
771: ;
772:
773: const char expected@var192 [@expr1073743467 107 ] =@expr1073743468
774: "void addCallback ( bool ( * callback ) ( ) ) { } void addCallback1 ( bool ( * callback ) ( ) , int j ) { }"
775: ;
776:
777: $if $(@expr1073743469 $!@expr1073743470 $assertEquals $(@expr1073743471 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 777 $, expected@var192 $, $tok_ $(@expr1073743472 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 777 $, code@var191 , false $) $) $) { $return ; }
778: }
779:
780: void simplifyTypedef24 ( ) {
781: {
782: const char code@var193 [@expr1073743473 57 ] =@expr1073743474 "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = (fp)f;\n}"
783:
784:
785:
786: ;
787:
788: const char expected@var194 [@expr1073743475 69 ] =@expr1073743476
789: "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = ( int * ) f ; }"
790:
791:
792: ;
793:
794: $if $(@expr1073743477 $!@expr1073743478 $assertEquals $(@expr1073743479 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 794 $, expected@var194 $, $tok_ $(@expr1073743480 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 794 $, code@var193 , false $) $) $) { $return ; }
795: }
796:
797: {
798: const char code@var195 [@expr1073743481 70 ] =@expr1073743482 "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = static_cast<fp>(f);\n}"
799:
800:
801:
802: ;
803:
804: const char expected@var196 [@expr1073743483 85 ] =@expr1073743484
805: "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = static_cast < int * > ( f ) ; }"
806:
807:
808: ;
809:
810: $if $(@expr1073743485 $!@expr1073743486 $assertEquals $(@expr1073743487 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 810 $, expected@var196 $, $tok_ $(@expr1073743488 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 810 $, code@var195 , false $) $) $) { $return ; }
811: }
812: }
813:
814: void simplifyTypedef25 ( ) {
815: {
816:
817: const char code@var197 [@expr1073743489 127 ] =@expr1073743490 "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (struct vfs_class *me, fill_names_f);\n}"
818:
819:
820: ;
821:
822: const char expected@var198 [@expr1073743491 101 ] =@expr1073743492
823: "struct vfs_class { void ( * fill_names ) ( struct vfs_class * me , void ( * ) ( const char * ) ) ; }"
824:
825: ;
826:
827: $if $(@expr1073743493 $!@expr1073743494 $assertEquals $(@expr1073743495 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 827 $, expected@var198 $, simplifyTypedef (@expr1073743496 code@var197 ) $) $) { $return ; }
828: }
829:
830: {
831: const char code@var199 [@expr1073743497 127 ] =@expr1073743498 "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (fill_names_f, struct vfs_class *me);\n}"
832:
833:
834: ;
835:
836: const char expected@var200 [@expr1073743499 101 ] =@expr1073743500
837: "struct vfs_class { void ( * fill_names ) ( void ( * ) ( const char * ) , struct vfs_class * me ) ; }"
838:
839: ;
840:
841: $if $(@expr1073743501 $!@expr1073743502 $assertEquals $(@expr1073743503 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 841 $, expected@var200 $, simplifyTypedef (@expr1073743504 code@var199 ) $) $) { $return ; }
842: }
843: }
844:
845: void simplifyTypedef26 ( ) {
846: {
847: const char code@var201 [@expr1073743505 74 ] =@expr1073743506 "typedef void (*Callback) ();\nvoid    addCallback(Callback (*callback)());"
848: ;
849:
850: const char expected@var202 [@expr1073743507 57 ] =@expr1073743508 "void addCallback ( void ( * ( * callback ) ( ) ) ( ) ) ;" ;
851:
852: $if $(@expr1073743509 $!@expr1073743510 $assertEquals $(@expr1073743511 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 852 $, expected@var202 $, $tok_ $(@expr1073743512 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 852 $, code@var201 , false $) $) $) { $return ; }
853: }
854:
855: {
856:
857: const char code@var203 [@expr1073743513 234 ] =@expr1073743514 "typedef void (*pc_video_update_proc)(bitmap_t *bitmap,\nstruct mscrtc6845 *crtc);\n\nstruct mscrtc6845 *pc_video_start(pc_video_update_proc (*choosevideomode)(running_machine *machine, int *width, int *height, struct mscrtc6845 *crtc));"
858:
859:
860: ;
861:
862: const char expected@var204 [@expr1073743515 209 ] =@expr1073743516 "struct mscrtc6845 * pc_video_start ( void ( * ( * choosevideomode ) ( running_machine * machine , int * width , int * height , struct mscrtc6845 * crtc ) ) ( bitmap_t * bitmap , struct mscrtc6845 * crtc ) ) ;" ;
863:
864: $if $(@expr1073743517 $!@expr1073743518 $assertEquals $(@expr1073743519 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 864 $, expected@var204 $, $tok_ $(@expr1073743520 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 864 $, code@var203 , false $) $) $) { $return ; }
865: }
866: }
867:
868: void simplifyTypedef27 ( ) {
869:
870: const char code@var205 [@expr1073743521 134 ] =@expr1073743522 "int main()\n{\n    typedef int (*func_ptr)(float, double);\n    VERIFY((is_same<result_of<func_ptr(char, float)>::type, int>::value));\n}"
871:
872:
873:
874: ;
875:
876: const char expected@var206 [@expr1073743523 125 ] =@expr1073743524
877: "int main ( ) { VERIFY ( is_same < result_of < int ( * ( char , float ) ) ( float , double ) > :: type , int > :: value ) ; }"
878:
879:
880:
881: ;
882:
883: $if $(@expr1073743525 $!@expr1073743526 $assertEquals $(@expr1073743527 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 883 $, expected@var206 $, $tok_ $(@expr1073743528 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 883 $, code@var205 , false $) $) $) { $return ; }
884: }
885:
886: void simplifyTypedef28 ( ) {
887: const char code@var207 [@expr1073743529 53 ] =@expr1073743530 "typedef std::pair<double, double> (*F)(double);\nF f;"
888: ;
889:
890: const char expected@var208 [@expr1073743531 53 ] =@expr1073743532 "std :: pair < double , double > ( * f ) ( double ) ;" ;
891:
892: $if $(@expr1073743533 $!@expr1073743534 $assertEquals $(@expr1073743535 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 892 $, expected@var208 $, $tok_ $(@expr1073743536 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 892 $, code@var207 , false $) $) $) { $return ; }
893: }
894:
895: void simplifyTypedef29 ( ) {
896: const char code@var209 [@expr1073743537 222 ] =@expr1073743538 "typedef int array [ice_or<is_int<int>::value, is_int<UDT>::value>::value ? 1 : -1];\ntypedef int array1 [N];\ntypedef int array2 [N][M];\ntypedef int int_t, int_array[N];\narray a;\narray1 a1;\narray2 a2;\nint_t t;\nint_array ia;"
897:
|
903:
904: ;
905:
906: const char expected@var210 [@expr1073743539 150 ] =@expr1073743540
907: "int a [ ice_or < is_int < int > :: value , is_int < UDT > :: value > :: value ? 1 : -1 ] ; int a1 [ N ] ; int a2 [ N ] [ M ] ; int t ; int ia [ N ] ;"
908:
909:
910:
911: ;
912:
913: $if $(@expr1073743541 $!@expr1073743542 $assertEquals $(@expr1073743543 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 913 $, expected@var210 $, $tok_ $(@expr1073743544 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 913 $, code@var209 , false $) $) $) { $return ; }
914: }
915:
916: void simplifyTypedef30 ( ) {
917: const char code@var211 [@expr1073743545 190 ] =@expr1073743546 "typedef ::std::list<int> int_list;\ntypedef ::std::list<int>::iterator int_list_iterator;\ntypedef ::std::list<int> int_list_array[10];\nint_list il;\nint_list_iterator ili;\nint_list_array ila;"
918:
|
921:
922: ;
923:
924: const char expected@var212 [@expr1073743547 105 ] =@expr1073743548
925: ":: std :: list < int > il ; :: std :: list < int > :: iterator ili ; :: std :: list < int > ila [ 10 ] ;"
926:
927: ;
928:
929: $if $(@expr1073743549 $!@expr1073743550 $assertEquals $(@expr1073743551 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 929 $, expected@var212 $, $tok_ $(@expr1073743552 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 929 $, code@var211 , false $) $) $) { $return ; }
930: }
931:
932: void simplifyTypedef31 ( ) {
933: {
934: const char code@var213 [@expr1073743553 158 ] =@expr1073743554 "class A {\npublic:\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;"
935:
|
941:
942: ;
943:
944: const char expected@var214 [@expr1073743555 140 ] =@expr1073743556 "class A { public: int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;"
945:
|
951:
952: ;
953:
954: $if $(@expr1073743557 $!@expr1073743558 $assertEquals $(@expr1073743559 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 954 $, expected@var214 $, $tok_ $(@expr1073743560 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 954 $, code@var213 , false $) $) $) { $return ; }
955: }
956:
957: {
958: const char code@var215 [@expr1073743561 151 ] =@expr1073743562 "struct A {\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;"
959:
|
964:
965: ;
966:
967: const char expected@var216 [@expr1073743563 133 ] =@expr1073743564 "struct A { int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;"
968:
|
973:
974: ;
975:
976: $if $(@expr1073743565 $!@expr1073743566 $assertEquals $(@expr1073743567 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 976 $, expected@var216 $, $tok_ $(@expr1073743568 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 976 $, code@var215 , false $) $) $) { $return ; }
977: }
978: }
979:
980: void simplifyTypedef32 ( ) {
981: const char code@var217 [@expr1073743569 100 ] =@expr1073743570 "typedef char CHAR;\ntypedef CHAR * LPSTR;\ntypedef const CHAR * LPCSTR;\nCHAR c;\nLPSTR cp;\nLPCSTR ccp;"
982:
|
985:
986: ;
987:
988: const char expected@var218 [@expr1073743571 40 ] =@expr1073743572
989: "char c ; char * cp ; const char * ccp ;"
990:
991: ;
992:
993: $if $(@expr1073743573 $!@expr1073743574 $assertEquals $(@expr1073743575 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 993 $, expected@var218 $, $tok_ $(@expr1073743576 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 993 $, code@var217 , false $) $) $) { $return ; }
994: }
995:
996: void simplifyTypedef33 ( ) {
997: const char code@var219 [@expr1073743577 608 ] =@expr1073743578 "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                LONG_D funD();\n                LONG_D d;\n            };\n            INT_C c;\n        };\n        SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
998:
|
1022:
1023: ;
1024:
1025: const char codeFullSpecified@var220 [@expr1073743579 668 ] =@expr1073743580 "class A {\npublic:\n    typedef char CHAR_A;\n    A::CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        A::B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            A::B::C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                A::B::C::D::LONG_D funD();\n                A::B::C::D::LONG_D d;\n            };\n            A::B::C::INT_C c;\n        };\n        A::B::SHRT_B b;\n    };\n    A::CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
1026:
|
1050:
1051: ;
1052:
1053: const char codePartialSpecified@var221 [@expr1073743581 632 ] =@expr1073743582 "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                D::LONG_D funD();\n                C::D::LONG_D d;\n            };\n            B::C::INT_C c;\n        };\n        B::SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
1054:
|
1078:
1079: ;
1080:
1081: const char expected@var222 [@expr1073743583 347 ] =@expr1073743584
1082: "class A { public: char funA ( ) ; class B { public: short funB ( ) ; class C { public: int funC ( ) ; struct D { long funD ( ) ; long d ; } ; int c ; } ; short b ; } ; char a ; } ; char A :: funA ( ) { return a ; } short A :: B :: funB ( ) { return b ; } int A :: B :: C :: funC ( ) { return c ; } long A :: B :: C :: D :: funD ( ) { return d ; }"
1083:
|
1107:
1108: ;
1109:
1110: $if $(@expr1073743585 $!@expr1073743586 $assertEquals $(@expr1073743587 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1110 $, expected@var222 $, $tok_ $(@expr1073743588 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1110 $, code@var219 , false $) $) $) { $return ; }
1111: $if $(@expr1073743589 $!@expr1073743590 $assertEquals $(@expr1073743591 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1111 $, expected@var222 $, $tok_ $(@expr1073743592 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1111 $, codePartialSpecified@var221 , false $) $) $) { $return ; }
1112: $if $(@expr1073743593 $!@expr1073743594 $assertEquals $(@expr1073743595 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1112 $, expected@var222 $, $tok_ $(@expr1073743596 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1112 $, codeFullSpecified@var220 , false $) $) $) { $return ; }
1113: }
1114:
1115: void simplifyTypedef34 ( ) {
1116:
1117: const char code@var223 [@expr1073743597 95 ] =@expr1073743598 "class X { };\ntypedef X (*foofunc)(const X&);\nint main()\n{\n    foofunc *Foo = new foofunc[2];\n}"
1118:
|
1121:
1122: ;
1123: const char expected@var224 [@expr1073743599 91 ] =@expr1073743600
1124: "class X { } ; int main ( ) { X ( * * Foo ) ( ) ; Foo = new X ( * ) ( const X & ) [ 2 ] ; }"
1125:
1126:
1127:
1128: ;
1129:
1130: $if $(@expr1073743601 $!@expr1073743602 $assertEquals $(@expr1073743603 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1130 $, expected@var224 $, $tok_ $(@expr1073743604 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1130 $, code@var223 , false $) $) $) { $return ; }
1131: }
1132:
1133: void simplifyTypedef35 ( ) {
1134: const char code@var225 [@expr1073743605 472 ] =@expr1073743606 "typedef int A;\nclass S\n{\npublic:\n    typedef float A;\n    A a;\n    virtual void fun(A x);\n};\nvoid S::fun(S::A) { };\nclass S1 : public S\n{\npublic:\n    void fun(S::A) { }\n};\nstruct T\n{\n    typedef A B;\n    B b;\n};\nfloat fun1(float A) { return A; }\nfloat fun2(float a) { float A = a++; return A; }\nfloat fun3(int a)\n{\n    typedef struct { int a; } A;\n    A s; s.a = a;\n    return s.a;\n}\nint main()\n{\n    A a = 0;\n    S::A s = fun1(a) + fun2(a) - fun3(a);\n    return a + s;\n}"
1135:
|
1165:
1166: ;
1167:
1168: const char expected@var226 [@expr1073743607 459 ] =@expr1073743608 "class S { public: float a ; virtual void fun ( float x ) ; } ; void S :: fun ( float ) { } ; class S1 : public S { public: void fun ( float ) { } } ; struct T { int b ; } ; float fun1 ( float A ) { return A ; } float fun2 ( float a ) { float A ; A = a ++ ; return A ; } float fun3 ( int a ) { struct A { int a ; } ; struct A s ; s . a = a ; return s . a ; } int main ( ) { int a ; a = 0 ; float s ; s = fun1 ( a ) + fun2 ( a ) - fun3 ( a ) ; return a + s ; }"
1169:
|
1198:
1199: ;
1200:
1201: $if $(@expr1073743609 $!@expr1073743610 $assertEquals $(@expr1073743611 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1201 $, expected@var226 $, $tok_ $(@expr1073743612 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1201 $, code@var225 , false $) $) $) { $return ; }
1202: $assertEqualsWithoutLineNumbers $(@expr1073743613 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1202 $, "[test.cpp:31]: (debug) valueflow.cpp:3109:valueFlowFunctionReturn bailout: function return; nontrivial function body\n" $, errout@var100 .@expr1073743614 str (@expr1073743615 ) $)
1203:
1204: ;
1205: }
1206:
1207: void simplifyTypedef36 ( ) {
1208:
1209: const char code@var227 [@expr1073743616 97 ] =@expr1073743617 "typedef void (*TIFFFaxFillFunc)();\nvoid f(va_list ap)\n{\n    *va_arg(ap, TIFFFaxFillFunc*) = 0;\n}"
1210:
1211:
1212:
1213: ;
1214: const char expected@var228 [@expr1073743618 67 ] =@expr1073743619 "void f ( va_list ap ) { * va_arg ( ap , void ( * * ) ( ) ) = 0 ; }"
1215:
1216:
1217: ;
1218: $if $(@expr1073743620 $!@expr1073743621 $assertEquals $(@expr1073743622 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1218 $, expected@var228 $, $tok_ $(@expr1073743623 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1218 $, code@var227 , false $) $) $) { $return ; }
1219: }
1220:
1221: void simplifyTypedef37 ( ) {
1222: const char code@var229 [@expr1073743624 45 ] =@expr1073743625 "typedef int INT;\nvoid f()\n{\n    INT i; { }\n}"
1223:
1224:
1225:
1226: ;
1227: const char expected@var230 [@expr1073743626 27 ] =@expr1073743627 "void f ( ) { int i ; { } }"
1228:
1229:
1230: ;
1231: $if $(@expr1073743628 $!@expr1073743629 $assertEquals $(@expr1073743630 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1231 $, expected@var230 $, $tok_ $(@expr1073743631 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1231 $, code@var229 , false $) $) $) { $return ; }
1232: }
1233:
1234: void simplifyTypedef38 ( ) {
1235: const char code@var231 [@expr1073743632 49 ] =@expr1073743633 "typedef C A;\nstruct AB : public A, public B { };"
1236: ;
1237: const char expected@var232 [@expr1073743634 38 ] =@expr1073743635 "struct AB : public C , public B { } ;" ;
1238: $if $(@expr1073743636 $!@expr1073743637 $assertEquals $(@expr1073743638 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1238 $, expected@var232 $, $tok_ $(@expr1073743639 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1238 $, code@var231 , false $) $) $) { $return ; }
1239: $if $(@expr1073743640 $!@expr1073743641 $assertEquals $(@expr1073743642 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1239 $, "" $, errout@var100 .@expr1073743643 str (@expr1073743644 ) $) $) { $return ; }
1240: }
1241:
1242: void simplifyTypedef43 ( ) {
1243:
1244: {
1245: const char code@var233 [@expr1073743645 54 ] =@expr1073743646 "typedef struct foo A;\nstruct A\n{\n    int alloclen;\n};"
1246:
1247:
1248:
1249: ;
1250:
1251:
1252: const char expected@var234 [@expr1073743647 30 ] =@expr1073743648 "struct A { int alloclen ; } ;"
1253:
1254:
1255: ;
1256: $if $(@expr1073743649 $!@expr1073743650 $assertEquals $(@expr1073743651 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1256 $, expected@var234 $, $tok_ $(@expr1073743652 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1256 $, code@var233 $) $) $) { $return ; }
1257: $if $(@expr1073743653 $!@expr1073743654 $assertEquals $(@expr1073743655 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1257 $, "" $, errout@var100 .@expr1832 str (@expr1833 ) $) $) { $return ; }
1258: }
1259:
1260: {
1261: const char code@var235 [@expr1073743658 52 ] =@expr1073743659 "typedef union foo A;\nunion A\n{\n    int alloclen;\n};"
1262:
1263:
1264:
1265: ;
1266:
1267:
1268: const char expected@var236 [@expr1073743660 29 ] =@expr1073743661 "union A { int alloclen ; } ;"
1269:
1270:
1271: ;
1272: $if $(@expr1073743662 $!@expr1073743663 $assertEquals $(@expr1073743664 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1272 $, expected@var236 $, $tok_ $(@expr1073743665 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1272 $, code@var235 $) $) $) { $return ; }
1273: $if $(@expr1073743666 $!@expr1073743667 $assertEquals $(@expr1073743668 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1273 $, "" $, errout@var100 .@expr1832 str (@expr1833 ) $) $) { $return ; }
1274: }
1275:
1276: {
1277: const char code@var237 [@expr1073743671 52 ] =@expr1073743672 "typedef class foo A;\nclass A\n{\n    int alloclen;\n};"
1278:
1279:
1280:
1281: ;
1282:
1283:
1284: const char expected@var238 [@expr1073743673 29 ] =@expr1073743674 "class A { int alloclen ; } ;"
1285:
1286:
1287: ;
1288: $if $(@expr1073743675 $!@expr1073743676 $assertEquals $(@expr1073743677 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1288 $, expected@var238 $, $tok_ $(@expr1073743678 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1288 $, code@var237 $) $) $) { $return ; }
1289: $if $(@expr1073743679 $!@expr1073743680 $assertEquals $(@expr1073743681 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1289 $, "" $, errout@var100 .@expr1832 str (@expr1833 ) $) $) { $return ; }
1290: }
1291: }
1292:
1293: void simplifyTypedef44 ( ) {
1294: {
1295: const char code@var239 [@expr1073743684 70 ] =@expr1073743685 "typedef std::map<std::string, int> Map;\nclass MyMap : public Map\n{\n};"
1296:
1297:
1298: ;
1299:
1300:
1301: const char expected@var240 [@expr1073743686 62 ] =@expr1073743687 "class MyMap : public std :: map < std :: string , int > { } ;"
1302:
1303: ;
1304: $if $(@expr1073743688 $!@expr1073743689 $assertEquals $(@expr1073743690 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1304 $, expected@var240 $, $tok_ $(@expr1073743691 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1304 $, code@var239 $) $) $) { $return ; }
1305: $if $(@expr1073743692 $!@expr1073743693 $assertEquals $(@expr1073743694 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1305 $, "" $, errout@var100 .@expr1871 str (@expr1872 ) $) $) { $return ; }
1306: }
1307:
1308: {
1309: const char code@var241 [@expr1073743697 73 ] =@expr1073743698 "typedef std::map<std::string, int> Map;\nclass MyMap : protected Map\n{\n};"
1310:
1311:
1312: ;
1313:
1314:
1315: const char expected@var242 [@expr1073743699 65 ] =@expr1073743700 "class MyMap : protected std :: map < std :: string , int > { } ;"
1316:
1317: ;
1318: $if $(@expr1073743701 $!@expr1073743702 $assertEquals $(@expr1073743703 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1318 $, expected@var242 $, $tok_ $(@expr1073743704 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1318 $, code@var241 $) $) $) { $return ; }
1319: $if $(@expr1073743705 $!@expr1073743706 $assertEquals $(@expr1073743707 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1319 $, "" $, errout@var100 .@expr1871 str (@expr1872 ) $) $) { $return ; }
1320: }
1321:
1322: {
1323: const char code@var243 [@expr1073743710 71 ] =@expr1073743711 "typedef std::map<std::string, int> Map;\nclass MyMap : private Map\n{\n};"
1324:
1325:
1326: ;
1327:
1328:
1329: const char expected@var244 [@expr1073743712 63 ] =@expr1073743713 "class MyMap : private std :: map < std :: string , int > { } ;"
1330:
1331: ;
1332: $if $(@expr1073743714 $!@expr1073743715 $assertEquals $(@expr1073743716 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1332 $, expected@var244 $, $tok_ $(@expr1073743717 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1332 $, code@var243 $) $) $) { $return ; }
1333: $if $(@expr1073743718 $!@expr1073743719 $assertEquals $(@expr1073743720 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1333 $, "" $, errout@var100 .@expr1871 str (@expr1872 ) $) $) { $return ; }
1334: }
1335:
1336: {
1337: const char code@var245 [@expr1073743723 53 ] =@expr1073743724 "typedef struct foo { } A;\nstruct MyA : public A\n{\n};"
1338:
1339:
1340: ;
1341:
1342:
1343: const char expected@var246 [@expr1073743725 47 ] =@expr1073743726 "struct foo { } ; struct MyA : public foo { } ;"
1344:
1345:
1346: ;
1347: $if $(@expr1073743727 $!@expr1073743728 $assertEquals $(@expr1073743729 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1347 $, expected@var246 $, $tok_ $(@expr1073743730 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1347 $, code@var245 $) $) $) { $return ; }
1348: $if $(@expr1073743731 $!@expr1073743732 $assertEquals $(@expr1073743733 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1348 $, "" $, errout@var100 .@expr1871 str (@expr1872 ) $) $) { $return ; }
1349: }
1350:
1351: {
1352: const char code@var247 [@expr1073743736 51 ] =@expr1073743737 "typedef class foo { } A;\nclass MyA : public A\n{\n};"
1353:
1354:
1355: ;
1356:
1357:
1358: const char expected@var248 [@expr1073743738 45 ] =@expr1073743739 "class foo { } ; class MyA : public foo { } ;"
1359:
1360:
1361: ;
1362: $if $(@expr1073743740 $!@expr1073743741 $assertEquals $(@expr1073743742 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1362 $, expected@var248 $, $tok_ $(@expr1073743743 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1362 $, code@var247 $) $) $) { $return ; }
1363: $if $(@expr1073743744 $!@expr1073743745 $assertEquals $(@expr1073743746 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1363 $, "" $, errout@var100 .@expr1871 str (@expr1872 ) $) $) { $return ; }
1364: }
1365: }
1366:
1367: void simplifyTypedef45 ( ) {
1368:
1369: const char code@var249 [@expr1073743749 63 ] =@expr1073743750 "void fn() {\n    typedef foo<> bar;\n    while (0 > bar(1)) {}\n}"
1370:
1371:
1372: ;
1373:
1374: $checkSimplifyTypedef_ $(@expr1073743751 code@var249 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1374 $) ;
1375: $if $(@expr1073743752 $!@expr1073743753 $assertEquals $(@expr1073743754 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1375 $, "" $, errout@var100 .@expr1073743755 str (@expr1073743756 ) $) $) { $return ; }
1376: }
1377:
1378: void simplifyTypedef46 ( ) {
1379: const char code@var250 [@expr1073743757 47 ] =@expr1073743758 "typedef const struct A { int a; } * AP;\nAP ap;"
1380: ;
1381:
1382:
1383: const char expected@var251 [@expr1073743759 45 ] =@expr1073743760 "struct A { int a ; } ; const struct A * ap ;"
1384: ;
1385: $if $(@expr1073743761 $!@expr1073743762 $assertEquals $(@expr1073743763 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1385 $, expected@var251 $, $tok_ $(@expr1073743764 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1385 $, code@var250 $) $) $) { $return ; }
1386: }
1387:
1388: void simplifyTypedef47 ( ) {
1389: {
1390: const char code@var252 [@expr1073743765 42 ] =@expr1073743766 "typedef std::pair<int, int> const I;\nI i;"
1391: ;
1392:
1393:
1394: const char expected@var253 [@expr1073743767 36 ] =@expr1073743768 "const std :: pair < int , int > i ;" ;
1395: $if $(@expr1073743769 $!@expr1073743770 $assertEquals $(@expr1073743771 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1395 $, expected@var253 $, $tok_ $(@expr1073743772 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1395 $, code@var252 $) $) $) { $return ; }
1396: }
1397:
1398: {
1399: const char code@var254 [@expr1073743773 30 ] =@expr1073743774 "typedef void (X:: *F)();\nF f;"
1400: ;
1401:
1402:
1403: const char expected@var255 [@expr1073743775 19 ] =@expr1073743776 "void ( * f ) ( ) ;" ;
1404: $if $(@expr1073743777 $!@expr1073743778 $assertEquals $(@expr1073743779 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1404 $, expected@var255 $, $tok_ $(@expr1073743780 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1404 $, code@var254 $) $) $) { $return ; }
1405: }
1406: }
1407:
1408: void simplifyTypedef48 ( ) {
1409: const char code@var256 [@expr1073743781 115 ] =@expr1073743782 "typedef struct string { } string;\nvoid foo (LIST *module_name)\n{\n    bar(module_name ? module_name->string : 0);\n}"
1410:
1411:
1412:
1413: ;
1414:
1415:
1416: const char expected@var257 [@expr1073743783 105 ] =@expr1073743784 "struct string { } ; void foo ( LIST * module_name ) { bar ( module_name ? module_name . string : 0 ) ; }"
1417:
1418:
1419:
1420: ;
1421: $if $(@expr1073743785 $!@expr1073743786 $assertEquals $(@expr1073743787 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1421 $, expected@var257 $, $tok_ $(@expr1073743788 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1421 $, code@var256 $) $) $) { $return ; }
1422: }
1423:
1424: void simplifyTypedef49 ( ) {
1425: const char code@var258 [@expr1073743789 151 ] =@expr1073743790 "class Class2 {\ntypedef const Class & Const_Reference;\nvoid some_method (Const_Reference x) const {}\nvoid another_method (Const_Reference x) const {}\n}"
1426:
1427:
1428:
1429: ;
1430:
1431:
1432: const char expected@var259 [@expr1073743791 114 ] =@expr1073743792 "class Class2 { void some_method ( const Class & x ) const { } void another_method ( const Class & x ) const { } }"
1433:
1434:
1435:
1436: ;
1437: $if $(@expr1073743793 $!@expr1073743794 $assertEquals $(@expr1073743795 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1437 $, expected@var259 $, $tok_ $(@expr1073743796 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1437 $, code@var258 $) $) $) { $return ; }
1438: }
1439:
1440: void simplifyTypedef50 ( ) {
1441: const char code@var260 [@expr1073743797 171 ] =@expr1073743798 "typedef char (* type1)[10];\ntypedef char (& type2)[10];\ntypedef char (& type3)[x];\ntypedef char (& type4)[x + 2];\ntype1 t1;\ntype1 (*tp1)[2];\ntype2 t2;\ntype3 t3;\ntype4 t4;"
1442:
|
1448:
1449: ;
1450:
1451:
1452: const char expected@var261 [@expr1073743799 130 ] =@expr1073743800 "char ( * t1 ) [ 10 ] ; char ( * ( * tp1 ) [ 2 ] ) [ 10 ] ; char ( & t2 ) [ 10 ] ; char ( & t3 ) [ x ] ; char ( & t4 ) [ x + 2 ] ;"
1453:
1454:
1455:
1456: ;
1457: $if $(@expr1073743801 $!@expr1073743802 $assertEquals $(@expr1073743803 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1457 $, expected@var261 $, $tok_ $(@expr1073743804 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1457 $, code@var260 $) $) $) { $return ; }
1458: }
1459:
1460: void simplifyTypedef51 ( ) {
1461: const char code@var262 [@expr1073743805 81 ] =@expr1073743806 "class A { public: int i; };\ntypedef const char (A :: * type1);\ntype1 t1 = &A::i;"
1462:
1463: ;
1464:
1465:
1466: const char expected@var263 [@expr1073743807 73 ] =@expr1073743808 "class A { public: int i ; } ; const char ( A :: * t1 ) ; t1 = & A :: i ;"
1467: ;
1468: $if $(@expr1073743809 $!@expr1073743810 $assertEquals $(@expr1073743811 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1468 $, expected@var263 $, $tok_ $(@expr1073743812 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1468 $, code@var262 $) $) $) { $return ; }
1469: }
1470:
1471: void simplifyTypedef52 ( ) {
1472: {
1473: const char code@var264 [@expr1073743813 44 ] =@expr1073743814 "typedef char (* type1)[10];\ntype1 foo() { }"
1474: ;
1475:
1476:
1477: const char expected@var265 [@expr1073743815 30 ] =@expr1073743816 "char ( * foo ( ) ) [ 10 ] { }" ;
1478: $if $(@expr1073743817 $!@expr1073743818 $assertEquals $(@expr1073743819 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1478 $, expected@var265 $, $tok_ $(@expr1073743820 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1478 $, code@var264 $) $) $) { $return ; }
1479: $if $(@expr1073743821 $!@expr1073743822 $assertEquals $(@expr1073743823 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1479 $, "" $, errout@var100 .@expr1073743824 str (@expr1073743825 ) $) $) { $return ; }
1480: }
1481:
1482: {
1483: const char code@var266 [@expr1073743826 51 ] =@expr1073743827 "typedef char (* type1)[10];\nLOCAL(type1) foo() { }"
1484: ;
1485:
1486:
1487: $do ${ $try ${ $checkSimplifyTypedef_ $(@expr1073743828 code@var266 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1487 $) $; $assertThrowFail $(@expr1073743829 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1487 $) $; $} $catch $(@expr1073743830 $const InternalError $&@expr1073743831 $) ${ $} $catch $(@expr1073743832 $... $) ${ $assertThrowFail $(@expr1073743833 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1487 $) $; $} $} $while $(@expr1073743834 $false $) ;
1488: }
1489: }
1490:
1491: void simplifyTypedef54 ( ) {
1492: const char code@var267 [@expr1073743835 217 ] =@expr1073743836 "void foo()\n{\n    typedef std::basic_string<char, traits_type, allocator_type> string_type;\n    try\n    {\n        throw string_type(\"leak\");\n    }\n    catch (const string_type&)\n    {\n        pthread_exit (0);\n    }\n}"
1493:
|
1502:
1503: ;
1504:
1505: $checkSimplifyTypedef_ $(@expr1073743837 code@var267 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1505 $) ;
1506: $if $(@expr1073743838 $!@expr1073743839 $assertEquals $(@expr1073743840 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1506 $, "" $, errout@var100 .@expr1073743841 str (@expr1073743842 ) $) $) { $return ; }
1507: }
1508:
1509: void simplifyTypedef55 ( ) {
1510: const char code@var268 [@expr1073743843 139 ] =@expr1073743844 "typedef volatile unsigned long * const hwreg_t ;\ntypedef void *const t1[2];\ntypedef int*const *_Iterator;\nhwreg_t v1;\nt1 v2;\n_Iterator v3;"
1511:
|
1514:
1515: ;
1516:
1517:
1518: const char expected@var269 [@expr1073743845 70 ] =@expr1073743846 "volatile long * const v1 ; void * const v2 [ 2 ] ; int * const * v3 ;"
1519:
1520: ;
1521: $if $(@expr1073743847 $!@expr1073743848 $assertEquals $(@expr1073743849 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1521 $, expected@var269 $, $tok_ $(@expr1073743850 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1521 $, code@var268 $) $) $) { $return ; }
1522:
1523:
1524: $checkSimplifyTypedef_ $(@expr1073743851 code@var268 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1524 $) ;
1525: $if $(@expr1073743852 $!@expr1073743853 $assertEquals $(@expr1073743854 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1525 $, "" $, errout@var100 .@expr1073743855 str (@expr1073743856 ) $) $) { $return ; }
1526: }
1527:
1528: void simplifyTypedef56 ( ) {
1529: const char code@var270 [@expr1073743857 104 ] =@expr1073743858 "struct C {\n    typedef void (*fptr)();\n    const fptr pr;\n    operator const fptr& () { return pr; }\n};"
1530:
1531:
1532:
1533: ;
1534:
1535:
1536: const char expected@var271 [@expr1073743859 85 ] =@expr1073743860 "struct C { const void ( * pr ) ( ) ; operatorconstvoid(*)()& ( ) { return pr ; } } ;"
1537:
1538:
1539:
1540: ;
1541: $if $(@expr1073743861 $!@expr1073743862 $assertEquals $(@expr1073743863 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1541 $, expected@var271 $, $tok_ $(@expr1073743864 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1541 $, code@var270 $) $) $) { $return ; }
1542: $if $(@expr1073743865 $!@expr1073743866 $assertEquals $(@expr1073743867 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1542 $, "" $, errout@var100 .@expr1073743868 str (@expr1073743869 ) $) $) { $return ; }
1543: }
1544:
1545: void simplifyTypedef57 ( ) {
1546: const char code@var272 [@expr1073743870 58 ] =@expr1073743871 "void foo() {\n    typedef int A;\n    A a = A(1) * A(2);\n};"
1547:
1548:
1549: ;
1550:
1551:
1552: const char expected@var273 [@expr1073743872 55 ] =@expr1073743873 "void foo ( ) { int a ; a = int ( 1 ) * int ( 2 ) ; } ;"
1553:
1554:
1555: ;
1556: $if $(@expr1073743874 $!@expr1073743875 $assertEquals $(@expr1073743876 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1556 $, expected@var273 $, $tok_ $(@expr1073743877 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1556 $, code@var272 $) $) $) { $return ; }
1557: $if $(@expr1073743878 $!@expr1073743879 $assertEquals $(@expr1073743880 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1557 $, "" $, errout@var100 .@expr1073743881 str (@expr1073743882 ) $) $) { $return ; }
1558: }
1559:
1560: void simplifyTypedef58 ( ) {
1561: {
1562: const char code@var274 [@expr1073743883 61 ] =@expr1073743884 "typedef int vec2_t[2];\nvec2_t coords[4] = {1,2,3,4,5,6,7,8};"
1563: ;
1564:
1565:
1566: const char expected@var275 [@expr1073743885 61 ] =@expr1073743886 "int coords [ 4 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;" ;
1567: $if $(@expr1073743887 $!@expr1073743888 $assertEquals $(@expr1073743889 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1567 $, expected@var275 $, $tok_ $(@expr1073743890 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1567 $, code@var274 $) $) $) { $return ; }
1568: $if $(@expr1073743891 $!@expr1073743892 $assertEquals $(@expr1073743893 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1568 $, "" $, errout@var100 .@expr2070 str (@expr2071 ) $) $) { $return ; }
1569: }
1570:
1571: {
1572: const char code@var276 [@expr1073743896 69 ] =@expr1073743897 "typedef int vec2_t[2];\nvec2_t coords[4][5][6+1] = {1,2,3,4,5,6,7,8};"
1573: ;
1574:
1575:
1576: const char expected@var277 [@expr1073743898 77 ] =@expr1073743899 "int coords [ 4 ] [ 5 ] [ 6 + 1 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;" ;
1577: $if $(@expr1073743900 $!@expr1073743901 $assertEquals $(@expr1073743902 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1577 $, expected@var277 $, $tok_ $(@expr1073743903 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1577 $, code@var276 $) $) $) { $return ; }
1578: $if $(@expr1073743904 $!@expr1073743905 $assertEquals $(@expr1073743906 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1578 $, "" $, errout@var100 .@expr2070 str (@expr2071 ) $) $) { $return ; }
1579: }
1580: }
1581:
1582: void simplifyTypedef59 ( ) {
1583: const char code@var278 [@expr1073743909 154 ] =@expr1073743910 "template<typename DISPATCHER> class SomeTemplateClass {\n    typedef void (SomeTemplateClass<DISPATCHER>::*MessageDispatcherFunc)(SerialInputMessage&);\n};"
1584:
1585: ;
1586:
1587: const char expected@var279 [@expr1073743911 63 ] =@expr1073743912 "template < typename DISPATCHER > class SomeTemplateClass { } ;" ;
1588: $if $(@expr1073743913 $!@expr1073743914 $assertEquals $(@expr1073743915 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1588 $, expected@var279 $, $tok_ $(@expr1073743916 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1588 $, code@var278 $) $) $) { $return ; }
1589: $if $(@expr1073743917 $!@expr1073743918 $assertEquals $(@expr1073743919 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1589 $, "" $, errout@var100 .@expr1073743920 str (@expr1073743921 ) $) $) { $return ; }
1590: }
1591:
1592: void simplifyTypedef60 ( ) {
1593: const char code@var280 [@expr1073743922 175 ] =@expr1073743923 "typedef enum {qfalse, qtrue} qboolean;\ntypedef qboolean (*localEntitiyAddFunc_t) (struct le_s * le, entity_t * ent);\nvoid f()\n{\n    qboolean b;\n    localEntitiyAddFunc_t f;\n}"
1594:
|
1598:
1599: ;
1600:
1601: const char expected@var281 [@expr1073743924 86 ] =@expr1073743925 "enum qboolean { qfalse , qtrue } ; void f ( ) { qboolean b ; qboolean ( * f ) ( ) ; }" ;
1602: $if $(@expr1073743926 $!@expr1073743927 $assertEquals $(@expr1073743928 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1602 $, expected@var281 $, $tok_ $(@expr1073743929 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1602 $, code@var280 , false $) $) $) { $return ; }
1603: $if $(@expr1073743930 $!@expr1073743931 $assertEquals $(@expr1073743932 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1603 $, "" $, errout@var100 .@expr1073743933 str (@expr1073743934 ) $) $) { $return ; }
1604: }
1605:
1606: void simplifyTypedef61 ( ) {
1607: const char code1@var282 [@expr1073743935 142 ] =@expr1073743936 "typedef       unsigned char   (*Mf_GetIndexByte_Func)          (void);\ntypedef const unsigned char * (*Mf_GetPointerToCurrentPos_Func)(void);"
1608: ;
1609:
1610:
1611: $checkSimplifyTypedef_ $(@expr1073743937 code1@var282 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1611 $) ;
1612: $if $(@expr1073743938 $!@expr1073743939 $assertEquals $(@expr1073743940 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1612 $, "" $, errout@var100 .@expr2117 str (@expr2118 ) $) $) { $return ; }
1613:
1614: const char code2@var283 [@expr1073743943 77 ] =@expr1073743944 "typedef unsigned long uint32_t;\ntypedef uint32_t (*write_type_t) (uint32_t);"
1615: ;
1616:
1617:
1618: $checkSimplifyTypedef_ $(@expr1073743945 code2@var283 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1618 $) ;
1619: $if $(@expr1073743946 $!@expr1073743947 $assertEquals $(@expr1073743948 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1619 $, "" $, errout@var100 .@expr2117 str (@expr2118 ) $) $) { $return ; }
1620: }
1621:
1622: void simplifyTypedef62 ( ) {
1623: const char code1@var284 [@expr1073743951 58 ] =@expr1073743952 "typedef char TString[256];\nvoid f()\n{\n    TString a, b;\n}"
1624:
1625:
1626:
1627: ;
1628:
1629:
1630: const char expected1@var285 [@expr1073743953 49 ] =@expr1073743954 "void f ( ) { char a [ 256 ] ; char b [ 256 ] ; }" ;
1631: $if $(@expr1073743955 $!@expr1073743956 $assertEquals $(@expr1073743957 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1631 $, expected1@var285 $, $tok_ $(@expr1073743958 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1631 $, code1@var284 , false $) $) $) { $return ; }
1632: $if $(@expr1073743959 $!@expr1073743960 $assertEquals $(@expr1073743961 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1632 $, "" $, errout@var100 .@expr2138 str (@expr2139 ) $) $) { $return ; }
1633:
1634: const char code2@var286 [@expr1073743964 74 ] =@expr1073743965 "typedef char TString[256];\nvoid f()\n{\n    TString a = { 0 }, b = { 0 };\n}"
1635:
1636:
1637:
1638: ;
1639:
1640:
1641: const char expected2@var287 [@expr1073743966 73 ] =@expr1073743967 "void f ( ) { char a [ 256 ] ; a = { 0 } ; char b [ 256 ] ; b = { 0 } ; }" ;
1642: $if $(@expr1073743968 $!@expr1073743969 $assertEquals $(@expr1073743970 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1642 $, expected2@var287 $, $tok_ $(@expr1073743971 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1642 $, code2@var286 , false , Settings ::@expr2148 Native , false $) $) $) { $return ; }
1643: $if $(@expr1073743973 $!@expr1073743974 $assertEquals $(@expr1073743975 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1643 $, "" $, errout@var100 .@expr2138 str (@expr2139 ) $) $) { $return ; }
1644:
1645: const char code3@var288 [@expr1073743978 68 ] =@expr1073743979 "typedef char TString[256];\nvoid f()\n{\n    TString a = \"\", b = \"\";\n}"
1646:
1647:
1648:
1649: ;
1650:
1651:
1652: const char expected3@var289 [@expr1073743980 67 ] =@expr1073743981 "void f ( ) { char a [ 256 ] ; a = \"\" ; char b [ 256 ] ; b = \"\" ; }" ;
1653: $if $(@expr1073743982 $!@expr1073743983 $assertEquals $(@expr1073743984 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1653 $, expected3@var289 $, $tok_ $(@expr1073743985 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1653 $, code3@var288 , false , Settings ::@expr2148 Native , false $) $) $) { $return ; }
1654: $if $(@expr1073743987 $!@expr1073743988 $assertEquals $(@expr1073743989 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1654 $, "" $, errout@var100 .@expr2138 str (@expr2139 ) $) $) { $return ; }
1655:
1656: const char code4@var290 [@expr1073743992 76 ] =@expr1073743993 "typedef char TString[256];\nvoid f()\n{\n    TString a = \"1234\", b = \"5678\";\n}"
1657:
1658:
1659:
1660: ;
1661:
1662:
1663: const char expected4@var291 [@expr1073743994 75 ] =@expr1073743995 "void f ( ) { char a [ 256 ] ; a = \"1234\" ; char b [ 256 ] ; b = \"5678\" ; }" ;
1664: $if $(@expr1073743996 $!@expr1073743997 $assertEquals $(@expr1073743998 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1664 $, expected4@var291 $, $tok_ $(@expr1073743999 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1664 $, code4@var290 , false , Settings ::@expr2148 Native , false $) $) $) { $return ; }
1665: $if $(@expr1073744001 $!@expr1073744002 $assertEquals $(@expr1073744003 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1665 $, "" $, errout@var100 .@expr2138 str (@expr2139 ) $) $) { $return ; }
1666: }
1667:
1668: void simplifyTypedef63 ( ) {
1669: const char code@var292 [@expr1073744006 29 ] =@expr1073744007 "typedef float x[3];\nx a,b,c;"
1670: ;
1671: const std ::@expr1073744008 string actual@var293 (@expr1073744009 $tok_ $(@expr1073744010 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1671 $, code@var292 $) ) ;
1672: $if $(@expr1073744011 $!@expr1073744012 $assertEquals $(@expr1073744013 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1672 $, "float a [ 3 ] ; float b [ 3 ] ; float c [ 3 ] ;" $, actual@var293 $) $) { $return ; }
1673: $if $(@expr1073744014 $!@expr1073744015 $assertEquals $(@expr1073744016 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1673 $, "" $, errout@var100 .@expr1073744017 str (@expr1073744018 ) $) $) { $return ; }
1674: }
1675:
1676: void simplifyTypedef64 ( ) {
1677: const char code@var294 [@expr1073744019 55 ] =@expr1073744020 "typedef typeof(__type1() + __type2()) __type;__type t;"
1678: ;
1679: const std ::@expr1073744021 string actual@var295 (@expr1073744022 $tok_ $(@expr1073744023 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1679 $, code@var294 $) ) ;
1680: $if $(@expr1073744024 $!@expr1073744025 $assertEquals $(@expr1073744026 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1680 $, "typeof ( __type1 ( ) + __type2 ( ) ) t ;" $, actual@var295 $) $) { $return ; }
1681: $if $(@expr1073744027 $!@expr1073744028 $assertEquals $(@expr1073744029 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1681 $, "" $, errout@var100 .@expr1073744030 str (@expr1073744031 ) $) $) { $return ; }
1682: }
1683:
1684: void simplifyTypedef65 ( ) {
1685: const char code@var296 [@expr1073744032 75 ] =@expr1073744033 "typedef BAR<int> Foo;\nint main() {\n    Foo b(0);\n    return b > Foo(10);\n}"
1686:
1687:
1688:
1689: ;
1690: const std ::@expr1073744034 string actual@var297 (@expr1073744035 $tok_ $(@expr1073744036 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1690 $, code@var296 , true , Settings ::@expr1073744037 Native , false $) ) ;
1691: $if $(@expr1073744038 $!@expr1073744039 $assertEquals $(@expr1073744040 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1691 $, "int main ( ) { BAR < int > b ( 0 ) ; return b > BAR < int > ( 10 ) ; }" $, actual@var297 $) $) { $return ; }
1692: $if $(@expr1073744041 $!@expr1073744042 $assertEquals $(@expr1073744043 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1692 $, "" $, errout@var100 .@expr1073744044 str (@expr1073744045 ) $) $) { $return ; }
1693: }
1694:
1695: void simplifyTypedef66 ( ) {
1696: const char code@var298 [@expr1073744046 44 ] =@expr1073744047 "typedef long* GEN;\nextern GEN (*foo)(long);"
1697: ;
1698: $tok_ $(@expr1073744048 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1698 $, code@var298 $) ;
1699: $if $(@expr1073744049 $!@expr1073744050 $assertEquals $(@expr1073744051 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1699 $, "" $, errout@var100 .@expr1073744052 str (@expr1073744053 ) $) $) { $return ; }
1700: }
1701:
1702: void simplifyTypedef67 ( ) {
1703: const char code@var299 [@expr1073744054 139 ] =@expr1073744055 "typedef int ( * Function ) ( ) ;\nvoid f ( ) {\n    ((Function * (*) (char *, char *, int, int)) global[6]) ( \"assoc\", \"eggdrop\", 106, 0);\n}"
1704:
1705:
1706: ;
1707: const char expected@var300 [@expr1073744056 126 ] =@expr1073744057 "void f ( ) { ( ( int ( * * ( * ) ( char * , char * , int , int ) ) ( ) ) global [ 6 ] ) ( \"assoc\" , \"eggdrop\" , 106 , 0 ) ; }"
1708:
1709: ;
1710: $if $(@expr1073744058 $!@expr1073744059 $assertEquals $(@expr1073744060 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1710 $, expected@var300 $, $tok_ $(@expr1073744061 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1710 $, code@var299 $) $) $) { $return ; }
1711: $assertEqualsWithoutLineNumbers $(@expr1073744062 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1711 $, "[test.cpp:3]: (debug) valueflow.cpp:1319:valueFlowConditionExpressions bailout: Skipping function due to incomplete variable global\n" $, errout@var100 .@expr1073744063 str (@expr1073744064 ) $) ;
1712: }
1713:
1714: void simplifyTypedef68 ( ) {
1715: const char code@var301 [@expr1073744065 44 ] =@expr1073744066 "typedef FMAC1 void (* a) ();\nvoid *(*b) ();"
1716: ;
1717: const std ::@expr1073744067 string actual@var302 (@expr1073744068 $tok_ $(@expr1073744069 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1717 $, code@var301 $) ) ;
1718: $if $(@expr1073744070 $!@expr1073744071 $assertEquals $(@expr1073744072 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1718 $, "void * ( * b ) ( ) ;" $, actual@var302 $) $) { $return ; }
1719: $if $(@expr1073744073 $!@expr1073744074 $assertEquals $(@expr1073744075 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1719 $, "" $, errout@var100 .@expr1073744076 str (@expr1073744077 ) $) $) { $return ; }
1720: }
1721:
1722: void simplifyTypedef69 ( ) {
1723: const char code@var303 [@expr1073744078 127 ] =@expr1073744079 "typedef int (*CompilerHook)();\ntypedef struct VirtualMachine\n{\n    CompilerHook *(*compilerHookVector)(void);\n}VirtualMachine;"
1724:
1725:
1726:
1727: ;
1728: const char expected@var304 [@expr1073744080 80 ] =@expr1073744081 "struct VirtualMachine { int ( * * ( * compilerHookVector ) ( void ) ) ( ) ; } ;"
1729:
1730:
1731: ;
1732: $if $(@expr1073744082 $!@expr1073744083 $assertEquals $(@expr1073744084 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1732 $, expected@var304 $, $tok_ $(@expr1073744085 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1732 $, code@var303 $) $) $) { $return ; }
1733: $if $(@expr1073744086 $!@expr1073744087 $assertEquals $(@expr1073744088 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1733 $, "" $, errout@var100 .@expr1073744089 str (@expr1073744090 ) $) $) { $return ; }
1734: }
1735:
1736: void simplifyTypedef70 ( ) {
1737: const char code@var305 [@expr1073744091 69 ] =@expr1073744092 "typedef int pread_f ( int ) ;\npread_f *(*test_func)(char *filename);"
1738: ;
1739: const char expected@var306 [@expr1073744093 56 ] =@expr1073744094 "int ( * ( * test_func ) ( char * filename ) ) ( int ) ;" ;
1740: $if $(@expr1073744095 $!@expr1073744096 $assertEquals $(@expr1073744097 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1740 $, expected@var306 $, $tok_ $(@expr1073744098 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1740 $, code@var305 $) $) $) { $return ; }
1741: $if $(@expr1073744099 $!@expr1073744100 $assertEquals $(@expr1073744101 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1741 $, "" $, errout@var100 .@expr1073744102 str (@expr1073744103 ) $) $) { $return ; }
1742: }
1743:
1744: void simplifyTypedef71 ( ) {
1745: {
1746: const char code@var307 [@expr1073744104 69 ] =@expr1073744105 "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[1]);"
1747: ;
1748: const char expected@var308 [@expr1073744106 33 ] =@expr1073744107 "int ( * ( efuncs [ 1 ] ) ) ( ) ;" ;
1749: $if $(@expr1073744108 $!@expr1073744109 $assertEquals $(@expr1073744110 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1749 $, expected@var308 $, $tok_ $(@expr1073744111 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1749 $, code@var307 $) $) $) { $return ; }
1750: $if $(@expr1073744112 $!@expr1073744113 $assertEquals $(@expr1073744114 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1750 $, "" $, errout@var100 .@expr2291 str (@expr2292 ) $) $) { $return ; }
1751: }
1752: {
1753: const char code@var309 [@expr1073744117 85 ] =@expr1073744118 "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[]) = { NULL, NULL };"
1754: ;
1755: const char expected@var310 [@expr1073744119 49 ] =@expr1073744120 "int ( * ( efuncs [ ] ) ) ( ) = { NULL , NULL } ;" ;
1756: $if $(@expr1073744121 $!@expr1073744122 $assertEquals $(@expr1073744123 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1756 $, expected@var310 $, $tok_ $(@expr1073744124 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1756 $, code@var309 $) $) $) { $return ; }
1757: $if $(@expr1073744125 $!@expr1073744126 $assertEquals $(@expr1073744127 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1757 $, "" $, errout@var100 .@expr2291 str (@expr2292 ) $) $) { $return ; }
1758: }
1759: }
1760:
1761: void simplifyTypedef72 ( ) {
1762:
1763: {
1764: const char code@var311 [@expr1073744130 72 ] =@expr1073744131 "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const { }\n};"
1765:
1766:
1767: ;
1768: const char expected@var312 [@expr1073744132 45 ] =@expr1073744133 "class Fred { operatorint** ( ) const { } } ;"
1769:
1770:
1771: ;
1772: $if $(@expr1073744134 $!@expr1073744135 $assertEquals $(@expr1073744136 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1772 $, expected@var312 $, $tok_ $(@expr1073744137 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1772 $, code@var311 $) $) $) { $return ; }
1773: $if $(@expr1073744138 $!@expr1073744139 $assertEquals $(@expr1073744140 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1773 $, "" $, errout@var100 .@expr2317 str (@expr2318 ) $) $) { $return ; }
1774: }
1775:
1776: {
1777: const char code@var313 [@expr1073744143 68 ] =@expr1073744144 "class Fred {\n    typedef int INT;\n    void f1() const { INT i; }\n};"
1778:
1779:
1780: ;
1781: const char expected@var314 [@expr1073744145 47 ] =@expr1073744146 "class Fred { void f1 ( ) const { int i ; } } ;"
1782:
1783:
1784: ;
1785: $if $(@expr1073744147 $!@expr1073744148 $assertEquals $(@expr1073744149 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1785 $, expected@var314 $, $tok_ $(@expr1073744150 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1785 $, code@var313 $) $) $) { $return ; }
1786: $if $(@expr1073744151 $!@expr1073744152 $assertEquals $(@expr1073744153 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1786 $, "" $, errout@var100 .@expr2317 str (@expr2318 ) $) $) { $return ; }
1787: }
1788:
1789: {
1790: const char code@var315 [@expr1073744156 97 ] =@expr1073744157 "class Fred {\n    typedef int INT;\n    void f1() const;\n};\nvoid Fred::f1() const { INT i; f(i); }"
1791:
1792:
1793:
1794: ;
1795: const char expected@var316 [@expr1073744158 85 ] =@expr1073744159 "class Fred { void f1 ( ) const ; } ; void Fred :: f1 ( ) const { int i ; f ( i ) ; }"
1796:
1797:
1798:
1799: ;
1800: $if $(@expr1073744160 $!@expr1073744161 $assertEquals $(@expr1073744162 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1800 $, expected@var316 $, $tok_ $(@expr1073744163 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1800 $, code@var315 $) $) $) { $return ; }
1801: $if $(@expr1073744164 $!@expr1073744165 $assertEquals $(@expr1073744166 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1801 $, "" $, errout@var100 .@expr2317 str (@expr2318 ) $) $) { $return ; }
1802: }
1803:
1804: {
1805: const char code@var317 [@expr1073744169 98 ] =@expr1073744170 "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const;\n};\nFred::operator F() const { }"
1806:
1807:
1808:
1809: ;
1810: const char expected@var318 [@expr1073744171 79 ] =@expr1073744172 "class Fred { operatorint** ( ) const ; } ; Fred :: operatorint** ( ) const { }"
1811:
1812:
1813:
1814: ;
1815: $if $(@expr1073744173 $!@expr1073744174 $assertEquals $(@expr1073744175 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1815 $, expected@var318 $, $tok_ $(@expr1073744176 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1815 $, code@var317 $) $) $) { $return ; }
1816: $if $(@expr1073744177 $!@expr1073744178 $assertEquals $(@expr1073744179 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1816 $, "" $, errout@var100 .@expr2317 str (@expr2318 ) $) $) { $return ; }
1817: }
1818: }
1819:
1820: void simplifyTypedef73 ( ) {
1821: const char code@var319 [@expr1073744182 69 ] =@expr1073744183 "struct B {};\ntypedef struct A : public B {\n    void f();\n} a, *aPtr;"
1822:
1823:
1824: ;
1825: const char expected@var320 [@expr1073744184 54 ] =@expr1073744185 "struct B { } ; struct A : public B { void f ( ) ; } ;"
1826:
1827:
1828: ;
1829: $if $(@expr1073744186 $!@expr1073744187 $assertEquals $(@expr1073744188 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1829 $, expected@var320 $, $tok_ $(@expr1073744189 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1829 $, code@var319 $) $) $) { $return ; }
1830: $if $(@expr1073744190 $!@expr1073744191 $assertEquals $(@expr1073744192 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1830 $, "" $, errout@var100 .@expr1073744193 str (@expr1073744194 ) $) $) { $return ; }
1831: }
1832:
1833: void simplifyTypedef74 ( ) {
1834: const char code@var321 [@expr1073744195 147 ] =@expr1073744196 "typedef long (*state_func_t)(void);\ntypedef state_func_t (*state_t)(void);\nstate_t current_state = death;\nstatic char get_runlevel(const state_t);"
1835:
1836:
1837: ;
1838: const char expected@var322 [@expr1073744197 147 ] =@expr1073744198 "long ( * ( * current_state ) ( void ) ) ( void ) ; current_state = death ; static char get_runlevel ( const long ( * ( * ) ( void ) ) ( void ) ) ;"
1839: ;
1840: $if $(@expr1073744199 $!@expr1073744200 $assertEquals $(@expr1073744201 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1840 $, expected@var322 $, $tok_ $(@expr1073744202 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1840 $, code@var321 $) $) $) { $return ; }
1841: $if $(@expr1073744203 $!@expr1073744204 $assertEquals $(@expr1073744205 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1841 $, "" $, errout@var100 .@expr1073744206 str (@expr1073744207 ) $) $) { $return ; }
1842: }
1843:
1844: void simplifyTypedef75 ( ) {
1845: const char code@var323 [@expr1073744208 38 ] =@expr1073744209 "typedef _Packed struct S { long l; };" ;
1846: $if $(@expr1073744210 $!@expr1073744211 $assertEquals $(@expr1073744212 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1846 $, ";" $, $tok_ $(@expr1073744213 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1846 $, code@var323 , true , Settings ::@expr1073744214 Native , false $) $) $) { $return ; }
1847: $if $(@expr1073744215 $!@expr1073744216 $assertEquals $(@expr1073744217 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1847 $, "" $, errout@var100 .@expr1073744218 str (@expr1073744219 ) $) $) { $return ; }
1848: }
1849:
1850: void simplifyTypedef76 ( ) {
1851: const char code@var324 [@expr1073744220 26 ] =@expr1073744221 "void f1(typedef int x) {}" ;
1852: const char expected@var325 [@expr1073744222 30 ] =@expr1073744223 "void f1 ( typedef int x ) { }" ;
1853: $if $(@expr1073744224 $!@expr1073744225 $assertEquals $(@expr1073744226 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1853 $, expected@var325 $, $tok_ $(@expr1073744227 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1853 $, code@var324 , true , Settings ::@expr1073744228 Native , false $) $) $) { $return ; }
1854: $if $(@expr1073744229 $!@expr1073744230 $assertEquals $(@expr1073744231 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1854 $, "" $, errout@var100 .@expr1073744232 str (@expr1073744233 ) $) $) { $return ; }
1855: }
1856:
1857: void simplifyTypedef77 ( ) {
1858: const char code@var326 [@expr1073744234 43 ] =@expr1073744235 "typedef char Str[10]; int x = sizeof(Str);" ;
1859: const char expected@var327 [@expr1073744236 37 ] =@expr1073744237 "int x ; x = sizeof ( char [ 10 ] ) ;" ;
1860: $if $(@expr1073744238 $!@expr1073744239 $assertEquals $(@expr1073744240 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1860 $, expected@var327 $, $tok_ $(@expr1073744241 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1860 $, code@var326 $) $) $) { $return ; }
1861: }
1862:
1863: void simplifyTypedef78 ( ) {
1864: const char code@var328 [@expr1073744242 63 ] =@expr1073744243 "typedef struct A A_t;\nA_t a;\ntypedef struct A { } A_t;\nA_t a1;"
1865:
1866:
1867: ;
1868: const char expected@var329 [@expr1073744244 42 ] =@expr1073744245 "struct A a ; struct A { } ; struct A a1 ;" ;
1869: $if $(@expr1073744246 $!@expr1073744247 $assertEquals $(@expr1073744248 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1869 $, expected@var329 $, $tok_ $(@expr1073744249 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1869 $, code@var328 $) $) $) { $return ; }
1870: }
1871:
1872: void simplifyTypedef79 ( ) {
1873: const char code@var330 [@expr1073744250 121 ] =@expr1073744251 "typedef int (Tcl_ObjCmdProc) (int x);\ntypedef struct LangVtab\n{\n    Tcl_ObjCmdProc * (*V_LangOptionCommand);\n} LangVtab;"
1874:
1875:
1876:
1877: ;
1878: const char expected@var331 [@expr1073744252 70 ] =@expr1073744253 "struct LangVtab { int ( * ( * V_LangOptionCommand ) ) ( int x ) ; } ;"
1879:
1880:
1881: ;
1882: $if $(@expr1073744254 $!@expr1073744255 $assertEquals $(@expr1073744256 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1882 $, expected@var331 $, $tok_ $(@expr1073744257 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1882 $, code@var330 $) $) $) { $return ; }
1883: }
1884:
1885: void simplifyTypedef80 ( ) {
1886: const char code@var332 [@expr1073744258 58 ] =@expr1073744259 "typedef struct s { };\nvoid f() {\n    sizeof(struct s);\n};"
1887:
1888:
1889: ;
1890: const char expected@var333 [@expr1073744260 54 ] =@expr1073744261 "struct s { } ; void f ( ) { sizeof ( struct s ) ; } ;"
1891:
1892:
1893: ;
1894: $if $(@expr1073744262 $!@expr1073744263 $assertEquals $(@expr1073744264 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1894 $, expected@var333 $, $tok_ $(@expr1073744265 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1894 $, code@var332 $) $) $) { $return ; }
1895: $if $(@expr1073744266 $!@expr1073744267 $assertEquals $(@expr1073744268 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1895 $, "" $, errout@var100 .@expr1073744269 str (@expr1073744270 ) $) $) { $return ; }
1896: }
1897:
1898: void simplifyTypedef81 ( ) {
1899: $do ${ $try ${ $checkSimplifyTypedef_ $(@expr1073744271 "typedef\n" $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1899 $) $; $assertThrowFail $(@expr1073744272 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1899 $) $; $} $catch $(@expr1073744273 $const InternalError $&@expr1073744274 $) ${ $} $catch $(@expr1073744275 $... $) ${ $assertThrowFail $(@expr1073744276 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1899 $) $; $} $} $while $(@expr1073744277 $false $) ;
1900:
1901: $do ${ $try ${ $checkSimplifyTypedef_ $(@expr1073744278 "typedef constexpr\n" $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1901 $) $; $assertThrowFail $(@expr1073744279 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1901 $) $; $} $catch $(@expr1073744280 $const InternalError $&@expr1073744281 $) ${ $} $catch $(@expr1073744282 $... $) ${ $assertThrowFail $(@expr1073744283 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1901 $) $; $} $} $while $(@expr1073744284 $false $) ;
1902: }
1903:
1904: void simplifyTypedef82 ( ) {
1905: $checkSimplifyTypedef_ $(@expr1073744285 "class A {\npublic:\n  typedef int F(int idx);\n};\nclass B {\npublic:\n  A::F ** f;\n};\nint main()\n{\n  B * b = new B;\n  b->f = new A::F * [ 10 ];\n}" $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1905 $)
1906:
|
1916:
1917: ;
1918: $assertEqualsWithoutLineNumbers $(@expr1073744286 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1918 $, "[test.cpp:12]: (debug) valueflow.cpp:1319:valueFlowConditionExpressions bailout: Skipping function due to incomplete variable idx\n" $, errout@var100 .@expr1073744287 str (@expr1073744288 ) $) ;
1919: }
1920:
1921: void simplifyTypedef83 ( ) {
1922: const char code@var334 [@expr1073744289 42 ] =@expr1073744290 "typedef char Str[10];\nvoid f(Str &cl) { }"
1923: ;
1924:
1925:
1926: const char expected@var335 [@expr1073744291 36 ] =@expr1073744292 "void f ( char ( & cl ) [ 10 ] ) { }" ;
1927:
1928: $if $(@expr1073744293 $!@expr1073744294 $assertEquals $(@expr1073744295 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1928 $, expected@var335 $, $tok_ $(@expr1073744296 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1928 $, code@var334 $) $) $) { $return ; }
1929: }
1930:
1931: void simplifyTypedef84 ( ) {
1932: const char code1@var336 [@expr1073744297 17 ] =@expr1073744298 "typedef y x () x" ;
1933: $do ${ $try ${ $checkSimplifyTypedef_ $(@expr1073744299 code1@var336 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1933 $) $; $assertThrowFail $(@expr1073744300 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1933 $) $; $} $catch $(@expr1073744301 $const InternalError $&@expr1073744302 $) ${ $} $catch $(@expr1073744303 $... $) ${ $assertThrowFail $(@expr1073744304 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1933 $) $; $} $} $while $(@expr1073744305 $false $) ;
1934:
1935: const char code2@var337 [@expr1073744306 27 ] =@expr1073744307 "typedef struct template <>" ;
1936: $do ${ $try ${ $checkSimplifyTypedef_ $(@expr1073744308 code2@var337 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1936 $) $; $assertThrowFail $(@expr1073744309 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1936 $) $; $} $catch $(@expr1073744310 $const InternalError $&@expr1073744311 $) ${ $} $catch $(@expr1073744312 $... $) ${ $assertThrowFail $(@expr1073744313 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1936 $) $; $} $} $while $(@expr1073744314 $false $) ;
1937:
1938: const char code3@var338 [@expr1073744315 13 ] =@expr1073744316 "typedef ::<>" ;
1939: $do ${ $try ${ $checkSimplifyTypedef_ $(@expr1073744317 code3@var338 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1939 $) $; $assertThrowFail $(@expr1073744318 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1939 $) $; $} $catch $(@expr1073744319 $const InternalError $&@expr1073744320 $) ${ $} $catch $(@expr1073744321 $... $) ${ $assertThrowFail $(@expr1073744322 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1939 $) $; $} $} $while $(@expr1073744323 $false $) ;
1940: }
1941:
1942: void simplifyTypedef85 ( ) {
1943: const char code@var339 [@expr1073744324 49 ] =@expr1073744325 "typedef FOO ((BAR)(void, int, const int, int*));" ;
1944: const char expected@var340 [@expr1073744326 2 ] =@expr1073744327 ";" ;
1945: $if $(@expr1073744328 $!@expr1073744329 $assertEquals $(@expr1073744330 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1945 $, expected@var340 $, $tok_ $(@expr1073744331 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1945 $, code@var339 $) $) $) { $return ; }
1946: $if $(@expr1073744332 $!@expr1073744333 $assertEquals $(@expr1073744334 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1946 $, "" $, errout@var100 .@expr1073744335 str (@expr1073744336 ) $) $) { $return ; }
1947: }
1948:
1949: void simplifyTypedef86 ( ) {
1950: const char code@var341 [@expr1073744337 146 ] =@expr1073744338 "class relational {\n    typedef void (safe_bool_helper::*safe_bool)();\npublic:\n    operator safe_bool() const;\n    safe_bool operator!() const;\n};"
1951:
|
1954:
1955: ;
1956: const char expected@var342 [@expr1073744339 93 ] =@expr1073744340 "class relational { public: operatorsafe_bool ( ) const ; safe_bool operator! ( ) const ; } ;"
1957:
|
1960:
1961: ;
1962: $if $(@expr1073744341 $!@expr1073744342 $assertEquals $(@expr1073744343 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1962 $, expected@var342 $, $tok_ $(@expr1073744344 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1962 $, code@var341 $) $) $) { $return ; }
1963: $if $(@expr1073744345 $!@expr1073744346 $assertEquals $(@expr1073744347 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1963 $, "" $, errout@var100 .@expr1073744348 str (@expr1073744349 ) $) $) { $return ; }
1964: }
1965:
1966: void simplifyTypedef87 ( ) {
1967: const char code@var343 [@expr1073744350 51 ] =@expr1073744351 "typedef FOO (*(*BAR)(void, int, const int, int*));" ;
1968: const char expected@var344 [@expr1073744352 2 ] =@expr1073744353 ";" ;
1969: $if $(@expr1073744354 $!@expr1073744355 $assertEquals $(@expr1073744356 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1969 $, expected@var344 $, $tok_ $(@expr1073744357 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1969 $, code@var343 $) $) $) { $return ; }
1970: $if $(@expr1073744358 $!@expr1073744359 $assertEquals $(@expr1073744360 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1970 $, "" $, errout@var100 .@expr1073744361 str (@expr1073744362 ) $) $) { $return ; }
1971: }
1972:
1973: void simplifyTypedef88 ( ) {
1974: const char code@var345 [@expr1073744363 29 ] =@expr1073744364 "typedef short int (*x)(...);" ;
1975: const char expected@var346 [@expr1073744365 2 ] =@expr1073744366 ";" ;
1976: $if $(@expr1073744367 $!@expr1073744368 $assertEquals $(@expr1073744369 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1976 $, expected@var346 $, $tok_ $(@expr1073744370 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1976 $, code@var345 $) $) $) { $return ; }
1977: $if $(@expr1073744371 $!@expr1073744372 $assertEquals $(@expr1073744373 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1977 $, "" $, errout@var100 .@expr1073744374 str (@expr1073744375 ) $) $) { $return ; }
1978: }
1979:
1980: void simplifyTypedef89 ( ) {
1981: const char code@var347 [@expr1073744376 59 ] =@expr1073744377 "class Fred {\n    typedef void f(int) const;\n    f func;\n};"
1982:
1983:
1984: ;
1985: const char expected@var348 [@expr1073744378 43 ] =@expr1073744379 "class Fred { void func ( int ) const ; } ;" ;
1986: $if $(@expr1073744380 $!@expr1073744381 $assertEquals $(@expr1073744382 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1986 $, expected@var348 $, $tok_ $(@expr1073744383 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1986 $, code@var347 $) $) $) { $return ; }
1987: $if $(@expr1073744384 $!@expr1073744385 $assertEquals $(@expr1073744386 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1987 $, "" $, errout@var100 .@expr1073744387 str (@expr1073744388 ) $) $) { $return ; }
1988: }
1989:
1990: void simplifyTypedef90 ( ) {
1991: const char code@var349 [@expr1073744389 41 ] =@expr1073744390 "typedef int IA[2];\nvoid f(const IA&) {};"
1992: ;
1993: const char expected@var350 [@expr1073744391 39 ] =@expr1073744392 "void f ( const int ( & ) [ 2 ] ) { } ;" ;
1994: $if $(@expr1073744393 $!@expr1073744394 $assertEquals $(@expr1073744395 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1994 $, expected@var350 $, $tok_ $(@expr1073744396 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1994 $, code@var349 $) $) $) { $return ; }
1995: $if $(@expr1073744397 $!@expr1073744398 $assertEquals $(@expr1073744399 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 1995 $, "" $, errout@var100 .@expr1073744400 str (@expr1073744401 ) $) $) { $return ; }
1996: }
1997:
1998: void simplifyTypedef91 ( ) {
1999: const char code1@var351 [@expr1073744402 110 ] =@expr1073744403 "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nnamespace NS {\n    T A::f() {}\n}"
2000:
|
2006:
2007: ;
2008: const char expected1@var352 [@expr1073744404 83 ] =@expr1073744405 "namespace NS { class A { int * f ( ) ; } ; } namespace NS { int * A :: f ( ) { } }"
2009:
|
2015:
2016: ;
2017: $if $(@expr1073744406 $!@expr1073744407 $assertEquals $(@expr1073744408 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2017 $, expected1@var352 $, $tok_ $(@expr1073744409 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2017 $, code1@var351 $) $) $) { $return ; }
2018: $if $(@expr1073744410 $!@expr1073744411 $assertEquals $(@expr1073744412 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2018 $, "" $, errout@var100 .@expr2589 str (@expr2590 ) $) $) { $return ; }
2019:
2020: const char code2@var353 [@expr1073744415 97 ] =@expr1073744416 "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nNS::T NS::A::f() {}"
2021:
|
2025:
2026: ;
2027: const char expected2@var354 [@expr1073744417 72 ] =@expr1073744418 "namespace NS { class A { int * f ( ) ; } ; } int * NS :: A :: f ( ) { }"
2028:
|
2032:
2033: ;
2034: $if $(@expr1073744419 $!@expr1073744420 $assertEquals $(@expr1073744421 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2034 $, expected2@var354 $, $tok_ $(@expr1073744422 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2034 $, code2@var353 $) $) $) { $return ; }
2035: $if $(@expr1073744423 $!@expr1073744424 $assertEquals $(@expr1073744425 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2035 $, "" $, errout@var100 .@expr2589 str (@expr2590 ) $) $) { $return ; }
2036:
2037: const char code3@var355 [@expr1073744428 184 ] =@expr1073744429 "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    namespace NS2 {\n        T A::f() {}\n    }\n}"
2038:
|
2048:
2049: ;
2050: const char expected3@var356 [@expr1073744430 121 ] =@expr1073744431 "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { namespace NS2 { int * A :: f ( ) { } } }"
2051:
|
2061:
2062: ;
2063: $if $(@expr1073744432 $!@expr1073744433 $assertEquals $(@expr1073744434 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2063 $, expected3@var356 $, $tok_ $(@expr1073744435 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2063 $, code3@var355 $) $) $) { $return ; }
2064: $if $(@expr1073744436 $!@expr1073744437 $assertEquals $(@expr1073744438 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2064 $, "" $, errout@var100 .@expr2589 str (@expr2590 ) $) $) { $return ; }
2065:
2066: const char code4@var357 [@expr1073744441 164 ] =@expr1073744442 "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    NS2::T NS2::A::f() {}\n}"
2067:
|
2075:
2076: ;
2077: const char expected4@var358 [@expr1073744443 110 ] =@expr1073744444 "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { int * NS2 :: A :: f ( ) { } }"
2078:
|
2086:
2087: ;
2088: $if $(@expr1073744445 $!@expr1073744446 $assertEquals $(@expr1073744447 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2088 $, expected4@var358 $, $tok_ $(@expr1073744448 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2088 $, code4@var357 $) $) $) { $return ; }
2089: $if $(@expr1073744449 $!@expr1073744450 $assertEquals $(@expr1073744451 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2089 $, "" $, errout@var100 .@expr2589 str (@expr2590 ) $) $) { $return ; }
2090: }
2091:
2092: void simplifyTypedef92 ( ) {
2093: const char code@var359 [@expr1073744454 36 ] =@expr1073744455 "typedef long Long;\nnamespace NS {\n}"
2094:
2095: ;
2096: $if $(@expr1073744456 $!@expr1073744457 $assertEquals $(@expr1073744458 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2096 $, ";" $, $tok_ $(@expr1073744459 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2096 $, code@var359 $) $) $) { $return ; }
2097: $if $(@expr1073744460 $!@expr1073744461 $assertEquals $(@expr1073744462 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2097 $, "" $, errout@var100 .@expr1073744463 str (@expr1073744464 ) $) $) { $return ; }
2098: }
2099:
2100: void simplifyTypedef93 ( ) {
2101: const char code@var360 [@expr1073744465 72 ] =@expr1073744466 "struct s { double x; };\ntypedef struct s (*binop) (struct s, struct s);"
2102: ;
2103: const char expected@var361 [@expr1073744467 26 ] =@expr1073744468 "struct s { double x ; } ;" ;
2104: $if $(@expr1073744469 $!@expr1073744470 $assertEquals $(@expr1073744471 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2104 $, expected@var361 $, $tok_ $(@expr1073744472 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2104 $, code@var360 $) $) $) { $return ; }
2105: $if $(@expr1073744473 $!@expr1073744474 $assertEquals $(@expr1073744475 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2105 $, "" $, errout@var100 .@expr1073744476 str (@expr1073744477 ) $) $) { $return ; }
2106: }
2107:
2108: void simplifyTypedef94 ( ) {
2109: const char code1@var362 [@expr1073744478 75 ] =@expr1073744479 "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nA::data d;"
2110:
|
2114:
2115: ;
2116: const char expected1@var363 [@expr1073744480 75 ] =@expr1073744481 "class A { public: struct data { int a [ 4 ] ; } ; } ; struct A :: data d ;"
2117:
|
2121:
2122: ;
2123: $if $(@expr1073744482 $!@expr1073744483 $assertEquals $(@expr1073744484 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2123 $, expected1@var363 $, $tok_ $(@expr1073744485 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2123 $, code1@var362 $) $) $) { $return ; }
2124: $if $(@expr1073744486 $!@expr1073744487 $assertEquals $(@expr1073744488 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2124 $, "" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return ; }
2125:
2126: const char code2@var364 [@expr1073744491 77 ] =@expr1073744492 "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\n::A::data d;"
2127:
|
2131:
2132: ;
2133: const char expected2@var365 [@expr1073744493 78 ] =@expr1073744494 "class A { public: struct data { int a [ 4 ] ; } ; } ; struct :: A :: data d ;"
2134:
|
2138:
2139: ;
2140: $if $(@expr1073744495 $!@expr1073744496 $assertEquals $(@expr1073744497 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2140 $, expected2@var365 $, $tok_ $(@expr1073744498 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2140 $, code2@var364 $) $) $) { $return ; }
2141: $if $(@expr1073744499 $!@expr1073744500 $assertEquals $(@expr1073744501 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2141 $, "" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return ; }
2142:
2143: const char code3@var366 [@expr1073744504 96 ] =@expr1073744505 "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nclass B : public ::A::data { };"
2144:
|
2148:
2149: ;
2150: const char expected3@var367 [@expr1073744506 90 ] =@expr1073744507 "class A { public: struct data { int a [ 4 ] ; } ; } ; class B : public :: A :: data { } ;"
2151:
|
2155:
2156: ;
2157: $if $(@expr1073744508 $!@expr1073744509 $assertEquals $(@expr1073744510 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2157 $, expected3@var367 $, $tok_ $(@expr1073744511 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2157 $, code3@var366 $) $) $) { $return ; }
2158: $if $(@expr1073744512 $!@expr1073744513 $assertEquals $(@expr1073744514 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2158 $, "" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return ; }
2159: }
2160:
2161: void simplifyTypedef95 ( ) {
2162: const char code@var368 [@expr1073744517 159 ] =@expr1073744518 "class symbol_table {\npublic:\n  typedef expression_error::error_code (*valid_func)(void *cbparam, const char *name, expression_space space);\n  valid_func f;\n};"
2163:
2164:
2165:
2166: ;
2167: const char expected@var369 [@expr1073744519 78 ] =@expr1073744520 "class symbol_table { public: expression_error :: error_code ( * f ) ( ) ; } ;"
2168:
2169:
2170: ;
2171: $if $(@expr1073744521 $!@expr1073744522 $assertEquals $(@expr1073744523 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2171 $, expected@var369 $, $tok_ $(@expr1073744524 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2171 $, code@var368 , true , Settings ::@expr1073744525 Native , false $) $) $) { $return ; }
2172: $if $(@expr1073744526 $!@expr1073744527 $assertEquals $(@expr1073744528 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2172 $, "" $, errout@var100 .@expr1073744529 str (@expr1073744530 ) $) $) { $return ; }
2173: }
2174:
2175: void simplifyTypedef96 ( ) {
2176: const char code@var370 [@expr1073744531 21 ] =@expr1073744532 "typedef struct x { }" ;
2177: $do ${ $try ${ $tok_ $(@expr1073744533 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2177 $, code@var370 $) $; $assertThrowFail $(@expr1073744534 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2177 $) $; $} $catch $(@expr1073744535 $const InternalError $&@expr1073744536 $) ${ $} $catch $(@expr1073744537 $... $) ${ $assertThrowFail $(@expr1073744538 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2177 $) $; $} $} $while $(@expr1073744539 $false $) ;
2178: }
2179:
2180: void simplifyTypedef97 ( ) {
2181: const char code@var371 [@expr1073744540 19 ] =@expr1073744541 "typedef x y\n(A); y"
2182: ;
2183: $tok_ $(@expr1073744542 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2183 $, code@var371 $) ;
2184: $if $(@expr1073744543 $!@expr1073744544 $assertEquals $(@expr1073744545 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2184 $, "" $, errout@var100 .@expr1073744546 str (@expr1073744547 ) $) $) { $return ; }
2185: }
2186:
2187: void simplifyTypedef99 ( ) {
2188: const char code@var372 [@expr1073744548 43 ] =@expr1073744549 "typedef struct Fred Fred;\nstruct Fred { };"
2189: ;
2190: $tok_ $(@expr1073744550 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2190 $, code@var372 $) ;
2191: $if $(@expr1073744551 $!@expr1073744552 $assertEquals $(@expr1073744553 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2191 $, "" $, errout@var100 .@expr2730 str (@expr2731 ) $) $) { $return ; }
2192:
2193: const char code1@var373 [@expr1073744556 43 ] =@expr1073744557 "struct Fred { };\ntypedef struct Fred Fred;"
2194: ;
2195: $tok_ $(@expr1073744558 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2195 $, code1@var373 $) ;
2196: $if $(@expr1073744559 $!@expr1073744560 $assertEquals $(@expr1073744561 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2196 $, "" $, errout@var100 .@expr2730 str (@expr2731 ) $) $) { $return ; }
2197: }
2198:
2199: void simplifyTypedef100 ( ) {
2200: const char code@var374 [@expr1073744564 122 ] =@expr1073744565 "typedef struct Fred { } Fred;\nFred * foo() {\n    Fred *fred;\n    fred = se_alloc(sizeof(struct Fred));\n    return fred;\n}"
2201:
|
2204:
2205: ;
2206: $tok_ $(@expr1073744566 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2206 $, code@var374 $) ;
2207: $assertEqualsWithoutLineNumbers $(@expr1073744567 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2207 $, "" $, errout@var100 .@expr1073744568 str (@expr1073744569 ) $) ;
2208: }
2209:
2210: void simplifyTypedef101 ( ) {
2211: const char code@var375 [@expr1073744570 21 ] =@expr1073744571 "typedef a x[];\ny = x"
2212: ;
2213: $do ${ $try ${ $tok_ $(@expr1073744572 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2213 $, code@var375 $) $; $assertThrowFail $(@expr1073744573 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2213 $) $; $} $catch $(@expr1073744574 $const InternalError $&@expr1073744575 $) ${ $} $catch $(@expr1073744576 $... $) ${ $assertThrowFail $(@expr1073744577 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2213 $) $; $} $} $while $(@expr1073744578 $false $) ;
2214: }
2215:
2216: void simplifyTypedef102 ( ) {
2217: const char code@var376 [@expr1073744579 57 ] =@expr1073744580 "typedef struct { } Fred;\nvoid foo()\n{\n    Fred * Fred;\n}"
2218:
2219:
2220:
2221: ;
2222: $tok_ $(@expr1073744581 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2222 $, code@var376 $) ;
2223: $if $(@expr1073744582 $!@expr1073744583 $assertEquals $(@expr1073744584 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2223 $, "" $, errout@var100 .@expr1073744585 str (@expr1073744586 ) $) $) { $return ; }
2224: }
2225:
2226: void simplifyTypedef103 ( ) {
2227: const char code@var377 [@expr1073744587 55 ] =@expr1073744588 "typedef struct { } Fred;\nvoid foo()\n{\n    Fred Fred;\n}"
2228:
2229:
2230:
2231: ;
2232: $tok_ $(@expr1073744589 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2232 $, code@var377 $) ;
2233: $if $(@expr1073744590 $!@expr1073744591 $assertEquals $(@expr1073744592 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2233 $, "" $, errout@var100 .@expr1073744593 str (@expr1073744594 ) $) $) { $return ; }
2234: }
2235:
2236: void simplifyTypedef104 ( ) {
2237: const char code@var378 [@expr1073744595 64 ] =@expr1073744596 "typedef int (*in_func) (void FAR *, unsigned char FAR * FAR *);" ;
2238: $if $(@expr1073744597 $!@expr1073744598 $assertEquals $(@expr1073744599 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2238 $, ";" $, $tok_ $(@expr1073744600 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2238 $, code@var378 $) $) $) { $return ; }
2239: $if $(@expr1073744601 $!@expr1073744602 $assertEquals $(@expr1073744603 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2239 $, "" $, errout@var100 .@expr1073744604 str (@expr1073744605 ) $) $) { $return ; }
2240: }
2241:
2242: void simplifyTypedef105 ( ) {
2243: const char code@var379 [@expr1073744606 26 ] =@expr1073744607 "( int typedef char x; ){}" ;
2244: $tok_ $(@expr1073744608 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2244 $, code@var379 $) ;
2245: $if $(@expr1073744609 $!@expr1073744610 $assertEquals $(@expr1073744611 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2245 $, "" $, errout@var100 .@expr1073744612 str (@expr1073744613 ) $) $) { $return ; }
2246: }
2247:
2248: void simplifyTypedef106 ( ) {
2249: const char code@var380 [@expr1073744614 33 ] =@expr1073744615 "typedef void f ();\ntypedef { f }" ;
2250: $do ${ $try ${ $tok_ $(@expr1073744616 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2250 $, code@var380 $) $; $assertThrowFail $(@expr1073744617 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2250 $) $; $} $catch $(@expr1073744618 $const InternalError $&@expr1073744619 $) ${ $} $catch $(@expr1073744620 $... $) ${ $assertThrowFail $(@expr1073744621 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2250 $) $; $} $} $while $(@expr1073744622 $false $) ;
2251: }
2252:
2253: void simplifyTypedef107 ( ) {
2254: const char code@var381 [@expr1073744623 41 ] =@expr1073744624 "typedef int x[]; int main() { return x }" ;
2255: $do ${ $try ${ $tok_ $(@expr1073744625 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2255 $, code@var381 $) $; $assertThrowFail $(@expr1073744626 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2255 $) $; $} $catch $(@expr1073744627 $const InternalError $&@expr1073744628 $) ${ $} $catch $(@expr1073744629 $... $) ${ $assertThrowFail $(@expr1073744630 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2255 $) $; $} $} $while $(@expr1073744631 $false $) ;
2256: }
2257:
2258: void simplifyTypedef108 ( ) {
2259: const char code@var382 [@expr1073744632 85 ] =@expr1073744633 "typedef long* GEN;\nvoid sort_factor(GEN *y, long n) {\n    GEN a, b;\n    foo(a, b);\n}"
2260:
2261:
2262:
2263: ;
2264: const char expected@var383 [@expr1073744634 83 ] =@expr1073744635 "void sort_factor ( long * * y , long n ) { long * a ; long * b ; foo ( a , b ) ; }"
2265:
2266:
2267: ;
2268: $if $(@expr1073744636 $!@expr1073744637 $assertEquals $(@expr1073744638 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2268 $, expected@var383 $, $tok_ $(@expr1073744639 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2268 $, code@var382 $) $) $) { $return ; }
2269: }
2270:
2271: void simplifyTypedef109 ( ) {
2272: const char code@var384 [@expr1073744640 34 ] =@expr1073744641 "typedef int&& rref;\nrref var = 0;"
2273: ;
2274: const char expected@var385 [@expr1073744642 23 ] =@expr1073744643 "int && var ; var = 0 ;" ;
2275: $if $(@expr1073744644 $!@expr1073744645 $assertEquals $(@expr1073744646 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2275 $, expected@var385 $, $tok_ $(@expr1073744647 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2275 $, code@var384 $) $) $) { $return ; }
2276: $if $(@expr1073744648 $!@expr1073744649 $assertEquals $(@expr1073744650 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2276 $, "" $, errout@var100 .@expr1073744651 str (@expr1073744652 ) $) $) { $return ; }
2277: }
2278:
2279: void simplifyTypedef110 ( ) {
2280: const char code@var386 [@expr1073744653 859 ] =@expr1073744654 "namespace A {\n    namespace B {\n        namespace D {\n            typedef int DKIPtr;\n        }\n        struct ZClass {\n            void set1(const A::B::D::DKIPtr& p) {\n                membervariable1 = p;\n            }\n            void set2(const ::A::B::D::DKIPtr& p) {\n                membervariable2 = p;\n            }\n            void set3(const B::D::DKIPtr& p) {\n                membervariable3 = p;\n            }\n            void set4(const ::B::D::DKIPtr& p) {\n                membervariable4 = p;\n            }\n            void set5(const C::D::DKIPtr& p) {\n                membervariable5 = p;\n            }\n            A::B::D::DKIPtr membervariable1;\n            ::A::B::D::DKIPtr membervariable2;\n            B::D::DKIPtr membervariable3;\n            ::B::D::DKIPtr membervariable4;\n            C::D::DKIPtr membervariable5;\n        };\n    }\n}"
2281:
|
2307:
2308: ;
2309: const char expected@var387 [@expr1073744655 490 ] =@expr1073744656 "namespace A { namespace B { struct ZClass { void set1 ( const int & p ) { membervariable1 = p ; } void set2 ( const int & p ) { membervariable2 = p ; } void set3 ( const int & p ) { membervariable3 = p ; } void set4 ( const :: B :: D :: DKIPtr & p ) { membervariable4 = p ; } void set5 ( const C :: D :: DKIPtr & p ) { membervariable5 = p ; } int membervariable1 ; int membervariable2 ; int membervariable3 ; :: B :: D :: DKIPtr membervariable4 ; C :: D :: DKIPtr membervariable5 ; } ; } }"
2310:
|
2333:
2334: ;
2335: $if $(@expr1073744657 $!@expr1073744658 $assertEquals $(@expr1073744659 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2335 $, expected@var387 $, $tok_ $(@expr1073744660 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2335 $, code@var386 , true , Settings ::@expr1073744661 Native , false $) $) $) { $return ; }
2336: $if $(@expr1073744662 $!@expr1073744663 $assertEquals $(@expr1073744664 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2336 $, "" $, errout@var100 .@expr1073744665 str (@expr1073744666 ) $) $) { $return ; }
2337: }
2338:
2339: void simplifyTypedef111 ( ) {
2340: const char code1@var388 [@expr1073744667 59 ] =@expr1073744668 "typedef typename A B;\ntypedef typename B C;\ntypename C c;\n"
2341:
2342: ;
2343: const char expected1@var389 [@expr1073744669 6 ] =@expr1073744670 "A c ;" ;
2344: $if $(@expr1073744671 $!@expr1073744672 $assertEquals $(@expr1073744673 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2344 $, expected1@var389 $, $tok_ $(@expr1073744674 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2344 $, code1@var388 $) $) $) { $return ; }
2345:
2346: const char code2@var390 [@expr1073744675 50 ] =@expr1073744676 "typedef typename A B;\ntypedef typename B C;\nC c;\n"
2347:
2348: ;
2349: const char expected2@var391 [@expr1073744677 6 ] =@expr1073744678 "A c ;" ;
2350: $if $(@expr1073744679 $!@expr1073744680 $assertEquals $(@expr1073744681 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2350 $, expected2@var391 $, $tok_ $(@expr1073744682 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2350 $, code2@var390 $) $) $) { $return ; }
2351:
2352: const char code3@var392 [@expr1073744683 41 ] =@expr1073744684 "typedef typename A B;\ntypedef B C;\nC c;\n"
2353:
2354: ;
2355: const char expected3@var393 [@expr1073744685 6 ] =@expr1073744686 "A c ;" ;
2356: $if $(@expr1073744687 $!@expr1073744688 $assertEquals $(@expr1073744689 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2356 $, expected3@var393 $, $tok_ $(@expr1073744690 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2356 $, code3@var392 $) $) $) { $return ; }
2357:
2358: const char code4@var394 [@expr1073744691 41 ] =@expr1073744692 "typedef A B;\ntypedef typename B C;\nC c;\n"
2359:
2360: ;
2361: const char expected4@var395 [@expr1073744693 6 ] =@expr1073744694 "A c ;" ;
2362: $if $(@expr1073744695 $!@expr1073744696 $assertEquals $(@expr1073744697 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2362 $, expected4@var395 $, $tok_ $(@expr1073744698 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2362 $, code4@var394 $) $) $) { $return ; }
2363:
2364: const char code5@var396 [@expr1073744699 32 ] =@expr1073744700 "typedef A B;\ntypedef B C;\nC c;\n"
2365:
2366: ;
2367: const char expected5@var397 [@expr1073744701 6 ] =@expr1073744702 "A c ;" ;
2368: $if $(@expr1073744703 $!@expr1073744704 $assertEquals $(@expr1073744705 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2368 $, expected5@var397 $, $tok_ $(@expr1073744706 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2368 $, code5@var396 $) $) $) { $return ; }
2369:
2370:
2371: const char code5614@var398 [@expr1073744707 60 ] =@expr1073744708 "typedef typename T::U V;\ntypedef typename T::W (V::*Fn)();\n"
2372: ;
2373: const char expected5614@var399 [@expr1073744709 2 ] =@expr1073744710 ";" ;
2374: $if $(@expr1073744711 $!@expr1073744712 $assertEquals $(@expr1073744713 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2374 $, expected5614@var399 $, $tok_ $(@expr1073744714 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2374 $, code5614@var398 $) $) $) { $return ; }
2375: }
2376:
2377: void simplifyTypedef112 ( ) {
2378: const char code@var400 [@expr1073744715 359 ] =@expr1073744716 "template<\ntypename DataType,\ntypename SpaceType,\ntypename TrafoConfig>\nclass AsmTraits1 {\n    typedef typename SpaceType::TrafoType TrafoType;\n    typedef typename TrafoType::ShapeType ShapeType;\n    typedef typename TrafoType::template Evaluator<ShapeType, DataType>::Type TrafoEvaluator;\n    enum  {\n      domain_dim = TrafoEvaluator::domain_dim,\n    };\n};"
2379:
|
2388:
2389: ;
2390:
2391: const char expected@var401 [@expr1073744717 244 ] =@expr1073744718 "template < typename DataType , typename SpaceType , typename TrafoConfig > class AsmTraits1 { enum Anonymous0 { domain_dim = SpaceType :: TrafoType :: Evaluator < SpaceType :: TrafoType :: ShapeType , DataType > :: Type :: domain_dim , } ; } ;"
2392:
|
2397:
2398: ;
2399: $if $(@expr1073744719 $!@expr1073744720 $assertEquals $(@expr1073744721 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2399 $, expected@var401 $, $tok_ $(@expr1073744722 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2399 $, code@var400 $) $) $) { $return ; }
2400: $if $(@expr1073744723 $!@expr1073744724 $assertEquals $(@expr1073744725 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2400 $, "" $, errout@var100 .@expr1073744726 str (@expr1073744727 ) $) $) { $return ; }
2401: }
2402:
2403: void simplifyTypedef113 ( ) {
2404: const char code@var402 [@expr1073744728 32 ] =@expr1073744729 "typedef int T;\nvoid f() { T:; }"
2405: ;
2406: const char expected@var403 [@expr1073744730 21 ] =@expr1073744731 "void f ( ) { T : ; }" ;
2407: $if $(@expr1073744732 $!@expr1073744733 $assertEquals $(@expr1073744734 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2407 $, expected@var403 $, $tok_ $(@expr1073744735 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2407 $, code@var402 $) $) $) { $return ; }
2408: }
2409:
2410: void simplifyTypedef114 ( ) {
2411: const char code@var404 [@expr1073744736 44 ] =@expr1073744737 "typedef struct { enum {A,B}; } AB;\nx=AB::B;"
2412: ;
2413: const char expected@var405 [@expr1073744738 58 ] =@expr1073744739 "struct AB { enum Anonymous0 { A , B } ; } ; x = AB :: B ;" ;
2414: $if $(@expr1073744740 $!@expr1073744741 $assertEquals $(@expr1073744742 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2414 $, expected@var405 $, $tok_ $(@expr1073744743 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2414 $, code@var404 $) $) $) { $return ; }
2415: }
2416:
2417: void simplifyTypedef115 ( ) {
2418: const char code@var406 [@expr1073744744 69 ] =@expr1073744745 "typedef unsigned unsignedTypedef;\nunsignedTypedef t1 ;\nunsigned t2 ;"
2419:
2420: ;
2421: const char expected@var407 [@expr1073744746 36 ] =@expr1073744747 "unsigned int t1 ; unsigned int t2 ;"
2422: ;
2423: $if $(@expr1073744748 $!@expr1073744749 $assertEquals $(@expr1073744750 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2423 $, expected@var407 $, $tok_ $(@expr1073744751 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2423 $, code@var406 , false $) $) $) { $return ; }
2424: $if $(@expr1073744752 $!@expr1073744753 $assertEquals $(@expr1073744754 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2424 $, "" $, errout@var100 .@expr1073744755 str (@expr1073744756 ) $) $) { $return ; }
2425: }
2426:
2427: void simplifyTypedef116 ( ) {
2428: const char code@var408 [@expr1073744757 237 ] =@expr1073744758 "void fn() {\n    typedef std::vector<CharacterConversion> CharacterToConversion;\n    CharacterToConversion c2c;\n    for (CharacterToConversion::iterator it = c2c.begin(); it != c2c.end(); ++it) {}\n    CharacterToConversion().swap(c2c);\n}"
2429:
|
2432:
2433: ;
2434: const char expected@var409 [@expr1073744759 232 ] =@expr1073744760 "void fn ( ) { std :: vector < CharacterConversion > c2c ; for ( std :: vector < CharacterConversion > :: iterator it = c2c . begin ( ) ; it != c2c . end ( ) ; ++ it ) { } std :: vector < CharacterConversion > ( ) . swap ( c2c ) ; }"
2435:
2436:
2437:
2438: ;
2439: $if $(@expr1073744761 $!@expr1073744762 $assertEquals $(@expr1073744763 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2439 $, expected@var409 $, $tok_ $(@expr1073744764 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2439 $, code@var408 , false $) $) $) { $return ; }
2440: $assertEqualsWithoutLineNumbers $(@expr1073744765 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2440 $, "" $, errout@var100 .@expr1073744766 str (@expr1073744767 ) $) ;
2441: }
2442:
2443: void simplifyTypedef117 ( ) {
2444: const char code@var410 [@expr1073744768 134 ] =@expr1073744769 "typedef struct bstr {} bstr;\nstruct bstr bstr0(const char *s) {\n    return (struct bstr) { (unsigned char *)s, s ? strlen(s) : 0 };\n}"
2445:
2446:
2447: ;
2448: const char expected@var411 [@expr1073744770 133 ] =@expr1073744771 "struct bstr { } ; struct bstr bstr0 ( const char * s ) { return ( struct bstr ) { ( unsigned char * ) s , s ? strlen ( s ) : 0 } ; }"
2449:
2450:
2451: ;
2452: $if $(@expr1073744772 $!@expr1073744773 $assertEquals $(@expr1073744774 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2452 $, expected@var411 $, $tok_ $(@expr1073744775 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2452 $, code@var410 , false $) $) $) { $return ; }
2453: $if $(@expr1073744776 $!@expr1073744777 $assertEquals $(@expr1073744778 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2453 $, "" $, errout@var100 .@expr1073744779 str (@expr1073744780 ) $) $) { $return ; }
2454: }
2455:
2456: void simplifyTypedef118 ( ) {
2457: const char code@var412 [@expr1073744781 121 ] =@expr1073744782 "struct ClassyClass {\nint id;\ntypedef int (ClassyClass::*funky_type);\noperator funky_type() {\nreturn &ClassyClass::id;\n}}"
2458:
|
2461:
2462: ;
2463: const char expected@var413 [@expr1073744783 95 ] =@expr1073744784 "struct ClassyClass { int id ; operatorintClassyClass::* ( ) { return & ClassyClass :: id ; } }"
2464:
2465:
2466:
2467: ;
2468: $if $(@expr1073744785 $!@expr1073744786 $assertEquals $(@expr1073744787 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2468 $, expected@var413 $, $tok_ $(@expr1073744788 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2468 $, code@var412 , false $) $) $) { $return ; }
2469: $if $(@expr1073744789 $!@expr1073744790 $assertEquals $(@expr1073744791 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2469 $, "" $, errout@var100 .@expr1073744792 str (@expr1073744793 ) $) $) { $return ; }
2470: }
2471:
2472: void simplifyTypedef119 ( ) {
2473: const char code@var414 [@expr1073744794 94 ] =@expr1073744795 "namespace Baz {\n  typedef char* T1;\n  typedef T1 XX;\n}\nnamespace Baz { }\nenum Bar { XX = 1 };"
2474:
|
2477:
2478: ;
2479: const char exp@var415 [@expr1073744796 22 ] =@expr1073744797 "enum Bar { XX = 1 } ;" ;
2480: $if $(@expr1073744798 $!@expr1073744799 $assertEquals $(@expr1073744800 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2480 $, exp@var415 $, $tok_ $(@expr1073744801 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2480 $, code@var414 , false $) $) $) { $return ; }
2481: $if $(@expr1073744802 $!@expr1073744803 $assertEquals $(@expr1073744804 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2481 $, "" $, errout@var100 .@expr1073744805 str (@expr1073744806 ) $) $) { $return ; }
2482: }
2483:
2484: void simplifyTypedef120 ( ) {
2485: const char code@var416 [@expr1073744807 145 ] =@expr1073744808 "typedef char test_utf8_char[5];\nstatic test_utf8_char const bad_chars[] = { };\nstatic void report_good(bool passed, test_utf8_char const c) { };"
2486:
2487: ;
2488: const char exp@var417 [@expr1073744809 113 ] =@expr1073744810 "static const char bad_chars [ ] [ 5 ] = { } ; static void report_good ( bool passed , const char c [ 5 ] ) { } ;"
2489: ;
2490: $if $(@expr1073744811 $!@expr1073744812 $assertEquals $(@expr1073744813 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2490 $, exp@var417 $, $tok_ $(@expr1073744814 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2490 $, code@var416 , false $) $) $) { $return ; }
2491: $if $(@expr1073744815 $!@expr1073744816 $assertEquals $(@expr1073744817 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2491 $, "" $, errout@var100 .@expr1073744818 str (@expr1073744819 ) $) $) { $return ; }
2492: }
2493:
2494: void simplifyTypedef121 ( ) {
2495: const char code@var418 [@expr1073744820 417 ] =@expr1073744821 "typedef float vec3[3];\ntypedef float mat3x3[3][3];\nvec3 v3;\nmat3x3 m3x3;\nconst vec3 &gv() { return v3; }\nconst mat3x3 &gm() { return m3x3; }\nclass Fred {\npublic:\n    vec3 &v();\n    mat3x3 &m();\n    const vec3 &vc() const;\n    const mat3x3 &mc() const;\n};\nvec3 & Fred::v() { return v3; }\nmat3x3 & Fred::m() { return m3x3; }\nconst vec3 & Fred::vc() const { return v3; }\nconst mat3x3 & Fred::mc() const { return m3x3; }"
2496:
|
2510:
2511: ;
2512: const char exp@var419 [@expr1073744822 545 ] =@expr1073744823 "float v3 [ 3 ] ; float m3x3 [ 3 ] [ 3 ] ; const float ( & gv ( ) ) [ 3 ] { return v3 ; } const float ( & gm ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } class Fred { public: float ( & v ( ) ) [ 3 ] ; float ( & m ( ) ) [ 3 ] [ 3 ] ; const float ( & vc ( ) const ) [ 3 ] ; const float ( & mc ( ) const ) [ 3 ] [ 3 ] ; } ; float ( & Fred :: v ( ) ) [ 3 ] { return v3 ; } float ( & Fred :: m ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } const float ( & Fred :: vc ( ) const ) [ 3 ] { return v3 ; } const float ( & Fred :: mc ( ) const ) [ 3 ] [ 3 ] { return m3x3 ; }"
2513:
|
2525:
2526: ;
2527: $if $(@expr1073744824 $!@expr1073744825 $assertEquals $(@expr1073744826 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2527 $, exp@var419 $, $tok_ $(@expr1073744827 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2527 $, code@var418 , false $) $) $) { $return ; }
2528: $if $(@expr1073744828 $!@expr1073744829 $assertEquals $(@expr1073744830 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2528 $, "" $, errout@var100 .@expr1073744831 str (@expr1073744832 ) $) $) { $return ; }
2529: }
2530:
2531: void simplifyTypedef122 ( ) {
2532: const char code@var420 [@expr1073744833 87 ] =@expr1073744834 "int result = [] { return git_run_cmd(\"update-index\",\"update-index -q --refresh\"); }();" ;
2533: $tok_ $(@expr1073744835 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2533 $, code@var420 $) ;
2534: $if $(@expr1073744836 $!@expr1073744837 $assertEquals $(@expr1073744838 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2534 $, "" $, errout@var100 .@expr1073744839 str (@expr1073744840 ) $) $) { $return ; }
2535: }
2536:
2537: void simplifyTypedef123 ( ) {
2538: const char code@var421 [@expr1073744841 40 ] =@expr1073744842 "typedef int intvec[1];\nDummy<intvec> y;"
2539: ;
2540: const char exp@var422 [@expr1073744843 24 ] =@expr1073744844 "Dummy < int [ 1 ] > y ;" ;
2541: $if $(@expr1073744845 $!@expr1073744846 $assertEquals $(@expr1073744847 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2541 $, exp@var422 $, $tok_ $(@expr1073744848 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2541 $, code@var421 , false $) $) $) { $return ; }
2542: $if $(@expr1073744849 $!@expr1073744850 $assertEquals $(@expr1073744851 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2542 $, "" $, errout@var100 .@expr1073744852 str (@expr1073744853 ) $) $) { $return ; }
2543: }
2544:
2545: void simplifyTypedef124 ( ) {
2546: const char code@var423 [@expr1073744854 92 ] =@expr1073744855 "typedef long unsigned int size_t;\ntypedef size_t (my_func)(char *, size_t, size_t, void *);"
2547: ;
2548:
2549:
2550: $checkSimplifyTypedef_ $(@expr1073744856 code@var423 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2550 $) ;
2551: $assertEqualsWithoutLineNumbers $(@expr1073744857 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2551 $, "[test.cpp:1]: (debug) Failed to parse 'typedef long unsigned int size_t ;'. The checking continues anyway.\n" $, errout@var100 .@expr3034 str (@expr3035 ) $) ;
2552:
2553: const char code1@var424 [@expr1073744860 100 ] =@expr1073744861 "typedef long unsigned int uint32_t;\ntypedef uint32_t (my_func)(char *, uint32_t, uint32_t, void *);"
2554: ;
2555:
2556:
2557: $checkSimplifyTypedef_ $(@expr1073744862 code1@var424 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2557 $) ;
2558: $if $(@expr1073744863 $!@expr1073744864 $assertEquals $(@expr1073744865 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2558 $, "" $, errout@var100 .@expr3034 str (@expr3035 ) $) $) { $return ; }
2559:
2560: }
2561:
2562: void simplifyTypedef125 ( ) {
2563: const char code@var425 [@expr1073744868 44 ] =@expr1073744869 "typedef char A[3];\nchar (*p)[3] = new A[4];"
2564: ;
2565: const char exp@var426 [@expr1073744870 44 ] =@expr1073744871 "char ( * p ) [ 3 ] = new char [ 4 ] [ 3 ] ;" ;
2566: $if $(@expr1073744872 $!@expr1073744873 $assertEquals $(@expr1073744874 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2566 $, exp@var426 $, $tok_ $(@expr1073744875 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2566 $, code@var425 , false $) $) $) { $return ; }
2567: }
2568:
2569: void simplifyTypedef126 ( ) {
2570: const char code@var427 [@expr1073744876 76 ] =@expr1073744877 "typedef char automap_data_t[100];\nvoid write_array(automap_data_t *data) {}"
2571: ;
2572: const char exp@var428 [@expr1073744878 49 ] =@expr1073744879 "void write_array ( char ( * data ) [ 100 ] ) { }" ;
2573: $if $(@expr1073744880 $!@expr1073744881 $assertEquals $(@expr1073744882 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2573 $, exp@var428 $, $tok_ $(@expr1073744883 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2573 $, code@var427 , false $) $) $) { $return ; }
2574: }
2575:
2576: void simplifyTypedef127 ( ) {
2577: const char code@var429 [@expr1073744884 119 ] =@expr1073744885 "class a; typedef int (a::*b); template <long, class> struct c; template <int g> struct d { enum { e = c<g, b>::f }; };"
2578:
2579: ;
2580: const char exp@var430 [@expr1073744886 137 ] =@expr1073744887 "class a ; template < long , class > struct c ; template < int g > struct d { enum Anonymous0 { e = c < g , int ( a :: * ) > :: f } ; } ;"
2581:
2582: ;
2583: $if $(@expr1073744888 $!@expr1073744889 $assertEquals $(@expr1073744890 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2583 $, exp@var430 $, $tok_ $(@expr1073744891 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2583 $, code@var429 , false $) $) $) { $return ; }
2584: }
2585:
2586: void simplifyTypedef128 ( ) {
2587: const char code@var431 [@expr1073744892 64 ] =@expr1073744893 "typedef int d[4];\nvoid f() {\n    dostuff((const d){1,2,3,4});\n}"
2588:
2589:
2590: ;
2591: const char exp@var432 [@expr1073744894 67 ] =@expr1073744895 "void f ( ) { dostuff ( ( const int [ 4 ] ) { 1 , 2 , 3 , 4 } ) ; }"
2592:
2593: ;
2594: $if $(@expr1073744896 $!@expr1073744897 $assertEquals $(@expr1073744898 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2594 $, exp@var432 $, $tok_ $(@expr1073744899 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2594 $, code@var431 , false $) $) $) { $return ; }
2595: }
2596:
2597: void simplifyTypedef129 ( ) {
2598: {
2599: const char code@var433 [@expr1073744900 47 ] =@expr1073744901 "class c {\n  typedef char foo[4];\n  foo &f ;\n};"
2600:
2601:
2602: ;
2603:
2604: const char exp@var434 [@expr1073744902 35 ] =@expr1073744903 "class c { char ( & f ) [ 4 ] ; } ;" ;
2605: $if $(@expr1073744904 $!@expr1073744905 $assertEquals $(@expr1073744906 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2605 $, exp@var434 $, $tok_ $(@expr1073744907 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2605 $, code@var433 , false $) $) $) { $return ; }
2606: }
2607:
2608: {
2609: const char code@var435 [@expr1073744908 52 ] =@expr1073744909 "class c {\n  typedef char foo[4];\n  const foo &f;\n};"
2610:
2611:
2612: ;
2613:
2614: const char exp@var436 [@expr1073744910 41 ] =@expr1073744911 "class c { const char ( & f ) [ 4 ] ; } ;" ;
2615: $if $(@expr1073744912 $!@expr1073744913 $assertEquals $(@expr1073744914 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2615 $, exp@var436 $, $tok_ $(@expr1073744915 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2615 $, code@var435 , false $) $) $) { $return ; }
2616: }
2617:
2618: {
2619: const char code@var437 [@expr1073744916 107 ] =@expr1073744917 "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr const foo &c_str() const noexcept { return _a; }\n};"
2620:
2621:
2622:
2623: ;
2624:
2625: const char exp@var438 [@expr1073744918 104 ] =@expr1073744919 "class c { char _a [ 4 ] ; const constexpr char ( & c_str ( ) const noexcept ) [ 4 ] { return _a ; } } ;" ;
2626: $if $(@expr1073744920 $!@expr1073744921 $assertEquals $(@expr1073744922 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2626 $, exp@var438 $, $tok_ $(@expr1073744923 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2626 $, code@var437 , false $) $) $) { $return ; }
2627: }
2628:
2629: {
2630: const char code@var439 [@expr1073744924 105 ] =@expr1073744925 "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator foo &() const noexcept { return _a; }\n};"
2631:
2632:
2633:
2634: ;
2635:
2636: const char actual@var440 [@expr1073744926 100 ] =@expr1073744927 "class c { char _a [ 4 ] ; constexpr operatorchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;" ;
2637: const char exp@var441 [@expr1073744928 97 ] =@expr1073744929 "class c { char _a [ 4 ] ; const operator char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;" ;
2638: $todoAssertEquals $(@expr1073744930 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2638 $, exp@var441 $, actual@var440 $, $tok_ $(@expr1073744931 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2638 $, code@var439 , false $) $) ;
2639: }
2640:
2641: {
2642: const char code@var442 [@expr1073744932 111 ] =@expr1073744933 "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator const foo &() const noexcept { return _a; }\n};"
2643:
2644:
2645:
2646: ;
2647:
2648: const char actual@var443 [@expr1073744934 105 ] =@expr1073744935 "class c { char _a [ 4 ] ; constexpr operatorconstchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;" ;
2649: const char exp@var444 [@expr1073744936 103 ] =@expr1073744937 "class c { char _a [ 4 ] ; const operator const char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;" ;
2650: $todoAssertEquals $(@expr1073744938 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2650 $, exp@var444 $, actual@var443 $, $tok_ $(@expr1073744939 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2650 $, code@var442 , false $) $) ;
2651: }
2652: }
2653:
2654: void simplifyTypedef130 ( ) {
2655: const char code@var445 [@expr1073744940 73 ] =@expr1073744941 "template <class, class> void a() {\n  typedef int(*b)[10];\n  a<b, b>();\n}"
2656:
2657:
2658: ;
2659:
2660: const char exp@var446 [@expr1073744942 90 ] =@expr1073744943 "template < class , class > void a ( ) { a < int ( * ) [ 10 ] , int ( * ) [ 10 ] > ( ) ; }"
2661:
2662: ;
2663:
2664: $if $(@expr1073744944 $!@expr1073744945 $assertEquals $(@expr1073744946 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2664 $, exp@var446 $, $tok_ $(@expr1073744947 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2664 $, code@var445 , false $) $) $) { $return ; }
2665: }
2666:
2667: void simplifyTypedef131 ( ) {
2668: const char code@var447 [@expr1073744948 127 ] =@expr1073744949 "typedef unsigned char a4[4];\na4 a4obj;\na4 &&  a4_rref = std::move(a4obj);\na4* a4p = &(a4obj);\na4*&& a4p_rref = std::move(a4p);"
2669:
2670:
2671:
2672: ;
2673:
2674: const char exp@var448 [@expr1073744950 203 ] =@expr1073744951 "unsigned char a4obj [ 4 ] ; unsigned char ( && a4_rref ) [ 4 ] = std :: move ( a4obj ) ; unsigned char ( * a4p ) [ 4 ] ; a4p = & ( a4obj ) ; unsigned char ( * && a4p_rref ) [ 4 ] = std :: move ( a4p ) ;"
2675:
2676:
2677:
2678: ;
2679:
2680: $if $(@expr1073744952 $!@expr1073744953 $assertEquals $(@expr1073744954 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2680 $, exp@var448 $, $tok_ $(@expr1073744955 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2680 $, code@var447 , false $) $) $) { $return ; }
2681: }
2682:
2683: void simplifyTypedef132 ( ) {
2684: const char code@var449 [@expr1073744956 214 ] =@expr1073744957 "namespace NamespaceA {\n    typedef int MySpecialType;\n}\n\nclass A {\n    void DoSomething( NamespaceA::MySpecialType special );\n};\n\nusing NamespaceA::MySpecialType;\n\nvoid A::DoSomething( MySpecialType wrongName ) {}"
2685:
|
2693:
2694: ;
2695:
2696: const char exp@var450 [@expr1073744958 93 ] =@expr1073744959 "class A { void DoSomething ( int special ) ; } ; void A :: DoSomething ( int wrongName ) { }"
2697:
2698:
2699: ;
2700:
2701: $if $(@expr1073744960 $!@expr1073744961 $assertEquals $(@expr1073744962 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2701 $, exp@var450 $, $tok_ $(@expr1073744963 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2701 $, code@var449 , false $) $) $) { $return ; }
2702: }
2703:
2704: void simplifyTypedef133 ( ) {
2705: const char code@var451 [@expr1073744964 80 ] =@expr1073744965 "typedef unsigned char array_t[16];\nusing array_p = const array_t *;\narray_p x;\n"
2706:
2707: ;
2708: $if $(@expr1073744966 $!@expr1073744967 $assertEquals $(@expr1073744968 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2708 $, "using array_p = const unsigned char ( * ) [ 16 ] ; array_p x ;" $, $tok_ $(@expr1073744969 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2708 $, code@var451 , false $) $) $) { $return ; }
2709: }
2710:
2711: void simplifyTypedef134 ( ) {
2712: const char code@var452 [@expr1073744970 98 ] =@expr1073744971 "namespace foo { typedef long long int64; }\ntypedef int int32;\nnamespace foo { int64 i; }\nint32 j;"
2713:
2714:
2715: ;
2716: $if $(@expr1073744972 $!@expr1073744973 $assertEquals $(@expr1073744974 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2716 $, "namespace foo { long long i ; } int j ;" $, $tok_ $(@expr1073744975 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2716 $, code@var452 , false $) $) $) { $return ; }
2717: }
2718:
2719: void simplifyTypedef135 ( ) {
2720: const char code@var453 [@expr1073744976 444 ] =@expr1073744977 "namespace clangimport {\n    class AstNode;\n    typedef std::shared_ptr<AstNode> AstNodePtr;\n    class AstNode {\n    public:\n        AstNode() {}\n    private:\n        void createTokens();\n        void createScope(const std::vector<AstNodePtr> &children);\n    };\n}\nvoid clangimport::AstNode::createTokens() {\n    AstNodePtr range;\n    range->createTokens();\n}\nvoid clangimport::AstNode::createScope(const std::vector<AstNodePtr> & children2) { }"
2721:
|
2734:
2735: ;
2736: const char expected@var454 [@expr1073744978 441 ] =@expr1073744979 "namespace clangimport { class AstNode ; class AstNode { public: AstNode ( ) { } private: void createTokens ( ) ; void createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children ) ; } ; } void clangimport :: AstNode :: createTokens ( ) { std :: shared_ptr < AstNode > range ; range . createTokens ( ) ; } void clangimport :: AstNode :: createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children2 ) { }"
2737:
|
2750:
2751: ;
2752: $if $(@expr1073744980 $!@expr1073744981 $assertEquals $(@expr1073744982 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2752 $, expected@var454 $, $tok_ $(@expr1073744983 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2752 $, code@var453 $) $) $) { $return ; }
2753: }
2754:
2755: void simplifyTypedef136 ( ) {
2756: const char code@var455 [@expr1073744984 155 ] =@expr1073744985 "class C1 {};\ntypedef class S1 {} S1;\ntypedef class S2 : public C1 {} S2;\ntypedef class {} S3;\ntypedef class : public C1 {} S4;\nS1 s1;\nS2 s2;\nS3 s3;\nS4 s4;"
2757:
|
2763:
2764: ;
2765:
2766: const char expected@var456 [@expr1073744986 155 ] =@expr1073744987 "class C1 { } ; class S1 { } ; class S2 : public C1 { } ; class S3 { } ; class S4 : public C1 { } ; class S1 s1 ; class S2 s2 ; class S3 s3 ; class S4 s4 ;"
2767:
|
2773:
2774: ;
2775:
2776: $if $(@expr1073744988 $!@expr1073744989 $assertEquals $(@expr1073744990 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2776 $, expected@var456 $, $tok_ $(@expr1073744991 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2776 $, code@var455 , false $) $) $) { $return ; }
2777: }
2778:
2779: void simplifyTypedef137 ( ) {
2780: {
2781:
2782: const char code@var457 [@expr1073744992 282 ] =@expr1073744993 "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
2783:
|
2795:
2796: ;
2797: const char exp@var458 [@expr1073744994 256 ] =@expr1073744995 "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
2798:
|
2810:
2811: ;
2812: $if $(@expr1073744996 $!@expr1073744997 $assertEquals $(@expr1073744998 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2812 $, exp@var458 $, $tok_ $(@expr1073744999 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2812 $, code@var457 , true , Settings ::@expr3176 Native , true $) $) $) { $return ; }
2813: $if $(@expr1073745001 $!@expr1073745002 $assertEquals $(@expr1073745003 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2813 $, "" $, errout@var100 .@expr3180 str (@expr3181 ) $) $) { $return ; }
2814: }
2815: {
2816:
2817: const char code@var459 [@expr1073745006 251 ] =@expr1073745007 "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
2818:
|
2829:
2830: ;
2831: const char exp@var460 [@expr1073745008 222 ] =@expr1073745009 "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
2832:
|
2843:
2844: ;
2845: $if $(@expr1073745010 $!@expr1073745011 $assertEquals $(@expr1073745012 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2845 $, exp@var460 $, $tok_ $(@expr1073745013 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2845 $, code@var459 , true , Settings ::@expr3176 Native , true $) $) $) { $return ; }
2846: $if $(@expr1073745015 $!@expr1073745016 $assertEquals $(@expr1073745017 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2846 $, "" $, errout@var100 .@expr3180 str (@expr3181 ) $) $) { $return ; }
2847: }
2848: {
2849:
2850: const char code@var461 [@expr1073745020 267 ] =@expr1073745021 "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(V) {}\n}"
2851:
|
2863:
2864: ;
2865: const char exp@var462 [@expr1073745022 256 ] =@expr1073745023 "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
2866:
|
2878:
2879: ;
2880: const char act@var463 [@expr1073745024 234 ] =@expr1073745025 "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( V ) { } } struct external :: ns1 :: B<1> { } ;"
2881:
|
2893:
2894: ;
2895: $todoAssertEquals $(@expr1073745026 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2895 $, exp@var462 $, act@var463 $, $tok_ $(@expr1073745027 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2895 $, code@var461 , true , Settings ::@expr3176 Native , true $) $) ;
2896: $todoAssertEquals $(@expr1073745029 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2896 $, "" $, "[test.cpp:14]: (debug) Executable scope 'f' with unknown function.\n" $, errout@var100 .@expr3180 str (@expr3181 ) $) ;
2897: }
2898: {
2899:
2900: const char code@var464 [@expr1073745032 252 ] =@expr1073745033 "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nusing namespace external::ns1;\nnamespace ns {\n    struct A {\n        void f(V);\n    };\n}\nnamespace ns {\n    void A::f(V) {}\n}"
2901:
|
2913:
2914: ;
2915: const char exp@var465 [@expr1073745034 256 ] =@expr1073745035 "namespace external { namespace ns1 { struct B<1> ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
2916:
|
2928:
2929: ;
2930: const char act@var466 [@expr1073745036 198 ] =@expr1073745037 "namespace external { namespace ns1 { template < int size > struct B { } ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( V ) ; } ; } namespace ns { void A :: f ( V ) { } }"
2931:
|
2942:
2943: ;
2944: $todoAssertEquals $(@expr1073745038 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2944 $, exp@var465 $, act@var466 $, $tok_ $(@expr1073745039 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2944 $, code@var464 , true , Settings ::@expr3176 Native , true $) $) ;
2945: $if $(@expr1073745041 $!@expr1073745042 $assertEquals $(@expr1073745043 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2945 $, "" $, errout@var100 .@expr3180 str (@expr3181 ) $) $) { $return ; }
2946: }
2947: {
2948: const char code@var467 [@expr1073745046 247 ] =@expr1073745047 "namespace external {\n    template <int size> struct B { };\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
2949:
|
2960:
2961: ;
2962: const char exp@var468 [@expr1073745048 183 ] =@expr1073745049 "namespace external { struct B<1> ; } namespace ns { struct A { void f ( external :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: B<1> ) { } } struct external :: B<1> { } ;"
2963:
|
2972:
2973: ;
2974: $if $(@expr1073745050 $!@expr1073745051 $assertEquals $(@expr1073745052 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2974 $, exp@var468 $, $tok_ $(@expr1073745053 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2974 $, code@var467 , true , Settings ::@expr3176 Native , true $) $) $) { $return ; }
2975: $if $(@expr1073745055 $!@expr1073745056 $assertEquals $(@expr1073745057 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 2975 $, "" $, errout@var100 .@expr3180 str (@expr3181 ) $) $) { $return ; }
2976: }
2977: {
2978: const char code@var469 [@expr1073745060 243 ] =@expr1073745061 "template <int size> struct B { };\nnamespace external {\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
2979:
|
2990:
2991: ;
2992: const char exp@var470 [@expr1073745062 124 ] =@expr1073745063 "struct B<1> ; namespace ns { struct A { void f ( B<1> ) ; } ; } namespace ns { void A :: f ( B<1> ) { } } struct B<1> { } ;"
2993:
|
3000:
3001: ;
3002: $if $(@expr1073745064 $!@expr1073745065 $assertEquals $(@expr1073745066 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3002 $, exp@var470 $, $tok_ $(@expr1073745067 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3002 $, code@var469 , true , Settings ::@expr3176 Native , true $) $) $) { $return ; }
3003: $if $(@expr1073745069 $!@expr1073745070 $assertEquals $(@expr1073745071 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3003 $, "" $, errout@var100 .@expr3180 str (@expr3181 ) $) $) { $return ; }
3004: }
3005: }
3006:
3007: void simplifyTypedef138 ( ) {
3008: const char code@var471 [@expr1073745074 97 ] =@expr1073745075 "namespace foo { class Bar; }\nclass Baz;\ntypedef foo::Bar C;\nnamespace bar {\nclass C : Baz {};\n}\n"
3009:
|
3012:
3013: ;
3014: $if $(@expr1073745076 $!@expr1073745077 $assertEquals $(@expr1073745078 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3014 $, "namespace foo { class Bar ; } class Baz ; namespace bar { class C : Baz { } ; }" $, $tok_ $(@expr1073745079 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3014 $, code@var471 $) $) $) { $return ; }
3015: }
3016:
3017: void simplifyTypedef139 ( )
3018: {
3019: const char code@var472 [@expr1073745080 83 ] =@expr1073745081 "typedef struct c a;\nstruct {\n  a *b;\n} * d;\nvoid e(a *a) {\n  if (a < d[0].b) {}\n}\n"
3020:
|
3024:
3025: ;
3026: $if $(@expr1073745082 $!@expr1073745083 $assertEquals $(@expr1073745084 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3026 $, "struct Anonymous0 { struct c * b ; } ; struct Anonymous0 * d ; void e ( struct c * a ) { if ( a < d [ 0 ] . b ) { } }" $, $tok_ $(@expr1073745085 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3026 $, code@var472 $) $) $) { $return
3027:
3028: ; }
3029: }
3030:
3031: void simplifyTypedef140 ( ) {
3032: {
3033: const char code@var473 [@expr1073745086 48 ] =@expr1073745087 "typedef void (*b)();\nenum class E { a, b, c };\n"
3034: ;
3035: $if $(@expr1073745088 $!@expr1073745089 $assertEquals $(@expr1073745090 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3035 $, "enum class E { a , b , c } ;" $, $tok_ $(@expr1073745091 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3035 $, code@var473 $) $) $) { $return ; }
3036: }
3037: {
3038: const char code@var474 [@expr1073745092 36 ] =@expr1073745093 "typedef int A;\nenum class E { A };\n"
3039: ;
3040: $if $(@expr1073745094 $!@expr1073745095 $assertEquals $(@expr1073745096 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3040 $, "enum class E { A } ;" $, $tok_ $(@expr1073745097 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3040 $, code@var474 $) $) $) { $return ; }
3041: }
3042: }
3043:
3044: void simplifyTypedef141 ( ) {
3045: const char code@var475 [@expr1073745098 99 ] =@expr1073745099 "class C {\n    struct I {\n        using vt = const std::string;\n        using ptr = vt*;\n    };\n};\n"
3046:
|
3049:
3050: ;
3051: $if $(@expr1073745100 $!@expr1073745101 $assertEquals $(@expr1073745102 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3051 $, "class C { struct I { } ; } ;" $, $tok_ $(@expr1073745103 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3051 $, code@var475 $) $) $) { $return ; }
3052: }
3053:
3054: void simplifyTypedefFunction1 ( ) {
3055: {
3056: const char code@var476 [@expr1073745104 59 ] =@expr1073745105 "typedef void (*my_func)();\nstd::queue<my_func> func_queue;"
3057: ;
3058:
3059:
3060: const char expected@var477 [@expr1073745106 45 ] =@expr1073745107 "std :: queue < void ( * ) ( ) > func_queue ;" ;
3061: $if $(@expr1073745108 $!@expr1073745109 $assertEquals $(@expr1073745110 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3061 $, expected@var477 $, $tok_ $(@expr1073745111 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3061 $, code@var476 $) $) $) { $return ; }
3062: $if $(@expr1073745112 $!@expr1073745113 $assertEquals $(@expr1073745114 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3062 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3063: }
3064:
3065: {
3066: const char code@var478 [@expr1073745117 63 ] =@expr1073745118 "typedef void (*my_func)(void);\nstd::queue<my_func> func_queue;"
3067: ;
3068:
3069:
3070: const char expected@var479 [@expr1073745119 50 ] =@expr1073745120 "std :: queue < void ( * ) ( void ) > func_queue ;" ;
3071: $if $(@expr1073745121 $!@expr1073745122 $assertEquals $(@expr1073745123 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3071 $, expected@var479 $, $tok_ $(@expr1073745124 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3071 $, code@var478 $) $) $) { $return ; }
3072: $if $(@expr1073745125 $!@expr1073745126 $assertEquals $(@expr1073745127 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3072 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3073: }
3074:
3075: {
3076: const char code@var480 [@expr1073745130 62 ] =@expr1073745131 "typedef void (*my_func)(int);\nstd::queue<my_func> func_queue;"
3077: ;
3078:
3079:
3080: const char expected@var481 [@expr1073745132 49 ] =@expr1073745133 "std :: queue < void ( * ) ( int ) > func_queue ;" ;
3081: $if $(@expr1073745134 $!@expr1073745135 $assertEquals $(@expr1073745136 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3081 $, expected@var481 $, $tok_ $(@expr1073745137 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3081 $, code@var480 $) $) $) { $return ; }
3082: $if $(@expr1073745138 $!@expr1073745139 $assertEquals $(@expr1073745140 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3082 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3083: }
3084:
3085: {
3086: const char code@var482 [@expr1073745143 63 ] =@expr1073745144 "typedef void (*my_func)(int*);\nstd::queue<my_func> func_queue;"
3087: ;
3088:
3089:
3090: const char expected@var483 [@expr1073745145 51 ] =@expr1073745146 "std :: queue < void ( * ) ( int * ) > func_queue ;" ;
3091: $if $(@expr1073745147 $!@expr1073745148 $assertEquals $(@expr1073745149 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3091 $, expected@var483 $, $tok_ $(@expr1073745150 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3091 $, code@var482 $) $) $) { $return ; }
3092: $if $(@expr1073745151 $!@expr1073745152 $assertEquals $(@expr1073745153 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3092 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3093: }
3094:
3095: {
3096:
3097: const char code@var484 [@expr1073745156 69 ] =@expr1073745157 "typedef void (*my_func)(arg_class*);\nstd::queue<my_func> func_queue;"
3098: ;
3099:
3100:
3101: const char expected@var485 [@expr1073745158 57 ] =@expr1073745159 "std :: queue < void ( * ) ( arg_class * ) > func_queue ;" ;
3102: $if $(@expr1073745160 $!@expr1073745161 $assertEquals $(@expr1073745162 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3102 $, expected@var485 $, $tok_ $(@expr1073745163 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3102 $, code@var484 $) $) $) { $return ; }
3103: $if $(@expr1073745164 $!@expr1073745165 $assertEquals $(@expr1073745166 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3103 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3104: }
3105:
3106:
3107: {
3108: const char code@var486 [@expr1073745169 60 ] =@expr1073745170 "typedef void (my_func)();\nstd::queue<my_func *> func_queue;"
3109: ;
3110:
3111:
3112: const char expected@var487 [@expr1073745171 45 ] =@expr1073745172 "std :: queue < void ( * ) ( ) > func_queue ;" ;
3113: $if $(@expr1073745173 $!@expr1073745174 $assertEquals $(@expr1073745175 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3113 $, expected@var487 $, $tok_ $(@expr1073745176 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3113 $, code@var486 $) $) $) { $return ; }
3114: $if $(@expr1073745177 $!@expr1073745178 $assertEquals $(@expr1073745179 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3114 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3115: }
3116:
3117: {
3118: const char code@var488 [@expr1073745182 64 ] =@expr1073745183 "typedef void (my_func)(void);\nstd::queue<my_func *> func_queue;"
3119: ;
3120:
3121:
3122: const char expected@var489 [@expr1073745184 50 ] =@expr1073745185 "std :: queue < void ( * ) ( void ) > func_queue ;" ;
3123: $if $(@expr1073745186 $!@expr1073745187 $assertEquals $(@expr1073745188 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3123 $, expected@var489 $, $tok_ $(@expr1073745189 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3123 $, code@var488 $) $) $) { $return ; }
3124: $if $(@expr1073745190 $!@expr1073745191 $assertEquals $(@expr1073745192 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3124 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3125: }
3126:
3127: {
3128: const char code@var490 [@expr1073745195 63 ] =@expr1073745196 "typedef void (my_func)(int);\nstd::queue<my_func *> func_queue;"
3129: ;
3130:
3131:
3132: const char expected@var491 [@expr1073745197 49 ] =@expr1073745198 "std :: queue < void ( * ) ( int ) > func_queue ;" ;
3133: $if $(@expr1073745199 $!@expr1073745200 $assertEquals $(@expr1073745201 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3133 $, expected@var491 $, $tok_ $(@expr1073745202 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3133 $, code@var490 $) $) $) { $return ; }
3134: $if $(@expr1073745203 $!@expr1073745204 $assertEquals $(@expr1073745205 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3134 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3135: }
3136:
3137: {
3138: const char code@var492 [@expr1073745208 64 ] =@expr1073745209 "typedef void (my_func)(int*);\nstd::queue<my_func *> func_queue;"
3139: ;
3140:
3141:
3142: const char expected@var493 [@expr1073745210 51 ] =@expr1073745211 "std :: queue < void ( * ) ( int * ) > func_queue ;" ;
3143: $if $(@expr1073745212 $!@expr1073745213 $assertEquals $(@expr1073745214 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3143 $, expected@var493 $, $tok_ $(@expr1073745215 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3143 $, code@var492 $) $) $) { $return ; }
3144: $if $(@expr1073745216 $!@expr1073745217 $assertEquals $(@expr1073745218 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3144 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3145: }
3146:
3147: {
3148: const char code@var494 [@expr1073745221 70 ] =@expr1073745222 "typedef void (my_func)(arg_class*);\nstd::queue<my_func *> func_queue;"
3149: ;
3150:
3151:
3152: const char expected@var495 [@expr1073745223 57 ] =@expr1073745224 "std :: queue < void ( * ) ( arg_class * ) > func_queue ;" ;
3153: $if $(@expr1073745225 $!@expr1073745226 $assertEquals $(@expr1073745227 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3153 $, expected@var495 $, $tok_ $(@expr1073745228 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3153 $, code@var494 $) $) $) { $return ; }
3154: $if $(@expr1073745229 $!@expr1073745230 $assertEquals $(@expr1073745231 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3154 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3155: }
3156:
3157:
3158: {
3159: const char code@var496 [@expr1073745234 58 ] =@expr1073745235 "typedef void my_func();\nstd::queue<my_func *> func_queue;"
3160: ;
3161:
3162:
3163: const char expected@var497 [@expr1073745236 45 ] =@expr1073745237 "std :: queue < void ( * ) ( ) > func_queue ;" ;
3164: $if $(@expr1073745238 $!@expr1073745239 $assertEquals $(@expr1073745240 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3164 $, expected@var497 $, $tok_ $(@expr1073745241 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3164 $, code@var496 $) $) $) { $return ; }
3165: $if $(@expr1073745242 $!@expr1073745243 $assertEquals $(@expr1073745244 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3165 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3166: }
3167:
3168: {
3169: const char code@var498 [@expr1073745247 62 ] =@expr1073745248 "typedef void my_func(void);\nstd::queue<my_func *> func_queue;"
3170: ;
3171:
3172:
3173: const char expected@var499 [@expr1073745249 50 ] =@expr1073745250 "std :: queue < void ( * ) ( void ) > func_queue ;" ;
3174: $if $(@expr1073745251 $!@expr1073745252 $assertEquals $(@expr1073745253 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3174 $, expected@var499 $, $tok_ $(@expr1073745254 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3174 $, code@var498 $) $) $) { $return ; }
3175: $if $(@expr1073745255 $!@expr1073745256 $assertEquals $(@expr1073745257 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3175 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3176: }
3177:
3178: {
3179: const char code@var500 [@expr1073745260 61 ] =@expr1073745261 "typedef void my_func(int);\nstd::queue<my_func *> func_queue;"
3180: ;
3181:
3182:
3183: const char expected@var501 [@expr1073745262 49 ] =@expr1073745263 "std :: queue < void ( * ) ( int ) > func_queue ;" ;
3184: $if $(@expr1073745264 $!@expr1073745265 $assertEquals $(@expr1073745266 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3184 $, expected@var501 $, $tok_ $(@expr1073745267 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3184 $, code@var500 $) $) $) { $return ; }
3185: $if $(@expr1073745268 $!@expr1073745269 $assertEquals $(@expr1073745270 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3185 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3186: }
3187:
3188: {
3189: const char code@var502 [@expr1073745273 62 ] =@expr1073745274 "typedef void my_func(int*);\nstd::queue<my_func *> func_queue;"
3190: ;
3191:
3192:
3193: const char expected@var503 [@expr1073745275 51 ] =@expr1073745276 "std :: queue < void ( * ) ( int * ) > func_queue ;" ;
3194: $if $(@expr1073745277 $!@expr1073745278 $assertEquals $(@expr1073745279 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3194 $, expected@var503 $, $tok_ $(@expr1073745280 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3194 $, code@var502 $) $) $) { $return ; }
3195: $if $(@expr1073745281 $!@expr1073745282 $assertEquals $(@expr1073745283 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3195 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3196: }
3197:
3198: {
3199: const char code@var504 [@expr1073745286 68 ] =@expr1073745287 "typedef void my_func(arg_class*);\nstd::queue<my_func *> func_queue;"
3200: ;
3201:
3202:
3203: const char expected@var505 [@expr1073745288 57 ] =@expr1073745289 "std :: queue < void ( * ) ( arg_class * ) > func_queue ;" ;
3204: $if $(@expr1073745290 $!@expr1073745291 $assertEquals $(@expr1073745292 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3204 $, expected@var505 $, $tok_ $(@expr1073745293 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3204 $, code@var504 $) $) $) { $return ; }
3205: $if $(@expr1073745294 $!@expr1073745295 $assertEquals $(@expr1073745296 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3205 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3206: }
3207:
3208:
3209: {
3210: const char code@var506 [@expr1073745299 60 ] =@expr1073745300 "typedef void (my_func());\nstd::queue<my_func *> func_queue;"
3211: ;
3212:
3213:
3214: const char expected@var507 [@expr1073745301 45 ] =@expr1073745302 "std :: queue < void ( * ) ( ) > func_queue ;" ;
3215: $if $(@expr1073745303 $!@expr1073745304 $assertEquals $(@expr1073745305 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3215 $, expected@var507 $, $tok_ $(@expr1073745306 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3215 $, code@var506 $) $) $) { $return ; }
3216: $if $(@expr1073745307 $!@expr1073745308 $assertEquals $(@expr1073745309 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3216 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3217: }
3218:
3219: {
3220: const char code@var508 [@expr1073745312 64 ] =@expr1073745313 "typedef void (my_func(void));\nstd::queue<my_func *> func_queue;"
3221: ;
3222:
3223:
3224: const char expected@var509 [@expr1073745314 50 ] =@expr1073745315 "std :: queue < void ( * ) ( void ) > func_queue ;" ;
3225: $if $(@expr1073745316 $!@expr1073745317 $assertEquals $(@expr1073745318 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3225 $, expected@var509 $, $tok_ $(@expr1073745319 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3225 $, code@var508 $) $) $) { $return ; }
3226: $if $(@expr1073745320 $!@expr1073745321 $assertEquals $(@expr1073745322 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3226 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3227: }
3228:
3229: {
3230: const char code@var510 [@expr1073745325 63 ] =@expr1073745326 "typedef void (my_func(int));\nstd::queue<my_func *> func_queue;"
3231: ;
3232:
3233:
3234: const char expected@var511 [@expr1073745327 49 ] =@expr1073745328 "std :: queue < void ( * ) ( int ) > func_queue ;" ;
3235: $if $(@expr1073745329 $!@expr1073745330 $assertEquals $(@expr1073745331 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3235 $, expected@var511 $, $tok_ $(@expr1073745332 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3235 $, code@var510 $) $) $) { $return ; }
3236: $if $(@expr1073745333 $!@expr1073745334 $assertEquals $(@expr1073745335 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3236 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3237: }
3238:
3239: {
3240: const char code@var512 [@expr1073745338 64 ] =@expr1073745339 "typedef void (my_func(int*));\nstd::queue<my_func *> func_queue;"
3241: ;
3242:
3243:
3244: const char expected@var513 [@expr1073745340 51 ] =@expr1073745341 "std :: queue < void ( * ) ( int * ) > func_queue ;" ;
3245: $if $(@expr1073745342 $!@expr1073745343 $assertEquals $(@expr1073745344 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3245 $, expected@var513 $, $tok_ $(@expr1073745345 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3245 $, code@var512 $) $) $) { $return ; }
3246: $if $(@expr1073745346 $!@expr1073745347 $assertEquals $(@expr1073745348 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3246 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3247: }
3248:
3249: {
3250: const char code@var514 [@expr1073745351 70 ] =@expr1073745352 "typedef void (my_func(arg_class*));\nstd::queue<my_func *> func_queue;"
3251: ;
3252:
3253:
3254: const char expected@var515 [@expr1073745353 57 ] =@expr1073745354 "std :: queue < void ( * ) ( arg_class * ) > func_queue ;" ;
3255: $if $(@expr1073745355 $!@expr1073745356 $assertEquals $(@expr1073745357 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3255 $, expected@var515 $, $tok_ $(@expr1073745358 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3255 $, code@var514 $) $) $) { $return ; }
3256: $if $(@expr1073745359 $!@expr1073745360 $assertEquals $(@expr1073745361 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3256 $, "" $, errout@var100 .@expr3291 str (@expr3292 ) $) $) { $return ; }
3257: }
3258: }
3259:
3260: void simplifyTypedefFunction2 ( ) {
3261: const char code@var516 [@expr1073745364 39 ] =@expr1073745365 "typedef void voidfn (int);\nvoidfn xxx;"
3262: ;
3263:
3264:
3265: const char expected@var517 [@expr1073745366 19 ] =@expr1073745367 "void xxx ( int ) ;" ;
3266: $if $(@expr1073745368 $!@expr1073745369 $assertEquals $(@expr1073745370 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3266 $, expected@var517 $, $tok_ $(@expr1073745371 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3266 $, code@var516 $) $) $) { $return ; }
3267: }
3268:
3269: void simplifyTypedefFunction3 ( ) {
3270: {
3271: const char code@var518 [@expr1073745372 269 ] =@expr1073745373 "typedef C func1();\ntypedef C (* func2)();\ntypedef C (& func3)();\ntypedef C (C::* func4)();\ntypedef C (C::* func5)() const;\ntypedef C (C::* func6)() volatile;\ntypedef C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
3272:
|
3283:
3284: ;
3285:
3286:
3287: const char expected@var519 [@expr1073745374 113 ] =@expr1073745375 "C f1 ( ) ; C ( * f2 ) ( ) ; C ( & f3 ) ( ) ; C ( * f4 ) ( ) ; C ( * f5 ) ( ) ; C ( * f6 ) ( ) ; C ( * f7 ) ( ) ;"
3288:
|
3292:
3293: ;
3294: $if $(@expr1073745376 $!@expr1073745377 $assertEquals $(@expr1073745378 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3294 $, expected@var519 $, $tok_ $(@expr1073745379 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3294 $, code@var518 , true , Settings ::@expr3556 Native , false $) $) $) { $return ; }
3295: $if $(@expr1073745381 $!@expr1073745382 $assertEquals $(@expr1073745383 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3295 $, "" $, errout@var100 .@expr3560 str (@expr3561 ) $) $) { $return ; }
3296: }
3297:
3298: {
3299: const char code@var520 [@expr1073745386 311 ] =@expr1073745387 "typedef C const func1();\ntypedef C const (* func2)();\ntypedef C const (& func3)();\ntypedef C const (C::* func4)();\ntypedef C const (C::* func5)() const;\ntypedef C const (C::* func6)() volatile;\ntypedef C const (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
3300:
|
3311:
3312: ;
3313:
3314:
3315:
3316: const char expected@var521 [@expr1073745388 155 ] =@expr1073745389 "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;"
3317:
|
3321:
3322: ;
3323: $if $(@expr1073745390 $!@expr1073745391 $assertEquals $(@expr1073745392 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3323 $, expected@var521 $, $tok_ $(@expr1073745393 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3323 $, code@var520 , true , Settings ::@expr3556 Native , false $) $) $) { $return ; }
3324: $if $(@expr1073745395 $!@expr1073745396 $assertEquals $(@expr1073745397 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3324 $, "" $, errout@var100 .@expr3560 str (@expr3561 ) $) $) { $return ; }
3325: }
3326:
3327: {
3328: const char code@var522 [@expr1073745400 311 ] =@expr1073745401 "typedef const C func1();\ntypedef const C (* func2)();\ntypedef const C (& func3)();\ntypedef const C (C::* func4)();\ntypedef const C (C::* func5)() const;\ntypedef const C (C::* func6)() volatile;\ntypedef const C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
3329:
|
3340:
3341: ;
3342:
3343:
3344: const char expected@var523 [@expr1073745402 155 ] =@expr1073745403 "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;"
3345:
|
3349:
3350: ;
3351: $if $(@expr1073745404 $!@expr1073745405 $assertEquals $(@expr1073745406 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3351 $, expected@var523 $, $tok_ $(@expr1073745407 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3351 $, code@var522 , true , Settings ::@expr3556 Native , false $) $) $) { $return ; }
3352: $if $(@expr1073745409 $!@expr1073745410 $assertEquals $(@expr1073745411 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3352 $, "" $, errout@var100 .@expr3560 str (@expr3561 ) $) $) { $return ; }
3353: }
3354:
3355: {
3356: const char code@var524 [@expr1073745414 283 ] =@expr1073745415 "typedef C * func1();\ntypedef C * (* func2)();\ntypedef C * (& func3)();\ntypedef C * (C::* func4)();\ntypedef C * (C::* func5)() const;\ntypedef C * (C::* func6)() volatile;\ntypedef C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
3357:
|
3368:
3369: ;
3370:
3371:
3372: const char expected@var525 [@expr1073745416 127 ] =@expr1073745417 "C * f1 ( ) ; C * ( * f2 ) ( ) ; C * ( & f3 ) ( ) ; C * ( * f4 ) ( ) ; C * ( * f5 ) ( ) ; C * ( * f6 ) ( ) ; C * ( * f7 ) ( ) ;"
3373:
|
3377:
3378: ;
3379: $if $(@expr1073745418 $!@expr1073745419 $assertEquals $(@expr1073745420 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3379 $, expected@var525 $, $tok_ $(@expr1073745421 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3379 $, code@var524 , true , Settings ::@expr3556 Native , false $) $) $) { $return ; }
3380: $if $(@expr1073745423 $!@expr1073745424 $assertEquals $(@expr1073745425 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3380 $, "" $, errout@var100 .@expr3560 str (@expr3561 ) $) $) { $return ; }
3381: }
3382:
3383: {
3384: const char code@var526 [@expr1073745428 325 ] =@expr1073745429 "typedef const C * func1();\ntypedef const C * (* func2)();\ntypedef const C * (& func3)();\ntypedef const C * (C::* func4)();\ntypedef const C * (C::* func5)() const;\ntypedef const C * (C::* func6)() volatile;\ntypedef const C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
3385:
|
3396:
3397: ;
3398:
3399:
3400: const char expected@var527 [@expr1073745430 169 ] =@expr1073745431 "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;"
3401:
|
3405:
3406: ;
3407: $if $(@expr1073745432 $!@expr1073745433 $assertEquals $(@expr1073745434 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3407 $, expected@var527 $, $tok_ $(@expr1073745435 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3407 $, code@var526 , true , Settings ::@expr3556 Native , false $) $) $) { $return ; }
3408: $if $(@expr1073745437 $!@expr1073745438 $assertEquals $(@expr1073745439 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3408 $, "" $, errout@var100 .@expr3560 str (@expr3561 ) $) $) { $return ; }
3409: }
3410:
3411: {
3412: const char code@var528 [@expr1073745442 325 ] =@expr1073745443 "typedef C const * func1();\ntypedef C const * (* func2)();\ntypedef C const * (& func3)();\ntypedef C const * (C::* func4)();\ntypedef C const * (C::* func5)() const;\ntypedef C const * (C::* func6)() volatile;\ntypedef C const * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
3413:
|
3424:
3425: ;
3426:
3427:
3428:
3429: const char expected@var529 [@expr1073745444 169 ] =@expr1073745445 "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;"
3430:
|
3434:
3435: ;
3436: $if $(@expr1073745446 $!@expr1073745447 $assertEquals $(@expr1073745448 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3436 $, expected@var529 $, $tok_ $(@expr1073745449 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3436 $, code@var528 , true , Settings ::@expr3556 Native , false $) $) $) { $return ; }
3437: $if $(@expr1073745451 $!@expr1073745452 $assertEquals $(@expr1073745453 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3437 $, "" $, errout@var100 .@expr3560 str (@expr3561 ) $) $) { $return ; }
3438: }
3439: }
3440:
3441: void simplifyTypedefFunction4 ( ) {
3442: const char code@var530 [@expr1073745456 187 ] =@expr1073745457 "typedef int ( * ( * type1 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * ( type2 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * type3 ( bool ) ) ( int , int ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;"
3443:
|
3446:
3447: ;
3448:
3449:
3450: const char expected@var531 [@expr1073745458 84 ] =@expr1073745459 "int ( * ( * t1 ) ( bool ) ) ( int , int ) ; int * t2 ( bool ) ; int * t3 ( bool ) ;"
3451:
3452: ;
3453: $if $(@expr1073745460 $!@expr1073745461 $assertEquals $(@expr1073745462 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3453 $, expected@var531 $, $tok_ $(@expr1073745463 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3453 $, code@var530 , false $) $) $) { $return ; }
3454: $if $(@expr1073745464 $!@expr1073745465 $assertEquals $(@expr1073745466 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3454 $, "" $, errout@var100 .@expr1073745467 str (@expr1073745468 ) $) $) { $return ; }
3455: }
3456:
3457: void simplifyTypedefFunction5 ( ) {
3458: const char code@var532 [@expr1073745469 703 ] =@expr1073745470 "typedef int ( * type1 ) ( float ) ;\ntypedef int ( * const type2 ) ( float ) ;\ntypedef int ( * volatile type3 ) ( float ) ;\ntypedef int ( * const volatile type4 ) ( float ) ;\ntypedef int ( C :: * type5 ) ( float ) ;\ntypedef int ( C :: * const type6 ) ( float ) ;\ntypedef int ( C :: * volatile type7 ) ( float ) ;\ntypedef int ( C :: * const volatile type8 ) ( float ) ;\ntypedef int ( :: C :: * type9 ) ( float ) ;\ntypedef int ( :: C :: * const type10 ) ( float ) ;\ntypedef int ( :: C :: * volatile type11 ) ( float ) ;\ntypedef int ( :: C :: * const volatile type12 ) ( float ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;\ntype4 t4;\ntype5 t5;\ntype6 t6;\ntype7 t7;\ntype8 t8;\ntype9 t9;\ntype10 t10;\ntype11 t11;\ntype12 t12;"
3459:
|
3480:
3481: ;
3482:
3483:
3484: const char expected@var533 [@expr1073745471 377 ] =@expr1073745472 "int ( * t1 ) ( ) ; int ( * const t2 ) ( ) ; int ( * volatile t3 ) ( ) ; int ( * const volatile t4 ) ( ) ; int ( * t5 ) ( ) ; int ( * const t6 ) ( ) ; int ( * volatile t7 ) ( ) ; int ( * const volatile t8 ) ( ) ; int ( :: C :: * t9 ) ( float ) ; int ( :: C :: * const t10 ) ( float ) ; int ( :: C :: * volatile t11 ) ( float ) ; int ( :: C :: * const volatile t12 ) ( float ) ;"
3485:
|
3494:
3495: ;
3496: $if $(@expr1073745473 $!@expr1073745474 $assertEquals $(@expr1073745475 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3496 $, expected@var533 $, $tok_ $(@expr1073745476 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3496 $, code@var532 , false $) $) $) { $return ; }
3497: $if $(@expr1073745477 $!@expr1073745478 $assertEquals $(@expr1073745479 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3497 $, "" $, errout@var100 .@expr1073745480 str (@expr1073745481 ) $) $) { $return ; }
3498: }
3499:
3500: void simplifyTypedefFunction6 ( ) {
3501: const char code@var534 [@expr1073745482 245 ] =@expr1073745483 "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};\ntestfp Fred::get3() { return 0; }\nvoid ( * Fred::get4 ( ) ) ( ) { return 0 ; }"
3502:
|
3509:
3510: ;
3511:
3512:
3513: const char expected@var535 [@expr1073745484 194 ] =@expr1073745485 "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ; void * Fred :: get3 ( ) { return 0 ; } void * Fred :: get4 ( ) { return 0 ; }"
3514:
|
3520:
3521: ;
3522:
3523: $if $(@expr1073745486 $!@expr1073745487 $assertEquals $(@expr1073745488 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3523 $, expected@var535 $, $tok_ $(@expr1073745489 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3523 $, code@var534 , false $) $) $) { $return ; }
3524: $if $(@expr1073745490 $!@expr1073745491 $assertEquals $(@expr1073745492 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3524 $, "" $, errout@var100 .@expr1073745493 str (@expr1073745494 ) $) $) { $return ; }
3525: }
3526:
3527: void simplifyTypedefFunction7 ( ) {
3528: const char code@var536 [@expr1073745495 132 ] =@expr1073745496 "typedef void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * _func_Tp_SGIAssignableConcept ) () ;_func_Tp_SGIAssignableConcept X;"
3529: ;
3530:
3531:
3532: const char expected@var537 [@expr1073745497 65 ] =@expr1073745498 "void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * X ) ( ) ;" ;
3533:
3534: $if $(@expr1073745499 $!@expr1073745500 $assertEquals $(@expr1073745501 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3534 $, expected@var537 $, $tok_ $(@expr1073745502 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3534 $, code@var536 , false $) $) $) { $return ; }
3535: $if $(@expr1073745503 $!@expr1073745504 $assertEquals $(@expr1073745505 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3535 $, "" $, errout@var100 .@expr1073745506 str (@expr1073745507 ) $) $) { $return ; }
3536: }
3537:
3538: void simplifyTypedefFunction8 ( ) {
3539:
3540: const char code@var538 [@expr1073745508 77 ] =@expr1073745509 "typedef int f_expand(const nrv_byte *);\nvoid f(f_expand *(*get_fexp(int))){}"
3541: ;
3542: $checkSimplifyTypedef_ $(@expr1073745510 code@var538 $, "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3542 $) ;
3543: $todoAssertEquals $(@expr1073745511 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3543 $, "" $, "[test.cpp:2]: (debug) Function::addArguments found argument 'int' with varid 0.\n" $, errout@var100 .@expr1073745512 str (@expr1073745513 ) $) ;
3544: }
3545:
3546: void simplifyTypedefFunction9 ( ) {
3547: {
3548: const char code@var539 [@expr1073745514 190 ] =@expr1073745515 "typedef ::C (::C::* func1)();\ntypedef ::C (::C::* func2)() const;\ntypedef ::C (::C::* func3)() volatile;\ntypedef ::C (::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
3549:
|
3554:
3555: ;
3556:
3557:
3558: const char expected@var540 [@expr1073745516 142 ] =@expr1073745517 ":: C ( :: C :: * f1 ) ( ) ; :: C ( :: C :: * f2 ) ( ) const ; :: C ( :: C :: * f3 ) ( ) volatile ; :: C ( :: C :: * f4 ) ( ) const volatile ;"
3559:
3560:
3561: ;
3562: $if $(@expr1073745518 $!@expr1073745519 $assertEquals $(@expr1073745520 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3562 $, expected@var540 $, $tok_ $(@expr1073745521 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3562 $, code@var539 $) $) $) { $return ; }
3563: $if $(@expr1073745522 $!@expr1073745523 $assertEquals $(@expr1073745524 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3563 $, "" $, errout@var100 .@expr3701 str (@expr3702 ) $) $) { $return ; }
3564: }
3565:
3566: {
3567: const char code@var541 [@expr1073745527 198 ] =@expr1073745528 "typedef B::C (B::C::* func1)();\ntypedef B::C (B::C::* func2)() const;\ntypedef B::C (B::C::* func3)() volatile;\ntypedef B::C (B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
3568:
|
3573:
3574: ;
3575:
3576:
3577: const char expected@var542 [@expr1073745529 88 ] =@expr1073745530 "B :: C ( * f1 ) ( ) ; B :: C ( * f2 ) ( ) ; B :: C ( * f3 ) ( ) ; B :: C ( * f4 ) ( ) ;"
3578:
3579:
3580: ;
3581: $if $(@expr1073745531 $!@expr1073745532 $assertEquals $(@expr1073745533 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3581 $, expected@var542 $, $tok_ $(@expr1073745534 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3581 $, code@var541 , true , Settings ::@expr3711 Native , false $) $) $) { $return ; }
3582: $if $(@expr1073745536 $!@expr1073745537 $assertEquals $(@expr1073745538 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3582 $, "" $, errout@var100 .@expr3701 str (@expr3702 ) $) $) { $return ; }
3583: }
3584:
3585: {
3586: const char code@var543 [@expr1073745541 214 ] =@expr1073745542 "typedef ::B::C (::B::C::* func1)();\ntypedef ::B::C (::B::C::* func2)() const;\ntypedef ::B::C (::B::C::* func3)() volatile;\ntypedef ::B::C (::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
3587:
|
3592:
3593: ;
3594:
3595:
3596: const char expected@var544 [@expr1073745543 182 ] =@expr1073745544 ":: B :: C ( :: B :: C :: * f1 ) ( ) ; :: B :: C ( :: B :: C :: * f2 ) ( ) const ; :: B :: C ( :: B :: C :: * f3 ) ( ) volatile ; :: B :: C ( :: B :: C :: * f4 ) ( ) const volatile ;"
3597:
3598:
3599: ;
3600: $if $(@expr1073745545 $!@expr1073745546 $assertEquals $(@expr1073745547 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3600 $, expected@var544 $, $tok_ $(@expr1073745548 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3600 $, code@var543 $) $) $) { $return ; }
3601: $if $(@expr1073745549 $!@expr1073745550 $assertEquals $(@expr1073745551 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3601 $, "" $, errout@var100 .@expr3701 str (@expr3702 ) $) $) { $return ; }
3602: }
3603:
3604: {
3605: const char code@var545 [@expr1073745554 222 ] =@expr1073745555 "typedef A::B::C (A::B::C::* func1)();\ntypedef A::B::C (A::B::C::* func2)() const;\ntypedef A::B::C (A::B::C::* func3)() volatile;\ntypedef A::B::C (A::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
3606:
|
3611:
3612: ;
3613:
3614:
3615: const char expected@var546 [@expr1073745556 108 ] =@expr1073745557 "A :: B :: C ( * f1 ) ( ) ; A :: B :: C ( * f2 ) ( ) ; A :: B :: C ( * f3 ) ( ) ; A :: B :: C ( * f4 ) ( ) ;"
3616:
3617:
3618: ;
3619: $if $(@expr1073745558 $!@expr1073745559 $assertEquals $(@expr1073745560 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3619 $, expected@var546 $, $tok_ $(@expr1073745561 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3619 $, code@var545 , true , Settings ::@expr3711 Native , false $) $) $) { $return ; }
3620: $if $(@expr1073745563 $!@expr1073745564 $assertEquals $(@expr1073745565 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3620 $, "" $, errout@var100 .@expr3701 str (@expr3702 ) $) $) { $return ; }
3621: }
3622: }
3623:
3624: void simplifyTypedefFunction10 ( ) {
3625: const char code@var547 [@expr1073745568 262 ] =@expr1073745569 "enum Format_E1 { FORMAT11, FORMAT12 } Format_T1;\nnamespace MySpace {\n   enum Format_E2 { FORMAT21, FORMAT22 } Format_T2;\n}\ntypedef Format_E1 (**PtrToFunPtr_Type1)();\ntypedef MySpace::Format_E2 (**PtrToFunPtr_Type2)();\nPtrToFunPtr_Type1 t1;\nPtrToFunPtr_Type2 t2;"
3626:
|
3631:
3632: ;
3633: $if $(@expr1073745570 $!@expr1073745571 $assertEquals $(@expr1073745572 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3633 $, "enum Format_E1 { FORMAT11 , FORMAT12 } ; enum Format_E1 Format_T1 ; namespace MySpace { enum Format_E2 { FORMAT21 , FORMAT22 } ; enum Format_E2 Format_T2 ; } Format_E1 ( * * t1 ) ( ) ; MySpace :: Format_E2 ( * * t2 ) ( ) ;" $, $tok_ $(@expr1073745573 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3633 $, code@var547 , false $) $) $) { $return
3634:
|
3638:
3639: ; }
3640: }
3641:
3642: void simplifyTypedefShadow ( ) {
3643: const char code@var548 [@expr1073745574 62 ] =@expr1073745575 "typedef struct { int x; } xyz;;\nvoid f(){\n    int abc, xyz;\n}"
3644:
3645:
3646: ;
3647: $if $(@expr1073745576 $!@expr1073745577 $assertEquals $(@expr1073745578 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3647 $, "struct xyz { int x ; } ; void f ( ) { int abc ; int xyz ; }" $, $tok_ $(@expr1073745579 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3647 $, code@var548 , false $) $) $) { $return
3648: ; }
3649: }
3650:
3651: void simplifyTypedefMacro ( ) {
3652: const char code@var549 [@expr1073745580 136 ] =@expr1073745581 "typedef uint32_t index_t;\n\n#define NO_SEGMENT     ((index_t)12)\n\nvoid foo(index_t prev_segment) {\n    if(prev_segment==NO_SEGMENT) {}\n}"
3653:
|
3657:
3658: ;
3659: $if $(@expr1073745582 $!@expr1073745583 $assertEquals $(@expr1073745584 "cppcheck-2.8/test/testsimplifytypedef.cpp" $, 3659 $, "void foo ( uint32_t prev_segment ) { if ( prev_segment == ( ( uint32_t ) 12 ) ) { } }" $, simplifyTypedefP (@expr1073745585 code@var549 ) $) $) { $return
3660: ; }
3661: }
3662: } ;
3663:
3664: $namespace ${ TestSimplifyTypedef instance_TestSimplifyTypedef@var550 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@231}
  v {!<=-1,!>=2,0@231}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 39
  "TestSimplifyTypedef" always "TestSimplifyTypedef"
Line 52
  = always 1
  true always 1
Line 53
  = always 1
  true always 1
Line 54
  = always 1
  true always 1
Line 56
  ( always {!<=-1,!>=2}
  "simplifyTypedef1" always "simplifyTypedef1"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "simplifyTypedef2" always "simplifyTypedef2"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "simplifyTypedef3" always "simplifyTypedef3"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "simplifyTypedef4" always "simplifyTypedef4"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "simplifyTypedef5" always "simplifyTypedef5"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "simplifyTypedef6" always "simplifyTypedef6"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "simplifyTypedef7" always "simplifyTypedef7"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "simplifyTypedef8" always "simplifyTypedef8"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "simplifyTypedef9" always "simplifyTypedef9"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "simplifyTypedef10" always "simplifyTypedef10"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "simplifyTypedef11" always "simplifyTypedef11"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "simplifyTypedef12" always "simplifyTypedef12"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "simplifyTypedef13" always "simplifyTypedef13"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "simplifyTypedef14" always "simplifyTypedef14"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "simplifyTypedef15" always "simplifyTypedef15"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "simplifyTypedef16" always "simplifyTypedef16"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "simplifyTypedef17" always "simplifyTypedef17"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "simplifyTypedef18" always "simplifyTypedef18"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "simplifyTypedef19" always "simplifyTypedef19"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "simplifyTypedef20" always "simplifyTypedef20"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "simplifyTypedef21" always "simplifyTypedef21"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "simplifyTypedef22" always "simplifyTypedef22"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "simplifyTypedef23" always "simplifyTypedef23"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "simplifyTypedef24" always "simplifyTypedef24"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "simplifyTypedef25" always "simplifyTypedef25"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "simplifyTypedef26" always "simplifyTypedef26"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "simplifyTypedef27" always "simplifyTypedef27"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "simplifyTypedef28" always "simplifyTypedef28"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "simplifyTypedef29" always "simplifyTypedef29"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "simplifyTypedef30" always "simplifyTypedef30"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "simplifyTypedef31" always "simplifyTypedef31"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "simplifyTypedef32" always "simplifyTypedef32"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "simplifyTypedef33" always "simplifyTypedef33"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "simplifyTypedef34" always "simplifyTypedef34"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "simplifyTypedef35" always "simplifyTypedef35"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "simplifyTypedef36" always "simplifyTypedef36"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "simplifyTypedef37" always "simplifyTypedef37"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "simplifyTypedef38" always "simplifyTypedef38"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "simplifyTypedef43" always "simplifyTypedef43"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "simplifyTypedef44" always "simplifyTypedef44"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "simplifyTypedef45" always "simplifyTypedef45"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "simplifyTypedef46" always "simplifyTypedef46"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "simplifyTypedef47" always "simplifyTypedef47"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "simplifyTypedef48" always "simplifyTypedef48"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "simplifyTypedef49" always "simplifyTypedef49"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "simplifyTypedef50" always "simplifyTypedef50"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "simplifyTypedef51" always "simplifyTypedef51"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "simplifyTypedef52" always "simplifyTypedef52"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "simplifyTypedef54" always "simplifyTypedef54"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "simplifyTypedef55" always "simplifyTypedef55"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "simplifyTypedef56" always "simplifyTypedef56"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "simplifyTypedef57" always "simplifyTypedef57"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "simplifyTypedef58" always "simplifyTypedef58"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "simplifyTypedef59" always "simplifyTypedef59"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "simplifyTypedef60" always "simplifyTypedef60"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "simplifyTypedef61" always "simplifyTypedef61"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "simplifyTypedef62" always "simplifyTypedef62"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "simplifyTypedef63" always "simplifyTypedef63"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "simplifyTypedef64" always "simplifyTypedef64"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "simplifyTypedef65" always "simplifyTypedef65"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "simplifyTypedef66" always "simplifyTypedef66"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "simplifyTypedef67" always "simplifyTypedef67"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "simplifyTypedef68" always "simplifyTypedef68"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "simplifyTypedef69" always "simplifyTypedef69"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "simplifyTypedef70" always "simplifyTypedef70"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "simplifyTypedef71" always "simplifyTypedef71"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "simplifyTypedef72" always "simplifyTypedef72"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "simplifyTypedef73" always "simplifyTypedef73"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "simplifyTypedef74" always "simplifyTypedef74"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "simplifyTypedef75" always "simplifyTypedef75"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "simplifyTypedef76" always "simplifyTypedef76"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "simplifyTypedef77" always "simplifyTypedef77"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "simplifyTypedef78" always "simplifyTypedef78"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "simplifyTypedef79" always "simplifyTypedef79"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "simplifyTypedef80" always "simplifyTypedef80"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "simplifyTypedef81" always "simplifyTypedef81"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "simplifyTypedef82" always "simplifyTypedef82"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "simplifyTypedef83" always "simplifyTypedef83"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "simplifyTypedef84" always "simplifyTypedef84"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "simplifyTypedef85" always "simplifyTypedef85"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "simplifyTypedef86" always "simplifyTypedef86"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "simplifyTypedef87" always "simplifyTypedef87"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "simplifyTypedef88" always "simplifyTypedef88"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "simplifyTypedef89" always "simplifyTypedef89"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "simplifyTypedef90" always "simplifyTypedef90"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "simplifyTypedef91" always "simplifyTypedef91"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "simplifyTypedef92" always "simplifyTypedef92"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "simplifyTypedef93" always "simplifyTypedef93"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "simplifyTypedef94" always "simplifyTypedef94"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "simplifyTypedef95" always "simplifyTypedef95"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "simplifyTypedef96" always "simplifyTypedef96"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "simplifyTypedef97" always "simplifyTypedef97"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "simplifyTypedef99" always "simplifyTypedef99"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "simplifyTypedef100" always "simplifyTypedef100"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "simplifyTypedef101" always "simplifyTypedef101"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "simplifyTypedef102" always "simplifyTypedef102"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "simplifyTypedef103" always "simplifyTypedef103"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "simplifyTypedef104" always "simplifyTypedef104"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "simplifyTypedef105" always "simplifyTypedef105"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "simplifyTypedef106" always "simplifyTypedef106"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "simplifyTypedef107" always "simplifyTypedef107"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "simplifyTypedef108" always "simplifyTypedef108"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "simplifyTypedef109" always "simplifyTypedef109"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "simplifyTypedef110" always "simplifyTypedef110"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "simplifyTypedef111" always "simplifyTypedef111"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "simplifyTypedef112" always "simplifyTypedef112"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "simplifyTypedef113" always "simplifyTypedef113"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "simplifyTypedef114" always "simplifyTypedef114"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "simplifyTypedef115" always "simplifyTypedef115"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "simplifyTypedef116" always "simplifyTypedef116"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "simplifyTypedef117" always "simplifyTypedef117"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "simplifyTypedef118" always "simplifyTypedef118"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "simplifyTypedef119" always "simplifyTypedef119"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "simplifyTypedef120" always "simplifyTypedef120"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "simplifyTypedef121" always "simplifyTypedef121"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "simplifyTypedef122" always "simplifyTypedef122"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "simplifyTypedef123" always "simplifyTypedef123"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "simplifyTypedef124" always "simplifyTypedef124"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "simplifyTypedef125" always "simplifyTypedef125"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "simplifyTypedef126" always "simplifyTypedef126"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "simplifyTypedef127" always "simplifyTypedef127"
  false always 0
  false always 0
Line 177
  ( always {!<=-1,!>=2}
  "simplifyTypedef128" always "simplifyTypedef128"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "simplifyTypedef129" always "simplifyTypedef129"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "simplifyTypedef130" always "simplifyTypedef130"
  false always 0
  false always 0
Line 180
  ( always {!<=-1,!>=2}
  "simplifyTypedef131" always "simplifyTypedef131"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "simplifyTypedef132" always "simplifyTypedef132"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "simplifyTypedef133" always "simplifyTypedef133"
  false always 0
  false always 0
Line 183
  ( always {!<=-1,!>=2}
  "simplifyTypedef134" always "simplifyTypedef134"
  false always 0
  false always 0
Line 184
  ( always {!<=-1,!>=2}
  "simplifyTypedef135" always "simplifyTypedef135"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "simplifyTypedef136" always "simplifyTypedef136"
  false always 0
  false always 0
Line 186
  ( always {!<=-1,!>=2}
  "simplifyTypedef137" always "simplifyTypedef137"
  false always 0
  false always 0
Line 187
  ( always {!<=-1,!>=2}
  "simplifyTypedef138" always "simplifyTypedef138"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "simplifyTypedef139" always "simplifyTypedef139"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "simplifyTypedef140" always "simplifyTypedef140"
  false always 0
  false always 0
Line 190
  ( always {!<=-1,!>=2}
  "simplifyTypedef141" always "simplifyTypedef141"
  false always 0
  false always 0
Line 192
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction1" always "simplifyTypedefFunction1"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction2" always "simplifyTypedefFunction2"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction3" always "simplifyTypedefFunction3"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction4" always "simplifyTypedefFunction4"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction5" always "simplifyTypedefFunction5"
  false always 0
  false always 0
Line 197
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction6" always "simplifyTypedefFunction6"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction7" always "simplifyTypedefFunction7"
  false always 0
  false always 0
Line 199
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction8" always "simplifyTypedefFunction8"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction9" always "simplifyTypedefFunction9"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "simplifyTypedefFunction10" always "simplifyTypedefFunction10"
  false always 0
  false always 0
Line 203
  ( always {!<=-1,!>=2}
  "simplifyTypedefShadow" always "simplifyTypedefShadow"
  false always 0
  false always 0
Line 205
  ( always {!<=-1,!>=2}
  "simplifyTypedefMacro" always "simplifyTypedefMacro"
  false always 0
  false always 0
Line 209
  , always 1
  simplify always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 1
  debugwarnings always {!<=-1,!>=2}
  = always 1
  true always 1
Line 210
  "" always ""
Line 213
  = {!<=-1,!>=2,0@5,1@45}
  debugwarnings {!<=-1,!>=2,0@5,1@45}
Line 215
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 217
  code possible {"typedef struct { int x; } xyz;;\nvoid f(){\n    int abc, xyz;\n}"@2,"enum Format_E1 { FORMAT11, FORMAT12 } Format_T1;\nnamespace MySpace {\n   enum Format_E2 { FORMAT21, FORMAT22 } Format_T2;\n}\ntypedef Format_E1 (**PtrToFunPtr_Type1)();\ntypedef MySpace::Format_E2 (**PtrToFunPtr_Type2)();\nPtrToFunPtr_Type1 t1;\nPtrToFunPtr_Type2 t2;"@3,"typedef ::C (::C::* func1)();\ntypedef ::C (::C::* func2)() const;\ntypedef ::C (::C::* func3)() volatile;\ntypedef ::C (::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"@4,"typedef B::C (B::C::* func1)();\ntypedef B::C (B::C::* func2)() const;\ntypedef B::C (B::C::* func3)() volatile;\ntypedef B::C (B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"@5,"typedef ::B::C (::B::C::* func1)();\ntypedef ::B::C (::B::C::* func2)() const;\ntypedef ::B::C (::B::C::* func3)() volatile;\ntypedef ::B::C (::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"@6,"typedef A::B::C (A::B::C::* func1)();\ntypedef A::B::C (A::B::C::* func2)() const;\ntypedef A::B::C (A::B::C::* func3)() volatile;\ntypedef A::B::C (A::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"@7,"typedef void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * _func_Tp_SGIAssignableConcept ) () ;_func_Tp_SGIAssignableConcept X;"@9,"typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};\ntestfp Fred::get3() { return 0; }\nvoid ( * Fred::get4 ( ) ) ( ) { return 0 ; }"@10,"typedef int ( * type1 ) ( float ) ;\ntypedef int ( * const type2 ) ( float ) ;\ntypedef int ( * volatile type3 ) ( float ) ;\ntypedef int ( * const volatile type4 ) ( float ) ;\ntypedef int ( C :: * type5 ) ( float ) ;\ntypedef int ( C :: * const type6 ) ( float ) ;\ntypedef int ( C :: * volatile type7 ) ( float ) ;\ntypedef int ( C :: * const volatile type8 ) ( float ) ;\ntypedef int ( :: C :: * type9 ) ( float ) ;\ntypedef int ( :: C :: * const type10 ) ( float ) ;\ntypedef int ( :: C :: * volatile type11 ) ( float ) ;\ntypedef int ( :: C :: * const volatile type12 ) ( float ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;\ntype4 t4;\ntype5 t5;\ntype6 t6;\ntype7 t7;\ntype8 t8;\ntype9 t9;\ntype10 t10;\ntype11 t11;\ntype12 t12;"@11,"typedef int ( * ( * type1 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * ( type2 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * type3 ( bool ) ) ( int , int ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;"@12}
Line 218
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytypedef.cpp"@2,"cppcheck-2.8/test/testsimplifytypedef.cpp"@3,"cppcheck-2.8/test/testsimplifytypedef.cpp"@4,"cppcheck-2.8/test/testsimplifytypedef.cpp"@5,"cppcheck-2.8/test/testsimplifytypedef.cpp"@6,"cppcheck-2.8/test/testsimplifytypedef.cpp"@7,"cppcheck-2.8/test/testsimplifytypedef.cpp"@9,"cppcheck-2.8/test/testsimplifytypedef.cpp"@10,"cppcheck-2.8/test/testsimplifytypedef.cpp"@11,"cppcheck-2.8/test/testsimplifytypedef.cpp"@12}
  line inconclusive {3647@2,3633@3,3562@4,3581@5,3600@6,3619@7,3534@9,3523@10,3496@11,3453@12}
  "test.cpp" always "test.cpp"
Line 220
  nullptr always 0
  ! {!<=-1,!>=2,1@2,0@5}
  simplify {!<=-1,!>=2,0@2,1@5}
Line 224
  "" always ""
Line 226
  & {lifetime[Address]=(settings1),!0}
  this always !0
Line 228
  code possible {"typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (struct vfs_class *me, fill_names_f);\n}"@197,"typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (fill_names_f, struct vfs_class *me);\n}"@198,"typedef void (* PF)();\ntypedef void * (* PFV)(void *);\nPF pf;\nPFV pfv;"@207}
Line 233
  nullptr always 0
  false always 0
Line 239
  "" always ""
Line 242
  1 always 1
  "test.cpp" always "test.cpp"
Line 243
  code possible "typedef uint32_t index_t;\n\n#define NO_SEGMENT     ((index_t)12)\n\nvoid foo(index_t prev_segment) {\n    if(prev_segment==NO_SEGMENT) {}\n}"@1
Line 244
  files always size=1
  0 always 0
Line 249
  filedata always size=0
Line 252
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 257
  nullptr always 0
  false always 0
Line 262
  "" always ""
Line 265
  = always 1
  true always 1
Line 266
  & {lifetime[Address]=(settings2),!0}
  this always !0
Line 267
  code possible {"typedef int f_expand(const nrv_byte *);\nvoid f(f_expand *(*get_fexp(int))){}"@8,"typedef long unsigned int size_t;\ntypedef size_t (my_func)(char *, size_t, size_t, void *);"@67,"typedef long unsigned int uint32_t;\ntypedef uint32_t (my_func)(char *, uint32_t, uint32_t, void *);"@68,"typedef y x () x"@118,"typedef struct template <>"@119,"typedef ::<>"@120,"class A {\npublic:\n  typedef int F(int idx);\n};\nclass B {\npublic:\n  A::F ** f;\n};\nint main()\n{\n  B * b = new B;\n  b->f = new A::F * [ 10 ];\n}"@122,"typedef\n"@123,"typedef constexpr\n"@124,"typedef       unsigned char   (*Mf_GetIndexByte_Func)          (void);\ntypedef const unsigned char * (*Mf_GetPointerToCurrentPos_Func)(void);"@151}
Line 268
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsimplifytypedef.cpp"@8,"cppcheck-2.8/test/testsimplifytypedef.cpp"@67,"cppcheck-2.8/test/testsimplifytypedef.cpp"@68,"cppcheck-2.8/test/testsimplifytypedef.cpp"@118,"cppcheck-2.8/test/testsimplifytypedef.cpp"@119,"cppcheck-2.8/test/testsimplifytypedef.cpp"@120,"cppcheck-2.8/test/testsimplifytypedef.cpp"@122,"cppcheck-2.8/test/testsimplifytypedef.cpp"@123,"cppcheck-2.8/test/testsimplifytypedef.cpp"@124,"cppcheck-2.8/test/testsimplifytypedef.cpp"@151}
  line inconclusive {3542@8,2550@67,2557@68,1933@118,1936@119,1939@120,1905@122,1899@123,1901@124,1611@151}
  "test.cpp" always "test.cpp"
Line 274
  145 always 145
  = always "class A\n{\npublic:\n typedef wchar_t duplicate;\n void foo() {}\n};\ntypedef A duplicate;\nint main()\n{\n duplicate a;\n a.foo();\n A::duplicate c = 0;\n}"
  "class A\n{\npublic:\n typedef wchar_t duplicate;\n void foo() {}\n};\ntypedef A duplicate;\nint main()\n{\n duplicate a;\n a.foo();\n A::duplicate c = 0;\n}" always "class A\n{\npublic:\n typedef wchar_t duplicate;\n void foo() {}\n};\ntypedef A duplicate;\nint main()\n{\n duplicate a;\n a.foo();\n A::duplicate c = 0;\n}"
Line 288
  96 always 96
  = always "class A { public: void foo ( ) { } } ; int main ( ) { A a ; a . foo ( ) ; wchar_t c ; c = 0 ; }"
Line 289
  "class A { public: void foo ( ) { } } ; int main ( ) { A a ; a . foo ( ) ; wchar_t c ; c = 0 ; }" always "class A { public: void foo ( ) { } } ; int main ( ) { A a ; a . foo ( ) ; wchar_t c ; c = 0 ; }"
Line 301
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  301 always 301
  expected always "class A { public: void foo ( ) { } } ; int main ( ) { A a ; a . foo ( ) ; wchar_t c ; c = 0 ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  301 always 301
  code always "class A\n{\npublic:\n typedef wchar_t duplicate;\n void foo() {}\n};\ntypedef A duplicate;\nint main()\n{\n duplicate a;\n a.foo();\n A::duplicate c = 0;\n}"
  false always 0
Line 305
  119 always 119
  = always "class A;\ntypedef A duplicate;\nclass A\n{\npublic:\ntypedef wchar_t duplicate;\nduplicate foo() { wchar_t b; return b; }\n};"
  "class A;\ntypedef A duplicate;\nclass A\n{\npublic:\ntypedef wchar_t duplicate;\nduplicate foo() { wchar_t b; return b; }\n};" always "class A;\ntypedef A duplicate;\nclass A\n{\npublic:\ntypedef wchar_t duplicate;\nduplicate foo() { wchar_t b; return b; }\n};"
Line 314
  75 always 75
  = always "class A ; class A { public: wchar_t foo ( ) { wchar_t b ; return b ; } } ;"
Line 315
  "class A ; class A { public: wchar_t foo ( ) { wchar_t b ; return b ; } } ;" always "class A ; class A { public: wchar_t foo ( ) { wchar_t b ; return b ; } } ;"
Line 322
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  322 always 322
  expected always "class A ; class A { public: wchar_t foo ( ) { wchar_t b ; return b ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  322 always 322
  code always "class A;\ntypedef A duplicate;\nclass A\n{\npublic:\ntypedef wchar_t duplicate;\nduplicate foo() { wchar_t b; return b; }\n};"
Line 326
  129 always 129
  = always "class A {};\ntypedef A duplicate;\nwchar_t foo()\n{\ntypedef wchar_t duplicate;\nduplicate b;\nreturn b;\n}\nint main()\n{\nduplicate b;\n}"
  "class A {};\ntypedef A duplicate;\nwchar_t foo()\n{\ntypedef wchar_t duplicate;\nduplicate b;\nreturn b;\n}\nint main()\n{\nduplicate b;\n}" always "class A {};\ntypedef A duplicate;\nwchar_t foo()\n{\ntypedef wchar_t duplicate;\nduplicate b;\nreturn b;\n}\nint main()\n{\nduplicate b;\n}"
Line 339
  80 always 80
  = always "class A { } ; wchar_t foo ( ) { wchar_t b ; return b ; } int main ( ) { A b ; }"
Line 340
  "class A { } ; wchar_t foo ( ) { wchar_t b ; return b ; } int main ( ) { A b ; }" always "class A { } ; wchar_t foo ( ) { wchar_t b ; return b ; } int main ( ) { A b ; }"
Line 351
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  351 always 351
  expected always "class A { } ; wchar_t foo ( ) { wchar_t b ; return b ; } int main ( ) { A b ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  351 always 351
  code always "class A {};\ntypedef A duplicate;\nwchar_t foo()\n{\ntypedef wchar_t duplicate;\nduplicate b;\nreturn b;\n}\nint main()\n{\nduplicate b;\n}"
Line 355
  117 always 117
  = always "typedef int s32;\ntypedef unsigned int u32;\nvoid f()\n{\n    s32 ivar = -2;\n    u32 uvar = 2;\n    return uvar / ivar;\n}"
  "typedef int s32;\ntypedef unsigned int u32;\nvoid f()\n{\n    s32 ivar = -2;\n    u32 uvar = 2;\n    return uvar / ivar;\n}" always "typedef int s32;\ntypedef unsigned int u32;\nvoid f()\n{\n    s32 ivar = -2;\n    u32 uvar = 2;\n    return uvar / ivar;\n}"
Line 364
  90 always 90
  = always "void f ( ) { int ivar ; ivar = -2 ; unsigned int uvar ; uvar = 2 ; return uvar / ivar ; }"
Line 365
  "void f ( ) { int ivar ; ivar = -2 ; unsigned int uvar ; uvar = 2 ; return uvar / ivar ; }" always "void f ( ) { int ivar ; ivar = -2 ; unsigned int uvar ; uvar = 2 ; return uvar / ivar ; }"
Line 371
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  371 always 371
  expected always "void f ( ) { int ivar ; ivar = -2 ; unsigned int uvar ; uvar = 2 ; return uvar / ivar ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  371 always 371
  code always "typedef int s32;\ntypedef unsigned int u32;\nvoid f()\n{\n    s32 ivar = -2;\n    u32 uvar = 2;\n    return uvar / ivar;\n}"
  false always 0
Line 376
  89 always 89
  = always "typedef struct yy_buffer_state *YY_BUFFER_STATE;\nvoid f()\n{\n    YY_BUFFER_STATE state;\n}"
Line 377
  "typedef struct yy_buffer_state *YY_BUFFER_STATE;\nvoid f()\n{\n    YY_BUFFER_STATE state;\n}" always "typedef struct yy_buffer_state *YY_BUFFER_STATE;\nvoid f()\n{\n    YY_BUFFER_STATE state;\n}"
Line 383
  48 always 48
  = always "void f ( ) { struct yy_buffer_state * state ; }"
Line 384
  "void f ( ) { struct yy_buffer_state * state ; }" always "void f ( ) { struct yy_buffer_state * state ; }"
Line 389
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  389 always 389
  expected always "void f ( ) { struct yy_buffer_state * state ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  389 always 389
  code always "typedef struct yy_buffer_state *YY_BUFFER_STATE;\nvoid f()\n{\n    YY_BUFFER_STATE state;\n}"
  false always 0
Line 394
  111 always 111
  = always "namespace VL {\n    typedef float float_t ;\n    inline VL::float_t fast_atan2(VL::float_t y, VL::float_t x){}\n}"
Line 395
  "namespace VL {\n    typedef float float_t ;\n    inline VL::float_t fast_atan2(VL::float_t y, VL::float_t x){}\n}" always "namespace VL {\n    typedef float float_t ;\n    inline VL::float_t fast_atan2(VL::float_t y, VL::float_t x){}\n}"
Line 400
  60 always 60
  = always "namespace VL { float fast_atan2 ( float y , float x ) { } }"
Line 401
  "namespace VL { float fast_atan2 ( float y , float x ) { } }" always "namespace VL { float fast_atan2 ( float y , float x ) { } }"
Line 406
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  406 always 406
  expected always "namespace VL { float fast_atan2 ( float y , float x ) { } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  406 always 406
  code always "namespace VL {\n    typedef float float_t ;\n    inline VL::float_t fast_atan2(VL::float_t y, VL::float_t x){}\n}"
  false always 0
Line 410
  34 always 34
  = always "typedef int abc ; Fred :: abc f ;"
  "typedef int abc ; Fred :: abc f ;" always "typedef int abc ; Fred :: abc f ;"
Line 412
  16 always 16
  = always "Fred :: abc f ;"
  "Fred :: abc f ;" always "Fred :: abc f ;"
Line 413
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  413 always 413
  expected always "Fred :: abc f ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  413 always 413
  code always "typedef int abc ; Fred :: abc f ;"
  false always 0
Line 417
  296 always 296
  = always "typedef int INT;\ntypedef unsigned int UINT;\ntypedef int * PINT;\ntypedef unsigned int * PUINT;\ntypedef int & RINT;\ntypedef unsigned int & RUINT;\ntypedef const int & RCINT;\ntypedef const unsigned int & RCUINT;\nINT ti;\nUINT tui;\nPINT tpi;\nPUINT tpui;\nRINT tri;\nRUINT trui;\nRCINT trci;\nRCUINT trcui;"
  "typedef int INT;\ntypedef unsigned int UINT;\ntypedef int * PINT;\ntypedef unsigned int * PUINT;\ntypedef int & RINT;\ntypedef unsigned int & RUINT;\ntypedef const int & RCINT;\ntypedef const unsigned int & RCUINT;\nINT ti;\nUINT tui;\nPINT tpi;\nPUINT tpui;\nRINT tri;\nRUINT trui;\nRCINT trci;\nRCUINT trcui;" always "typedef int INT;\ntypedef unsigned int UINT;\ntypedef int * PINT;\ntypedef unsigned int * PUINT;\ntypedef int & RINT;\ntypedef unsigned int & RUINT;\ntypedef const int & RCINT;\ntypedef const unsigned int & RCUINT;\nINT ti;\nUINT tui;\nPINT tpi;\nPUINT tpui;\nRINT tri;\nRUINT trui;\nRCINT trci;\nRCUINT trcui;"
Line 434
  144 always 144
  = always "int ti ; unsigned int tui ; int * tpi ; unsigned int * tpui ; int & tri ; unsigned int & trui ; const int & trci ; const unsigned int & trcui ;"
Line 435
  "int ti ; unsigned int tui ; int * tpi ; unsigned int * tpui ; int & tri ; unsigned int & trui ; const int & trci ; const unsigned int & trcui ;" always "int ti ; unsigned int tui ; int * tpi ; unsigned int * tpui ; int & tri ; unsigned int & trui ; const int & trci ; const unsigned int & trcui ;"
Line 444
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  444 always 444
  expected always "int ti ; unsigned int tui ; int * tpi ; unsigned int * tpui ; int & tri ; unsigned int & trui ; const int & trci ; const unsigned int & trcui ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  444 always 444
  code always "typedef int INT;\ntypedef unsigned int UINT;\ntypedef int * PINT;\ntypedef unsigned int * PUINT;\ntypedef int & RINT;\ntypedef unsigned int & RUINT;\ntypedef const int & RCINT;\ntypedef const unsigned int & RCUINT;\nINT ti;\nUINT tui;\nPINT tpi;\nPUINT tpui;\nRINT tri;\nRUINT trui;\nRCINT trci;\nRCUINT trcui;"
  false always 0
Line 448
  156 always 156
  = always "typedef struct s S, * PS;\ntypedef struct t { int a; } T, *TP;\ntypedef struct { int a; } U;\ntypedef struct { int a; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;"
  "typedef struct s S, * PS;\ntypedef struct t { int a; } T, *TP;\ntypedef struct { int a; } U;\ntypedef struct { int a; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;" always "typedef struct s S, * PS;\ntypedef struct t { int a; } T, *TP;\ntypedef struct { int a; } U;\ntypedef struct { int a; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;"
Line 459
  169 always 169
  = always "struct t { int a ; } ; struct U { int a ; } ; struct Unnamed0 { int a ; } ; struct s s ; struct s * ps ; struct t t ; struct t * tp ; struct U u ; struct Unnamed0 * v ;"
Line 460
  "struct t { int a ; } ; struct U { int a ; } ; struct Unnamed0 { int a ; } ; struct s s ; struct s * ps ; struct t t ; struct t * tp ; struct U u ; struct Unnamed0 * v ;" always "struct t { int a ; } ; struct U { int a ; } ; struct Unnamed0 { int a ; } ; struct s s ; struct s * ps ; struct t t ; struct t * tp ; struct U u ; struct Unnamed0 * v ;"
Line 470
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  470 always 470
  expected always "struct t { int a ; } ; struct U { int a ; } ; struct Unnamed0 { int a ; } ; struct s s ; struct s * ps ; struct t t ; struct t * tp ; struct U u ; struct Unnamed0 * v ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  470 always 470
  code always "typedef struct s S, * PS;\ntypedef struct t { int a; } T, *TP;\ntypedef struct { int a; } U;\ntypedef struct { int a; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;"
  false always 0
Line 474
  180 always 180
  = always "typedef union s S, * PS;\ntypedef union t { int a; float b ; } T, *TP;\ntypedef union { int a; float b; } U;\ntypedef union { int a; float b; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;"
  "typedef union s S, * PS;\ntypedef union t { int a; float b ; } T, *TP;\ntypedef union { int a; float b; } U;\ntypedef union { int a; float b; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;" always "typedef union s S, * PS;\ntypedef union t { int a; float b ; } T, *TP;\ntypedef union { int a; float b; } U;\ntypedef union { int a; float b; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;"
Line 485
  190 always 190
  = always "union t { int a ; float b ; } ; union U { int a ; float b ; } ; union Unnamed0 { int a ; float b ; } ; union s s ; union s * ps ; union t t ; union t * tp ; union U u ; union Unnamed0 * v ;"
Line 486
  "union t { int a ; float b ; } ; union U { int a ; float b ; } ; union Unnamed0 { int a ; float b ; } ; union s s ; union s * ps ; union t t ; union t * tp ; union U u ; union Unnamed0 * v ;" always "union t { int a ; float b ; } ; union U { int a ; float b ; } ; union Unnamed0 { int a ; float b ; } ; union s s ; union s * ps ; union t t ; union t * tp ; union U u ; union Unnamed0 * v ;"
Line 496
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  496 always 496
  expected always "union t { int a ; float b ; } ; union U { int a ; float b ; } ; union Unnamed0 { int a ; float b ; } ; union s s ; union s * ps ; union t t ; union t * tp ; union U u ; union Unnamed0 * v ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  496 always 496
  code always "typedef union s S, * PS;\ntypedef union t { int a; float b ; } T, *TP;\ntypedef union { int a; float b; } U;\ntypedef union { int a; float b; } * V;\nS s;\nPS ps;\nT t;\nTP tp;\nU u;\nV v;"
  false always 0
Line 500
  108 always 108
  = always "typedef enum { a = 0 , b = 1 , c = 2 } abc;\ntypedef enum xyz { x = 0 , y = 1 , z = 2 } XYZ;\nabc e1;\nXYZ e2;"
  "typedef enum { a = 0 , b = 1 , c = 2 } abc;\ntypedef enum xyz { x = 0 , y = 1 , z = 2 } XYZ;\nabc e1;\nXYZ e2;" always "typedef enum { a = 0 , b = 1 , c = 2 } abc;\ntypedef enum xyz { x = 0 , y = 1 , z = 2 } XYZ;\nabc e1;\nXYZ e2;"
Line 505
  97 always 97
  = always "enum abc { a = 0 , b = 1 , c = 2 } ; enum xyz { x = 0 , y = 1 , z = 2 } ; abc e1 ; enum xyz e2 ;"
  "enum abc { a = 0 , b = 1 , c = 2 } ; enum xyz { x = 0 , y = 1 , z = 2 } ; abc e1 ; enum xyz e2 ;" always "enum abc { a = 0 , b = 1 , c = 2 } ; enum xyz { x = 0 , y = 1 , z = 2 } ; abc e1 ; enum xyz e2 ;"
Line 510
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  510 always 510
  expected always "enum abc { a = 0 , b = 1 , c = 2 } ; enum xyz { x = 0 , y = 1 , z = 2 } ; abc e1 ; enum xyz e2 ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  510 always 510
  code always "typedef enum { a = 0 , b = 1 , c = 2 } abc;\ntypedef enum xyz { x = 0 , y = 1 , z = 2 } XYZ;\nabc e1;\nXYZ e2;"
  false always 0
Line 514
  189 always 189
  = always "typedef vector<int> V1;\ntypedef std::vector<int> V2;\ntypedef std::vector<std::vector<int> > V3;\ntypedef std::list<int>::iterator IntListIterator;\nV1 v1;\nV2 v2;\nV3 v3;\nIntListIterator iter;"
  "typedef vector<int> V1;\ntypedef std::vector<int> V2;\ntypedef std::vector<std::vector<int> > V3;\ntypedef std::list<int>::iterator IntListIterator;\nV1 v1;\nV2 v2;\nV3 v3;\nIntListIterator iter;" always "typedef vector<int> V1;\ntypedef std::vector<int> V2;\ntypedef std::vector<std::vector<int> > V3;\ntypedef std::list<int>::iterator IntListIterator;\nV1 v1;\nV2 v2;\nV3 v3;\nIntListIterator iter;"
Line 523
  131 always 131
  = always "vector < int > v1 ; std :: vector < int > v2 ; std :: vector < std :: vector < int > > v3 ; std :: list < int > :: iterator iter ;"
Line 524
  "vector < int > v1 ; std :: vector < int > v2 ; std :: vector < std :: vector < int > > v3 ; std :: list < int > :: iterator iter ;" always "vector < int > v1 ; std :: vector < int > v2 ; std :: vector < std :: vector < int > > v3 ; std :: list < int > :: iterator iter ;"
Line 529
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  529 always 529
  expected always "vector < int > v1 ; std :: vector < int > v2 ; std :: vector < std :: vector < int > > v3 ; std :: list < int > :: iterator iter ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  529 always 529
  code always "typedef vector<int> V1;\ntypedef std::vector<int> V2;\ntypedef std::vector<std::vector<int> > V3;\ntypedef std::list<int>::iterator IntListIterator;\nV1 v1;\nV2 v2;\nV3 v3;\nIntListIterator iter;"
  false always 0
Line 534
  95 always 95
  = always "typedef std::pair<int(*)(void*), void*> Func;typedef std::vector<Func> CallQueue;int main() {}"
  "typedef std::pair<int(*)(void*), void*> Func;typedef std::vector<Func> CallQueue;int main() {}" always "typedef std::pair<int(*)(void*), void*> Func;typedef std::vector<Func> CallQueue;int main() {}"
Line 539
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  539 always 539
  code always "typedef std::pair<int(*)(void*), void*> Func;typedef std::vector<Func> CallQueue;int main() {}"
Line 540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  540 always 540
  "" always ""
Line 545
  224 always 224
  = always "template <typename F, unsigned int N> struct E{    typedef E<F,(N>0)?(N-1):0> v;    typedef typename add<v,v>::val val;    FP_M(val);};template <typename F> struct E <F,0>{    typedef typename D<1>::val val;    FP_M(val);};"
  "template <typename F, unsigned int N> struct E{    typedef E<F,(N>0)?(N-1):0> v;    typedef typename add<v,v>::val val;    FP_M(val);};template <typename F> struct E <F,0>{    typedef typename D<1>::val val;    FP_M(val);};" always "template <typename F, unsigned int N> struct E{    typedef E<F,(N>0)?(N-1):0> v;    typedef typename add<v,v>::val val;    FP_M(val);};template <typename F> struct E <F,0>{    typedef typename D<1>::val val;    FP_M(val);};"
Line 558
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  558 always 558
  code always "template <typename F, unsigned int N> struct E{    typedef E<F,(N>0)?(N-1):0> v;    typedef typename add<v,v>::val val;    FP_M(val);};template <typename F> struct E <F,0>{    typedef typename D<1>::val val;    FP_M(val);};"
  true always 1
  false always 0
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  558 always 558
  false always 0
Line 564
  33 always 33
  = always "typedef char frame[10];\nframe f;"
  "typedef char frame[10];\nframe f;" always "typedef char frame[10];\nframe f;"
Line 567
  16 always 16
  = always "char f [ 10 ] ;"
  "char f [ 10 ] ;" always "char f [ 10 ] ;"
Line 569
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  569 always 569
  expected always "char f [ 10 ] ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  569 always 569
  code always "typedef char frame[10];\nframe f;"
  false always 0
Line 573
  42 always 42
  = always "typedef unsigned char frame[10];\nframe f;"
  "typedef unsigned char frame[10];\nframe f;" always "typedef unsigned char frame[10];\nframe f;"
Line 576
  25 always 25
  = always "unsigned char f [ 10 ] ;"
  "unsigned char f [ 10 ] ;" always "unsigned char f [ 10 ] ;"
Line 578
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  578 always 578
  expected always "unsigned char f [ 10 ] ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  578 always 578
  code always "typedef unsigned char frame[10];\nframe f;"
  false always 0
Line 584
  89 always 89
  = always "typedef char MOT8;\ntypedef  MOT8 CHFOO[4096];\ntypedef struct {\n   CHFOO freem;\n} STRFOO;"
  "typedef char MOT8;\ntypedef  MOT8 CHFOO[4096];\ntypedef struct {\n   CHFOO freem;\n} STRFOO;" always "typedef char MOT8;\ntypedef  MOT8 CHFOO[4096];\ntypedef struct {\n   CHFOO freem;\n} STRFOO;"
Line 591
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  591 always 591
  code always "typedef char MOT8;\ntypedef  MOT8 CHFOO[4096];\ntypedef struct {\n   CHFOO freem;\n} STRFOO;"
Line 592
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  592 always 592
  "" always ""
Line 596
  46 always 46
  = always "typedef char * PCHAR, CHAR;\nPCHAR pc;\nCHAR c;"
  "typedef char * PCHAR, CHAR;\nPCHAR pc;\nCHAR c;" always "typedef char * PCHAR, CHAR;\nPCHAR pc;\nCHAR c;"
Line 600
  21 always 21
  = always "char * pc ; char c ;"
Line 601
  "char * pc ; char c ;" always "char * pc ; char c ;"
Line 604
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  604 always 604
  expected always "char * pc ; char c ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  604 always 604
  code always "typedef char * PCHAR, CHAR;\nPCHAR pc;\nCHAR c;"
  false always 0
Line 608
  31 always 31
  = always "typedef vector<int[4]> a;\na b;"
  "typedef vector<int[4]> a;\na b;" always "typedef vector<int[4]> a;\na b;"
Line 610
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  610 always 610
  "vector < int [ 4 ] > b ;" always "vector < int [ 4 ] > b ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  610 always 610
  code always "typedef vector<int[4]> a;\na b;"
Line 616
  45 always 45
  = always "typedef struct {} A, *B, **C;\nA a;\nB b;\nC c;"
  "typedef struct {} A, *B, **C;\nA a;\nB b;\nC c;" always "typedef struct {} A, *B, **C;\nA a;\nB b;\nC c;"
Line 621
  60 always 60
  = always "struct A { } ; struct A a ; struct A * b ; struct A * * c ;"
Line 622
  "struct A { } ; struct A a ; struct A * b ; struct A * * c ;" always "struct A { } ; struct A a ; struct A * b ; struct A * * c ;"
Line 627
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  627 always 627
  expected always "struct A { } ; struct A a ; struct A * b ; struct A * * c ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  627 always 627
  code always "typedef struct {} A, *B, **C;\nA a;\nB b;\nC c;"
  false always 0
Line 631
  43 always 43
  = always "typedef struct {} A, *********B;\nA a;\nB b;"
  "typedef struct {} A, *********B;\nA a;\nB b;" always "typedef struct {} A, *********B;\nA a;\nB b;"
Line 635
  59 always 59
  = always "struct A { } ; struct A a ; struct A * * * * * * * * * b ;"
Line 636
  "struct A { } ; struct A a ; struct A * * * * * * * * * b ;" always "struct A { } ; struct A a ; struct A * * * * * * * * * b ;"
Line 640
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  640 always 640
  expected always "struct A { } ; struct A a ; struct A * * * * * * * * * b ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  640 always 640
  code always "typedef struct {} A, *********B;\nA a;\nB b;"
  false always 0
Line 644
  53 always 53
  = always "typedef struct {} **********A, *B, C;\nA a;\nB b;\nC c;"
  "typedef struct {} **********A, *B, C;\nA a;\nB b;\nC c;" always "typedef struct {} **********A, *B, C;\nA a;\nB b;\nC c;"
Line 649
  104 always 104
  = always "struct Unnamed0 { } ; struct Unnamed0 * * * * * * * * * * a ; struct Unnamed0 * b ; struct Unnamed0 c ;"
Line 650
  "struct Unnamed0 { } ; struct Unnamed0 * * * * * * * * * * a ; struct Unnamed0 * b ; struct Unnamed0 c ;" always "struct Unnamed0 { } ; struct Unnamed0 * * * * * * * * * * a ; struct Unnamed0 * b ; struct Unnamed0 c ;"
Line 655
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  655 always 655
  expected always "struct Unnamed0 { } ; struct Unnamed0 * * * * * * * * * * a ; struct Unnamed0 * b ; struct Unnamed0 c ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  655 always 655
  code always "typedef struct {} **********A, *B, C;\nA a;\nB b;\nC c;"
  false always 0
Line 661
  76 always 76
  = always "typedef jobject invoke_t (jobject, Proxy *, Method *, JArray< jobject > *);"
  "typedef jobject invoke_t (jobject, Proxy *, Method *, JArray< jobject > *);" always "typedef jobject invoke_t (jobject, Proxy *, Method *, JArray< jobject > *);"
Line 662
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  662 always 662
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  662 always 662
  code always "typedef jobject invoke_t (jobject, Proxy *, Method *, JArray< jobject > *);"
Line 666
  71 always 71
  = always "typedef void (* PF)();\ntypedef void * (* PFV)(void *);\nPF pf;\nPFV pfv;"
  "typedef void (* PF)();\ntypedef void * (* PFV)(void *);\nPF pf;\nPFV pfv;" always "typedef void (* PF)();\ntypedef void * (* PFV)(void *);\nPF pf;\nPFV pfv;"
Line 671
  50 always 50
  = always "void ( * pf ) ( ) ; void * ( * pfv ) ( void * ) ;"
Line 672
  "void ( * pf ) ( ) ; void * ( * pfv ) ( void * ) ;" always "void ( * pf ) ( ) ; void * ( * pfv ) ( void * ) ;"
Line 677
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  677 always 677
  expected always "void ( * pf ) ( ) ; void * ( * pfv ) ( void * ) ;"
  code always "typedef void (* PF)();\ntypedef void * (* PFV)(void *);\nPF pf;\nPFV pfv;"
Line 682
  107 always 107
  = always "class Fred {\n    typedef void (*testfp)();\n    testfp get() { return test; }\n    static void test() { }\n};"
  "class Fred {\n    typedef void (*testfp)();\n    testfp get() { return test; }\n    static void test() { }\n};" always "class Fred {\n    typedef void (*testfp)();\n    testfp get() { return test; }\n    static void test() { }\n};"
Line 688
  75 always 75
  = always "class Fred { void * get ( ) { return test ; } static void test ( ) { } } ;"
Line 689
  "class Fred { void * get ( ) { return test ; } static void test ( ) { } } ;" always "class Fred { void * get ( ) { return test ; } static void test ( ) { } } ;"
Line 695
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  695 always 695
  expected always "class Fred { void * get ( ) { return test ; } static void test ( ) { } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  695 always 695
  code always "class Fred {\n    typedef void (*testfp)();\n    testfp get() { return test; }\n    static void test() { }\n};"
  false always 0
Line 699
  135 always 135
  = always "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get() { return test; }\n    static void * test(void * p) { return p; }\n};"
  "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get() { return test; }\n    static void * test(void * p) { return p; }\n};" always "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get() { return test; }\n    static void * test(void * p) { return p; }\n};"
Line 705
  99 always 99
  = always "class Fred { void * * get ( ) { return test ; } static void * test ( void * p ) { return p ; } } ;"
Line 706
  "class Fred { void * * get ( ) { return test ; } static void * test ( void * p ) { return p ; } } ;" always "class Fred { void * * get ( ) { return test ; } static void * test ( void * p ) { return p ; } } ;"
Line 712
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  712 always 712
  expected always "class Fred { void * * get ( ) { return test ; } static void * test ( void * p ) { return p ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  712 always 712
  code always "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get() { return test; }\n    static void * test(void * p) { return p; }\n};"
  false always 0
Line 716
  167 always 167
  = always "class Fred {\n    typedef unsigned int * (*testfp)(unsigned int *);\n    testfp get() { return test; }\n    static unsigned int * test(unsigned int * p) { return p; }\n};"
  "class Fred {\n    typedef unsigned int * (*testfp)(unsigned int *);\n    testfp get() { return test; }\n    static unsigned int * test(unsigned int * p) { return p; }\n};" always "class Fred {\n    typedef unsigned int * (*testfp)(unsigned int *);\n    testfp get() { return test; }\n    static unsigned int * test(unsigned int * p) { return p; }\n};"
Line 722
  123 always 123
  = always "class Fred { unsigned int * * get ( ) { return test ; } static unsigned int * test ( unsigned int * p ) { return p ; } } ;"
Line 723
  "class Fred { unsigned int * * get ( ) { return test ; } static unsigned int * test ( unsigned int * p ) { return p ; } } ;" always "class Fred { unsigned int * * get ( ) { return test ; } static unsigned int * test ( unsigned int * p ) { return p ; } } ;"
Line 729
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  729 always 729
  expected always "class Fred { unsigned int * * get ( ) { return test ; } static unsigned int * test ( unsigned int * p ) { return p ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  729 always 729
  code always "class Fred {\n    typedef unsigned int * (*testfp)(unsigned int *);\n    testfp get() { return test; }\n    static unsigned int * test(unsigned int * p) { return p; }\n};"
  false always 0
Line 733
  191 always 191
  = always "class Fred {\n    typedef const unsigned int * (*testfp)(const unsigned int *);\n    testfp get() { return test; }\n    static const unsigned int * test(const unsigned int * p) { return p; }\n};"
  "class Fred {\n    typedef const unsigned int * (*testfp)(const unsigned int *);\n    testfp get() { return test; }\n    static const unsigned int * test(const unsigned int * p) { return p; }\n};" always "class Fred {\n    typedef const unsigned int * (*testfp)(const unsigned int *);\n    testfp get() { return test; }\n    static const unsigned int * test(const unsigned int * p) { return p; }\n};"
Line 740
  141 always 141
  = always "class Fred { const unsigned int * * get ( ) { return test ; } static const unsigned int * test ( const unsigned int * p ) { return p ; } } ;"
Line 741
  "class Fred { const unsigned int * * get ( ) { return test ; } static const unsigned int * test ( const unsigned int * p ) { return p ; } } ;" always "class Fred { const unsigned int * * get ( ) { return test ; } static const unsigned int * test ( const unsigned int * p ) { return p ; } } ;"
Line 747
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  747 always 747
  expected always "class Fred { const unsigned int * * get ( ) { return test ; } static const unsigned int * test ( const unsigned int * p ) { return p ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  747 always 747
  code always "class Fred {\n    typedef const unsigned int * (*testfp)(const unsigned int *);\n    testfp get() { return test; }\n    static const unsigned int * test(const unsigned int * p) { return p; }\n};"
  false always 0
Line 751
  140 always 140
  = always "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get(int i) { return test; }\n    static void * test(void * p) { return p; }\n};"
  "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get(int i) { return test; }\n    static void * test(void * p) { return p; }\n};" always "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get(int i) { return test; }\n    static void * test(void * p) { return p; }\n};"
Line 757
  105 always 105
  = always "class Fred { void * * get ( int i ) { return test ; } static void * test ( void * p ) { return p ; } } ;"
Line 758
  "class Fred { void * * get ( int i ) { return test ; } static void * test ( void * p ) { return p ; } } ;" always "class Fred { void * * get ( int i ) { return test ; } static void * test ( void * p ) { return p ; } } ;"
Line 764
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  764 always 764
  expected always "class Fred { void * * get ( int i ) { return test ; } static void * test ( void * p ) { return p ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  764 always 764
  code always "class Fred {\n    typedef void * (*testfp)(void *);\n    testfp get(int i) { return test; }\n    static void * test(void * p) { return p; }\n};"
  false always 0
Line 769
  128 always 128
  = always "typedef bool (*Callback) (int i);\nvoid    addCallback(Callback callback) { }\nvoid    addCallback1(Callback callback, int j) { }"
  "typedef bool (*Callback) (int i);\nvoid    addCallback(Callback callback) { }\nvoid    addCallback1(Callback callback, int j) { }" always "typedef bool (*Callback) (int i);\nvoid    addCallback(Callback callback) { }\nvoid    addCallback1(Callback callback, int j) { }"
Line 773
  107 always 107
  = always "void addCallback ( bool ( * callback ) ( ) ) { } void addCallback1 ( bool ( * callback ) ( ) , int j ) { }"
Line 774
  "void addCallback ( bool ( * callback ) ( ) ) { } void addCallback1 ( bool ( * callback ) ( ) , int j ) { }" always "void addCallback ( bool ( * callback ) ( ) ) { } void addCallback1 ( bool ( * callback ) ( ) , int j ) { }"
Line 777
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  777 always 777
  expected always "void addCallback ( bool ( * callback ) ( ) ) { } void addCallback1 ( bool ( * callback ) ( ) , int j ) { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  777 always 777
  code always "typedef bool (*Callback) (int i);\nvoid    addCallback(Callback callback) { }\nvoid    addCallback1(Callback callback, int j) { }"
  false always 0
Line 782
  57 always 57
  = always "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = (fp)f;\n}"
  "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = (fp)f;\n}" always "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = (fp)f;\n}"
Line 788
  69 always 69
  = always "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = ( int * ) f ; }"
Line 789
  "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = ( int * ) f ; }" always "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = ( int * ) f ; }"
Line 794
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  794 always 794
  expected always "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = ( int * ) f ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  794 always 794
  code always "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = (fp)f;\n}"
  false always 0
Line 798
  70 always 70
  = always "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = static_cast<fp>(f);\n}"
  "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = static_cast<fp>(f);\n}" always "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = static_cast<fp>(f);\n}"
Line 804
  85 always 85
  = always "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = static_cast < int * > ( f ) ; }"
Line 805
  "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = static_cast < int * > ( f ) ; }" always "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = static_cast < int * > ( f ) ; }"
Line 810
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  810 always 810
  expected always "void g ( int ( * f ) ( ) ) { int ( * f2 ) ( ) ; f2 = static_cast < int * > ( f ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  810 always 810
  code always "typedef int (*fp)();\nvoid g( fp f )\n{\n  fp f2 = static_cast<fp>(f);\n}"
  false always 0
Line 817
  127 always 127
  = always "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (struct vfs_class *me, fill_names_f);\n}"
  "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (struct vfs_class *me, fill_names_f);\n}" always "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (struct vfs_class *me, fill_names_f);\n}"
Line 822
  101 always 101
  = always "struct vfs_class { void ( * fill_names ) ( struct vfs_class * me , void ( * ) ( const char * ) ) ; }"
Line 823
  "struct vfs_class { void ( * fill_names ) ( struct vfs_class * me , void ( * ) ( const char * ) ) ; }" always "struct vfs_class { void ( * fill_names ) ( struct vfs_class * me , void ( * ) ( const char * ) ) ; }"
Line 827
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  827 always 827
  expected always "struct vfs_class { void ( * fill_names ) ( struct vfs_class * me , void ( * ) ( const char * ) ) ; }"
  code always "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (struct vfs_class *me, fill_names_f);\n}"
Line 831
  127 always 127
  = always "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (fill_names_f, struct vfs_class *me);\n}"
  "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (fill_names_f, struct vfs_class *me);\n}" always "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (fill_names_f, struct vfs_class *me);\n}"
Line 836
  101 always 101
  = always "struct vfs_class { void ( * fill_names ) ( void ( * ) ( const char * ) , struct vfs_class * me ) ; }"
Line 837
  "struct vfs_class { void ( * fill_names ) ( void ( * ) ( const char * ) , struct vfs_class * me ) ; }" always "struct vfs_class { void ( * fill_names ) ( void ( * ) ( const char * ) , struct vfs_class * me ) ; }"
Line 841
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  841 always 841
  expected always "struct vfs_class { void ( * fill_names ) ( void ( * ) ( const char * ) , struct vfs_class * me ) ; }"
  code always "typedef void (*fill_names_f) (const char *);\nstruct vfs_class {\n    void (*fill_names) (fill_names_f, struct vfs_class *me);\n}"
Line 847
  74 always 74
  = always "typedef void (*Callback) ();\nvoid    addCallback(Callback (*callback)());"
  "typedef void (*Callback) ();\nvoid    addCallback(Callback (*callback)());" always "typedef void (*Callback) ();\nvoid    addCallback(Callback (*callback)());"
Line 850
  57 always 57
  = always "void addCallback ( void ( * ( * callback ) ( ) ) ( ) ) ;"
  "void addCallback ( void ( * ( * callback ) ( ) ) ( ) ) ;" always "void addCallback ( void ( * ( * callback ) ( ) ) ( ) ) ;"
Line 852
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  852 always 852
  expected always "void addCallback ( void ( * ( * callback ) ( ) ) ( ) ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  852 always 852
  code always "typedef void (*Callback) ();\nvoid    addCallback(Callback (*callback)());"
  false always 0
Line 857
  234 always 234
  = always "typedef void (*pc_video_update_proc)(bitmap_t *bitmap,\nstruct mscrtc6845 *crtc);\n\nstruct mscrtc6845 *pc_video_start(pc_video_update_proc (*choosevideomode)(running_machine *machine, int *width, int *height, struct mscrtc6845 *crtc));"
  "typedef void (*pc_video_update_proc)(bitmap_t *bitmap,\nstruct mscrtc6845 *crtc);\n\nstruct mscrtc6845 *pc_video_start(pc_video_update_proc (*choosevideomode)(running_machine *machine, int *width, int *height, struct mscrtc6845 *crtc));" always "typedef void (*pc_video_update_proc)(bitmap_t *bitmap,\nstruct mscrtc6845 *crtc);\n\nstruct mscrtc6845 *pc_video_start(pc_video_update_proc (*choosevideomode)(running_machine *machine, int *width, int *height, struct mscrtc6845 *crtc));"
Line 862
  209 always 209
  = always "struct mscrtc6845 * pc_video_start ( void ( * ( * choosevideomode ) ( running_machine * machine , int * width , int * height , struct mscrtc6845 * crtc ) ) ( bitmap_t * bitmap , struct mscrtc6845 * crtc ) ) ;"
  "struct mscrtc6845 * pc_video_start ( void ( * ( * choosevideomode ) ( running_machine * machine , int * width , int * height , struct mscrtc6845 * crtc ) ) ( bitmap_t * bitmap , struct mscrtc6845 * crtc ) ) ;" always "struct mscrtc6845 * pc_video_start ( void ( * ( * choosevideomode ) ( running_machine * machine , int * width , int * height , struct mscrtc6845 * crtc ) ) ( bitmap_t * bitmap , struct mscrtc6845 * crtc ) ) ;"
Line 864
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  864 always 864
  expected always "struct mscrtc6845 * pc_video_start ( void ( * ( * choosevideomode ) ( running_machine * machine , int * width , int * height , struct mscrtc6845 * crtc ) ) ( bitmap_t * bitmap , struct mscrtc6845 * crtc ) ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  864 always 864
  code always "typedef void (*pc_video_update_proc)(bitmap_t *bitmap,\nstruct mscrtc6845 *crtc);\n\nstruct mscrtc6845 *pc_video_start(pc_video_update_proc (*choosevideomode)(running_machine *machine, int *width, int *height, struct mscrtc6845 *crtc));"
  false always 0
Line 870
  134 always 134
  = always "int main()\n{\n    typedef int (*func_ptr)(float, double);\n    VERIFY((is_same<result_of<func_ptr(char, float)>::type, int>::value));\n}"
  "int main()\n{\n    typedef int (*func_ptr)(float, double);\n    VERIFY((is_same<result_of<func_ptr(char, float)>::type, int>::value));\n}" always "int main()\n{\n    typedef int (*func_ptr)(float, double);\n    VERIFY((is_same<result_of<func_ptr(char, float)>::type, int>::value));\n}"
Line 876
  125 always 125
  = always "int main ( ) { VERIFY ( is_same < result_of < int ( * ( char , float ) ) ( float , double ) > :: type , int > :: value ) ; }"
Line 877
  "int main ( ) { VERIFY ( is_same < result_of < int ( * ( char , float ) ) ( float , double ) > :: type , int > :: value ) ; }" always "int main ( ) { VERIFY ( is_same < result_of < int ( * ( char , float ) ) ( float , double ) > :: type , int > :: value ) ; }"
Line 883
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  883 always 883
  expected always "int main ( ) { VERIFY ( is_same < result_of < int ( * ( char , float ) ) ( float , double ) > :: type , int > :: value ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  883 always 883
  code always "int main()\n{\n    typedef int (*func_ptr)(float, double);\n    VERIFY((is_same<result_of<func_ptr(char, float)>::type, int>::value));\n}"
  false always 0
Line 887
  53 always 53
  = always "typedef std::pair<double, double> (*F)(double);\nF f;"
  "typedef std::pair<double, double> (*F)(double);\nF f;" always "typedef std::pair<double, double> (*F)(double);\nF f;"
Line 890
  53 always 53
  = always "std :: pair < double , double > ( * f ) ( double ) ;"
  "std :: pair < double , double > ( * f ) ( double ) ;" always "std :: pair < double , double > ( * f ) ( double ) ;"
Line 892
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  892 always 892
  expected always "std :: pair < double , double > ( * f ) ( double ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  892 always 892
  code always "typedef std::pair<double, double> (*F)(double);\nF f;"
  false always 0
Line 896
  222 always 222
  = always "typedef int array [ice_or<is_int<int>::value, is_int<UDT>::value>::value ? 1 : -1];\ntypedef int array1 [N];\ntypedef int array2 [N][M];\ntypedef int int_t, int_array[N];\narray a;\narray1 a1;\narray2 a2;\nint_t t;\nint_array ia;"
  "typedef int array [ice_or<is_int<int>::value, is_int<UDT>::value>::value ? 1 : -1];\ntypedef int array1 [N];\ntypedef int array2 [N][M];\ntypedef int int_t, int_array[N];\narray a;\narray1 a1;\narray2 a2;\nint_t t;\nint_array ia;" always "typedef int array [ice_or<is_int<int>::value, is_int<UDT>::value>::value ? 1 : -1];\ntypedef int array1 [N];\ntypedef int array2 [N][M];\ntypedef int int_t, int_array[N];\narray a;\narray1 a1;\narray2 a2;\nint_t t;\nint_array ia;"
Line 906
  150 always 150
  = always "int a [ ice_or < is_int < int > :: value , is_int < UDT > :: value > :: value ? 1 : -1 ] ; int a1 [ N ] ; int a2 [ N ] [ M ] ; int t ; int ia [ N ] ;"
Line 907
  "int a [ ice_or < is_int < int > :: value , is_int < UDT > :: value > :: value ? 1 : -1 ] ; int a1 [ N ] ; int a2 [ N ] [ M ] ; int t ; int ia [ N ] ;" always "int a [ ice_or < is_int < int > :: value , is_int < UDT > :: value > :: value ? 1 : -1 ] ; int a1 [ N ] ; int a2 [ N ] [ M ] ; int t ; int ia [ N ] ;"
Line 913
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  913 always 913
  expected always "int a [ ice_or < is_int < int > :: value , is_int < UDT > :: value > :: value ? 1 : -1 ] ; int a1 [ N ] ; int a2 [ N ] [ M ] ; int t ; int ia [ N ] ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  913 always 913
  code always "typedef int array [ice_or<is_int<int>::value, is_int<UDT>::value>::value ? 1 : -1];\ntypedef int array1 [N];\ntypedef int array2 [N][M];\ntypedef int int_t, int_array[N];\narray a;\narray1 a1;\narray2 a2;\nint_t t;\nint_array ia;"
  false always 0
Line 917
  190 always 190
  = always "typedef ::std::list<int> int_list;\ntypedef ::std::list<int>::iterator int_list_iterator;\ntypedef ::std::list<int> int_list_array[10];\nint_list il;\nint_list_iterator ili;\nint_list_array ila;"
  "typedef ::std::list<int> int_list;\ntypedef ::std::list<int>::iterator int_list_iterator;\ntypedef ::std::list<int> int_list_array[10];\nint_list il;\nint_list_iterator ili;\nint_list_array ila;" always "typedef ::std::list<int> int_list;\ntypedef ::std::list<int>::iterator int_list_iterator;\ntypedef ::std::list<int> int_list_array[10];\nint_list il;\nint_list_iterator ili;\nint_list_array ila;"
Line 924
  105 always 105
  = always ":: std :: list < int > il ; :: std :: list < int > :: iterator ili ; :: std :: list < int > ila [ 10 ] ;"
Line 925
  ":: std :: list < int > il ; :: std :: list < int > :: iterator ili ; :: std :: list < int > ila [ 10 ] ;" always ":: std :: list < int > il ; :: std :: list < int > :: iterator ili ; :: std :: list < int > ila [ 10 ] ;"
Line 929
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  929 always 929
  expected always ":: std :: list < int > il ; :: std :: list < int > :: iterator ili ; :: std :: list < int > ila [ 10 ] ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  929 always 929
  code always "typedef ::std::list<int> int_list;\ntypedef ::std::list<int>::iterator int_list_iterator;\ntypedef ::std::list<int> int_list_array[10];\nint_list il;\nint_list_iterator ili;\nint_list_array ila;"
  false always 0
Line 934
  158 always 158
  = always "class A {\npublic:\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;"
  "class A {\npublic:\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;" always "class A {\npublic:\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;"
Line 944
  140 always 140
  = always "class A { public: int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;"
  "class A { public: int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;" always "class A { public: int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;"
Line 954
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  954 always 954
  expected always "class A { public: int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  954 always 954
  code always "class A {\npublic:\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;"
  false always 0
Line 958
  151 always 151
  = always "struct A {\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;"
  "struct A {\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;" always "struct A {\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;"
Line 967
  133 always 133
  = always "struct A { int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;"
  "struct A { int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;" always "struct A { int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;"
Line 976
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  976 always 976
  expected always "struct A { int get ( ) const ; void put ( int x ) { a = x ; } int a ; } ; int A :: get ( ) const { return a ; } int i ; i = A :: a ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  976 always 976
  code always "struct A {\n    typedef int INT;\n    INT get() const;\n    void put(INT x) { a = x; }\n    INT a;\n};\nA::INT A::get() const { return a; }\nA::INT i = A::a;"
  false always 0
Line 981
  100 always 100
  = always "typedef char CHAR;\ntypedef CHAR * LPSTR;\ntypedef const CHAR * LPCSTR;\nCHAR c;\nLPSTR cp;\nLPCSTR ccp;"
  "typedef char CHAR;\ntypedef CHAR * LPSTR;\ntypedef const CHAR * LPCSTR;\nCHAR c;\nLPSTR cp;\nLPCSTR ccp;" always "typedef char CHAR;\ntypedef CHAR * LPSTR;\ntypedef const CHAR * LPCSTR;\nCHAR c;\nLPSTR cp;\nLPCSTR ccp;"
Line 988
  40 always 40
  = always "char c ; char * cp ; const char * ccp ;"
Line 989
  "char c ; char * cp ; const char * ccp ;" always "char c ; char * cp ; const char * ccp ;"
Line 993
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  993 always 993
  expected always "char c ; char * cp ; const char * ccp ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  993 always 993
  code always "typedef char CHAR;\ntypedef CHAR * LPSTR;\ntypedef const CHAR * LPCSTR;\nCHAR c;\nLPSTR cp;\nLPCSTR ccp;"
  false always 0
Line 997
  608 always 608
  = always "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                LONG_D funD();\n                LONG_D d;\n            };\n            INT_C c;\n        };\n        SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
  "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                LONG_D funD();\n                LONG_D d;\n            };\n            INT_C c;\n        };\n        SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }" always "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                LONG_D funD();\n                LONG_D d;\n            };\n            INT_C c;\n        };\n        SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
Line 1025
  668 always 668
  = always "class A {\npublic:\n    typedef char CHAR_A;\n    A::CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        A::B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            A::B::C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                A::B::C::D::LONG_D funD();\n                A::B::C::D::LONG_D d;\n            };\n            A::B::C::INT_C c;\n        };\n        A::B::SHRT_B b;\n    };\n    A::CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
  "class A {\npublic:\n    typedef char CHAR_A;\n    A::CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        A::B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            A::B::C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                A::B::C::D::LONG_D funD();\n                A::B::C::D::LONG_D d;\n            };\n            A::B::C::INT_C c;\n        };\n        A::B::SHRT_B b;\n    };\n    A::CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }" always "class A {\npublic:\n    typedef char CHAR_A;\n    A::CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        A::B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            A::B::C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                A::B::C::D::LONG_D funD();\n                A::B::C::D::LONG_D d;\n            };\n            A::B::C::INT_C c;\n        };\n        A::B::SHRT_B b;\n    };\n    A::CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
Line 1053
  632 always 632
  = always "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                D::LONG_D funD();\n                C::D::LONG_D d;\n            };\n            B::C::INT_C c;\n        };\n        B::SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
  "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                D::LONG_D funD();\n                C::D::LONG_D d;\n            };\n            B::C::INT_C c;\n        };\n        B::SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }" always "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                D::LONG_D funD();\n                C::D::LONG_D d;\n            };\n            B::C::INT_C c;\n        };\n        B::SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
Line 1081
  347 always 347
  = always "class A { public: char funA ( ) ; class B { public: short funB ( ) ; class C { public: int funC ( ) ; struct D { long funD ( ) ; long d ; } ; int c ; } ; short b ; } ; char a ; } ; char A :: funA ( ) { return a ; } short A :: B :: funB ( ) { return b ; } int A :: B :: C :: funC ( ) { return c ; } long A :: B :: C :: D :: funD ( ) { return d ; }"
Line 1082
  "class A { public: char funA ( ) ; class B { public: short funB ( ) ; class C { public: int funC ( ) ; struct D { long funD ( ) ; long d ; } ; int c ; } ; short b ; } ; char a ; } ; char A :: funA ( ) { return a ; } short A :: B :: funB ( ) { return b ; } int A :: B :: C :: funC ( ) { return c ; } long A :: B :: C :: D :: funD ( ) { return d ; }" always "class A { public: char funA ( ) ; class B { public: short funB ( ) ; class C { public: int funC ( ) ; struct D { long funD ( ) ; long d ; } ; int c ; } ; short b ; } ; char a ; } ; char A :: funA ( ) { return a ; } short A :: B :: funB ( ) { return b ; } int A :: B :: C :: funC ( ) { return c ; } long A :: B :: C :: D :: funD ( ) { return d ; }"
Line 1110
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1110 always 1110
  expected always "class A { public: char funA ( ) ; class B { public: short funB ( ) ; class C { public: int funC ( ) ; struct D { long funD ( ) ; long d ; } ; int c ; } ; short b ; } ; char a ; } ; char A :: funA ( ) { return a ; } short A :: B :: funB ( ) { return b ; } int A :: B :: C :: funC ( ) { return c ; } long A :: B :: C :: D :: funD ( ) { return d ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1110 always 1110
  code always "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                LONG_D funD();\n                LONG_D d;\n            };\n            INT_C c;\n        };\n        SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
  false always 0
Line 1111
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1111 always 1111
  expected always "class A { public: char funA ( ) ; class B { public: short funB ( ) ; class C { public: int funC ( ) ; struct D { long funD ( ) ; long d ; } ; int c ; } ; short b ; } ; char a ; } ; char A :: funA ( ) { return a ; } short A :: B :: funB ( ) { return b ; } int A :: B :: C :: funC ( ) { return c ; } long A :: B :: C :: D :: funD ( ) { return d ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1111 always 1111
  codePartialSpecified always "class A {\npublic:\n    typedef char CHAR_A;\n    CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                D::LONG_D funD();\n                C::D::LONG_D d;\n            };\n            B::C::INT_C c;\n        };\n        B::SHRT_B b;\n    };\n    CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
  false always 0
Line 1112
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1112 always 1112
  expected always "class A { public: char funA ( ) ; class B { public: short funB ( ) ; class C { public: int funC ( ) ; struct D { long funD ( ) ; long d ; } ; int c ; } ; short b ; } ; char a ; } ; char A :: funA ( ) { return a ; } short A :: B :: funB ( ) { return b ; } int A :: B :: C :: funC ( ) { return c ; } long A :: B :: C :: D :: funD ( ) { return d ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1112 always 1112
  codeFullSpecified always "class A {\npublic:\n    typedef char CHAR_A;\n    A::CHAR_A funA();\n    class B {\n    public:\n        typedef short SHRT_B;\n        A::B::SHRT_B funB();\n        class C {\n        public:\n            typedef int INT_C;\n            A::B::C::INT_C funC();\n            struct D {\n                typedef long LONG_D;\n                A::B::C::D::LONG_D funD();\n                A::B::C::D::LONG_D d;\n            };\n            A::B::C::INT_C c;\n        };\n        A::B::SHRT_B b;\n    };\n    A::CHAR_A a;\n};\nA::CHAR_A A::funA() { return a; }\nA::B::SHRT_B A::B::funB() { return b; }\nA::B::C::INT_C A::B::C::funC() { return c; }A::B::C::D::LONG_D A::B::C::D::funD() { return d; }"
  false always 0
Line 1117
  95 always 95
  = always "class X { };\ntypedef X (*foofunc)(const X&);\nint main()\n{\n    foofunc *Foo = new foofunc[2];\n}"
  "class X { };\ntypedef X (*foofunc)(const X&);\nint main()\n{\n    foofunc *Foo = new foofunc[2];\n}" always "class X { };\ntypedef X (*foofunc)(const X&);\nint main()\n{\n    foofunc *Foo = new foofunc[2];\n}"
Line 1123
  91 always 91
  = always "class X { } ; int main ( ) { X ( * * Foo ) ( ) ; Foo = new X ( * ) ( const X & ) [ 2 ] ; }"
Line 1124
  "class X { } ; int main ( ) { X ( * * Foo ) ( ) ; Foo = new X ( * ) ( const X & ) [ 2 ] ; }" always "class X { } ; int main ( ) { X ( * * Foo ) ( ) ; Foo = new X ( * ) ( const X & ) [ 2 ] ; }"
Line 1130
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1130 always 1130
  expected always "class X { } ; int main ( ) { X ( * * Foo ) ( ) ; Foo = new X ( * ) ( const X & ) [ 2 ] ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1130 always 1130
  code always "class X { };\ntypedef X (*foofunc)(const X&);\nint main()\n{\n    foofunc *Foo = new foofunc[2];\n}"
  false always 0
Line 1134
  472 always 472
  = always "typedef int A;\nclass S\n{\npublic:\n    typedef float A;\n    A a;\n    virtual void fun(A x);\n};\nvoid S::fun(S::A) { };\nclass S1 : public S\n{\npublic:\n    void fun(S::A) { }\n};\nstruct T\n{\n    typedef A B;\n    B b;\n};\nfloat fun1(float A) { return A; }\nfloat fun2(float a) { float A = a++; return A; }\nfloat fun3(int a)\n{\n    typedef struct { int a; } A;\n    A s; s.a = a;\n    return s.a;\n}\nint main()\n{\n    A a = 0;\n    S::A s = fun1(a) + fun2(a) - fun3(a);\n    return a + s;\n}"
  "typedef int A;\nclass S\n{\npublic:\n    typedef float A;\n    A a;\n    virtual void fun(A x);\n};\nvoid S::fun(S::A) { };\nclass S1 : public S\n{\npublic:\n    void fun(S::A) { }\n};\nstruct T\n{\n    typedef A B;\n    B b;\n};\nfloat fun1(float A) { return A; }\nfloat fun2(float a) { float A = a++; return A; }\nfloat fun3(int a)\n{\n    typedef struct { int a; } A;\n    A s; s.a = a;\n    return s.a;\n}\nint main()\n{\n    A a = 0;\n    S::A s = fun1(a) + fun2(a) - fun3(a);\n    return a + s;\n}" always "typedef int A;\nclass S\n{\npublic:\n    typedef float A;\n    A a;\n    virtual void fun(A x);\n};\nvoid S::fun(S::A) { };\nclass S1 : public S\n{\npublic:\n    void fun(S::A) { }\n};\nstruct T\n{\n    typedef A B;\n    B b;\n};\nfloat fun1(float A) { return A; }\nfloat fun2(float a) { float A = a++; return A; }\nfloat fun3(int a)\n{\n    typedef struct { int a; } A;\n    A s; s.a = a;\n    return s.a;\n}\nint main()\n{\n    A a = 0;\n    S::A s = fun1(a) + fun2(a) - fun3(a);\n    return a + s;\n}"
Line 1168
  459 always 459
  = always "class S { public: float a ; virtual void fun ( float x ) ; } ; void S :: fun ( float ) { } ; class S1 : public S { public: void fun ( float ) { } } ; struct T { int b ; } ; float fun1 ( float A ) { return A ; } float fun2 ( float a ) { float A ; A = a ++ ; return A ; } float fun3 ( int a ) { struct A { int a ; } ; struct A s ; s . a = a ; return s . a ; } int main ( ) { int a ; a = 0 ; float s ; s = fun1 ( a ) + fun2 ( a ) - fun3 ( a ) ; return a + s ; }"
  "class S { public: float a ; virtual void fun ( float x ) ; } ; void S :: fun ( float ) { } ; class S1 : public S { public: void fun ( float ) { } } ; struct T { int b ; } ; float fun1 ( float A ) { return A ; } float fun2 ( float a ) { float A ; A = a ++ ; return A ; } float fun3 ( int a ) { struct A { int a ; } ; struct A s ; s . a = a ; return s . a ; } int main ( ) { int a ; a = 0 ; float s ; s = fun1 ( a ) + fun2 ( a ) - fun3 ( a ) ; return a + s ; }" always "class S { public: float a ; virtual void fun ( float x ) ; } ; void S :: fun ( float ) { } ; class S1 : public S { public: void fun ( float ) { } } ; struct T { int b ; } ; float fun1 ( float A ) { return A ; } float fun2 ( float a ) { float A ; A = a ++ ; return A ; } float fun3 ( int a ) { struct A { int a ; } ; struct A s ; s . a = a ; return s . a ; } int main ( ) { int a ; a = 0 ; float s ; s = fun1 ( a ) + fun2 ( a ) - fun3 ( a ) ; return a + s ; }"
Line 1201
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1201 always 1201
  expected always "class S { public: float a ; virtual void fun ( float x ) ; } ; void S :: fun ( float ) { } ; class S1 : public S { public: void fun ( float ) { } } ; struct T { int b ; } ; float fun1 ( float A ) { return A ; } float fun2 ( float a ) { float A ; A = a ++ ; return A ; } float fun3 ( int a ) { struct A { int a ; } ; struct A s ; s . a = a ; return s . a ; } int main ( ) { int a ; a = 0 ; float s ; s = fun1 ( a ) + fun2 ( a ) - fun3 ( a ) ; return a + s ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1201 always 1201
  code always "typedef int A;\nclass S\n{\npublic:\n    typedef float A;\n    A a;\n    virtual void fun(A x);\n};\nvoid S::fun(S::A) { };\nclass S1 : public S\n{\npublic:\n    void fun(S::A) { }\n};\nstruct T\n{\n    typedef A B;\n    B b;\n};\nfloat fun1(float A) { return A; }\nfloat fun2(float a) { float A = a++; return A; }\nfloat fun3(int a)\n{\n    typedef struct { int a; } A;\n    A s; s.a = a;\n    return s.a;\n}\nint main()\n{\n    A a = 0;\n    S::A s = fun1(a) + fun2(a) - fun3(a);\n    return a + s;\n}"
  false always 0
Line 1202
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1202 always 1202
  "[test.cpp:31]: (debug) valueflow.cpp:3109:valueFlowFunctionReturn bailout: function return; nontrivial function body\n" always "[test.cpp:31]: (debug) valueflow.cpp:3109:valueFlowFunctionReturn bailout: function return; nontrivial function body\n"
Line 1209
  97 always 97
  = always "typedef void (*TIFFFaxFillFunc)();\nvoid f(va_list ap)\n{\n    *va_arg(ap, TIFFFaxFillFunc*) = 0;\n}"
  "typedef void (*TIFFFaxFillFunc)();\nvoid f(va_list ap)\n{\n    *va_arg(ap, TIFFFaxFillFunc*) = 0;\n}" always "typedef void (*TIFFFaxFillFunc)();\nvoid f(va_list ap)\n{\n    *va_arg(ap, TIFFFaxFillFunc*) = 0;\n}"
Line 1214
  67 always 67
  = always "void f ( va_list ap ) { * va_arg ( ap , void ( * * ) ( ) ) = 0 ; }"
  "void f ( va_list ap ) { * va_arg ( ap , void ( * * ) ( ) ) = 0 ; }" always "void f ( va_list ap ) { * va_arg ( ap , void ( * * ) ( ) ) = 0 ; }"
Line 1218
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1218 always 1218
  expected always "void f ( va_list ap ) { * va_arg ( ap , void ( * * ) ( ) ) = 0 ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1218 always 1218
  code always "typedef void (*TIFFFaxFillFunc)();\nvoid f(va_list ap)\n{\n    *va_arg(ap, TIFFFaxFillFunc*) = 0;\n}"
  false always 0
Line 1222
  45 always 45
  = always "typedef int INT;\nvoid f()\n{\n    INT i; { }\n}"
  "typedef int INT;\nvoid f()\n{\n    INT i; { }\n}" always "typedef int INT;\nvoid f()\n{\n    INT i; { }\n}"
Line 1227
  27 always 27
  = always "void f ( ) { int i ; { } }"
  "void f ( ) { int i ; { } }" always "void f ( ) { int i ; { } }"
Line 1231
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1231 always 1231
  expected always "void f ( ) { int i ; { } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1231 always 1231
  code always "typedef int INT;\nvoid f()\n{\n    INT i; { }\n}"
  false always 0
Line 1235
  49 always 49
  = always "typedef C A;\nstruct AB : public A, public B { };"
  "typedef C A;\nstruct AB : public A, public B { };" always "typedef C A;\nstruct AB : public A, public B { };"
Line 1237
  38 always 38
  = always "struct AB : public C , public B { } ;"
  "struct AB : public C , public B { } ;" always "struct AB : public C , public B { } ;"
Line 1238
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1238 always 1238
  expected always "struct AB : public C , public B { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1238 always 1238
  code always "typedef C A;\nstruct AB : public A, public B { };"
  false always 0
Line 1239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1239 always 1239
  "" always ""
Line 1245
  54 always 54
  = always "typedef struct foo A;\nstruct A\n{\n    int alloclen;\n};"
  "typedef struct foo A;\nstruct A\n{\n    int alloclen;\n};" always "typedef struct foo A;\nstruct A\n{\n    int alloclen;\n};"
Line 1252
  30 always 30
  = always "struct A { int alloclen ; } ;"
  "struct A { int alloclen ; } ;" always "struct A { int alloclen ; } ;"
Line 1256
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1256 always 1256
  expected always "struct A { int alloclen ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1256 always 1256
  code always "typedef struct foo A;\nstruct A\n{\n    int alloclen;\n};"
Line 1257
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1257 always 1257
  "" always ""
Line 1261
  52 always 52
  = always "typedef union foo A;\nunion A\n{\n    int alloclen;\n};"
  "typedef union foo A;\nunion A\n{\n    int alloclen;\n};" always "typedef union foo A;\nunion A\n{\n    int alloclen;\n};"
Line 1268
  29 always 29
  = always "union A { int alloclen ; } ;"
  "union A { int alloclen ; } ;" always "union A { int alloclen ; } ;"
Line 1272
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1272 always 1272
  expected always "union A { int alloclen ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1272 always 1272
  code always "typedef union foo A;\nunion A\n{\n    int alloclen;\n};"
Line 1273
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1273 always 1273
  "" always ""
Line 1277
  52 always 52
  = always "typedef class foo A;\nclass A\n{\n    int alloclen;\n};"
  "typedef class foo A;\nclass A\n{\n    int alloclen;\n};" always "typedef class foo A;\nclass A\n{\n    int alloclen;\n};"
Line 1284
  29 always 29
  = always "class A { int alloclen ; } ;"
  "class A { int alloclen ; } ;" always "class A { int alloclen ; } ;"
Line 1288
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1288 always 1288
  expected always "class A { int alloclen ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1288 always 1288
  code always "typedef class foo A;\nclass A\n{\n    int alloclen;\n};"
Line 1289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1289 always 1289
  "" always ""
Line 1295
  70 always 70
  = always "typedef std::map<std::string, int> Map;\nclass MyMap : public Map\n{\n};"
  "typedef std::map<std::string, int> Map;\nclass MyMap : public Map\n{\n};" always "typedef std::map<std::string, int> Map;\nclass MyMap : public Map\n{\n};"
Line 1301
  62 always 62
  = always "class MyMap : public std :: map < std :: string , int > { } ;"
  "class MyMap : public std :: map < std :: string , int > { } ;" always "class MyMap : public std :: map < std :: string , int > { } ;"
Line 1304
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1304 always 1304
  expected always "class MyMap : public std :: map < std :: string , int > { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1304 always 1304
  code always "typedef std::map<std::string, int> Map;\nclass MyMap : public Map\n{\n};"
Line 1305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1305 always 1305
  "" always ""
Line 1309
  73 always 73
  = always "typedef std::map<std::string, int> Map;\nclass MyMap : protected Map\n{\n};"
  "typedef std::map<std::string, int> Map;\nclass MyMap : protected Map\n{\n};" always "typedef std::map<std::string, int> Map;\nclass MyMap : protected Map\n{\n};"
Line 1315
  65 always 65
  = always "class MyMap : protected std :: map < std :: string , int > { } ;"
  "class MyMap : protected std :: map < std :: string , int > { } ;" always "class MyMap : protected std :: map < std :: string , int > { } ;"
Line 1318
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1318 always 1318
  expected always "class MyMap : protected std :: map < std :: string , int > { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1318 always 1318
  code always "typedef std::map<std::string, int> Map;\nclass MyMap : protected Map\n{\n};"
Line 1319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1319 always 1319
  "" always ""
Line 1323
  71 always 71
  = always "typedef std::map<std::string, int> Map;\nclass MyMap : private Map\n{\n};"
  "typedef std::map<std::string, int> Map;\nclass MyMap : private Map\n{\n};" always "typedef std::map<std::string, int> Map;\nclass MyMap : private Map\n{\n};"
Line 1329
  63 always 63
  = always "class MyMap : private std :: map < std :: string , int > { } ;"
  "class MyMap : private std :: map < std :: string , int > { } ;" always "class MyMap : private std :: map < std :: string , int > { } ;"
Line 1332
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1332 always 1332
  expected always "class MyMap : private std :: map < std :: string , int > { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1332 always 1332
  code always "typedef std::map<std::string, int> Map;\nclass MyMap : private Map\n{\n};"
Line 1333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1333 always 1333
  "" always ""
Line 1337
  53 always 53
  = always "typedef struct foo { } A;\nstruct MyA : public A\n{\n};"
  "typedef struct foo { } A;\nstruct MyA : public A\n{\n};" always "typedef struct foo { } A;\nstruct MyA : public A\n{\n};"
Line 1343
  47 always 47
  = always "struct foo { } ; struct MyA : public foo { } ;"
  "struct foo { } ; struct MyA : public foo { } ;" always "struct foo { } ; struct MyA : public foo { } ;"
Line 1347
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1347 always 1347
  expected always "struct foo { } ; struct MyA : public foo { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1347 always 1347
  code always "typedef struct foo { } A;\nstruct MyA : public A\n{\n};"
Line 1348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1348 always 1348
  "" always ""
Line 1352
  51 always 51
  = always "typedef class foo { } A;\nclass MyA : public A\n{\n};"
  "typedef class foo { } A;\nclass MyA : public A\n{\n};" always "typedef class foo { } A;\nclass MyA : public A\n{\n};"
Line 1358
  45 always 45
  = always "class foo { } ; class MyA : public foo { } ;"
  "class foo { } ; class MyA : public foo { } ;" always "class foo { } ; class MyA : public foo { } ;"
Line 1362
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1362 always 1362
  expected always "class foo { } ; class MyA : public foo { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1362 always 1362
  code always "typedef class foo { } A;\nclass MyA : public A\n{\n};"
Line 1363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1363 always 1363
  "" always ""
Line 1369
  63 always 63
  = always "void fn() {\n    typedef foo<> bar;\n    while (0 > bar(1)) {}\n}"
  "void fn() {\n    typedef foo<> bar;\n    while (0 > bar(1)) {}\n}" always "void fn() {\n    typedef foo<> bar;\n    while (0 > bar(1)) {}\n}"
Line 1374
  code always "void fn() {\n    typedef foo<> bar;\n    while (0 > bar(1)) {}\n}"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1374 always 1374
Line 1375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1375 always 1375
  "" always ""
Line 1379
  47 always 47
  = always "typedef const struct A { int a; } * AP;\nAP ap;"
  "typedef const struct A { int a; } * AP;\nAP ap;" always "typedef const struct A { int a; } * AP;\nAP ap;"
Line 1383
  45 always 45
  = always "struct A { int a ; } ; const struct A * ap ;"
  "struct A { int a ; } ; const struct A * ap ;" always "struct A { int a ; } ; const struct A * ap ;"
Line 1385
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1385 always 1385
  expected always "struct A { int a ; } ; const struct A * ap ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1385 always 1385
  code always "typedef const struct A { int a; } * AP;\nAP ap;"
Line 1390
  42 always 42
  = always "typedef std::pair<int, int> const I;\nI i;"
  "typedef std::pair<int, int> const I;\nI i;" always "typedef std::pair<int, int> const I;\nI i;"
Line 1394
  36 always 36
  = always "const std :: pair < int , int > i ;"
  "const std :: pair < int , int > i ;" always "const std :: pair < int , int > i ;"
Line 1395
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1395 always 1395
  expected always "const std :: pair < int , int > i ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1395 always 1395
  code always "typedef std::pair<int, int> const I;\nI i;"
Line 1399
  30 always 30
  = always "typedef void (X:: *F)();\nF f;"
  "typedef void (X:: *F)();\nF f;" always "typedef void (X:: *F)();\nF f;"
Line 1403
  19 always 19
  = always "void ( * f ) ( ) ;"
  "void ( * f ) ( ) ;" always "void ( * f ) ( ) ;"
Line 1404
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1404 always 1404
  expected always "void ( * f ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1404 always 1404
  code always "typedef void (X:: *F)();\nF f;"
Line 1409
  115 always 115
  = always "typedef struct string { } string;\nvoid foo (LIST *module_name)\n{\n    bar(module_name ? module_name->string : 0);\n}"
  "typedef struct string { } string;\nvoid foo (LIST *module_name)\n{\n    bar(module_name ? module_name->string : 0);\n}" always "typedef struct string { } string;\nvoid foo (LIST *module_name)\n{\n    bar(module_name ? module_name->string : 0);\n}"
Line 1416
  105 always 105
  = always "struct string { } ; void foo ( LIST * module_name ) { bar ( module_name ? module_name . string : 0 ) ; }"
  "struct string { } ; void foo ( LIST * module_name ) { bar ( module_name ? module_name . string : 0 ) ; }" always "struct string { } ; void foo ( LIST * module_name ) { bar ( module_name ? module_name . string : 0 ) ; }"
Line 1421
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1421 always 1421
  expected always "struct string { } ; void foo ( LIST * module_name ) { bar ( module_name ? module_name . string : 0 ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1421 always 1421
  code always "typedef struct string { } string;\nvoid foo (LIST *module_name)\n{\n    bar(module_name ? module_name->string : 0);\n}"
Line 1425
  151 always 151
  = always "class Class2 {\ntypedef const Class & Const_Reference;\nvoid some_method (Const_Reference x) const {}\nvoid another_method (Const_Reference x) const {}\n}"
  "class Class2 {\ntypedef const Class & Const_Reference;\nvoid some_method (Const_Reference x) const {}\nvoid another_method (Const_Reference x) const {}\n}" always "class Class2 {\ntypedef const Class & Const_Reference;\nvoid some_method (Const_Reference x) const {}\nvoid another_method (Const_Reference x) const {}\n}"
Line 1432
  114 always 114
  = always "class Class2 { void some_method ( const Class & x ) const { } void another_method ( const Class & x ) const { } }"
  "class Class2 { void some_method ( const Class & x ) const { } void another_method ( const Class & x ) const { } }" always "class Class2 { void some_method ( const Class & x ) const { } void another_method ( const Class & x ) const { } }"
Line 1437
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1437 always 1437
  expected always "class Class2 { void some_method ( const Class & x ) const { } void another_method ( const Class & x ) const { } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1437 always 1437
  code always "class Class2 {\ntypedef const Class & Const_Reference;\nvoid some_method (Const_Reference x) const {}\nvoid another_method (Const_Reference x) const {}\n}"
Line 1441
  171 always 171
  = always "typedef char (* type1)[10];\ntypedef char (& type2)[10];\ntypedef char (& type3)[x];\ntypedef char (& type4)[x + 2];\ntype1 t1;\ntype1 (*tp1)[2];\ntype2 t2;\ntype3 t3;\ntype4 t4;"
  "typedef char (* type1)[10];\ntypedef char (& type2)[10];\ntypedef char (& type3)[x];\ntypedef char (& type4)[x + 2];\ntype1 t1;\ntype1 (*tp1)[2];\ntype2 t2;\ntype3 t3;\ntype4 t4;" always "typedef char (* type1)[10];\ntypedef char (& type2)[10];\ntypedef char (& type3)[x];\ntypedef char (& type4)[x + 2];\ntype1 t1;\ntype1 (*tp1)[2];\ntype2 t2;\ntype3 t3;\ntype4 t4;"
Line 1452
  130 always 130
  = always "char ( * t1 ) [ 10 ] ; char ( * ( * tp1 ) [ 2 ] ) [ 10 ] ; char ( & t2 ) [ 10 ] ; char ( & t3 ) [ x ] ; char ( & t4 ) [ x + 2 ] ;"
  "char ( * t1 ) [ 10 ] ; char ( * ( * tp1 ) [ 2 ] ) [ 10 ] ; char ( & t2 ) [ 10 ] ; char ( & t3 ) [ x ] ; char ( & t4 ) [ x + 2 ] ;" always "char ( * t1 ) [ 10 ] ; char ( * ( * tp1 ) [ 2 ] ) [ 10 ] ; char ( & t2 ) [ 10 ] ; char ( & t3 ) [ x ] ; char ( & t4 ) [ x + 2 ] ;"
Line 1457
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1457 always 1457
  expected always "char ( * t1 ) [ 10 ] ; char ( * ( * tp1 ) [ 2 ] ) [ 10 ] ; char ( & t2 ) [ 10 ] ; char ( & t3 ) [ x ] ; char ( & t4 ) [ x + 2 ] ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1457 always 1457
  code always "typedef char (* type1)[10];\ntypedef char (& type2)[10];\ntypedef char (& type3)[x];\ntypedef char (& type4)[x + 2];\ntype1 t1;\ntype1 (*tp1)[2];\ntype2 t2;\ntype3 t3;\ntype4 t4;"
Line 1461
  81 always 81
  = always "class A { public: int i; };\ntypedef const char (A :: * type1);\ntype1 t1 = &A::i;"
  "class A { public: int i; };\ntypedef const char (A :: * type1);\ntype1 t1 = &A::i;" always "class A { public: int i; };\ntypedef const char (A :: * type1);\ntype1 t1 = &A::i;"
Line 1466
  73 always 73
  = always "class A { public: int i ; } ; const char ( A :: * t1 ) ; t1 = & A :: i ;"
  "class A { public: int i ; } ; const char ( A :: * t1 ) ; t1 = & A :: i ;" always "class A { public: int i ; } ; const char ( A :: * t1 ) ; t1 = & A :: i ;"
Line 1468
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1468 always 1468
  expected always "class A { public: int i ; } ; const char ( A :: * t1 ) ; t1 = & A :: i ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1468 always 1468
  code always "class A { public: int i; };\ntypedef const char (A :: * type1);\ntype1 t1 = &A::i;"
Line 1473
  44 always 44
  = always "typedef char (* type1)[10];\ntype1 foo() { }"
  "typedef char (* type1)[10];\ntype1 foo() { }" always "typedef char (* type1)[10];\ntype1 foo() { }"
Line 1477
  30 always 30
  = always "char ( * foo ( ) ) [ 10 ] { }"
  "char ( * foo ( ) ) [ 10 ] { }" always "char ( * foo ( ) ) [ 10 ] { }"
Line 1478
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1478 always 1478
  expected always "char ( * foo ( ) ) [ 10 ] { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1478 always 1478
  code always "typedef char (* type1)[10];\ntype1 foo() { }"
Line 1479
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1479 always 1479
  "" always ""
Line 1483
  51 always 51
  = always "typedef char (* type1)[10];\nLOCAL(type1) foo() { }"
  "typedef char (* type1)[10];\nLOCAL(type1) foo() { }" always "typedef char (* type1)[10];\nLOCAL(type1) foo() { }"
Line 1487
  code always "typedef char (* type1)[10];\nLOCAL(type1) foo() { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1487 always 1487
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1487 always 1487
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1487 always 1487
  false always 0
Line 1492
  217 always 217
  = always "void foo()\n{\n    typedef std::basic_string<char, traits_type, allocator_type> string_type;\n    try\n    {\n        throw string_type(\"leak\");\n    }\n    catch (const string_type&)\n    {\n        pthread_exit (0);\n    }\n}"
  "void foo()\n{\n    typedef std::basic_string<char, traits_type, allocator_type> string_type;\n    try\n    {\n        throw string_type(\"leak\");\n    }\n    catch (const string_type&)\n    {\n        pthread_exit (0);\n    }\n}" always "void foo()\n{\n    typedef std::basic_string<char, traits_type, allocator_type> string_type;\n    try\n    {\n        throw string_type(\"leak\");\n    }\n    catch (const string_type&)\n    {\n        pthread_exit (0);\n    }\n}"
Line 1505
  code always "void foo()\n{\n    typedef std::basic_string<char, traits_type, allocator_type> string_type;\n    try\n    {\n        throw string_type(\"leak\");\n    }\n    catch (const string_type&)\n    {\n        pthread_exit (0);\n    }\n}"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1505 always 1505
Line 1506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1506 always 1506
  "" always ""
Line 1510
  139 always 139
  = always "typedef volatile unsigned long * const hwreg_t ;\ntypedef void *const t1[2];\ntypedef int*const *_Iterator;\nhwreg_t v1;\nt1 v2;\n_Iterator v3;"
  "typedef volatile unsigned long * const hwreg_t ;\ntypedef void *const t1[2];\ntypedef int*const *_Iterator;\nhwreg_t v1;\nt1 v2;\n_Iterator v3;" always "typedef volatile unsigned long * const hwreg_t ;\ntypedef void *const t1[2];\ntypedef int*const *_Iterator;\nhwreg_t v1;\nt1 v2;\n_Iterator v3;"
Line 1518
  70 always 70
  = always "volatile long * const v1 ; void * const v2 [ 2 ] ; int * const * v3 ;"
  "volatile long * const v1 ; void * const v2 [ 2 ] ; int * const * v3 ;" always "volatile long * const v1 ; void * const v2 [ 2 ] ; int * const * v3 ;"
Line 1521
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1521 always 1521
  expected always "volatile long * const v1 ; void * const v2 [ 2 ] ; int * const * v3 ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1521 always 1521
  code always "typedef volatile unsigned long * const hwreg_t ;\ntypedef void *const t1[2];\ntypedef int*const *_Iterator;\nhwreg_t v1;\nt1 v2;\n_Iterator v3;"
Line 1524
  code always "typedef volatile unsigned long * const hwreg_t ;\ntypedef void *const t1[2];\ntypedef int*const *_Iterator;\nhwreg_t v1;\nt1 v2;\n_Iterator v3;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1524 always 1524
Line 1525
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1525 always 1525
  "" always ""
Line 1529
  104 always 104
  = always "struct C {\n    typedef void (*fptr)();\n    const fptr pr;\n    operator const fptr& () { return pr; }\n};"
  "struct C {\n    typedef void (*fptr)();\n    const fptr pr;\n    operator const fptr& () { return pr; }\n};" always "struct C {\n    typedef void (*fptr)();\n    const fptr pr;\n    operator const fptr& () { return pr; }\n};"
Line 1536
  85 always 85
  = always "struct C { const void ( * pr ) ( ) ; operatorconstvoid(*)()& ( ) { return pr ; } } ;"
  "struct C { const void ( * pr ) ( ) ; operatorconstvoid(*)()& ( ) { return pr ; } } ;" always "struct C { const void ( * pr ) ( ) ; operatorconstvoid(*)()& ( ) { return pr ; } } ;"
Line 1541
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1541 always 1541
  expected always "struct C { const void ( * pr ) ( ) ; operatorconstvoid(*)()& ( ) { return pr ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1541 always 1541
  code always "struct C {\n    typedef void (*fptr)();\n    const fptr pr;\n    operator const fptr& () { return pr; }\n};"
Line 1542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1542 always 1542
  "" always ""
Line 1546
  58 always 58
  = always "void foo() {\n    typedef int A;\n    A a = A(1) * A(2);\n};"
  "void foo() {\n    typedef int A;\n    A a = A(1) * A(2);\n};" always "void foo() {\n    typedef int A;\n    A a = A(1) * A(2);\n};"
Line 1552
  55 always 55
  = always "void foo ( ) { int a ; a = int ( 1 ) * int ( 2 ) ; } ;"
  "void foo ( ) { int a ; a = int ( 1 ) * int ( 2 ) ; } ;" always "void foo ( ) { int a ; a = int ( 1 ) * int ( 2 ) ; } ;"
Line 1556
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1556 always 1556
  expected always "void foo ( ) { int a ; a = int ( 1 ) * int ( 2 ) ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1556 always 1556
  code always "void foo() {\n    typedef int A;\n    A a = A(1) * A(2);\n};"
Line 1557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1557 always 1557
  "" always ""
Line 1562
  61 always 61
  = always "typedef int vec2_t[2];\nvec2_t coords[4] = {1,2,3,4,5,6,7,8};"
  "typedef int vec2_t[2];\nvec2_t coords[4] = {1,2,3,4,5,6,7,8};" always "typedef int vec2_t[2];\nvec2_t coords[4] = {1,2,3,4,5,6,7,8};"
Line 1566
  61 always 61
  = always "int coords [ 4 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;"
  "int coords [ 4 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;" always "int coords [ 4 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;"
Line 1567
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1567 always 1567
  expected always "int coords [ 4 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1567 always 1567
  code always "typedef int vec2_t[2];\nvec2_t coords[4] = {1,2,3,4,5,6,7,8};"
Line 1568
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1568 always 1568
  "" always ""
Line 1572
  69 always 69
  = always "typedef int vec2_t[2];\nvec2_t coords[4][5][6+1] = {1,2,3,4,5,6,7,8};"
  "typedef int vec2_t[2];\nvec2_t coords[4][5][6+1] = {1,2,3,4,5,6,7,8};" always "typedef int vec2_t[2];\nvec2_t coords[4][5][6+1] = {1,2,3,4,5,6,7,8};"
Line 1576
  77 always 77
  = always "int coords [ 4 ] [ 5 ] [ 6 + 1 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;"
  "int coords [ 4 ] [ 5 ] [ 6 + 1 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;" always "int coords [ 4 ] [ 5 ] [ 6 + 1 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;"
Line 1577
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1577 always 1577
  expected always "int coords [ 4 ] [ 5 ] [ 6 + 1 ] [ 2 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1577 always 1577
  code always "typedef int vec2_t[2];\nvec2_t coords[4][5][6+1] = {1,2,3,4,5,6,7,8};"
Line 1578
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1578 always 1578
  "" always ""
Line 1583
  154 always 154
  = always "template<typename DISPATCHER> class SomeTemplateClass {\n    typedef void (SomeTemplateClass<DISPATCHER>::*MessageDispatcherFunc)(SerialInputMessage&);\n};"
  "template<typename DISPATCHER> class SomeTemplateClass {\n    typedef void (SomeTemplateClass<DISPATCHER>::*MessageDispatcherFunc)(SerialInputMessage&);\n};" always "template<typename DISPATCHER> class SomeTemplateClass {\n    typedef void (SomeTemplateClass<DISPATCHER>::*MessageDispatcherFunc)(SerialInputMessage&);\n};"
Line 1587
  63 always 63
  = always "template < typename DISPATCHER > class SomeTemplateClass { } ;"
  "template < typename DISPATCHER > class SomeTemplateClass { } ;" always "template < typename DISPATCHER > class SomeTemplateClass { } ;"
Line 1588
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1588 always 1588
  expected always "template < typename DISPATCHER > class SomeTemplateClass { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1588 always 1588
  code always "template<typename DISPATCHER> class SomeTemplateClass {\n    typedef void (SomeTemplateClass<DISPATCHER>::*MessageDispatcherFunc)(SerialInputMessage&);\n};"
Line 1589
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1589 always 1589
  "" always ""
Line 1593
  175 always 175
  = always "typedef enum {qfalse, qtrue} qboolean;\ntypedef qboolean (*localEntitiyAddFunc_t) (struct le_s * le, entity_t * ent);\nvoid f()\n{\n    qboolean b;\n    localEntitiyAddFunc_t f;\n}"
  "typedef enum {qfalse, qtrue} qboolean;\ntypedef qboolean (*localEntitiyAddFunc_t) (struct le_s * le, entity_t * ent);\nvoid f()\n{\n    qboolean b;\n    localEntitiyAddFunc_t f;\n}" always "typedef enum {qfalse, qtrue} qboolean;\ntypedef qboolean (*localEntitiyAddFunc_t) (struct le_s * le, entity_t * ent);\nvoid f()\n{\n    qboolean b;\n    localEntitiyAddFunc_t f;\n}"
Line 1601
  86 always 86
  = always "enum qboolean { qfalse , qtrue } ; void f ( ) { qboolean b ; qboolean ( * f ) ( ) ; }"
  "enum qboolean { qfalse , qtrue } ; void f ( ) { qboolean b ; qboolean ( * f ) ( ) ; }" always "enum qboolean { qfalse , qtrue } ; void f ( ) { qboolean b ; qboolean ( * f ) ( ) ; }"
Line 1602
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1602 always 1602
  expected always "enum qboolean { qfalse , qtrue } ; void f ( ) { qboolean b ; qboolean ( * f ) ( ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1602 always 1602
  code always "typedef enum {qfalse, qtrue} qboolean;\ntypedef qboolean (*localEntitiyAddFunc_t) (struct le_s * le, entity_t * ent);\nvoid f()\n{\n    qboolean b;\n    localEntitiyAddFunc_t f;\n}"
  false always 0
Line 1603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1603 always 1603
  "" always ""
Line 1607
  142 always 142
  = always "typedef       unsigned char   (*Mf_GetIndexByte_Func)          (void);\ntypedef const unsigned char * (*Mf_GetPointerToCurrentPos_Func)(void);"
  "typedef       unsigned char   (*Mf_GetIndexByte_Func)          (void);\ntypedef const unsigned char * (*Mf_GetPointerToCurrentPos_Func)(void);" always "typedef       unsigned char   (*Mf_GetIndexByte_Func)          (void);\ntypedef const unsigned char * (*Mf_GetPointerToCurrentPos_Func)(void);"
Line 1611
  code1 always "typedef       unsigned char   (*Mf_GetIndexByte_Func)          (void);\ntypedef const unsigned char * (*Mf_GetPointerToCurrentPos_Func)(void);"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1611 always 1611
Line 1612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1612 always 1612
  "" always ""
Line 1614
  77 always 77
  = always "typedef unsigned long uint32_t;\ntypedef uint32_t (*write_type_t) (uint32_t);"
  "typedef unsigned long uint32_t;\ntypedef uint32_t (*write_type_t) (uint32_t);" always "typedef unsigned long uint32_t;\ntypedef uint32_t (*write_type_t) (uint32_t);"
Line 1618
  code2 always "typedef unsigned long uint32_t;\ntypedef uint32_t (*write_type_t) (uint32_t);"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1618 always 1618
Line 1619
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1619 always 1619
  "" always ""
Line 1623
  58 always 58
  = always "typedef char TString[256];\nvoid f()\n{\n    TString a, b;\n}"
  "typedef char TString[256];\nvoid f()\n{\n    TString a, b;\n}" always "typedef char TString[256];\nvoid f()\n{\n    TString a, b;\n}"
Line 1630
  49 always 49
  = always "void f ( ) { char a [ 256 ] ; char b [ 256 ] ; }"
  "void f ( ) { char a [ 256 ] ; char b [ 256 ] ; }" always "void f ( ) { char a [ 256 ] ; char b [ 256 ] ; }"
Line 1631
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1631 always 1631
  expected1 always "void f ( ) { char a [ 256 ] ; char b [ 256 ] ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1631 always 1631
  code1 always "typedef char TString[256];\nvoid f()\n{\n    TString a, b;\n}"
  false always 0
Line 1632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1632 always 1632
  "" always ""
Line 1634
  74 always 74
  = always "typedef char TString[256];\nvoid f()\n{\n    TString a = { 0 }, b = { 0 };\n}"
  "typedef char TString[256];\nvoid f()\n{\n    TString a = { 0 }, b = { 0 };\n}" always "typedef char TString[256];\nvoid f()\n{\n    TString a = { 0 }, b = { 0 };\n}"
Line 1641
  73 always 73
  = always "void f ( ) { char a [ 256 ] ; a = { 0 } ; char b [ 256 ] ; b = { 0 } ; }"
  "void f ( ) { char a [ 256 ] ; a = { 0 } ; char b [ 256 ] ; b = { 0 } ; }" always "void f ( ) { char a [ 256 ] ; a = { 0 } ; char b [ 256 ] ; b = { 0 } ; }"
Line 1642
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1642 always 1642
  expected2 always "void f ( ) { char a [ 256 ] ; a = { 0 } ; char b [ 256 ] ; b = { 0 } ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1642 always 1642
  code2 always "typedef char TString[256];\nvoid f()\n{\n    TString a = { 0 }, b = { 0 };\n}"
  false always 0
  false always 0
Line 1643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1643 always 1643
  "" always ""
Line 1645
  68 always 68
  = always "typedef char TString[256];\nvoid f()\n{\n    TString a = \"\", b = \"\";\n}"
  "typedef char TString[256];\nvoid f()\n{\n    TString a = \"\", b = \"\";\n}" always "typedef char TString[256];\nvoid f()\n{\n    TString a = \"\", b = \"\";\n}"
Line 1652
  67 always 67
  = always "void f ( ) { char a [ 256 ] ; a = \"\" ; char b [ 256 ] ; b = \"\" ; }"
  "void f ( ) { char a [ 256 ] ; a = \"\" ; char b [ 256 ] ; b = \"\" ; }" always "void f ( ) { char a [ 256 ] ; a = \"\" ; char b [ 256 ] ; b = \"\" ; }"
Line 1653
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1653 always 1653
  expected3 always "void f ( ) { char a [ 256 ] ; a = \"\" ; char b [ 256 ] ; b = \"\" ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1653 always 1653
  code3 always "typedef char TString[256];\nvoid f()\n{\n    TString a = \"\", b = \"\";\n}"
  false always 0
  false always 0
Line 1654
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1654 always 1654
  "" always ""
Line 1656
  76 always 76
  = always "typedef char TString[256];\nvoid f()\n{\n    TString a = \"1234\", b = \"5678\";\n}"
  "typedef char TString[256];\nvoid f()\n{\n    TString a = \"1234\", b = \"5678\";\n}" always "typedef char TString[256];\nvoid f()\n{\n    TString a = \"1234\", b = \"5678\";\n}"
Line 1663
  75 always 75
  = always "void f ( ) { char a [ 256 ] ; a = \"1234\" ; char b [ 256 ] ; b = \"5678\" ; }"
  "void f ( ) { char a [ 256 ] ; a = \"1234\" ; char b [ 256 ] ; b = \"5678\" ; }" always "void f ( ) { char a [ 256 ] ; a = \"1234\" ; char b [ 256 ] ; b = \"5678\" ; }"
Line 1664
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1664 always 1664
  expected4 always "void f ( ) { char a [ 256 ] ; a = \"1234\" ; char b [ 256 ] ; b = \"5678\" ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1664 always 1664
  code4 always "typedef char TString[256];\nvoid f()\n{\n    TString a = \"1234\", b = \"5678\";\n}"
  false always 0
  false always 0
Line 1665
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1665 always 1665
  "" always ""
Line 1669
  29 always 29
  = always "typedef float x[3];\nx a,b,c;"
  "typedef float x[3];\nx a,b,c;" always "typedef float x[3];\nx a,b,c;"
Line 1671
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1671 always 1671
  code always "typedef float x[3];\nx a,b,c;"
Line 1672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1672 always 1672
  "float a [ 3 ] ; float b [ 3 ] ; float c [ 3 ] ;" always "float a [ 3 ] ; float b [ 3 ] ; float c [ 3 ] ;"
Line 1673
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1673 always 1673
  "" always ""
Line 1677
  55 always 55
  = always "typedef typeof(__type1() + __type2()) __type;__type t;"
  "typedef typeof(__type1() + __type2()) __type;__type t;" always "typedef typeof(__type1() + __type2()) __type;__type t;"
Line 1679
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1679 always 1679
  code always "typedef typeof(__type1() + __type2()) __type;__type t;"
Line 1680
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1680 always 1680
  "typeof ( __type1 ( ) + __type2 ( ) ) t ;" always "typeof ( __type1 ( ) + __type2 ( ) ) t ;"
Line 1681
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1681 always 1681
  "" always ""
Line 1685
  75 always 75
  = always "typedef BAR<int> Foo;\nint main() {\n    Foo b(0);\n    return b > Foo(10);\n}"
  "typedef BAR<int> Foo;\nint main() {\n    Foo b(0);\n    return b > Foo(10);\n}" always "typedef BAR<int> Foo;\nint main() {\n    Foo b(0);\n    return b > Foo(10);\n}"
Line 1690
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1690 always 1690
  code always "typedef BAR<int> Foo;\nint main() {\n    Foo b(0);\n    return b > Foo(10);\n}"
  true always 1
  false always 0
Line 1691
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1691 always 1691
  "int main ( ) { BAR < int > b ( 0 ) ; return b > BAR < int > ( 10 ) ; }" always "int main ( ) { BAR < int > b ( 0 ) ; return b > BAR < int > ( 10 ) ; }"
Line 1692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1692 always 1692
  "" always ""
Line 1696
  44 always 44
  = always "typedef long* GEN;\nextern GEN (*foo)(long);"
  "typedef long* GEN;\nextern GEN (*foo)(long);" always "typedef long* GEN;\nextern GEN (*foo)(long);"
Line 1698
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1698 always 1698
  code always "typedef long* GEN;\nextern GEN (*foo)(long);"
Line 1699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1699 always 1699
  "" always ""
Line 1703
  139 always 139
  = always "typedef int ( * Function ) ( ) ;\nvoid f ( ) {\n    ((Function * (*) (char *, char *, int, int)) global[6]) ( \"assoc\", \"eggdrop\", 106, 0);\n}"
  "typedef int ( * Function ) ( ) ;\nvoid f ( ) {\n    ((Function * (*) (char *, char *, int, int)) global[6]) ( \"assoc\", \"eggdrop\", 106, 0);\n}" always "typedef int ( * Function ) ( ) ;\nvoid f ( ) {\n    ((Function * (*) (char *, char *, int, int)) global[6]) ( \"assoc\", \"eggdrop\", 106, 0);\n}"
Line 1707
  126 always 126
  = always "void f ( ) { ( ( int ( * * ( * ) ( char * , char * , int , int ) ) ( ) ) global [ 6 ] ) ( \"assoc\" , \"eggdrop\" , 106 , 0 ) ; }"
  "void f ( ) { ( ( int ( * * ( * ) ( char * , char * , int , int ) ) ( ) ) global [ 6 ] ) ( \"assoc\" , \"eggdrop\" , 106 , 0 ) ; }" always "void f ( ) { ( ( int ( * * ( * ) ( char * , char * , int , int ) ) ( ) ) global [ 6 ] ) ( \"assoc\" , \"eggdrop\" , 106 , 0 ) ; }"
Line 1710
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1710 always 1710
  expected always "void f ( ) { ( ( int ( * * ( * ) ( char * , char * , int , int ) ) ( ) ) global [ 6 ] ) ( \"assoc\" , \"eggdrop\" , 106 , 0 ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1710 always 1710
  code always "typedef int ( * Function ) ( ) ;\nvoid f ( ) {\n    ((Function * (*) (char *, char *, int, int)) global[6]) ( \"assoc\", \"eggdrop\", 106, 0);\n}"
Line 1711
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1711 always 1711
  "[test.cpp:3]: (debug) valueflow.cpp:1319:valueFlowConditionExpressions bailout: Skipping function due to incomplete variable global\n" always "[test.cpp:3]: (debug) valueflow.cpp:1319:valueFlowConditionExpressions bailout: Skipping function due to incomplete variable global\n"
Line 1715
  44 always 44
  = always "typedef FMAC1 void (* a) ();\nvoid *(*b) ();"
  "typedef FMAC1 void (* a) ();\nvoid *(*b) ();" always "typedef FMAC1 void (* a) ();\nvoid *(*b) ();"
Line 1717
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1717 always 1717
  code always "typedef FMAC1 void (* a) ();\nvoid *(*b) ();"
Line 1718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1718 always 1718
  "void * ( * b ) ( ) ;" always "void * ( * b ) ( ) ;"
Line 1719
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1719 always 1719
  "" always ""
Line 1723
  127 always 127
  = always "typedef int (*CompilerHook)();\ntypedef struct VirtualMachine\n{\n    CompilerHook *(*compilerHookVector)(void);\n}VirtualMachine;"
  "typedef int (*CompilerHook)();\ntypedef struct VirtualMachine\n{\n    CompilerHook *(*compilerHookVector)(void);\n}VirtualMachine;" always "typedef int (*CompilerHook)();\ntypedef struct VirtualMachine\n{\n    CompilerHook *(*compilerHookVector)(void);\n}VirtualMachine;"
Line 1728
  80 always 80
  = always "struct VirtualMachine { int ( * * ( * compilerHookVector ) ( void ) ) ( ) ; } ;"
  "struct VirtualMachine { int ( * * ( * compilerHookVector ) ( void ) ) ( ) ; } ;" always "struct VirtualMachine { int ( * * ( * compilerHookVector ) ( void ) ) ( ) ; } ;"
Line 1732
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1732 always 1732
  expected always "struct VirtualMachine { int ( * * ( * compilerHookVector ) ( void ) ) ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1732 always 1732
  code always "typedef int (*CompilerHook)();\ntypedef struct VirtualMachine\n{\n    CompilerHook *(*compilerHookVector)(void);\n}VirtualMachine;"
Line 1733
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1733 always 1733
  "" always ""
Line 1737
  69 always 69
  = always "typedef int pread_f ( int ) ;\npread_f *(*test_func)(char *filename);"
  "typedef int pread_f ( int ) ;\npread_f *(*test_func)(char *filename);" always "typedef int pread_f ( int ) ;\npread_f *(*test_func)(char *filename);"
Line 1739
  56 always 56
  = always "int ( * ( * test_func ) ( char * filename ) ) ( int ) ;"
  "int ( * ( * test_func ) ( char * filename ) ) ( int ) ;" always "int ( * ( * test_func ) ( char * filename ) ) ( int ) ;"
Line 1740
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1740 always 1740
  expected always "int ( * ( * test_func ) ( char * filename ) ) ( int ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1740 always 1740
  code always "typedef int pread_f ( int ) ;\npread_f *(*test_func)(char *filename);"
Line 1741
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1741 always 1741
  "" always ""
Line 1746
  69 always 69
  = always "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[1]);"
  "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[1]);" always "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[1]);"
Line 1748
  33 always 33
  = always "int ( * ( efuncs [ 1 ] ) ) ( ) ;"
  "int ( * ( efuncs [ 1 ] ) ) ( ) ;" always "int ( * ( efuncs [ 1 ] ) ) ( ) ;"
Line 1749
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1749 always 1749
  expected always "int ( * ( efuncs [ 1 ] ) ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1749 always 1749
  code always "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[1]);"
Line 1750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1750 always 1750
  "" always ""
Line 1753
  85 always 85
  = always "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[]) = { NULL, NULL };"
  "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[]) = { NULL, NULL };" always "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[]) = { NULL, NULL };"
Line 1755
  49 always 49
  = always "int ( * ( efuncs [ ] ) ) ( ) = { NULL , NULL } ;"
  "int ( * ( efuncs [ ] ) ) ( ) = { NULL , NULL } ;" always "int ( * ( efuncs [ ] ) ) ( ) = { NULL , NULL } ;"
Line 1756
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1756 always 1756
  expected always "int ( * ( efuncs [ ] ) ) ( ) = { NULL , NULL } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1756 always 1756
  code always "typedef int RexxFunctionHandler();\nRexxFunctionHandler *(efuncs[]) = { NULL, NULL };"
Line 1757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1757 always 1757
  "" always ""
Line 1764
  72 always 72
  = always "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const { }\n};"
  "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const { }\n};" always "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const { }\n};"
Line 1768
  45 always 45
  = always "class Fred { operatorint** ( ) const { } } ;"
  "class Fred { operatorint** ( ) const { } } ;" always "class Fred { operatorint** ( ) const { } } ;"
Line 1772
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1772 always 1772
  expected always "class Fred { operatorint** ( ) const { } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1772 always 1772
  code always "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const { }\n};"
Line 1773
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1773 always 1773
  "" always ""
Line 1777
  68 always 68
  = always "class Fred {\n    typedef int INT;\n    void f1() const { INT i; }\n};"
  "class Fred {\n    typedef int INT;\n    void f1() const { INT i; }\n};" always "class Fred {\n    typedef int INT;\n    void f1() const { INT i; }\n};"
Line 1781
  47 always 47
  = always "class Fred { void f1 ( ) const { int i ; } } ;"
  "class Fred { void f1 ( ) const { int i ; } } ;" always "class Fred { void f1 ( ) const { int i ; } } ;"
Line 1785
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1785 always 1785
  expected always "class Fred { void f1 ( ) const { int i ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1785 always 1785
  code always "class Fred {\n    typedef int INT;\n    void f1() const { INT i; }\n};"
Line 1786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1786 always 1786
  "" always ""
Line 1790
  97 always 97
  = always "class Fred {\n    typedef int INT;\n    void f1() const;\n};\nvoid Fred::f1() const { INT i; f(i); }"
  "class Fred {\n    typedef int INT;\n    void f1() const;\n};\nvoid Fred::f1() const { INT i; f(i); }" always "class Fred {\n    typedef int INT;\n    void f1() const;\n};\nvoid Fred::f1() const { INT i; f(i); }"
Line 1795
  85 always 85
  = always "class Fred { void f1 ( ) const ; } ; void Fred :: f1 ( ) const { int i ; f ( i ) ; }"
  "class Fred { void f1 ( ) const ; } ; void Fred :: f1 ( ) const { int i ; f ( i ) ; }" always "class Fred { void f1 ( ) const ; } ; void Fred :: f1 ( ) const { int i ; f ( i ) ; }"
Line 1800
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1800 always 1800
  expected always "class Fred { void f1 ( ) const ; } ; void Fred :: f1 ( ) const { int i ; f ( i ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1800 always 1800
  code always "class Fred {\n    typedef int INT;\n    void f1() const;\n};\nvoid Fred::f1() const { INT i; f(i); }"
Line 1801
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1801 always 1801
  "" always ""
Line 1805
  98 always 98
  = always "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const;\n};\nFred::operator F() const { }"
  "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const;\n};\nFred::operator F() const { }" always "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const;\n};\nFred::operator F() const { }"
Line 1810
  79 always 79
  = always "class Fred { operatorint** ( ) const ; } ; Fred :: operatorint** ( ) const { }"
  "class Fred { operatorint** ( ) const ; } ; Fred :: operatorint** ( ) const { }" always "class Fred { operatorint** ( ) const ; } ; Fred :: operatorint** ( ) const { }"
Line 1815
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1815 always 1815
  expected always "class Fred { operatorint** ( ) const ; } ; Fred :: operatorint** ( ) const { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1815 always 1815
  code always "class Fred {\n    typedef int* (Fred::*F);\n    operator F() const;\n};\nFred::operator F() const { }"
Line 1816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1816 always 1816
  "" always ""
Line 1821
  69 always 69
  = always "struct B {};\ntypedef struct A : public B {\n    void f();\n} a, *aPtr;"
  "struct B {};\ntypedef struct A : public B {\n    void f();\n} a, *aPtr;" always "struct B {};\ntypedef struct A : public B {\n    void f();\n} a, *aPtr;"
Line 1825
  54 always 54
  = always "struct B { } ; struct A : public B { void f ( ) ; } ;"
  "struct B { } ; struct A : public B { void f ( ) ; } ;" always "struct B { } ; struct A : public B { void f ( ) ; } ;"
Line 1829
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1829 always 1829
  expected always "struct B { } ; struct A : public B { void f ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1829 always 1829
  code always "struct B {};\ntypedef struct A : public B {\n    void f();\n} a, *aPtr;"
Line 1830
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1830 always 1830
  "" always ""
Line 1834
  147 always 147
  = always "typedef long (*state_func_t)(void);\ntypedef state_func_t (*state_t)(void);\nstate_t current_state = death;\nstatic char get_runlevel(const state_t);"
  "typedef long (*state_func_t)(void);\ntypedef state_func_t (*state_t)(void);\nstate_t current_state = death;\nstatic char get_runlevel(const state_t);" always "typedef long (*state_func_t)(void);\ntypedef state_func_t (*state_t)(void);\nstate_t current_state = death;\nstatic char get_runlevel(const state_t);"
Line 1838
  147 always 147
  = always "long ( * ( * current_state ) ( void ) ) ( void ) ; current_state = death ; static char get_runlevel ( const long ( * ( * ) ( void ) ) ( void ) ) ;"
  "long ( * ( * current_state ) ( void ) ) ( void ) ; current_state = death ; static char get_runlevel ( const long ( * ( * ) ( void ) ) ( void ) ) ;" always "long ( * ( * current_state ) ( void ) ) ( void ) ; current_state = death ; static char get_runlevel ( const long ( * ( * ) ( void ) ) ( void ) ) ;"
Line 1840
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1840 always 1840
  expected always "long ( * ( * current_state ) ( void ) ) ( void ) ; current_state = death ; static char get_runlevel ( const long ( * ( * ) ( void ) ) ( void ) ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1840 always 1840
  code always "typedef long (*state_func_t)(void);\ntypedef state_func_t (*state_t)(void);\nstate_t current_state = death;\nstatic char get_runlevel(const state_t);"
Line 1841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1841 always 1841
  "" always ""
Line 1845
  38 always 38
  = always "typedef _Packed struct S { long l; };"
  "typedef _Packed struct S { long l; };" always "typedef _Packed struct S { long l; };"
Line 1846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1846 always 1846
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1846 always 1846
  code always "typedef _Packed struct S { long l; };"
  true always 1
  false always 0
Line 1847
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1847 always 1847
  "" always ""
Line 1851
  26 always 26
  = always "void f1(typedef int x) {}"
  "void f1(typedef int x) {}" always "void f1(typedef int x) {}"
Line 1852
  30 always 30
  = always "void f1 ( typedef int x ) { }"
  "void f1 ( typedef int x ) { }" always "void f1 ( typedef int x ) { }"
Line 1853
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1853 always 1853
  expected always "void f1 ( typedef int x ) { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1853 always 1853
  code always "void f1(typedef int x) {}"
  true always 1
  false always 0
Line 1854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1854 always 1854
  "" always ""
Line 1858
  43 always 43
  = always "typedef char Str[10]; int x = sizeof(Str);"
  "typedef char Str[10]; int x = sizeof(Str);" always "typedef char Str[10]; int x = sizeof(Str);"
Line 1859
  37 always 37
  = always "int x ; x = sizeof ( char [ 10 ] ) ;"
  "int x ; x = sizeof ( char [ 10 ] ) ;" always "int x ; x = sizeof ( char [ 10 ] ) ;"
Line 1860
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1860 always 1860
  expected always "int x ; x = sizeof ( char [ 10 ] ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1860 always 1860
  code always "typedef char Str[10]; int x = sizeof(Str);"
Line 1864
  63 always 63
  = always "typedef struct A A_t;\nA_t a;\ntypedef struct A { } A_t;\nA_t a1;"
  "typedef struct A A_t;\nA_t a;\ntypedef struct A { } A_t;\nA_t a1;" always "typedef struct A A_t;\nA_t a;\ntypedef struct A { } A_t;\nA_t a1;"
Line 1868
  42 always 42
  = always "struct A a ; struct A { } ; struct A a1 ;"
  "struct A a ; struct A { } ; struct A a1 ;" always "struct A a ; struct A { } ; struct A a1 ;"
Line 1869
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1869 always 1869
  expected always "struct A a ; struct A { } ; struct A a1 ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1869 always 1869
  code always "typedef struct A A_t;\nA_t a;\ntypedef struct A { } A_t;\nA_t a1;"
Line 1873
  121 always 121
  = always "typedef int (Tcl_ObjCmdProc) (int x);\ntypedef struct LangVtab\n{\n    Tcl_ObjCmdProc * (*V_LangOptionCommand);\n} LangVtab;"
  "typedef int (Tcl_ObjCmdProc) (int x);\ntypedef struct LangVtab\n{\n    Tcl_ObjCmdProc * (*V_LangOptionCommand);\n} LangVtab;" always "typedef int (Tcl_ObjCmdProc) (int x);\ntypedef struct LangVtab\n{\n    Tcl_ObjCmdProc * (*V_LangOptionCommand);\n} LangVtab;"
Line 1878
  70 always 70
  = always "struct LangVtab { int ( * ( * V_LangOptionCommand ) ) ( int x ) ; } ;"
  "struct LangVtab { int ( * ( * V_LangOptionCommand ) ) ( int x ) ; } ;" always "struct LangVtab { int ( * ( * V_LangOptionCommand ) ) ( int x ) ; } ;"
Line 1882
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1882 always 1882
  expected always "struct LangVtab { int ( * ( * V_LangOptionCommand ) ) ( int x ) ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1882 always 1882
  code always "typedef int (Tcl_ObjCmdProc) (int x);\ntypedef struct LangVtab\n{\n    Tcl_ObjCmdProc * (*V_LangOptionCommand);\n} LangVtab;"
Line 1886
  58 always 58
  = always "typedef struct s { };\nvoid f() {\n    sizeof(struct s);\n};"
  "typedef struct s { };\nvoid f() {\n    sizeof(struct s);\n};" always "typedef struct s { };\nvoid f() {\n    sizeof(struct s);\n};"
Line 1890
  54 always 54
  = always "struct s { } ; void f ( ) { sizeof ( struct s ) ; } ;"
  "struct s { } ; void f ( ) { sizeof ( struct s ) ; } ;" always "struct s { } ; void f ( ) { sizeof ( struct s ) ; } ;"
Line 1894
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1894 always 1894
  expected always "struct s { } ; void f ( ) { sizeof ( struct s ) ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1894 always 1894
  code always "typedef struct s { };\nvoid f() {\n    sizeof(struct s);\n};"
Line 1895
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1895 always 1895
  "" always ""
Line 1899
  "typedef\n" always "typedef\n"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1899 always 1899
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1899 always 1899
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1899 always 1899
  false always 0
Line 1901
  "typedef constexpr\n" always "typedef constexpr\n"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1901 always 1901
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1901 always 1901
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1901 always 1901
  false always 0
Line 1905
  "class A {\npublic:\n  typedef int F(int idx);\n};\nclass B {\npublic:\n  A::F ** f;\n};\nint main()\n{\n  B * b = new B;\n  b->f = new A::F * [ 10 ];\n}" always "class A {\npublic:\n  typedef int F(int idx);\n};\nclass B {\npublic:\n  A::F ** f;\n};\nint main()\n{\n  B * b = new B;\n  b->f = new A::F * [ 10 ];\n}"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1905 always 1905
Line 1918
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1918 always 1918
  "[test.cpp:12]: (debug) valueflow.cpp:1319:valueFlowConditionExpressions bailout: Skipping function due to incomplete variable idx\n" always "[test.cpp:12]: (debug) valueflow.cpp:1319:valueFlowConditionExpressions bailout: Skipping function due to incomplete variable idx\n"
Line 1922
  42 always 42
  = always "typedef char Str[10];\nvoid f(Str &cl) { }"
  "typedef char Str[10];\nvoid f(Str &cl) { }" always "typedef char Str[10];\nvoid f(Str &cl) { }"
Line 1926
  36 always 36
  = always "void f ( char ( & cl ) [ 10 ] ) { }"
  "void f ( char ( & cl ) [ 10 ] ) { }" always "void f ( char ( & cl ) [ 10 ] ) { }"
Line 1928
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1928 always 1928
  expected always "void f ( char ( & cl ) [ 10 ] ) { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1928 always 1928
  code always "typedef char Str[10];\nvoid f(Str &cl) { }"
Line 1932
  17 always 17
  = always "typedef y x () x"
  "typedef y x () x" always "typedef y x () x"
Line 1933
  code1 always "typedef y x () x"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1933 always 1933
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1933 always 1933
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1933 always 1933
  false always 0
Line 1935
  27 always 27
  = always "typedef struct template <>"
  "typedef struct template <>" always "typedef struct template <>"
Line 1936
  code2 always "typedef struct template <>"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1936 always 1936
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1936 always 1936
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1936 always 1936
  false always 0
Line 1938
  13 always 13
  = always "typedef ::<>"
  "typedef ::<>" always "typedef ::<>"
Line 1939
  code3 always "typedef ::<>"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1939 always 1939
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1939 always 1939
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1939 always 1939
  false always 0
Line 1943
  49 always 49
  = always "typedef FOO ((BAR)(void, int, const int, int*));"
  "typedef FOO ((BAR)(void, int, const int, int*));" always "typedef FOO ((BAR)(void, int, const int, int*));"
Line 1944
  2 always 2
  = always ";"
  ";" always ";"
Line 1945
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1945 always 1945
  expected always ";"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1945 always 1945
  code always "typedef FOO ((BAR)(void, int, const int, int*));"
Line 1946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1946 always 1946
  "" always ""
Line 1950
  146 always 146
  = always "class relational {\n    typedef void (safe_bool_helper::*safe_bool)();\npublic:\n    operator safe_bool() const;\n    safe_bool operator!() const;\n};"
  "class relational {\n    typedef void (safe_bool_helper::*safe_bool)();\npublic:\n    operator safe_bool() const;\n    safe_bool operator!() const;\n};" always "class relational {\n    typedef void (safe_bool_helper::*safe_bool)();\npublic:\n    operator safe_bool() const;\n    safe_bool operator!() const;\n};"
Line 1956
  93 always 93
  = always "class relational { public: operatorsafe_bool ( ) const ; safe_bool operator! ( ) const ; } ;"
  "class relational { public: operatorsafe_bool ( ) const ; safe_bool operator! ( ) const ; } ;" always "class relational { public: operatorsafe_bool ( ) const ; safe_bool operator! ( ) const ; } ;"
Line 1962
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1962 always 1962
  expected always "class relational { public: operatorsafe_bool ( ) const ; safe_bool operator! ( ) const ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1962 always 1962
  code always "class relational {\n    typedef void (safe_bool_helper::*safe_bool)();\npublic:\n    operator safe_bool() const;\n    safe_bool operator!() const;\n};"
Line 1963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1963 always 1963
  "" always ""
Line 1967
  51 always 51
  = always "typedef FOO (*(*BAR)(void, int, const int, int*));"
  "typedef FOO (*(*BAR)(void, int, const int, int*));" always "typedef FOO (*(*BAR)(void, int, const int, int*));"
Line 1968
  2 always 2
  = always ";"
  ";" always ";"
Line 1969
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1969 always 1969
  expected always ";"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1969 always 1969
  code always "typedef FOO (*(*BAR)(void, int, const int, int*));"
Line 1970
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1970 always 1970
  "" always ""
Line 1974
  29 always 29
  = always "typedef short int (*x)(...);"
  "typedef short int (*x)(...);" always "typedef short int (*x)(...);"
Line 1975
  2 always 2
  = always ";"
  ";" always ";"
Line 1976
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1976 always 1976
  expected always ";"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1976 always 1976
  code always "typedef short int (*x)(...);"
Line 1977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1977 always 1977
  "" always ""
Line 1981
  59 always 59
  = always "class Fred {\n    typedef void f(int) const;\n    f func;\n};"
  "class Fred {\n    typedef void f(int) const;\n    f func;\n};" always "class Fred {\n    typedef void f(int) const;\n    f func;\n};"
Line 1985
  43 always 43
  = always "class Fred { void func ( int ) const ; } ;"
  "class Fred { void func ( int ) const ; } ;" always "class Fred { void func ( int ) const ; } ;"
Line 1986
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1986 always 1986
  expected always "class Fred { void func ( int ) const ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1986 always 1986
  code always "class Fred {\n    typedef void f(int) const;\n    f func;\n};"
Line 1987
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1987 always 1987
  "" always ""
Line 1991
  41 always 41
  = always "typedef int IA[2];\nvoid f(const IA&) {};"
  "typedef int IA[2];\nvoid f(const IA&) {};" always "typedef int IA[2];\nvoid f(const IA&) {};"
Line 1993
  39 always 39
  = always "void f ( const int ( & ) [ 2 ] ) { } ;"
  "void f ( const int ( & ) [ 2 ] ) { } ;" always "void f ( const int ( & ) [ 2 ] ) { } ;"
Line 1994
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1994 always 1994
  expected always "void f ( const int ( & ) [ 2 ] ) { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1994 always 1994
  code always "typedef int IA[2];\nvoid f(const IA&) {};"
Line 1995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  1995 always 1995
  "" always ""
Line 1999
  110 always 110
  = always "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nnamespace NS {\n    T A::f() {}\n}"
  "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nnamespace NS {\n    T A::f() {}\n}" always "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nnamespace NS {\n    T A::f() {}\n}"
Line 2008
  83 always 83
  = always "namespace NS { class A { int * f ( ) ; } ; } namespace NS { int * A :: f ( ) { } }"
  "namespace NS { class A { int * f ( ) ; } ; } namespace NS { int * A :: f ( ) { } }" always "namespace NS { class A { int * f ( ) ; } ; } namespace NS { int * A :: f ( ) { } }"
Line 2017
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2017 always 2017
  expected1 always "namespace NS { class A { int * f ( ) ; } ; } namespace NS { int * A :: f ( ) { } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2017 always 2017
  code1 always "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nnamespace NS {\n    T A::f() {}\n}"
Line 2018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2018 always 2018
  "" always ""
Line 2020
  97 always 97
  = always "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nNS::T NS::A::f() {}"
  "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nNS::T NS::A::f() {}" always "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nNS::T NS::A::f() {}"
Line 2027
  72 always 72
  = always "namespace NS { class A { int * f ( ) ; } ; } int * NS :: A :: f ( ) { }"
  "namespace NS { class A { int * f ( ) ; } ; } int * NS :: A :: f ( ) { }" always "namespace NS { class A { int * f ( ) ; } ; } int * NS :: A :: f ( ) { }"
Line 2034
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2034 always 2034
  expected2 always "namespace NS { class A { int * f ( ) ; } ; } int * NS :: A :: f ( ) { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2034 always 2034
  code2 always "namespace NS {\n    typedef int (*T)();\n    class A {\n        T f();\n    };\n}\nNS::T NS::A::f() {}"
Line 2035
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2035 always 2035
  "" always ""
Line 2037
  184 always 184
  = always "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    namespace NS2 {\n        T A::f() {}\n    }\n}"
  "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    namespace NS2 {\n        T A::f() {}\n    }\n}" always "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    namespace NS2 {\n        T A::f() {}\n    }\n}"
Line 2050
  121 always 121
  = always "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { namespace NS2 { int * A :: f ( ) { } } }"
  "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { namespace NS2 { int * A :: f ( ) { } } }" always "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { namespace NS2 { int * A :: f ( ) { } } }"
Line 2063
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2063 always 2063
  expected3 always "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { namespace NS2 { int * A :: f ( ) { } } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2063 always 2063
  code3 always "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    namespace NS2 {\n        T A::f() {}\n    }\n}"
Line 2064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2064 always 2064
  "" always ""
Line 2066
  164 always 164
  = always "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    NS2::T NS2::A::f() {}\n}"
  "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    NS2::T NS2::A::f() {}\n}" always "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    NS2::T NS2::A::f() {}\n}"
Line 2077
  110 always 110
  = always "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { int * NS2 :: A :: f ( ) { } }"
  "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { int * NS2 :: A :: f ( ) { } }" always "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { int * NS2 :: A :: f ( ) { } }"
Line 2088
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2088 always 2088
  expected4 always "namespace NS1 { namespace NS2 { class A { int * f ( ) ; } ; } } namespace NS1 { int * NS2 :: A :: f ( ) { } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2088 always 2088
  code4 always "namespace NS1 {\n    namespace NS2 {\n        typedef int (*T)();\n        class A {\n            T f();\n        };\n    }\n}\nnamespace NS1 {\n    NS2::T NS2::A::f() {}\n}"
Line 2089
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2089 always 2089
  "" always ""
Line 2093
  36 always 36
  = always "typedef long Long;\nnamespace NS {\n}"
  "typedef long Long;\nnamespace NS {\n}" always "typedef long Long;\nnamespace NS {\n}"
Line 2096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2096 always 2096
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2096 always 2096
  code always "typedef long Long;\nnamespace NS {\n}"
Line 2097
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2097 always 2097
  "" always ""
Line 2101
  72 always 72
  = always "struct s { double x; };\ntypedef struct s (*binop) (struct s, struct s);"
  "struct s { double x; };\ntypedef struct s (*binop) (struct s, struct s);" always "struct s { double x; };\ntypedef struct s (*binop) (struct s, struct s);"
Line 2103
  26 always 26
  = always "struct s { double x ; } ;"
  "struct s { double x ; } ;" always "struct s { double x ; } ;"
Line 2104
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2104 always 2104
  expected always "struct s { double x ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2104 always 2104
  code always "struct s { double x; };\ntypedef struct s (*binop) (struct s, struct s);"
Line 2105
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2105 always 2105
  "" always ""
Line 2109
  75 always 75
  = always "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nA::data d;"
  "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nA::data d;" always "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nA::data d;"
Line 2116
  75 always 75
  = always "class A { public: struct data { int a [ 4 ] ; } ; } ; struct A :: data d ;"
  "class A { public: struct data { int a [ 4 ] ; } ; } ; struct A :: data d ;" always "class A { public: struct data { int a [ 4 ] ; } ; } ; struct A :: data d ;"
Line 2123
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2123 always 2123
  expected1 always "class A { public: struct data { int a [ 4 ] ; } ; } ; struct A :: data d ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2123 always 2123
  code1 always "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nA::data d;"
Line 2124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2124 always 2124
  "" always ""
Line 2126
  77 always 77
  = always "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\n::A::data d;"
  "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\n::A::data d;" always "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\n::A::data d;"
Line 2133
  78 always 78
  = always "class A { public: struct data { int a [ 4 ] ; } ; } ; struct :: A :: data d ;"
  "class A { public: struct data { int a [ 4 ] ; } ; } ; struct :: A :: data d ;" always "class A { public: struct data { int a [ 4 ] ; } ; } ; struct :: A :: data d ;"
Line 2140
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2140 always 2140
  expected2 always "class A { public: struct data { int a [ 4 ] ; } ; } ; struct :: A :: data d ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2140 always 2140
  code2 always "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\n::A::data d;"
Line 2141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2141 always 2141
  "" always ""
Line 2143
  96 always 96
  = always "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nclass B : public ::A::data { };"
  "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nclass B : public ::A::data { };" always "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nclass B : public ::A::data { };"
Line 2150
  90 always 90
  = always "class A { public: struct data { int a [ 4 ] ; } ; } ; class B : public :: A :: data { } ;"
  "class A { public: struct data { int a [ 4 ] ; } ; } ; class B : public :: A :: data { } ;" always "class A { public: struct data { int a [ 4 ] ; } ; } ; class B : public :: A :: data { } ;"
Line 2157
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2157 always 2157
  expected3 always "class A { public: struct data { int a [ 4 ] ; } ; } ; class B : public :: A :: data { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2157 always 2157
  code3 always "class A {\npublic:\n  typedef struct {\n    int a[4];\n  } data;\n};\nclass B : public ::A::data { };"
Line 2158
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2158 always 2158
  "" always ""
Line 2162
  159 always 159
  = always "class symbol_table {\npublic:\n  typedef expression_error::error_code (*valid_func)(void *cbparam, const char *name, expression_space space);\n  valid_func f;\n};"
  "class symbol_table {\npublic:\n  typedef expression_error::error_code (*valid_func)(void *cbparam, const char *name, expression_space space);\n  valid_func f;\n};" always "class symbol_table {\npublic:\n  typedef expression_error::error_code (*valid_func)(void *cbparam, const char *name, expression_space space);\n  valid_func f;\n};"
Line 2167
  78 always 78
  = always "class symbol_table { public: expression_error :: error_code ( * f ) ( ) ; } ;"
  "class symbol_table { public: expression_error :: error_code ( * f ) ( ) ; } ;" always "class symbol_table { public: expression_error :: error_code ( * f ) ( ) ; } ;"
Line 2171
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2171 always 2171
  expected always "class symbol_table { public: expression_error :: error_code ( * f ) ( ) ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2171 always 2171
  code always "class symbol_table {\npublic:\n  typedef expression_error::error_code (*valid_func)(void *cbparam, const char *name, expression_space space);\n  valid_func f;\n};"
  true always 1
  false always 0
Line 2172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2172 always 2172
  "" always ""
Line 2176
  21 always 21
  = always "typedef struct x { }"
  "typedef struct x { }" always "typedef struct x { }"
Line 2177
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2177 always 2177
  code always "typedef struct x { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2177 always 2177
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2177 always 2177
  false always 0
Line 2181
  19 always 19
  = always "typedef x y\n(A); y"
  "typedef x y\n(A); y" always "typedef x y\n(A); y"
Line 2183
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2183 always 2183
  code always "typedef x y\n(A); y"
Line 2184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2184 always 2184
  "" always ""
Line 2188
  43 always 43
  = always "typedef struct Fred Fred;\nstruct Fred { };"
  "typedef struct Fred Fred;\nstruct Fred { };" always "typedef struct Fred Fred;\nstruct Fred { };"
Line 2190
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2190 always 2190
  code always "typedef struct Fred Fred;\nstruct Fred { };"
Line 2191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2191 always 2191
  "" always ""
Line 2193
  43 always 43
  = always "struct Fred { };\ntypedef struct Fred Fred;"
  "struct Fred { };\ntypedef struct Fred Fred;" always "struct Fred { };\ntypedef struct Fred Fred;"
Line 2195
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2195 always 2195
  code1 always "struct Fred { };\ntypedef struct Fred Fred;"
Line 2196
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2196 always 2196
  "" always ""
Line 2200
  122 always 122
  = always "typedef struct Fred { } Fred;\nFred * foo() {\n    Fred *fred;\n    fred = se_alloc(sizeof(struct Fred));\n    return fred;\n}"
  "typedef struct Fred { } Fred;\nFred * foo() {\n    Fred *fred;\n    fred = se_alloc(sizeof(struct Fred));\n    return fred;\n}" always "typedef struct Fred { } Fred;\nFred * foo() {\n    Fred *fred;\n    fred = se_alloc(sizeof(struct Fred));\n    return fred;\n}"
Line 2206
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2206 always 2206
  code always "typedef struct Fred { } Fred;\nFred * foo() {\n    Fred *fred;\n    fred = se_alloc(sizeof(struct Fred));\n    return fred;\n}"
Line 2207
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2207 always 2207
  "" always ""
Line 2211
  21 always 21
  = always "typedef a x[];\ny = x"
  "typedef a x[];\ny = x" always "typedef a x[];\ny = x"
Line 2213
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2213 always 2213
  code always "typedef a x[];\ny = x"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2213 always 2213
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2213 always 2213
  false always 0
Line 2217
  57 always 57
  = always "typedef struct { } Fred;\nvoid foo()\n{\n    Fred * Fred;\n}"
  "typedef struct { } Fred;\nvoid foo()\n{\n    Fred * Fred;\n}" always "typedef struct { } Fred;\nvoid foo()\n{\n    Fred * Fred;\n}"
Line 2222
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2222 always 2222
  code always "typedef struct { } Fred;\nvoid foo()\n{\n    Fred * Fred;\n}"
Line 2223
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2223 always 2223
  "" always ""
Line 2227
  55 always 55
  = always "typedef struct { } Fred;\nvoid foo()\n{\n    Fred Fred;\n}"
  "typedef struct { } Fred;\nvoid foo()\n{\n    Fred Fred;\n}" always "typedef struct { } Fred;\nvoid foo()\n{\n    Fred Fred;\n}"
Line 2232
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2232 always 2232
  code always "typedef struct { } Fred;\nvoid foo()\n{\n    Fred Fred;\n}"
Line 2233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2233 always 2233
  "" always ""
Line 2237
  64 always 64
  = always "typedef int (*in_func) (void FAR *, unsigned char FAR * FAR *);"
  "typedef int (*in_func) (void FAR *, unsigned char FAR * FAR *);" always "typedef int (*in_func) (void FAR *, unsigned char FAR * FAR *);"
Line 2238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2238 always 2238
  ";" always ";"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2238 always 2238
  code always "typedef int (*in_func) (void FAR *, unsigned char FAR * FAR *);"
Line 2239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2239 always 2239
  "" always ""
Line 2243
  26 always 26
  = always "( int typedef char x; ){}"
  "( int typedef char x; ){}" always "( int typedef char x; ){}"
Line 2244
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2244 always 2244
  code always "( int typedef char x; ){}"
Line 2245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2245 always 2245
  "" always ""
Line 2249
  33 always 33
  = always "typedef void f ();\ntypedef { f }"
  "typedef void f ();\ntypedef { f }" always "typedef void f ();\ntypedef { f }"
Line 2250
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2250 always 2250
  code always "typedef void f ();\ntypedef { f }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2250 always 2250
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2250 always 2250
  false always 0
Line 2254
  41 always 41
  = always "typedef int x[]; int main() { return x }"
  "typedef int x[]; int main() { return x }" always "typedef int x[]; int main() { return x }"
Line 2255
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2255 always 2255
  code always "typedef int x[]; int main() { return x }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2255 always 2255
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2255 always 2255
  false always 0
Line 2259
  85 always 85
  = always "typedef long* GEN;\nvoid sort_factor(GEN *y, long n) {\n    GEN a, b;\n    foo(a, b);\n}"
  "typedef long* GEN;\nvoid sort_factor(GEN *y, long n) {\n    GEN a, b;\n    foo(a, b);\n}" always "typedef long* GEN;\nvoid sort_factor(GEN *y, long n) {\n    GEN a, b;\n    foo(a, b);\n}"
Line 2264
  83 always 83
  = always "void sort_factor ( long * * y , long n ) { long * a ; long * b ; foo ( a , b ) ; }"
  "void sort_factor ( long * * y , long n ) { long * a ; long * b ; foo ( a , b ) ; }" always "void sort_factor ( long * * y , long n ) { long * a ; long * b ; foo ( a , b ) ; }"
Line 2268
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2268 always 2268
  expected always "void sort_factor ( long * * y , long n ) { long * a ; long * b ; foo ( a , b ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2268 always 2268
  code always "typedef long* GEN;\nvoid sort_factor(GEN *y, long n) {\n    GEN a, b;\n    foo(a, b);\n}"
Line 2272
  34 always 34
  = always "typedef int&& rref;\nrref var = 0;"
  "typedef int&& rref;\nrref var = 0;" always "typedef int&& rref;\nrref var = 0;"
Line 2274
  23 always 23
  = always "int && var ; var = 0 ;"
  "int && var ; var = 0 ;" always "int && var ; var = 0 ;"
Line 2275
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2275 always 2275
  expected always "int && var ; var = 0 ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2275 always 2275
  code always "typedef int&& rref;\nrref var = 0;"
Line 2276
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2276 always 2276
  "" always ""
Line 2280
  859 always 859
  = always "namespace A {\n    namespace B {\n        namespace D {\n            typedef int DKIPtr;\n        }\n        struct ZClass {\n            void set1(const A::B::D::DKIPtr& p) {\n                membervariable1 = p;\n            }\n            void set2(const ::A::B::D::DKIPtr& p) {\n                membervariable2 = p;\n            }\n            void set3(const B::D::DKIPtr& p) {\n                membervariable3 = p;\n            }\n            void set4(const ::B::D::DKIPtr& p) {\n                membervariable4 = p;\n            }\n            void set5(const C::D::DKIPtr& p) {\n                membervariable5 = p;\n            }\n            A::B::D::DKIPtr membervariable1;\n            ::A::B::D::DKIPtr membervariable2;\n            B::D::DKIPtr membervariable3;\n            ::B::D::DKIPtr membervariable4;\n            C::D::DKIPtr membervariable5;\n        };\n    }\n}"
  "namespace A {\n    namespace B {\n        namespace D {\n            typedef int DKIPtr;\n        }\n        struct ZClass {\n            void set1(const A::B::D::DKIPtr& p) {\n                membervariable1 = p;\n            }\n            void set2(const ::A::B::D::DKIPtr& p) {\n                membervariable2 = p;\n            }\n            void set3(const B::D::DKIPtr& p) {\n                membervariable3 = p;\n            }\n            void set4(const ::B::D::DKIPtr& p) {\n                membervariable4 = p;\n            }\n            void set5(const C::D::DKIPtr& p) {\n                membervariable5 = p;\n            }\n            A::B::D::DKIPtr membervariable1;\n            ::A::B::D::DKIPtr membervariable2;\n            B::D::DKIPtr membervariable3;\n            ::B::D::DKIPtr membervariable4;\n            C::D::DKIPtr membervariable5;\n        };\n    }\n}" always "namespace A {\n    namespace B {\n        namespace D {\n            typedef int DKIPtr;\n        }\n        struct ZClass {\n            void set1(const A::B::D::DKIPtr& p) {\n                membervariable1 = p;\n            }\n            void set2(const ::A::B::D::DKIPtr& p) {\n                membervariable2 = p;\n            }\n            void set3(const B::D::DKIPtr& p) {\n                membervariable3 = p;\n            }\n            void set4(const ::B::D::DKIPtr& p) {\n                membervariable4 = p;\n            }\n            void set5(const C::D::DKIPtr& p) {\n                membervariable5 = p;\n            }\n            A::B::D::DKIPtr membervariable1;\n            ::A::B::D::DKIPtr membervariable2;\n            B::D::DKIPtr membervariable3;\n            ::B::D::DKIPtr membervariable4;\n            C::D::DKIPtr membervariable5;\n        };\n    }\n}"
Line 2309
  490 always 490
  = always "namespace A { namespace B { struct ZClass { void set1 ( const int & p ) { membervariable1 = p ; } void set2 ( const int & p ) { membervariable2 = p ; } void set3 ( const int & p ) { membervariable3 = p ; } void set4 ( const :: B :: D :: DKIPtr & p ) { membervariable4 = p ; } void set5 ( const C :: D :: DKIPtr & p ) { membervariable5 = p ; } int membervariable1 ; int membervariable2 ; int membervariable3 ; :: B :: D :: DKIPtr membervariable4 ; C :: D :: DKIPtr membervariable5 ; } ; } }"
  "namespace A { namespace B { struct ZClass { void set1 ( const int & p ) { membervariable1 = p ; } void set2 ( const int & p ) { membervariable2 = p ; } void set3 ( const int & p ) { membervariable3 = p ; } void set4 ( const :: B :: D :: DKIPtr & p ) { membervariable4 = p ; } void set5 ( const C :: D :: DKIPtr & p ) { membervariable5 = p ; } int membervariable1 ; int membervariable2 ; int membervariable3 ; :: B :: D :: DKIPtr membervariable4 ; C :: D :: DKIPtr membervariable5 ; } ; } }" always "namespace A { namespace B { struct ZClass { void set1 ( const int & p ) { membervariable1 = p ; } void set2 ( const int & p ) { membervariable2 = p ; } void set3 ( const int & p ) { membervariable3 = p ; } void set4 ( const :: B :: D :: DKIPtr & p ) { membervariable4 = p ; } void set5 ( const C :: D :: DKIPtr & p ) { membervariable5 = p ; } int membervariable1 ; int membervariable2 ; int membervariable3 ; :: B :: D :: DKIPtr membervariable4 ; C :: D :: DKIPtr membervariable5 ; } ; } }"
Line 2335
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2335 always 2335
  expected always "namespace A { namespace B { struct ZClass { void set1 ( const int & p ) { membervariable1 = p ; } void set2 ( const int & p ) { membervariable2 = p ; } void set3 ( const int & p ) { membervariable3 = p ; } void set4 ( const :: B :: D :: DKIPtr & p ) { membervariable4 = p ; } void set5 ( const C :: D :: DKIPtr & p ) { membervariable5 = p ; } int membervariable1 ; int membervariable2 ; int membervariable3 ; :: B :: D :: DKIPtr membervariable4 ; C :: D :: DKIPtr membervariable5 ; } ; } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2335 always 2335
  code always "namespace A {\n    namespace B {\n        namespace D {\n            typedef int DKIPtr;\n        }\n        struct ZClass {\n            void set1(const A::B::D::DKIPtr& p) {\n                membervariable1 = p;\n            }\n            void set2(const ::A::B::D::DKIPtr& p) {\n                membervariable2 = p;\n            }\n            void set3(const B::D::DKIPtr& p) {\n                membervariable3 = p;\n            }\n            void set4(const ::B::D::DKIPtr& p) {\n                membervariable4 = p;\n            }\n            void set5(const C::D::DKIPtr& p) {\n                membervariable5 = p;\n            }\n            A::B::D::DKIPtr membervariable1;\n            ::A::B::D::DKIPtr membervariable2;\n            B::D::DKIPtr membervariable3;\n            ::B::D::DKIPtr membervariable4;\n            C::D::DKIPtr membervariable5;\n        };\n    }\n}"
  true always 1
  false always 0
Line 2336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2336 always 2336
  "" always ""
Line 2340
  59 always 59
  = always "typedef typename A B;\ntypedef typename B C;\ntypename C c;\n"
  "typedef typename A B;\ntypedef typename B C;\ntypename C c;\n" always "typedef typename A B;\ntypedef typename B C;\ntypename C c;\n"
Line 2343
  6 always 6
  = always "A c ;"
  "A c ;" always "A c ;"
Line 2344
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2344 always 2344
  expected1 always "A c ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2344 always 2344
  code1 always "typedef typename A B;\ntypedef typename B C;\ntypename C c;\n"
Line 2346
  50 always 50
  = always "typedef typename A B;\ntypedef typename B C;\nC c;\n"
  "typedef typename A B;\ntypedef typename B C;\nC c;\n" always "typedef typename A B;\ntypedef typename B C;\nC c;\n"
Line 2349
  6 always 6
  = always "A c ;"
  "A c ;" always "A c ;"
Line 2350
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2350 always 2350
  expected2 always "A c ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2350 always 2350
  code2 always "typedef typename A B;\ntypedef typename B C;\nC c;\n"
Line 2352
  41 always 41
  = always "typedef typename A B;\ntypedef B C;\nC c;\n"
  "typedef typename A B;\ntypedef B C;\nC c;\n" always "typedef typename A B;\ntypedef B C;\nC c;\n"
Line 2355
  6 always 6
  = always "A c ;"
  "A c ;" always "A c ;"
Line 2356
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2356 always 2356
  expected3 always "A c ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2356 always 2356
  code3 always "typedef typename A B;\ntypedef B C;\nC c;\n"
Line 2358
  41 always 41
  = always "typedef A B;\ntypedef typename B C;\nC c;\n"
  "typedef A B;\ntypedef typename B C;\nC c;\n" always "typedef A B;\ntypedef typename B C;\nC c;\n"
Line 2361
  6 always 6
  = always "A c ;"
  "A c ;" always "A c ;"
Line 2362
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2362 always 2362
  expected4 always "A c ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2362 always 2362
  code4 always "typedef A B;\ntypedef typename B C;\nC c;\n"
Line 2364
  32 always 32
  = always "typedef A B;\ntypedef B C;\nC c;\n"
  "typedef A B;\ntypedef B C;\nC c;\n" always "typedef A B;\ntypedef B C;\nC c;\n"
Line 2367
  6 always 6
  = always "A c ;"
  "A c ;" always "A c ;"
Line 2368
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2368 always 2368
  expected5 always "A c ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2368 always 2368
  code5 always "typedef A B;\ntypedef B C;\nC c;\n"
Line 2371
  60 always 60
  = always "typedef typename T::U V;\ntypedef typename T::W (V::*Fn)();\n"
  "typedef typename T::U V;\ntypedef typename T::W (V::*Fn)();\n" always "typedef typename T::U V;\ntypedef typename T::W (V::*Fn)();\n"
Line 2373
  2 always 2
  = always ";"
  ";" always ";"
Line 2374
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2374 always 2374
  expected5614 always ";"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2374 always 2374
  code5614 always "typedef typename T::U V;\ntypedef typename T::W (V::*Fn)();\n"
Line 2378
  359 always 359
  = always "template<\ntypename DataType,\ntypename SpaceType,\ntypename TrafoConfig>\nclass AsmTraits1 {\n    typedef typename SpaceType::TrafoType TrafoType;\n    typedef typename TrafoType::ShapeType ShapeType;\n    typedef typename TrafoType::template Evaluator<ShapeType, DataType>::Type TrafoEvaluator;\n    enum  {\n      domain_dim = TrafoEvaluator::domain_dim,\n    };\n};"
  "template<\ntypename DataType,\ntypename SpaceType,\ntypename TrafoConfig>\nclass AsmTraits1 {\n    typedef typename SpaceType::TrafoType TrafoType;\n    typedef typename TrafoType::ShapeType ShapeType;\n    typedef typename TrafoType::template Evaluator<ShapeType, DataType>::Type TrafoEvaluator;\n    enum  {\n      domain_dim = TrafoEvaluator::domain_dim,\n    };\n};" always "template<\ntypename DataType,\ntypename SpaceType,\ntypename TrafoConfig>\nclass AsmTraits1 {\n    typedef typename SpaceType::TrafoType TrafoType;\n    typedef typename TrafoType::ShapeType ShapeType;\n    typedef typename TrafoType::template Evaluator<ShapeType, DataType>::Type TrafoEvaluator;\n    enum  {\n      domain_dim = TrafoEvaluator::domain_dim,\n    };\n};"
Line 2391
  244 always 244
  = always "template < typename DataType , typename SpaceType , typename TrafoConfig > class AsmTraits1 { enum Anonymous0 { domain_dim = SpaceType :: TrafoType :: Evaluator < SpaceType :: TrafoType :: ShapeType , DataType > :: Type :: domain_dim , } ; } ;"
  "template < typename DataType , typename SpaceType , typename TrafoConfig > class AsmTraits1 { enum Anonymous0 { domain_dim = SpaceType :: TrafoType :: Evaluator < SpaceType :: TrafoType :: ShapeType , DataType > :: Type :: domain_dim , } ; } ;" always "template < typename DataType , typename SpaceType , typename TrafoConfig > class AsmTraits1 { enum Anonymous0 { domain_dim = SpaceType :: TrafoType :: Evaluator < SpaceType :: TrafoType :: ShapeType , DataType > :: Type :: domain_dim , } ; } ;"
Line 2399
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2399 always 2399
  expected always "template < typename DataType , typename SpaceType , typename TrafoConfig > class AsmTraits1 { enum Anonymous0 { domain_dim = SpaceType :: TrafoType :: Evaluator < SpaceType :: TrafoType :: ShapeType , DataType > :: Type :: domain_dim , } ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2399 always 2399
  code always "template<\ntypename DataType,\ntypename SpaceType,\ntypename TrafoConfig>\nclass AsmTraits1 {\n    typedef typename SpaceType::TrafoType TrafoType;\n    typedef typename TrafoType::ShapeType ShapeType;\n    typedef typename TrafoType::template Evaluator<ShapeType, DataType>::Type TrafoEvaluator;\n    enum  {\n      domain_dim = TrafoEvaluator::domain_dim,\n    };\n};"
Line 2400
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2400 always 2400
  "" always ""
Line 2404
  32 always 32
  = always "typedef int T;\nvoid f() { T:; }"
  "typedef int T;\nvoid f() { T:; }" always "typedef int T;\nvoid f() { T:; }"
Line 2406
  21 always 21
  = always "void f ( ) { T : ; }"
  "void f ( ) { T : ; }" always "void f ( ) { T : ; }"
Line 2407
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2407 always 2407
  expected always "void f ( ) { T : ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2407 always 2407
  code always "typedef int T;\nvoid f() { T:; }"
Line 2411
  44 always 44
  = always "typedef struct { enum {A,B}; } AB;\nx=AB::B;"
  "typedef struct { enum {A,B}; } AB;\nx=AB::B;" always "typedef struct { enum {A,B}; } AB;\nx=AB::B;"
Line 2413
  58 always 58
  = always "struct AB { enum Anonymous0 { A , B } ; } ; x = AB :: B ;"
  "struct AB { enum Anonymous0 { A , B } ; } ; x = AB :: B ;" always "struct AB { enum Anonymous0 { A , B } ; } ; x = AB :: B ;"
Line 2414
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2414 always 2414
  expected always "struct AB { enum Anonymous0 { A , B } ; } ; x = AB :: B ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2414 always 2414
  code always "typedef struct { enum {A,B}; } AB;\nx=AB::B;"
Line 2418
  69 always 69
  = always "typedef unsigned unsignedTypedef;\nunsignedTypedef t1 ;\nunsigned t2 ;"
  "typedef unsigned unsignedTypedef;\nunsignedTypedef t1 ;\nunsigned t2 ;" always "typedef unsigned unsignedTypedef;\nunsignedTypedef t1 ;\nunsigned t2 ;"
Line 2421
  36 always 36
  = always "unsigned int t1 ; unsigned int t2 ;"
  "unsigned int t1 ; unsigned int t2 ;" always "unsigned int t1 ; unsigned int t2 ;"
Line 2423
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2423 always 2423
  expected always "unsigned int t1 ; unsigned int t2 ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2423 always 2423
  code always "typedef unsigned unsignedTypedef;\nunsignedTypedef t1 ;\nunsigned t2 ;"
  false always 0
Line 2424
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2424 always 2424
  "" always ""
Line 2428
  237 always 237
  = always "void fn() {\n    typedef std::vector<CharacterConversion> CharacterToConversion;\n    CharacterToConversion c2c;\n    for (CharacterToConversion::iterator it = c2c.begin(); it != c2c.end(); ++it) {}\n    CharacterToConversion().swap(c2c);\n}"
  "void fn() {\n    typedef std::vector<CharacterConversion> CharacterToConversion;\n    CharacterToConversion c2c;\n    for (CharacterToConversion::iterator it = c2c.begin(); it != c2c.end(); ++it) {}\n    CharacterToConversion().swap(c2c);\n}" always "void fn() {\n    typedef std::vector<CharacterConversion> CharacterToConversion;\n    CharacterToConversion c2c;\n    for (CharacterToConversion::iterator it = c2c.begin(); it != c2c.end(); ++it) {}\n    CharacterToConversion().swap(c2c);\n}"
Line 2434
  232 always 232
  = always "void fn ( ) { std :: vector < CharacterConversion > c2c ; for ( std :: vector < CharacterConversion > :: iterator it = c2c . begin ( ) ; it != c2c . end ( ) ; ++ it ) { } std :: vector < CharacterConversion > ( ) . swap ( c2c ) ; }"
  "void fn ( ) { std :: vector < CharacterConversion > c2c ; for ( std :: vector < CharacterConversion > :: iterator it = c2c . begin ( ) ; it != c2c . end ( ) ; ++ it ) { } std :: vector < CharacterConversion > ( ) . swap ( c2c ) ; }" always "void fn ( ) { std :: vector < CharacterConversion > c2c ; for ( std :: vector < CharacterConversion > :: iterator it = c2c . begin ( ) ; it != c2c . end ( ) ; ++ it ) { } std :: vector < CharacterConversion > ( ) . swap ( c2c ) ; }"
Line 2439
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2439 always 2439
  expected always "void fn ( ) { std :: vector < CharacterConversion > c2c ; for ( std :: vector < CharacterConversion > :: iterator it = c2c . begin ( ) ; it != c2c . end ( ) ; ++ it ) { } std :: vector < CharacterConversion > ( ) . swap ( c2c ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2439 always 2439
  code always "void fn() {\n    typedef std::vector<CharacterConversion> CharacterToConversion;\n    CharacterToConversion c2c;\n    for (CharacterToConversion::iterator it = c2c.begin(); it != c2c.end(); ++it) {}\n    CharacterToConversion().swap(c2c);\n}"
  false always 0
Line 2440
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2440 always 2440
  "" always ""
Line 2444
  134 always 134
  = always "typedef struct bstr {} bstr;\nstruct bstr bstr0(const char *s) {\n    return (struct bstr) { (unsigned char *)s, s ? strlen(s) : 0 };\n}"
  "typedef struct bstr {} bstr;\nstruct bstr bstr0(const char *s) {\n    return (struct bstr) { (unsigned char *)s, s ? strlen(s) : 0 };\n}" always "typedef struct bstr {} bstr;\nstruct bstr bstr0(const char *s) {\n    return (struct bstr) { (unsigned char *)s, s ? strlen(s) : 0 };\n}"
Line 2448
  133 always 133
  = always "struct bstr { } ; struct bstr bstr0 ( const char * s ) { return ( struct bstr ) { ( unsigned char * ) s , s ? strlen ( s ) : 0 } ; }"
  "struct bstr { } ; struct bstr bstr0 ( const char * s ) { return ( struct bstr ) { ( unsigned char * ) s , s ? strlen ( s ) : 0 } ; }" always "struct bstr { } ; struct bstr bstr0 ( const char * s ) { return ( struct bstr ) { ( unsigned char * ) s , s ? strlen ( s ) : 0 } ; }"
Line 2452
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2452 always 2452
  expected always "struct bstr { } ; struct bstr bstr0 ( const char * s ) { return ( struct bstr ) { ( unsigned char * ) s , s ? strlen ( s ) : 0 } ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2452 always 2452
  code always "typedef struct bstr {} bstr;\nstruct bstr bstr0(const char *s) {\n    return (struct bstr) { (unsigned char *)s, s ? strlen(s) : 0 };\n}"
  false always 0
Line 2453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2453 always 2453
  "" always ""
Line 2457
  121 always 121
  = always "struct ClassyClass {\nint id;\ntypedef int (ClassyClass::*funky_type);\noperator funky_type() {\nreturn &ClassyClass::id;\n}}"
  "struct ClassyClass {\nint id;\ntypedef int (ClassyClass::*funky_type);\noperator funky_type() {\nreturn &ClassyClass::id;\n}}" always "struct ClassyClass {\nint id;\ntypedef int (ClassyClass::*funky_type);\noperator funky_type() {\nreturn &ClassyClass::id;\n}}"
Line 2463
  95 always 95
  = always "struct ClassyClass { int id ; operatorintClassyClass::* ( ) { return & ClassyClass :: id ; } }"
  "struct ClassyClass { int id ; operatorintClassyClass::* ( ) { return & ClassyClass :: id ; } }" always "struct ClassyClass { int id ; operatorintClassyClass::* ( ) { return & ClassyClass :: id ; } }"
Line 2468
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2468 always 2468
  expected always "struct ClassyClass { int id ; operatorintClassyClass::* ( ) { return & ClassyClass :: id ; } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2468 always 2468
  code always "struct ClassyClass {\nint id;\ntypedef int (ClassyClass::*funky_type);\noperator funky_type() {\nreturn &ClassyClass::id;\n}}"
  false always 0
Line 2469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2469 always 2469
  "" always ""
Line 2473
  94 always 94
  = always "namespace Baz {\n  typedef char* T1;\n  typedef T1 XX;\n}\nnamespace Baz { }\nenum Bar { XX = 1 };"
  "namespace Baz {\n  typedef char* T1;\n  typedef T1 XX;\n}\nnamespace Baz { }\nenum Bar { XX = 1 };" always "namespace Baz {\n  typedef char* T1;\n  typedef T1 XX;\n}\nnamespace Baz { }\nenum Bar { XX = 1 };"
Line 2479
  22 always 22
  = always "enum Bar { XX = 1 } ;"
  "enum Bar { XX = 1 } ;" always "enum Bar { XX = 1 } ;"
Line 2480
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2480 always 2480
  exp always "enum Bar { XX = 1 } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2480 always 2480
  code always "namespace Baz {\n  typedef char* T1;\n  typedef T1 XX;\n}\nnamespace Baz { }\nenum Bar { XX = 1 };"
  false always 0
Line 2481
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2481 always 2481
  "" always ""
Line 2485
  145 always 145
  = always "typedef char test_utf8_char[5];\nstatic test_utf8_char const bad_chars[] = { };\nstatic void report_good(bool passed, test_utf8_char const c) { };"
  "typedef char test_utf8_char[5];\nstatic test_utf8_char const bad_chars[] = { };\nstatic void report_good(bool passed, test_utf8_char const c) { };" always "typedef char test_utf8_char[5];\nstatic test_utf8_char const bad_chars[] = { };\nstatic void report_good(bool passed, test_utf8_char const c) { };"
Line 2488
  113 always 113
  = always "static const char bad_chars [ ] [ 5 ] = { } ; static void report_good ( bool passed , const char c [ 5 ] ) { } ;"
  "static const char bad_chars [ ] [ 5 ] = { } ; static void report_good ( bool passed , const char c [ 5 ] ) { } ;" always "static const char bad_chars [ ] [ 5 ] = { } ; static void report_good ( bool passed , const char c [ 5 ] ) { } ;"
Line 2490
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2490 always 2490
  exp always "static const char bad_chars [ ] [ 5 ] = { } ; static void report_good ( bool passed , const char c [ 5 ] ) { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2490 always 2490
  code always "typedef char test_utf8_char[5];\nstatic test_utf8_char const bad_chars[] = { };\nstatic void report_good(bool passed, test_utf8_char const c) { };"
  false always 0
Line 2491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2491 always 2491
  "" always ""
Line 2495
  417 always 417
  = always "typedef float vec3[3];\ntypedef float mat3x3[3][3];\nvec3 v3;\nmat3x3 m3x3;\nconst vec3 &gv() { return v3; }\nconst mat3x3 &gm() { return m3x3; }\nclass Fred {\npublic:\n    vec3 &v();\n    mat3x3 &m();\n    const vec3 &vc() const;\n    const mat3x3 &mc() const;\n};\nvec3 & Fred::v() { return v3; }\nmat3x3 & Fred::m() { return m3x3; }\nconst vec3 & Fred::vc() const { return v3; }\nconst mat3x3 & Fred::mc() const { return m3x3; }"
  "typedef float vec3[3];\ntypedef float mat3x3[3][3];\nvec3 v3;\nmat3x3 m3x3;\nconst vec3 &gv() { return v3; }\nconst mat3x3 &gm() { return m3x3; }\nclass Fred {\npublic:\n    vec3 &v();\n    mat3x3 &m();\n    const vec3 &vc() const;\n    const mat3x3 &mc() const;\n};\nvec3 & Fred::v() { return v3; }\nmat3x3 & Fred::m() { return m3x3; }\nconst vec3 & Fred::vc() const { return v3; }\nconst mat3x3 & Fred::mc() const { return m3x3; }" always "typedef float vec3[3];\ntypedef float mat3x3[3][3];\nvec3 v3;\nmat3x3 m3x3;\nconst vec3 &gv() { return v3; }\nconst mat3x3 &gm() { return m3x3; }\nclass Fred {\npublic:\n    vec3 &v();\n    mat3x3 &m();\n    const vec3 &vc() const;\n    const mat3x3 &mc() const;\n};\nvec3 & Fred::v() { return v3; }\nmat3x3 & Fred::m() { return m3x3; }\nconst vec3 & Fred::vc() const { return v3; }\nconst mat3x3 & Fred::mc() const { return m3x3; }"
Line 2512
  545 always 545
  = always "float v3 [ 3 ] ; float m3x3 [ 3 ] [ 3 ] ; const float ( & gv ( ) ) [ 3 ] { return v3 ; } const float ( & gm ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } class Fred { public: float ( & v ( ) ) [ 3 ] ; float ( & m ( ) ) [ 3 ] [ 3 ] ; const float ( & vc ( ) const ) [ 3 ] ; const float ( & mc ( ) const ) [ 3 ] [ 3 ] ; } ; float ( & Fred :: v ( ) ) [ 3 ] { return v3 ; } float ( & Fred :: m ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } const float ( & Fred :: vc ( ) const ) [ 3 ] { return v3 ; } const float ( & Fred :: mc ( ) const ) [ 3 ] [ 3 ] { return m3x3 ; }"
  "float v3 [ 3 ] ; float m3x3 [ 3 ] [ 3 ] ; const float ( & gv ( ) ) [ 3 ] { return v3 ; } const float ( & gm ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } class Fred { public: float ( & v ( ) ) [ 3 ] ; float ( & m ( ) ) [ 3 ] [ 3 ] ; const float ( & vc ( ) const ) [ 3 ] ; const float ( & mc ( ) const ) [ 3 ] [ 3 ] ; } ; float ( & Fred :: v ( ) ) [ 3 ] { return v3 ; } float ( & Fred :: m ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } const float ( & Fred :: vc ( ) const ) [ 3 ] { return v3 ; } const float ( & Fred :: mc ( ) const ) [ 3 ] [ 3 ] { return m3x3 ; }" always "float v3 [ 3 ] ; float m3x3 [ 3 ] [ 3 ] ; const float ( & gv ( ) ) [ 3 ] { return v3 ; } const float ( & gm ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } class Fred { public: float ( & v ( ) ) [ 3 ] ; float ( & m ( ) ) [ 3 ] [ 3 ] ; const float ( & vc ( ) const ) [ 3 ] ; const float ( & mc ( ) const ) [ 3 ] [ 3 ] ; } ; float ( & Fred :: v ( ) ) [ 3 ] { return v3 ; } float ( & Fred :: m ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } const float ( & Fred :: vc ( ) const ) [ 3 ] { return v3 ; } const float ( & Fred :: mc ( ) const ) [ 3 ] [ 3 ] { return m3x3 ; }"
Line 2527
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2527 always 2527
  exp always "float v3 [ 3 ] ; float m3x3 [ 3 ] [ 3 ] ; const float ( & gv ( ) ) [ 3 ] { return v3 ; } const float ( & gm ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } class Fred { public: float ( & v ( ) ) [ 3 ] ; float ( & m ( ) ) [ 3 ] [ 3 ] ; const float ( & vc ( ) const ) [ 3 ] ; const float ( & mc ( ) const ) [ 3 ] [ 3 ] ; } ; float ( & Fred :: v ( ) ) [ 3 ] { return v3 ; } float ( & Fred :: m ( ) ) [ 3 ] [ 3 ] { return m3x3 ; } const float ( & Fred :: vc ( ) const ) [ 3 ] { return v3 ; } const float ( & Fred :: mc ( ) const ) [ 3 ] [ 3 ] { return m3x3 ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2527 always 2527
  code always "typedef float vec3[3];\ntypedef float mat3x3[3][3];\nvec3 v3;\nmat3x3 m3x3;\nconst vec3 &gv() { return v3; }\nconst mat3x3 &gm() { return m3x3; }\nclass Fred {\npublic:\n    vec3 &v();\n    mat3x3 &m();\n    const vec3 &vc() const;\n    const mat3x3 &mc() const;\n};\nvec3 & Fred::v() { return v3; }\nmat3x3 & Fred::m() { return m3x3; }\nconst vec3 & Fred::vc() const { return v3; }\nconst mat3x3 & Fred::mc() const { return m3x3; }"
  false always 0
Line 2528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2528 always 2528
  "" always ""
Line 2532
  87 always 87
  = always "int result = [] { return git_run_cmd(\"update-index\",\"update-index -q --refresh\"); }();"
  "int result = [] { return git_run_cmd(\"update-index\",\"update-index -q --refresh\"); }();" always "int result = [] { return git_run_cmd(\"update-index\",\"update-index -q --refresh\"); }();"
Line 2533
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2533 always 2533
  code always "int result = [] { return git_run_cmd(\"update-index\",\"update-index -q --refresh\"); }();"
Line 2534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2534 always 2534
  "" always ""
Line 2538
  40 always 40
  = always "typedef int intvec[1];\nDummy<intvec> y;"
  "typedef int intvec[1];\nDummy<intvec> y;" always "typedef int intvec[1];\nDummy<intvec> y;"
Line 2540
  24 always 24
  = always "Dummy < int [ 1 ] > y ;"
  "Dummy < int [ 1 ] > y ;" always "Dummy < int [ 1 ] > y ;"
Line 2541
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2541 always 2541
  exp always "Dummy < int [ 1 ] > y ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2541 always 2541
  code always "typedef int intvec[1];\nDummy<intvec> y;"
  false always 0
Line 2542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2542 always 2542
  "" always ""
Line 2546
  92 always 92
  = always "typedef long unsigned int size_t;\ntypedef size_t (my_func)(char *, size_t, size_t, void *);"
  "typedef long unsigned int size_t;\ntypedef size_t (my_func)(char *, size_t, size_t, void *);" always "typedef long unsigned int size_t;\ntypedef size_t (my_func)(char *, size_t, size_t, void *);"
Line 2550
  code always "typedef long unsigned int size_t;\ntypedef size_t (my_func)(char *, size_t, size_t, void *);"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2550 always 2550
Line 2551
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2551 always 2551
  "[test.cpp:1]: (debug) Failed to parse 'typedef long unsigned int size_t ;'. The checking continues anyway.\n" always "[test.cpp:1]: (debug) Failed to parse 'typedef long unsigned int size_t ;'. The checking continues anyway.\n"
Line 2553
  100 always 100
  = always "typedef long unsigned int uint32_t;\ntypedef uint32_t (my_func)(char *, uint32_t, uint32_t, void *);"
  "typedef long unsigned int uint32_t;\ntypedef uint32_t (my_func)(char *, uint32_t, uint32_t, void *);" always "typedef long unsigned int uint32_t;\ntypedef uint32_t (my_func)(char *, uint32_t, uint32_t, void *);"
Line 2557
  code1 always "typedef long unsigned int uint32_t;\ntypedef uint32_t (my_func)(char *, uint32_t, uint32_t, void *);"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2557 always 2557
Line 2558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2558 always 2558
  "" always ""
Line 2563
  44 always 44
  = always "typedef char A[3];\nchar (*p)[3] = new A[4];"
  "typedef char A[3];\nchar (*p)[3] = new A[4];" always "typedef char A[3];\nchar (*p)[3] = new A[4];"
Line 2565
  44 always 44
  = always "char ( * p ) [ 3 ] = new char [ 4 ] [ 3 ] ;"
  "char ( * p ) [ 3 ] = new char [ 4 ] [ 3 ] ;" always "char ( * p ) [ 3 ] = new char [ 4 ] [ 3 ] ;"
Line 2566
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2566 always 2566
  exp always "char ( * p ) [ 3 ] = new char [ 4 ] [ 3 ] ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2566 always 2566
  code always "typedef char A[3];\nchar (*p)[3] = new A[4];"
  false always 0
Line 2570
  76 always 76
  = always "typedef char automap_data_t[100];\nvoid write_array(automap_data_t *data) {}"
  "typedef char automap_data_t[100];\nvoid write_array(automap_data_t *data) {}" always "typedef char automap_data_t[100];\nvoid write_array(automap_data_t *data) {}"
Line 2572
  49 always 49
  = always "void write_array ( char ( * data ) [ 100 ] ) { }"
  "void write_array ( char ( * data ) [ 100 ] ) { }" always "void write_array ( char ( * data ) [ 100 ] ) { }"
Line 2573
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2573 always 2573
  exp always "void write_array ( char ( * data ) [ 100 ] ) { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2573 always 2573
  code always "typedef char automap_data_t[100];\nvoid write_array(automap_data_t *data) {}"
  false always 0
Line 2577
  119 always 119
  = always "class a; typedef int (a::*b); template <long, class> struct c; template <int g> struct d { enum { e = c<g, b>::f }; };"
  "class a; typedef int (a::*b); template <long, class> struct c; template <int g> struct d { enum { e = c<g, b>::f }; };" always "class a; typedef int (a::*b); template <long, class> struct c; template <int g> struct d { enum { e = c<g, b>::f }; };"
Line 2580
  137 always 137
  = always "class a ; template < long , class > struct c ; template < int g > struct d { enum Anonymous0 { e = c < g , int ( a :: * ) > :: f } ; } ;"
  "class a ; template < long , class > struct c ; template < int g > struct d { enum Anonymous0 { e = c < g , int ( a :: * ) > :: f } ; } ;" always "class a ; template < long , class > struct c ; template < int g > struct d { enum Anonymous0 { e = c < g , int ( a :: * ) > :: f } ; } ;"
Line 2583
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2583 always 2583
  exp always "class a ; template < long , class > struct c ; template < int g > struct d { enum Anonymous0 { e = c < g , int ( a :: * ) > :: f } ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2583 always 2583
  code always "class a; typedef int (a::*b); template <long, class> struct c; template <int g> struct d { enum { e = c<g, b>::f }; };"
  false always 0
Line 2587
  64 always 64
  = always "typedef int d[4];\nvoid f() {\n    dostuff((const d){1,2,3,4});\n}"
  "typedef int d[4];\nvoid f() {\n    dostuff((const d){1,2,3,4});\n}" always "typedef int d[4];\nvoid f() {\n    dostuff((const d){1,2,3,4});\n}"
Line 2591
  67 always 67
  = always "void f ( ) { dostuff ( ( const int [ 4 ] ) { 1 , 2 , 3 , 4 } ) ; }"
  "void f ( ) { dostuff ( ( const int [ 4 ] ) { 1 , 2 , 3 , 4 } ) ; }" always "void f ( ) { dostuff ( ( const int [ 4 ] ) { 1 , 2 , 3 , 4 } ) ; }"
Line 2594
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2594 always 2594
  exp always "void f ( ) { dostuff ( ( const int [ 4 ] ) { 1 , 2 , 3 , 4 } ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2594 always 2594
  code always "typedef int d[4];\nvoid f() {\n    dostuff((const d){1,2,3,4});\n}"
  false always 0
Line 2599
  47 always 47
  = always "class c {\n  typedef char foo[4];\n  foo &f ;\n};"
  "class c {\n  typedef char foo[4];\n  foo &f ;\n};" always "class c {\n  typedef char foo[4];\n  foo &f ;\n};"
Line 2604
  35 always 35
  = always "class c { char ( & f ) [ 4 ] ; } ;"
  "class c { char ( & f ) [ 4 ] ; } ;" always "class c { char ( & f ) [ 4 ] ; } ;"
Line 2605
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2605 always 2605
  exp always "class c { char ( & f ) [ 4 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2605 always 2605
  code always "class c {\n  typedef char foo[4];\n  foo &f ;\n};"
  false always 0
Line 2609
  52 always 52
  = always "class c {\n  typedef char foo[4];\n  const foo &f;\n};"
  "class c {\n  typedef char foo[4];\n  const foo &f;\n};" always "class c {\n  typedef char foo[4];\n  const foo &f;\n};"
Line 2614
  41 always 41
  = always "class c { const char ( & f ) [ 4 ] ; } ;"
  "class c { const char ( & f ) [ 4 ] ; } ;" always "class c { const char ( & f ) [ 4 ] ; } ;"
Line 2615
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2615 always 2615
  exp always "class c { const char ( & f ) [ 4 ] ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2615 always 2615
  code always "class c {\n  typedef char foo[4];\n  const foo &f;\n};"
  false always 0
Line 2619
  107 always 107
  = always "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr const foo &c_str() const noexcept { return _a; }\n};"
  "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr const foo &c_str() const noexcept { return _a; }\n};" always "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr const foo &c_str() const noexcept { return _a; }\n};"
Line 2625
  104 always 104
  = always "class c { char _a [ 4 ] ; const constexpr char ( & c_str ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  "class c { char _a [ 4 ] ; const constexpr char ( & c_str ( ) const noexcept ) [ 4 ] { return _a ; } } ;" always "class c { char _a [ 4 ] ; const constexpr char ( & c_str ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
Line 2626
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2626 always 2626
  exp always "class c { char _a [ 4 ] ; const constexpr char ( & c_str ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2626 always 2626
  code always "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr const foo &c_str() const noexcept { return _a; }\n};"
  false always 0
Line 2630
  105 always 105
  = always "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator foo &() const noexcept { return _a; }\n};"
  "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator foo &() const noexcept { return _a; }\n};" always "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator foo &() const noexcept { return _a; }\n};"
Line 2636
  100 always 100
  = always "class c { char _a [ 4 ] ; constexpr operatorchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  "class c { char _a [ 4 ] ; constexpr operatorchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;" always "class c { char _a [ 4 ] ; constexpr operatorchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
Line 2637
  97 always 97
  = always "class c { char _a [ 4 ] ; const operator char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  "class c { char _a [ 4 ] ; const operator char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;" always "class c { char _a [ 4 ] ; const operator char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
Line 2638
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2638 always 2638
  exp always "class c { char _a [ 4 ] ; const operator char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  actual always "class c { char _a [ 4 ] ; constexpr operatorchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2638 always 2638
  code always "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator foo &() const noexcept { return _a; }\n};"
  false always 0
Line 2642
  111 always 111
  = always "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator const foo &() const noexcept { return _a; }\n};"
  "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator const foo &() const noexcept { return _a; }\n};" always "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator const foo &() const noexcept { return _a; }\n};"
Line 2648
  105 always 105
  = always "class c { char _a [ 4 ] ; constexpr operatorconstchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  "class c { char _a [ 4 ] ; constexpr operatorconstchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;" always "class c { char _a [ 4 ] ; constexpr operatorconstchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
Line 2649
  103 always 103
  = always "class c { char _a [ 4 ] ; const operator const char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  "class c { char _a [ 4 ] ; const operator const char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;" always "class c { char _a [ 4 ] ; const operator const char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
Line 2650
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2650 always 2650
  exp always "class c { char _a [ 4 ] ; const operator const char ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  actual always "class c { char _a [ 4 ] ; constexpr operatorconstchar ( & ( ) const noexcept ) [ 4 ] { return _a ; } } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2650 always 2650
  code always "class c {\n  typedef char foo[4];\n  foo _a;\n  constexpr operator const foo &() const noexcept { return _a; }\n};"
  false always 0
Line 2655
  73 always 73
  = always "template <class, class> void a() {\n  typedef int(*b)[10];\n  a<b, b>();\n}"
  "template <class, class> void a() {\n  typedef int(*b)[10];\n  a<b, b>();\n}" always "template <class, class> void a() {\n  typedef int(*b)[10];\n  a<b, b>();\n}"
Line 2660
  90 always 90
  = always "template < class , class > void a ( ) { a < int ( * ) [ 10 ] , int ( * ) [ 10 ] > ( ) ; }"
  "template < class , class > void a ( ) { a < int ( * ) [ 10 ] , int ( * ) [ 10 ] > ( ) ; }" always "template < class , class > void a ( ) { a < int ( * ) [ 10 ] , int ( * ) [ 10 ] > ( ) ; }"
Line 2664
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2664 always 2664
  exp always "template < class , class > void a ( ) { a < int ( * ) [ 10 ] , int ( * ) [ 10 ] > ( ) ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2664 always 2664
  code always "template <class, class> void a() {\n  typedef int(*b)[10];\n  a<b, b>();\n}"
  false always 0
Line 2668
  127 always 127
  = always "typedef unsigned char a4[4];\na4 a4obj;\na4 &&  a4_rref = std::move(a4obj);\na4* a4p = &(a4obj);\na4*&& a4p_rref = std::move(a4p);"
  "typedef unsigned char a4[4];\na4 a4obj;\na4 &&  a4_rref = std::move(a4obj);\na4* a4p = &(a4obj);\na4*&& a4p_rref = std::move(a4p);" always "typedef unsigned char a4[4];\na4 a4obj;\na4 &&  a4_rref = std::move(a4obj);\na4* a4p = &(a4obj);\na4*&& a4p_rref = std::move(a4p);"
Line 2674
  203 always 203
  = always "unsigned char a4obj [ 4 ] ; unsigned char ( && a4_rref ) [ 4 ] = std :: move ( a4obj ) ; unsigned char ( * a4p ) [ 4 ] ; a4p = & ( a4obj ) ; unsigned char ( * && a4p_rref ) [ 4 ] = std :: move ( a4p ) ;"
  "unsigned char a4obj [ 4 ] ; unsigned char ( && a4_rref ) [ 4 ] = std :: move ( a4obj ) ; unsigned char ( * a4p ) [ 4 ] ; a4p = & ( a4obj ) ; unsigned char ( * && a4p_rref ) [ 4 ] = std :: move ( a4p ) ;" always "unsigned char a4obj [ 4 ] ; unsigned char ( && a4_rref ) [ 4 ] = std :: move ( a4obj ) ; unsigned char ( * a4p ) [ 4 ] ; a4p = & ( a4obj ) ; unsigned char ( * && a4p_rref ) [ 4 ] = std :: move ( a4p ) ;"
Line 2680
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2680 always 2680
  exp always "unsigned char a4obj [ 4 ] ; unsigned char ( && a4_rref ) [ 4 ] = std :: move ( a4obj ) ; unsigned char ( * a4p ) [ 4 ] ; a4p = & ( a4obj ) ; unsigned char ( * && a4p_rref ) [ 4 ] = std :: move ( a4p ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2680 always 2680
  code always "typedef unsigned char a4[4];\na4 a4obj;\na4 &&  a4_rref = std::move(a4obj);\na4* a4p = &(a4obj);\na4*&& a4p_rref = std::move(a4p);"
  false always 0
Line 2684
  214 always 214
  = always "namespace NamespaceA {\n    typedef int MySpecialType;\n}\n\nclass A {\n    void DoSomething( NamespaceA::MySpecialType special );\n};\n\nusing NamespaceA::MySpecialType;\n\nvoid A::DoSomething( MySpecialType wrongName ) {}"
  "namespace NamespaceA {\n    typedef int MySpecialType;\n}\n\nclass A {\n    void DoSomething( NamespaceA::MySpecialType special );\n};\n\nusing NamespaceA::MySpecialType;\n\nvoid A::DoSomething( MySpecialType wrongName ) {}" always "namespace NamespaceA {\n    typedef int MySpecialType;\n}\n\nclass A {\n    void DoSomething( NamespaceA::MySpecialType special );\n};\n\nusing NamespaceA::MySpecialType;\n\nvoid A::DoSomething( MySpecialType wrongName ) {}"
Line 2696
  93 always 93
  = always "class A { void DoSomething ( int special ) ; } ; void A :: DoSomething ( int wrongName ) { }"
  "class A { void DoSomething ( int special ) ; } ; void A :: DoSomething ( int wrongName ) { }" always "class A { void DoSomething ( int special ) ; } ; void A :: DoSomething ( int wrongName ) { }"
Line 2701
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2701 always 2701
  exp always "class A { void DoSomething ( int special ) ; } ; void A :: DoSomething ( int wrongName ) { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2701 always 2701
  code always "namespace NamespaceA {\n    typedef int MySpecialType;\n}\n\nclass A {\n    void DoSomething( NamespaceA::MySpecialType special );\n};\n\nusing NamespaceA::MySpecialType;\n\nvoid A::DoSomething( MySpecialType wrongName ) {}"
  false always 0
Line 2705
  80 always 80
  = always "typedef unsigned char array_t[16];\nusing array_p = const array_t *;\narray_p x;\n"
  "typedef unsigned char array_t[16];\nusing array_p = const array_t *;\narray_p x;\n" always "typedef unsigned char array_t[16];\nusing array_p = const array_t *;\narray_p x;\n"
Line 2708
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2708 always 2708
  "using array_p = const unsigned char ( * ) [ 16 ] ; array_p x ;" always "using array_p = const unsigned char ( * ) [ 16 ] ; array_p x ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2708 always 2708
  code always "typedef unsigned char array_t[16];\nusing array_p = const array_t *;\narray_p x;\n"
  false always 0
Line 2712
  98 always 98
  = always "namespace foo { typedef long long int64; }\ntypedef int int32;\nnamespace foo { int64 i; }\nint32 j;"
  "namespace foo { typedef long long int64; }\ntypedef int int32;\nnamespace foo { int64 i; }\nint32 j;" always "namespace foo { typedef long long int64; }\ntypedef int int32;\nnamespace foo { int64 i; }\nint32 j;"
Line 2716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2716 always 2716
  "namespace foo { long long i ; } int j ;" always "namespace foo { long long i ; } int j ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2716 always 2716
  code always "namespace foo { typedef long long int64; }\ntypedef int int32;\nnamespace foo { int64 i; }\nint32 j;"
  false always 0
Line 2720
  444 always 444
  = always "namespace clangimport {\n    class AstNode;\n    typedef std::shared_ptr<AstNode> AstNodePtr;\n    class AstNode {\n    public:\n        AstNode() {}\n    private:\n        void createTokens();\n        void createScope(const std::vector<AstNodePtr> &children);\n    };\n}\nvoid clangimport::AstNode::createTokens() {\n    AstNodePtr range;\n    range->createTokens();\n}\nvoid clangimport::AstNode::createScope(const std::vector<AstNodePtr> & children2) { }"
  "namespace clangimport {\n    class AstNode;\n    typedef std::shared_ptr<AstNode> AstNodePtr;\n    class AstNode {\n    public:\n        AstNode() {}\n    private:\n        void createTokens();\n        void createScope(const std::vector<AstNodePtr> &children);\n    };\n}\nvoid clangimport::AstNode::createTokens() {\n    AstNodePtr range;\n    range->createTokens();\n}\nvoid clangimport::AstNode::createScope(const std::vector<AstNodePtr> & children2) { }" always "namespace clangimport {\n    class AstNode;\n    typedef std::shared_ptr<AstNode> AstNodePtr;\n    class AstNode {\n    public:\n        AstNode() {}\n    private:\n        void createTokens();\n        void createScope(const std::vector<AstNodePtr> &children);\n    };\n}\nvoid clangimport::AstNode::createTokens() {\n    AstNodePtr range;\n    range->createTokens();\n}\nvoid clangimport::AstNode::createScope(const std::vector<AstNodePtr> & children2) { }"
Line 2736
  441 always 441
  = always "namespace clangimport { class AstNode ; class AstNode { public: AstNode ( ) { } private: void createTokens ( ) ; void createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children ) ; } ; } void clangimport :: AstNode :: createTokens ( ) { std :: shared_ptr < AstNode > range ; range . createTokens ( ) ; } void clangimport :: AstNode :: createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children2 ) { }"
  "namespace clangimport { class AstNode ; class AstNode { public: AstNode ( ) { } private: void createTokens ( ) ; void createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children ) ; } ; } void clangimport :: AstNode :: createTokens ( ) { std :: shared_ptr < AstNode > range ; range . createTokens ( ) ; } void clangimport :: AstNode :: createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children2 ) { }" always "namespace clangimport { class AstNode ; class AstNode { public: AstNode ( ) { } private: void createTokens ( ) ; void createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children ) ; } ; } void clangimport :: AstNode :: createTokens ( ) { std :: shared_ptr < AstNode > range ; range . createTokens ( ) ; } void clangimport :: AstNode :: createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children2 ) { }"
Line 2752
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2752 always 2752
  expected always "namespace clangimport { class AstNode ; class AstNode { public: AstNode ( ) { } private: void createTokens ( ) ; void createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children ) ; } ; } void clangimport :: AstNode :: createTokens ( ) { std :: shared_ptr < AstNode > range ; range . createTokens ( ) ; } void clangimport :: AstNode :: createScope ( const std :: vector < std :: shared_ptr < AstNode > > & children2 ) { }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2752 always 2752
  code always "namespace clangimport {\n    class AstNode;\n    typedef std::shared_ptr<AstNode> AstNodePtr;\n    class AstNode {\n    public:\n        AstNode() {}\n    private:\n        void createTokens();\n        void createScope(const std::vector<AstNodePtr> &children);\n    };\n}\nvoid clangimport::AstNode::createTokens() {\n    AstNodePtr range;\n    range->createTokens();\n}\nvoid clangimport::AstNode::createScope(const std::vector<AstNodePtr> & children2) { }"
Line 2756
  155 always 155
  = always "class C1 {};\ntypedef class S1 {} S1;\ntypedef class S2 : public C1 {} S2;\ntypedef class {} S3;\ntypedef class : public C1 {} S4;\nS1 s1;\nS2 s2;\nS3 s3;\nS4 s4;"
  "class C1 {};\ntypedef class S1 {} S1;\ntypedef class S2 : public C1 {} S2;\ntypedef class {} S3;\ntypedef class : public C1 {} S4;\nS1 s1;\nS2 s2;\nS3 s3;\nS4 s4;" always "class C1 {};\ntypedef class S1 {} S1;\ntypedef class S2 : public C1 {} S2;\ntypedef class {} S3;\ntypedef class : public C1 {} S4;\nS1 s1;\nS2 s2;\nS3 s3;\nS4 s4;"
Line 2766
  155 always 155
  = always "class C1 { } ; class S1 { } ; class S2 : public C1 { } ; class S3 { } ; class S4 : public C1 { } ; class S1 s1 ; class S2 s2 ; class S3 s3 ; class S4 s4 ;"
  "class C1 { } ; class S1 { } ; class S2 : public C1 { } ; class S3 { } ; class S4 : public C1 { } ; class S1 s1 ; class S2 s2 ; class S3 s3 ; class S4 s4 ;" always "class C1 { } ; class S1 { } ; class S2 : public C1 { } ; class S3 { } ; class S4 : public C1 { } ; class S1 s1 ; class S2 s2 ; class S3 s3 ; class S4 s4 ;"
Line 2776
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2776 always 2776
  expected always "class C1 { } ; class S1 { } ; class S2 : public C1 { } ; class S3 { } ; class S4 : public C1 { } ; class S1 s1 ; class S2 s2 ; class S3 s3 ; class S4 s4 ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2776 always 2776
  code always "class C1 {};\ntypedef class S1 {} S1;\ntypedef class S2 : public C1 {} S2;\ntypedef class {} S3;\ntypedef class : public C1 {} S4;\nS1 s1;\nS2 s2;\nS3 s3;\nS4 s4;"
  false always 0
Line 2782
  282 always 282
  = always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
  "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}" always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
Line 2797
  256 always 256
  = always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
  "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;" always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
Line 2812
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2812 always 2812
  exp always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2812 always 2812
  code always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
  true always 1
  true always 1
Line 2813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2813 always 2813
  "" always ""
Line 2817
  251 always 251
  = always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
  "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}" always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
Line 2831
  222 always 222
  = always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
  "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;" always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
Line 2845
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2845 always 2845
  exp always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2845 always 2845
  code always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
  true always 1
  true always 1
Line 2846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2846 always 2846
  "" always ""
Line 2850
  267 always 267
  = always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(V) {}\n}"
  "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(V) {}\n}" always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(V) {}\n}"
Line 2865
  256 always 256
  = always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
  "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;" always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
Line 2880
  234 always 234
  = always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( V ) { } } struct external :: ns1 :: B<1> { } ;"
  "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( V ) { } } struct external :: ns1 :: B<1> { } ;" always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( V ) { } } struct external :: ns1 :: B<1> { } ;"
Line 2895
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2895 always 2895
  exp always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
  act always "namespace external { namespace ns1 { struct B<1> ; } } namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } using namespace external :: ns1 ; namespace ns { void A :: f ( V ) { } } struct external :: ns1 :: B<1> { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2895 always 2895
  code always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nusing namespace external::ns1;\nnamespace ns {\n    void A::f(V) {}\n}"
  true always 1
  true always 1
Line 2896
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2896 always 2896
  "" always ""
  "[test.cpp:14]: (debug) Executable scope 'f' with unknown function.\n" always "[test.cpp:14]: (debug) Executable scope 'f' with unknown function.\n"
Line 2900
  252 always 252
  = always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nusing namespace external::ns1;\nnamespace ns {\n    struct A {\n        void f(V);\n    };\n}\nnamespace ns {\n    void A::f(V) {}\n}"
  "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nusing namespace external::ns1;\nnamespace ns {\n    struct A {\n        void f(V);\n    };\n}\nnamespace ns {\n    void A::f(V) {}\n}" always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nusing namespace external::ns1;\nnamespace ns {\n    struct A {\n        void f(V);\n    };\n}\nnamespace ns {\n    void A::f(V) {}\n}"
Line 2915
  256 always 256
  = always "namespace external { namespace ns1 { struct B<1> ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
  "namespace external { namespace ns1 { struct B<1> ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;" always "namespace external { namespace ns1 { struct B<1> ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
Line 2930
  198 always 198
  = always "namespace external { namespace ns1 { template < int size > struct B { } ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( V ) ; } ; } namespace ns { void A :: f ( V ) { } }"
  "namespace external { namespace ns1 { template < int size > struct B { } ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( V ) ; } ; } namespace ns { void A :: f ( V ) { } }" always "namespace external { namespace ns1 { template < int size > struct B { } ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( V ) ; } ; } namespace ns { void A :: f ( V ) { } }"
Line 2944
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2944 always 2944
  exp always "namespace external { namespace ns1 { struct B<1> ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( external :: ns1 :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: ns1 :: B<1> ) { } } struct external :: ns1 :: B<1> { } ;"
  act always "namespace external { namespace ns1 { template < int size > struct B { } ; } } using namespace external :: ns1 ; namespace ns { struct A { void f ( V ) ; } ; } namespace ns { void A :: f ( V ) { } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2944 always 2944
  code always "namespace external {\n    namespace ns1 {\n        template <int size> struct B { };\n        typedef B<sizeof(bool)> V;\n    }\n}\nusing namespace external::ns1;\nnamespace ns {\n    struct A {\n        void f(V);\n    };\n}\nnamespace ns {\n    void A::f(V) {}\n}"
  true always 1
  true always 1
Line 2945
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2945 always 2945
  "" always ""
Line 2948
  247 always 247
  = always "namespace external {\n    template <int size> struct B { };\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
  "namespace external {\n    template <int size> struct B { };\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}" always "namespace external {\n    template <int size> struct B { };\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
Line 2962
  183 always 183
  = always "namespace external { struct B<1> ; } namespace ns { struct A { void f ( external :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: B<1> ) { } } struct external :: B<1> { } ;"
  "namespace external { struct B<1> ; } namespace ns { struct A { void f ( external :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: B<1> ) { } } struct external :: B<1> { } ;" always "namespace external { struct B<1> ; } namespace ns { struct A { void f ( external :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: B<1> ) { } } struct external :: B<1> { } ;"
Line 2974
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2974 always 2974
  exp always "namespace external { struct B<1> ; } namespace ns { struct A { void f ( external :: B<1> ) ; } ; } namespace ns { void A :: f ( external :: B<1> ) { } } struct external :: B<1> { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2974 always 2974
  code always "namespace external {\n    template <int size> struct B { };\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
  true always 1
  true always 1
Line 2975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  2975 always 2975
  "" always ""
Line 2978
  243 always 243
  = always "template <int size> struct B { };\nnamespace external {\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
  "template <int size> struct B { };\nnamespace external {\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}" always "template <int size> struct B { };\nnamespace external {\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
Line 2992
  124 always 124
  = always "struct B<1> ; namespace ns { struct A { void f ( B<1> ) ; } ; } namespace ns { void A :: f ( B<1> ) { } } struct B<1> { } ;"
  "struct B<1> ; namespace ns { struct A { void f ( B<1> ) ; } ; } namespace ns { void A :: f ( B<1> ) { } } struct B<1> { } ;" always "struct B<1> ; namespace ns { struct A { void f ( B<1> ) ; } ; } namespace ns { void A :: f ( B<1> ) { } } struct B<1> { } ;"
Line 3002
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3002 always 3002
  exp always "struct B<1> ; namespace ns { struct A { void f ( B<1> ) ; } ; } namespace ns { void A :: f ( B<1> ) { } } struct B<1> { } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3002 always 3002
  code always "template <int size> struct B { };\nnamespace external {\n    namespace ns1 {\n        typedef B<sizeof(bool)> V;\n    }\n}\nnamespace ns {\n    struct A {\n        void f(external::ns1::V);\n    };\n}\nnamespace ns {\n    void A::f(external::ns1::V) {}\n}"
  true always 1
  true always 1
Line 3003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3003 always 3003
  "" always ""
Line 3008
  97 always 97
  = always "namespace foo { class Bar; }\nclass Baz;\ntypedef foo::Bar C;\nnamespace bar {\nclass C : Baz {};\n}\n"
  "namespace foo { class Bar; }\nclass Baz;\ntypedef foo::Bar C;\nnamespace bar {\nclass C : Baz {};\n}\n" always "namespace foo { class Bar; }\nclass Baz;\ntypedef foo::Bar C;\nnamespace bar {\nclass C : Baz {};\n}\n"
Line 3014
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3014 always 3014
  "namespace foo { class Bar ; } class Baz ; namespace bar { class C : Baz { } ; }" always "namespace foo { class Bar ; } class Baz ; namespace bar { class C : Baz { } ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3014 always 3014
  code always "namespace foo { class Bar; }\nclass Baz;\ntypedef foo::Bar C;\nnamespace bar {\nclass C : Baz {};\n}\n"
Line 3019
  83 always 83
  = always "typedef struct c a;\nstruct {\n  a *b;\n} * d;\nvoid e(a *a) {\n  if (a < d[0].b) {}\n}\n"
  "typedef struct c a;\nstruct {\n  a *b;\n} * d;\nvoid e(a *a) {\n  if (a < d[0].b) {}\n}\n" always "typedef struct c a;\nstruct {\n  a *b;\n} * d;\nvoid e(a *a) {\n  if (a < d[0].b) {}\n}\n"
Line 3026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3026 always 3026
  "struct Anonymous0 { struct c * b ; } ; struct Anonymous0 * d ; void e ( struct c * a ) { if ( a < d [ 0 ] . b ) { } }" always "struct Anonymous0 { struct c * b ; } ; struct Anonymous0 * d ; void e ( struct c * a ) { if ( a < d [ 0 ] . b ) { } }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3026 always 3026
  code always "typedef struct c a;\nstruct {\n  a *b;\n} * d;\nvoid e(a *a) {\n  if (a < d[0].b) {}\n}\n"
Line 3033
  48 always 48
  = always "typedef void (*b)();\nenum class E { a, b, c };\n"
  "typedef void (*b)();\nenum class E { a, b, c };\n" always "typedef void (*b)();\nenum class E { a, b, c };\n"
Line 3035
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3035 always 3035
  "enum class E { a , b , c } ;" always "enum class E { a , b , c } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3035 always 3035
  code always "typedef void (*b)();\nenum class E { a, b, c };\n"
Line 3038
  36 always 36
  = always "typedef int A;\nenum class E { A };\n"
  "typedef int A;\nenum class E { A };\n" always "typedef int A;\nenum class E { A };\n"
Line 3040
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3040 always 3040
  "enum class E { A } ;" always "enum class E { A } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3040 always 3040
  code always "typedef int A;\nenum class E { A };\n"
Line 3045
  99 always 99
  = always "class C {\n    struct I {\n        using vt = const std::string;\n        using ptr = vt*;\n    };\n};\n"
  "class C {\n    struct I {\n        using vt = const std::string;\n        using ptr = vt*;\n    };\n};\n" always "class C {\n    struct I {\n        using vt = const std::string;\n        using ptr = vt*;\n    };\n};\n"
Line 3051
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3051 always 3051
  "class C { struct I { } ; } ;" always "class C { struct I { } ; } ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3051 always 3051
  code always "class C {\n    struct I {\n        using vt = const std::string;\n        using ptr = vt*;\n    };\n};\n"
Line 3056
  59 always 59
  = always "typedef void (*my_func)();\nstd::queue<my_func> func_queue;"
  "typedef void (*my_func)();\nstd::queue<my_func> func_queue;" always "typedef void (*my_func)();\nstd::queue<my_func> func_queue;"
Line 3060
  45 always 45
  = always "std :: queue < void ( * ) ( ) > func_queue ;"
  "std :: queue < void ( * ) ( ) > func_queue ;" always "std :: queue < void ( * ) ( ) > func_queue ;"
Line 3061
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3061 always 3061
  expected always "std :: queue < void ( * ) ( ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3061 always 3061
  code always "typedef void (*my_func)();\nstd::queue<my_func> func_queue;"
Line 3062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3062 always 3062
  "" always ""
Line 3066
  63 always 63
  = always "typedef void (*my_func)(void);\nstd::queue<my_func> func_queue;"
  "typedef void (*my_func)(void);\nstd::queue<my_func> func_queue;" always "typedef void (*my_func)(void);\nstd::queue<my_func> func_queue;"
Line 3070
  50 always 50
  = always "std :: queue < void ( * ) ( void ) > func_queue ;"
  "std :: queue < void ( * ) ( void ) > func_queue ;" always "std :: queue < void ( * ) ( void ) > func_queue ;"
Line 3071
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3071 always 3071
  expected always "std :: queue < void ( * ) ( void ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3071 always 3071
  code always "typedef void (*my_func)(void);\nstd::queue<my_func> func_queue;"
Line 3072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3072 always 3072
  "" always ""
Line 3076
  62 always 62
  = always "typedef void (*my_func)(int);\nstd::queue<my_func> func_queue;"
  "typedef void (*my_func)(int);\nstd::queue<my_func> func_queue;" always "typedef void (*my_func)(int);\nstd::queue<my_func> func_queue;"
Line 3080
  49 always 49
  = always "std :: queue < void ( * ) ( int ) > func_queue ;"
  "std :: queue < void ( * ) ( int ) > func_queue ;" always "std :: queue < void ( * ) ( int ) > func_queue ;"
Line 3081
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3081 always 3081
  expected always "std :: queue < void ( * ) ( int ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3081 always 3081
  code always "typedef void (*my_func)(int);\nstd::queue<my_func> func_queue;"
Line 3082
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3082 always 3082
  "" always ""
Line 3086
  63 always 63
  = always "typedef void (*my_func)(int*);\nstd::queue<my_func> func_queue;"
  "typedef void (*my_func)(int*);\nstd::queue<my_func> func_queue;" always "typedef void (*my_func)(int*);\nstd::queue<my_func> func_queue;"
Line 3090
  51 always 51
  = always "std :: queue < void ( * ) ( int * ) > func_queue ;"
  "std :: queue < void ( * ) ( int * ) > func_queue ;" always "std :: queue < void ( * ) ( int * ) > func_queue ;"
Line 3091
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3091 always 3091
  expected always "std :: queue < void ( * ) ( int * ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3091 always 3091
  code always "typedef void (*my_func)(int*);\nstd::queue<my_func> func_queue;"
Line 3092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3092 always 3092
  "" always ""
Line 3097
  69 always 69
  = always "typedef void (*my_func)(arg_class*);\nstd::queue<my_func> func_queue;"
  "typedef void (*my_func)(arg_class*);\nstd::queue<my_func> func_queue;" always "typedef void (*my_func)(arg_class*);\nstd::queue<my_func> func_queue;"
Line 3101
  57 always 57
  = always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
  "std :: queue < void ( * ) ( arg_class * ) > func_queue ;" always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
Line 3102
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3102 always 3102
  expected always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3102 always 3102
  code always "typedef void (*my_func)(arg_class*);\nstd::queue<my_func> func_queue;"
Line 3103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3103 always 3103
  "" always ""
Line 3108
  60 always 60
  = always "typedef void (my_func)();\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func)();\nstd::queue<my_func *> func_queue;" always "typedef void (my_func)();\nstd::queue<my_func *> func_queue;"
Line 3112
  45 always 45
  = always "std :: queue < void ( * ) ( ) > func_queue ;"
  "std :: queue < void ( * ) ( ) > func_queue ;" always "std :: queue < void ( * ) ( ) > func_queue ;"
Line 3113
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3113 always 3113
  expected always "std :: queue < void ( * ) ( ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3113 always 3113
  code always "typedef void (my_func)();\nstd::queue<my_func *> func_queue;"
Line 3114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3114 always 3114
  "" always ""
Line 3118
  64 always 64
  = always "typedef void (my_func)(void);\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func)(void);\nstd::queue<my_func *> func_queue;" always "typedef void (my_func)(void);\nstd::queue<my_func *> func_queue;"
Line 3122
  50 always 50
  = always "std :: queue < void ( * ) ( void ) > func_queue ;"
  "std :: queue < void ( * ) ( void ) > func_queue ;" always "std :: queue < void ( * ) ( void ) > func_queue ;"
Line 3123
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3123 always 3123
  expected always "std :: queue < void ( * ) ( void ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3123 always 3123
  code always "typedef void (my_func)(void);\nstd::queue<my_func *> func_queue;"
Line 3124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3124 always 3124
  "" always ""
Line 3128
  63 always 63
  = always "typedef void (my_func)(int);\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func)(int);\nstd::queue<my_func *> func_queue;" always "typedef void (my_func)(int);\nstd::queue<my_func *> func_queue;"
Line 3132
  49 always 49
  = always "std :: queue < void ( * ) ( int ) > func_queue ;"
  "std :: queue < void ( * ) ( int ) > func_queue ;" always "std :: queue < void ( * ) ( int ) > func_queue ;"
Line 3133
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3133 always 3133
  expected always "std :: queue < void ( * ) ( int ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3133 always 3133
  code always "typedef void (my_func)(int);\nstd::queue<my_func *> func_queue;"
Line 3134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3134 always 3134
  "" always ""
Line 3138
  64 always 64
  = always "typedef void (my_func)(int*);\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func)(int*);\nstd::queue<my_func *> func_queue;" always "typedef void (my_func)(int*);\nstd::queue<my_func *> func_queue;"
Line 3142
  51 always 51
  = always "std :: queue < void ( * ) ( int * ) > func_queue ;"
  "std :: queue < void ( * ) ( int * ) > func_queue ;" always "std :: queue < void ( * ) ( int * ) > func_queue ;"
Line 3143
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3143 always 3143
  expected always "std :: queue < void ( * ) ( int * ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3143 always 3143
  code always "typedef void (my_func)(int*);\nstd::queue<my_func *> func_queue;"
Line 3144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3144 always 3144
  "" always ""
Line 3148
  70 always 70
  = always "typedef void (my_func)(arg_class*);\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func)(arg_class*);\nstd::queue<my_func *> func_queue;" always "typedef void (my_func)(arg_class*);\nstd::queue<my_func *> func_queue;"
Line 3152
  57 always 57
  = always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
  "std :: queue < void ( * ) ( arg_class * ) > func_queue ;" always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
Line 3153
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3153 always 3153
  expected always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3153 always 3153
  code always "typedef void (my_func)(arg_class*);\nstd::queue<my_func *> func_queue;"
Line 3154
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3154 always 3154
  "" always ""
Line 3159
  58 always 58
  = always "typedef void my_func();\nstd::queue<my_func *> func_queue;"
  "typedef void my_func();\nstd::queue<my_func *> func_queue;" always "typedef void my_func();\nstd::queue<my_func *> func_queue;"
Line 3163
  45 always 45
  = always "std :: queue < void ( * ) ( ) > func_queue ;"
  "std :: queue < void ( * ) ( ) > func_queue ;" always "std :: queue < void ( * ) ( ) > func_queue ;"
Line 3164
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3164 always 3164
  expected always "std :: queue < void ( * ) ( ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3164 always 3164
  code always "typedef void my_func();\nstd::queue<my_func *> func_queue;"
Line 3165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3165 always 3165
  "" always ""
Line 3169
  62 always 62
  = always "typedef void my_func(void);\nstd::queue<my_func *> func_queue;"
  "typedef void my_func(void);\nstd::queue<my_func *> func_queue;" always "typedef void my_func(void);\nstd::queue<my_func *> func_queue;"
Line 3173
  50 always 50
  = always "std :: queue < void ( * ) ( void ) > func_queue ;"
  "std :: queue < void ( * ) ( void ) > func_queue ;" always "std :: queue < void ( * ) ( void ) > func_queue ;"
Line 3174
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3174 always 3174
  expected always "std :: queue < void ( * ) ( void ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3174 always 3174
  code always "typedef void my_func(void);\nstd::queue<my_func *> func_queue;"
Line 3175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3175 always 3175
  "" always ""
Line 3179
  61 always 61
  = always "typedef void my_func(int);\nstd::queue<my_func *> func_queue;"
  "typedef void my_func(int);\nstd::queue<my_func *> func_queue;" always "typedef void my_func(int);\nstd::queue<my_func *> func_queue;"
Line 3183
  49 always 49
  = always "std :: queue < void ( * ) ( int ) > func_queue ;"
  "std :: queue < void ( * ) ( int ) > func_queue ;" always "std :: queue < void ( * ) ( int ) > func_queue ;"
Line 3184
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3184 always 3184
  expected always "std :: queue < void ( * ) ( int ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3184 always 3184
  code always "typedef void my_func(int);\nstd::queue<my_func *> func_queue;"
Line 3185
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3185 always 3185
  "" always ""
Line 3189
  62 always 62
  = always "typedef void my_func(int*);\nstd::queue<my_func *> func_queue;"
  "typedef void my_func(int*);\nstd::queue<my_func *> func_queue;" always "typedef void my_func(int*);\nstd::queue<my_func *> func_queue;"
Line 3193
  51 always 51
  = always "std :: queue < void ( * ) ( int * ) > func_queue ;"
  "std :: queue < void ( * ) ( int * ) > func_queue ;" always "std :: queue < void ( * ) ( int * ) > func_queue ;"
Line 3194
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3194 always 3194
  expected always "std :: queue < void ( * ) ( int * ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3194 always 3194
  code always "typedef void my_func(int*);\nstd::queue<my_func *> func_queue;"
Line 3195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3195 always 3195
  "" always ""
Line 3199
  68 always 68
  = always "typedef void my_func(arg_class*);\nstd::queue<my_func *> func_queue;"
  "typedef void my_func(arg_class*);\nstd::queue<my_func *> func_queue;" always "typedef void my_func(arg_class*);\nstd::queue<my_func *> func_queue;"
Line 3203
  57 always 57
  = always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
  "std :: queue < void ( * ) ( arg_class * ) > func_queue ;" always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
Line 3204
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3204 always 3204
  expected always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3204 always 3204
  code always "typedef void my_func(arg_class*);\nstd::queue<my_func *> func_queue;"
Line 3205
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3205 always 3205
  "" always ""
Line 3210
  60 always 60
  = always "typedef void (my_func());\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func());\nstd::queue<my_func *> func_queue;" always "typedef void (my_func());\nstd::queue<my_func *> func_queue;"
Line 3214
  45 always 45
  = always "std :: queue < void ( * ) ( ) > func_queue ;"
  "std :: queue < void ( * ) ( ) > func_queue ;" always "std :: queue < void ( * ) ( ) > func_queue ;"
Line 3215
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3215 always 3215
  expected always "std :: queue < void ( * ) ( ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3215 always 3215
  code always "typedef void (my_func());\nstd::queue<my_func *> func_queue;"
Line 3216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3216 always 3216
  "" always ""
Line 3220
  64 always 64
  = always "typedef void (my_func(void));\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func(void));\nstd::queue<my_func *> func_queue;" always "typedef void (my_func(void));\nstd::queue<my_func *> func_queue;"
Line 3224
  50 always 50
  = always "std :: queue < void ( * ) ( void ) > func_queue ;"
  "std :: queue < void ( * ) ( void ) > func_queue ;" always "std :: queue < void ( * ) ( void ) > func_queue ;"
Line 3225
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3225 always 3225
  expected always "std :: queue < void ( * ) ( void ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3225 always 3225
  code always "typedef void (my_func(void));\nstd::queue<my_func *> func_queue;"
Line 3226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3226 always 3226
  "" always ""
Line 3230
  63 always 63
  = always "typedef void (my_func(int));\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func(int));\nstd::queue<my_func *> func_queue;" always "typedef void (my_func(int));\nstd::queue<my_func *> func_queue;"
Line 3234
  49 always 49
  = always "std :: queue < void ( * ) ( int ) > func_queue ;"
  "std :: queue < void ( * ) ( int ) > func_queue ;" always "std :: queue < void ( * ) ( int ) > func_queue ;"
Line 3235
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3235 always 3235
  expected always "std :: queue < void ( * ) ( int ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3235 always 3235
  code always "typedef void (my_func(int));\nstd::queue<my_func *> func_queue;"
Line 3236
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3236 always 3236
  "" always ""
Line 3240
  64 always 64
  = always "typedef void (my_func(int*));\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func(int*));\nstd::queue<my_func *> func_queue;" always "typedef void (my_func(int*));\nstd::queue<my_func *> func_queue;"
Line 3244
  51 always 51
  = always "std :: queue < void ( * ) ( int * ) > func_queue ;"
  "std :: queue < void ( * ) ( int * ) > func_queue ;" always "std :: queue < void ( * ) ( int * ) > func_queue ;"
Line 3245
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3245 always 3245
  expected always "std :: queue < void ( * ) ( int * ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3245 always 3245
  code always "typedef void (my_func(int*));\nstd::queue<my_func *> func_queue;"
Line 3246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3246 always 3246
  "" always ""
Line 3250
  70 always 70
  = always "typedef void (my_func(arg_class*));\nstd::queue<my_func *> func_queue;"
  "typedef void (my_func(arg_class*));\nstd::queue<my_func *> func_queue;" always "typedef void (my_func(arg_class*));\nstd::queue<my_func *> func_queue;"
Line 3254
  57 always 57
  = always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
  "std :: queue < void ( * ) ( arg_class * ) > func_queue ;" always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
Line 3255
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3255 always 3255
  expected always "std :: queue < void ( * ) ( arg_class * ) > func_queue ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3255 always 3255
  code always "typedef void (my_func(arg_class*));\nstd::queue<my_func *> func_queue;"
Line 3256
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3256 always 3256
  "" always ""
Line 3261
  39 always 39
  = always "typedef void voidfn (int);\nvoidfn xxx;"
  "typedef void voidfn (int);\nvoidfn xxx;" always "typedef void voidfn (int);\nvoidfn xxx;"
Line 3265
  19 always 19
  = always "void xxx ( int ) ;"
  "void xxx ( int ) ;" always "void xxx ( int ) ;"
Line 3266
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3266 always 3266
  expected always "void xxx ( int ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3266 always 3266
  code always "typedef void voidfn (int);\nvoidfn xxx;"
Line 3271
  269 always 269
  = always "typedef C func1();\ntypedef C (* func2)();\ntypedef C (& func3)();\ntypedef C (C::* func4)();\ntypedef C (C::* func5)() const;\ntypedef C (C::* func6)() volatile;\ntypedef C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  "typedef C func1();\ntypedef C (* func2)();\ntypedef C (& func3)();\ntypedef C (C::* func4)();\ntypedef C (C::* func5)() const;\ntypedef C (C::* func6)() volatile;\ntypedef C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;" always "typedef C func1();\ntypedef C (* func2)();\ntypedef C (& func3)();\ntypedef C (C::* func4)();\ntypedef C (C::* func5)() const;\ntypedef C (C::* func6)() volatile;\ntypedef C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
Line 3287
  113 always 113
  = always "C f1 ( ) ; C ( * f2 ) ( ) ; C ( & f3 ) ( ) ; C ( * f4 ) ( ) ; C ( * f5 ) ( ) ; C ( * f6 ) ( ) ; C ( * f7 ) ( ) ;"
  "C f1 ( ) ; C ( * f2 ) ( ) ; C ( & f3 ) ( ) ; C ( * f4 ) ( ) ; C ( * f5 ) ( ) ; C ( * f6 ) ( ) ; C ( * f7 ) ( ) ;" always "C f1 ( ) ; C ( * f2 ) ( ) ; C ( & f3 ) ( ) ; C ( * f4 ) ( ) ; C ( * f5 ) ( ) ; C ( * f6 ) ( ) ; C ( * f7 ) ( ) ;"
Line 3294
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3294 always 3294
  expected always "C f1 ( ) ; C ( * f2 ) ( ) ; C ( & f3 ) ( ) ; C ( * f4 ) ( ) ; C ( * f5 ) ( ) ; C ( * f6 ) ( ) ; C ( * f7 ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3294 always 3294
  code always "typedef C func1();\ntypedef C (* func2)();\ntypedef C (& func3)();\ntypedef C (C::* func4)();\ntypedef C (C::* func5)() const;\ntypedef C (C::* func6)() volatile;\ntypedef C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  true always 1
  false always 0
Line 3295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3295 always 3295
  "" always ""
Line 3299
  311 always 311
  = always "typedef C const func1();\ntypedef C const (* func2)();\ntypedef C const (& func3)();\ntypedef C const (C::* func4)();\ntypedef C const (C::* func5)() const;\ntypedef C const (C::* func6)() volatile;\ntypedef C const (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  "typedef C const func1();\ntypedef C const (* func2)();\ntypedef C const (& func3)();\ntypedef C const (C::* func4)();\ntypedef C const (C::* func5)() const;\ntypedef C const (C::* func6)() volatile;\ntypedef C const (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;" always "typedef C const func1();\ntypedef C const (* func2)();\ntypedef C const (& func3)();\ntypedef C const (C::* func4)();\ntypedef C const (C::* func5)() const;\ntypedef C const (C::* func6)() volatile;\ntypedef C const (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
Line 3316
  155 always 155
  = always "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;"
  "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;" always "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;"
Line 3323
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3323 always 3323
  expected always "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3323 always 3323
  code always "typedef C const func1();\ntypedef C const (* func2)();\ntypedef C const (& func3)();\ntypedef C const (C::* func4)();\ntypedef C const (C::* func5)() const;\ntypedef C const (C::* func6)() volatile;\ntypedef C const (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  true always 1
  false always 0
Line 3324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3324 always 3324
  "" always ""
Line 3328
  311 always 311
  = always "typedef const C func1();\ntypedef const C (* func2)();\ntypedef const C (& func3)();\ntypedef const C (C::* func4)();\ntypedef const C (C::* func5)() const;\ntypedef const C (C::* func6)() volatile;\ntypedef const C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  "typedef const C func1();\ntypedef const C (* func2)();\ntypedef const C (& func3)();\ntypedef const C (C::* func4)();\ntypedef const C (C::* func5)() const;\ntypedef const C (C::* func6)() volatile;\ntypedef const C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;" always "typedef const C func1();\ntypedef const C (* func2)();\ntypedef const C (& func3)();\ntypedef const C (C::* func4)();\ntypedef const C (C::* func5)() const;\ntypedef const C (C::* func6)() volatile;\ntypedef const C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
Line 3344
  155 always 155
  = always "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;"
  "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;" always "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;"
Line 3351
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3351 always 3351
  expected always "const C f1 ( ) ; const C ( * f2 ) ( ) ; const C ( & f3 ) ( ) ; const C ( * f4 ) ( ) ; const C ( * f5 ) ( ) ; const C ( * f6 ) ( ) ; const C ( * f7 ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3351 always 3351
  code always "typedef const C func1();\ntypedef const C (* func2)();\ntypedef const C (& func3)();\ntypedef const C (C::* func4)();\ntypedef const C (C::* func5)() const;\ntypedef const C (C::* func6)() volatile;\ntypedef const C (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  true always 1
  false always 0
Line 3352
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3352 always 3352
  "" always ""
Line 3356
  283 always 283
  = always "typedef C * func1();\ntypedef C * (* func2)();\ntypedef C * (& func3)();\ntypedef C * (C::* func4)();\ntypedef C * (C::* func5)() const;\ntypedef C * (C::* func6)() volatile;\ntypedef C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  "typedef C * func1();\ntypedef C * (* func2)();\ntypedef C * (& func3)();\ntypedef C * (C::* func4)();\ntypedef C * (C::* func5)() const;\ntypedef C * (C::* func6)() volatile;\ntypedef C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;" always "typedef C * func1();\ntypedef C * (* func2)();\ntypedef C * (& func3)();\ntypedef C * (C::* func4)();\ntypedef C * (C::* func5)() const;\ntypedef C * (C::* func6)() volatile;\ntypedef C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
Line 3372
  127 always 127
  = always "C * f1 ( ) ; C * ( * f2 ) ( ) ; C * ( & f3 ) ( ) ; C * ( * f4 ) ( ) ; C * ( * f5 ) ( ) ; C * ( * f6 ) ( ) ; C * ( * f7 ) ( ) ;"
  "C * f1 ( ) ; C * ( * f2 ) ( ) ; C * ( & f3 ) ( ) ; C * ( * f4 ) ( ) ; C * ( * f5 ) ( ) ; C * ( * f6 ) ( ) ; C * ( * f7 ) ( ) ;" always "C * f1 ( ) ; C * ( * f2 ) ( ) ; C * ( & f3 ) ( ) ; C * ( * f4 ) ( ) ; C * ( * f5 ) ( ) ; C * ( * f6 ) ( ) ; C * ( * f7 ) ( ) ;"
Line 3379
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3379 always 3379
  expected always "C * f1 ( ) ; C * ( * f2 ) ( ) ; C * ( & f3 ) ( ) ; C * ( * f4 ) ( ) ; C * ( * f5 ) ( ) ; C * ( * f6 ) ( ) ; C * ( * f7 ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3379 always 3379
  code always "typedef C * func1();\ntypedef C * (* func2)();\ntypedef C * (& func3)();\ntypedef C * (C::* func4)();\ntypedef C * (C::* func5)() const;\ntypedef C * (C::* func6)() volatile;\ntypedef C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  true always 1
  false always 0
Line 3380
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3380 always 3380
  "" always ""
Line 3384
  325 always 325
  = always "typedef const C * func1();\ntypedef const C * (* func2)();\ntypedef const C * (& func3)();\ntypedef const C * (C::* func4)();\ntypedef const C * (C::* func5)() const;\ntypedef const C * (C::* func6)() volatile;\ntypedef const C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  "typedef const C * func1();\ntypedef const C * (* func2)();\ntypedef const C * (& func3)();\ntypedef const C * (C::* func4)();\ntypedef const C * (C::* func5)() const;\ntypedef const C * (C::* func6)() volatile;\ntypedef const C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;" always "typedef const C * func1();\ntypedef const C * (* func2)();\ntypedef const C * (& func3)();\ntypedef const C * (C::* func4)();\ntypedef const C * (C::* func5)() const;\ntypedef const C * (C::* func6)() volatile;\ntypedef const C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
Line 3400
  169 always 169
  = always "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;"
  "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;" always "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;"
Line 3407
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3407 always 3407
  expected always "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3407 always 3407
  code always "typedef const C * func1();\ntypedef const C * (* func2)();\ntypedef const C * (& func3)();\ntypedef const C * (C::* func4)();\ntypedef const C * (C::* func5)() const;\ntypedef const C * (C::* func6)() volatile;\ntypedef const C * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  true always 1
  false always 0
Line 3408
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3408 always 3408
  "" always ""
Line 3412
  325 always 325
  = always "typedef C const * func1();\ntypedef C const * (* func2)();\ntypedef C const * (& func3)();\ntypedef C const * (C::* func4)();\ntypedef C const * (C::* func5)() const;\ntypedef C const * (C::* func6)() volatile;\ntypedef C const * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  "typedef C const * func1();\ntypedef C const * (* func2)();\ntypedef C const * (& func3)();\ntypedef C const * (C::* func4)();\ntypedef C const * (C::* func5)() const;\ntypedef C const * (C::* func6)() volatile;\ntypedef C const * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;" always "typedef C const * func1();\ntypedef C const * (* func2)();\ntypedef C const * (& func3)();\ntypedef C const * (C::* func4)();\ntypedef C const * (C::* func5)() const;\ntypedef C const * (C::* func6)() volatile;\ntypedef C const * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
Line 3429
  169 always 169
  = always "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;"
  "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;" always "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;"
Line 3436
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3436 always 3436
  expected always "const C * f1 ( ) ; const C * ( * f2 ) ( ) ; const C * ( & f3 ) ( ) ; const C * ( * f4 ) ( ) ; const C * ( * f5 ) ( ) ; const C * ( * f6 ) ( ) ; const C * ( * f7 ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3436 always 3436
  code always "typedef C const * func1();\ntypedef C const * (* func2)();\ntypedef C const * (& func3)();\ntypedef C const * (C::* func4)();\ntypedef C const * (C::* func5)() const;\ntypedef C const * (C::* func6)() volatile;\ntypedef C const * (C::* func7)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;\nfunc5 f5;\nfunc6 f6;\nfunc7 f7;"
  true always 1
  false always 0
Line 3437
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3437 always 3437
  "" always ""
Line 3442
  187 always 187
  = always "typedef int ( * ( * type1 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * ( type2 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * type3 ( bool ) ) ( int , int ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;"
  "typedef int ( * ( * type1 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * ( type2 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * type3 ( bool ) ) ( int , int ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;" always "typedef int ( * ( * type1 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * ( type2 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * type3 ( bool ) ) ( int , int ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;"
Line 3450
  84 always 84
  = always "int ( * ( * t1 ) ( bool ) ) ( int , int ) ; int * t2 ( bool ) ; int * t3 ( bool ) ;"
  "int ( * ( * t1 ) ( bool ) ) ( int , int ) ; int * t2 ( bool ) ; int * t3 ( bool ) ;" always "int ( * ( * t1 ) ( bool ) ) ( int , int ) ; int * t2 ( bool ) ; int * t3 ( bool ) ;"
Line 3453
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3453 always 3453
  expected always "int ( * ( * t1 ) ( bool ) ) ( int , int ) ; int * t2 ( bool ) ; int * t3 ( bool ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3453 always 3453
  code always "typedef int ( * ( * type1 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * ( type2 ) ( bool ) ) ( int , int ) ;\ntypedef int ( * type3 ( bool ) ) ( int , int ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;"
  false always 0
Line 3454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3454 always 3454
  "" always ""
Line 3458
  703 always 703
  = always "typedef int ( * type1 ) ( float ) ;\ntypedef int ( * const type2 ) ( float ) ;\ntypedef int ( * volatile type3 ) ( float ) ;\ntypedef int ( * const volatile type4 ) ( float ) ;\ntypedef int ( C :: * type5 ) ( float ) ;\ntypedef int ( C :: * const type6 ) ( float ) ;\ntypedef int ( C :: * volatile type7 ) ( float ) ;\ntypedef int ( C :: * const volatile type8 ) ( float ) ;\ntypedef int ( :: C :: * type9 ) ( float ) ;\ntypedef int ( :: C :: * const type10 ) ( float ) ;\ntypedef int ( :: C :: * volatile type11 ) ( float ) ;\ntypedef int ( :: C :: * const volatile type12 ) ( float ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;\ntype4 t4;\ntype5 t5;\ntype6 t6;\ntype7 t7;\ntype8 t8;\ntype9 t9;\ntype10 t10;\ntype11 t11;\ntype12 t12;"
  "typedef int ( * type1 ) ( float ) ;\ntypedef int ( * const type2 ) ( float ) ;\ntypedef int ( * volatile type3 ) ( float ) ;\ntypedef int ( * const volatile type4 ) ( float ) ;\ntypedef int ( C :: * type5 ) ( float ) ;\ntypedef int ( C :: * const type6 ) ( float ) ;\ntypedef int ( C :: * volatile type7 ) ( float ) ;\ntypedef int ( C :: * const volatile type8 ) ( float ) ;\ntypedef int ( :: C :: * type9 ) ( float ) ;\ntypedef int ( :: C :: * const type10 ) ( float ) ;\ntypedef int ( :: C :: * volatile type11 ) ( float ) ;\ntypedef int ( :: C :: * const volatile type12 ) ( float ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;\ntype4 t4;\ntype5 t5;\ntype6 t6;\ntype7 t7;\ntype8 t8;\ntype9 t9;\ntype10 t10;\ntype11 t11;\ntype12 t12;" always "typedef int ( * type1 ) ( float ) ;\ntypedef int ( * const type2 ) ( float ) ;\ntypedef int ( * volatile type3 ) ( float ) ;\ntypedef int ( * const volatile type4 ) ( float ) ;\ntypedef int ( C :: * type5 ) ( float ) ;\ntypedef int ( C :: * const type6 ) ( float ) ;\ntypedef int ( C :: * volatile type7 ) ( float ) ;\ntypedef int ( C :: * const volatile type8 ) ( float ) ;\ntypedef int ( :: C :: * type9 ) ( float ) ;\ntypedef int ( :: C :: * const type10 ) ( float ) ;\ntypedef int ( :: C :: * volatile type11 ) ( float ) ;\ntypedef int ( :: C :: * const volatile type12 ) ( float ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;\ntype4 t4;\ntype5 t5;\ntype6 t6;\ntype7 t7;\ntype8 t8;\ntype9 t9;\ntype10 t10;\ntype11 t11;\ntype12 t12;"
Line 3484
  377 always 377
  = always "int ( * t1 ) ( ) ; int ( * const t2 ) ( ) ; int ( * volatile t3 ) ( ) ; int ( * const volatile t4 ) ( ) ; int ( * t5 ) ( ) ; int ( * const t6 ) ( ) ; int ( * volatile t7 ) ( ) ; int ( * const volatile t8 ) ( ) ; int ( :: C :: * t9 ) ( float ) ; int ( :: C :: * const t10 ) ( float ) ; int ( :: C :: * volatile t11 ) ( float ) ; int ( :: C :: * const volatile t12 ) ( float ) ;"
  "int ( * t1 ) ( ) ; int ( * const t2 ) ( ) ; int ( * volatile t3 ) ( ) ; int ( * const volatile t4 ) ( ) ; int ( * t5 ) ( ) ; int ( * const t6 ) ( ) ; int ( * volatile t7 ) ( ) ; int ( * const volatile t8 ) ( ) ; int ( :: C :: * t9 ) ( float ) ; int ( :: C :: * const t10 ) ( float ) ; int ( :: C :: * volatile t11 ) ( float ) ; int ( :: C :: * const volatile t12 ) ( float ) ;" always "int ( * t1 ) ( ) ; int ( * const t2 ) ( ) ; int ( * volatile t3 ) ( ) ; int ( * const volatile t4 ) ( ) ; int ( * t5 ) ( ) ; int ( * const t6 ) ( ) ; int ( * volatile t7 ) ( ) ; int ( * const volatile t8 ) ( ) ; int ( :: C :: * t9 ) ( float ) ; int ( :: C :: * const t10 ) ( float ) ; int ( :: C :: * volatile t11 ) ( float ) ; int ( :: C :: * const volatile t12 ) ( float ) ;"
Line 3496
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3496 always 3496
  expected always "int ( * t1 ) ( ) ; int ( * const t2 ) ( ) ; int ( * volatile t3 ) ( ) ; int ( * const volatile t4 ) ( ) ; int ( * t5 ) ( ) ; int ( * const t6 ) ( ) ; int ( * volatile t7 ) ( ) ; int ( * const volatile t8 ) ( ) ; int ( :: C :: * t9 ) ( float ) ; int ( :: C :: * const t10 ) ( float ) ; int ( :: C :: * volatile t11 ) ( float ) ; int ( :: C :: * const volatile t12 ) ( float ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3496 always 3496
  code always "typedef int ( * type1 ) ( float ) ;\ntypedef int ( * const type2 ) ( float ) ;\ntypedef int ( * volatile type3 ) ( float ) ;\ntypedef int ( * const volatile type4 ) ( float ) ;\ntypedef int ( C :: * type5 ) ( float ) ;\ntypedef int ( C :: * const type6 ) ( float ) ;\ntypedef int ( C :: * volatile type7 ) ( float ) ;\ntypedef int ( C :: * const volatile type8 ) ( float ) ;\ntypedef int ( :: C :: * type9 ) ( float ) ;\ntypedef int ( :: C :: * const type10 ) ( float ) ;\ntypedef int ( :: C :: * volatile type11 ) ( float ) ;\ntypedef int ( :: C :: * const volatile type12 ) ( float ) ;\ntype1 t1;\ntype2 t2;\ntype3 t3;\ntype4 t4;\ntype5 t5;\ntype6 t6;\ntype7 t7;\ntype8 t8;\ntype9 t9;\ntype10 t10;\ntype11 t11;\ntype12 t12;"
  false always 0
Line 3497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3497 always 3497
  "" always ""
Line 3501
  245 always 245
  = always "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};\ntestfp Fred::get3() { return 0; }\nvoid ( * Fred::get4 ( ) ) ( ) { return 0 ; }"
  "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};\ntestfp Fred::get3() { return 0; }\nvoid ( * Fred::get4 ( ) ) ( ) { return 0 ; }" always "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};\ntestfp Fred::get3() { return 0; }\nvoid ( * Fred::get4 ( ) ) ( ) { return 0 ; }"
Line 3513
  194 always 194
  = always "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ; void * Fred :: get3 ( ) { return 0 ; } void * Fred :: get4 ( ) { return 0 ; }"
  "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ; void * Fred :: get3 ( ) { return 0 ; } void * Fred :: get4 ( ) { return 0 ; }" always "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ; void * Fred :: get3 ( ) { return 0 ; } void * Fred :: get4 ( ) { return 0 ; }"
Line 3523
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3523 always 3523
  expected always "struct Fred { void * get1 ( ) { return 0 ; } void * get2 ( ) { return 0 ; } void * get3 ( ) ; void * get4 ( ) ; } ; void * Fred :: get3 ( ) { return 0 ; } void * Fred :: get4 ( ) { return 0 ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3523 always 3523
  code always "typedef void (*testfp)();\nstruct Fred\n{\n    testfp get1() { return 0; }\n    void ( * get2 ( ) ) ( ) { return 0 ; }\n    testfp get3();\n    void ( * get4 ( ) ) ( );\n};\ntestfp Fred::get3() { return 0; }\nvoid ( * Fred::get4 ( ) ) ( ) { return 0 ; }"
  false always 0
Line 3524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3524 always 3524
  "" always ""
Line 3528
  132 always 132
  = always "typedef void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * _func_Tp_SGIAssignableConcept ) () ;_func_Tp_SGIAssignableConcept X;"
  "typedef void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * _func_Tp_SGIAssignableConcept ) () ;_func_Tp_SGIAssignableConcept X;" always "typedef void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * _func_Tp_SGIAssignableConcept ) () ;_func_Tp_SGIAssignableConcept X;"
Line 3532
  65 always 65
  = always "void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * X ) ( ) ;"
  "void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * X ) ( ) ;" always "void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * X ) ( ) ;"
Line 3534
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3534 always 3534
  expected always "void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * X ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3534 always 3534
  code always "typedef void ( __gnu_cxx :: _SGIAssignableConcept < _Tp > :: * _func_Tp_SGIAssignableConcept ) () ;_func_Tp_SGIAssignableConcept X;"
  false always 0
Line 3535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3535 always 3535
  "" always ""
Line 3540
  77 always 77
  = always "typedef int f_expand(const nrv_byte *);\nvoid f(f_expand *(*get_fexp(int))){}"
  "typedef int f_expand(const nrv_byte *);\nvoid f(f_expand *(*get_fexp(int))){}" always "typedef int f_expand(const nrv_byte *);\nvoid f(f_expand *(*get_fexp(int))){}"
Line 3542
  code always "typedef int f_expand(const nrv_byte *);\nvoid f(f_expand *(*get_fexp(int))){}"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3542 always 3542
Line 3543
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3543 always 3543
  "" always ""
  "[test.cpp:2]: (debug) Function::addArguments found argument 'int' with varid 0.\n" always "[test.cpp:2]: (debug) Function::addArguments found argument 'int' with varid 0.\n"
Line 3548
  190 always 190
  = always "typedef ::C (::C::* func1)();\ntypedef ::C (::C::* func2)() const;\ntypedef ::C (::C::* func3)() volatile;\ntypedef ::C (::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
  "typedef ::C (::C::* func1)();\ntypedef ::C (::C::* func2)() const;\ntypedef ::C (::C::* func3)() volatile;\ntypedef ::C (::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;" always "typedef ::C (::C::* func1)();\ntypedef ::C (::C::* func2)() const;\ntypedef ::C (::C::* func3)() volatile;\ntypedef ::C (::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
Line 3558
  142 always 142
  = always ":: C ( :: C :: * f1 ) ( ) ; :: C ( :: C :: * f2 ) ( ) const ; :: C ( :: C :: * f3 ) ( ) volatile ; :: C ( :: C :: * f4 ) ( ) const volatile ;"
  ":: C ( :: C :: * f1 ) ( ) ; :: C ( :: C :: * f2 ) ( ) const ; :: C ( :: C :: * f3 ) ( ) volatile ; :: C ( :: C :: * f4 ) ( ) const volatile ;" always ":: C ( :: C :: * f1 ) ( ) ; :: C ( :: C :: * f2 ) ( ) const ; :: C ( :: C :: * f3 ) ( ) volatile ; :: C ( :: C :: * f4 ) ( ) const volatile ;"
Line 3562
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3562 always 3562
  expected always ":: C ( :: C :: * f1 ) ( ) ; :: C ( :: C :: * f2 ) ( ) const ; :: C ( :: C :: * f3 ) ( ) volatile ; :: C ( :: C :: * f4 ) ( ) const volatile ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3562 always 3562
  code always "typedef ::C (::C::* func1)();\ntypedef ::C (::C::* func2)() const;\ntypedef ::C (::C::* func3)() volatile;\ntypedef ::C (::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
Line 3563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3563 always 3563
  "" always ""
Line 3567
  198 always 198
  = always "typedef B::C (B::C::* func1)();\ntypedef B::C (B::C::* func2)() const;\ntypedef B::C (B::C::* func3)() volatile;\ntypedef B::C (B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
  "typedef B::C (B::C::* func1)();\ntypedef B::C (B::C::* func2)() const;\ntypedef B::C (B::C::* func3)() volatile;\ntypedef B::C (B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;" always "typedef B::C (B::C::* func1)();\ntypedef B::C (B::C::* func2)() const;\ntypedef B::C (B::C::* func3)() volatile;\ntypedef B::C (B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
Line 3577
  88 always 88
  = always "B :: C ( * f1 ) ( ) ; B :: C ( * f2 ) ( ) ; B :: C ( * f3 ) ( ) ; B :: C ( * f4 ) ( ) ;"
  "B :: C ( * f1 ) ( ) ; B :: C ( * f2 ) ( ) ; B :: C ( * f3 ) ( ) ; B :: C ( * f4 ) ( ) ;" always "B :: C ( * f1 ) ( ) ; B :: C ( * f2 ) ( ) ; B :: C ( * f3 ) ( ) ; B :: C ( * f4 ) ( ) ;"
Line 3581
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3581 always 3581
  expected always "B :: C ( * f1 ) ( ) ; B :: C ( * f2 ) ( ) ; B :: C ( * f3 ) ( ) ; B :: C ( * f4 ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3581 always 3581
  code always "typedef B::C (B::C::* func1)();\ntypedef B::C (B::C::* func2)() const;\ntypedef B::C (B::C::* func3)() volatile;\ntypedef B::C (B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
  true always 1
  false always 0
Line 3582
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3582 always 3582
  "" always ""
Line 3586
  214 always 214
  = always "typedef ::B::C (::B::C::* func1)();\ntypedef ::B::C (::B::C::* func2)() const;\ntypedef ::B::C (::B::C::* func3)() volatile;\ntypedef ::B::C (::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
  "typedef ::B::C (::B::C::* func1)();\ntypedef ::B::C (::B::C::* func2)() const;\ntypedef ::B::C (::B::C::* func3)() volatile;\ntypedef ::B::C (::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;" always "typedef ::B::C (::B::C::* func1)();\ntypedef ::B::C (::B::C::* func2)() const;\ntypedef ::B::C (::B::C::* func3)() volatile;\ntypedef ::B::C (::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
Line 3596
  182 always 182
  = always ":: B :: C ( :: B :: C :: * f1 ) ( ) ; :: B :: C ( :: B :: C :: * f2 ) ( ) const ; :: B :: C ( :: B :: C :: * f3 ) ( ) volatile ; :: B :: C ( :: B :: C :: * f4 ) ( ) const volatile ;"
  ":: B :: C ( :: B :: C :: * f1 ) ( ) ; :: B :: C ( :: B :: C :: * f2 ) ( ) const ; :: B :: C ( :: B :: C :: * f3 ) ( ) volatile ; :: B :: C ( :: B :: C :: * f4 ) ( ) const volatile ;" always ":: B :: C ( :: B :: C :: * f1 ) ( ) ; :: B :: C ( :: B :: C :: * f2 ) ( ) const ; :: B :: C ( :: B :: C :: * f3 ) ( ) volatile ; :: B :: C ( :: B :: C :: * f4 ) ( ) const volatile ;"
Line 3600
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3600 always 3600
  expected always ":: B :: C ( :: B :: C :: * f1 ) ( ) ; :: B :: C ( :: B :: C :: * f2 ) ( ) const ; :: B :: C ( :: B :: C :: * f3 ) ( ) volatile ; :: B :: C ( :: B :: C :: * f4 ) ( ) const volatile ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3600 always 3600
  code always "typedef ::B::C (::B::C::* func1)();\ntypedef ::B::C (::B::C::* func2)() const;\ntypedef ::B::C (::B::C::* func3)() volatile;\ntypedef ::B::C (::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
Line 3601
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3601 always 3601
  "" always ""
Line 3605
  222 always 222
  = always "typedef A::B::C (A::B::C::* func1)();\ntypedef A::B::C (A::B::C::* func2)() const;\ntypedef A::B::C (A::B::C::* func3)() volatile;\ntypedef A::B::C (A::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
  "typedef A::B::C (A::B::C::* func1)();\ntypedef A::B::C (A::B::C::* func2)() const;\ntypedef A::B::C (A::B::C::* func3)() volatile;\ntypedef A::B::C (A::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;" always "typedef A::B::C (A::B::C::* func1)();\ntypedef A::B::C (A::B::C::* func2)() const;\ntypedef A::B::C (A::B::C::* func3)() volatile;\ntypedef A::B::C (A::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
Line 3615
  108 always 108
  = always "A :: B :: C ( * f1 ) ( ) ; A :: B :: C ( * f2 ) ( ) ; A :: B :: C ( * f3 ) ( ) ; A :: B :: C ( * f4 ) ( ) ;"
  "A :: B :: C ( * f1 ) ( ) ; A :: B :: C ( * f2 ) ( ) ; A :: B :: C ( * f3 ) ( ) ; A :: B :: C ( * f4 ) ( ) ;" always "A :: B :: C ( * f1 ) ( ) ; A :: B :: C ( * f2 ) ( ) ; A :: B :: C ( * f3 ) ( ) ; A :: B :: C ( * f4 ) ( ) ;"
Line 3619
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3619 always 3619
  expected always "A :: B :: C ( * f1 ) ( ) ; A :: B :: C ( * f2 ) ( ) ; A :: B :: C ( * f3 ) ( ) ; A :: B :: C ( * f4 ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3619 always 3619
  code always "typedef A::B::C (A::B::C::* func1)();\ntypedef A::B::C (A::B::C::* func2)() const;\ntypedef A::B::C (A::B::C::* func3)() volatile;\ntypedef A::B::C (A::B::C::* func4)() const volatile;\nfunc1 f1;\nfunc2 f2;\nfunc3 f3;\nfunc4 f4;"
  true always 1
  false always 0
Line 3620
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3620 always 3620
  "" always ""
Line 3625
  262 always 262
  = always "enum Format_E1 { FORMAT11, FORMAT12 } Format_T1;\nnamespace MySpace {\n   enum Format_E2 { FORMAT21, FORMAT22 } Format_T2;\n}\ntypedef Format_E1 (**PtrToFunPtr_Type1)();\ntypedef MySpace::Format_E2 (**PtrToFunPtr_Type2)();\nPtrToFunPtr_Type1 t1;\nPtrToFunPtr_Type2 t2;"
  "enum Format_E1 { FORMAT11, FORMAT12 } Format_T1;\nnamespace MySpace {\n   enum Format_E2 { FORMAT21, FORMAT22 } Format_T2;\n}\ntypedef Format_E1 (**PtrToFunPtr_Type1)();\ntypedef MySpace::Format_E2 (**PtrToFunPtr_Type2)();\nPtrToFunPtr_Type1 t1;\nPtrToFunPtr_Type2 t2;" always "enum Format_E1 { FORMAT11, FORMAT12 } Format_T1;\nnamespace MySpace {\n   enum Format_E2 { FORMAT21, FORMAT22 } Format_T2;\n}\ntypedef Format_E1 (**PtrToFunPtr_Type1)();\ntypedef MySpace::Format_E2 (**PtrToFunPtr_Type2)();\nPtrToFunPtr_Type1 t1;\nPtrToFunPtr_Type2 t2;"
Line 3633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3633 always 3633
  "enum Format_E1 { FORMAT11 , FORMAT12 } ; enum Format_E1 Format_T1 ; namespace MySpace { enum Format_E2 { FORMAT21 , FORMAT22 } ; enum Format_E2 Format_T2 ; } Format_E1 ( * * t1 ) ( ) ; MySpace :: Format_E2 ( * * t2 ) ( ) ;" always "enum Format_E1 { FORMAT11 , FORMAT12 } ; enum Format_E1 Format_T1 ; namespace MySpace { enum Format_E2 { FORMAT21 , FORMAT22 } ; enum Format_E2 Format_T2 ; } Format_E1 ( * * t1 ) ( ) ; MySpace :: Format_E2 ( * * t2 ) ( ) ;"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3633 always 3633
  code always "enum Format_E1 { FORMAT11, FORMAT12 } Format_T1;\nnamespace MySpace {\n   enum Format_E2 { FORMAT21, FORMAT22 } Format_T2;\n}\ntypedef Format_E1 (**PtrToFunPtr_Type1)();\ntypedef MySpace::Format_E2 (**PtrToFunPtr_Type2)();\nPtrToFunPtr_Type1 t1;\nPtrToFunPtr_Type2 t2;"
  false always 0
Line 3643
  62 always 62
  = always "typedef struct { int x; } xyz;;\nvoid f(){\n    int abc, xyz;\n}"
  "typedef struct { int x; } xyz;;\nvoid f(){\n    int abc, xyz;\n}" always "typedef struct { int x; } xyz;;\nvoid f(){\n    int abc, xyz;\n}"
Line 3647
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3647 always 3647
  "struct xyz { int x ; } ; void f ( ) { int abc ; int xyz ; }" always "struct xyz { int x ; } ; void f ( ) { int abc ; int xyz ; }"
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3647 always 3647
  code always "typedef struct { int x; } xyz;;\nvoid f(){\n    int abc, xyz;\n}"
  false always 0
Line 3652
  136 always 136
  = always "typedef uint32_t index_t;\n\n#define NO_SEGMENT     ((index_t)12)\n\nvoid foo(index_t prev_segment) {\n    if(prev_segment==NO_SEGMENT) {}\n}"
  "typedef uint32_t index_t;\n\n#define NO_SEGMENT     ((index_t)12)\n\nvoid foo(index_t prev_segment) {\n    if(prev_segment==NO_SEGMENT) {}\n}" always "typedef uint32_t index_t;\n\n#define NO_SEGMENT     ((index_t)12)\n\nvoid foo(index_t prev_segment) {\n    if(prev_segment==NO_SEGMENT) {}\n}"
Line 3659
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsimplifytypedef.cpp" always "cppcheck-2.8/test/testsimplifytypedef.cpp"
  3659 always 3659
  "void foo ( uint32_t prev_segment ) { if ( prev_segment == ( ( uint32_t ) 12 ) ) { } }" always "void foo ( uint32_t prev_segment ) { if ( prev_segment == ( ( uint32_t ) 12 ) ) { } }"
  code always "typedef uint32_t index_t;\n\n#define NO_SEGMENT     ((index_t)12)\n\nvoid foo(index_t prev_segment) {\n    if(prev_segment==NO_SEGMENT) {}\n}"
