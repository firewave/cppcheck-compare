

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741944 expected@var22 !=@expr1073741945 actual@var23 ) {
62: std ::@expr1073741946 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741947 expected@var22 ;
64: std ::@expr1073741948 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741949 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741950 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741951 str (@expr1073741952 ) , actualStr@var26 .@expr1073741953 str (@expr1073741954 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741955 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741956 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741957 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741958 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testsizeof.cpp

1:
|
32:
33: class TestSizeof : public TestFixture {
34: public:
35: TestSizeof ( ) : TestFixture ( "TestSizeof" ) { }
36:
37: private:
38: Settings settings@var102 ;
39:
40: void run ( ) override {
41: settings@var102 .@expr138 severity@var103 .@expr139 enable (@expr1073741964 Severity ::@expr1073741965 warning@expr1073741959 ) ;
42: settings@var102 .@expr138 severity@var103 .@expr139 enable (@expr1073741968 Severity ::@expr1073741969 portability@expr1073741960 ) ;
43: settings@var102 .@expr1073741970 certainty@var104 .@expr1073741971 enable (@expr1073741972 Certainty ::@expr1073741973 inconclusive@expr1073741961 ) ;
44:
45: $do ${ $if $(@expr1073741974 $prepareTest $(@expr1073741975 "sizeofsizeof" $) $) ${ $setVerbose $(@expr1073741976 $false $) $; sizeofsizeof $(@expr1073741977 $) $; $} $} $while $(@expr1073741978 $false $) ;
46: $do ${ $if $(@expr1073741979 $prepareTest $(@expr1073741980 "sizeofCalculation" $) $) ${ $setVerbose $(@expr1073741981 $false $) $; sizeofCalculation $(@expr1073741982 $) $; $} $} $while $(@expr1073741983 $false $) ;
47: $do ${ $if $(@expr1073741984 $prepareTest $(@expr1073741985 "sizeofFunction" $) $) ${ $setVerbose $(@expr1073741986 $false $) $; sizeofFunction $(@expr1073741987 $) $; $} $} $while $(@expr1073741988 $false $) ;
48: $do ${ $if $(@expr1073741989 $prepareTest $(@expr1073741990 "checkPointerSizeof" $) $) ${ $setVerbose $(@expr1073741991 $false $) $; checkPointerSizeof $(@expr1073741992 $) $; $} $} $while $(@expr1073741993 $false $) ;
49: $do ${ $if $(@expr1073741994 $prepareTest $(@expr1073741995 "checkPointerSizeofStruct" $) $) ${ $setVerbose $(@expr1073741996 $false $) $; checkPointerSizeofStruct $(@expr1073741997 $) $; $} $} $while $(@expr1073741998 $false $) ;
50: $do ${ $if $(@expr1073741999 $prepareTest $(@expr1073742000 "sizeofDivisionMemset" $) $) ${ $setVerbose $(@expr1073742001 $false $) $; sizeofDivisionMemset $(@expr1073742002 $) $; $} $} $while $(@expr1073742003 $false $) ;
51: $do ${ $if $(@expr1073742004 $prepareTest $(@expr1073742005 "sizeofForArrayParameter" $) $) ${ $setVerbose $(@expr1073742006 $false $) $; sizeofForArrayParameter $(@expr1073742007 $) $; $} $} $while $(@expr1073742008 $false $) ;
52: $do ${ $if $(@expr1073742009 $prepareTest $(@expr1073742010 "sizeofForNumericParameter" $) $) ${ $setVerbose $(@expr1073742011 $false $) $; sizeofForNumericParameter $(@expr1073742012 $) $; $} $} $while $(@expr1073742013 $false $) ;
53: $do ${ $if $(@expr1073742014 $prepareTest $(@expr1073742015 "suspiciousSizeofCalculation" $) $) ${ $setVerbose $(@expr1073742016 $false $) $; suspiciousSizeofCalculation $(@expr1073742017 $) $; $} $} $while $(@expr1073742018 $false $) ;
54: $do ${ $if $(@expr1073742019 $prepareTest $(@expr1073742020 "sizeofVoid" $) $) ${ $setVerbose $(@expr1073742021 $false $) $; sizeofVoid $(@expr1073742022 $) $; $} $} $while $(@expr1073742023 $false $) ;
55: $do ${ $if $(@expr1073742024 $prepareTest $(@expr1073742025 "customStrncat" $) $) ${ $setVerbose $(@expr1073742026 $false $) $; customStrncat $(@expr1073742027 $) $; $} $} $while $(@expr1073742028 $false $) ;
56: }
57:
58:
59: void check_ ( const char code@var105 [ ] , const char * file@var106 , int line@var107 ) {
60:
61: errout@var100 .@expr1073742029 str (@expr1073742030 "" ) ;
62:
63:
64: Tokenizer tokenizer@var108 (@expr1073742031 &@expr208 settings@var102 , this@expr209 ) ;
65: std ::@expr1073742034 istringstream istr@var109 (@expr1073742035 code@var105 ) ;
66: $assert_ $(@expr1073742036 file@var106 $, line@var107 $, $(@expr1073742037 tokenizer@var108 .@expr1073742038 tokenize (@expr1073742039 istr@var109 , "test.cpp" ) $) $) ;
67:
68:
69: CheckSizeof checkSizeof@var110 (@expr1073742040 &@expr217 tokenizer@var108 , &@expr208 settings@var102 , this@expr209 ) ;
70: checkSizeof@var110 .@expr1073742043 runChecks (@expr1073742044 &@expr217 tokenizer@var108 , &@expr208 settings@var102 , this@expr209 ) ;
71: }
72:
73: void checkP ( const char code@var111 [ ] ) {
74:
75: errout@var100 .@expr1073742047 str (@expr1073742048 "" ) ;
76:
77:
78: std ::@expr1073742049 vector < std ::@expr226 string > files@var112 (@expr1073742051 1 , "test.cpp" ) ;
79: std ::@expr1073742052 istringstream istr@var113 (@expr1073742053 code@var111 ) ;
80: const simplecpp ::@expr1073742054 TokenList tokens1@var114 (@expr1073742055 istr@var113 , files@var112 , files@var112 [@expr1073742056 0 ] ) ;
81:
82:
83: simplecpp ::@expr1073742057 TokenList tokens2@var115 (@expr1073742058 files@var112 ) ;
84: std ::@expr1073742059 map < std ::@expr226 string , simplecpp ::@expr226 TokenList *@expr1073742062 > filedata@var116 ;
85: simplecpp ::@expr1073742063 preprocess (@expr1073742064 tokens2@var115 , tokens1@var114 , files@var112 , filedata@var116 , simplecpp ::@expr1073742065 DUI (@expr1073742066 ) ) ;
86:
87:
88: Tokenizer tokenizer@var117 (@expr1073742067 &@expr244 settings@var102 , this@expr245 ) ;
89: tokenizer@var117 .@expr1073742070 createTokens (@expr1073742071 std ::@expr1073742072 move (@expr1073742073 tokens2@var115 ) ) ;
90: tokenizer@var117 .@expr1073742074 simplifyTokens1 (@expr1073742075 "" ) ;
91:
92:
93: CheckSizeof checkSizeof@var118 (@expr1073742076 &@expr253 tokenizer@var117 , &@expr244 settings@var102 , this@expr245 ) ;
94: checkSizeof@var118 .@expr1073742079 runChecks (@expr1073742080 &@expr253 tokenizer@var117 , &@expr244 settings@var102 , this@expr245 ) ;
95: }
96:
97: void sizeofsizeof ( ) {
98: $check_ $(@expr1073742083 "void foo()\n{\n    int i = sizeof sizeof char;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 98 $)
99:
100:
101: ;
102: $if $(@expr1073742084 $!@expr1073742085 $assertEquals $(@expr1073742086 "cppcheck-2.8/test/testsizeof.cpp" $, 102 $, "[test.cpp:3]: (warning) Calling 'sizeof' on 'sizeof'.\n" $, errout@var100 .@expr263 str (@expr264 ) $) $) { $return ; }
103:
104: $check_ $(@expr1073742089 "void foo()\n{\n    int i = sizeof (sizeof long);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 104 $)
105:
106:
107: ;
108: $if $(@expr1073742090 $!@expr1073742091 $assertEquals $(@expr1073742092 "cppcheck-2.8/test/testsizeof.cpp" $, 108 $, "[test.cpp:3]: (warning) Calling 'sizeof' on 'sizeof'.\n" $, errout@var100 .@expr263 str (@expr264 ) $) $) { $return ; }
109:
110: $check_ $(@expr1073742095 "void foo(long *p)\n{\n    int i = sizeof (sizeof (p));\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 110 $)
111:
112:
113: ;
114: $if $(@expr1073742096 $!@expr1073742097 $assertEquals $(@expr1073742098 "cppcheck-2.8/test/testsizeof.cpp" $, 114 $, "[test.cpp:3]: (warning) Calling 'sizeof' on 'sizeof'.\n" $, errout@var100 .@expr263 str (@expr264 ) $) $) { $return ; }
115: }
116:
117: void sizeofCalculation ( ) {
118: $check_ $(@expr1073742101 "int a, b; int a,sizeof(a+b)" $, "cppcheck-2.8/test/testsizeof.cpp" $, 118 $) ;
119: $if $(@expr1073742102 $!@expr1073742103 $assertEquals $(@expr1073742104 "cppcheck-2.8/test/testsizeof.cpp" $, 119 $, "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
120:
121: $check_ $(@expr1073742107 "int a, b; sizeof(a*b)" $, "cppcheck-2.8/test/testsizeof.cpp" $, 121 $) ;
122: $if $(@expr1073742108 $!@expr1073742109 $assertEquals $(@expr1073742110 "cppcheck-2.8/test/testsizeof.cpp" $, 122 $, "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
123:
124: $check_ $(@expr1073742113 "int a, b; sizeof(-a)" $, "cppcheck-2.8/test/testsizeof.cpp" $, 124 $) ;
125: $if $(@expr1073742114 $!@expr1073742115 $assertEquals $(@expr1073742116 "cppcheck-2.8/test/testsizeof.cpp" $, 125 $, "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
126:
127: $check_ $(@expr1073742119 "int a, b; sizeof(*a)" $, "cppcheck-2.8/test/testsizeof.cpp" $, 127 $) ;
128: $if $(@expr1073742120 $!@expr1073742121 $assertEquals $(@expr1073742122 "cppcheck-2.8/test/testsizeof.cpp" $, 128 $, "" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
129:
130: $check_ $(@expr1073742125 "sizeof(void * const)" $, "cppcheck-2.8/test/testsizeof.cpp" $, 130 $) ;
131: $if $(@expr1073742126 $!@expr1073742127 $assertEquals $(@expr1073742128 "cppcheck-2.8/test/testsizeof.cpp" $, 131 $, "" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
132:
133: $check_ $(@expr1073742131 "sizeof(int*[2])" $, "cppcheck-2.8/test/testsizeof.cpp" $, 133 $) ;
134: $if $(@expr1073742132 $!@expr1073742133 $assertEquals $(@expr1073742134 "cppcheck-2.8/test/testsizeof.cpp" $, 134 $, "" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
135:
136: $check_ $(@expr1073742137 "sizeof(Fred**)" $, "cppcheck-2.8/test/testsizeof.cpp" $, 136 $) ;
137: $if $(@expr1073742138 $!@expr1073742139 $assertEquals $(@expr1073742140 "cppcheck-2.8/test/testsizeof.cpp" $, 137 $, "" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
138:
139: $check_ $(@expr1073742143 "sizeof(foo++)" $, "cppcheck-2.8/test/testsizeof.cpp" $, 139 $) ;
140: $if $(@expr1073742144 $!@expr1073742145 $assertEquals $(@expr1073742146 "cppcheck-2.8/test/testsizeof.cpp" $, 140 $, "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
141:
142: $check_ $(@expr1073742149 "sizeof(--foo)" $, "cppcheck-2.8/test/testsizeof.cpp" $, 142 $) ;
143: $if $(@expr1073742150 $!@expr1073742151 $assertEquals $(@expr1073742152 "cppcheck-2.8/test/testsizeof.cpp" $, 143 $, "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
144:
145:
146: checkP (@expr1073742155 "#define SIZEOF1   sizeof(i != 2)\n#define SIZEOF2   ((sizeof(i != 2)))\n#define VOIDCAST1 (void)\n#define VOIDCAST2(SZ) static_cast<void>(SZ)\nint f(int i) {\n  VOIDCAST1 SIZEOF1;\n  VOIDCAST1 SIZEOF2;\n  VOIDCAST2(SIZEOF1);\n  VOIDCAST2(SIZEOF2);\n  return i + foo(1);\n}"
147:
|
155:
156: ) ;
157: $if $(@expr1073742156 $!@expr1073742157 $assertEquals $(@expr1073742158 "cppcheck-2.8/test/testsizeof.cpp" $, 157 $, "" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
158:
159: checkP (@expr1073742161 "#define SIZEOF1   sizeof(i != 2)\n#define SIZEOF2   ((sizeof(i != 2)))\nint f(int i) {\n  SIZEOF1;\n  SIZEOF2;\n  return i + foo(1);\n}"
160:
|
164:
165: ) ;
166: $if $(@expr1073742162 $!@expr1073742163 $assertEquals $(@expr1073742164 "cppcheck-2.8/test/testsizeof.cpp" $, 166 $, "[test.cpp:4]: (warning, inconclusive) Found calculation inside sizeof().\n[test.cpp:5]: (warning, inconclusive) Found calculation inside sizeof().\n" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return
167: ; }
168:
169: checkP (@expr1073742167 "#define MACRO(data)  f(data, sizeof(data))\nx = MACRO((unsigned int *)data + 4);"
170: ) ;
171: $if $(@expr1073742168 $!@expr1073742169 $assertEquals $(@expr1073742170 "cppcheck-2.8/test/testsizeof.cpp" $, 171 $, "[test.cpp:2]: (warning, inconclusive) Found calculation inside sizeof().\n" $, errout@var100 .@expr281 str (@expr282 ) $) $) { $return ; }
172: }
173:
174: void sizeofFunction ( ) {
175: $check_ $(@expr1073742173 "class Foo\n{\n    int bar() { return 1; };\n}\nFoo f;int a=sizeof(f.bar());" $, "cppcheck-2.8/test/testsizeof.cpp" $, 175 $)
176:
177:
178:
179: ;
180: $if $(@expr1073742174 $!@expr1073742175 $assertEquals $(@expr1073742176 "cppcheck-2.8/test/testsizeof.cpp" $, 180 $, "[test.cpp:5]: (warning) Found function call inside sizeof().\n" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
181:
182: $check_ $(@expr1073742179 "class Foo\n{\n    int bar() { return 1; };\n    int bar() const { return 1; };\n}\nFoo f;int a=sizeof(f.bar());" $, "cppcheck-2.8/test/testsizeof.cpp" $, 182 $)
183:
|
186:
187: ;
188: $if $(@expr1073742180 $!@expr1073742181 $assertEquals $(@expr1073742182 "cppcheck-2.8/test/testsizeof.cpp" $, 188 $, "" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
189:
190: $check_ $(@expr1073742185 "class Foo\n{\n    int bar() { return 1; };\n}\nFoo * fp;int a=sizeof(fp->bar());" $, "cppcheck-2.8/test/testsizeof.cpp" $, 190 $)
191:
192:
193:
194: ;
195: $if $(@expr1073742186 $!@expr1073742187 $assertEquals $(@expr1073742188 "cppcheck-2.8/test/testsizeof.cpp" $, 195 $, "[test.cpp:5]: (warning) Found function call inside sizeof().\n" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
196:
197: $check_ $(@expr1073742191 "int a=sizeof(foo());" $, "cppcheck-2.8/test/testsizeof.cpp" $, 197 $) ;
198: $if $(@expr1073742192 $!@expr1073742193 $assertEquals $(@expr1073742194 "cppcheck-2.8/test/testsizeof.cpp" $, 198 $, "" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
199:
200: $check_ $(@expr1073742197 "int foo() { return 1; }; int a=sizeof(foo());" $, "cppcheck-2.8/test/testsizeof.cpp" $, 200 $) ;
201: $if $(@expr1073742198 $!@expr1073742199 $assertEquals $(@expr1073742200 "cppcheck-2.8/test/testsizeof.cpp" $, 201 $, "[test.cpp:1]: (warning) Found function call inside sizeof().\n" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
202:
203: $check_ $(@expr1073742203 "int foo() { return 1; }; sizeof(decltype(foo()));" $, "cppcheck-2.8/test/testsizeof.cpp" $, 203 $) ;
204: $if $(@expr1073742204 $!@expr1073742205 $assertEquals $(@expr1073742206 "cppcheck-2.8/test/testsizeof.cpp" $, 204 $, "" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
205:
206: $check_ $(@expr1073742209 "int foo(int) { return 1; }; int a=sizeof(foo(0))" $, "cppcheck-2.8/test/testsizeof.cpp" $, 206 $) ;
207: $if $(@expr1073742210 $!@expr1073742211 $assertEquals $(@expr1073742212 "cppcheck-2.8/test/testsizeof.cpp" $, 207 $, "[test.cpp:1]: (warning) Found function call inside sizeof().\n" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
208:
209: $check_ $(@expr1073742215 "char * buf; int a=sizeof(*buf);" $, "cppcheck-2.8/test/testsizeof.cpp" $, 209 $) ;
210: $if $(@expr1073742216 $!@expr1073742217 $assertEquals $(@expr1073742218 "cppcheck-2.8/test/testsizeof.cpp" $, 210 $, "" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
211:
212: $check_ $(@expr1073742221 "int a=sizeof(foo())" $, "cppcheck-2.8/test/testsizeof.cpp" $, 212 $) ;
213: $if $(@expr1073742222 $!@expr1073742223 $assertEquals $(@expr1073742224 "cppcheck-2.8/test/testsizeof.cpp" $, 213 $, "" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
214:
215: $check_ $(@expr1073742227 "int foo(int) { return 1; }; char buf[1024]; int a=sizeof(buf), foo(0)" $, "cppcheck-2.8/test/testsizeof.cpp" $, 215 $) ;
216: $if $(@expr1073742228 $!@expr1073742229 $assertEquals $(@expr1073742230 "cppcheck-2.8/test/testsizeof.cpp" $, 216 $, "" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
217:
218: $check_ $(@expr1073742233 "template<class T>\nstruct A\n{\n    static B f(const B &);\n    static A f(const A &);\n    static A &g();\n    static T &h();\n\n    enum {\n        X = sizeof(f(g() >> h())) == sizeof(A),\n        Y = sizeof(f(g() << h())) == sizeof(A),\n        Z = X & Y\n    };\n};" $, "cppcheck-2.8/test/testsizeof.cpp" $, 218 $)
219:
|
230:
231: ;
232: $if $(@expr1073742234 $!@expr1073742235 $assertEquals $(@expr1073742236 "cppcheck-2.8/test/testsizeof.cpp" $, 232 $, "" $, errout@var100 .@expr353 str (@expr354 ) $) $) { $return ; }
233: }
234:
235: void sizeofForArrayParameter ( ) {
236: $check_ $(@expr1073742239 "void f() {\n    int a[10];\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 236 $)
237:
238:
239: ;
240: $if $(@expr1073742240 $!@expr1073742241 $assertEquals $(@expr1073742242 "cppcheck-2.8/test/testsizeof.cpp" $, 240 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
241:
242: $check_ $(@expr1073742245 "void f() {\n    unsigned int a = 2;\n    unsigned int b = 2;\n    int c[(a+b)];\n    std::cout << sizeof(c) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 242 $)
243:
|
246:
247: ;
248: $if $(@expr1073742246 $!@expr1073742247 $assertEquals $(@expr1073742248 "cppcheck-2.8/test/testsizeof.cpp" $, 248 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
249:
250: $check_ $(@expr1073742251 "void f() {\n    unsigned int a = { 2 };\n    unsigned int b[] = { 0 };\n    int c[a[b[0]]];\n    std::cout << sizeof(c) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 250 $)
251:
|
254:
255: ;
256: $if $(@expr1073742252 $!@expr1073742253 $assertEquals $(@expr1073742254 "cppcheck-2.8/test/testsizeof.cpp" $, 256 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
257:
258:
259: $check_ $(@expr1073742257 "void f() {\n    unsigned int a[] = { 1 };\n    unsigned int b = 2;\n    int c[(a[0]+b)];\n    std::cout << sizeof(c) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 259 $)
260:
|
263:
264: ;
265: $if $(@expr1073742258 $!@expr1073742259 $assertEquals $(@expr1073742260 "cppcheck-2.8/test/testsizeof.cpp" $, 265 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
266:
267: $check_ $(@expr1073742263 "void f() {\n    int a[] = { 1, 2, 3 };\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 267 $)
268:
269:
270: ;
271: $if $(@expr1073742264 $!@expr1073742265 $assertEquals $(@expr1073742266 "cppcheck-2.8/test/testsizeof.cpp" $, 271 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
272:
273: $check_ $(@expr1073742269 "void f() {\n    int a[3] = { 1, 2, 3 };\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 273 $)
274:
275:
276: ;
277: $if $(@expr1073742270 $!@expr1073742271 $assertEquals $(@expr1073742272 "cppcheck-2.8/test/testsizeof.cpp" $, 277 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
278:
279: $check_ $(@expr1073742275 "void f( int a[]) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 279 $)
280:
281: ;
282: $if $(@expr1073742276 $!@expr1073742277 $assertEquals $(@expr1073742278 "cppcheck-2.8/test/testsizeof.cpp" $, 282 $, "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return
283: ; }
284:
285: $check_ $(@expr1073742281 "void f( int a[]) {\n    std::cout << sizeof a / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 285 $)
286:
287: ;
288: $if $(@expr1073742282 $!@expr1073742283 $assertEquals $(@expr1073742284 "cppcheck-2.8/test/testsizeof.cpp" $, 288 $, "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return
289: ; }
290:
291: $check_ $(@expr1073742287 "void f( int a[3] ) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 291 $)
292:
293: ;
294: $if $(@expr1073742288 $!@expr1073742289 $assertEquals $(@expr1073742290 "cppcheck-2.8/test/testsizeof.cpp" $, 294 $, "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return
295: ; }
296:
297: $check_ $(@expr1073742293 "typedef char Fixname[1000];\nint f2(Fixname& f2v) {\n  int i = sizeof(f2v);\n  printf(\"sizeof f2v %d\", i);\n   }" $, "cppcheck-2.8/test/testsizeof.cpp" $, 297 $)
298:
299:
300:
301: ;
302: $if $(@expr1073742294 $!@expr1073742295 $assertEquals $(@expr1073742296 "cppcheck-2.8/test/testsizeof.cpp" $, 302 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
303:
304: $check_ $(@expr1073742299 "void f(int *p) {\n    p[0] = 0;\n    int unused = sizeof(p);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 304 $)
305:
306:
307: ;
308: $if $(@expr1073742300 $!@expr1073742301 $assertEquals $(@expr1073742302 "cppcheck-2.8/test/testsizeof.cpp" $, 308 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
309:
310: $check_ $(@expr1073742305 "void f() {\n    char p[] = \"test\";\n    int unused = sizeof(p);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 310 $)
311:
312:
313: ;
314: $if $(@expr1073742306 $!@expr1073742307 $assertEquals $(@expr1073742308 "cppcheck-2.8/test/testsizeof.cpp" $, 314 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
315:
316:
317: $check_ $(@expr1073742311 "void f() {\n    static float col[][3]={\n      {1,0,0},\n      {0,0,1},\n      {0,1,0},\n      {1,0,1},\n      {1,0,1},\n      {1,0,1},\n    };\n    const int COL_MAX=sizeof(col)/sizeof(col[0]);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 317 $)
318:
|
326:
327: ;
328: $if $(@expr1073742312 $!@expr1073742313 $assertEquals $(@expr1073742314 "cppcheck-2.8/test/testsizeof.cpp" $, 328 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
329:
330:
331: $check_ $(@expr1073742317 "void f() {\n    char buff1[1024*64],buff2[sizeof(buff1)*2];\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 331 $)
332:
333: ;
334: $if $(@expr1073742318 $!@expr1073742319 $assertEquals $(@expr1073742320 "cppcheck-2.8/test/testsizeof.cpp" $, 334 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
335:
336:
337: $check_ $(@expr1073742323 "void f( int a[], int b) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 337 $)
338:
339: ;
340: $if $(@expr1073742324 $!@expr1073742325 $assertEquals $(@expr1073742326 "cppcheck-2.8/test/testsizeof.cpp" $, 340 $, "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return
341: ; }
342:
343:
344: $check_ $(@expr1073742329 "void f( int a[3] , int b[2] ) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 344 $)
345:
346: ;
347: $if $(@expr1073742330 $!@expr1073742331 $assertEquals $(@expr1073742332 "cppcheck-2.8/test/testsizeof.cpp" $, 347 $, "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return
348: ; }
349:
350:
351: $check_ $(@expr1073742335 "void f() {\n    char buff1[1024*64],buff2[sizeof(buff1)*(2+1)];\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 351 $)
352:
353: ;
354: $if $(@expr1073742336 $!@expr1073742337 $assertEquals $(@expr1073742338 "cppcheck-2.8/test/testsizeof.cpp" $, 354 $, "" $, errout@var100 .@expr419 str (@expr420 ) $) $) { $return ; }
355:
356: }
357:
358: void sizeofForNumericParameter ( ) {
359: $check_ $(@expr1073742341 "void f() {\n    std::cout << sizeof(10) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 359 $)
360:
361: ;
362: $if $(@expr1073742342 $!@expr1073742343 $assertEquals $(@expr1073742344 "cppcheck-2.8/test/testsizeof.cpp" $, 362 $, "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n" $, errout@var100 .@expr521 str (@expr522 ) $) $) { $return ; }
363:
364: $check_ $(@expr1073742347 "void f() {\n    std::cout << sizeof(-10) << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 364 $)
365:
366: ;
367: $if $(@expr1073742348 $!@expr1073742349 $assertEquals $(@expr1073742350 "cppcheck-2.8/test/testsizeof.cpp" $, 367 $, "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n" $, errout@var100 .@expr521 str (@expr522 ) $) $) { $return ; }
368:
369: $check_ $(@expr1073742353 "void f() {\n    std::cout << sizeof 10  << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 369 $)
370:
371: ;
372: $if $(@expr1073742354 $!@expr1073742355 $assertEquals $(@expr1073742356 "cppcheck-2.8/test/testsizeof.cpp" $, 372 $, "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n" $, errout@var100 .@expr521 str (@expr522 ) $) $) { $return ; }
373:
374: $check_ $(@expr1073742359 "void f() {\n    std::cout << sizeof -10  << std::endl;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 374 $)
375:
376: ;
377: $if $(@expr1073742360 $!@expr1073742361 $assertEquals $(@expr1073742362 "cppcheck-2.8/test/testsizeof.cpp" $, 377 $, "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n" $, errout@var100 .@expr521 str (@expr522 ) $) $) { $return ; }
378: }
379:
380: void suspiciousSizeofCalculation ( ) {
381: $check_ $(@expr1073742365 "void f() {\n  int* p;\n  return sizeof(p)/5;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 381 $)
382:
383:
384: ;
385: $if $(@expr1073742366 $!@expr1073742367 $assertEquals $(@expr1073742368 "cppcheck-2.8/test/testsizeof.cpp" $, 385 $, "[test.cpp:3]: (warning, inconclusive) Division of result of sizeof() on pointer type.\n" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
386:
387: $check_ $(@expr1073742371 "void f() {\n  unknown p;\n  return sizeof(p)/5;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 387 $)
388:
389:
390: ;
391: $if $(@expr1073742372 $!@expr1073742373 $assertEquals $(@expr1073742374 "cppcheck-2.8/test/testsizeof.cpp" $, 391 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
392:
393: $check_ $(@expr1073742377 "void f() {\n  return sizeof(unknown)/5;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 393 $)
394:
395: ;
396: $if $(@expr1073742378 $!@expr1073742379 $assertEquals $(@expr1073742380 "cppcheck-2.8/test/testsizeof.cpp" $, 396 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
397:
398: $check_ $(@expr1073742383 "void f() {\n  int p;\n  return sizeof(p)/5;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 398 $)
399:
400:
401: ;
402: $if $(@expr1073742384 $!@expr1073742385 $assertEquals $(@expr1073742386 "cppcheck-2.8/test/testsizeof.cpp" $, 402 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
403:
404: $check_ $(@expr1073742389 "void f() {\n  int* p[5];\n  return sizeof(p)/5;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 404 $)
405:
406:
407: ;
408: $if $(@expr1073742390 $!@expr1073742391 $assertEquals $(@expr1073742392 "cppcheck-2.8/test/testsizeof.cpp" $, 408 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
409:
410:
411: $check_ $(@expr1073742395 "void f() {\n  return sizeof(foo)*sizeof(bar);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 411 $)
412:
413: ;
414: $if $(@expr1073742396 $!@expr1073742397 $assertEquals $(@expr1073742398 "cppcheck-2.8/test/testsizeof.cpp" $, 414 $, "[test.cpp:2]: (warning, inconclusive) Multiplying sizeof() with sizeof() indicates a logic error.\n" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
415:
416: $check_ $(@expr1073742401 "void f() {\n  return (foo)*sizeof(bar);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 416 $)
417:
418: ;
419: $if $(@expr1073742402 $!@expr1073742403 $assertEquals $(@expr1073742404 "cppcheck-2.8/test/testsizeof.cpp" $, 419 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
420:
421: $check_ $(@expr1073742407 "void f() {\n  return sizeof(foo)*bar;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 421 $)
422:
423: ;
424: $if $(@expr1073742408 $!@expr1073742409 $assertEquals $(@expr1073742410 "cppcheck-2.8/test/testsizeof.cpp" $, 424 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
425:
426: $check_ $(@expr1073742413 "void f() {\n  return (end - source) / sizeof(encode_block_type) * sizeof(encode_block_type);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 426 $)
427:
428: ;
429: $if $(@expr1073742414 $!@expr1073742415 $assertEquals $(@expr1073742416 "cppcheck-2.8/test/testsizeof.cpp" $, 429 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
430:
431: $check_ $(@expr1073742419 "struct S { T* t; };\nint f(S* s) {\n    return g(sizeof(*s->t) / 4);\n}\n" $, "cppcheck-2.8/test/testsizeof.cpp" $, 431 $)
432:
433:
434: ;
435: $if $(@expr1073742420 $!@expr1073742421 $assertEquals $(@expr1073742422 "cppcheck-2.8/test/testsizeof.cpp" $, 435 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
436:
437: $check_ $(@expr1073742425 "void f() {\n    const char* a[N];\n    for (int i = 0; i < (int)(sizeof(a) / sizeof(char*)); i++) {}\n}\n" $, "cppcheck-2.8/test/testsizeof.cpp" $, 437 $)
438:
439:
440: ;
441: $if $(@expr1073742426 $!@expr1073742427 $assertEquals $(@expr1073742428 "cppcheck-2.8/test/testsizeof.cpp" $, 441 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
442:
443: $check_ $(@expr1073742431 "int f(int** p) {\n    return sizeof(p[0]) / 4;\n}\n" $, "cppcheck-2.8/test/testsizeof.cpp" $, 443 $)
444:
445: ;
446: $if $(@expr1073742432 $!@expr1073742433 $assertEquals $(@expr1073742434 "cppcheck-2.8/test/testsizeof.cpp" $, 446 $, "[test.cpp:2]: (warning, inconclusive) Division of result of sizeof() on pointer type.\n" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
447:
448: $check_ $(@expr1073742437 "struct S {\n    unsigned char* s;\n};\nstruct T {\n    S s[38];\n};\nvoid f(T* t) {\n    for (size_t i = 0; i < sizeof(t->s) / sizeof(t->s[0]); i++) {}\n}\n" $, "cppcheck-2.8/test/testsizeof.cpp" $, 448 $)
449:
|
455:
456: ;
457: $if $(@expr1073742438 $!@expr1073742439 $assertEquals $(@expr1073742440 "cppcheck-2.8/test/testsizeof.cpp" $, 457 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
458:
459: $check_ $(@expr1073742443 "struct S {\n    struct T {\n        char* c[3];\n    } t[1];\n};\nvoid f(S* s) {\n    for (int i = 0; i != sizeof(s->t[0].c) / sizeof(char*); i++) {}\n}\n" $, "cppcheck-2.8/test/testsizeof.cpp" $, 459 $)
460:
|
465:
466: ;
467: $if $(@expr1073742444 $!@expr1073742445 $assertEquals $(@expr1073742446 "cppcheck-2.8/test/testsizeof.cpp" $, 467 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
468:
469: $check_ $(@expr1073742449 "void f(int32_t* buf, size_t len) {\n    for (int i = 0; i < len / sizeof(buf[0]); i++) {}\n}\n" $, "cppcheck-2.8/test/testsizeof.cpp" $, 469 $)
470:
471: ;
472: $if $(@expr1073742450 $!@expr1073742451 $assertEquals $(@expr1073742452 "cppcheck-2.8/test/testsizeof.cpp" $, 472 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
473:
474: $check_ $(@expr1073742455 "void f(int32_t*** buf, size_t len) {\n    for (int i = 0; i < len / sizeof(**buf[0]); i++) {}\n    for (int i = 0; i < len / sizeof(*buf[0][0]); i++) {}\n}\n" $, "cppcheck-2.8/test/testsizeof.cpp" $, 474 $)
475:
476:
477: ;
478: $if $(@expr1073742456 $!@expr1073742457 $assertEquals $(@expr1073742458 "cppcheck-2.8/test/testsizeof.cpp" $, 478 $, "" $, errout@var100 .@expr545 str (@expr546 ) $) $) { $return ; }
479: }
480:
481: void checkPointerSizeof ( ) {
482: $check_ $(@expr1073742461 "void f() {\n    char *x = malloc(10);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 482 $)
483:
484:
485: ;
486: $if $(@expr1073742462 $!@expr1073742463 $assertEquals $(@expr1073742464 "cppcheck-2.8/test/testsizeof.cpp" $, 486 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
487:
488: $check_ $(@expr1073742467 "void f() {\n    int *x = malloc(sizeof(*x));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 488 $)
489:
490:
491: ;
492: $if $(@expr1073742468 $!@expr1073742469 $assertEquals $(@expr1073742470 "cppcheck-2.8/test/testsizeof.cpp" $, 492 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
493:
494: $check_ $(@expr1073742473 "void f() {\n    int *x = malloc(sizeof(int));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 494 $)
495:
496:
497: ;
498: $if $(@expr1073742474 $!@expr1073742475 $assertEquals $(@expr1073742476 "cppcheck-2.8/test/testsizeof.cpp" $, 498 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
499:
500: $check_ $(@expr1073742479 "void f() {\n    int *x = malloc(sizeof(x));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 500 $)
501:
502:
503: ;
504: $if $(@expr1073742480 $!@expr1073742481 $assertEquals $(@expr1073742482 "cppcheck-2.8/test/testsizeof.cpp" $, 504 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
505:
506: $check_ $(@expr1073742485 "void f() {\n    int *x = (int*)malloc(sizeof(x));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 506 $)
507:
508:
509: ;
510: $if $(@expr1073742486 $!@expr1073742487 $assertEquals $(@expr1073742488 "cppcheck-2.8/test/testsizeof.cpp" $, 510 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
511:
512: $check_ $(@expr1073742491 "void f() {\n    int *x = static_cast<int*>(malloc(sizeof(x)));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 512 $)
513:
514:
515: ;
516: $if $(@expr1073742492 $!@expr1073742493 $assertEquals $(@expr1073742494 "cppcheck-2.8/test/testsizeof.cpp" $, 516 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
517:
518: $check_ $(@expr1073742497 "void f() {\n    int *x = malloc(sizeof(&x));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 518 $)
519:
520:
521: ;
522: $if $(@expr1073742498 $!@expr1073742499 $assertEquals $(@expr1073742500 "cppcheck-2.8/test/testsizeof.cpp" $, 522 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
523:
524: $check_ $(@expr1073742503 "void f() {\n    int *x = malloc(sizeof(int*));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 524 $)
525:
526:
527: ;
528: $if $(@expr1073742504 $!@expr1073742505 $assertEquals $(@expr1073742506 "cppcheck-2.8/test/testsizeof.cpp" $, 528 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
529:
530: $check_ $(@expr1073742509 "void f() {\n    int *x = malloc(sizeof(int));\n    free(x);\n    int **y = malloc(sizeof(int*));\n    free(y);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 530 $)
531:
|
534:
535: ;
536: $if $(@expr1073742510 $!@expr1073742511 $assertEquals $(@expr1073742512 "cppcheck-2.8/test/testsizeof.cpp" $, 536 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
537:
538: $check_ $(@expr1073742515 "void f() {\n    int *x = malloc(100 * sizeof(x));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 538 $)
539:
540:
541: ;
542: $if $(@expr1073742516 $!@expr1073742517 $assertEquals $(@expr1073742518 "cppcheck-2.8/test/testsizeof.cpp" $, 542 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
543:
544: $check_ $(@expr1073742521 "void f() {\n    int *x = malloc(sizeof(x) * 100);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 544 $)
545:
546:
547: ;
548: $if $(@expr1073742522 $!@expr1073742523 $assertEquals $(@expr1073742524 "cppcheck-2.8/test/testsizeof.cpp" $, 548 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
549:
550: $check_ $(@expr1073742527 "void f() {\n    int *x = malloc(sizeof *x);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 550 $)
551:
552:
553: ;
554: $if $(@expr1073742528 $!@expr1073742529 $assertEquals $(@expr1073742530 "cppcheck-2.8/test/testsizeof.cpp" $, 554 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
555:
556: $check_ $(@expr1073742533 "void f() {\n    int *x = malloc(sizeof x);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 556 $)
557:
558:
559: ;
560: $if $(@expr1073742534 $!@expr1073742535 $assertEquals $(@expr1073742536 "cppcheck-2.8/test/testsizeof.cpp" $, 560 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
561:
562: $check_ $(@expr1073742539 "void f() {\n    int *x = malloc(100 * sizeof x);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 562 $)
563:
564:
565: ;
566: $if $(@expr1073742540 $!@expr1073742541 $assertEquals $(@expr1073742542 "cppcheck-2.8/test/testsizeof.cpp" $, 566 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
567:
568: $check_ $(@expr1073742545 "void f() {\n    int *x = calloc(1, sizeof(*x));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 568 $)
569:
570:
571: ;
572: $if $(@expr1073742546 $!@expr1073742547 $assertEquals $(@expr1073742548 "cppcheck-2.8/test/testsizeof.cpp" $, 572 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
573:
574: $check_ $(@expr1073742551 "void f() {\n    int *x = calloc(1, sizeof *x);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 574 $)
575:
576:
577: ;
578: $if $(@expr1073742552 $!@expr1073742553 $assertEquals $(@expr1073742554 "cppcheck-2.8/test/testsizeof.cpp" $, 578 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
579:
580: $check_ $(@expr1073742557 "void f() {\n    int *x = calloc(1, sizeof(x));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 580 $)
581:
582:
583: ;
584: $if $(@expr1073742558 $!@expr1073742559 $assertEquals $(@expr1073742560 "cppcheck-2.8/test/testsizeof.cpp" $, 584 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
585:
586: $check_ $(@expr1073742563 "void f() {\n    int *x = calloc(1, sizeof x);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 586 $)
587:
588:
589: ;
590: $if $(@expr1073742564 $!@expr1073742565 $assertEquals $(@expr1073742566 "cppcheck-2.8/test/testsizeof.cpp" $, 590 $, "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
591:
592: $check_ $(@expr1073742569 "void f() {\n    int *x = calloc(1, sizeof(int));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 592 $)
593:
594:
595: ;
596: $if $(@expr1073742570 $!@expr1073742571 $assertEquals $(@expr1073742572 "cppcheck-2.8/test/testsizeof.cpp" $, 596 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
597:
598: $check_ $(@expr1073742575 "void f() {\n    char x[10];\n    memset(x, 0, sizeof(x));\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 598 $)
599:
600:
601: ;
602: $if $(@expr1073742576 $!@expr1073742577 $assertEquals $(@expr1073742578 "cppcheck-2.8/test/testsizeof.cpp" $, 602 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
603:
604: $check_ $(@expr1073742581 "void f() {\n    char* x[10];\n    memset(x, 0, sizeof(x));\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 604 $)
605:
606:
607: ;
608: $if $(@expr1073742582 $!@expr1073742583 $assertEquals $(@expr1073742584 "cppcheck-2.8/test/testsizeof.cpp" $, 608 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
609:
610: $check_ $(@expr1073742587 "void f() {\n    char x[10];\n    memset(x, 0, sizeof x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 610 $)
611:
612:
613: ;
614: $if $(@expr1073742588 $!@expr1073742589 $assertEquals $(@expr1073742590 "cppcheck-2.8/test/testsizeof.cpp" $, 614 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
615:
616: $check_ $(@expr1073742593 "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof(int));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 616 $)
617:
618:
619:
620: ;
621: $if $(@expr1073742594 $!@expr1073742595 $assertEquals $(@expr1073742596 "cppcheck-2.8/test/testsizeof.cpp" $, 621 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
622:
623: $check_ $(@expr1073742599 "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof(*x));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 623 $)
624:
625:
626:
627: ;
628: $if $(@expr1073742600 $!@expr1073742601 $assertEquals $(@expr1073742602 "cppcheck-2.8/test/testsizeof.cpp" $, 628 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
629:
630: $check_ $(@expr1073742605 "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof *x);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 630 $)
631:
632:
633:
634: ;
635: $if $(@expr1073742606 $!@expr1073742607 $assertEquals $(@expr1073742608 "cppcheck-2.8/test/testsizeof.cpp" $, 635 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
636:
637: $check_ $(@expr1073742611 "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof x);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 637 $)
638:
639:
640:
641: ;
642: $if $(@expr1073742612 $!@expr1073742613 $assertEquals $(@expr1073742614 "cppcheck-2.8/test/testsizeof.cpp" $, 642 $, "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
643:
644: $check_ $(@expr1073742617 "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof(x));\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 644 $)
645:
646:
647:
648: ;
649: $if $(@expr1073742618 $!@expr1073742619 $assertEquals $(@expr1073742620 "cppcheck-2.8/test/testsizeof.cpp" $, 649 $, "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
650:
651: $check_ $(@expr1073742623 "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof(x) * 10);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 651 $)
652:
653:
654:
655: ;
656: $if $(@expr1073742624 $!@expr1073742625 $assertEquals $(@expr1073742626 "cppcheck-2.8/test/testsizeof.cpp" $, 656 $, "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
657:
658: $check_ $(@expr1073742629 "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof x * 10);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 658 $)
659:
660:
661:
662: ;
663: $if $(@expr1073742630 $!@expr1073742631 $assertEquals $(@expr1073742632 "cppcheck-2.8/test/testsizeof.cpp" $, 663 $, "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
664:
665: $check_ $(@expr1073742635 "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof(*x) * 10);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 665 $)
666:
667:
668:
669: ;
670: $if $(@expr1073742636 $!@expr1073742637 $assertEquals $(@expr1073742638 "cppcheck-2.8/test/testsizeof.cpp" $, 670 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
671:
672: $check_ $(@expr1073742641 "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof *x * 10);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 672 $)
673:
674:
675:
676: ;
677: $if $(@expr1073742642 $!@expr1073742643 $assertEquals $(@expr1073742644 "cppcheck-2.8/test/testsizeof.cpp" $, 677 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
678:
679: $check_ $(@expr1073742647 "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof(int) * 10);\n    free(x);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 679 $)
680:
681:
682:
683: ;
684: $if $(@expr1073742648 $!@expr1073742649 $assertEquals $(@expr1073742650 "cppcheck-2.8/test/testsizeof.cpp" $, 684 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
685:
686: $check_ $(@expr1073742653 "int fun(const char *buf1)\n{\n  const char *buf1_ex = \"foobarbaz\";\n  return strncmp(buf1, buf1_ex, sizeof(buf1_ex)) == 0;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 686 $)
687:
|
690:
691: ;
692: $if $(@expr1073742654 $!@expr1073742655 $assertEquals $(@expr1073742656 "cppcheck-2.8/test/testsizeof.cpp" $, 692 $, "[test.cpp:4]: (warning) Size of pointer 'buf1_ex' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
693:
694: $check_ $(@expr1073742659 "int fun(const char *buf1) {\n  return strncmp(buf1, foo(buf2), sizeof(buf1)) == 0;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 694 $)
695:
696:
697: ;
698: $if $(@expr1073742660 $!@expr1073742661 $assertEquals $(@expr1073742662 "cppcheck-2.8/test/testsizeof.cpp" $, 698 $, "[test.cpp:2]: (warning) Size of pointer 'buf1' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
699:
700: $check_ $(@expr1073742665 "int fun(const char *buf2) {\n  return strncmp(buf1, buf2, sizeof(char*)) == 0;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 700 $)
701:
702: ;
703: $if $(@expr1073742666 $!@expr1073742667 $assertEquals $(@expr1073742668 "cppcheck-2.8/test/testsizeof.cpp" $, 703 $, "[test.cpp:2]: (warning) Size of pointer 'buf2' used instead of size of its data.\n" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
704:
705:
706: $check_ $(@expr1073742671 "void f()\n{\n int * pIntArray[10];\n memset(pIntArray, 0, sizeof(pIntArray));\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 706 $)
707:
708:
709:
710: ;
711: $if $(@expr1073742672 $!@expr1073742673 $assertEquals $(@expr1073742674 "cppcheck-2.8/test/testsizeof.cpp" $, 711 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
712:
713: $check_ $(@expr1073742677 "void FreeFileName(const char *s) {\n  CxString tbuf;\n  const char *p;\n  memcpy(s, siezof(s));\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 713 $)
714:
715:
716:
717: ;
718: $if $(@expr1073742678 $!@expr1073742679 $assertEquals $(@expr1073742680 "cppcheck-2.8/test/testsizeof.cpp" $, 718 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
719:
720: $check_ $(@expr1073742683 "int f() {\n  module_config_t *tab = module;\n  memset(tab + confsize, 0, sizeof(tab[confsize]));\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 720 $)
721:
722:
723: ;
724: $if $(@expr1073742684 $!@expr1073742685 $assertEquals $(@expr1073742686 "cppcheck-2.8/test/testsizeof.cpp" $, 724 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
725:
726: $check_ $(@expr1073742689 "int f(char* aug) {\n  memmove(aug + extra_string, aug, buf - (bfd_byte *)aug);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 726 $)
727:
728: ;
729: $if $(@expr1073742690 $!@expr1073742691 $assertEquals $(@expr1073742692 "cppcheck-2.8/test/testsizeof.cpp" $, 729 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
730:
731:
732: $check_ $(@expr1073742695 "bool create_iso_definition(cpp_reader *pfile, cpp_macro *macro) {\n  cpp_token *token;\n  cpp_hashnode **params = malloc(sizeof(cpp_hashnode *) * macro->paramc);\n  memcpy(params, macro->params, sizeof(cpp_hashnode *) * macro->paramc);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 732 $)
733:
734:
735:
736: ;
737: $if $(@expr1073742696 $!@expr1073742697 $assertEquals $(@expr1073742698 "cppcheck-2.8/test/testsizeof.cpp" $, 737 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
738:
739: $check_ $(@expr1073742701 "void* foo() {\n  void* AtomName = malloc(sizeof(char *) * 34);\n  return AtomName;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 739 $)
740:
741:
742: ;
743: $if $(@expr1073742702 $!@expr1073742703 $assertEquals $(@expr1073742704 "cppcheck-2.8/test/testsizeof.cpp" $, 743 $, "" $, errout@var100 .@expr641 str (@expr642 ) $) $) { $return ; }
744: }
745:
746: void checkPointerSizeofStruct ( ) {
747: $check_ $(@expr1073742707 "void f() {\n    struct foo *ptr;\n    memset( ptr->bar, 0, sizeof ptr->bar );\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 747 $)
748:
749:
750: ;
751: $if $(@expr1073742708 $!@expr1073742709 $assertEquals $(@expr1073742710 "cppcheck-2.8/test/testsizeof.cpp" $, 751 $, "" $, errout@var100 .@expr887 str (@expr888 ) $) $) { $return ; }
752:
753: $check_ $(@expr1073742713 "void f() {\n    struct foo {\n        char bar[10];\n    }* ptr;\n    memset( ptr->bar, 0, sizeof ptr->bar );\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 753 $)
754:
|
757:
758: ;
759: $if $(@expr1073742714 $!@expr1073742715 $assertEquals $(@expr1073742716 "cppcheck-2.8/test/testsizeof.cpp" $, 759 $, "" $, errout@var100 .@expr887 str (@expr888 ) $) $) { $return ; }
760:
761: $check_ $(@expr1073742719 "void f() {\n    struct foo {\n        char *bar;\n    }* ptr;\n    memset( ptr->bar, 0, sizeof ptr->bar );\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 761 $)
762:
|
765:
766: ;
767: $if $(@expr1073742720 $!@expr1073742721 $assertEquals $(@expr1073742722 "cppcheck-2.8/test/testsizeof.cpp" $, 767 $, "[test.cpp:5]: (warning) Size of pointer 'bar' used instead of size of its data.\n" $, errout@var100 .@expr887 str (@expr888 ) $) $) { $return ; }
768: }
769:
770: void sizeofDivisionMemset ( ) {
771: $check_ $(@expr1073742725 "void foo(memoryMapEntry_t* entry, memoryMapEntry_t* memoryMapEnd) {\n    memmove(entry, entry + 1, (memoryMapEnd - entry) / sizeof(entry));\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 771 $)
772:
773: ;
774: $if $(@expr1073742726 $!@expr1073742727 $assertEquals $(@expr1073742728 "cppcheck-2.8/test/testsizeof.cpp" $, 774 $, "[test.cpp:2]: (warning, inconclusive) Division of result of sizeof() on pointer type.\n[test.cpp:2]: (warning) Division by result of sizeof(). memmove() expects a size in bytes, did you intend to multiply instead?\n" $, errout@var100 .@expr905 str (@expr906 ) $) $) { $return
775:
776: ; }
777:
778: $check_ $(@expr1073742731 "Foo* allocFoo(int num) {\n    return malloc(num / sizeof(Foo));\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 778 $)
779:
780: ;
781: $if $(@expr1073742732 $!@expr1073742733 $assertEquals $(@expr1073742734 "cppcheck-2.8/test/testsizeof.cpp" $, 781 $, "[test.cpp:2]: (warning) Division by result of sizeof(). malloc() expects a size in bytes, did you intend to multiply instead?\n" $, errout@var100 .@expr905 str (@expr906 ) $) $) { $return ; }
782:
783: $check_ $(@expr1073742737 "void f() {\n  char str[100];\n  strncpy(str, xyz, sizeof(str)/sizeof(str[0]));\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 783 $)
784:
785:
786: ;
787: $if $(@expr1073742738 $!@expr1073742739 $assertEquals $(@expr1073742740 "cppcheck-2.8/test/testsizeof.cpp" $, 787 $, "" $, errout@var100 .@expr905 str (@expr906 ) $) $) { $return ; }
788:
789: $check_ $(@expr1073742743 "void f() {\n    int a[5] = { 0 };\n    int b[5];\n    memcpy(b, a, ((sizeof(a) / sizeof(a[0])) - 1) * sizeof(a[0]));\n    memcpy(b, a, sizeof(a[0]) * ((sizeof(a) / sizeof(a[0])) - 1));\n}\n" $, "cppcheck-2.8/test/testsizeof.cpp" $, 789 $)
790:
|
793:
794: ;
795: $if $(@expr1073742744 $!@expr1073742745 $assertEquals $(@expr1073742746 "cppcheck-2.8/test/testsizeof.cpp" $, 795 $, "" $, errout@var100 .@expr905 str (@expr906 ) $) $) { $return ; }
796: }
797:
798: void sizeofVoid ( ) {
799: $check_ $(@expr1073742749 "void f() {\n  int size = sizeof(void);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 799 $)
800:
801: ;
802: $if $(@expr1073742750 $!@expr1073742751 $assertEquals $(@expr1073742752 "cppcheck-2.8/test/testsizeof.cpp" $, 802 $, "[test.cpp:2]: (portability) Behaviour of 'sizeof(void)' is not covered by the ISO C standard.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
803:
804: $check_ $(@expr1073742755 "void f() {\n  void* p;\n  int size = sizeof(*p);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 804 $)
805:
806:
807: ;
808: $if $(@expr1073742756 $!@expr1073742757 $assertEquals $(@expr1073742758 "cppcheck-2.8/test/testsizeof.cpp" $, 808 $, "[test.cpp:3]: (portability) '*p' is of type 'void', the behaviour of 'sizeof(void)' is not covered by the ISO C standard.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
809:
810: $check_ $(@expr1073742761 "void f() {\n  void* p = malloc(10);\n  int* p2 = p + 4;\n  int* p3 = p - 1;\n  int* p4 = 1 + p;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 810 $)
811:
|
814:
815: ;
816: $if $(@expr1073742762 $!@expr1073742763 $assertEquals $(@expr1073742764 "cppcheck-2.8/test/testsizeof.cpp" $, 816 $, "[test.cpp:3]: (portability) 'p' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:4]: (portability) 'p' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:5]: (portability) 'p' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return
817:
818: ; }
819:
820: $check_ $(@expr1073742767 "void f() {\n  void* p1 = malloc(10);\n  void* p2 = malloc(5);\n  p1--;\n  p2++;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 820 $)
821:
|
824:
825: ;
826: $if $(@expr1073742768 $!@expr1073742769 $assertEquals $(@expr1073742770 "cppcheck-2.8/test/testsizeof.cpp" $, 826 $, "[test.cpp:4]: (portability) 'p1' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:5]: (portability) 'p2' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return
827: ; }
828:
829: $check_ $(@expr1073742773 "void f() {\n  void* p1 = malloc(10);\n  void* p2 = malloc(5);\n  p1-=4;\n  p2+=4;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 829 $)
830:
|
833:
834: ;
835: $if $(@expr1073742774 $!@expr1073742775 $assertEquals $(@expr1073742776 "cppcheck-2.8/test/testsizeof.cpp" $, 835 $, "[test.cpp:4]: (portability) 'p1' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:5]: (portability) 'p2' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return
836: ; }
837:
838: $check_ $(@expr1073742779 "void f() {\n  void* p = malloc(10);\n  int* p2 = &p + 4;\n  int* p3 = &p - 1;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 838 $)
839:
840:
841:
842: ;
843: $if $(@expr1073742780 $!@expr1073742781 $assertEquals $(@expr1073742782 "cppcheck-2.8/test/testsizeof.cpp" $, 843 $, "" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
844:
845: $check_ $(@expr1073742785 "void f() {\n  void** p1 = malloc(10);\n  p1--;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 845 $)
846:
847:
848: ;
849: $if $(@expr1073742786 $!@expr1073742787 $assertEquals $(@expr1073742788 "cppcheck-2.8/test/testsizeof.cpp" $, 849 $, "" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
850:
851: $check_ $(@expr1073742791 "void f() {\n  void** p1;\n  int j = sizeof(*p1);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 851 $)
852:
853:
854: ;
855: $if $(@expr1073742792 $!@expr1073742793 $assertEquals $(@expr1073742794 "cppcheck-2.8/test/testsizeof.cpp" $, 855 $, "" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
856:
857: $check_ $(@expr1073742797 "void f() {\n  void* p1[5];\n  int j = sizeof(*p1);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 857 $)
858:
859:
860: ;
861: $if $(@expr1073742798 $!@expr1073742799 $assertEquals $(@expr1073742800 "cppcheck-2.8/test/testsizeof.cpp" $, 861 $, "" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
862:
863:
864:
865: $check_ $(@expr1073742803 "void f(void *data) {\n  *((unsigned char *)data + 1) = 0;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 865 $)
866:
867: ;
868: $if $(@expr1073742804 $!@expr1073742805 $assertEquals $(@expr1073742806 "cppcheck-2.8/test/testsizeof.cpp" $, 868 $, "" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
869:
870: $check_ $(@expr1073742809 "void f(void *data) {\n  *((unsigned char *)(data) + 1) = 0;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 870 $)
871:
872: ;
873: $if $(@expr1073742810 $!@expr1073742811 $assertEquals $(@expr1073742812 "cppcheck-2.8/test/testsizeof.cpp" $, 873 $, "" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
874:
875: $check_ $(@expr1073742815 "void f(void *data) {\n  unsigned char* c = (unsigned char *)(data + 1);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 875 $)
876:
877: ;
878: $if $(@expr1073742816 $!@expr1073742817 $assertEquals $(@expr1073742818 "cppcheck-2.8/test/testsizeof.cpp" $, 878 $, "[test.cpp:2]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
879:
880: $check_ $(@expr1073742821 "void f(void *data) {\n  unsigned char* c = (unsigned char *)data++;\n  unsigned char* c2 = (unsigned char *)++data;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 880 $)
881:
882:
883: ;
884: $if $(@expr1073742822 $!@expr1073742823 $assertEquals $(@expr1073742824 "cppcheck-2.8/test/testsizeof.cpp" $, 884 $, "[test.cpp:2]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:3]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return
885: ; }
886:
887: $check_ $(@expr1073742827 "void f(void *data) {\n  void* data2 = data + 1;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 887 $)
888:
889: ;
890: $if $(@expr1073742828 $!@expr1073742829 $assertEquals $(@expr1073742830 "cppcheck-2.8/test/testsizeof.cpp" $, 890 $, "[test.cpp:2]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
891:
892:
893: $check_ $(@expr1073742833 "struct FOO {\n  void *data;\n};\nchar f(struct FOO foo) {\n  char x = *((char*)(foo.data+1));\n  foo.data++;\n  return x;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 893 $)
894:
|
899:
900: ;
901: $if $(@expr1073742834 $!@expr1073742835 $assertEquals $(@expr1073742836 "cppcheck-2.8/test/testsizeof.cpp" $, 901 $, "[test.cpp:5]: (portability) 'foo.data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:6]: (portability) 'foo.data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return
902: ; }
903:
904: $check_ $(@expr1073742839 "struct FOO {\n  void *data;\n};\nchar f(struct FOO foo) {\n  char x = *((char*)foo.data+1);\n  return x;\n}\nchar f2(struct FOO foo) {\n  char x = *((char*)((FOO)foo).data + 1);\n  return x;\n}\nchar f3(struct FOO* foo) {\n  char x = *((char*)foo->data + 1);\n  return x;\n}\nstruct BOO {\n  FOO data;\n};\nvoid f4(struct BOO* boo) {\n  char c = *((char*)boo->data.data + 1);\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 904 $)
905:
|
923:
924: ;
925: $if $(@expr1073742840 $!@expr1073742841 $assertEquals $(@expr1073742842 "cppcheck-2.8/test/testsizeof.cpp" $, 925 $, "" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
926:
927: $check_ $(@expr1073742845 "struct FOO {\n  void *data;\n};\nchar f(struct FOO* foo) {\n  *(foo[1].data + 1) = 0;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 927 $)
928:
|
931:
932: ;
933: $if $(@expr1073742846 $!@expr1073742847 $assertEquals $(@expr1073742848 "cppcheck-2.8/test/testsizeof.cpp" $, 933 $, "[test.cpp:5]: (portability) 'foo[1].data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
934:
935: $check_ $(@expr1073742851 "struct FOO {\n  void *data;\n};\nvoid f2(struct FOO* foo) {\n  (foo[0]).data++;\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 935 $)
936:
|
939:
940: ;
941: $if $(@expr1073742852 $!@expr1073742853 $assertEquals $(@expr1073742854 "cppcheck-2.8/test/testsizeof.cpp" $, 941 $, "[test.cpp:5]: (portability) '(foo[0]).data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
942:
943:
944: $check_ $(@expr1073742857 "void* array[10];\nvoid** b = array + 3;" $, "cppcheck-2.8/test/testsizeof.cpp" $, 944 $)
945: ;
946: $if $(@expr1073742858 $!@expr1073742859 $assertEquals $(@expr1073742860 "cppcheck-2.8/test/testsizeof.cpp" $, 946 $, "" $, errout@var100 .@expr929 str (@expr930 ) $) $) { $return ; }
947: }
948:
949: void customStrncat ( ) {
950:
951: $check_ $(@expr1073742863 "char strncat ();\nint main () {\n  return strncat ();\n}" $, "cppcheck-2.8/test/testsizeof.cpp" $, 951 $)
952:
953:
954: ;
955: }
956:
957: } ;
958:
959: $namespace ${ TestSizeof instance_TestSizeof@var119 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@132}
  v {!<=-1,!>=2,0@132}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 35
  "TestSizeof" always "TestSizeof"
Line 45
  ( always {!<=-1,!>=2}
  "sizeofsizeof" always "sizeofsizeof"
  false always 0
  false always 0
Line 46
  ( always {!<=-1,!>=2}
  "sizeofCalculation" always "sizeofCalculation"
  false always 0
  false always 0
Line 47
  ( always {!<=-1,!>=2}
  "sizeofFunction" always "sizeofFunction"
  false always 0
  false always 0
Line 48
  ( always {!<=-1,!>=2}
  "checkPointerSizeof" always "checkPointerSizeof"
  false always 0
  false always 0
Line 49
  ( always {!<=-1,!>=2}
  "checkPointerSizeofStruct" always "checkPointerSizeofStruct"
  false always 0
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "sizeofDivisionMemset" always "sizeofDivisionMemset"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "sizeofForArrayParameter" always "sizeofForArrayParameter"
  false always 0
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "sizeofForNumericParameter" always "sizeofForNumericParameter"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "suspiciousSizeofCalculation" always "suspiciousSizeofCalculation"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "sizeofVoid" always "sizeofVoid"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "customStrncat" always "customStrncat"
  false always 0
  false always 0
Line 61
  "" always ""
Line 64
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 65
  code possible {"char strncat ();\nint main () {\n  return strncat ();\n}"@1,"void f() {\n  int size = sizeof(void);\n}"@2,"void f() {\n  void* p;\n  int size = sizeof(*p);\n}"@3,"void f() {\n  void* p = malloc(10);\n  int* p2 = p + 4;\n  int* p3 = p - 1;\n  int* p4 = 1 + p;\n}"@4,"void f() {\n  void* p1 = malloc(10);\n  void* p2 = malloc(5);\n  p1--;\n  p2++;\n}"@5,"void f() {\n  void* p1 = malloc(10);\n  void* p2 = malloc(5);\n  p1-=4;\n  p2+=4;\n}"@6,"void f() {\n  void* p = malloc(10);\n  int* p2 = &p + 4;\n  int* p3 = &p - 1;\n}"@7,"void f() {\n  void** p1 = malloc(10);\n  p1--;\n}"@8,"void f() {\n  void** p1;\n  int j = sizeof(*p1);\n}"@9,"void f() {\n  void* p1[5];\n  int j = sizeof(*p1);\n}"@10}
Line 66
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testsizeof.cpp"@1,"cppcheck-2.8/test/testsizeof.cpp"@2,"cppcheck-2.8/test/testsizeof.cpp"@3,"cppcheck-2.8/test/testsizeof.cpp"@4,"cppcheck-2.8/test/testsizeof.cpp"@5,"cppcheck-2.8/test/testsizeof.cpp"@6,"cppcheck-2.8/test/testsizeof.cpp"@7,"cppcheck-2.8/test/testsizeof.cpp"@8,"cppcheck-2.8/test/testsizeof.cpp"@9,"cppcheck-2.8/test/testsizeof.cpp"@10}
  line inconclusive {951@1,799@2,804@3,810@4,820@5,829@6,838@7,845@8,851@9,857@10}
  "test.cpp" always "test.cpp"
Line 69
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 70
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 75
  "" always ""
Line 78
  1 always 1
  "test.cpp" always "test.cpp"
Line 79
  code possible {"#define SIZEOF1   sizeof(i != 2)\n#define SIZEOF2   ((sizeof(i != 2)))\n#define VOIDCAST1 (void)\n#define VOIDCAST2(SZ) static_cast<void>(SZ)\nint f(int i) {\n  VOIDCAST1 SIZEOF1;\n  VOIDCAST1 SIZEOF2;\n  VOIDCAST2(SIZEOF1);\n  VOIDCAST2(SIZEOF2);\n  return i + foo(1);\n}"@126,"#define SIZEOF1   sizeof(i != 2)\n#define SIZEOF2   ((sizeof(i != 2)))\nint f(int i) {\n  SIZEOF1;\n  SIZEOF2;\n  return i + foo(1);\n}"@127,"#define MACRO(data)  f(data, sizeof(data))\nx = MACRO((unsigned int *)data + 4);"@128}
Line 80
  files always size=1
  0 always 0
Line 85
  filedata always size=0
Line 88
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 90
  "" always ""
Line 93
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 94
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 98
  "void foo()\n{\n    int i = sizeof sizeof char;\n}" always "void foo()\n{\n    int i = sizeof sizeof char;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  98 always 98
Line 102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  102 always 102
  "[test.cpp:3]: (warning) Calling 'sizeof' on 'sizeof'.\n" always "[test.cpp:3]: (warning) Calling 'sizeof' on 'sizeof'.\n"
Line 104
  "void foo()\n{\n    int i = sizeof (sizeof long);\n}" always "void foo()\n{\n    int i = sizeof (sizeof long);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  104 always 104
Line 108
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  108 always 108
  "[test.cpp:3]: (warning) Calling 'sizeof' on 'sizeof'.\n" always "[test.cpp:3]: (warning) Calling 'sizeof' on 'sizeof'.\n"
Line 110
  "void foo(long *p)\n{\n    int i = sizeof (sizeof (p));\n}" always "void foo(long *p)\n{\n    int i = sizeof (sizeof (p));\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  110 always 110
Line 114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  114 always 114
  "[test.cpp:3]: (warning) Calling 'sizeof' on 'sizeof'.\n" always "[test.cpp:3]: (warning) Calling 'sizeof' on 'sizeof'.\n"
Line 118
  "int a, b; int a,sizeof(a+b)" always "int a, b; int a,sizeof(a+b)"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  118 always 118
Line 119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  119 always 119
  "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" always "[test.cpp:1]: (warning) Found calculation inside sizeof().\n"
Line 121
  "int a, b; sizeof(a*b)" always "int a, b; sizeof(a*b)"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  121 always 121
Line 122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  122 always 122
  "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" always "[test.cpp:1]: (warning) Found calculation inside sizeof().\n"
Line 124
  "int a, b; sizeof(-a)" always "int a, b; sizeof(-a)"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  124 always 124
Line 125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  125 always 125
  "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" always "[test.cpp:1]: (warning) Found calculation inside sizeof().\n"
Line 127
  "int a, b; sizeof(*a)" always "int a, b; sizeof(*a)"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  127 always 127
Line 128
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  128 always 128
  "" always ""
Line 130
  "sizeof(void * const)" always "sizeof(void * const)"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  130 always 130
Line 131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  131 always 131
  "" always ""
Line 133
  "sizeof(int*[2])" always "sizeof(int*[2])"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  133 always 133
Line 134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  134 always 134
  "" always ""
Line 136
  "sizeof(Fred**)" always "sizeof(Fred**)"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  136 always 136
Line 137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  137 always 137
  "" always ""
Line 139
  "sizeof(foo++)" always "sizeof(foo++)"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  139 always 139
Line 140
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  140 always 140
  "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" always "[test.cpp:1]: (warning) Found calculation inside sizeof().\n"
Line 142
  "sizeof(--foo)" always "sizeof(--foo)"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  142 always 142
Line 143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  143 always 143
  "[test.cpp:1]: (warning) Found calculation inside sizeof().\n" always "[test.cpp:1]: (warning) Found calculation inside sizeof().\n"
Line 146
  "#define SIZEOF1   sizeof(i != 2)\n#define SIZEOF2   ((sizeof(i != 2)))\n#define VOIDCAST1 (void)\n#define VOIDCAST2(SZ) static_cast<void>(SZ)\nint f(int i) {\n  VOIDCAST1 SIZEOF1;\n  VOIDCAST1 SIZEOF2;\n  VOIDCAST2(SIZEOF1);\n  VOIDCAST2(SIZEOF2);\n  return i + foo(1);\n}" always "#define SIZEOF1   sizeof(i != 2)\n#define SIZEOF2   ((sizeof(i != 2)))\n#define VOIDCAST1 (void)\n#define VOIDCAST2(SZ) static_cast<void>(SZ)\nint f(int i) {\n  VOIDCAST1 SIZEOF1;\n  VOIDCAST1 SIZEOF2;\n  VOIDCAST2(SIZEOF1);\n  VOIDCAST2(SIZEOF2);\n  return i + foo(1);\n}"
Line 157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  157 always 157
  "" always ""
Line 159
  "#define SIZEOF1   sizeof(i != 2)\n#define SIZEOF2   ((sizeof(i != 2)))\nint f(int i) {\n  SIZEOF1;\n  SIZEOF2;\n  return i + foo(1);\n}" always "#define SIZEOF1   sizeof(i != 2)\n#define SIZEOF2   ((sizeof(i != 2)))\nint f(int i) {\n  SIZEOF1;\n  SIZEOF2;\n  return i + foo(1);\n}"
Line 166
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  166 always 166
  "[test.cpp:4]: (warning, inconclusive) Found calculation inside sizeof().\n[test.cpp:5]: (warning, inconclusive) Found calculation inside sizeof().\n" always "[test.cpp:4]: (warning, inconclusive) Found calculation inside sizeof().\n[test.cpp:5]: (warning, inconclusive) Found calculation inside sizeof().\n"
Line 169
  "#define MACRO(data)  f(data, sizeof(data))\nx = MACRO((unsigned int *)data + 4);" always "#define MACRO(data)  f(data, sizeof(data))\nx = MACRO((unsigned int *)data + 4);"
Line 171
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  171 always 171
  "[test.cpp:2]: (warning, inconclusive) Found calculation inside sizeof().\n" always "[test.cpp:2]: (warning, inconclusive) Found calculation inside sizeof().\n"
Line 175
  "class Foo\n{\n    int bar() { return 1; };\n}\nFoo f;int a=sizeof(f.bar());" always "class Foo\n{\n    int bar() { return 1; };\n}\nFoo f;int a=sizeof(f.bar());"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  175 always 175
Line 180
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  180 always 180
  "[test.cpp:5]: (warning) Found function call inside sizeof().\n" always "[test.cpp:5]: (warning) Found function call inside sizeof().\n"
Line 182
  "class Foo\n{\n    int bar() { return 1; };\n    int bar() const { return 1; };\n}\nFoo f;int a=sizeof(f.bar());" always "class Foo\n{\n    int bar() { return 1; };\n    int bar() const { return 1; };\n}\nFoo f;int a=sizeof(f.bar());"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  182 always 182
Line 188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  188 always 188
  "" always ""
Line 190
  "class Foo\n{\n    int bar() { return 1; };\n}\nFoo * fp;int a=sizeof(fp->bar());" always "class Foo\n{\n    int bar() { return 1; };\n}\nFoo * fp;int a=sizeof(fp->bar());"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  190 always 190
Line 195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  195 always 195
  "[test.cpp:5]: (warning) Found function call inside sizeof().\n" always "[test.cpp:5]: (warning) Found function call inside sizeof().\n"
Line 197
  "int a=sizeof(foo());" always "int a=sizeof(foo());"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  197 always 197
Line 198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  198 always 198
  "" always ""
Line 200
  "int foo() { return 1; }; int a=sizeof(foo());" always "int foo() { return 1; }; int a=sizeof(foo());"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  200 always 200
Line 201
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  201 always 201
  "[test.cpp:1]: (warning) Found function call inside sizeof().\n" always "[test.cpp:1]: (warning) Found function call inside sizeof().\n"
Line 203
  "int foo() { return 1; }; sizeof(decltype(foo()));" always "int foo() { return 1; }; sizeof(decltype(foo()));"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  203 always 203
Line 204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  204 always 204
  "" always ""
Line 206
  "int foo(int) { return 1; }; int a=sizeof(foo(0))" always "int foo(int) { return 1; }; int a=sizeof(foo(0))"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  206 always 206
Line 207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  207 always 207
  "[test.cpp:1]: (warning) Found function call inside sizeof().\n" always "[test.cpp:1]: (warning) Found function call inside sizeof().\n"
Line 209
  "char * buf; int a=sizeof(*buf);" always "char * buf; int a=sizeof(*buf);"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  209 always 209
Line 210
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  210 always 210
  "" always ""
Line 212
  "int a=sizeof(foo())" always "int a=sizeof(foo())"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  212 always 212
Line 213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  213 always 213
  "" always ""
Line 215
  "int foo(int) { return 1; }; char buf[1024]; int a=sizeof(buf), foo(0)" always "int foo(int) { return 1; }; char buf[1024]; int a=sizeof(buf), foo(0)"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  215 always 215
Line 216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  216 always 216
  "" always ""
Line 218
  "template<class T>\nstruct A\n{\n    static B f(const B &);\n    static A f(const A &);\n    static A &g();\n    static T &h();\n\n    enum {\n        X = sizeof(f(g() >> h())) == sizeof(A),\n        Y = sizeof(f(g() << h())) == sizeof(A),\n        Z = X & Y\n    };\n};" always "template<class T>\nstruct A\n{\n    static B f(const B &);\n    static A f(const A &);\n    static A &g();\n    static T &h();\n\n    enum {\n        X = sizeof(f(g() >> h())) == sizeof(A),\n        Y = sizeof(f(g() << h())) == sizeof(A),\n        Z = X & Y\n    };\n};"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  218 always 218
Line 232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  232 always 232
  "" always ""
Line 236
  "void f() {\n    int a[10];\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" always "void f() {\n    int a[10];\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  236 always 236
Line 240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  240 always 240
  "" always ""
Line 242
  "void f() {\n    unsigned int a = 2;\n    unsigned int b = 2;\n    int c[(a+b)];\n    std::cout << sizeof(c) / sizeof(int) << std::endl;\n}" always "void f() {\n    unsigned int a = 2;\n    unsigned int b = 2;\n    int c[(a+b)];\n    std::cout << sizeof(c) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  242 always 242
Line 248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  248 always 248
  "" always ""
Line 250
  "void f() {\n    unsigned int a = { 2 };\n    unsigned int b[] = { 0 };\n    int c[a[b[0]]];\n    std::cout << sizeof(c) / sizeof(int) << std::endl;\n}" always "void f() {\n    unsigned int a = { 2 };\n    unsigned int b[] = { 0 };\n    int c[a[b[0]]];\n    std::cout << sizeof(c) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  250 always 250
Line 256
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  256 always 256
  "" always ""
Line 259
  "void f() {\n    unsigned int a[] = { 1 };\n    unsigned int b = 2;\n    int c[(a[0]+b)];\n    std::cout << sizeof(c) / sizeof(int) << std::endl;\n}" always "void f() {\n    unsigned int a[] = { 1 };\n    unsigned int b = 2;\n    int c[(a[0]+b)];\n    std::cout << sizeof(c) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  259 always 259
Line 265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  265 always 265
  "" always ""
Line 267
  "void f() {\n    int a[] = { 1, 2, 3 };\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" always "void f() {\n    int a[] = { 1, 2, 3 };\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  267 always 267
Line 271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  271 always 271
  "" always ""
Line 273
  "void f() {\n    int a[3] = { 1, 2, 3 };\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" always "void f() {\n    int a[3] = { 1, 2, 3 };\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  273 always 273
Line 277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  277 always 277
  "" always ""
Line 279
  "void f( int a[]) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" always "void f( int a[]) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  279 always 279
Line 282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  282 always 282
  "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" always "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n"
Line 285
  "void f( int a[]) {\n    std::cout << sizeof a / sizeof(int) << std::endl;\n}" always "void f( int a[]) {\n    std::cout << sizeof a / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  285 always 285
Line 288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  288 always 288
  "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" always "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n"
Line 291
  "void f( int a[3] ) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" always "void f( int a[3] ) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  291 always 291
Line 294
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  294 always 294
  "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" always "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n"
Line 297
  "typedef char Fixname[1000];\nint f2(Fixname& f2v) {\n  int i = sizeof(f2v);\n  printf(\"sizeof f2v %d\", i);\n   }" always "typedef char Fixname[1000];\nint f2(Fixname& f2v) {\n  int i = sizeof(f2v);\n  printf(\"sizeof f2v %d\", i);\n   }"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  297 always 297
Line 302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  302 always 302
  "" always ""
Line 304
  "void f(int *p) {\n    p[0] = 0;\n    int unused = sizeof(p);\n}" always "void f(int *p) {\n    p[0] = 0;\n    int unused = sizeof(p);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  304 always 304
Line 308
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  308 always 308
  "" always ""
Line 310
  "void f() {\n    char p[] = \"test\";\n    int unused = sizeof(p);\n}" always "void f() {\n    char p[] = \"test\";\n    int unused = sizeof(p);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  310 always 310
Line 314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  314 always 314
  "" always ""
Line 317
  "void f() {\n    static float col[][3]={\n      {1,0,0},\n      {0,0,1},\n      {0,1,0},\n      {1,0,1},\n      {1,0,1},\n      {1,0,1},\n    };\n    const int COL_MAX=sizeof(col)/sizeof(col[0]);\n}" always "void f() {\n    static float col[][3]={\n      {1,0,0},\n      {0,0,1},\n      {0,1,0},\n      {1,0,1},\n      {1,0,1},\n      {1,0,1},\n    };\n    const int COL_MAX=sizeof(col)/sizeof(col[0]);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  317 always 317
Line 328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  328 always 328
  "" always ""
Line 331
  "void f() {\n    char buff1[1024*64],buff2[sizeof(buff1)*2];\n}" always "void f() {\n    char buff1[1024*64],buff2[sizeof(buff1)*2];\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  331 always 331
Line 334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  334 always 334
  "" always ""
Line 337
  "void f( int a[], int b) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" always "void f( int a[], int b) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  337 always 337
Line 340
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  340 always 340
  "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" always "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n"
Line 344
  "void f( int a[3] , int b[2] ) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}" always "void f( int a[3] , int b[2] ) {\n    std::cout << sizeof(a) / sizeof(int) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  344 always 344
Line 347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  347 always 347
  "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n" always "[test.cpp:2]: (warning) Using 'sizeof' on array given as function argument returns size of a pointer.\n"
Line 351
  "void f() {\n    char buff1[1024*64],buff2[sizeof(buff1)*(2+1)];\n}" always "void f() {\n    char buff1[1024*64],buff2[sizeof(buff1)*(2+1)];\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  351 always 351
Line 354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  354 always 354
  "" always ""
Line 359
  "void f() {\n    std::cout << sizeof(10) << std::endl;\n}" always "void f() {\n    std::cout << sizeof(10) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  359 always 359
Line 362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  362 always 362
  "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n" always "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n"
Line 364
  "void f() {\n    std::cout << sizeof(-10) << std::endl;\n}" always "void f() {\n    std::cout << sizeof(-10) << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  364 always 364
Line 367
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  367 always 367
  "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n" always "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n"
Line 369
  "void f() {\n    std::cout << sizeof 10  << std::endl;\n}" always "void f() {\n    std::cout << sizeof 10  << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  369 always 369
Line 372
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  372 always 372
  "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n" always "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n"
Line 374
  "void f() {\n    std::cout << sizeof -10  << std::endl;\n}" always "void f() {\n    std::cout << sizeof -10  << std::endl;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  374 always 374
Line 377
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  377 always 377
  "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n" always "[test.cpp:2]: (warning) Suspicious usage of 'sizeof' with a numeric constant as parameter.\n"
Line 381
  "void f() {\n  int* p;\n  return sizeof(p)/5;\n}" always "void f() {\n  int* p;\n  return sizeof(p)/5;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  381 always 381
Line 385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  385 always 385
  "[test.cpp:3]: (warning, inconclusive) Division of result of sizeof() on pointer type.\n" always "[test.cpp:3]: (warning, inconclusive) Division of result of sizeof() on pointer type.\n"
Line 387
  "void f() {\n  unknown p;\n  return sizeof(p)/5;\n}" always "void f() {\n  unknown p;\n  return sizeof(p)/5;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  387 always 387
Line 391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  391 always 391
  "" always ""
Line 393
  "void f() {\n  return sizeof(unknown)/5;\n}" always "void f() {\n  return sizeof(unknown)/5;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  393 always 393
Line 396
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  396 always 396
  "" always ""
Line 398
  "void f() {\n  int p;\n  return sizeof(p)/5;\n}" always "void f() {\n  int p;\n  return sizeof(p)/5;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  398 always 398
Line 402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  402 always 402
  "" always ""
Line 404
  "void f() {\n  int* p[5];\n  return sizeof(p)/5;\n}" always "void f() {\n  int* p[5];\n  return sizeof(p)/5;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  404 always 404
Line 408
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  408 always 408
  "" always ""
Line 411
  "void f() {\n  return sizeof(foo)*sizeof(bar);\n}" always "void f() {\n  return sizeof(foo)*sizeof(bar);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  411 always 411
Line 414
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  414 always 414
  "[test.cpp:2]: (warning, inconclusive) Multiplying sizeof() with sizeof() indicates a logic error.\n" always "[test.cpp:2]: (warning, inconclusive) Multiplying sizeof() with sizeof() indicates a logic error.\n"
Line 416
  "void f() {\n  return (foo)*sizeof(bar);\n}" always "void f() {\n  return (foo)*sizeof(bar);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  416 always 416
Line 419
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  419 always 419
  "" always ""
Line 421
  "void f() {\n  return sizeof(foo)*bar;\n}" always "void f() {\n  return sizeof(foo)*bar;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  421 always 421
Line 424
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  424 always 424
  "" always ""
Line 426
  "void f() {\n  return (end - source) / sizeof(encode_block_type) * sizeof(encode_block_type);\n}" always "void f() {\n  return (end - source) / sizeof(encode_block_type) * sizeof(encode_block_type);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  426 always 426
Line 429
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  429 always 429
  "" always ""
Line 431
  "struct S { T* t; };\nint f(S* s) {\n    return g(sizeof(*s->t) / 4);\n}\n" always "struct S { T* t; };\nint f(S* s) {\n    return g(sizeof(*s->t) / 4);\n}\n"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  431 always 431
Line 435
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  435 always 435
  "" always ""
Line 437
  "void f() {\n    const char* a[N];\n    for (int i = 0; i < (int)(sizeof(a) / sizeof(char*)); i++) {}\n}\n" always "void f() {\n    const char* a[N];\n    for (int i = 0; i < (int)(sizeof(a) / sizeof(char*)); i++) {}\n}\n"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  437 always 437
Line 441
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  441 always 441
  "" always ""
Line 443
  "int f(int** p) {\n    return sizeof(p[0]) / 4;\n}\n" always "int f(int** p) {\n    return sizeof(p[0]) / 4;\n}\n"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  443 always 443
Line 446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  446 always 446
  "[test.cpp:2]: (warning, inconclusive) Division of result of sizeof() on pointer type.\n" always "[test.cpp:2]: (warning, inconclusive) Division of result of sizeof() on pointer type.\n"
Line 448
  "struct S {\n    unsigned char* s;\n};\nstruct T {\n    S s[38];\n};\nvoid f(T* t) {\n    for (size_t i = 0; i < sizeof(t->s) / sizeof(t->s[0]); i++) {}\n}\n" always "struct S {\n    unsigned char* s;\n};\nstruct T {\n    S s[38];\n};\nvoid f(T* t) {\n    for (size_t i = 0; i < sizeof(t->s) / sizeof(t->s[0]); i++) {}\n}\n"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  448 always 448
Line 457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  457 always 457
  "" always ""
Line 459
  "struct S {\n    struct T {\n        char* c[3];\n    } t[1];\n};\nvoid f(S* s) {\n    for (int i = 0; i != sizeof(s->t[0].c) / sizeof(char*); i++) {}\n}\n" always "struct S {\n    struct T {\n        char* c[3];\n    } t[1];\n};\nvoid f(S* s) {\n    for (int i = 0; i != sizeof(s->t[0].c) / sizeof(char*); i++) {}\n}\n"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  459 always 459
Line 467
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  467 always 467
  "" always ""
Line 469
  "void f(int32_t* buf, size_t len) {\n    for (int i = 0; i < len / sizeof(buf[0]); i++) {}\n}\n" always "void f(int32_t* buf, size_t len) {\n    for (int i = 0; i < len / sizeof(buf[0]); i++) {}\n}\n"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  469 always 469
Line 472
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  472 always 472
  "" always ""
Line 474
  "void f(int32_t*** buf, size_t len) {\n    for (int i = 0; i < len / sizeof(**buf[0]); i++) {}\n    for (int i = 0; i < len / sizeof(*buf[0][0]); i++) {}\n}\n" always "void f(int32_t*** buf, size_t len) {\n    for (int i = 0; i < len / sizeof(**buf[0]); i++) {}\n    for (int i = 0; i < len / sizeof(*buf[0][0]); i++) {}\n}\n"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  474 always 474
Line 478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  478 always 478
  "" always ""
Line 482
  "void f() {\n    char *x = malloc(10);\n    free(x);\n}" always "void f() {\n    char *x = malloc(10);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  482 always 482
Line 486
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  486 always 486
  "" always ""
Line 488
  "void f() {\n    int *x = malloc(sizeof(*x));\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(*x));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  488 always 488
Line 492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  492 always 492
  "" always ""
Line 494
  "void f() {\n    int *x = malloc(sizeof(int));\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  494 always 494
Line 498
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  498 always 498
  "" always ""
Line 500
  "void f() {\n    int *x = malloc(sizeof(x));\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(x));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  500 always 500
Line 504
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  504 always 504
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 506
  "void f() {\n    int *x = (int*)malloc(sizeof(x));\n    free(x);\n}" always "void f() {\n    int *x = (int*)malloc(sizeof(x));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  506 always 506
Line 510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  510 always 510
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 512
  "void f() {\n    int *x = static_cast<int*>(malloc(sizeof(x)));\n    free(x);\n}" always "void f() {\n    int *x = static_cast<int*>(malloc(sizeof(x)));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  512 always 512
Line 516
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  516 always 516
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 518
  "void f() {\n    int *x = malloc(sizeof(&x));\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(&x));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  518 always 518
Line 522
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  522 always 522
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 524
  "void f() {\n    int *x = malloc(sizeof(int*));\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int*));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  524 always 524
Line 528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  528 always 528
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 530
  "void f() {\n    int *x = malloc(sizeof(int));\n    free(x);\n    int **y = malloc(sizeof(int*));\n    free(y);\n}" always "void f() {\n    int *x = malloc(sizeof(int));\n    free(x);\n    int **y = malloc(sizeof(int*));\n    free(y);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  530 always 530
Line 536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  536 always 536
  "" always ""
Line 538
  "void f() {\n    int *x = malloc(100 * sizeof(x));\n    free(x);\n}" always "void f() {\n    int *x = malloc(100 * sizeof(x));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  538 always 538
Line 542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  542 always 542
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 544
  "void f() {\n    int *x = malloc(sizeof(x) * 100);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(x) * 100);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  544 always 544
Line 548
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  548 always 548
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 550
  "void f() {\n    int *x = malloc(sizeof *x);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof *x);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  550 always 550
Line 554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  554 always 554
  "" always ""
Line 556
  "void f() {\n    int *x = malloc(sizeof x);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof x);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  556 always 556
Line 560
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  560 always 560
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 562
  "void f() {\n    int *x = malloc(100 * sizeof x);\n    free(x);\n}" always "void f() {\n    int *x = malloc(100 * sizeof x);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  562 always 562
Line 566
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  566 always 566
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 568
  "void f() {\n    int *x = calloc(1, sizeof(*x));\n    free(x);\n}" always "void f() {\n    int *x = calloc(1, sizeof(*x));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  568 always 568
Line 572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  572 always 572
  "" always ""
Line 574
  "void f() {\n    int *x = calloc(1, sizeof *x);\n    free(x);\n}" always "void f() {\n    int *x = calloc(1, sizeof *x);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  574 always 574
Line 578
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  578 always 578
  "" always ""
Line 580
  "void f() {\n    int *x = calloc(1, sizeof(x));\n    free(x);\n}" always "void f() {\n    int *x = calloc(1, sizeof(x));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  580 always 580
Line 584
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  584 always 584
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 586
  "void f() {\n    int *x = calloc(1, sizeof x);\n    free(x);\n}" always "void f() {\n    int *x = calloc(1, sizeof x);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  586 always 586
Line 590
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  590 always 590
  "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 592
  "void f() {\n    int *x = calloc(1, sizeof(int));\n    free(x);\n}" always "void f() {\n    int *x = calloc(1, sizeof(int));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  592 always 592
Line 596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  596 always 596
  "" always ""
Line 598
  "void f() {\n    char x[10];\n    memset(x, 0, sizeof(x));\n}" always "void f() {\n    char x[10];\n    memset(x, 0, sizeof(x));\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  598 always 598
Line 602
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  602 always 602
  "" always ""
Line 604
  "void f() {\n    char* x[10];\n    memset(x, 0, sizeof(x));\n}" always "void f() {\n    char* x[10];\n    memset(x, 0, sizeof(x));\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  604 always 604
Line 608
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  608 always 608
  "" always ""
Line 610
  "void f() {\n    char x[10];\n    memset(x, 0, sizeof x);\n}" always "void f() {\n    char x[10];\n    memset(x, 0, sizeof x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  610 always 610
Line 614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  614 always 614
  "" always ""
Line 616
  "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof(int));\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof(int));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  616 always 616
Line 621
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  621 always 621
  "" always ""
Line 623
  "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof(*x));\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof(*x));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  623 always 623
Line 628
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  628 always 628
  "" always ""
Line 630
  "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof *x);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof *x);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  630 always 630
Line 635
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  635 always 635
  "" always ""
Line 637
  "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof x);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof x);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  637 always 637
Line 642
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  642 always 642
  "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 644
  "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof(x));\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int));\n    memset(x, 0, sizeof(x));\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  644 always 644
Line 649
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  649 always 649
  "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 651
  "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof(x) * 10);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof(x) * 10);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  651 always 651
Line 656
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  656 always 656
  "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 658
  "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof x * 10);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof x * 10);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  658 always 658
Line 663
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  663 always 663
  "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n" always "[test.cpp:3]: (warning) Size of pointer 'x' used instead of size of its data.\n"
Line 665
  "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof(*x) * 10);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof(*x) * 10);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  665 always 665
Line 670
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  670 always 670
  "" always ""
Line 672
  "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof *x * 10);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof *x * 10);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  672 always 672
Line 677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  677 always 677
  "" always ""
Line 679
  "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof(int) * 10);\n    free(x);\n}" always "void f() {\n    int *x = malloc(sizeof(int) * 10);\n    memset(x, 0, sizeof(int) * 10);\n    free(x);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  679 always 679
Line 684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  684 always 684
  "" always ""
Line 686
  "int fun(const char *buf1)\n{\n  const char *buf1_ex = \"foobarbaz\";\n  return strncmp(buf1, buf1_ex, sizeof(buf1_ex)) == 0;\n}" always "int fun(const char *buf1)\n{\n  const char *buf1_ex = \"foobarbaz\";\n  return strncmp(buf1, buf1_ex, sizeof(buf1_ex)) == 0;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  686 always 686
Line 692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  692 always 692
  "[test.cpp:4]: (warning) Size of pointer 'buf1_ex' used instead of size of its data.\n" always "[test.cpp:4]: (warning) Size of pointer 'buf1_ex' used instead of size of its data.\n"
Line 694
  "int fun(const char *buf1) {\n  return strncmp(buf1, foo(buf2), sizeof(buf1)) == 0;\n}" always "int fun(const char *buf1) {\n  return strncmp(buf1, foo(buf2), sizeof(buf1)) == 0;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  694 always 694
Line 698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  698 always 698
  "[test.cpp:2]: (warning) Size of pointer 'buf1' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'buf1' used instead of size of its data.\n"
Line 700
  "int fun(const char *buf2) {\n  return strncmp(buf1, buf2, sizeof(char*)) == 0;\n}" always "int fun(const char *buf2) {\n  return strncmp(buf1, buf2, sizeof(char*)) == 0;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  700 always 700
Line 703
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  703 always 703
  "[test.cpp:2]: (warning) Size of pointer 'buf2' used instead of size of its data.\n" always "[test.cpp:2]: (warning) Size of pointer 'buf2' used instead of size of its data.\n"
Line 706
  "void f()\n{\n int * pIntArray[10];\n memset(pIntArray, 0, sizeof(pIntArray));\n}" always "void f()\n{\n int * pIntArray[10];\n memset(pIntArray, 0, sizeof(pIntArray));\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  706 always 706
Line 711
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  711 always 711
  "" always ""
Line 713
  "void FreeFileName(const char *s) {\n  CxString tbuf;\n  const char *p;\n  memcpy(s, siezof(s));\n}" always "void FreeFileName(const char *s) {\n  CxString tbuf;\n  const char *p;\n  memcpy(s, siezof(s));\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  713 always 713
Line 718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  718 always 718
  "" always ""
Line 720
  "int f() {\n  module_config_t *tab = module;\n  memset(tab + confsize, 0, sizeof(tab[confsize]));\n}" always "int f() {\n  module_config_t *tab = module;\n  memset(tab + confsize, 0, sizeof(tab[confsize]));\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  720 always 720
Line 724
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  724 always 724
  "" always ""
Line 726
  "int f(char* aug) {\n  memmove(aug + extra_string, aug, buf - (bfd_byte *)aug);\n}" always "int f(char* aug) {\n  memmove(aug + extra_string, aug, buf - (bfd_byte *)aug);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  726 always 726
Line 729
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  729 always 729
  "" always ""
Line 732
  "bool create_iso_definition(cpp_reader *pfile, cpp_macro *macro) {\n  cpp_token *token;\n  cpp_hashnode **params = malloc(sizeof(cpp_hashnode *) * macro->paramc);\n  memcpy(params, macro->params, sizeof(cpp_hashnode *) * macro->paramc);\n}" always "bool create_iso_definition(cpp_reader *pfile, cpp_macro *macro) {\n  cpp_token *token;\n  cpp_hashnode **params = malloc(sizeof(cpp_hashnode *) * macro->paramc);\n  memcpy(params, macro->params, sizeof(cpp_hashnode *) * macro->paramc);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  732 always 732
Line 737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  737 always 737
  "" always ""
Line 739
  "void* foo() {\n  void* AtomName = malloc(sizeof(char *) * 34);\n  return AtomName;\n}" always "void* foo() {\n  void* AtomName = malloc(sizeof(char *) * 34);\n  return AtomName;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  739 always 739
Line 743
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  743 always 743
  "" always ""
Line 747
  "void f() {\n    struct foo *ptr;\n    memset( ptr->bar, 0, sizeof ptr->bar );\n}" always "void f() {\n    struct foo *ptr;\n    memset( ptr->bar, 0, sizeof ptr->bar );\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  747 always 747
Line 751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  751 always 751
  "" always ""
Line 753
  "void f() {\n    struct foo {\n        char bar[10];\n    }* ptr;\n    memset( ptr->bar, 0, sizeof ptr->bar );\n}" always "void f() {\n    struct foo {\n        char bar[10];\n    }* ptr;\n    memset( ptr->bar, 0, sizeof ptr->bar );\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  753 always 753
Line 759
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  759 always 759
  "" always ""
Line 761
  "void f() {\n    struct foo {\n        char *bar;\n    }* ptr;\n    memset( ptr->bar, 0, sizeof ptr->bar );\n}" always "void f() {\n    struct foo {\n        char *bar;\n    }* ptr;\n    memset( ptr->bar, 0, sizeof ptr->bar );\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  761 always 761
Line 767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  767 always 767
  "[test.cpp:5]: (warning) Size of pointer 'bar' used instead of size of its data.\n" always "[test.cpp:5]: (warning) Size of pointer 'bar' used instead of size of its data.\n"
Line 771
  "void foo(memoryMapEntry_t* entry, memoryMapEntry_t* memoryMapEnd) {\n    memmove(entry, entry + 1, (memoryMapEnd - entry) / sizeof(entry));\n}" always "void foo(memoryMapEntry_t* entry, memoryMapEntry_t* memoryMapEnd) {\n    memmove(entry, entry + 1, (memoryMapEnd - entry) / sizeof(entry));\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  771 always 771
Line 774
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  774 always 774
  "[test.cpp:2]: (warning, inconclusive) Division of result of sizeof() on pointer type.\n[test.cpp:2]: (warning) Division by result of sizeof(). memmove() expects a size in bytes, did you intend to multiply instead?\n" always "[test.cpp:2]: (warning, inconclusive) Division of result of sizeof() on pointer type.\n[test.cpp:2]: (warning) Division by result of sizeof(). memmove() expects a size in bytes, did you intend to multiply instead?\n"
Line 778
  "Foo* allocFoo(int num) {\n    return malloc(num / sizeof(Foo));\n}" always "Foo* allocFoo(int num) {\n    return malloc(num / sizeof(Foo));\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  778 always 778
Line 781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  781 always 781
  "[test.cpp:2]: (warning) Division by result of sizeof(). malloc() expects a size in bytes, did you intend to multiply instead?\n" always "[test.cpp:2]: (warning) Division by result of sizeof(). malloc() expects a size in bytes, did you intend to multiply instead?\n"
Line 783
  "void f() {\n  char str[100];\n  strncpy(str, xyz, sizeof(str)/sizeof(str[0]));\n}" always "void f() {\n  char str[100];\n  strncpy(str, xyz, sizeof(str)/sizeof(str[0]));\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  783 always 783
Line 787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  787 always 787
  "" always ""
Line 789
  "void f() {\n    int a[5] = { 0 };\n    int b[5];\n    memcpy(b, a, ((sizeof(a) / sizeof(a[0])) - 1) * sizeof(a[0]));\n    memcpy(b, a, sizeof(a[0]) * ((sizeof(a) / sizeof(a[0])) - 1));\n}\n" always "void f() {\n    int a[5] = { 0 };\n    int b[5];\n    memcpy(b, a, ((sizeof(a) / sizeof(a[0])) - 1) * sizeof(a[0]));\n    memcpy(b, a, sizeof(a[0]) * ((sizeof(a) / sizeof(a[0])) - 1));\n}\n"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  789 always 789
Line 795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  795 always 795
  "" always ""
Line 799
  "void f() {\n  int size = sizeof(void);\n}" always "void f() {\n  int size = sizeof(void);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  799 always 799
Line 802
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  802 always 802
  "[test.cpp:2]: (portability) Behaviour of 'sizeof(void)' is not covered by the ISO C standard.\n" always "[test.cpp:2]: (portability) Behaviour of 'sizeof(void)' is not covered by the ISO C standard.\n"
Line 804
  "void f() {\n  void* p;\n  int size = sizeof(*p);\n}" always "void f() {\n  void* p;\n  int size = sizeof(*p);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  804 always 804
Line 808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  808 always 808
  "[test.cpp:3]: (portability) '*p' is of type 'void', the behaviour of 'sizeof(void)' is not covered by the ISO C standard.\n" always "[test.cpp:3]: (portability) '*p' is of type 'void', the behaviour of 'sizeof(void)' is not covered by the ISO C standard.\n"
Line 810
  "void f() {\n  void* p = malloc(10);\n  int* p2 = p + 4;\n  int* p3 = p - 1;\n  int* p4 = 1 + p;\n}" always "void f() {\n  void* p = malloc(10);\n  int* p2 = p + 4;\n  int* p3 = p - 1;\n  int* p4 = 1 + p;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  810 always 810
Line 816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  816 always 816
  "[test.cpp:3]: (portability) 'p' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:4]: (portability) 'p' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:5]: (portability) 'p' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" always "[test.cpp:3]: (portability) 'p' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:4]: (portability) 'p' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:5]: (portability) 'p' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n"
Line 820
  "void f() {\n  void* p1 = malloc(10);\n  void* p2 = malloc(5);\n  p1--;\n  p2++;\n}" always "void f() {\n  void* p1 = malloc(10);\n  void* p2 = malloc(5);\n  p1--;\n  p2++;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  820 always 820
Line 826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  826 always 826
  "[test.cpp:4]: (portability) 'p1' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:5]: (portability) 'p2' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" always "[test.cpp:4]: (portability) 'p1' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:5]: (portability) 'p2' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n"
Line 829
  "void f() {\n  void* p1 = malloc(10);\n  void* p2 = malloc(5);\n  p1-=4;\n  p2+=4;\n}" always "void f() {\n  void* p1 = malloc(10);\n  void* p2 = malloc(5);\n  p1-=4;\n  p2+=4;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  829 always 829
Line 835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  835 always 835
  "[test.cpp:4]: (portability) 'p1' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:5]: (portability) 'p2' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" always "[test.cpp:4]: (portability) 'p1' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:5]: (portability) 'p2' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n"
Line 838
  "void f() {\n  void* p = malloc(10);\n  int* p2 = &p + 4;\n  int* p3 = &p - 1;\n}" always "void f() {\n  void* p = malloc(10);\n  int* p2 = &p + 4;\n  int* p3 = &p - 1;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  838 always 838
Line 843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  843 always 843
  "" always ""
Line 845
  "void f() {\n  void** p1 = malloc(10);\n  p1--;\n}" always "void f() {\n  void** p1 = malloc(10);\n  p1--;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  845 always 845
Line 849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  849 always 849
  "" always ""
Line 851
  "void f() {\n  void** p1;\n  int j = sizeof(*p1);\n}" always "void f() {\n  void** p1;\n  int j = sizeof(*p1);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  851 always 851
Line 855
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  855 always 855
  "" always ""
Line 857
  "void f() {\n  void* p1[5];\n  int j = sizeof(*p1);\n}" always "void f() {\n  void* p1[5];\n  int j = sizeof(*p1);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  857 always 857
Line 861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  861 always 861
  "" always ""
Line 865
  "void f(void *data) {\n  *((unsigned char *)data + 1) = 0;\n}" always "void f(void *data) {\n  *((unsigned char *)data + 1) = 0;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  865 always 865
Line 868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  868 always 868
  "" always ""
Line 870
  "void f(void *data) {\n  *((unsigned char *)(data) + 1) = 0;\n}" always "void f(void *data) {\n  *((unsigned char *)(data) + 1) = 0;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  870 always 870
Line 873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  873 always 873
  "" always ""
Line 875
  "void f(void *data) {\n  unsigned char* c = (unsigned char *)(data + 1);\n}" always "void f(void *data) {\n  unsigned char* c = (unsigned char *)(data + 1);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  875 always 875
Line 878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  878 always 878
  "[test.cpp:2]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" always "[test.cpp:2]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n"
Line 880
  "void f(void *data) {\n  unsigned char* c = (unsigned char *)data++;\n  unsigned char* c2 = (unsigned char *)++data;\n}" always "void f(void *data) {\n  unsigned char* c = (unsigned char *)data++;\n  unsigned char* c2 = (unsigned char *)++data;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  880 always 880
Line 884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  884 always 884
  "[test.cpp:2]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:3]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" always "[test.cpp:2]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:3]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n"
Line 887
  "void f(void *data) {\n  void* data2 = data + 1;\n}" always "void f(void *data) {\n  void* data2 = data + 1;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  887 always 887
Line 890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  890 always 890
  "[test.cpp:2]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" always "[test.cpp:2]: (portability) 'data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n"
Line 893
  "struct FOO {\n  void *data;\n};\nchar f(struct FOO foo) {\n  char x = *((char*)(foo.data+1));\n  foo.data++;\n  return x;\n}" always "struct FOO {\n  void *data;\n};\nchar f(struct FOO foo) {\n  char x = *((char*)(foo.data+1));\n  foo.data++;\n  return x;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  893 always 893
Line 901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  901 always 901
  "[test.cpp:5]: (portability) 'foo.data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:6]: (portability) 'foo.data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" always "[test.cpp:5]: (portability) 'foo.data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n[test.cpp:6]: (portability) 'foo.data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n"
Line 904
  "struct FOO {\n  void *data;\n};\nchar f(struct FOO foo) {\n  char x = *((char*)foo.data+1);\n  return x;\n}\nchar f2(struct FOO foo) {\n  char x = *((char*)((FOO)foo).data + 1);\n  return x;\n}\nchar f3(struct FOO* foo) {\n  char x = *((char*)foo->data + 1);\n  return x;\n}\nstruct BOO {\n  FOO data;\n};\nvoid f4(struct BOO* boo) {\n  char c = *((char*)boo->data.data + 1);\n}" always "struct FOO {\n  void *data;\n};\nchar f(struct FOO foo) {\n  char x = *((char*)foo.data+1);\n  return x;\n}\nchar f2(struct FOO foo) {\n  char x = *((char*)((FOO)foo).data + 1);\n  return x;\n}\nchar f3(struct FOO* foo) {\n  char x = *((char*)foo->data + 1);\n  return x;\n}\nstruct BOO {\n  FOO data;\n};\nvoid f4(struct BOO* boo) {\n  char c = *((char*)boo->data.data + 1);\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  904 always 904
Line 925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  925 always 925
  "" always ""
Line 927
  "struct FOO {\n  void *data;\n};\nchar f(struct FOO* foo) {\n  *(foo[1].data + 1) = 0;\n}" always "struct FOO {\n  void *data;\n};\nchar f(struct FOO* foo) {\n  *(foo[1].data + 1) = 0;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  927 always 927
Line 933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  933 always 933
  "[test.cpp:5]: (portability) 'foo[1].data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" always "[test.cpp:5]: (portability) 'foo[1].data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n"
Line 935
  "struct FOO {\n  void *data;\n};\nvoid f2(struct FOO* foo) {\n  (foo[0]).data++;\n}" always "struct FOO {\n  void *data;\n};\nvoid f2(struct FOO* foo) {\n  (foo[0]).data++;\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  935 always 935
Line 941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  941 always 941
  "[test.cpp:5]: (portability) '(foo[0]).data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n" always "[test.cpp:5]: (portability) '(foo[0]).data' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined.\n"
Line 944
  "void* array[10];\nvoid** b = array + 3;" always "void* array[10];\nvoid** b = array + 3;"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  944 always 944
Line 946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  946 always 946
  "" always ""
Line 951
  "char strncat ();\nint main () {\n  return strncat ();\n}" always "char strncat ();\nint main () {\n  return strncat ();\n}"
  "cppcheck-2.8/test/testsizeof.cpp" always "cppcheck-2.8/test/testsizeof.cpp"
  951 always 951
