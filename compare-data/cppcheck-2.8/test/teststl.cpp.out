

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741957 expected@var22 !=@expr1073741958 actual@var23 ) {
62: std ::@expr1073741959 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741960 expected@var22 ;
64: std ::@expr1073741961 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741962 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741963 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741964 str (@expr1073741965 ) , actualStr@var26 .@expr1073741966 str (@expr1073741967 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741968 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741969 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741970 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741971 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/teststl.cpp

1:
|
30:
31: class TestStl : public TestFixture {
32: public:
33: TestStl ( ) : TestFixture ( "TestStl" ) { }
34:
35: private:
36: Settings settings@var102 ;
37:
38: void run ( ) override {
39: settings@var102 .@expr151 severity@var103 .@expr152 enable (@expr1073741977 Severity ::@expr1073741978 warning@expr1073741972 ) ;
40: settings@var102 .@expr151 severity@var103 .@expr152 enable (@expr1073741981 Severity ::@expr1073741982 style@expr1073741973 ) ;
41: settings@var102 .@expr151 severity@var103 .@expr152 enable (@expr1073741985 Severity ::@expr1073741986 performance@expr1073741974 ) ;
42: $do ${ $if $(@expr1073741987 settings@var102 .@expr1073741988 library@var104 $.@expr1073741989 $load $(@expr1073741990 $exename@var11 $.@expr1073741991 $c_str $(@expr1073741992 $) $, "std.cfg" $) $.@expr1073741993 $errorcode $!=@expr1073741994 $Library $::@expr1073741995 $ErrorCode $::@expr1073741996 $OK $) ${ $complainMissingLib $(@expr1073741997 "std.cfg" $) $; $return $; $} $} $while $(@expr1073741998 $false $) ;
43:
44: $do ${ $if $(@expr1073741999 $prepareTest $(@expr1073742000 "outOfBounds" $) $) ${ $setVerbose $(@expr1073742001 $false $) $; outOfBounds $(@expr1073742002 $) $; $} $} $while $(@expr1073742003 $false $) ;
45: $do ${ $if $(@expr1073742004 $prepareTest $(@expr1073742005 "outOfBoundsSymbolic" $) $) ${ $setVerbose $(@expr1073742006 $false $) $; outOfBoundsSymbolic $(@expr1073742007 $) $; $} $} $while $(@expr1073742008 $false $) ;
46: $do ${ $if $(@expr1073742009 $prepareTest $(@expr1073742010 "outOfBoundsIndexExpression" $) $) ${ $setVerbose $(@expr1073742011 $false $) $; outOfBoundsIndexExpression $(@expr1073742012 $) $; $} $} $while $(@expr1073742013 $false $) ;
47: $do ${ $if $(@expr1073742014 $prepareTest $(@expr1073742015 "outOfBoundsIterator" $) $) ${ $setVerbose $(@expr1073742016 $false $) $; outOfBoundsIterator $(@expr1073742017 $) $; $} $} $while $(@expr1073742018 $false $) ;
48:
49: $do ${ $if $(@expr1073742019 $prepareTest $(@expr1073742020 "iterator1" $) $) ${ $setVerbose $(@expr1073742021 $false $) $; iterator1 $(@expr1073742022 $) $; $} $} $while $(@expr1073742023 $false $) ;
50: $do ${ $if $(@expr1073742024 $prepareTest $(@expr1073742025 "iterator2" $) $) ${ $setVerbose $(@expr1073742026 $false $) $; iterator2 $(@expr1073742027 $) $; $} $} $while $(@expr1073742028 $false $) ;
51: $do ${ $if $(@expr1073742029 $prepareTest $(@expr1073742030 "iterator3" $) $) ${ $setVerbose $(@expr1073742031 $false $) $; iterator3 $(@expr1073742032 $) $; $} $} $while $(@expr1073742033 $false $) ;
52: $do ${ $if $(@expr1073742034 $prepareTest $(@expr1073742035 "iterator4" $) $) ${ $setVerbose $(@expr1073742036 $false $) $; iterator4 $(@expr1073742037 $) $; $} $} $while $(@expr1073742038 $false $) ;
53: $do ${ $if $(@expr1073742039 $prepareTest $(@expr1073742040 "iterator5" $) $) ${ $setVerbose $(@expr1073742041 $false $) $; iterator5 $(@expr1073742042 $) $; $} $} $while $(@expr1073742043 $false $) ;
54: $do ${ $if $(@expr1073742044 $prepareTest $(@expr1073742045 "iterator6" $) $) ${ $setVerbose $(@expr1073742046 $false $) $; iterator6 $(@expr1073742047 $) $; $} $} $while $(@expr1073742048 $false $) ;
55: $do ${ $if $(@expr1073742049 $prepareTest $(@expr1073742050 "iterator7" $) $) ${ $setVerbose $(@expr1073742051 $false $) $; iterator7 $(@expr1073742052 $) $; $} $} $while $(@expr1073742053 $false $) ;
56: $do ${ $if $(@expr1073742054 $prepareTest $(@expr1073742055 "iterator8" $) $) ${ $setVerbose $(@expr1073742056 $false $) $; iterator8 $(@expr1073742057 $) $; $} $} $while $(@expr1073742058 $false $) ;
57: $do ${ $if $(@expr1073742059 $prepareTest $(@expr1073742060 "iterator9" $) $) ${ $setVerbose $(@expr1073742061 $false $) $; iterator9 $(@expr1073742062 $) $; $} $} $while $(@expr1073742063 $false $) ;
58: $do ${ $if $(@expr1073742064 $prepareTest $(@expr1073742065 "iterator10" $) $) ${ $setVerbose $(@expr1073742066 $false $) $; iterator10 $(@expr1073742067 $) $; $} $} $while $(@expr1073742068 $false $) ;
59: $do ${ $if $(@expr1073742069 $prepareTest $(@expr1073742070 "iterator11" $) $) ${ $setVerbose $(@expr1073742071 $false $) $; iterator11 $(@expr1073742072 $) $; $} $} $while $(@expr1073742073 $false $) ;
60: $do ${ $if $(@expr1073742074 $prepareTest $(@expr1073742075 "iterator12" $) $) ${ $setVerbose $(@expr1073742076 $false $) $; iterator12 $(@expr1073742077 $) $; $} $} $while $(@expr1073742078 $false $) ;
61: $do ${ $if $(@expr1073742079 $prepareTest $(@expr1073742080 "iterator13" $) $) ${ $setVerbose $(@expr1073742081 $false $) $; iterator13 $(@expr1073742082 $) $; $} $} $while $(@expr1073742083 $false $) ;
62: $do ${ $if $(@expr1073742084 $prepareTest $(@expr1073742085 "iterator14" $) $) ${ $setVerbose $(@expr1073742086 $false $) $; iterator14 $(@expr1073742087 $) $; $} $} $while $(@expr1073742088 $false $) ;
63: $do ${ $if $(@expr1073742089 $prepareTest $(@expr1073742090 "iterator15" $) $) ${ $setVerbose $(@expr1073742091 $false $) $; iterator15 $(@expr1073742092 $) $; $} $} $while $(@expr1073742093 $false $) ;
64: $do ${ $if $(@expr1073742094 $prepareTest $(@expr1073742095 "iterator16" $) $) ${ $setVerbose $(@expr1073742096 $false $) $; iterator16 $(@expr1073742097 $) $; $} $} $while $(@expr1073742098 $false $) ;
65: $do ${ $if $(@expr1073742099 $prepareTest $(@expr1073742100 "iterator17" $) $) ${ $setVerbose $(@expr1073742101 $false $) $; iterator17 $(@expr1073742102 $) $; $} $} $while $(@expr1073742103 $false $) ;
66: $do ${ $if $(@expr1073742104 $prepareTest $(@expr1073742105 "iterator18" $) $) ${ $setVerbose $(@expr1073742106 $false $) $; iterator18 $(@expr1073742107 $) $; $} $} $while $(@expr1073742108 $false $) ;
67: $do ${ $if $(@expr1073742109 $prepareTest $(@expr1073742110 "iterator19" $) $) ${ $setVerbose $(@expr1073742111 $false $) $; iterator19 $(@expr1073742112 $) $; $} $} $while $(@expr1073742113 $false $) ;
68: $do ${ $if $(@expr1073742114 $prepareTest $(@expr1073742115 "iterator20" $) $) ${ $setVerbose $(@expr1073742116 $false $) $; iterator20 $(@expr1073742117 $) $; $} $} $while $(@expr1073742118 $false $) ;
69: $do ${ $if $(@expr1073742119 $prepareTest $(@expr1073742120 "iterator21" $) $) ${ $setVerbose $(@expr1073742121 $false $) $; iterator21 $(@expr1073742122 $) $; $} $} $while $(@expr1073742123 $false $) ;
70: $do ${ $if $(@expr1073742124 $prepareTest $(@expr1073742125 "iterator22" $) $) ${ $setVerbose $(@expr1073742126 $false $) $; iterator22 $(@expr1073742127 $) $; $} $} $while $(@expr1073742128 $false $) ;
71: $do ${ $if $(@expr1073742129 $prepareTest $(@expr1073742130 "iterator23" $) $) ${ $setVerbose $(@expr1073742131 $false $) $; iterator23 $(@expr1073742132 $) $; $} $} $while $(@expr1073742133 $false $) ;
72: $do ${ $if $(@expr1073742134 $prepareTest $(@expr1073742135 "iterator24" $) $) ${ $setVerbose $(@expr1073742136 $false $) $; iterator24 $(@expr1073742137 $) $; $} $} $while $(@expr1073742138 $false $) ;
73: $do ${ $if $(@expr1073742139 $prepareTest $(@expr1073742140 "iterator25" $) $) ${ $setVerbose $(@expr1073742141 $false $) $; iterator25 $(@expr1073742142 $) $; $} $} $while $(@expr1073742143 $false $) ;
74: $do ${ $if $(@expr1073742144 $prepareTest $(@expr1073742145 "iterator26" $) $) ${ $setVerbose $(@expr1073742146 $false $) $; iterator26 $(@expr1073742147 $) $; $} $} $while $(@expr1073742148 $false $) ;
75: $do ${ $if $(@expr1073742149 $prepareTest $(@expr1073742150 "iterator27" $) $) ${ $setVerbose $(@expr1073742151 $false $) $; iterator27 $(@expr1073742152 $) $; $} $} $while $(@expr1073742153 $false $) ;
76: $do ${ $if $(@expr1073742154 $prepareTest $(@expr1073742155 "iterator28" $) $) ${ $setVerbose $(@expr1073742156 $false $) $; iterator28 $(@expr1073742157 $) $; $} $} $while $(@expr1073742158 $false $) ;
77: $do ${ $if $(@expr1073742159 $prepareTest $(@expr1073742160 "iteratorExpression" $) $) ${ $setVerbose $(@expr1073742161 $false $) $; iteratorExpression $(@expr1073742162 $) $; $} $} $while $(@expr1073742163 $false $) ;
78: $do ${ $if $(@expr1073742164 $prepareTest $(@expr1073742165 "iteratorSameExpression" $) $) ${ $setVerbose $(@expr1073742166 $false $) $; iteratorSameExpression $(@expr1073742167 $) $; $} $} $while $(@expr1073742168 $false $) ;
79: $do ${ $if $(@expr1073742169 $prepareTest $(@expr1073742170 "mismatchingContainerIterator" $) $) ${ $setVerbose $(@expr1073742171 $false $) $; mismatchingContainerIterator $(@expr1073742172 $) $; $} $} $while $(@expr1073742173 $false $) ;
80:
81: $do ${ $if $(@expr1073742174 $prepareTest $(@expr1073742175 "dereference" $) $) ${ $setVerbose $(@expr1073742176 $false $) $; dereference $(@expr1073742177 $) $; $} $} $while $(@expr1073742178 $false $) ;
82: $do ${ $if $(@expr1073742179 $prepareTest $(@expr1073742180 "dereference_break" $) $) ${ $setVerbose $(@expr1073742181 $false $) $; dereference_break $(@expr1073742182 $) $; $} $} $while $(@expr1073742183 $false $) ;
83: $do ${ $if $(@expr1073742184 $prepareTest $(@expr1073742185 "dereference_member" $) $) ${ $setVerbose $(@expr1073742186 $false $) $; dereference_member $(@expr1073742187 $) $; $} $} $while $(@expr1073742188 $false $) ;
84:
85: $do ${ $if $(@expr1073742189 $prepareTest $(@expr1073742190 "STLSize" $) $) ${ $setVerbose $(@expr1073742191 $false $) $; STLSize $(@expr1073742192 $) $; $} $} $while $(@expr1073742193 $false $) ;
86: $do ${ $if $(@expr1073742194 $prepareTest $(@expr1073742195 "STLSizeNoErr" $) $) ${ $setVerbose $(@expr1073742196 $false $) $; STLSizeNoErr $(@expr1073742197 $) $; $} $} $while $(@expr1073742198 $false $) ;
87: $do ${ $if $(@expr1073742199 $prepareTest $(@expr1073742200 "negativeIndex" $) $) ${ $setVerbose $(@expr1073742201 $false $) $; negativeIndex $(@expr1073742202 $) $; $} $} $while $(@expr1073742203 $false $) ;
88: $do ${ $if $(@expr1073742204 $prepareTest $(@expr1073742205 "erase1" $) $) ${ $setVerbose $(@expr1073742206 $false $) $; erase1 $(@expr1073742207 $) $; $} $} $while $(@expr1073742208 $false $) ;
89: $do ${ $if $(@expr1073742209 $prepareTest $(@expr1073742210 "erase2" $) $) ${ $setVerbose $(@expr1073742211 $false $) $; erase2 $(@expr1073742212 $) $; $} $} $while $(@expr1073742213 $false $) ;
90: $do ${ $if $(@expr1073742214 $prepareTest $(@expr1073742215 "erase3" $) $) ${ $setVerbose $(@expr1073742216 $false $) $; erase3 $(@expr1073742217 $) $; $} $} $while $(@expr1073742218 $false $) ;
91: $do ${ $if $(@expr1073742219 $prepareTest $(@expr1073742220 "erase4" $) $) ${ $setVerbose $(@expr1073742221 $false $) $; erase4 $(@expr1073742222 $) $; $} $} $while $(@expr1073742223 $false $) ;
92: $do ${ $if $(@expr1073742224 $prepareTest $(@expr1073742225 "erase5" $) $) ${ $setVerbose $(@expr1073742226 $false $) $; erase5 $(@expr1073742227 $) $; $} $} $while $(@expr1073742228 $false $) ;
93: $do ${ $if $(@expr1073742229 $prepareTest $(@expr1073742230 "erase6" $) $) ${ $setVerbose $(@expr1073742231 $false $) $; erase6 $(@expr1073742232 $) $; $} $} $while $(@expr1073742233 $false $) ;
94: $do ${ $if $(@expr1073742234 $prepareTest $(@expr1073742235 "eraseBreak" $) $) ${ $setVerbose $(@expr1073742236 $false $) $; eraseBreak $(@expr1073742237 $) $; $} $} $while $(@expr1073742238 $false $) ;
95: $do ${ $if $(@expr1073742239 $prepareTest $(@expr1073742240 "eraseContinue" $) $) ${ $setVerbose $(@expr1073742241 $false $) $; eraseContinue $(@expr1073742242 $) $; $} $} $while $(@expr1073742243 $false $) ;
96: $do ${ $if $(@expr1073742244 $prepareTest $(@expr1073742245 "eraseReturn1" $) $) ${ $setVerbose $(@expr1073742246 $false $) $; eraseReturn1 $(@expr1073742247 $) $; $} $} $while $(@expr1073742248 $false $) ;
97: $do ${ $if $(@expr1073742249 $prepareTest $(@expr1073742250 "eraseReturn2" $) $) ${ $setVerbose $(@expr1073742251 $false $) $; eraseReturn2 $(@expr1073742252 $) $; $} $} $while $(@expr1073742253 $false $) ;
98: $do ${ $if $(@expr1073742254 $prepareTest $(@expr1073742255 "eraseReturn3" $) $) ${ $setVerbose $(@expr1073742256 $false $) $; eraseReturn3 $(@expr1073742257 $) $; $} $} $while $(@expr1073742258 $false $) ;
99: $do ${ $if $(@expr1073742259 $prepareTest $(@expr1073742260 "eraseGoto" $) $) ${ $setVerbose $(@expr1073742261 $false $) $; eraseGoto $(@expr1073742262 $) $; $} $} $while $(@expr1073742263 $false $) ;
100: $do ${ $if $(@expr1073742264 $prepareTest $(@expr1073742265 "eraseAssign1" $) $) ${ $setVerbose $(@expr1073742266 $false $) $; eraseAssign1 $(@expr1073742267 $) $; $} $} $while $(@expr1073742268 $false $) ;
101: $do ${ $if $(@expr1073742269 $prepareTest $(@expr1073742270 "eraseAssign2" $) $) ${ $setVerbose $(@expr1073742271 $false $) $; eraseAssign2 $(@expr1073742272 $) $; $} $} $while $(@expr1073742273 $false $) ;
102: $do ${ $if $(@expr1073742274 $prepareTest $(@expr1073742275 "eraseAssign3" $) $) ${ $setVerbose $(@expr1073742276 $false $) $; eraseAssign3 $(@expr1073742277 $) $; $} $} $while $(@expr1073742278 $false $) ;
103: $do ${ $if $(@expr1073742279 $prepareTest $(@expr1073742280 "eraseAssign4" $) $) ${ $setVerbose $(@expr1073742281 $false $) $; eraseAssign4 $(@expr1073742282 $) $; $} $} $while $(@expr1073742283 $false $) ;
104: $do ${ $if $(@expr1073742284 $prepareTest $(@expr1073742285 "eraseAssignByFunctionCall" $) $) ${ $setVerbose $(@expr1073742286 $false $) $; eraseAssignByFunctionCall $(@expr1073742287 $) $; $} $} $while $(@expr1073742288 $false $) ;
105: $do ${ $if $(@expr1073742289 $prepareTest $(@expr1073742290 "eraseErase" $) $) ${ $setVerbose $(@expr1073742291 $false $) $; eraseErase $(@expr1073742292 $) $; $} $} $while $(@expr1073742293 $false $) ;
106: $do ${ $if $(@expr1073742294 $prepareTest $(@expr1073742295 "eraseByValue" $) $) ${ $setVerbose $(@expr1073742296 $false $) $; eraseByValue $(@expr1073742297 $) $; $} $} $while $(@expr1073742298 $false $) ;
107: $do ${ $if $(@expr1073742299 $prepareTest $(@expr1073742300 "eraseIf" $) $) ${ $setVerbose $(@expr1073742301 $false $) $; eraseIf $(@expr1073742302 $) $; $} $} $while $(@expr1073742303 $false $) ;
108: $do ${ $if $(@expr1073742304 $prepareTest $(@expr1073742305 "eraseOnVector" $) $) ${ $setVerbose $(@expr1073742306 $false $) $; eraseOnVector $(@expr1073742307 $) $; $} $} $while $(@expr1073742308 $false $) ;
109:
110: $do ${ $if $(@expr1073742309 $prepareTest $(@expr1073742310 "pushback1" $) $) ${ $setVerbose $(@expr1073742311 $false $) $; pushback1 $(@expr1073742312 $) $; $} $} $while $(@expr1073742313 $false $) ;
111: $do ${ $if $(@expr1073742314 $prepareTest $(@expr1073742315 "pushback2" $) $) ${ $setVerbose $(@expr1073742316 $false $) $; pushback2 $(@expr1073742317 $) $; $} $} $while $(@expr1073742318 $false $) ;
112: $do ${ $if $(@expr1073742319 $prepareTest $(@expr1073742320 "pushback3" $) $) ${ $setVerbose $(@expr1073742321 $false $) $; pushback3 $(@expr1073742322 $) $; $} $} $while $(@expr1073742323 $false $) ;
113: $do ${ $if $(@expr1073742324 $prepareTest $(@expr1073742325 "pushback4" $) $) ${ $setVerbose $(@expr1073742326 $false $) $; pushback4 $(@expr1073742327 $) $; $} $} $while $(@expr1073742328 $false $) ;
114: $do ${ $if $(@expr1073742329 $prepareTest $(@expr1073742330 "pushback5" $) $) ${ $setVerbose $(@expr1073742331 $false $) $; pushback5 $(@expr1073742332 $) $; $} $} $while $(@expr1073742333 $false $) ;
115: $do ${ $if $(@expr1073742334 $prepareTest $(@expr1073742335 "pushback6" $) $) ${ $setVerbose $(@expr1073742336 $false $) $; pushback6 $(@expr1073742337 $) $; $} $} $while $(@expr1073742338 $false $) ;
116: $do ${ $if $(@expr1073742339 $prepareTest $(@expr1073742340 "pushback7" $) $) ${ $setVerbose $(@expr1073742341 $false $) $; pushback7 $(@expr1073742342 $) $; $} $} $while $(@expr1073742343 $false $) ;
117: $do ${ $if $(@expr1073742344 $prepareTest $(@expr1073742345 "pushback8" $) $) ${ $setVerbose $(@expr1073742346 $false $) $; pushback8 $(@expr1073742347 $) $; $} $} $while $(@expr1073742348 $false $) ;
118: $do ${ $if $(@expr1073742349 $prepareTest $(@expr1073742350 "pushback9" $) $) ${ $setVerbose $(@expr1073742351 $false $) $; pushback9 $(@expr1073742352 $) $; $} $} $while $(@expr1073742353 $false $) ;
119: $do ${ $if $(@expr1073742354 $prepareTest $(@expr1073742355 "pushback10" $) $) ${ $setVerbose $(@expr1073742356 $false $) $; pushback10 $(@expr1073742357 $) $; $} $} $while $(@expr1073742358 $false $) ;
120: $do ${ $if $(@expr1073742359 $prepareTest $(@expr1073742360 "pushback11" $) $) ${ $setVerbose $(@expr1073742361 $false $) $; pushback11 $(@expr1073742362 $) $; $} $} $while $(@expr1073742363 $false $) ;
121: $do ${ $if $(@expr1073742364 $prepareTest $(@expr1073742365 "pushback12" $) $) ${ $setVerbose $(@expr1073742366 $false $) $; pushback12 $(@expr1073742367 $) $; $} $} $while $(@expr1073742368 $false $) ;
122: $do ${ $if $(@expr1073742369 $prepareTest $(@expr1073742370 "pushback13" $) $) ${ $setVerbose $(@expr1073742371 $false $) $; pushback13 $(@expr1073742372 $) $; $} $} $while $(@expr1073742373 $false $) ;
123: $do ${ $if $(@expr1073742374 $prepareTest $(@expr1073742375 "insert1" $) $) ${ $setVerbose $(@expr1073742376 $false $) $; insert1 $(@expr1073742377 $) $; $} $} $while $(@expr1073742378 $false $) ;
124: $do ${ $if $(@expr1073742379 $prepareTest $(@expr1073742380 "insert2" $) $) ${ $setVerbose $(@expr1073742381 $false $) $; insert2 $(@expr1073742382 $) $; $} $} $while $(@expr1073742383 $false $) ;
125:
126: $do ${ $if $(@expr1073742384 $prepareTest $(@expr1073742385 "stlBoundaries1" $) $) ${ $setVerbose $(@expr1073742386 $false $) $; stlBoundaries1 $(@expr1073742387 $) $; $} $} $while $(@expr1073742388 $false $) ;
127: $do ${ $if $(@expr1073742389 $prepareTest $(@expr1073742390 "stlBoundaries2" $) $) ${ $setVerbose $(@expr1073742391 $false $) $; stlBoundaries2 $(@expr1073742392 $) $; $} $} $while $(@expr1073742393 $false $) ;
128: $do ${ $if $(@expr1073742394 $prepareTest $(@expr1073742395 "stlBoundaries3" $) $) ${ $setVerbose $(@expr1073742396 $false $) $; stlBoundaries3 $(@expr1073742397 $) $; $} $} $while $(@expr1073742398 $false $) ;
129: $do ${ $if $(@expr1073742399 $prepareTest $(@expr1073742400 "stlBoundaries4" $) $) ${ $setVerbose $(@expr1073742401 $false $) $; stlBoundaries4 $(@expr1073742402 $) $; $} $} $while $(@expr1073742403 $false $) ;
130: $do ${ $if $(@expr1073742404 $prepareTest $(@expr1073742405 "stlBoundaries5" $) $) ${ $setVerbose $(@expr1073742406 $false $) $; stlBoundaries5 $(@expr1073742407 $) $; $} $} $while $(@expr1073742408 $false $) ;
131: $do ${ $if $(@expr1073742409 $prepareTest $(@expr1073742410 "stlBoundaries6" $) $) ${ $setVerbose $(@expr1073742411 $false $) $; stlBoundaries6 $(@expr1073742412 $) $; $} $} $while $(@expr1073742413 $false $) ;
132:
133:
134: $do ${ $if $(@expr1073742414 $prepareTest $(@expr1073742415 "if_find" $) $) ${ $setVerbose $(@expr1073742416 $false $) $; if_find $(@expr1073742417 $) $; $} $} $while $(@expr1073742418 $false $) ;
135: $do ${ $if $(@expr1073742419 $prepareTest $(@expr1073742420 "if_str_find" $) $) ${ $setVerbose $(@expr1073742421 $false $) $; if_str_find $(@expr1073742422 $) $; $} $} $while $(@expr1073742423 $false $) ;
136:
137: $do ${ $if $(@expr1073742424 $prepareTest $(@expr1073742425 "size1" $) $) ${ $setVerbose $(@expr1073742426 $false $) $; size1 $(@expr1073742427 $) $; $} $} $while $(@expr1073742428 $false $) ;
138: $do ${ $if $(@expr1073742429 $prepareTest $(@expr1073742430 "size2" $) $) ${ $setVerbose $(@expr1073742431 $false $) $; size2 $(@expr1073742432 $) $; $} $} $while $(@expr1073742433 $false $) ;
139: $do ${ $if $(@expr1073742434 $prepareTest $(@expr1073742435 "size3" $) $) ${ $setVerbose $(@expr1073742436 $false $) $; size3 $(@expr1073742437 $) $; $} $} $while $(@expr1073742438 $false $) ;
140: $do ${ $if $(@expr1073742439 $prepareTest $(@expr1073742440 "size4" $) $) ${ $setVerbose $(@expr1073742441 $false $) $; size4 $(@expr1073742442 $) $; $} $} $while $(@expr1073742443 $false $) ;
141:
142:
143:
144: $do ${ $if $(@expr1073742444 $prepareTest $(@expr1073742445 "redundantCondition1" $) $) ${ $setVerbose $(@expr1073742446 $false $) $; redundantCondition1 $(@expr1073742447 $) $; $} $} $while $(@expr1073742448 $false $) ;
145:
146:
147: $do ${ $if $(@expr1073742449 $prepareTest $(@expr1073742450 "missingInnerComparison1" $) $) ${ $setVerbose $(@expr1073742451 $false $) $; missingInnerComparison1 $(@expr1073742452 $) $; $} $} $while $(@expr1073742453 $false $) ;
148: $do ${ $if $(@expr1073742454 $prepareTest $(@expr1073742455 "missingInnerComparison2" $) $) ${ $setVerbose $(@expr1073742456 $false $) $; missingInnerComparison2 $(@expr1073742457 $) $; $} $} $while $(@expr1073742458 $false $) ;
149: $do ${ $if $(@expr1073742459 $prepareTest $(@expr1073742460 "missingInnerComparison3" $) $) ${ $setVerbose $(@expr1073742461 $false $) $; missingInnerComparison3 $(@expr1073742462 $) $; $} $} $while $(@expr1073742463 $false $) ;
150: $do ${ $if $(@expr1073742464 $prepareTest $(@expr1073742465 "missingInnerComparison4" $) $) ${ $setVerbose $(@expr1073742466 $false $) $; missingInnerComparison4 $(@expr1073742467 $) $; $} $} $while $(@expr1073742468 $false $) ;
151: $do ${ $if $(@expr1073742469 $prepareTest $(@expr1073742470 "missingInnerComparison5" $) $) ${ $setVerbose $(@expr1073742471 $false $) $; missingInnerComparison5 $(@expr1073742472 $) $; $} $} $while $(@expr1073742473 $false $) ;
152: $do ${ $if $(@expr1073742474 $prepareTest $(@expr1073742475 "missingInnerComparison6" $) $) ${ $setVerbose $(@expr1073742476 $false $) $; missingInnerComparison6 $(@expr1073742477 $) $; $} $} $while $(@expr1073742478 $false $) ;
153:
154:
155: $do ${ $if $(@expr1073742479 $prepareTest $(@expr1073742480 "cstr" $) $) ${ $setVerbose $(@expr1073742481 $false $) $; cstr $(@expr1073742482 $) $; $} $} $while $(@expr1073742483 $false $) ;
156:
157: $do ${ $if $(@expr1073742484 $prepareTest $(@expr1073742485 "uselessCalls" $) $) ${ $setVerbose $(@expr1073742486 $false $) $; uselessCalls $(@expr1073742487 $) $; $} $} $while $(@expr1073742488 $false $) ;
158: $do ${ $if $(@expr1073742489 $prepareTest $(@expr1073742490 "stabilityOfChecks" $) $) ${ $setVerbose $(@expr1073742491 $false $) $; stabilityOfChecks $(@expr1073742492 $) $; $} $} $while $(@expr1073742493 $false $) ;
159:
160: $do ${ $if $(@expr1073742494 $prepareTest $(@expr1073742495 "dereferenceInvalidIterator" $) $) ${ $setVerbose $(@expr1073742496 $false $) $; dereferenceInvalidIterator $(@expr1073742497 $) $; $} $} $while $(@expr1073742498 $false $) ;
161: $do ${ $if $(@expr1073742499 $prepareTest $(@expr1073742500 "dereferenceInvalidIterator2" $) $) ${ $setVerbose $(@expr1073742501 $false $) $; dereferenceInvalidIterator2 $(@expr1073742502 $) $; $} $} $while $(@expr1073742503 $false $) ;
162: $do ${ $if $(@expr1073742504 $prepareTest $(@expr1073742505 "dereference_auto" $) $) ${ $setVerbose $(@expr1073742506 $false $) $; dereference_auto $(@expr1073742507 $) $; $} $} $while $(@expr1073742508 $false $) ;
163:
164: $do ${ $if $(@expr1073742509 $prepareTest $(@expr1073742510 "loopAlgoElementAssign" $) $) ${ $setVerbose $(@expr1073742511 $false $) $; loopAlgoElementAssign $(@expr1073742512 $) $; $} $} $while $(@expr1073742513 $false $) ;
165: $do ${ $if $(@expr1073742514 $prepareTest $(@expr1073742515 "loopAlgoAccumulateAssign" $) $) ${ $setVerbose $(@expr1073742516 $false $) $; loopAlgoAccumulateAssign $(@expr1073742517 $) $; $} $} $while $(@expr1073742518 $false $) ;
166: $do ${ $if $(@expr1073742519 $prepareTest $(@expr1073742520 "loopAlgoContainerInsert" $) $) ${ $setVerbose $(@expr1073742521 $false $) $; loopAlgoContainerInsert $(@expr1073742522 $) $; $} $} $while $(@expr1073742523 $false $) ;
167: $do ${ $if $(@expr1073742524 $prepareTest $(@expr1073742525 "loopAlgoIncrement" $) $) ${ $setVerbose $(@expr1073742526 $false $) $; loopAlgoIncrement $(@expr1073742527 $) $; $} $} $while $(@expr1073742528 $false $) ;
168: $do ${ $if $(@expr1073742529 $prepareTest $(@expr1073742530 "loopAlgoConditional" $) $) ${ $setVerbose $(@expr1073742531 $false $) $; loopAlgoConditional $(@expr1073742532 $) $; $} $} $while $(@expr1073742533 $false $) ;
169: $do ${ $if $(@expr1073742534 $prepareTest $(@expr1073742535 "loopAlgoMinMax" $) $) ${ $setVerbose $(@expr1073742536 $false $) $; loopAlgoMinMax $(@expr1073742537 $) $; $} $} $while $(@expr1073742538 $false $) ;
170:
171: $do ${ $if $(@expr1073742539 $prepareTest $(@expr1073742540 "invalidContainer" $) $) ${ $setVerbose $(@expr1073742541 $false $) $; invalidContainer $(@expr1073742542 $) $; $} $} $while $(@expr1073742543 $false $) ;
172: $do ${ $if $(@expr1073742544 $prepareTest $(@expr1073742545 "invalidContainerLoop" $) $) ${ $setVerbose $(@expr1073742546 $false $) $; invalidContainerLoop $(@expr1073742547 $) $; $} $} $while $(@expr1073742548 $false $) ;
173: $do ${ $if $(@expr1073742549 $prepareTest $(@expr1073742550 "findInsert" $) $) ${ $setVerbose $(@expr1073742551 $false $) $; findInsert $(@expr1073742552 $) $; $} $} $while $(@expr1073742553 $false $) ;
174:
175: $do ${ $if $(@expr1073742554 $prepareTest $(@expr1073742555 "checkKnownEmptyContainer" $) $) ${ $setVerbose $(@expr1073742556 $false $) $; checkKnownEmptyContainer $(@expr1073742557 $) $; $} $} $while $(@expr1073742558 $false $) ;
176: $do ${ $if $(@expr1073742559 $prepareTest $(@expr1073742560 "checkMutexes" $) $) ${ $setVerbose $(@expr1073742561 $false $) $; checkMutexes $(@expr1073742562 $) $; $} $} $while $(@expr1073742563 $false $) ;
177: }
178:
179:
180: void check_ ( const char * file@var105 , int line@var106 , const char code@var107 [ ] , const bool inconclusive@var108 = false , const Standards :: cppstd_t cppstandard@var109 = Standards :: CPPLatest ) {
181:
182: errout@var100 .@expr1073742565 str (@expr1073742566 "" ) ;
183:
184: settings@var102 .@expr1073742567 certainty@var110 .@expr1073742568 setEnabled (@expr1073742569 Certainty ::@expr1073742570 inconclusive@expr1073742564 , inconclusive@var108 ) ;
185: settings@var102 .@expr1073742571 standards@var111 .@expr1073742572 cpp@var112 =@expr1073742573 cppstandard@var109 ;
186:
187:
188:
189: Tokenizer tokenizer@var113 (@expr1073742574 &@expr751 settings@var102 , this@expr752 ) ;
190: std ::@expr1073742577 istringstream istr@var114 (@expr1073742578 code@var107 ) ;
191:
192: CheckStl checkStl@var115 (@expr1073742579 &@expr756 tokenizer@var113 , &@expr751 settings@var102 , this@expr752 ) ;
193:
194: $assert_ $(@expr1073742582 file@var105 $, line@var106 $, $(@expr1073742583 tokenizer@var113 .@expr1073742584 tokenize (@expr1073742585 istr@var114 , "test.cpp" ) $) $) ;
195: checkStl@var115 .@expr1073742586 runChecks (@expr1073742587 &@expr756 tokenizer@var113 , &@expr751 settings@var102 , this@expr752 ) ;
196: }
197:
198: void check_ ( const char * file@var116 , int line@var117 , const std :: string & code@var118 , const bool inconclusive@var119 = false ) {
199: check_ (@expr1073742590 file@var116 , line@var117 , code@var118 .@expr1073742591 c_str (@expr1073742592 ) , inconclusive@var119 ) ;
200: }
201:
202:
203: void checkNormal_ ( const char code@var120 [ ] , const char * file@var121 , int line@var122 ) {
204:
205: errout@var100 .@expr1073742593 str (@expr1073742594 "" ) ;
206:
207:
208: Tokenizer tokenizer@var123 (@expr1073742595 &@expr772 settings@var102 , this@expr773 ) ;
209: std ::@expr1073742598 istringstream istr@var124 (@expr1073742599 code@var120 ) ;
210: $assert_ $(@expr1073742600 file@var121 $, line@var122 $, $(@expr1073742601 tokenizer@var123 .@expr1073742602 tokenize (@expr1073742603 istr@var124 , "test.cpp" ) $) $) ;
211:
212:
213: CheckStl checkStl@var125 (@expr1073742604 &@expr781 tokenizer@var123 , &@expr772 settings@var102 , this@expr773 ) ;
214: checkStl@var125 .@expr1073742607 runChecks (@expr1073742608 &@expr781 tokenizer@var123 , &@expr772 settings@var102 , this@expr773 ) ;
215: }
216:
217: void outOfBounds ( ) {
218: setMultiline (@expr1073742611 ) ;
219:
220: $checkNormal_ $(@expr1073742612 "bool f(const int a, const int b)\n{\n    std::cout << a << b;\n    return true;\n}\nvoid f(const std::vector<int> &v)\n{\n    if(v.size() >=2 &&\n            bar(v[2], v[3]) )\n    {;}\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 220 $)
221:
|
229:
230: ;
231: $if $(@expr1073742613 $!@expr1073742614 $assertEquals $(@expr1073742615 "cppcheck-2.8/test/teststl.cpp" $, 231 $, "test.cpp:9:warning:Either the condition 'v.size()>=2' is redundant or v size can be 2. Expression 'v[2]' cause access out of bounds.\ntest.cpp:8:note:condition 'v.size()>=2'\ntest.cpp:9:note:Access out of bounds\ntest.cpp:9:warning:Either the condition 'v.size()>=2' is redundant or v size can be 2. Expression 'v[3]' cause access out of bounds.\ntest.cpp:8:note:condition 'v.size()>=2'\ntest.cpp:9:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
232:
|
235:
236: ; }
237:
238: $checkNormal_ $(@expr1073742618 "void f() {\n  std::string s;\n  s[10] = 1;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 238 $)
239:
240:
241: ;
242: $if $(@expr1073742619 $!@expr1073742620 $assertEquals $(@expr1073742621 "cppcheck-2.8/test/teststl.cpp" $, 242 $, "test.cpp:3:error:Out of bounds access in expression 's[10]' because 's' is empty.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
243:
244: $checkNormal_ $(@expr1073742624 "void f() {\n  std::string s = \"abcd\";\n  s[10] = 1;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 244 $)
245:
246:
247: ;
248: $if $(@expr1073742625 $!@expr1073742626 $assertEquals $(@expr1073742627 "cppcheck-2.8/test/teststl.cpp" $, 248 $, "test.cpp:3:error:Out of bounds access in 's[10]', if 's' size is 4 and '10' is 10\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
249:
250: $checkNormal_ $(@expr1073742630 "void f(std::vector<int> v) {\n    v.front();\n    if (v.empty()) {}\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 250 $)
251:
252:
253: ;
254: $if $(@expr1073742631 $!@expr1073742632 $assertEquals $(@expr1073742633 "cppcheck-2.8/test/teststl.cpp" $, 254 $, "test.cpp:2:warning:Either the condition 'v.empty()' is redundant or expression 'v.front()' cause access out of bounds.\ntest.cpp:3:note:condition 'v.empty()'\ntest.cpp:2:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
255:
256: ; }
257:
258: $checkNormal_ $(@expr1073742636 "void f(std::vector<int> v) {\n    if (v.size() == 3) {}\n    v[16] = 0;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 258 $)
259:
260:
261: ;
262: $if $(@expr1073742637 $!@expr1073742638 $assertEquals $(@expr1073742639 "cppcheck-2.8/test/teststl.cpp" $, 262 $, "test.cpp:3:warning:Either the condition 'v.size()==3' is redundant or v size can be 3. Expression 'v[16]' cause access out of bounds.\ntest.cpp:2:note:condition 'v.size()==3'\ntest.cpp:3:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
263:
264: ; }
265:
266: $checkNormal_ $(@expr1073742642 "void f(std::vector<int> v) {\n    int i = 16;\n    if (v.size() == 3) {\n        v[i] = 0;\n    }\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 266 $)
267:
|
270:
271: ;
272: $if $(@expr1073742643 $!@expr1073742644 $assertEquals $(@expr1073742645 "cppcheck-2.8/test/teststl.cpp" $, 272 $, "test.cpp:4:warning:Either the condition 'v.size()==3' is redundant or v size can be 3. Expression 'v[i]' cause access out of bounds.\ntest.cpp:3:note:condition 'v.size()==3'\ntest.cpp:4:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
273:
274: ; }
275:
276: $checkNormal_ $(@expr1073742648 "void f(std::vector<int> v, int i) {\n    if (v.size() == 3 || i == 16) {}\n    v[i] = 0;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 276 $)
277:
278:
279: ;
280: $if $(@expr1073742649 $!@expr1073742650 $assertEquals $(@expr1073742651 "cppcheck-2.8/test/teststl.cpp" $, 280 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
281:
282: $checkNormal_ $(@expr1073742654 "void f(std::map<int,int> x) {\n    if (x.empty()) { x[1] = 2; }\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 282 $)
283:
284: ;
285: $if $(@expr1073742655 $!@expr1073742656 $assertEquals $(@expr1073742657 "cppcheck-2.8/test/teststl.cpp" $, 285 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
286:
287: $checkNormal_ $(@expr1073742660 "void f(std::string s) {\n    if (s.size() == 1) {\n        s[2] = 0;\n    }\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 287 $)
288:
289:
290:
291: ;
292: $if $(@expr1073742661 $!@expr1073742662 $assertEquals $(@expr1073742663 "cppcheck-2.8/test/teststl.cpp" $, 292 $, "test.cpp:3:warning:Either the condition 's.size()==1' is redundant or s size can be 1. Expression 's[2]' cause access out of bounds.\ntest.cpp:2:note:condition 's.size()==1'\ntest.cpp:3:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
293:
294: ; }
295:
296:
297: $checkNormal_ $(@expr1073742666 "void a() {\n  std::string b[];\n  for (auto c : b)\n    c.data();\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 297 $)
298:
299:
300:
301: ;
302: $if $(@expr1073742667 $!@expr1073742668 $assertEquals $(@expr1073742669 "cppcheck-2.8/test/teststl.cpp" $, 302 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
303:
304: $checkNormal_ $(@expr1073742672 "std::string f(std::string x) {\n  if (x.empty()) return {};\n  x[0];\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 304 $)
305:
306:
307: ;
308: $if $(@expr1073742673 $!@expr1073742674 $assertEquals $(@expr1073742675 "cppcheck-2.8/test/teststl.cpp" $, 308 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
309:
310: $checkNormal_ $(@expr1073742678 "std::string f(std::string x) {\n  if (x.empty()) return std::string{};\n  x[0];\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 310 $)
311:
312:
313: ;
314: $if $(@expr1073742679 $!@expr1073742680 $assertEquals $(@expr1073742681 "cppcheck-2.8/test/teststl.cpp" $, 314 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
315:
316: $checkNormal_ $(@expr1073742684 "void f() {\n  std::string s;\n  x = s.begin() + 1;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 316 $)
317:
318:
319: ;
320: $if $(@expr1073742685 $!@expr1073742686 $assertEquals $(@expr1073742687 "cppcheck-2.8/test/teststl.cpp" $, 320 $, "test.cpp:3:error:Out of bounds access in expression 's.begin()+1' because 's' is empty.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
321:
322: $checkNormal_ $(@expr1073742690 "void f(int x) {\n  std::string s;\n  x = s.begin() + x;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 322 $)
323:
324:
325: ;
326: $if $(@expr1073742691 $!@expr1073742692 $assertEquals $(@expr1073742693 "cppcheck-2.8/test/teststl.cpp" $, 326 $, "test.cpp:3:error:Out of bounds access in expression 's.begin()+x' because 's' is empty and 'x' may be non-zero.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
327:
328: $checkNormal_ $(@expr1073742696 "char fstr1(){const std::string s = \"<a><b>\"; return s[42]; }\nwchar_t fwstr1(){const std::wstring s = L\"<a><b>\"; return s[42]; }" $, "cppcheck-2.8/test/teststl.cpp" $, 328 $)
329: ;
330: $if $(@expr1073742697 $!@expr1073742698 $assertEquals $(@expr1073742699 "cppcheck-2.8/test/teststl.cpp" $, 330 $, "test.cpp:1:error:Out of bounds access in 's[42]', if 's' size is 6 and '42' is 42\ntest.cpp:2:error:Out of bounds access in 's[42]', if 's' size is 6 and '42' is 42\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
331: ; }
332:
333: $checkNormal_ $(@expr1073742702 "char fstr1(){const std::string s = \"<a><b>\"; return s[1]; }\nwchar_t fwstr1(){const std::wstring s = L\"<a><b>\"; return s[1]; }" $, "cppcheck-2.8/test/teststl.cpp" $, 333 $)
334: ;
335: $if $(@expr1073742703 $!@expr1073742704 $assertEquals $(@expr1073742705 "cppcheck-2.8/test/teststl.cpp" $, 335 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
336:
337: $checkNormal_ $(@expr1073742708 "int f() {\n    std::vector<int> v;\n    std::vector<int> * pv = &v;\n    return (*pv)[42];\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 337 $)
338:
339:
340:
341: ;
342: $if $(@expr1073742709 $!@expr1073742710 $assertEquals $(@expr1073742711 "cppcheck-2.8/test/teststl.cpp" $, 342 $, "test.cpp:4:error:Out of bounds access in expression '(*pv)[42]' because '*pv' is empty.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
343:
344: $checkNormal_ $(@expr1073742714 "void f() {\n  std::string s;\n  ++abc[s];\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 344 $)
345:
346:
347: ;
348: $if $(@expr1073742715 $!@expr1073742716 $assertEquals $(@expr1073742717 "cppcheck-2.8/test/teststl.cpp" $, 348 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
349:
350:
351: $checkNormal_ $(@expr1073742720 "char f(bool b) {\n    const std::string s = \"<a><b>\";\n    int x = 6;\n    if(b) ++x;\n    return s[x];\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 351 $)
352:
|
355:
356: ;
357: $if $(@expr1073742721 $!@expr1073742722 $assertEquals $(@expr1073742723 "cppcheck-2.8/test/teststl.cpp" $, 357 $, "test.cpp:5:error:Out of bounds access in 's[x]', if 's' size is 6 and 'x' is 6\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
358:
359: $checkNormal_ $(@expr1073742726 "void f() {\n    static const int N = 4;\n    std::array<int, N> x;\n    x[0] = 0;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 359 $)
360:
361:
362:
363: ;
364: $if $(@expr1073742727 $!@expr1073742728 $assertEquals $(@expr1073742729 "cppcheck-2.8/test/teststl.cpp" $, 364 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
365:
366: $checkNormal_ $(@expr1073742732 "void f(bool b) {\n    std::vector<int> x;\n    if (b)\n        x.push_back(1);\n    if (x.size() < 2)\n        return;\n    x[0] = 2;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 366 $)
367:
|
372:
373: ;
374: $if $(@expr1073742733 $!@expr1073742734 $assertEquals $(@expr1073742735 "cppcheck-2.8/test/teststl.cpp" $, 374 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
375:
376: $checkNormal_ $(@expr1073742738 "void f(bool b) {\n    std::vector<int> v;\n    if(v.at(b?42:0)) {}\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 376 $)
377:
378:
379: ;
380: $if $(@expr1073742739 $!@expr1073742740 $assertEquals $(@expr1073742741 "cppcheck-2.8/test/teststl.cpp" $, 380 $, "test.cpp:3:error:Out of bounds access in expression 'v.at(b?42:0)' because 'v' is empty and 'b?42:0' may be non-zero.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
381:
382: ; }
383:
384: $checkNormal_ $(@expr1073742744 "void f(std::vector<int> v, bool b){\n    if (v.size() == 1)\n        if(v.at(b?42:0)) {}\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 384 $)
385:
386:
387: ;
388: $if $(@expr1073742745 $!@expr1073742746 $assertEquals $(@expr1073742747 "cppcheck-2.8/test/teststl.cpp" $, 388 $, "test.cpp:3:warning:Either the condition 'v.size()==1' is redundant or v size can be 1. Expression 'v.at(b?42:0)' cause access out of bounds.\ntest.cpp:2:note:condition 'v.size()==1'\ntest.cpp:3:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
389:
390:
391:
392: ; }
393:
394: $check_ $(@expr1073742750 "cppcheck-2.8/test/teststl.cpp" $, 394 $, "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  T t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s = { { &ArrS } };\n  g(s);\n  return ArrS[0];\n}\n" , true $)
395:
|
405:
406: ;
407: $if $(@expr1073742751 $!@expr1073742752 $assertEquals $(@expr1073742753 "cppcheck-2.8/test/teststl.cpp" $, 407 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
408:
409: $check_ $(@expr1073742756 "cppcheck-2.8/test/teststl.cpp" $, 409 $, "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<T> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s = { { { &ArrS } } };\n  g(s);\n  return ArrS[0];\n}\n" , true $)
410:
|
421:
422: ;
423: $if $(@expr1073742757 $!@expr1073742758 $assertEquals $(@expr1073742759 "cppcheck-2.8/test/teststl.cpp" $, 423 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
424:
425: $check_ $(@expr1073742762 "cppcheck-2.8/test/teststl.cpp" $, 425 $, "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<std::vector<T>> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s = { { { { &ArrS } } } };\n  g(s);\n  return ArrS[0];\n}\n" , true $)
426:
|
437:
438: ;
439: $if $(@expr1073742763 $!@expr1073742764 $assertEquals $(@expr1073742765 "cppcheck-2.8/test/teststl.cpp" $, 439 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
440:
441: $check_ $(@expr1073742768 "cppcheck-2.8/test/teststl.cpp" $, 441 $, "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  T t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s { { &ArrS } };\n  g(s);\n  return ArrS[0];\n}\n" , true $)
442:
|
453:
454: ;
455: $if $(@expr1073742769 $!@expr1073742770 $assertEquals $(@expr1073742771 "cppcheck-2.8/test/teststl.cpp" $, 455 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
456:
457: $check_ $(@expr1073742774 "cppcheck-2.8/test/teststl.cpp" $, 457 $, "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<T> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s { { { &ArrS } } };\n  g(s);\n  return ArrS[0];\n}\n" , true $)
458:
|
469:
470: ;
471: $if $(@expr1073742775 $!@expr1073742776 $assertEquals $(@expr1073742777 "cppcheck-2.8/test/teststl.cpp" $, 471 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
472:
473: $check_ $(@expr1073742780 "cppcheck-2.8/test/teststl.cpp" $, 473 $, "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<std::vector<T>> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s { { { { &ArrS } } } };\n  g(s);\n  return ArrS[0];\n}\n" , true $)
474:
|
485:
486: ;
487: $if $(@expr1073742781 $!@expr1073742782 $assertEquals $(@expr1073742783 "cppcheck-2.8/test/teststl.cpp" $, 487 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
488:
489: $checkNormal_ $(@expr1073742786 "extern void Bar(const double, const double);\nvoid f(std::vector<double> &r, const double ) {\n    std::vector<double> result;\n    double d = 0.0;\n    const double inc = 0.1;\n    for(unsigned int i = 0; i < 10; ++i) {\n        result.push_back(d);\n        d = (i + 1) * inc;\n    }\n    Bar(1.0, d);\n    Bar(10U, result.size());\n    Bar(0.0, result[0]);\n    Bar(0.34, result[1]);\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 489 $)
490:
|
501:
502: ;
503: $if $(@expr1073742787 $!@expr1073742788 $assertEquals $(@expr1073742789 "cppcheck-2.8/test/teststl.cpp" $, 503 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
504:
505: $checkNormal_ $(@expr1073742792 "void f(size_t entries) {\n    std::vector<uint8_t> v;\n    if (v.size() < entries + 2)\n        v.resize(entries + 2);\n    v[0] = 1;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 505 $)
506:
|
509:
510: ;
511: $if $(@expr1073742793 $!@expr1073742794 $assertEquals $(@expr1073742795 "cppcheck-2.8/test/teststl.cpp" $, 511 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
512:
513: $checkNormal_ $(@expr1073742798 "void f(size_t entries) {\n    std::vector<uint8_t> v;\n    if (v.size() < entries)\n        v.resize(entries);\n    v[0] = 1;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 513 $)
514:
|
517:
518: ;
519: $if $(@expr1073742799 $!@expr1073742800 $assertEquals $(@expr1073742801 "cppcheck-2.8/test/teststl.cpp" $, 519 $, "test.cpp:5:error:Out of bounds access in expression 'v[0]' because 'v' is empty.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
520:
521: $checkNormal_ $(@expr1073742804 "void f(size_t entries) {\n    if (entries < 2) return;\n    std::vector<uint8_t> v;\n    if (v.size() < entries)\n        v.resize(entries);\n    v[0] = 1;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 521 $)
522:
|
526:
527: ;
528: $if $(@expr1073742805 $!@expr1073742806 $assertEquals $(@expr1073742807 "cppcheck-2.8/test/teststl.cpp" $, 528 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
529:
530: $checkNormal_ $(@expr1073742810 "void f(size_t entries) {\n    if (entries == 0) return;\n    std::vector<uint8_t> v;\n    if (v.size() < entries)\n        v.resize(entries);\n    v[0] = 1;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 530 $)
531:
|
535:
536: ;
537: $if $(@expr1073742811 $!@expr1073742812 $assertEquals $(@expr1073742813 "cppcheck-2.8/test/teststl.cpp" $, 537 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
538:
539: $checkNormal_ $(@expr1073742816 "void foo(std::vector<int>* PArr, int n) {\n std::vector<int> Arr;\n if (!PArr)\n   PArr = &Arr;\n PArr->resize(n);\n for (int i = 0; i < n; ++i)\n   (*PArr)[i] = 1;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 539 $)
540:
|
545:
546: ;
547: $if $(@expr1073742817 $!@expr1073742818 $assertEquals $(@expr1073742819 "cppcheck-2.8/test/teststl.cpp" $, 547 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
548:
549: $checkNormal_ $(@expr1073742822 "int f() {\n    std::vector<int> v;\n    std::vector<int> * pv = &v;\n    return (*pv).at(42);\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 549 $)
550:
551:
552:
553: ;
554: $if $(@expr1073742823 $!@expr1073742824 $assertEquals $(@expr1073742825 "cppcheck-2.8/test/teststl.cpp" $, 554 $, "test.cpp:4:error:Out of bounds access in expression '(*pv).at(42)' because '*pv' is empty.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
555: ; }
556:
557: $checkNormal_ $(@expr1073742828 "std::string f(const char* DirName) {\n  if (DirName == nullptr)\n      return {};\n  std::string Name{ DirName };\n  if (!Name.empty() && Name.back() != '\\\\')\n    Name += '\\\\';\n  return Name;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 557 $)
558:
|
563:
564: ;
565: $if $(@expr1073742829 $!@expr1073742830 $assertEquals $(@expr1073742831 "cppcheck-2.8/test/teststl.cpp" $, 565 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
566:
567: $checkNormal_ $(@expr1073742834 "bool f(bool b) {\n  std::vector<int> v;\n  if (b)\n    v.push_back(0);\n  for(auto i:v)\n    if (v[i] > 0)\n      return true;\n  return false;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 567 $)
568:
|
574:
575: ;
576: $if $(@expr1073742835 $!@expr1073742836 $assertEquals $(@expr1073742837 "cppcheck-2.8/test/teststl.cpp" $, 576 $, "test.cpp:6:style:Consider using std::any_of algorithm instead of a raw loop.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
577:
578: $checkNormal_ $(@expr1073742840 "std::vector<int> range(int n);\nbool f(bool b) {\n  std::vector<int> v;\n  if (b)\n    v.push_back(1);\n  assert(range(v.size()).size() == v.size());\n  for(auto i:range(v.size()))\n    if (v[i] > 0)\n      return true;\n  return false;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 578 $)
579:
|
587:
588: ;
589: $if $(@expr1073742841 $!@expr1073742842 $assertEquals $(@expr1073742843 "cppcheck-2.8/test/teststl.cpp" $, 589 $, "test.cpp:8:style:Consider using std::any_of algorithm instead of a raw loop.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
590:
591: $checkNormal_ $(@expr1073742846 "bool g();\nint f(int x) {\n    std::vector<int> v;\n    if (g())\n        v.emplace_back(x);\n    const auto n = (int)v.size();\n    for (int i = 0; i < n; ++i)\n        if (v[i] > 0)\n            return i;\n    return 0;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 591 $)
592:
|
600:
601: ;
602: $if $(@expr1073742847 $!@expr1073742848 $assertEquals $(@expr1073742849 "cppcheck-2.8/test/teststl.cpp" $, 602 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
603:
604: $checkNormal_ $(@expr1073742852 "bool g();\nint f(int x) {\n    std::vector<int> v;\n    if (g())\n        v.emplace_back(x);\n    const auto n = static_cast<int>(v.size());\n    for (int i = 0; i < n; ++i)\n        if (v[i] > 0)\n            return i;\n    return 0;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 604 $)
605:
|
613:
614: ;
615: $if $(@expr1073742853 $!@expr1073742854 $assertEquals $(@expr1073742855 "cppcheck-2.8/test/teststl.cpp" $, 615 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
616:
617: $checkNormal_ $(@expr1073742858 "bool g();\nvoid f(int x) {\n    std::vector<int> v;\n    if (g())\n        v.emplace_back(x);\n    const int n = v.size();\n    h(n);\n    for (int i = 0; i < n; ++i)\n        h(v[i]);\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 617 $)
618:
|
625:
626: ;
627: $if $(@expr1073742859 $!@expr1073742860 $assertEquals $(@expr1073742861 "cppcheck-2.8/test/teststl.cpp" $, 627 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
628:
629: $checkNormal_ $(@expr1073742864 "void foo(const std::vector<int> &v) {\n    if(v.size() >=1 && v[0] == 4 && v[1] == 2){}\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 629 $)
630:
631: ;
632: $if $(@expr1073742865 $!@expr1073742866 $assertEquals $(@expr1073742867 "cppcheck-2.8/test/teststl.cpp" $, 632 $, "test.cpp:2:warning:Either the condition 'v.size()>=1' is redundant or v size can be 1. Expression 'v[1]' cause access out of bounds.\ntest.cpp:2:note:condition 'v.size()>=1'\ntest.cpp:2:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
633:
634: ; }
635:
636: $checkNormal_ $(@expr1073742870 "int f(int x, int y) {\n    std::vector<int> a = {0,1,2};\n    if(x<2)\n        y = a[x] + 1;\n    else\n        y = a[x];\n    return y;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 636 $)
637:
|
642:
643: ;
644: $if $(@expr1073742871 $!@expr1073742872 $assertEquals $(@expr1073742873 "cppcheck-2.8/test/teststl.cpp" $, 644 $, "test.cpp:6:warning:Either the condition 'x<2' is redundant or 'x' can have the value greater or equal to 3. Expression 'a[x]' cause access out of bounds.\ntest.cpp:3:note:condition 'x<2'\ntest.cpp:6:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
645:
646:
647:
648: ; }
649:
650: $checkNormal_ $(@expr1073742876 "int f(std::vector<int> v) {\n    if (v.size() > 3)\n        return v[v.size() - 3];\n    return 0;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 650 $)
651:
652:
653:
654: ;
655: $if $(@expr1073742877 $!@expr1073742878 $assertEquals $(@expr1073742879 "cppcheck-2.8/test/teststl.cpp" $, 655 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
656:
657: $checkNormal_ $(@expr1073742882 "void f(std::vector<int> v) {\n    v[v.size() - 1];\n    if (v.size() == 1) {}\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 657 $)
658:
659:
660: ;
661: $if $(@expr1073742883 $!@expr1073742884 $assertEquals $(@expr1073742885 "cppcheck-2.8/test/teststl.cpp" $, 661 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
662:
663: $checkNormal_ $(@expr1073742888 "void f(int n) {\n    std::vector<int> v = {1, 2, 3, 4};\n    const int i = qMin(n, v.size());\n    if (i > 1)\n        v[i] = 1;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 663 $)
664:
|
667:
668: ;
669: $if $(@expr1073742889 $!@expr1073742890 $assertEquals $(@expr1073742891 "cppcheck-2.8/test/teststl.cpp" $, 669 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
670:
671: $checkNormal_ $(@expr1073742894 "void f(std::vector<int>& v, int i) {\n    if (i > -1) {\n        v.erase(v.begin() + i);\n        if (v.empty()) {}\n    }\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 671 $)
672:
|
675:
676: ;
677: $if $(@expr1073742895 $!@expr1073742896 $assertEquals $(@expr1073742897 "cppcheck-2.8/test/teststl.cpp" $, 677 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
678:
679: $checkNormal_ $(@expr1073742900 "void g(const char *, ...) { exit(1); }\nvoid f(const char c[]) {\n    std::vector<int> v = get();\n    if (v.empty())\n        g(\"\", c[0]);\n    return h(&v[0], v.size()); \n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 679 $)
680:
|
684:
685: ;
686: $if $(@expr1073742901 $!@expr1073742902 $assertEquals $(@expr1073742903 "cppcheck-2.8/test/teststl.cpp" $, 686 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
687:
688: $checkNormal_ $(@expr1073742906 "void f(int i, std::vector<int> v) {\n    if (i <= (int)v.size()) {\n        if (v[i]) {}\n    }\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 688 $)
689:
690:
691:
692: ;
693: $if $(@expr1073742907 $!@expr1073742908 $assertEquals $(@expr1073742909 "cppcheck-2.8/test/teststl.cpp" $, 693 $, "test.cpp:3:warning:Either the condition 'i<=(int)v.size()' is redundant or 'i' can have the value v.size(). Expression 'v[i]' cause access out of bounds.\ntest.cpp:2:note:condition 'i<=(int)v.size()'\ntest.cpp:3:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
694:
695:
696: ; }
697:
698: $check_ $(@expr1073742912 "cppcheck-2.8/test/teststl.cpp" $, 698 $, "template<class Iterator>\nvoid b(Iterator d) {\n  std::string c = \"a\";\n  d + c.length();\n}\nvoid f() {\n  std::string buf;\n  b(buf.begin());\n}\n" , true $)
699:
|
706:
707: ;
708: $if $(@expr1073742913 $!@expr1073742914 $assertEquals $(@expr1073742915 "cppcheck-2.8/test/teststl.cpp" $, 708 $, "test.cpp:4:error:Out of bounds access in expression 'd+c.length()' because 'buf' is empty.\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
709: ; }
710:
711: $check_ $(@expr1073742918 "cppcheck-2.8/test/teststl.cpp" $, 711 $, "template<class Iterator>\nvoid b(Iterator d) {\n  std::string c = \"a\";\n  sort(d, d + c.length());\n}\nvoid f() {\n  std::string buf;\n  b(buf.begin());\n}\n" , true $)
712:
|
719:
720: ;
721: $if $(@expr1073742919 $!@expr1073742920 $assertEquals $(@expr1073742921 "cppcheck-2.8/test/teststl.cpp" $, 721 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
722:
723: $check_ $(@expr1073742924 "cppcheck-2.8/test/teststl.cpp" $, 723 $, "int f(const std::vector<int> &v) {\n    return !v.empty() ? 42 : v.back();\n}\n" , true $)
724:
725:
726: ;
727: $if $(@expr1073742925 $!@expr1073742926 $assertEquals $(@expr1073742927 "cppcheck-2.8/test/teststl.cpp" $, 727 $, "test.cpp:2:warning:Either the condition 'v.empty()' is redundant or expression 'v.back()' cause access out of bounds.\ntest.cpp:2:note:condition 'v.empty()'\ntest.cpp:2:note:Access out of bounds\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
728:
729:
730:
731: ; }
732:
733: $check_ $(@expr1073742930 "cppcheck-2.8/test/teststl.cpp" $, 733 $, "std::vector<int> g() {\n    std::vector<int> v(10);\n    for(int i = 0; i <= 10; ++i)\n        v[i] = 42;\n    return v;\n}\n" $)
734:
|
737:
738: ;
739: $if $(@expr1073742931 $!@expr1073742932 $assertEquals $(@expr1073742933 "cppcheck-2.8/test/teststl.cpp" $, 739 $, "test.cpp:4:error:Out of bounds access in 'v[i]', if 'v' size is 10 and 'i' is 10\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
740: ; }
741:
742: $check_ $(@expr1073742936 "cppcheck-2.8/test/teststl.cpp" $, 742 $, "void f() {\n    int s = 2;\n    std::vector <int> v(s);\n    v[100] = 1;\n}\n" $)
743:
744:
745:
746: ;
747: $if $(@expr1073742937 $!@expr1073742938 $assertEquals $(@expr1073742939 "cppcheck-2.8/test/teststl.cpp" $, 747 $, "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 2 and '100' is 100\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
748: ; }
749:
750: $check_ $(@expr1073742942 "cppcheck-2.8/test/teststl.cpp" $, 750 $, "void f() {\n    std::vector <int> v({ 1, 2, 3 });\n    v[100] = 1;\n}\n" $)
751:
752:
753: ;
754: $if $(@expr1073742943 $!@expr1073742944 $assertEquals $(@expr1073742945 "cppcheck-2.8/test/teststl.cpp" $, 754 $, "test.cpp:3:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
755: ; }
756:
757: $check_ $(@expr1073742948 "cppcheck-2.8/test/teststl.cpp" $, 757 $, "void f() {\n    char c[] = { 1, 2, 3 };\n    std::vector<char> v(c, sizeof(c) + c);\n    v[100] = 1;\n}\n" $)
758:
759:
760:
761: ;
762: $if $(@expr1073742949 $!@expr1073742950 $assertEquals $(@expr1073742951 "cppcheck-2.8/test/teststl.cpp" $, 762 $, "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
763: ; }
764:
765: $check_ $(@expr1073742954 "cppcheck-2.8/test/teststl.cpp" $, 765 $, "void f() {\n    char c[] = { 1, 2, 3 };\n    std::vector<char> v{ c, c + sizeof(c) };\n    v[100] = 1;\n}\n" $)
766:
767:
768:
769: ;
770: $if $(@expr1073742955 $!@expr1073742956 $assertEquals $(@expr1073742957 "cppcheck-2.8/test/teststl.cpp" $, 770 $, "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
771: ; }
772:
773: $check_ $(@expr1073742960 "cppcheck-2.8/test/teststl.cpp" $, 773 $, "void f() {\n    int i[] = { 1, 2, 3 };\n    std::vector<int> v(i, i + sizeof(i) / 4);\n    v[100] = 1;\n}\n" $)
774:
775:
776:
777: ;
778: $if $(@expr1073742961 $!@expr1073742962 $assertEquals $(@expr1073742963 "cppcheck-2.8/test/teststl.cpp" $, 778 $, "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
779: ; }
780:
781: $check_ $(@expr1073742966 "cppcheck-2.8/test/teststl.cpp" $, 781 $, "void f() {\n    int i[] = { 1, 2, 3 };\n    std::vector<int> v(i, i + sizeof(i) / sizeof(int));\n    v[100] = 1;\n}\n" $)
782:
783:
784:
785: ;
786: $todoAssertEquals $(@expr1073742967 "cppcheck-2.8/test/teststl.cpp" $, 786 $, "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" $, "" $, errout@var100 .@expr792 str (@expr793 ) $)
787:
788: ;
789:
790: $check_ $(@expr1073742970 "cppcheck-2.8/test/teststl.cpp" $, 790 $, "void f() {\n    std::array<int, 10> a = {};\n    a[10];\n    constexpr std::array<int, 10> b = {};\n    b[10];\n    const std::array<int, 10> c = {};\n    c[10];\n    static constexpr std::array<int, 10> d = {};\n    d[10];\n}\n" $)
791:
|
798:
799: ;
800: $if $(@expr1073742971 $!@expr1073742972 $assertEquals $(@expr1073742973 "cppcheck-2.8/test/teststl.cpp" $, 800 $, "test.cpp:3:error:Out of bounds access in 'a[10]', if 'a' size is 10 and '10' is 10\ntest.cpp:5:error:Out of bounds access in 'b[10]', if 'b' size is 10 and '10' is 10\ntest.cpp:7:error:Out of bounds access in 'c[10]', if 'c' size is 10 and '10' is 10\ntest.cpp:9:error:Out of bounds access in 'd[10]', if 'd' size is 10 and '10' is 10\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
801:
802:
803:
804: ; }
805:
806: $check_ $(@expr1073742976 "cppcheck-2.8/test/teststl.cpp" $, 806 $, "struct test_fixed {\n    std::array<int, 10> array = {};\n    void index(int i) { array[i]; }\n};\nvoid f() {\n    test_fixed x = test_fixed();\n    x.index(10);\n}\n" $)
807:
|
812:
813: ;
814: $if $(@expr1073742977 $!@expr1073742978 $assertEquals $(@expr1073742979 "cppcheck-2.8/test/teststl.cpp" $, 814 $, "test.cpp:3:error:Out of bounds access in 'array[i]', if 'array' size is 10 and 'i' is 10\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
815: ; }
816:
817: $check_ $(@expr1073742982 "cppcheck-2.8/test/teststl.cpp" $, 817 $, "struct test_constexpr {\n    static constexpr std::array<int, 10> array = {};\n    void index(int i) { array[i]; }\n};\nvoid f() {\n    test_constexpr x = test_constexpr();\n    x.index(10);\n}\n" $)
818:
|
823:
824: ;
825: $if $(@expr1073742983 $!@expr1073742984 $assertEquals $(@expr1073742985 "cppcheck-2.8/test/teststl.cpp" $, 825 $, "test.cpp:3:error:Out of bounds access in 'array[i]', if 'array' size is 10 and 'i' is 10\n" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return
826: ; }
827:
828: $checkNormal_ $(@expr1073742988 "struct A {\n    const std::vector<int>& v;\n    A(const std::vector<int>& x) : v(x)\n    {}\n    int f() const {\n        return v[0];\n    }\n};\n" $, "cppcheck-2.8/test/teststl.cpp" $, 828 $)
829:
|
834:
835: ;
836: $if $(@expr1073742989 $!@expr1073742990 $assertEquals $(@expr1073742991 "cppcheck-2.8/test/teststl.cpp" $, 836 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
837:
838: $checkNormal_ $(@expr1073742994 "struct A {\n    static const std::vector<int> v;\n    int f() const {\n        return v[0];\n    }\n};\nconst std::vector<int> A::v = {1, 2};\n" $, "cppcheck-2.8/test/teststl.cpp" $, 838 $)
839:
|
843:
844: ;
845: $if $(@expr1073742995 $!@expr1073742996 $assertEquals $(@expr1073742997 "cppcheck-2.8/test/teststl.cpp" $, 845 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
846:
847: $checkNormal_ $(@expr1073743000 "struct a {\n    std::vector<int> g() const;\n};\nint f(const a& b) {\n    auto c = b.g();\n    assert(not c.empty());\n    int d = c.front();\n    return d;\n}\n" $, "cppcheck-2.8/test/teststl.cpp" $, 847 $)
848:
|
854:
855: ;
856: $if $(@expr1073743001 $!@expr1073743002 $assertEquals $(@expr1073743003 "cppcheck-2.8/test/teststl.cpp" $, 856 $, "" $, errout@var100 .@expr792 str (@expr793 ) $) $) { $return ; }
857: }
858:
859: void outOfBoundsSymbolic ( )
860: {
861: $check_ $(@expr1073743006 "cppcheck-2.8/test/teststl.cpp" $, 861 $, "void foo(std::string textline, int col) {\n    if(col > textline.size())\n        return false;\n    int x = textline[col];\n}\n" $)
862:
863:
864:
865: ;
866: $if $(@expr1073743007 $!@expr1073743008 $assertEquals $(@expr1073743009 "cppcheck-2.8/test/teststl.cpp" $, 866 $, "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'col>textline.size()' is redundant or 'col' can have the value textline.size(). Expression 'textline[col]' cause access out of bounds.\n" $, errout@var100 .@expr1073743010 str (@expr1073743011 ) $) $) { $return
867:
868: ; }
869: }
870:
871: void outOfBoundsIndexExpression ( ) {
872: setMultiline (@expr1073743012 ) ;
873:
874: $checkNormal_ $(@expr1073743013 "void f(std::string s) {\n  s[s.size()] = 1;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 874 $)
875:
876: ;
877: $if $(@expr1073743014 $!@expr1073743015 $assertEquals $(@expr1073743016 "cppcheck-2.8/test/teststl.cpp" $, 877 $, "test.cpp:2:error:Out of bounds access of s, index 's.size()' is out of bounds.\n" $, errout@var100 .@expr1193 str (@expr1194 ) $) $) { $return ; }
878:
879: $checkNormal_ $(@expr1073743019 "void f(std::string s) {\n  s[s.size()+1] = 1;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 879 $)
880:
881: ;
882: $if $(@expr1073743020 $!@expr1073743021 $assertEquals $(@expr1073743022 "cppcheck-2.8/test/teststl.cpp" $, 882 $, "test.cpp:2:error:Out of bounds access of s, index 's.size()+1' is out of bounds.\n" $, errout@var100 .@expr1193 str (@expr1194 ) $) $) { $return ; }
883:
884: $checkNormal_ $(@expr1073743025 "void f(std::string s) {\n  s[1+s.size()] = 1;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 884 $)
885:
886: ;
887: $if $(@expr1073743026 $!@expr1073743027 $assertEquals $(@expr1073743028 "cppcheck-2.8/test/teststl.cpp" $, 887 $, "test.cpp:2:error:Out of bounds access of s, index '1+s.size()' is out of bounds.\n" $, errout@var100 .@expr1193 str (@expr1194 ) $) $) { $return ; }
888:
889: $checkNormal_ $(@expr1073743031 "void f(std::string s) {\n  s[x*s.size()] = 1;\n}" $, "cppcheck-2.8/test/teststl.cpp" $, 889 $)
890:
891: ;
892: $if $(@expr1073743032 $!@expr1073743033 $assertEquals $(@expr1073743034 "cppcheck-2.8/test/teststl.cpp" $, 892 $, "test.cpp:2:error:Out of bounds access of s, index 'x*s.size()' is out of bounds.\n" $, errout@var100 .@expr1193 str (@expr1194 ) $) $) { $return ; }
893: }
894: void outOfBoundsIterator ( ) {
895: $check_ $(@expr1073743037 "cppcheck-2.8/test/teststl.cpp" $, 895 $, "int f() {\n    std::vector<int> v;\n    auto it = v.begin();\n    return *it;\n}\n" $)
896:
897:
898:
899: ;
900: $if $(@expr1073743038 $!@expr1073743039 $assertEquals $(@expr1073743040 "cppcheck-2.8/test/teststl.cpp" $, 900 $, "[test.cpp:4]: (error) Out of bounds access in expression 'it' because 'v' is empty.\n" $, errout@var100 .@expr1217 str (@expr1218 ) $) $) { $return
901: ; }
902:
903: $check_ $(@expr1073743043 "cppcheck-2.8/test/teststl.cpp" $, 903 $, "int f() {\n    std::vector<int> v;\n    v.push_back(0);\n    auto it = v.begin() + 1;\n    return *it;\n}\n" $)
904:
|
907:
908: ;
909: $if $(@expr1073743044 $!@expr1073743045 $assertEquals $(@expr1073743046 "cppcheck-2.8/test/teststl.cpp" $, 909 $, "[test.cpp:5]: (error) Out of bounds access in 'it', if 'v' size is 1 and 'it' is at position 1 from the beginning\n" $, errout@var100 .@expr1217 str (@expr1218 ) $) $) { $return
910: ; }
911:
912: $check_ $(@expr1073743049 "cppcheck-2.8/test/teststl.cpp" $, 912 $, "int f() {\n    std::vector<int> v;\n    v.push_back(0);\n    auto it = v.end() - 1;\n    return *it;\n}\n" $)
913:
|
916:
917: ;
918: $if $(@expr1073743050 $!@expr1073743051 $assertEquals $(@expr1073743052 "cppcheck-2.8/test/teststl.cpp" $, 918 $, "" $, errout@var100 .@expr1217 str (@expr1218 ) $) $) { $return ; }
919:
920: $check_ $(@expr1073743055 "cppcheck-2.8/test/teststl.cpp" $, 920 $, "int f() {\n    std::vector<int> v;\n    v.push_back(0);\n    auto it = v.end() - 2;\n    return *it;\n}\n" $)
921:
|
924:
925: ;
926: $if $(@expr1073743056 $!@expr1073743057 $assertEquals $(@expr1073743058 "cppcheck-2.8/test/teststl.cpp" $, 926 $, "[test.cpp:5]: (error) Out of bounds access in 'it', if 'v' size is 1 and 'it' is at position 2 from the end\n" $, errout@var100 .@expr1217 str (@expr1218 ) $) $) { $return
927: ; }
928:
929: $check_ $(@expr1073743061 "cppcheck-2.8/test/teststl.cpp" $, 929 $, "void g(int);\nvoid f(std::vector<int> x) {\n    std::map<int, int> m;\n    if (!m.empty()) {\n        g(m.begin()->second);\n    }\n}\n" $)
930:
|
934:
935: ;
936: $if $(@expr1073743062 $!@expr1073743063 $assertEquals $(@expr1073743064 "cppcheck-2.8/test/teststl.cpp" $, 936 $, "" $, errout@var100 .@expr1217 str (@expr1218 ) $) $) { $return ; }
937:
938: $check_ $(@expr1073743067 "cppcheck-2.8/test/teststl.cpp" $, 938 $, "void f() {\n    std::vector<int> vec;\n    std::vector<int>::iterator it = vec.begin();\n    *it = 1;\n}\n" $)
939:
940:
941:
942: ;
943: $if $(@expr1073743068 $!@expr1073743069 $assertEquals $(@expr1073743070 "cppcheck-2.8/test/teststl.cpp" $, 943 $, "[test.cpp:4]: (error) Out of bounds access in expression 'it' because 'vec' is empty.\n" $, errout@var100 .@expr1217 str (@expr1218 ) $) $) { $return
944: ; }
945:
946: $check_ $(@expr1073743073 "cppcheck-2.8/test/teststl.cpp" $, 946 $, "void f() {\n    std::vector<int> vec;\n    auto it = vec.begin();\n    *it = 1;\n}\n" $)
947:
948:
949:
950: ;
951: $if $(@expr1073743074 $!@expr1073743075 $assertEquals $(@expr1073743076 "cppcheck-2.8/test/teststl.cpp" $, 951 $, "[test.cpp:4]: (error) Out of bounds access in expression 'it' because 'vec' is empty.\n" $, errout@var100 .@expr1217 str (@expr1218 ) $) $) { $return
952: ; }
953: }
954:
955: void iterator1 ( ) {
956: $check_ $(@expr1073743079 "cppcheck-2.8/test/teststl.cpp" $, 956 $, "void f()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    for (std::list<int>::iterator it = l1.begin(); it != l2.end(); ++it)\n    { }\n}" $)
957:
|
961:
962: ;
963: $if $(@expr1073743080 $!@expr1073743081 $assertEquals $(@expr1073743082 "cppcheck-2.8/test/teststl.cpp" $, 963 $, "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" $, errout@var100 .@expr1259 str (@expr1260 ) $) $) { $return
964: ; }
965:
966: $check_ $(@expr1073743085 "cppcheck-2.8/test/teststl.cpp" $, 966 $, "void f()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    for (std::list<int>::iterator it = l1.begin(); l2.end() != it; ++it)\n    { }\n}" $)
967:
|
971:
972: ;
973: $if $(@expr1073743086 $!@expr1073743087 $assertEquals $(@expr1073743088 "cppcheck-2.8/test/teststl.cpp" $, 973 $, "[test.cpp:5]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" $, errout@var100 .@expr1259 str (@expr1260 ) $) $) { $return
974: ; }
975:
976: $check_ $(@expr1073743091 "cppcheck-2.8/test/teststl.cpp" $, 976 $, "struct C { std::list<int> l1; void func(); };\nvoid C::func() {\n    std::list<int>::iterator it;\n    for (it = l1.begin(); it != l1.end(); ++it) { }\n    C c;\n    for (it = c.l1.begin(); it != c.l1.end(); ++it) { }\n}" $)
977:
|
981:
982: ;
983: $if $(@expr1073743092 $!@expr1073743093 $assertEquals $(@expr1073743094 "cppcheck-2.8/test/teststl.cpp" $, 983 $, "" $, errout@var100 .@expr1259 str (@expr1260 ) $) $) { $return ; }
984:
985:
986: $check_ $(@expr1073743097 "cppcheck-2.8/test/teststl.cpp" $, 986 $, "void f()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    for (std::list<int>::const_reverse_iterator it = l1.rbegin(); it != l2.rend(); ++it)\n    { }\n}" $)
987:
|
991:
992: ;
993: $if $(@expr1073743098 $!@expr1073743099 $assertEquals $(@expr1073743100 "cppcheck-2.8/test/teststl.cpp" $, 993 $, "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" $, errout@var100 .@expr1259 str (@expr1260 ) $) $) { $return
994: ; }
995: }
996:
997: void iterator2 ( ) {
998: $check_ $(@expr1073743103 "cppcheck-2.8/test/teststl.cpp" $, 998 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    while (it != l2.end())\n    {\n        ++it;\n    }\n}" $)
999:
|
1006:
1007: ;
1008: $if $(@expr1073743104 $!@expr1073743105 $assertEquals $(@expr1073743106 "cppcheck-2.8/test/teststl.cpp" $, 1008 $, "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" $, errout@var100 .@expr1283 str (@expr1284 ) $) $) { $return
1009: ; }
1010:
1011: $check_ $(@expr1073743109 "cppcheck-2.8/test/teststl.cpp" $, 1011 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    while (l2.end() != it)\n    {\n        ++it;\n    }\n}" $)
1012:
|
1019:
1020: ;
1021: $if $(@expr1073743110 $!@expr1073743111 $assertEquals $(@expr1073743112 "cppcheck-2.8/test/teststl.cpp" $, 1021 $, "[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" $, errout@var100 .@expr1283 str (@expr1284 ) $) $) { $return
1022: ; }
1023: }
1024:
1025: void iterator3 ( ) {
1026: $check_ $(@expr1073743115 "cppcheck-2.8/test/teststl.cpp" $, 1026 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it, 0);\n}" $)
1027:
|
1031:
1032: ;
1033: $if $(@expr1073743116 $!@expr1073743117 $assertEquals $(@expr1073743118 "cppcheck-2.8/test/teststl.cpp" $, 1033 $, "[test.cpp:6]: (error) Same iterator is used with different containers 'l1' and 'l2'.\n[test.cpp:6]: (error) Iterator 'it' from different container 'l2' are used together.\n" $, errout@var100 .@expr1295 str (@expr1296 ) $) $) { $return
1034:
1035: ; }
1036:
1037: $check_ $(@expr1073743121 "cppcheck-2.8/test/teststl.cpp" $, 1037 $, "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it, l1.end());\n}" $)
1038:
|
1041:
1042: ;
1043: $if $(@expr1073743122 $!@expr1073743123 $assertEquals $(@expr1073743124 "cppcheck-2.8/test/teststl.cpp" $, 1043 $, "" $, errout@var100 .@expr1295 str (@expr1296 ) $) $) { $return ; }
1044:
1045: $check_ $(@expr1073743127 "cppcheck-2.8/test/teststl.cpp" $, 1045 $, "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    std::list<int>::iterator end = l1.end();\n    l2.insert(it, end);\n}" $)
1046:
|
1050:
1051: ;
1052: $if $(@expr1073743128 $!@expr1073743129 $assertEquals $(@expr1073743130 "cppcheck-2.8/test/teststl.cpp" $, 1052 $, "" $, errout@var100 .@expr1295 str (@expr1296 ) $) $) { $return ; }
1053:
1054:
1055: $check_ $(@expr1073743133 "cppcheck-2.8/test/teststl.cpp" $, 1055 $, "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it);\n}" $)
1056:
|
1059:
1060: ;
1061: $if $(@expr1073743134 $!@expr1073743135 $assertEquals $(@expr1073743136 "cppcheck-2.8/test/teststl.cpp" $, 1061 $, "" $, errout@var100 .@expr1295 str (@expr1296 ) $) $) { $return ; }
1062: $check_ $(@expr1073743139 "cppcheck-2.8/test/teststl.cpp" $, 1062 $, "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it,0,1);\n}" $)
1063:
|
1066:
1067: ;
1068: $if $(@expr1073743140 $!@expr1073743141 $assertEquals $(@expr1073743142 "cppcheck-2.8/test/teststl.cpp" $, 1068 $, "" $, errout@var100 .@expr1295 str (@expr1296 ) $) $) { $return ; }
1069:
1070: }
1071:
1072: void iterator4 ( ) {
1073: $check_ $(@expr1073743145 "cppcheck-2.8/test/teststl.cpp" $, 1073 $, "void foo(std::vector<std::string> &test)\n{\n    std::set<int> result;\n    for (std::vector<std::string>::const_iterator cit = test.begin();\n        cit != test.end();\n        ++cit)\n    {\n        result.insert(cit->size());\n    }\n}" $)
1074:
|
1081:
1082: ;
1083: $if $(@expr1073743146 $!@expr1073743147 $assertEquals $(@expr1073743148 "cppcheck-2.8/test/teststl.cpp" $, 1083 $, "" $, errout@var100 .@expr1073743149 str (@expr1073743150 ) $) $) { $return ; }
1084: }
1085:
1086: void iterator5 ( ) {
1087: $check_ $(@expr1073743151 "cppcheck-2.8/test/teststl.cpp" $, 1087 $, "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find(ints1.begin(), ints2.end(), 22);\n}" $)
1088:
1089:
1090: ;
1091: $if $(@expr1073743152 $!@expr1073743153 $assertEquals $(@expr1073743154 "cppcheck-2.8/test/teststl.cpp" $, 1091 $, "[test.cpp:3]: (error) Iterators of different containers 'ints1' and 'ints2' are used together.\n" $, errout@var100 .@expr1073743155 str (@expr1073743156 ) $) $) { $return
1092: ; }
1093: }
1094:
1095: void iterator6 ( ) {
1096:
1097: $check_ $(@expr1073743157 "cppcheck-2.8/test/teststl.cpp" $, 1097 $, "void foo(const std::set<int> &ints1)\n{\n    std::set<int> ints2;\n    std::set<int>::iterator it1 = ints1.begin();\n    std::set<int>::iterator it2 = ints1.end();\n    ints2.insert(it1, it2);\n}" $)
1098:
|
1102:
1103: ;
1104: $if $(@expr1073743158 $!@expr1073743159 $assertEquals $(@expr1073743160 "cppcheck-2.8/test/teststl.cpp" $, 1104 $, "" $, errout@var100 .@expr1337 str (@expr1338 ) $) $) { $return ; }
1105:
1106: $check_ $(@expr1073743163 "cppcheck-2.8/test/teststl.cpp" $, 1106 $, "void foo(const std::set<int> &ints1)\n{\n    std::set<int> ints2;\n    std::set<int>::iterator it1 = ints1.begin();\n    std::set<int>::iterator it2 = ints2.end();\n    ints2.insert(it1, it2);\n}" $)
1107:
|
1111:
1112: ;
1113: $todoAssertEquals $(@expr1073743164 "cppcheck-2.8/test/teststl.cpp" $, 1113 $, "[test.cpp:6]: (error) Iterators of different containers are used together.\n" $, "" $, errout@var100 .@expr1337 str (@expr1338 ) $) ;
1114: }
1115:
1116: void iterator7 ( ) {
1117: $check_ $(@expr1073743167 "cppcheck-2.8/test/teststl.cpp" $, 1117 $, "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::inplace_merge(ints1.begin(), std::advance(ints1.rbegin(), 5), ints2.end());\n}" $)
1118:
1119:
1120: ;
1121: $if $(@expr1073743168 $!@expr1073743169 $assertEquals $(@expr1073743170 "cppcheck-2.8/test/teststl.cpp" $, 1121 $, "[test.cpp:3]: (error) Iterators of different containers 'ints1' and 'ints2' are used together.\n" $, errout@var100 .@expr1347 str (@expr1348 ) $) $) { $return
1122: ; }
1123:
1124: $check_ $(@expr1073743173 "cppcheck-2.8/test/teststl.cpp" $, 1124 $, "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::inplace_merge(ints1.begin(), std::advance(ints2.rbegin(), 5), ints1.end());\n}" $)
1125:
1126:
1127: ;
1128: $if $(@expr1073743174 $!@expr1073743175 $assertEquals $(@expr1073743176 "cppcheck-2.8/test/teststl.cpp" $, 1128 $, "" $, errout@var100 .@expr1347 str (@expr1348 ) $) $) { $return ; }
1129: }
1130:
1131: void iterator8 ( ) {
1132: $check_ $(@expr1073743179 "cppcheck-2.8/test/teststl.cpp" $, 1132 $, "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(ints1.begin(), ints2.end(), ints1.begin(), ints1.end());\n}" $)
1133:
1134:
1135: ;
1136: $if $(@expr1073743180 $!@expr1073743181 $assertEquals $(@expr1073743182 "cppcheck-2.8/test/teststl.cpp" $, 1136 $, "[test.cpp:3]: (error) Iterators of different containers 'ints1' and 'ints2' are used together.\n" $, errout@var100 .@expr1359 str (@expr1360 ) $) $) { $return
1137: ; }
1138:
1139: $check_ $(@expr1073743185 "cppcheck-2.8/test/teststl.cpp" $, 1139 $, "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(ints1.begin(), ints1.end(), ints2.begin(), ints1.end());\n}" $)
1140:
1141:
1142: ;
1143: $if $(@expr1073743186 $!@expr1073743187 $assertEquals $(@expr1073743188 "cppcheck-2.8/test/teststl.cpp" $, 1143 $, "[test.cpp:3]: (error) Iterators of different containers 'ints2' and 'ints1' are used together.\n" $, errout@var100 .@expr1359 str (@expr1360 ) $) $) { $return
1144: ; }
1145:
1146: $check_ $(@expr1073743191 "cppcheck-2.8/test/teststl.cpp" $, 1146 $, "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(foo.bar.begin(), foo.bar.end()-6, ints2.begin(), ints1.end());\n}" $)
1147:
1148:
1149: ;
1150: $if $(@expr1073743192 $!@expr1073743193 $assertEquals $(@expr1073743194 "cppcheck-2.8/test/teststl.cpp" $, 1150 $, "[test.cpp:3]: (error) Iterators of different containers 'ints2' and 'ints1' are used together.\n" $, errout@var100 .@expr1359 str (@expr1360 ) $) $) { $return
1151: ; }
1152:
1153: $check_ $(@expr1073743197 "cppcheck-2.8/test/teststl.cpp" $, 1153 $, "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(ints1.begin(), ints1.end(), ints2.begin(), ints2.end());\n}" $)
1154:
1155:
1156: ;
1157: $if $(@expr1073743198 $!@expr1073743199 $assertEquals $(@expr1073743200 "cppcheck-2.8/test/teststl.cpp" $, 1157 $, "" $, errout@var100 .@expr1359 str (@expr1360 ) $) $) { $return ; }
1158:
1159:
1160: $check_ $(@expr1073743203 "cppcheck-2.8/test/teststl.cpp" $, 1160 $, "void f(const std::wstring& a, const std::wstring& b) {\n    const std::string tp1 = std::string(a.begin(), b.end());\n    const std::wstring tp2 = std::string(b.begin(), a.end());\n    const std::u16string tp3(a.begin(), b.end());\n    const std::u32string tp4(b.begin(), a.end());\n    const std::string fp1 = std::string(a.begin(), a.end());\n    const std::string tp2(a.begin(), a.end());\n}" $)
1161:
|
1166:
1167: ;
1168: $if $(@expr1073743204 $!@expr1073743205 $assertEquals $(@expr1073743206 "cppcheck-2.8/test/teststl.cpp" $, 1168 $, "[test.cpp:4]: (error) Iterators of different containers 'tp3' and 'a' are used together.\n[test.cpp:5]: (error) Iterators of different containers 'tp4' and 'b' are used together.\n" $, errout@var100 .@expr1359 str (@expr1360 ) $) $) { $return
1169:
1170:
1171:
1172: ; }
1173: }
1174:
1175: void iterator9 ( ) {
1176:
1177: $check_ $(@expr1073743209 "cppcheck-2.8/test/teststl.cpp" $, 1177 $, "void foo(std::vector<int> &r)\n{\n    std::vector<int>::iterator aI = r.begin();\n    while(aI != r.end())\n    {\n        if (*aI == 0)\n        {\n            r.insert(aI, 42);\n            return;\n        }\n        ++aI;\n    }\n}" $)
1178:
|
1188:
1189: ;
1190: $if $(@expr1073743210 $!@expr1073743211 $assertEquals $(@expr1073743212 "cppcheck-2.8/test/teststl.cpp" $, 1190 $, "" $, errout@var100 .@expr1389 str (@expr1390 ) $) $) { $return ; }
1191:
1192:
1193: $check_ $(@expr1073743215 "cppcheck-2.8/test/teststl.cpp" $, 1193 $, "void foo(std::vector<int> &r)\n{\n    std::vector<int>::iterator aI = r.begin();\n    while(aI != r.end())\n    {\n        if (*aI == 0)\n        {\n            r.insert(aI, 42);\n            break;\n        }\n        ++aI;\n    }\n}" $)
1194:
|
1204:
1205: ;
1206: $if $(@expr1073743216 $!@expr1073743217 $assertEquals $(@expr1073743218 "cppcheck-2.8/test/teststl.cpp" $, 1206 $, "" $, errout@var100 .@expr1389 str (@expr1390 ) $) $) { $return ; }
1207:
1208:
1209: $check_ $(@expr1073743221 "cppcheck-2.8/test/teststl.cpp" $, 1209 $, "void foo(std::vector<int> &r, int c)\n{\n    std::vector<int>::iterator aI = r.begin();\n    while(aI != r.end())\n    {\n        if (*aI == 0)\n        {\n            r.insert(aI, 42);\n            if (c)\n            {\n                return;\n            }\n        }\n        ++aI;\n    }\n}" $)
1210:
|
1223:
1224: ;
1225: $todoAssertEquals $(@expr1073743222 "cppcheck-2.8/test/teststl.cpp" $, 1225 $, "[test.cpp:14] (error) After insert(), the iterator 'aI' may be invalid." $, "" $, errout@var100 .@expr1389 str (@expr1390 ) $) ;
1226: }
1227:
1228: void iterator10 ( ) {
1229:
1230: $check_ $(@expr1073743225 "cppcheck-2.8/test/teststl.cpp" $, 1230 $, "void foo()\n{\n    std::set<int> s1;\n    std::set<int> s2;\n    for (std::set<int>::iterator it = s1.begin(); it != s1.end(); ++it)\n    {\n        if (true) { }\n        if (it != s2.end()) continue;\n    }\n}" $)
1231:
|
1238:
1239: ;
1240: $if $(@expr1073743226 $!@expr1073743227 $assertEquals $(@expr1073743228 "cppcheck-2.8/test/teststl.cpp" $, 1240 $, "[test.cpp:5]: (error) Iterators of different containers 's1' and 's2' are used together.\n" $, errout@var100 .@expr1073743229 str (@expr1073743230 ) $) $) { $return
1241: ; }
1242: }
1243:
1244: void iterator11 ( ) {
1245:
1246: $check_ $(@expr1073743231 "cppcheck-2.8/test/teststl.cpp" $, 1246 $, "int main() {\n    map<int, int> myMap;\n    vector<string> myVector;\n    for(vector<int>::iterator x = myVector.begin(); x != myVector.end(); x++)\n        myMap.erase(*x);\n}" $)
1247:
|
1250:
1251: ;
1252: $if $(@expr1073743232 $!@expr1073743233 $assertEquals $(@expr1073743234 "cppcheck-2.8/test/teststl.cpp" $, 1252 $, "" $, errout@var100 .@expr1073743235 str (@expr1073743236 ) $) $) { $return ; }
1253: }
1254:
1255: void iterator12 ( ) {
1256:
1257: $check_ $(@expr1073743237 "cppcheck-2.8/test/teststl.cpp" $, 1257 $, "void f() {\n    std::map<int, int> map1;\n    std::map<int, int> map2;\n    std::map<int, int>::const_iterator it = map1.find(123);\n    if (it == map2.end()) { }}" $)
1258:
|
1261:
1262: ;
1263: $if $(@expr1073743238 $!@expr1073743239 $assertEquals $(@expr1073743240 "cppcheck-2.8/test/teststl.cpp" $, 1263 $, "[test.cpp:4]: (error) Iterators of different containers 'map1' and 'map2' are used together.\n" $, errout@var100 .@expr1417 str (@expr1418 ) $) $) { $return
1264: ; }
1265:
1266: $check_ $(@expr1073743243 "cppcheck-2.8/test/teststl.cpp" $, 1266 $, "void f() {\n    std::map<int, int> map1;\n    std::map<int, int> map2;\n    std::map<int, int>::const_iterator it = map1.find(123);\n    if (map2.end() == it) { }}" $)
1267:
|
1270:
1271: ;
1272: $if $(@expr1073743244 $!@expr1073743245 $assertEquals $(@expr1073743246 "cppcheck-2.8/test/teststl.cpp" $, 1272 $, "[test.cpp:5]: (error) Iterators of different containers 'map2' and 'map1' are used together.\n" $, errout@var100 .@expr1417 str (@expr1418 ) $) $) { $return
1273: ; }
1274:
1275: $check_ $(@expr1073743249 "cppcheck-2.8/test/teststl.cpp" $, 1275 $, "void f(std::string &s) {\n    int pos = s.find(x);\n    s.erase(pos);\n    s.erase(pos);\n}" $)
1276:
1277:
1278:
1279: ;
1280: $if $(@expr1073743250 $!@expr1073743251 $assertEquals $(@expr1073743252 "cppcheck-2.8/test/teststl.cpp" $, 1280 $, "" $, errout@var100 .@expr1417 str (@expr1418 ) $) $) { $return ; }
1281: }
1282:
1283: void iterator13 ( ) {
1284: $check_ $(@expr1073743255 "cppcheck-2.8/test/teststl.cpp" $, 1284 $, "void f() {\n    std::vector<int> a;\n    std::vector<int> t;\n    std::vector<int>::const_iterator it;\n    it = a.begin();\n    while (it!=a.end())\n        ++it;\n    it = t.begin();\n    while (it!=a.end())\n        ++it;\n}" $)
1285:
|
1293:
1294: ;
1295: $if $(@expr1073743256 $!@expr1073743257 $assertEquals $(@expr1073743258 "cppcheck-2.8/test/teststl.cpp" $, 1295 $, "[test.cpp:8]: (error) Iterators of different containers 't' and 'a' are used together.\n" $, errout@var100 .@expr1435 str (@expr1436 ) $) $) { $return
1296: ; }
1297:
1298:
1299: $check_ $(@expr1073743261 "cppcheck-2.8/test/teststl.cpp" $, 1299 $, "void f() {\n    std::vector<int> a;\n    std::vector<int> t;\n    std::vector<int>::const_iterator it;\n    it = a.begin();\n    while (it!=a.end())\n        v++it;\n    it = t.begin();\n    while (it!=t.end())\n        ++it;\n}" $)
1300:
|
1308:
1309: ;
1310: $if $(@expr1073743262 $!@expr1073743263 $assertEquals $(@expr1073743264 "cppcheck-2.8/test/teststl.cpp" $, 1310 $, "" $, errout@var100 .@expr1435 str (@expr1436 ) $) $) { $return ; }
1311:
1312: $check_ $(@expr1073743267 "cppcheck-2.8/test/teststl.cpp" $, 1312 $, "void f() {\n    std::vector<int> a;\n    std::vector<int> t;\n    std::vector<int>::const_iterator it;\n    if(z)\n        it = a.begin();\n    else\n        it = t.begin();\n    while (z && it!=a.end())\n        v++it;\n    while (!z && it!=t.end())\n        v++it;\n}" $)
1313:
|
1323:
1324: ;
1325: $if $(@expr1073743268 $!@expr1073743269 $assertEquals $(@expr1073743270 "cppcheck-2.8/test/teststl.cpp" $, 1325 $, "" $, errout@var100 .@expr1435 str (@expr1436 ) $) $) { $return ; }
1326: }
1327:
1328: void iterator14 ( ) {
1329: $check_ $(@expr1073743273 "cppcheck-2.8/test/teststl.cpp" $, 1329 $, "void f() {\n    std::map<int,Foo> x;\n    std::map<int,Foo>::const_iterator it;\n    for (it = x.find(0)->second.begin(); it != x.find(0)->second.end(); ++it) {}\n}" $)
1330:
1331:
1332:
1333: ;
1334: $if $(@expr1073743274 $!@expr1073743275 $assertEquals $(@expr1073743276 "cppcheck-2.8/test/teststl.cpp" $, 1334 $, "" $, errout@var100 .@expr1073743277 str (@expr1073743278 ) $) $) { $return ; }
1335: }
1336:
1337: void iterator15 ( ) {
1338: $check_ $(@expr1073743279 "cppcheck-2.8/test/teststl.cpp" $, 1338 $, "void f(C1* x, std::list<int> a) {\n  std::list<int>::iterator pos = a.begin();\n  for(pos = x[0]->plist.begin(); pos != x[0]->plist.end(); ++pos) {}\n}" $)
1339:
1340:
1341: ;
1342: $if $(@expr1073743280 $!@expr1073743281 $assertEquals $(@expr1073743282 "cppcheck-2.8/test/teststl.cpp" $, 1342 $, "" $, errout@var100 .@expr1073743283 str (@expr1073743284 ) $) $) { $return ; }
1343: }
1344:
1345: void iterator16 ( ) {
1346: $check_ $(@expr1073743285 "cppcheck-2.8/test/teststl.cpp" $, 1346 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l2.end();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" $)
1347:
|
1355:
1356: ;
1357: $if $(@expr1073743286 $!@expr1073743287 $assertEquals $(@expr1073743288 "cppcheck-2.8/test/teststl.cpp" $, 1357 $, "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" $, errout@var100 .@expr1465 str (@expr1466 ) $) $) { $return
1358: ; }
1359:
1360: $check_ $(@expr1073743291 "cppcheck-2.8/test/teststl.cpp" $, 1360 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.end();\n    std::list<int>::iterator it2 = l2.begin();\n    while (it2 != it1)\n    {\n        ++it2;\n    }\n}" $)
1361:
|
1369:
1370: ;
1371: $if $(@expr1073743292 $!@expr1073743293 $assertEquals $(@expr1073743294 "cppcheck-2.8/test/teststl.cpp" $, 1371 $, "[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" $, errout@var100 .@expr1465 str (@expr1466 ) $) $) { $return
1372: ; }
1373:
1374: $check_ $(@expr1073743297 "cppcheck-2.8/test/teststl.cpp" $, 1374 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it2 = l2.end();\n    std::list<int>::iterator it1 = l1.begin();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" $)
1375:
|
1383:
1384: ;
1385: $if $(@expr1073743298 $!@expr1073743299 $assertEquals $(@expr1073743300 "cppcheck-2.8/test/teststl.cpp" $, 1385 $, "[test.cpp:6]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" $, errout@var100 .@expr1465 str (@expr1466 ) $) $) { $return
1386: ; }
1387:
1388: $check_ $(@expr1073743303 "cppcheck-2.8/test/teststl.cpp" $, 1388 $, "void foo()\n{\n    std::set<int> l1;\n    std::set<int> l2(10, 4);\n    std::set<int>::iterator it1 = l1.begin();\n    std::set<int>::iterator it2 = l2.find(4);\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" $)
1389:
|
1397:
1398: ;
1399: $if $(@expr1073743304 $!@expr1073743305 $assertEquals $(@expr1073743306 "cppcheck-2.8/test/teststl.cpp" $, 1399 $, "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" $, errout@var100 .@expr1465 str (@expr1466 ) $) $) { $return
1400: ; }
1401: }
1402:
1403: void iterator17 ( ) {
1404: $check_ $(@expr1073743309 "cppcheck-2.8/test/teststl.cpp" $, 1404 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    { it2 = l2.end(); }\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" $)
1405:
|
1414:
1415: ;
1416: $if $(@expr1073743310 $!@expr1073743311 $assertEquals $(@expr1073743312 "cppcheck-2.8/test/teststl.cpp" $, 1416 $, "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" $, errout@var100 .@expr1489 str (@expr1490 ) $) $) { $return
1417: ; }
1418:
1419: $check_ $(@expr1073743315 "cppcheck-2.8/test/teststl.cpp" $, 1419 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n    it2 = l2.end();\n}" $)
1420:
|
1429:
1430: ;
1431: $if $(@expr1073743316 $!@expr1073743317 $assertEquals $(@expr1073743318 "cppcheck-2.8/test/teststl.cpp" $, 1431 $, "" $, errout@var100 .@expr1489 str (@expr1490 ) $) $) { $return ; }
1432:
1433: $check_ $(@expr1073743321 "cppcheck-2.8/test/teststl.cpp" $, 1433 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    it1 = l2.end();\n    it1 = l1.end();\n    if (it1 != it2)\n    {\n        ++it1;\n    }\n}" $)
1434:
|
1444:
1445: ;
1446: $if $(@expr1073743322 $!@expr1073743323 $assertEquals $(@expr1073743324 "cppcheck-2.8/test/teststl.cpp" $, 1446 $, "" $, errout@var100 .@expr1489 str (@expr1490 ) $) $) { $return ; }
1447:
1448: $check_ $(@expr1073743327 "cppcheck-2.8/test/teststl.cpp" $, 1448 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    { it2 = l2.end(); }\n    it2 = l1.end();\n    { it2 = l2.end(); }\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" $)
1449:
|
1460:
1461: ;
1462: $if $(@expr1073743328 $!@expr1073743329 $assertEquals $(@expr1073743330 "cppcheck-2.8/test/teststl.cpp" $, 1462 $, "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" $, errout@var100 .@expr1489 str (@expr1490 ) $) $) { $return
1463: ; }
1464: }
1465:
1466: void iterator18 ( ) {
1467: $check_ $(@expr1073743333 "cppcheck-2.8/test/teststl.cpp" $, 1467 $, "void foo(std::list<int> l1, std::list<int> l2)\n{\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    while (++it1 != --it2)\n    {\n    }\n}" $)
1468:
|
1473:
1474: ;
1475: $if $(@expr1073743334 $!@expr1073743335 $assertEquals $(@expr1073743336 "cppcheck-2.8/test/teststl.cpp" $, 1475 $, "" $, errout@var100 .@expr1513 str (@expr1514 ) $) $) { $return ; }
1476:
1477: $check_ $(@expr1073743339 "cppcheck-2.8/test/teststl.cpp" $, 1477 $, "void foo(std::list<int> l1, std::list<int> l2)\n{\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    while (it1++ != --it2)\n    {\n    }\n}" $)
1478:
|
1483:
1484: ;
1485: $if $(@expr1073743340 $!@expr1073743341 $assertEquals $(@expr1073743342 "cppcheck-2.8/test/teststl.cpp" $, 1485 $, "" $, errout@var100 .@expr1513 str (@expr1514 ) $) $) { $return ; }
1486:
1487: $check_ $(@expr1073743345 "cppcheck-2.8/test/teststl.cpp" $, 1487 $, "void foo(std::list<int> l1, std::list<int> l2)\n{\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    if (--it2 > it1++)\n    {\n    }\n}" $)
1488:
|
1493:
1494: ;
1495: $todoAssertEquals $(@expr1073743346 "cppcheck-2.8/test/teststl.cpp" $, 1495 $, "" $, "[test.cpp:5]: (error) Dangerous comparison using operator< on iterator.\n" $, errout@var100 .@expr1513 str (@expr1514 ) $) ;
1496: }
1497:
1498: void iterator19 ( ) {
1499: $check_ $(@expr1073743349 "cppcheck-2.8/test/teststl.cpp" $, 1499 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        if (it1 != l1.end())\n        {\n        }\n    }\n}" $)
1500:
|
1508:
1509: ;
1510: $if $(@expr1073743350 $!@expr1073743351 $assertEquals $(@expr1073743352 "cppcheck-2.8/test/teststl.cpp" $, 1510 $, "[test.cpp:7] -> [test.cpp:4]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n" $, errout@var100 .@expr1529 str (@expr1530 ) $) $) { $return
1511:
1512: ; }
1513:
1514: $check_ $(@expr1073743355 "cppcheck-2.8/test/teststl.cpp" $, 1514 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        if (l1.end() > it1)\n        {\n        }\n    }\n}" $)
1515:
|
1523:
1524: ;
1525: $todoAssertEquals $(@expr1073743356 "cppcheck-2.8/test/teststl.cpp" $, 1525 $, "[test.cpp:7] -> [test.cpp:4]: (error) Same iterator is used with containers 'l1' that are defined in different scopes.\n" $, "[test.cpp:7] -> [test.cpp:7]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n[test.cpp:7]: (error) Dangerous comparison using operator< on iterator.\n" $, errout@var100 .@expr1529 str (@expr1530 ) $)
1526:
1527:
1528: ;
1529:
1530: $check_ $(@expr1073743359 "cppcheck-2.8/test/teststl.cpp" $, 1530 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        std::list<int>::iterator it2 = l1.begin();\n        if (it1 != it2)\n        {\n        }\n    }\n}" $)
1531:
|
1540:
1541: ;
1542: $if $(@expr1073743360 $!@expr1073743361 $assertEquals $(@expr1073743362 "cppcheck-2.8/test/teststl.cpp" $, 1542 $, "[test.cpp:8] -> [test.cpp:4]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n" $, errout@var100 .@expr1529 str (@expr1530 ) $) $) { $return
1543:
1544: ; }
1545:
1546: $check_ $(@expr1073743365 "cppcheck-2.8/test/teststl.cpp" $, 1546 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        std::list<int>::iterator it2 = l1.begin();\n        if (it2 != it1)\n        {\n        }\n    }\n}" $)
1547:
|
1556:
1557: ;
1558: $if $(@expr1073743366 $!@expr1073743367 $assertEquals $(@expr1073743368 "cppcheck-2.8/test/teststl.cpp" $, 1558 $, "[test.cpp:8] -> [test.cpp:7]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n" $, errout@var100 .@expr1529 str (@expr1530 ) $) $) { $return
1559:
1560: ; }
1561:
1562: $check_ $(@expr1073743371 "cppcheck-2.8/test/teststl.cpp" $, 1562 $, "std::set<int> g() {\n    static const std::set<int> s = {1};\n    return s;\n}\nvoid f() {\n    if (g().find(2) == g().end()) {}\n}\n" $)
1563:
|
1567:
1568: ;
1569: $if $(@expr1073743372 $!@expr1073743373 $assertEquals $(@expr1073743374 "cppcheck-2.8/test/teststl.cpp" $, 1569 $, "[test.cpp:6] -> [test.cpp:6]: (error) Same iterator is used with containers 'g()' that are temporaries or defined in different scopes.\n" $, errout@var100 .@expr1529 str (@expr1530 ) $) $) { $return
1570:
1571: ; }
1572: }
1573:
1574: void iterator20 ( ) {
1575: $check_ $(@expr1073743377 "cppcheck-2.8/test/teststl.cpp" $, 1575 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l2.begin();\n    it1 = it2;\n    while (it1 != l1.end())\n    {\n        ++it1;\n    }\n}" $)
1576:
|
1585:
1586: ;
1587: $if $(@expr1073743378 $!@expr1073743379 $assertEquals $(@expr1073743380 "cppcheck-2.8/test/teststl.cpp" $, 1587 $, "[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" $, errout@var100 .@expr1557 str (@expr1558 ) $) $) { $return
1588: ; }
1589:
1590: $check_ $(@expr1073743383 "cppcheck-2.8/test/teststl.cpp" $, 1590 $, "std::list<int> l3;\nstd::list<int>::iterator bar()\n{\n    return l3.end();\n}\nvoid foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l2.begin();\n    it1 = bar();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" $)
1591:
|
1605:
1606: ;
1607: $todoAssertEquals $(@expr1073743384 "cppcheck-2.8/test/teststl.cpp" $, 1607 $, "[test.cpp:13] -> [test.cpp:10] -> [test.cpp:11]: (error) Comparison of iterators from containers 'l1' and 'l2'.\n" $, "" $, errout@var100 .@expr1557 str (@expr1558 ) $) ;
1608:
1609: }
1610:
1611: void iterator21 ( ) {
1612: $check_ $(@expr1073743387 "cppcheck-2.8/test/teststl.cpp" $, 1612 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.end();\n    std::list<int>::iterator it2 = l2.begin();\n    if (it1 != it2)\n    {\n    }\n    if (it2 != it1)\n    {\n    }\n}" $)
1613:
|
1623:
1624: ;
1625: $if $(@expr1073743388 $!@expr1073743389 $assertEquals $(@expr1073743390 "cppcheck-2.8/test/teststl.cpp" $, 1625 $, "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" $, errout@var100 .@expr1567 str (@expr1568 ) $) $) { $return
1626:
1627: ; }
1628:
1629: $check_ $(@expr1073743393 "cppcheck-2.8/test/teststl.cpp" $, 1629 $, "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.end();\n    std::list<int>::iterator it2 = l2.begin();\n    if (it1 != it2 && it1 != it2)\n    {\n    }\n}" $)
1630:
|
1637:
1638: ;
1639: $if $(@expr1073743394 $!@expr1073743395 $assertEquals $(@expr1073743396 "cppcheck-2.8/test/teststl.cpp" $, 1639 $, "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" $, errout@var100 .@expr1567 str (@expr1568 ) $) $) { $return
1640: ; }
1641: }
1642:
1643: void iterator22 ( ) {
1644: $check_ $(@expr1073743399 "cppcheck-2.8/test/teststl.cpp" $, 1644 $, "void foo() {\n    std::list<int> &l = x.l;\n    std::list<int>::iterator it = l.find(123);\n    x.l.erase(it);\n}" $)
1645:
1646:
1647:
1648: ;
1649: $if $(@expr1073743400 $!@expr1073743401 $assertEquals $(@expr1073743402 "cppcheck-2.8/test/teststl.cpp" $, 1649 $, "" $, errout@var100 .@expr1073743403 str (@expr1073743404 ) $) $) { $return ; }
1650: }
1651:
1652: void iterator23 ( ) {
1653: $check_ $(@expr1073743405 "cppcheck-2.8/test/teststl.cpp" $, 1653 $, "struct A {\n    struct B {\n        bool operator==(const A::B& b) const;\n        int x;\n        int y;\n        int z;\n    };\n};\nbool A::B::operator==(const A::B& b) const {\n    return std::tie(x, y, z) == std::tie(b.x, b.y, b.z);\n}" $)
1654:
|
1662:
1663: ;
1664: $if $(@expr1073743406 $!@expr1073743407 $assertEquals $(@expr1073743408 "cppcheck-2.8/test/teststl.cpp" $, 1664 $, "" $, errout@var100 .@expr1073743409 str (@expr1073743410 ) $) $) { $return ; }
1665: }
1666:
1667: void iterator24 ( ) {
1668:
1669: $check_ $(@expr1073743411 "cppcheck-2.8/test/teststl.cpp" $, 1669 $, "void f(int a, int b) {\n  if (&a == &b) {}\n}" $)
1670:
1671: ;
1672: $if $(@expr1073743412 $!@expr1073743413 $assertEquals $(@expr1073743414 "cppcheck-2.8/test/teststl.cpp" $, 1672 $, "" $, errout@var100 .@expr1591 str (@expr1592 ) $) $) { $return ; }
1673:
1674: $check_ $(@expr1073743417 "cppcheck-2.8/test/teststl.cpp" $, 1674 $, "void f(int a, int b) {\n  if (std::for_each(&a, &b + 1, [](auto) {})) {}\n}" $)
1675:
1676: ;
1677: $if $(@expr1073743418 $!@expr1073743419 $assertEquals $(@expr1073743420 "cppcheck-2.8/test/teststl.cpp" $, 1677 $, "[test.cpp:2]: (error) Iterators of different containers 'a' and 'b' are used together.\n" $, errout@var100 .@expr1591 str (@expr1592 ) $) $) { $return
1678: ; }
1679:
1680: $check_ $(@expr1073743423 "cppcheck-2.8/test/teststl.cpp" $, 1680 $, "void f(int a, int b) {\n  if (std::for_each(&a, &b, [](auto) {})) {}\n}" $)
1681:
1682: ;
1683: $if $(@expr1073743424 $!@expr1073743425 $assertEquals $(@expr1073743426 "cppcheck-2.8/test/teststl.cpp" $, 1683 $, "[test.cpp:2]: (error) Iterators of different containers 'a' and 'b' are used together.\n" $, errout@var100 .@expr1591 str (@expr1592 ) $) $) { $return
1684: ; }
1685:
1686: $check_ $(@expr1073743429 "cppcheck-2.8/test/teststl.cpp" $, 1686 $, "void f(int a) {\n  if (std::for_each(&a, &a, [](auto) {})) {}\n}" $)
1687:
1688: ;
1689: $if $(@expr1073743430 $!@expr1073743431 $assertEquals $(@expr1073743432 "cppcheck-2.8/test/teststl.cpp" $, 1689 $, "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n" $, errout@var100 .@expr1591 str (@expr1592 ) $) $) { $return ; }
1690:
1691: $check_ $(@expr1073743435 "cppcheck-2.8/test/teststl.cpp" $, 1691 $, "void f(int a) {\n  if (std::for_each(&a, &a + 1, [](auto) {})) {}\n}" $)
1692:
1693: ;
1694: $if $(@expr1073743436 $!@expr1073743437 $assertEquals $(@expr1073743438 "cppcheck-2.8/test/teststl.cpp" $, 1694 $, "" $, errout@var100 .@expr1591 str (@expr1592 ) $) $) { $return ; }
1695: }
1696:
1697: void iterator25 ( ) {
1698:
1699: $check_ $(@expr1073743441 "cppcheck-2.8/test/teststl.cpp" $, 1699 $, "struct S {\n  std::vector<int>& v;\n};\nstruct T {\n    bool operator()(const S& lhs, const S& rhs) const {\n        return &lhs.v != &rhs.v;\n    }\n};" $)
1700:
|
1705:
1706: ;
1707: $if $(@expr1073743442 $!@expr1073743443 $assertEquals $(@expr1073743444 "cppcheck-2.8/test/teststl.cpp" $, 1707 $, "" $, errout@var100 .@expr1073743445 str (@expr1073743446 ) $) $) { $return ; }
1708: }
1709:
1710: void iterator26 ( ) {
1711: $check_ $(@expr1073743447 "cppcheck-2.8/test/teststl.cpp" $, 1711 $, "#include <map>\nint main()\n{  std::map<char const*, int> m{ {\"a\", 1} };\n  if (auto iter = m.find(\"x\"); iter != m.end()) {\n    return iter->second;\n  }\n  return 0;\n}\n" $)
1712:
|
1719:
1720: ;
1721: $if $(@expr1073743448 $!@expr1073743449 $assertEquals $(@expr1073743450 "cppcheck-2.8/test/teststl.cpp" $, 1721 $, "" $, errout@var100 .@expr1073743451 str (@expr1073743452 ) $) $) { $return ; }
1722: }
1723:
1724: void iterator27 ( ) {
1725:
1726: $check_ $(@expr1073743453 "cppcheck-2.8/test/teststl.cpp" $, 1726 $, "struct A {\n    int a;\n    int b;\n};\nint f(std::map<int, A> m) {\n    auto it =  m.find( 1 );\n    const int a( it == m.cend() ? 0 : it->second.a );\n    const int b( it == m.cend() ? 0 : it->second.b );\n    return a + b;\n}\n" $)
1727:
|
1734:
1735: ;
1736: $if $(@expr1073743454 $!@expr1073743455 $assertEquals $(@expr1073743456 "cppcheck-2.8/test/teststl.cpp" $, 1736 $, "" $, errout@var100 .@expr1073743457 str (@expr1073743458 ) $) $) { $return ; }
1737: }
1738:
1739: void iterator28 ( )
1740: {
1741:
1742: $check_ $(@expr1073743459 "cppcheck-2.8/test/teststl.cpp" $, 1742 $, "struct S {\n    struct Private {\n        std::list<int> l;\n    };\n    std::unique_ptr<Private> p;\n    int foo();\n};\nint S::foo() {\n    for(auto iter = p->l.begin(); iter != p->l.end(); ++iter) {\n        if(*iter == 1) {\n            p->l.erase(iter);\n            return 1;\n        }\n    }\n    return 0;\n}\n" $)
1743:
|
1756:
1757: ;
1758: $if $(@expr1073743460 $!@expr1073743461 $assertEquals $(@expr1073743462 "cppcheck-2.8/test/teststl.cpp" $, 1758 $, "" $, errout@var100 .@expr1073743463 str (@expr1073743464 ) $) $) { $return ; }
1759: }
1760:
1761: void iteratorExpression ( ) {
1762: $check_ $(@expr1073743465 "cppcheck-2.8/test/teststl.cpp" $, 1762 $, "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    (void)std::find(f().begin(), g().end(), 0);\n}" $)
1763:
1764:
1765:
1766: ;
1767: $if $(@expr1073743466 $!@expr1073743467 $assertEquals $(@expr1073743468 "cppcheck-2.8/test/teststl.cpp" $, 1767 $, "[test.cpp:4]: (error) Iterators of different containers 'f()' and 'g()' are used together.\n" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return
1768: ; }
1769:
1770: $check_ $(@expr1073743471 "cppcheck-2.8/test/teststl.cpp" $, 1770 $, "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    if(f().begin() == g().end()) {}\n}" $)
1771:
1772:
1773:
1774: ;
1775: $if $(@expr1073743472 $!@expr1073743473 $assertEquals $(@expr1073743474 "cppcheck-2.8/test/teststl.cpp" $, 1775 $, "[test.cpp:4]: (error) Iterators of different containers 'f()' and 'g()' are used together.\n" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return
1776: ; }
1777:
1778: $check_ $(@expr1073743477 "cppcheck-2.8/test/teststl.cpp" $, 1778 $, "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    auto size = f().end() - g().begin();\n}" $)
1779:
1780:
1781:
1782: ;
1783: $if $(@expr1073743478 $!@expr1073743479 $assertEquals $(@expr1073743480 "cppcheck-2.8/test/teststl.cpp" $, 1783 $, "[test.cpp:4]: (error) Iterators of different containers 'f()' and 'g()' are used together.\n" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return
1784: ; }
1785:
1786: $check_ $(@expr1073743483 "cppcheck-2.8/test/teststl.cpp" $, 1786 $, "struct A {\n    std::vector<int>& f();\n    std::vector<int>& g();\n};\nvoid foo() {\n    (void)std::find(A().f().begin(), A().g().end(), 0);\n}" $)
1787:
|
1791:
1792: ;
1793: $if $(@expr1073743484 $!@expr1073743485 $assertEquals $(@expr1073743486 "cppcheck-2.8/test/teststl.cpp" $, 1793 $, "[test.cpp:6]: (error) Iterators of different containers 'A().f()' and 'A().g()' are used together.\n" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return
1794:
1795: ; }
1796:
1797: $check_ $(@expr1073743489 "cppcheck-2.8/test/teststl.cpp" $, 1797 $, "struct A {\n    std::vector<int>& f();\n    std::vector<int>& g();\n};\nvoid foo() {\n    (void)std::find(A{} .f().begin(), A{} .g().end(), 0);\n}" $)
1798:
|
1802:
1803: ;
1804: $if $(@expr1073743490 $!@expr1073743491 $assertEquals $(@expr1073743492 "cppcheck-2.8/test/teststl.cpp" $, 1804 $, "[test.cpp:6]: (error) Iterators of different containers 'A{}.f()' and 'A{}.g()' are used together.\n" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return
1805:
1806: ; }
1807:
1808: $check_ $(@expr1073743495 "cppcheck-2.8/test/teststl.cpp" $, 1808 $, "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    (void)std::find(begin(f()), end(g()), 0);\n}" $)
1809:
1810:
1811:
1812: ;
1813: $if $(@expr1073743496 $!@expr1073743497 $assertEquals $(@expr1073743498 "cppcheck-2.8/test/teststl.cpp" $, 1813 $, "[test.cpp:4]: (warning) Iterators to containers from different expressions 'f()' and 'g()' are used together.\n" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return ; }
1814:
1815: $check_ $(@expr1073743501 "cppcheck-2.8/test/teststl.cpp" $, 1815 $, "struct A {\n    std::vector<int>& f();\n    std::vector<int>& g();\n};\nvoid foo() {\n    (void)std::find(A().f().begin(), A().f().end(), 0);\n}" $)
1816:
|
1820:
1821: ;
1822: $if $(@expr1073743502 $!@expr1073743503 $assertEquals $(@expr1073743504 "cppcheck-2.8/test/teststl.cpp" $, 1822 $, "" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return ; }
1823:
1824: $check_ $(@expr1073743507 "cppcheck-2.8/test/teststl.cpp" $, 1824 $, "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    if(bar(f().begin()) == g().end()) {}\n}" $)
1825:
1826:
1827:
1828: ;
1829: $if $(@expr1073743508 $!@expr1073743509 $assertEquals $(@expr1073743510 "cppcheck-2.8/test/teststl.cpp" $, 1829 $, "" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return ; }
1830:
1831: $check_ $(@expr1073743513 "cppcheck-2.8/test/teststl.cpp" $, 1831 $, "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    auto it = f().end() - 1;\n    f().begin() - it;\n    f().begin()+1 - it;\n    f().begin() - (it + 1);\n    f().begin() - f().end();\n    f().begin()+1 - f().end();\n    f().begin() - (f().end() + 1);\n    (void)std::find(f().begin(), it, 0);\n    (void)std::find(f().begin(), it + 1, 0);\n    (void)std::find(f().begin() + 1, it + 1, 0);\n    (void)std::find(f().begin() + 1, it, 0);\n    (void)std::find(f().begin(), f().end(), 0);\n    (void)std::find(f().begin() + 1, f().end(), 0);\n    (void)std::find(f().begin(), f().end() - 1, 0);\n    (void)std::find(f().begin() + 1, f().end() - 1, 0);\n    (void)std::find(begin(f()), end(f()));\n    (void)std::find(begin(f()) + 1, end(f()), 0);\n    (void)std::find(begin(f()), end(f()) - 1, 0);\n    (void)std::find(begin(f()) + 1, end(f()) - 1, 0);\n}" $)
1832:
|
1852:
1853: ;
1854: $if $(@expr1073743514 $!@expr1073743515 $assertEquals $(@expr1073743516 "cppcheck-2.8/test/teststl.cpp" $, 1854 $, "[test.cpp:10]: (error) Dereference of an invalid iterator: f().end()+1\n" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return ; }
1855:
1856: $check_ $(@expr1073743519 "cppcheck-2.8/test/teststl.cpp" $, 1856 $, "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    if(f().begin() == f().end()) {}\n    if(f().begin() == f().end()+1) {}\n    if(f().begin()+1 == f().end()) {}\n    if(f().begin()+1 == f().end()+1) {}\n}" $)
1857:
|
1862:
1863: ;
1864: $if $(@expr1073743520 $!@expr1073743521 $assertEquals $(@expr1073743522 "cppcheck-2.8/test/teststl.cpp" $, 1864 $, "[test.cpp:5]: (error) Dereference of an invalid iterator: f().end()+1\n[test.cpp:7]: (error) Dereference of an invalid iterator: f().end()+1\n" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return
1865:
1866: ; }
1867:
1868: $check_ $(@expr1073743525 "cppcheck-2.8/test/teststl.cpp" $, 1868 $, "template<int N>\nstd::vector<int>& f();\nvoid foo() {\n    if(f<1>().begin() == f<1>().end()) {}\n}" $)
1869:
1870:
1871:
1872: ;
1873: $if $(@expr1073743526 $!@expr1073743527 $assertEquals $(@expr1073743528 "cppcheck-2.8/test/teststl.cpp" $, 1873 $, "" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return ; }
1874:
1875: $check_ $(@expr1073743531 "cppcheck-2.8/test/teststl.cpp" $, 1875 $, "void f() {\n  if (a.begin().x == b.begin().x) {}\n  if (begin(a).x == begin(b).x) {}\n}" $)
1876:
1877:
1878: ;
1879: $if $(@expr1073743532 $!@expr1073743533 $assertEquals $(@expr1073743534 "cppcheck-2.8/test/teststl.cpp" $, 1879 $, "" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return ; }
1880:
1881: $check_ $(@expr1073743537 "cppcheck-2.8/test/teststl.cpp" $, 1881 $, "void f(std::list<int*> a, std::list<int*> b) {\n  if (*a.begin() == *b.begin()) {}\n}" $)
1882:
1883: ;
1884: $if $(@expr1073743538 $!@expr1073743539 $assertEquals $(@expr1073743540 "cppcheck-2.8/test/teststl.cpp" $, 1884 $, "" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return ; }
1885:
1886: $check_ $(@expr1073743543 "cppcheck-2.8/test/teststl.cpp" $, 1886 $, "void foo() {\n    if(f().begin(1) == f().end()) {}\n}" $)
1887:
1888: ;
1889: $if $(@expr1073743544 $!@expr1073743545 $assertEquals $(@expr1073743546 "cppcheck-2.8/test/teststl.cpp" $, 1889 $, "" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return ; }
1890:
1891: $check_ $(@expr1073743549 "cppcheck-2.8/test/teststl.cpp" $, 1891 $, "void foo(const uint8_t* data, const uint32_t dataLength) {\n    const uint32_t minimumLength = sizeof(uint16_t) + sizeof(uint16_t);\n    if (dataLength >= minimumLength) {\n        char* payload = new char[dataLength - minimumLength];\n        std::copy(&data[minimumLength], &data[dataLength], payload);\n    }\n}\n" $)
1892:
|
1896:
1897: ;
1898: $if $(@expr1073743550 $!@expr1073743551 $assertEquals $(@expr1073743552 "cppcheck-2.8/test/teststl.cpp" $, 1898 $, "" $, errout@var100 .@expr1645 str (@expr1646 ) $) $) { $return ; }
1899: }
1900:
1901: void iteratorSameExpression ( ) {
1902: $check_ $(@expr1073743555 "cppcheck-2.8/test/teststl.cpp" $, 1902 $, "void f(std::vector<int> v) {\n    std::for_each(v.begin(), v.begin(), [](int){});\n}" $)
1903:
1904: ;
1905: $if $(@expr1073743556 $!@expr1073743557 $assertEquals $(@expr1073743558 "cppcheck-2.8/test/teststl.cpp" $, 1905 $, "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return ; }
1906:
1907: $check_ $(@expr1073743561 "cppcheck-2.8/test/teststl.cpp" $, 1907 $, "std::vector<int>& g();\nvoid f() {\n    std::for_each(g().begin(), g().begin(), [](int){});\n}" $)
1908:
1909:
1910: ;
1911: $if $(@expr1073743562 $!@expr1073743563 $assertEquals $(@expr1073743564 "cppcheck-2.8/test/teststl.cpp" $, 1911 $, "[test.cpp:3]: (style) Same iterators expression are used for algorithm.\n" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return ; }
1912:
1913: $check_ $(@expr1073743567 "cppcheck-2.8/test/teststl.cpp" $, 1913 $, "void f(std::vector<int> v) {\n    std::for_each(v.end(), v.end(), [](int){});\n}" $)
1914:
1915: ;
1916: $if $(@expr1073743568 $!@expr1073743569 $assertEquals $(@expr1073743570 "cppcheck-2.8/test/teststl.cpp" $, 1916 $, "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return ; }
1917:
1918: $check_ $(@expr1073743573 "cppcheck-2.8/test/teststl.cpp" $, 1918 $, "std::vector<int>& g();\nvoid f() {\n    std::for_each(g().end(), g().end(), [](int){});\n}" $)
1919:
1920:
1921: ;
1922: $if $(@expr1073743574 $!@expr1073743575 $assertEquals $(@expr1073743576 "cppcheck-2.8/test/teststl.cpp" $, 1922 $, "[test.cpp:3]: (style) Same iterators expression are used for algorithm.\n" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return ; }
1923:
1924: $check_ $(@expr1073743579 "cppcheck-2.8/test/teststl.cpp" $, 1924 $, "std::vector<int>::iterator g();\nvoid f(std::vector<int> v) {\n    std::for_each(g(), g(), [](int){});\n}" $)
1925:
1926:
1927: ;
1928: $if $(@expr1073743580 $!@expr1073743581 $assertEquals $(@expr1073743582 "cppcheck-2.8/test/teststl.cpp" $, 1928 $, "[test.cpp:3]: (style) Same iterators expression are used for algorithm.\n" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return ; }
1929:
1930: $check_ $(@expr1073743585 "cppcheck-2.8/test/teststl.cpp" $, 1930 $, "void f(std::vector<int>::iterator it) {\n    std::for_each(it, it, [](int){});\n}" $)
1931:
1932: ;
1933: $if $(@expr1073743586 $!@expr1073743587 $assertEquals $(@expr1073743588 "cppcheck-2.8/test/teststl.cpp" $, 1933 $, "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return ; }
1934: }
1935:
1936: void mismatchingContainerIterator ( ) {
1937: $check_ $(@expr1073743591 "cppcheck-2.8/test/teststl.cpp" $, 1937 $, "std::vector<int> to_vector(int value) {\n    std::vector<int> a, b;\n    a.insert(b.end(), value);\n    return a;\n}" $)
1938:
1939:
1940:
1941: ;
1942: $if $(@expr1073743592 $!@expr1073743593 $assertEquals $(@expr1073743594 "cppcheck-2.8/test/teststl.cpp" $, 1942 $, "[test.cpp:3]: (error) Iterator 'b.end()' from different container 'a' are used together.\n" $, errout@var100 .@expr1771 str (@expr1772 ) $) $) { $return ; }
1943:
1944: $check_ $(@expr1073743597 "cppcheck-2.8/test/teststl.cpp" $, 1944 $, "std::vector<int> f(std::vector<int> a, std::vector<int> b) {\n    a.erase(b.begin());\n    return a;\n}" $)
1945:
1946:
1947: ;
1948: $if $(@expr1073743598 $!@expr1073743599 $assertEquals $(@expr1073743600 "cppcheck-2.8/test/teststl.cpp" $, 1948 $, "[test.cpp:2]: (error) Iterator 'b.begin()' from different container 'a' are used together.\n" $, errout@var100 .@expr1771 str (@expr1772 ) $) $) { $return ; }
1949:
1950:
1951: $check_ $(@expr1073743603 "cppcheck-2.8/test/teststl.cpp" $, 1951 $, "void f() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>& l = l2;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it == 1) {\n            l.erase(it);\n            break;\n        }\n    }\n}\n" $)
1952:
|
1960:
1961: ;
1962: $if $(@expr1073743604 $!@expr1073743605 $assertEquals $(@expr1073743606 "cppcheck-2.8/test/teststl.cpp" $, 1962 $, "" $, errout@var100 .@expr1771 str (@expr1772 ) $) $) { $return ; }
1963:
1964:
1965: $check_ $(@expr1073743609 "cppcheck-2.8/test/teststl.cpp" $, 1965 $, "struct a {\n    int b;\n    int end() { return b; }\n};\nvoid f(a c, a d) {\n    if (c.end() == d.end()) {}\n}\n" $)
1966:
|
1970:
1971: ;
1972: $if $(@expr1073743610 $!@expr1073743611 $assertEquals $(@expr1073743612 "cppcheck-2.8/test/teststl.cpp" $, 1972 $, "" $, errout@var100 .@expr1771 str (@expr1772 ) $) $) { $return ; }
1973:
1974:
1975: $check_ $(@expr1073743615 "cppcheck-2.8/test/teststl.cpp" $, 1975 $, "void f(std::array<std::vector<int>, N>& A) {\n  for (auto& a : A) {\n    auto it = std::find_if(a.begin(), a.end(), \n                           [](auto i) { return i == 0; });\n    if (it != a.end()) {}\n  }\n}\n" $)
1976:
|
1980:
1981: ;
1982: $if $(@expr1073743616 $!@expr1073743617 $assertEquals $(@expr1073743618 "cppcheck-2.8/test/teststl.cpp" $, 1982 $, "" $, errout@var100 .@expr1771 str (@expr1772 ) $) $) { $return ; }
1983:
1984:
1985: $check_ $(@expr1073743621 "cppcheck-2.8/test/teststl.cpp" $, 1985 $, "struct S {\n    std::vector<int> v;\n};\nvoid f(S& s, int m) {\n    s.v.erase(s.v.begin() + m);\n}\n" $)
1986:
|
1989:
1990: ;
1991: $if $(@expr1073743622 $!@expr1073743623 $assertEquals $(@expr1073743624 "cppcheck-2.8/test/teststl.cpp" $, 1991 $, "" $, errout@var100 .@expr1771 str (@expr1772 ) $) $) { $return ; }
1992: }
1993:
1994:
1995: void dereference ( ) {
1996: $check_ $(@expr1073743627 "cppcheck-2.8/test/teststl.cpp" $, 1996 $, "void f()\n{\n    std::vector<int> ints{1,2,3,4,5};\n    std::vector<int>::iterator iter;\n    iter = ints.begin() + 2;\n    ints.erase(iter);\n    std::cout << (*iter) << std::endl;\n}" , true $)
1997:
|
2002:
2003: ;
2004: $todoAssertEquals $(@expr1073743628 "cppcheck-2.8/test/teststl.cpp" $, 2004 $, "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:7]: (error) Using iterator to local container 'ints' that may be invalid.\n" $, "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:7]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n" $, errout@var100 .@expr1805 str (@expr1806 ) $) ;
2005:
2006:
2007: $check_ $(@expr1073743631 "cppcheck-2.8/test/teststl.cpp" $, 2007 $, "typedef std::map<Packet> packetMap;\npacketMap waitingPackets;\nvoid ProcessRawPacket() {\n    packetMap::iterator wpi;\n    while ((wpi = waitingPackets.find(lastInOrder + 1)) != waitingPackets.end()) {\n        waitingPackets.erase(wpi);\n        for (unsigned pos = 0; pos < buf.size(); ) {     }\n    }\n}" $)
2008:
|
2014:
2015: ;
2016: $if $(@expr1073743632 $!@expr1073743633 $assertEquals $(@expr1073743634 "cppcheck-2.8/test/teststl.cpp" $, 2016 $, "" $, errout@var100 .@expr1805 str (@expr1806 ) $) $) { $return ; }
2017:
2018:
2019: $check_ $(@expr1073743637 "cppcheck-2.8/test/teststl.cpp" $, 2019 $, "void f() {\n  std::vector<int> ints;\n  std::vector<int>::const_iterator iter {ints.cbegin()};\n  std::cout << (*iter) << std::endl;\n}" $)
2020:
2021:
2022:
2023: ;
2024: $if $(@expr1073743638 $!@expr1073743639 $assertEquals $(@expr1073743640 "cppcheck-2.8/test/teststl.cpp" $, 2024 $, "" $, errout@var100 .@expr1805 str (@expr1806 ) $) $) { $return ; }
2025: }
2026:
2027: void dereference_break ( ) {
2028: $check_ $(@expr1073743643 "cppcheck-2.8/test/teststl.cpp" $, 2028 $, "void f(std::vector<int> &ints) {\n    std::vector<int>::iterator iter;\n    for (iter=ints.begin();iter!=ints.end();++iter) {\n        if (*iter == 2) {\n            ints.erase(iter);\n            break;\n        }\n        if (*iter == 3) {\n            ints.erase(iter);\n            break;\n        }\n    }\n}" $)
2029:
|
2039:
2040: ;
2041: $if $(@expr1073743644 $!@expr1073743645 $assertEquals $(@expr1073743646 "cppcheck-2.8/test/teststl.cpp" $, 2041 $, "" $, errout@var100 .@expr1073743647 str (@expr1073743648 ) $) $) { $return ; }
2042: }
2043:
2044: void dereference_member ( ) {
2045: $check_ $(@expr1073743649 "cppcheck-2.8/test/teststl.cpp" $, 2045 $, "void f()\n{\n    std::map<int, int> ints;\n    std::map<int, int>::iterator iter;\n    iter = ints.begin();\n    ints.erase(iter);\n    std::cout << iter->first << std::endl;\n}" $)
2046:
|
2051:
2052: ;
2053: $if $(@expr1073743650 $!@expr1073743651 $assertEquals $(@expr1073743652 "cppcheck-2.8/test/teststl.cpp" $, 2053 $, "[test.cpp:7] -> [test.cpp:6]: (error) Iterator 'iter' used after element has been erased.\n" $, errout@var100 .@expr1829 str (@expr1830 ) $) $) { $return ; }
2054:
2055:
2056: $check_ $(@expr1073743655 "cppcheck-2.8/test/teststl.cpp" $, 2056 $, "void f()\n{\n    std::map<int, int> ints;\n    std::map<int, int>::reverse_iterator iter;\n    iter = ints.rbegin();\n    ints.erase(iter);\n    std::cout << iter->first << std::endl;\n}" $)
2057:
|
2062:
2063: ;
2064: $if $(@expr1073743656 $!@expr1073743657 $assertEquals $(@expr1073743658 "cppcheck-2.8/test/teststl.cpp" $, 2064 $, "[test.cpp:7] -> [test.cpp:6]: (error) Iterator 'iter' used after element has been erased.\n" $, errout@var100 .@expr1829 str (@expr1830 ) $) $) { $return ; }
2065: }
2066:
2067: void dereference_auto ( ) {
2068: $check_ $(@expr1073743661 "cppcheck-2.8/test/teststl.cpp" $, 2068 $, "void f()\n{\n    std::vector<int> ints{1,2,3,4,5};\n    auto iter = ints.begin() + 2;\n    ints.erase(iter);\n    std::cout << (*iter) << std::endl;\n}" , true $)
2069:
|
2073:
2074: ;
2075: $todoAssertEquals $(@expr1073743662 "cppcheck-2.8/test/teststl.cpp" $, 2075 $, "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'ints' that may be invalid.\n" $, "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n" $, errout@var100 .@expr1839 str (@expr1840 ) $) ;
2076:
2077: $check_ $(@expr1073743665 "cppcheck-2.8/test/teststl.cpp" $, 2077 $, "void f() {\n    auto x = *myList.begin();\n    myList.erase(x);\n    auto b = x.first;\n}" $)
2078:
2079:
2080:
2081: ;
2082: $if $(@expr1073743666 $!@expr1073743667 $assertEquals $(@expr1073743668 "cppcheck-2.8/test/teststl.cpp" $, 2082 $, "" $, errout@var100 .@expr1839 str (@expr1840 ) $) $) { $return ; }
2083:
2084: $check_ $(@expr1073743671 "cppcheck-2.8/test/teststl.cpp" $, 2084 $, "const CXXRecordDecl *CXXRecordDecl::getTemplateInstantiationPattern() const {\n    if (auto *TD = dyn_cast<ClassTemplateSpecializationDecl>(this)) {\n        auto From = TD->getInstantiatedFrom();\n    }\n    return nullptr;\n}" $)
2085:
|
2088:
2089: ;
2090: $if $(@expr1073743672 $!@expr1073743673 $assertEquals $(@expr1073743674 "cppcheck-2.8/test/teststl.cpp" $, 2090 $, "" $, errout@var100 .@expr1839 str (@expr1840 ) $) $) { $return ; }
2091: }
2092:
2093: void STLSize ( ) {
2094: $check_ $(@expr1073743677 "cppcheck-2.8/test/teststl.cpp" $, 2094 $, "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n       foo[ii] = 0;\n    }\n}" $)
2095:
|
2100:
2101: ;
2102: $if $(@expr1073743678 $!@expr1073743679 $assertEquals $(@expr1073743680 "cppcheck-2.8/test/teststl.cpp" $, 2102 $, "[test.cpp:6]: (error) Out of bounds access in expression 'foo[ii]' because 'foo' is empty and 'ii' may be non-zero.\n" $, errout@var100 .@expr1857 str (@expr1858 ) $) $) { $return
2103:
2104: ; }
2105:
2106: $check_ $(@expr1073743683 "cppcheck-2.8/test/teststl.cpp" $, 2106 $, "void foo(std::vector<int> foo) {\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii) {\n       foo.at(ii) = 0;\n    }\n}" $)
2107:
2108:
2109:
2110: ;
2111: $if $(@expr1073743684 $!@expr1073743685 $assertEquals $(@expr1073743686 "cppcheck-2.8/test/teststl.cpp" $, 2111 $, "[test.cpp:3]: (error) When ii==foo.size(), foo.at(ii) is out of bounds.\n" $, errout@var100 .@expr1857 str (@expr1858 ) $) $) { $return ; }
2112:
2113: $check_ $(@expr1073743689 "cppcheck-2.8/test/teststl.cpp" $, 2113 $, "void foo(const std::string& foo) {\n    for (unsigned int ii = 0; ii <= foo.length(); ++ii) {\n       foo[ii] = 'x';\n    }\n}" $)
2114:
2115:
2116:
2117: ;
2118: $if $(@expr1073743690 $!@expr1073743691 $assertEquals $(@expr1073743692 "cppcheck-2.8/test/teststl.cpp" $, 2118 $, "[test.cpp:3]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n" $, errout@var100 .@expr1857 str (@expr1858 ) $) $) { $return ; }
2119:
2120: $check_ $(@expr1073743695 "cppcheck-2.8/test/teststl.cpp" $, 2120 $, "void foo(const std::string& foo, unsigned int ii) {\n    if (ii <= foo.length()) {\n       foo[ii] = 'x';\n    }\n}" $)
2121:
2122:
2123:
2124: ;
2125: $if $(@expr1073743696 $!@expr1073743697 $assertEquals $(@expr1073743698 "cppcheck-2.8/test/teststl.cpp" $, 2125 $, "[test.cpp:3]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n" $, errout@var100 .@expr1857 str (@expr1858 ) $) $) { $return ; }
2126:
2127: $check_ $(@expr1073743701 "cppcheck-2.8/test/teststl.cpp" $, 2127 $, "void foo(const std::string& foo, unsigned int ii) {\n    do {\n       foo[ii] = 'x';\n       ++i;\n    } while(ii <= foo.length());\n}" $)
2128:
|
2131:
2132: ;
2133: $if $(@expr1073743702 $!@expr1073743703 $assertEquals $(@expr1073743704 "cppcheck-2.8/test/teststl.cpp" $, 2133 $, "[test.cpp:3]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n" $, errout@var100 .@expr1857 str (@expr1858 ) $) $) { $return ; }
2134:
2135: $check_ $(@expr1073743707 "cppcheck-2.8/test/teststl.cpp" $, 2135 $, "void foo(const std::string& foo, unsigned int ii) {\n    if (anything()) {\n    } else if (ii <= foo.length()) {\n       foo[ii] = 'x';\n    }\n}" $)
2136:
|
2139:
2140: ;
2141: $if $(@expr1073743708 $!@expr1073743709 $assertEquals $(@expr1073743710 "cppcheck-2.8/test/teststl.cpp" $, 2141 $, "[test.cpp:4]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n" $, errout@var100 .@expr1857 str (@expr1858 ) $) $) { $return ; }
2142:
2143: $check_ $(@expr1073743713 "cppcheck-2.8/test/teststl.cpp" $, 2143 $, "void foo()\n{\n    std::vector<int> foo;\n    foo.push_back(1);\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n    }\n    int ii = 0;\n    foo[ii] = 0;\n}" $)
2144:
|
2151:
2152: ;
2153: $if $(@expr1073743714 $!@expr1073743715 $assertEquals $(@expr1073743716 "cppcheck-2.8/test/teststl.cpp" $, 2153 $, "" $, errout@var100 .@expr1857 str (@expr1858 ) $) $) { $return ; }
2154:
2155: $check_ $(@expr1073743719 "cppcheck-2.8/test/teststl.cpp" $, 2155 $, "void foo() {\n    for (B b : D()) {}\n}" $)
2156:
2157: ;
2158: $if $(@expr1073743720 $!@expr1073743721 $assertEquals $(@expr1073743722 "cppcheck-2.8/test/teststl.cpp" $, 2158 $, "" $, errout@var100 .@expr1857 str (@expr1858 ) $) $) { $return ; }
2159:
2160: $check_ $(@expr1073743725 "cppcheck-2.8/test/teststl.cpp" $, 2160 $, "void foo(std::vector<int> foo) {\n    for (unsigned int ii = 0; ii <= foo.size() + 1; ++ii) {\n       foo.at(ii) = 0;\n    }\n}" $)
2161:
2162:
2163:
2164: ;
2165: $todoAssertEquals $(@expr1073743726 "cppcheck-2.8/test/teststl.cpp" $, 2165 $, "[test.cpp:3]: (error) When ii==foo.size(), foo.at(ii) is out of bounds.\n" $, "" $, errout@var100 .@expr1857 str (@expr1858 ) $) ;
2166: }
2167:
2168: void STLSizeNoErr ( ) {
2169: {
2170: $check_ $(@expr1073743729 "cppcheck-2.8/test/teststl.cpp" $, 2170 $, "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii < foo.size(); ++ii)\n    {\n       foo[ii] = 0;\n    }\n}" $)
2171:
|
2176:
2177: ;
2178: $if $(@expr1073743730 $!@expr1073743731 $assertEquals $(@expr1073743732 "cppcheck-2.8/test/teststl.cpp" $, 2178 $, "" $, errout@var100 .@expr1909 str (@expr1910 ) $) $) { $return ; }
2179: }
2180:
2181: {
2182: $check_ $(@expr1073743735 "cppcheck-2.8/test/teststl.cpp" $, 2182 $, "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n    }\n}" $)
2183:
|
2187:
2188: ;
2189: $if $(@expr1073743736 $!@expr1073743737 $assertEquals $(@expr1073743738 "cppcheck-2.8/test/teststl.cpp" $, 2189 $, "" $, errout@var100 .@expr1909 str (@expr1910 ) $) $) { $return ; }
2190: }
2191:
2192: {
2193: $check_ $(@expr1073743741 "cppcheck-2.8/test/teststl.cpp" $, 2193 $, "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n        if (ii == foo.size())\n        {\n        }\n        else\n        {\n            foo[ii] = 0;\n        }\n    }\n}" $)
2194:
|
2205:
2206: ;
2207: $if $(@expr1073743742 $!@expr1073743743 $assertEquals $(@expr1073743744 "cppcheck-2.8/test/teststl.cpp" $, 2207 $, "[test.cpp:11]: (error) Out of bounds access in expression 'foo[ii]' because 'foo' is empty and 'ii' may be non-zero.\n" $, errout@var100 .@expr1909 str (@expr1910 ) $) $) { $return
2208:
2209: ; }
2210: }
2211:
2212: {
2213: $check_ $(@expr1073743747 "cppcheck-2.8/test/teststl.cpp" $, 2213 $, "void f(const std::map<int,int> &data) {\n    int i = x;    for (int i = 5; i <= data.size(); i++)\n        data[i] = 0;\n}" $)
2214:
2215:
2216:
2217: ;
2218: $if $(@expr1073743748 $!@expr1073743749 $assertEquals $(@expr1073743750 "cppcheck-2.8/test/teststl.cpp" $, 2218 $, "" $, errout@var100 .@expr1909 str (@expr1910 ) $) $) { $return ; }
2219: }
2220:
2221: {
2222: $check_ $(@expr1073743753 "cppcheck-2.8/test/teststl.cpp" $, 2222 $, "void foo(std::vector<int> foo) {\n    for (unsigned int ii = 0; ii <= foo.size() - 1; ++ii) {\n       foo.at(ii) = 0;\n    }\n}" $)
2223:
2224:
2225:
2226: ;
2227: $if $(@expr1073743754 $!@expr1073743755 $assertEquals $(@expr1073743756 "cppcheck-2.8/test/teststl.cpp" $, 2227 $, "" $, errout@var100 .@expr1909 str (@expr1910 ) $) $) { $return ; }
2228: }
2229: }
2230:
2231: void negativeIndex ( ) {
2232: $check_ $(@expr1073743759 "cppcheck-2.8/test/teststl.cpp" $, 2232 $, "void f(const std::vector<int> &v) {\n  v[-11] = 123;\n}" $)
2233:
2234: ;
2235: $if $(@expr1073743760 $!@expr1073743761 $assertEquals $(@expr1073743762 "cppcheck-2.8/test/teststl.cpp" $, 2235 $, "[test.cpp:2]: (error) Array index -11 is out of bounds.\n" $, errout@var100 .@expr1939 str (@expr1940 ) $) $) { $return ; }
2236:
2237: $check_ $(@expr1073743765 "cppcheck-2.8/test/teststl.cpp" $, 2237 $, "int f(int x, const std::vector<int>& a) {\n    if (!(x < 5))\n        return a[x - 5];\n    else\n        return a[4 - x];\n}" $)
2238:
|
2241:
2242: ;
2243: $if $(@expr1073743766 $!@expr1073743767 $assertEquals $(@expr1073743768 "cppcheck-2.8/test/teststl.cpp" $, 2243 $, "" $, errout@var100 .@expr1939 str (@expr1940 ) $) $) { $return ; }
2244:
2245: $check_ $(@expr1073743771 "cppcheck-2.8/test/teststl.cpp" $, 2245 $, "std::array<int,6> values;\nint get_value();\nint compute() {\n    int i = get_value();\n    if( i < 0 || i > 5)\n        return -1;\n    int sum = 0;\n    for( int j = i+1; j < 7; ++j)\n        sum += values[j-1];\n    return sum;\n}\n" $)
2246:
|
2254:
2255: ;
2256: $if $(@expr1073743772 $!@expr1073743773 $assertEquals $(@expr1073743774 "cppcheck-2.8/test/teststl.cpp" $, 2256 $, "" $, errout@var100 .@expr1939 str (@expr1940 ) $) $) { $return ; }
2257: }
2258:
2259:
2260:
2261: void erase1 ( ) {
2262: $check_ $(@expr1073743777 "cppcheck-2.8/test/teststl.cpp" $, 2262 $, "void f()\n{\n    std::list<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it) {\n        foo.erase(it);\n    }\n    for (it = foo.begin(); it != foo.end(); ++it) {\n        foo.erase(it);\n    }\n}" $)
2263:
|
2270:
2271: ;
2272: $if $(@expr1073743778 $!@expr1073743779 $assertEquals $(@expr1073743780 "cppcheck-2.8/test/teststl.cpp" $, 2272 $, "[test.cpp:4] -> [test.cpp:5]: (error) Iterator 'it' used after element has been erased.\n[test.cpp:7] -> [test.cpp:8]: (error) Iterator 'it' used after element has been erased.\n" $, errout@var100 .@expr1957 str (@expr1958 ) $) $) { $return
2273: ; }
2274:
2275: $check_ $(@expr1073743783 "cppcheck-2.8/test/teststl.cpp" $, 2275 $, "void f(std::list<int> &ints)\n{\n    std::list<int>::iterator i = ints.begin();\n    i = ints.erase(i);\n    *i = 0;\n}" $)
2276:
|
2279:
2280: ;
2281: $if $(@expr1073743784 $!@expr1073743785 $assertEquals $(@expr1073743786 "cppcheck-2.8/test/teststl.cpp" $, 2281 $, "" $, errout@var100 .@expr1957 str (@expr1958 ) $) $) { $return ; }
2282:
2283: $check_ $(@expr1073743789 "cppcheck-2.8/test/teststl.cpp" $, 2283 $, "void f()\n{\n    std::list<int>::iterator i;\n    while (i != x.y.end())\n        i = x.y.erase(i);\n}" $)
2284:
|
2287:
2288: ;
2289: $if $(@expr1073743790 $!@expr1073743791 $assertEquals $(@expr1073743792 "cppcheck-2.8/test/teststl.cpp" $, 2289 $, "" $, errout@var100 .@expr1957 str (@expr1958 ) $) $) { $return ; }
2290:
2291:
2292: $check_ $(@expr1073743795 "cppcheck-2.8/test/teststl.cpp" $, 2292 $, "void f(vector< std::list<int> > &ints, unsigned int i)\n{\n    std::list<int>::iterator it;\n    for(it = ints[i].begin(); it != ints[i].end(); it++) {\n        if (*it % 2)\n            it = ints[i].erase(it);\n    }\n}" $)
2293:
|
2298:
2299: ;
2300: $if $(@expr1073743796 $!@expr1073743797 $assertEquals $(@expr1073743798 "cppcheck-2.8/test/teststl.cpp" $, 2300 $, "" $, errout@var100 .@expr1957 str (@expr1958 ) $) $) { $return ; }
2301: }
2302:
2303: void erase2 ( ) {
2304: $check_ $(@expr1073743801 "cppcheck-2.8/test/teststl.cpp" $, 2304 $, "static void f()\n{\n    for (iterator it = foo.begin(); it != foo.end(); it = next)\n    {\n        next = it;\n        next++;\n        foo.erase(it);\n    }\n}" $)
2305:
|
2311:
2312: ;
2313: $if $(@expr1073743802 $!@expr1073743803 $assertEquals $(@expr1073743804 "cppcheck-2.8/test/teststl.cpp" $, 2313 $, "" $, errout@var100 .@expr1073743805 str (@expr1073743806 ) $) $) { $return ; }
2314: }
2315:
2316: void erase3 ( ) {
2317: $check_ $(@expr1073743807 "cppcheck-2.8/test/teststl.cpp" $, 2317 $, "static void f(std::list<abc> &foo)\n{\n    std::list<abc>::iterator it = foo.begin();\n    foo.erase(it->a);\n    if (it->b);\n}" $)
2318:
|
2321:
2322: ;
2323: $if $(@expr1073743808 $!@expr1073743809 $assertEquals $(@expr1073743810 "cppcheck-2.8/test/teststl.cpp" $, 2323 $, "" $, errout@var100 .@expr1073743811 str (@expr1073743812 ) $) $) { $return ; }
2324: }
2325:
2326: void erase4 ( ) {
2327: $check_ $(@expr1073743813 "cppcheck-2.8/test/teststl.cpp" $, 2327 $, "void f()\n{\n    std::list<int>::iterator it, it2;\n    for (it = foo.begin(); it != i2; ++it)\n    {\n        foo.erase(it);\n    }\n}" $)
2328:
|
2333:
2334: ;
2335: $if $(@expr1073743814 $!@expr1073743815 $assertEquals $(@expr1073743816 "cppcheck-2.8/test/teststl.cpp" $, 2335 $, "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n" $, errout@var100 .@expr1993 str (@expr1994 ) $) $) { $return ; }
2336:
2337: $check_ $(@expr1073743819 "cppcheck-2.8/test/teststl.cpp" $, 2337 $, "void f()\n{\n    std::list<int>::iterator it = foo.begin();\n    for (; it != i2; ++it)\n    {\n        foo.erase(it);\n    }\n}" $)
2338:
|
2343:
2344: ;
2345: $if $(@expr1073743820 $!@expr1073743821 $assertEquals $(@expr1073743822 "cppcheck-2.8/test/teststl.cpp" $, 2345 $, "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n" $, errout@var100 .@expr1993 str (@expr1994 ) $) $) { $return ; }
2346:
2347: $check_ $(@expr1073743825 "cppcheck-2.8/test/teststl.cpp" $, 2347 $, "void f()\n{\n    std::list<int>::iterator it = foo.begin();\n    while (it != i2)\n    {\n        foo.erase(it);\n    }\n}" $)
2348:
|
2353:
2354: ;
2355: $if $(@expr1073743826 $!@expr1073743827 $assertEquals $(@expr1073743828 "cppcheck-2.8/test/teststl.cpp" $, 2355 $, "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n" $, errout@var100 .@expr1993 str (@expr1994 ) $) $) { $return ; }
2356:
2357: $check_ $(@expr1073743831 "cppcheck-2.8/test/teststl.cpp" $, 2357 $, "void f()\n{\n    std::list<int>::iterator it = foo.begin();\n    while (it != i2)\n    {\n        foo.erase(++it);\n    }\n}" $)
2358:
|
2363:
2364: ;
2365: $if $(@expr1073743832 $!@expr1073743833 $assertEquals $(@expr1073743834 "cppcheck-2.8/test/teststl.cpp" $, 2365 $, "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n" $, errout@var100 .@expr1993 str (@expr1994 ) $) $) { $return ; }
2366: }
2367:
2368: void erase5 ( ) {
2369: $check_ $(@expr1073743837 "cppcheck-2.8/test/teststl.cpp" $, 2369 $, "void f()\n{\n    std::list<int> foo;\n    std::list<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (*it == 123)\n            foo.erase(it);\n    }\n}" $)
2370:
|
2377:
2378: ;
2379: $if $(@expr1073743838 $!@expr1073743839 $assertEquals $(@expr1073743840 "cppcheck-2.8/test/teststl.cpp" $, 2379 $, "[test.cpp:5] -> [test.cpp:8]: (error) Iterator 'it' used after element has been erased.\n" $, errout@var100 .@expr1073743841 str (@expr1073743842 ) $) $) { $return ; }
2380: }
2381:
2382: void erase6 ( ) {
2383: $check_ $(@expr1073743843 "cppcheck-2.8/test/teststl.cpp" $, 2383 $, "void f() {\n    std::vector<int> vec(3);\n    std::vector<int>::iterator it;\n    std::vector<int>::iterator itEnd = vec.end();\n    for (it = vec.begin(); it != itEnd; it = vec.begin(), itEnd = vec.end())\n    {\n        vec.erase(it);\n    }\n}" $)
2384:
|
2390:
2391: ;
2392: $if $(@expr1073743844 $!@expr1073743845 $assertEquals $(@expr1073743846 "cppcheck-2.8/test/teststl.cpp" $, 2392 $, "" $, errout@var100 .@expr1073743847 str (@expr1073743848 ) $) $) { $return ; }
2393: }
2394:
2395: void eraseBreak ( ) {
2396: $check_ $(@expr1073743849 "cppcheck-2.8/test/teststl.cpp" $, 2396 $, "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        if (x)            break;\n    }\n}" $)
2397:
|
2403:
2404: ;
2405: $if $(@expr1073743850 $!@expr1073743851 $assertEquals $(@expr1073743852 "cppcheck-2.8/test/teststl.cpp" $, 2405 $, "[test.cpp:3] -> [test.cpp:5]: (error) Iterator 'it' used after element has been erased.\n" $, errout@var100 .@expr2029 str (@expr2030 ) $) $) { $return ; }
2406:
2407: $check_ $(@expr1073743855 "cppcheck-2.8/test/teststl.cpp" $, 2407 $, "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (x) {\n            foo.erase(it);\n            break;\n        }\n    }\n}" $)
2408:
|
2415:
2416: ;
2417: $if $(@expr1073743856 $!@expr1073743857 $assertEquals $(@expr1073743858 "cppcheck-2.8/test/teststl.cpp" $, 2417 $, "" $, errout@var100 .@expr2029 str (@expr2030 ) $) $) { $return ; }
2418:
2419: $check_ $(@expr1073743861 "cppcheck-2.8/test/teststl.cpp" $, 2419 $, "void f(int x)\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        if (x)            return;\n    }\n}" $)
2420:
|
2426:
2427: ;
2428: $if $(@expr1073743862 $!@expr1073743863 $assertEquals $(@expr1073743864 "cppcheck-2.8/test/teststl.cpp" $, 2428 $, "[test.cpp:3] -> [test.cpp:5]: (error) Iterator 'it' used after element has been erased.\n" $, errout@var100 .@expr2029 str (@expr2030 ) $) $) { $return ; }
2429:
2430: }
2431:
2432: void eraseContinue ( ) {
2433: $check_ $(@expr1073743867 "cppcheck-2.8/test/teststl.cpp" $, 2433 $, "void f(std::vector<int> &ints)\n{\n    std::vector<int>::iterator it;\n    std::vector<int>::iterator jt = ints.begin();\n    for (it = ints.begin(); it != ints.end(); it = jt) {\n        ++jt;\n        if (*it == 1) {\n            jt = ints.erase(it);\n            continue;\n        }\n    }\n}" $)
2434:
|
2443:
2444: ;
2445: $if $(@expr1073743868 $!@expr1073743869 $assertEquals $(@expr1073743870 "cppcheck-2.8/test/teststl.cpp" $, 2445 $, "" $, errout@var100 .@expr2047 str (@expr2048 ) $) $) { $return ; }
2446:
2447: $check_ $(@expr1073743873 "cppcheck-2.8/test/teststl.cpp" $, 2447 $, "void f(std::map<uint32, uint32> my_map) {\n  std::map<uint32, uint32>::iterator itr = my_map.begin();\n  switch (itr->first) {\n  case 0:\n    my_map.erase(itr);\n    continue;\n  case 1:\n    itr->second = 1;\n    break;\n  }\n}" $)
2448:
|
2456:
2457: ;
2458: $if $(@expr1073743874 $!@expr1073743875 $assertEquals $(@expr1073743876 "cppcheck-2.8/test/teststl.cpp" $, 2458 $, "" $, errout@var100 .@expr2047 str (@expr2048 ) $) $) { $return ; }
2459: }
2460:
2461: void eraseReturn1 ( ) {
2462: $check_ $(@expr1073743879 "cppcheck-2.8/test/teststl.cpp" $, 2462 $, "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        return;\n    }\n}" $)
2463:
|
2470:
2471: ;
2472: $if $(@expr1073743880 $!@expr1073743881 $assertEquals $(@expr1073743882 "cppcheck-2.8/test/teststl.cpp" $, 2472 $, "" $, errout@var100 .@expr1073743883 str (@expr1073743884 ) $) $) { $return ; }
2473: }
2474:
2475: void eraseReturn2 ( ) {
2476: $check_ $(@expr1073743885 "cppcheck-2.8/test/teststl.cpp" $, 2476 $, "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (*it == 1) {\n            foo.erase(it);\n            return;\n        }\n        else {\n            foo.erase(it);\n            return;\n        }\n    }\n}" $)
2477:
|
2490:
2491: ;
2492: $if $(@expr1073743886 $!@expr1073743887 $assertEquals $(@expr1073743888 "cppcheck-2.8/test/teststl.cpp" $, 2492 $, "" $, errout@var100 .@expr1073743889 str (@expr1073743890 ) $) $) { $return ; }
2493: }
2494:
2495: void eraseReturn3 ( ) {
2496: $check_ $(@expr1073743891 "cppcheck-2.8/test/teststl.cpp" $, 2496 $, "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (somecondition) {\n            if (*it == 1)\n                foo.erase(it);\n            else\n                *it = 0;\n            return;\n        }\n    }\n}" $)
2497:
|
2509:
2510: ;
2511: $if $(@expr1073743892 $!@expr1073743893 $assertEquals $(@expr1073743894 "cppcheck-2.8/test/teststl.cpp" $, 2511 $, "" $, errout@var100 .@expr2071 str (@expr2072 ) $) $) { $return ; }
2512:
2513: $check_ $(@expr1073743897 "cppcheck-2.8/test/teststl.cpp" $, 2513 $, "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (a) {\n            if (b)\n                foo.erase(it);\n            else\n                *it = 0;\n        }\n    }\n}" $)
2514:
|
2525:
2526: ;
2527: $if $(@expr1073743898 $!@expr1073743899 $assertEquals $(@expr1073743900 "cppcheck-2.8/test/teststl.cpp" $, 2527 $, "[test.cpp:5] -> [test.cpp:7] -> [test.cpp:8] -> [test.cpp:8] -> [test.cpp:7] -> [test.cpp:5] -> [test.cpp:9] -> [test.cpp:3] -> [test.cpp:5]: (error) Using iterator to local container 'foo' that may be invalid.\n" $, errout@var100 .@expr2071 str (@expr2072 ) $) $) { $return ; }
2528: }
2529:
2530: void eraseGoto ( ) {
2531: $check_ $(@expr1073743903 "cppcheck-2.8/test/teststl.cpp" $, 2531 $, "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        goto abc;\n    }\nbar:\n}" $)
2532:
|
2538:
2539: ;
2540: $if $(@expr1073743904 $!@expr1073743905 $assertEquals $(@expr1073743906 "cppcheck-2.8/test/teststl.cpp" $, 2540 $, "" $, errout@var100 .@expr1073743907 str (@expr1073743908 ) $) $) { $return ; }
2541: }
2542:
2543: void eraseAssign1 ( ) {
2544: $check_ $(@expr1073743909 "cppcheck-2.8/test/teststl.cpp" $, 2544 $, "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        it = foo.begin();\n    }\n}" $)
2545:
|
2550:
2551: ;
2552: $if $(@expr1073743910 $!@expr1073743911 $assertEquals $(@expr1073743912 "cppcheck-2.8/test/teststl.cpp" $, 2552 $, "" $, errout@var100 .@expr1073743913 str (@expr1073743914 ) $) $) { $return ; }
2553: }
2554:
2555: void eraseAssign2 ( ) {
2556: $check_ $(@expr1073743915 "cppcheck-2.8/test/teststl.cpp" $, 2556 $, "void f(std::list<int> &ints)\n{\n    for (std::list<int>::iterator it = ints.begin(); it != ints.end();) {\n        if (*it == 123) {\n            std::list<int>::iterator copy = it;\n            ++copy;\n            ints.erase(it);\n            it = copy;\n        } else {\n            it->second = 123;\n            ++it;\n        }\n    }\n}" $)
2557:
|
2568:
2569: ;
2570: $if $(@expr1073743916 $!@expr1073743917 $assertEquals $(@expr1073743918 "cppcheck-2.8/test/teststl.cpp" $, 2570 $, "" $, errout@var100 .@expr1073743919 str (@expr1073743920 ) $) $) { $return ; }
2571: }
2572:
2573: void eraseAssign3 ( ) {
2574: $check_ $(@expr1073743921 "cppcheck-2.8/test/teststl.cpp" $, 2574 $, "void f(std::list<list<int> >& l) {\n    std::list<std::list<int> >::const_iterator i = l.begin();\n    std::list<int>::const_iterator j = (*i).begin();\n    cout << *j << endl;\n}" $)
2575:
2576:
2577:
2578: ;
2579: $if $(@expr1073743922 $!@expr1073743923 $assertEquals $(@expr1073743924 "cppcheck-2.8/test/teststl.cpp" $, 2579 $, "" $, errout@var100 .@expr1073743925 str (@expr1073743926 ) $) $) { $return ; }
2580: }
2581:
2582: void eraseAssign4 ( ) {
2583: $check_ $(@expr1073743927 "cppcheck-2.8/test/teststl.cpp" $, 2583 $, "void f(std::list<int> data) {\n  std::list<int>::const_iterator it = data.begin();\n  it = data.erase(it);\n  it = data.erase(it);\n}" $)
2584:
2585:
2586:
2587: ;
2588: $if $(@expr1073743928 $!@expr1073743929 $assertEquals $(@expr1073743930 "cppcheck-2.8/test/teststl.cpp" $, 2588 $, "" $, errout@var100 .@expr2107 str (@expr2108 ) $) $) { $return ; }
2589:
2590: $check_ $(@expr1073743933 "cppcheck-2.8/test/teststl.cpp" $, 2590 $, "void f(Data data) {\n  std::list<int>::const_iterator it = data.ints.begin();\n  it = data.ints.erase(it);\n  it = data.ints.erase(it);\n}" $)
2591:
2592:
2593:
2594: ;
2595: $if $(@expr1073743934 $!@expr1073743935 $assertEquals $(@expr1073743936 "cppcheck-2.8/test/teststl.cpp" $, 2595 $, "" $, errout@var100 .@expr2107 str (@expr2108 ) $) $) { $return ; }
2596: }
2597:
2598: void eraseAssignByFunctionCall ( ) {
2599: $check_ $(@expr1073743939 "cppcheck-2.8/test/teststl.cpp" $, 2599 $, "void f(std::list<list<int> >& l) {\n    std::list<foo>::const_iterator i;\n    bar(i);\n    cout << *i;\n}" $)
2600:
2601:
2602:
2603: ;
2604: $if $(@expr1073743940 $!@expr1073743941 $assertEquals $(@expr1073743942 "cppcheck-2.8/test/teststl.cpp" $, 2604 $, "" $, errout@var100 .@expr1073743943 str (@expr1073743944 ) $) $) { $return ; }
2605: }
2606:
2607: void eraseErase ( ) {
2608: $check_ $(@expr1073743945 "cppcheck-2.8/test/teststl.cpp" $, 2608 $, "void f(std::vector<ints> &ints)\n{\n    std::vector<int>::iterator iter;\n    iter = ints.begin() + 2;\n    ints.erase(iter);\n    ints.erase(iter);\n}" , true $)
2609:
|
2613:
2614: ;
2615: $todoAssertEquals $(@expr1073743946 "cppcheck-2.8/test/teststl.cpp" $, 2615 $, "[test.cpp:1] -> [test.cpp:4] -> [test.cpp:5] -> [test.cpp:1] -> [test.cpp:6]: (error) Using iterator to local container 'ints' that may be invalid.\n" $, "[test.cpp:1] -> [test.cpp:4] -> [test.cpp:5] -> [test.cpp:1] -> [test.cpp:6]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n" $, errout@var100 .@expr1073743947 str (@expr1073743948 ) $) ;
2616: }
2617:
2618: void eraseByValue ( ) {
2619: $check_ $(@expr1073743949 "cppcheck-2.8/test/teststl.cpp" $, 2619 $, "void f()\n{\n    std::set<int> foo;\n    for (std::set<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(*it);\n    }\n}" $)
2620:
|
2625:
2626: ;
2627: $todoAssertEquals $(@expr1073743950 "cppcheck-2.8/test/teststl.cpp" $, 2627 $, "[test.cpp:6]: (error) Iterator 'it' becomes invalid when deleted by value from 'foo'\n" $, "" $, errout@var100 .@expr2127 str (@expr2128 ) $) ;
2628:
2629: $check_ $(@expr1073743953 "cppcheck-2.8/test/teststl.cpp" $, 2629 $, "int f(std::set<int> foo) {\n    std::set<int>::iterator it = foo.begin();\n    foo.erase(*it);\n    return *it;\n}" $)
2630:
2631:
2632:
2633: ;
2634: $if $(@expr1073743954 $!@expr1073743955 $assertEquals $(@expr1073743956 "cppcheck-2.8/test/teststl.cpp" $, 2634 $, "[test.cpp:4] -> [test.cpp:3]: (error) Iterator 'it' used after element has been erased.\n" $, errout@var100 .@expr2127 str (@expr2128 ) $) $) { $return ; }
2635:
2636: $check_ $(@expr1073743959 "cppcheck-2.8/test/teststl.cpp" $, 2636 $, "void f(std::set<int> foo)\n{\n    std::set<int>::iterator it = foo.begin();\n    foo.erase(*it);\n}" $)
2637:
2638:
2639:
2640: ;
2641: $if $(@expr1073743960 $!@expr1073743961 $assertEquals $(@expr1073743962 "cppcheck-2.8/test/teststl.cpp" $, 2641 $, "" $, errout@var100 .@expr2127 str (@expr2128 ) $) $) { $return ; }
2642:
2643:
2644: $check_ $(@expr1073743965 "cppcheck-2.8/test/teststl.cpp" $, 2644 $, "void f() {\n    HashSet_Ref::iterator aIt = m_ImplementationMap.find( xEle );\n    m_SetLoadedFactories.erase(*aIt);\n    m_SetLoadedFactories.erase(aIt);\n}" $)
2645:
2646:
2647:
2648: ;
2649: $if $(@expr1073743966 $!@expr1073743967 $assertEquals $(@expr1073743968 "cppcheck-2.8/test/teststl.cpp" $, 2649 $, "" $, errout@var100 .@expr2127 str (@expr2128 ) $) $) { $return ; }
2650:
2651: $check_ $(@expr1073743971 "cppcheck-2.8/test/teststl.cpp" $, 2651 $, "void f(const std::list<int>& m_ImplementationMap) {\n    std::list<int>::iterator aIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*aIt);\n    m_ImplementationMap.erase(aIt);\n}" $)
2652:
2653:
2654:
2655: ;
2656: $if $(@expr1073743972 $!@expr1073743973 $assertEquals $(@expr1073743974 "cppcheck-2.8/test/teststl.cpp" $, 2656 $, "[test.cpp:4]: (error) Invalid iterator: aIt\n" $, errout@var100 .@expr2127 str (@expr2128 ) $) $) { $return ; }
2657:
2658: $check_ $(@expr1073743977 "cppcheck-2.8/test/teststl.cpp" $, 2658 $, "void f(const std::list<int>& m_ImplementationMap) {\n    std::list<int>::iterator aIt = m_ImplementationMap.begin();\n    std::list<int>::iterator bIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*bIt);\n    m_ImplementationMap.erase(aIt);\n}" $)
2659:
|
2662:
2663: ;
2664: $if $(@expr1073743978 $!@expr1073743979 $assertEquals $(@expr1073743980 "cppcheck-2.8/test/teststl.cpp" $, 2664 $, "" $, errout@var100 .@expr2127 str (@expr2128 ) $) $) { $return ; }
2665: }
2666:
2667: void eraseIf ( ) {
2668:
2669: $check_ $(@expr1073743983 "cppcheck-2.8/test/teststl.cpp" $, 2669 $, "void func(std::list<std::string> strlist) {\n    for (std::list<std::string>::iterator str = strlist.begin(); str != strlist.end(); str++) {\n        if (func2(*str)) {\n            strlist.erase(str);\n            if (strlist.empty())\n                 return;\n        }\n    }\n}" $)
2670:
|
2676:
2677: ;
2678: $if $(@expr1073743984 $!@expr1073743985 $assertEquals $(@expr1073743986 "cppcheck-2.8/test/teststl.cpp" $, 2678 $, "[test.cpp:2] -> [test.cpp:4]: (error) Iterator 'str' used after element has been erased.\n" $, errout@var100 .@expr1073743987 str (@expr1073743988 ) $) $) { $return ; }
2679: }
2680:
2681: void eraseOnVector ( ) {
2682: $check_ $(@expr1073743989 "cppcheck-2.8/test/teststl.cpp" $, 2682 $, "void f(const std::vector<int>& m_ImplementationMap) {\n    std::vector<int>::iterator aIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(something(unknown));\n    m_ImplementationMap.erase(aIt);\n}" $)
2683:
2684:
2685:
2686: ;
2687: $if $(@expr1073743990 $!@expr1073743991 $assertEquals $(@expr1073743992 "cppcheck-2.8/test/teststl.cpp" $, 2687 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'm_ImplementationMap' that may be invalid.\n" $, errout@var100 .@expr2169 str (@expr2170 ) $) $) { $return ; }
2688:
2689: $check_ $(@expr1073743995 "cppcheck-2.8/test/teststl.cpp" $, 2689 $, "void f(const std::vector<int>& m_ImplementationMap) {\n    std::vector<int>::iterator aIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*aIt);\n    m_ImplementationMap.erase(aIt);\n}" $)
2690:
2691:
2692:
2693: ;
2694: $if $(@expr1073743996 $!@expr1073743997 $assertEquals $(@expr1073743998 "cppcheck-2.8/test/teststl.cpp" $, 2694 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'm_ImplementationMap' that may be invalid.\n" $, errout@var100 .@expr2169 str (@expr2170 ) $) $) { $return ; }
2695:
2696: $check_ $(@expr1073744001 "cppcheck-2.8/test/teststl.cpp" $, 2696 $, "void f(const std::vector<int>& m_ImplementationMap) {\n    std::vector<int>::iterator aIt = m_ImplementationMap.begin();\n    std::vector<int>::iterator bIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*bIt);\n    aIt = m_ImplementationMap.erase(aIt);\n}" $)
2697:
|
2700:
2701: ;
2702: $if $(@expr1073744002 $!@expr1073744003 $assertEquals $(@expr1073744004 "cppcheck-2.8/test/teststl.cpp" $, 2702 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'm_ImplementationMap' that may be invalid.\n" $, errout@var100 .@expr2169 str (@expr2170 ) $) $) { $return ; }
2703: }
2704:
2705: void pushback1 ( ) {
2706: $check_ $(@expr1073744007 "cppcheck-2.8/test/teststl.cpp" $, 2706 $, "void f(const std::vector<int> &foo)\n{\n    std::vector<int>::const_iterator it = foo.begin();\n    foo.push_back(123);\n    *it;\n}" $)
2707:
|
2710:
2711: ;
2712: $if $(@expr1073744008 $!@expr1073744009 $assertEquals $(@expr1073744010 "cppcheck-2.8/test/teststl.cpp" $, 2712 $, "[test.cpp:1] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'foo' that may be invalid.\n" $, errout@var100 .@expr1073744011 str (@expr1073744012 ) $) $) { $return ; }
2713: }
2714:
2715: void pushback2 ( ) {
2716: $check_ $(@expr1073744013 "cppcheck-2.8/test/teststl.cpp" $, 2716 $, "void f()\n{\n    std::vector<int>::const_iterator it = foo.begin();\n    foo.push_back(123);\n    {\n        int *it = &foo[0];\n        *it = 456;\n    }\n}" $)
2717:
|
2723:
2724: ;
2725: $if $(@expr1073744014 $!@expr1073744015 $assertEquals $(@expr1073744016 "cppcheck-2.8/test/teststl.cpp" $, 2725 $, "" $, errout@var100 .@expr1073744017 str (@expr1073744018 ) $) $) { $return ; }
2726: }
2727:
2728: void pushback3 ( ) {
2729: $check_ $(@expr1073744019 "cppcheck-2.8/test/teststl.cpp" $, 2729 $, "void f()\n{\n    std::vector<int> foo;\n    foo.push_back(10);\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.push_back(123);\n    }\n}" $)
2730:
|
2737:
2738: ;
2739: $if $(@expr1073744020 $!@expr1073744021 $assertEquals $(@expr1073744022 "cppcheck-2.8/test/teststl.cpp" $, 2739 $, "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:8] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'foo' that may be invalid.\n" $, errout@var100 .@expr1073744023 str (@expr1073744024 ) $) $) { $return ; }
2740: }
2741:
2742: void pushback4 ( ) {
2743: $check_ $(@expr1073744025 "cppcheck-2.8/test/teststl.cpp" $, 2743 $, "void f()\n{\n    std::vector<int> ints;\n    ints.push_back(1);\n    int *first = &ints[0];\n    ints.push_back(2);\n    *first;\n}" $)
2744:
|
2749:
2750: ;
2751: $if $(@expr1073744026 $!@expr1073744027 $assertEquals $(@expr1073744028 "cppcheck-2.8/test/teststl.cpp" $, 2751 $, "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:7]: (error) Using pointer to local variable 'ints' that may be invalid.\n" $, errout@var100 .@expr1073744029 str (@expr1073744030 ) $) $) { $return ; }
2752: }
2753:
2754: void pushback5 ( ) {
2755: $check_ $(@expr1073744031 "cppcheck-2.8/test/teststl.cpp" $, 2755 $, "void f()\n{\n    std::vector<int>::const_iterator i;\n\n    for (i=v.begin(); i!=v.end(); ++i)\n    {\n    }\n\n    for (i=rhs.v.begin(); i!=rhs.v.end(); ++i)\n    {\n        v.push_back(*i);\n    }\n}" $)
2756:
|
2766:
2767: ;
2768: $if $(@expr1073744032 $!@expr1073744033 $assertEquals $(@expr1073744034 "cppcheck-2.8/test/teststl.cpp" $, 2768 $, "" $, errout@var100 .@expr1073744035 str (@expr1073744036 ) $) $) { $return ; }
2769: }
2770:
2771: void pushback6 ( ) {
2772:
2773: $check_ $(@expr1073744037 "cppcheck-2.8/test/teststl.cpp" $, 2773 $, "void f()\n{\n    std::vector<int> v;\n    v.push_back(1);\n    v.push_back(2);\n    for (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n    {\n        if (*it == 1)\n            v.push_back(10);\n    }\n}" $)
2774:
|
2782:
2783: ;
2784: $if $(@expr1073744038 $!@expr1073744039 $assertEquals $(@expr1073744040 "cppcheck-2.8/test/teststl.cpp" $, 2784 $, "[test.cpp:6] -> [test.cpp:8] -> [test.cpp:8] -> [test.cpp:6] -> [test.cpp:9] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'v' that may be invalid.\n" $, errout@var100 .@expr2217 str (@expr2218 ) $) $) { $return ; }
2785:
2786: $check_ $(@expr1073744043 "cppcheck-2.8/test/teststl.cpp" $, 2786 $, "void f()\n{\n    std::vector<int> v;\n    vector.push_back(1);\n    vector.push_back(2);\n    for (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n    {\n        if (*it == 1)\n            v.push_back(10);\n    }\n}" $)
2787:
|
2795:
2796: ;
2797: $if $(@expr1073744044 $!@expr1073744045 $assertEquals $(@expr1073744046 "cppcheck-2.8/test/teststl.cpp" $, 2797 $, "[test.cpp:6] -> [test.cpp:8] -> [test.cpp:8] -> [test.cpp:6] -> [test.cpp:9] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'v' that may be invalid.\n" $, errout@var100 .@expr2217 str (@expr2218 ) $) $) { $return ; }
2798: }
2799:
2800: void pushback7 ( ) {
2801: $check_ $(@expr1073744049 "cppcheck-2.8/test/teststl.cpp" $, 2801 $, "void f()\n{\n    std::vector<int> foo;\n    foo.push_back(10);\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); it++)\n    {\n        foo.push_back(123);\n    }\n}" $)
2802:
|
2809:
2810: ;
2811: $if $(@expr1073744050 $!@expr1073744051 $assertEquals $(@expr1073744052 "cppcheck-2.8/test/teststl.cpp" $, 2811 $, "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:8] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'foo' that may be invalid.\n" $, errout@var100 .@expr1073744053 str (@expr1073744054 ) $) $) { $return ; }
2812: }
2813:
2814: void pushback8 ( ) {
2815: $check_ $(@expr1073744055 "cppcheck-2.8/test/teststl.cpp" $, 2815 $, "void f()\n{\n    std::vector<int> ints;\n    std::vector<int>::const_iterator end = ints.end();\n    ints.push_back(10);\n    std::vector<int>::iterator it;\n    unsigned int sum = 0;\n    for (it = ints.begin(); it != end; ++it)\n    {\n        sum += *it;\n    }\n}" $)
2816:
|
2825:
2826: ;
2827: $if $(@expr1073744056 $!@expr1073744057 $assertEquals $(@expr1073744058 "cppcheck-2.8/test/teststl.cpp" $, 2827 $, "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:8]: (error) Using iterator to local container 'ints' that may be invalid.\n" $, errout@var100 .@expr1073744059 str (@expr1073744060 ) $) $) { $return ; }
2828: }
2829:
2830: void pushback9 ( ) {
2831: $check_ $(@expr1073744061 "cppcheck-2.8/test/teststl.cpp" $, 2831 $, "struct A {\n    std::vector<int> ints;\n};\n\nvoid f()\n{\n    std::vector<int> ints;\n    A a;\n    std::vector<int>::const_iterator i = ints.begin();\n    std::vector<int>::const_iterator e = ints.end();\n    while (i != e)\n    {\n        a.ints.push_back(*i);\n        ++i;\n    }\n}" $)
2832:
|
2845:
2846: ;
2847: $if $(@expr1073744062 $!@expr1073744063 $assertEquals $(@expr1073744064 "cppcheck-2.8/test/teststl.cpp" $, 2847 $, "" $, errout@var100 .@expr1073744065 str (@expr1073744066 ) $) $) { $return ; }
2848: }
2849:
2850: void pushback10 ( ) {
2851: $check_ $(@expr1073744067 "cppcheck-2.8/test/teststl.cpp" $, 2851 $, "void f(std::vector<int> &foo)\n{\n    std::vector<int>::const_iterator it = foo.begin();\n    foo.reserve(100);\n    *it = 0;\n}" $)
2852:
|
2855:
2856: ;
2857: $if $(@expr1073744068 $!@expr1073744069 $assertEquals $(@expr1073744070 "cppcheck-2.8/test/teststl.cpp" $, 2857 $, "[test.cpp:1] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'foo' that may be invalid.\n" $, errout@var100 .@expr2247 str (@expr2248 ) $) $) { $return ; }
2858:
2859:
2860: $check_ $(@expr1073744073 "cppcheck-2.8/test/teststl.cpp" $, 2860 $, "void f()\n{\n    std::vector<int> foo;\n    foo.push_back(10);\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.reserve(123);\n    }\n}" $)
2861:
|
2868:
2869: ;
2870: $if $(@expr1073744074 $!@expr1073744075 $assertEquals $(@expr1073744076 "cppcheck-2.8/test/teststl.cpp" $, 2870 $, "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:8] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'foo' that may be invalid.\n" $, errout@var100 .@expr2247 str (@expr2248 ) $) $) { $return ; }
2871: }
2872:
2873: void pushback11 ( ) {
2874:
2875: $check_ $(@expr1073744079 "cppcheck-2.8/test/teststl.cpp" $, 2875 $, "void f() {\n    std::vector<int> ints;\n    std::vector<int>::iterator it = ints.begin();\n    if (it == ints.begin()) {\n        ints.push_back(0);\n    } else {\n        ints.insert(it,0);\n    }\n}" $)
2876:
|
2882:
2883: ;
2884: $if $(@expr1073744080 $!@expr1073744081 $assertEquals $(@expr1073744082 "cppcheck-2.8/test/teststl.cpp" $, 2884 $, "" $, errout@var100 .@expr1073744083 str (@expr1073744084 ) $) $) { $return ; }
2885: }
2886:
2887: void pushback12 ( ) {
2888:
2889: $check_ $(@expr1073744085 "cppcheck-2.8/test/teststl.cpp" $, 2889 $, "void foo(double s)\n{\n    std::vector<double> vec;\n    for( std::vector<double>::iterator it = vec.begin(); it != vec.end(); ++it )\n    {\n        vec.insert( it, s );\n        for(unsigned int i = 0; i < 42; i++)\n        {}\n        *it;\n    }\n}" $)
2890:
|
2898:
2899: ;
2900: $if $(@expr1073744086 $!@expr1073744087 $assertEquals $(@expr1073744088 "cppcheck-2.8/test/teststl.cpp" $, 2900 $, "[test.cpp:4] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:9]: (error, inconclusive) Using iterator to local container 'vec' that may be invalid.\n" $, errout@var100 .@expr1073744089 str (@expr1073744090 ) $) $) { $return
2901:
2902: ; }
2903: }
2904:
2905: void pushback13 ( ) {
2906: $check_ $(@expr1073744091 "cppcheck-2.8/test/teststl.cpp" $, 2906 $, "bool Preprocessor::ConcatenateIncludeName(SmallString<128> &FilenameBuffer, SourceLocation &End) {\n    unsigned PreAppendSize = FilenameBuffer.size();\n    FilenameBuffer.resize(PreAppendSize + CurTok.getLength());\n    const char *BufPtr = &FilenameBuffer[PreAppendSize];\n    return true;\n}" $)
2907:
|
2910:
2911: ;
2912: $if $(@expr1073744092 $!@expr1073744093 $assertEquals $(@expr1073744094 "cppcheck-2.8/test/teststl.cpp" $, 2912 $, "" $, errout@var100 .@expr1073744095 str (@expr1073744096 ) $) $) { $return ; }
2913: }
2914:
2915: void insert1 ( ) {
2916: $check_ $(@expr1073744097 "cppcheck-2.8/test/teststl.cpp" $, 2916 $, "void f(std::vector<int> &ints)\n{\n    std::vector<int>::iterator iter = ints.begin() + 5;\n    ints.insert(ints.begin(), 1);\n    ++iter;\n}" $)
2917:
|
2920:
2921: ;
2922: $if $(@expr1073744098 $!@expr1073744099 $assertEquals $(@expr1073744100 "cppcheck-2.8/test/teststl.cpp" $, 2922 $, "[test.cpp:1] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'ints' that may be invalid.\n" $, errout@var100 .@expr2277 str (@expr2278 ) $) $) { $return ; }
2923:
2924: $check_ $(@expr1073744103 "cppcheck-2.8/test/teststl.cpp" $, 2924 $, "void f()\n{\n    std::vector<int> ints;\n    std::vector<int>::iterator iter = ints.begin();\n    ints.insert(iter, 1);\n}" $)
2925:
|
2928:
2929: ;
2930: $if $(@expr1073744104 $!@expr1073744105 $assertEquals $(@expr1073744106 "cppcheck-2.8/test/teststl.cpp" $, 2930 $, "" $, errout@var100 .@expr2277 str (@expr2278 ) $) $) { $return ; }
2931:
2932: $check_ $(@expr1073744109 "cppcheck-2.8/test/teststl.cpp" $, 2932 $, "void f()\n{\n    std::vector<int> ints;\n    std::vector<int>::iterator iter = ints.begin();\n    ints.insert(iter, 1);\n    ints.insert(iter, 2);\n}" , true $)
2933:
|
2937:
2938: ;
2939: $todoAssertEquals $(@expr1073744110 "cppcheck-2.8/test/teststl.cpp" $, 2939 $, "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'ints' that may be invalid.\n" $, "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n" $, errout@var100 .@expr2277 str (@expr2278 ) $) ;
2940:
2941: $check_ $(@expr1073744113 "cppcheck-2.8/test/teststl.cpp" $, 2941 $, "void* f(const std::vector<Bar>& bars) {\n    std::vector<Bar>::iterator i = bars.begin();\n    bars.insert(Bar());\n    void* v = &i->foo;\n    return v;\n}" $)
2942:
|
2945:
2946: ;
2947: $if $(@expr1073744114 $!@expr1073744115 $assertEquals $(@expr1073744116 "cppcheck-2.8/test/teststl.cpp" $, 2947 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'bars' that may be invalid.\n" $, errout@var100 .@expr2277 str (@expr2278 ) $) $) { $return ; }
2948:
2949: $check_ $(@expr1073744119 "cppcheck-2.8/test/teststl.cpp" $, 2949 $, "Foo f(const std::vector<Bar>& bars) {\n    std::vector<Bar>::iterator i = bars.begin();\n    bars.insert(Bar());\n    return i->foo;\n}" $)
2950:
2951:
2952:
2953: ;
2954: $if $(@expr1073744120 $!@expr1073744121 $assertEquals $(@expr1073744122 "cppcheck-2.8/test/teststl.cpp" $, 2954 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'bars' that may be invalid.\n" $, errout@var100 .@expr2277 str (@expr2278 ) $) $) { $return ; }
2955:
2956: $check_ $(@expr1073744125 "cppcheck-2.8/test/teststl.cpp" $, 2956 $, "void f(const std::vector<Bar>& bars) {\n    for(std::vector<Bar>::iterator i = bars.begin(); i != bars.end(); ++i) {\n        i = bars.insert(i, bar);\n    }\n}" $)
2957:
2958:
2959:
2960: ;
2961: $if $(@expr1073744126 $!@expr1073744127 $assertEquals $(@expr1073744128 "cppcheck-2.8/test/teststl.cpp" $, 2961 $, "" $, errout@var100 .@expr2277 str (@expr2278 ) $) $) { $return ; }
2962:
2963:
2964: $check_ $(@expr1073744131 "cppcheck-2.8/test/teststl.cpp" $, 2964 $, "void f(const std::vector<Bar>& bars) {\n    for(std::vector<Bar>::iterator i = bars.begin(); i != bars.end(); ++i) {\n        bars.insert(i, bar);\n        i = bars.insert(i, bar);\n    }\n}" $)
2965:
|
2968:
2969: ;
2970: $if $(@expr1073744132 $!@expr1073744133 $assertEquals $(@expr1073744134 "cppcheck-2.8/test/teststl.cpp" $, 2970 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error, inconclusive) Using iterator to local container 'bars' that may be invalid.\n" $, errout@var100 .@expr2277 str (@expr2278 ) $) $) { $return ; }
2971:
2972:
2973: $check_ $(@expr1073744137 "cppcheck-2.8/test/teststl.cpp" $, 2973 $, "void* f(const std::vector<Bar>& bars) {\n    std::vector<Bar>::iterator i = bars.begin();\n    bars.insert(i, Bar());\n    i = bars.insert(i, Bar());\n    void* v = &i->foo;\n    return v;\n}" $)
2974:
|
2978:
2979: ;
2980: $if $(@expr1073744138 $!@expr1073744139 $assertEquals $(@expr1073744140 "cppcheck-2.8/test/teststl.cpp" $, 2980 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error, inconclusive) Using iterator to local container 'bars' that may be invalid.\n" $, errout@var100 .@expr2277 str (@expr2278 ) $) $) { $return ; }
2981: }
2982:
2983: void insert2 ( ) {
2984:
2985: $check_ $(@expr1073744143 "cppcheck-2.8/test/teststl.cpp" $, 2985 $, "void f(std::vector<int> &vec) {\n    for(std::vector<int>::iterator iter = vec.begin(); iter != vec.end(); ++iter)\n    {\n        vec.insert(iter, 0);\n        break;\n    }\n}" $)
2986:
|
2990:
2991: ;
2992: $if $(@expr1073744144 $!@expr1073744145 $assertEquals $(@expr1073744146 "cppcheck-2.8/test/teststl.cpp" $, 2992 $, "" $, errout@var100 .@expr2323 str (@expr2324 ) $) $) { $return ; }
2993:
2994: $check_ $(@expr1073744149 "cppcheck-2.8/test/teststl.cpp" $, 2994 $, "void f(std::vector<int> &vec) {\n    for(std::vector<int>::iterator iter = vec.begin(); iter != vec.end(); ++iter)\n    {\n        if (*it == 0) {\n            vec.insert(iter, 0);\n            return;\n        }\n    }\n}" $)
2995:
|
3001:
3002: ;
3003: $if $(@expr1073744150 $!@expr1073744151 $assertEquals $(@expr1073744152 "cppcheck-2.8/test/teststl.cpp" $, 3003 $, "" $, errout@var100 .@expr2323 str (@expr2324 ) $) $) { $return ; }
3004: }
3005:
3006: template < unsigned long n , typename T >
3007: static unsigned long getArraylength ( const T ( & ) [ n ] ) {
3008: return n ;
3009: }
3010:
3011: void stlBoundaries1 ( ) {
3012: const std ::@expr1073744155 string stlCont@var126 [@expr1073744156 5 ] =@expr1073744157 {@expr1073744158
3013: "list" , "set" , "multiset" , "map" , "multimap"
3014: } ;
3015:
3016: for (@expr1073744159 unsigned long i@var127 =@expr1073744160 0 ; i@var127 <@expr1073744161 getArraylength (@expr1073744162 stlCont@var126 ) ; ++@expr1073744163 i@var127 ) {
3017: $check_ $(@expr1073744164 "cppcheck-2.8/test/teststl.cpp" $, 3017 $, "void f()\n{\n    std::" +@expr1073744165 stlCont@var126 [@expr2342 i@var127 ] +@expr1073744167 "<int>::iterator it;\n    for (it = ab.begin(); it < ab.end(); ++it)\n        ;\n}" $)
3018:
|
3021:
3022: ;
3023:
3024: $assertEquals $(@expr1073744168 "cppcheck-2.8/test/teststl.cpp" $, 3024 $, "[test.cpp:4]: (error) Dangerous comparison using operator< on iterator.\n" $, errout@var100 .@expr2345 str (@expr2346 ) $, stlCont@var126 [@expr2342 i@var127 ] $) ;
3025: }
3026:
3027: $check_ $(@expr1073744172 "cppcheck-2.8/test/teststl.cpp" $, 3027 $, "void f() {\n    std::forward_list<int>::iterator it;\n    for (it = ab.begin(); ab.end() > it; ++it) {}\n}" $)
3028:
3029:
3030: ;
3031: $if $(@expr1073744173 $!@expr1073744174 $assertEquals $(@expr1073744175 "cppcheck-2.8/test/teststl.cpp" $, 3031 $, "[test.cpp:3]: (error) Dangerous comparison using operator< on iterator.\n" $, errout@var100 .@expr2345 str (@expr2346 ) $) $) { $return ; }
3032:
3033:
3034: $check_ $(@expr1073744178 "cppcheck-2.8/test/teststl.cpp" $, 3034 $, "void f() {\n    std::deque<int>::iterator it;\n    for (it = ab.begin(); ab.end() > it; ++it) {}\n}" $)
3035:
3036:
3037: ;
3038: $if $(@expr1073744179 $!@expr1073744180 $assertEquals $(@expr1073744181 "cppcheck-2.8/test/teststl.cpp" $, 3038 $, "" $, errout@var100 .@expr2345 str (@expr2346 ) $) $) { $return ; }
3039: }
3040:
3041: void stlBoundaries2 ( ) {
3042: $check_ $(@expr1073744184 "cppcheck-2.8/test/teststl.cpp" $, 3042 $, "void f()\n{\n    std::vector<std::string> files;\n    std::vector<std::string>::const_iterator it;\n    for (it = files.begin(); it < files.end(); it++) { }\n    for (it = files.begin(); it < files.end(); it++) { };\n}" $)
3043:
|
3047:
3048: ;
3049:
3050: $if $(@expr1073744185 $!@expr1073744186 $assertEquals $(@expr1073744187 "cppcheck-2.8/test/teststl.cpp" $, 3050 $, "" $, errout@var100 .@expr1073744188 str (@expr1073744189 ) $) $) { $return ; }
3051: }
3052:
3053: void stlBoundaries3 ( ) {
3054: $check_ $(@expr1073744190 "cppcheck-2.8/test/teststl.cpp" $, 3054 $, "void f()\n{\n    set<int> files;\n    set<int>::const_iterator current;\n    for (current = files.begin(); current != files.end(); ++current)\n    {\n       assert(*current < 100)\n    }\n}" $)
3055:
|
3061:
3062: ;
3063:
3064: $if $(@expr1073744191 $!@expr1073744192 $assertEquals $(@expr1073744193 "cppcheck-2.8/test/teststl.cpp" $, 3064 $, "" $, errout@var100 .@expr2370 str (@expr2371 ) $) $) { $return ; }
3065:
3066: $check_ $(@expr1073744196 "cppcheck-2.8/test/teststl.cpp" $, 3066 $, "bool f() {\n    static set<Foo>::const_iterator current;\n    return 25 > current->bar;\n}" $)
3067:
3068:
3069: ;
3070: $if $(@expr1073744197 $!@expr1073744198 $assertEquals $(@expr1073744199 "cppcheck-2.8/test/teststl.cpp" $, 3070 $, "[test.cpp:3]: (error) Invalid iterator 'current' used.\n" $, errout@var100 .@expr2370 str (@expr2371 ) $) $) { $return ; }
3071: }
3072:
3073: void stlBoundaries4 ( ) {
3074:
3075: $check_ $(@expr1073744202 "cppcheck-2.8/test/teststl.cpp" $, 3075 $, "void f() {\n    std::forward_list<std::vector<std::vector<int>>>::iterator it;\n    for (it = ab.begin(); ab.end() > it; ++it) {}\n}" $)
3076:
3077:
3078: ;
3079: $if $(@expr1073744203 $!@expr1073744204 $assertEquals $(@expr1073744205 "cppcheck-2.8/test/teststl.cpp" $, 3079 $, "[test.cpp:3]: (error) Dangerous comparison using operator< on iterator.\n" $, errout@var100 .@expr2382 str (@expr2383 ) $) $) { $return ; }
3080:
3081:
3082: $check_ $(@expr1073744208 "cppcheck-2.8/test/teststl.cpp" $, 3082 $, "void f() {\n    if (list < 0) ;\n}" $)
3083:
3084: ;
3085: $if $(@expr1073744209 $!@expr1073744210 $assertEquals $(@expr1073744211 "cppcheck-2.8/test/teststl.cpp" $, 3085 $, "" $, errout@var100 .@expr2382 str (@expr2383 ) $) $) { $return ; }
3086:
3087: $check_ $(@expr1073744214 "cppcheck-2.8/test/teststl.cpp" $, 3087 $, "void f() {\n    if (list < 0) {\n        std::forward_list<std::vector<std::vector<int>>>::iterator it;\n        for (it = ab.begin(); ab.end() > it; ++it) {}\n    }\n}" $)
3088:
|
3091:
3092: ;
3093: $if $(@expr1073744215 $!@expr1073744216 $assertEquals $(@expr1073744217 "cppcheck-2.8/test/teststl.cpp" $, 3093 $, "[test.cpp:4]: (error) Dangerous comparison using operator< on iterator.\n" $, errout@var100 .@expr2382 str (@expr2383 ) $) $) { $return ; }
3094: }
3095:
3096: void stlBoundaries5 ( ) {
3097: $check_ $(@expr1073744220 "cppcheck-2.8/test/teststl.cpp" $, 3097 $, "class iterator { int foo(); };\nint foo() {\n    iterator i;\n    return i.foo();;\n}" , true $)
3098:
3099:
3100:
3101: ;
3102: $if $(@expr1073744221 $!@expr1073744222 $assertEquals $(@expr1073744223 "cppcheck-2.8/test/teststl.cpp" $, 3102 $, "" $, errout@var100 .@expr2400 str (@expr2401 ) $) $) { $return ; }
3103:
3104: $check_ $(@expr1073744226 "cppcheck-2.8/test/teststl.cpp" $, 3104 $, "class iterator {\n    Class operator*();\n    iterator& operator++();\n    int foo();\n};\nint foo() {\n    iterator i;\n    return i.foo();;\n}" , true $)
3105:
|
3111:
3112: ;
3113: $if $(@expr1073744227 $!@expr1073744228 $assertEquals $(@expr1073744229 "cppcheck-2.8/test/teststl.cpp" $, 3113 $, "[test.cpp:8]: (error, inconclusive) Invalid iterator 'i' used.\n" $, errout@var100 .@expr2400 str (@expr2401 ) $) $) { $return ; }
3114: }
3115:
3116: void stlBoundaries6 ( ) {
3117: $check_ $(@expr1073744232 "cppcheck-2.8/test/teststl.cpp" $, 3117 $, "void foo(std::vector<int>& vec) {\n    for (Function::iterator BB : vec) {\n        for (int Inst : *BB)\n        {\n        }\n    }\n}" , true $)
3118:
|
3122:
3123: ;
3124: $if $(@expr1073744233 $!@expr1073744234 $assertEquals $(@expr1073744235 "cppcheck-2.8/test/teststl.cpp" $, 3124 $, "" $, errout@var100 .@expr1073744236 str (@expr1073744237 ) $) $) { $return ; }
3125: }
3126:
3127:
3128: void if_find ( ) {
3129:
|
3133:
3134: $check_ $(@expr1073744238 "cppcheck-2.8/test/teststl.cpp" $, 3134 $, "void f(std::set<int> s)\n{\n    if (s.find(12)) { }\n}" $)
3135:
3136:
3137: ;
3138: $if $(@expr1073744239 $!@expr1073744240 $assertEquals $(@expr1073744241 "cppcheck-2.8/test/teststl.cpp" $, 3138 $, "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3139:
3140:
3141: $check_ $(@expr1073744244 "cppcheck-2.8/test/teststl.cpp" $, 3141 $, "void f(std::set<int> *s)\n{\n    if ((*s).find(12)) { }\n}" $)
3142:
3143:
3144: ;
3145: $if $(@expr1073744245 $!@expr1073744246 $assertEquals $(@expr1073744247 "cppcheck-2.8/test/teststl.cpp" $, 3145 $, "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3146:
3147:
3148: $check_ $(@expr1073744250 "cppcheck-2.8/test/teststl.cpp" $, 3148 $, "void f(std::set<int> *s)\n{\n    if (s->find(12)) { }\n}" $)
3149:
3150:
3151: ;
3152: $if $(@expr1073744251 $!@expr1073744252 $assertEquals $(@expr1073744253 "cppcheck-2.8/test/teststl.cpp" $, 3152 $, "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3153:
3154:
3155: $check_ $(@expr1073744256 "cppcheck-2.8/test/teststl.cpp" $, 3155 $, "void f(std::set<int> *s)\n{\n    if (s[0].find(12)) { }\n}" $)
3156:
3157:
3158: ;
3159: $if $(@expr1073744257 $!@expr1073744258 $assertEquals $(@expr1073744259 "cppcheck-2.8/test/teststl.cpp" $, 3159 $, "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3160:
3161:
3162: $check_ $(@expr1073744262 "cppcheck-2.8/test/teststl.cpp" $, 3162 $, "void f(std::set<int> s [10])\n{\n    if (s[0].find(12)) { }\n}" $)
3163:
3164:
3165: ;
3166: $if $(@expr1073744263 $!@expr1073744264 $assertEquals $(@expr1073744265 "cppcheck-2.8/test/teststl.cpp" $, 3166 $, "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3167:
3168:
3169: $check_ $(@expr1073744268 "cppcheck-2.8/test/teststl.cpp" $, 3169 $, "void f(std::set<int> s [])\n{\n    if (s[0].find(12)) { }\n}" $)
3170:
3171:
3172: ;
3173: $if $(@expr1073744269 $!@expr1073744270 $assertEquals $(@expr1073744271 "cppcheck-2.8/test/teststl.cpp" $, 3173 $, "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3174:
3175:
3176: $check_ $(@expr1073744274 "cppcheck-2.8/test/teststl.cpp" $, 3176 $, "void f(std::vector<std::set<int> > s)\n{\n    if (s[0].find(12)) { }\n}" $)
3177:
3178:
3179: ;
3180: $if $(@expr1073744275 $!@expr1073744276 $assertEquals $(@expr1073744277 "cppcheck-2.8/test/teststl.cpp" $, 3180 $, "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3181:
3182:
3183: $check_ $(@expr1073744280 "cppcheck-2.8/test/teststl.cpp" $, 3183 $, "void f(std::set<int> s)\n{\n    if (a || (x = s.find(12))) { }\n}" $)
3184:
3185:
3186: ;
3187: $if $(@expr1073744281 $!@expr1073744282 $assertEquals $(@expr1073744283 "cppcheck-2.8/test/teststl.cpp" $, 3187 $, "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3188:
3189:
3190: $check_ $(@expr1073744286 "cppcheck-2.8/test/teststl.cpp" $, 3190 $, "void f(std::set<int> s)\n{\n    if (s.find(123) != s.end()) { }\n}" $)
3191:
3192:
3193: ;
3194: $if $(@expr1073744287 $!@expr1073744288 $assertEquals $(@expr1073744289 "cppcheck-2.8/test/teststl.cpp" $, 3194 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3195:
3196:
3197: $check_ $(@expr1073744292 "cppcheck-2.8/test/teststl.cpp" $, 3197 $, "void f(std::set<int> *s)\n{\n    if ((*s).find(12) != s.end()) { }\n}" $)
3198:
3199:
3200: ;
3201: $if $(@expr1073744293 $!@expr1073744294 $assertEquals $(@expr1073744295 "cppcheck-2.8/test/teststl.cpp" $, 3201 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3202:
3203:
3204: $check_ $(@expr1073744298 "cppcheck-2.8/test/teststl.cpp" $, 3204 $, "void f(std::set<int> *s)\n{\n    if (s[0].find(12) != s->end()) { }\n}" $)
3205:
3206:
3207: ;
3208: $if $(@expr1073744299 $!@expr1073744300 $assertEquals $(@expr1073744301 "cppcheck-2.8/test/teststl.cpp" $, 3208 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3209:
3210:
3211: $check_ $(@expr1073744304 "cppcheck-2.8/test/teststl.cpp" $, 3211 $, "void f(std::set<int> s [10])\n{\n    if (s[0].find(123) != s->end()) { }\n}" $)
3212:
3213:
3214: ;
3215: $if $(@expr1073744305 $!@expr1073744306 $assertEquals $(@expr1073744307 "cppcheck-2.8/test/teststl.cpp" $, 3215 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3216:
3217:
3218: $check_ $(@expr1073744310 "cppcheck-2.8/test/teststl.cpp" $, 3218 $, "void f(std::set<int> s [])\n{\n    if (s[0].find(123) != s->end()) { }\n}" $)
3219:
3220:
3221: ;
3222: $if $(@expr1073744311 $!@expr1073744312 $assertEquals $(@expr1073744313 "cppcheck-2.8/test/teststl.cpp" $, 3222 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3223:
3224:
3225: $check_ $(@expr1073744316 "cppcheck-2.8/test/teststl.cpp" $, 3225 $, "void f(std::set<int> s)\n{\n    if (a || (x = s.find(12)) != s.end()) { }\n}" $)
3226:
3227:
3228: ;
3229: $if $(@expr1073744317 $!@expr1073744318 $assertEquals $(@expr1073744319 "cppcheck-2.8/test/teststl.cpp" $, 3229 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3230:
3231:
3232: $check_ $(@expr1073744322 "cppcheck-2.8/test/teststl.cpp" $, 3232 $, "void f(std::set<Foo> s) {\n    if (s.find(12).member) { }\n}" $)
3233:
3234: ;
3235: $if $(@expr1073744323 $!@expr1073744324 $assertEquals $(@expr1073744325 "cppcheck-2.8/test/teststl.cpp" $, 3235 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3236:
3237: $check_ $(@expr1073744328 "cppcheck-2.8/test/teststl.cpp" $, 3237 $, "void f(std::set<int> s) {\n    if (auto result = s.find(123); result != s.end()) {}\n}" $)
3238:
3239: ;
3240: $if $(@expr1073744329 $!@expr1073744330 $assertEquals $(@expr1073744331 "cppcheck-2.8/test/teststl.cpp" $, 3240 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3241:
|
3246:
3247: $check_ $(@expr1073744334 "cppcheck-2.8/test/teststl.cpp" $, 3247 $, "void f()\n{\n    if (std::find(a,b,c)) { }\n}" $)
3248:
3249:
3250: ;
3251: $if $(@expr1073744335 $!@expr1073744336 $assertEquals $(@expr1073744337 "cppcheck-2.8/test/teststl.cpp" $, 3251 $, "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3252:
3253:
3254: $check_ $(@expr1073744340 "cppcheck-2.8/test/teststl.cpp" $, 3254 $, "void f()\n{\n    if (std::find(a,b,c) != c) { }\n}" $)
3255:
3256:
3257: ;
3258: $if $(@expr1073744341 $!@expr1073744342 $assertEquals $(@expr1073744343 "cppcheck-2.8/test/teststl.cpp" $, 3258 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3259:
3260:
3261: $check_ $(@expr1073744346 "cppcheck-2.8/test/teststl.cpp" $, 3261 $, "void f(std::vector<int> s)\n{\n    if (std::find(a, b, c) < d) { }\n}" $)
3262:
3263:
3264: ;
3265: $if $(@expr1073744347 $!@expr1073744348 $assertEquals $(@expr1073744349 "cppcheck-2.8/test/teststl.cpp" $, 3265 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3266:
3267:
3268: $do ${ $try ${ $check_ $(@expr1073744352 "cppcheck-2.8/test/teststl.cpp" $, 3268 $, "void f() {\n    if (()) { }\n}" $) $; $assertThrowFail $(@expr1073744353 "cppcheck-2.8/test/teststl.cpp" $, 3268 $) $; $} $catch $(@expr1073744354 $const InternalError $&@expr1073744355 $) ${ $} $catch $(@expr1073744356 $... $) ${ $assertThrowFail $(@expr1073744357 "cppcheck-2.8/test/teststl.cpp" $, 3268 $) $; $} $} $while $(@expr1073744358 $false $)
3269:
3270:
3271: ;
3272:
3273:
3274: $check_ $(@expr1073744359 "cppcheck-2.8/test/teststl.cpp" $, 3274 $, "void f() {\n    if ((std::find(a,b,c)) != b) { }\n}" $)
3275:
3276: ;
3277: $if $(@expr1073744360 $!@expr1073744361 $assertEquals $(@expr1073744362 "cppcheck-2.8/test/teststl.cpp" $, 3277 $, "" $, errout@var100 .@expr2418 str (@expr2419 ) $) $) { $return ; }
3278: }
3279:
3280: void if_str_find ( ) {
3281:
3282: $check_ $(@expr1073744365 "cppcheck-2.8/test/teststl.cpp" $, 3282 $, "void f(const std::string &s)\n{\n    if (s.find(\"abc\")) { }\n}" $)
3283:
3284:
3285: ;
3286: $if $(@expr1073744366 $!@expr1073744367 $assertEquals $(@expr1073744368 "cppcheck-2.8/test/teststl.cpp" $, 3286 $, "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3287:
3288:
3289: $check_ $(@expr1073744371 "cppcheck-2.8/test/teststl.cpp" $, 3289 $, "void f(const std::string *s)\n{\n    if ((*s).find(\"abc\")) { }\n}" $)
3290:
3291:
3292: ;
3293: $if $(@expr1073744372 $!@expr1073744373 $assertEquals $(@expr1073744374 "cppcheck-2.8/test/teststl.cpp" $, 3293 $, "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3294:
3295:
3296: $check_ $(@expr1073744377 "cppcheck-2.8/test/teststl.cpp" $, 3296 $, "void f(const std::string *s)\n{\n    if (s->find(\"abc\")) { }\n}" $)
3297:
3298:
3299: ;
3300: $if $(@expr1073744378 $!@expr1073744379 $assertEquals $(@expr1073744380 "cppcheck-2.8/test/teststl.cpp" $, 3300 $, "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3301:
3302:
3303: $check_ $(@expr1073744383 "cppcheck-2.8/test/teststl.cpp" $, 3303 $, "void f(const std::vector<std::string> &s)\n{\n    if (s[0].find(\"abc\")) { }\n}" $)
3304:
3305:
3306: ;
3307: $if $(@expr1073744384 $!@expr1073744385 $assertEquals $(@expr1073744386 "cppcheck-2.8/test/teststl.cpp" $, 3307 $, "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3308:
3309:
3310: $check_ $(@expr1073744389 "cppcheck-2.8/test/teststl.cpp" $, 3310 $, "void f(const std::string& s1, const std::string& s2)\n{\n    if ((!s1.empty()) && (0 == s1.find(s2))) { }\n}" $)
3311:
3312:
3313: ;
3314: $if $(@expr1073744390 $!@expr1073744391 $assertEquals $(@expr1073744392 "cppcheck-2.8/test/teststl.cpp" $, 3314 $, "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3315:
3316:
3317: $check_ $(@expr1073744395 "cppcheck-2.8/test/teststl.cpp" $, 3317 $, "void f(const std::string &define) {\n    if (define.find(\"=\") + 1U == define.size());\n}" $)
3318:
3319: ;
3320: $if $(@expr1073744396 $!@expr1073744397 $assertEquals $(@expr1073744398 "cppcheck-2.8/test/teststl.cpp" $, 3320 $, "" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3321:
3322: $check_ $(@expr1073744401 "cppcheck-2.8/test/teststl.cpp" $, 3322 $, "void f(std::string a, std::string b) {\n    if (a.find(\"<\") < b.find(\">\")) {}\n}" $)
3323:
3324: ;
3325: $if $(@expr1073744402 $!@expr1073744403 $assertEquals $(@expr1073744404 "cppcheck-2.8/test/teststl.cpp" $, 3325 $, "" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3326:
3327: $check_ $(@expr1073744407 "cppcheck-2.8/test/teststl.cpp" $, 3327 $, "void f(const std::string &s) {\n    if (foo(s.find(\"abc\"))) { }\n}" $)
3328:
3329: ;
3330: $if $(@expr1073744408 $!@expr1073744409 $assertEquals $(@expr1073744410 "cppcheck-2.8/test/teststl.cpp" $, 3330 $, "" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3331:
3332:
3333: $check_ $(@expr1073744413 "cppcheck-2.8/test/teststl.cpp" $, 3333 $, "void f(const std::string &s) {\n    if (s.find_first_of(\"abc\")==0) { }\n}" $)
3334:
3335: ;
3336: $if $(@expr1073744414 $!@expr1073744415 $assertEquals $(@expr1073744416 "cppcheck-2.8/test/teststl.cpp" $, 3336 $, "" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3337:
3338:
3339: $check_ $(@expr1073744419 "cppcheck-2.8/test/teststl.cpp" $, 3339 $, "int main() {\n  for (;;) {\n    std::string line = getLine();\n    if (line.find(\" GL_EXTENSIONS =\") < 12)\n      return 1;\n  }\n  return 0;\n}" $)
3340:
|
3345:
3346: ;
3347: $if $(@expr1073744420 $!@expr1073744421 $assertEquals $(@expr1073744422 "cppcheck-2.8/test/teststl.cpp" $, 3347 $, "" $, errout@var100 .@expr2545 str (@expr2546 ) $) $) { $return ; }
3348: }
3349:
3350:
3351: void size1 ( ) {
3352: const char * code@var128 ; code@var128 =@expr1073744426 "struct Fred {\n    void foo();\n    std::list<int> x;\n};\nvoid Fred::foo()\n{\n    if (x.size() == 0) {}\n}"
3353:
|
3358:
3359: ;
3360: $check_ $(@expr1073744427 "cppcheck-2.8/test/teststl.cpp" $, 3360 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3361: $if $(@expr1073744429 $!@expr1073744430 $assertEquals $(@expr1073744431 "cppcheck-2.8/test/teststl.cpp" $, 3361 $, "[test.cpp:7]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3362: $check_ $(@expr1073744434 "cppcheck-2.8/test/teststl.cpp" $, 3362 $, code@var128 $) ;
3363: $if $(@expr1073744435 $!@expr1073744436 $assertEquals $(@expr1073744437 "cppcheck-2.8/test/teststl.cpp" $, 3363 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3364:
3365: code@var128 =@expr1073744440 "std::list<int> x;\nvoid f()\n{\n    if (x.size() == 0) {}\n}"
3366:
3367:
3368:
3369: ;
3370: $check_ $(@expr1073744441 "cppcheck-2.8/test/teststl.cpp" $, 3370 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3371: $if $(@expr1073744443 $!@expr1073744444 $assertEquals $(@expr1073744445 "cppcheck-2.8/test/teststl.cpp" $, 3371 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3372: $check_ $(@expr1073744448 "cppcheck-2.8/test/teststl.cpp" $, 3372 $, code@var128 $) ;
3373: $if $(@expr1073744449 $!@expr1073744450 $assertEquals $(@expr1073744451 "cppcheck-2.8/test/teststl.cpp" $, 3373 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3374:
3375: code@var128 =@expr1073744454 "void f()\n{\n    std::list<int> x;\n    if (x.size() == 0) {}\n}"
3376:
3377:
3378:
3379: ;
3380: $check_ $(@expr1073744455 "cppcheck-2.8/test/teststl.cpp" $, 3380 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3381: $if $(@expr1073744457 $!@expr1073744458 $assertEquals $(@expr1073744459 "cppcheck-2.8/test/teststl.cpp" $, 3381 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3382: $check_ $(@expr1073744462 "cppcheck-2.8/test/teststl.cpp" $, 3382 $, code@var128 $) ;
3383: $if $(@expr1073744463 $!@expr1073744464 $assertEquals $(@expr1073744465 "cppcheck-2.8/test/teststl.cpp" $, 3383 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3384:
3385: code@var128 =@expr1073744468 "void f()\n{\n    std::list<int> x;\n    if (0 == x.size()) {}\n}"
3386:
3387:
3388:
3389: ;
3390: $check_ $(@expr1073744469 "cppcheck-2.8/test/teststl.cpp" $, 3390 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3391: $if $(@expr1073744471 $!@expr1073744472 $assertEquals $(@expr1073744473 "cppcheck-2.8/test/teststl.cpp" $, 3391 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3392: $check_ $(@expr1073744476 "cppcheck-2.8/test/teststl.cpp" $, 3392 $, code@var128 $) ;
3393: $if $(@expr1073744477 $!@expr1073744478 $assertEquals $(@expr1073744479 "cppcheck-2.8/test/teststl.cpp" $, 3393 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3394:
3395: code@var128 =@expr1073744482 "void f()\n{\n    std::list<int> x;\n    if (x.size() != 0) {}\n}"
3396:
3397:
3398:
3399: ;
3400: $check_ $(@expr1073744483 "cppcheck-2.8/test/teststl.cpp" $, 3400 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3401: $if $(@expr1073744485 $!@expr1073744486 $assertEquals $(@expr1073744487 "cppcheck-2.8/test/teststl.cpp" $, 3401 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3402: $check_ $(@expr1073744490 "cppcheck-2.8/test/teststl.cpp" $, 3402 $, code@var128 $) ;
3403: $if $(@expr1073744491 $!@expr1073744492 $assertEquals $(@expr1073744493 "cppcheck-2.8/test/teststl.cpp" $, 3403 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3404:
3405: code@var128 =@expr1073744496 "void f()\n{\n    std::list<int> x;\n    if (0 != x.size()) {}\n}"
3406:
3407:
3408:
3409: ;
3410: $check_ $(@expr1073744497 "cppcheck-2.8/test/teststl.cpp" $, 3410 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3411: $if $(@expr1073744499 $!@expr1073744500 $assertEquals $(@expr1073744501 "cppcheck-2.8/test/teststl.cpp" $, 3411 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3412: $check_ $(@expr1073744504 "cppcheck-2.8/test/teststl.cpp" $, 3412 $, code@var128 $) ;
3413: $if $(@expr1073744505 $!@expr1073744506 $assertEquals $(@expr1073744507 "cppcheck-2.8/test/teststl.cpp" $, 3413 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3414:
3415: code@var128 =@expr1073744510 "void f()\n{\n    std::list<int> x;\n    if (x.size() > 0) {}\n}"
3416:
3417:
3418:
3419: ;
3420: $check_ $(@expr1073744511 "cppcheck-2.8/test/teststl.cpp" $, 3420 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3421: $if $(@expr1073744513 $!@expr1073744514 $assertEquals $(@expr1073744515 "cppcheck-2.8/test/teststl.cpp" $, 3421 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3422: $check_ $(@expr1073744518 "cppcheck-2.8/test/teststl.cpp" $, 3422 $, code@var128 $) ;
3423: $if $(@expr1073744519 $!@expr1073744520 $assertEquals $(@expr1073744521 "cppcheck-2.8/test/teststl.cpp" $, 3423 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3424:
3425: code@var128 =@expr1073744524 "void f()\n{\n    std::list<int> x;\n    if (0 < x.size()) {}\n}"
3426:
3427:
3428:
3429: ;
3430: $check_ $(@expr1073744525 "cppcheck-2.8/test/teststl.cpp" $, 3430 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3431: $if $(@expr1073744527 $!@expr1073744528 $assertEquals $(@expr1073744529 "cppcheck-2.8/test/teststl.cpp" $, 3431 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3432: $check_ $(@expr1073744532 "cppcheck-2.8/test/teststl.cpp" $, 3432 $, code@var128 $) ;
3433: $if $(@expr1073744533 $!@expr1073744534 $assertEquals $(@expr1073744535 "cppcheck-2.8/test/teststl.cpp" $, 3433 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3434:
3435: code@var128 =@expr1073744538 "void f()\n{\n    std::list<int> x;\n    if (x.size() >= 1) {}\n}"
3436:
3437:
3438:
3439: ;
3440: $check_ $(@expr1073744539 "cppcheck-2.8/test/teststl.cpp" $, 3440 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3441: $if $(@expr1073744541 $!@expr1073744542 $assertEquals $(@expr1073744543 "cppcheck-2.8/test/teststl.cpp" $, 3441 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3442: $check_ $(@expr1073744546 "cppcheck-2.8/test/teststl.cpp" $, 3442 $, code@var128 $) ;
3443: $if $(@expr1073744547 $!@expr1073744548 $assertEquals $(@expr1073744549 "cppcheck-2.8/test/teststl.cpp" $, 3443 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3444:
3445: code@var128 =@expr1073744552 "void f()\n{\n    std::list<int> x;\n    if (x.size() < 1) {}\n}"
3446:
3447:
3448:
3449: ;
3450: $check_ $(@expr1073744553 "cppcheck-2.8/test/teststl.cpp" $, 3450 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3451: $if $(@expr1073744555 $!@expr1073744556 $assertEquals $(@expr1073744557 "cppcheck-2.8/test/teststl.cpp" $, 3451 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3452: $check_ $(@expr1073744560 "cppcheck-2.8/test/teststl.cpp" $, 3452 $, code@var128 $) ;
3453: $if $(@expr1073744561 $!@expr1073744562 $assertEquals $(@expr1073744563 "cppcheck-2.8/test/teststl.cpp" $, 3453 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3454:
3455: code@var128 =@expr1073744566 "void f()\n{\n    std::list<int> x;\n    if (1 <= x.size()) {}\n}"
3456:
3457:
3458:
3459: ;
3460: $check_ $(@expr1073744567 "cppcheck-2.8/test/teststl.cpp" $, 3460 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3461: $if $(@expr1073744569 $!@expr1073744570 $assertEquals $(@expr1073744571 "cppcheck-2.8/test/teststl.cpp" $, 3461 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3462: $check_ $(@expr1073744574 "cppcheck-2.8/test/teststl.cpp" $, 3462 $, code@var128 $) ;
3463: $if $(@expr1073744575 $!@expr1073744576 $assertEquals $(@expr1073744577 "cppcheck-2.8/test/teststl.cpp" $, 3463 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3464:
3465: code@var128 =@expr1073744580 "void f()\n{\n    std::list<int> x;\n    if (1 > x.size()) {}\n}"
3466:
3467:
3468:
3469: ;
3470: $check_ $(@expr1073744581 "cppcheck-2.8/test/teststl.cpp" $, 3470 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3471: $if $(@expr1073744583 $!@expr1073744584 $assertEquals $(@expr1073744585 "cppcheck-2.8/test/teststl.cpp" $, 3471 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3472: $check_ $(@expr1073744588 "cppcheck-2.8/test/teststl.cpp" $, 3472 $, code@var128 $) ;
3473: $if $(@expr1073744589 $!@expr1073744590 $assertEquals $(@expr1073744591 "cppcheck-2.8/test/teststl.cpp" $, 3473 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3474:
3475: code@var128 =@expr1073744594 "void f()\n{\n    std::list<int> x;\n    if (x.size()) {}\n}"
3476:
3477:
3478:
3479: ;
3480: $check_ $(@expr1073744595 "cppcheck-2.8/test/teststl.cpp" $, 3480 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3481: $if $(@expr1073744597 $!@expr1073744598 $assertEquals $(@expr1073744599 "cppcheck-2.8/test/teststl.cpp" $, 3481 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3482: $check_ $(@expr1073744602 "cppcheck-2.8/test/teststl.cpp" $, 3482 $, code@var128 $) ;
3483: $if $(@expr1073744603 $!@expr1073744604 $assertEquals $(@expr1073744605 "cppcheck-2.8/test/teststl.cpp" $, 3483 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3484:
3485: code@var128 =@expr1073744608 "void f()\n{\n    std::list<int> x;\n    if (!x.size()) {}\n}"
3486:
3487:
3488:
3489: ;
3490: $check_ $(@expr1073744609 "cppcheck-2.8/test/teststl.cpp" $, 3490 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3491: $if $(@expr1073744611 $!@expr1073744612 $assertEquals $(@expr1073744613 "cppcheck-2.8/test/teststl.cpp" $, 3491 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3492: $check_ $(@expr1073744616 "cppcheck-2.8/test/teststl.cpp" $, 3492 $, code@var128 $) ;
3493: $if $(@expr1073744617 $!@expr1073744618 $assertEquals $(@expr1073744619 "cppcheck-2.8/test/teststl.cpp" $, 3493 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3494:
3495: $check_ $(@expr1073744622 "cppcheck-2.8/test/teststl.cpp" $, 3495 $, "void f()\n{\n    std::list<int> x;\n    fun(x.size());\n}" $)
3496:
3497:
3498:
3499: ;
3500: $if $(@expr1073744623 $!@expr1073744624 $assertEquals $(@expr1073744625 "cppcheck-2.8/test/teststl.cpp" $, 3500 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3501:
3502: code@var128 =@expr1073744628 "void f()\n{\n    std::list<int> x;\n    fun(!x.size());\n}"
3503:
3504:
3505:
3506: ;
3507: $check_ $(@expr1073744629 "cppcheck-2.8/test/teststl.cpp" $, 3507 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3508: $if $(@expr1073744631 $!@expr1073744632 $assertEquals $(@expr1073744633 "cppcheck-2.8/test/teststl.cpp" $, 3508 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3509: $check_ $(@expr1073744636 "cppcheck-2.8/test/teststl.cpp" $, 3509 $, code@var128 $) ;
3510: $if $(@expr1073744637 $!@expr1073744638 $assertEquals $(@expr1073744639 "cppcheck-2.8/test/teststl.cpp" $, 3510 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3511:
3512: code@var128 =@expr1073744642 "void f()\n{\n    std::list<int> x;\n    fun(a && x.size());\n}"
3513:
3514:
3515:
3516: ;
3517: $check_ $(@expr1073744643 "cppcheck-2.8/test/teststl.cpp" $, 3517 $, code@var128 , false , Standards ::@expr2604 CPP03@expr2601 $) ;
3518: $if $(@expr1073744645 $!@expr1073744646 $assertEquals $(@expr1073744647 "cppcheck-2.8/test/teststl.cpp" $, 3518 $, "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3519: $check_ $(@expr1073744650 "cppcheck-2.8/test/teststl.cpp" $, 3519 $, code@var128 $) ;
3520: $if $(@expr1073744651 $!@expr1073744652 $assertEquals $(@expr1073744653 "cppcheck-2.8/test/teststl.cpp" $, 3520 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3521:
3522: $check_ $(@expr1073744656 "cppcheck-2.8/test/teststl.cpp" $, 3522 $, "void f() {\n    std::list<int> x;\n    fun(width % x.size() != 0);\n}" $)
3523:
3524:
3525: ;
3526: $if $(@expr1073744657 $!@expr1073744658 $assertEquals $(@expr1073744659 "cppcheck-2.8/test/teststl.cpp" $, 3526 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3527:
3528:
3529: $check_ $(@expr1073744662 "cppcheck-2.8/test/teststl.cpp" $, 3529 $, "void f() {\n    std::list<int> x;\n    if (foo + 1 > x.size()) {}\n}" $)
3530:
3531:
3532: ;
3533: $if $(@expr1073744663 $!@expr1073744664 $assertEquals $(@expr1073744665 "cppcheck-2.8/test/teststl.cpp" $, 3533 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3534: $check_ $(@expr1073744668 "cppcheck-2.8/test/teststl.cpp" $, 3534 $, "void f() {\n    std::list<int> x;\n    if (x.size() < 1 + foo) {}\n}" $)
3535:
3536:
3537: ;
3538: $if $(@expr1073744669 $!@expr1073744670 $assertEquals $(@expr1073744671 "cppcheck-2.8/test/teststl.cpp" $, 3538 $, "" $, errout@var100 .@expr2608 str (@expr2609 ) $) $) { $return ; }
3539: }
3540:
3541: void size2 ( ) {
3542: const char * code@var129 ; code@var129 =@expr1073744675 "struct Fred {\n    std::list<int> x;\n};\nstruct Wilma {\n    Fred f;\n    void foo();\n};\nvoid Wilma::foo()\n{\n    if (f.x.size() == 0) {}\n}"
3543:
|
3551:
3552: ;
3553: $check_ $(@expr1073744676 "cppcheck-2.8/test/teststl.cpp" $, 3553 $, code@var129 , false , Standards ::@expr1073744677 CPP03@expr1073744674 $) ;
3554: $if $(@expr1073744678 $!@expr1073744679 $assertEquals $(@expr1073744680 "cppcheck-2.8/test/teststl.cpp" $, 3554 $, "[test.cpp:10]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2857 str (@expr2858 ) $) $) { $return ; }
3555: $check_ $(@expr1073744683 "cppcheck-2.8/test/teststl.cpp" $, 3555 $, code@var129 $) ;
3556: $if $(@expr1073744684 $!@expr1073744685 $assertEquals $(@expr1073744686 "cppcheck-2.8/test/teststl.cpp" $, 3556 $, "" $, errout@var100 .@expr2857 str (@expr2858 ) $) $) { $return ; }
3557: }
3558:
3559: void size3 ( ) {
3560: const char * code@var130 ; code@var130 =@expr1073744690 "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nZzz * zzz;\nint main() {\n    if (zzz->x.size() > 0) { }\n}"
3561:
|
3569:
3570: ;
3571: $check_ $(@expr1073744691 "cppcheck-2.8/test/teststl.cpp" $, 3571 $, code@var130 , false , Standards ::@expr2868 CPP03@expr2865 $) ;
3572: $if $(@expr1073744693 $!@expr1073744694 $assertEquals $(@expr1073744695 "cppcheck-2.8/test/teststl.cpp" $, 3572 $, "[test.cpp:10]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2872 str (@expr2873 ) $) $) { $return ; }
3573:
3574: code@var130 =@expr1073744698 "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nint main() {\n    Zzz * zzz;\n    if (zzz->x.size() > 0) { }\n}"
3575:
|
3583:
3584: ;
3585: $check_ $(@expr1073744699 "cppcheck-2.8/test/teststl.cpp" $, 3585 $, code@var130 , false , Standards ::@expr2868 CPP03@expr2865 $) ;
3586: $if $(@expr1073744701 $!@expr1073744702 $assertEquals $(@expr1073744703 "cppcheck-2.8/test/teststl.cpp" $, 3586 $, "[test.cpp:10]: (performance) Possible inefficient checking for 'x' emptiness.\n" $, errout@var100 .@expr2872 str (@expr2873 ) $) $) { $return ; }
3587: $check_ $(@expr1073744706 "cppcheck-2.8/test/teststl.cpp" $, 3587 $, code@var130 $) ;
3588: $if $(@expr1073744707 $!@expr1073744708 $assertEquals $(@expr1073744709 "cppcheck-2.8/test/teststl.cpp" $, 3588 $, "" $, errout@var100 .@expr2872 str (@expr2873 ) $) $) { $return ; }
3589: }
3590:
3591: void size4 ( ) {
3592: $check_ $(@expr1073744712 "cppcheck-2.8/test/teststl.cpp" $, 3592 $, "void f(std::vector<int> &v) {\n    if (v.size() > 0U) {}\n}" $)
3593:
3594: ;
3595: $if $(@expr1073744713 $!@expr1073744714 $assertEquals $(@expr1073744715 "cppcheck-2.8/test/teststl.cpp" $, 3595 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3596:
3597: $check_ $(@expr1073744718 "cppcheck-2.8/test/teststl.cpp" $, 3597 $, "void f(std::deque<int> &v) {\n    if (v.size() > 0U) {}\n}" $)
3598:
3599: ;
3600: $if $(@expr1073744719 $!@expr1073744720 $assertEquals $(@expr1073744721 "cppcheck-2.8/test/teststl.cpp" $, 3600 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3601:
3602: $check_ $(@expr1073744724 "cppcheck-2.8/test/teststl.cpp" $, 3602 $, "void f(std::array<int,3> &a) {\n    if (a.size() > 0U) {}\n}" $)
3603:
3604: ;
3605: $if $(@expr1073744725 $!@expr1073744726 $assertEquals $(@expr1073744727 "cppcheck-2.8/test/teststl.cpp" $, 3605 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3606: }
3607:
3608: void redundantCondition1 ( ) {
3609: $check_ $(@expr1073744730 "cppcheck-2.8/test/teststl.cpp" $, 3609 $, "void f(string haystack)\n{\n    if (haystack.find(needle) != haystack.end())\n        haystack.remove(needle);}" $)
3610:
3611:
3612:
3613: ;
3614: $if $(@expr1073744731 $!@expr1073744732 $assertEquals $(@expr1073744733 "cppcheck-2.8/test/teststl.cpp" $, 3614 $, "[test.cpp:3]: (style) Redundant checking of STL container element existence before removing it.\n" $, errout@var100 .@expr1073744734 str (@expr1073744735 ) $) $) { $return ; }
3615: }
3616:
3617: void missingInnerComparison1 ( ) {
3618: $check_ $(@expr1073744736 "cppcheck-2.8/test/teststl.cpp" $, 3618 $, "void f(std::set<int> &ints) {\n    for (std::set<int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        if (a) {\n            it++;\n        }\n    }\n}" $)
3619:
|
3623:
3624: ;
3625: $if $(@expr1073744737 $!@expr1073744738 $assertEquals $(@expr1073744739 "cppcheck-2.8/test/teststl.cpp" $, 3625 $, "[test.cpp:4] -> [test.cpp:2]: (warning) Missing bounds check for extra iterator increment in loop.\n" $, errout@var100 .@expr2916 str (@expr2917 ) $) $) { $return ; }
3626:
3627: $check_ $(@expr1073744742 "cppcheck-2.8/test/teststl.cpp" $, 3627 $, "void f(std::map<int,int> &ints) {\n    for (std::map<int,int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        ++it->second;\n    }\n}" $)
3628:
3629:
3630:
3631: ;
3632: $if $(@expr1073744743 $!@expr1073744744 $assertEquals $(@expr1073744745 "cppcheck-2.8/test/teststl.cpp" $, 3632 $, "" $, errout@var100 .@expr2916 str (@expr2917 ) $) $) { $return ; }
3633:
3634: $check_ $(@expr1073744748 "cppcheck-2.8/test/teststl.cpp" $, 3634 $, "void f(const std::vector<std::string> &v) {\n    for(std::vector<std::string>::const_iterator it = v.begin(); it != v.end(); ++it) {\n        if(it+2 != v.end())\n        {\n            ++it;\n            ++it;\n        }\n    }\n}" $)
3635:
|
3641:
3642: ;
3643: $if $(@expr1073744749 $!@expr1073744750 $assertEquals $(@expr1073744751 "cppcheck-2.8/test/teststl.cpp" $, 3643 $, "" $, errout@var100 .@expr2916 str (@expr2917 ) $) $) { $return ; }
3644: }
3645:
3646: void missingInnerComparison2 ( ) {
3647: $check_ $(@expr1073744754 "cppcheck-2.8/test/teststl.cpp" $, 3647 $, "void f(std::set<int> &ints) {\n    for (std::set<int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        if (a) {\n            it++;\n            if (it == ints.end())\n                return;\n        }\n    }\n}" $)
3648:
|
3654:
3655: ;
3656: $if $(@expr1073744755 $!@expr1073744756 $assertEquals $(@expr1073744757 "cppcheck-2.8/test/teststl.cpp" $, 3656 $, "" $, errout@var100 .@expr1073744758 str (@expr1073744759 ) $) $) { $return ; }
3657: }
3658:
3659: void missingInnerComparison3 ( ) {
3660: $check_ $(@expr1073744760 "cppcheck-2.8/test/teststl.cpp" $, 3660 $, "void f(std::set<int> &ints) {\n    for (std::set<int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        for (std::set<int>::iterator it = ints2.begin(); it != ints2.end(); ++it)\n        { }\n    }\n}" $)
3661:
|
3664:
3665: ;
3666: $if $(@expr1073744761 $!@expr1073744762 $assertEquals $(@expr1073744763 "cppcheck-2.8/test/teststl.cpp" $, 3666 $, "" $, errout@var100 .@expr1073744764 str (@expr1073744765 ) $) $) { $return ; }
3667: }
3668:
3669: void missingInnerComparison4 ( ) {
3670: $check_ $(@expr1073744766 "cppcheck-2.8/test/teststl.cpp" $, 3670 $, "function f1(std::list<int> &l1) {\n    for(std::list<int>::iterator i = l1.begin(); i != l1.end(); i++) {\n        if (*i == 44) {\n            l1.insert(++i, 55);\n            break;\n        }\n    }\n}" $)
3671:
|
3676:
3677: ;
3678: $if $(@expr1073744767 $!@expr1073744768 $assertEquals $(@expr1073744769 "cppcheck-2.8/test/teststl.cpp" $, 3678 $, "" $, errout@var100 .@expr2946 str (@expr2947 ) $) $) { $return ; }
3679:
3680: $check_ $(@expr1073744772 "cppcheck-2.8/test/teststl.cpp" $, 3680 $, "function f1(std::list<int> &l1) {\n    for(std::list<int>::iterator i = l1.begin(); i != l1.end(); i++) {\n        if (*i == 44) {\n            l1.insert(++i, 55);\n            return;\n        }\n    }\n}" $)
3681:
|
3686:
3687: ;
3688: $if $(@expr1073744773 $!@expr1073744774 $assertEquals $(@expr1073744775 "cppcheck-2.8/test/teststl.cpp" $, 3688 $, "" $, errout@var100 .@expr2946 str (@expr2947 ) $) $) { $return ; }
3689: }
3690:
3691: void missingInnerComparison5 ( ) {
3692: $check_ $(@expr1073744778 "cppcheck-2.8/test/teststl.cpp" $, 3692 $, "void f() {\n    for(it = map1.begin(); it != map1.end(); it++) {\n        str[i++] = (*it).first;\n    }\n}" $)
3693:
3694:
3695:
3696: ;
3697: $if $(@expr1073744779 $!@expr1073744780 $assertEquals $(@expr1073744781 "cppcheck-2.8/test/teststl.cpp" $, 3697 $, "" $, errout@var100 .@expr1073744782 str (@expr1073744783 ) $) $) { $return ; }
3698: }
3699:
3700: void missingInnerComparison6 ( ) {
3701: $check_ $(@expr1073744784 "cppcheck-2.8/test/teststl.cpp" $, 3701 $, "void f(std::string &s) {\n    for(string::iterator it = s.begin(); it != s.end(); it++) {\n        it = s.insert(++it, 0);\n    }\n}" $)
3702:
3703:
3704:
3705: ;
3706: $if $(@expr1073744785 $!@expr1073744786 $assertEquals $(@expr1073744787 "cppcheck-2.8/test/teststl.cpp" $, 3706 $, "" $, errout@var100 .@expr1073744788 str (@expr1073744789 ) $) $) { $return ; }
3707: }
3708:
3709: void cstr ( ) {
3710: $check_ $(@expr1073744790 "cppcheck-2.8/test/teststl.cpp" $, 3710 $, "void f() {\n    std::string errmsg;\n    throw errmsg.c_str();\n}" $)
3711:
3712:
3713: ;
3714: $if $(@expr1073744791 $!@expr1073744792 $assertEquals $(@expr1073744793 "cppcheck-2.8/test/teststl.cpp" $, 3714 $, "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after throwing exception.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3715:
3716: $check_ $(@expr1073744796 "cppcheck-2.8/test/teststl.cpp" $, 3716 $, "const char *get_msg() {\n    std::string errmsg;\n    return errmsg.c_str();\n}" $)
3717:
3718:
3719: ;
3720: $if $(@expr1073744797 $!@expr1073744798 $assertEquals $(@expr1073744799 "cppcheck-2.8/test/teststl.cpp" $, 3720 $, "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3721:
3722: $check_ $(@expr1073744802 "cppcheck-2.8/test/teststl.cpp" $, 3722 $, "const char *get_msg() {\n    std::ostringstream errmsg;\n    return errmsg.str().c_str();\n}" $)
3723:
3724:
3725: ;
3726: $if $(@expr1073744803 $!@expr1073744804 $assertEquals $(@expr1073744805 "cppcheck-2.8/test/teststl.cpp" $, 3726 $, "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3727:
3728: $check_ $(@expr1073744808 "cppcheck-2.8/test/teststl.cpp" $, 3728 $, "const char *get_msg() {\n    std::string errmsg;\n    return std::string(\"ERROR: \" + errmsg).c_str();\n}" $)
3729:
3730:
3731: ;
3732: $if $(@expr1073744809 $!@expr1073744810 $assertEquals $(@expr1073744811 "cppcheck-2.8/test/teststl.cpp" $, 3732 $, "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3733:
3734: $check_ $(@expr1073744814 "cppcheck-2.8/test/teststl.cpp" $, 3734 $, "const char *get_msg() {\n    std::string errmsg;\n    return (\"ERROR: \" + errmsg).c_str();\n}" $)
3735:
3736:
3737: ;
3738: $if $(@expr1073744815 $!@expr1073744816 $assertEquals $(@expr1073744817 "cppcheck-2.8/test/teststl.cpp" $, 3738 $, "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3739:
3740: $check_ $(@expr1073744820 "cppcheck-2.8/test/teststl.cpp" $, 3740 $, "const char *get_msg() {\n    std::string errmsg;\n    return (\"ERROR: \" + std::string(\"crash me\")).c_str();\n}" $)
3741:
3742:
3743: ;
3744: $if $(@expr1073744821 $!@expr1073744822 $assertEquals $(@expr1073744823 "cppcheck-2.8/test/teststl.cpp" $, 3744 $, "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3745:
3746: $check_ $(@expr1073744826 "cppcheck-2.8/test/teststl.cpp" $, 3746 $, "void f() {\n    std::ostringstream errmsg;\n    const char *c = errmsg.str().c_str();\n}" $)
3747:
3748:
3749: ;
3750: $if $(@expr1073744827 $!@expr1073744828 $assertEquals $(@expr1073744829 "cppcheck-2.8/test/teststl.cpp" $, 3750 $, "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3751:
3752: $check_ $(@expr1073744832 "cppcheck-2.8/test/teststl.cpp" $, 3752 $, "std::string f();\n\nvoid foo() {\n    const char *c = f().c_str();\n}" $)
3753:
3754:
3755:
3756: ;
3757: $if $(@expr1073744833 $!@expr1073744834 $assertEquals $(@expr1073744835 "cppcheck-2.8/test/teststl.cpp" $, 3757 $, "[test.cpp:4]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3758:
3759: $check_ $(@expr1073744838 "cppcheck-2.8/test/teststl.cpp" $, 3759 $, "class Foo {\n    const char *f();\n};\nconst char *Foo::f() {\n    std::string s;\n    return s.c_str();\n}" $)
3760:
|
3764:
3765: ;
3766: $if $(@expr1073744839 $!@expr1073744840 $assertEquals $(@expr1073744841 "cppcheck-2.8/test/teststl.cpp" $, 3766 $, "[test.cpp:6]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3767:
3768: $check_ $(@expr1073744844 "cppcheck-2.8/test/teststl.cpp" $, 3768 $, "class Foo {\n    std::string GetVal() const;\n};\nconst char *f() {\n    Foo f;\n    return f.GetVal().c_str();\n}" $)
3769:
|
3773:
3774: ;
3775: $if $(@expr1073744845 $!@expr1073744846 $assertEquals $(@expr1073744847 "cppcheck-2.8/test/teststl.cpp" $, 3775 $, "[test.cpp:6]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3776:
3777: $check_ $(@expr1073744850 "cppcheck-2.8/test/teststl.cpp" $, 3777 $, "const char* foo() {\n    static std::string text;\n    text = \"hello world\\n\";\n    return text.c_str();\n}" $)
3778:
3779:
3780:
3781: ;
3782: $if $(@expr1073744851 $!@expr1073744852 $assertEquals $(@expr1073744853 "cppcheck-2.8/test/teststl.cpp" $, 3782 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3783:
3784:
3785: $check_ $(@expr1073744856 "cppcheck-2.8/test/teststl.cpp" $, 3785 $, "std::string get_msg() {\n    std::string errmsg;\n    return errmsg.c_str();\n}" $)
3786:
3787:
3788: ;
3789: $if $(@expr1073744857 $!@expr1073744858 $assertEquals $(@expr1073744859 "cppcheck-2.8/test/teststl.cpp" $, 3789 $, "[test.cpp:3]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3790:
3791: $check_ $(@expr1073744862 "cppcheck-2.8/test/teststl.cpp" $, 3791 $, "const std::string& get_msg() {\n    std::string errmsg;\n    return errmsg.c_str();\n}" $)
3792:
3793:
3794: ;
3795: $if $(@expr1073744863 $!@expr1073744864 $assertEquals $(@expr1073744865 "cppcheck-2.8/test/teststl.cpp" $, 3795 $, "[test.cpp:3]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3796:
3797: $check_ $(@expr1073744868 "cppcheck-2.8/test/teststl.cpp" $, 3797 $, "class Foo {\n    std::string GetVal() const;\n};\nstd::string f() {\n    Foo f;\n    return f.GetVal().c_str();\n}" $)
3798:
|
3802:
3803: ;
3804: $if $(@expr1073744869 $!@expr1073744870 $assertEquals $(@expr1073744871 "cppcheck-2.8/test/teststl.cpp" $, 3804 $, "[test.cpp:6]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3805:
3806: $check_ $(@expr1073744874 "cppcheck-2.8/test/teststl.cpp" $, 3806 $, "std::string get_msg() {\n    std::string errmsg;\n    return errmsg;\n}" $)
3807:
3808:
3809: ;
3810: $if $(@expr1073744875 $!@expr1073744876 $assertEquals $(@expr1073744877 "cppcheck-2.8/test/teststl.cpp" $, 3810 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3811:
3812: $check_ $(@expr1073744880 "cppcheck-2.8/test/teststl.cpp" $, 3812 $, "std::string get_msg() {\n    MyStringClass errmsg;\n    return errmsg.c_str();\n}" $)
3813:
3814:
3815: ;
3816: $if $(@expr1073744881 $!@expr1073744882 $assertEquals $(@expr1073744883 "cppcheck-2.8/test/teststl.cpp" $, 3816 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3817:
3818: $check_ $(@expr1073744886 "cppcheck-2.8/test/teststl.cpp" $, 3818 $, "void Foo1(const std::string& str) {}\nvoid Foo2(const char* c, const std::string str) {}\nvoid Foo3(std::string& rstr) {}\nvoid Foo4(std::string str, const std::string& str) {}\nvoid Bar() {\n    std::string str = \"bar\";\n    std::stringstream ss(\"foo\");\n    Foo1(str);\n    Foo1(str.c_str());\n    Foo2(str.c_str(), str);\n    Foo2(str.c_str(), str.c_str());\n    Foo3(str.c_str());\n    Foo4(str, str);\n    Foo4(str.c_str(), str);\n    Foo4(str, str.c_str());\n    Foo4(ss.str(), ss.str().c_str());\n    Foo4(str.c_str(), str.c_str());\n}" $)
3819:
|
3834:
3835: ;
3836:
3837: $if $(@expr1073744887 $!@expr1073744888 $assertEquals $(@expr1073744889 "cppcheck-2.8/test/teststl.cpp" $, 3837 $, "[test.cpp:9]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:11]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n[test.cpp:14]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:15]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n[test.cpp:16]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n[test.cpp:17]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:17]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return
3838:
|
3842:
3843: ; }
3844:
3845: $check_ $(@expr1073744892 "cppcheck-2.8/test/teststl.cpp" $, 3845 $, "void Foo1(const std::string& str) {}\nvoid Foo2(char* c, const std::string str) {}\nvoid Bar() {\n    std::string str = \"bar\";\n    Foo1(str, foo);\n    Foo2(str.c_str());\n}" $)
3846:
|
3850:
3851: ;
3852: $if $(@expr1073744893 $!@expr1073744894 $assertEquals $(@expr1073744895 "cppcheck-2.8/test/teststl.cpp" $, 3852 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3853:
3854: $check_ $(@expr1073744898 "cppcheck-2.8/test/teststl.cpp" $, 3854 $, "struct Foo {\n    void func(std::string str) const {}\n    static void sfunc(std::string str) {}\n};\nvoid func(std::string str) {}\nvoid Bar() {\n    std::string str = \"bar\";\n    Foo foo;\n    func(str.c_str());\n    Foo::sfunc(str.c_str());\n    foo.func(str.c_str());\n}" $)
3855:
|
3864:
3865: ;
3866: $if $(@expr1073744899 $!@expr1073744900 $assertEquals $(@expr1073744901 "cppcheck-2.8/test/teststl.cpp" $, 3866 $, "[test.cpp:9]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:10]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:11]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return
3867:
3868:
3869: ; }
3870:
3871: $check_ $(@expr1073744904 "cppcheck-2.8/test/teststl.cpp" $, 3871 $, "void svgFile(const std::string &content, const std::string &fileName, const double end = 1000., const double start = 0.);\nvoid Bar(std::string filename) {\n    std::string str = \"bar\";\n    std::ofstream svgFile(filename.c_str(), std::ios::trunc);\n    svgFile << \"test\";\n}" $)
3872:
|
3875:
3876: ;
3877: $if $(@expr1073744905 $!@expr1073744906 $assertEquals $(@expr1073744907 "cppcheck-2.8/test/teststl.cpp" $, 3877 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3878:
3879: $check_ $(@expr1073744910 "cppcheck-2.8/test/teststl.cpp" $, 3879 $, "void Foo(const char* p) {}\nvoid Foo(const std::string& str) {Foo(str.c_str());}\nvoid Bar() {\n    std::string str = \"bar\";\n    Foo(str);\n    Foo(str.c_str());\n}" $)
3880:
|
3884:
3885: ;
3886: $if $(@expr1073744911 $!@expr1073744912 $assertEquals $(@expr1073744913 "cppcheck-2.8/test/teststl.cpp" $, 3886 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3887:
3888: $check_ $(@expr1073744916 "cppcheck-2.8/test/teststl.cpp" $, 3888 $, "int atoi(const std::string& str) {\n    return atoi(str.c_str());\n}" $)
3889:
3890: ;
3891: $if $(@expr1073744917 $!@expr1073744918 $assertEquals $(@expr1073744919 "cppcheck-2.8/test/teststl.cpp" $, 3891 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3892:
3893: $check_ $(@expr1073744922 "cppcheck-2.8/test/teststl.cpp" $, 3893 $, "std::string hello()\n{\n     return \"hello\";\n}\n\nconst char *f()\n{\n    return hello().c_str();\n}" $)
3894:
|
3900:
3901: ;
3902: $if $(@expr1073744923 $!@expr1073744924 $assertEquals $(@expr1073744925 "cppcheck-2.8/test/teststl.cpp" $, 3902 $, "[test.cpp:8]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3903:
3904: $check_ $(@expr1073744928 "cppcheck-2.8/test/teststl.cpp" $, 3904 $, "class Fred {\n    std::string hello();\n    const char *f();\n};\nstd::string Fred::hello()\n{\n     return \"hello\";\n}\nconst char *Fred::f()\n{\n    return hello().c_str();\n}" $)
3905:
|
3914:
3915: ;
3916: $if $(@expr1073744929 $!@expr1073744930 $assertEquals $(@expr1073744931 "cppcheck-2.8/test/teststl.cpp" $, 3916 $, "[test.cpp:11]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3917:
3918:
3919: $check_ $(@expr1073744934 "cppcheck-2.8/test/teststl.cpp" $, 3919 $, "void a(const std::string &str);\n\nvoid b() {\n    MyStringClass s;\n    a(s.c_str());\n}" $)
3920:
|
3923:
3924: ;
3925: $if $(@expr1073744935 $!@expr1073744936 $assertEquals $(@expr1073744937 "cppcheck-2.8/test/teststl.cpp" $, 3925 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3926:
3927: $check_ $(@expr1073744940 "cppcheck-2.8/test/teststl.cpp" $, 3927 $, "std::string Format(const char * name) {\n    return String::Format(\"%s:\", name).c_str();\n}" $)
3928:
3929: ;
3930: $if $(@expr1073744941 $!@expr1073744942 $assertEquals $(@expr1073744943 "cppcheck-2.8/test/teststl.cpp" $, 3930 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3931:
3932:
3933: $check_ $(@expr1073744946 "cppcheck-2.8/test/teststl.cpp" $, 3933 $, "struct InternalMapInfo {\n    std::string author;\n};\nconst char* GetMapAuthor(int index) {\n    const InternalMapInfo* mapInfo = &internal_getMapInfo;\n    return mapInfo->author.c_str();\n}" $)
3934:
|
3938:
3939: ;
3940: $if $(@expr1073744947 $!@expr1073744948 $assertEquals $(@expr1073744949 "cppcheck-2.8/test/teststl.cpp" $, 3940 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3941:
3942: $check_ $(@expr1073744952 "cppcheck-2.8/test/teststl.cpp" $, 3942 $, "struct InternalMapInfo {\n    std::string author;\n};\nstd::string GetMapAuthor(int index) {\n    const InternalMapInfo* mapInfo = &internal_getMapInfo;\n    return mapInfo->author.c_str();\n}" $)
3943:
|
3947:
3948: ;
3949: $if $(@expr1073744953 $!@expr1073744954 $assertEquals $(@expr1073744955 "cppcheck-2.8/test/teststl.cpp" $, 3949 $, "[test.cpp:6]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3950:
3951: $check_ $(@expr1073744958 "cppcheck-2.8/test/teststl.cpp" $, 3951 $, "struct InternalMapInfo {\n    std::string author;\n};\nconst char* GetMapAuthor(int index) {\n    const InternalMapInfo mapInfo = internal_getMapInfo;\n    return mapInfo.author.c_str();\n}" $)
3952:
|
3956:
3957: ;
3958: $if $(@expr1073744959 $!@expr1073744960 $assertEquals $(@expr1073744961 "cppcheck-2.8/test/teststl.cpp" $, 3958 $, "[test.cpp:6]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3959:
3960: $check_ $(@expr1073744964 "cppcheck-2.8/test/teststl.cpp" $, 3960 $, "struct S {\n    std::string data;\n};\nconst S& getS();\nconst char* test() {\n    const struct S &s = getS();\n    return s.data.c_str();\n}" $)
3961:
|
3966:
3967: ;
3968: $if $(@expr1073744965 $!@expr1073744966 $assertEquals $(@expr1073744967 "cppcheck-2.8/test/teststl.cpp" $, 3968 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3969:
3970: $check_ $(@expr1073744970 "cppcheck-2.8/test/teststl.cpp" $, 3970 $, "struct S {\n    std::string data;\n};\nconst char* test() {\n    S s;\n    std::string &ref = s.data;\n    return ref.c_str();\n}" $)
3971:
|
3976:
3977: ;
3978: $if $(@expr1073744971 $!@expr1073744972 $assertEquals $(@expr1073744973 "cppcheck-2.8/test/teststl.cpp" $, 3978 $, "[test.cpp:7]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3979:
3980: $check_ $(@expr1073744976 "cppcheck-2.8/test/teststl.cpp" $, 3980 $, "void f(const wchar_t* w, int i = 0, ...);\nvoid f(const std::string& s, int i = 0);\nvoid g(const std::wstring& p) {\n    f(p.c_str());\n}\n" $)
3981:
3982:
3983:
3984: ;
3985: $if $(@expr1073744977 $!@expr1073744978 $assertEquals $(@expr1073744979 "cppcheck-2.8/test/teststl.cpp" $, 3985 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3986:
3987: $check_ $(@expr1073744982 "cppcheck-2.8/test/teststl.cpp" $, 3987 $, "struct S {\n    const char* f() const noexcept {\n        return (\"\" + m).c_str();\n    }\n    std::string m;\n};\n" , true $)
3988:
|
3991:
3992: ;
3993: $if $(@expr1073744983 $!@expr1073744984 $assertEquals $(@expr1073744985 "cppcheck-2.8/test/teststl.cpp" $, 3993 $, "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
3994:
3995: $check_ $(@expr1073744988 "cppcheck-2.8/test/teststl.cpp" $, 3995 $, "struct S {\n    void f(const char** pp);\n    std::string s;\n};\nvoid S::f(const char** pp) {\n    try {\n        *pp = member.c_str();\n    }\n    catch (...) {\n        s = \"xyz\";\n        *pp = member.c_str();\n    }\n}\n" $)
3996:
|
4006:
4007: ;
4008: $if $(@expr1073744989 $!@expr1073744990 $assertEquals $(@expr1073744991 "cppcheck-2.8/test/teststl.cpp" $, 4008 $, "" $, errout@var100 .@expr2970 str (@expr2971 ) $) $) { $return ; }
4009: }
4010:
4011: void uselessCalls ( ) {
4012: $check_ $(@expr1073744994 "cppcheck-2.8/test/teststl.cpp" $, 4012 $, "void f()\n{\n    string s1, s2;\n    s1.swap(s2);\n    s2.swap(s2);\n};" $)
4013:
|
4016:
4017: ;
4018: $if $(@expr1073744995 $!@expr1073744996 $assertEquals $(@expr1073744997 "cppcheck-2.8/test/teststl.cpp" $, 4018 $, "" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4019:
4020: $check_ $(@expr1073745000 "cppcheck-2.8/test/teststl.cpp" $, 4020 $, "void f()\n{\n    std::string s1, s2;\n    s1.swap(s2);\n    s2.swap(s2);\n};" $)
4021:
|
4024:
4025: ;
4026: $if $(@expr1073745001 $!@expr1073745002 $assertEquals $(@expr1073745003 "cppcheck-2.8/test/teststl.cpp" $, 4026 $, "[test.cpp:5]: (performance) It is inefficient to swap a object with itself by calling 's2.swap(s2)'\n" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4027:
4028: $check_ $(@expr1073745006 "cppcheck-2.8/test/teststl.cpp" $, 4028 $, "void f()\n{\n    std::string s1, s2;\n    s1.compare(s2);\n    s2.compare(s2);\n    s1.compare(s2.c_str());\n    s1.compare(0, s1.size(), s1);\n};" $)
4029:
|
4034:
4035: ;
4036: $if $(@expr1073745007 $!@expr1073745008 $assertEquals $(@expr1073745009 "cppcheck-2.8/test/teststl.cpp" $, 4036 $, "[test.cpp:5]: (warning) It is inefficient to call 's2.compare(s2)' as it always returns 0.\n" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4037:
4038:
4039: $check_ $(@expr1073745012 "cppcheck-2.8/test/teststl.cpp" $, 4039 $, "class ReplayIteratorImpl{\n  int Compare(ReplayIteratorImpl* other) {\n    int cmp;\n    int ret = cursor_->compare(cursor_, other->cursor_, &cmp);\n    return (cmp);\n  }\n  WT_CURSOR *cursor_;\n};" $)
4040:
|
4045:
4046: ;
4047: $if $(@expr1073745013 $!@expr1073745014 $assertEquals $(@expr1073745015 "cppcheck-2.8/test/teststl.cpp" $, 4047 $, "" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4048:
4049: $check_ $(@expr1073745018 "cppcheck-2.8/test/teststl.cpp" $, 4049 $, "void f()\n{\n    int x=1;\n    std::string s1, s2;\n    s1 = s1.substr();\n    s2 = s1.substr(x);\n    s1 = s2.substr(0, x);\n    s1 = s2.substr(0,std::string::npos);\n    s1 = s2.substr(x+5-n, 0);\n};" $)
4050:
|
4057:
4058: ;
4059: $if $(@expr1073745019 $!@expr1073745020 $assertEquals $(@expr1073745021 "cppcheck-2.8/test/teststl.cpp" $, 4059 $, "[test.cpp:5]: (performance) Ineffective call of function \'substr\' because it returns a copy of the object. Use operator= instead.\n[test.cpp:8]: (performance) Ineffective call of function \'substr\' because it returns a copy of the object. Use operator= instead.\n[test.cpp:9]: (performance) Ineffective call of function \'substr\' because it returns an empty string.\n" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return
4060:
4061:
4062:
4063: ; }
4064:
4065: $check_ $(@expr1073745024 "cppcheck-2.8/test/teststl.cpp" $, 4065 $, "void f()\n{\n    int x=1;\n    string s1, s2;\n    s1 = s1.substr();\n    s2 = s1.substr(x);\n    s1 = s2.substr(0, x);\n    s1 = s2.substr(0,std::string::npos);\n    s1 = s2.substr(x+5-n, 0);\n};" $)
4066:
|
4073:
4074: ;
4075: $if $(@expr1073745025 $!@expr1073745026 $assertEquals $(@expr1073745027 "cppcheck-2.8/test/teststl.cpp" $, 4075 $, "" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4076:
4077: $check_ $(@expr1073745030 "cppcheck-2.8/test/teststl.cpp" $, 4077 $, "int main()\n{\n    std::string str = \"a1b1\";\n    return str.find(str[1], 2);\n}" $)
4078:
4079:
4080:
4081: ;
4082: $if $(@expr1073745031 $!@expr1073745032 $assertEquals $(@expr1073745033 "cppcheck-2.8/test/teststl.cpp" $, 4082 $, "" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4083:
4084: $check_ $(@expr1073745036 "cppcheck-2.8/test/teststl.cpp" $, 4084 $, "bool foo(std::vector<int>& v) {\n    v.empty();\n    return v.empty();\n}" $)
4085:
4086:
4087: ;
4088: $if $(@expr1073745037 $!@expr1073745038 $assertEquals $(@expr1073745039 "cppcheck-2.8/test/teststl.cpp" $, 4088 $, "[test.cpp:2]: (warning) Ineffective call of function 'empty()'. Did you intend to call 'clear()' instead?\n" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4089:
4090: $check_ $(@expr1073745042 "cppcheck-2.8/test/teststl.cpp" $, 4090 $, "void f() {\n    OdString str;\n    str.empty();\n}" $)
4091:
4092:
4093: ;
4094: $if $(@expr1073745043 $!@expr1073745044 $assertEquals $(@expr1073745045 "cppcheck-2.8/test/teststl.cpp" $, 4094 $, "" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4095:
4096: $check_ $(@expr1073745048 "cppcheck-2.8/test/teststl.cpp" $, 4096 $, "void f() {\n    const std::string greeting(\"Hello World !!!\");\n    const std::string::size_type npos = greeting.rfind(\" \");\n    if (npos != std::string::npos)\n        std::cout << greeting.substr(0, npos) << std::endl;\n}" $)
4097:
|
4100:
4101: ;
4102: $if $(@expr1073745049 $!@expr1073745050 $assertEquals $(@expr1073745051 "cppcheck-2.8/test/teststl.cpp" $, 4102 $, "" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4103:
4104: $check_ $(@expr1073745054 "cppcheck-2.8/test/teststl.cpp" $, 4104 $, "void f(std::vector<int> a) {\n    std::remove(a.begin(), a.end(), val);\n    std::remove_if(a.begin(), a.end(), val);\n    std::unique(a.begin(), a.end(), val);\n    x = std::remove(a.begin(), a.end(), val);\n    a.erase(std::remove(a.begin(), a.end(), val));\n    std::remove(\"foo.txt\");\n}" $)
4105:
|
4110:
4111: ;
4112: $if $(@expr1073745055 $!@expr1073745056 $assertEquals $(@expr1073745057 "cppcheck-2.8/test/teststl.cpp" $, 4112 $, "[test.cpp:2]: (warning) Return value of std::remove() ignored. Elements remain in container.\n[test.cpp:3]: (warning) Return value of std::remove_if() ignored. Elements remain in container.\n[test.cpp:4]: (warning) Return value of std::unique() ignored. Elements remain in container.\n" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return
4113:
4114: ; }
4115:
4116:
4117: $check_ $(@expr1073745060 "cppcheck-2.8/test/teststl.cpp" $, 4117 $, "bool f() {\n    return x ? true : (y.empty());\n}" $)
4118:
4119: ;
4120: $if $(@expr1073745061 $!@expr1073745062 $assertEquals $(@expr1073745063 "cppcheck-2.8/test/teststl.cpp" $, 4120 $, "" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4121:
4122:
4123: $check_ $(@expr1073745066 "cppcheck-2.8/test/teststl.cpp" $, 4123 $, "void f(std::string s) {\n    for (;s.empty();) {}\n}" $)
4124:
4125: ;
4126: $if $(@expr1073745067 $!@expr1073745068 $assertEquals $(@expr1073745069 "cppcheck-2.8/test/teststl.cpp" $, 4126 $, "" $, errout@var100 .@expr3174 str (@expr3175 ) $) $) { $return ; }
4127: }
4128:
4129: void stabilityOfChecks ( ) {
4130:
4131: $check_ $(@expr1073745072 "cppcheck-2.8/test/teststl.cpp" $, 4131 $, "template<class T>\nclass EffectivityRangeData {};\ntemplate<class T>\nclass EffectivityRange {\n    void unite() {\n        x < vector < EffectivityRangeData<int >> >();\n        EffectivityRange<int> er;\n    }\n    void shift() { EffectivityRangeData<int>::iterator it;  }\n};" $)
4132:
|
4139:
4140: ;
4141: $if $(@expr1073745073 $!@expr1073745074 $assertEquals $(@expr1073745075 "cppcheck-2.8/test/teststl.cpp" $, 4141 $, "" $, errout@var100 .@expr1073745076 str (@expr1073745077 ) $) $) { $return ; }
4142: }
4143:
4144: void dereferenceInvalidIterator ( ) {
4145:
4146: $check_ $(@expr1073745078 "cppcheck-2.8/test/teststl.cpp" $, 4146 $, "void foo(std::string::iterator& i) {\n    if (std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n    }\n}" $)
4147:
4148:
4149:
4150: ;
4151: $if $(@expr1073745079 $!@expr1073745080 $assertEquals $(@expr1073745081 "cppcheck-2.8/test/teststl.cpp" $, 4151 $, "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4152:
4153: $check_ $(@expr1073745084 "cppcheck-2.8/test/teststl.cpp" $, 4153 $, "void foo(std::string::iterator& i) {\n    if(foo) { bar(); }\n    else if (std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n    }\n}" $)
4154:
|
4157:
4158: ;
4159: $if $(@expr1073745085 $!@expr1073745086 $assertEquals $(@expr1073745087 "cppcheck-2.8/test/teststl.cpp" $, 4159 $, "[test.cpp:3]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4160:
4161:
4162: $check_ $(@expr1073745090 "cppcheck-2.8/test/teststl.cpp" $, 4162 $, "void foo(std::string::iterator& i) {\n    if (i != str.end() && std::isalpha(*i)) {\n        std::cout << *i;\n    }\n}" $)
4163:
4164:
4165:
4166: ;
4167: $if $(@expr1073745091 $!@expr1073745092 $assertEquals $(@expr1073745093 "cppcheck-2.8/test/teststl.cpp" $, 4167 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4168:
4169:
4170: $check_ $(@expr1073745096 "cppcheck-2.8/test/teststl.cpp" $, 4170 $, "void foo(std::string::iterator& i) {\n    while (std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n        i ++;\n    }\n}" $)
4171:
|
4174:
4175: ;
4176: $if $(@expr1073745097 $!@expr1073745098 $assertEquals $(@expr1073745099 "cppcheck-2.8/test/teststl.cpp" $, 4176 $, "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4177:
4178: $check_ $(@expr1073745102 "cppcheck-2.8/test/teststl.cpp" $, 4178 $, "void foo(std::string::iterator& i) {\n    do {\n        std::cout << *i;\n        i ++;\n    } while (std::isalpha(*i) && i != str.end());\n}" $)
4179:
|
4182:
4183: ;
4184: $if $(@expr1073745103 $!@expr1073745104 $assertEquals $(@expr1073745105 "cppcheck-2.8/test/teststl.cpp" $, 4184 $, "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4185:
4186:
4187: $check_ $(@expr1073745108 "cppcheck-2.8/test/teststl.cpp" $, 4187 $, "void foo(std::string::iterator& i) {\n    while (!(!std::isalpha(*i) || i == str.end())) {\n        std::cout << *i;\n        i ++;\n    }\n}" $)
4188:
|
4191:
4192: ;
4193: $if $(@expr1073745109 $!@expr1073745110 $assertEquals $(@expr1073745111 "cppcheck-2.8/test/teststl.cpp" $, 4193 $, "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4194:
4195:
4196: $check_ $(@expr1073745114 "cppcheck-2.8/test/teststl.cpp" $, 4196 $, "void foo(std::string::iterator& i) {\n    while (!(i == str.end() || !std::isalpha(*i))) {\n        std::cout << *i;\n        i ++;\n    }\n}" $)
4197:
|
4200:
4201: ;
4202: $if $(@expr1073745115 $!@expr1073745116 $assertEquals $(@expr1073745117 "cppcheck-2.8/test/teststl.cpp" $, 4202 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4203:
4204:
4205: $check_ $(@expr1073745120 "cppcheck-2.8/test/teststl.cpp" $, 4205 $, "void foo(std::string::iterator& i) {\n    for (; std::isalpha(*i) && i != str.end() ;) {\n        std::cout << *i;\n        i ++;\n    }\n}" $)
4206:
|
4209:
4210: ;
4211: $if $(@expr1073745121 $!@expr1073745122 $assertEquals $(@expr1073745123 "cppcheck-2.8/test/teststl.cpp" $, 4211 $, "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4212:
4213:
4214: $check_ $(@expr1073745126 "cppcheck-2.8/test/teststl.cpp" $, 4214 $, "void foo(std::string::iterator& i) {\n    for (; std::isalpha(*i) || i == str.end() ;) {\n        std::cout << *i;\n        i ++;\n    }\n}" $)
4215:
|
4218:
4219: ;
4220: $if $(@expr1073745127 $!@expr1073745128 $assertEquals $(@expr1073745129 "cppcheck-2.8/test/teststl.cpp" $, 4220 $, "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4221:
4222:
4223:
4224: $check_ $(@expr1073745132 "cppcheck-2.8/test/teststl.cpp" $, 4224 $, "void foo(std::string::iterator& i) {\n    for (char c = *i; isRunning && i != str.end() ;) {\n        std::cout << c;\n        i ++;\n    }\n}" $)
4225:
|
4228:
4229: ;
4230: $if $(@expr1073745133 $!@expr1073745134 $assertEquals $(@expr1073745135 "cppcheck-2.8/test/teststl.cpp" $, 4230 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4231:
4232:
4233: $check_ $(@expr1073745138 "cppcheck-2.8/test/teststl.cpp" $, 4233 $, "void foo(char* c, std::string::iterator& i) {\n    if (*c && std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n    }\n}" $)
4234:
4235:
4236:
4237: ;
4238: $if $(@expr1073745139 $!@expr1073745140 $assertEquals $(@expr1073745141 "cppcheck-2.8/test/teststl.cpp" $, 4238 $, "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4239:
4240:
4241: $check_ $(@expr1073745144 "cppcheck-2.8/test/teststl.cpp" $, 4241 $, "void foo(const char* c, std::string::iterator& i) {\n    if (std::isalpha(*c) && i != str.end()) {\n        std::cout << *c;\n    }\n}" $)
4242:
4243:
4244:
4245: ;
4246: $if $(@expr1073745145 $!@expr1073745146 $assertEquals $(@expr1073745147 "cppcheck-2.8/test/teststl.cpp" $, 4246 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4247:
4248:
4249: $check_ $(@expr1073745150 "cppcheck-2.8/test/teststl.cpp" $, 4249 $, "void foo(std::string::iterator& i) {\n    while (std::isalpha(*i) && i != str.rend()) {\n        std::cout << *i;\n        i ++;\n    }\n}" $)
4250:
|
4253:
4254: ;
4255: $if $(@expr1073745151 $!@expr1073745152 $assertEquals $(@expr1073745153 "cppcheck-2.8/test/teststl.cpp" $, 4255 $, "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4256:
4257:
4258: $check_ $(@expr1073745156 "cppcheck-2.8/test/teststl.cpp" $, 4258 $, "void foo(std::string::iterator& i) {\n    if ((i == str.end() || *i) || (isFoo() && i != str.end())) {\n        std::cout << \"foo\";\n    }\n}" $)
4259:
4260:
4261:
4262: ;
4263: $if $(@expr1073745157 $!@expr1073745158 $assertEquals $(@expr1073745159 "cppcheck-2.8/test/teststl.cpp" $, 4263 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4264:
4265: $check_ $(@expr1073745162 "cppcheck-2.8/test/teststl.cpp" $, 4265 $, "void f() {\n    std::vector <int> v;\n    std::vector <int>::iterator i = v.end();\n    *i=0;\n}\n" $)
4266:
4267:
4268:
4269: ;
4270: $if $(@expr1073745163 $!@expr1073745164 $assertEquals $(@expr1073745165 "cppcheck-2.8/test/teststl.cpp" $, 4270 $, "[test.cpp:4]: (error) Dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4271:
4272: $check_ $(@expr1073745168 "cppcheck-2.8/test/teststl.cpp" $, 4272 $, "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.end();\n    *i=0;\n}\n" $)
4273:
4274:
4275: ;
4276: $if $(@expr1073745169 $!@expr1073745170 $assertEquals $(@expr1073745171 "cppcheck-2.8/test/teststl.cpp" $, 4276 $, "[test.cpp:3]: (error) Dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4277:
4278: $check_ $(@expr1073745174 "cppcheck-2.8/test/teststl.cpp" $, 4278 $, "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.end();\n    *(i+1)=0;\n}\n" $)
4279:
4280:
4281: ;
4282: $if $(@expr1073745175 $!@expr1073745176 $assertEquals $(@expr1073745177 "cppcheck-2.8/test/teststl.cpp" $, 4282 $, "[test.cpp:3]: (error) Dereference of an invalid iterator: i+1\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4283:
4284: $check_ $(@expr1073745180 "cppcheck-2.8/test/teststl.cpp" $, 4284 $, "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.end();\n    *(i-1)=0;\n}\n" $)
4285:
4286:
4287: ;
4288: $if $(@expr1073745181 $!@expr1073745182 $assertEquals $(@expr1073745183 "cppcheck-2.8/test/teststl.cpp" $, 4288 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4289:
4290: $check_ $(@expr1073745186 "cppcheck-2.8/test/teststl.cpp" $, 4290 $, "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.begin();\n    *(i-1)=0;\n}\n" $)
4291:
4292:
4293: ;
4294: $if $(@expr1073745187 $!@expr1073745188 $assertEquals $(@expr1073745189 "cppcheck-2.8/test/teststl.cpp" $, 4294 $, "[test.cpp:3]: (error) Dereference of an invalid iterator: i-1\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4295:
4296: $check_ $(@expr1073745192 "cppcheck-2.8/test/teststl.cpp" $, 4296 $, "void f(std::vector <int> v, bool b) {\n    std::vector <int>::iterator i = v.begin();\n    if (b)\n        i = v.end();\n    *i=0;\n}\n" $)
4297:
|
4300:
4301: ;
4302: $if $(@expr1073745193 $!@expr1073745194 $assertEquals $(@expr1073745195 "cppcheck-2.8/test/teststl.cpp" $, 4302 $, "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4303:
4304: $check_ $(@expr1073745198 "cppcheck-2.8/test/teststl.cpp" $, 4304 $, "void f(std::vector <int> v, bool b) {\n    std::vector <int>::iterator i = v.begin();\n    if (b)\n        i = v.end();\n    *(i+1)=0;\n}\n" $)
4305:
|
4308:
4309: ;
4310: $if $(@expr1073745199 $!@expr1073745200 $assertEquals $(@expr1073745201 "cppcheck-2.8/test/teststl.cpp" $, 4310 $, "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i+1\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4311:
4312: $check_ $(@expr1073745204 "cppcheck-2.8/test/teststl.cpp" $, 4312 $, "void f(std::vector <int> v, bool b) {\n    std::vector <int>::iterator i = v.begin();\n    if (b)\n        i = v.end();\n    *(i-1)=0;\n}\n" $)
4313:
|
4316:
4317: ;
4318: $if $(@expr1073745205 $!@expr1073745206 $assertEquals $(@expr1073745207 "cppcheck-2.8/test/teststl.cpp" $, 4318 $, "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i-1\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4319:
4320: $check_ $(@expr1073745210 "cppcheck-2.8/test/teststl.cpp" $, 4320 $, "int f(std::vector<int> v, int pos) {\n    if (pos >= 0)\n        return *(v.begin() + pos);\n}\n" $)
4321:
4322:
4323: ;
4324: $if $(@expr1073745211 $!@expr1073745212 $assertEquals $(@expr1073745213 "cppcheck-2.8/test/teststl.cpp" $, 4324 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4325:
4326: $check_ $(@expr1073745216 "cppcheck-2.8/test/teststl.cpp" $, 4326 $, "int f(std::vector<int> v, int i) {\n    auto it = std::find(v.begin(), v.end(), i);\n    if (it != v.end()) {}\n    return *it;\n}\n" $)
4327:
4328:
4329:
4330: ;
4331: $if $(@expr1073745217 $!@expr1073745218 $assertEquals $(@expr1073745219 "cppcheck-2.8/test/teststl.cpp" $, 4331 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'it!=v.end()' is redundant or there is possible dereference of an invalid iterator: it.\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4332:
4333: $check_ $(@expr1073745222 "cppcheck-2.8/test/teststl.cpp" $, 4333 $, "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end() && *(i+1) == *i) {}\n}\n" $)
4334:
4335:
4336: ;
4337: $if $(@expr1073745223 $!@expr1073745224 $assertEquals $(@expr1073745225 "cppcheck-2.8/test/teststl.cpp" $, 4337 $, "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i.\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return
4338: ; }
4339:
4340:
4341: $check_ $(@expr1073745228 "cppcheck-2.8/test/teststl.cpp" $, 4341 $, "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end() && *i == *(i+1)) {}\n}\n" $)
4342:
4343:
4344: ;
4345: $if $(@expr1073745229 $!@expr1073745230 $assertEquals $(@expr1073745231 "cppcheck-2.8/test/teststl.cpp" $, 4345 $, "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i.\n[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return
4346: ; }
4347:
4348: $check_ $(@expr1073745234 "cppcheck-2.8/test/teststl.cpp" $, 4348 $, "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i != v.end() && *i == *(i+1)) {}\n}\n" $)
4349:
4350:
4351: ;
4352: $if $(@expr1073745235 $!@expr1073745236 $assertEquals $(@expr1073745237 "cppcheck-2.8/test/teststl.cpp" $, 4352 $, "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i!=v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4353:
4354: $check_ $(@expr1073745240 "cppcheck-2.8/test/teststl.cpp" $, 4354 $, "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i != v.end()) {\n        if (*(i+1) == *i) {}\n    }\n}\n" $)
4355:
|
4358:
4359: ;
4360: $if $(@expr1073745241 $!@expr1073745242 $assertEquals $(@expr1073745243 "cppcheck-2.8/test/teststl.cpp" $, 4360 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i!=v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4361:
4362: $check_ $(@expr1073745246 "cppcheck-2.8/test/teststl.cpp" $, 4362 $, "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end()) { return; }\n    if (*(i+1) == *i) {}\n}\n" $)
4363:
4364:
4365:
4366: ;
4367: $if $(@expr1073745247 $!@expr1073745248 $assertEquals $(@expr1073745249 "cppcheck-2.8/test/teststl.cpp" $, 4367 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4368:
4369: $check_ $(@expr1073745252 "cppcheck-2.8/test/teststl.cpp" $, 4369 $, "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i != v.end() && (i+1) != v.end() && *(i+1) == *i) {}\n}\n" $)
4370:
4371:
4372: ;
4373: $if $(@expr1073745253 $!@expr1073745254 $assertEquals $(@expr1073745255 "cppcheck-2.8/test/teststl.cpp" $, 4373 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4374:
4375: $check_ $(@expr1073745258 "cppcheck-2.8/test/teststl.cpp" $, 4375 $, "void f(std::string s) {\n    for (std::string::const_iterator i = s.begin(); i != s.end(); ++i) {\n        if (i != s.end() && (i + 1) != s.end() && *(i + 1) == *i) {\n            if (!isalpha(*(i + 2))) {\n                std::string modifier;\n                modifier += *i;\n                modifier += *(i + 1);\n            }\n        }\n    }\n}\n" $)
4376:
|
4384:
4385: ;
4386: $if $(@expr1073745259 $!@expr1073745260 $assertEquals $(@expr1073745261 "cppcheck-2.8/test/teststl.cpp" $, 4386 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition '(i+1)!=s.end()' is redundant or there is possible dereference of an invalid iterator: i+2.\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4387:
4388: $check_ $(@expr1073745264 "cppcheck-2.8/test/teststl.cpp" $, 4388 $, "void f(int v, std::map<int, int> &items) {\n    for (auto it = items.begin(); it != items.end();)\n        (it->first == v) ? it = items.erase(it) : ++it;\n}\n" $)
4389:
4390:
4391: ;
4392: $if $(@expr1073745265 $!@expr1073745266 $assertEquals $(@expr1073745267 "cppcheck-2.8/test/teststl.cpp" $, 4392 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4393:
4394: $check_ $(@expr1073745270 "cppcheck-2.8/test/teststl.cpp" $, 4394 $, "void f(std::string s) {\n    for (std::string::const_iterator i = s.begin(); i != s.end(); ++i) {\n        if (i != s.end() && (i + 1) != s.end() && *(i + 1) == *i) {\n            if ((i + 2) != s.end() && !isalpha(*(i + 2))) {\n                std::string modifier;\n                modifier += *i;\n                modifier += *(i + 1);\n            }\n        }\n    }\n}\n" $)
4395:
|
4403:
4404: ;
4405: $if $(@expr1073745271 $!@expr1073745272 $assertEquals $(@expr1073745273 "cppcheck-2.8/test/teststl.cpp" $, 4405 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4406:
4407: $check_ $(@expr1073745276 "cppcheck-2.8/test/teststl.cpp" $, 4407 $, "int f(std::vector<int>::iterator it, const std::vector<int>& vector) {\n    if (!(it != vector.end() && it != vector.begin()))\n        throw std::out_of_range();\n    if (it != vector.end() && *it == 0)\n        return -1;\n    return *it;\n}\n" $)
4408:
|
4412:
4413: ;
4414: $if $(@expr1073745277 $!@expr1073745278 $assertEquals $(@expr1073745279 "cppcheck-2.8/test/teststl.cpp" $, 4414 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4415:
4416: $check_ $(@expr1073745282 "cppcheck-2.8/test/teststl.cpp" $, 4416 $, "int f(std::vector<int> &vect) {\n    const int &v = *vect.emplace(vect.end());\n    return v;\n}\n" $)
4417:
4418:
4419: ;
4420: $if $(@expr1073745283 $!@expr1073745284 $assertEquals $(@expr1073745285 "cppcheck-2.8/test/teststl.cpp" $, 4420 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4421:
4422: $check_ $(@expr1073745288 "cppcheck-2.8/test/teststl.cpp" $, 4422 $, "extern bool bar(int);\nvoid f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end() && bar(*(i+1)) ) {}\n}\n" $)
4423:
4424:
4425:
4426: ;
4427: $if $(@expr1073745289 $!@expr1073745290 $assertEquals $(@expr1073745291 "cppcheck-2.8/test/teststl.cpp" $, 4427 $, "[test.cpp:4] -> [test.cpp:4]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return
4428:
4429: ; }
4430:
4431:
4432: $check_ $(@expr1073745294 "cppcheck-2.8/test/teststl.cpp" $, 4432 $, "std::list<int> mValues;\ntypedef std::list<int>::iterator ValueIterator;\nvoid foo(ValueIterator beginValue, ValueIterator endValue) {\n    ValueIterator prevValue = beginValue;\n    ValueIterator curValue = beginValue;\n    for (++curValue; prevValue != endValue && curValue != mValues.end(); ++curValue) {\n        a = bar(*curValue);\n        prevValue = curValue;\n    }\n    if (endValue == mValues.end()) {}\n}\n" $)
4433:
|
4441:
4442: ;
4443: $if $(@expr1073745295 $!@expr1073745296 $assertEquals $(@expr1073745297 "cppcheck-2.8/test/teststl.cpp" $, 4443 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4444:
4445:
4446: $check_ $(@expr1073745300 "cppcheck-2.8/test/teststl.cpp" $, 4446 $, "int f(std::vector<int> v) {\n    return *(v.begin() + v.size() - 1);\n}\n" $)
4447:
4448: ;
4449: $if $(@expr1073745301 $!@expr1073745302 $assertEquals $(@expr1073745303 "cppcheck-2.8/test/teststl.cpp" $, 4449 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4450:
4451:
4452: $check_ $(@expr1073745306 "cppcheck-2.8/test/teststl.cpp" $, 4452 $, "struct a;\nclass b {\n  void c(std::map<std::string, a *> &);\n  std::string d;\n  std::map<std::string, std::set<std::string>> e;\n};\nvoid b::c(std::map<std::string, a *> &) {\n  e.clear();\n  auto f = *e[d].begin();\n}\n" $)
4453:
|
4460:
4461: ;
4462: $if $(@expr1073745307 $!@expr1073745308 $assertEquals $(@expr1073745309 "cppcheck-2.8/test/teststl.cpp" $, 4462 $, "[test.cpp:9]: (error) Out of bounds access in expression 'e[d].begin()' because 'e[d]' is empty.\n" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return
4463: ; }
4464:
4465:
4466: $check_ $(@expr1073745312 "cppcheck-2.8/test/teststl.cpp" $, 4466 $, "std::set<int>::iterator f(std::set<int>& s) {\nfor (auto it = s.begin(); it != s.end(); ++it)\n    if (*it == 42)\n        return s.erase(it);\n    return s.end();\n}\n" $)
4467:
|
4470:
4471: ;
4472: $if $(@expr1073745313 $!@expr1073745314 $assertEquals $(@expr1073745315 "cppcheck-2.8/test/teststl.cpp" $, 4472 $, "" $, errout@var100 .@expr3258 str (@expr3259 ) $) $) { $return ; }
4473: }
4474:
4475: void dereferenceInvalidIterator2 ( ) {
4476:
4477: $check_ $(@expr1073745318 "cppcheck-2.8/test/teststl.cpp" $, 4477 $, "class iterator {\npublic:\n    CCommitPointer m_ptr;\n    iterator() {}\n    CCommitPointer& operator*() {\n        return m_ptr;\n    }\n    CCommitPointer* operator->() {\n        return &m_ptr;\n    }\n    iterator& operator++() {\n        ++m_ptr.m_place;\n        return *this;\n    }\n    };\n    iterator begin() {\n    iterator it;\n    it->m_place = 0;\n    return it;\n}\n" , true $)
4478:
|
4495:
4496: ;
4497: $if $(@expr1073745319 $!@expr1073745320 $assertEquals $(@expr1073745321 "cppcheck-2.8/test/teststl.cpp" $, 4497 $, "[test.cpp:18]: (error, inconclusive) Invalid iterator 'it' used.\n" $, errout@var100 .@expr1073745322 str (@expr1073745323 ) $) $) { $return ; }
4498: }
4499:
4500: void loopAlgoElementAssign ( ) {
4501: $check_ $(@expr1073745324 "cppcheck-2.8/test/teststl.cpp" $, 4501 $, "void foo() {\n    for(int& x:v)\n        x = 1;\n}\n" , true $)
4502:
4503:
4504:
4505: ;
4506: $if $(@expr1073745325 $!@expr1073745326 $assertEquals $(@expr1073745327 "cppcheck-2.8/test/teststl.cpp" $, 4506 $, "[test.cpp:3]: (style) Consider using std::fill algorithm instead of a raw loop.\n" $, errout@var100 .@expr3504 str (@expr3505 ) $) $) { $return ; }
4507:
4508: $check_ $(@expr1073745330 "cppcheck-2.8/test/teststl.cpp" $, 4508 $, "void foo() {\n    for(int& x:v)\n        x = x + 1;\n}\n" , true $)
4509:
4510:
4511:
4512: ;
4513: $if $(@expr1073745331 $!@expr1073745332 $assertEquals $(@expr1073745333 "cppcheck-2.8/test/teststl.cpp" $, 4513 $, "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n" $, errout@var100 .@expr3504 str (@expr3505 ) $) $) { $return ; }
4514:
4515: $check_ $(@expr1073745336 "cppcheck-2.8/test/teststl.cpp" $, 4515 $, "void foo(int a, int b) {\n    for(int& x:v)\n        x = a + b;\n}\n" , true $)
4516:
4517:
4518:
4519: ;
4520: $if $(@expr1073745337 $!@expr1073745338 $assertEquals $(@expr1073745339 "cppcheck-2.8/test/teststl.cpp" $, 4520 $, "[test.cpp:3]: (style) Consider using std::fill or std::generate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3504 str (@expr3505 ) $) $) { $return ; }
4521:
4522: $check_ $(@expr1073745342 "cppcheck-2.8/test/teststl.cpp" $, 4522 $, "void foo() {\n    for(int& x:v)\n        x += 1;\n}\n" , true $)
4523:
4524:
4525:
4526: ;
4527: $if $(@expr1073745343 $!@expr1073745344 $assertEquals $(@expr1073745345 "cppcheck-2.8/test/teststl.cpp" $, 4527 $, "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n" $, errout@var100 .@expr3504 str (@expr3505 ) $) $) { $return ; }
4528:
4529: $check_ $(@expr1073745348 "cppcheck-2.8/test/teststl.cpp" $, 4529 $, "void foo() {\n    for(int& x:v)\n        x = f();\n}\n" , true $)
4530:
4531:
4532:
4533: ;
4534: $if $(@expr1073745349 $!@expr1073745350 $assertEquals $(@expr1073745351 "cppcheck-2.8/test/teststl.cpp" $, 4534 $, "[test.cpp:3]: (style) Consider using std::generate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3504 str (@expr3505 ) $) $) { $return ; }
4535:
4536: $check_ $(@expr1073745354 "cppcheck-2.8/test/teststl.cpp" $, 4536 $, "void foo() {\n    for(int& x:v) {\n        f();\n        x = 1;\n    }\n}\n" , true $)
4537:
|
4541:
4542: ;
4543: $if $(@expr1073745355 $!@expr1073745356 $assertEquals $(@expr1073745357 "cppcheck-2.8/test/teststl.cpp" $, 4543 $, "" $, errout@var100 .@expr3504 str (@expr3505 ) $) $) { $return ; }
4544:
4545: $check_ $(@expr1073745360 "cppcheck-2.8/test/teststl.cpp" $, 4545 $, "void foo() {\n    for(int& x:v) {\n        x = 1;\n        f();\n    }\n}\n" , true $)
4546:
|
4550:
4551: ;
4552: $if $(@expr1073745361 $!@expr1073745362 $assertEquals $(@expr1073745363 "cppcheck-2.8/test/teststl.cpp" $, 4552 $, "" $, errout@var100 .@expr3504 str (@expr3505 ) $) $) { $return ; }
4553:
4554:
4555: $check_ $(@expr1073745366 "cppcheck-2.8/test/teststl.cpp" $, 4555 $, "void foo() {\n    for(int& x:v) {\n        x = 1;\n        break;\n    }\n}\n" , true $)
4556:
|
4560:
4561: ;
4562: $if $(@expr1073745367 $!@expr1073745368 $assertEquals $(@expr1073745369 "cppcheck-2.8/test/teststl.cpp" $, 4562 $, "" $, errout@var100 .@expr3504 str (@expr3505 ) $) $) { $return ; }
4563:
4564: $check_ $(@expr1073745372 "cppcheck-2.8/test/teststl.cpp" $, 4564 $, "void foo() {\n    for(int& x:v)\n        x = ++x;\n}\n" , true $)
4565:
4566:
4567:
4568: ;
4569: $if $(@expr1073745373 $!@expr1073745374 $assertEquals $(@expr1073745375 "cppcheck-2.8/test/teststl.cpp" $, 4569 $, "" $, errout@var100 .@expr3504 str (@expr3505 ) $) $) { $return ; }
4570: }
4571:
4572: void loopAlgoAccumulateAssign ( ) {
4573: $check_ $(@expr1073745378 "cppcheck-2.8/test/teststl.cpp" $, 4573 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        n += x;\n}\n" , true $)
4574:
|
4577:
4578: ;
4579: $if $(@expr1073745379 $!@expr1073745380 $assertEquals $(@expr1073745381 "cppcheck-2.8/test/teststl.cpp" $, 4579 $, "[test.cpp:4]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4580:
4581: $check_ $(@expr1073745384 "cppcheck-2.8/test/teststl.cpp" $, 4581 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = n + x;\n}\n" , true $)
4582:
|
4585:
4586: ;
4587: $if $(@expr1073745385 $!@expr1073745386 $assertEquals $(@expr1073745387 "cppcheck-2.8/test/teststl.cpp" $, 4587 $, "[test.cpp:4]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4588:
4589: $check_ $(@expr1073745390 "cppcheck-2.8/test/teststl.cpp" $, 4589 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        n += 1;\n}\n" , true $)
4590:
|
4593:
4594: ;
4595: $if $(@expr1073745391 $!@expr1073745392 $assertEquals $(@expr1073745393 "cppcheck-2.8/test/teststl.cpp" $, 4595 $, "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4596:
4597: $check_ $(@expr1073745396 "cppcheck-2.8/test/teststl.cpp" $, 4597 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = n + 1;\n}\n" , true $)
4598:
|
4601:
4602: ;
4603: $if $(@expr1073745397 $!@expr1073745398 $assertEquals $(@expr1073745399 "cppcheck-2.8/test/teststl.cpp" $, 4603 $, "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4604:
4605: $check_ $(@expr1073745402 "cppcheck-2.8/test/teststl.cpp" $, 4605 $, "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b &= f(x);\n}\n" , true $)
4606:
|
4610:
4611: ;
4612: $if $(@expr1073745403 $!@expr1073745404 $assertEquals $(@expr1073745405 "cppcheck-2.8/test/teststl.cpp" $, 4612 $, "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4613:
4614: $check_ $(@expr1073745408 "cppcheck-2.8/test/teststl.cpp" $, 4614 $, "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b |= f(x);\n}\n" , true $)
4615:
|
4619:
4620: ;
4621: $if $(@expr1073745409 $!@expr1073745410 $assertEquals $(@expr1073745411 "cppcheck-2.8/test/teststl.cpp" $, 4621 $, "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4622:
4623: $check_ $(@expr1073745414 "cppcheck-2.8/test/teststl.cpp" $, 4623 $, "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b = b && f(x);\n}\n" , true $)
4624:
|
4628:
4629: ;
4630: $if $(@expr1073745415 $!@expr1073745416 $assertEquals $(@expr1073745417 "cppcheck-2.8/test/teststl.cpp" $, 4630 $, "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4631:
4632: $check_ $(@expr1073745420 "cppcheck-2.8/test/teststl.cpp" $, 4632 $, "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b = b || f(x);\n}\n" , true $)
4633:
|
4637:
4638: ;
4639: $if $(@expr1073745421 $!@expr1073745422 $assertEquals $(@expr1073745423 "cppcheck-2.8/test/teststl.cpp" $, 4639 $, "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4640:
4641: $check_ $(@expr1073745426 "cppcheck-2.8/test/teststl.cpp" $, 4641 $, "void foo() {\n    int n = 0;\n    for(int& x:v)\n        n = ++x;\n}\n" , true $)
4642:
|
4645:
4646: ;
4647: $if $(@expr1073745427 $!@expr1073745428 $assertEquals $(@expr1073745429 "cppcheck-2.8/test/teststl.cpp" $, 4647 $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4648: }
4649:
4650: void loopAlgoContainerInsert ( ) {
4651: $check_ $(@expr1073745432 "cppcheck-2.8/test/teststl.cpp" $, 4651 $, "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(x);\n}\n" , true $)
4652:
|
4655:
4656: ;
4657: $if $(@expr1073745433 $!@expr1073745434 $assertEquals $(@expr1073745435 "cppcheck-2.8/test/teststl.cpp" $, 4657 $, "[test.cpp:4]: (style) Consider using std::copy algorithm instead of a raw loop.\n" $, errout@var100 .@expr3612 str (@expr3613 ) $) $) { $return ; }
4658:
4659: $check_ $(@expr1073745438 "cppcheck-2.8/test/teststl.cpp" $, 4659 $, "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(f(x));\n}\n" , true $)
4660:
|
4663:
4664: ;
4665: $if $(@expr1073745439 $!@expr1073745440 $assertEquals $(@expr1073745441 "cppcheck-2.8/test/teststl.cpp" $, 4665 $, "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n" $, errout@var100 .@expr3612 str (@expr3613 ) $) $) { $return ; }
4666:
4667: $check_ $(@expr1073745444 "cppcheck-2.8/test/teststl.cpp" $, 4667 $, "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(x + 1);\n}\n" , true $)
4668:
|
4671:
4672: ;
4673: $if $(@expr1073745445 $!@expr1073745446 $assertEquals $(@expr1073745447 "cppcheck-2.8/test/teststl.cpp" $, 4673 $, "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n" $, errout@var100 .@expr3612 str (@expr3613 ) $) $) { $return ; }
4674:
4675: $check_ $(@expr1073745450 "cppcheck-2.8/test/teststl.cpp" $, 4675 $, "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_front(x);\n}\n" , true $)
4676:
|
4679:
4680: ;
4681: $if $(@expr1073745451 $!@expr1073745452 $assertEquals $(@expr1073745453 "cppcheck-2.8/test/teststl.cpp" $, 4681 $, "[test.cpp:4]: (style) Consider using std::copy algorithm instead of a raw loop.\n" $, errout@var100 .@expr3612 str (@expr3613 ) $) $) { $return ; }
4682:
4683: $check_ $(@expr1073745456 "cppcheck-2.8/test/teststl.cpp" $, 4683 $, "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_front(f(x));\n}\n" , true $)
4684:
|
4687:
4688: ;
4689: $if $(@expr1073745457 $!@expr1073745458 $assertEquals $(@expr1073745459 "cppcheck-2.8/test/teststl.cpp" $, 4689 $, "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n" $, errout@var100 .@expr3612 str (@expr3613 ) $) $) { $return ; }
4690:
4691: $check_ $(@expr1073745462 "cppcheck-2.8/test/teststl.cpp" $, 4691 $, "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_front(x + 1);\n}\n" , true $)
4692:
|
4695:
4696: ;
4697: $if $(@expr1073745463 $!@expr1073745464 $assertEquals $(@expr1073745465 "cppcheck-2.8/test/teststl.cpp" $, 4697 $, "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n" $, errout@var100 .@expr3612 str (@expr3613 ) $) $) { $return ; }
4698:
4699: $check_ $(@expr1073745468 "cppcheck-2.8/test/teststl.cpp" $, 4699 $, "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(v);\n}\n" , true $)
4700:
|
4703:
4704: ;
4705: $if $(@expr1073745469 $!@expr1073745470 $assertEquals $(@expr1073745471 "cppcheck-2.8/test/teststl.cpp" $, 4705 $, "" $, errout@var100 .@expr3612 str (@expr3613 ) $) $) { $return ; }
4706:
4707: $check_ $(@expr1073745474 "cppcheck-2.8/test/teststl.cpp" $, 4707 $, "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(0);\n}\n" , true $)
4708:
|
4711:
4712: ;
4713: $if $(@expr1073745475 $!@expr1073745476 $assertEquals $(@expr1073745477 "cppcheck-2.8/test/teststl.cpp" $, 4713 $, "" $, errout@var100 .@expr3612 str (@expr3613 ) $) $) { $return ; }
4714: }
4715:
4716: void loopAlgoIncrement ( ) {
4717: $check_ $(@expr1073745480 "cppcheck-2.8/test/teststl.cpp" $, 4717 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        n++;\n}\n" , true $)
4718:
|
4721:
4722: ;
4723: $if $(@expr1073745481 $!@expr1073745482 $assertEquals $(@expr1073745483 "cppcheck-2.8/test/teststl.cpp" $, 4723 $, "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n" $, errout@var100 .@expr3660 str (@expr3661 ) $) $) { $return ; }
4724:
4725: $check_ $(@expr1073745486 "cppcheck-2.8/test/teststl.cpp" $, 4725 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        ++n;\n}\n" , true $)
4726:
|
4729:
4730: ;
4731: $if $(@expr1073745487 $!@expr1073745488 $assertEquals $(@expr1073745489 "cppcheck-2.8/test/teststl.cpp" $, 4731 $, "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n" $, errout@var100 .@expr3660 str (@expr3661 ) $) $) { $return ; }
4732:
4733: $check_ $(@expr1073745492 "cppcheck-2.8/test/teststl.cpp" $, 4733 $, "void foo() {\n    for(int& x:v)\n        x++;\n}\n" , true $)
4734:
4735:
4736:
4737: ;
4738: $if $(@expr1073745493 $!@expr1073745494 $assertEquals $(@expr1073745495 "cppcheck-2.8/test/teststl.cpp" $, 4738 $, "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n" $, errout@var100 .@expr3660 str (@expr3661 ) $) $) { $return ; }
4739:
4740: $check_ $(@expr1073745498 "cppcheck-2.8/test/teststl.cpp" $, 4740 $, "void foo() {\n    for(int& x:v)\n        ++x;\n}\n" , true $)
4741:
4742:
4743:
4744: ;
4745: $if $(@expr1073745499 $!@expr1073745500 $assertEquals $(@expr1073745501 "cppcheck-2.8/test/teststl.cpp" $, 4745 $, "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n" $, errout@var100 .@expr3660 str (@expr3661 ) $) $) { $return ; }
4746: }
4747:
4748: void loopAlgoConditional ( ) {
4749: $check_ $(@expr1073745504 "cppcheck-2.8/test/teststl.cpp" $, 4749 $, "bool pred(int x);\nvoid foo() {\n    for(int& x:v) {\n        if (pred(x)) {\n            x = 1;\n        }\n    }\n}\n" , true $)
4750:
|
4756:
4757: ;
4758: $if $(@expr1073745505 $!@expr1073745506 $assertEquals $(@expr1073745507 "cppcheck-2.8/test/teststl.cpp" $, 4758 $, "[test.cpp:5]: (style) Consider using std::replace_if algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4759:
4760: $check_ $(@expr1073745510 "cppcheck-2.8/test/teststl.cpp" $, 4760 $, "bool pred(int x);\nvoid foo() {\n    int n = 0;\n    for(int x:v) {\n        if (pred(x)) {\n            n += x;\n        }\n    }\n}\n" , true $)
4761:
|
4768:
4769: ;
4770: $if $(@expr1073745511 $!@expr1073745512 $assertEquals $(@expr1073745513 "cppcheck-2.8/test/teststl.cpp" $, 4770 $, "[test.cpp:6]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4771:
4772: $check_ $(@expr1073745516 "cppcheck-2.8/test/teststl.cpp" $, 4772 $, "bool pred(int x);\nvoid foo() {\n    int n = 0;\n    for(int x:v) {\n        if (pred(x)) {\n            n += 1;\n        }\n    }\n}\n" , true $)
4773:
|
4780:
4781: ;
4782: $if $(@expr1073745517 $!@expr1073745518 $assertEquals $(@expr1073745519 "cppcheck-2.8/test/teststl.cpp" $, 4782 $, "[test.cpp:6]: (style) Consider using std::count_if algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4783:
4784: $check_ $(@expr1073745522 "cppcheck-2.8/test/teststl.cpp" $, 4784 $, "bool pred(int x);\nvoid foo() {\n    int n = 0;\n    for(int x:v) {\n        if (pred(x)) {\n            n++;\n        }\n    }\n}\n" , true $)
4785:
|
4792:
4793: ;
4794: $if $(@expr1073745523 $!@expr1073745524 $assertEquals $(@expr1073745525 "cppcheck-2.8/test/teststl.cpp" $, 4794 $, "[test.cpp:6]: (style) Consider using std::count_if algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4795:
4796: $check_ $(@expr1073745528 "cppcheck-2.8/test/teststl.cpp" $, 4796 $, "bool pred(int x);\nvoid foo() {\n    for(int& x:v) {\n        if (pred(x)) {\n            x = x + 1;\n        }\n    }\n}\n" , true $)
4797:
|
4803:
4804: ;
4805: $if $(@expr1073745529 $!@expr1073745530 $assertEquals $(@expr1073745531 "cppcheck-2.8/test/teststl.cpp" $, 4805 $, "[test.cpp:5]: (style) Consider using std::transform algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4806:
4807: $check_ $(@expr1073745534 "cppcheck-2.8/test/teststl.cpp" $, 4807 $, "bool pred(int x);\nvoid foo() {\n    std::vector<int> c;\n    for(int x:v) {\n        if (pred(x)) {\n            c.push_back(x);\n        }\n    }\n}\n" , true $)
4808:
|
4815:
4816: ;
4817: $if $(@expr1073745535 $!@expr1073745536 $assertEquals $(@expr1073745537 "cppcheck-2.8/test/teststl.cpp" $, 4817 $, "[test.cpp:6]: (style) Consider using std::copy_if algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4818:
4819: $check_ $(@expr1073745540 "cppcheck-2.8/test/teststl.cpp" $, 4819 $, "bool pred(int x);\nbool foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            return false;\n        }\n    }\n    return true;\n}\n" , true $)
4820:
|
4827:
4828: ;
4829: $if $(@expr1073745541 $!@expr1073745542 $assertEquals $(@expr1073745543 "cppcheck-2.8/test/teststl.cpp" $, 4829 $, "[test.cpp:4]: (style) Consider using std::any_of algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4830:
4831: $check_ $(@expr1073745546 "cppcheck-2.8/test/teststl.cpp" $, 4831 $, "bool pred(int x);\nbool foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            break;\n        }\n    }\n    return true;\n}\n" , true $)
4832:
|
4839:
4840: ;
4841: $if $(@expr1073745547 $!@expr1073745548 $assertEquals $(@expr1073745549 "cppcheck-2.8/test/teststl.cpp" $, 4841 $, "[test.cpp:4]: (style) Consider using std::any_of algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4842:
4843: $check_ $(@expr1073745552 "cppcheck-2.8/test/teststl.cpp" $, 4843 $, "bool pred(int x);\nvoid f();\nvoid foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            f();\n            break;\n        }\n    }\n}\n" , true $)
4844:
|
4852:
4853: ;
4854: $if $(@expr1073745553 $!@expr1073745554 $assertEquals $(@expr1073745555 "cppcheck-2.8/test/teststl.cpp" $, 4854 $, "[test.cpp:5]: (style) Consider using std::any_of algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4855:
4856: $check_ $(@expr1073745558 "cppcheck-2.8/test/teststl.cpp" $, 4856 $, "bool pred(int x);\nvoid f(int x);\nvoid foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            f(x);\n            break;\n        }\n    }\n}\n" , true $)
4857:
|
4865:
4866: ;
4867: $if $(@expr1073745559 $!@expr1073745560 $assertEquals $(@expr1073745561 "cppcheck-2.8/test/teststl.cpp" $, 4867 $, "[test.cpp:5]: (style) Consider using std::find_if algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4868:
4869: $check_ $(@expr1073745564 "cppcheck-2.8/test/teststl.cpp" $, 4869 $, "bool pred(int x);\nbool foo() {\n    bool b = false;\n    for(int x:v) {\n        if (pred(x)) {\n            b = true;\n        }\n    }\n    if(b) {}\n    return true;\n}\n" , true $)
4870:
|
4879:
4880: ;
4881: $if $(@expr1073745565 $!@expr1073745566 $assertEquals $(@expr1073745567 "cppcheck-2.8/test/teststl.cpp" $, 4881 $, "[test.cpp:6]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4882:
4883: $check_ $(@expr1073745570 "cppcheck-2.8/test/teststl.cpp" $, 4883 $, "bool pred(int x);\nbool foo() {\n    bool b = false;\n    for(int x:v) {\n        if (pred(x)) {\n            b |= true;\n        }\n    }\n    return true;\n}\n" , true $)
4884:
|
4892:
4893: ;
4894: $if $(@expr1073745571 $!@expr1073745572 $assertEquals $(@expr1073745573 "cppcheck-2.8/test/teststl.cpp" $, 4894 $, "[test.cpp:6]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4895:
4896: $check_ $(@expr1073745576 "cppcheck-2.8/test/teststl.cpp" $, 4896 $, "bool pred(int x);\nbool foo() {\n    bool b = false;\n    for(int x:v) {\n        if (pred(x)) {\n            b &= true;\n        }\n    }\n    return true;\n}\n" , true $)
4897:
|
4905:
4906: ;
4907: $if $(@expr1073745577 $!@expr1073745578 $assertEquals $(@expr1073745579 "cppcheck-2.8/test/teststl.cpp" $, 4907 $, "[test.cpp:6]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4908:
4909: $check_ $(@expr1073745582 "cppcheck-2.8/test/teststl.cpp" $, 4909 $, "bool pred(int x);\nbool foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            return false;\n        }\n        return true;\n    }\n}\n" , true $)
4910:
|
4917:
4918: ;
4919: $if $(@expr1073745583 $!@expr1073745584 $assertEquals $(@expr1073745585 "cppcheck-2.8/test/teststl.cpp" $, 4919 $, "" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4920:
4921:
4922: $check_ $(@expr1073745588 "cppcheck-2.8/test/teststl.cpp" $, 4922 $, "bool pred(int x);\nvoid foo() {\n    std::vector<int> c;\n    for(int x:v) {\n        if (pred(x)) {\n            c.push_back(x + 1);\n        }\n    }\n}\n" , true $)
4923:
|
4930:
4931: ;
4932: $if $(@expr1073745589 $!@expr1073745590 $assertEquals $(@expr1073745591 "cppcheck-2.8/test/teststl.cpp" $, 4932 $, "" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4933:
4934: $check_ $(@expr1073745594 "cppcheck-2.8/test/teststl.cpp" $, 4934 $, "bool pred(int x);\nvoid foo() {\n    for(int& x:v) {\n        x++;\n        if (pred(x)) {\n            x = 1;\n        }\n    }\n}\n" , true $)
4935:
|
4942:
4943: ;
4944: $if $(@expr1073745595 $!@expr1073745596 $assertEquals $(@expr1073745597 "cppcheck-2.8/test/teststl.cpp" $, 4944 $, "" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4945:
4946: $check_ $(@expr1073745600 "cppcheck-2.8/test/teststl.cpp" $, 4946 $, "bool pred(int x);\nvoid f();\nvoid foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            if(x) { return; }\n            break;\n        }\n    }\n}\n" , true $)
4947:
|
4955:
4956: ;
4957: $if $(@expr1073745601 $!@expr1073745602 $assertEquals $(@expr1073745603 "cppcheck-2.8/test/teststl.cpp" $, 4957 $, "" $, errout@var100 .@expr3684 str (@expr3685 ) $) $) { $return ; }
4958: }
4959:
4960: void loopAlgoMinMax ( ) {
4961: $check_ $(@expr1073745606 "cppcheck-2.8/test/teststl.cpp" $, 4961 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x > n ? x : n;\n}\n" , true $)
4962:
|
4965:
4966: ;
4967: $if $(@expr1073745607 $!@expr1073745608 $assertEquals $(@expr1073745609 "cppcheck-2.8/test/teststl.cpp" $, 4967 $, "[test.cpp:4]: (style) Consider using std::max_element algorithm instead of a raw loop.\n" $, errout@var100 .@expr3786 str (@expr3787 ) $) $) { $return ; }
4968:
4969: $check_ $(@expr1073745612 "cppcheck-2.8/test/teststl.cpp" $, 4969 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x < n ? x : n;\n}\n" , true $)
4970:
|
4973:
4974: ;
4975: $if $(@expr1073745613 $!@expr1073745614 $assertEquals $(@expr1073745615 "cppcheck-2.8/test/teststl.cpp" $, 4975 $, "[test.cpp:4]: (style) Consider using std::min_element algorithm instead of a raw loop.\n" $, errout@var100 .@expr3786 str (@expr3787 ) $) $) { $return ; }
4976:
4977: $check_ $(@expr1073745618 "cppcheck-2.8/test/teststl.cpp" $, 4977 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x > n ? n : x;\n}\n" , true $)
4978:
|
4981:
4982: ;
4983: $if $(@expr1073745619 $!@expr1073745620 $assertEquals $(@expr1073745621 "cppcheck-2.8/test/teststl.cpp" $, 4983 $, "[test.cpp:4]: (style) Consider using std::min_element algorithm instead of a raw loop.\n" $, errout@var100 .@expr3786 str (@expr3787 ) $) $) { $return ; }
4984:
4985: $check_ $(@expr1073745624 "cppcheck-2.8/test/teststl.cpp" $, 4985 $, "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x < n ? n : x;\n}\n" , true $)
4986:
|
4989:
4990: ;
4991: $if $(@expr1073745625 $!@expr1073745626 $assertEquals $(@expr1073745627 "cppcheck-2.8/test/teststl.cpp" $, 4991 $, "[test.cpp:4]: (style) Consider using std::max_element algorithm instead of a raw loop.\n" $, errout@var100 .@expr3786 str (@expr3787 ) $) $) { $return ; }
4992:
4993: $check_ $(@expr1073745630 "cppcheck-2.8/test/teststl.cpp" $, 4993 $, "void foo(int m) {\n    int n = 0;\n    for(int x:v)\n        n = x > m ? x : n;\n}\n" , true $)
4994:
|
4997:
4998: ;
4999: $if $(@expr1073745631 $!@expr1073745632 $assertEquals $(@expr1073745633 "cppcheck-2.8/test/teststl.cpp" $, 4999 $, "[test.cpp:4]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n" $, errout@var100 .@expr3786 str (@expr3787 ) $) $) { $return ; }
5000: }
5001:
5002: void invalidContainer ( ) {
5003: $check_ $(@expr1073745636 "cppcheck-2.8/test/teststl.cpp" $, 5003 $, "void f(std::vector<int> &v) {\n    auto v0 = v.begin();\n    v.push_back(123);\n    std::cout << *v0 << std::endl;\n}\n" , true $)
5004:
|
5007:
5008: ;
5009: $if $(@expr1073745637 $!@expr1073745638 $assertEquals $(@expr1073745639 "cppcheck-2.8/test/teststl.cpp" $, 5009 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'v' that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5010:
5011: $check_ $(@expr1073745642 "cppcheck-2.8/test/teststl.cpp" $, 5011 $, "std::string e();\nvoid a() {\n  std::vector<std::string> b;\n  for (std::vector<std::string>::const_iterator c; c != b.end(); ++c) {\n    std::string f = e();\n    std::string::const_iterator d = f.begin();\n    if (d != f.end()) {}\n  }\n}\n" , true $)
5012:
|
5019:
5020: ;
5021: $if $(@expr1073745643 $!@expr1073745644 $assertEquals $(@expr1073745645 "cppcheck-2.8/test/teststl.cpp" $, 5021 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5022:
5023: $check_ $(@expr1073745648 "cppcheck-2.8/test/teststl.cpp" $, 5023 $, "void f(std::vector<int> &v) {\n    int *v0 = &v[0];\n    v.push_back(123);\n    std::cout << (*v0)[0] << std::endl;\n}\n" , true $)
5024:
|
5027:
5028: ;
5029: $if $(@expr1073745649 $!@expr1073745650 $assertEquals $(@expr1073745651 "cppcheck-2.8/test/teststl.cpp" $, 5029 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using pointer to local variable 'v' that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5030:
5031: $check_ $(@expr1073745654 "cppcheck-2.8/test/teststl.cpp" $, 5031 $, "void f() {\n    std::vector<int> v = {1};\n    int &v0 = v.front();\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n" , true $)
5032:
|
5036:
5037: ;
5038: $if $(@expr1073745655 $!@expr1073745656 $assertEquals $(@expr1073745657 "cppcheck-2.8/test/teststl.cpp" $, 5038 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:5]: (error) Reference to v that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5039:
5040: ; }
5041:
5042: $check_ $(@expr1073745660 "cppcheck-2.8/test/teststl.cpp" $, 5042 $, "void f() {\n    std::vector<int> v = {1};\n    int &v0 = v[0];\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n" , true $)
5043:
|
5047:
5048: ;
5049: $if $(@expr1073745661 $!@expr1073745662 $assertEquals $(@expr1073745663 "cppcheck-2.8/test/teststl.cpp" $, 5049 $, "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:5]: (error) Reference to v that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5050: ; }
5051:
5052: $check_ $(@expr1073745666 "cppcheck-2.8/test/teststl.cpp" $, 5052 $, "void f(std::vector<int> &v) {\n    int &v0 = v.front();\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n" , true $)
5053:
|
5056:
5057: ;
5058: $if $(@expr1073745667 $!@expr1073745668 $assertEquals $(@expr1073745669 "cppcheck-2.8/test/teststl.cpp" $, 5058 $, "[test.cpp:2] -> [test.cpp:2] -> [test.cpp:1] -> [test.cpp:3] -> [test.cpp:4]: (error) Reference to v that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5059:
5060: ; }
5061:
5062: $check_ $(@expr1073745672 "cppcheck-2.8/test/teststl.cpp" $, 5062 $, "void f(std::vector<int> &v) {\n    int &v0 = v[0];\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n" , true $)
5063:
|
5066:
5067: ;
5068: $if $(@expr1073745673 $!@expr1073745674 $assertEquals $(@expr1073745675 "cppcheck-2.8/test/teststl.cpp" $, 5068 $, "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3] -> [test.cpp:4]: (error) Reference to v that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5069:
5070: ; }
5071:
5072: $check_ $(@expr1073745678 "cppcheck-2.8/test/teststl.cpp" $, 5072 $, "void f(std::vector<int> &v) {\n    std::vector<int> *v0 = &v;\n    v.push_back(123);\n    std::cout << (*v0)[0] << std::endl;\n}\n" , true $)
5073:
|
5076:
5077: ;
5078: $if $(@expr1073745679 $!@expr1073745680 $assertEquals $(@expr1073745681 "cppcheck-2.8/test/teststl.cpp" $, 5078 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5079:
5080: $check_ $(@expr1073745684 "cppcheck-2.8/test/teststl.cpp" $, 5080 $, "const std::vector<int> * g(int);\nvoid f() {\n    const std::vector<int> *v = g(1);\n    if (v && v->size() == 1U) {\n        const int &m = v->front();\n    }\n\n    v = g(2);\n    if (v && v->size() == 1U) {\n        const int &m = v->front();\n        if (m == 0) {}\n    }\n}\n" , true $)
5081:
|
5092:
5093: ;
5094: $if $(@expr1073745685 $!@expr1073745686 $assertEquals $(@expr1073745687 "cppcheck-2.8/test/teststl.cpp" $, 5094 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5095:
5096: $check_ $(@expr1073745690 "cppcheck-2.8/test/teststl.cpp" $, 5096 $, "std::vector<std::string> g();\nvoid f() {\n    std::vector<std::string> x = g();\n    const std::string& y = x[1];\n    std::string z;\n    z += \"\";\n    z += y;\n}\n" , true $)
5097:
|
5102:
5103: ;
5104: $if $(@expr1073745691 $!@expr1073745692 $assertEquals $(@expr1073745693 "cppcheck-2.8/test/teststl.cpp" $, 5104 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5105:
5106: $check_ $(@expr1073745696 "cppcheck-2.8/test/teststl.cpp" $, 5106 $, "void f(std::vector<char> v)\n{\n    auto *cur = v.data();\n    auto *end = cur + v.size();\n    while (cur < end) {\n        v.erase(v.begin(), FindNext(v));\n        cur = v.data();\n        end = cur + v.size();\n    }\n}\n" , true $)
5107:
|
5114:
5115: ;
5116: $if $(@expr1073745697 $!@expr1073745698 $assertEquals $(@expr1073745699 "cppcheck-2.8/test/teststl.cpp" $, 5116 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5117:
5118:
5119: $check_ $(@expr1073745702 "cppcheck-2.8/test/teststl.cpp" $, 5119 $, "void f(std::vector<std::string> v) {\n    for (auto it = v.begin(); it != v.end(); it = v.erase(it))\n        *it;\n}\n" , true $)
5120:
5121:
5122: ;
5123: $if $(@expr1073745703 $!@expr1073745704 $assertEquals $(@expr1073745705 "cppcheck-2.8/test/teststl.cpp" $, 5123 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5124:
5125:
5126: $check_ $(@expr1073745708 "cppcheck-2.8/test/teststl.cpp" $, 5126 $, "void f() {\n  auto v = std::vector<std::string>();\n  std::string x;\n  v.push_back(x.insert(0, \"x\"));\n  v.push_back(\"y\");\n}\n" , true $)
5127:
|
5130:
5131: ;
5132: $if $(@expr1073745709 $!@expr1073745710 $assertEquals $(@expr1073745711 "cppcheck-2.8/test/teststl.cpp" $, 5132 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5133:
5134:
5135: $check_ $(@expr1073745714 "cppcheck-2.8/test/teststl.cpp" $, 5135 $, "std::string GetTaskIDPerUUID(int);\nvoid InitializeJumpList(CString s);\nvoid foo() {\n    CString sAppID = GetTaskIDPerUUID(123).c_str();\n    InitializeJumpList(sAppID);\n}\n" , true $)
5136:
|
5139:
5140: ;
5141: $if $(@expr1073745715 $!@expr1073745716 $assertEquals $(@expr1073745717 "cppcheck-2.8/test/teststl.cpp" $, 5141 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5142:
5143: $check_ $(@expr1073745720 "cppcheck-2.8/test/teststl.cpp" $, 5143 $, "struct A {};\nvoid f() {\n    std::vector<A *> v;\n    A *a = new A();\n    v.push_back(a);\n    A *b = v.back();\n    v.pop_back();\n    delete b;\n}\n" , true $)
5144:
|
5150:
5151: ;
5152: $if $(@expr1073745721 $!@expr1073745722 $assertEquals $(@expr1073745723 "cppcheck-2.8/test/teststl.cpp" $, 5152 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5153:
5154: $check_ $(@expr1073745726 "cppcheck-2.8/test/teststl.cpp" $, 5154 $, "struct A {};\nvoid f() {\n    std::vector<A *, std::allocator<A*>> v;\n    A *a = new A();\n    v.push_back(a);\n    A *b = v.back();\n    v.pop_back();\n    delete b;\n}\n" , true $)
5155:
|
5161:
5162: ;
5163: $if $(@expr1073745727 $!@expr1073745728 $assertEquals $(@expr1073745729 "cppcheck-2.8/test/teststl.cpp" $, 5163 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5164:
5165: $check_ $(@expr1073745732 "cppcheck-2.8/test/teststl.cpp" $, 5165 $, "struct A {};\nvoid f() {\n    std::vector<std::shared_ptr<A>> v;\n    std::shared_ptr<A> a = std::make_shared<A>();\n    v.push_back(a);\n    std::shared_ptr<A> b = v.back();\n    v.pop_back();\n    delete b;\n}\n" , true $)
5166:
|
5172:
5173: ;
5174: $if $(@expr1073745733 $!@expr1073745734 $assertEquals $(@expr1073745735 "cppcheck-2.8/test/teststl.cpp" $, 5174 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5175:
5176:
5177: $check_ $(@expr1073745738 "cppcheck-2.8/test/teststl.cpp" $, 5177 $, "int f() {\n    std::vector<int> vect;\n    MyStruct info{};\n    info.vect = &vect;\n    vect.push_back(1);\n    return info.ret;\n}\n" , true $)
5178:
|
5182:
5183: ;
5184: $if $(@expr1073745739 $!@expr1073745740 $assertEquals $(@expr1073745741 "cppcheck-2.8/test/teststl.cpp" $, 5184 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5185:
5186:
5187: $check_ $(@expr1073745744 "cppcheck-2.8/test/teststl.cpp" $, 5187 $, "struct Fred {\n    std::vector<int> v;\n    void foo();\n    void bar();\n};\nvoid Fred::foo() {\n    std::vector<int>::iterator it = v.begin();\n    bar();\n    it++;\n}\nvoid Fred::bar() {\n    v.push_back(0);\n}\n" , true $)
5188:
|
5199:
5200: ;
5201: $if $(@expr1073745745 $!@expr1073745746 $assertEquals $(@expr1073745747 "cppcheck-2.8/test/teststl.cpp" $, 5201 $, "[test.cpp:7] -> [test.cpp:8] -> [test.cpp:12] -> [test.cpp:9]: (error) Using iterator to member container 'v' that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5202:
5203: ; }
5204:
5205: $check_ $(@expr1073745750 "cppcheck-2.8/test/teststl.cpp" $, 5205 $, "void foo(std::vector<int>& v) {\n    std::vector<int>::iterator it = v.begin();\n    bar(v);\n    it++;\n}\nvoid bar(std::vector<int>& v) {\n    v.push_back(0);\n}\n" , true $)
5206:
|
5212:
5213: ;
5214: $if $(@expr1073745751 $!@expr1073745752 $assertEquals $(@expr1073745753 "cppcheck-2.8/test/teststl.cpp" $, 5214 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:7] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'v' that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5215:
5216: ; }
5217:
5218:
5219: $check_ $(@expr1073745756 "cppcheck-2.8/test/teststl.cpp" $, 5219 $, "void f(std::vector<std::string>& x) {\n  struct I {\n    std::vector<std::string> *px{};\n  };\n  I i = { &x };\n  x.clear();\n  Parse(i);\n}\n" , true $)
5220:
|
5225:
5226: ;
5227: $if $(@expr1073745757 $!@expr1073745758 $assertEquals $(@expr1073745759 "cppcheck-2.8/test/teststl.cpp" $, 5227 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5228:
5229: $check_ $(@expr1073745762 "cppcheck-2.8/test/teststl.cpp" $, 5229 $, "void f() {\n  std::string x;\n  struct V {\n    std::string* pStr{};\n  };\n  struct I {\n    std::vector<V> v;\n  };\n  I b[] = {{{{ &x }}}};\n  x = \"Arial\";\n  I cb[1];\n  for (long i = 0; i < 1; ++i)\n    cb[i] = b[i];\n}\n" , true $)
5230:
|
5241:
5242: ;
5243: $if $(@expr1073745763 $!@expr1073745764 $assertEquals $(@expr1073745765 "cppcheck-2.8/test/teststl.cpp" $, 5243 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5244:
5245:
5246: $check_ $(@expr1073745768 "cppcheck-2.8/test/teststl.cpp" $, 5246 $, "void f() {\n    auto v = std::vector<std::vector<std::string> >{ std::vector<std::string>{ \"hello\" } };\n    auto p = &(v.at(0).at(0));\n    v.clear();\n    std::cout << *p << std::endl;\n}\n" , true $)
5247:
|
5251:
5252: ;
5253: $if $(@expr1073745769 $!@expr1073745770 $assertEquals $(@expr1073745771 "cppcheck-2.8/test/teststl.cpp" $, 5253 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:5]: (error) Using pointer to local variable 'v' that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5254:
5255: ; }
5256:
5257: $check_ $(@expr1073745774 "cppcheck-2.8/test/teststl.cpp" $, 5257 $, "struct A {\n    const std::vector<int>* i;\n    A(const std::vector<int>& v)\n    : i(&v)\n    {}\n};\nint f() {\n    std::vector<int> v;\n    A a{v};\n    v.push_back(1);\n    return a.i->front();\n}\n" , true $)
5258:
|
5268:
5269: ;
5270: $if $(@expr1073745775 $!@expr1073745776 $assertEquals $(@expr1073745777 "cppcheck-2.8/test/teststl.cpp" $, 5270 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5271:
5272: $check_ $(@expr1073745780 "cppcheck-2.8/test/teststl.cpp" $, 5272 $, "struct A {\n    const std::vector<int>* i;\n    A(const std::vector<int>& v)\n    : i(&v)\n    {}\n};\nvoid g(const std::vector<int>& v);\nvoid f() {\n    std::vector<int> v;\n    A a{v};\n    v.push_back(1);\n    g(a);\n}\n" , true $)
5273:
|
5284:
5285: ;
5286: $if $(@expr1073745781 $!@expr1073745782 $assertEquals $(@expr1073745783 "cppcheck-2.8/test/teststl.cpp" $, 5286 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5287:
5288:
5289: $check_ $(@expr1073745786 "cppcheck-2.8/test/teststl.cpp" $, 5289 $, "void f() {\n    std::vector<int> v;\n    auto g = [&v]{};\n    v.push_back(1);\n    g();\n}\n" , true $)
5290:
|
5294:
5295: ;
5296: $if $(@expr1073745787 $!@expr1073745788 $assertEquals $(@expr1073745789 "cppcheck-2.8/test/teststl.cpp" $, 5296 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5297:
5298: $check_ $(@expr1073745792 "cppcheck-2.8/test/teststl.cpp" $, 5298 $, "void f(std::vector<int> v) {\n    auto it = v.begin();\n    auto g = [&]{ std::cout << *it << std::endl;};\n    v.push_back(1);\n    g();\n}\n" , true $)
5299:
|
5303:
5304: ;
5305: $if $(@expr1073745793 $!@expr1073745794 $assertEquals $(@expr1073745795 "cppcheck-2.8/test/teststl.cpp" $, 5305 $, "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'v' that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5306:
5307: ; }
5308:
5309: $check_ $(@expr1073745798 "cppcheck-2.8/test/teststl.cpp" $, 5309 $, "void f(std::vector<int> v) {\n    auto it = v.begin();\n    auto g = [=]{ std::cout << *it << std::endl;};\n    v.push_back(1);\n    g();\n}\n" , true $)
5310:
|
5314:
5315: ;
5316: $if $(@expr1073745799 $!@expr1073745800 $assertEquals $(@expr1073745801 "cppcheck-2.8/test/teststl.cpp" $, 5316 $, "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'v' that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5317:
5318: ; }
5319:
5320: $check_ $(@expr1073745804 "cppcheck-2.8/test/teststl.cpp" $, 5320 $, "struct A {\n    int* p;\n    void g();\n};\nvoid f(std::vector<int> v) {\n    auto it = v.begin();\n    A a{v.data()};\n    v.push_back(1);\n    a.g();\n}\n" , true $)
5321:
|
5329:
5330: ;
5331: $if $(@expr1073745805 $!@expr1073745806 $assertEquals $(@expr1073745807 "cppcheck-2.8/test/teststl.cpp" $, 5331 $, "[test.cpp:7] -> [test.cpp:8] -> [test.cpp:5] -> [test.cpp:9]: (error) Using object that points to local variable 'v' that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5332:
5333: ; }
5334:
5335: $check_ $(@expr1073745810 "cppcheck-2.8/test/teststl.cpp" $, 5335 $, "struct A {\n    int*& p;\n    void g();\n};\nvoid f(std::vector<int> v) {\n    auto* p = v.data();\n    A a{p};\n    v.push_back(1);\n    a.g();\n}\n" , true $)
5336:
|
5344:
5345: ;
5346: $if $(@expr1073745811 $!@expr1073745812 $assertEquals $(@expr1073745813 "cppcheck-2.8/test/teststl.cpp" $, 5346 $, "[test.cpp:6] -> [test.cpp:7] -> [test.cpp:8] -> [test.cpp:5] -> [test.cpp:9]: (error) Using object that points to local variable 'v' that may be invalid.\n" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return
5347:
5348: ; }
5349:
5350:
5351: $check_ $(@expr1073745816 "cppcheck-2.8/test/teststl.cpp" $, 5351 $, "void f(std::vector<int> c) {\n    std::vector<int> d(c.begin(), c.end());\n    c.erase(c.begin());\n    d.push_back(0);\n}\n" , true $)
5352:
|
5355:
5356: ;
5357: $if $(@expr1073745817 $!@expr1073745818 $assertEquals $(@expr1073745819 "cppcheck-2.8/test/teststl.cpp" $, 5357 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5358: }
5359:
5360: void invalidContainerLoop ( ) {
5361:
5362: $check_ $(@expr1073745822 "cppcheck-2.8/test/teststl.cpp" $, 5362 $, "void f(std::vector<int> v) {\n    for (auto i : v) {\n        if (i < 5)\n            v.push_back(i * 2);\n    }\n}\n" , true $)
5363:
|
5367:
5368: ;
5369: $if $(@expr1073745823 $!@expr1073745824 $assertEquals $(@expr1073745825 "cppcheck-2.8/test/teststl.cpp" $, 5369 $, "[test.cpp:2] -> [test.cpp:4]: (error) Calling 'push_back' while iterating the container is invalid.\n" $, errout@var100 .@expr4002 str (@expr4003 ) $) $) { $return ; }
5370:
5371:
5372: $check_ $(@expr1073745828 "cppcheck-2.8/test/teststl.cpp" $, 5372 $, "void f() {\n  std::vector<int> v{1, 2, 3};\n  for (int i : v) {\n    if (i == 2) {\n      v.clear();\n      return;\n    }\n  }\n}\n" , true $)
5373:
|
5380:
5381: ;
5382: $if $(@expr1073745829 $!@expr1073745830 $assertEquals $(@expr1073745831 "cppcheck-2.8/test/teststl.cpp" $, 5382 $, "[test.cpp:4]: (style) Consider using std::any_of algorithm instead of a raw loop.\n" $, errout@var100 .@expr4002 str (@expr4003 ) $) $) { $return ; }
5383:
5384: $check_ $(@expr1073745834 "cppcheck-2.8/test/teststl.cpp" $, 5384 $, "struct A {\n  std::vector<int> v;\n  void add(int i) {\n    v.push_back(i);\n  } \n  void f() {\n    for(auto i:v)\n      add(i);\n  }\n};\n" , true $)
5385:
|
5393:
5394: ;
5395: $if $(@expr1073745835 $!@expr1073745836 $assertEquals $(@expr1073745837 "cppcheck-2.8/test/teststl.cpp" $, 5395 $, "[test.cpp:4] -> [test.cpp:7] -> [test.cpp:8]: (error) Calling 'add' while iterating the container is invalid.\n" $, errout@var100 .@expr4002 str (@expr4003 ) $) $) { $return
5396:
5397: ; }
5398: }
5399:
5400: void findInsert ( ) {
5401: $check_ $(@expr1073745844 "cppcheck-2.8/test/teststl.cpp" $, 5401 $, "void f1(std::set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" , true $)
5402:
|
5405:
5406: ;
5407: $if $(@expr1073745845 $!@expr1073745846 $assertEquals $(@expr1073745847 "cppcheck-2.8/test/teststl.cpp" $, 5407 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5408:
5409: $check_ $(@expr1073745850 "cppcheck-2.8/test/teststl.cpp" $, 5409 $, "void f2(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" , true $)
5410:
|
5415:
5416: ;
5417: $if $(@expr1073745851 $!@expr1073745852 $assertEquals $(@expr1073745853 "cppcheck-2.8/test/teststl.cpp" $, 5417 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5418:
5419: $check_ $(@expr1073745856 "cppcheck-2.8/test/teststl.cpp" $, 5419 $, "void f3(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" , true $)
5420:
|
5423:
5424: ;
5425: $if $(@expr1073745857 $!@expr1073745858 $assertEquals $(@expr1073745859 "cppcheck-2.8/test/teststl.cpp" $, 5425 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5426:
5427: $check_ $(@expr1073745862 "cppcheck-2.8/test/teststl.cpp" $, 5427 $, "void f4(std::set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" , true $)
5428:
|
5431:
5432: ;
5433: $if $(@expr1073745863 $!@expr1073745864 $assertEquals $(@expr1073745865 "cppcheck-2.8/test/teststl.cpp" $, 5433 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5434:
5435: $check_ $(@expr1073745868 "cppcheck-2.8/test/teststl.cpp" $, 5435 $, "void f5(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" , true $)
5436:
|
5441:
5442: ;
5443: $if $(@expr1073745869 $!@expr1073745870 $assertEquals $(@expr1073745871 "cppcheck-2.8/test/teststl.cpp" $, 5443 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5444:
5445: $check_ $(@expr1073745874 "cppcheck-2.8/test/teststl.cpp" $, 5445 $, "void f6(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" , true $)
5446:
|
5449:
5450: ;
5451: $if $(@expr1073745875 $!@expr1073745876 $assertEquals $(@expr1073745877 "cppcheck-2.8/test/teststl.cpp" $, 5451 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5452:
5453: $check_ $(@expr1073745880 "cppcheck-2.8/test/teststl.cpp" $, 5453 $, "void f1(std::unordered_set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" , true $)
5454:
|
5457:
5458: ;
5459: $if $(@expr1073745881 $!@expr1073745882 $assertEquals $(@expr1073745883 "cppcheck-2.8/test/teststl.cpp" $, 5459 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5460:
5461: $check_ $(@expr1073745886 "cppcheck-2.8/test/teststl.cpp" $, 5461 $, "void f2(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" , true $)
5462:
|
5467:
5468: ;
5469: $if $(@expr1073745887 $!@expr1073745888 $assertEquals $(@expr1073745889 "cppcheck-2.8/test/teststl.cpp" $, 5469 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5470:
5471: $check_ $(@expr1073745892 "cppcheck-2.8/test/teststl.cpp" $, 5471 $, "void f3(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" , true $)
5472:
|
5475:
5476: ;
5477: $if $(@expr1073745893 $!@expr1073745894 $assertEquals $(@expr1073745895 "cppcheck-2.8/test/teststl.cpp" $, 5477 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5478:
5479: $check_ $(@expr1073745898 "cppcheck-2.8/test/teststl.cpp" $, 5479 $, "void f4(std::unordered_set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" , true $)
5480:
|
5483:
5484: ;
5485: $if $(@expr1073745899 $!@expr1073745900 $assertEquals $(@expr1073745901 "cppcheck-2.8/test/teststl.cpp" $, 5485 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5486:
5487: $check_ $(@expr1073745904 "cppcheck-2.8/test/teststl.cpp" $, 5487 $, "void f5(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" , true $)
5488:
|
5493:
5494: ;
5495: $if $(@expr1073745905 $!@expr1073745906 $assertEquals $(@expr1073745907 "cppcheck-2.8/test/teststl.cpp" $, 5495 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5496:
5497: $check_ $(@expr1073745910 "cppcheck-2.8/test/teststl.cpp" $, 5497 $, "void f6(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" , true $)
5498:
|
5501:
5502: ;
5503: $if $(@expr1073745911 $!@expr1073745912 $assertEquals $(@expr1073745913 "cppcheck-2.8/test/teststl.cpp" $, 5503 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5504:
5505: $check_ $(@expr1073745916 "cppcheck-2.8/test/teststl.cpp" $, 5505 $, "void g1(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 2;\n    }\n}\n" , true $)
5506:
|
5511:
5512: ;
5513: $if $(@expr1073745917 $!@expr1073745918 $assertEquals $(@expr1073745919 "cppcheck-2.8/test/teststl.cpp" $, 5513 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5514:
5515: $check_ $(@expr1073745922 "cppcheck-2.8/test/teststl.cpp" $, 5515 $, "void g1(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 2;\n    }\n}\n" , true $)
5516:
|
5521:
5522: ;
5523: $if $(@expr1073745923 $!@expr1073745924 $assertEquals $(@expr1073745925 "cppcheck-2.8/test/teststl.cpp" $, 5523 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5524:
5525: $check_ $(@expr1073745928 "cppcheck-2.8/test/teststl.cpp" $, 5525 $, "void f1(QSet<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" , true $)
5526:
|
5529:
5530: ;
5531: $if $(@expr1073745929 $!@expr1073745930 $assertEquals $(@expr1073745931 "cppcheck-2.8/test/teststl.cpp" $, 5531 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5532:
5533: $check_ $(@expr1073745934 "cppcheck-2.8/test/teststl.cpp" $, 5533 $, "void f1(std::multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" , true $)
5534:
|
5537:
5538: ;
5539: $if $(@expr1073745935 $!@expr1073745936 $assertEquals $(@expr1073745937 "cppcheck-2.8/test/teststl.cpp" $, 5539 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5540:
5541: $check_ $(@expr1073745940 "cppcheck-2.8/test/teststl.cpp" $, 5541 $, "void f2(std::multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" , true $)
5542:
|
5547:
5548: ;
5549: $if $(@expr1073745941 $!@expr1073745942 $assertEquals $(@expr1073745943 "cppcheck-2.8/test/teststl.cpp" $, 5549 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5550:
5551: $check_ $(@expr1073745946 "cppcheck-2.8/test/teststl.cpp" $, 5551 $, "void f3(std::multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" , true $)
5552:
|
5555:
5556: ;
5557: $if $(@expr1073745947 $!@expr1073745948 $assertEquals $(@expr1073745949 "cppcheck-2.8/test/teststl.cpp" $, 5557 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5558:
5559: $check_ $(@expr1073745952 "cppcheck-2.8/test/teststl.cpp" $, 5559 $, "void f4(std::multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" , true $)
5560:
|
5563:
5564: ;
5565: $if $(@expr1073745953 $!@expr1073745954 $assertEquals $(@expr1073745955 "cppcheck-2.8/test/teststl.cpp" $, 5565 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5566:
5567: $check_ $(@expr1073745958 "cppcheck-2.8/test/teststl.cpp" $, 5567 $, "void f5(std::multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" , true $)
5568:
|
5573:
5574: ;
5575: $if $(@expr1073745959 $!@expr1073745960 $assertEquals $(@expr1073745961 "cppcheck-2.8/test/teststl.cpp" $, 5575 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5576:
5577: $check_ $(@expr1073745964 "cppcheck-2.8/test/teststl.cpp" $, 5577 $, "void f1(std::unordered_multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" , true $)
5578:
|
5581:
5582: ;
5583: $if $(@expr1073745965 $!@expr1073745966 $assertEquals $(@expr1073745967 "cppcheck-2.8/test/teststl.cpp" $, 5583 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5584:
5585: $check_ $(@expr1073745970 "cppcheck-2.8/test/teststl.cpp" $, 5585 $, "void f2(std::unordered_multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" , true $)
5586:
|
5591:
5592: ;
5593: $if $(@expr1073745971 $!@expr1073745972 $assertEquals $(@expr1073745973 "cppcheck-2.8/test/teststl.cpp" $, 5593 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5594:
5595: $check_ $(@expr1073745976 "cppcheck-2.8/test/teststl.cpp" $, 5595 $, "void f3(std::unordered_multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" , true $)
5596:
|
5599:
5600: ;
5601: $if $(@expr1073745977 $!@expr1073745978 $assertEquals $(@expr1073745979 "cppcheck-2.8/test/teststl.cpp" $, 5601 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5602:
5603: $check_ $(@expr1073745982 "cppcheck-2.8/test/teststl.cpp" $, 5603 $, "void f4(std::unordered_multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" , true $)
5604:
|
5607:
5608: ;
5609: $if $(@expr1073745983 $!@expr1073745984 $assertEquals $(@expr1073745985 "cppcheck-2.8/test/teststl.cpp" $, 5609 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5610:
5611: $check_ $(@expr1073745988 "cppcheck-2.8/test/teststl.cpp" $, 5611 $, "void f5(std::unordered_multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" , true $)
5612:
|
5617:
5618: ;
5619: $if $(@expr1073745989 $!@expr1073745990 $assertEquals $(@expr1073745991 "cppcheck-2.8/test/teststl.cpp" $, 5619 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5620:
5621:
5622: {
5623: const char code@var131 [@expr1073745994 116 ] =@expr1073745995 "void f1(std::set<LargeType>& s, const LargeType& x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
5624:
5625:
5626:
5627: ;
5628: $check_ $(@expr1073745996 "cppcheck-2.8/test/teststl.cpp" $, 5628 $, code@var131 , true , Standards ::@expr4173 CPP11@expr4016 $) ;
5629: $if $(@expr1073745998 $!@expr1073745999 $assertEquals $(@expr1073746000 "cppcheck-2.8/test/teststl.cpp" $, 5629 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5630: $check_ $(@expr1073746003 "cppcheck-2.8/test/teststl.cpp" $, 5630 $, code@var131 , true , Standards ::@expr1073746004 CPP14@expr1073745841 $) ;
5631: $if $(@expr1073746005 $!@expr1073746006 $assertEquals $(@expr1073746007 "cppcheck-2.8/test/teststl.cpp" $, 5631 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5632: $check_ $(@expr1073746010 "cppcheck-2.8/test/teststl.cpp" $, 5632 $, code@var131 , true , Standards ::@expr1073746011 CPP17@expr1073745842 $) ;
5633: $if $(@expr1073746012 $!@expr1073746013 $assertEquals $(@expr1073746014 "cppcheck-2.8/test/teststl.cpp" $, 5633 $, "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5634: }
5635:
5636: {
5637: $check_ $(@expr1073746017 "cppcheck-2.8/test/teststl.cpp" $, 5637 $, "void foo() {\n   std::map<int, int> x;\n   int data = 0;\n   for(int i=0; i<10; ++i) {\n      data += 123;\n      if(x.find(5) == x.end())\n         x[5] = data;\n   }\n}" , false , Standards ::@expr1073746018 CPP03@expr1073745843 $)
5638:
|
5644:
5645: ;
5646: $if $(@expr1073746019 $!@expr1073746020 $assertEquals $(@expr1073746021 "cppcheck-2.8/test/teststl.cpp" $, 5646 $, "" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5647:
5648: $check_ $(@expr1073746024 "cppcheck-2.8/test/teststl.cpp" $, 5648 $, "void foo() {\n   std::map<int, int> x;\n   int data = 0;\n   for(int i=0; i<10; ++i) {\n      data += 123;\n      if(x.find(5) == x.end())\n         x[5] = data;\n   }\n}" , false , Standards ::@expr4173 CPP11@expr4016 $)
5649:
|
5655:
5656: ;
5657: $if $(@expr1073746026 $!@expr1073746027 $assertEquals $(@expr1073746028 "cppcheck-2.8/test/teststl.cpp" $, 5657 $, "[test.cpp:7]: (performance) Searching before insertion is not necessary. Instead of 'x[5]=data' consider using 'x.emplace(5, data);'.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5658:
5659: $check_ $(@expr1073746031 "cppcheck-2.8/test/teststl.cpp" $, 5659 $, "void foo() {\n   std::map<int, int> x;\n   int data = 0;\n   for(int i=0; i<10; ++i) {\n      data += 123;\n      if(x.find(5) == x.end())\n         x[5] = data;\n   }\n}" $)
5660:
|
5666:
5667: ;
5668: $if $(@expr1073746032 $!@expr1073746033 $assertEquals $(@expr1073746034 "cppcheck-2.8/test/teststl.cpp" $, 5668 $, "[test.cpp:7]: (performance) Searching before insertion is not necessary. Instead of 'x[5]=data' consider using 'x.try_emplace(5, data);'.\n" $, errout@var100 .@expr4024 str (@expr4025 ) $) $) { $return ; }
5669: }
5670: }
5671:
5672: void checkKnownEmptyContainer ( ) {
5673: $check_ $(@expr1073746037 "cppcheck-2.8/test/teststl.cpp" $, 5673 $, "void f() {\n    std::vector<int> v;\n    for(auto x:v) {}\n}\n" , true $)
5674:
5675:
5676:
5677: ;
5678: $if $(@expr1073746038 $!@expr1073746039 $assertEquals $(@expr1073746040 "cppcheck-2.8/test/teststl.cpp" $, 5678 $, "[test.cpp:3]: (style) Iterating over container 'v' that is always empty.\n" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5679:
5680: $check_ $(@expr1073746043 "cppcheck-2.8/test/teststl.cpp" $, 5680 $, "void f(std::vector<int> v) {\n    v.clear();\n    for(auto x:v) {}\n}\n" , true $)
5681:
5682:
5683:
5684: ;
5685: $if $(@expr1073746044 $!@expr1073746045 $assertEquals $(@expr1073746046 "cppcheck-2.8/test/teststl.cpp" $, 5685 $, "[test.cpp:3]: (style) Iterating over container 'v' that is always empty.\n" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5686:
5687: $check_ $(@expr1073746049 "cppcheck-2.8/test/teststl.cpp" $, 5687 $, "void f(std::vector<int> v) {\n    if (!v.empty()) { return; }\n    for(auto x:v) {}\n}\n" , true $)
5688:
5689:
5690:
5691: ;
5692: $if $(@expr1073746050 $!@expr1073746051 $assertEquals $(@expr1073746052 "cppcheck-2.8/test/teststl.cpp" $, 5692 $, "[test.cpp:3]: (style) Iterating over container 'v' that is always empty.\n" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5693:
5694: $check_ $(@expr1073746055 "cppcheck-2.8/test/teststl.cpp" $, 5694 $, "void f(std::vector<int> v) {\n    if (v.empty()) { return; }\n    for(auto x:v) {}\n}\n" , true $)
5695:
5696:
5697:
5698: ;
5699: $if $(@expr1073746056 $!@expr1073746057 $assertEquals $(@expr1073746058 "cppcheck-2.8/test/teststl.cpp" $, 5699 $, "" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5700:
5701: $check_ $(@expr1073746061 "cppcheck-2.8/test/teststl.cpp" $, 5701 $, "void f() {\n    std::vector<int> v;\n    std::sort(v.begin(), v.end());\n}\n" , true $)
5702:
5703:
5704:
5705: ;
5706: $if $(@expr1073746062 $!@expr1073746063 $assertEquals $(@expr1073746064 "cppcheck-2.8/test/teststl.cpp" $, 5706 $, "[test.cpp:3]: (style) Using sort with iterator 'v.begin()' that is always empty.\n" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5707:
5708: $check_ $(@expr1073746067 "cppcheck-2.8/test/teststl.cpp" $, 5708 $, "void f() {\n    std::vector<int> v;\n    v.insert(v.end(), 1);\n}\n" , true $)
5709:
5710:
5711:
5712: ;
5713: $if $(@expr1073746068 $!@expr1073746069 $assertEquals $(@expr1073746070 "cppcheck-2.8/test/teststl.cpp" $, 5713 $, "" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5714:
5715: $check_ $(@expr1073746073 "cppcheck-2.8/test/teststl.cpp" $, 5715 $, "struct A {\n    explicit A(std::vector<int>*);\n};\nA f() {\n    std::vector<int> v;\n    A a(&v);\n    for(auto&& x:v) {}\n    return a;\n}\n" , true $)
5716:
|
5723:
5724: ;
5725: $if $(@expr1073746074 $!@expr1073746075 $assertEquals $(@expr1073746076 "cppcheck-2.8/test/teststl.cpp" $, 5725 $, "" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5726:
5727: $check_ $(@expr1073746079 "cppcheck-2.8/test/teststl.cpp" $, 5727 $, "static void f1(std::list<std::string>& parameters) {\n    parameters.push_back(a);\n}\nint f2(std::list<std::string>& parameters) {\n    f1(parameters);\n}\nvoid f3() {\n    std::list<std::string> parameters;\n    int res = ::f2(parameters);\n    for (auto param : parameters) {}\n}\n" , true $)
5728:
|
5737:
5738: ;
5739: $if $(@expr1073746080 $!@expr1073746081 $assertEquals $(@expr1073746082 "cppcheck-2.8/test/teststl.cpp" $, 5739 $, "" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5740:
5741: $check_ $(@expr1073746085 "cppcheck-2.8/test/teststl.cpp" $, 5741 $, "namespace ns {\n    using ArrayType = std::vector<int>;\n}\nusing namespace ns;\nstatic void f() {\n    const ArrayType arr;\n    for (const auto &a : arr) {}\n}" , true $)
5742:
|
5748:
5749: ;
5750: $if $(@expr1073746086 $!@expr1073746087 $assertEquals $(@expr1073746088 "cppcheck-2.8/test/teststl.cpp" $, 5750 $, "[test.cpp:7]: (style) Iterating over container 'arr' that is always empty.\n" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5751:
5752: $check_ $(@expr1073746091 "cppcheck-2.8/test/teststl.cpp" $, 5752 $, "struct S {\n    std::vector<int> v;\n};\nvoid foo(S& s) {\n    s.v.clear();\n    bar(s);\n    std::sort(s.v.begin(), s.v.end());\n}\n" , true $)
5753:
|
5759:
5760: ;
5761: $if $(@expr1073746092 $!@expr1073746093 $assertEquals $(@expr1073746094 "cppcheck-2.8/test/teststl.cpp" $, 5761 $, "" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5762:
5763: $check_ $(@expr1073746097 "cppcheck-2.8/test/teststl.cpp" $, 5763 $, "void f(const std::vector<int>& v, int e) {\n if (!v.empty()) {\n     if (e < 0 || true) {\n         if (e < 0)\n             return;\n     }\n }\n for (auto i : v) {}\n}\n" , true $)
5764:
|
5771:
5772: ;
5773: $if $(@expr1073746098 $!@expr1073746099 $assertEquals $(@expr1073746100 "cppcheck-2.8/test/teststl.cpp" $, 5773 $, "" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5774:
5775: $check_ $(@expr1073746103 "cppcheck-2.8/test/teststl.cpp" $, 5775 $, "void f() {\n    std::vector<int> v;\n    auto& rv = v;\n    rv.push_back(42);\n    for (auto i : v) {}\n}\n" , true $)
5776:
|
5780:
5781: ;
5782: $if $(@expr1073746104 $!@expr1073746105 $assertEquals $(@expr1073746106 "cppcheck-2.8/test/teststl.cpp" $, 5782 $, "" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5783:
5784: $check_ $(@expr1073746109 "cppcheck-2.8/test/teststl.cpp" $, 5784 $, "extern void f(std::string&&);\nstatic void func() {\n    std::string s;\n    const std::string& s_ref = s;\n    f(std::move(s));\n}\n" , true $)
5785:
|
5789:
5790: ;
5791: $if $(@expr1073746110 $!@expr1073746111 $assertEquals $(@expr1073746112 "cppcheck-2.8/test/teststl.cpp" $, 5791 $, "" $, errout@var100 .@expr4217 str (@expr4218 ) $) $) { $return ; }
5792: }
5793:
5794: void checkMutexes ( ) {
5795: $check_ $(@expr1073746115 "cppcheck-2.8/test/teststl.cpp" $, 5795 $, "void f() {\n    static std::mutex m;\n    static std::lock_guard<std::mutex> g(m);\n}\n" , true $)
5796:
5797:
5798:
5799: ;
5800: $if $(@expr1073746116 $!@expr1073746117 $assertEquals $(@expr1073746118 "cppcheck-2.8/test/teststl.cpp" $, 5800 $, "[test.cpp:3]: (warning) Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.\n" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5801:
5802: $check_ $(@expr1073746121 "cppcheck-2.8/test/teststl.cpp" $, 5802 $, "void f() {\n    static std::mutex m;\n    std::lock_guard<std::mutex> g(m);\n}\n" , true $)
5803:
5804:
5805:
5806: ;
5807: $if $(@expr1073746122 $!@expr1073746123 $assertEquals $(@expr1073746124 "cppcheck-2.8/test/teststl.cpp" $, 5807 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5808:
5809: $check_ $(@expr1073746127 "cppcheck-2.8/test/teststl.cpp" $, 5809 $, "void f() {\n    static std::mutex m;\n    static std::unique_lock<std::mutex> g(m, std::defer_lock);\n    static std::lock(g);\n}\n" , true $)
5810:
|
5813:
5814: ;
5815: $if $(@expr1073746128 $!@expr1073746129 $assertEquals $(@expr1073746130 "cppcheck-2.8/test/teststl.cpp" $, 5815 $, "[test.cpp:3]: (warning) Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.\n" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5816:
5817: $check_ $(@expr1073746133 "cppcheck-2.8/test/teststl.cpp" $, 5817 $, "void f() {\n    static std::mutex m;\n    std::unique_lock<std::mutex> g(m, std::defer_lock);\n    std::lock(g);\n}\n" , true $)
5818:
|
5821:
5822: ;
5823: $if $(@expr1073746134 $!@expr1073746135 $assertEquals $(@expr1073746136 "cppcheck-2.8/test/teststl.cpp" $, 5823 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5824:
5825: $check_ $(@expr1073746139 "cppcheck-2.8/test/teststl.cpp" $, 5825 $, "void f() {\n    std::mutex m;\n    std::lock_guard<std::mutex> g(m);\n}\n" , true $)
5826:
5827:
5828:
5829: ;
5830: $if $(@expr1073746140 $!@expr1073746141 $assertEquals $(@expr1073746142 "cppcheck-2.8/test/teststl.cpp" $, 5830 $, "[test.cpp:3]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5831:
5832: $check_ $(@expr1073746145 "cppcheck-2.8/test/teststl.cpp" $, 5832 $, "void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> g(m);\n}\n" , true $)
5833:
5834:
5835:
5836: ;
5837: $if $(@expr1073746146 $!@expr1073746147 $assertEquals $(@expr1073746148 "cppcheck-2.8/test/teststl.cpp" $, 5837 $, "[test.cpp:3]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5838:
5839: $check_ $(@expr1073746151 "cppcheck-2.8/test/teststl.cpp" $, 5839 $, "void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> g(m, std::defer_lock);\n    std::lock(g);\n}\n" , true $)
5840:
|
5843:
5844: ;
5845: $if $(@expr1073746152 $!@expr1073746153 $assertEquals $(@expr1073746154 "cppcheck-2.8/test/teststl.cpp" $, 5845 $, "[test.cpp:3]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5846:
5847: $check_ $(@expr1073746157 "cppcheck-2.8/test/teststl.cpp" $, 5847 $, "void g();\nvoid f() {\n    static std::mutex m;\n    m.lock();\n    g();\n    m.unlock();\n}\n" , true $)
5848:
|
5853:
5854: ;
5855: $if $(@expr1073746158 $!@expr1073746159 $assertEquals $(@expr1073746160 "cppcheck-2.8/test/teststl.cpp" $, 5855 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5856:
5857: $check_ $(@expr1073746163 "cppcheck-2.8/test/teststl.cpp" $, 5857 $, "void g();\nvoid f() {\n    std::mutex m;\n    m.lock();\n    g();\n    m.unlock();\n}\n" , true $)
5858:
|
5863:
5864: ;
5865: $if $(@expr1073746164 $!@expr1073746165 $assertEquals $(@expr1073746166 "cppcheck-2.8/test/teststl.cpp" $, 5865 $, "[test.cpp:4]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5866:
5867: $check_ $(@expr1073746169 "cppcheck-2.8/test/teststl.cpp" $, 5867 $, "class A {\n    std::mutex m;\n    void f() {\n        std::lock_guard<std::mutex> g(m);\n    }\n};\n" , true $)
5868:
|
5872:
5873: ;
5874: $if $(@expr1073746170 $!@expr1073746171 $assertEquals $(@expr1073746172 "cppcheck-2.8/test/teststl.cpp" $, 5874 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5875:
5876: $check_ $(@expr1073746175 "cppcheck-2.8/test/teststl.cpp" $, 5876 $, "class A {\n    std::mutex m;\n    void g();\n    void f() {\n        m.lock();\n        g();\n        m.unlock();\n    }\n};\n" , true $)
5877:
|
5884:
5885: ;
5886: $if $(@expr1073746176 $!@expr1073746177 $assertEquals $(@expr1073746178 "cppcheck-2.8/test/teststl.cpp" $, 5886 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5887:
5888: $check_ $(@expr1073746181 "cppcheck-2.8/test/teststl.cpp" $, 5888 $, "class A {\n    std::mutex m;\n    void f() {\n        static std::lock_guard<std::mutex> g(m);\n    }\n};\n" , true $)
5889:
|
5893:
5894: ;
5895: $if $(@expr1073746182 $!@expr1073746183 $assertEquals $(@expr1073746184 "cppcheck-2.8/test/teststl.cpp" $, 5895 $, "[test.cpp:4]: (warning) Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.\n" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5896:
5897: $check_ $(@expr1073746187 "cppcheck-2.8/test/teststl.cpp" $, 5897 $, "std::mutex& h();\nvoid f() {\n    auto& m = h();\n    std::lock_guard<std::mutex> g(m);\n}\n" , true $)
5898:
|
5901:
5902: ;
5903: $if $(@expr1073746188 $!@expr1073746189 $assertEquals $(@expr1073746190 "cppcheck-2.8/test/teststl.cpp" $, 5903 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5904:
5905: $check_ $(@expr1073746193 "cppcheck-2.8/test/teststl.cpp" $, 5905 $, "void g();\nstd::mutex& h();\nvoid f() {\n    auto& m = h();\n    m.lock();\n    g();\n    m.unlock();\n}\n" , true $)
5906:
|
5912:
5913: ;
5914: $if $(@expr1073746194 $!@expr1073746195 $assertEquals $(@expr1073746196 "cppcheck-2.8/test/teststl.cpp" $, 5914 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5915:
5916: $check_ $(@expr1073746199 "cppcheck-2.8/test/teststl.cpp" $, 5916 $, "std::mutex& h();\nvoid f() {\n    auto m = h();\n    std::lock_guard<std::mutex> g(m);\n}\n" , true $)
5917:
|
5920:
5921: ;
5922: $if $(@expr1073746200 $!@expr1073746201 $assertEquals $(@expr1073746202 "cppcheck-2.8/test/teststl.cpp" $, 5922 $, "[test.cpp:4]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5923:
5924: $check_ $(@expr1073746205 "cppcheck-2.8/test/teststl.cpp" $, 5924 $, "void g();\nstd::mutex& h();\nvoid f() {\n    auto m = h();\n    m.lock();\n    g();\n    m.unlock();\n}\n" , true $)
5925:
|
5931:
5932: ;
5933: $if $(@expr1073746206 $!@expr1073746207 $assertEquals $(@expr1073746208 "cppcheck-2.8/test/teststl.cpp" $, 5933 $, "[test.cpp:5]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5934:
5935: $check_ $(@expr1073746211 "cppcheck-2.8/test/teststl.cpp" $, 5935 $, "void foo();\nvoid bar();\nvoid f() {\n    std::mutex m;\n    std::thread t([&m](){\n        m.lock();\n        foo();\n        m.unlock();\n    });\n    m.lock();\n    bar();\n    m.unlock();\n}\n" , true $)
5936:
|
5947:
5948: ;
5949: $if $(@expr1073746212 $!@expr1073746213 $assertEquals $(@expr1073746214 "cppcheck-2.8/test/teststl.cpp" $, 5949 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5950:
5951: $check_ $(@expr1073746217 "cppcheck-2.8/test/teststl.cpp" $, 5951 $, "void foo();\nvoid bar();\nvoid f() {\n    std::mutex m;\n    std::thread t([&m](){\n        std::unique_lock<std::mutex> g{m};\n        foo();\n    });\n    std::unique_lock<std::mutex> g{m};\n    bar();\n}\n" , true $)
5952:
|
5961:
5962: ;
5963: $if $(@expr1073746218 $!@expr1073746219 $assertEquals $(@expr1073746220 "cppcheck-2.8/test/teststl.cpp" $, 5963 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5964:
5965: $check_ $(@expr1073746223 "cppcheck-2.8/test/teststl.cpp" $, 5965 $, "void foo() { int f = 0; auto g(f); g = g; }" $) ;
5966: $if $(@expr1073746224 $!@expr1073746225 $assertEquals $(@expr1073746226 "cppcheck-2.8/test/teststl.cpp" $, 5966 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5967:
5968: $check_ $(@expr1073746229 "cppcheck-2.8/test/teststl.cpp" $, 5968 $, "struct foobar {\n    int foo;\n    std::shared_mutex foo_mtx;\n    int bar;\n    std::shared_mutex bar_mtx;\n};\nvoid f() {\n    foobar xyz;\n    {\n        std::shared_lock shared_foo_lock(xyz.foo_mtx, std::defer_lock);\n        std::shared_lock shared_bar_lock(xyz.bar_mtx, std::defer_lock);\n        std::scoped_lock shared_multi_lock(shared_foo_lock, shared_bar_lock);\n    }\n}\n" $)
5969:
|
5980:
5981: ;
5982: $if $(@expr1073746230 $!@expr1073746231 $assertEquals $(@expr1073746232 "cppcheck-2.8/test/teststl.cpp" $, 5982 $, "" $, errout@var100 .@expr4295 str (@expr4296 ) $) $) { $return ; }
5983: }
5984: } ;
5985:
5986: $namespace ${ TestStl instance_TestStl@var132 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@90}
  v {!<=-1,!>=2,0@90}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 33
  "TestStl" always "TestStl"
Line 42
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 44
  ( always {!<=-1,!>=2}
  "outOfBounds" always "outOfBounds"
  false always 0
  false always 0
Line 45
  ( always {!<=-1,!>=2}
  "outOfBoundsSymbolic" always "outOfBoundsSymbolic"
  false always 0
  false always 0
Line 46
  ( always {!<=-1,!>=2}
  "outOfBoundsIndexExpression" always "outOfBoundsIndexExpression"
  false always 0
  false always 0
Line 47
  ( always {!<=-1,!>=2}
  "outOfBoundsIterator" always "outOfBoundsIterator"
  false always 0
  false always 0
Line 49
  ( always {!<=-1,!>=2}
  "iterator1" always "iterator1"
  false always 0
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "iterator2" always "iterator2"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "iterator3" always "iterator3"
  false always 0
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "iterator4" always "iterator4"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "iterator5" always "iterator5"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "iterator6" always "iterator6"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "iterator7" always "iterator7"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "iterator8" always "iterator8"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "iterator9" always "iterator9"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "iterator10" always "iterator10"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "iterator11" always "iterator11"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "iterator12" always "iterator12"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "iterator13" always "iterator13"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "iterator14" always "iterator14"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "iterator15" always "iterator15"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "iterator16" always "iterator16"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "iterator17" always "iterator17"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "iterator18" always "iterator18"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "iterator19" always "iterator19"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "iterator20" always "iterator20"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "iterator21" always "iterator21"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "iterator22" always "iterator22"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "iterator23" always "iterator23"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "iterator24" always "iterator24"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "iterator25" always "iterator25"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "iterator26" always "iterator26"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "iterator27" always "iterator27"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "iterator28" always "iterator28"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "iteratorExpression" always "iteratorExpression"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "iteratorSameExpression" always "iteratorSameExpression"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "mismatchingContainerIterator" always "mismatchingContainerIterator"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "dereference" always "dereference"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "dereference_break" always "dereference_break"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "dereference_member" always "dereference_member"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "STLSize" always "STLSize"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "STLSizeNoErr" always "STLSizeNoErr"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "negativeIndex" always "negativeIndex"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "erase1" always "erase1"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "erase2" always "erase2"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "erase3" always "erase3"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "erase4" always "erase4"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "erase5" always "erase5"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "erase6" always "erase6"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "eraseBreak" always "eraseBreak"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "eraseContinue" always "eraseContinue"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "eraseReturn1" always "eraseReturn1"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "eraseReturn2" always "eraseReturn2"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "eraseReturn3" always "eraseReturn3"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "eraseGoto" always "eraseGoto"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "eraseAssign1" always "eraseAssign1"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "eraseAssign2" always "eraseAssign2"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "eraseAssign3" always "eraseAssign3"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "eraseAssign4" always "eraseAssign4"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "eraseAssignByFunctionCall" always "eraseAssignByFunctionCall"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "eraseErase" always "eraseErase"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "eraseByValue" always "eraseByValue"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "eraseIf" always "eraseIf"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "eraseOnVector" always "eraseOnVector"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "pushback1" always "pushback1"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "pushback2" always "pushback2"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "pushback3" always "pushback3"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "pushback4" always "pushback4"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "pushback5" always "pushback5"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "pushback6" always "pushback6"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "pushback7" always "pushback7"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "pushback8" always "pushback8"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "pushback9" always "pushback9"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "pushback10" always "pushback10"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "pushback11" always "pushback11"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "pushback12" always "pushback12"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "pushback13" always "pushback13"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "insert1" always "insert1"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "insert2" always "insert2"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "stlBoundaries1" always "stlBoundaries1"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "stlBoundaries2" always "stlBoundaries2"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "stlBoundaries3" always "stlBoundaries3"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "stlBoundaries4" always "stlBoundaries4"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "stlBoundaries5" always "stlBoundaries5"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "stlBoundaries6" always "stlBoundaries6"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "if_find" always "if_find"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "if_str_find" always "if_str_find"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "size1" always "size1"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "size2" always "size2"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "size3" always "size3"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "size4" always "size4"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "redundantCondition1" always "redundantCondition1"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "missingInnerComparison1" always "missingInnerComparison1"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "missingInnerComparison2" always "missingInnerComparison2"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "missingInnerComparison3" always "missingInnerComparison3"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "missingInnerComparison4" always "missingInnerComparison4"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "missingInnerComparison5" always "missingInnerComparison5"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "missingInnerComparison6" always "missingInnerComparison6"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "cstr" always "cstr"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "uselessCalls" always "uselessCalls"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "stabilityOfChecks" always "stabilityOfChecks"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "dereferenceInvalidIterator" always "dereferenceInvalidIterator"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "dereferenceInvalidIterator2" always "dereferenceInvalidIterator2"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "dereference_auto" always "dereference_auto"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "loopAlgoElementAssign" always "loopAlgoElementAssign"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "loopAlgoAccumulateAssign" always "loopAlgoAccumulateAssign"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "loopAlgoContainerInsert" always "loopAlgoContainerInsert"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "loopAlgoIncrement" always "loopAlgoIncrement"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "loopAlgoConditional" always "loopAlgoConditional"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "loopAlgoMinMax" always "loopAlgoMinMax"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "invalidContainer" always "invalidContainer"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "invalidContainerLoop" always "invalidContainerLoop"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "findInsert" always "findInsert"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "checkKnownEmptyContainer" always "checkKnownEmptyContainer"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "checkMutexes" always "checkMutexes"
  false always 0
  false always 0
Line 180
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 182
  "" always ""
Line 184
  inconclusive {!<=-1,!>=2,1@1,0@62}
Line 189
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 190
  code inconclusive {"void f() {\n    static std::mutex m;\n    static std::lock_guard<std::mutex> g(m);\n}\n"@1,"void f() {\n    static std::mutex m;\n    std::lock_guard<std::mutex> g(m);\n}\n"@2,"void f() {\n    static std::mutex m;\n    static std::unique_lock<std::mutex> g(m, std::defer_lock);\n    static std::lock(g);\n}\n"@3,"void f() {\n    static std::mutex m;\n    std::unique_lock<std::mutex> g(m, std::defer_lock);\n    std::lock(g);\n}\n"@4,"void f() {\n    std::mutex m;\n    std::lock_guard<std::mutex> g(m);\n}\n"@5,"void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> g(m);\n}\n"@6,"void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> g(m, std::defer_lock);\n    std::lock(g);\n}\n"@7,"void g();\nvoid f() {\n    static std::mutex m;\n    m.lock();\n    g();\n    m.unlock();\n}\n"@8,"void g();\nvoid f() {\n    std::mutex m;\n    m.lock();\n    g();\n    m.unlock();\n}\n"@9,"class A {\n    std::mutex m;\n    void f() {\n        std::lock_guard<std::mutex> g(m);\n    }\n};\n"@10}
Line 192
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 194
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/teststl.cpp"@1,"cppcheck-2.8/test/teststl.cpp"@2,"cppcheck-2.8/test/teststl.cpp"@3,"cppcheck-2.8/test/teststl.cpp"@4,"cppcheck-2.8/test/teststl.cpp"@5,"cppcheck-2.8/test/teststl.cpp"@6,"cppcheck-2.8/test/teststl.cpp"@7,"cppcheck-2.8/test/teststl.cpp"@8,"cppcheck-2.8/test/teststl.cpp"@9,"cppcheck-2.8/test/teststl.cpp"@10}
  line inconclusive {5795@1,5802@2,5809@3,5817@4,5825@5,5832@6,5839@7,5847@8,5857@9,5867@10}
  "test.cpp" always "test.cpp"
Line 195
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 198
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 199
  file possible "cppcheck-2.8/test/teststl.cpp"@79
  line possible 3017@79
  ( {lifetime[Object]=(code),!0}
  inconclusive always {!<=-1,!>=2}
Line 205
  "" always ""
Line 208
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 209
  code possible {"void f(std::string s) {\n  s[s.size()] = 1;\n}"@17,"void f(std::string s) {\n  s[s.size()+1] = 1;\n}"@18,"void f(std::string s) {\n  s[1+s.size()] = 1;\n}"@19,"void f(std::string s) {\n  s[x*s.size()] = 1;\n}"@20,"bool f(const int a, const int b)\n{\n    std::cout << a << b;\n    return true;\n}\nvoid f(const std::vector<int> &v)\n{\n    if(v.size() >=2 &&\n            bar(v[2], v[3]) )\n    {;}\n}\n"@23,"void f() {\n  std::string s;\n  s[10] = 1;\n}"@24,"void f() {\n  std::string s = \"abcd\";\n  s[10] = 1;\n}"@25,"void f(std::vector<int> v) {\n    v.front();\n    if (v.empty()) {}\n}"@26,"void f(std::vector<int> v) {\n    if (v.size() == 3) {}\n    v[16] = 0;\n}"@27,"void f(std::vector<int> v) {\n    int i = 16;\n    if (v.size() == 3) {\n        v[i] = 0;\n    }\n}"@28}
Line 210
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/teststl.cpp"@17,"cppcheck-2.8/test/teststl.cpp"@18,"cppcheck-2.8/test/teststl.cpp"@19,"cppcheck-2.8/test/teststl.cpp"@20,"cppcheck-2.8/test/teststl.cpp"@23,"cppcheck-2.8/test/teststl.cpp"@24,"cppcheck-2.8/test/teststl.cpp"@25,"cppcheck-2.8/test/teststl.cpp"@26,"cppcheck-2.8/test/teststl.cpp"@27,"cppcheck-2.8/test/teststl.cpp"@28}
  line inconclusive {874@17,879@18,884@19,889@20,220@23,238@24,244@25,250@26,258@27,266@28}
  "test.cpp" always "test.cpp"
Line 213
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 214
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 220
  "bool f(const int a, const int b)\n{\n    std::cout << a << b;\n    return true;\n}\nvoid f(const std::vector<int> &v)\n{\n    if(v.size() >=2 &&\n            bar(v[2], v[3]) )\n    {;}\n}\n" always "bool f(const int a, const int b)\n{\n    std::cout << a << b;\n    return true;\n}\nvoid f(const std::vector<int> &v)\n{\n    if(v.size() >=2 &&\n            bar(v[2], v[3]) )\n    {;}\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  220 always 220
Line 231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  231 always 231
  "test.cpp:9:warning:Either the condition 'v.size()>=2' is redundant or v size can be 2. Expression 'v[2]' cause access out of bounds.\ntest.cpp:8:note:condition 'v.size()>=2'\ntest.cpp:9:note:Access out of bounds\ntest.cpp:9:warning:Either the condition 'v.size()>=2' is redundant or v size can be 2. Expression 'v[3]' cause access out of bounds.\ntest.cpp:8:note:condition 'v.size()>=2'\ntest.cpp:9:note:Access out of bounds\n" always "test.cpp:9:warning:Either the condition 'v.size()>=2' is redundant or v size can be 2. Expression 'v[2]' cause access out of bounds.\ntest.cpp:8:note:condition 'v.size()>=2'\ntest.cpp:9:note:Access out of bounds\ntest.cpp:9:warning:Either the condition 'v.size()>=2' is redundant or v size can be 2. Expression 'v[3]' cause access out of bounds.\ntest.cpp:8:note:condition 'v.size()>=2'\ntest.cpp:9:note:Access out of bounds\n"
Line 238
  "void f() {\n  std::string s;\n  s[10] = 1;\n}" always "void f() {\n  std::string s;\n  s[10] = 1;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  238 always 238
Line 242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  242 always 242
  "test.cpp:3:error:Out of bounds access in expression 's[10]' because 's' is empty.\n" always "test.cpp:3:error:Out of bounds access in expression 's[10]' because 's' is empty.\n"
Line 244
  "void f() {\n  std::string s = \"abcd\";\n  s[10] = 1;\n}" always "void f() {\n  std::string s = \"abcd\";\n  s[10] = 1;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  244 always 244
Line 248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  248 always 248
  "test.cpp:3:error:Out of bounds access in 's[10]', if 's' size is 4 and '10' is 10\n" always "test.cpp:3:error:Out of bounds access in 's[10]', if 's' size is 4 and '10' is 10\n"
Line 250
  "void f(std::vector<int> v) {\n    v.front();\n    if (v.empty()) {}\n}" always "void f(std::vector<int> v) {\n    v.front();\n    if (v.empty()) {}\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  250 always 250
Line 254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  254 always 254
  "test.cpp:2:warning:Either the condition 'v.empty()' is redundant or expression 'v.front()' cause access out of bounds.\ntest.cpp:3:note:condition 'v.empty()'\ntest.cpp:2:note:Access out of bounds\n" always "test.cpp:2:warning:Either the condition 'v.empty()' is redundant or expression 'v.front()' cause access out of bounds.\ntest.cpp:3:note:condition 'v.empty()'\ntest.cpp:2:note:Access out of bounds\n"
Line 258
  "void f(std::vector<int> v) {\n    if (v.size() == 3) {}\n    v[16] = 0;\n}" always "void f(std::vector<int> v) {\n    if (v.size() == 3) {}\n    v[16] = 0;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  258 always 258
Line 262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  262 always 262
  "test.cpp:3:warning:Either the condition 'v.size()==3' is redundant or v size can be 3. Expression 'v[16]' cause access out of bounds.\ntest.cpp:2:note:condition 'v.size()==3'\ntest.cpp:3:note:Access out of bounds\n" always "test.cpp:3:warning:Either the condition 'v.size()==3' is redundant or v size can be 3. Expression 'v[16]' cause access out of bounds.\ntest.cpp:2:note:condition 'v.size()==3'\ntest.cpp:3:note:Access out of bounds\n"
Line 266
  "void f(std::vector<int> v) {\n    int i = 16;\n    if (v.size() == 3) {\n        v[i] = 0;\n    }\n}" always "void f(std::vector<int> v) {\n    int i = 16;\n    if (v.size() == 3) {\n        v[i] = 0;\n    }\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  266 always 266
Line 272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  272 always 272
  "test.cpp:4:warning:Either the condition 'v.size()==3' is redundant or v size can be 3. Expression 'v[i]' cause access out of bounds.\ntest.cpp:3:note:condition 'v.size()==3'\ntest.cpp:4:note:Access out of bounds\n" always "test.cpp:4:warning:Either the condition 'v.size()==3' is redundant or v size can be 3. Expression 'v[i]' cause access out of bounds.\ntest.cpp:3:note:condition 'v.size()==3'\ntest.cpp:4:note:Access out of bounds\n"
Line 276
  "void f(std::vector<int> v, int i) {\n    if (v.size() == 3 || i == 16) {}\n    v[i] = 0;\n}" always "void f(std::vector<int> v, int i) {\n    if (v.size() == 3 || i == 16) {}\n    v[i] = 0;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  276 always 276
Line 280
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  280 always 280
  "" always ""
Line 282
  "void f(std::map<int,int> x) {\n    if (x.empty()) { x[1] = 2; }\n}" always "void f(std::map<int,int> x) {\n    if (x.empty()) { x[1] = 2; }\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  282 always 282
Line 285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  285 always 285
  "" always ""
Line 287
  "void f(std::string s) {\n    if (s.size() == 1) {\n        s[2] = 0;\n    }\n}" always "void f(std::string s) {\n    if (s.size() == 1) {\n        s[2] = 0;\n    }\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  287 always 287
Line 292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  292 always 292
  "test.cpp:3:warning:Either the condition 's.size()==1' is redundant or s size can be 1. Expression 's[2]' cause access out of bounds.\ntest.cpp:2:note:condition 's.size()==1'\ntest.cpp:3:note:Access out of bounds\n" always "test.cpp:3:warning:Either the condition 's.size()==1' is redundant or s size can be 1. Expression 's[2]' cause access out of bounds.\ntest.cpp:2:note:condition 's.size()==1'\ntest.cpp:3:note:Access out of bounds\n"
Line 297
  "void a() {\n  std::string b[];\n  for (auto c : b)\n    c.data();\n}" always "void a() {\n  std::string b[];\n  for (auto c : b)\n    c.data();\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  297 always 297
Line 302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  302 always 302
  "" always ""
Line 304
  "std::string f(std::string x) {\n  if (x.empty()) return {};\n  x[0];\n}" always "std::string f(std::string x) {\n  if (x.empty()) return {};\n  x[0];\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  304 always 304
Line 308
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  308 always 308
  "" always ""
Line 310
  "std::string f(std::string x) {\n  if (x.empty()) return std::string{};\n  x[0];\n}" always "std::string f(std::string x) {\n  if (x.empty()) return std::string{};\n  x[0];\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  310 always 310
Line 314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  314 always 314
  "" always ""
Line 316
  "void f() {\n  std::string s;\n  x = s.begin() + 1;\n}" always "void f() {\n  std::string s;\n  x = s.begin() + 1;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  316 always 316
Line 320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  320 always 320
  "test.cpp:3:error:Out of bounds access in expression 's.begin()+1' because 's' is empty.\n" always "test.cpp:3:error:Out of bounds access in expression 's.begin()+1' because 's' is empty.\n"
Line 322
  "void f(int x) {\n  std::string s;\n  x = s.begin() + x;\n}" always "void f(int x) {\n  std::string s;\n  x = s.begin() + x;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  322 always 322
Line 326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  326 always 326
  "test.cpp:3:error:Out of bounds access in expression 's.begin()+x' because 's' is empty and 'x' may be non-zero.\n" always "test.cpp:3:error:Out of bounds access in expression 's.begin()+x' because 's' is empty and 'x' may be non-zero.\n"
Line 328
  "char fstr1(){const std::string s = \"<a><b>\"; return s[42]; }\nwchar_t fwstr1(){const std::wstring s = L\"<a><b>\"; return s[42]; }" always "char fstr1(){const std::string s = \"<a><b>\"; return s[42]; }\nwchar_t fwstr1(){const std::wstring s = L\"<a><b>\"; return s[42]; }"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  328 always 328
Line 330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  330 always 330
  "test.cpp:1:error:Out of bounds access in 's[42]', if 's' size is 6 and '42' is 42\ntest.cpp:2:error:Out of bounds access in 's[42]', if 's' size is 6 and '42' is 42\n" always "test.cpp:1:error:Out of bounds access in 's[42]', if 's' size is 6 and '42' is 42\ntest.cpp:2:error:Out of bounds access in 's[42]', if 's' size is 6 and '42' is 42\n"
Line 333
  "char fstr1(){const std::string s = \"<a><b>\"; return s[1]; }\nwchar_t fwstr1(){const std::wstring s = L\"<a><b>\"; return s[1]; }" always "char fstr1(){const std::string s = \"<a><b>\"; return s[1]; }\nwchar_t fwstr1(){const std::wstring s = L\"<a><b>\"; return s[1]; }"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  333 always 333
Line 335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  335 always 335
  "" always ""
Line 337
  "int f() {\n    std::vector<int> v;\n    std::vector<int> * pv = &v;\n    return (*pv)[42];\n}" always "int f() {\n    std::vector<int> v;\n    std::vector<int> * pv = &v;\n    return (*pv)[42];\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  337 always 337
Line 342
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  342 always 342
  "test.cpp:4:error:Out of bounds access in expression '(*pv)[42]' because '*pv' is empty.\n" always "test.cpp:4:error:Out of bounds access in expression '(*pv)[42]' because '*pv' is empty.\n"
Line 344
  "void f() {\n  std::string s;\n  ++abc[s];\n}" always "void f() {\n  std::string s;\n  ++abc[s];\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  344 always 344
Line 348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  348 always 348
  "" always ""
Line 351
  "char f(bool b) {\n    const std::string s = \"<a><b>\";\n    int x = 6;\n    if(b) ++x;\n    return s[x];\n}" always "char f(bool b) {\n    const std::string s = \"<a><b>\";\n    int x = 6;\n    if(b) ++x;\n    return s[x];\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  351 always 351
Line 357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  357 always 357
  "test.cpp:5:error:Out of bounds access in 's[x]', if 's' size is 6 and 'x' is 6\n" always "test.cpp:5:error:Out of bounds access in 's[x]', if 's' size is 6 and 'x' is 6\n"
Line 359
  "void f() {\n    static const int N = 4;\n    std::array<int, N> x;\n    x[0] = 0;\n}" always "void f() {\n    static const int N = 4;\n    std::array<int, N> x;\n    x[0] = 0;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  359 always 359
Line 364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  364 always 364
  "" always ""
Line 366
  "void f(bool b) {\n    std::vector<int> x;\n    if (b)\n        x.push_back(1);\n    if (x.size() < 2)\n        return;\n    x[0] = 2;\n}\n" always "void f(bool b) {\n    std::vector<int> x;\n    if (b)\n        x.push_back(1);\n    if (x.size() < 2)\n        return;\n    x[0] = 2;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  366 always 366
Line 374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  374 always 374
  "" always ""
Line 376
  "void f(bool b) {\n    std::vector<int> v;\n    if(v.at(b?42:0)) {}\n}\n" always "void f(bool b) {\n    std::vector<int> v;\n    if(v.at(b?42:0)) {}\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  376 always 376
Line 380
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  380 always 380
  "test.cpp:3:error:Out of bounds access in expression 'v.at(b?42:0)' because 'v' is empty and 'b?42:0' may be non-zero.\n" always "test.cpp:3:error:Out of bounds access in expression 'v.at(b?42:0)' because 'v' is empty and 'b?42:0' may be non-zero.\n"
Line 384
  "void f(std::vector<int> v, bool b){\n    if (v.size() == 1)\n        if(v.at(b?42:0)) {}\n}\n" always "void f(std::vector<int> v, bool b){\n    if (v.size() == 1)\n        if(v.at(b?42:0)) {}\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  384 always 384
Line 388
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  388 always 388
  "test.cpp:3:warning:Either the condition 'v.size()==1' is redundant or v size can be 1. Expression 'v.at(b?42:0)' cause access out of bounds.\ntest.cpp:2:note:condition 'v.size()==1'\ntest.cpp:3:note:Access out of bounds\n" always "test.cpp:3:warning:Either the condition 'v.size()==1' is redundant or v size can be 1. Expression 'v.at(b?42:0)' cause access out of bounds.\ntest.cpp:2:note:condition 'v.size()==1'\ntest.cpp:3:note:Access out of bounds\n"
Line 394
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  394 always 394
  "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  T t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s = { { &ArrS } };\n  g(s);\n  return ArrS[0];\n}\n" always "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  T t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s = { { &ArrS } };\n  g(s);\n  return ArrS[0];\n}\n"
  true always 1
Line 407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  407 always 407
  "" always ""
Line 409
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  409 always 409
  "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<T> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s = { { { &ArrS } } };\n  g(s);\n  return ArrS[0];\n}\n" always "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<T> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s = { { { &ArrS } } };\n  g(s);\n  return ArrS[0];\n}\n"
  true always 1
Line 423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  423 always 423
  "" always ""
Line 425
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  425 always 425
  "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<std::vector<T>> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s = { { { { &ArrS } } } };\n  g(s);\n  return ArrS[0];\n}\n" always "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<std::vector<T>> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s = { { { { &ArrS } } } };\n  g(s);\n  return ArrS[0];\n}\n"
  true always 1
Line 439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  439 always 439
  "" always ""
Line 441
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  441 always 441
  "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  T t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s { { &ArrS } };\n  g(s);\n  return ArrS[0];\n}\n" always "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  T t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s { { &ArrS } };\n  g(s);\n  return ArrS[0];\n}\n"
  true always 1
Line 455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  455 always 455
  "" always ""
Line 457
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  457 always 457
  "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<T> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s { { { &ArrS } } };\n  g(s);\n  return ArrS[0];\n}\n" always "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<T> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s { { { &ArrS } } };\n  g(s);\n  return ArrS[0];\n}\n"
  true always 1
Line 471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  471 always 471
  "" always ""
Line 473
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  473 always 473
  "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<std::vector<T>> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s { { { { &ArrS } } } };\n  g(s);\n  return ArrS[0];\n}\n" always "struct T {\n  std::vector<int>* v;\n};\nstruct S {\n  std::vector<std::vector<T>> t;\n};\nlong g(S& s);\nint f() {\n  std::vector<int> ArrS;\n  S s { { { { &ArrS } } } };\n  g(s);\n  return ArrS[0];\n}\n"
  true always 1
Line 487
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  487 always 487
  "" always ""
Line 489
  "extern void Bar(const double, const double);\nvoid f(std::vector<double> &r, const double ) {\n    std::vector<double> result;\n    double d = 0.0;\n    const double inc = 0.1;\n    for(unsigned int i = 0; i < 10; ++i) {\n        result.push_back(d);\n        d = (i + 1) * inc;\n    }\n    Bar(1.0, d);\n    Bar(10U, result.size());\n    Bar(0.0, result[0]);\n    Bar(0.34, result[1]);\n}\n" always "extern void Bar(const double, const double);\nvoid f(std::vector<double> &r, const double ) {\n    std::vector<double> result;\n    double d = 0.0;\n    const double inc = 0.1;\n    for(unsigned int i = 0; i < 10; ++i) {\n        result.push_back(d);\n        d = (i + 1) * inc;\n    }\n    Bar(1.0, d);\n    Bar(10U, result.size());\n    Bar(0.0, result[0]);\n    Bar(0.34, result[1]);\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  489 always 489
Line 503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  503 always 503
  "" always ""
Line 505
  "void f(size_t entries) {\n    std::vector<uint8_t> v;\n    if (v.size() < entries + 2)\n        v.resize(entries + 2);\n    v[0] = 1;\n}\n" always "void f(size_t entries) {\n    std::vector<uint8_t> v;\n    if (v.size() < entries + 2)\n        v.resize(entries + 2);\n    v[0] = 1;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  505 always 505
Line 511
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  511 always 511
  "" always ""
Line 513
  "void f(size_t entries) {\n    std::vector<uint8_t> v;\n    if (v.size() < entries)\n        v.resize(entries);\n    v[0] = 1;\n}\n" always "void f(size_t entries) {\n    std::vector<uint8_t> v;\n    if (v.size() < entries)\n        v.resize(entries);\n    v[0] = 1;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  513 always 513
Line 519
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  519 always 519
  "test.cpp:5:error:Out of bounds access in expression 'v[0]' because 'v' is empty.\n" always "test.cpp:5:error:Out of bounds access in expression 'v[0]' because 'v' is empty.\n"
Line 521
  "void f(size_t entries) {\n    if (entries < 2) return;\n    std::vector<uint8_t> v;\n    if (v.size() < entries)\n        v.resize(entries);\n    v[0] = 1;\n}\n" always "void f(size_t entries) {\n    if (entries < 2) return;\n    std::vector<uint8_t> v;\n    if (v.size() < entries)\n        v.resize(entries);\n    v[0] = 1;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  521 always 521
Line 528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  528 always 528
  "" always ""
Line 530
  "void f(size_t entries) {\n    if (entries == 0) return;\n    std::vector<uint8_t> v;\n    if (v.size() < entries)\n        v.resize(entries);\n    v[0] = 1;\n}\n" always "void f(size_t entries) {\n    if (entries == 0) return;\n    std::vector<uint8_t> v;\n    if (v.size() < entries)\n        v.resize(entries);\n    v[0] = 1;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  530 always 530
Line 537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  537 always 537
  "" always ""
Line 539
  "void foo(std::vector<int>* PArr, int n) {\n std::vector<int> Arr;\n if (!PArr)\n   PArr = &Arr;\n PArr->resize(n);\n for (int i = 0; i < n; ++i)\n   (*PArr)[i] = 1;\n}\n" always "void foo(std::vector<int>* PArr, int n) {\n std::vector<int> Arr;\n if (!PArr)\n   PArr = &Arr;\n PArr->resize(n);\n for (int i = 0; i < n; ++i)\n   (*PArr)[i] = 1;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  539 always 539
Line 547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  547 always 547
  "" always ""
Line 549
  "int f() {\n    std::vector<int> v;\n    std::vector<int> * pv = &v;\n    return (*pv).at(42);\n}\n" always "int f() {\n    std::vector<int> v;\n    std::vector<int> * pv = &v;\n    return (*pv).at(42);\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  549 always 549
Line 554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  554 always 554
  "test.cpp:4:error:Out of bounds access in expression '(*pv).at(42)' because '*pv' is empty.\n" always "test.cpp:4:error:Out of bounds access in expression '(*pv).at(42)' because '*pv' is empty.\n"
Line 557
  "std::string f(const char* DirName) {\n  if (DirName == nullptr)\n      return {};\n  std::string Name{ DirName };\n  if (!Name.empty() && Name.back() != '\\\\')\n    Name += '\\\\';\n  return Name;\n}\n" always "std::string f(const char* DirName) {\n  if (DirName == nullptr)\n      return {};\n  std::string Name{ DirName };\n  if (!Name.empty() && Name.back() != '\\\\')\n    Name += '\\\\';\n  return Name;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  557 always 557
Line 565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  565 always 565
  "" always ""
Line 567
  "bool f(bool b) {\n  std::vector<int> v;\n  if (b)\n    v.push_back(0);\n  for(auto i:v)\n    if (v[i] > 0)\n      return true;\n  return false;\n}\n" always "bool f(bool b) {\n  std::vector<int> v;\n  if (b)\n    v.push_back(0);\n  for(auto i:v)\n    if (v[i] > 0)\n      return true;\n  return false;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  567 always 567
Line 576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  576 always 576
  "test.cpp:6:style:Consider using std::any_of algorithm instead of a raw loop.\n" always "test.cpp:6:style:Consider using std::any_of algorithm instead of a raw loop.\n"
Line 578
  "std::vector<int> range(int n);\nbool f(bool b) {\n  std::vector<int> v;\n  if (b)\n    v.push_back(1);\n  assert(range(v.size()).size() == v.size());\n  for(auto i:range(v.size()))\n    if (v[i] > 0)\n      return true;\n  return false;\n}\n" always "std::vector<int> range(int n);\nbool f(bool b) {\n  std::vector<int> v;\n  if (b)\n    v.push_back(1);\n  assert(range(v.size()).size() == v.size());\n  for(auto i:range(v.size()))\n    if (v[i] > 0)\n      return true;\n  return false;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  578 always 578
Line 589
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  589 always 589
  "test.cpp:8:style:Consider using std::any_of algorithm instead of a raw loop.\n" always "test.cpp:8:style:Consider using std::any_of algorithm instead of a raw loop.\n"
Line 591
  "bool g();\nint f(int x) {\n    std::vector<int> v;\n    if (g())\n        v.emplace_back(x);\n    const auto n = (int)v.size();\n    for (int i = 0; i < n; ++i)\n        if (v[i] > 0)\n            return i;\n    return 0;\n}\n" always "bool g();\nint f(int x) {\n    std::vector<int> v;\n    if (g())\n        v.emplace_back(x);\n    const auto n = (int)v.size();\n    for (int i = 0; i < n; ++i)\n        if (v[i] > 0)\n            return i;\n    return 0;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  591 always 591
Line 602
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  602 always 602
  "" always ""
Line 604
  "bool g();\nint f(int x) {\n    std::vector<int> v;\n    if (g())\n        v.emplace_back(x);\n    const auto n = static_cast<int>(v.size());\n    for (int i = 0; i < n; ++i)\n        if (v[i] > 0)\n            return i;\n    return 0;\n}\n" always "bool g();\nint f(int x) {\n    std::vector<int> v;\n    if (g())\n        v.emplace_back(x);\n    const auto n = static_cast<int>(v.size());\n    for (int i = 0; i < n; ++i)\n        if (v[i] > 0)\n            return i;\n    return 0;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  604 always 604
Line 615
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  615 always 615
  "" always ""
Line 617
  "bool g();\nvoid f(int x) {\n    std::vector<int> v;\n    if (g())\n        v.emplace_back(x);\n    const int n = v.size();\n    h(n);\n    for (int i = 0; i < n; ++i)\n        h(v[i]);\n}\n" always "bool g();\nvoid f(int x) {\n    std::vector<int> v;\n    if (g())\n        v.emplace_back(x);\n    const int n = v.size();\n    h(n);\n    for (int i = 0; i < n; ++i)\n        h(v[i]);\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  617 always 617
Line 627
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  627 always 627
  "" always ""
Line 629
  "void foo(const std::vector<int> &v) {\n    if(v.size() >=1 && v[0] == 4 && v[1] == 2){}\n}\n" always "void foo(const std::vector<int> &v) {\n    if(v.size() >=1 && v[0] == 4 && v[1] == 2){}\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  629 always 629
Line 632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  632 always 632
  "test.cpp:2:warning:Either the condition 'v.size()>=1' is redundant or v size can be 1. Expression 'v[1]' cause access out of bounds.\ntest.cpp:2:note:condition 'v.size()>=1'\ntest.cpp:2:note:Access out of bounds\n" always "test.cpp:2:warning:Either the condition 'v.size()>=1' is redundant or v size can be 1. Expression 'v[1]' cause access out of bounds.\ntest.cpp:2:note:condition 'v.size()>=1'\ntest.cpp:2:note:Access out of bounds\n"
Line 636
  "int f(int x, int y) {\n    std::vector<int> a = {0,1,2};\n    if(x<2)\n        y = a[x] + 1;\n    else\n        y = a[x];\n    return y;\n}\n" always "int f(int x, int y) {\n    std::vector<int> a = {0,1,2};\n    if(x<2)\n        y = a[x] + 1;\n    else\n        y = a[x];\n    return y;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  636 always 636
Line 644
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  644 always 644
  "test.cpp:6:warning:Either the condition 'x<2' is redundant or 'x' can have the value greater or equal to 3. Expression 'a[x]' cause access out of bounds.\ntest.cpp:3:note:condition 'x<2'\ntest.cpp:6:note:Access out of bounds\n" always "test.cpp:6:warning:Either the condition 'x<2' is redundant or 'x' can have the value greater or equal to 3. Expression 'a[x]' cause access out of bounds.\ntest.cpp:3:note:condition 'x<2'\ntest.cpp:6:note:Access out of bounds\n"
Line 650
  "int f(std::vector<int> v) {\n    if (v.size() > 3)\n        return v[v.size() - 3];\n    return 0;\n}\n" always "int f(std::vector<int> v) {\n    if (v.size() > 3)\n        return v[v.size() - 3];\n    return 0;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  650 always 650
Line 655
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  655 always 655
  "" always ""
Line 657
  "void f(std::vector<int> v) {\n    v[v.size() - 1];\n    if (v.size() == 1) {}\n}\n" always "void f(std::vector<int> v) {\n    v[v.size() - 1];\n    if (v.size() == 1) {}\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  657 always 657
Line 661
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  661 always 661
  "" always ""
Line 663
  "void f(int n) {\n    std::vector<int> v = {1, 2, 3, 4};\n    const int i = qMin(n, v.size());\n    if (i > 1)\n        v[i] = 1;\n}\n" always "void f(int n) {\n    std::vector<int> v = {1, 2, 3, 4};\n    const int i = qMin(n, v.size());\n    if (i > 1)\n        v[i] = 1;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  663 always 663
Line 669
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  669 always 669
  "" always ""
Line 671
  "void f(std::vector<int>& v, int i) {\n    if (i > -1) {\n        v.erase(v.begin() + i);\n        if (v.empty()) {}\n    }\n}\n" always "void f(std::vector<int>& v, int i) {\n    if (i > -1) {\n        v.erase(v.begin() + i);\n        if (v.empty()) {}\n    }\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  671 always 671
Line 677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  677 always 677
  "" always ""
Line 679
  "void g(const char *, ...) { exit(1); }\nvoid f(const char c[]) {\n    std::vector<int> v = get();\n    if (v.empty())\n        g(\"\", c[0]);\n    return h(&v[0], v.size()); \n}\n" always "void g(const char *, ...) { exit(1); }\nvoid f(const char c[]) {\n    std::vector<int> v = get();\n    if (v.empty())\n        g(\"\", c[0]);\n    return h(&v[0], v.size()); \n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  679 always 679
Line 686
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  686 always 686
  "" always ""
Line 688
  "void f(int i, std::vector<int> v) {\n    if (i <= (int)v.size()) {\n        if (v[i]) {}\n    }\n}\n" always "void f(int i, std::vector<int> v) {\n    if (i <= (int)v.size()) {\n        if (v[i]) {}\n    }\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  688 always 688
Line 693
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  693 always 693
  "test.cpp:3:warning:Either the condition 'i<=(int)v.size()' is redundant or 'i' can have the value v.size(). Expression 'v[i]' cause access out of bounds.\ntest.cpp:2:note:condition 'i<=(int)v.size()'\ntest.cpp:3:note:Access out of bounds\n" always "test.cpp:3:warning:Either the condition 'i<=(int)v.size()' is redundant or 'i' can have the value v.size(). Expression 'v[i]' cause access out of bounds.\ntest.cpp:2:note:condition 'i<=(int)v.size()'\ntest.cpp:3:note:Access out of bounds\n"
Line 698
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  698 always 698
  "template<class Iterator>\nvoid b(Iterator d) {\n  std::string c = \"a\";\n  d + c.length();\n}\nvoid f() {\n  std::string buf;\n  b(buf.begin());\n}\n" always "template<class Iterator>\nvoid b(Iterator d) {\n  std::string c = \"a\";\n  d + c.length();\n}\nvoid f() {\n  std::string buf;\n  b(buf.begin());\n}\n"
  true always 1
Line 708
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  708 always 708
  "test.cpp:4:error:Out of bounds access in expression 'd+c.length()' because 'buf' is empty.\n" always "test.cpp:4:error:Out of bounds access in expression 'd+c.length()' because 'buf' is empty.\n"
Line 711
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  711 always 711
  "template<class Iterator>\nvoid b(Iterator d) {\n  std::string c = \"a\";\n  sort(d, d + c.length());\n}\nvoid f() {\n  std::string buf;\n  b(buf.begin());\n}\n" always "template<class Iterator>\nvoid b(Iterator d) {\n  std::string c = \"a\";\n  sort(d, d + c.length());\n}\nvoid f() {\n  std::string buf;\n  b(buf.begin());\n}\n"
  true always 1
Line 721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  721 always 721
  "" always ""
Line 723
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  723 always 723
  "int f(const std::vector<int> &v) {\n    return !v.empty() ? 42 : v.back();\n}\n" always "int f(const std::vector<int> &v) {\n    return !v.empty() ? 42 : v.back();\n}\n"
  true always 1
Line 727
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  727 always 727
  "test.cpp:2:warning:Either the condition 'v.empty()' is redundant or expression 'v.back()' cause access out of bounds.\ntest.cpp:2:note:condition 'v.empty()'\ntest.cpp:2:note:Access out of bounds\n" always "test.cpp:2:warning:Either the condition 'v.empty()' is redundant or expression 'v.back()' cause access out of bounds.\ntest.cpp:2:note:condition 'v.empty()'\ntest.cpp:2:note:Access out of bounds\n"
Line 733
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  733 always 733
  "std::vector<int> g() {\n    std::vector<int> v(10);\n    for(int i = 0; i <= 10; ++i)\n        v[i] = 42;\n    return v;\n}\n" always "std::vector<int> g() {\n    std::vector<int> v(10);\n    for(int i = 0; i <= 10; ++i)\n        v[i] = 42;\n    return v;\n}\n"
Line 739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  739 always 739
  "test.cpp:4:error:Out of bounds access in 'v[i]', if 'v' size is 10 and 'i' is 10\n" always "test.cpp:4:error:Out of bounds access in 'v[i]', if 'v' size is 10 and 'i' is 10\n"
Line 742
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  742 always 742
  "void f() {\n    int s = 2;\n    std::vector <int> v(s);\n    v[100] = 1;\n}\n" always "void f() {\n    int s = 2;\n    std::vector <int> v(s);\n    v[100] = 1;\n}\n"
Line 747
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  747 always 747
  "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 2 and '100' is 100\n" always "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 2 and '100' is 100\n"
Line 750
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  750 always 750
  "void f() {\n    std::vector <int> v({ 1, 2, 3 });\n    v[100] = 1;\n}\n" always "void f() {\n    std::vector <int> v({ 1, 2, 3 });\n    v[100] = 1;\n}\n"
Line 754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  754 always 754
  "test.cpp:3:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" always "test.cpp:3:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n"
Line 757
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  757 always 757
  "void f() {\n    char c[] = { 1, 2, 3 };\n    std::vector<char> v(c, sizeof(c) + c);\n    v[100] = 1;\n}\n" always "void f() {\n    char c[] = { 1, 2, 3 };\n    std::vector<char> v(c, sizeof(c) + c);\n    v[100] = 1;\n}\n"
Line 762
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  762 always 762
  "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" always "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n"
Line 765
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  765 always 765
  "void f() {\n    char c[] = { 1, 2, 3 };\n    std::vector<char> v{ c, c + sizeof(c) };\n    v[100] = 1;\n}\n" always "void f() {\n    char c[] = { 1, 2, 3 };\n    std::vector<char> v{ c, c + sizeof(c) };\n    v[100] = 1;\n}\n"
Line 770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  770 always 770
  "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" always "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n"
Line 773
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  773 always 773
  "void f() {\n    int i[] = { 1, 2, 3 };\n    std::vector<int> v(i, i + sizeof(i) / 4);\n    v[100] = 1;\n}\n" always "void f() {\n    int i[] = { 1, 2, 3 };\n    std::vector<int> v(i, i + sizeof(i) / 4);\n    v[100] = 1;\n}\n"
Line 778
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  778 always 778
  "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" always "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n"
Line 781
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  781 always 781
  "void f() {\n    int i[] = { 1, 2, 3 };\n    std::vector<int> v(i, i + sizeof(i) / sizeof(int));\n    v[100] = 1;\n}\n" always "void f() {\n    int i[] = { 1, 2, 3 };\n    std::vector<int> v(i, i + sizeof(i) / sizeof(int));\n    v[100] = 1;\n}\n"
Line 786
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  786 always 786
  "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n" always "test.cpp:4:error:Out of bounds access in 'v[100]', if 'v' size is 3 and '100' is 100\n"
  "" always ""
Line 790
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  790 always 790
  "void f() {\n    std::array<int, 10> a = {};\n    a[10];\n    constexpr std::array<int, 10> b = {};\n    b[10];\n    const std::array<int, 10> c = {};\n    c[10];\n    static constexpr std::array<int, 10> d = {};\n    d[10];\n}\n" always "void f() {\n    std::array<int, 10> a = {};\n    a[10];\n    constexpr std::array<int, 10> b = {};\n    b[10];\n    const std::array<int, 10> c = {};\n    c[10];\n    static constexpr std::array<int, 10> d = {};\n    d[10];\n}\n"
Line 800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  800 always 800
  "test.cpp:3:error:Out of bounds access in 'a[10]', if 'a' size is 10 and '10' is 10\ntest.cpp:5:error:Out of bounds access in 'b[10]', if 'b' size is 10 and '10' is 10\ntest.cpp:7:error:Out of bounds access in 'c[10]', if 'c' size is 10 and '10' is 10\ntest.cpp:9:error:Out of bounds access in 'd[10]', if 'd' size is 10 and '10' is 10\n" always "test.cpp:3:error:Out of bounds access in 'a[10]', if 'a' size is 10 and '10' is 10\ntest.cpp:5:error:Out of bounds access in 'b[10]', if 'b' size is 10 and '10' is 10\ntest.cpp:7:error:Out of bounds access in 'c[10]', if 'c' size is 10 and '10' is 10\ntest.cpp:9:error:Out of bounds access in 'd[10]', if 'd' size is 10 and '10' is 10\n"
Line 806
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  806 always 806
  "struct test_fixed {\n    std::array<int, 10> array = {};\n    void index(int i) { array[i]; }\n};\nvoid f() {\n    test_fixed x = test_fixed();\n    x.index(10);\n}\n" always "struct test_fixed {\n    std::array<int, 10> array = {};\n    void index(int i) { array[i]; }\n};\nvoid f() {\n    test_fixed x = test_fixed();\n    x.index(10);\n}\n"
Line 814
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  814 always 814
  "test.cpp:3:error:Out of bounds access in 'array[i]', if 'array' size is 10 and 'i' is 10\n" always "test.cpp:3:error:Out of bounds access in 'array[i]', if 'array' size is 10 and 'i' is 10\n"
Line 817
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  817 always 817
  "struct test_constexpr {\n    static constexpr std::array<int, 10> array = {};\n    void index(int i) { array[i]; }\n};\nvoid f() {\n    test_constexpr x = test_constexpr();\n    x.index(10);\n}\n" always "struct test_constexpr {\n    static constexpr std::array<int, 10> array = {};\n    void index(int i) { array[i]; }\n};\nvoid f() {\n    test_constexpr x = test_constexpr();\n    x.index(10);\n}\n"
Line 825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  825 always 825
  "test.cpp:3:error:Out of bounds access in 'array[i]', if 'array' size is 10 and 'i' is 10\n" always "test.cpp:3:error:Out of bounds access in 'array[i]', if 'array' size is 10 and 'i' is 10\n"
Line 828
  "struct A {\n    const std::vector<int>& v;\n    A(const std::vector<int>& x) : v(x)\n    {}\n    int f() const {\n        return v[0];\n    }\n};\n" always "struct A {\n    const std::vector<int>& v;\n    A(const std::vector<int>& x) : v(x)\n    {}\n    int f() const {\n        return v[0];\n    }\n};\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  828 always 828
Line 836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  836 always 836
  "" always ""
Line 838
  "struct A {\n    static const std::vector<int> v;\n    int f() const {\n        return v[0];\n    }\n};\nconst std::vector<int> A::v = {1, 2};\n" always "struct A {\n    static const std::vector<int> v;\n    int f() const {\n        return v[0];\n    }\n};\nconst std::vector<int> A::v = {1, 2};\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  838 always 838
Line 845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  845 always 845
  "" always ""
Line 847
  "struct a {\n    std::vector<int> g() const;\n};\nint f(const a& b) {\n    auto c = b.g();\n    assert(not c.empty());\n    int d = c.front();\n    return d;\n}\n" always "struct a {\n    std::vector<int> g() const;\n};\nint f(const a& b) {\n    auto c = b.g();\n    assert(not c.empty());\n    int d = c.front();\n    return d;\n}\n"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  847 always 847
Line 856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  856 always 856
  "" always ""
Line 861
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  861 always 861
  "void foo(std::string textline, int col) {\n    if(col > textline.size())\n        return false;\n    int x = textline[col];\n}\n" always "void foo(std::string textline, int col) {\n    if(col > textline.size())\n        return false;\n    int x = textline[col];\n}\n"
Line 866
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  866 always 866
  "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'col>textline.size()' is redundant or 'col' can have the value textline.size(). Expression 'textline[col]' cause access out of bounds.\n" always "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'col>textline.size()' is redundant or 'col' can have the value textline.size(). Expression 'textline[col]' cause access out of bounds.\n"
Line 874
  "void f(std::string s) {\n  s[s.size()] = 1;\n}" always "void f(std::string s) {\n  s[s.size()] = 1;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  874 always 874
Line 877
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  877 always 877
  "test.cpp:2:error:Out of bounds access of s, index 's.size()' is out of bounds.\n" always "test.cpp:2:error:Out of bounds access of s, index 's.size()' is out of bounds.\n"
Line 879
  "void f(std::string s) {\n  s[s.size()+1] = 1;\n}" always "void f(std::string s) {\n  s[s.size()+1] = 1;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  879 always 879
Line 882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  882 always 882
  "test.cpp:2:error:Out of bounds access of s, index 's.size()+1' is out of bounds.\n" always "test.cpp:2:error:Out of bounds access of s, index 's.size()+1' is out of bounds.\n"
Line 884
  "void f(std::string s) {\n  s[1+s.size()] = 1;\n}" always "void f(std::string s) {\n  s[1+s.size()] = 1;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  884 always 884
Line 887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  887 always 887
  "test.cpp:2:error:Out of bounds access of s, index '1+s.size()' is out of bounds.\n" always "test.cpp:2:error:Out of bounds access of s, index '1+s.size()' is out of bounds.\n"
Line 889
  "void f(std::string s) {\n  s[x*s.size()] = 1;\n}" always "void f(std::string s) {\n  s[x*s.size()] = 1;\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  889 always 889
Line 892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  892 always 892
  "test.cpp:2:error:Out of bounds access of s, index 'x*s.size()' is out of bounds.\n" always "test.cpp:2:error:Out of bounds access of s, index 'x*s.size()' is out of bounds.\n"
Line 895
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  895 always 895
  "int f() {\n    std::vector<int> v;\n    auto it = v.begin();\n    return *it;\n}\n" always "int f() {\n    std::vector<int> v;\n    auto it = v.begin();\n    return *it;\n}\n"
Line 900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  900 always 900
  "[test.cpp:4]: (error) Out of bounds access in expression 'it' because 'v' is empty.\n" always "[test.cpp:4]: (error) Out of bounds access in expression 'it' because 'v' is empty.\n"
Line 903
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  903 always 903
  "int f() {\n    std::vector<int> v;\n    v.push_back(0);\n    auto it = v.begin() + 1;\n    return *it;\n}\n" always "int f() {\n    std::vector<int> v;\n    v.push_back(0);\n    auto it = v.begin() + 1;\n    return *it;\n}\n"
Line 909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  909 always 909
  "[test.cpp:5]: (error) Out of bounds access in 'it', if 'v' size is 1 and 'it' is at position 1 from the beginning\n" always "[test.cpp:5]: (error) Out of bounds access in 'it', if 'v' size is 1 and 'it' is at position 1 from the beginning\n"
Line 912
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  912 always 912
  "int f() {\n    std::vector<int> v;\n    v.push_back(0);\n    auto it = v.end() - 1;\n    return *it;\n}\n" always "int f() {\n    std::vector<int> v;\n    v.push_back(0);\n    auto it = v.end() - 1;\n    return *it;\n}\n"
Line 918
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  918 always 918
  "" always ""
Line 920
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  920 always 920
  "int f() {\n    std::vector<int> v;\n    v.push_back(0);\n    auto it = v.end() - 2;\n    return *it;\n}\n" always "int f() {\n    std::vector<int> v;\n    v.push_back(0);\n    auto it = v.end() - 2;\n    return *it;\n}\n"
Line 926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  926 always 926
  "[test.cpp:5]: (error) Out of bounds access in 'it', if 'v' size is 1 and 'it' is at position 2 from the end\n" always "[test.cpp:5]: (error) Out of bounds access in 'it', if 'v' size is 1 and 'it' is at position 2 from the end\n"
Line 929
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  929 always 929
  "void g(int);\nvoid f(std::vector<int> x) {\n    std::map<int, int> m;\n    if (!m.empty()) {\n        g(m.begin()->second);\n    }\n}\n" always "void g(int);\nvoid f(std::vector<int> x) {\n    std::map<int, int> m;\n    if (!m.empty()) {\n        g(m.begin()->second);\n    }\n}\n"
Line 936
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  936 always 936
  "" always ""
Line 938
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  938 always 938
  "void f() {\n    std::vector<int> vec;\n    std::vector<int>::iterator it = vec.begin();\n    *it = 1;\n}\n" always "void f() {\n    std::vector<int> vec;\n    std::vector<int>::iterator it = vec.begin();\n    *it = 1;\n}\n"
Line 943
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  943 always 943
  "[test.cpp:4]: (error) Out of bounds access in expression 'it' because 'vec' is empty.\n" always "[test.cpp:4]: (error) Out of bounds access in expression 'it' because 'vec' is empty.\n"
Line 946
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  946 always 946
  "void f() {\n    std::vector<int> vec;\n    auto it = vec.begin();\n    *it = 1;\n}\n" always "void f() {\n    std::vector<int> vec;\n    auto it = vec.begin();\n    *it = 1;\n}\n"
Line 951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  951 always 951
  "[test.cpp:4]: (error) Out of bounds access in expression 'it' because 'vec' is empty.\n" always "[test.cpp:4]: (error) Out of bounds access in expression 'it' because 'vec' is empty.\n"
Line 956
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  956 always 956
  "void f()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    for (std::list<int>::iterator it = l1.begin(); it != l2.end(); ++it)\n    { }\n}" always "void f()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    for (std::list<int>::iterator it = l1.begin(); it != l2.end(); ++it)\n    { }\n}"
Line 963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  963 always 963
  "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n"
Line 966
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  966 always 966
  "void f()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    for (std::list<int>::iterator it = l1.begin(); l2.end() != it; ++it)\n    { }\n}" always "void f()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    for (std::list<int>::iterator it = l1.begin(); l2.end() != it; ++it)\n    { }\n}"
Line 973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  973 always 973
  "[test.cpp:5]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n"
Line 976
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  976 always 976
  "struct C { std::list<int> l1; void func(); };\nvoid C::func() {\n    std::list<int>::iterator it;\n    for (it = l1.begin(); it != l1.end(); ++it) { }\n    C c;\n    for (it = c.l1.begin(); it != c.l1.end(); ++it) { }\n}" always "struct C { std::list<int> l1; void func(); };\nvoid C::func() {\n    std::list<int>::iterator it;\n    for (it = l1.begin(); it != l1.end(); ++it) { }\n    C c;\n    for (it = c.l1.begin(); it != c.l1.end(); ++it) { }\n}"
Line 983
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  983 always 983
  "" always ""
Line 986
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  986 always 986
  "void f()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    for (std::list<int>::const_reverse_iterator it = l1.rbegin(); it != l2.rend(); ++it)\n    { }\n}" always "void f()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    for (std::list<int>::const_reverse_iterator it = l1.rbegin(); it != l2.rend(); ++it)\n    { }\n}"
Line 993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  993 always 993
  "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n"
Line 998
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  998 always 998
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    while (it != l2.end())\n    {\n        ++it;\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    while (it != l2.end())\n    {\n        ++it;\n    }\n}"
Line 1008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1008 always 1008
  "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n"
Line 1011
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1011 always 1011
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    while (l2.end() != it)\n    {\n        ++it;\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    while (l2.end() != it)\n    {\n        ++it;\n    }\n}"
Line 1021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1021 always 1021
  "[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" always "[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n"
Line 1026
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1026 always 1026
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it, 0);\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it, 0);\n}"
Line 1033
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1033 always 1033
  "[test.cpp:6]: (error) Same iterator is used with different containers 'l1' and 'l2'.\n[test.cpp:6]: (error) Iterator 'it' from different container 'l2' are used together.\n" always "[test.cpp:6]: (error) Same iterator is used with different containers 'l1' and 'l2'.\n[test.cpp:6]: (error) Iterator 'it' from different container 'l2' are used together.\n"
Line 1037
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1037 always 1037
  "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it, l1.end());\n}" always "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it, l1.end());\n}"
Line 1043
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1043 always 1043
  "" always ""
Line 1045
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1045 always 1045
  "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    std::list<int>::iterator end = l1.end();\n    l2.insert(it, end);\n}" always "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    std::list<int>::iterator end = l1.end();\n    l2.insert(it, end);\n}"
Line 1052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1052 always 1052
  "" always ""
Line 1055
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1055 always 1055
  "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it);\n}" always "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it);\n}"
Line 1061
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1061 always 1061
  "" always ""
Line 1062
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1062 always 1062
  "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it,0,1);\n}" always "void foo() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it = l1.begin();\n    l2.insert(it,0,1);\n}"
Line 1068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1068 always 1068
  "" always ""
Line 1073
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1073 always 1073
  "void foo(std::vector<std::string> &test)\n{\n    std::set<int> result;\n    for (std::vector<std::string>::const_iterator cit = test.begin();\n        cit != test.end();\n        ++cit)\n    {\n        result.insert(cit->size());\n    }\n}" always "void foo(std::vector<std::string> &test)\n{\n    std::set<int> result;\n    for (std::vector<std::string>::const_iterator cit = test.begin();\n        cit != test.end();\n        ++cit)\n    {\n        result.insert(cit->size());\n    }\n}"
Line 1083
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1083 always 1083
  "" always ""
Line 1087
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1087 always 1087
  "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find(ints1.begin(), ints2.end(), 22);\n}" always "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find(ints1.begin(), ints2.end(), 22);\n}"
Line 1091
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1091 always 1091
  "[test.cpp:3]: (error) Iterators of different containers 'ints1' and 'ints2' are used together.\n" always "[test.cpp:3]: (error) Iterators of different containers 'ints1' and 'ints2' are used together.\n"
Line 1097
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1097 always 1097
  "void foo(const std::set<int> &ints1)\n{\n    std::set<int> ints2;\n    std::set<int>::iterator it1 = ints1.begin();\n    std::set<int>::iterator it2 = ints1.end();\n    ints2.insert(it1, it2);\n}" always "void foo(const std::set<int> &ints1)\n{\n    std::set<int> ints2;\n    std::set<int>::iterator it1 = ints1.begin();\n    std::set<int>::iterator it2 = ints1.end();\n    ints2.insert(it1, it2);\n}"
Line 1104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1104 always 1104
  "" always ""
Line 1106
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1106 always 1106
  "void foo(const std::set<int> &ints1)\n{\n    std::set<int> ints2;\n    std::set<int>::iterator it1 = ints1.begin();\n    std::set<int>::iterator it2 = ints2.end();\n    ints2.insert(it1, it2);\n}" always "void foo(const std::set<int> &ints1)\n{\n    std::set<int> ints2;\n    std::set<int>::iterator it1 = ints1.begin();\n    std::set<int>::iterator it2 = ints2.end();\n    ints2.insert(it1, it2);\n}"
Line 1113
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1113 always 1113
  "[test.cpp:6]: (error) Iterators of different containers are used together.\n" always "[test.cpp:6]: (error) Iterators of different containers are used together.\n"
  "" always ""
Line 1117
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1117 always 1117
  "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::inplace_merge(ints1.begin(), std::advance(ints1.rbegin(), 5), ints2.end());\n}" always "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::inplace_merge(ints1.begin(), std::advance(ints1.rbegin(), 5), ints2.end());\n}"
Line 1121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1121 always 1121
  "[test.cpp:3]: (error) Iterators of different containers 'ints1' and 'ints2' are used together.\n" always "[test.cpp:3]: (error) Iterators of different containers 'ints1' and 'ints2' are used together.\n"
Line 1124
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1124 always 1124
  "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::inplace_merge(ints1.begin(), std::advance(ints2.rbegin(), 5), ints1.end());\n}" always "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::inplace_merge(ints1.begin(), std::advance(ints2.rbegin(), 5), ints1.end());\n}"
Line 1128
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1128 always 1128
  "" always ""
Line 1132
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1132 always 1132
  "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(ints1.begin(), ints2.end(), ints1.begin(), ints1.end());\n}" always "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(ints1.begin(), ints2.end(), ints1.begin(), ints1.end());\n}"
Line 1136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1136 always 1136
  "[test.cpp:3]: (error) Iterators of different containers 'ints1' and 'ints2' are used together.\n" always "[test.cpp:3]: (error) Iterators of different containers 'ints1' and 'ints2' are used together.\n"
Line 1139
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1139 always 1139
  "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(ints1.begin(), ints1.end(), ints2.begin(), ints1.end());\n}" always "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(ints1.begin(), ints1.end(), ints2.begin(), ints1.end());\n}"
Line 1143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1143 always 1143
  "[test.cpp:3]: (error) Iterators of different containers 'ints2' and 'ints1' are used together.\n" always "[test.cpp:3]: (error) Iterators of different containers 'ints2' and 'ints1' are used together.\n"
Line 1146
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1146 always 1146
  "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(foo.bar.begin(), foo.bar.end()-6, ints2.begin(), ints1.end());\n}" always "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(foo.bar.begin(), foo.bar.end()-6, ints2.begin(), ints1.end());\n}"
Line 1150
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1150 always 1150
  "[test.cpp:3]: (error) Iterators of different containers 'ints2' and 'ints1' are used together.\n" always "[test.cpp:3]: (error) Iterators of different containers 'ints2' and 'ints1' are used together.\n"
Line 1153
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1153 always 1153
  "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(ints1.begin(), ints1.end(), ints2.begin(), ints2.end());\n}" always "void foo(std::vector<int> ints1, std::vector<int> ints2)\n{\n    std::vector<int>::iterator it = std::find_first_of(ints1.begin(), ints1.end(), ints2.begin(), ints2.end());\n}"
Line 1157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1157 always 1157
  "" always ""
Line 1160
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1160 always 1160
  "void f(const std::wstring& a, const std::wstring& b) {\n    const std::string tp1 = std::string(a.begin(), b.end());\n    const std::wstring tp2 = std::string(b.begin(), a.end());\n    const std::u16string tp3(a.begin(), b.end());\n    const std::u32string tp4(b.begin(), a.end());\n    const std::string fp1 = std::string(a.begin(), a.end());\n    const std::string tp2(a.begin(), a.end());\n}" always "void f(const std::wstring& a, const std::wstring& b) {\n    const std::string tp1 = std::string(a.begin(), b.end());\n    const std::wstring tp2 = std::string(b.begin(), a.end());\n    const std::u16string tp3(a.begin(), b.end());\n    const std::u32string tp4(b.begin(), a.end());\n    const std::string fp1 = std::string(a.begin(), a.end());\n    const std::string tp2(a.begin(), a.end());\n}"
Line 1168
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1168 always 1168
  "[test.cpp:4]: (error) Iterators of different containers 'tp3' and 'a' are used together.\n[test.cpp:5]: (error) Iterators of different containers 'tp4' and 'b' are used together.\n" always "[test.cpp:4]: (error) Iterators of different containers 'tp3' and 'a' are used together.\n[test.cpp:5]: (error) Iterators of different containers 'tp4' and 'b' are used together.\n"
Line 1177
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1177 always 1177
  "void foo(std::vector<int> &r)\n{\n    std::vector<int>::iterator aI = r.begin();\n    while(aI != r.end())\n    {\n        if (*aI == 0)\n        {\n            r.insert(aI, 42);\n            return;\n        }\n        ++aI;\n    }\n}" always "void foo(std::vector<int> &r)\n{\n    std::vector<int>::iterator aI = r.begin();\n    while(aI != r.end())\n    {\n        if (*aI == 0)\n        {\n            r.insert(aI, 42);\n            return;\n        }\n        ++aI;\n    }\n}"
Line 1190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1190 always 1190
  "" always ""
Line 1193
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1193 always 1193
  "void foo(std::vector<int> &r)\n{\n    std::vector<int>::iterator aI = r.begin();\n    while(aI != r.end())\n    {\n        if (*aI == 0)\n        {\n            r.insert(aI, 42);\n            break;\n        }\n        ++aI;\n    }\n}" always "void foo(std::vector<int> &r)\n{\n    std::vector<int>::iterator aI = r.begin();\n    while(aI != r.end())\n    {\n        if (*aI == 0)\n        {\n            r.insert(aI, 42);\n            break;\n        }\n        ++aI;\n    }\n}"
Line 1206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1206 always 1206
  "" always ""
Line 1209
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1209 always 1209
  "void foo(std::vector<int> &r, int c)\n{\n    std::vector<int>::iterator aI = r.begin();\n    while(aI != r.end())\n    {\n        if (*aI == 0)\n        {\n            r.insert(aI, 42);\n            if (c)\n            {\n                return;\n            }\n        }\n        ++aI;\n    }\n}" always "void foo(std::vector<int> &r, int c)\n{\n    std::vector<int>::iterator aI = r.begin();\n    while(aI != r.end())\n    {\n        if (*aI == 0)\n        {\n            r.insert(aI, 42);\n            if (c)\n            {\n                return;\n            }\n        }\n        ++aI;\n    }\n}"
Line 1225
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1225 always 1225
  "[test.cpp:14] (error) After insert(), the iterator 'aI' may be invalid." always "[test.cpp:14] (error) After insert(), the iterator 'aI' may be invalid."
  "" always ""
Line 1230
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1230 always 1230
  "void foo()\n{\n    std::set<int> s1;\n    std::set<int> s2;\n    for (std::set<int>::iterator it = s1.begin(); it != s1.end(); ++it)\n    {\n        if (true) { }\n        if (it != s2.end()) continue;\n    }\n}" always "void foo()\n{\n    std::set<int> s1;\n    std::set<int> s2;\n    for (std::set<int>::iterator it = s1.begin(); it != s1.end(); ++it)\n    {\n        if (true) { }\n        if (it != s2.end()) continue;\n    }\n}"
Line 1240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1240 always 1240
  "[test.cpp:5]: (error) Iterators of different containers 's1' and 's2' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 's1' and 's2' are used together.\n"
Line 1246
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1246 always 1246
  "int main() {\n    map<int, int> myMap;\n    vector<string> myVector;\n    for(vector<int>::iterator x = myVector.begin(); x != myVector.end(); x++)\n        myMap.erase(*x);\n}" always "int main() {\n    map<int, int> myMap;\n    vector<string> myVector;\n    for(vector<int>::iterator x = myVector.begin(); x != myVector.end(); x++)\n        myMap.erase(*x);\n}"
Line 1252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1252 always 1252
  "" always ""
Line 1257
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1257 always 1257
  "void f() {\n    std::map<int, int> map1;\n    std::map<int, int> map2;\n    std::map<int, int>::const_iterator it = map1.find(123);\n    if (it == map2.end()) { }}" always "void f() {\n    std::map<int, int> map1;\n    std::map<int, int> map2;\n    std::map<int, int>::const_iterator it = map1.find(123);\n    if (it == map2.end()) { }}"
Line 1263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1263 always 1263
  "[test.cpp:4]: (error) Iterators of different containers 'map1' and 'map2' are used together.\n" always "[test.cpp:4]: (error) Iterators of different containers 'map1' and 'map2' are used together.\n"
Line 1266
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1266 always 1266
  "void f() {\n    std::map<int, int> map1;\n    std::map<int, int> map2;\n    std::map<int, int>::const_iterator it = map1.find(123);\n    if (map2.end() == it) { }}" always "void f() {\n    std::map<int, int> map1;\n    std::map<int, int> map2;\n    std::map<int, int>::const_iterator it = map1.find(123);\n    if (map2.end() == it) { }}"
Line 1272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1272 always 1272
  "[test.cpp:5]: (error) Iterators of different containers 'map2' and 'map1' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'map2' and 'map1' are used together.\n"
Line 1275
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1275 always 1275
  "void f(std::string &s) {\n    int pos = s.find(x);\n    s.erase(pos);\n    s.erase(pos);\n}" always "void f(std::string &s) {\n    int pos = s.find(x);\n    s.erase(pos);\n    s.erase(pos);\n}"
Line 1280
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1280 always 1280
  "" always ""
Line 1284
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1284 always 1284
  "void f() {\n    std::vector<int> a;\n    std::vector<int> t;\n    std::vector<int>::const_iterator it;\n    it = a.begin();\n    while (it!=a.end())\n        ++it;\n    it = t.begin();\n    while (it!=a.end())\n        ++it;\n}" always "void f() {\n    std::vector<int> a;\n    std::vector<int> t;\n    std::vector<int>::const_iterator it;\n    it = a.begin();\n    while (it!=a.end())\n        ++it;\n    it = t.begin();\n    while (it!=a.end())\n        ++it;\n}"
Line 1295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1295 always 1295
  "[test.cpp:8]: (error) Iterators of different containers 't' and 'a' are used together.\n" always "[test.cpp:8]: (error) Iterators of different containers 't' and 'a' are used together.\n"
Line 1299
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1299 always 1299
  "void f() {\n    std::vector<int> a;\n    std::vector<int> t;\n    std::vector<int>::const_iterator it;\n    it = a.begin();\n    while (it!=a.end())\n        v++it;\n    it = t.begin();\n    while (it!=t.end())\n        ++it;\n}" always "void f() {\n    std::vector<int> a;\n    std::vector<int> t;\n    std::vector<int>::const_iterator it;\n    it = a.begin();\n    while (it!=a.end())\n        v++it;\n    it = t.begin();\n    while (it!=t.end())\n        ++it;\n}"
Line 1310
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1310 always 1310
  "" always ""
Line 1312
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1312 always 1312
  "void f() {\n    std::vector<int> a;\n    std::vector<int> t;\n    std::vector<int>::const_iterator it;\n    if(z)\n        it = a.begin();\n    else\n        it = t.begin();\n    while (z && it!=a.end())\n        v++it;\n    while (!z && it!=t.end())\n        v++it;\n}" always "void f() {\n    std::vector<int> a;\n    std::vector<int> t;\n    std::vector<int>::const_iterator it;\n    if(z)\n        it = a.begin();\n    else\n        it = t.begin();\n    while (z && it!=a.end())\n        v++it;\n    while (!z && it!=t.end())\n        v++it;\n}"
Line 1325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1325 always 1325
  "" always ""
Line 1329
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1329 always 1329
  "void f() {\n    std::map<int,Foo> x;\n    std::map<int,Foo>::const_iterator it;\n    for (it = x.find(0)->second.begin(); it != x.find(0)->second.end(); ++it) {}\n}" always "void f() {\n    std::map<int,Foo> x;\n    std::map<int,Foo>::const_iterator it;\n    for (it = x.find(0)->second.begin(); it != x.find(0)->second.end(); ++it) {}\n}"
Line 1334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1334 always 1334
  "" always ""
Line 1338
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1338 always 1338
  "void f(C1* x, std::list<int> a) {\n  std::list<int>::iterator pos = a.begin();\n  for(pos = x[0]->plist.begin(); pos != x[0]->plist.end(); ++pos) {}\n}" always "void f(C1* x, std::list<int> a) {\n  std::list<int>::iterator pos = a.begin();\n  for(pos = x[0]->plist.begin(); pos != x[0]->plist.end(); ++pos) {}\n}"
Line 1342
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1342 always 1342
  "" always ""
Line 1346
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1346 always 1346
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l2.end();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l2.end();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}"
Line 1357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1357 always 1357
  "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n"
Line 1360
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1360 always 1360
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.end();\n    std::list<int>::iterator it2 = l2.begin();\n    while (it2 != it1)\n    {\n        ++it2;\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.end();\n    std::list<int>::iterator it2 = l2.begin();\n    while (it2 != it1)\n    {\n        ++it2;\n    }\n}"
Line 1371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1371 always 1371
  "[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" always "[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n"
Line 1374
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1374 always 1374
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it2 = l2.end();\n    std::list<int>::iterator it1 = l1.begin();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it2 = l2.end();\n    std::list<int>::iterator it1 = l1.begin();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}"
Line 1385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1385 always 1385
  "[test.cpp:6]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" always "[test.cpp:6]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n"
Line 1388
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1388 always 1388
  "void foo()\n{\n    std::set<int> l1;\n    std::set<int> l2(10, 4);\n    std::set<int>::iterator it1 = l1.begin();\n    std::set<int>::iterator it2 = l2.find(4);\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" always "void foo()\n{\n    std::set<int> l1;\n    std::set<int> l2(10, 4);\n    std::set<int>::iterator it1 = l1.begin();\n    std::set<int>::iterator it2 = l2.find(4);\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}"
Line 1399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1399 always 1399
  "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n"
Line 1404
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1404 always 1404
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    { it2 = l2.end(); }\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    { it2 = l2.end(); }\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}"
Line 1416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1416 always 1416
  "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n"
Line 1419
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1419 always 1419
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n    it2 = l2.end();\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n    it2 = l2.end();\n}"
Line 1431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1431 always 1431
  "" always ""
Line 1433
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1433 always 1433
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    it1 = l2.end();\n    it1 = l1.end();\n    if (it1 != it2)\n    {\n        ++it1;\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    it1 = l2.end();\n    it1 = l1.end();\n    if (it1 != it2)\n    {\n        ++it1;\n    }\n}"
Line 1446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1446 always 1446
  "" always ""
Line 1448
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1448 always 1448
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    { it2 = l2.end(); }\n    it2 = l1.end();\n    { it2 = l2.end(); }\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    { it2 = l2.end(); }\n    it2 = l1.end();\n    { it2 = l2.end(); }\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}"
Line 1462
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1462 always 1462
  "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n"
Line 1467
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1467 always 1467
  "void foo(std::list<int> l1, std::list<int> l2)\n{\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    while (++it1 != --it2)\n    {\n    }\n}" always "void foo(std::list<int> l1, std::list<int> l2)\n{\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    while (++it1 != --it2)\n    {\n    }\n}"
Line 1475
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1475 always 1475
  "" always ""
Line 1477
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1477 always 1477
  "void foo(std::list<int> l1, std::list<int> l2)\n{\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    while (it1++ != --it2)\n    {\n    }\n}" always "void foo(std::list<int> l1, std::list<int> l2)\n{\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    while (it1++ != --it2)\n    {\n    }\n}"
Line 1485
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1485 always 1485
  "" always ""
Line 1487
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1487 always 1487
  "void foo(std::list<int> l1, std::list<int> l2)\n{\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    if (--it2 > it1++)\n    {\n    }\n}" always "void foo(std::list<int> l1, std::list<int> l2)\n{\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l1.end();\n    if (--it2 > it1++)\n    {\n    }\n}"
Line 1495
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1495 always 1495
  "" always ""
  "[test.cpp:5]: (error) Dangerous comparison using operator< on iterator.\n" always "[test.cpp:5]: (error) Dangerous comparison using operator< on iterator.\n"
Line 1499
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1499 always 1499
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        if (it1 != l1.end())\n        {\n        }\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        if (it1 != l1.end())\n        {\n        }\n    }\n}"
Line 1510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1510 always 1510
  "[test.cpp:7] -> [test.cpp:4]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n" always "[test.cpp:7] -> [test.cpp:4]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n"
Line 1514
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1514 always 1514
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        if (l1.end() > it1)\n        {\n        }\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        if (l1.end() > it1)\n        {\n        }\n    }\n}"
Line 1525
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1525 always 1525
  "[test.cpp:7] -> [test.cpp:4]: (error) Same iterator is used with containers 'l1' that are defined in different scopes.\n" always "[test.cpp:7] -> [test.cpp:4]: (error) Same iterator is used with containers 'l1' that are defined in different scopes.\n"
  "[test.cpp:7] -> [test.cpp:7]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n[test.cpp:7]: (error) Dangerous comparison using operator< on iterator.\n" always "[test.cpp:7] -> [test.cpp:7]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n[test.cpp:7]: (error) Dangerous comparison using operator< on iterator.\n"
Line 1530
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1530 always 1530
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        std::list<int>::iterator it2 = l1.begin();\n        if (it1 != it2)\n        {\n        }\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        std::list<int>::iterator it2 = l1.begin();\n        if (it1 != it2)\n        {\n        }\n    }\n}"
Line 1542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1542 always 1542
  "[test.cpp:8] -> [test.cpp:4]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n" always "[test.cpp:8] -> [test.cpp:4]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n"
Line 1546
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1546 always 1546
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        std::list<int>::iterator it2 = l1.begin();\n        if (it2 != it1)\n        {\n        }\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int>::iterator it1 = l1.begin();\n    {\n        std::list<int> l1;\n        std::list<int>::iterator it2 = l1.begin();\n        if (it2 != it1)\n        {\n        }\n    }\n}"
Line 1558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1558 always 1558
  "[test.cpp:8] -> [test.cpp:7]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n" always "[test.cpp:8] -> [test.cpp:7]: (error) Same iterator is used with containers 'l1' that are temporaries or defined in different scopes.\n"
Line 1562
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1562 always 1562
  "std::set<int> g() {\n    static const std::set<int> s = {1};\n    return s;\n}\nvoid f() {\n    if (g().find(2) == g().end()) {}\n}\n" always "std::set<int> g() {\n    static const std::set<int> s = {1};\n    return s;\n}\nvoid f() {\n    if (g().find(2) == g().end()) {}\n}\n"
Line 1569
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1569 always 1569
  "[test.cpp:6] -> [test.cpp:6]: (error) Same iterator is used with containers 'g()' that are temporaries or defined in different scopes.\n" always "[test.cpp:6] -> [test.cpp:6]: (error) Same iterator is used with containers 'g()' that are temporaries or defined in different scopes.\n"
Line 1575
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1575 always 1575
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l2.begin();\n    it1 = it2;\n    while (it1 != l1.end())\n    {\n        ++it1;\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l2.begin();\n    it1 = it2;\n    while (it1 != l1.end())\n    {\n        ++it1;\n    }\n}"
Line 1587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1587 always 1587
  "[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" always "[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n"
Line 1590
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1590 always 1590
  "std::list<int> l3;\nstd::list<int>::iterator bar()\n{\n    return l3.end();\n}\nvoid foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l2.begin();\n    it1 = bar();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}" always "std::list<int> l3;\nstd::list<int>::iterator bar()\n{\n    return l3.end();\n}\nvoid foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.begin();\n    std::list<int>::iterator it2 = l2.begin();\n    it1 = bar();\n    while (it1 != it2)\n    {\n        ++it1;\n    }\n}"
Line 1607
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1607 always 1607
  "[test.cpp:13] -> [test.cpp:10] -> [test.cpp:11]: (error) Comparison of iterators from containers 'l1' and 'l2'.\n" always "[test.cpp:13] -> [test.cpp:10] -> [test.cpp:11]: (error) Comparison of iterators from containers 'l1' and 'l2'.\n"
  "" always ""
Line 1612
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1612 always 1612
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.end();\n    std::list<int>::iterator it2 = l2.begin();\n    if (it1 != it2)\n    {\n    }\n    if (it2 != it1)\n    {\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.end();\n    std::list<int>::iterator it2 = l2.begin();\n    if (it1 != it2)\n    {\n    }\n    if (it2 != it1)\n    {\n    }\n}"
Line 1625
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1625 always 1625
  "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n[test.cpp:6]: (error) Iterators of different containers 'l2' and 'l1' are used together.\n"
Line 1629
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1629 always 1629
  "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.end();\n    std::list<int>::iterator it2 = l2.begin();\n    if (it1 != it2 && it1 != it2)\n    {\n    }\n}" always "void foo()\n{\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>::iterator it1 = l1.end();\n    std::list<int>::iterator it2 = l2.begin();\n    if (it1 != it2 && it1 != it2)\n    {\n    }\n}"
Line 1639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1639 always 1639
  "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n" always "[test.cpp:5]: (error) Iterators of different containers 'l1' and 'l2' are used together.\n"
Line 1644
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1644 always 1644
  "void foo() {\n    std::list<int> &l = x.l;\n    std::list<int>::iterator it = l.find(123);\n    x.l.erase(it);\n}" always "void foo() {\n    std::list<int> &l = x.l;\n    std::list<int>::iterator it = l.find(123);\n    x.l.erase(it);\n}"
Line 1649
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1649 always 1649
  "" always ""
Line 1653
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1653 always 1653
  "struct A {\n    struct B {\n        bool operator==(const A::B& b) const;\n        int x;\n        int y;\n        int z;\n    };\n};\nbool A::B::operator==(const A::B& b) const {\n    return std::tie(x, y, z) == std::tie(b.x, b.y, b.z);\n}" always "struct A {\n    struct B {\n        bool operator==(const A::B& b) const;\n        int x;\n        int y;\n        int z;\n    };\n};\nbool A::B::operator==(const A::B& b) const {\n    return std::tie(x, y, z) == std::tie(b.x, b.y, b.z);\n}"
Line 1664
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1664 always 1664
  "" always ""
Line 1669
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1669 always 1669
  "void f(int a, int b) {\n  if (&a == &b) {}\n}" always "void f(int a, int b) {\n  if (&a == &b) {}\n}"
Line 1672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1672 always 1672
  "" always ""
Line 1674
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1674 always 1674
  "void f(int a, int b) {\n  if (std::for_each(&a, &b + 1, [](auto) {})) {}\n}" always "void f(int a, int b) {\n  if (std::for_each(&a, &b + 1, [](auto) {})) {}\n}"
Line 1677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1677 always 1677
  "[test.cpp:2]: (error) Iterators of different containers 'a' and 'b' are used together.\n" always "[test.cpp:2]: (error) Iterators of different containers 'a' and 'b' are used together.\n"
Line 1680
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1680 always 1680
  "void f(int a, int b) {\n  if (std::for_each(&a, &b, [](auto) {})) {}\n}" always "void f(int a, int b) {\n  if (std::for_each(&a, &b, [](auto) {})) {}\n}"
Line 1683
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1683 always 1683
  "[test.cpp:2]: (error) Iterators of different containers 'a' and 'b' are used together.\n" always "[test.cpp:2]: (error) Iterators of different containers 'a' and 'b' are used together.\n"
Line 1686
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1686 always 1686
  "void f(int a) {\n  if (std::for_each(&a, &a, [](auto) {})) {}\n}" always "void f(int a) {\n  if (std::for_each(&a, &a, [](auto) {})) {}\n}"
Line 1689
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1689 always 1689
  "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n" always "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n"
Line 1691
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1691 always 1691
  "void f(int a) {\n  if (std::for_each(&a, &a + 1, [](auto) {})) {}\n}" always "void f(int a) {\n  if (std::for_each(&a, &a + 1, [](auto) {})) {}\n}"
Line 1694
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1694 always 1694
  "" always ""
Line 1699
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1699 always 1699
  "struct S {\n  std::vector<int>& v;\n};\nstruct T {\n    bool operator()(const S& lhs, const S& rhs) const {\n        return &lhs.v != &rhs.v;\n    }\n};" always "struct S {\n  std::vector<int>& v;\n};\nstruct T {\n    bool operator()(const S& lhs, const S& rhs) const {\n        return &lhs.v != &rhs.v;\n    }\n};"
Line 1707
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1707 always 1707
  "" always ""
Line 1711
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1711 always 1711
  "#include <map>\nint main()\n{  std::map<char const*, int> m{ {\"a\", 1} };\n  if (auto iter = m.find(\"x\"); iter != m.end()) {\n    return iter->second;\n  }\n  return 0;\n}\n" always "#include <map>\nint main()\n{  std::map<char const*, int> m{ {\"a\", 1} };\n  if (auto iter = m.find(\"x\"); iter != m.end()) {\n    return iter->second;\n  }\n  return 0;\n}\n"
Line 1721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1721 always 1721
  "" always ""
Line 1726
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1726 always 1726
  "struct A {\n    int a;\n    int b;\n};\nint f(std::map<int, A> m) {\n    auto it =  m.find( 1 );\n    const int a( it == m.cend() ? 0 : it->second.a );\n    const int b( it == m.cend() ? 0 : it->second.b );\n    return a + b;\n}\n" always "struct A {\n    int a;\n    int b;\n};\nint f(std::map<int, A> m) {\n    auto it =  m.find( 1 );\n    const int a( it == m.cend() ? 0 : it->second.a );\n    const int b( it == m.cend() ? 0 : it->second.b );\n    return a + b;\n}\n"
Line 1736
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1736 always 1736
  "" always ""
Line 1742
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1742 always 1742
  "struct S {\n    struct Private {\n        std::list<int> l;\n    };\n    std::unique_ptr<Private> p;\n    int foo();\n};\nint S::foo() {\n    for(auto iter = p->l.begin(); iter != p->l.end(); ++iter) {\n        if(*iter == 1) {\n            p->l.erase(iter);\n            return 1;\n        }\n    }\n    return 0;\n}\n" always "struct S {\n    struct Private {\n        std::list<int> l;\n    };\n    std::unique_ptr<Private> p;\n    int foo();\n};\nint S::foo() {\n    for(auto iter = p->l.begin(); iter != p->l.end(); ++iter) {\n        if(*iter == 1) {\n            p->l.erase(iter);\n            return 1;\n        }\n    }\n    return 0;\n}\n"
Line 1758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1758 always 1758
  "" always ""
Line 1762
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1762 always 1762
  "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    (void)std::find(f().begin(), g().end(), 0);\n}" always "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    (void)std::find(f().begin(), g().end(), 0);\n}"
Line 1767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1767 always 1767
  "[test.cpp:4]: (error) Iterators of different containers 'f()' and 'g()' are used together.\n" always "[test.cpp:4]: (error) Iterators of different containers 'f()' and 'g()' are used together.\n"
Line 1770
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1770 always 1770
  "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    if(f().begin() == g().end()) {}\n}" always "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    if(f().begin() == g().end()) {}\n}"
Line 1775
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1775 always 1775
  "[test.cpp:4]: (error) Iterators of different containers 'f()' and 'g()' are used together.\n" always "[test.cpp:4]: (error) Iterators of different containers 'f()' and 'g()' are used together.\n"
Line 1778
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1778 always 1778
  "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    auto size = f().end() - g().begin();\n}" always "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    auto size = f().end() - g().begin();\n}"
Line 1783
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1783 always 1783
  "[test.cpp:4]: (error) Iterators of different containers 'f()' and 'g()' are used together.\n" always "[test.cpp:4]: (error) Iterators of different containers 'f()' and 'g()' are used together.\n"
Line 1786
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1786 always 1786
  "struct A {\n    std::vector<int>& f();\n    std::vector<int>& g();\n};\nvoid foo() {\n    (void)std::find(A().f().begin(), A().g().end(), 0);\n}" always "struct A {\n    std::vector<int>& f();\n    std::vector<int>& g();\n};\nvoid foo() {\n    (void)std::find(A().f().begin(), A().g().end(), 0);\n}"
Line 1793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1793 always 1793
  "[test.cpp:6]: (error) Iterators of different containers 'A().f()' and 'A().g()' are used together.\n" always "[test.cpp:6]: (error) Iterators of different containers 'A().f()' and 'A().g()' are used together.\n"
Line 1797
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1797 always 1797
  "struct A {\n    std::vector<int>& f();\n    std::vector<int>& g();\n};\nvoid foo() {\n    (void)std::find(A{} .f().begin(), A{} .g().end(), 0);\n}" always "struct A {\n    std::vector<int>& f();\n    std::vector<int>& g();\n};\nvoid foo() {\n    (void)std::find(A{} .f().begin(), A{} .g().end(), 0);\n}"
Line 1804
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1804 always 1804
  "[test.cpp:6]: (error) Iterators of different containers 'A{}.f()' and 'A{}.g()' are used together.\n" always "[test.cpp:6]: (error) Iterators of different containers 'A{}.f()' and 'A{}.g()' are used together.\n"
Line 1808
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1808 always 1808
  "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    (void)std::find(begin(f()), end(g()), 0);\n}" always "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    (void)std::find(begin(f()), end(g()), 0);\n}"
Line 1813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1813 always 1813
  "[test.cpp:4]: (warning) Iterators to containers from different expressions 'f()' and 'g()' are used together.\n" always "[test.cpp:4]: (warning) Iterators to containers from different expressions 'f()' and 'g()' are used together.\n"
Line 1815
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1815 always 1815
  "struct A {\n    std::vector<int>& f();\n    std::vector<int>& g();\n};\nvoid foo() {\n    (void)std::find(A().f().begin(), A().f().end(), 0);\n}" always "struct A {\n    std::vector<int>& f();\n    std::vector<int>& g();\n};\nvoid foo() {\n    (void)std::find(A().f().begin(), A().f().end(), 0);\n}"
Line 1822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1822 always 1822
  "" always ""
Line 1824
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1824 always 1824
  "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    if(bar(f().begin()) == g().end()) {}\n}" always "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    if(bar(f().begin()) == g().end()) {}\n}"
Line 1829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1829 always 1829
  "" always ""
Line 1831
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1831 always 1831
  "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    auto it = f().end() - 1;\n    f().begin() - it;\n    f().begin()+1 - it;\n    f().begin() - (it + 1);\n    f().begin() - f().end();\n    f().begin()+1 - f().end();\n    f().begin() - (f().end() + 1);\n    (void)std::find(f().begin(), it, 0);\n    (void)std::find(f().begin(), it + 1, 0);\n    (void)std::find(f().begin() + 1, it + 1, 0);\n    (void)std::find(f().begin() + 1, it, 0);\n    (void)std::find(f().begin(), f().end(), 0);\n    (void)std::find(f().begin() + 1, f().end(), 0);\n    (void)std::find(f().begin(), f().end() - 1, 0);\n    (void)std::find(f().begin() + 1, f().end() - 1, 0);\n    (void)std::find(begin(f()), end(f()));\n    (void)std::find(begin(f()) + 1, end(f()), 0);\n    (void)std::find(begin(f()), end(f()) - 1, 0);\n    (void)std::find(begin(f()) + 1, end(f()) - 1, 0);\n}" always "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    auto it = f().end() - 1;\n    f().begin() - it;\n    f().begin()+1 - it;\n    f().begin() - (it + 1);\n    f().begin() - f().end();\n    f().begin()+1 - f().end();\n    f().begin() - (f().end() + 1);\n    (void)std::find(f().begin(), it, 0);\n    (void)std::find(f().begin(), it + 1, 0);\n    (void)std::find(f().begin() + 1, it + 1, 0);\n    (void)std::find(f().begin() + 1, it, 0);\n    (void)std::find(f().begin(), f().end(), 0);\n    (void)std::find(f().begin() + 1, f().end(), 0);\n    (void)std::find(f().begin(), f().end() - 1, 0);\n    (void)std::find(f().begin() + 1, f().end() - 1, 0);\n    (void)std::find(begin(f()), end(f()));\n    (void)std::find(begin(f()) + 1, end(f()), 0);\n    (void)std::find(begin(f()), end(f()) - 1, 0);\n    (void)std::find(begin(f()) + 1, end(f()) - 1, 0);\n}"
Line 1854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1854 always 1854
  "[test.cpp:10]: (error) Dereference of an invalid iterator: f().end()+1\n" always "[test.cpp:10]: (error) Dereference of an invalid iterator: f().end()+1\n"
Line 1856
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1856 always 1856
  "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    if(f().begin() == f().end()) {}\n    if(f().begin() == f().end()+1) {}\n    if(f().begin()+1 == f().end()) {}\n    if(f().begin()+1 == f().end()+1) {}\n}" always "std::vector<int>& f();\nstd::vector<int>& g();\nvoid foo() {\n    if(f().begin() == f().end()) {}\n    if(f().begin() == f().end()+1) {}\n    if(f().begin()+1 == f().end()) {}\n    if(f().begin()+1 == f().end()+1) {}\n}"
Line 1864
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1864 always 1864
  "[test.cpp:5]: (error) Dereference of an invalid iterator: f().end()+1\n[test.cpp:7]: (error) Dereference of an invalid iterator: f().end()+1\n" always "[test.cpp:5]: (error) Dereference of an invalid iterator: f().end()+1\n[test.cpp:7]: (error) Dereference of an invalid iterator: f().end()+1\n"
Line 1868
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1868 always 1868
  "template<int N>\nstd::vector<int>& f();\nvoid foo() {\n    if(f<1>().begin() == f<1>().end()) {}\n}" always "template<int N>\nstd::vector<int>& f();\nvoid foo() {\n    if(f<1>().begin() == f<1>().end()) {}\n}"
Line 1873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1873 always 1873
  "" always ""
Line 1875
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1875 always 1875
  "void f() {\n  if (a.begin().x == b.begin().x) {}\n  if (begin(a).x == begin(b).x) {}\n}" always "void f() {\n  if (a.begin().x == b.begin().x) {}\n  if (begin(a).x == begin(b).x) {}\n}"
Line 1879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1879 always 1879
  "" always ""
Line 1881
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1881 always 1881
  "void f(std::list<int*> a, std::list<int*> b) {\n  if (*a.begin() == *b.begin()) {}\n}" always "void f(std::list<int*> a, std::list<int*> b) {\n  if (*a.begin() == *b.begin()) {}\n}"
Line 1884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1884 always 1884
  "" always ""
Line 1886
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1886 always 1886
  "void foo() {\n    if(f().begin(1) == f().end()) {}\n}" always "void foo() {\n    if(f().begin(1) == f().end()) {}\n}"
Line 1889
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1889 always 1889
  "" always ""
Line 1891
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1891 always 1891
  "void foo(const uint8_t* data, const uint32_t dataLength) {\n    const uint32_t minimumLength = sizeof(uint16_t) + sizeof(uint16_t);\n    if (dataLength >= minimumLength) {\n        char* payload = new char[dataLength - minimumLength];\n        std::copy(&data[minimumLength], &data[dataLength], payload);\n    }\n}\n" always "void foo(const uint8_t* data, const uint32_t dataLength) {\n    const uint32_t minimumLength = sizeof(uint16_t) + sizeof(uint16_t);\n    if (dataLength >= minimumLength) {\n        char* payload = new char[dataLength - minimumLength];\n        std::copy(&data[minimumLength], &data[dataLength], payload);\n    }\n}\n"
Line 1898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1898 always 1898
  "" always ""
Line 1902
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1902 always 1902
  "void f(std::vector<int> v) {\n    std::for_each(v.begin(), v.begin(), [](int){});\n}" always "void f(std::vector<int> v) {\n    std::for_each(v.begin(), v.begin(), [](int){});\n}"
Line 1905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1905 always 1905
  "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n" always "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n"
Line 1907
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1907 always 1907
  "std::vector<int>& g();\nvoid f() {\n    std::for_each(g().begin(), g().begin(), [](int){});\n}" always "std::vector<int>& g();\nvoid f() {\n    std::for_each(g().begin(), g().begin(), [](int){});\n}"
Line 1911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1911 always 1911
  "[test.cpp:3]: (style) Same iterators expression are used for algorithm.\n" always "[test.cpp:3]: (style) Same iterators expression are used for algorithm.\n"
Line 1913
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1913 always 1913
  "void f(std::vector<int> v) {\n    std::for_each(v.end(), v.end(), [](int){});\n}" always "void f(std::vector<int> v) {\n    std::for_each(v.end(), v.end(), [](int){});\n}"
Line 1916
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1916 always 1916
  "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n" always "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n"
Line 1918
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1918 always 1918
  "std::vector<int>& g();\nvoid f() {\n    std::for_each(g().end(), g().end(), [](int){});\n}" always "std::vector<int>& g();\nvoid f() {\n    std::for_each(g().end(), g().end(), [](int){});\n}"
Line 1922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1922 always 1922
  "[test.cpp:3]: (style) Same iterators expression are used for algorithm.\n" always "[test.cpp:3]: (style) Same iterators expression are used for algorithm.\n"
Line 1924
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1924 always 1924
  "std::vector<int>::iterator g();\nvoid f(std::vector<int> v) {\n    std::for_each(g(), g(), [](int){});\n}" always "std::vector<int>::iterator g();\nvoid f(std::vector<int> v) {\n    std::for_each(g(), g(), [](int){});\n}"
Line 1928
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1928 always 1928
  "[test.cpp:3]: (style) Same iterators expression are used for algorithm.\n" always "[test.cpp:3]: (style) Same iterators expression are used for algorithm.\n"
Line 1930
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1930 always 1930
  "void f(std::vector<int>::iterator it) {\n    std::for_each(it, it, [](int){});\n}" always "void f(std::vector<int>::iterator it) {\n    std::for_each(it, it, [](int){});\n}"
Line 1933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1933 always 1933
  "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n" always "[test.cpp:2]: (style) Same iterators expression are used for algorithm.\n"
Line 1937
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1937 always 1937
  "std::vector<int> to_vector(int value) {\n    std::vector<int> a, b;\n    a.insert(b.end(), value);\n    return a;\n}" always "std::vector<int> to_vector(int value) {\n    std::vector<int> a, b;\n    a.insert(b.end(), value);\n    return a;\n}"
Line 1942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1942 always 1942
  "[test.cpp:3]: (error) Iterator 'b.end()' from different container 'a' are used together.\n" always "[test.cpp:3]: (error) Iterator 'b.end()' from different container 'a' are used together.\n"
Line 1944
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1944 always 1944
  "std::vector<int> f(std::vector<int> a, std::vector<int> b) {\n    a.erase(b.begin());\n    return a;\n}" always "std::vector<int> f(std::vector<int> a, std::vector<int> b) {\n    a.erase(b.begin());\n    return a;\n}"
Line 1948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1948 always 1948
  "[test.cpp:2]: (error) Iterator 'b.begin()' from different container 'a' are used together.\n" always "[test.cpp:2]: (error) Iterator 'b.begin()' from different container 'a' are used together.\n"
Line 1951
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1951 always 1951
  "void f() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>& l = l2;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it == 1) {\n            l.erase(it);\n            break;\n        }\n    }\n}\n" always "void f() {\n    std::list<int> l1;\n    std::list<int> l2;\n    std::list<int>& l = l2;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it == 1) {\n            l.erase(it);\n            break;\n        }\n    }\n}\n"
Line 1962
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1962 always 1962
  "" always ""
Line 1965
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1965 always 1965
  "struct a {\n    int b;\n    int end() { return b; }\n};\nvoid f(a c, a d) {\n    if (c.end() == d.end()) {}\n}\n" always "struct a {\n    int b;\n    int end() { return b; }\n};\nvoid f(a c, a d) {\n    if (c.end() == d.end()) {}\n}\n"
Line 1972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1972 always 1972
  "" always ""
Line 1975
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1975 always 1975
  "void f(std::array<std::vector<int>, N>& A) {\n  for (auto& a : A) {\n    auto it = std::find_if(a.begin(), a.end(), \n                           [](auto i) { return i == 0; });\n    if (it != a.end()) {}\n  }\n}\n" always "void f(std::array<std::vector<int>, N>& A) {\n  for (auto& a : A) {\n    auto it = std::find_if(a.begin(), a.end(), \n                           [](auto i) { return i == 0; });\n    if (it != a.end()) {}\n  }\n}\n"
Line 1982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1982 always 1982
  "" always ""
Line 1985
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1985 always 1985
  "struct S {\n    std::vector<int> v;\n};\nvoid f(S& s, int m) {\n    s.v.erase(s.v.begin() + m);\n}\n" always "struct S {\n    std::vector<int> v;\n};\nvoid f(S& s, int m) {\n    s.v.erase(s.v.begin() + m);\n}\n"
Line 1991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1991 always 1991
  "" always ""
Line 1996
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  1996 always 1996
  "void f()\n{\n    std::vector<int> ints{1,2,3,4,5};\n    std::vector<int>::iterator iter;\n    iter = ints.begin() + 2;\n    ints.erase(iter);\n    std::cout << (*iter) << std::endl;\n}" always "void f()\n{\n    std::vector<int> ints{1,2,3,4,5};\n    std::vector<int>::iterator iter;\n    iter = ints.begin() + 2;\n    ints.erase(iter);\n    std::cout << (*iter) << std::endl;\n}"
  true always 1
Line 2004
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2004 always 2004
  "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:7]: (error) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:7]: (error) Using iterator to local container 'ints' that may be invalid.\n"
  "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:7]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:7]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n"
Line 2007
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2007 always 2007
  "typedef std::map<Packet> packetMap;\npacketMap waitingPackets;\nvoid ProcessRawPacket() {\n    packetMap::iterator wpi;\n    while ((wpi = waitingPackets.find(lastInOrder + 1)) != waitingPackets.end()) {\n        waitingPackets.erase(wpi);\n        for (unsigned pos = 0; pos < buf.size(); ) {     }\n    }\n}" always "typedef std::map<Packet> packetMap;\npacketMap waitingPackets;\nvoid ProcessRawPacket() {\n    packetMap::iterator wpi;\n    while ((wpi = waitingPackets.find(lastInOrder + 1)) != waitingPackets.end()) {\n        waitingPackets.erase(wpi);\n        for (unsigned pos = 0; pos < buf.size(); ) {     }\n    }\n}"
Line 2016
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2016 always 2016
  "" always ""
Line 2019
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2019 always 2019
  "void f() {\n  std::vector<int> ints;\n  std::vector<int>::const_iterator iter {ints.cbegin()};\n  std::cout << (*iter) << std::endl;\n}" always "void f() {\n  std::vector<int> ints;\n  std::vector<int>::const_iterator iter {ints.cbegin()};\n  std::cout << (*iter) << std::endl;\n}"
Line 2024
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2024 always 2024
  "" always ""
Line 2028
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2028 always 2028
  "void f(std::vector<int> &ints) {\n    std::vector<int>::iterator iter;\n    for (iter=ints.begin();iter!=ints.end();++iter) {\n        if (*iter == 2) {\n            ints.erase(iter);\n            break;\n        }\n        if (*iter == 3) {\n            ints.erase(iter);\n            break;\n        }\n    }\n}" always "void f(std::vector<int> &ints) {\n    std::vector<int>::iterator iter;\n    for (iter=ints.begin();iter!=ints.end();++iter) {\n        if (*iter == 2) {\n            ints.erase(iter);\n            break;\n        }\n        if (*iter == 3) {\n            ints.erase(iter);\n            break;\n        }\n    }\n}"
Line 2041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2041 always 2041
  "" always ""
Line 2045
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2045 always 2045
  "void f()\n{\n    std::map<int, int> ints;\n    std::map<int, int>::iterator iter;\n    iter = ints.begin();\n    ints.erase(iter);\n    std::cout << iter->first << std::endl;\n}" always "void f()\n{\n    std::map<int, int> ints;\n    std::map<int, int>::iterator iter;\n    iter = ints.begin();\n    ints.erase(iter);\n    std::cout << iter->first << std::endl;\n}"
Line 2053
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2053 always 2053
  "[test.cpp:7] -> [test.cpp:6]: (error) Iterator 'iter' used after element has been erased.\n" always "[test.cpp:7] -> [test.cpp:6]: (error) Iterator 'iter' used after element has been erased.\n"
Line 2056
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2056 always 2056
  "void f()\n{\n    std::map<int, int> ints;\n    std::map<int, int>::reverse_iterator iter;\n    iter = ints.rbegin();\n    ints.erase(iter);\n    std::cout << iter->first << std::endl;\n}" always "void f()\n{\n    std::map<int, int> ints;\n    std::map<int, int>::reverse_iterator iter;\n    iter = ints.rbegin();\n    ints.erase(iter);\n    std::cout << iter->first << std::endl;\n}"
Line 2064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2064 always 2064
  "[test.cpp:7] -> [test.cpp:6]: (error) Iterator 'iter' used after element has been erased.\n" always "[test.cpp:7] -> [test.cpp:6]: (error) Iterator 'iter' used after element has been erased.\n"
Line 2068
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2068 always 2068
  "void f()\n{\n    std::vector<int> ints{1,2,3,4,5};\n    auto iter = ints.begin() + 2;\n    ints.erase(iter);\n    std::cout << (*iter) << std::endl;\n}" always "void f()\n{\n    std::vector<int> ints{1,2,3,4,5};\n    auto iter = ints.begin() + 2;\n    ints.erase(iter);\n    std::cout << (*iter) << std::endl;\n}"
  true always 1
Line 2075
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2075 always 2075
  "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'ints' that may be invalid.\n"
  "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n"
Line 2077
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2077 always 2077
  "void f() {\n    auto x = *myList.begin();\n    myList.erase(x);\n    auto b = x.first;\n}" always "void f() {\n    auto x = *myList.begin();\n    myList.erase(x);\n    auto b = x.first;\n}"
Line 2082
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2082 always 2082
  "" always ""
Line 2084
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2084 always 2084
  "const CXXRecordDecl *CXXRecordDecl::getTemplateInstantiationPattern() const {\n    if (auto *TD = dyn_cast<ClassTemplateSpecializationDecl>(this)) {\n        auto From = TD->getInstantiatedFrom();\n    }\n    return nullptr;\n}" always "const CXXRecordDecl *CXXRecordDecl::getTemplateInstantiationPattern() const {\n    if (auto *TD = dyn_cast<ClassTemplateSpecializationDecl>(this)) {\n        auto From = TD->getInstantiatedFrom();\n    }\n    return nullptr;\n}"
Line 2090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2090 always 2090
  "" always ""
Line 2094
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2094 always 2094
  "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n       foo[ii] = 0;\n    }\n}" always "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n       foo[ii] = 0;\n    }\n}"
Line 2102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2102 always 2102
  "[test.cpp:6]: (error) Out of bounds access in expression 'foo[ii]' because 'foo' is empty and 'ii' may be non-zero.\n" always "[test.cpp:6]: (error) Out of bounds access in expression 'foo[ii]' because 'foo' is empty and 'ii' may be non-zero.\n"
Line 2106
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2106 always 2106
  "void foo(std::vector<int> foo) {\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii) {\n       foo.at(ii) = 0;\n    }\n}" always "void foo(std::vector<int> foo) {\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii) {\n       foo.at(ii) = 0;\n    }\n}"
Line 2111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2111 always 2111
  "[test.cpp:3]: (error) When ii==foo.size(), foo.at(ii) is out of bounds.\n" always "[test.cpp:3]: (error) When ii==foo.size(), foo.at(ii) is out of bounds.\n"
Line 2113
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2113 always 2113
  "void foo(const std::string& foo) {\n    for (unsigned int ii = 0; ii <= foo.length(); ++ii) {\n       foo[ii] = 'x';\n    }\n}" always "void foo(const std::string& foo) {\n    for (unsigned int ii = 0; ii <= foo.length(); ++ii) {\n       foo[ii] = 'x';\n    }\n}"
Line 2118
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2118 always 2118
  "[test.cpp:3]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n" always "[test.cpp:3]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n"
Line 2120
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2120 always 2120
  "void foo(const std::string& foo, unsigned int ii) {\n    if (ii <= foo.length()) {\n       foo[ii] = 'x';\n    }\n}" always "void foo(const std::string& foo, unsigned int ii) {\n    if (ii <= foo.length()) {\n       foo[ii] = 'x';\n    }\n}"
Line 2125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2125 always 2125
  "[test.cpp:3]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n" always "[test.cpp:3]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n"
Line 2127
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2127 always 2127
  "void foo(const std::string& foo, unsigned int ii) {\n    do {\n       foo[ii] = 'x';\n       ++i;\n    } while(ii <= foo.length());\n}" always "void foo(const std::string& foo, unsigned int ii) {\n    do {\n       foo[ii] = 'x';\n       ++i;\n    } while(ii <= foo.length());\n}"
Line 2133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2133 always 2133
  "[test.cpp:3]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n" always "[test.cpp:3]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n"
Line 2135
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2135 always 2135
  "void foo(const std::string& foo, unsigned int ii) {\n    if (anything()) {\n    } else if (ii <= foo.length()) {\n       foo[ii] = 'x';\n    }\n}" always "void foo(const std::string& foo, unsigned int ii) {\n    if (anything()) {\n    } else if (ii <= foo.length()) {\n       foo[ii] = 'x';\n    }\n}"
Line 2141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2141 always 2141
  "[test.cpp:4]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n" always "[test.cpp:4]: (error) When ii==foo.size(), foo[ii] is out of bounds.\n"
Line 2143
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2143 always 2143
  "void foo()\n{\n    std::vector<int> foo;\n    foo.push_back(1);\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n    }\n    int ii = 0;\n    foo[ii] = 0;\n}" always "void foo()\n{\n    std::vector<int> foo;\n    foo.push_back(1);\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n    }\n    int ii = 0;\n    foo[ii] = 0;\n}"
Line 2153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2153 always 2153
  "" always ""
Line 2155
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2155 always 2155
  "void foo() {\n    for (B b : D()) {}\n}" always "void foo() {\n    for (B b : D()) {}\n}"
Line 2158
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2158 always 2158
  "" always ""
Line 2160
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2160 always 2160
  "void foo(std::vector<int> foo) {\n    for (unsigned int ii = 0; ii <= foo.size() + 1; ++ii) {\n       foo.at(ii) = 0;\n    }\n}" always "void foo(std::vector<int> foo) {\n    for (unsigned int ii = 0; ii <= foo.size() + 1; ++ii) {\n       foo.at(ii) = 0;\n    }\n}"
Line 2165
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2165 always 2165
  "[test.cpp:3]: (error) When ii==foo.size(), foo.at(ii) is out of bounds.\n" always "[test.cpp:3]: (error) When ii==foo.size(), foo.at(ii) is out of bounds.\n"
  "" always ""
Line 2170
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2170 always 2170
  "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii < foo.size(); ++ii)\n    {\n       foo[ii] = 0;\n    }\n}" always "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii < foo.size(); ++ii)\n    {\n       foo[ii] = 0;\n    }\n}"
Line 2178
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2178 always 2178
  "" always ""
Line 2182
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2182 always 2182
  "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n    }\n}" always "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n    }\n}"
Line 2189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2189 always 2189
  "" always ""
Line 2193
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2193 always 2193
  "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n        if (ii == foo.size())\n        {\n        }\n        else\n        {\n            foo[ii] = 0;\n        }\n    }\n}" always "void foo()\n{\n    std::vector<int> foo;\n    for (unsigned int ii = 0; ii <= foo.size(); ++ii)\n    {\n        if (ii == foo.size())\n        {\n        }\n        else\n        {\n            foo[ii] = 0;\n        }\n    }\n}"
Line 2207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2207 always 2207
  "[test.cpp:11]: (error) Out of bounds access in expression 'foo[ii]' because 'foo' is empty and 'ii' may be non-zero.\n" always "[test.cpp:11]: (error) Out of bounds access in expression 'foo[ii]' because 'foo' is empty and 'ii' may be non-zero.\n"
Line 2213
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2213 always 2213
  "void f(const std::map<int,int> &data) {\n    int i = x;    for (int i = 5; i <= data.size(); i++)\n        data[i] = 0;\n}" always "void f(const std::map<int,int> &data) {\n    int i = x;    for (int i = 5; i <= data.size(); i++)\n        data[i] = 0;\n}"
Line 2218
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2218 always 2218
  "" always ""
Line 2222
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2222 always 2222
  "void foo(std::vector<int> foo) {\n    for (unsigned int ii = 0; ii <= foo.size() - 1; ++ii) {\n       foo.at(ii) = 0;\n    }\n}" always "void foo(std::vector<int> foo) {\n    for (unsigned int ii = 0; ii <= foo.size() - 1; ++ii) {\n       foo.at(ii) = 0;\n    }\n}"
Line 2227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2227 always 2227
  "" always ""
Line 2232
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2232 always 2232
  "void f(const std::vector<int> &v) {\n  v[-11] = 123;\n}" always "void f(const std::vector<int> &v) {\n  v[-11] = 123;\n}"
Line 2235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2235 always 2235
  "[test.cpp:2]: (error) Array index -11 is out of bounds.\n" always "[test.cpp:2]: (error) Array index -11 is out of bounds.\n"
Line 2237
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2237 always 2237
  "int f(int x, const std::vector<int>& a) {\n    if (!(x < 5))\n        return a[x - 5];\n    else\n        return a[4 - x];\n}" always "int f(int x, const std::vector<int>& a) {\n    if (!(x < 5))\n        return a[x - 5];\n    else\n        return a[4 - x];\n}"
Line 2243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2243 always 2243
  "" always ""
Line 2245
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2245 always 2245
  "std::array<int,6> values;\nint get_value();\nint compute() {\n    int i = get_value();\n    if( i < 0 || i > 5)\n        return -1;\n    int sum = 0;\n    for( int j = i+1; j < 7; ++j)\n        sum += values[j-1];\n    return sum;\n}\n" always "std::array<int,6> values;\nint get_value();\nint compute() {\n    int i = get_value();\n    if( i < 0 || i > 5)\n        return -1;\n    int sum = 0;\n    for( int j = i+1; j < 7; ++j)\n        sum += values[j-1];\n    return sum;\n}\n"
Line 2256
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2256 always 2256
  "" always ""
Line 2262
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2262 always 2262
  "void f()\n{\n    std::list<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it) {\n        foo.erase(it);\n    }\n    for (it = foo.begin(); it != foo.end(); ++it) {\n        foo.erase(it);\n    }\n}" always "void f()\n{\n    std::list<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it) {\n        foo.erase(it);\n    }\n    for (it = foo.begin(); it != foo.end(); ++it) {\n        foo.erase(it);\n    }\n}"
Line 2272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2272 always 2272
  "[test.cpp:4] -> [test.cpp:5]: (error) Iterator 'it' used after element has been erased.\n[test.cpp:7] -> [test.cpp:8]: (error) Iterator 'it' used after element has been erased.\n" always "[test.cpp:4] -> [test.cpp:5]: (error) Iterator 'it' used after element has been erased.\n[test.cpp:7] -> [test.cpp:8]: (error) Iterator 'it' used after element has been erased.\n"
Line 2275
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2275 always 2275
  "void f(std::list<int> &ints)\n{\n    std::list<int>::iterator i = ints.begin();\n    i = ints.erase(i);\n    *i = 0;\n}" always "void f(std::list<int> &ints)\n{\n    std::list<int>::iterator i = ints.begin();\n    i = ints.erase(i);\n    *i = 0;\n}"
Line 2281
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2281 always 2281
  "" always ""
Line 2283
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2283 always 2283
  "void f()\n{\n    std::list<int>::iterator i;\n    while (i != x.y.end())\n        i = x.y.erase(i);\n}" always "void f()\n{\n    std::list<int>::iterator i;\n    while (i != x.y.end())\n        i = x.y.erase(i);\n}"
Line 2289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2289 always 2289
  "" always ""
Line 2292
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2292 always 2292
  "void f(vector< std::list<int> > &ints, unsigned int i)\n{\n    std::list<int>::iterator it;\n    for(it = ints[i].begin(); it != ints[i].end(); it++) {\n        if (*it % 2)\n            it = ints[i].erase(it);\n    }\n}" always "void f(vector< std::list<int> > &ints, unsigned int i)\n{\n    std::list<int>::iterator it;\n    for(it = ints[i].begin(); it != ints[i].end(); it++) {\n        if (*it % 2)\n            it = ints[i].erase(it);\n    }\n}"
Line 2300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2300 always 2300
  "" always ""
Line 2304
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2304 always 2304
  "static void f()\n{\n    for (iterator it = foo.begin(); it != foo.end(); it = next)\n    {\n        next = it;\n        next++;\n        foo.erase(it);\n    }\n}" always "static void f()\n{\n    for (iterator it = foo.begin(); it != foo.end(); it = next)\n    {\n        next = it;\n        next++;\n        foo.erase(it);\n    }\n}"
Line 2313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2313 always 2313
  "" always ""
Line 2317
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2317 always 2317
  "static void f(std::list<abc> &foo)\n{\n    std::list<abc>::iterator it = foo.begin();\n    foo.erase(it->a);\n    if (it->b);\n}" always "static void f(std::list<abc> &foo)\n{\n    std::list<abc>::iterator it = foo.begin();\n    foo.erase(it->a);\n    if (it->b);\n}"
Line 2323
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2323 always 2323
  "" always ""
Line 2327
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2327 always 2327
  "void f()\n{\n    std::list<int>::iterator it, it2;\n    for (it = foo.begin(); it != i2; ++it)\n    {\n        foo.erase(it);\n    }\n}" always "void f()\n{\n    std::list<int>::iterator it, it2;\n    for (it = foo.begin(); it != i2; ++it)\n    {\n        foo.erase(it);\n    }\n}"
Line 2335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2335 always 2335
  "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n" always "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n"
Line 2337
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2337 always 2337
  "void f()\n{\n    std::list<int>::iterator it = foo.begin();\n    for (; it != i2; ++it)\n    {\n        foo.erase(it);\n    }\n}" always "void f()\n{\n    std::list<int>::iterator it = foo.begin();\n    for (; it != i2; ++it)\n    {\n        foo.erase(it);\n    }\n}"
Line 2345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2345 always 2345
  "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n" always "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n"
Line 2347
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2347 always 2347
  "void f()\n{\n    std::list<int>::iterator it = foo.begin();\n    while (it != i2)\n    {\n        foo.erase(it);\n    }\n}" always "void f()\n{\n    std::list<int>::iterator it = foo.begin();\n    while (it != i2)\n    {\n        foo.erase(it);\n    }\n}"
Line 2355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2355 always 2355
  "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n" always "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n"
Line 2357
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2357 always 2357
  "void f()\n{\n    std::list<int>::iterator it = foo.begin();\n    while (it != i2)\n    {\n        foo.erase(++it);\n    }\n}" always "void f()\n{\n    std::list<int>::iterator it = foo.begin();\n    while (it != i2)\n    {\n        foo.erase(++it);\n    }\n}"
Line 2365
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2365 always 2365
  "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n" always "[test.cpp:4] -> [test.cpp:6]: (error) Iterator 'it' used after element has been erased.\n"
Line 2369
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2369 always 2369
  "void f()\n{\n    std::list<int> foo;\n    std::list<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (*it == 123)\n            foo.erase(it);\n    }\n}" always "void f()\n{\n    std::list<int> foo;\n    std::list<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (*it == 123)\n            foo.erase(it);\n    }\n}"
Line 2379
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2379 always 2379
  "[test.cpp:5] -> [test.cpp:8]: (error) Iterator 'it' used after element has been erased.\n" always "[test.cpp:5] -> [test.cpp:8]: (error) Iterator 'it' used after element has been erased.\n"
Line 2383
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2383 always 2383
  "void f() {\n    std::vector<int> vec(3);\n    std::vector<int>::iterator it;\n    std::vector<int>::iterator itEnd = vec.end();\n    for (it = vec.begin(); it != itEnd; it = vec.begin(), itEnd = vec.end())\n    {\n        vec.erase(it);\n    }\n}" always "void f() {\n    std::vector<int> vec(3);\n    std::vector<int>::iterator it;\n    std::vector<int>::iterator itEnd = vec.end();\n    for (it = vec.begin(); it != itEnd; it = vec.begin(), itEnd = vec.end())\n    {\n        vec.erase(it);\n    }\n}"
Line 2392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2392 always 2392
  "" always ""
Line 2396
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2396 always 2396
  "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        if (x)            break;\n    }\n}" always "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        if (x)            break;\n    }\n}"
Line 2405
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2405 always 2405
  "[test.cpp:3] -> [test.cpp:5]: (error) Iterator 'it' used after element has been erased.\n" always "[test.cpp:3] -> [test.cpp:5]: (error) Iterator 'it' used after element has been erased.\n"
Line 2407
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2407 always 2407
  "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (x) {\n            foo.erase(it);\n            break;\n        }\n    }\n}" always "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (x) {\n            foo.erase(it);\n            break;\n        }\n    }\n}"
Line 2417
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2417 always 2417
  "" always ""
Line 2419
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2419 always 2419
  "void f(int x)\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        if (x)            return;\n    }\n}" always "void f(int x)\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        if (x)            return;\n    }\n}"
Line 2428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2428 always 2428
  "[test.cpp:3] -> [test.cpp:5]: (error) Iterator 'it' used after element has been erased.\n" always "[test.cpp:3] -> [test.cpp:5]: (error) Iterator 'it' used after element has been erased.\n"
Line 2433
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2433 always 2433
  "void f(std::vector<int> &ints)\n{\n    std::vector<int>::iterator it;\n    std::vector<int>::iterator jt = ints.begin();\n    for (it = ints.begin(); it != ints.end(); it = jt) {\n        ++jt;\n        if (*it == 1) {\n            jt = ints.erase(it);\n            continue;\n        }\n    }\n}" always "void f(std::vector<int> &ints)\n{\n    std::vector<int>::iterator it;\n    std::vector<int>::iterator jt = ints.begin();\n    for (it = ints.begin(); it != ints.end(); it = jt) {\n        ++jt;\n        if (*it == 1) {\n            jt = ints.erase(it);\n            continue;\n        }\n    }\n}"
Line 2445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2445 always 2445
  "" always ""
Line 2447
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2447 always 2447
  "void f(std::map<uint32, uint32> my_map) {\n  std::map<uint32, uint32>::iterator itr = my_map.begin();\n  switch (itr->first) {\n  case 0:\n    my_map.erase(itr);\n    continue;\n  case 1:\n    itr->second = 1;\n    break;\n  }\n}" always "void f(std::map<uint32, uint32> my_map) {\n  std::map<uint32, uint32>::iterator itr = my_map.begin();\n  switch (itr->first) {\n  case 0:\n    my_map.erase(itr);\n    continue;\n  case 1:\n    itr->second = 1;\n    break;\n  }\n}"
Line 2458
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2458 always 2458
  "" always ""
Line 2462
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2462 always 2462
  "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        return;\n    }\n}" always "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        return;\n    }\n}"
Line 2472
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2472 always 2472
  "" always ""
Line 2476
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2476 always 2476
  "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (*it == 1) {\n            foo.erase(it);\n            return;\n        }\n        else {\n            foo.erase(it);\n            return;\n        }\n    }\n}" always "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (*it == 1) {\n            foo.erase(it);\n            return;\n        }\n        else {\n            foo.erase(it);\n            return;\n        }\n    }\n}"
Line 2492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2492 always 2492
  "" always ""
Line 2496
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2496 always 2496
  "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (somecondition) {\n            if (*it == 1)\n                foo.erase(it);\n            else\n                *it = 0;\n            return;\n        }\n    }\n}" always "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (somecondition) {\n            if (*it == 1)\n                foo.erase(it);\n            else\n                *it = 0;\n            return;\n        }\n    }\n}"
Line 2511
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2511 always 2511
  "" always ""
Line 2513
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2513 always 2513
  "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (a) {\n            if (b)\n                foo.erase(it);\n            else\n                *it = 0;\n        }\n    }\n}" always "void f()\n{\n    std::vector<int> foo;\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        if (a) {\n            if (b)\n                foo.erase(it);\n            else\n                *it = 0;\n        }\n    }\n}"
Line 2527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2527 always 2527
  "[test.cpp:5] -> [test.cpp:7] -> [test.cpp:8] -> [test.cpp:8] -> [test.cpp:7] -> [test.cpp:5] -> [test.cpp:9] -> [test.cpp:3] -> [test.cpp:5]: (error) Using iterator to local container 'foo' that may be invalid.\n" always "[test.cpp:5] -> [test.cpp:7] -> [test.cpp:8] -> [test.cpp:8] -> [test.cpp:7] -> [test.cpp:5] -> [test.cpp:9] -> [test.cpp:3] -> [test.cpp:5]: (error) Using iterator to local container 'foo' that may be invalid.\n"
Line 2531
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2531 always 2531
  "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        goto abc;\n    }\nbar:\n}" always "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        goto abc;\n    }\nbar:\n}"
Line 2540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2540 always 2540
  "" always ""
Line 2544
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2544 always 2544
  "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        it = foo.begin();\n    }\n}" always "void f()\n{\n    for (std::vector<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(it);\n        it = foo.begin();\n    }\n}"
Line 2552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2552 always 2552
  "" always ""
Line 2556
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2556 always 2556
  "void f(std::list<int> &ints)\n{\n    for (std::list<int>::iterator it = ints.begin(); it != ints.end();) {\n        if (*it == 123) {\n            std::list<int>::iterator copy = it;\n            ++copy;\n            ints.erase(it);\n            it = copy;\n        } else {\n            it->second = 123;\n            ++it;\n        }\n    }\n}" always "void f(std::list<int> &ints)\n{\n    for (std::list<int>::iterator it = ints.begin(); it != ints.end();) {\n        if (*it == 123) {\n            std::list<int>::iterator copy = it;\n            ++copy;\n            ints.erase(it);\n            it = copy;\n        } else {\n            it->second = 123;\n            ++it;\n        }\n    }\n}"
Line 2570
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2570 always 2570
  "" always ""
Line 2574
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2574 always 2574
  "void f(std::list<list<int> >& l) {\n    std::list<std::list<int> >::const_iterator i = l.begin();\n    std::list<int>::const_iterator j = (*i).begin();\n    cout << *j << endl;\n}" always "void f(std::list<list<int> >& l) {\n    std::list<std::list<int> >::const_iterator i = l.begin();\n    std::list<int>::const_iterator j = (*i).begin();\n    cout << *j << endl;\n}"
Line 2579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2579 always 2579
  "" always ""
Line 2583
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2583 always 2583
  "void f(std::list<int> data) {\n  std::list<int>::const_iterator it = data.begin();\n  it = data.erase(it);\n  it = data.erase(it);\n}" always "void f(std::list<int> data) {\n  std::list<int>::const_iterator it = data.begin();\n  it = data.erase(it);\n  it = data.erase(it);\n}"
Line 2588
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2588 always 2588
  "" always ""
Line 2590
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2590 always 2590
  "void f(Data data) {\n  std::list<int>::const_iterator it = data.ints.begin();\n  it = data.ints.erase(it);\n  it = data.ints.erase(it);\n}" always "void f(Data data) {\n  std::list<int>::const_iterator it = data.ints.begin();\n  it = data.ints.erase(it);\n  it = data.ints.erase(it);\n}"
Line 2595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2595 always 2595
  "" always ""
Line 2599
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2599 always 2599
  "void f(std::list<list<int> >& l) {\n    std::list<foo>::const_iterator i;\n    bar(i);\n    cout << *i;\n}" always "void f(std::list<list<int> >& l) {\n    std::list<foo>::const_iterator i;\n    bar(i);\n    cout << *i;\n}"
Line 2604
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2604 always 2604
  "" always ""
Line 2608
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2608 always 2608
  "void f(std::vector<ints> &ints)\n{\n    std::vector<int>::iterator iter;\n    iter = ints.begin() + 2;\n    ints.erase(iter);\n    ints.erase(iter);\n}" always "void f(std::vector<ints> &ints)\n{\n    std::vector<int>::iterator iter;\n    iter = ints.begin() + 2;\n    ints.erase(iter);\n    ints.erase(iter);\n}"
  true always 1
Line 2615
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2615 always 2615
  "[test.cpp:1] -> [test.cpp:4] -> [test.cpp:5] -> [test.cpp:1] -> [test.cpp:6]: (error) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:4] -> [test.cpp:5] -> [test.cpp:1] -> [test.cpp:6]: (error) Using iterator to local container 'ints' that may be invalid.\n"
  "[test.cpp:1] -> [test.cpp:4] -> [test.cpp:5] -> [test.cpp:1] -> [test.cpp:6]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:4] -> [test.cpp:5] -> [test.cpp:1] -> [test.cpp:6]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n"
Line 2619
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2619 always 2619
  "void f()\n{\n    std::set<int> foo;\n    for (std::set<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(*it);\n    }\n}" always "void f()\n{\n    std::set<int> foo;\n    for (std::set<int>::iterator it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.erase(*it);\n    }\n}"
Line 2627
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2627 always 2627
  "[test.cpp:6]: (error) Iterator 'it' becomes invalid when deleted by value from 'foo'\n" always "[test.cpp:6]: (error) Iterator 'it' becomes invalid when deleted by value from 'foo'\n"
  "" always ""
Line 2629
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2629 always 2629
  "int f(std::set<int> foo) {\n    std::set<int>::iterator it = foo.begin();\n    foo.erase(*it);\n    return *it;\n}" always "int f(std::set<int> foo) {\n    std::set<int>::iterator it = foo.begin();\n    foo.erase(*it);\n    return *it;\n}"
Line 2634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2634 always 2634
  "[test.cpp:4] -> [test.cpp:3]: (error) Iterator 'it' used after element has been erased.\n" always "[test.cpp:4] -> [test.cpp:3]: (error) Iterator 'it' used after element has been erased.\n"
Line 2636
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2636 always 2636
  "void f(std::set<int> foo)\n{\n    std::set<int>::iterator it = foo.begin();\n    foo.erase(*it);\n}" always "void f(std::set<int> foo)\n{\n    std::set<int>::iterator it = foo.begin();\n    foo.erase(*it);\n}"
Line 2641
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2641 always 2641
  "" always ""
Line 2644
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2644 always 2644
  "void f() {\n    HashSet_Ref::iterator aIt = m_ImplementationMap.find( xEle );\n    m_SetLoadedFactories.erase(*aIt);\n    m_SetLoadedFactories.erase(aIt);\n}" always "void f() {\n    HashSet_Ref::iterator aIt = m_ImplementationMap.find( xEle );\n    m_SetLoadedFactories.erase(*aIt);\n    m_SetLoadedFactories.erase(aIt);\n}"
Line 2649
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2649 always 2649
  "" always ""
Line 2651
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2651 always 2651
  "void f(const std::list<int>& m_ImplementationMap) {\n    std::list<int>::iterator aIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*aIt);\n    m_ImplementationMap.erase(aIt);\n}" always "void f(const std::list<int>& m_ImplementationMap) {\n    std::list<int>::iterator aIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*aIt);\n    m_ImplementationMap.erase(aIt);\n}"
Line 2656
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2656 always 2656
  "[test.cpp:4]: (error) Invalid iterator: aIt\n" always "[test.cpp:4]: (error) Invalid iterator: aIt\n"
Line 2658
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2658 always 2658
  "void f(const std::list<int>& m_ImplementationMap) {\n    std::list<int>::iterator aIt = m_ImplementationMap.begin();\n    std::list<int>::iterator bIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*bIt);\n    m_ImplementationMap.erase(aIt);\n}" always "void f(const std::list<int>& m_ImplementationMap) {\n    std::list<int>::iterator aIt = m_ImplementationMap.begin();\n    std::list<int>::iterator bIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*bIt);\n    m_ImplementationMap.erase(aIt);\n}"
Line 2664
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2664 always 2664
  "" always ""
Line 2669
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2669 always 2669
  "void func(std::list<std::string> strlist) {\n    for (std::list<std::string>::iterator str = strlist.begin(); str != strlist.end(); str++) {\n        if (func2(*str)) {\n            strlist.erase(str);\n            if (strlist.empty())\n                 return;\n        }\n    }\n}" always "void func(std::list<std::string> strlist) {\n    for (std::list<std::string>::iterator str = strlist.begin(); str != strlist.end(); str++) {\n        if (func2(*str)) {\n            strlist.erase(str);\n            if (strlist.empty())\n                 return;\n        }\n    }\n}"
Line 2678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2678 always 2678
  "[test.cpp:2] -> [test.cpp:4]: (error) Iterator 'str' used after element has been erased.\n" always "[test.cpp:2] -> [test.cpp:4]: (error) Iterator 'str' used after element has been erased.\n"
Line 2682
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2682 always 2682
  "void f(const std::vector<int>& m_ImplementationMap) {\n    std::vector<int>::iterator aIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(something(unknown));\n    m_ImplementationMap.erase(aIt);\n}" always "void f(const std::vector<int>& m_ImplementationMap) {\n    std::vector<int>::iterator aIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(something(unknown));\n    m_ImplementationMap.erase(aIt);\n}"
Line 2687
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2687 always 2687
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'm_ImplementationMap' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'm_ImplementationMap' that may be invalid.\n"
Line 2689
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2689 always 2689
  "void f(const std::vector<int>& m_ImplementationMap) {\n    std::vector<int>::iterator aIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*aIt);\n    m_ImplementationMap.erase(aIt);\n}" always "void f(const std::vector<int>& m_ImplementationMap) {\n    std::vector<int>::iterator aIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*aIt);\n    m_ImplementationMap.erase(aIt);\n}"
Line 2694
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2694 always 2694
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'm_ImplementationMap' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'm_ImplementationMap' that may be invalid.\n"
Line 2696
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2696 always 2696
  "void f(const std::vector<int>& m_ImplementationMap) {\n    std::vector<int>::iterator aIt = m_ImplementationMap.begin();\n    std::vector<int>::iterator bIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*bIt);\n    aIt = m_ImplementationMap.erase(aIt);\n}" always "void f(const std::vector<int>& m_ImplementationMap) {\n    std::vector<int>::iterator aIt = m_ImplementationMap.begin();\n    std::vector<int>::iterator bIt = m_ImplementationMap.begin();\n    m_ImplementationMap.erase(*bIt);\n    aIt = m_ImplementationMap.erase(aIt);\n}"
Line 2702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2702 always 2702
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'm_ImplementationMap' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'm_ImplementationMap' that may be invalid.\n"
Line 2706
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2706 always 2706
  "void f(const std::vector<int> &foo)\n{\n    std::vector<int>::const_iterator it = foo.begin();\n    foo.push_back(123);\n    *it;\n}" always "void f(const std::vector<int> &foo)\n{\n    std::vector<int>::const_iterator it = foo.begin();\n    foo.push_back(123);\n    *it;\n}"
Line 2712
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2712 always 2712
  "[test.cpp:1] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'foo' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'foo' that may be invalid.\n"
Line 2716
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2716 always 2716
  "void f()\n{\n    std::vector<int>::const_iterator it = foo.begin();\n    foo.push_back(123);\n    {\n        int *it = &foo[0];\n        *it = 456;\n    }\n}" always "void f()\n{\n    std::vector<int>::const_iterator it = foo.begin();\n    foo.push_back(123);\n    {\n        int *it = &foo[0];\n        *it = 456;\n    }\n}"
Line 2725
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2725 always 2725
  "" always ""
Line 2729
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2729 always 2729
  "void f()\n{\n    std::vector<int> foo;\n    foo.push_back(10);\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.push_back(123);\n    }\n}" always "void f()\n{\n    std::vector<int> foo;\n    foo.push_back(10);\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.push_back(123);\n    }\n}"
Line 2739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2739 always 2739
  "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:8] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'foo' that may be invalid.\n" always "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:8] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'foo' that may be invalid.\n"
Line 2743
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2743 always 2743
  "void f()\n{\n    std::vector<int> ints;\n    ints.push_back(1);\n    int *first = &ints[0];\n    ints.push_back(2);\n    *first;\n}" always "void f()\n{\n    std::vector<int> ints;\n    ints.push_back(1);\n    int *first = &ints[0];\n    ints.push_back(2);\n    *first;\n}"
Line 2751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2751 always 2751
  "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:7]: (error) Using pointer to local variable 'ints' that may be invalid.\n" always "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:7]: (error) Using pointer to local variable 'ints' that may be invalid.\n"
Line 2755
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2755 always 2755
  "void f()\n{\n    std::vector<int>::const_iterator i;\n\n    for (i=v.begin(); i!=v.end(); ++i)\n    {\n    }\n\n    for (i=rhs.v.begin(); i!=rhs.v.end(); ++i)\n    {\n        v.push_back(*i);\n    }\n}" always "void f()\n{\n    std::vector<int>::const_iterator i;\n\n    for (i=v.begin(); i!=v.end(); ++i)\n    {\n    }\n\n    for (i=rhs.v.begin(); i!=rhs.v.end(); ++i)\n    {\n        v.push_back(*i);\n    }\n}"
Line 2768
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2768 always 2768
  "" always ""
Line 2773
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2773 always 2773
  "void f()\n{\n    std::vector<int> v;\n    v.push_back(1);\n    v.push_back(2);\n    for (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n    {\n        if (*it == 1)\n            v.push_back(10);\n    }\n}" always "void f()\n{\n    std::vector<int> v;\n    v.push_back(1);\n    v.push_back(2);\n    for (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n    {\n        if (*it == 1)\n            v.push_back(10);\n    }\n}"
Line 2784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2784 always 2784
  "[test.cpp:6] -> [test.cpp:8] -> [test.cpp:8] -> [test.cpp:6] -> [test.cpp:9] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'v' that may be invalid.\n" always "[test.cpp:6] -> [test.cpp:8] -> [test.cpp:8] -> [test.cpp:6] -> [test.cpp:9] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'v' that may be invalid.\n"
Line 2786
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2786 always 2786
  "void f()\n{\n    std::vector<int> v;\n    vector.push_back(1);\n    vector.push_back(2);\n    for (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n    {\n        if (*it == 1)\n            v.push_back(10);\n    }\n}" always "void f()\n{\n    std::vector<int> v;\n    vector.push_back(1);\n    vector.push_back(2);\n    for (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n    {\n        if (*it == 1)\n            v.push_back(10);\n    }\n}"
Line 2797
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2797 always 2797
  "[test.cpp:6] -> [test.cpp:8] -> [test.cpp:8] -> [test.cpp:6] -> [test.cpp:9] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'v' that may be invalid.\n" always "[test.cpp:6] -> [test.cpp:8] -> [test.cpp:8] -> [test.cpp:6] -> [test.cpp:9] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'v' that may be invalid.\n"
Line 2801
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2801 always 2801
  "void f()\n{\n    std::vector<int> foo;\n    foo.push_back(10);\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); it++)\n    {\n        foo.push_back(123);\n    }\n}" always "void f()\n{\n    std::vector<int> foo;\n    foo.push_back(10);\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); it++)\n    {\n        foo.push_back(123);\n    }\n}"
Line 2811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2811 always 2811
  "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:8] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'foo' that may be invalid.\n" always "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:8] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'foo' that may be invalid.\n"
Line 2815
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2815 always 2815
  "void f()\n{\n    std::vector<int> ints;\n    std::vector<int>::const_iterator end = ints.end();\n    ints.push_back(10);\n    std::vector<int>::iterator it;\n    unsigned int sum = 0;\n    for (it = ints.begin(); it != end; ++it)\n    {\n        sum += *it;\n    }\n}" always "void f()\n{\n    std::vector<int> ints;\n    std::vector<int>::const_iterator end = ints.end();\n    ints.push_back(10);\n    std::vector<int>::iterator it;\n    unsigned int sum = 0;\n    for (it = ints.begin(); it != end; ++it)\n    {\n        sum += *it;\n    }\n}"
Line 2827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2827 always 2827
  "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:8]: (error) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:8]: (error) Using iterator to local container 'ints' that may be invalid.\n"
Line 2831
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2831 always 2831
  "struct A {\n    std::vector<int> ints;\n};\n\nvoid f()\n{\n    std::vector<int> ints;\n    A a;\n    std::vector<int>::const_iterator i = ints.begin();\n    std::vector<int>::const_iterator e = ints.end();\n    while (i != e)\n    {\n        a.ints.push_back(*i);\n        ++i;\n    }\n}" always "struct A {\n    std::vector<int> ints;\n};\n\nvoid f()\n{\n    std::vector<int> ints;\n    A a;\n    std::vector<int>::const_iterator i = ints.begin();\n    std::vector<int>::const_iterator e = ints.end();\n    while (i != e)\n    {\n        a.ints.push_back(*i);\n        ++i;\n    }\n}"
Line 2847
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2847 always 2847
  "" always ""
Line 2851
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2851 always 2851
  "void f(std::vector<int> &foo)\n{\n    std::vector<int>::const_iterator it = foo.begin();\n    foo.reserve(100);\n    *it = 0;\n}" always "void f(std::vector<int> &foo)\n{\n    std::vector<int>::const_iterator it = foo.begin();\n    foo.reserve(100);\n    *it = 0;\n}"
Line 2857
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2857 always 2857
  "[test.cpp:1] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'foo' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'foo' that may be invalid.\n"
Line 2860
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2860 always 2860
  "void f()\n{\n    std::vector<int> foo;\n    foo.push_back(10);\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.reserve(123);\n    }\n}" always "void f()\n{\n    std::vector<int> foo;\n    foo.push_back(10);\n    std::vector<int>::iterator it;\n    for (it = foo.begin(); it != foo.end(); ++it)\n    {\n        foo.reserve(123);\n    }\n}"
Line 2870
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2870 always 2870
  "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:8] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'foo' that may be invalid.\n" always "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:8] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'foo' that may be invalid.\n"
Line 2875
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2875 always 2875
  "void f() {\n    std::vector<int> ints;\n    std::vector<int>::iterator it = ints.begin();\n    if (it == ints.begin()) {\n        ints.push_back(0);\n    } else {\n        ints.insert(it,0);\n    }\n}" always "void f() {\n    std::vector<int> ints;\n    std::vector<int>::iterator it = ints.begin();\n    if (it == ints.begin()) {\n        ints.push_back(0);\n    } else {\n        ints.insert(it,0);\n    }\n}"
Line 2884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2884 always 2884
  "" always ""
Line 2889
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2889 always 2889
  "void foo(double s)\n{\n    std::vector<double> vec;\n    for( std::vector<double>::iterator it = vec.begin(); it != vec.end(); ++it )\n    {\n        vec.insert( it, s );\n        for(unsigned int i = 0; i < 42; i++)\n        {}\n        *it;\n    }\n}" always "void foo(double s)\n{\n    std::vector<double> vec;\n    for( std::vector<double>::iterator it = vec.begin(); it != vec.end(); ++it )\n    {\n        vec.insert( it, s );\n        for(unsigned int i = 0; i < 42; i++)\n        {}\n        *it;\n    }\n}"
Line 2900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2900 always 2900
  "[test.cpp:4] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:9]: (error, inconclusive) Using iterator to local container 'vec' that may be invalid.\n" always "[test.cpp:4] -> [test.cpp:6] -> [test.cpp:3] -> [test.cpp:9]: (error, inconclusive) Using iterator to local container 'vec' that may be invalid.\n"
Line 2906
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2906 always 2906
  "bool Preprocessor::ConcatenateIncludeName(SmallString<128> &FilenameBuffer, SourceLocation &End) {\n    unsigned PreAppendSize = FilenameBuffer.size();\n    FilenameBuffer.resize(PreAppendSize + CurTok.getLength());\n    const char *BufPtr = &FilenameBuffer[PreAppendSize];\n    return true;\n}" always "bool Preprocessor::ConcatenateIncludeName(SmallString<128> &FilenameBuffer, SourceLocation &End) {\n    unsigned PreAppendSize = FilenameBuffer.size();\n    FilenameBuffer.resize(PreAppendSize + CurTok.getLength());\n    const char *BufPtr = &FilenameBuffer[PreAppendSize];\n    return true;\n}"
Line 2912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2912 always 2912
  "" always ""
Line 2916
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2916 always 2916
  "void f(std::vector<int> &ints)\n{\n    std::vector<int>::iterator iter = ints.begin() + 5;\n    ints.insert(ints.begin(), 1);\n    ++iter;\n}" always "void f(std::vector<int> &ints)\n{\n    std::vector<int>::iterator iter = ints.begin() + 5;\n    ints.insert(ints.begin(), 1);\n    ++iter;\n}"
Line 2922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2922 always 2922
  "[test.cpp:1] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'ints' that may be invalid.\n"
Line 2924
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2924 always 2924
  "void f()\n{\n    std::vector<int> ints;\n    std::vector<int>::iterator iter = ints.begin();\n    ints.insert(iter, 1);\n}" always "void f()\n{\n    std::vector<int> ints;\n    std::vector<int>::iterator iter = ints.begin();\n    ints.insert(iter, 1);\n}"
Line 2930
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2930 always 2930
  "" always ""
Line 2932
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2932 always 2932
  "void f()\n{\n    std::vector<int> ints;\n    std::vector<int>::iterator iter = ints.begin();\n    ints.insert(iter, 1);\n    ints.insert(iter, 2);\n}" always "void f()\n{\n    std::vector<int> ints;\n    std::vector<int>::iterator iter = ints.begin();\n    ints.insert(iter, 1);\n    ints.insert(iter, 2);\n}"
  true always 1
Line 2939
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2939 always 2939
  "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error) Using iterator to local container 'ints' that may be invalid.\n"
  "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n" always "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error, inconclusive) Using iterator to local container 'ints' that may be invalid.\n"
Line 2941
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2941 always 2941
  "void* f(const std::vector<Bar>& bars) {\n    std::vector<Bar>::iterator i = bars.begin();\n    bars.insert(Bar());\n    void* v = &i->foo;\n    return v;\n}" always "void* f(const std::vector<Bar>& bars) {\n    std::vector<Bar>::iterator i = bars.begin();\n    bars.insert(Bar());\n    void* v = &i->foo;\n    return v;\n}"
Line 2947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2947 always 2947
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'bars' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'bars' that may be invalid.\n"
Line 2949
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2949 always 2949
  "Foo f(const std::vector<Bar>& bars) {\n    std::vector<Bar>::iterator i = bars.begin();\n    bars.insert(Bar());\n    return i->foo;\n}" always "Foo f(const std::vector<Bar>& bars) {\n    std::vector<Bar>::iterator i = bars.begin();\n    bars.insert(Bar());\n    return i->foo;\n}"
Line 2954
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2954 always 2954
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'bars' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'bars' that may be invalid.\n"
Line 2956
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2956 always 2956
  "void f(const std::vector<Bar>& bars) {\n    for(std::vector<Bar>::iterator i = bars.begin(); i != bars.end(); ++i) {\n        i = bars.insert(i, bar);\n    }\n}" always "void f(const std::vector<Bar>& bars) {\n    for(std::vector<Bar>::iterator i = bars.begin(); i != bars.end(); ++i) {\n        i = bars.insert(i, bar);\n    }\n}"
Line 2961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2961 always 2961
  "" always ""
Line 2964
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2964 always 2964
  "void f(const std::vector<Bar>& bars) {\n    for(std::vector<Bar>::iterator i = bars.begin(); i != bars.end(); ++i) {\n        bars.insert(i, bar);\n        i = bars.insert(i, bar);\n    }\n}" always "void f(const std::vector<Bar>& bars) {\n    for(std::vector<Bar>::iterator i = bars.begin(); i != bars.end(); ++i) {\n        bars.insert(i, bar);\n        i = bars.insert(i, bar);\n    }\n}"
Line 2970
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2970 always 2970
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error, inconclusive) Using iterator to local container 'bars' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error, inconclusive) Using iterator to local container 'bars' that may be invalid.\n"
Line 2973
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2973 always 2973
  "void* f(const std::vector<Bar>& bars) {\n    std::vector<Bar>::iterator i = bars.begin();\n    bars.insert(i, Bar());\n    i = bars.insert(i, Bar());\n    void* v = &i->foo;\n    return v;\n}" always "void* f(const std::vector<Bar>& bars) {\n    std::vector<Bar>::iterator i = bars.begin();\n    bars.insert(i, Bar());\n    i = bars.insert(i, Bar());\n    void* v = &i->foo;\n    return v;\n}"
Line 2980
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2980 always 2980
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error, inconclusive) Using iterator to local container 'bars' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error, inconclusive) Using iterator to local container 'bars' that may be invalid.\n"
Line 2985
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2985 always 2985
  "void f(std::vector<int> &vec) {\n    for(std::vector<int>::iterator iter = vec.begin(); iter != vec.end(); ++iter)\n    {\n        vec.insert(iter, 0);\n        break;\n    }\n}" always "void f(std::vector<int> &vec) {\n    for(std::vector<int>::iterator iter = vec.begin(); iter != vec.end(); ++iter)\n    {\n        vec.insert(iter, 0);\n        break;\n    }\n}"
Line 2992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2992 always 2992
  "" always ""
Line 2994
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  2994 always 2994
  "void f(std::vector<int> &vec) {\n    for(std::vector<int>::iterator iter = vec.begin(); iter != vec.end(); ++iter)\n    {\n        if (*it == 0) {\n            vec.insert(iter, 0);\n            return;\n        }\n    }\n}" always "void f(std::vector<int> &vec) {\n    for(std::vector<int>::iterator iter = vec.begin(); iter != vec.end(); ++iter)\n    {\n        if (*it == 0) {\n            vec.insert(iter, 0);\n            return;\n        }\n    }\n}"
Line 3003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3003 always 3003
  "" always ""
Line 3007
  ( always !<=-1
  & {lifetime[Address]=(T),!0}
Line 3008
  return always !<=-1
Line 3012
  5 always 5
Line 3013
  "list" always "list"
  "set" always "set"
  "multiset" always "multiset"
  "map" always "map"
  "multimap" always "multimap"
Line 3016
  i always !<=-1
  = always 0
  0 always 0
  i {!<=-1,0}
  < always {!<=-1,!>=2}
  ( always !<=-1
  stlCont always {
  ++ always !<=0
  i always !<=-1
Line 3017
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3017 always 3017
  "void f()\n{\n    std::" always "void f()\n{\n    std::"
  stlCont always {
  i {!<=-1,<=symbolic=(getArraylength(stlCont)-1),!>=symbolic=(getArraylength(stlCont))}
  "<int>::iterator it;\n    for (it = ab.begin(); it < ab.end(); ++it)\n        ;\n}" always "<int>::iterator it;\n    for (it = ab.begin(); it < ab.end(); ++it)\n        ;\n}"
Line 3024
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3024 always 3024
  "[test.cpp:4]: (error) Dangerous comparison using operator< on iterator.\n" always "[test.cpp:4]: (error) Dangerous comparison using operator< on iterator.\n"
  stlCont always {
  i {!<=-1,<=symbolic=(getArraylength(stlCont)-1),!>=symbolic=(getArraylength(stlCont))}
Line 3027
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3027 always 3027
  "void f() {\n    std::forward_list<int>::iterator it;\n    for (it = ab.begin(); ab.end() > it; ++it) {}\n}" always "void f() {\n    std::forward_list<int>::iterator it;\n    for (it = ab.begin(); ab.end() > it; ++it) {}\n}"
Line 3031
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3031 always 3031
  "[test.cpp:3]: (error) Dangerous comparison using operator< on iterator.\n" always "[test.cpp:3]: (error) Dangerous comparison using operator< on iterator.\n"
Line 3034
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3034 always 3034
  "void f() {\n    std::deque<int>::iterator it;\n    for (it = ab.begin(); ab.end() > it; ++it) {}\n}" always "void f() {\n    std::deque<int>::iterator it;\n    for (it = ab.begin(); ab.end() > it; ++it) {}\n}"
Line 3038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3038 always 3038
  "" always ""
Line 3042
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3042 always 3042
  "void f()\n{\n    std::vector<std::string> files;\n    std::vector<std::string>::const_iterator it;\n    for (it = files.begin(); it < files.end(); it++) { }\n    for (it = files.begin(); it < files.end(); it++) { };\n}" always "void f()\n{\n    std::vector<std::string> files;\n    std::vector<std::string>::const_iterator it;\n    for (it = files.begin(); it < files.end(); it++) { }\n    for (it = files.begin(); it < files.end(); it++) { };\n}"
Line 3050
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3050 always 3050
  "" always ""
Line 3054
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3054 always 3054
  "void f()\n{\n    set<int> files;\n    set<int>::const_iterator current;\n    for (current = files.begin(); current != files.end(); ++current)\n    {\n       assert(*current < 100)\n    }\n}" always "void f()\n{\n    set<int> files;\n    set<int>::const_iterator current;\n    for (current = files.begin(); current != files.end(); ++current)\n    {\n       assert(*current < 100)\n    }\n}"
Line 3064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3064 always 3064
  "" always ""
Line 3066
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3066 always 3066
  "bool f() {\n    static set<Foo>::const_iterator current;\n    return 25 > current->bar;\n}" always "bool f() {\n    static set<Foo>::const_iterator current;\n    return 25 > current->bar;\n}"
Line 3070
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3070 always 3070
  "[test.cpp:3]: (error) Invalid iterator 'current' used.\n" always "[test.cpp:3]: (error) Invalid iterator 'current' used.\n"
Line 3075
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3075 always 3075
  "void f() {\n    std::forward_list<std::vector<std::vector<int>>>::iterator it;\n    for (it = ab.begin(); ab.end() > it; ++it) {}\n}" always "void f() {\n    std::forward_list<std::vector<std::vector<int>>>::iterator it;\n    for (it = ab.begin(); ab.end() > it; ++it) {}\n}"
Line 3079
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3079 always 3079
  "[test.cpp:3]: (error) Dangerous comparison using operator< on iterator.\n" always "[test.cpp:3]: (error) Dangerous comparison using operator< on iterator.\n"
Line 3082
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3082 always 3082
  "void f() {\n    if (list < 0) ;\n}" always "void f() {\n    if (list < 0) ;\n}"
Line 3085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3085 always 3085
  "" always ""
Line 3087
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3087 always 3087
  "void f() {\n    if (list < 0) {\n        std::forward_list<std::vector<std::vector<int>>>::iterator it;\n        for (it = ab.begin(); ab.end() > it; ++it) {}\n    }\n}" always "void f() {\n    if (list < 0) {\n        std::forward_list<std::vector<std::vector<int>>>::iterator it;\n        for (it = ab.begin(); ab.end() > it; ++it) {}\n    }\n}"
Line 3093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3093 always 3093
  "[test.cpp:4]: (error) Dangerous comparison using operator< on iterator.\n" always "[test.cpp:4]: (error) Dangerous comparison using operator< on iterator.\n"
Line 3097
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3097 always 3097
  "class iterator { int foo(); };\nint foo() {\n    iterator i;\n    return i.foo();;\n}" always "class iterator { int foo(); };\nint foo() {\n    iterator i;\n    return i.foo();;\n}"
  true always 1
Line 3102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3102 always 3102
  "" always ""
Line 3104
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3104 always 3104
  "class iterator {\n    Class operator*();\n    iterator& operator++();\n    int foo();\n};\nint foo() {\n    iterator i;\n    return i.foo();;\n}" always "class iterator {\n    Class operator*();\n    iterator& operator++();\n    int foo();\n};\nint foo() {\n    iterator i;\n    return i.foo();;\n}"
  true always 1
Line 3113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3113 always 3113
  "[test.cpp:8]: (error, inconclusive) Invalid iterator 'i' used.\n" always "[test.cpp:8]: (error, inconclusive) Invalid iterator 'i' used.\n"
Line 3117
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3117 always 3117
  "void foo(std::vector<int>& vec) {\n    for (Function::iterator BB : vec) {\n        for (int Inst : *BB)\n        {\n        }\n    }\n}" always "void foo(std::vector<int>& vec) {\n    for (Function::iterator BB : vec) {\n        for (int Inst : *BB)\n        {\n        }\n    }\n}"
  true always 1
Line 3124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3124 always 3124
  "" always ""
Line 3134
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3134 always 3134
  "void f(std::set<int> s)\n{\n    if (s.find(12)) { }\n}" always "void f(std::set<int> s)\n{\n    if (s.find(12)) { }\n}"
Line 3138
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3138 always 3138
  "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" always "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n"
Line 3141
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3141 always 3141
  "void f(std::set<int> *s)\n{\n    if ((*s).find(12)) { }\n}" always "void f(std::set<int> *s)\n{\n    if ((*s).find(12)) { }\n}"
Line 3145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3145 always 3145
  "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" always "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n"
Line 3148
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3148 always 3148
  "void f(std::set<int> *s)\n{\n    if (s->find(12)) { }\n}" always "void f(std::set<int> *s)\n{\n    if (s->find(12)) { }\n}"
Line 3152
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3152 always 3152
  "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" always "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n"
Line 3155
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3155 always 3155
  "void f(std::set<int> *s)\n{\n    if (s[0].find(12)) { }\n}" always "void f(std::set<int> *s)\n{\n    if (s[0].find(12)) { }\n}"
Line 3159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3159 always 3159
  "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" always "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n"
Line 3162
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3162 always 3162
  "void f(std::set<int> s [10])\n{\n    if (s[0].find(12)) { }\n}" always "void f(std::set<int> s [10])\n{\n    if (s[0].find(12)) { }\n}"
Line 3166
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3166 always 3166
  "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" always "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n"
Line 3169
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3169 always 3169
  "void f(std::set<int> s [])\n{\n    if (s[0].find(12)) { }\n}" always "void f(std::set<int> s [])\n{\n    if (s[0].find(12)) { }\n}"
Line 3173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3173 always 3173
  "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" always "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n"
Line 3176
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3176 always 3176
  "void f(std::vector<std::set<int> > s)\n{\n    if (s[0].find(12)) { }\n}" always "void f(std::vector<std::set<int> > s)\n{\n    if (s[0].find(12)) { }\n}"
Line 3180
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3180 always 3180
  "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" always "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n"
Line 3183
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3183 always 3183
  "void f(std::set<int> s)\n{\n    if (a || (x = s.find(12))) { }\n}" always "void f(std::set<int> s)\n{\n    if (a || (x = s.find(12))) { }\n}"
Line 3187
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3187 always 3187
  "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" always "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n"
Line 3190
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3190 always 3190
  "void f(std::set<int> s)\n{\n    if (s.find(123) != s.end()) { }\n}" always "void f(std::set<int> s)\n{\n    if (s.find(123) != s.end()) { }\n}"
Line 3194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3194 always 3194
  "" always ""
Line 3197
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3197 always 3197
  "void f(std::set<int> *s)\n{\n    if ((*s).find(12) != s.end()) { }\n}" always "void f(std::set<int> *s)\n{\n    if ((*s).find(12) != s.end()) { }\n}"
Line 3201
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3201 always 3201
  "" always ""
Line 3204
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3204 always 3204
  "void f(std::set<int> *s)\n{\n    if (s[0].find(12) != s->end()) { }\n}" always "void f(std::set<int> *s)\n{\n    if (s[0].find(12) != s->end()) { }\n}"
Line 3208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3208 always 3208
  "" always ""
Line 3211
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3211 always 3211
  "void f(std::set<int> s [10])\n{\n    if (s[0].find(123) != s->end()) { }\n}" always "void f(std::set<int> s [10])\n{\n    if (s[0].find(123) != s->end()) { }\n}"
Line 3215
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3215 always 3215
  "" always ""
Line 3218
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3218 always 3218
  "void f(std::set<int> s [])\n{\n    if (s[0].find(123) != s->end()) { }\n}" always "void f(std::set<int> s [])\n{\n    if (s[0].find(123) != s->end()) { }\n}"
Line 3222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3222 always 3222
  "" always ""
Line 3225
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3225 always 3225
  "void f(std::set<int> s)\n{\n    if (a || (x = s.find(12)) != s.end()) { }\n}" always "void f(std::set<int> s)\n{\n    if (a || (x = s.find(12)) != s.end()) { }\n}"
Line 3229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3229 always 3229
  "" always ""
Line 3232
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3232 always 3232
  "void f(std::set<Foo> s) {\n    if (s.find(12).member) { }\n}" always "void f(std::set<Foo> s) {\n    if (s.find(12).member) { }\n}"
Line 3235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3235 always 3235
  "" always ""
Line 3237
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3237 always 3237
  "void f(std::set<int> s) {\n    if (auto result = s.find(123); result != s.end()) {}\n}" always "void f(std::set<int> s) {\n    if (auto result = s.find(123); result != s.end()) {}\n}"
Line 3240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3240 always 3240
  "" always ""
Line 3247
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3247 always 3247
  "void f()\n{\n    if (std::find(a,b,c)) { }\n}" always "void f()\n{\n    if (std::find(a,b,c)) { }\n}"
Line 3251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3251 always 3251
  "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n" always "[test.cpp:3]: (warning) Suspicious condition. The result of find() is an iterator, but it is not properly checked.\n"
Line 3254
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3254 always 3254
  "void f()\n{\n    if (std::find(a,b,c) != c) { }\n}" always "void f()\n{\n    if (std::find(a,b,c) != c) { }\n}"
Line 3258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3258 always 3258
  "" always ""
Line 3261
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3261 always 3261
  "void f(std::vector<int> s)\n{\n    if (std::find(a, b, c) < d) { }\n}" always "void f(std::vector<int> s)\n{\n    if (std::find(a, b, c) < d) { }\n}"
Line 3265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3265 always 3265
  "" always ""
Line 3268
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3268 always 3268
  "void f() {\n    if (()) { }\n}" always "void f() {\n    if (()) { }\n}"
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3268 always 3268
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3268 always 3268
  false always 0
Line 3274
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3274 always 3274
  "void f() {\n    if ((std::find(a,b,c)) != b) { }\n}" always "void f() {\n    if ((std::find(a,b,c)) != b) { }\n}"
Line 3277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3277 always 3277
  "" always ""
Line 3282
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3282 always 3282
  "void f(const std::string &s)\n{\n    if (s.find(\"abc\")) { }\n}" always "void f(const std::string &s)\n{\n    if (s.find(\"abc\")) { }\n}"
Line 3286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3286 always 3286
  "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" always "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n"
Line 3289
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3289 always 3289
  "void f(const std::string *s)\n{\n    if ((*s).find(\"abc\")) { }\n}" always "void f(const std::string *s)\n{\n    if ((*s).find(\"abc\")) { }\n}"
Line 3293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3293 always 3293
  "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" always "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n"
Line 3296
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3296 always 3296
  "void f(const std::string *s)\n{\n    if (s->find(\"abc\")) { }\n}" always "void f(const std::string *s)\n{\n    if (s->find(\"abc\")) { }\n}"
Line 3300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3300 always 3300
  "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" always "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n"
Line 3303
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3303 always 3303
  "void f(const std::vector<std::string> &s)\n{\n    if (s[0].find(\"abc\")) { }\n}" always "void f(const std::vector<std::string> &s)\n{\n    if (s[0].find(\"abc\")) { }\n}"
Line 3307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3307 always 3307
  "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" always "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n"
Line 3310
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3310 always 3310
  "void f(const std::string& s1, const std::string& s2)\n{\n    if ((!s1.empty()) && (0 == s1.find(s2))) { }\n}" always "void f(const std::string& s1, const std::string& s2)\n{\n    if ((!s1.empty()) && (0 == s1.find(s2))) { }\n}"
Line 3314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3314 always 3314
  "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n" always "[test.cpp:3]: (performance) Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n"
Line 3317
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3317 always 3317
  "void f(const std::string &define) {\n    if (define.find(\"=\") + 1U == define.size());\n}" always "void f(const std::string &define) {\n    if (define.find(\"=\") + 1U == define.size());\n}"
Line 3320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3320 always 3320
  "" always ""
Line 3322
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3322 always 3322
  "void f(std::string a, std::string b) {\n    if (a.find(\"<\") < b.find(\">\")) {}\n}" always "void f(std::string a, std::string b) {\n    if (a.find(\"<\") < b.find(\">\")) {}\n}"
Line 3325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3325 always 3325
  "" always ""
Line 3327
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3327 always 3327
  "void f(const std::string &s) {\n    if (foo(s.find(\"abc\"))) { }\n}" always "void f(const std::string &s) {\n    if (foo(s.find(\"abc\"))) { }\n}"
Line 3330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3330 always 3330
  "" always ""
Line 3333
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3333 always 3333
  "void f(const std::string &s) {\n    if (s.find_first_of(\"abc\")==0) { }\n}" always "void f(const std::string &s) {\n    if (s.find_first_of(\"abc\")==0) { }\n}"
Line 3336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3336 always 3336
  "" always ""
Line 3339
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3339 always 3339
  "int main() {\n  for (;;) {\n    std::string line = getLine();\n    if (line.find(\" GL_EXTENSIONS =\") < 12)\n      return 1;\n  }\n  return 0;\n}" always "int main() {\n  for (;;) {\n    std::string line = getLine();\n    if (line.find(\" GL_EXTENSIONS =\") < 12)\n      return 1;\n  }\n  return 0;\n}"
Line 3347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3347 always 3347
  "" always ""
Line 3352
  = always "struct Fred {\n    void foo();\n    std::list<int> x;\n};\nvoid Fred::foo()\n{\n    if (x.size() == 0) {}\n}"
  "struct Fred {\n    void foo();\n    std::list<int> x;\n};\nvoid Fred::foo()\n{\n    if (x.size() == 0) {}\n}" always "struct Fred {\n    void foo();\n    std::list<int> x;\n};\nvoid Fred::foo()\n{\n    if (x.size() == 0) {}\n}"
Line 3360
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3360 always 3360
  code always "struct Fred {\n    void foo();\n    std::list<int> x;\n};\nvoid Fred::foo()\n{\n    if (x.size() == 0) {}\n}"
  false always 0
Line 3361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3361 always 3361
  "[test.cpp:7]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:7]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3362
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3362 always 3362
Line 3363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3363 always 3363
  "" always ""
Line 3365
  = always "std::list<int> x;\nvoid f()\n{\n    if (x.size() == 0) {}\n}"
  "std::list<int> x;\nvoid f()\n{\n    if (x.size() == 0) {}\n}" always "std::list<int> x;\nvoid f()\n{\n    if (x.size() == 0) {}\n}"
Line 3370
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3370 always 3370
  code always "std::list<int> x;\nvoid f()\n{\n    if (x.size() == 0) {}\n}"
  false always 0
Line 3371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3371 always 3371
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3372
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3372 always 3372
Line 3373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3373 always 3373
  "" always ""
Line 3375
  = always "void f()\n{\n    std::list<int> x;\n    if (x.size() == 0) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (x.size() == 0) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (x.size() == 0) {}\n}"
Line 3380
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3380 always 3380
  code always "void f()\n{\n    std::list<int> x;\n    if (x.size() == 0) {}\n}"
  false always 0
Line 3381
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3381 always 3381
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3382
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3382 always 3382
Line 3383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3383 always 3383
  "" always ""
Line 3385
  = always "void f()\n{\n    std::list<int> x;\n    if (0 == x.size()) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (0 == x.size()) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (0 == x.size()) {}\n}"
Line 3390
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3390 always 3390
  code always "void f()\n{\n    std::list<int> x;\n    if (0 == x.size()) {}\n}"
  false always 0
Line 3391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3391 always 3391
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3392
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3392 always 3392
Line 3393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3393 always 3393
  "" always ""
Line 3395
  = always "void f()\n{\n    std::list<int> x;\n    if (x.size() != 0) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (x.size() != 0) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (x.size() != 0) {}\n}"
Line 3400
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3400 always 3400
  code always "void f()\n{\n    std::list<int> x;\n    if (x.size() != 0) {}\n}"
  false always 0
Line 3401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3401 always 3401
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3402
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3402 always 3402
Line 3403
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3403 always 3403
  "" always ""
Line 3405
  = always "void f()\n{\n    std::list<int> x;\n    if (0 != x.size()) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (0 != x.size()) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (0 != x.size()) {}\n}"
Line 3410
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3410 always 3410
  code always "void f()\n{\n    std::list<int> x;\n    if (0 != x.size()) {}\n}"
  false always 0
Line 3411
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3411 always 3411
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3412
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3412 always 3412
Line 3413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3413 always 3413
  "" always ""
Line 3415
  = always "void f()\n{\n    std::list<int> x;\n    if (x.size() > 0) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (x.size() > 0) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (x.size() > 0) {}\n}"
Line 3420
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3420 always 3420
  code always "void f()\n{\n    std::list<int> x;\n    if (x.size() > 0) {}\n}"
  false always 0
Line 3421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3421 always 3421
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3422
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3422 always 3422
Line 3423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3423 always 3423
  "" always ""
Line 3425
  = always "void f()\n{\n    std::list<int> x;\n    if (0 < x.size()) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (0 < x.size()) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (0 < x.size()) {}\n}"
Line 3430
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3430 always 3430
  code always "void f()\n{\n    std::list<int> x;\n    if (0 < x.size()) {}\n}"
  false always 0
Line 3431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3431 always 3431
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3432
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3432 always 3432
Line 3433
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3433 always 3433
  "" always ""
Line 3435
  = always "void f()\n{\n    std::list<int> x;\n    if (x.size() >= 1) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (x.size() >= 1) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (x.size() >= 1) {}\n}"
Line 3440
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3440 always 3440
  code always "void f()\n{\n    std::list<int> x;\n    if (x.size() >= 1) {}\n}"
  false always 0
Line 3441
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3441 always 3441
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3442
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3442 always 3442
Line 3443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3443 always 3443
  "" always ""
Line 3445
  = always "void f()\n{\n    std::list<int> x;\n    if (x.size() < 1) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (x.size() < 1) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (x.size() < 1) {}\n}"
Line 3450
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3450 always 3450
  code always "void f()\n{\n    std::list<int> x;\n    if (x.size() < 1) {}\n}"
  false always 0
Line 3451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3451 always 3451
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3452
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3452 always 3452
Line 3453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3453 always 3453
  "" always ""
Line 3455
  = always "void f()\n{\n    std::list<int> x;\n    if (1 <= x.size()) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (1 <= x.size()) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (1 <= x.size()) {}\n}"
Line 3460
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3460 always 3460
  code always "void f()\n{\n    std::list<int> x;\n    if (1 <= x.size()) {}\n}"
  false always 0
Line 3461
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3461 always 3461
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3462
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3462 always 3462
Line 3463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3463 always 3463
  "" always ""
Line 3465
  = always "void f()\n{\n    std::list<int> x;\n    if (1 > x.size()) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (1 > x.size()) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (1 > x.size()) {}\n}"
Line 3470
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3470 always 3470
  code always "void f()\n{\n    std::list<int> x;\n    if (1 > x.size()) {}\n}"
  false always 0
Line 3471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3471 always 3471
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3472
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3472 always 3472
Line 3473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3473 always 3473
  "" always ""
Line 3475
  = always "void f()\n{\n    std::list<int> x;\n    if (x.size()) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (x.size()) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (x.size()) {}\n}"
Line 3480
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3480 always 3480
  code always "void f()\n{\n    std::list<int> x;\n    if (x.size()) {}\n}"
  false always 0
Line 3481
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3481 always 3481
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3482
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3482 always 3482
Line 3483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3483 always 3483
  "" always ""
Line 3485
  = always "void f()\n{\n    std::list<int> x;\n    if (!x.size()) {}\n}"
  "void f()\n{\n    std::list<int> x;\n    if (!x.size()) {}\n}" always "void f()\n{\n    std::list<int> x;\n    if (!x.size()) {}\n}"
Line 3490
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3490 always 3490
  code always "void f()\n{\n    std::list<int> x;\n    if (!x.size()) {}\n}"
  false always 0
Line 3491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3491 always 3491
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3492
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3492 always 3492
Line 3493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3493 always 3493
  "" always ""
Line 3495
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3495 always 3495
  "void f()\n{\n    std::list<int> x;\n    fun(x.size());\n}" always "void f()\n{\n    std::list<int> x;\n    fun(x.size());\n}"
Line 3500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3500 always 3500
  "" always ""
Line 3502
  = always "void f()\n{\n    std::list<int> x;\n    fun(!x.size());\n}"
  "void f()\n{\n    std::list<int> x;\n    fun(!x.size());\n}" always "void f()\n{\n    std::list<int> x;\n    fun(!x.size());\n}"
Line 3507
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3507 always 3507
  code always "void f()\n{\n    std::list<int> x;\n    fun(!x.size());\n}"
  false always 0
Line 3508
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3508 always 3508
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3509
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3509 always 3509
Line 3510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3510 always 3510
  "" always ""
Line 3512
  = always "void f()\n{\n    std::list<int> x;\n    fun(a && x.size());\n}"
  "void f()\n{\n    std::list<int> x;\n    fun(a && x.size());\n}" always "void f()\n{\n    std::list<int> x;\n    fun(a && x.size());\n}"
Line 3517
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3517 always 3517
  code always "void f()\n{\n    std::list<int> x;\n    fun(a && x.size());\n}"
  false always 0
Line 3518
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3518 always 3518
  "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:4]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3519
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3519 always 3519
Line 3520
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3520 always 3520
  "" always ""
Line 3522
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3522 always 3522
  "void f() {\n    std::list<int> x;\n    fun(width % x.size() != 0);\n}" always "void f() {\n    std::list<int> x;\n    fun(width % x.size() != 0);\n}"
Line 3526
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3526 always 3526
  "" always ""
Line 3529
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3529 always 3529
  "void f() {\n    std::list<int> x;\n    if (foo + 1 > x.size()) {}\n}" always "void f() {\n    std::list<int> x;\n    if (foo + 1 > x.size()) {}\n}"
Line 3533
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3533 always 3533
  "" always ""
Line 3534
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3534 always 3534
  "void f() {\n    std::list<int> x;\n    if (x.size() < 1 + foo) {}\n}" always "void f() {\n    std::list<int> x;\n    if (x.size() < 1 + foo) {}\n}"
Line 3538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3538 always 3538
  "" always ""
Line 3542
  = always "struct Fred {\n    std::list<int> x;\n};\nstruct Wilma {\n    Fred f;\n    void foo();\n};\nvoid Wilma::foo()\n{\n    if (f.x.size() == 0) {}\n}"
  "struct Fred {\n    std::list<int> x;\n};\nstruct Wilma {\n    Fred f;\n    void foo();\n};\nvoid Wilma::foo()\n{\n    if (f.x.size() == 0) {}\n}" always "struct Fred {\n    std::list<int> x;\n};\nstruct Wilma {\n    Fred f;\n    void foo();\n};\nvoid Wilma::foo()\n{\n    if (f.x.size() == 0) {}\n}"
Line 3553
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3553 always 3553
  code always "struct Fred {\n    std::list<int> x;\n};\nstruct Wilma {\n    Fred f;\n    void foo();\n};\nvoid Wilma::foo()\n{\n    if (f.x.size() == 0) {}\n}"
  false always 0
Line 3554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3554 always 3554
  "[test.cpp:10]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:10]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3555
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3555 always 3555
Line 3556
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3556 always 3556
  "" always ""
Line 3560
  = always "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nZzz * zzz;\nint main() {\n    if (zzz->x.size() > 0) { }\n}"
  "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nZzz * zzz;\nint main() {\n    if (zzz->x.size() > 0) { }\n}" always "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nZzz * zzz;\nint main() {\n    if (zzz->x.size() > 0) { }\n}"
Line 3571
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3571 always 3571
  code always "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nZzz * zzz;\nint main() {\n    if (zzz->x.size() > 0) { }\n}"
  false always 0
Line 3572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3572 always 3572
  "[test.cpp:10]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:10]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3574
  = always "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nint main() {\n    Zzz * zzz;\n    if (zzz->x.size() > 0) { }\n}"
  "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nint main() {\n    Zzz * zzz;\n    if (zzz->x.size() > 0) { }\n}" always "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nint main() {\n    Zzz * zzz;\n    if (zzz->x.size() > 0) { }\n}"
Line 3585
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3585 always 3585
  code always "namespace N {\n    class Zzz {\n    public:\n        std::list<int> x;\n    };\n}\nusing namespace N;\nint main() {\n    Zzz * zzz;\n    if (zzz->x.size() > 0) { }\n}"
  false always 0
Line 3586
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3586 always 3586
  "[test.cpp:10]: (performance) Possible inefficient checking for 'x' emptiness.\n" always "[test.cpp:10]: (performance) Possible inefficient checking for 'x' emptiness.\n"
Line 3587
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3587 always 3587
Line 3588
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3588 always 3588
  "" always ""
Line 3592
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3592 always 3592
  "void f(std::vector<int> &v) {\n    if (v.size() > 0U) {}\n}" always "void f(std::vector<int> &v) {\n    if (v.size() > 0U) {}\n}"
Line 3595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3595 always 3595
  "" always ""
Line 3597
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3597 always 3597
  "void f(std::deque<int> &v) {\n    if (v.size() > 0U) {}\n}" always "void f(std::deque<int> &v) {\n    if (v.size() > 0U) {}\n}"
Line 3600
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3600 always 3600
  "" always ""
Line 3602
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3602 always 3602
  "void f(std::array<int,3> &a) {\n    if (a.size() > 0U) {}\n}" always "void f(std::array<int,3> &a) {\n    if (a.size() > 0U) {}\n}"
Line 3605
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3605 always 3605
  "" always ""
Line 3609
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3609 always 3609
  "void f(string haystack)\n{\n    if (haystack.find(needle) != haystack.end())\n        haystack.remove(needle);}" always "void f(string haystack)\n{\n    if (haystack.find(needle) != haystack.end())\n        haystack.remove(needle);}"
Line 3614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3614 always 3614
  "[test.cpp:3]: (style) Redundant checking of STL container element existence before removing it.\n" always "[test.cpp:3]: (style) Redundant checking of STL container element existence before removing it.\n"
Line 3618
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3618 always 3618
  "void f(std::set<int> &ints) {\n    for (std::set<int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        if (a) {\n            it++;\n        }\n    }\n}" always "void f(std::set<int> &ints) {\n    for (std::set<int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        if (a) {\n            it++;\n        }\n    }\n}"
Line 3625
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3625 always 3625
  "[test.cpp:4] -> [test.cpp:2]: (warning) Missing bounds check for extra iterator increment in loop.\n" always "[test.cpp:4] -> [test.cpp:2]: (warning) Missing bounds check for extra iterator increment in loop.\n"
Line 3627
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3627 always 3627
  "void f(std::map<int,int> &ints) {\n    for (std::map<int,int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        ++it->second;\n    }\n}" always "void f(std::map<int,int> &ints) {\n    for (std::map<int,int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        ++it->second;\n    }\n}"
Line 3632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3632 always 3632
  "" always ""
Line 3634
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3634 always 3634
  "void f(const std::vector<std::string> &v) {\n    for(std::vector<std::string>::const_iterator it = v.begin(); it != v.end(); ++it) {\n        if(it+2 != v.end())\n        {\n            ++it;\n            ++it;\n        }\n    }\n}" always "void f(const std::vector<std::string> &v) {\n    for(std::vector<std::string>::const_iterator it = v.begin(); it != v.end(); ++it) {\n        if(it+2 != v.end())\n        {\n            ++it;\n            ++it;\n        }\n    }\n}"
Line 3643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3643 always 3643
  "" always ""
Line 3647
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3647 always 3647
  "void f(std::set<int> &ints) {\n    for (std::set<int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        if (a) {\n            it++;\n            if (it == ints.end())\n                return;\n        }\n    }\n}" always "void f(std::set<int> &ints) {\n    for (std::set<int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        if (a) {\n            it++;\n            if (it == ints.end())\n                return;\n        }\n    }\n}"
Line 3656
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3656 always 3656
  "" always ""
Line 3660
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3660 always 3660
  "void f(std::set<int> &ints) {\n    for (std::set<int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        for (std::set<int>::iterator it = ints2.begin(); it != ints2.end(); ++it)\n        { }\n    }\n}" always "void f(std::set<int> &ints) {\n    for (std::set<int>::iterator it = ints.begin(); it != ints.end(); ++it) {\n        for (std::set<int>::iterator it = ints2.begin(); it != ints2.end(); ++it)\n        { }\n    }\n}"
Line 3666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3666 always 3666
  "" always ""
Line 3670
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3670 always 3670
  "function f1(std::list<int> &l1) {\n    for(std::list<int>::iterator i = l1.begin(); i != l1.end(); i++) {\n        if (*i == 44) {\n            l1.insert(++i, 55);\n            break;\n        }\n    }\n}" always "function f1(std::list<int> &l1) {\n    for(std::list<int>::iterator i = l1.begin(); i != l1.end(); i++) {\n        if (*i == 44) {\n            l1.insert(++i, 55);\n            break;\n        }\n    }\n}"
Line 3678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3678 always 3678
  "" always ""
Line 3680
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3680 always 3680
  "function f1(std::list<int> &l1) {\n    for(std::list<int>::iterator i = l1.begin(); i != l1.end(); i++) {\n        if (*i == 44) {\n            l1.insert(++i, 55);\n            return;\n        }\n    }\n}" always "function f1(std::list<int> &l1) {\n    for(std::list<int>::iterator i = l1.begin(); i != l1.end(); i++) {\n        if (*i == 44) {\n            l1.insert(++i, 55);\n            return;\n        }\n    }\n}"
Line 3688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3688 always 3688
  "" always ""
Line 3692
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3692 always 3692
  "void f() {\n    for(it = map1.begin(); it != map1.end(); it++) {\n        str[i++] = (*it).first;\n    }\n}" always "void f() {\n    for(it = map1.begin(); it != map1.end(); it++) {\n        str[i++] = (*it).first;\n    }\n}"
Line 3697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3697 always 3697
  "" always ""
Line 3701
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3701 always 3701
  "void f(std::string &s) {\n    for(string::iterator it = s.begin(); it != s.end(); it++) {\n        it = s.insert(++it, 0);\n    }\n}" always "void f(std::string &s) {\n    for(string::iterator it = s.begin(); it != s.end(); it++) {\n        it = s.insert(++it, 0);\n    }\n}"
Line 3706
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3706 always 3706
  "" always ""
Line 3710
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3710 always 3710
  "void f() {\n    std::string errmsg;\n    throw errmsg.c_str();\n}" always "void f() {\n    std::string errmsg;\n    throw errmsg.c_str();\n}"
Line 3714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3714 always 3714
  "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after throwing exception.\n" always "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after throwing exception.\n"
Line 3716
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3716 always 3716
  "const char *get_msg() {\n    std::string errmsg;\n    return errmsg.c_str();\n}" always "const char *get_msg() {\n    std::string errmsg;\n    return errmsg.c_str();\n}"
Line 3720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3720 always 3720
  "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3722
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3722 always 3722
  "const char *get_msg() {\n    std::ostringstream errmsg;\n    return errmsg.str().c_str();\n}" always "const char *get_msg() {\n    std::ostringstream errmsg;\n    return errmsg.str().c_str();\n}"
Line 3726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3726 always 3726
  "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3728
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3728 always 3728
  "const char *get_msg() {\n    std::string errmsg;\n    return std::string(\"ERROR: \" + errmsg).c_str();\n}" always "const char *get_msg() {\n    std::string errmsg;\n    return std::string(\"ERROR: \" + errmsg).c_str();\n}"
Line 3732
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3732 always 3732
  "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3734
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3734 always 3734
  "const char *get_msg() {\n    std::string errmsg;\n    return (\"ERROR: \" + errmsg).c_str();\n}" always "const char *get_msg() {\n    std::string errmsg;\n    return (\"ERROR: \" + errmsg).c_str();\n}"
Line 3738
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3738 always 3738
  "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3740
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3740 always 3740
  "const char *get_msg() {\n    std::string errmsg;\n    return (\"ERROR: \" + std::string(\"crash me\")).c_str();\n}" always "const char *get_msg() {\n    std::string errmsg;\n    return (\"ERROR: \" + std::string(\"crash me\")).c_str();\n}"
Line 3744
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3744 always 3744
  "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3746
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3746 always 3746
  "void f() {\n    std::ostringstream errmsg;\n    const char *c = errmsg.str().c_str();\n}" always "void f() {\n    std::ostringstream errmsg;\n    const char *c = errmsg.str().c_str();\n}"
Line 3750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3750 always 3750
  "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3752
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3752 always 3752
  "std::string f();\n\nvoid foo() {\n    const char *c = f().c_str();\n}" always "std::string f();\n\nvoid foo() {\n    const char *c = f().c_str();\n}"
Line 3757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3757 always 3757
  "[test.cpp:4]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:4]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3759
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3759 always 3759
  "class Foo {\n    const char *f();\n};\nconst char *Foo::f() {\n    std::string s;\n    return s.c_str();\n}" always "class Foo {\n    const char *f();\n};\nconst char *Foo::f() {\n    std::string s;\n    return s.c_str();\n}"
Line 3766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3766 always 3766
  "[test.cpp:6]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:6]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3768
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3768 always 3768
  "class Foo {\n    std::string GetVal() const;\n};\nconst char *f() {\n    Foo f;\n    return f.GetVal().c_str();\n}" always "class Foo {\n    std::string GetVal() const;\n};\nconst char *f() {\n    Foo f;\n    return f.GetVal().c_str();\n}"
Line 3775
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3775 always 3775
  "[test.cpp:6]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:6]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3777
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3777 always 3777
  "const char* foo() {\n    static std::string text;\n    text = \"hello world\\n\";\n    return text.c_str();\n}" always "const char* foo() {\n    static std::string text;\n    text = \"hello world\\n\";\n    return text.c_str();\n}"
Line 3782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3782 always 3782
  "" always ""
Line 3785
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3785 always 3785
  "std::string get_msg() {\n    std::string errmsg;\n    return errmsg.c_str();\n}" always "std::string get_msg() {\n    std::string errmsg;\n    return errmsg.c_str();\n}"
Line 3789
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3789 always 3789
  "[test.cpp:3]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n" always "[test.cpp:3]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n"
Line 3791
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3791 always 3791
  "const std::string& get_msg() {\n    std::string errmsg;\n    return errmsg.c_str();\n}" always "const std::string& get_msg() {\n    std::string errmsg;\n    return errmsg.c_str();\n}"
Line 3795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3795 always 3795
  "[test.cpp:3]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n" always "[test.cpp:3]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n"
Line 3797
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3797 always 3797
  "class Foo {\n    std::string GetVal() const;\n};\nstd::string f() {\n    Foo f;\n    return f.GetVal().c_str();\n}" always "class Foo {\n    std::string GetVal() const;\n};\nstd::string f() {\n    Foo f;\n    return f.GetVal().c_str();\n}"
Line 3804
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3804 always 3804
  "[test.cpp:6]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n" always "[test.cpp:6]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n"
Line 3806
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3806 always 3806
  "std::string get_msg() {\n    std::string errmsg;\n    return errmsg;\n}" always "std::string get_msg() {\n    std::string errmsg;\n    return errmsg;\n}"
Line 3810
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3810 always 3810
  "" always ""
Line 3812
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3812 always 3812
  "std::string get_msg() {\n    MyStringClass errmsg;\n    return errmsg.c_str();\n}" always "std::string get_msg() {\n    MyStringClass errmsg;\n    return errmsg.c_str();\n}"
Line 3816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3816 always 3816
  "" always ""
Line 3818
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3818 always 3818
  "void Foo1(const std::string& str) {}\nvoid Foo2(const char* c, const std::string str) {}\nvoid Foo3(std::string& rstr) {}\nvoid Foo4(std::string str, const std::string& str) {}\nvoid Bar() {\n    std::string str = \"bar\";\n    std::stringstream ss(\"foo\");\n    Foo1(str);\n    Foo1(str.c_str());\n    Foo2(str.c_str(), str);\n    Foo2(str.c_str(), str.c_str());\n    Foo3(str.c_str());\n    Foo4(str, str);\n    Foo4(str.c_str(), str);\n    Foo4(str, str.c_str());\n    Foo4(ss.str(), ss.str().c_str());\n    Foo4(str.c_str(), str.c_str());\n}" always "void Foo1(const std::string& str) {}\nvoid Foo2(const char* c, const std::string str) {}\nvoid Foo3(std::string& rstr) {}\nvoid Foo4(std::string str, const std::string& str) {}\nvoid Bar() {\n    std::string str = \"bar\";\n    std::stringstream ss(\"foo\");\n    Foo1(str);\n    Foo1(str.c_str());\n    Foo2(str.c_str(), str);\n    Foo2(str.c_str(), str.c_str());\n    Foo3(str.c_str());\n    Foo4(str, str);\n    Foo4(str.c_str(), str);\n    Foo4(str, str.c_str());\n    Foo4(ss.str(), ss.str().c_str());\n    Foo4(str.c_str(), str.c_str());\n}"
Line 3837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3837 always 3837
  "[test.cpp:9]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:11]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n[test.cpp:14]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:15]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n[test.cpp:16]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n[test.cpp:17]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:17]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n" always "[test.cpp:9]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:11]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n[test.cpp:14]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:15]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n[test.cpp:16]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n[test.cpp:17]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:17]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 2 is slow and redundant.\n"
Line 3845
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3845 always 3845
  "void Foo1(const std::string& str) {}\nvoid Foo2(char* c, const std::string str) {}\nvoid Bar() {\n    std::string str = \"bar\";\n    Foo1(str, foo);\n    Foo2(str.c_str());\n}" always "void Foo1(const std::string& str) {}\nvoid Foo2(char* c, const std::string str) {}\nvoid Bar() {\n    std::string str = \"bar\";\n    Foo1(str, foo);\n    Foo2(str.c_str());\n}"
Line 3852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3852 always 3852
  "" always ""
Line 3854
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3854 always 3854
  "struct Foo {\n    void func(std::string str) const {}\n    static void sfunc(std::string str) {}\n};\nvoid func(std::string str) {}\nvoid Bar() {\n    std::string str = \"bar\";\n    Foo foo;\n    func(str.c_str());\n    Foo::sfunc(str.c_str());\n    foo.func(str.c_str());\n}" always "struct Foo {\n    void func(std::string str) const {}\n    static void sfunc(std::string str) {}\n};\nvoid func(std::string str) {}\nvoid Bar() {\n    std::string str = \"bar\";\n    Foo foo;\n    func(str.c_str());\n    Foo::sfunc(str.c_str());\n    foo.func(str.c_str());\n}"
Line 3866
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3866 always 3866
  "[test.cpp:9]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:10]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:11]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n" always "[test.cpp:9]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:10]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n[test.cpp:11]: (performance) Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant.\n"
Line 3871
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3871 always 3871
  "void svgFile(const std::string &content, const std::string &fileName, const double end = 1000., const double start = 0.);\nvoid Bar(std::string filename) {\n    std::string str = \"bar\";\n    std::ofstream svgFile(filename.c_str(), std::ios::trunc);\n    svgFile << \"test\";\n}" always "void svgFile(const std::string &content, const std::string &fileName, const double end = 1000., const double start = 0.);\nvoid Bar(std::string filename) {\n    std::string str = \"bar\";\n    std::ofstream svgFile(filename.c_str(), std::ios::trunc);\n    svgFile << \"test\";\n}"
Line 3877
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3877 always 3877
  "" always ""
Line 3879
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3879 always 3879
  "void Foo(const char* p) {}\nvoid Foo(const std::string& str) {Foo(str.c_str());}\nvoid Bar() {\n    std::string str = \"bar\";\n    Foo(str);\n    Foo(str.c_str());\n}" always "void Foo(const char* p) {}\nvoid Foo(const std::string& str) {Foo(str.c_str());}\nvoid Bar() {\n    std::string str = \"bar\";\n    Foo(str);\n    Foo(str.c_str());\n}"
Line 3886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3886 always 3886
  "" always ""
Line 3888
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3888 always 3888
  "int atoi(const std::string& str) {\n    return atoi(str.c_str());\n}" always "int atoi(const std::string& str) {\n    return atoi(str.c_str());\n}"
Line 3891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3891 always 3891
  "" always ""
Line 3893
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3893 always 3893
  "std::string hello()\n{\n     return \"hello\";\n}\n\nconst char *f()\n{\n    return hello().c_str();\n}" always "std::string hello()\n{\n     return \"hello\";\n}\n\nconst char *f()\n{\n    return hello().c_str();\n}"
Line 3902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3902 always 3902
  "[test.cpp:8]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:8]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3904
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3904 always 3904
  "class Fred {\n    std::string hello();\n    const char *f();\n};\nstd::string Fred::hello()\n{\n     return \"hello\";\n}\nconst char *Fred::f()\n{\n    return hello().c_str();\n}" always "class Fred {\n    std::string hello();\n    const char *f();\n};\nstd::string Fred::hello()\n{\n     return \"hello\";\n}\nconst char *Fred::f()\n{\n    return hello().c_str();\n}"
Line 3916
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3916 always 3916
  "[test.cpp:11]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:11]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3919
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3919 always 3919
  "void a(const std::string &str);\n\nvoid b() {\n    MyStringClass s;\n    a(s.c_str());\n}" always "void a(const std::string &str);\n\nvoid b() {\n    MyStringClass s;\n    a(s.c_str());\n}"
Line 3925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3925 always 3925
  "" always ""
Line 3927
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3927 always 3927
  "std::string Format(const char * name) {\n    return String::Format(\"%s:\", name).c_str();\n}" always "std::string Format(const char * name) {\n    return String::Format(\"%s:\", name).c_str();\n}"
Line 3930
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3930 always 3930
  "" always ""
Line 3933
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3933 always 3933
  "struct InternalMapInfo {\n    std::string author;\n};\nconst char* GetMapAuthor(int index) {\n    const InternalMapInfo* mapInfo = &internal_getMapInfo;\n    return mapInfo->author.c_str();\n}" always "struct InternalMapInfo {\n    std::string author;\n};\nconst char* GetMapAuthor(int index) {\n    const InternalMapInfo* mapInfo = &internal_getMapInfo;\n    return mapInfo->author.c_str();\n}"
Line 3940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3940 always 3940
  "" always ""
Line 3942
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3942 always 3942
  "struct InternalMapInfo {\n    std::string author;\n};\nstd::string GetMapAuthor(int index) {\n    const InternalMapInfo* mapInfo = &internal_getMapInfo;\n    return mapInfo->author.c_str();\n}" always "struct InternalMapInfo {\n    std::string author;\n};\nstd::string GetMapAuthor(int index) {\n    const InternalMapInfo* mapInfo = &internal_getMapInfo;\n    return mapInfo->author.c_str();\n}"
Line 3949
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3949 always 3949
  "[test.cpp:6]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n" always "[test.cpp:6]: (performance) Returning the result of c_str() in a function that returns std::string is slow and redundant.\n"
Line 3951
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3951 always 3951
  "struct InternalMapInfo {\n    std::string author;\n};\nconst char* GetMapAuthor(int index) {\n    const InternalMapInfo mapInfo = internal_getMapInfo;\n    return mapInfo.author.c_str();\n}" always "struct InternalMapInfo {\n    std::string author;\n};\nconst char* GetMapAuthor(int index) {\n    const InternalMapInfo mapInfo = internal_getMapInfo;\n    return mapInfo.author.c_str();\n}"
Line 3958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3958 always 3958
  "[test.cpp:6]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:6]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3960
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3960 always 3960
  "struct S {\n    std::string data;\n};\nconst S& getS();\nconst char* test() {\n    const struct S &s = getS();\n    return s.data.c_str();\n}" always "struct S {\n    std::string data;\n};\nconst S& getS();\nconst char* test() {\n    const struct S &s = getS();\n    return s.data.c_str();\n}"
Line 3968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3968 always 3968
  "" always ""
Line 3970
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3970 always 3970
  "struct S {\n    std::string data;\n};\nconst char* test() {\n    S s;\n    std::string &ref = s.data;\n    return ref.c_str();\n}" always "struct S {\n    std::string data;\n};\nconst char* test() {\n    S s;\n    std::string &ref = s.data;\n    return ref.c_str();\n}"
Line 3978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3978 always 3978
  "[test.cpp:7]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:7]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3980
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3980 always 3980
  "void f(const wchar_t* w, int i = 0, ...);\nvoid f(const std::string& s, int i = 0);\nvoid g(const std::wstring& p) {\n    f(p.c_str());\n}\n" always "void f(const wchar_t* w, int i = 0, ...);\nvoid f(const std::string& s, int i = 0);\nvoid g(const std::wstring& p) {\n    f(p.c_str());\n}\n"
Line 3985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3985 always 3985
  "" always ""
Line 3987
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3987 always 3987
  "struct S {\n    const char* f() const noexcept {\n        return (\"\" + m).c_str();\n    }\n    std::string m;\n};\n" always "struct S {\n    const char* f() const noexcept {\n        return (\"\" + m).c_str();\n    }\n    std::string m;\n};\n"
  true always 1
Line 3993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3993 always 3993
  "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n" always "[test.cpp:3]: (error) Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
Line 3995
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  3995 always 3995
  "struct S {\n    void f(const char** pp);\n    std::string s;\n};\nvoid S::f(const char** pp) {\n    try {\n        *pp = member.c_str();\n    }\n    catch (...) {\n        s = \"xyz\";\n        *pp = member.c_str();\n    }\n}\n" always "struct S {\n    void f(const char** pp);\n    std::string s;\n};\nvoid S::f(const char** pp) {\n    try {\n        *pp = member.c_str();\n    }\n    catch (...) {\n        s = \"xyz\";\n        *pp = member.c_str();\n    }\n}\n"
Line 4008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4008 always 4008
  "" always ""
Line 4012
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4012 always 4012
  "void f()\n{\n    string s1, s2;\n    s1.swap(s2);\n    s2.swap(s2);\n};" always "void f()\n{\n    string s1, s2;\n    s1.swap(s2);\n    s2.swap(s2);\n};"
Line 4018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4018 always 4018
  "" always ""
Line 4020
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4020 always 4020
  "void f()\n{\n    std::string s1, s2;\n    s1.swap(s2);\n    s2.swap(s2);\n};" always "void f()\n{\n    std::string s1, s2;\n    s1.swap(s2);\n    s2.swap(s2);\n};"
Line 4026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4026 always 4026
  "[test.cpp:5]: (performance) It is inefficient to swap a object with itself by calling 's2.swap(s2)'\n" always "[test.cpp:5]: (performance) It is inefficient to swap a object with itself by calling 's2.swap(s2)'\n"
Line 4028
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4028 always 4028
  "void f()\n{\n    std::string s1, s2;\n    s1.compare(s2);\n    s2.compare(s2);\n    s1.compare(s2.c_str());\n    s1.compare(0, s1.size(), s1);\n};" always "void f()\n{\n    std::string s1, s2;\n    s1.compare(s2);\n    s2.compare(s2);\n    s1.compare(s2.c_str());\n    s1.compare(0, s1.size(), s1);\n};"
Line 4036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4036 always 4036
  "[test.cpp:5]: (warning) It is inefficient to call 's2.compare(s2)' as it always returns 0.\n" always "[test.cpp:5]: (warning) It is inefficient to call 's2.compare(s2)' as it always returns 0.\n"
Line 4039
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4039 always 4039
  "class ReplayIteratorImpl{\n  int Compare(ReplayIteratorImpl* other) {\n    int cmp;\n    int ret = cursor_->compare(cursor_, other->cursor_, &cmp);\n    return (cmp);\n  }\n  WT_CURSOR *cursor_;\n};" always "class ReplayIteratorImpl{\n  int Compare(ReplayIteratorImpl* other) {\n    int cmp;\n    int ret = cursor_->compare(cursor_, other->cursor_, &cmp);\n    return (cmp);\n  }\n  WT_CURSOR *cursor_;\n};"
Line 4047
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4047 always 4047
  "" always ""
Line 4049
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4049 always 4049
  "void f()\n{\n    int x=1;\n    std::string s1, s2;\n    s1 = s1.substr();\n    s2 = s1.substr(x);\n    s1 = s2.substr(0, x);\n    s1 = s2.substr(0,std::string::npos);\n    s1 = s2.substr(x+5-n, 0);\n};" always "void f()\n{\n    int x=1;\n    std::string s1, s2;\n    s1 = s1.substr();\n    s2 = s1.substr(x);\n    s1 = s2.substr(0, x);\n    s1 = s2.substr(0,std::string::npos);\n    s1 = s2.substr(x+5-n, 0);\n};"
Line 4059
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4059 always 4059
  "[test.cpp:5]: (performance) Ineffective call of function \'substr\' because it returns a copy of the object. Use operator= instead.\n[test.cpp:8]: (performance) Ineffective call of function \'substr\' because it returns a copy of the object. Use operator= instead.\n[test.cpp:9]: (performance) Ineffective call of function \'substr\' because it returns an empty string.\n" always "[test.cpp:5]: (performance) Ineffective call of function \'substr\' because it returns a copy of the object. Use operator= instead.\n[test.cpp:8]: (performance) Ineffective call of function \'substr\' because it returns a copy of the object. Use operator= instead.\n[test.cpp:9]: (performance) Ineffective call of function \'substr\' because it returns an empty string.\n"
Line 4065
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4065 always 4065
  "void f()\n{\n    int x=1;\n    string s1, s2;\n    s1 = s1.substr();\n    s2 = s1.substr(x);\n    s1 = s2.substr(0, x);\n    s1 = s2.substr(0,std::string::npos);\n    s1 = s2.substr(x+5-n, 0);\n};" always "void f()\n{\n    int x=1;\n    string s1, s2;\n    s1 = s1.substr();\n    s2 = s1.substr(x);\n    s1 = s2.substr(0, x);\n    s1 = s2.substr(0,std::string::npos);\n    s1 = s2.substr(x+5-n, 0);\n};"
Line 4075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4075 always 4075
  "" always ""
Line 4077
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4077 always 4077
  "int main()\n{\n    std::string str = \"a1b1\";\n    return str.find(str[1], 2);\n}" always "int main()\n{\n    std::string str = \"a1b1\";\n    return str.find(str[1], 2);\n}"
Line 4082
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4082 always 4082
  "" always ""
Line 4084
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4084 always 4084
  "bool foo(std::vector<int>& v) {\n    v.empty();\n    return v.empty();\n}" always "bool foo(std::vector<int>& v) {\n    v.empty();\n    return v.empty();\n}"
Line 4088
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4088 always 4088
  "[test.cpp:2]: (warning) Ineffective call of function 'empty()'. Did you intend to call 'clear()' instead?\n" always "[test.cpp:2]: (warning) Ineffective call of function 'empty()'. Did you intend to call 'clear()' instead?\n"
Line 4090
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4090 always 4090
  "void f() {\n    OdString str;\n    str.empty();\n}" always "void f() {\n    OdString str;\n    str.empty();\n}"
Line 4094
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4094 always 4094
  "" always ""
Line 4096
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4096 always 4096
  "void f() {\n    const std::string greeting(\"Hello World !!!\");\n    const std::string::size_type npos = greeting.rfind(\" \");\n    if (npos != std::string::npos)\n        std::cout << greeting.substr(0, npos) << std::endl;\n}" always "void f() {\n    const std::string greeting(\"Hello World !!!\");\n    const std::string::size_type npos = greeting.rfind(\" \");\n    if (npos != std::string::npos)\n        std::cout << greeting.substr(0, npos) << std::endl;\n}"
Line 4102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4102 always 4102
  "" always ""
Line 4104
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4104 always 4104
  "void f(std::vector<int> a) {\n    std::remove(a.begin(), a.end(), val);\n    std::remove_if(a.begin(), a.end(), val);\n    std::unique(a.begin(), a.end(), val);\n    x = std::remove(a.begin(), a.end(), val);\n    a.erase(std::remove(a.begin(), a.end(), val));\n    std::remove(\"foo.txt\");\n}" always "void f(std::vector<int> a) {\n    std::remove(a.begin(), a.end(), val);\n    std::remove_if(a.begin(), a.end(), val);\n    std::unique(a.begin(), a.end(), val);\n    x = std::remove(a.begin(), a.end(), val);\n    a.erase(std::remove(a.begin(), a.end(), val));\n    std::remove(\"foo.txt\");\n}"
Line 4112
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4112 always 4112
  "[test.cpp:2]: (warning) Return value of std::remove() ignored. Elements remain in container.\n[test.cpp:3]: (warning) Return value of std::remove_if() ignored. Elements remain in container.\n[test.cpp:4]: (warning) Return value of std::unique() ignored. Elements remain in container.\n" always "[test.cpp:2]: (warning) Return value of std::remove() ignored. Elements remain in container.\n[test.cpp:3]: (warning) Return value of std::remove_if() ignored. Elements remain in container.\n[test.cpp:4]: (warning) Return value of std::unique() ignored. Elements remain in container.\n"
Line 4117
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4117 always 4117
  "bool f() {\n    return x ? true : (y.empty());\n}" always "bool f() {\n    return x ? true : (y.empty());\n}"
Line 4120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4120 always 4120
  "" always ""
Line 4123
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4123 always 4123
  "void f(std::string s) {\n    for (;s.empty();) {}\n}" always "void f(std::string s) {\n    for (;s.empty();) {}\n}"
Line 4126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4126 always 4126
  "" always ""
Line 4131
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4131 always 4131
  "template<class T>\nclass EffectivityRangeData {};\ntemplate<class T>\nclass EffectivityRange {\n    void unite() {\n        x < vector < EffectivityRangeData<int >> >();\n        EffectivityRange<int> er;\n    }\n    void shift() { EffectivityRangeData<int>::iterator it;  }\n};" always "template<class T>\nclass EffectivityRangeData {};\ntemplate<class T>\nclass EffectivityRange {\n    void unite() {\n        x < vector < EffectivityRangeData<int >> >();\n        EffectivityRange<int> er;\n    }\n    void shift() { EffectivityRangeData<int>::iterator it;  }\n};"
Line 4141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4141 always 4141
  "" always ""
Line 4146
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4146 always 4146
  "void foo(std::string::iterator& i) {\n    if (std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n    }\n}" always "void foo(std::string::iterator& i) {\n    if (std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n    }\n}"
Line 4151
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4151 always 4151
  "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4153
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4153 always 4153
  "void foo(std::string::iterator& i) {\n    if(foo) { bar(); }\n    else if (std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n    }\n}" always "void foo(std::string::iterator& i) {\n    if(foo) { bar(); }\n    else if (std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n    }\n}"
Line 4159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4159 always 4159
  "[test.cpp:3]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:3]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4162
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4162 always 4162
  "void foo(std::string::iterator& i) {\n    if (i != str.end() && std::isalpha(*i)) {\n        std::cout << *i;\n    }\n}" always "void foo(std::string::iterator& i) {\n    if (i != str.end() && std::isalpha(*i)) {\n        std::cout << *i;\n    }\n}"
Line 4167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4167 always 4167
  "" always ""
Line 4170
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4170 always 4170
  "void foo(std::string::iterator& i) {\n    while (std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n        i ++;\n    }\n}" always "void foo(std::string::iterator& i) {\n    while (std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n        i ++;\n    }\n}"
Line 4176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4176 always 4176
  "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4178
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4178 always 4178
  "void foo(std::string::iterator& i) {\n    do {\n        std::cout << *i;\n        i ++;\n    } while (std::isalpha(*i) && i != str.end());\n}" always "void foo(std::string::iterator& i) {\n    do {\n        std::cout << *i;\n        i ++;\n    } while (std::isalpha(*i) && i != str.end());\n}"
Line 4184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4184 always 4184
  "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4187
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4187 always 4187
  "void foo(std::string::iterator& i) {\n    while (!(!std::isalpha(*i) || i == str.end())) {\n        std::cout << *i;\n        i ++;\n    }\n}" always "void foo(std::string::iterator& i) {\n    while (!(!std::isalpha(*i) || i == str.end())) {\n        std::cout << *i;\n        i ++;\n    }\n}"
Line 4193
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4193 always 4193
  "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4196
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4196 always 4196
  "void foo(std::string::iterator& i) {\n    while (!(i == str.end() || !std::isalpha(*i))) {\n        std::cout << *i;\n        i ++;\n    }\n}" always "void foo(std::string::iterator& i) {\n    while (!(i == str.end() || !std::isalpha(*i))) {\n        std::cout << *i;\n        i ++;\n    }\n}"
Line 4202
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4202 always 4202
  "" always ""
Line 4205
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4205 always 4205
  "void foo(std::string::iterator& i) {\n    for (; std::isalpha(*i) && i != str.end() ;) {\n        std::cout << *i;\n        i ++;\n    }\n}" always "void foo(std::string::iterator& i) {\n    for (; std::isalpha(*i) && i != str.end() ;) {\n        std::cout << *i;\n        i ++;\n    }\n}"
Line 4211
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4211 always 4211
  "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4214
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4214 always 4214
  "void foo(std::string::iterator& i) {\n    for (; std::isalpha(*i) || i == str.end() ;) {\n        std::cout << *i;\n        i ++;\n    }\n}" always "void foo(std::string::iterator& i) {\n    for (; std::isalpha(*i) || i == str.end() ;) {\n        std::cout << *i;\n        i ++;\n    }\n}"
Line 4220
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4220 always 4220
  "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4224
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4224 always 4224
  "void foo(std::string::iterator& i) {\n    for (char c = *i; isRunning && i != str.end() ;) {\n        std::cout << c;\n        i ++;\n    }\n}" always "void foo(std::string::iterator& i) {\n    for (char c = *i; isRunning && i != str.end() ;) {\n        std::cout << c;\n        i ++;\n    }\n}"
Line 4230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4230 always 4230
  "" always ""
Line 4233
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4233 always 4233
  "void foo(char* c, std::string::iterator& i) {\n    if (*c && std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n    }\n}" always "void foo(char* c, std::string::iterator& i) {\n    if (*c && std::isalpha(*i) && i != str.end()) {\n        std::cout << *i;\n    }\n}"
Line 4238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4238 always 4238
  "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4241
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4241 always 4241
  "void foo(const char* c, std::string::iterator& i) {\n    if (std::isalpha(*c) && i != str.end()) {\n        std::cout << *c;\n    }\n}" always "void foo(const char* c, std::string::iterator& i) {\n    if (std::isalpha(*c) && i != str.end()) {\n        std::cout << *c;\n    }\n}"
Line 4246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4246 always 4246
  "" always ""
Line 4249
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4249 always 4249
  "void foo(std::string::iterator& i) {\n    while (std::isalpha(*i) && i != str.rend()) {\n        std::cout << *i;\n        i ++;\n    }\n}" always "void foo(std::string::iterator& i) {\n    while (std::isalpha(*i) && i != str.rend()) {\n        std::cout << *i;\n        i ++;\n    }\n}"
Line 4255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4255 always 4255
  "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:2]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4258
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4258 always 4258
  "void foo(std::string::iterator& i) {\n    if ((i == str.end() || *i) || (isFoo() && i != str.end())) {\n        std::cout << \"foo\";\n    }\n}" always "void foo(std::string::iterator& i) {\n    if ((i == str.end() || *i) || (isFoo() && i != str.end())) {\n        std::cout << \"foo\";\n    }\n}"
Line 4263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4263 always 4263
  "" always ""
Line 4265
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4265 always 4265
  "void f() {\n    std::vector <int> v;\n    std::vector <int>::iterator i = v.end();\n    *i=0;\n}\n" always "void f() {\n    std::vector <int> v;\n    std::vector <int>::iterator i = v.end();\n    *i=0;\n}\n"
Line 4270
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4270 always 4270
  "[test.cpp:4]: (error) Dereference of an invalid iterator: i\n" always "[test.cpp:4]: (error) Dereference of an invalid iterator: i\n"
Line 4272
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4272 always 4272
  "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.end();\n    *i=0;\n}\n" always "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.end();\n    *i=0;\n}\n"
Line 4276
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4276 always 4276
  "[test.cpp:3]: (error) Dereference of an invalid iterator: i\n" always "[test.cpp:3]: (error) Dereference of an invalid iterator: i\n"
Line 4278
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4278 always 4278
  "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.end();\n    *(i+1)=0;\n}\n" always "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.end();\n    *(i+1)=0;\n}\n"
Line 4282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4282 always 4282
  "[test.cpp:3]: (error) Dereference of an invalid iterator: i+1\n" always "[test.cpp:3]: (error) Dereference of an invalid iterator: i+1\n"
Line 4284
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4284 always 4284
  "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.end();\n    *(i-1)=0;\n}\n" always "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.end();\n    *(i-1)=0;\n}\n"
Line 4288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4288 always 4288
  "" always ""
Line 4290
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4290 always 4290
  "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.begin();\n    *(i-1)=0;\n}\n" always "void f(std::vector <int> v) {\n    std::vector <int>::iterator i = v.begin();\n    *(i-1)=0;\n}\n"
Line 4294
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4294 always 4294
  "[test.cpp:3]: (error) Dereference of an invalid iterator: i-1\n" always "[test.cpp:3]: (error) Dereference of an invalid iterator: i-1\n"
Line 4296
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4296 always 4296
  "void f(std::vector <int> v, bool b) {\n    std::vector <int>::iterator i = v.begin();\n    if (b)\n        i = v.end();\n    *i=0;\n}\n" always "void f(std::vector <int> v, bool b) {\n    std::vector <int>::iterator i = v.begin();\n    if (b)\n        i = v.end();\n    *i=0;\n}\n"
Line 4302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4302 always 4302
  "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i\n" always "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i\n"
Line 4304
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4304 always 4304
  "void f(std::vector <int> v, bool b) {\n    std::vector <int>::iterator i = v.begin();\n    if (b)\n        i = v.end();\n    *(i+1)=0;\n}\n" always "void f(std::vector <int> v, bool b) {\n    std::vector <int>::iterator i = v.begin();\n    if (b)\n        i = v.end();\n    *(i+1)=0;\n}\n"
Line 4310
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4310 always 4310
  "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i+1\n" always "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i+1\n"
Line 4312
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4312 always 4312
  "void f(std::vector <int> v, bool b) {\n    std::vector <int>::iterator i = v.begin();\n    if (b)\n        i = v.end();\n    *(i-1)=0;\n}\n" always "void f(std::vector <int> v, bool b) {\n    std::vector <int>::iterator i = v.begin();\n    if (b)\n        i = v.end();\n    *(i-1)=0;\n}\n"
Line 4318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4318 always 4318
  "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i-1\n" always "[test.cpp:5]: (warning) Possible dereference of an invalid iterator: i-1\n"
Line 4320
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4320 always 4320
  "int f(std::vector<int> v, int pos) {\n    if (pos >= 0)\n        return *(v.begin() + pos);\n}\n" always "int f(std::vector<int> v, int pos) {\n    if (pos >= 0)\n        return *(v.begin() + pos);\n}\n"
Line 4324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4324 always 4324
  "" always ""
Line 4326
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4326 always 4326
  "int f(std::vector<int> v, int i) {\n    auto it = std::find(v.begin(), v.end(), i);\n    if (it != v.end()) {}\n    return *it;\n}\n" always "int f(std::vector<int> v, int i) {\n    auto it = std::find(v.begin(), v.end(), i);\n    if (it != v.end()) {}\n    return *it;\n}\n"
Line 4331
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4331 always 4331
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'it!=v.end()' is redundant or there is possible dereference of an invalid iterator: it.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'it!=v.end()' is redundant or there is possible dereference of an invalid iterator: it.\n"
Line 4333
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4333 always 4333
  "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end() && *(i+1) == *i) {}\n}\n" always "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end() && *(i+1) == *i) {}\n}\n"
Line 4337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4337 always 4337
  "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i.\n" always "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i.\n"
Line 4341
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4341 always 4341
  "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end() && *i == *(i+1)) {}\n}\n" always "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end() && *i == *(i+1)) {}\n}\n"
Line 4345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4345 always 4345
  "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i.\n[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" always "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i.\n[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n"
Line 4348
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4348 always 4348
  "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i != v.end() && *i == *(i+1)) {}\n}\n" always "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i != v.end() && *i == *(i+1)) {}\n}\n"
Line 4352
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4352 always 4352
  "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i!=v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" always "[test.cpp:3] -> [test.cpp:3]: (warning) Either the condition 'i!=v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n"
Line 4354
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4354 always 4354
  "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i != v.end()) {\n        if (*(i+1) == *i) {}\n    }\n}\n" always "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i != v.end()) {\n        if (*(i+1) == *i) {}\n    }\n}\n"
Line 4360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4360 always 4360
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i!=v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i!=v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n"
Line 4362
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4362 always 4362
  "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end()) { return; }\n    if (*(i+1) == *i) {}\n}\n" always "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end()) { return; }\n    if (*(i+1) == *i) {}\n}\n"
Line 4367
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4367 always 4367
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n"
Line 4369
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4369 always 4369
  "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i != v.end() && (i+1) != v.end() && *(i+1) == *i) {}\n}\n" always "void f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i != v.end() && (i+1) != v.end() && *(i+1) == *i) {}\n}\n"
Line 4373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4373 always 4373
  "" always ""
Line 4375
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4375 always 4375
  "void f(std::string s) {\n    for (std::string::const_iterator i = s.begin(); i != s.end(); ++i) {\n        if (i != s.end() && (i + 1) != s.end() && *(i + 1) == *i) {\n            if (!isalpha(*(i + 2))) {\n                std::string modifier;\n                modifier += *i;\n                modifier += *(i + 1);\n            }\n        }\n    }\n}\n" always "void f(std::string s) {\n    for (std::string::const_iterator i = s.begin(); i != s.end(); ++i) {\n        if (i != s.end() && (i + 1) != s.end() && *(i + 1) == *i) {\n            if (!isalpha(*(i + 2))) {\n                std::string modifier;\n                modifier += *i;\n                modifier += *(i + 1);\n            }\n        }\n    }\n}\n"
Line 4386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4386 always 4386
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition '(i+1)!=s.end()' is redundant or there is possible dereference of an invalid iterator: i+2.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition '(i+1)!=s.end()' is redundant or there is possible dereference of an invalid iterator: i+2.\n"
Line 4388
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4388 always 4388
  "void f(int v, std::map<int, int> &items) {\n    for (auto it = items.begin(); it != items.end();)\n        (it->first == v) ? it = items.erase(it) : ++it;\n}\n" always "void f(int v, std::map<int, int> &items) {\n    for (auto it = items.begin(); it != items.end();)\n        (it->first == v) ? it = items.erase(it) : ++it;\n}\n"
Line 4392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4392 always 4392
  "" always ""
Line 4394
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4394 always 4394
  "void f(std::string s) {\n    for (std::string::const_iterator i = s.begin(); i != s.end(); ++i) {\n        if (i != s.end() && (i + 1) != s.end() && *(i + 1) == *i) {\n            if ((i + 2) != s.end() && !isalpha(*(i + 2))) {\n                std::string modifier;\n                modifier += *i;\n                modifier += *(i + 1);\n            }\n        }\n    }\n}\n" always "void f(std::string s) {\n    for (std::string::const_iterator i = s.begin(); i != s.end(); ++i) {\n        if (i != s.end() && (i + 1) != s.end() && *(i + 1) == *i) {\n            if ((i + 2) != s.end() && !isalpha(*(i + 2))) {\n                std::string modifier;\n                modifier += *i;\n                modifier += *(i + 1);\n            }\n        }\n    }\n}\n"
Line 4405
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4405 always 4405
  "" always ""
Line 4407
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4407 always 4407
  "int f(std::vector<int>::iterator it, const std::vector<int>& vector) {\n    if (!(it != vector.end() && it != vector.begin()))\n        throw std::out_of_range();\n    if (it != vector.end() && *it == 0)\n        return -1;\n    return *it;\n}\n" always "int f(std::vector<int>::iterator it, const std::vector<int>& vector) {\n    if (!(it != vector.end() && it != vector.begin()))\n        throw std::out_of_range();\n    if (it != vector.end() && *it == 0)\n        return -1;\n    return *it;\n}\n"
Line 4414
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4414 always 4414
  "" always ""
Line 4416
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4416 always 4416
  "int f(std::vector<int> &vect) {\n    const int &v = *vect.emplace(vect.end());\n    return v;\n}\n" always "int f(std::vector<int> &vect) {\n    const int &v = *vect.emplace(vect.end());\n    return v;\n}\n"
Line 4420
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4420 always 4420
  "" always ""
Line 4422
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4422 always 4422
  "extern bool bar(int);\nvoid f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end() && bar(*(i+1)) ) {}\n}\n" always "extern bool bar(int);\nvoid f(std::vector<int> & v) {\n    std::vector<int>::iterator i= v.begin();\n    if(i == v.end() && bar(*(i+1)) ) {}\n}\n"
Line 4427
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4427 always 4427
  "[test.cpp:4] -> [test.cpp:4]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n" always "[test.cpp:4] -> [test.cpp:4]: (warning) Either the condition 'i==v.end()' is redundant or there is possible dereference of an invalid iterator: i+1.\n"
Line 4432
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4432 always 4432
  "std::list<int> mValues;\ntypedef std::list<int>::iterator ValueIterator;\nvoid foo(ValueIterator beginValue, ValueIterator endValue) {\n    ValueIterator prevValue = beginValue;\n    ValueIterator curValue = beginValue;\n    for (++curValue; prevValue != endValue && curValue != mValues.end(); ++curValue) {\n        a = bar(*curValue);\n        prevValue = curValue;\n    }\n    if (endValue == mValues.end()) {}\n}\n" always "std::list<int> mValues;\ntypedef std::list<int>::iterator ValueIterator;\nvoid foo(ValueIterator beginValue, ValueIterator endValue) {\n    ValueIterator prevValue = beginValue;\n    ValueIterator curValue = beginValue;\n    for (++curValue; prevValue != endValue && curValue != mValues.end(); ++curValue) {\n        a = bar(*curValue);\n        prevValue = curValue;\n    }\n    if (endValue == mValues.end()) {}\n}\n"
Line 4443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4443 always 4443
  "" always ""
Line 4446
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4446 always 4446
  "int f(std::vector<int> v) {\n    return *(v.begin() + v.size() - 1);\n}\n" always "int f(std::vector<int> v) {\n    return *(v.begin() + v.size() - 1);\n}\n"
Line 4449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4449 always 4449
  "" always ""
Line 4452
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4452 always 4452
  "struct a;\nclass b {\n  void c(std::map<std::string, a *> &);\n  std::string d;\n  std::map<std::string, std::set<std::string>> e;\n};\nvoid b::c(std::map<std::string, a *> &) {\n  e.clear();\n  auto f = *e[d].begin();\n}\n" always "struct a;\nclass b {\n  void c(std::map<std::string, a *> &);\n  std::string d;\n  std::map<std::string, std::set<std::string>> e;\n};\nvoid b::c(std::map<std::string, a *> &) {\n  e.clear();\n  auto f = *e[d].begin();\n}\n"
Line 4462
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4462 always 4462
  "[test.cpp:9]: (error) Out of bounds access in expression 'e[d].begin()' because 'e[d]' is empty.\n" always "[test.cpp:9]: (error) Out of bounds access in expression 'e[d].begin()' because 'e[d]' is empty.\n"
Line 4466
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4466 always 4466
  "std::set<int>::iterator f(std::set<int>& s) {\nfor (auto it = s.begin(); it != s.end(); ++it)\n    if (*it == 42)\n        return s.erase(it);\n    return s.end();\n}\n" always "std::set<int>::iterator f(std::set<int>& s) {\nfor (auto it = s.begin(); it != s.end(); ++it)\n    if (*it == 42)\n        return s.erase(it);\n    return s.end();\n}\n"
Line 4472
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4472 always 4472
  "" always ""
Line 4477
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4477 always 4477
  "class iterator {\npublic:\n    CCommitPointer m_ptr;\n    iterator() {}\n    CCommitPointer& operator*() {\n        return m_ptr;\n    }\n    CCommitPointer* operator->() {\n        return &m_ptr;\n    }\n    iterator& operator++() {\n        ++m_ptr.m_place;\n        return *this;\n    }\n    };\n    iterator begin() {\n    iterator it;\n    it->m_place = 0;\n    return it;\n}\n" always "class iterator {\npublic:\n    CCommitPointer m_ptr;\n    iterator() {}\n    CCommitPointer& operator*() {\n        return m_ptr;\n    }\n    CCommitPointer* operator->() {\n        return &m_ptr;\n    }\n    iterator& operator++() {\n        ++m_ptr.m_place;\n        return *this;\n    }\n    };\n    iterator begin() {\n    iterator it;\n    it->m_place = 0;\n    return it;\n}\n"
  true always 1
Line 4497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4497 always 4497
  "[test.cpp:18]: (error, inconclusive) Invalid iterator 'it' used.\n" always "[test.cpp:18]: (error, inconclusive) Invalid iterator 'it' used.\n"
Line 4501
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4501 always 4501
  "void foo() {\n    for(int& x:v)\n        x = 1;\n}\n" always "void foo() {\n    for(int& x:v)\n        x = 1;\n}\n"
  true always 1
Line 4506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4506 always 4506
  "[test.cpp:3]: (style) Consider using std::fill algorithm instead of a raw loop.\n" always "[test.cpp:3]: (style) Consider using std::fill algorithm instead of a raw loop.\n"
Line 4508
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4508 always 4508
  "void foo() {\n    for(int& x:v)\n        x = x + 1;\n}\n" always "void foo() {\n    for(int& x:v)\n        x = x + 1;\n}\n"
  true always 1
Line 4513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4513 always 4513
  "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n" always "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n"
Line 4515
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4515 always 4515
  "void foo(int a, int b) {\n    for(int& x:v)\n        x = a + b;\n}\n" always "void foo(int a, int b) {\n    for(int& x:v)\n        x = a + b;\n}\n"
  true always 1
Line 4520
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4520 always 4520
  "[test.cpp:3]: (style) Consider using std::fill or std::generate algorithm instead of a raw loop.\n" always "[test.cpp:3]: (style) Consider using std::fill or std::generate algorithm instead of a raw loop.\n"
Line 4522
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4522 always 4522
  "void foo() {\n    for(int& x:v)\n        x += 1;\n}\n" always "void foo() {\n    for(int& x:v)\n        x += 1;\n}\n"
  true always 1
Line 4527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4527 always 4527
  "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n" always "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n"
Line 4529
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4529 always 4529
  "void foo() {\n    for(int& x:v)\n        x = f();\n}\n" always "void foo() {\n    for(int& x:v)\n        x = f();\n}\n"
  true always 1
Line 4534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4534 always 4534
  "[test.cpp:3]: (style) Consider using std::generate algorithm instead of a raw loop.\n" always "[test.cpp:3]: (style) Consider using std::generate algorithm instead of a raw loop.\n"
Line 4536
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4536 always 4536
  "void foo() {\n    for(int& x:v) {\n        f();\n        x = 1;\n    }\n}\n" always "void foo() {\n    for(int& x:v) {\n        f();\n        x = 1;\n    }\n}\n"
  true always 1
Line 4543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4543 always 4543
  "" always ""
Line 4545
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4545 always 4545
  "void foo() {\n    for(int& x:v) {\n        x = 1;\n        f();\n    }\n}\n" always "void foo() {\n    for(int& x:v) {\n        x = 1;\n        f();\n    }\n}\n"
  true always 1
Line 4552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4552 always 4552
  "" always ""
Line 4555
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4555 always 4555
  "void foo() {\n    for(int& x:v) {\n        x = 1;\n        break;\n    }\n}\n" always "void foo() {\n    for(int& x:v) {\n        x = 1;\n        break;\n    }\n}\n"
  true always 1
Line 4562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4562 always 4562
  "" always ""
Line 4564
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4564 always 4564
  "void foo() {\n    for(int& x:v)\n        x = ++x;\n}\n" always "void foo() {\n    for(int& x:v)\n        x = ++x;\n}\n"
  true always 1
Line 4569
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4569 always 4569
  "" always ""
Line 4573
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4573 always 4573
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        n += x;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        n += x;\n}\n"
  true always 1
Line 4579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4579 always 4579
  "[test.cpp:4]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n"
Line 4581
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4581 always 4581
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = n + x;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = n + x;\n}\n"
  true always 1
Line 4587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4587 always 4587
  "[test.cpp:4]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n"
Line 4589
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4589 always 4589
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        n += 1;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        n += 1;\n}\n"
  true always 1
Line 4595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4595 always 4595
  "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n"
Line 4597
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4597 always 4597
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = n + 1;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = n + 1;\n}\n"
  true always 1
Line 4603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4603 always 4603
  "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n"
Line 4605
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4605 always 4605
  "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b &= f(x);\n}\n" always "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b &= f(x);\n}\n"
  true always 1
Line 4612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4612 always 4612
  "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n"
Line 4614
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4614 always 4614
  "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b |= f(x);\n}\n" always "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b |= f(x);\n}\n"
  true always 1
Line 4621
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4621 always 4621
  "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n"
Line 4623
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4623 always 4623
  "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b = b && f(x);\n}\n" always "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b = b && f(x);\n}\n"
  true always 1
Line 4630
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4630 always 4630
  "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n"
Line 4632
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4632 always 4632
  "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b = b || f(x);\n}\n" always "bool f(int);\nvoid foo() {\n    bool b = false;\n    for(int x:v)\n        b = b || f(x);\n}\n"
  true always 1
Line 4639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4639 always 4639
  "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:5]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n"
Line 4641
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4641 always 4641
  "void foo() {\n    int n = 0;\n    for(int& x:v)\n        n = ++x;\n}\n" always "void foo() {\n    int n = 0;\n    for(int& x:v)\n        n = ++x;\n}\n"
  true always 1
Line 4647
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4647 always 4647
  "" always ""
Line 4651
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4651 always 4651
  "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(x);\n}\n" always "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(x);\n}\n"
  true always 1
Line 4657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4657 always 4657
  "[test.cpp:4]: (style) Consider using std::copy algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::copy algorithm instead of a raw loop.\n"
Line 4659
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4659 always 4659
  "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(f(x));\n}\n" always "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(f(x));\n}\n"
  true always 1
Line 4665
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4665 always 4665
  "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n"
Line 4667
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4667 always 4667
  "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(x + 1);\n}\n" always "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(x + 1);\n}\n"
  true always 1
Line 4673
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4673 always 4673
  "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n"
Line 4675
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4675 always 4675
  "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_front(x);\n}\n" always "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_front(x);\n}\n"
  true always 1
Line 4681
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4681 always 4681
  "[test.cpp:4]: (style) Consider using std::copy algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::copy algorithm instead of a raw loop.\n"
Line 4683
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4683 always 4683
  "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_front(f(x));\n}\n" always "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_front(f(x));\n}\n"
  true always 1
Line 4689
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4689 always 4689
  "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n"
Line 4691
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4691 always 4691
  "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_front(x + 1);\n}\n" always "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_front(x + 1);\n}\n"
  true always 1
Line 4697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4697 always 4697
  "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::transform algorithm instead of a raw loop.\n"
Line 4699
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4699 always 4699
  "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(v);\n}\n" always "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(v);\n}\n"
  true always 1
Line 4705
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4705 always 4705
  "" always ""
Line 4707
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4707 always 4707
  "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(0);\n}\n" always "void foo() {\n    std::vector<int> c;\n    for(int x:v)\n        c.push_back(0);\n}\n"
  true always 1
Line 4713
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4713 always 4713
  "" always ""
Line 4717
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4717 always 4717
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        n++;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        n++;\n}\n"
  true always 1
Line 4723
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4723 always 4723
  "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n"
Line 4725
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4725 always 4725
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        ++n;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        ++n;\n}\n"
  true always 1
Line 4731
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4731 always 4731
  "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::distance algorithm instead of a raw loop.\n"
Line 4733
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4733 always 4733
  "void foo() {\n    for(int& x:v)\n        x++;\n}\n" always "void foo() {\n    for(int& x:v)\n        x++;\n}\n"
  true always 1
Line 4738
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4738 always 4738
  "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n" always "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n"
Line 4740
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4740 always 4740
  "void foo() {\n    for(int& x:v)\n        ++x;\n}\n" always "void foo() {\n    for(int& x:v)\n        ++x;\n}\n"
  true always 1
Line 4745
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4745 always 4745
  "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n" always "[test.cpp:3]: (style) Consider using std::transform algorithm instead of a raw loop.\n"
Line 4749
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4749 always 4749
  "bool pred(int x);\nvoid foo() {\n    for(int& x:v) {\n        if (pred(x)) {\n            x = 1;\n        }\n    }\n}\n" always "bool pred(int x);\nvoid foo() {\n    for(int& x:v) {\n        if (pred(x)) {\n            x = 1;\n        }\n    }\n}\n"
  true always 1
Line 4758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4758 always 4758
  "[test.cpp:5]: (style) Consider using std::replace_if algorithm instead of a raw loop.\n" always "[test.cpp:5]: (style) Consider using std::replace_if algorithm instead of a raw loop.\n"
Line 4760
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4760 always 4760
  "bool pred(int x);\nvoid foo() {\n    int n = 0;\n    for(int x:v) {\n        if (pred(x)) {\n            n += x;\n        }\n    }\n}\n" always "bool pred(int x);\nvoid foo() {\n    int n = 0;\n    for(int x:v) {\n        if (pred(x)) {\n            n += x;\n        }\n    }\n}\n"
  true always 1
Line 4770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4770 always 4770
  "[test.cpp:6]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:6]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n"
Line 4772
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4772 always 4772
  "bool pred(int x);\nvoid foo() {\n    int n = 0;\n    for(int x:v) {\n        if (pred(x)) {\n            n += 1;\n        }\n    }\n}\n" always "bool pred(int x);\nvoid foo() {\n    int n = 0;\n    for(int x:v) {\n        if (pred(x)) {\n            n += 1;\n        }\n    }\n}\n"
  true always 1
Line 4782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4782 always 4782
  "[test.cpp:6]: (style) Consider using std::count_if algorithm instead of a raw loop.\n" always "[test.cpp:6]: (style) Consider using std::count_if algorithm instead of a raw loop.\n"
Line 4784
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4784 always 4784
  "bool pred(int x);\nvoid foo() {\n    int n = 0;\n    for(int x:v) {\n        if (pred(x)) {\n            n++;\n        }\n    }\n}\n" always "bool pred(int x);\nvoid foo() {\n    int n = 0;\n    for(int x:v) {\n        if (pred(x)) {\n            n++;\n        }\n    }\n}\n"
  true always 1
Line 4794
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4794 always 4794
  "[test.cpp:6]: (style) Consider using std::count_if algorithm instead of a raw loop.\n" always "[test.cpp:6]: (style) Consider using std::count_if algorithm instead of a raw loop.\n"
Line 4796
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4796 always 4796
  "bool pred(int x);\nvoid foo() {\n    for(int& x:v) {\n        if (pred(x)) {\n            x = x + 1;\n        }\n    }\n}\n" always "bool pred(int x);\nvoid foo() {\n    for(int& x:v) {\n        if (pred(x)) {\n            x = x + 1;\n        }\n    }\n}\n"
  true always 1
Line 4805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4805 always 4805
  "[test.cpp:5]: (style) Consider using std::transform algorithm instead of a raw loop.\n" always "[test.cpp:5]: (style) Consider using std::transform algorithm instead of a raw loop.\n"
Line 4807
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4807 always 4807
  "bool pred(int x);\nvoid foo() {\n    std::vector<int> c;\n    for(int x:v) {\n        if (pred(x)) {\n            c.push_back(x);\n        }\n    }\n}\n" always "bool pred(int x);\nvoid foo() {\n    std::vector<int> c;\n    for(int x:v) {\n        if (pred(x)) {\n            c.push_back(x);\n        }\n    }\n}\n"
  true always 1
Line 4817
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4817 always 4817
  "[test.cpp:6]: (style) Consider using std::copy_if algorithm instead of a raw loop.\n" always "[test.cpp:6]: (style) Consider using std::copy_if algorithm instead of a raw loop.\n"
Line 4819
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4819 always 4819
  "bool pred(int x);\nbool foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            return false;\n        }\n    }\n    return true;\n}\n" always "bool pred(int x);\nbool foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            return false;\n        }\n    }\n    return true;\n}\n"
  true always 1
Line 4829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4829 always 4829
  "[test.cpp:4]: (style) Consider using std::any_of algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::any_of algorithm instead of a raw loop.\n"
Line 4831
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4831 always 4831
  "bool pred(int x);\nbool foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            break;\n        }\n    }\n    return true;\n}\n" always "bool pred(int x);\nbool foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            break;\n        }\n    }\n    return true;\n}\n"
  true always 1
Line 4841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4841 always 4841
  "[test.cpp:4]: (style) Consider using std::any_of algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::any_of algorithm instead of a raw loop.\n"
Line 4843
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4843 always 4843
  "bool pred(int x);\nvoid f();\nvoid foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            f();\n            break;\n        }\n    }\n}\n" always "bool pred(int x);\nvoid f();\nvoid foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            f();\n            break;\n        }\n    }\n}\n"
  true always 1
Line 4854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4854 always 4854
  "[test.cpp:5]: (style) Consider using std::any_of algorithm instead of a raw loop.\n" always "[test.cpp:5]: (style) Consider using std::any_of algorithm instead of a raw loop.\n"
Line 4856
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4856 always 4856
  "bool pred(int x);\nvoid f(int x);\nvoid foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            f(x);\n            break;\n        }\n    }\n}\n" always "bool pred(int x);\nvoid f(int x);\nvoid foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            f(x);\n            break;\n        }\n    }\n}\n"
  true always 1
Line 4867
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4867 always 4867
  "[test.cpp:5]: (style) Consider using std::find_if algorithm instead of a raw loop.\n" always "[test.cpp:5]: (style) Consider using std::find_if algorithm instead of a raw loop.\n"
Line 4869
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4869 always 4869
  "bool pred(int x);\nbool foo() {\n    bool b = false;\n    for(int x:v) {\n        if (pred(x)) {\n            b = true;\n        }\n    }\n    if(b) {}\n    return true;\n}\n" always "bool pred(int x);\nbool foo() {\n    bool b = false;\n    for(int x:v) {\n        if (pred(x)) {\n            b = true;\n        }\n    }\n    if(b) {}\n    return true;\n}\n"
  true always 1
Line 4881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4881 always 4881
  "[test.cpp:6]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:6]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n"
Line 4883
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4883 always 4883
  "bool pred(int x);\nbool foo() {\n    bool b = false;\n    for(int x:v) {\n        if (pred(x)) {\n            b |= true;\n        }\n    }\n    return true;\n}\n" always "bool pred(int x);\nbool foo() {\n    bool b = false;\n    for(int x:v) {\n        if (pred(x)) {\n            b |= true;\n        }\n    }\n    return true;\n}\n"
  true always 1
Line 4894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4894 always 4894
  "[test.cpp:6]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:6]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n"
Line 4896
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4896 always 4896
  "bool pred(int x);\nbool foo() {\n    bool b = false;\n    for(int x:v) {\n        if (pred(x)) {\n            b &= true;\n        }\n    }\n    return true;\n}\n" always "bool pred(int x);\nbool foo() {\n    bool b = false;\n    for(int x:v) {\n        if (pred(x)) {\n            b &= true;\n        }\n    }\n    return true;\n}\n"
  true always 1
Line 4907
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4907 always 4907
  "[test.cpp:6]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:6]: (style) Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop.\n"
Line 4909
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4909 always 4909
  "bool pred(int x);\nbool foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            return false;\n        }\n        return true;\n    }\n}\n" always "bool pred(int x);\nbool foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            return false;\n        }\n        return true;\n    }\n}\n"
  true always 1
Line 4919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4919 always 4919
  "" always ""
Line 4922
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4922 always 4922
  "bool pred(int x);\nvoid foo() {\n    std::vector<int> c;\n    for(int x:v) {\n        if (pred(x)) {\n            c.push_back(x + 1);\n        }\n    }\n}\n" always "bool pred(int x);\nvoid foo() {\n    std::vector<int> c;\n    for(int x:v) {\n        if (pred(x)) {\n            c.push_back(x + 1);\n        }\n    }\n}\n"
  true always 1
Line 4932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4932 always 4932
  "" always ""
Line 4934
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4934 always 4934
  "bool pred(int x);\nvoid foo() {\n    for(int& x:v) {\n        x++;\n        if (pred(x)) {\n            x = 1;\n        }\n    }\n}\n" always "bool pred(int x);\nvoid foo() {\n    for(int& x:v) {\n        x++;\n        if (pred(x)) {\n            x = 1;\n        }\n    }\n}\n"
  true always 1
Line 4944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4944 always 4944
  "" always ""
Line 4946
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4946 always 4946
  "bool pred(int x);\nvoid f();\nvoid foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            if(x) { return; }\n            break;\n        }\n    }\n}\n" always "bool pred(int x);\nvoid f();\nvoid foo() {\n    for(int x:v) {\n        if (pred(x)) {\n            if(x) { return; }\n            break;\n        }\n    }\n}\n"
  true always 1
Line 4957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4957 always 4957
  "" always ""
Line 4961
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4961 always 4961
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x > n ? x : n;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x > n ? x : n;\n}\n"
  true always 1
Line 4967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4967 always 4967
  "[test.cpp:4]: (style) Consider using std::max_element algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::max_element algorithm instead of a raw loop.\n"
Line 4969
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4969 always 4969
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x < n ? x : n;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x < n ? x : n;\n}\n"
  true always 1
Line 4975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4975 always 4975
  "[test.cpp:4]: (style) Consider using std::min_element algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::min_element algorithm instead of a raw loop.\n"
Line 4977
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4977 always 4977
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x > n ? n : x;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x > n ? n : x;\n}\n"
  true always 1
Line 4983
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4983 always 4983
  "[test.cpp:4]: (style) Consider using std::min_element algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::min_element algorithm instead of a raw loop.\n"
Line 4985
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4985 always 4985
  "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x < n ? n : x;\n}\n" always "void foo() {\n    int n = 0;\n    for(int x:v)\n        n = x < n ? n : x;\n}\n"
  true always 1
Line 4991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4991 always 4991
  "[test.cpp:4]: (style) Consider using std::max_element algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::max_element algorithm instead of a raw loop.\n"
Line 4993
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4993 always 4993
  "void foo(int m) {\n    int n = 0;\n    for(int x:v)\n        n = x > m ? x : n;\n}\n" always "void foo(int m) {\n    int n = 0;\n    for(int x:v)\n        n = x > m ? x : n;\n}\n"
  true always 1
Line 4999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  4999 always 4999
  "[test.cpp:4]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::accumulate algorithm instead of a raw loop.\n"
Line 5003
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5003 always 5003
  "void f(std::vector<int> &v) {\n    auto v0 = v.begin();\n    v.push_back(123);\n    std::cout << *v0 << std::endl;\n}\n" always "void f(std::vector<int> &v) {\n    auto v0 = v.begin();\n    v.push_back(123);\n    std::cout << *v0 << std::endl;\n}\n"
  true always 1
Line 5009
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5009 always 5009
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'v' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'v' that may be invalid.\n"
Line 5011
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5011 always 5011
  "std::string e();\nvoid a() {\n  std::vector<std::string> b;\n  for (std::vector<std::string>::const_iterator c; c != b.end(); ++c) {\n    std::string f = e();\n    std::string::const_iterator d = f.begin();\n    if (d != f.end()) {}\n  }\n}\n" always "std::string e();\nvoid a() {\n  std::vector<std::string> b;\n  for (std::vector<std::string>::const_iterator c; c != b.end(); ++c) {\n    std::string f = e();\n    std::string::const_iterator d = f.begin();\n    if (d != f.end()) {}\n  }\n}\n"
  true always 1
Line 5021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5021 always 5021
  "" always ""
Line 5023
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5023 always 5023
  "void f(std::vector<int> &v) {\n    int *v0 = &v[0];\n    v.push_back(123);\n    std::cout << (*v0)[0] << std::endl;\n}\n" always "void f(std::vector<int> &v) {\n    int *v0 = &v[0];\n    v.push_back(123);\n    std::cout << (*v0)[0] << std::endl;\n}\n"
  true always 1
Line 5029
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5029 always 5029
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using pointer to local variable 'v' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:4]: (error) Using pointer to local variable 'v' that may be invalid.\n"
Line 5031
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5031 always 5031
  "void f() {\n    std::vector<int> v = {1};\n    int &v0 = v.front();\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n" always "void f() {\n    std::vector<int> v = {1};\n    int &v0 = v.front();\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n"
  true always 1
Line 5038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5038 always 5038
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:5]: (error) Reference to v that may be invalid.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:5]: (error) Reference to v that may be invalid.\n"
Line 5042
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5042 always 5042
  "void f() {\n    std::vector<int> v = {1};\n    int &v0 = v[0];\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n" always "void f() {\n    std::vector<int> v = {1};\n    int &v0 = v[0];\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n"
  true always 1
Line 5049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5049 always 5049
  "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:5]: (error) Reference to v that may be invalid.\n" always "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:5]: (error) Reference to v that may be invalid.\n"
Line 5052
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5052 always 5052
  "void f(std::vector<int> &v) {\n    int &v0 = v.front();\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n" always "void f(std::vector<int> &v) {\n    int &v0 = v.front();\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n"
  true always 1
Line 5058
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5058 always 5058
  "[test.cpp:2] -> [test.cpp:2] -> [test.cpp:1] -> [test.cpp:3] -> [test.cpp:4]: (error) Reference to v that may be invalid.\n" always "[test.cpp:2] -> [test.cpp:2] -> [test.cpp:1] -> [test.cpp:3] -> [test.cpp:4]: (error) Reference to v that may be invalid.\n"
Line 5062
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5062 always 5062
  "void f(std::vector<int> &v) {\n    int &v0 = v[0];\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n" always "void f(std::vector<int> &v) {\n    int &v0 = v[0];\n    v.push_back(123);\n    std::cout << v0 << std::endl;\n}\n"
  true always 1
Line 5068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5068 always 5068
  "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3] -> [test.cpp:4]: (error) Reference to v that may be invalid.\n" always "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3] -> [test.cpp:4]: (error) Reference to v that may be invalid.\n"
Line 5072
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5072 always 5072
  "void f(std::vector<int> &v) {\n    std::vector<int> *v0 = &v;\n    v.push_back(123);\n    std::cout << (*v0)[0] << std::endl;\n}\n" always "void f(std::vector<int> &v) {\n    std::vector<int> *v0 = &v;\n    v.push_back(123);\n    std::cout << (*v0)[0] << std::endl;\n}\n"
  true always 1
Line 5078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5078 always 5078
  "" always ""
Line 5080
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5080 always 5080
  "const std::vector<int> * g(int);\nvoid f() {\n    const std::vector<int> *v = g(1);\n    if (v && v->size() == 1U) {\n        const int &m = v->front();\n    }\n\n    v = g(2);\n    if (v && v->size() == 1U) {\n        const int &m = v->front();\n        if (m == 0) {}\n    }\n}\n" always "const std::vector<int> * g(int);\nvoid f() {\n    const std::vector<int> *v = g(1);\n    if (v && v->size() == 1U) {\n        const int &m = v->front();\n    }\n\n    v = g(2);\n    if (v && v->size() == 1U) {\n        const int &m = v->front();\n        if (m == 0) {}\n    }\n}\n"
  true always 1
Line 5094
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5094 always 5094
  "" always ""
Line 5096
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5096 always 5096
  "std::vector<std::string> g();\nvoid f() {\n    std::vector<std::string> x = g();\n    const std::string& y = x[1];\n    std::string z;\n    z += \"\";\n    z += y;\n}\n" always "std::vector<std::string> g();\nvoid f() {\n    std::vector<std::string> x = g();\n    const std::string& y = x[1];\n    std::string z;\n    z += \"\";\n    z += y;\n}\n"
  true always 1
Line 5104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5104 always 5104
  "" always ""
Line 5106
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5106 always 5106
  "void f(std::vector<char> v)\n{\n    auto *cur = v.data();\n    auto *end = cur + v.size();\n    while (cur < end) {\n        v.erase(v.begin(), FindNext(v));\n        cur = v.data();\n        end = cur + v.size();\n    }\n}\n" always "void f(std::vector<char> v)\n{\n    auto *cur = v.data();\n    auto *end = cur + v.size();\n    while (cur < end) {\n        v.erase(v.begin(), FindNext(v));\n        cur = v.data();\n        end = cur + v.size();\n    }\n}\n"
  true always 1
Line 5116
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5116 always 5116
  "" always ""
Line 5119
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5119 always 5119
  "void f(std::vector<std::string> v) {\n    for (auto it = v.begin(); it != v.end(); it = v.erase(it))\n        *it;\n}\n" always "void f(std::vector<std::string> v) {\n    for (auto it = v.begin(); it != v.end(); it = v.erase(it))\n        *it;\n}\n"
  true always 1
Line 5123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5123 always 5123
  "" always ""
Line 5126
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5126 always 5126
  "void f() {\n  auto v = std::vector<std::string>();\n  std::string x;\n  v.push_back(x.insert(0, \"x\"));\n  v.push_back(\"y\");\n}\n" always "void f() {\n  auto v = std::vector<std::string>();\n  std::string x;\n  v.push_back(x.insert(0, \"x\"));\n  v.push_back(\"y\");\n}\n"
  true always 1
Line 5132
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5132 always 5132
  "" always ""
Line 5135
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5135 always 5135
  "std::string GetTaskIDPerUUID(int);\nvoid InitializeJumpList(CString s);\nvoid foo() {\n    CString sAppID = GetTaskIDPerUUID(123).c_str();\n    InitializeJumpList(sAppID);\n}\n" always "std::string GetTaskIDPerUUID(int);\nvoid InitializeJumpList(CString s);\nvoid foo() {\n    CString sAppID = GetTaskIDPerUUID(123).c_str();\n    InitializeJumpList(sAppID);\n}\n"
  true always 1
Line 5141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5141 always 5141
  "" always ""
Line 5143
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5143 always 5143
  "struct A {};\nvoid f() {\n    std::vector<A *> v;\n    A *a = new A();\n    v.push_back(a);\n    A *b = v.back();\n    v.pop_back();\n    delete b;\n}\n" always "struct A {};\nvoid f() {\n    std::vector<A *> v;\n    A *a = new A();\n    v.push_back(a);\n    A *b = v.back();\n    v.pop_back();\n    delete b;\n}\n"
  true always 1
Line 5152
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5152 always 5152
  "" always ""
Line 5154
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5154 always 5154
  "struct A {};\nvoid f() {\n    std::vector<A *, std::allocator<A*>> v;\n    A *a = new A();\n    v.push_back(a);\n    A *b = v.back();\n    v.pop_back();\n    delete b;\n}\n" always "struct A {};\nvoid f() {\n    std::vector<A *, std::allocator<A*>> v;\n    A *a = new A();\n    v.push_back(a);\n    A *b = v.back();\n    v.pop_back();\n    delete b;\n}\n"
  true always 1
Line 5163
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5163 always 5163
  "" always ""
Line 5165
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5165 always 5165
  "struct A {};\nvoid f() {\n    std::vector<std::shared_ptr<A>> v;\n    std::shared_ptr<A> a = std::make_shared<A>();\n    v.push_back(a);\n    std::shared_ptr<A> b = v.back();\n    v.pop_back();\n    delete b;\n}\n" always "struct A {};\nvoid f() {\n    std::vector<std::shared_ptr<A>> v;\n    std::shared_ptr<A> a = std::make_shared<A>();\n    v.push_back(a);\n    std::shared_ptr<A> b = v.back();\n    v.pop_back();\n    delete b;\n}\n"
  true always 1
Line 5174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5174 always 5174
  "" always ""
Line 5177
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5177 always 5177
  "int f() {\n    std::vector<int> vect;\n    MyStruct info{};\n    info.vect = &vect;\n    vect.push_back(1);\n    return info.ret;\n}\n" always "int f() {\n    std::vector<int> vect;\n    MyStruct info{};\n    info.vect = &vect;\n    vect.push_back(1);\n    return info.ret;\n}\n"
  true always 1
Line 5184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5184 always 5184
  "" always ""
Line 5187
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5187 always 5187
  "struct Fred {\n    std::vector<int> v;\n    void foo();\n    void bar();\n};\nvoid Fred::foo() {\n    std::vector<int>::iterator it = v.begin();\n    bar();\n    it++;\n}\nvoid Fred::bar() {\n    v.push_back(0);\n}\n" always "struct Fred {\n    std::vector<int> v;\n    void foo();\n    void bar();\n};\nvoid Fred::foo() {\n    std::vector<int>::iterator it = v.begin();\n    bar();\n    it++;\n}\nvoid Fred::bar() {\n    v.push_back(0);\n}\n"
  true always 1
Line 5201
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5201 always 5201
  "[test.cpp:7] -> [test.cpp:8] -> [test.cpp:12] -> [test.cpp:9]: (error) Using iterator to member container 'v' that may be invalid.\n" always "[test.cpp:7] -> [test.cpp:8] -> [test.cpp:12] -> [test.cpp:9]: (error) Using iterator to member container 'v' that may be invalid.\n"
Line 5205
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5205 always 5205
  "void foo(std::vector<int>& v) {\n    std::vector<int>::iterator it = v.begin();\n    bar(v);\n    it++;\n}\nvoid bar(std::vector<int>& v) {\n    v.push_back(0);\n}\n" always "void foo(std::vector<int>& v) {\n    std::vector<int>::iterator it = v.begin();\n    bar(v);\n    it++;\n}\nvoid bar(std::vector<int>& v) {\n    v.push_back(0);\n}\n"
  true always 1
Line 5214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5214 always 5214
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:7] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'v' that may be invalid.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:3] -> [test.cpp:7] -> [test.cpp:1] -> [test.cpp:4]: (error) Using iterator to local container 'v' that may be invalid.\n"
Line 5219
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5219 always 5219
  "void f(std::vector<std::string>& x) {\n  struct I {\n    std::vector<std::string> *px{};\n  };\n  I i = { &x };\n  x.clear();\n  Parse(i);\n}\n" always "void f(std::vector<std::string>& x) {\n  struct I {\n    std::vector<std::string> *px{};\n  };\n  I i = { &x };\n  x.clear();\n  Parse(i);\n}\n"
  true always 1
Line 5227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5227 always 5227
  "" always ""
Line 5229
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5229 always 5229
  "void f() {\n  std::string x;\n  struct V {\n    std::string* pStr{};\n  };\n  struct I {\n    std::vector<V> v;\n  };\n  I b[] = {{{{ &x }}}};\n  x = \"Arial\";\n  I cb[1];\n  for (long i = 0; i < 1; ++i)\n    cb[i] = b[i];\n}\n" always "void f() {\n  std::string x;\n  struct V {\n    std::string* pStr{};\n  };\n  struct I {\n    std::vector<V> v;\n  };\n  I b[] = {{{{ &x }}}};\n  x = \"Arial\";\n  I cb[1];\n  for (long i = 0; i < 1; ++i)\n    cb[i] = b[i];\n}\n"
  true always 1
Line 5243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5243 always 5243
  "" always ""
Line 5246
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5246 always 5246
  "void f() {\n    auto v = std::vector<std::vector<std::string> >{ std::vector<std::string>{ \"hello\" } };\n    auto p = &(v.at(0).at(0));\n    v.clear();\n    std::cout << *p << std::endl;\n}\n" always "void f() {\n    auto v = std::vector<std::vector<std::string> >{ std::vector<std::string>{ \"hello\" } };\n    auto p = &(v.at(0).at(0));\n    v.clear();\n    std::cout << *p << std::endl;\n}\n"
  true always 1
Line 5253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5253 always 5253
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:5]: (error) Using pointer to local variable 'v' that may be invalid.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:5]: (error) Using pointer to local variable 'v' that may be invalid.\n"
Line 5257
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5257 always 5257
  "struct A {\n    const std::vector<int>* i;\n    A(const std::vector<int>& v)\n    : i(&v)\n    {}\n};\nint f() {\n    std::vector<int> v;\n    A a{v};\n    v.push_back(1);\n    return a.i->front();\n}\n" always "struct A {\n    const std::vector<int>* i;\n    A(const std::vector<int>& v)\n    : i(&v)\n    {}\n};\nint f() {\n    std::vector<int> v;\n    A a{v};\n    v.push_back(1);\n    return a.i->front();\n}\n"
  true always 1
Line 5270
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5270 always 5270
  "" always ""
Line 5272
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5272 always 5272
  "struct A {\n    const std::vector<int>* i;\n    A(const std::vector<int>& v)\n    : i(&v)\n    {}\n};\nvoid g(const std::vector<int>& v);\nvoid f() {\n    std::vector<int> v;\n    A a{v};\n    v.push_back(1);\n    g(a);\n}\n" always "struct A {\n    const std::vector<int>* i;\n    A(const std::vector<int>& v)\n    : i(&v)\n    {}\n};\nvoid g(const std::vector<int>& v);\nvoid f() {\n    std::vector<int> v;\n    A a{v};\n    v.push_back(1);\n    g(a);\n}\n"
  true always 1
Line 5286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5286 always 5286
  "" always ""
Line 5289
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5289 always 5289
  "void f() {\n    std::vector<int> v;\n    auto g = [&v]{};\n    v.push_back(1);\n    g();\n}\n" always "void f() {\n    std::vector<int> v;\n    auto g = [&v]{};\n    v.push_back(1);\n    g();\n}\n"
  true always 1
Line 5296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5296 always 5296
  "" always ""
Line 5298
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5298 always 5298
  "void f(std::vector<int> v) {\n    auto it = v.begin();\n    auto g = [&]{ std::cout << *it << std::endl;};\n    v.push_back(1);\n    g();\n}\n" always "void f(std::vector<int> v) {\n    auto it = v.begin();\n    auto g = [&]{ std::cout << *it << std::endl;};\n    v.push_back(1);\n    g();\n}\n"
  true always 1
Line 5305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5305 always 5305
  "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'v' that may be invalid.\n" always "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'v' that may be invalid.\n"
Line 5309
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5309 always 5309
  "void f(std::vector<int> v) {\n    auto it = v.begin();\n    auto g = [=]{ std::cout << *it << std::endl;};\n    v.push_back(1);\n    g();\n}\n" always "void f(std::vector<int> v) {\n    auto it = v.begin();\n    auto g = [=]{ std::cout << *it << std::endl;};\n    v.push_back(1);\n    g();\n}\n"
  true always 1
Line 5316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5316 always 5316
  "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'v' that may be invalid.\n" always "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:1] -> [test.cpp:5]: (error) Using iterator to local container 'v' that may be invalid.\n"
Line 5320
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5320 always 5320
  "struct A {\n    int* p;\n    void g();\n};\nvoid f(std::vector<int> v) {\n    auto it = v.begin();\n    A a{v.data()};\n    v.push_back(1);\n    a.g();\n}\n" always "struct A {\n    int* p;\n    void g();\n};\nvoid f(std::vector<int> v) {\n    auto it = v.begin();\n    A a{v.data()};\n    v.push_back(1);\n    a.g();\n}\n"
  true always 1
Line 5331
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5331 always 5331
  "[test.cpp:7] -> [test.cpp:8] -> [test.cpp:5] -> [test.cpp:9]: (error) Using object that points to local variable 'v' that may be invalid.\n" always "[test.cpp:7] -> [test.cpp:8] -> [test.cpp:5] -> [test.cpp:9]: (error) Using object that points to local variable 'v' that may be invalid.\n"
Line 5335
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5335 always 5335
  "struct A {\n    int*& p;\n    void g();\n};\nvoid f(std::vector<int> v) {\n    auto* p = v.data();\n    A a{p};\n    v.push_back(1);\n    a.g();\n}\n" always "struct A {\n    int*& p;\n    void g();\n};\nvoid f(std::vector<int> v) {\n    auto* p = v.data();\n    A a{p};\n    v.push_back(1);\n    a.g();\n}\n"
  true always 1
Line 5346
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5346 always 5346
  "[test.cpp:6] -> [test.cpp:7] -> [test.cpp:8] -> [test.cpp:5] -> [test.cpp:9]: (error) Using object that points to local variable 'v' that may be invalid.\n" always "[test.cpp:6] -> [test.cpp:7] -> [test.cpp:8] -> [test.cpp:5] -> [test.cpp:9]: (error) Using object that points to local variable 'v' that may be invalid.\n"
Line 5351
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5351 always 5351
  "void f(std::vector<int> c) {\n    std::vector<int> d(c.begin(), c.end());\n    c.erase(c.begin());\n    d.push_back(0);\n}\n" always "void f(std::vector<int> c) {\n    std::vector<int> d(c.begin(), c.end());\n    c.erase(c.begin());\n    d.push_back(0);\n}\n"
  true always 1
Line 5357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5357 always 5357
  "" always ""
Line 5362
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5362 always 5362
  "void f(std::vector<int> v) {\n    for (auto i : v) {\n        if (i < 5)\n            v.push_back(i * 2);\n    }\n}\n" always "void f(std::vector<int> v) {\n    for (auto i : v) {\n        if (i < 5)\n            v.push_back(i * 2);\n    }\n}\n"
  true always 1
Line 5369
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5369 always 5369
  "[test.cpp:2] -> [test.cpp:4]: (error) Calling 'push_back' while iterating the container is invalid.\n" always "[test.cpp:2] -> [test.cpp:4]: (error) Calling 'push_back' while iterating the container is invalid.\n"
Line 5372
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5372 always 5372
  "void f() {\n  std::vector<int> v{1, 2, 3};\n  for (int i : v) {\n    if (i == 2) {\n      v.clear();\n      return;\n    }\n  }\n}\n" always "void f() {\n  std::vector<int> v{1, 2, 3};\n  for (int i : v) {\n    if (i == 2) {\n      v.clear();\n      return;\n    }\n  }\n}\n"
  true always 1
Line 5382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5382 always 5382
  "[test.cpp:4]: (style) Consider using std::any_of algorithm instead of a raw loop.\n" always "[test.cpp:4]: (style) Consider using std::any_of algorithm instead of a raw loop.\n"
Line 5384
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5384 always 5384
  "struct A {\n  std::vector<int> v;\n  void add(int i) {\n    v.push_back(i);\n  } \n  void f() {\n    for(auto i:v)\n      add(i);\n  }\n};\n" always "struct A {\n  std::vector<int> v;\n  void add(int i) {\n    v.push_back(i);\n  } \n  void f() {\n    for(auto i:v)\n      add(i);\n  }\n};\n"
  true always 1
Line 5395
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5395 always 5395
  "[test.cpp:4] -> [test.cpp:7] -> [test.cpp:8]: (error) Calling 'add' while iterating the container is invalid.\n" always "[test.cpp:4] -> [test.cpp:7] -> [test.cpp:8]: (error) Calling 'add' while iterating the container is invalid.\n"
Line 5401
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5401 always 5401
  "void f1(std::set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f1(std::set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5407 always 5407
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5409
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5409 always 5409
  "void f2(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" always "void f2(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n"
  true always 1
Line 5417
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5417 always 5417
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5419
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5419 always 5419
  "void f3(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" always "void f3(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n"
  true always 1
Line 5425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5425 always 5425
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5427
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5427 always 5427
  "void f4(std::set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f4(std::set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5433
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5433 always 5433
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5435
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5435 always 5435
  "void f5(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" always "void f5(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n"
  true always 1
Line 5443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5443 always 5443
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5445
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5445 always 5445
  "void f6(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" always "void f6(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n"
  true always 1
Line 5451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5451 always 5451
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5453
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5453 always 5453
  "void f1(std::unordered_set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f1(std::unordered_set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5459 always 5459
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5461
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5461 always 5461
  "void f2(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" always "void f2(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n"
  true always 1
Line 5469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5469 always 5469
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5471
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5471 always 5471
  "void f3(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" always "void f3(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n"
  true always 1
Line 5477
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5477 always 5477
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5479
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5479 always 5479
  "void f4(std::unordered_set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f4(std::unordered_set<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5485
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5485 always 5485
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5487
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5487 always 5487
  "void f5(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" always "void f5(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n"
  true always 1
Line 5495
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5495 always 5495
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5497
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5497 always 5497
  "void f6(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" always "void f6(std::unordered_map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n"
  true always 1
Line 5503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5503 always 5503
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5505
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5505 always 5505
  "void g1(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 2;\n    }\n}\n" always "void g1(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 2;\n    }\n}\n"
  true always 1
Line 5513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5513 always 5513
  "" always ""
Line 5515
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5515 always 5515
  "void g1(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 2;\n    }\n}\n" always "void g1(std::map<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 2;\n    }\n}\n"
  true always 1
Line 5523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5523 always 5523
  "" always ""
Line 5525
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5525 always 5525
  "void f1(QSet<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f1(QSet<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5531
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5531 always 5531
  "" always ""
Line 5533
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5533 always 5533
  "void f1(std::multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f1(std::multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5539 always 5539
  "" always ""
Line 5541
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5541 always 5541
  "void f2(std::multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" always "void f2(std::multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n"
  true always 1
Line 5549
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5549 always 5549
  "" always ""
Line 5551
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5551 always 5551
  "void f3(std::multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" always "void f3(std::multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n"
  true always 1
Line 5557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5557 always 5557
  "" always ""
Line 5559
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5559 always 5559
  "void f4(std::multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f4(std::multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5565 always 5565
  "" always ""
Line 5567
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5567 always 5567
  "void f5(std::multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" always "void f5(std::multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n"
  true always 1
Line 5575
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5575 always 5575
  "" always ""
Line 5577
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5577 always 5577
  "void f1(std::unordered_multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f1(std::unordered_multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5583
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5583 always 5583
  "" always ""
Line 5585
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5585 always 5585
  "void f2(std::unordered_multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" always "void f2(std::unordered_multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.find(x) == m.end()) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n"
  true always 1
Line 5593
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5593 always 5593
  "" always ""
Line 5595
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5595 always 5595
  "void f3(std::unordered_multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n" always "void f3(std::unordered_multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    }\n}\n"
  true always 1
Line 5601
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5601 always 5601
  "" always ""
Line 5603
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5603 always 5603
  "void f4(std::unordered_multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f4(std::unordered_multiset<unsigned>& s, unsigned x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5609
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5609 always 5609
  "" always ""
Line 5611
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5611 always 5611
  "void f5(std::unordered_multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n" always "void f5(std::unordered_multimap<unsigned, unsigned>& m, unsigned x) {\n    if (m.count(x) == 0) {\n        m.emplace(x, 1);\n    } else {\n        m[x] = 1;\n    }\n}\n"
  true always 1
Line 5619
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5619 always 5619
  "" always ""
Line 5623
  116 always 116
  = always "void f1(std::set<LargeType>& s, const LargeType& x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  "void f1(std::set<LargeType>& s, const LargeType& x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n" always "void f1(std::set<LargeType>& s, const LargeType& x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
Line 5628
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5628 always 5628
  code always "void f1(std::set<LargeType>& s, const LargeType& x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5629
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5629 always 5629
  "" always ""
Line 5630
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5630 always 5630
  code always "void f1(std::set<LargeType>& s, const LargeType& x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5631 always 5631
  "" always ""
Line 5632
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5632 always 5632
  code always "void f1(std::set<LargeType>& s, const LargeType& x) {\n    if (s.find(x) == s.end()) {\n        s.insert(x);\n    }\n}\n"
  true always 1
Line 5633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5633 always 5633
  "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n" always "[test.cpp:3]: (performance) Searching before insertion is not necessary.\n"
Line 5637
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5637 always 5637
  "void foo() {\n   std::map<int, int> x;\n   int data = 0;\n   for(int i=0; i<10; ++i) {\n      data += 123;\n      if(x.find(5) == x.end())\n         x[5] = data;\n   }\n}" always "void foo() {\n   std::map<int, int> x;\n   int data = 0;\n   for(int i=0; i<10; ++i) {\n      data += 123;\n      if(x.find(5) == x.end())\n         x[5] = data;\n   }\n}"
  false always 0
Line 5646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5646 always 5646
  "" always ""
Line 5648
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5648 always 5648
  "void foo() {\n   std::map<int, int> x;\n   int data = 0;\n   for(int i=0; i<10; ++i) {\n      data += 123;\n      if(x.find(5) == x.end())\n         x[5] = data;\n   }\n}" always "void foo() {\n   std::map<int, int> x;\n   int data = 0;\n   for(int i=0; i<10; ++i) {\n      data += 123;\n      if(x.find(5) == x.end())\n         x[5] = data;\n   }\n}"
  false always 0
Line 5657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5657 always 5657
  "[test.cpp:7]: (performance) Searching before insertion is not necessary. Instead of 'x[5]=data' consider using 'x.emplace(5, data);'.\n" always "[test.cpp:7]: (performance) Searching before insertion is not necessary. Instead of 'x[5]=data' consider using 'x.emplace(5, data);'.\n"
Line 5659
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5659 always 5659
  "void foo() {\n   std::map<int, int> x;\n   int data = 0;\n   for(int i=0; i<10; ++i) {\n      data += 123;\n      if(x.find(5) == x.end())\n         x[5] = data;\n   }\n}" always "void foo() {\n   std::map<int, int> x;\n   int data = 0;\n   for(int i=0; i<10; ++i) {\n      data += 123;\n      if(x.find(5) == x.end())\n         x[5] = data;\n   }\n}"
Line 5668
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5668 always 5668
  "[test.cpp:7]: (performance) Searching before insertion is not necessary. Instead of 'x[5]=data' consider using 'x.try_emplace(5, data);'.\n" always "[test.cpp:7]: (performance) Searching before insertion is not necessary. Instead of 'x[5]=data' consider using 'x.try_emplace(5, data);'.\n"
Line 5673
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5673 always 5673
  "void f() {\n    std::vector<int> v;\n    for(auto x:v) {}\n}\n" always "void f() {\n    std::vector<int> v;\n    for(auto x:v) {}\n}\n"
  true always 1
Line 5678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5678 always 5678
  "[test.cpp:3]: (style) Iterating over container 'v' that is always empty.\n" always "[test.cpp:3]: (style) Iterating over container 'v' that is always empty.\n"
Line 5680
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5680 always 5680
  "void f(std::vector<int> v) {\n    v.clear();\n    for(auto x:v) {}\n}\n" always "void f(std::vector<int> v) {\n    v.clear();\n    for(auto x:v) {}\n}\n"
  true always 1
Line 5685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5685 always 5685
  "[test.cpp:3]: (style) Iterating over container 'v' that is always empty.\n" always "[test.cpp:3]: (style) Iterating over container 'v' that is always empty.\n"
Line 5687
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5687 always 5687
  "void f(std::vector<int> v) {\n    if (!v.empty()) { return; }\n    for(auto x:v) {}\n}\n" always "void f(std::vector<int> v) {\n    if (!v.empty()) { return; }\n    for(auto x:v) {}\n}\n"
  true always 1
Line 5692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5692 always 5692
  "[test.cpp:3]: (style) Iterating over container 'v' that is always empty.\n" always "[test.cpp:3]: (style) Iterating over container 'v' that is always empty.\n"
Line 5694
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5694 always 5694
  "void f(std::vector<int> v) {\n    if (v.empty()) { return; }\n    for(auto x:v) {}\n}\n" always "void f(std::vector<int> v) {\n    if (v.empty()) { return; }\n    for(auto x:v) {}\n}\n"
  true always 1
Line 5699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5699 always 5699
  "" always ""
Line 5701
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5701 always 5701
  "void f() {\n    std::vector<int> v;\n    std::sort(v.begin(), v.end());\n}\n" always "void f() {\n    std::vector<int> v;\n    std::sort(v.begin(), v.end());\n}\n"
  true always 1
Line 5706
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5706 always 5706
  "[test.cpp:3]: (style) Using sort with iterator 'v.begin()' that is always empty.\n" always "[test.cpp:3]: (style) Using sort with iterator 'v.begin()' that is always empty.\n"
Line 5708
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5708 always 5708
  "void f() {\n    std::vector<int> v;\n    v.insert(v.end(), 1);\n}\n" always "void f() {\n    std::vector<int> v;\n    v.insert(v.end(), 1);\n}\n"
  true always 1
Line 5713
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5713 always 5713
  "" always ""
Line 5715
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5715 always 5715
  "struct A {\n    explicit A(std::vector<int>*);\n};\nA f() {\n    std::vector<int> v;\n    A a(&v);\n    for(auto&& x:v) {}\n    return a;\n}\n" always "struct A {\n    explicit A(std::vector<int>*);\n};\nA f() {\n    std::vector<int> v;\n    A a(&v);\n    for(auto&& x:v) {}\n    return a;\n}\n"
  true always 1
Line 5725
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5725 always 5725
  "" always ""
Line 5727
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5727 always 5727
  "static void f1(std::list<std::string>& parameters) {\n    parameters.push_back(a);\n}\nint f2(std::list<std::string>& parameters) {\n    f1(parameters);\n}\nvoid f3() {\n    std::list<std::string> parameters;\n    int res = ::f2(parameters);\n    for (auto param : parameters) {}\n}\n" always "static void f1(std::list<std::string>& parameters) {\n    parameters.push_back(a);\n}\nint f2(std::list<std::string>& parameters) {\n    f1(parameters);\n}\nvoid f3() {\n    std::list<std::string> parameters;\n    int res = ::f2(parameters);\n    for (auto param : parameters) {}\n}\n"
  true always 1
Line 5739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5739 always 5739
  "" always ""
Line 5741
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5741 always 5741
  "namespace ns {\n    using ArrayType = std::vector<int>;\n}\nusing namespace ns;\nstatic void f() {\n    const ArrayType arr;\n    for (const auto &a : arr) {}\n}" always "namespace ns {\n    using ArrayType = std::vector<int>;\n}\nusing namespace ns;\nstatic void f() {\n    const ArrayType arr;\n    for (const auto &a : arr) {}\n}"
  true always 1
Line 5750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5750 always 5750
  "[test.cpp:7]: (style) Iterating over container 'arr' that is always empty.\n" always "[test.cpp:7]: (style) Iterating over container 'arr' that is always empty.\n"
Line 5752
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5752 always 5752
  "struct S {\n    std::vector<int> v;\n};\nvoid foo(S& s) {\n    s.v.clear();\n    bar(s);\n    std::sort(s.v.begin(), s.v.end());\n}\n" always "struct S {\n    std::vector<int> v;\n};\nvoid foo(S& s) {\n    s.v.clear();\n    bar(s);\n    std::sort(s.v.begin(), s.v.end());\n}\n"
  true always 1
Line 5761
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5761 always 5761
  "" always ""
Line 5763
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5763 always 5763
  "void f(const std::vector<int>& v, int e) {\n if (!v.empty()) {\n     if (e < 0 || true) {\n         if (e < 0)\n             return;\n     }\n }\n for (auto i : v) {}\n}\n" always "void f(const std::vector<int>& v, int e) {\n if (!v.empty()) {\n     if (e < 0 || true) {\n         if (e < 0)\n             return;\n     }\n }\n for (auto i : v) {}\n}\n"
  true always 1
Line 5773
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5773 always 5773
  "" always ""
Line 5775
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5775 always 5775
  "void f() {\n    std::vector<int> v;\n    auto& rv = v;\n    rv.push_back(42);\n    for (auto i : v) {}\n}\n" always "void f() {\n    std::vector<int> v;\n    auto& rv = v;\n    rv.push_back(42);\n    for (auto i : v) {}\n}\n"
  true always 1
Line 5782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5782 always 5782
  "" always ""
Line 5784
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5784 always 5784
  "extern void f(std::string&&);\nstatic void func() {\n    std::string s;\n    const std::string& s_ref = s;\n    f(std::move(s));\n}\n" always "extern void f(std::string&&);\nstatic void func() {\n    std::string s;\n    const std::string& s_ref = s;\n    f(std::move(s));\n}\n"
  true always 1
Line 5791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5791 always 5791
  "" always ""
Line 5795
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5795 always 5795
  "void f() {\n    static std::mutex m;\n    static std::lock_guard<std::mutex> g(m);\n}\n" always "void f() {\n    static std::mutex m;\n    static std::lock_guard<std::mutex> g(m);\n}\n"
  true always 1
Line 5800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5800 always 5800
  "[test.cpp:3]: (warning) Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.\n" always "[test.cpp:3]: (warning) Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.\n"
Line 5802
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5802 always 5802
  "void f() {\n    static std::mutex m;\n    std::lock_guard<std::mutex> g(m);\n}\n" always "void f() {\n    static std::mutex m;\n    std::lock_guard<std::mutex> g(m);\n}\n"
  true always 1
Line 5807
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5807 always 5807
  "" always ""
Line 5809
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5809 always 5809
  "void f() {\n    static std::mutex m;\n    static std::unique_lock<std::mutex> g(m, std::defer_lock);\n    static std::lock(g);\n}\n" always "void f() {\n    static std::mutex m;\n    static std::unique_lock<std::mutex> g(m, std::defer_lock);\n    static std::lock(g);\n}\n"
  true always 1
Line 5815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5815 always 5815
  "[test.cpp:3]: (warning) Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.\n" always "[test.cpp:3]: (warning) Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.\n"
Line 5817
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5817 always 5817
  "void f() {\n    static std::mutex m;\n    std::unique_lock<std::mutex> g(m, std::defer_lock);\n    std::lock(g);\n}\n" always "void f() {\n    static std::mutex m;\n    std::unique_lock<std::mutex> g(m, std::defer_lock);\n    std::lock(g);\n}\n"
  true always 1
Line 5823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5823 always 5823
  "" always ""
Line 5825
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5825 always 5825
  "void f() {\n    std::mutex m;\n    std::lock_guard<std::mutex> g(m);\n}\n" always "void f() {\n    std::mutex m;\n    std::lock_guard<std::mutex> g(m);\n}\n"
  true always 1
Line 5830
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5830 always 5830
  "[test.cpp:3]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" always "[test.cpp:3]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n"
Line 5832
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5832 always 5832
  "void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> g(m);\n}\n" always "void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> g(m);\n}\n"
  true always 1
Line 5837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5837 always 5837
  "[test.cpp:3]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" always "[test.cpp:3]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n"
Line 5839
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5839 always 5839
  "void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> g(m, std::defer_lock);\n    std::lock(g);\n}\n" always "void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> g(m, std::defer_lock);\n    std::lock(g);\n}\n"
  true always 1
Line 5845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5845 always 5845
  "[test.cpp:3]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" always "[test.cpp:3]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n"
Line 5847
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5847 always 5847
  "void g();\nvoid f() {\n    static std::mutex m;\n    m.lock();\n    g();\n    m.unlock();\n}\n" always "void g();\nvoid f() {\n    static std::mutex m;\n    m.lock();\n    g();\n    m.unlock();\n}\n"
  true always 1
Line 5855
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5855 always 5855
  "" always ""
Line 5857
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5857 always 5857
  "void g();\nvoid f() {\n    std::mutex m;\n    m.lock();\n    g();\n    m.unlock();\n}\n" always "void g();\nvoid f() {\n    std::mutex m;\n    m.lock();\n    g();\n    m.unlock();\n}\n"
  true always 1
Line 5865
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5865 always 5865
  "[test.cpp:4]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" always "[test.cpp:4]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n"
Line 5867
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5867 always 5867
  "class A {\n    std::mutex m;\n    void f() {\n        std::lock_guard<std::mutex> g(m);\n    }\n};\n" always "class A {\n    std::mutex m;\n    void f() {\n        std::lock_guard<std::mutex> g(m);\n    }\n};\n"
  true always 1
Line 5874
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5874 always 5874
  "" always ""
Line 5876
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5876 always 5876
  "class A {\n    std::mutex m;\n    void g();\n    void f() {\n        m.lock();\n        g();\n        m.unlock();\n    }\n};\n" always "class A {\n    std::mutex m;\n    void g();\n    void f() {\n        m.lock();\n        g();\n        m.unlock();\n    }\n};\n"
  true always 1
Line 5886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5886 always 5886
  "" always ""
Line 5888
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5888 always 5888
  "class A {\n    std::mutex m;\n    void f() {\n        static std::lock_guard<std::mutex> g(m);\n    }\n};\n" always "class A {\n    std::mutex m;\n    void f() {\n        static std::lock_guard<std::mutex> g(m);\n    }\n};\n"
  true always 1
Line 5895
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5895 always 5895
  "[test.cpp:4]: (warning) Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.\n" always "[test.cpp:4]: (warning) Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won't unlock until the end of the program.\n"
Line 5897
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5897 always 5897
  "std::mutex& h();\nvoid f() {\n    auto& m = h();\n    std::lock_guard<std::mutex> g(m);\n}\n" always "std::mutex& h();\nvoid f() {\n    auto& m = h();\n    std::lock_guard<std::mutex> g(m);\n}\n"
  true always 1
Line 5903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5903 always 5903
  "" always ""
Line 5905
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5905 always 5905
  "void g();\nstd::mutex& h();\nvoid f() {\n    auto& m = h();\n    m.lock();\n    g();\n    m.unlock();\n}\n" always "void g();\nstd::mutex& h();\nvoid f() {\n    auto& m = h();\n    m.lock();\n    g();\n    m.unlock();\n}\n"
  true always 1
Line 5914
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5914 always 5914
  "" always ""
Line 5916
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5916 always 5916
  "std::mutex& h();\nvoid f() {\n    auto m = h();\n    std::lock_guard<std::mutex> g(m);\n}\n" always "std::mutex& h();\nvoid f() {\n    auto m = h();\n    std::lock_guard<std::mutex> g(m);\n}\n"
  true always 1
Line 5922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5922 always 5922
  "[test.cpp:4]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" always "[test.cpp:4]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n"
Line 5924
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5924 always 5924
  "void g();\nstd::mutex& h();\nvoid f() {\n    auto m = h();\n    m.lock();\n    g();\n    m.unlock();\n}\n" always "void g();\nstd::mutex& h();\nvoid f() {\n    auto m = h();\n    m.lock();\n    g();\n    m.unlock();\n}\n"
  true always 1
Line 5933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5933 always 5933
  "[test.cpp:5]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n" always "[test.cpp:5]: (warning) The lock is ineffective because the mutex is locked at the same scope as the mutex itself.\n"
Line 5935
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5935 always 5935
  "void foo();\nvoid bar();\nvoid f() {\n    std::mutex m;\n    std::thread t([&m](){\n        m.lock();\n        foo();\n        m.unlock();\n    });\n    m.lock();\n    bar();\n    m.unlock();\n}\n" always "void foo();\nvoid bar();\nvoid f() {\n    std::mutex m;\n    std::thread t([&m](){\n        m.lock();\n        foo();\n        m.unlock();\n    });\n    m.lock();\n    bar();\n    m.unlock();\n}\n"
  true always 1
Line 5949
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5949 always 5949
  "" always ""
Line 5951
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5951 always 5951
  "void foo();\nvoid bar();\nvoid f() {\n    std::mutex m;\n    std::thread t([&m](){\n        std::unique_lock<std::mutex> g{m};\n        foo();\n    });\n    std::unique_lock<std::mutex> g{m};\n    bar();\n}\n" always "void foo();\nvoid bar();\nvoid f() {\n    std::mutex m;\n    std::thread t([&m](){\n        std::unique_lock<std::mutex> g{m};\n        foo();\n    });\n    std::unique_lock<std::mutex> g{m};\n    bar();\n}\n"
  true always 1
Line 5963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5963 always 5963
  "" always ""
Line 5965
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5965 always 5965
  "void foo() { int f = 0; auto g(f); g = g; }" always "void foo() { int f = 0; auto g(f); g = g; }"
Line 5966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5966 always 5966
  "" always ""
Line 5968
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5968 always 5968
  "struct foobar {\n    int foo;\n    std::shared_mutex foo_mtx;\n    int bar;\n    std::shared_mutex bar_mtx;\n};\nvoid f() {\n    foobar xyz;\n    {\n        std::shared_lock shared_foo_lock(xyz.foo_mtx, std::defer_lock);\n        std::shared_lock shared_bar_lock(xyz.bar_mtx, std::defer_lock);\n        std::scoped_lock shared_multi_lock(shared_foo_lock, shared_bar_lock);\n    }\n}\n" always "struct foobar {\n    int foo;\n    std::shared_mutex foo_mtx;\n    int bar;\n    std::shared_mutex bar_mtx;\n};\nvoid f() {\n    foobar xyz;\n    {\n        std::shared_lock shared_foo_lock(xyz.foo_mtx, std::defer_lock);\n        std::shared_lock shared_bar_lock(xyz.bar_mtx, std::defer_lock);\n        std::scoped_lock shared_multi_lock(shared_foo_lock, shared_bar_lock);\n    }\n}\n"
Line 5982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/teststl.cpp" always "cppcheck-2.8/test/teststl.cpp"
  5982 always 5982
  "" always ""
