

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742145 expected@var22 !=@expr1073742146 actual@var23 ) {
62: std ::@expr1073742147 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742148 expected@var22 ;
64: std ::@expr1073742149 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742150 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742151 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742152 str (@expr1073742153 ) , actualStr@var26 .@expr1073742154 str (@expr1073742155 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742156 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742157 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742158 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742159 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testutils.h

1:
|
34:
35: class Token ;
36:
37: class givenACodeSampleToTokenize {
38: private:
39: Tokenizer tokenizer@var102 ;
40: static const Settings settings@var103 ;
41:
42: public:
43: explicit givenACodeSampleToTokenize ( const char sample@var104 [ ] , bool createOnly@var105 = false , bool cpp@var106 = true )
44: : tokenizer@var102 ( & settings@var103 , nullptr ) {
45: std ::@expr1073742160 istringstream iss@var107 (@expr1073742161 sample@var104 ) ;
46: if (@expr1073742162 createOnly@var105 ) {
47: tokenizer@var102 .@expr1073742163 list@var108 .@expr1073742164 createTokens (@expr1073742165 iss@var107 , cpp@var106 ?@expr342 "test.cpp" :@expr343 "test.c" ) ; }
48: else {
49: tokenizer@var102 .@expr1073742168 tokenize (@expr1073742169 iss@var107 , cpp@var106 ?@expr342 "test.cpp" :@expr343 "test.c" ) ; }
50: }
51:
52: const Token * tokens ( ) const {
53: return tokenizer@var102 .@expr1073742172 tokens (@expr1073742173 ) ;
54: }
55: } ;
56:
57:
58: class SimpleSuppressor : public ErrorLogger {
59: public:
60: SimpleSuppressor ( Settings & settings@var109 , ErrorLogger * next@var110 )
61: : settings@var114 ( settings@var109 ) , next@var115 ( next@var110 ) { }
62: void reportOut ( const std :: string & outmsg@var111 , Color = Color :: Reset ) override {
63: next@var115 .@expr1073742174 reportOut (@expr1073742175 outmsg@var111 ) ;
64: }
65: void reportErr ( const ErrorMessage & msg@var112 ) override {
66: if (@expr1073742176 !@expr1073742177 msg@var112 .@expr1073742178 callStack@var113 .@expr1073742179 empty (@expr1073742180 ) &&@expr1073742181 !@expr1073742182 settings@var114 .@expr1073742183 nomsg@var116 .@expr1073742184 isSuppressed (@expr1073742185 msg@var112 .@expr1073742186 toSuppressionsErrorMessage (@expr1073742187 ) ) ) {
67: next@var115 .@expr1073742188 reportErr (@expr1073742189 msg@var112 ) ; }
68: }
69: private:
70: Settings & settings@var114 ;
71: ErrorLogger * next@var115 ;
72: } ;
73:
74: class ScopedFile {
75: public:
76: ScopedFile ( const std :: string & name@var117 , const std :: string & content@var118 ) : mName@var120 ( name@var117 ) {
77: std ::@expr1073742190 ofstream of@var119 (@expr1073742191 mName@var120 ) ;
78: of@var119 <<@expr1073742192 content@var118 ;
79: }
80:
81: ~ ScopedFile ( ) {
82: remove (@expr1073742193 mName@var120 .@expr1073742194 c_str (@expr1073742195 ) ) ;
83: }
84: private:
85: std :: string mName@var120 ;
86: } ;

##file cppcheck-2.8/test/testtoken.cpp

1:
|
31:
32: struct InternalError ;
33:
34:
35: class TestToken : public TestFixture {
36: public:
37: TestToken ( ) : TestFixture ( "TestToken" ) { }
38:
39: private:
40: std :: vector < std :: string > arithmeticalOps@var121 ;
41: std :: vector < std :: string > logicalOps@var122 ;
42: std :: vector < std :: string > bitOps@var123 ;
43: std :: vector < std :: string > comparisonOps@var124 ;
44: std :: vector < std :: string > extendedOps@var125 ;
45: std :: vector < std :: string > assignmentOps@var126 ;
46:
47: void run ( ) override {
48: arithmeticalOps@var121 =@expr1073742196 {@expr1073742197 "+" , "-" , "*" , "/" , "%" , "<<" , ">>" } ;
49: logicalOps@var122 =@expr1073742198 {@expr1073742199 "&&" , "||" , "!" } ;
50: comparisonOps@var124 =@expr1073742200 {@expr1073742201 "==" , "!=" , "<" , "<=" , ">" , ">=" } ;
51: bitOps@var123 =@expr1073742202 {@expr1073742203 "&" , "|" , "^" , "~" } ;
52: extendedOps@var125 =@expr1073742204 {@expr1073742205 "," , "[" , "]" , "(" , ")" , "?" , ":" } ;
53: assignmentOps@var126 =@expr1073742206 {@expr1073742207 "=" , "+=" , "-=" , "*=" , "/=" , "%=" , "&=" , "^=" , "|=" , "<<=" , ">>=" } ;
54:
55: $do ${ $if $(@expr1073742208 $prepareTest $(@expr1073742209 "nextprevious" $) $) ${ $setVerbose $(@expr1073742210 $false $) $; nextprevious $(@expr1073742211 $) $; $} $} $while $(@expr1073742212 $false $) ;
56: $do ${ $if $(@expr1073742213 $prepareTest $(@expr1073742214 "multiCompare" $) $) ${ $setVerbose $(@expr1073742215 $false $) $; multiCompare $(@expr1073742216 $) $; $} $} $while $(@expr1073742217 $false $) ;
57: $do ${ $if $(@expr1073742218 $prepareTest $(@expr1073742219 "multiCompare2" $) $) ${ $setVerbose $(@expr1073742220 $false $) $; multiCompare2 $(@expr1073742221 $) $; $} $} $while $(@expr1073742222 $false $) ;
58: $do ${ $if $(@expr1073742223 $prepareTest $(@expr1073742224 "multiCompare3" $) $) ${ $setVerbose $(@expr1073742225 $false $) $; multiCompare3 $(@expr1073742226 $) $; $} $} $while $(@expr1073742227 $false $) ;
59: $do ${ $if $(@expr1073742228 $prepareTest $(@expr1073742229 "multiCompare4" $) $) ${ $setVerbose $(@expr1073742230 $false $) $; multiCompare4 $(@expr1073742231 $) $; $} $} $while $(@expr1073742232 $false $) ;
60: $do ${ $if $(@expr1073742233 $prepareTest $(@expr1073742234 "multiCompare5" $) $) ${ $setVerbose $(@expr1073742235 $false $) $; multiCompare5 $(@expr1073742236 $) $; $} $} $while $(@expr1073742237 $false $) ;
61: $do ${ $if $(@expr1073742238 $prepareTest $(@expr1073742239 "charTypes" $) $) ${ $setVerbose $(@expr1073742240 $false $) $; charTypes $(@expr1073742241 $) $; $} $} $while $(@expr1073742242 $false $) ;
62: $do ${ $if $(@expr1073742243 $prepareTest $(@expr1073742244 "stringTypes" $) $) ${ $setVerbose $(@expr1073742245 $false $) $; stringTypes $(@expr1073742246 $) $; $} $} $while $(@expr1073742247 $false $) ;
63: $do ${ $if $(@expr1073742248 $prepareTest $(@expr1073742249 "getStrLength" $) $) ${ $setVerbose $(@expr1073742250 $false $) $; getStrLength $(@expr1073742251 $) $; $} $} $while $(@expr1073742252 $false $) ;
64: $do ${ $if $(@expr1073742253 $prepareTest $(@expr1073742254 "getStrSize" $) $) ${ $setVerbose $(@expr1073742255 $false $) $; getStrSize $(@expr1073742256 $) $; $} $} $while $(@expr1073742257 $false $) ;
65: $do ${ $if $(@expr1073742258 $prepareTest $(@expr1073742259 "getCharAt" $) $) ${ $setVerbose $(@expr1073742260 $false $) $; getCharAt $(@expr1073742261 $) $; $} $} $while $(@expr1073742262 $false $) ;
66: $do ${ $if $(@expr1073742263 $prepareTest $(@expr1073742264 "strValue" $) $) ${ $setVerbose $(@expr1073742265 $false $) $; strValue $(@expr1073742266 $) $; $} $} $while $(@expr1073742267 $false $) ;
67: $do ${ $if $(@expr1073742268 $prepareTest $(@expr1073742269 "concatStr" $) $) ${ $setVerbose $(@expr1073742270 $false $) $; concatStr $(@expr1073742271 $) $; $} $} $while $(@expr1073742272 $false $) ;
68:
69: $do ${ $if $(@expr1073742273 $prepareTest $(@expr1073742274 "deleteLast" $) $) ${ $setVerbose $(@expr1073742275 $false $) $; deleteLast $(@expr1073742276 $) $; $} $} $while $(@expr1073742277 $false $) ;
70: $do ${ $if $(@expr1073742278 $prepareTest $(@expr1073742279 "deleteFirst" $) $) ${ $setVerbose $(@expr1073742280 $false $) $; deleteFirst $(@expr1073742281 $) $; $} $} $while $(@expr1073742282 $false $) ;
71: $do ${ $if $(@expr1073742283 $prepareTest $(@expr1073742284 "nextArgument" $) $) ${ $setVerbose $(@expr1073742285 $false $) $; nextArgument $(@expr1073742286 $) $; $} $} $while $(@expr1073742287 $false $) ;
72: $do ${ $if $(@expr1073742288 $prepareTest $(@expr1073742289 "eraseTokens" $) $) ${ $setVerbose $(@expr1073742290 $false $) $; eraseTokens $(@expr1073742291 $) $; $} $} $while $(@expr1073742292 $false $) ;
73:
74: $do ${ $if $(@expr1073742293 $prepareTest $(@expr1073742294 "matchAny" $) $) ${ $setVerbose $(@expr1073742295 $false $) $; matchAny $(@expr1073742296 $) $; $} $} $while $(@expr1073742297 $false $) ;
75: $do ${ $if $(@expr1073742298 $prepareTest $(@expr1073742299 "matchSingleChar" $) $) ${ $setVerbose $(@expr1073742300 $false $) $; matchSingleChar $(@expr1073742301 $) $; $} $} $while $(@expr1073742302 $false $) ;
76: $do ${ $if $(@expr1073742303 $prepareTest $(@expr1073742304 "matchNothingOrAnyNotElse" $) $) ${ $setVerbose $(@expr1073742305 $false $) $; matchNothingOrAnyNotElse $(@expr1073742306 $) $; $} $} $while $(@expr1073742307 $false $) ;
77: $do ${ $if $(@expr1073742308 $prepareTest $(@expr1073742309 "matchType" $) $) ${ $setVerbose $(@expr1073742310 $false $) $; matchType $(@expr1073742311 $) $; $} $} $while $(@expr1073742312 $false $) ;
78: $do ${ $if $(@expr1073742313 $prepareTest $(@expr1073742314 "matchChar" $) $) ${ $setVerbose $(@expr1073742315 $false $) $; matchChar $(@expr1073742316 $) $; $} $} $while $(@expr1073742317 $false $) ;
79: $do ${ $if $(@expr1073742318 $prepareTest $(@expr1073742319 "matchCompOp" $) $) ${ $setVerbose $(@expr1073742320 $false $) $; matchCompOp $(@expr1073742321 $) $; $} $} $while $(@expr1073742322 $false $) ;
80: $do ${ $if $(@expr1073742323 $prepareTest $(@expr1073742324 "matchStr" $) $) ${ $setVerbose $(@expr1073742325 $false $) $; matchStr $(@expr1073742326 $) $; $} $} $while $(@expr1073742327 $false $) ;
81: $do ${ $if $(@expr1073742328 $prepareTest $(@expr1073742329 "matchVarid" $) $) ${ $setVerbose $(@expr1073742330 $false $) $; matchVarid $(@expr1073742331 $) $; $} $} $while $(@expr1073742332 $false $) ;
82: $do ${ $if $(@expr1073742333 $prepareTest $(@expr1073742334 "matchNumeric" $) $) ${ $setVerbose $(@expr1073742335 $false $) $; matchNumeric $(@expr1073742336 $) $; $} $} $while $(@expr1073742337 $false $) ;
83: $do ${ $if $(@expr1073742338 $prepareTest $(@expr1073742339 "matchBoolean" $) $) ${ $setVerbose $(@expr1073742340 $false $) $; matchBoolean $(@expr1073742341 $) $; $} $} $while $(@expr1073742342 $false $) ;
84: $do ${ $if $(@expr1073742343 $prepareTest $(@expr1073742344 "matchOr" $) $) ${ $setVerbose $(@expr1073742345 $false $) $; matchOr $(@expr1073742346 $) $; $} $} $while $(@expr1073742347 $false $) ;
85: $do ${ $if $(@expr1073742348 $prepareTest $(@expr1073742349 "matchOp" $) $) ${ $setVerbose $(@expr1073742350 $false $) $; matchOp $(@expr1073742351 $) $; $} $} $while $(@expr1073742352 $false $) ;
86: $do ${ $if $(@expr1073742353 $prepareTest $(@expr1073742354 "matchConstOp" $) $) ${ $setVerbose $(@expr1073742355 $false $) $; matchConstOp $(@expr1073742356 $) $; $} $} $while $(@expr1073742357 $false $) ;
87:
88: $do ${ $if $(@expr1073742358 $prepareTest $(@expr1073742359 "isArithmeticalOp" $) $) ${ $setVerbose $(@expr1073742360 $false $) $; isArithmeticalOp $(@expr1073742361 $) $; $} $} $while $(@expr1073742362 $false $) ;
89: $do ${ $if $(@expr1073742363 $prepareTest $(@expr1073742364 "isOp" $) $) ${ $setVerbose $(@expr1073742365 $false $) $; isOp $(@expr1073742366 $) $; $} $} $while $(@expr1073742367 $false $) ;
90: $do ${ $if $(@expr1073742368 $prepareTest $(@expr1073742369 "isConstOp" $) $) ${ $setVerbose $(@expr1073742370 $false $) $; isConstOp $(@expr1073742371 $) $; $} $} $while $(@expr1073742372 $false $) ;
91: $do ${ $if $(@expr1073742373 $prepareTest $(@expr1073742374 "isExtendedOp" $) $) ${ $setVerbose $(@expr1073742375 $false $) $; isExtendedOp $(@expr1073742376 $) $; $} $} $while $(@expr1073742377 $false $) ;
92: $do ${ $if $(@expr1073742378 $prepareTest $(@expr1073742379 "isAssignmentOp" $) $) ${ $setVerbose $(@expr1073742380 $false $) $; isAssignmentOp $(@expr1073742381 $) $; $} $} $while $(@expr1073742382 $false $) ;
93: $do ${ $if $(@expr1073742383 $prepareTest $(@expr1073742384 "isStandardType" $) $) ${ $setVerbose $(@expr1073742385 $false $) $; isStandardType $(@expr1073742386 $) $; $} $} $while $(@expr1073742387 $false $) ;
94: $do ${ $if $(@expr1073742388 $prepareTest $(@expr1073742389 "literals" $) $) ${ $setVerbose $(@expr1073742390 $false $) $; literals $(@expr1073742391 $) $; $} $} $while $(@expr1073742392 $false $) ;
95: $do ${ $if $(@expr1073742393 $prepareTest $(@expr1073742394 "operators" $) $) ${ $setVerbose $(@expr1073742395 $false $) $; operators $(@expr1073742396 $) $; $} $} $while $(@expr1073742397 $false $) ;
96:
97: $do ${ $if $(@expr1073742398 $prepareTest $(@expr1073742399 "updateProperties" $) $) ${ $setVerbose $(@expr1073742400 $false $) $; updateProperties $(@expr1073742401 $) $; $} $} $while $(@expr1073742402 $false $) ;
98: $do ${ $if $(@expr1073742403 $prepareTest $(@expr1073742404 "isNameGuarantees1" $) $) ${ $setVerbose $(@expr1073742405 $false $) $; isNameGuarantees1 $(@expr1073742406 $) $; $} $} $while $(@expr1073742407 $false $) ;
99: $do ${ $if $(@expr1073742408 $prepareTest $(@expr1073742409 "isNameGuarantees2" $) $) ${ $setVerbose $(@expr1073742410 $false $) $; isNameGuarantees2 $(@expr1073742411 $) $; $} $} $while $(@expr1073742412 $false $) ;
100: $do ${ $if $(@expr1073742413 $prepareTest $(@expr1073742414 "isNameGuarantees3" $) $) ${ $setVerbose $(@expr1073742415 $false $) $; isNameGuarantees3 $(@expr1073742416 $) $; $} $} $while $(@expr1073742417 $false $) ;
101: $do ${ $if $(@expr1073742418 $prepareTest $(@expr1073742419 "isNameGuarantees4" $) $) ${ $setVerbose $(@expr1073742420 $false $) $; isNameGuarantees4 $(@expr1073742421 $) $; $} $} $while $(@expr1073742422 $false $) ;
102: $do ${ $if $(@expr1073742423 $prepareTest $(@expr1073742424 "isNameGuarantees5" $) $) ${ $setVerbose $(@expr1073742425 $false $) $; isNameGuarantees5 $(@expr1073742426 $) $; $} $} $while $(@expr1073742427 $false $) ;
103: $do ${ $if $(@expr1073742428 $prepareTest $(@expr1073742429 "isNameGuarantees6" $) $) ${ $setVerbose $(@expr1073742430 $false $) $; isNameGuarantees6 $(@expr1073742431 $) $; $} $} $while $(@expr1073742432 $false $) ;
104:
105: $do ${ $if $(@expr1073742433 $prepareTest $(@expr1073742434 "canFindMatchingBracketsNeedsOpen" $) $) ${ $setVerbose $(@expr1073742435 $false $) $; canFindMatchingBracketsNeedsOpen $(@expr1073742436 $) $; $} $} $while $(@expr1073742437 $false $) ;
106: $do ${ $if $(@expr1073742438 $prepareTest $(@expr1073742439 "canFindMatchingBracketsInnerPair" $) $) ${ $setVerbose $(@expr1073742440 $false $) $; canFindMatchingBracketsInnerPair $(@expr1073742441 $) $; $} $} $while $(@expr1073742442 $false $) ;
107: $do ${ $if $(@expr1073742443 $prepareTest $(@expr1073742444 "canFindMatchingBracketsOuterPair" $) $) ${ $setVerbose $(@expr1073742445 $false $) $; canFindMatchingBracketsOuterPair $(@expr1073742446 $) $; $} $} $while $(@expr1073742447 $false $) ;
108: $do ${ $if $(@expr1073742448 $prepareTest $(@expr1073742449 "canFindMatchingBracketsWithTooManyClosing" $) $) ${ $setVerbose $(@expr1073742450 $false $) $; canFindMatchingBracketsWithTooManyClosing $(@expr1073742451 $) $; $} $} $while $(@expr1073742452 $false $) ;
109: $do ${ $if $(@expr1073742453 $prepareTest $(@expr1073742454 "canFindMatchingBracketsWithTooManyOpening" $) $) ${ $setVerbose $(@expr1073742455 $false $) $; canFindMatchingBracketsWithTooManyOpening $(@expr1073742456 $) $; $} $} $while $(@expr1073742457 $false $) ;
110: $do ${ $if $(@expr1073742458 $prepareTest $(@expr1073742459 "findClosingBracket" $) $) ${ $setVerbose $(@expr1073742460 $false $) $; findClosingBracket $(@expr1073742461 $) $; $} $} $while $(@expr1073742462 $false $) ;
111:
112: $do ${ $if $(@expr1073742463 $prepareTest $(@expr1073742464 "expressionString" $) $) ${ $setVerbose $(@expr1073742465 $false $) $; expressionString $(@expr1073742466 $) $; $} $} $while $(@expr1073742467 $false $) ;
113:
114: $do ${ $if $(@expr1073742468 $prepareTest $(@expr1073742469 "hasKnownIntValue" $) $) ${ $setVerbose $(@expr1073742470 $false $) $; hasKnownIntValue $(@expr1073742471 $) $; $} $} $while $(@expr1073742472 $false $) ;
115: }
116:
117: void nextprevious ( ) const {
118: Token * token@var127 ; token@var127 =@expr1073742473 new Token (@expr1073742474 ) ;
119: token@var127 .@expr651 str (@expr1073742476 "1" ) ;
120: token@var127 .@expr1073742477 insertToken (@expr1073742478 "2" ) ;
121: token@var127 .@expr655 next (@expr656 ) .@expr1073742481 insertToken (@expr1073742482 "3" ) ;
122: Token * last@var128 ; last@var128 =@expr1073742483 token@var127 .@expr660 tokAt (@expr661 2 ) ;
123: $if $(@expr1073742486 $!@expr1073742487 $assertEquals $(@expr1073742488 "cppcheck-2.8/test/testtoken.cpp" $, 123 $, token@var127 .@expr651 str (@expr1073742490 ) $, "1" $) $) { $return ; }
124: $if $(@expr1073742491 $!@expr1073742492 $assertEquals $(@expr1073742493 "cppcheck-2.8/test/testtoken.cpp" $, 124 $, token@var127 .@expr655 next (@expr656 ) .@expr1073742496 str (@expr1073742497 ) $, "2" $) $) { $return ; }
125:
126: $if $(@expr1073742498 $!@expr1073742499 $assertEquals $(@expr1073742500 "cppcheck-2.8/test/testtoken.cpp" $, 126 $, token@var127 .@expr660 tokAt (@expr661 2 ) .@expr1073742503 str (@expr1073742504 ) $, "3" $) $) { $return ; }
127: $assertEquals $(@expr1073742505 "cppcheck-2.8/test/testtoken.cpp" $, 127 $, true $, last@var128 .@expr1073742506 next (@expr1073742507 ) ==@expr1073742508 nullptr $, "Null was expected" $) ;
128:
129: $if $(@expr1073742509 $!@expr1073742510 $assertEquals $(@expr1073742511 "cppcheck-2.8/test/testtoken.cpp" $, 129 $, last@var128 .@expr1073742512 str (@expr1073742513 ) $, "3" $) $) { $return ; }
130: $if $(@expr1073742514 $!@expr1073742515 $assertEquals $(@expr1073742516 "cppcheck-2.8/test/testtoken.cpp" $, 130 $, last@var128 .@expr1073742517 previous (@expr1073742518 ) .@expr1073742519 str (@expr1073742520 ) $, "2" $) $) { $return ; }
131:
132: $if $(@expr1073742521 $!@expr1073742522 $assertEquals $(@expr1073742523 "cppcheck-2.8/test/testtoken.cpp" $, 132 $, last@var128 .@expr1073742524 tokAt (@expr1073742525 -2 ) .@expr1073742526 str (@expr1073742527 ) $, "1" $) $) { $return ; }
133: $assertEquals $(@expr1073742528 "cppcheck-2.8/test/testtoken.cpp" $, 133 $, true $, token@var127 .@expr1073742529 previous (@expr1073742530 ) ==@expr1073742531 nullptr $, "Null was expected" $) ;
134:
135: TokenList ::@expr1073742532 deleteTokens (@expr1073742533 token@var127 ) ;
136: }
137:
138:
139: bool MatchCheck_ ( const char * file@var129 , int line@var130 , const std :: string & code@var131 , const std :: string & pattern@var132 , unsigned int varid@var133 = 0 ) {
140: static const Settings settings@var134 ;
141: Tokenizer tokenizer@var135 (@expr1073742534 &@expr1073742535 settings@var134 , this@expr1073742536 ) ;
142: std ::@expr1073742537 istringstream istr@var136 (@expr1073742538 ";" +@expr1073742539 code@var131 +@expr1073742540 ";" ) ;
143: try {
144: $assert_ $(@expr1073742541 file@var129 $, line@var130 $, $(@expr1073742542 tokenizer@var135 .@expr1073742543 tokenize (@expr1073742544 istr@var136 , "test.cpp" ) $) $) ;
145: } catch (@expr1073742545 ... ) { }
146: return Token ::@expr1073742546 Match (@expr1073742547 tokenizer@var135 .@expr1073742548 tokens (@expr1073742549 ) .@expr1073742550 next (@expr1073742551 ) , pattern@var132 .@expr1073742552 c_str (@expr1073742553 ) , varid@var133 ) ;
147: }
148:
149: void multiCompare ( ) const {
150:
151: Token one@var137 ;
152: one@var137 .@expr1073742554 str (@expr1073742555 "one" ) ;
153: $if $(@expr1073742556 $!@expr1073742557 $assertEquals $(@expr1073742558 "cppcheck-2.8/test/testtoken.cpp" $, 153 $, 1 $, $(@expr1073742559 Token ::@expr736 multiCompare (@expr1073742561 &@expr1073742562 one@var137 , "one|two" , 0 ) $) $) $) { $return ; }
154:
155: Token two@var138 ;
156: two@var138 .@expr1073742563 str (@expr1073742564 "two" ) ;
157: $if $(@expr1073742565 $!@expr1073742566 $assertEquals $(@expr1073742567 "cppcheck-2.8/test/testtoken.cpp" $, 157 $, 1 $, $(@expr1073742568 Token ::@expr736 multiCompare (@expr1073742570 &@expr747 two@var138 , "one|two" , 0 ) $) $) $) { $return ; }
158: $if $(@expr1073742572 $!@expr1073742573 $assertEquals $(@expr1073742574 "cppcheck-2.8/test/testtoken.cpp" $, 158 $, 1 $, $(@expr1073742575 Token ::@expr736 multiCompare (@expr1073742577 &@expr747 two@var138 , "verybig|two|" , 0 ) $) $) $) { $return ; }
159:
160:
161: Token notfound@var139 ;
162: notfound@var139 .@expr1073742579 str (@expr1073742580 "notfound" ) ;
163: $if $(@expr1073742581 $!@expr1073742582 $assertEquals $(@expr1073742583 "cppcheck-2.8/test/testtoken.cpp" $, 163 $, 0 $, $(@expr1073742584 Token ::@expr736 multiCompare (@expr1073742586 &@expr763 notfound@var139 , "one|two|" , 0 ) $) $) $) { $return ; }
164:
165:
166: $if $(@expr1073742588 $!@expr1073742589 $assertEquals $(@expr1073742590 "cppcheck-2.8/test/testtoken.cpp" $, 166 $, static_cast < unsigned int > (@expr767 -1 ) $, $(@expr1073742592 static_cast < unsigned int > (@expr1073742593 Token ::@expr736 multiCompare (@expr1073742595 &@expr763 notfound@var139 , "one|two" , 0 ) ) $) $) $) { $return ; }
167:
168: Token s@var140 ;
169: s@var140 .@expr1073742597 str (@expr1073742598 "s" ) ;
170: $if $(@expr1073742599 $!@expr1073742600 $assertEquals $(@expr1073742601 "cppcheck-2.8/test/testtoken.cpp" $, 170 $, static_cast < unsigned int > (@expr767 -1 ) $, $(@expr1073742603 static_cast < unsigned int > (@expr1073742604 Token ::@expr736 multiCompare (@expr1073742606 &@expr1073742607 s@var140 , "verybig|two" , 0 ) ) $) $) $) { $return ; }
171:
172: Token ne@var141 ;
173: ne@var141 .@expr1073742608 str (@expr1073742609 "ne" ) ;
174: $if $(@expr1073742610 $!@expr1073742611 $assertEquals $(@expr1073742612 "cppcheck-2.8/test/testtoken.cpp" $, 174 $, static_cast < unsigned int > (@expr767 -1 ) $, $(@expr1073742614 static_cast < unsigned int > (@expr1073742615 Token ::@expr736 multiCompare (@expr1073742617 &@expr1073742618 ne@var141 , "one|two" , 0 ) ) $) $) $) { $return ; }
175:
176: Token a@var142 ;
177: a@var142 .@expr1073742619 str (@expr1073742620 "a" ) ;
178: $if $(@expr1073742621 $!@expr1073742622 $assertEquals $(@expr1073742623 "cppcheck-2.8/test/testtoken.cpp" $, 178 $, static_cast < unsigned int > (@expr767 -1 ) $, $(@expr1073742625 static_cast < unsigned int > (@expr1073742626 Token ::@expr736 multiCompare (@expr1073742628 &@expr1073742629 a@var142 , "abc|def" , 0 ) ) $) $) $) { $return ; }
179:
180: Token abcd@var143 ;
181: abcd@var143 .@expr1073742630 str (@expr1073742631 "abcd" ) ;
182: $if $(@expr1073742632 $!@expr1073742633 $assertEquals $(@expr1073742634 "cppcheck-2.8/test/testtoken.cpp" $, 182 $, static_cast < unsigned int > (@expr767 -1 ) $, $(@expr1073742636 static_cast < unsigned int > (@expr1073742637 Token ::@expr736 multiCompare (@expr1073742639 &@expr1073742640 abcd@var143 , "abc|def" , 0 ) ) $) $) $) { $return ; }
183:
184: Token def@var144 ;
185: def@var144 .@expr1073742641 str (@expr1073742642 "default" ) ;
186: $if $(@expr1073742643 $!@expr1073742644 $assertEquals $(@expr1073742645 "cppcheck-2.8/test/testtoken.cpp" $, 186 $, static_cast < unsigned int > (@expr767 -1 ) $, $(@expr1073742647 static_cast < unsigned int > (@expr1073742648 Token ::@expr736 multiCompare (@expr1073742650 &@expr1073742651 def@var144 , "abc|def" , 0 ) ) $) $) $) { $return ; }
187:
188:
189: Token plus@var145 ;
190: plus@var145 .@expr1073742652 str (@expr1073742653 "+" ) ;
191: $if $(@expr1073742654 $!@expr1073742655 $assertEquals $(@expr1073742656 "cppcheck-2.8/test/testtoken.cpp" $, 191 $, 1 $, $(@expr1073742657 Token ::@expr736 multiCompare (@expr1073742659 &@expr836 plus@var145 , "one|%op%" , 0 ) $) $) $) { $return ; }
192: $if $(@expr1073742661 $!@expr1073742662 $assertEquals $(@expr1073742663 "cppcheck-2.8/test/testtoken.cpp" $, 192 $, 1 $, $(@expr1073742664 Token ::@expr736 multiCompare (@expr1073742666 &@expr836 plus@var145 , "%op%|two" , 0 ) $) $) $) { $return ; }
193: Token x@var146 ;
194: x@var146 .@expr1073742668 str (@expr1073742669 "x" ) ;
195: $if $(@expr1073742670 $!@expr1073742671 $assertEquals $(@expr1073742672 "cppcheck-2.8/test/testtoken.cpp" $, 195 $, -1 $, $(@expr1073742673 Token ::@expr736 multiCompare (@expr1073742675 &@expr852 x@var146 , "one|%op%" , 0 ) $) $) $) { $return ; }
196: $if $(@expr1073742677 $!@expr1073742678 $assertEquals $(@expr1073742679 "cppcheck-2.8/test/testtoken.cpp" $, 196 $, -1 $, $(@expr1073742680 Token ::@expr736 multiCompare (@expr1073742682 &@expr852 x@var146 , "%op%|two" , 0 ) $) $) $) { $return ; }
197: }
198:
199: void multiCompare2 ( ) const {
200:
201: givenACodeSampleToTokenize toks@var147 (@expr1073742684 "a == 1" , true ) ;
202: $if $(@expr1073742685 $!@expr1073742686 $assertEquals $(@expr1073742687 "cppcheck-2.8/test/testtoken.cpp" $, 202 $, true $, $(@expr1073742688 Token ::@expr1073742689 Match (@expr1073742690 toks@var147 .@expr1073742691 tokens (@expr1073742692 ) , "a =|%op%" ) $) $) $) { $return ; }
203: }
204:
205: void multiCompare3 ( ) const {
206:
|
209:
210: givenACodeSampleToTokenize toks@var148 (@expr1073742693 "return a |= b ;" , true ) ;
211: $if $(@expr1073742694 $!@expr1073742695 $assertEquals $(@expr1073742696 "cppcheck-2.8/test/testtoken.cpp" $, 211 $, false $, $(@expr1073742697 Token ::@expr874 Match (@expr1073742699 toks@var148 .@expr876 tokens (@expr877 ) , "return %name% xyz|%or% %name% ;" ) $) $) $) { $return ; }
212: $if $(@expr1073742702 $!@expr1073742703 $assertEquals $(@expr1073742704 "cppcheck-2.8/test/testtoken.cpp" $, 212 $, false $, $(@expr1073742705 Token ::@expr874 Match (@expr1073742707 toks@var148 .@expr876 tokens (@expr877 ) , "return %name% %or%|xyz %name% ;" ) $) $) $) { $return ; }
213:
214: givenACodeSampleToTokenize toks2@var149 (@expr1073742710 "return a | b ;" , true ) ;
215: $if $(@expr1073742711 $!@expr1073742712 $assertEquals $(@expr1073742713 "cppcheck-2.8/test/testtoken.cpp" $, 215 $, true $, $(@expr1073742714 Token ::@expr874 Match (@expr1073742716 toks2@var149 .@expr893 tokens (@expr894 ) , "return %name% xyz|%or% %name% ;" ) $) $) $) { $return ; }
216: $if $(@expr1073742719 $!@expr1073742720 $assertEquals $(@expr1073742721 "cppcheck-2.8/test/testtoken.cpp" $, 216 $, true $, $(@expr1073742722 Token ::@expr874 Match (@expr1073742724 toks2@var149 .@expr893 tokens (@expr894 ) , "return %name% %or%|xyz %name% ;" ) $) $) $) { $return ; }
217:
218: givenACodeSampleToTokenize toks3@var150 (@expr1073742727 "return a || b ;" , true ) ;
219: $if $(@expr1073742728 $!@expr1073742729 $assertEquals $(@expr1073742730 "cppcheck-2.8/test/testtoken.cpp" $, 219 $, false $, $(@expr1073742731 Token ::@expr874 Match (@expr1073742733 toks3@var150 .@expr910 tokens (@expr911 ) , "return %name% xyz|%or% %name% ;" ) $) $) $) { $return ; }
220: $if $(@expr1073742736 $!@expr1073742737 $assertEquals $(@expr1073742738 "cppcheck-2.8/test/testtoken.cpp" $, 220 $, false $, $(@expr1073742739 Token ::@expr874 Match (@expr1073742741 toks3@var150 .@expr910 tokens (@expr911 ) , "return %name% %or%|xyz %name% ;" ) $) $) $) { $return ; }
221:
222: $if $(@expr1073742744 $!@expr1073742745 $assertEquals $(@expr1073742746 "cppcheck-2.8/test/testtoken.cpp" $, 222 $, true $, $(@expr1073742747 Token ::@expr874 Match (@expr1073742749 toks3@var150 .@expr910 tokens (@expr911 ) , "return %name% xyz|%oror% %name% ;" ) $) $) $) { $return ; }
223: $if $(@expr1073742752 $!@expr1073742753 $assertEquals $(@expr1073742754 "cppcheck-2.8/test/testtoken.cpp" $, 223 $, true $, $(@expr1073742755 Token ::@expr874 Match (@expr1073742757 toks3@var150 .@expr910 tokens (@expr911 ) , "return %name% %oror%|xyz %name% ;" ) $) $) $) { $return ; }
224:
225: givenACodeSampleToTokenize toks4@var151 (@expr1073742760 "a % b ;" , true ) ;
226: $if $(@expr1073742761 $!@expr1073742762 $assertEquals $(@expr1073742763 "cppcheck-2.8/test/testtoken.cpp" $, 226 $, true $, $(@expr1073742764 Token ::@expr874 Match (@expr1073742766 toks4@var151 .@expr943 tokens (@expr944 ) , "%name% >>|<<|&|%or%|^|% %name% ;" ) $) $) $) { $return ; }
227: $if $(@expr1073742769 $!@expr1073742770 $assertEquals $(@expr1073742771 "cppcheck-2.8/test/testtoken.cpp" $, 227 $, true $, $(@expr1073742772 Token ::@expr874 Match (@expr1073742774 toks4@var151 .@expr943 tokens (@expr944 ) , "%name% %|>>|<<|&|%or%|^ %name% ;" ) $) $) $) { $return ; }
228: $if $(@expr1073742777 $!@expr1073742778 $assertEquals $(@expr1073742779 "cppcheck-2.8/test/testtoken.cpp" $, 228 $, true $, $(@expr1073742780 Token ::@expr874 Match (@expr1073742782 toks4@var151 .@expr943 tokens (@expr944 ) , "%name% >>|<<|&|%or%|%|^ %name% ;" ) $) $) $) { $return ; }
229:
230:
231: givenACodeSampleToTokenize num@var152 (@expr1073742785 "100" , true ) ;
232: $if $(@expr1073742786 $!@expr1073742787 $assertEquals $(@expr1073742788 "cppcheck-2.8/test/testtoken.cpp" $, 232 $, true $, $(@expr1073742789 Token ::@expr874 Match (@expr1073742791 num@var152 .@expr968 tokens (@expr969 ) , "%num%|%name%" ) $) $) $) { $return ; }
233: $if $(@expr1073742794 $!@expr1073742795 $assertEquals $(@expr1073742796 "cppcheck-2.8/test/testtoken.cpp" $, 233 $, true $, $(@expr1073742797 Token ::@expr874 Match (@expr1073742799 num@var152 .@expr968 tokens (@expr969 ) , "%name%|%num%" ) $) $) $) { $return ; }
234: $if $(@expr1073742802 $!@expr1073742803 $assertEquals $(@expr1073742804 "cppcheck-2.8/test/testtoken.cpp" $, 234 $, true $, $(@expr1073742805 Token ::@expr874 Match (@expr1073742807 num@var152 .@expr968 tokens (@expr969 ) , "%name%|%num%|%bool%" ) $) $) $) { $return ; }
235: $if $(@expr1073742810 $!@expr1073742811 $assertEquals $(@expr1073742812 "cppcheck-2.8/test/testtoken.cpp" $, 235 $, true $, $(@expr1073742813 Token ::@expr874 Match (@expr1073742815 num@var152 .@expr968 tokens (@expr969 ) , "%name%|%bool%|%num%" ) $) $) $) { $return ; }
236: $if $(@expr1073742818 $!@expr1073742819 $assertEquals $(@expr1073742820 "cppcheck-2.8/test/testtoken.cpp" $, 236 $, true $, $(@expr1073742821 Token ::@expr874 Match (@expr1073742823 num@var152 .@expr968 tokens (@expr969 ) , "%name%|%bool%|%str%|%num%" ) $) $) $) { $return ; }
237: $if $(@expr1073742826 $!@expr1073742827 $assertEquals $(@expr1073742828 "cppcheck-2.8/test/testtoken.cpp" $, 237 $, false $, $(@expr1073742829 Token ::@expr874 Match (@expr1073742831 num@var152 .@expr968 tokens (@expr969 ) , "%bool%|%name%" ) $) $) $) { $return ; }
238: $if $(@expr1073742834 $!@expr1073742835 $assertEquals $(@expr1073742836 "cppcheck-2.8/test/testtoken.cpp" $, 238 $, false $, $(@expr1073742837 Token ::@expr874 Match (@expr1073742839 num@var152 .@expr968 tokens (@expr969 ) , "%type%|%bool%|%char%" ) $) $) $) { $return ; }
239: $if $(@expr1073742842 $!@expr1073742843 $assertEquals $(@expr1073742844 "cppcheck-2.8/test/testtoken.cpp" $, 239 $, true $, $(@expr1073742845 Token ::@expr874 Match (@expr1073742847 num@var152 .@expr968 tokens (@expr969 ) , "%type%|%bool%|100" ) $) $) $) { $return ; }
240:
241: givenACodeSampleToTokenize numparen@var153 (@expr1073742850 "( 100 )" , true ) ;
242: $if $(@expr1073742851 $!@expr1073742852 $assertEquals $(@expr1073742853 "cppcheck-2.8/test/testtoken.cpp" $, 242 $, true $, $(@expr1073742854 Token ::@expr874 Match (@expr1073742856 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| %num%|%name% )|" ) $) $) $) { $return ; }
243: $if $(@expr1073742859 $!@expr1073742860 $assertEquals $(@expr1073742861 "cppcheck-2.8/test/testtoken.cpp" $, 243 $, true $, $(@expr1073742862 Token ::@expr874 Match (@expr1073742864 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| %name%|%num% )|" ) $) $) $) { $return ; }
244: $if $(@expr1073742867 $!@expr1073742868 $assertEquals $(@expr1073742869 "cppcheck-2.8/test/testtoken.cpp" $, 244 $, true $, $(@expr1073742870 Token ::@expr874 Match (@expr1073742872 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| %name%|%num%|%bool% )|" ) $) $) $) { $return ; }
245: $if $(@expr1073742875 $!@expr1073742876 $assertEquals $(@expr1073742877 "cppcheck-2.8/test/testtoken.cpp" $, 245 $, true $, $(@expr1073742878 Token ::@expr874 Match (@expr1073742880 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| %name%|%bool%|%num% )|" ) $) $) $) { $return ; }
246: $if $(@expr1073742883 $!@expr1073742884 $assertEquals $(@expr1073742885 "cppcheck-2.8/test/testtoken.cpp" $, 246 $, true $, $(@expr1073742886 Token ::@expr874 Match (@expr1073742888 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| %name%|%bool%|%str%|%num% )|" ) $) $) $) { $return ; }
247: $if $(@expr1073742891 $!@expr1073742892 $assertEquals $(@expr1073742893 "cppcheck-2.8/test/testtoken.cpp" $, 247 $, false $, $(@expr1073742894 Token ::@expr874 Match (@expr1073742896 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| %bool%|%name% )|" ) $) $) $) { $return ; }
248:
249: $if $(@expr1073742899 $!@expr1073742900 $assertEquals $(@expr1073742901 "cppcheck-2.8/test/testtoken.cpp" $, 249 $, true $, $(@expr1073742902 Token ::@expr874 Match (@expr1073742904 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| 100 %num%|%name%| )|" ) $) $) $) { $return ; }
250: $if $(@expr1073742907 $!@expr1073742908 $assertEquals $(@expr1073742909 "cppcheck-2.8/test/testtoken.cpp" $, 250 $, true $, $(@expr1073742910 Token ::@expr874 Match (@expr1073742912 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| 100 %name%|%num%| )|" ) $) $) $) { $return ; }
251: $if $(@expr1073742915 $!@expr1073742916 $assertEquals $(@expr1073742917 "cppcheck-2.8/test/testtoken.cpp" $, 251 $, true $, $(@expr1073742918 Token ::@expr874 Match (@expr1073742920 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| 100 %name%|%num%|%bool%| )|" ) $) $) $) { $return ; }
252: $if $(@expr1073742923 $!@expr1073742924 $assertEquals $(@expr1073742925 "cppcheck-2.8/test/testtoken.cpp" $, 252 $, true $, $(@expr1073742926 Token ::@expr874 Match (@expr1073742928 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| 100 %name%|%bool%|%num%| )|" ) $) $) $) { $return ; }
253: $if $(@expr1073742931 $!@expr1073742932 $assertEquals $(@expr1073742933 "cppcheck-2.8/test/testtoken.cpp" $, 253 $, true $, $(@expr1073742934 Token ::@expr874 Match (@expr1073742936 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| 100 %name%|%bool%|%str%|%num%| )|" ) $) $) $) { $return ; }
254: $if $(@expr1073742939 $!@expr1073742940 $assertEquals $(@expr1073742941 "cppcheck-2.8/test/testtoken.cpp" $, 254 $, true $, $(@expr1073742942 Token ::@expr874 Match (@expr1073742944 numparen@var153 .@expr1033 tokens (@expr1034 ) , "(| 100 %bool%|%name%| )|" ) $) $) $) { $return ; }
255: }
256:
257: void multiCompare4 ( ) const {
258: givenACodeSampleToTokenize var@var154 (@expr1073742948 "std :: queue < int > foo ;" ) ;
259:
260: $if $(@expr1073742949 $!@expr1073742950 $assertEquals $(@expr1073742951 "cppcheck-2.8/test/testtoken.cpp" $, 260 $, Token ::@expr1128 eBracket@expr1123 $, var@var154 .@expr1129 tokens (@expr1130 ) .@expr1131 tokAt (@expr1073742956 3 ) .@expr1073742957 tokType (@expr1073742958 ) $) $) { $return ; }
261: $if $(@expr1073742959 $!@expr1073742960 $assertEquals $(@expr1073742961 "cppcheck-2.8/test/testtoken.cpp" $, 261 $, Token ::@expr1128 eBracket@expr1123 $, var@var154 .@expr1129 tokens (@expr1130 ) .@expr1131 tokAt (@expr1073742966 5 ) .@expr1073742967 tokType (@expr1073742968 ) $) $) { $return ; }
262:
263: $if $(@expr1073742969 $!@expr1073742970 $assertEquals $(@expr1073742971 "cppcheck-2.8/test/testtoken.cpp" $, 263 $, false $, $(@expr1073742972 Token ::@expr1149 Match (@expr1073742974 var@var154 .@expr1129 tokens (@expr1130 ) , "std :: queue %op%" ) $) $) $) { $return ; }
264: $if $(@expr1073742977 $!@expr1073742978 $assertEquals $(@expr1073742979 "cppcheck-2.8/test/testtoken.cpp" $, 264 $, false $, $(@expr1073742980 Token ::@expr1149 Match (@expr1073742982 var@var154 .@expr1129 tokens (@expr1130 ) , "std :: queue x|%op%" ) $) $) $) { $return ; }
265: $if $(@expr1073742985 $!@expr1073742986 $assertEquals $(@expr1073742987 "cppcheck-2.8/test/testtoken.cpp" $, 265 $, false $, $(@expr1073742988 Token ::@expr1149 Match (@expr1073742990 var@var154 .@expr1129 tokens (@expr1130 ) , "std :: queue %op%|x" ) $) $) $) { $return ; }
266: }
267:
268: void multiCompare5 ( ) const {
269: Token tok@var155 ;
270: tok@var155 .@expr1073742993 str (@expr1073742994 "||" ) ;
271: $if $(@expr1073742995 $!@expr1073742996 $assertEquals $(@expr1073742997 "cppcheck-2.8/test/testtoken.cpp" $, 271 $, true $, $(@expr1073742998 Token ::@expr1073742999 multiCompare (@expr1073743000 &@expr1073743001 tok@var155 , "+|%or%|%oror%" , 0 ) >=@expr1073743002 0 $) $) $) { $return ; }
272: }
273:
274: void charTypes ( ) const {
275: Token tok@var156 ;
276:
277: tok@var156 .@expr1179 str (@expr1073743004 "'a'" ) ;
278: $if $(@expr1073743005 $!@expr1073743006 $assertEquals $(@expr1073743007 "cppcheck-2.8/test/testtoken.cpp" $, 278 $, true $, tok@var156 .@expr1184 isCChar (@expr1185 ) $) $) { $return ; }
279: $if $(@expr1073743010 $!@expr1073743011 $assertEquals $(@expr1073743012 "cppcheck-2.8/test/testtoken.cpp" $, 279 $, false $, tok@var156 .@expr1189 isUtf8 (@expr1190 ) $) $) { $return ; }
280: $if $(@expr1073743015 $!@expr1073743016 $assertEquals $(@expr1073743017 "cppcheck-2.8/test/testtoken.cpp" $, 280 $, false $, tok@var156 .@expr1194 isUtf16 (@expr1195 ) $) $) { $return ; }
281: $if $(@expr1073743020 $!@expr1073743021 $assertEquals $(@expr1073743022 "cppcheck-2.8/test/testtoken.cpp" $, 281 $, false $, tok@var156 .@expr1199 isUtf32 (@expr1200 ) $) $) { $return ; }
282: $if $(@expr1073743025 $!@expr1073743026 $assertEquals $(@expr1073743027 "cppcheck-2.8/test/testtoken.cpp" $, 282 $, false $, tok@var156 .@expr1204 isLong (@expr1205 ) $) $) { $return ; }
283: $if $(@expr1073743030 $!@expr1073743031 $assertEquals $(@expr1073743032 "cppcheck-2.8/test/testtoken.cpp" $, 283 $, false $, tok@var156 .@expr1209 isCMultiChar (@expr1210 ) $) $) { $return ; }
284:
285: tok@var156 .@expr1179 str (@expr1073743036 "u8'a'" ) ;
286: $if $(@expr1073743037 $!@expr1073743038 $assertEquals $(@expr1073743039 "cppcheck-2.8/test/testtoken.cpp" $, 286 $, false $, tok@var156 .@expr1184 isCChar (@expr1185 ) $) $) { $return ; }
287: $if $(@expr1073743042 $!@expr1073743043 $assertEquals $(@expr1073743044 "cppcheck-2.8/test/testtoken.cpp" $, 287 $, true $, tok@var156 .@expr1189 isUtf8 (@expr1190 ) $) $) { $return ; }
288: $if $(@expr1073743047 $!@expr1073743048 $assertEquals $(@expr1073743049 "cppcheck-2.8/test/testtoken.cpp" $, 288 $, false $, tok@var156 .@expr1194 isUtf16 (@expr1195 ) $) $) { $return ; }
289: $if $(@expr1073743052 $!@expr1073743053 $assertEquals $(@expr1073743054 "cppcheck-2.8/test/testtoken.cpp" $, 289 $, false $, tok@var156 .@expr1199 isUtf32 (@expr1200 ) $) $) { $return ; }
290: $if $(@expr1073743057 $!@expr1073743058 $assertEquals $(@expr1073743059 "cppcheck-2.8/test/testtoken.cpp" $, 290 $, false $, tok@var156 .@expr1204 isLong (@expr1205 ) $) $) { $return ; }
291: $if $(@expr1073743062 $!@expr1073743063 $assertEquals $(@expr1073743064 "cppcheck-2.8/test/testtoken.cpp" $, 291 $, false $, tok@var156 .@expr1209 isCMultiChar (@expr1210 ) $) $) { $return ; }
292:
293: tok@var156 .@expr1179 str (@expr1073743068 "u'a'" ) ;
294: $if $(@expr1073743069 $!@expr1073743070 $assertEquals $(@expr1073743071 "cppcheck-2.8/test/testtoken.cpp" $, 294 $, false $, tok@var156 .@expr1184 isCChar (@expr1185 ) $) $) { $return ; }
295: $if $(@expr1073743074 $!@expr1073743075 $assertEquals $(@expr1073743076 "cppcheck-2.8/test/testtoken.cpp" $, 295 $, false $, tok@var156 .@expr1189 isUtf8 (@expr1190 ) $) $) { $return ; }
296: $if $(@expr1073743079 $!@expr1073743080 $assertEquals $(@expr1073743081 "cppcheck-2.8/test/testtoken.cpp" $, 296 $, true $, tok@var156 .@expr1194 isUtf16 (@expr1195 ) $) $) { $return ; }
297: $if $(@expr1073743084 $!@expr1073743085 $assertEquals $(@expr1073743086 "cppcheck-2.8/test/testtoken.cpp" $, 297 $, false $, tok@var156 .@expr1199 isUtf32 (@expr1200 ) $) $) { $return ; }
298: $if $(@expr1073743089 $!@expr1073743090 $assertEquals $(@expr1073743091 "cppcheck-2.8/test/testtoken.cpp" $, 298 $, false $, tok@var156 .@expr1204 isLong (@expr1205 ) $) $) { $return ; }
299: $if $(@expr1073743094 $!@expr1073743095 $assertEquals $(@expr1073743096 "cppcheck-2.8/test/testtoken.cpp" $, 299 $, false $, tok@var156 .@expr1209 isCMultiChar (@expr1210 ) $) $) { $return ; }
300:
301: tok@var156 .@expr1179 str (@expr1073743100 "U'a'" ) ;
302: $if $(@expr1073743101 $!@expr1073743102 $assertEquals $(@expr1073743103 "cppcheck-2.8/test/testtoken.cpp" $, 302 $, false $, tok@var156 .@expr1184 isCChar (@expr1185 ) $) $) { $return ; }
303: $if $(@expr1073743106 $!@expr1073743107 $assertEquals $(@expr1073743108 "cppcheck-2.8/test/testtoken.cpp" $, 303 $, false $, tok@var156 .@expr1189 isUtf8 (@expr1190 ) $) $) { $return ; }
304: $if $(@expr1073743111 $!@expr1073743112 $assertEquals $(@expr1073743113 "cppcheck-2.8/test/testtoken.cpp" $, 304 $, false $, tok@var156 .@expr1194 isUtf16 (@expr1195 ) $) $) { $return ; }
305: $if $(@expr1073743116 $!@expr1073743117 $assertEquals $(@expr1073743118 "cppcheck-2.8/test/testtoken.cpp" $, 305 $, true $, tok@var156 .@expr1199 isUtf32 (@expr1200 ) $) $) { $return ; }
306: $if $(@expr1073743121 $!@expr1073743122 $assertEquals $(@expr1073743123 "cppcheck-2.8/test/testtoken.cpp" $, 306 $, false $, tok@var156 .@expr1204 isLong (@expr1205 ) $) $) { $return ; }
307: $if $(@expr1073743126 $!@expr1073743127 $assertEquals $(@expr1073743128 "cppcheck-2.8/test/testtoken.cpp" $, 307 $, false $, tok@var156 .@expr1209 isCMultiChar (@expr1210 ) $) $) { $return ; }
308:
309: tok@var156 .@expr1179 str (@expr1073743132 "L'a'" ) ;
310: $if $(@expr1073743133 $!@expr1073743134 $assertEquals $(@expr1073743135 "cppcheck-2.8/test/testtoken.cpp" $, 310 $, false $, tok@var156 .@expr1184 isCChar (@expr1185 ) $) $) { $return ; }
311: $if $(@expr1073743138 $!@expr1073743139 $assertEquals $(@expr1073743140 "cppcheck-2.8/test/testtoken.cpp" $, 311 $, false $, tok@var156 .@expr1189 isUtf8 (@expr1190 ) $) $) { $return ; }
312: $if $(@expr1073743143 $!@expr1073743144 $assertEquals $(@expr1073743145 "cppcheck-2.8/test/testtoken.cpp" $, 312 $, false $, tok@var156 .@expr1194 isUtf16 (@expr1195 ) $) $) { $return ; }
313: $if $(@expr1073743148 $!@expr1073743149 $assertEquals $(@expr1073743150 "cppcheck-2.8/test/testtoken.cpp" $, 313 $, false $, tok@var156 .@expr1199 isUtf32 (@expr1200 ) $) $) { $return ; }
314: $if $(@expr1073743153 $!@expr1073743154 $assertEquals $(@expr1073743155 "cppcheck-2.8/test/testtoken.cpp" $, 314 $, true $, tok@var156 .@expr1204 isLong (@expr1205 ) $) $) { $return ; }
315: $if $(@expr1073743158 $!@expr1073743159 $assertEquals $(@expr1073743160 "cppcheck-2.8/test/testtoken.cpp" $, 315 $, false $, tok@var156 .@expr1209 isCMultiChar (@expr1210 ) $) $) { $return ; }
316:
317: tok@var156 .@expr1179 str (@expr1073743164 "'aaa'" ) ;
318: $if $(@expr1073743165 $!@expr1073743166 $assertEquals $(@expr1073743167 "cppcheck-2.8/test/testtoken.cpp" $, 318 $, false $, tok@var156 .@expr1184 isCChar (@expr1185 ) $) $) { $return ; }
319: $if $(@expr1073743170 $!@expr1073743171 $assertEquals $(@expr1073743172 "cppcheck-2.8/test/testtoken.cpp" $, 319 $, false $, tok@var156 .@expr1189 isUtf8 (@expr1190 ) $) $) { $return ; }
320: $if $(@expr1073743175 $!@expr1073743176 $assertEquals $(@expr1073743177 "cppcheck-2.8/test/testtoken.cpp" $, 320 $, false $, tok@var156 .@expr1194 isUtf16 (@expr1195 ) $) $) { $return ; }
321: $if $(@expr1073743180 $!@expr1073743181 $assertEquals $(@expr1073743182 "cppcheck-2.8/test/testtoken.cpp" $, 321 $, false $, tok@var156 .@expr1199 isUtf32 (@expr1200 ) $) $) { $return ; }
322: $if $(@expr1073743185 $!@expr1073743186 $assertEquals $(@expr1073743187 "cppcheck-2.8/test/testtoken.cpp" $, 322 $, false $, tok@var156 .@expr1204 isLong (@expr1205 ) $) $) { $return ; }
323: $if $(@expr1073743190 $!@expr1073743191 $assertEquals $(@expr1073743192 "cppcheck-2.8/test/testtoken.cpp" $, 323 $, true $, tok@var156 .@expr1209 isCMultiChar (@expr1210 ) $) $) { $return ; }
324: }
325:
326: void stringTypes ( ) const {
327: Token tok@var157 ;
328:
329: tok@var157 .@expr1371 str (@expr1073743196 "\"a\"" ) ;
330: $if $(@expr1073743197 $!@expr1073743198 $assertEquals $(@expr1073743199 "cppcheck-2.8/test/testtoken.cpp" $, 330 $, true $, tok@var157 .@expr1376 isCChar (@expr1377 ) $) $) { $return ; }
331: $if $(@expr1073743202 $!@expr1073743203 $assertEquals $(@expr1073743204 "cppcheck-2.8/test/testtoken.cpp" $, 331 $, false $, tok@var157 .@expr1381 isUtf8 (@expr1382 ) $) $) { $return ; }
332: $if $(@expr1073743207 $!@expr1073743208 $assertEquals $(@expr1073743209 "cppcheck-2.8/test/testtoken.cpp" $, 332 $, false $, tok@var157 .@expr1386 isUtf16 (@expr1387 ) $) $) { $return ; }
333: $if $(@expr1073743212 $!@expr1073743213 $assertEquals $(@expr1073743214 "cppcheck-2.8/test/testtoken.cpp" $, 333 $, false $, tok@var157 .@expr1391 isUtf32 (@expr1392 ) $) $) { $return ; }
334: $if $(@expr1073743217 $!@expr1073743218 $assertEquals $(@expr1073743219 "cppcheck-2.8/test/testtoken.cpp" $, 334 $, false $, tok@var157 .@expr1396 isLong (@expr1397 ) $) $) { $return ; }
335: $if $(@expr1073743222 $!@expr1073743223 $assertEquals $(@expr1073743224 "cppcheck-2.8/test/testtoken.cpp" $, 335 $, false $, tok@var157 .@expr1401 isCMultiChar (@expr1402 ) $) $) { $return ; }
336:
337: tok@var157 .@expr1371 str (@expr1073743228 "u8\"a\"" ) ;
338: $if $(@expr1073743229 $!@expr1073743230 $assertEquals $(@expr1073743231 "cppcheck-2.8/test/testtoken.cpp" $, 338 $, false $, tok@var157 .@expr1376 isCChar (@expr1377 ) $) $) { $return ; }
339: $if $(@expr1073743234 $!@expr1073743235 $assertEquals $(@expr1073743236 "cppcheck-2.8/test/testtoken.cpp" $, 339 $, true $, tok@var157 .@expr1381 isUtf8 (@expr1382 ) $) $) { $return ; }
340: $if $(@expr1073743239 $!@expr1073743240 $assertEquals $(@expr1073743241 "cppcheck-2.8/test/testtoken.cpp" $, 340 $, false $, tok@var157 .@expr1386 isUtf16 (@expr1387 ) $) $) { $return ; }
341: $if $(@expr1073743244 $!@expr1073743245 $assertEquals $(@expr1073743246 "cppcheck-2.8/test/testtoken.cpp" $, 341 $, false $, tok@var157 .@expr1391 isUtf32 (@expr1392 ) $) $) { $return ; }
342: $if $(@expr1073743249 $!@expr1073743250 $assertEquals $(@expr1073743251 "cppcheck-2.8/test/testtoken.cpp" $, 342 $, false $, tok@var157 .@expr1396 isLong (@expr1397 ) $) $) { $return ; }
343: $if $(@expr1073743254 $!@expr1073743255 $assertEquals $(@expr1073743256 "cppcheck-2.8/test/testtoken.cpp" $, 343 $, false $, tok@var157 .@expr1401 isCMultiChar (@expr1402 ) $) $) { $return ; }
344:
345: tok@var157 .@expr1371 str (@expr1073743260 "u\"a\"" ) ;
346: $if $(@expr1073743261 $!@expr1073743262 $assertEquals $(@expr1073743263 "cppcheck-2.8/test/testtoken.cpp" $, 346 $, false $, tok@var157 .@expr1376 isCChar (@expr1377 ) $) $) { $return ; }
347: $if $(@expr1073743266 $!@expr1073743267 $assertEquals $(@expr1073743268 "cppcheck-2.8/test/testtoken.cpp" $, 347 $, false $, tok@var157 .@expr1381 isUtf8 (@expr1382 ) $) $) { $return ; }
348: $if $(@expr1073743271 $!@expr1073743272 $assertEquals $(@expr1073743273 "cppcheck-2.8/test/testtoken.cpp" $, 348 $, true $, tok@var157 .@expr1386 isUtf16 (@expr1387 ) $) $) { $return ; }
349: $if $(@expr1073743276 $!@expr1073743277 $assertEquals $(@expr1073743278 "cppcheck-2.8/test/testtoken.cpp" $, 349 $, false $, tok@var157 .@expr1391 isUtf32 (@expr1392 ) $) $) { $return ; }
350: $if $(@expr1073743281 $!@expr1073743282 $assertEquals $(@expr1073743283 "cppcheck-2.8/test/testtoken.cpp" $, 350 $, false $, tok@var157 .@expr1396 isLong (@expr1397 ) $) $) { $return ; }
351: $if $(@expr1073743286 $!@expr1073743287 $assertEquals $(@expr1073743288 "cppcheck-2.8/test/testtoken.cpp" $, 351 $, false $, tok@var157 .@expr1401 isCMultiChar (@expr1402 ) $) $) { $return ; }
352:
353: tok@var157 .@expr1371 str (@expr1073743292 "U\"a\"" ) ;
354: $if $(@expr1073743293 $!@expr1073743294 $assertEquals $(@expr1073743295 "cppcheck-2.8/test/testtoken.cpp" $, 354 $, false $, tok@var157 .@expr1376 isCChar (@expr1377 ) $) $) { $return ; }
355: $if $(@expr1073743298 $!@expr1073743299 $assertEquals $(@expr1073743300 "cppcheck-2.8/test/testtoken.cpp" $, 355 $, false $, tok@var157 .@expr1381 isUtf8 (@expr1382 ) $) $) { $return ; }
356: $if $(@expr1073743303 $!@expr1073743304 $assertEquals $(@expr1073743305 "cppcheck-2.8/test/testtoken.cpp" $, 356 $, false $, tok@var157 .@expr1386 isUtf16 (@expr1387 ) $) $) { $return ; }
357: $if $(@expr1073743308 $!@expr1073743309 $assertEquals $(@expr1073743310 "cppcheck-2.8/test/testtoken.cpp" $, 357 $, true $, tok@var157 .@expr1391 isUtf32 (@expr1392 ) $) $) { $return ; }
358: $if $(@expr1073743313 $!@expr1073743314 $assertEquals $(@expr1073743315 "cppcheck-2.8/test/testtoken.cpp" $, 358 $, false $, tok@var157 .@expr1396 isLong (@expr1397 ) $) $) { $return ; }
359: $if $(@expr1073743318 $!@expr1073743319 $assertEquals $(@expr1073743320 "cppcheck-2.8/test/testtoken.cpp" $, 359 $, false $, tok@var157 .@expr1401 isCMultiChar (@expr1402 ) $) $) { $return ; }
360:
361: tok@var157 .@expr1371 str (@expr1073743324 "L\"a\"" ) ;
362: $if $(@expr1073743325 $!@expr1073743326 $assertEquals $(@expr1073743327 "cppcheck-2.8/test/testtoken.cpp" $, 362 $, false $, tok@var157 .@expr1376 isCChar (@expr1377 ) $) $) { $return ; }
363: $if $(@expr1073743330 $!@expr1073743331 $assertEquals $(@expr1073743332 "cppcheck-2.8/test/testtoken.cpp" $, 363 $, false $, tok@var157 .@expr1381 isUtf8 (@expr1382 ) $) $) { $return ; }
364: $if $(@expr1073743335 $!@expr1073743336 $assertEquals $(@expr1073743337 "cppcheck-2.8/test/testtoken.cpp" $, 364 $, false $, tok@var157 .@expr1386 isUtf16 (@expr1387 ) $) $) { $return ; }
365: $if $(@expr1073743340 $!@expr1073743341 $assertEquals $(@expr1073743342 "cppcheck-2.8/test/testtoken.cpp" $, 365 $, false $, tok@var157 .@expr1391 isUtf32 (@expr1392 ) $) $) { $return ; }
366: $if $(@expr1073743345 $!@expr1073743346 $assertEquals $(@expr1073743347 "cppcheck-2.8/test/testtoken.cpp" $, 366 $, true $, tok@var157 .@expr1396 isLong (@expr1397 ) $) $) { $return ; }
367: $if $(@expr1073743350 $!@expr1073743351 $assertEquals $(@expr1073743352 "cppcheck-2.8/test/testtoken.cpp" $, 367 $, false $, tok@var157 .@expr1401 isCMultiChar (@expr1402 ) $) $) { $return ; }
368: }
369:
370: void getStrLength ( ) const {
371: Token tok@var158 ;
372:
373: tok@var158 .@expr1531 str (@expr1073743356 "\"\"" ) ;
374: $if $(@expr1073743357 $!@expr1073743358 $assertEquals $(@expr1073743359 "cppcheck-2.8/test/testtoken.cpp" $, 374 $, 0 $, Token ::@expr1536 getStrLength (@expr1537 &@expr1538 tok@var158 ) $) $) { $return ; }
375:
376: tok@var158 .@expr1531 str (@expr1073743364 "\"test\"" ) ;
377: $if $(@expr1073743365 $!@expr1073743366 $assertEquals $(@expr1073743367 "cppcheck-2.8/test/testtoken.cpp" $, 377 $, 4 $, Token ::@expr1536 getStrLength (@expr1537 &@expr1538 tok@var158 ) $) $) { $return ; }
378:
379: tok@var158 .@expr1531 str (@expr1073743372 "\"test \\\\test\"" ) ;
380: $if $(@expr1073743373 $!@expr1073743374 $assertEquals $(@expr1073743375 "cppcheck-2.8/test/testtoken.cpp" $, 380 $, 10 $, Token ::@expr1536 getStrLength (@expr1537 &@expr1538 tok@var158 ) $) $) { $return ; }
381:
382: tok@var158 .@expr1531 str (@expr1073743380 "\"a\\0\"" ) ;
383: $if $(@expr1073743381 $!@expr1073743382 $assertEquals $(@expr1073743383 "cppcheck-2.8/test/testtoken.cpp" $, 383 $, 1 $, Token ::@expr1536 getStrLength (@expr1537 &@expr1538 tok@var158 ) $) $) { $return ; }
384:
385: tok@var158 .@expr1531 str (@expr1073743388 "L\"\"" ) ;
386: $if $(@expr1073743389 $!@expr1073743390 $assertEquals $(@expr1073743391 "cppcheck-2.8/test/testtoken.cpp" $, 386 $, 0 $, Token ::@expr1536 getStrLength (@expr1537 &@expr1538 tok@var158 ) $) $) { $return ; }
387:
388: tok@var158 .@expr1531 str (@expr1073743396 "u8\"test\"" ) ;
389: $if $(@expr1073743397 $!@expr1073743398 $assertEquals $(@expr1073743399 "cppcheck-2.8/test/testtoken.cpp" $, 389 $, 4 $, Token ::@expr1536 getStrLength (@expr1537 &@expr1538 tok@var158 ) $) $) { $return ; }
390:
391: tok@var158 .@expr1531 str (@expr1073743404 "U\"test \\\\test\"" ) ;
392: $if $(@expr1073743405 $!@expr1073743406 $assertEquals $(@expr1073743407 "cppcheck-2.8/test/testtoken.cpp" $, 392 $, 10 $, Token ::@expr1536 getStrLength (@expr1537 &@expr1538 tok@var158 ) $) $) { $return ; }
393:
394: tok@var158 .@expr1531 str (@expr1073743412 "u\"a\\0\"" ) ;
395: $if $(@expr1073743413 $!@expr1073743414 $assertEquals $(@expr1073743415 "cppcheck-2.8/test/testtoken.cpp" $, 395 $, 1 $, Token ::@expr1536 getStrLength (@expr1537 &@expr1538 tok@var158 ) $) $) { $return ; }
396: }
397:
398: void getStrSize ( ) const {
399: Token tok@var159 ;
400: Settings settings@var160 ;
401:
402: tok@var159 .@expr1595 str (@expr1073743420 "\"\"" ) ;
403: $if $(@expr1073743421 $!@expr1073743422 $assertEquals $(@expr1073743423 "cppcheck-2.8/test/testtoken.cpp" $, 403 $, sizeof (@expr1073743424 "" ) $, $(@expr1073743425 Token ::@expr1602 getStrSize (@expr1603 &@expr1604 tok@var159 , &@expr1605 settings@var160 ) $) $) $) { $return ; }
404:
405: tok@var159 .@expr1595 str (@expr1073743431 "\"abc\"" ) ;
406: $if $(@expr1073743432 $!@expr1073743433 $assertEquals $(@expr1073743434 "cppcheck-2.8/test/testtoken.cpp" $, 406 $, sizeof (@expr1073743435 "abc" ) $, $(@expr1073743436 Token ::@expr1602 getStrSize (@expr1603 &@expr1604 tok@var159 , &@expr1605 settings@var160 ) $) $) $) { $return ; }
407:
408: tok@var159 .@expr1595 str (@expr1073743442 "\"\\0abc\"" ) ;
409: $if $(@expr1073743443 $!@expr1073743444 $assertEquals $(@expr1073743445 "cppcheck-2.8/test/testtoken.cpp" $, 409 $, sizeof (@expr1073743446 "\0abc" ) $, $(@expr1073743447 Token ::@expr1602 getStrSize (@expr1603 &@expr1604 tok@var159 , &@expr1605 settings@var160 ) $) $) $) { $return ; }
410:
411: tok@var159 .@expr1595 str (@expr1073743453 "\"\\\\\"" ) ;
412: $if $(@expr1073743454 $!@expr1073743455 $assertEquals $(@expr1073743456 "cppcheck-2.8/test/testtoken.cpp" $, 412 $, sizeof (@expr1073743457 "\\" ) $, $(@expr1073743458 Token ::@expr1602 getStrSize (@expr1603 &@expr1604 tok@var159 , &@expr1605 settings@var160 ) $) $) $) { $return ; }
413: }
414:
415: void getCharAt ( ) const {
416: Token tok@var161 ;
417:
418: tok@var161 .@expr1639 str (@expr1073743464 "\"asdf\"" ) ;
419: $if $(@expr1073743465 $!@expr1073743466 $assertEquals $(@expr1073743467 "cppcheck-2.8/test/testtoken.cpp" $, 419 $, "a" $, $(@expr1073743468 Token ::@expr1645 getCharAt (@expr1646 &@expr1647 tok@var161 , 0 ) $) $) $) { $return ; }
420: $if $(@expr1073743472 $!@expr1073743473 $assertEquals $(@expr1073743474 "cppcheck-2.8/test/testtoken.cpp" $, 420 $, "s" $, $(@expr1073743475 Token ::@expr1645 getCharAt (@expr1653 &@expr1647 tok@var161 , 1 ) $) $) $) { $return ; }
421:
422: tok@var161 .@expr1639 str (@expr1073743480 "\"a\\ts\"" ) ;
423: $if $(@expr1073743481 $!@expr1073743482 $assertEquals $(@expr1073743483 "cppcheck-2.8/test/testtoken.cpp" $, 423 $, "\\t" $, $(@expr1073743484 Token ::@expr1645 getCharAt (@expr1653 &@expr1647 tok@var161 , 1 ) $) $) $) { $return ; }
424:
425: tok@var161 .@expr1639 str (@expr1073743489 "\"\"" ) ;
426: $if $(@expr1073743490 $!@expr1073743491 $assertEquals $(@expr1073743492 "cppcheck-2.8/test/testtoken.cpp" $, 426 $, "\\0" $, $(@expr1073743493 Token ::@expr1645 getCharAt (@expr1646 &@expr1647 tok@var161 , 0 ) $) $) $) { $return ; }
427:
428: tok@var161 .@expr1639 str (@expr1073743498 "L\"a\\ts\"" ) ;
429: $if $(@expr1073743499 $!@expr1073743500 $assertEquals $(@expr1073743501 "cppcheck-2.8/test/testtoken.cpp" $, 429 $, "a" $, $(@expr1073743502 Token ::@expr1645 getCharAt (@expr1646 &@expr1647 tok@var161 , 0 ) $) $) $) { $return ; }
430: $if $(@expr1073743506 $!@expr1073743507 $assertEquals $(@expr1073743508 "cppcheck-2.8/test/testtoken.cpp" $, 430 $, "\\t" $, $(@expr1073743509 Token ::@expr1645 getCharAt (@expr1653 &@expr1647 tok@var161 , 1 ) $) $) $) { $return ; }
431:
432: tok@var161 .@expr1639 str (@expr1073743514 "u\"a\\ts\"" ) ;
433: $if $(@expr1073743515 $!@expr1073743516 $assertEquals $(@expr1073743517 "cppcheck-2.8/test/testtoken.cpp" $, 433 $, "\\t" $, $(@expr1073743518 Token ::@expr1645 getCharAt (@expr1653 &@expr1647 tok@var161 , 1 ) $) $) $) { $return ; }
434: $if $(@expr1073743522 $!@expr1073743523 $assertEquals $(@expr1073743524 "cppcheck-2.8/test/testtoken.cpp" $, 434 $, "s" $, $(@expr1073743525 Token ::@expr1645 getCharAt (@expr1073743527 &@expr1647 tok@var161 , 2 ) $) $) $) { $return ; }
435: }
436:
437: void strValue ( ) const {
438: Token tok@var162 ;
439:
440: tok@var162 .@expr1705 str (@expr1073743530 "\"\"" ) ;
441: $if $(@expr1073743531 $!@expr1073743532 $assertEquals $(@expr1073743533 "cppcheck-2.8/test/testtoken.cpp" $, 441 $, "" $, tok@var162 .@expr1710 strValue (@expr1711 ) $) $) { $return ; }
442:
443: tok@var162 .@expr1705 str (@expr1073743537 "\"0\"" ) ;
444: $if $(@expr1073743538 $!@expr1073743539 $assertEquals $(@expr1073743540 "cppcheck-2.8/test/testtoken.cpp" $, 444 $, "0" $, tok@var162 .@expr1710 strValue (@expr1711 ) $) $) { $return ; }
445:
446: tok@var162 .@expr1705 str (@expr1073743544 "\"a\\n\"" ) ;
447: $if $(@expr1073743545 $!@expr1073743546 $assertEquals $(@expr1073743547 "cppcheck-2.8/test/testtoken.cpp" $, 447 $, "a\n" $, tok@var162 .@expr1710 strValue (@expr1711 ) $) $) { $return ; }
448:
449: tok@var162 .@expr1705 str (@expr1073743551 "\"a\\r\"" ) ;
450: $if $(@expr1073743552 $!@expr1073743553 $assertEquals $(@expr1073743554 "cppcheck-2.8/test/testtoken.cpp" $, 450 $, "a\r" $, tok@var162 .@expr1710 strValue (@expr1711 ) $) $) { $return ; }
451:
452: tok@var162 .@expr1705 str (@expr1073743558 "\"a\\t\"" ) ;
453: $if $(@expr1073743559 $!@expr1073743560 $assertEquals $(@expr1073743561 "cppcheck-2.8/test/testtoken.cpp" $, 453 $, "a\t" $, tok@var162 .@expr1710 strValue (@expr1711 ) $) $) { $return ; }
454:
455: tok@var162 .@expr1705 str (@expr1073743565 "\"\\\\\"" ) ;
456: $if $(@expr1073743566 $!@expr1073743567 $assertEquals $(@expr1073743568 "cppcheck-2.8/test/testtoken.cpp" $, 456 $, "\\" $, tok@var162 .@expr1710 strValue (@expr1711 ) $) $) { $return ; }
457:
458: tok@var162 .@expr1705 str (@expr1073743572 "\"a\\0\"" ) ;
459: $if $(@expr1073743573 $!@expr1073743574 $assertEquals $(@expr1073743575 "cppcheck-2.8/test/testtoken.cpp" $, 459 $, "a" $, tok@var162 .@expr1710 strValue (@expr1711 ) $) $) { $return ; }
460:
461: tok@var162 .@expr1705 str (@expr1073743579 "L\"a\\t\"" ) ;
462: $if $(@expr1073743580 $!@expr1073743581 $assertEquals $(@expr1073743582 "cppcheck-2.8/test/testtoken.cpp" $, 462 $, "a\t" $, tok@var162 .@expr1710 strValue (@expr1711 ) $) $) { $return ; }
463:
464: tok@var162 .@expr1705 str (@expr1073743586 "U\"a\\0\"" ) ;
465: $if $(@expr1073743587 $!@expr1073743588 $assertEquals $(@expr1073743589 "cppcheck-2.8/test/testtoken.cpp" $, 465 $, "a" $, tok@var162 .@expr1710 strValue (@expr1711 ) $) $) { $return ; }
466: }
467:
468: void concatStr ( ) const {
469: Token tok@var163 ;
470:
471: tok@var163 .@expr1768 str (@expr1073743593 "\"\"" ) ;
472: tok@var163 .@expr1770 concatStr (@expr1073743595 "\"\"" ) ;
473: $if $(@expr1073743596 $!@expr1073743597 $assertEquals $(@expr1073743598 "cppcheck-2.8/test/testtoken.cpp" $, 473 $, "" $, tok@var163 .@expr1775 strValue (@expr1776 ) $) $) { $return ; }
474: $if $(@expr1073743601 $!@expr1073743602 $assert_ $(@expr1073743603 "cppcheck-2.8/test/testtoken.cpp" $, 474 $, tok@var163 .@expr1780 isCChar (@expr1781 ) $) $) { $return ; }
475:
476: tok@var163 .@expr1768 str (@expr1783 "\"ab\"" ) ;
477: tok@var163 .@expr1770 concatStr (@expr1785 "\"cd\"" ) ;
478: $if $(@expr1073743610 $!@expr1073743611 $assertEquals $(@expr1073743612 "cppcheck-2.8/test/testtoken.cpp" $, 478 $, "abcd" $, tok@var163 .@expr1775 strValue (@expr1776 ) $) $) { $return ; }
479: $if $(@expr1073743615 $!@expr1073743616 $assert_ $(@expr1073743617 "cppcheck-2.8/test/testtoken.cpp" $, 479 $, tok@var163 .@expr1780 isCChar (@expr1781 ) $) $) { $return ; }
480:
481: tok@var163 .@expr1768 str (@expr1797 "L\"ab\"" ) ;
482: tok@var163 .@expr1770 concatStr (@expr1799 "L\"cd\"" ) ;
483: $if $(@expr1073743624 $!@expr1073743625 $assertEquals $(@expr1073743626 "cppcheck-2.8/test/testtoken.cpp" $, 483 $, "abcd" $, tok@var163 .@expr1775 strValue (@expr1776 ) $) $) { $return ; }
484: $if $(@expr1073743629 $!@expr1073743630 $assert_ $(@expr1073743631 "cppcheck-2.8/test/testtoken.cpp" $, 484 $, tok@var163 .@expr1808 isLong (@expr1809 ) $) $) { $return ; }
485:
486: tok@var163 .@expr1768 str (@expr1797 "L\"ab\"" ) ;
487: tok@var163 .@expr1770 concatStr (@expr1785 "\"cd\"" ) ;
488: $if $(@expr1073743638 $!@expr1073743639 $assertEquals $(@expr1073743640 "cppcheck-2.8/test/testtoken.cpp" $, 488 $, "abcd" $, tok@var163 .@expr1775 strValue (@expr1776 ) $) $) { $return ; }
489: $if $(@expr1073743643 $!@expr1073743644 $assert_ $(@expr1073743645 "cppcheck-2.8/test/testtoken.cpp" $, 489 $, tok@var163 .@expr1808 isLong (@expr1809 ) $) $) { $return ; }
490:
491: tok@var163 .@expr1768 str (@expr1783 "\"ab\"" ) ;
492: tok@var163 .@expr1770 concatStr (@expr1799 "L\"cd\"" ) ;
493: $if $(@expr1073743652 $!@expr1073743653 $assertEquals $(@expr1073743654 "cppcheck-2.8/test/testtoken.cpp" $, 493 $, "abcd" $, tok@var163 .@expr1775 strValue (@expr1776 ) $) $) { $return ; }
494: $if $(@expr1073743657 $!@expr1073743658 $assert_ $(@expr1073743659 "cppcheck-2.8/test/testtoken.cpp" $, 494 $, tok@var163 .@expr1808 isLong (@expr1809 ) $) $) { $return ; }
495:
496: tok@var163 .@expr1768 str (@expr1783 "\"ab\"" ) ;
497: tok@var163 .@expr1770 concatStr (@expr1073743665 "L\"\"" ) ;
498: $if $(@expr1073743666 $!@expr1073743667 $assertEquals $(@expr1073743668 "cppcheck-2.8/test/testtoken.cpp" $, 498 $, "ab" $, tok@var163 .@expr1775 strValue (@expr1776 ) $) $) { $return ; }
499: $if $(@expr1073743671 $!@expr1073743672 $assert_ $(@expr1073743673 "cppcheck-2.8/test/testtoken.cpp" $, 499 $, tok@var163 .@expr1808 isLong (@expr1809 ) $) $) { $return ; }
500:
501: tok@var163 .@expr1768 str (@expr1783 "\"ab\"" ) ;
502: tok@var163 .@expr1770 concatStr (@expr1073743679 "u8\"cd\"" ) ;
503: $if $(@expr1073743680 $!@expr1073743681 $assertEquals $(@expr1073743682 "cppcheck-2.8/test/testtoken.cpp" $, 503 $, "abcd" $, tok@var163 .@expr1775 strValue (@expr1776 ) $) $) { $return ; }
504: $if $(@expr1073743685 $!@expr1073743686 $assert_ $(@expr1073743687 "cppcheck-2.8/test/testtoken.cpp" $, 504 $, tok@var163 .@expr1073743688 isUtf8 (@expr1073743689 ) $) $) { $return ; }
505: }
506:
507: void deleteLast ( ) const {
508: TokensFrontBack listEnds@var164 {@expr1073743690 nullptr } ;
509: Token * * const tokensBack@var165 ; tokensBack@var165 =@expr1073743691 &@expr1073743692 (@expr1073743693 listEnds@var164 .@expr1073743694 back@var166 ) ;
510: Token tok@var167 (@expr1073743695 &@expr1073743696 listEnds@var164 ) ;
511: tok@var167 .@expr1073743697 insertToken (@expr1073743698 "aba" ) ;
512: $if $(@expr1073743699 $!@expr1073743700 $assertEquals $(@expr1073743701 "cppcheck-2.8/test/testtoken.cpp" $, 512 $, true $, *@expr1878 tokensBack@var165 ==@expr1073743703 tok@var167 .@expr1073743704 next (@expr1073743705 ) $) $) { $return ; }
513: tok@var167 .@expr1073743706 deleteNext (@expr1073743707 ) ;
514: $if $(@expr1073743708 $!@expr1073743709 $assertEquals $(@expr1073743710 "cppcheck-2.8/test/testtoken.cpp" $, 514 $, true $, *@expr1878 tokensBack@var165 ==@expr1073743712 &@expr1073743713 tok@var167 $) $) { $return ; }
515: }
516:
517: void deleteFirst ( ) const {
518: TokensFrontBack listEnds@var168 {@expr1073743714 nullptr } ;
519: Token * * const tokensFront@var169 ; tokensFront@var169 =@expr1073743715 &@expr1073743716 (@expr1073743717 listEnds@var168 .@expr1073743718 front@var170 ) ;
520: Token tok@var171 (@expr1073743719 &@expr1073743720 listEnds@var168 ) ;
521:
522: tok@var171 .@expr1073743721 insertToken (@expr1073743722 "aba" ) ;
523:
524: $if $(@expr1073743723 $!@expr1073743724 $assertEquals $(@expr1073743725 "cppcheck-2.8/test/testtoken.cpp" $, 524 $, true $, *@expr1902 tokensFront@var169 ==@expr1073743727 tok@var171 .@expr1073743728 previous (@expr1073743729 ) $) $) { $return ; }
525: tok@var171 .@expr1073743730 deletePrevious (@expr1073743731 ) ;
526: $if $(@expr1073743732 $!@expr1073743733 $assertEquals $(@expr1073743734 "cppcheck-2.8/test/testtoken.cpp" $, 526 $, true $, *@expr1902 tokensFront@var169 ==@expr1073743736 &@expr1073743737 tok@var171 $) $) { $return ; }
527: }
528:
529: void nextArgument ( ) const {
530: givenACodeSampleToTokenize example1@var172 (@expr1073743738 "foo(1, 2, 3, 4);" ) ;
531: $if $(@expr1073743739 $!@expr1073743740 $assertEquals $(@expr1073743741 "cppcheck-2.8/test/testtoken.cpp" $, 531 $, true $, $(@expr1073743742 Token ::@expr1919 simpleMatch (@expr1073743744 example1@var172 .@expr1921 tokens (@expr1922 ) .@expr1923 tokAt (@expr1073743748 2 ) .@expr1073743749 nextArgument (@expr1073743750 ) , "2 , 3" ) $) $) $) { $return ; }
532: $if $(@expr1073743751 $!@expr1073743752 $assertEquals $(@expr1073743753 "cppcheck-2.8/test/testtoken.cpp" $, 532 $, true $, $(@expr1073743754 Token ::@expr1919 simpleMatch (@expr1073743756 example1@var172 .@expr1921 tokens (@expr1922 ) .@expr1923 tokAt (@expr1073743760 4 ) .@expr1073743761 nextArgument (@expr1073743762 ) , "3 , 4" ) $) $) $) { $return ; }
533:
534: givenACodeSampleToTokenize example2@var173 (@expr1073743763 "foo();" ) ;
535: $if $(@expr1073743764 $!@expr1073743765 $assertEquals $(@expr1073743766 "cppcheck-2.8/test/testtoken.cpp" $, 535 $, true $, example2@var173 .@expr1073743767 tokens (@expr1073743768 ) .@expr1073743769 tokAt (@expr1073743770 2 ) .@expr1073743771 nextArgument (@expr1073743772 ) ==@expr1073743773 nullptr $) $) { $return ; }
536:
537: givenACodeSampleToTokenize example3@var174 (@expr1073743774 "foo(bar(a, b), 2, 3);" ) ;
538: $if $(@expr1073743775 $!@expr1073743776 $assertEquals $(@expr1073743777 "cppcheck-2.8/test/testtoken.cpp" $, 538 $, true $, $(@expr1073743778 Token ::@expr1919 simpleMatch (@expr1073743780 example3@var174 .@expr1073743781 tokens (@expr1073743782 ) .@expr1073743783 tokAt (@expr1073743784 2 ) .@expr1073743785 nextArgument (@expr1073743786 ) , "2 , 3" ) $) $) $) { $return ; }
539:
540: givenACodeSampleToTokenize example4@var175 (@expr1073743787 "foo(x.i[1], \"\", 3);" ) ;
541: $if $(@expr1073743788 $!@expr1073743789 $assertEquals $(@expr1073743790 "cppcheck-2.8/test/testtoken.cpp" $, 541 $, true $, $(@expr1073743791 Token ::@expr1919 simpleMatch (@expr1073743793 example4@var175 .@expr1073743794 tokens (@expr1073743795 ) .@expr1073743796 tokAt (@expr1073743797 2 ) .@expr1073743798 nextArgument (@expr1073743799 ) , "\"\" , 3" ) $) $) $) { $return ; }
542: }
543:
544: void eraseTokens ( ) const {
545: givenACodeSampleToTokenize code@var176 (@expr1073743800 "begin ; { this code will be removed } end" , true ) ;
546: Token ::@expr1073743801 eraseTokens (@expr1073743802 code@var176 .@expr1979 tokens (@expr1980 ) .@expr1073743805 next (@expr1073743806 ) , code@var176 .@expr1979 tokens (@expr1980 ) .@expr1073743809 tokAt (@expr1073743810 9 ) ) ;
547: $if $(@expr1073743811 $!@expr1073743812 $assertEquals $(@expr1073743813 "cppcheck-2.8/test/testtoken.cpp" $, 547 $, "begin ; end" $, $(@expr1073743814 code@var176 .@expr1979 tokens (@expr1980 ) .@expr1073743817 stringifyList (@expr1073743818 nullptr , false ) $) $) $) { $return ; }
548: }
549:
550:
551: void matchAny ( ) const {
552: givenACodeSampleToTokenize varBitOrVar@var177 (@expr1073743819 "abc|def" , true ) ;
553: $if $(@expr1073743820 $!@expr1073743821 $assertEquals $(@expr1073743822 "cppcheck-2.8/test/testtoken.cpp" $, 553 $, true $, $(@expr1073743823 Token ::@expr2000 Match (@expr1073743825 varBitOrVar@var177 .@expr1073743826 tokens (@expr1073743827 ) , "%name% %or% %name%" ) $) $) $) { $return ; }
554:
555: givenACodeSampleToTokenize varLogOrVar@var178 (@expr1073743828 "abc||def" , true ) ;
556: $if $(@expr1073743829 $!@expr1073743830 $assertEquals $(@expr1073743831 "cppcheck-2.8/test/testtoken.cpp" $, 556 $, true $, $(@expr1073743832 Token ::@expr2000 Match (@expr1073743834 varLogOrVar@var178 .@expr1073743835 tokens (@expr1073743836 ) , "%name% %oror% %name%" ) $) $) $) { $return ; }
557: }
558:
559: void matchSingleChar ( ) const {
560: givenACodeSampleToTokenize singleChar@var179 (@expr1073743837 "a" , true ) ;
561: $if $(@expr1073743838 $!@expr1073743839 $assertEquals $(@expr1073743840 "cppcheck-2.8/test/testtoken.cpp" $, 561 $, true $, $(@expr1073743841 Token ::@expr2018 Match (@expr1073743843 singleChar@var179 .@expr2020 tokens (@expr2021 ) , "[a|bc]" ) $) $) $) { $return ; }
562: $if $(@expr1073743846 $!@expr1073743847 $assertEquals $(@expr1073743848 "cppcheck-2.8/test/testtoken.cpp" $, 562 $, false $, $(@expr1073743849 Token ::@expr2018 Match (@expr1073743851 singleChar@var179 .@expr2020 tokens (@expr2021 ) , "[d|ef]" ) $) $) $) { $return ; }
563:
564: Token multiChar@var180 ;
565: multiChar@var180 .@expr1073743854 str (@expr1073743855 "[ab" ) ;
566: $if $(@expr1073743856 $!@expr1073743857 $assertEquals $(@expr1073743858 "cppcheck-2.8/test/testtoken.cpp" $, 566 $, false $, $(@expr1073743859 Token ::@expr2018 Match (@expr1073743861 &@expr1073743862 multiChar@var180 , "[ab|def]" ) $) $) $) { $return ; }
567: }
568:
569: void matchNothingOrAnyNotElse ( ) const {
570: givenACodeSampleToTokenize empty_String@var181 (@expr1073743863 "" , true ) ;
571: $if $(@expr1073743864 $!@expr1073743865 $assertEquals $(@expr1073743866 "cppcheck-2.8/test/testtoken.cpp" $, 571 $, true $, $(@expr1073743867 Token ::@expr2044 Match (@expr1073743869 empty_String@var181 .@expr2046 tokens (@expr2047 ) , "!!else" ) $) $) $) { $return ; }
572: $if $(@expr1073743872 $!@expr1073743873 $assertEquals $(@expr1073743874 "cppcheck-2.8/test/testtoken.cpp" $, 572 $, false $, $(@expr1073743875 Token ::@expr2044 Match (@expr1073743877 empty_String@var181 .@expr2046 tokens (@expr2047 ) , "!!else something" ) $) $) $) { $return ; }
573:
574: givenACodeSampleToTokenize ifSemicolon@var182 (@expr1073743880 "if ;" , true ) ;
575: $if $(@expr1073743881 $!@expr1073743882 $assertEquals $(@expr1073743883 "cppcheck-2.8/test/testtoken.cpp" $, 575 $, true $, $(@expr1073743884 Token ::@expr2044 Match (@expr1073743886 ifSemicolon@var182 .@expr1073743887 tokens (@expr1073743888 ) , "if ; !!else" ) $) $) $) { $return ; }
576:
577: givenACodeSampleToTokenize ifSemicolonSomething@var183 (@expr1073743889 "if ; something" , true ) ;
578: $if $(@expr1073743890 $!@expr1073743891 $assertEquals $(@expr1073743892 "cppcheck-2.8/test/testtoken.cpp" $, 578 $, true $, $(@expr1073743893 Token ::@expr2044 Match (@expr1073743895 ifSemicolonSomething@var183 .@expr1073743896 tokens (@expr1073743897 ) , "if ; !!else" ) $) $) $) { $return ; }
579:
580: givenACodeSampleToTokenize justElse@var184 (@expr1073743898 "else" , true ) ;
581: $if $(@expr1073743899 $!@expr1073743900 $assertEquals $(@expr1073743901 "cppcheck-2.8/test/testtoken.cpp" $, 581 $, false $, $(@expr1073743902 Token ::@expr2044 Match (@expr1073743904 justElse@var184 .@expr1073743905 tokens (@expr1073743906 ) , "!!else" ) $) $) $) { $return ; }
582:
583: givenACodeSampleToTokenize ifSemicolonElse@var185 (@expr1073743907 "if ; else" , true ) ;
584: $if $(@expr1073743908 $!@expr1073743909 $assertEquals $(@expr1073743910 "cppcheck-2.8/test/testtoken.cpp" $, 584 $, false $, $(@expr1073743911 Token ::@expr2044 Match (@expr1073743913 ifSemicolonElse@var185 .@expr1073743914 tokens (@expr1073743915 ) , "if ; !!else" ) $) $) $) { $return ; }
585: }
586:
587: void matchType ( ) const {
588: givenACodeSampleToTokenize type@var186 (@expr1073743916 "abc" , true ) ;
589: $if $(@expr1073743917 $!@expr1073743918 $assertEquals $(@expr1073743919 "cppcheck-2.8/test/testtoken.cpp" $, 589 $, true $, $(@expr1073743920 Token ::@expr2097 Match (@expr1073743922 type@var186 .@expr1073743923 tokens (@expr1073743924 ) , "%type%" ) $) $) $) { $return ; }
590:
591: givenACodeSampleToTokenize isVar@var187 (@expr1073743925 "int a = 3 ;" ) ;
592: $if $(@expr1073743926 $!@expr1073743927 $assertEquals $(@expr1073743928 "cppcheck-2.8/test/testtoken.cpp" $, 592 $, true $, $(@expr1073743929 Token ::@expr2097 Match (@expr1073743931 isVar@var187 .@expr2108 tokens (@expr2109 ) , "%type%" ) $) $) $) { $return ; }
593: $if $(@expr1073743934 $!@expr1073743935 $assertEquals $(@expr1073743936 "cppcheck-2.8/test/testtoken.cpp" $, 593 $, true $, $(@expr1073743937 Token ::@expr2097 Match (@expr1073743939 isVar@var187 .@expr2108 tokens (@expr2109 ) , "%type% %name%" ) $) $) $) { $return ; }
594: $if $(@expr1073743942 $!@expr1073743943 $assertEquals $(@expr1073743944 "cppcheck-2.8/test/testtoken.cpp" $, 594 $, false $, $(@expr1073743945 Token ::@expr2097 Match (@expr1073743947 isVar@var187 .@expr2108 tokens (@expr2109 ) , "%type% %type%" ) $) $) $) { $return ; }
595:
596: givenACodeSampleToTokenize noType1_cpp@var188 (@expr1073743950 "delete" , true , true ) ;
597: $if $(@expr1073743951 $!@expr1073743952 $assertEquals $(@expr1073743953 "cppcheck-2.8/test/testtoken.cpp" $, 597 $, false $, $(@expr1073743954 Token ::@expr2097 Match (@expr1073743956 noType1_cpp@var188 .@expr1073743957 tokens (@expr1073743958 ) , "%type%" ) $) $) $) { $return ; }
598:
599: givenACodeSampleToTokenize noType1_c@var189 (@expr1073743959 "delete" , true , false ) ;
600: $if $(@expr1073743960 $!@expr1073743961 $assertEquals $(@expr1073743962 "cppcheck-2.8/test/testtoken.cpp" $, 600 $, true $, $(@expr1073743963 Token ::@expr2097 Match (@expr1073743965 noType1_c@var189 .@expr1073743966 tokens (@expr1073743967 ) , "%type%" ) $) $) $) { $return ; }
601:
602: givenACodeSampleToTokenize noType2@var190 (@expr1073743968 "void delete" , true ) ;
603: $if $(@expr1073743969 $!@expr1073743970 $assertEquals $(@expr1073743971 "cppcheck-2.8/test/testtoken.cpp" $, 603 $, false $, $(@expr1073743972 Token ::@expr2097 Match (@expr1073743974 noType2@var190 .@expr1073743975 tokens (@expr1073743976 ) , "!!foo %type%" ) $) $) $) { $return ; }
604: }
605:
606: void matchChar ( ) const {
607: givenACodeSampleToTokenize chr1@var191 (@expr1073743977 "'a'" , true ) ;
608: $if $(@expr1073743978 $!@expr1073743979 $assertEquals $(@expr1073743980 "cppcheck-2.8/test/testtoken.cpp" $, 608 $, true $, $(@expr1073743981 Token ::@expr2158 Match (@expr1073743983 chr1@var191 .@expr1073743984 tokens (@expr1073743985 ) , "%char%" ) $) $) $) { $return ; }
609:
610: givenACodeSampleToTokenize chr2@var192 (@expr1073743986 "'1'" , true ) ;
611: $if $(@expr1073743987 $!@expr1073743988 $assertEquals $(@expr1073743989 "cppcheck-2.8/test/testtoken.cpp" $, 611 $, true $, $(@expr1073743990 Token ::@expr2158 Match (@expr1073743992 chr2@var192 .@expr1073743993 tokens (@expr1073743994 ) , "%char%" ) $) $) $) { $return ; }
612:
613: givenACodeSampleToTokenize noChr@var193 (@expr1073743995 "\"10\"" , true ) ;
614: $if $(@expr1073743996 $!@expr1073743997 $assertEquals $(@expr1073743998 "cppcheck-2.8/test/testtoken.cpp" $, 614 $, false $, $(@expr1073743999 Token ::@expr2158 Match (@expr1073744001 noChr@var193 .@expr1073744002 tokens (@expr1073744003 ) , "%char%" ) $) $) $) { $return ; }
615: }
616:
617: void matchCompOp ( ) const {
618: givenACodeSampleToTokenize comp1@var194 (@expr1073744004 "<=" , true ) ;
619: $if $(@expr1073744005 $!@expr1073744006 $assertEquals $(@expr1073744007 "cppcheck-2.8/test/testtoken.cpp" $, 619 $, true $, $(@expr1073744008 Token ::@expr2185 Match (@expr1073744010 comp1@var194 .@expr1073744011 tokens (@expr1073744012 ) , "%comp%" ) $) $) $) { $return ; }
620:
621: givenACodeSampleToTokenize comp2@var195 (@expr1073744013 ">" , true ) ;
622: $if $(@expr1073744014 $!@expr1073744015 $assertEquals $(@expr1073744016 "cppcheck-2.8/test/testtoken.cpp" $, 622 $, true $, $(@expr1073744017 Token ::@expr2185 Match (@expr1073744019 comp2@var195 .@expr1073744020 tokens (@expr1073744021 ) , "%comp%" ) $) $) $) { $return ; }
623:
624: givenACodeSampleToTokenize noComp@var196 (@expr1073744022 "=" , true ) ;
625: $if $(@expr1073744023 $!@expr1073744024 $assertEquals $(@expr1073744025 "cppcheck-2.8/test/testtoken.cpp" $, 625 $, false $, $(@expr1073744026 Token ::@expr2185 Match (@expr1073744028 noComp@var196 .@expr1073744029 tokens (@expr1073744030 ) , "%comp%" ) $) $) $) { $return ; }
626: }
627:
628: void matchStr ( ) const {
629: givenACodeSampleToTokenize noStr1@var197 (@expr1073744031 "abc" , true ) ;
630: $if $(@expr1073744032 $!@expr1073744033 $assertEquals $(@expr1073744034 "cppcheck-2.8/test/testtoken.cpp" $, 630 $, false $, $(@expr1073744035 Token ::@expr2212 Match (@expr1073744037 noStr1@var197 .@expr1073744038 tokens (@expr1073744039 ) , "%str%" ) $) $) $) { $return ; }
631:
632: givenACodeSampleToTokenize noStr2@var198 (@expr1073744040 "'a'" , true ) ;
633: $if $(@expr1073744041 $!@expr1073744042 $assertEquals $(@expr1073744043 "cppcheck-2.8/test/testtoken.cpp" $, 633 $, false $, $(@expr1073744044 Token ::@expr2212 Match (@expr1073744046 noStr2@var198 .@expr1073744047 tokens (@expr1073744048 ) , "%str%" ) $) $) $) { $return ; }
634:
635: givenACodeSampleToTokenize str@var199 (@expr1073744049 "\"abc\"" , true ) ;
636: $if $(@expr1073744050 $!@expr1073744051 $assertEquals $(@expr1073744052 "cppcheck-2.8/test/testtoken.cpp" $, 636 $, true $, $(@expr1073744053 Token ::@expr2212 Match (@expr1073744055 str@var199 .@expr1073744056 tokens (@expr1073744057 ) , "%str%" ) $) $) $) { $return ; }
637:
638:
639: givenACodeSampleToTokenize emptyStr@var200 (@expr1073744058 "\"\"" , true ) ;
640: $if $(@expr1073744059 $!@expr1073744060 $assertEquals $(@expr1073744061 "cppcheck-2.8/test/testtoken.cpp" $, 640 $, true $, $(@expr1073744062 Token ::@expr2212 Match (@expr1073744064 emptyStr@var200 .@expr1073744065 tokens (@expr1073744066 ) , "%str%" ) $) $) $) { $return ; }
641: }
642:
643: void matchVarid ( ) const {
644: givenACodeSampleToTokenize var@var201 (@expr1073744067 "int a ; int b ;" ) ;
645:
646:
647: $do ${ $try ${ (@expr1073744068 void ) Token ::@expr2245 Match (@expr1073744070 var@var201 .@expr2247 tokens (@expr2248 ) , "%type% %varid% ; %type% %name%" , 0 ) $; $assertThrowFail $(@expr1073744073 "cppcheck-2.8/test/testtoken.cpp" $, 647 $) $; $} $catch $(@expr1073744074 $const InternalError $&@expr1073744075 $) ${ $} $catch $(@expr1073744076 $... $) ${ $assertThrowFail $(@expr1073744077 "cppcheck-2.8/test/testtoken.cpp" $, 647 $) $; $} $} $while $(@expr1073744078 $false $) ;
648:
649: $if $(@expr1073744079 $!@expr1073744080 $assertEquals $(@expr1073744081 "cppcheck-2.8/test/testtoken.cpp" $, 649 $, true $, $(@expr1073744082 Token ::@expr2245 Match (@expr1073744084 var@var201 .@expr2247 tokens (@expr2248 ) , "%type% %varid% ; %type% %name%" , 1 ) $) $) $) { $return ; }
650: $if $(@expr1073744087 $!@expr1073744088 $assertEquals $(@expr1073744089 "cppcheck-2.8/test/testtoken.cpp" $, 650 $, true $, $(@expr1073744090 Token ::@expr2245 Match (@expr1073744092 var@var201 .@expr2247 tokens (@expr2248 ) , "%type% %name% ; %type% %varid%" , 2 ) $) $) $) { $return ; }
651:
652:
653: $if $(@expr1073744095 $!@expr1073744096 $assertEquals $(@expr1073744097 "cppcheck-2.8/test/testtoken.cpp" $, 653 $, false $, $(@expr1073744098 Token ::@expr2245 Match (@expr1073744100 var@var201 .@expr2247 tokens (@expr2248 ) , "%type% %varid% ; %type% %varid%" , 2 ) $) $) $) { $return ; }
654:
655:
656: $if $(@expr1073744103 $!@expr1073744104 $assertEquals $(@expr1073744105 "cppcheck-2.8/test/testtoken.cpp" $, 656 $, true $, $(@expr1073744106 Token ::@expr2245 Match (@expr1073744108 var@var201 .@expr2247 tokens (@expr2248 ) , "%type% %var% ;" ) $) $) $) { $return ; }
657: $if $(@expr1073744111 $!@expr1073744112 $assertEquals $(@expr1073744113 "cppcheck-2.8/test/testtoken.cpp" $, 657 $, false $, $(@expr1073744114 Token ::@expr2245 Match (@expr1073744116 var@var201 .@expr2247 tokens (@expr2248 ) , "%var% %var% ;" ) $) $) $) { $return ; }
658: }
659:
660: void matchNumeric ( ) const {
661: givenACodeSampleToTokenize nonNumeric@var202 (@expr1073744119 "abc" , true ) ;
662: $if $(@expr1073744120 $!@expr1073744121 $assertEquals $(@expr1073744122 "cppcheck-2.8/test/testtoken.cpp" $, 662 $, false $, $(@expr1073744123 Token ::@expr2300 Match (@expr1073744125 nonNumeric@var202 .@expr1073744126 tokens (@expr1073744127 ) , "%num%" ) $) $) $) { $return ; }
663:
664: givenACodeSampleToTokenize binary@var203 (@expr1073744128 "101010b" , true ) ;
665: $if $(@expr1073744129 $!@expr1073744130 $assertEquals $(@expr1073744131 "cppcheck-2.8/test/testtoken.cpp" $, 665 $, true $, $(@expr1073744132 Token ::@expr2300 Match (@expr1073744134 binary@var203 .@expr1073744135 tokens (@expr1073744136 ) , "%num%" ) $) $) $) { $return ; }
666:
667: givenACodeSampleToTokenize octal@var204 (@expr1073744137 "0123" , true ) ;
668: $if $(@expr1073744138 $!@expr1073744139 $assertEquals $(@expr1073744140 "cppcheck-2.8/test/testtoken.cpp" $, 668 $, true $, $(@expr1073744141 Token ::@expr2300 Match (@expr1073744143 octal@var204 .@expr1073744144 tokens (@expr1073744145 ) , "%num%" ) $) $) $) { $return ; }
669:
670: givenACodeSampleToTokenize decimal@var205 (@expr1073744146 "4567" , true ) ;
671: $if $(@expr1073744147 $!@expr1073744148 $assertEquals $(@expr1073744149 "cppcheck-2.8/test/testtoken.cpp" $, 671 $, true $, $(@expr1073744150 Token ::@expr2300 Match (@expr1073744152 decimal@var205 .@expr1073744153 tokens (@expr1073744154 ) , "%num%" ) $) $) $) { $return ; }
672:
673: givenACodeSampleToTokenize hexadecimal@var206 (@expr1073744155 "0xDEADBEEF" , true ) ;
674: $if $(@expr1073744156 $!@expr1073744157 $assertEquals $(@expr1073744158 "cppcheck-2.8/test/testtoken.cpp" $, 674 $, true $, $(@expr1073744159 Token ::@expr2300 Match (@expr1073744161 hexadecimal@var206 .@expr1073744162 tokens (@expr1073744163 ) , "%num%" ) $) $) $) { $return ; }
675:
676: givenACodeSampleToTokenize floatingPoint@var207 (@expr1073744164 "0.0f" , true ) ;
677: $if $(@expr1073744165 $!@expr1073744166 $assertEquals $(@expr1073744167 "cppcheck-2.8/test/testtoken.cpp" $, 677 $, true $, $(@expr1073744168 Token ::@expr2300 Match (@expr1073744170 floatingPoint@var207 .@expr1073744171 tokens (@expr1073744172 ) , "%num%" ) $) $) $) { $return ; }
678:
679: givenACodeSampleToTokenize doublePrecision@var208 (@expr1073744173 "0.0d" , true ) ;
680: $if $(@expr1073744174 $!@expr1073744175 $assertEquals $(@expr1073744176 "cppcheck-2.8/test/testtoken.cpp" $, 680 $, true $, $(@expr1073744177 Token ::@expr2300 Match (@expr1073744179 doublePrecision@var208 .@expr1073744180 tokens (@expr1073744181 ) , "%num%" ) $) $) $) { $return ; }
681:
682: givenACodeSampleToTokenize signedLong@var209 (@expr1073744182 "0L" , true ) ;
683: $if $(@expr1073744183 $!@expr1073744184 $assertEquals $(@expr1073744185 "cppcheck-2.8/test/testtoken.cpp" $, 683 $, true $, $(@expr1073744186 Token ::@expr2300 Match (@expr1073744188 signedLong@var209 .@expr1073744189 tokens (@expr1073744190 ) , "%num%" ) $) $) $) { $return ; }
684:
685: givenACodeSampleToTokenize negativeSignedLong@var210 (@expr1073744191 "-0L" , true ) ;
686: $if $(@expr1073744192 $!@expr1073744193 $assertEquals $(@expr1073744194 "cppcheck-2.8/test/testtoken.cpp" $, 686 $, true $, $(@expr1073744195 Token ::@expr2300 Match (@expr1073744197 negativeSignedLong@var210 .@expr1073744198 tokens (@expr1073744199 ) , "- %num%" ) $) $) $) { $return ; }
687:
688: givenACodeSampleToTokenize positiveSignedLong@var211 (@expr1073744200 "+0L" , true ) ;
689: $if $(@expr1073744201 $!@expr1073744202 $assertEquals $(@expr1073744203 "cppcheck-2.8/test/testtoken.cpp" $, 689 $, true $, $(@expr1073744204 Token ::@expr2300 Match (@expr1073744206 positiveSignedLong@var211 .@expr1073744207 tokens (@expr1073744208 ) , "+ %num%" ) $) $) $) { $return ; }
690:
691: givenACodeSampleToTokenize unsignedInt@var212 (@expr1073744209 "0U" , true ) ;
692: $if $(@expr1073744210 $!@expr1073744211 $assertEquals $(@expr1073744212 "cppcheck-2.8/test/testtoken.cpp" $, 692 $, true $, $(@expr1073744213 Token ::@expr2300 Match (@expr1073744215 unsignedInt@var212 .@expr1073744216 tokens (@expr1073744217 ) , "%num%" ) $) $) $) { $return ; }
693:
694: givenACodeSampleToTokenize unsignedLong@var213 (@expr1073744218 "0UL" , true ) ;
695: $if $(@expr1073744219 $!@expr1073744220 $assertEquals $(@expr1073744221 "cppcheck-2.8/test/testtoken.cpp" $, 695 $, true $, $(@expr1073744222 Token ::@expr2300 Match (@expr1073744224 unsignedLong@var213 .@expr1073744225 tokens (@expr1073744226 ) , "%num%" ) $) $) $) { $return ; }
696:
697: givenACodeSampleToTokenize unsignedLongLong@var214 (@expr1073744227 "0ULL" , true ) ;
698: $if $(@expr1073744228 $!@expr1073744229 $assertEquals $(@expr1073744230 "cppcheck-2.8/test/testtoken.cpp" $, 698 $, true $, $(@expr1073744231 Token ::@expr2300 Match (@expr1073744233 unsignedLongLong@var214 .@expr1073744234 tokens (@expr1073744235 ) , "%num%" ) $) $) $) { $return ; }
699:
700: givenACodeSampleToTokenize positive@var215 (@expr1073744236 "+666" , true ) ;
701: $if $(@expr1073744237 $!@expr1073744238 $assertEquals $(@expr1073744239 "cppcheck-2.8/test/testtoken.cpp" $, 701 $, true $, $(@expr1073744240 Token ::@expr2300 Match (@expr1073744242 positive@var215 .@expr1073744243 tokens (@expr1073744244 ) , "+ %num%" ) $) $) $) { $return ; }
702:
703: givenACodeSampleToTokenize negative@var216 (@expr1073744245 "-42" , true ) ;
704: $if $(@expr1073744246 $!@expr1073744247 $assertEquals $(@expr1073744248 "cppcheck-2.8/test/testtoken.cpp" $, 704 $, true $, $(@expr1073744249 Token ::@expr2300 Match (@expr1073744251 negative@var216 .@expr1073744252 tokens (@expr1073744253 ) , "- %num%" ) $) $) $) { $return ; }
705:
706: givenACodeSampleToTokenize negativeNull@var217 (@expr1073744254 "-.0" , true ) ;
707: $if $(@expr1073744255 $!@expr1073744256 $assertEquals $(@expr1073744257 "cppcheck-2.8/test/testtoken.cpp" $, 707 $, true $, $(@expr1073744258 Token ::@expr2300 Match (@expr1073744260 negativeNull@var217 .@expr1073744261 tokens (@expr1073744262 ) , "- %num%" ) $) $) $) { $return ; }
708:
709: givenACodeSampleToTokenize positiveNull@var218 (@expr1073744263 "+.0" , true ) ;
710: $if $(@expr1073744264 $!@expr1073744265 $assertEquals $(@expr1073744266 "cppcheck-2.8/test/testtoken.cpp" $, 710 $, true $, $(@expr1073744267 Token ::@expr2300 Match (@expr1073744269 positiveNull@var218 .@expr1073744270 tokens (@expr1073744271 ) , "+ %num%" ) $) $) $) { $return ; }
711: }
712:
713:
714: void matchBoolean ( ) const {
715: givenACodeSampleToTokenize yes@var219 (@expr1073744272 "YES" , true ) ;
716: $if $(@expr1073744273 $!@expr1073744274 $assertEquals $(@expr1073744275 "cppcheck-2.8/test/testtoken.cpp" $, 716 $, false $, $(@expr1073744276 Token ::@expr2453 Match (@expr1073744278 yes@var219 .@expr1073744279 tokens (@expr1073744280 ) , "%bool%" ) $) $) $) { $return ; }
717:
718: givenACodeSampleToTokenize positive@var220 (@expr1073744281 "true" , true ) ;
719: $if $(@expr1073744282 $!@expr1073744283 $assertEquals $(@expr1073744284 "cppcheck-2.8/test/testtoken.cpp" $, 719 $, true $, $(@expr1073744285 Token ::@expr2453 Match (@expr1073744287 positive@var220 .@expr1073744288 tokens (@expr1073744289 ) , "%bool%" ) $) $) $) { $return ; }
720:
721: givenACodeSampleToTokenize negative@var221 (@expr1073744290 "false" , true ) ;
722: $if $(@expr1073744291 $!@expr1073744292 $assertEquals $(@expr1073744293 "cppcheck-2.8/test/testtoken.cpp" $, 722 $, true $, $(@expr1073744294 Token ::@expr2453 Match (@expr1073744296 negative@var221 .@expr1073744297 tokens (@expr1073744298 ) , "%bool%" ) $) $) $) { $return ; }
723: }
724:
725: void matchOr ( ) const {
726: givenACodeSampleToTokenize bitwiseOr@var222 (@expr1073744299 ";|;" , true ) ;
727:
728: $if $(@expr1073744300 $!@expr1073744301 $assertEquals $(@expr1073744302 "cppcheck-2.8/test/testtoken.cpp" $, 728 $, true $, $(@expr1073744303 Token ::@expr2480 Match (@expr1073744305 bitwiseOr@var222 .@expr2482 tokens (@expr2483 ) , "; %or%" ) $) $) $) { $return ; }
729: $if $(@expr1073744308 $!@expr1073744309 $assertEquals $(@expr1073744310 "cppcheck-2.8/test/testtoken.cpp" $, 729 $, true $, $(@expr1073744311 Token ::@expr2480 Match (@expr1073744313 bitwiseOr@var222 .@expr2482 tokens (@expr2483 ) , "; %op%" ) $) $) $) { $return ; }
730:
731: $if $(@expr1073744316 $!@expr1073744317 $assertEquals $(@expr1073744318 "cppcheck-2.8/test/testtoken.cpp" $, 731 $, false $, $(@expr1073744319 Token ::@expr2480 Match (@expr1073744321 bitwiseOr@var222 .@expr2482 tokens (@expr2483 ) , "; %oror%" ) $) $) $) { $return ; }
732:
733: givenACodeSampleToTokenize bitwiseOrAssignment@var223 (@expr1073744324 ";|=;" ) ;
734:
735: $if $(@expr1073744325 $!@expr1073744326 $assertEquals $(@expr1073744327 "cppcheck-2.8/test/testtoken.cpp" $, 735 $, false $, $(@expr1073744328 Token ::@expr2480 Match (@expr1073744330 bitwiseOrAssignment@var223 .@expr2507 tokens (@expr2508 ) , "; %or%" ) $) $) $) { $return ; }
736: $if $(@expr1073744333 $!@expr1073744334 $assertEquals $(@expr1073744335 "cppcheck-2.8/test/testtoken.cpp" $, 736 $, true $, $(@expr1073744336 Token ::@expr2480 Match (@expr1073744338 bitwiseOrAssignment@var223 .@expr2507 tokens (@expr2508 ) , "; %op%" ) $) $) $) { $return ; }
737:
738: $if $(@expr1073744341 $!@expr1073744342 $assertEquals $(@expr1073744343 "cppcheck-2.8/test/testtoken.cpp" $, 738 $, false $, $(@expr1073744344 Token ::@expr2480 Match (@expr1073744346 bitwiseOrAssignment@var223 .@expr2507 tokens (@expr2508 ) , "; %oror%" ) $) $) $) { $return ; }
739:
740: givenACodeSampleToTokenize logicalOr@var224 (@expr1073744349 ";||;" , true ) ;
741:
742: $if $(@expr1073744350 $!@expr1073744351 $assertEquals $(@expr1073744352 "cppcheck-2.8/test/testtoken.cpp" $, 742 $, false $, $(@expr1073744353 Token ::@expr2480 Match (@expr1073744355 logicalOr@var224 .@expr2532 tokens (@expr2533 ) , "; %or%" ) $) $) $) { $return ; }
743: $if $(@expr1073744358 $!@expr1073744359 $assertEquals $(@expr1073744360 "cppcheck-2.8/test/testtoken.cpp" $, 743 $, true $, $(@expr1073744361 Token ::@expr2480 Match (@expr1073744363 logicalOr@var224 .@expr2532 tokens (@expr2533 ) , "; %op%" ) $) $) $) { $return ; }
744:
745: $if $(@expr1073744366 $!@expr1073744367 $assertEquals $(@expr1073744368 "cppcheck-2.8/test/testtoken.cpp" $, 745 $, true $, $(@expr1073744369 Token ::@expr2480 Match (@expr1073744371 logicalOr@var224 .@expr2532 tokens (@expr2533 ) , "; %oror%" ) $) $) $) { $return ; }
746: $if $(@expr1073744374 $!@expr1073744375 $assertEquals $(@expr1073744376 "cppcheck-2.8/test/testtoken.cpp" $, 746 $, true $, $(@expr1073744377 Token ::@expr2480 Match (@expr1073744379 logicalOr@var224 .@expr2532 tokens (@expr2533 ) , "; &&|%oror%" ) $) $) $) { $return ; }
747: $if $(@expr1073744382 $!@expr1073744383 $assertEquals $(@expr1073744384 "cppcheck-2.8/test/testtoken.cpp" $, 747 $, true $, $(@expr1073744385 Token ::@expr2480 Match (@expr1073744387 logicalOr@var224 .@expr2532 tokens (@expr2533 ) , "; %oror%|&&" ) $) $) $) { $return ; }
748:
749: givenACodeSampleToTokenize logicalAnd@var225 (@expr1073744390 ";&&;" , true ) ;
750: $if $(@expr1073744391 $!@expr1073744392 $assertEquals $(@expr1073744393 "cppcheck-2.8/test/testtoken.cpp" $, 750 $, true $, $(@expr1073744394 Token ::@expr1073744395 simpleMatch (@expr1073744396 logicalAnd@var225 .@expr2573 tokens (@expr2574 ) , "; &&" ) $) $) $) { $return ; }
751: $if $(@expr1073744399 $!@expr1073744400 $assertEquals $(@expr1073744401 "cppcheck-2.8/test/testtoken.cpp" $, 751 $, true $, $(@expr1073744402 Token ::@expr2480 Match (@expr1073744404 logicalAnd@var225 .@expr2573 tokens (@expr2574 ) , "; &&|%oror%" ) $) $) $) { $return ; }
752: $if $(@expr1073744407 $!@expr1073744408 $assertEquals $(@expr1073744409 "cppcheck-2.8/test/testtoken.cpp" $, 752 $, true $, $(@expr1073744410 Token ::@expr2480 Match (@expr1073744412 logicalAnd@var225 .@expr2573 tokens (@expr2574 ) , "; %oror%|&&" ) $) $) $) { $return ; }
753: }
754:
755: static void append_vector ( std :: vector < std :: string > & dest@var226 , const std :: vector < std :: string > & src@var227 ) {
756: dest@var226 .@expr1073744415 insert (@expr1073744416 dest@var226 .@expr1073744417 end (@expr1073744418 ) , src@var227 .@expr1073744419 begin (@expr1073744420 ) , src@var227 .@expr1073744421 end (@expr1073744422 ) ) ;
757: }
758:
759: void matchOp ( ) {
760: std ::@expr1073744423 vector < std ::@expr2600 string > test_ops@var228 ;
761: append_vector (@expr1073744425 test_ops@var228 , arithmeticalOps@var121 ) ;
762: append_vector (@expr1073744426 test_ops@var228 , bitOps@var123 ) ;
763: append_vector (@expr1073744427 test_ops@var228 , comparisonOps@var124 ) ;
764: append_vector (@expr1073744428 test_ops@var228 , logicalOps@var122 ) ;
765: append_vector (@expr1073744429 test_ops@var228 , assignmentOps@var126 ) ;
766:
767: std ::@expr2606 vector < std ::@expr2600 string > ::@expr1073744432 const_iterator test_op@var229 ; std ::@expr2606 vector < std ::@expr2600 string > ::@expr1073744435 const_iterator test_ops_end@var230 ; test_ops_end@var230 =@expr1073744436 test_ops@var228 .@expr1073744437 end (@expr1073744438 ) ;
768: for (@expr1073744439 test_op@var229 =@expr1073744440 test_ops@var228 .@expr1073744441 begin (@expr1073744442 ) ; test_op@var229 !=@expr1073744443 test_ops_end@var230 ; ++@expr1073744444 test_op@var229 ) {
769: $if $(@expr1073744445 $!@expr1073744446 $assertEquals $(@expr1073744447 "cppcheck-2.8/test/testtoken.cpp" $, 769 $, true $, $MatchCheck_ $(@expr1073744448 "cppcheck-2.8/test/testtoken.cpp" $, 769 $, *@expr1073744449 test_op@var229 , "%op%" $) $) $) { $return ; }
770: }
771:
772:
773: std ::@expr1073744450 vector < std ::@expr2600 string > other_ops@var231 ;
774: append_vector (@expr1073744452 other_ops@var231 , extendedOps@var125 ) ;
775:
776: std ::@expr2606 vector < std ::@expr2600 string > ::@expr1073744455 const_iterator other_op@var232 ; std ::@expr2606 vector < std ::@expr2600 string > ::@expr1073744458 const_iterator other_ops_end@var233 ; other_ops_end@var233 =@expr1073744459 other_ops@var231 .@expr1073744460 end (@expr1073744461 ) ;
777: for (@expr1073744462 other_op@var232 =@expr1073744463 other_ops@var231 .@expr1073744464 begin (@expr1073744465 ) ; other_op@var232 !=@expr1073744466 other_ops_end@var233 ; ++@expr1073744467 other_op@var232 ) {
778: $assertEquals $(@expr1073744468 "cppcheck-2.8/test/testtoken.cpp" $, 778 $, false $, $MatchCheck_ $(@expr1073744469 "cppcheck-2.8/test/testtoken.cpp" $, 778 $, *@expr2646 other_op@var232 , "%op%" $) $, "Failing other operator: " +@expr1073744471 *@expr2646 other_op@var232 $) ;
779: }
780: }
781:
782: void matchConstOp ( ) {
783: std ::@expr1073744473 vector < std ::@expr2650 string > test_ops@var234 ;
784: append_vector (@expr1073744475 test_ops@var234 , arithmeticalOps@var121 ) ;
785: append_vector (@expr1073744476 test_ops@var234 , bitOps@var123 ) ;
786: append_vector (@expr1073744477 test_ops@var234 , comparisonOps@var124 ) ;
787: append_vector (@expr1073744478 test_ops@var234 , logicalOps@var122 ) ;
788:
789: std ::@expr2655 vector < std ::@expr2650 string > ::@expr1073744481 const_iterator test_op@var235 ; std ::@expr2655 vector < std ::@expr2650 string > ::@expr1073744484 const_iterator test_ops_end@var236 ; test_ops_end@var236 =@expr1073744485 test_ops@var234 .@expr1073744486 end (@expr1073744487 ) ;
790: for (@expr1073744488 test_op@var235 =@expr1073744489 test_ops@var234 .@expr1073744490 begin (@expr1073744491 ) ; test_op@var235 !=@expr1073744492 test_ops_end@var236 ; ++@expr1073744493 test_op@var235 ) {
791: $if $(@expr1073744494 $!@expr1073744495 $assertEquals $(@expr1073744496 "cppcheck-2.8/test/testtoken.cpp" $, 791 $, true $, $MatchCheck_ $(@expr1073744497 "cppcheck-2.8/test/testtoken.cpp" $, 791 $, *@expr1073744498 test_op@var235 , "%cop%" $) $) $) { $return ; }
792: }
793:
794:
795: std ::@expr1073744499 vector < std ::@expr2650 string > other_ops@var237 ;
796: append_vector (@expr1073744501 other_ops@var237 , extendedOps@var125 ) ;
797: append_vector (@expr1073744502 other_ops@var237 , assignmentOps@var126 ) ;
798:
799: std ::@expr2655 vector < std ::@expr2650 string > ::@expr1073744505 const_iterator other_op@var238 ; std ::@expr2655 vector < std ::@expr2650 string > ::@expr1073744508 const_iterator other_ops_end@var239 ; other_ops_end@var239 =@expr1073744509 other_ops@var237 .@expr1073744510 end (@expr1073744511 ) ;
800: for (@expr1073744512 other_op@var238 =@expr1073744513 other_ops@var237 .@expr1073744514 begin (@expr1073744515 ) ; other_op@var238 !=@expr1073744516 other_ops_end@var239 ; ++@expr1073744517 other_op@var238 ) {
801: $assertEquals $(@expr1073744518 "cppcheck-2.8/test/testtoken.cpp" $, 801 $, false $, $MatchCheck_ $(@expr1073744519 "cppcheck-2.8/test/testtoken.cpp" $, 801 $, *@expr2696 other_op@var238 , "%cop%" $) $, "Failing other operator: " +@expr1073744521 *@expr2696 other_op@var238 $) ;
802: }
803: }
804:
805:
806: void isArithmeticalOp ( ) const {
807: std ::@expr2699 vector < std ::@expr2700 string > ::@expr1073744525 const_iterator test_op@var240 ; std ::@expr2699 vector < std ::@expr2700 string > ::@expr1073744528 const_iterator test_ops_end@var241 ; test_ops_end@var241 =@expr1073744529 arithmeticalOps@var121 .@expr1073744530 end (@expr1073744531 ) ;
808: for (@expr1073744532 test_op@var240 =@expr1073744533 arithmeticalOps@var121 .@expr1073744534 begin (@expr1073744535 ) ; test_op@var240 !=@expr1073744536 test_ops_end@var241 ; ++@expr1073744537 test_op@var240 ) {
809: Token tok@var242 ;
810: tok@var242 .@expr1073744538 str (@expr1073744539 *@expr1073744540 test_op@var240 ) ;
811: $if $(@expr1073744541 $!@expr1073744542 $assertEquals $(@expr1073744543 "cppcheck-2.8/test/testtoken.cpp" $, 811 $, true $, tok@var242 .@expr1073744544 isArithmeticalOp (@expr1073744545 ) $) $) { $return ; }
812: }
813:
814:
815: std ::@expr1073744546 vector < std ::@expr2700 string > other_ops@var243 ;
816: append_vector (@expr1073744548 other_ops@var243 , bitOps@var123 ) ;
817: append_vector (@expr1073744549 other_ops@var243 , comparisonOps@var124 ) ;
818: append_vector (@expr1073744550 other_ops@var243 , logicalOps@var122 ) ;
819: append_vector (@expr1073744551 other_ops@var243 , extendedOps@var125 ) ;
820: append_vector (@expr1073744552 other_ops@var243 , assignmentOps@var126 ) ;
821:
822: std ::@expr2699 vector < std ::@expr2700 string > ::@expr1073744555 const_iterator other_op@var244 ; std ::@expr2699 vector < std ::@expr2700 string > ::@expr1073744558 const_iterator other_ops_end@var245 ; other_ops_end@var245 =@expr1073744559 other_ops@var243 .@expr1073744560 end (@expr1073744561 ) ;
823: for (@expr1073744562 other_op@var244 =@expr1073744563 other_ops@var243 .@expr1073744564 begin (@expr1073744565 ) ; other_op@var244 !=@expr1073744566 other_ops_end@var245 ; ++@expr1073744567 other_op@var244 ) {
824: Token tok@var246 ;
825: tok@var246 .@expr1073744568 str (@expr1073744569 *@expr2746 other_op@var244 ) ;
826: $assertEquals $(@expr1073744571 "cppcheck-2.8/test/testtoken.cpp" $, 826 $, false $, tok@var246 .@expr1073744572 isArithmeticalOp (@expr1073744573 ) $, "Failing arithmetical operator: " +@expr1073744574 *@expr2746 other_op@var244 $) ;
827: }
828: }
829:
830: void isOp ( ) const {
831: std ::@expr1073744576 vector < std ::@expr2753 string > test_ops@var247 ;
832: append_vector (@expr1073744578 test_ops@var247 , arithmeticalOps@var121 ) ;
833: append_vector (@expr1073744579 test_ops@var247 , bitOps@var123 ) ;
834: append_vector (@expr1073744580 test_ops@var247 , comparisonOps@var124 ) ;
835: append_vector (@expr1073744581 test_ops@var247 , logicalOps@var122 ) ;
836: append_vector (@expr1073744582 test_ops@var247 , assignmentOps@var126 ) ;
837:
838: std ::@expr2759 vector < std ::@expr2753 string > ::@expr1073744585 const_iterator test_op@var248 ; std ::@expr2759 vector < std ::@expr2753 string > ::@expr1073744588 const_iterator test_ops_end@var249 ; test_ops_end@var249 =@expr1073744589 test_ops@var247 .@expr1073744590 end (@expr1073744591 ) ;
839: for (@expr1073744592 test_op@var248 =@expr1073744593 test_ops@var247 .@expr1073744594 begin (@expr1073744595 ) ; test_op@var248 !=@expr1073744596 test_ops_end@var249 ; ++@expr1073744597 test_op@var248 ) {
840: Token tok@var250 ;
841: tok@var250 .@expr1073744598 str (@expr1073744599 *@expr1073744600 test_op@var248 ) ;
842: $if $(@expr1073744601 $!@expr1073744602 $assertEquals $(@expr1073744603 "cppcheck-2.8/test/testtoken.cpp" $, 842 $, true $, tok@var250 .@expr1073744604 isOp (@expr1073744605 ) $) $) { $return ; }
843: }
844:
845:
846: std ::@expr1073744606 vector < std ::@expr2753 string > other_ops@var251 ;
847: append_vector (@expr1073744608 other_ops@var251 , extendedOps@var125 ) ;
848:
849: std ::@expr2759 vector < std ::@expr2753 string > ::@expr1073744611 const_iterator other_op@var252 ; std ::@expr2759 vector < std ::@expr2753 string > ::@expr1073744614 const_iterator other_ops_end@var253 ; other_ops_end@var253 =@expr1073744615 other_ops@var251 .@expr1073744616 end (@expr1073744617 ) ;
850: for (@expr1073744618 other_op@var252 =@expr1073744619 other_ops@var251 .@expr1073744620 begin (@expr1073744621 ) ; other_op@var252 !=@expr1073744622 other_ops_end@var253 ; ++@expr1073744623 other_op@var252 ) {
851: Token tok@var254 ;
852: tok@var254 .@expr1073744624 str (@expr1073744625 *@expr2802 other_op@var252 ) ;
853: $assertEquals $(@expr1073744627 "cppcheck-2.8/test/testtoken.cpp" $, 853 $, false $, tok@var254 .@expr1073744628 isOp (@expr1073744629 ) $, "Failing normal operator: " +@expr1073744630 *@expr2802 other_op@var252 $) ;
854: }
855: }
856:
857: void isConstOp ( ) const {
858: std ::@expr1073744632 vector < std ::@expr2809 string > test_ops@var255 ;
859: append_vector (@expr1073744634 test_ops@var255 , arithmeticalOps@var121 ) ;
860: append_vector (@expr1073744635 test_ops@var255 , bitOps@var123 ) ;
861: append_vector (@expr1073744636 test_ops@var255 , comparisonOps@var124 ) ;
862: append_vector (@expr1073744637 test_ops@var255 , logicalOps@var122 ) ;
863:
864: std ::@expr2814 vector < std ::@expr2809 string > ::@expr1073744640 const_iterator test_op@var256 ; std ::@expr2814 vector < std ::@expr2809 string > ::@expr1073744643 const_iterator test_ops_end@var257 ; test_ops_end@var257 =@expr1073744644 test_ops@var255 .@expr1073744645 end (@expr1073744646 ) ;
865: for (@expr1073744647 test_op@var256 =@expr1073744648 test_ops@var255 .@expr1073744649 begin (@expr1073744650 ) ; test_op@var256 !=@expr1073744651 test_ops_end@var257 ; ++@expr1073744652 test_op@var256 ) {
866: Token tok@var258 ;
867: tok@var258 .@expr1073744653 str (@expr1073744654 *@expr1073744655 test_op@var256 ) ;
868: $if $(@expr1073744656 $!@expr1073744657 $assertEquals $(@expr1073744658 "cppcheck-2.8/test/testtoken.cpp" $, 868 $, true $, tok@var258 .@expr1073744659 isConstOp (@expr1073744660 ) $) $) { $return ; }
869: }
870:
871:
872: std ::@expr1073744661 vector < std ::@expr2809 string > other_ops@var259 ;
873: append_vector (@expr1073744663 other_ops@var259 , extendedOps@var125 ) ;
874: append_vector (@expr1073744664 other_ops@var259 , assignmentOps@var126 ) ;
875:
876: std ::@expr2814 vector < std ::@expr2809 string > ::@expr1073744667 const_iterator other_op@var260 ; std ::@expr2814 vector < std ::@expr2809 string > ::@expr1073744670 const_iterator other_ops_end@var261 ; other_ops_end@var261 =@expr1073744671 other_ops@var259 .@expr1073744672 end (@expr1073744673 ) ;
877: for (@expr1073744674 other_op@var260 =@expr1073744675 other_ops@var259 .@expr1073744676 begin (@expr1073744677 ) ; other_op@var260 !=@expr1073744678 other_ops_end@var261 ; ++@expr1073744679 other_op@var260 ) {
878: Token tok@var262 ;
879: tok@var262 .@expr1073744680 str (@expr1073744681 *@expr2858 other_op@var260 ) ;
880: $assertEquals $(@expr1073744683 "cppcheck-2.8/test/testtoken.cpp" $, 880 $, false $, tok@var262 .@expr1073744684 isConstOp (@expr1073744685 ) $, "Failing normal operator: " +@expr1073744686 *@expr2858 other_op@var260 $) ;
881: }
882: }
883:
884: void isExtendedOp ( ) const {
885: std ::@expr1073744688 vector < std ::@expr2865 string > test_ops@var263 ;
886: append_vector (@expr1073744690 test_ops@var263 , arithmeticalOps@var121 ) ;
887: append_vector (@expr1073744691 test_ops@var263 , bitOps@var123 ) ;
888: append_vector (@expr1073744692 test_ops@var263 , comparisonOps@var124 ) ;
889: append_vector (@expr1073744693 test_ops@var263 , logicalOps@var122 ) ;
890: append_vector (@expr1073744694 test_ops@var263 , extendedOps@var125 ) ;
891:
892: std ::@expr2871 vector < std ::@expr2865 string > ::@expr1073744697 const_iterator test_op@var264 ; std ::@expr2871 vector < std ::@expr2865 string > ::@expr1073744700 const_iterator test_ops_end@var265 ; test_ops_end@var265 =@expr1073744701 test_ops@var263 .@expr1073744702 end (@expr1073744703 ) ;
893: for (@expr1073744704 test_op@var264 =@expr1073744705 test_ops@var263 .@expr1073744706 begin (@expr1073744707 ) ; test_op@var264 !=@expr1073744708 test_ops_end@var265 ; ++@expr1073744709 test_op@var264 ) {
894: Token tok@var266 ;
895: tok@var266 .@expr1073744710 str (@expr1073744711 *@expr1073744712 test_op@var264 ) ;
896: $if $(@expr1073744713 $!@expr1073744714 $assertEquals $(@expr1073744715 "cppcheck-2.8/test/testtoken.cpp" $, 896 $, true $, tok@var266 .@expr1073744716 isExtendedOp (@expr1073744717 ) $) $) { $return ; }
897: }
898:
899:
900: std ::@expr2871 vector < std ::@expr2865 string > ::@expr1073744720 const_iterator other_op@var267 ; std ::@expr2871 vector < std ::@expr2865 string > ::@expr1073744723 const_iterator other_ops_end@var268 ; other_ops_end@var268 =@expr1073744724 assignmentOps@var126 .@expr1073744725 end (@expr1073744726 ) ;
901: for (@expr1073744727 other_op@var267 =@expr1073744728 assignmentOps@var126 .@expr1073744729 begin (@expr1073744730 ) ; other_op@var267 !=@expr1073744731 other_ops_end@var268 ; ++@expr1073744732 other_op@var267 ) {
902: Token tok@var269 ;
903: tok@var269 .@expr1073744733 str (@expr1073744734 *@expr2911 other_op@var267 ) ;
904: $assertEquals $(@expr1073744736 "cppcheck-2.8/test/testtoken.cpp" $, 904 $, false $, tok@var269 .@expr1073744737 isExtendedOp (@expr1073744738 ) $, "Failing assignment operator: " +@expr1073744739 *@expr2911 other_op@var267 $) ;
905: }
906: }
907:
908: void isAssignmentOp ( ) const {
909: std ::@expr2917 vector < std ::@expr2918 string > ::@expr1073744743 const_iterator test_op@var270 ; std ::@expr2917 vector < std ::@expr2918 string > ::@expr1073744746 const_iterator test_ops_end@var271 ; test_ops_end@var271 =@expr1073744747 assignmentOps@var126 .@expr1073744748 end (@expr1073744749 ) ;
910: for (@expr1073744750 test_op@var270 =@expr1073744751 assignmentOps@var126 .@expr1073744752 begin (@expr1073744753 ) ; test_op@var270 !=@expr1073744754 test_ops_end@var271 ; ++@expr1073744755 test_op@var270 ) {
911: Token tok@var272 ;
912: tok@var272 .@expr1073744756 str (@expr1073744757 *@expr1073744758 test_op@var270 ) ;
913: $if $(@expr1073744759 $!@expr1073744760 $assertEquals $(@expr1073744761 "cppcheck-2.8/test/testtoken.cpp" $, 913 $, true $, tok@var272 .@expr1073744762 isAssignmentOp (@expr1073744763 ) $) $) { $return ; }
914: }
915:
916:
917: std ::@expr1073744764 vector < std ::@expr2918 string > other_ops@var273 ;
918: append_vector (@expr1073744766 other_ops@var273 , arithmeticalOps@var121 ) ;
919: append_vector (@expr1073744767 other_ops@var273 , bitOps@var123 ) ;
920: append_vector (@expr1073744768 other_ops@var273 , comparisonOps@var124 ) ;
921: append_vector (@expr1073744769 other_ops@var273 , logicalOps@var122 ) ;
922: append_vector (@expr1073744770 other_ops@var273 , extendedOps@var125 ) ;
923:
924: std ::@expr2917 vector < std ::@expr2918 string > ::@expr1073744773 const_iterator other_op@var274 ; std ::@expr2917 vector < std ::@expr2918 string > ::@expr1073744776 const_iterator other_ops_end@var275 ; other_ops_end@var275 =@expr1073744777 other_ops@var273 .@expr1073744778 end (@expr1073744779 ) ;
925: for (@expr1073744780 other_op@var274 =@expr1073744781 other_ops@var273 .@expr1073744782 begin (@expr1073744783 ) ; other_op@var274 !=@expr1073744784 other_ops_end@var275 ; ++@expr1073744785 other_op@var274 ) {
926: Token tok@var276 ;
927: tok@var276 .@expr1073744786 str (@expr1073744787 *@expr2964 other_op@var274 ) ;
928: $assertEquals $(@expr1073744789 "cppcheck-2.8/test/testtoken.cpp" $, 928 $, false $, tok@var276 .@expr1073744790 isAssignmentOp (@expr1073744791 ) $, "Failing assignment operator: " +@expr1073744792 *@expr2964 other_op@var274 $) ;
929: }
930: }
931:
932: void operators ( ) const {
933: std ::@expr1073744799 vector < std ::@expr1073744800 string > ::@expr1073744801 const_iterator test_op@var277 ;
934: for (@expr1073744802 test_op@var277 =@expr1073744803 extendedOps@var125 .@expr1073744804 begin (@expr1073744805 ) ; test_op@var277 !=@expr1073744806 extendedOps@var125 .@expr1073744807 end (@expr1073744808 ) ; ++@expr1073744809 test_op@var277 ) {
935: Token tok@var278 ;
936: tok@var278 .@expr1073744810 str (@expr1073744811 *@expr2988 test_op@var277 ) ;
937: $if $(@expr1073744813 $!@expr1073744814 $assertEquals $(@expr1073744815 "cppcheck-2.8/test/testtoken.cpp" $, 937 $, Token ::@expr1073744816 eExtendedOp@expr1073744794 $, tok@var278 .@expr1073744817 tokType (@expr1073744818 ) $) $) { $return ; }
938: }
939: for (@expr1073744819 test_op@var277 =@expr1073744820 logicalOps@var122 .@expr1073744821 begin (@expr1073744822 ) ; test_op@var277 !=@expr1073744823 logicalOps@var122 .@expr1073744824 end (@expr1073744825 ) ; ++@expr1073744826 test_op@var277 ) {
940: Token tok@var279 ;
941: tok@var279 .@expr1073744827 str (@expr1073744828 *@expr2988 test_op@var277 ) ;
942: $if $(@expr1073744830 $!@expr1073744831 $assertEquals $(@expr1073744832 "cppcheck-2.8/test/testtoken.cpp" $, 942 $, Token ::@expr1073744833 eLogicalOp@expr1073744795 $, tok@var279 .@expr1073744834 tokType (@expr1073744835 ) $) $) { $return ; }
943: }
944: for (@expr1073744836 test_op@var277 =@expr1073744837 bitOps@var123 .@expr1073744838 begin (@expr1073744839 ) ; test_op@var277 !=@expr1073744840 bitOps@var123 .@expr1073744841 end (@expr1073744842 ) ; ++@expr1073744843 test_op@var277 ) {
945: Token tok@var280 ;
946: tok@var280 .@expr1073744844 str (@expr1073744845 *@expr2988 test_op@var277 ) ;
947: $if $(@expr1073744847 $!@expr1073744848 $assertEquals $(@expr1073744849 "cppcheck-2.8/test/testtoken.cpp" $, 947 $, Token ::@expr1073744850 eBitOp@expr1073744796 $, tok@var280 .@expr1073744851 tokType (@expr1073744852 ) $) $) { $return ; }
948: }
949: for (@expr1073744853 test_op@var277 =@expr1073744854 comparisonOps@var124 .@expr1073744855 begin (@expr1073744856 ) ; test_op@var277 !=@expr1073744857 comparisonOps@var124 .@expr1073744858 end (@expr1073744859 ) ; ++@expr1073744860 test_op@var277 ) {
950: Token tok@var281 ;
951: tok@var281 .@expr1073744861 str (@expr1073744862 *@expr2988 test_op@var277 ) ;
952: $if $(@expr1073744864 $!@expr1073744865 $assertEquals $(@expr1073744866 "cppcheck-2.8/test/testtoken.cpp" $, 952 $, Token ::@expr1073744867 eComparisonOp@expr1073744797 $, tok@var281 .@expr1073744868 tokType (@expr1073744869 ) $) $) { $return ; }
953: }
954: Token tok@var282 ;
955: tok@var282 .@expr3046 str (@expr1073744871 "++" ) ;
956: $if $(@expr1073744872 $!@expr1073744873 $assertEquals $(@expr1073744874 "cppcheck-2.8/test/testtoken.cpp" $, 956 $, Token ::@expr3051 eIncDecOp@expr2974 $, tok@var282 .@expr3052 tokType (@expr3053 ) $) $) { $return ; }
957: tok@var282 .@expr3046 str (@expr1073744879 "--" ) ;
958: $if $(@expr1073744880 $!@expr1073744881 $assertEquals $(@expr1073744882 "cppcheck-2.8/test/testtoken.cpp" $, 958 $, Token ::@expr3051 eIncDecOp@expr2974 $, tok@var282 .@expr3052 tokType (@expr3053 ) $) $) { $return ; }
959: }
960:
961: void literals ( ) const {
962: Token tok@var283 ;
963:
964: tok@var283 .@expr3066 str (@expr1073744891 "\"foo\"" ) ;
965: $if $(@expr1073744892 $!@expr1073744893 $assert_ $(@expr1073744894 "cppcheck-2.8/test/testtoken.cpp" $, 965 $, tok@var283 .@expr3071 tokType (@expr3072 ) ==@expr3073 Token ::@expr3074 eString@expr3062 $) $) { $return ; }
966: tok@var283 .@expr3066 str (@expr1073744900 "\"\"" ) ;
967: $if $(@expr1073744901 $!@expr1073744902 $assert_ $(@expr1073744903 "cppcheck-2.8/test/testtoken.cpp" $, 967 $, tok@var283 .@expr3071 tokType (@expr3072 ) ==@expr3073 Token ::@expr3074 eString@expr3062 $) $) { $return ; }
968: tok@var283 .@expr3066 str (@expr1073744909 "'f'" ) ;
969: $if $(@expr1073744910 $!@expr1073744911 $assert_ $(@expr1073744912 "cppcheck-2.8/test/testtoken.cpp" $, 969 $, tok@var283 .@expr3071 tokType (@expr3072 ) ==@expr1073744915 Token ::@expr1073744916 eChar@expr1073744887 $) $) { $return ; }
970: tok@var283 .@expr3066 str (@expr1073744918 "12345" ) ;
971: $if $(@expr1073744919 $!@expr1073744920 $assert_ $(@expr1073744921 "cppcheck-2.8/test/testtoken.cpp" $, 971 $, tok@var283 .@expr3071 tokType (@expr3072 ) ==@expr3100 Token ::@expr3101 eNumber@expr3064 $) $) { $return ; }
972: tok@var283 .@expr3066 str (@expr1073744927 "-55" ) ;
973: $if $(@expr1073744928 $!@expr1073744929 $assert_ $(@expr1073744930 "cppcheck-2.8/test/testtoken.cpp" $, 973 $, tok@var283 .@expr3071 tokType (@expr3072 ) ==@expr3100 Token ::@expr3101 eNumber@expr3064 $) $) { $return ; }
974: tok@var283 .@expr3066 str (@expr1073744936 "true" ) ;
975: $if $(@expr1073744937 $!@expr1073744938 $assert_ $(@expr1073744939 "cppcheck-2.8/test/testtoken.cpp" $, 975 $, tok@var283 .@expr3071 tokType (@expr3072 ) ==@expr3118 Token ::@expr3119 eBoolean@expr3065 $) $) { $return ; }
976: tok@var283 .@expr3066 str (@expr1073744945 "false" ) ;
977: $if $(@expr1073744946 $!@expr1073744947 $assert_ $(@expr1073744948 "cppcheck-2.8/test/testtoken.cpp" $, 977 $, tok@var283 .@expr3071 tokType (@expr3072 ) ==@expr3118 Token ::@expr3119 eBoolean@expr3065 $) $) { $return ; }
978: }
979:
980: void isStandardType ( ) const {
981: std ::@expr1073744953 vector < std ::@expr3130 string > standard_types@var284 ;
982: standard_types@var284 .@expr3131 emplace_back (@expr1073744956 "bool" ) ;
983: standard_types@var284 .@expr3131 emplace_back (@expr1073744958 "char" ) ;
984: standard_types@var284 .@expr3131 emplace_back (@expr1073744960 "short" ) ;
985: standard_types@var284 .@expr3131 emplace_back (@expr1073744962 "int" ) ;
986: standard_types@var284 .@expr3131 emplace_back (@expr1073744964 "long" ) ;
987: standard_types@var284 .@expr3131 emplace_back (@expr1073744966 "float" ) ;
988: standard_types@var284 .@expr3131 emplace_back (@expr1073744968 "double" ) ;
989: standard_types@var284 .@expr3131 emplace_back (@expr1073744970 "size_t" ) ;
990:
991: std ::@expr3147 vector < std ::@expr3130 string > ::@expr1073744973 const_iterator test_op@var285 ; std ::@expr3147 vector < std ::@expr3130 string > ::@expr1073744976 const_iterator test_ops_end@var286 ; test_ops_end@var286 =@expr1073744977 standard_types@var284 .@expr1073744978 end (@expr1073744979 ) ;
992: for (@expr1073744980 test_op@var285 =@expr1073744981 standard_types@var284 .@expr1073744982 begin (@expr1073744983 ) ; test_op@var285 !=@expr1073744984 test_ops_end@var286 ; ++@expr1073744985 test_op@var285 ) {
993: Token tok@var287 ;
994: tok@var287 .@expr1073744986 str (@expr1073744987 *@expr3164 test_op@var285 ) ;
995: $assertEquals $(@expr1073744989 "cppcheck-2.8/test/testtoken.cpp" $, 995 $, true $, tok@var287 .@expr1073744990 isStandardType (@expr1073744991 ) $, "Failing standard type: " +@expr1073744992 *@expr3164 test_op@var285 $) ;
996: }
997:
998:
999: Token tok@var288 ;
1000: tok@var288 .@expr3170 str (@expr1073744995 "string" ) ;
1001: $if $(@expr1073744996 $!@expr1073744997 $assertEquals $(@expr1073744998 "cppcheck-2.8/test/testtoken.cpp" $, 1001 $, false $, tok@var288 .@expr3175 isStandardType (@expr3176 ) $) $) { $return ; }
1002:
1003:
1004: tok@var288 .@expr3170 str (@expr1073745002 "int" ) ;
1005: $if $(@expr1073745003 $!@expr1073745004 $assertEquals $(@expr1073745005 "cppcheck-2.8/test/testtoken.cpp" $, 1005 $, true $, tok@var288 .@expr3175 isStandardType (@expr3176 ) $) $) { $return ; }
1006:
1007:
1008: tok@var288 .@expr3170 str (@expr1073745009 "abc" ) ;
1009: tok@var288 .@expr3175 isStandardType (@expr1073745011 true ) ;
1010: tok@var288 .@expr1073745012 varId (@expr1073745013 123 ) ;
1011: $if $(@expr1073745014 $!@expr1073745015 $assertEquals $(@expr1073745016 "cppcheck-2.8/test/testtoken.cpp" $, 1011 $, false $, tok@var288 .@expr3175 isStandardType (@expr3176 ) $) $) { $return ; }
1012: }
1013:
1014: void updateProperties ( ) const {
1015: Token tok@var289 ;
1016: tok@var289 .@expr3195 str (@expr1073745020 "foobar" ) ;
1017:
1018: $if $(@expr1073745021 $!@expr1073745022 $assertEquals $(@expr1073745023 "cppcheck-2.8/test/testtoken.cpp" $, 1018 $, true $, tok@var289 .@expr3200 isName (@expr3201 ) $) $) { $return ; }
1019: $if $(@expr1073745026 $!@expr1073745027 $assertEquals $(@expr1073745028 "cppcheck-2.8/test/testtoken.cpp" $, 1019 $, false $, tok@var289 .@expr3205 isNumber (@expr3206 ) $) $) { $return ; }
1020:
1021: tok@var289 .@expr3195 str (@expr1073745032 "123456" ) ;
1022:
1023: $if $(@expr1073745033 $!@expr1073745034 $assertEquals $(@expr1073745035 "cppcheck-2.8/test/testtoken.cpp" $, 1023 $, false $, tok@var289 .@expr3200 isName (@expr3201 ) $) $) { $return ; }
1024: $if $(@expr1073745038 $!@expr1073745039 $assertEquals $(@expr1073745040 "cppcheck-2.8/test/testtoken.cpp" $, 1024 $, true $, tok@var289 .@expr3205 isNumber (@expr3206 ) $) $) { $return ; }
1025: }
1026:
1027: void isNameGuarantees1 ( ) const {
1028: Token tok@var290 ;
1029: tok@var290 .@expr1073745043 str (@expr1073745044 "Name" ) ;
1030: $if $(@expr1073745045 $!@expr1073745046 $assertEquals $(@expr1073745047 "cppcheck-2.8/test/testtoken.cpp" $, 1030 $, true $, tok@var290 .@expr1073745048 isName (@expr1073745049 ) $) $) { $return ; }
1031: }
1032:
1033: void isNameGuarantees2 ( ) const {
1034: Token tok@var291 ;
1035: tok@var291 .@expr1073745050 str (@expr1073745051 "_name" ) ;
1036: $if $(@expr1073745052 $!@expr1073745053 $assertEquals $(@expr1073745054 "cppcheck-2.8/test/testtoken.cpp" $, 1036 $, true $, tok@var291 .@expr1073745055 isName (@expr1073745056 ) $) $) { $return ; }
1037: }
1038:
1039: void isNameGuarantees3 ( ) const {
1040: Token tok@var292 ;
1041: tok@var292 .@expr1073745057 str (@expr1073745058 "_123" ) ;
1042: $if $(@expr1073745059 $!@expr1073745060 $assertEquals $(@expr1073745061 "cppcheck-2.8/test/testtoken.cpp" $, 1042 $, true $, tok@var292 .@expr1073745062 isName (@expr1073745063 ) $) $) { $return ; }
1043: }
1044:
1045: void isNameGuarantees4 ( ) const {
1046: Token tok@var293 ;
1047: tok@var293 .@expr1073745064 str (@expr1073745065 "123456" ) ;
1048: $if $(@expr1073745066 $!@expr1073745067 $assertEquals $(@expr1073745068 "cppcheck-2.8/test/testtoken.cpp" $, 1048 $, false $, tok@var293 .@expr1073745069 isName (@expr1073745070 ) $) $) { $return ; }
1049: $if $(@expr1073745071 $!@expr1073745072 $assertEquals $(@expr1073745073 "cppcheck-2.8/test/testtoken.cpp" $, 1049 $, true $, tok@var293 .@expr1073745074 isNumber (@expr1073745075 ) $) $) { $return ; }
1050: }
1051:
1052: void isNameGuarantees5 ( ) const {
1053: Token tok@var294 ;
1054: tok@var294 .@expr1073745076 str (@expr1073745077 "a123456" ) ;
1055: $if $(@expr1073745078 $!@expr1073745079 $assertEquals $(@expr1073745080 "cppcheck-2.8/test/testtoken.cpp" $, 1055 $, true $, tok@var294 .@expr1073745081 isName (@expr1073745082 ) $) $) { $return ; }
1056: $if $(@expr1073745083 $!@expr1073745084 $assertEquals $(@expr1073745085 "cppcheck-2.8/test/testtoken.cpp" $, 1056 $, false $, tok@var294 .@expr1073745086 isNumber (@expr1073745087 ) $) $) { $return ; }
1057: }
1058:
1059: void isNameGuarantees6 ( ) const {
1060: Token tok@var295 ;
1061: tok@var295 .@expr1073745088 str (@expr1073745089 "$f" ) ;
1062: $if $(@expr1073745090 $!@expr1073745091 $assertEquals $(@expr1073745092 "cppcheck-2.8/test/testtoken.cpp" $, 1062 $, true $, tok@var295 .@expr1073745093 isName (@expr1073745094 ) $) $) { $return ; }
1063: }
1064:
1065: void canFindMatchingBracketsNeedsOpen ( ) const {
1066: givenACodeSampleToTokenize var@var296 (@expr1073745095 "std::deque<std::set<int> > intsets;" ) ;
1067:
1068: const Token * const t@var297 ; t@var297 =@expr1073745096 var@var296 .@expr1073745097 tokens (@expr1073745098 ) .@expr1073745099 findClosingBracket (@expr1073745100 ) ;
1069: $if $(@expr1073745101 $!@expr1073745102 $assert_ $(@expr1073745103 "cppcheck-2.8/test/testtoken.cpp" $, 1069 $, t@var297 ==@expr1073745104 nullptr $) $) { $return ; }
1070: }
1071:
1072: void canFindMatchingBracketsInnerPair ( ) const {
1073: givenACodeSampleToTokenize var@var298 (@expr1073745105 "std::deque<std::set<int> > intsets;" ) ;
1074:
1075: const Token * const t@var299 ; t@var299 =@expr1073745106 var@var298 .@expr3283 tokens (@expr3284 ) .@expr3285 tokAt (@expr1073745110 7 ) .@expr1073745111 findClosingBracket (@expr1073745112 ) ;
1076: $if $(@expr1073745113 $!@expr1073745114 $assertEquals $(@expr1073745115 "cppcheck-2.8/test/testtoken.cpp" $, 1076 $, ">" $, t@var299 .@expr1073745116 str (@expr1073745117 ) $) $) { $return ; }
1077: $if $(@expr1073745118 $!@expr1073745119 $assert_ $(@expr1073745120 "cppcheck-2.8/test/testtoken.cpp" $, 1077 $, var@var298 .@expr3283 tokens (@expr3284 ) .@expr3285 tokAt (@expr1073745124 9 ) ==@expr1073745125 t@var299 $) $) { $return ; }
1078: }
1079:
1080: void canFindMatchingBracketsOuterPair ( ) const {
1081: givenACodeSampleToTokenize var@var300 (@expr1073745126 "std::deque<std::set<int> > intsets;" ) ;
1082:
1083: const Token * const t@var301 ; t@var301 =@expr1073745127 var@var300 .@expr3304 tokens (@expr3305 ) .@expr3306 tokAt (@expr1073745131 3 ) .@expr1073745132 findClosingBracket (@expr1073745133 ) ;
1084: $if $(@expr1073745134 $!@expr1073745135 $assertEquals $(@expr1073745136 "cppcheck-2.8/test/testtoken.cpp" $, 1084 $, ">" $, t@var301 .@expr1073745137 str (@expr1073745138 ) $) $) { $return ; }
1085: $if $(@expr1073745139 $!@expr1073745140 $assert_ $(@expr1073745141 "cppcheck-2.8/test/testtoken.cpp" $, 1085 $, var@var300 .@expr3304 tokens (@expr3305 ) .@expr3306 tokAt (@expr1073745145 10 ) ==@expr1073745146 t@var301 $) $) { $return ; }
1086: }
1087:
1088: void canFindMatchingBracketsWithTooManyClosing ( ) const {
1089: givenACodeSampleToTokenize var@var302 (@expr1073745147 "X< 1>2 > x1;" ) ;
1090:
1091: const Token * const t@var303 ; t@var303 =@expr1073745148 var@var302 .@expr3325 tokens (@expr3326 ) .@expr1073745151 next (@expr1073745152 ) .@expr1073745153 findClosingBracket (@expr1073745154 ) ;
1092: $if $(@expr1073745155 $!@expr1073745156 $assertEquals $(@expr1073745157 "cppcheck-2.8/test/testtoken.cpp" $, 1092 $, ">" $, t@var303 .@expr1073745158 str (@expr1073745159 ) $) $) { $return ; }
1093: $if $(@expr1073745160 $!@expr1073745161 $assert_ $(@expr1073745162 "cppcheck-2.8/test/testtoken.cpp" $, 1093 $, var@var302 .@expr3325 tokens (@expr3326 ) .@expr1073745165 tokAt (@expr1073745166 3 ) ==@expr1073745167 t@var303 $) $) { $return ; }
1094: }
1095:
1096: void canFindMatchingBracketsWithTooManyOpening ( ) const {
1097: givenACodeSampleToTokenize var@var304 (@expr1073745168 "X < (2 < 1) > x1;" ) ;
1098:
1099: const Token * t@var305 ; t@var305 =@expr1073745169 var@var304 .@expr3346 tokens (@expr3347 ) .@expr1073745172 next (@expr1073745173 ) .@expr1073745174 findClosingBracket (@expr1073745175 ) ;
1100: $if $(@expr1073745176 $!@expr1073745177 $assert_ $(@expr1073745178 "cppcheck-2.8/test/testtoken.cpp" $, 1100 $, t@var305 !=@expr1073745179 nullptr &&@expr1073745180 t@var305 .@expr1073745181 str (@expr1073745182 ) ==@expr1073745183 ">" $) $) { $return ; }
1101:
1102: t@var305 =@expr1073745184 var@var304 .@expr3346 tokens (@expr3347 ) .@expr1073745187 tokAt (@expr1073745188 4 ) .@expr1073745189 findClosingBracket (@expr1073745190 ) ;
1103: $if $(@expr1073745191 $!@expr1073745192 $assert_ $(@expr1073745193 "cppcheck-2.8/test/testtoken.cpp" $, 1103 $, t@var305 ==@expr1073745194 nullptr $) $) { $return ; }
1104: }
1105:
1106: void findClosingBracket ( ) const {
1107: givenACodeSampleToTokenize var@var306 (@expr1073745195 "template<typename X, typename...Y> struct S : public Fred<Wilma<Y...>> {}" ) ;
1108:
1109: const Token * const t@var307 ; t@var307 =@expr1073745196 var@var306 .@expr1073745197 tokens (@expr1073745198 ) .@expr1073745199 next (@expr1073745200 ) .@expr1073745201 findClosingBracket (@expr1073745202 ) ;
1110: $if $(@expr1073745203 $!@expr1073745204 $assert_ $(@expr1073745205 "cppcheck-2.8/test/testtoken.cpp" $, 1110 $, $(@expr1073745206 Token ::@expr1073745207 simpleMatch (@expr1073745208 t@var307 , "> struct" ) $) $) $) { $return ; }
1111: }
1112:
1113: void expressionString ( ) const {
1114: givenACodeSampleToTokenize var1@var308 (@expr1073745209 "void f() { *((unsigned long long *)x) = 0; }" ) ;
1115: const Token * const tok1@var309 ; tok1@var309 =@expr1073745210 Token ::@expr3387 findsimplematch (@expr1073745212 var1@var308 .@expr1073745213 tokens (@expr1073745214 ) , "*" ) ;
1116: $if $(@expr1073745215 $!@expr1073745216 $assertEquals $(@expr1073745217 "cppcheck-2.8/test/testtoken.cpp" $, 1116 $, "*((unsigned long long*)x)" $, tok1@var309 .@expr1073745218 expressionString (@expr1073745219 ) $) $) { $return ; }
1117:
1118: givenACodeSampleToTokenize var2@var310 (@expr1073745220 "typedef unsigned long long u64; void f() { *((u64 *)x) = 0; }" ) ;
1119: const Token * const tok2@var311 ; tok2@var311 =@expr1073745221 Token ::@expr3387 findsimplematch (@expr1073745223 var2@var310 .@expr1073745224 tokens (@expr1073745225 ) , "*" ) ;
1120: $if $(@expr1073745226 $!@expr1073745227 $assertEquals $(@expr1073745228 "cppcheck-2.8/test/testtoken.cpp" $, 1120 $, "*((unsigned long long*)x)" $, tok2@var311 .@expr1073745229 expressionString (@expr1073745230 ) $) $) { $return ; }
1121:
1122: givenACodeSampleToTokenize data3@var312 (@expr1073745231 "void f() { return (t){1,2}; }" ) ;
1123: $if $(@expr1073745232 $!@expr1073745233 $assertEquals $(@expr1073745234 "cppcheck-2.8/test/testtoken.cpp" $, 1123 $, "return(t){1,2}" $, data3@var312 .@expr1073745235 tokens (@expr1073745236 ) .@expr1073745237 tokAt (@expr1073745238 5 ) .@expr1073745239 expressionString (@expr1073745240 ) $) $) { $return ; }
1124:
1125: givenACodeSampleToTokenize data4@var313 (@expr1073745241 "void f() { return L\"a\"; }" ) ;
1126: $if $(@expr1073745242 $!@expr1073745243 $assertEquals $(@expr1073745244 "cppcheck-2.8/test/testtoken.cpp" $, 1126 $, "returnL\"a\"" $, data4@var313 .@expr1073745245 tokens (@expr1073745246 ) .@expr1073745247 tokAt (@expr1073745248 5 ) .@expr1073745249 expressionString (@expr1073745250 ) $) $) { $return ; }
1127:
1128: givenACodeSampleToTokenize data5@var314 (@expr1073745251 "void f() { return U\"a\"; }" ) ;
1129: $if $(@expr1073745252 $!@expr1073745253 $assertEquals $(@expr1073745254 "cppcheck-2.8/test/testtoken.cpp" $, 1129 $, "returnU\"a\"" $, data5@var314 .@expr1073745255 tokens (@expr1073745256 ) .@expr1073745257 tokAt (@expr1073745258 5 ) .@expr1073745259 expressionString (@expr1073745260 ) $) $) { $return ; }
1130:
1131: givenACodeSampleToTokenize data6@var315 (@expr1073745261 "x = \"\\0\\x1\\x2\\x3\\x4\\x5\\x6\\x7\";" ) ;
1132: $if $(@expr1073745262 $!@expr1073745263 $assertEquals $(@expr1073745264 "cppcheck-2.8/test/testtoken.cpp" $, 1132 $, "x=\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"" $, data6@var315 .@expr1073745265 tokens (@expr1073745266 ) .@expr1073745267 next (@expr1073745268 ) .@expr1073745269 expressionString (@expr1073745270 ) $) $) { $return ; }
1133: }
1134:
1135: void hasKnownIntValue ( ) const {
1136:
1137: ValueFlow ::@expr1073745272 Value v1@var316 (@expr1073745273 0 ) ;
1138:
1139:
1140: ValueFlow ::@expr1073745274 Value v2@var317 (@expr1073745275 2 ) ;
1141: v2@var317 .@expr1073745276 valueType@var318 =@expr1073745277 ValueFlow ::@expr1073745278 Value ::@expr1073745279 ValueType ::@expr1073745280 BUFFER_SIZE@expr1073745271 ;
1142: v2@var317 .@expr1073745281 setKnown (@expr1073745282 ) ;
1143:
1144: Token token@var319 ;
1145: $if $(@expr1073745283 $!@expr1073745284 $assertEquals $(@expr1073745285 "cppcheck-2.8/test/testtoken.cpp" $, 1145 $, true $, token@var319 .@expr3462 addValue (@expr1073745287 v1@var316 ) $) $) { $return ; }
1146: $if $(@expr1073745288 $!@expr1073745289 $assertEquals $(@expr1073745290 "cppcheck-2.8/test/testtoken.cpp" $, 1146 $, true $, token@var319 .@expr3462 addValue (@expr1073745292 v2@var317 ) $) $) { $return ; }
1147: $if $(@expr1073745293 $!@expr1073745294 $assertEquals $(@expr1073745295 "cppcheck-2.8/test/testtoken.cpp" $, 1147 $, false $, token@var319 .@expr1073745296 hasKnownIntValue (@expr1073745297 ) $) $) { $return ; }
1148: }
1149: } ;
1150:
1151: $namespace ${ TestToken instance_TestToken@var320 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@172}
  v {!<=-1,!>=2,0@172}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 43
  createOnly always {!<=-1,!>=2}
  = always 0
  false always 0
  cpp always {!<=-1,!>=2}
  = always 1
  true always 1
Line 44
  & {lifetime[Address]=(settings),!0}
  nullptr always 0
Line 46
  createOnly always {!<=-1,!>=2}
Line 47
  cpp always {!<=-1,!>=2}
  ? possible {"test.cpp","test.c"}
  "test.cpp" always "test.cpp"
  : always "test.c"
  "test.c" always "test.c"
Line 49
  cpp always {!<=-1,!>=2}
  ? possible {"test.cpp","test.c"}
  "test.cpp" always "test.cpp"
  : always "test.c"
  "test.c" always "test.c"
Line 60
  ( possible lifetime[SubObject]=(Settings&settings)
Line 66
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 82
  ( {lifetime[Object]=(mName),!0}
Line 37
  "TestToken" always "TestToken"
Line 48
  "+" always "+"
  "-" always "-"
  "*" always "*"
  "/" always "/"
  "%" always "%"
  "<<" always "<<"
  ">>" always ">>"
Line 49
  "&&" always "&&"
  "||" always "||"
  "!" always "!"
Line 50
  "==" always "=="
  "!=" always "!="
  "<" always "<"
  "<=" always "<="
  ">" always ">"
  ">=" always ">="
Line 51
  "&" always "&"
  "|" always "|"
  "^" always "^"
  "~" always "~"
Line 52
  "," always ","
  "[" always "["
  "]" always "]"
  "(" always "("
  ")" always ")"
  "?" always "?"
  ":" always ":"
Line 53
  "=" always "="
  "+=" always "+="
  "-=" always "-="
  "*=" always "*="
  "/=" always "/="
  "%=" always "%="
  "&=" always "&="
  "^=" always "^="
  "|=" always "|="
  "<<=" always "<<="
  ">>=" always ">>="
Line 55
  ( always {!<=-1,!>=2}
  "nextprevious" always "nextprevious"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "multiCompare" always "multiCompare"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "multiCompare2" always "multiCompare2"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "multiCompare3" always "multiCompare3"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "multiCompare4" always "multiCompare4"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "multiCompare5" always "multiCompare5"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "charTypes" always "charTypes"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "stringTypes" always "stringTypes"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "getStrLength" always "getStrLength"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "getStrSize" always "getStrSize"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "getCharAt" always "getCharAt"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "strValue" always "strValue"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "concatStr" always "concatStr"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "deleteLast" always "deleteLast"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "deleteFirst" always "deleteFirst"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "nextArgument" always "nextArgument"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "eraseTokens" always "eraseTokens"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "matchAny" always "matchAny"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "matchSingleChar" always "matchSingleChar"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "matchNothingOrAnyNotElse" always "matchNothingOrAnyNotElse"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "matchType" always "matchType"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "matchChar" always "matchChar"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "matchCompOp" always "matchCompOp"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "matchStr" always "matchStr"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "matchVarid" always "matchVarid"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "matchNumeric" always "matchNumeric"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "matchBoolean" always "matchBoolean"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "matchOr" always "matchOr"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "matchOp" always "matchOp"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "matchConstOp" always "matchConstOp"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "isArithmeticalOp" always "isArithmeticalOp"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "isOp" always "isOp"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "isConstOp" always "isConstOp"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "isExtendedOp" always "isExtendedOp"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "isAssignmentOp" always "isAssignmentOp"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "isStandardType" always "isStandardType"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "literals" always "literals"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "operators" always "operators"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "updateProperties" always "updateProperties"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "isNameGuarantees1" always "isNameGuarantees1"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "isNameGuarantees2" always "isNameGuarantees2"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "isNameGuarantees3" always "isNameGuarantees3"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "isNameGuarantees4" always "isNameGuarantees4"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "isNameGuarantees5" always "isNameGuarantees5"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "isNameGuarantees6" always "isNameGuarantees6"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "canFindMatchingBracketsNeedsOpen" always "canFindMatchingBracketsNeedsOpen"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "canFindMatchingBracketsInnerPair" always "canFindMatchingBracketsInnerPair"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "canFindMatchingBracketsOuterPair" always "canFindMatchingBracketsOuterPair"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "canFindMatchingBracketsWithTooManyClosing" always "canFindMatchingBracketsWithTooManyClosing"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "canFindMatchingBracketsWithTooManyOpening" always "canFindMatchingBracketsWithTooManyOpening"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "findClosingBracket" always "findClosingBracket"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "expressionString" always "expressionString"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "hasKnownIntValue" always "hasKnownIntValue"
  false always 0
  false always 0
Line 119
  token always size=0
  "1" always "1"
Line 120
  token always size=0
  "2" always "2"
Line 121
  token always size=0
  "3" always "3"
Line 122
  token always size=0
  2 always 2
Line 123
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  123 always 123
  token always size=0
  "1" always "1"
Line 124
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  124 always 124
  "2" always "2"
Line 126
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  126 always 126
  2 always 2
  "3" always "3"
Line 127
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  127 always 127
  true always 1
  == always {!<=-1,!>=2}
  nullptr always 0
  "Null was expected" always "Null was expected"
Line 129
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  129 always 129
  "3" always "3"
Line 130
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  130 always 130
  "2" always "2"
Line 132
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  132 always 132
  -2 always -2
  "1" always "1"
Line 133
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  133 always 133
  true always 1
  == always {!<=-1,!>=2}
  nullptr always 0
  "Null was expected" always "Null was expected"
Line 139
  ( always {!<=-1,!>=2}
  , always 0
  varid always !<=-1
  = always 0
  0 always 0
Line 141
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 142
  ";" always ";"
  ";" always ";"
Line 144
  ( always {!<=-1,!>=2}
  file possible {"cppcheck-2.8/test/testtoken.cpp"@48,"cppcheck-2.8/test/testtoken.cpp"@51,"cppcheck-2.8/test/testtoken.cpp"@57,"cppcheck-2.8/test/testtoken.cpp"@59}
  line possible {791@48,801@51,769@57,778@59}
  "test.cpp" always "test.cpp"
Line 146
  return always {!<=-1,!>=2}
  pattern possible {"%cop%"@48,"%cop%"@51,"%op%"@57,"%op%"@59}
  ( {lifetime[Object]=(pattern),!0}
  varid {!<=-1,0}
Line 152
  "one" always "one"
Line 153
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  153 always 153
  1 always 1
  & {lifetime[Address]=(one),!0}
  "one|two" always "one|two"
  0 always 0
Line 156
  "two" always "two"
Line 157
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  157 always 157
  1 always 1
  & {lifetime[Address]=(two),!0}
  "one|two" always "one|two"
  0 always 0
Line 158
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  158 always 158
  1 always 1
  & {lifetime[Address]=(two),!0}
  "verybig|two|" always "verybig|two|"
  0 always 0
Line 162
  "notfound" always "notfound"
Line 163
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  163 always 163
  0 always 0
  & {lifetime[Address]=(notfound),!0}
  "one|two|" always "one|two|"
  0 always 0
Line 166
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  166 always 166
  ( always 4294967295
  -1 always -1
  ( always !<=-1
  & {lifetime[Address]=(notfound),!0}
  "one|two" always "one|two"
  0 always 0
Line 169
  "s" always "s"
Line 170
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  170 always 170
  ( always 4294967295
  -1 always -1
  ( always !<=-1
  & {lifetime[Address]=(s),!0}
  "verybig|two" always "verybig|two"
  0 always 0
Line 173
  "ne" always "ne"
Line 174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  174 always 174
  ( always 4294967295
  -1 always -1
  ( always !<=-1
  & {lifetime[Address]=(ne),!0}
  "one|two" always "one|two"
  0 always 0
Line 177
  "a" always "a"
Line 178
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  178 always 178
  ( always 4294967295
  -1 always -1
  ( always !<=-1
  & {lifetime[Address]=(a),!0}
  "abc|def" always "abc|def"
  0 always 0
Line 181
  "abcd" always "abcd"
Line 182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  182 always 182
  ( always 4294967295
  -1 always -1
  ( always !<=-1
  & {lifetime[Address]=(abcd),!0}
  "abc|def" always "abc|def"
  0 always 0
Line 185
  "default" always "default"
Line 186
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  186 always 186
  ( always 4294967295
  -1 always -1
  ( always !<=-1
  & {lifetime[Address]=(def),!0}
  "abc|def" always "abc|def"
  0 always 0
Line 190
  "+" always "+"
Line 191
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  191 always 191
  1 always 1
  & {lifetime[Address]=(plus),!0}
  "one|%op%" always "one|%op%"
  0 always 0
Line 192
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  192 always 192
  1 always 1
  & {lifetime[Address]=(plus),!0}
  "%op%|two" always "%op%|two"
  0 always 0
Line 194
  "x" always "x"
Line 195
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  195 always 195
  -1 always -1
  & {lifetime[Address]=(x),!0}
  "one|%op%" always "one|%op%"
  0 always 0
Line 196
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  196 always 196
  -1 always -1
  & {lifetime[Address]=(x),!0}
  "%op%|two" always "%op%|two"
  0 always 0
Line 201
  "a == 1" always "a == 1"
  true always 1
Line 202
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  202 always 202
  true always 1
  "a =|%op%" always "a =|%op%"
Line 210
  "return a |= b ;" always "return a |= b ;"
  true always 1
Line 211
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  211 always 211
  false always 0
  "return %name% xyz|%or% %name% ;" always "return %name% xyz|%or% %name% ;"
Line 212
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  212 always 212
  false always 0
  "return %name% %or%|xyz %name% ;" always "return %name% %or%|xyz %name% ;"
Line 214
  "return a | b ;" always "return a | b ;"
  true always 1
Line 215
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  215 always 215
  true always 1
  "return %name% xyz|%or% %name% ;" always "return %name% xyz|%or% %name% ;"
Line 216
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  216 always 216
  true always 1
  "return %name% %or%|xyz %name% ;" always "return %name% %or%|xyz %name% ;"
Line 218
  "return a || b ;" always "return a || b ;"
  true always 1
Line 219
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  219 always 219
  false always 0
  "return %name% xyz|%or% %name% ;" always "return %name% xyz|%or% %name% ;"
Line 220
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  220 always 220
  false always 0
  "return %name% %or%|xyz %name% ;" always "return %name% %or%|xyz %name% ;"
Line 222
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  222 always 222
  true always 1
  "return %name% xyz|%oror% %name% ;" always "return %name% xyz|%oror% %name% ;"
Line 223
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  223 always 223
  true always 1
  "return %name% %oror%|xyz %name% ;" always "return %name% %oror%|xyz %name% ;"
Line 225
  "a % b ;" always "a % b ;"
  true always 1
Line 226
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  226 always 226
  true always 1
  "%name% >>|<<|&|%or%|^|% %name% ;" always "%name% >>|<<|&|%or%|^|% %name% ;"
Line 227
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  227 always 227
  true always 1
  "%name% %|>>|<<|&|%or%|^ %name% ;" always "%name% %|>>|<<|&|%or%|^ %name% ;"
Line 228
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  228 always 228
  true always 1
  "%name% >>|<<|&|%or%|%|^ %name% ;" always "%name% >>|<<|&|%or%|%|^ %name% ;"
Line 231
  "100" always "100"
  true always 1
Line 232
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  232 always 232
  true always 1
  "%num%|%name%" always "%num%|%name%"
Line 233
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  233 always 233
  true always 1
  "%name%|%num%" always "%name%|%num%"
Line 234
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  234 always 234
  true always 1
  "%name%|%num%|%bool%" always "%name%|%num%|%bool%"
Line 235
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  235 always 235
  true always 1
  "%name%|%bool%|%num%" always "%name%|%bool%|%num%"
Line 236
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  236 always 236
  true always 1
  "%name%|%bool%|%str%|%num%" always "%name%|%bool%|%str%|%num%"
Line 237
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  237 always 237
  false always 0
  "%bool%|%name%" always "%bool%|%name%"
Line 238
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  238 always 238
  false always 0
  "%type%|%bool%|%char%" always "%type%|%bool%|%char%"
Line 239
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  239 always 239
  true always 1
  "%type%|%bool%|100" always "%type%|%bool%|100"
Line 241
  "( 100 )" always "( 100 )"
  true always 1
Line 242
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  242 always 242
  true always 1
  "(| %num%|%name% )|" always "(| %num%|%name% )|"
Line 243
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  243 always 243
  true always 1
  "(| %name%|%num% )|" always "(| %name%|%num% )|"
Line 244
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  244 always 244
  true always 1
  "(| %name%|%num%|%bool% )|" always "(| %name%|%num%|%bool% )|"
Line 245
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  245 always 245
  true always 1
  "(| %name%|%bool%|%num% )|" always "(| %name%|%bool%|%num% )|"
Line 246
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  246 always 246
  true always 1
  "(| %name%|%bool%|%str%|%num% )|" always "(| %name%|%bool%|%str%|%num% )|"
Line 247
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  247 always 247
  false always 0
  "(| %bool%|%name% )|" always "(| %bool%|%name% )|"
Line 249
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  249 always 249
  true always 1
  "(| 100 %num%|%name%| )|" always "(| 100 %num%|%name%| )|"
Line 250
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  250 always 250
  true always 1
  "(| 100 %name%|%num%| )|" always "(| 100 %name%|%num%| )|"
Line 251
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  251 always 251
  true always 1
  "(| 100 %name%|%num%|%bool%| )|" always "(| 100 %name%|%num%|%bool%| )|"
Line 252
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  252 always 252
  true always 1
  "(| 100 %name%|%bool%|%num%| )|" always "(| 100 %name%|%bool%|%num%| )|"
Line 253
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  253 always 253
  true always 1
  "(| 100 %name%|%bool%|%str%|%num%| )|" always "(| 100 %name%|%bool%|%str%|%num%| )|"
Line 254
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  254 always 254
  true always 1
  "(| 100 %bool%|%name%| )|" always "(| 100 %bool%|%name%| )|"
Line 258
  "std :: queue < int > foo ;" always "std :: queue < int > foo ;"
Line 260
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  260 always 260
  3 always 3
Line 261
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  261 always 261
  5 always 5
Line 263
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  263 always 263
  false always 0
  "std :: queue %op%" always "std :: queue %op%"
Line 264
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  264 always 264
  false always 0
  "std :: queue x|%op%" always "std :: queue x|%op%"
Line 265
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  265 always 265
  false always 0
  "std :: queue %op%|x" always "std :: queue %op%|x"
Line 270
  "||" always "||"
Line 271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  271 always 271
  true always 1
  & {lifetime[Address]=(tok),!0}
  "+|%or%|%oror%" always "+|%or%|%oror%"
  0 always 0
  >= always {!<=-1,!>=2}
  0 always 0
Line 277
  "'a'" always "'a'"
Line 278
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  278 always 278
  true always 1
Line 279
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  279 always 279
  false always 0
Line 280
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  280 always 280
  false always 0
Line 281
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  281 always 281
  false always 0
Line 282
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  282 always 282
  false always 0
Line 283
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  283 always 283
  false always 0
Line 285
  "u8'a'" always "u8'a'"
Line 286
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  286 always 286
  false always 0
Line 287
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  287 always 287
  true always 1
Line 288
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  288 always 288
  false always 0
Line 289
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  289 always 289
  false always 0
Line 290
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  290 always 290
  false always 0
Line 291
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  291 always 291
  false always 0
Line 293
  "u'a'" always "u'a'"
Line 294
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  294 always 294
  false always 0
Line 295
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  295 always 295
  false always 0
Line 296
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  296 always 296
  true always 1
Line 297
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  297 always 297
  false always 0
Line 298
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  298 always 298
  false always 0
Line 299
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  299 always 299
  false always 0
Line 301
  "U'a'" always "U'a'"
Line 302
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  302 always 302
  false always 0
Line 303
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  303 always 303
  false always 0
Line 304
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  304 always 304
  false always 0
Line 305
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  305 always 305
  true always 1
Line 306
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  306 always 306
  false always 0
Line 307
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  307 always 307
  false always 0
Line 309
  "L'a'" always "L'a'"
Line 310
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  310 always 310
  false always 0
Line 311
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  311 always 311
  false always 0
Line 312
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  312 always 312
  false always 0
Line 313
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  313 always 313
  false always 0
Line 314
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  314 always 314
  true always 1
Line 315
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  315 always 315
  false always 0
Line 317
  "'aaa'" always "'aaa'"
Line 318
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  318 always 318
  false always 0
Line 319
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  319 always 319
  false always 0
Line 320
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  320 always 320
  false always 0
Line 321
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  321 always 321
  false always 0
Line 322
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  322 always 322
  false always 0
Line 323
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  323 always 323
  true always 1
Line 329
  "\"a\"" always "\"a\""
Line 330
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  330 always 330
  true always 1
Line 331
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  331 always 331
  false always 0
Line 332
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  332 always 332
  false always 0
Line 333
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  333 always 333
  false always 0
Line 334
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  334 always 334
  false always 0
Line 335
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  335 always 335
  false always 0
Line 337
  "u8\"a\"" always "u8\"a\""
Line 338
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  338 always 338
  false always 0
Line 339
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  339 always 339
  true always 1
Line 340
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  340 always 340
  false always 0
Line 341
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  341 always 341
  false always 0
Line 342
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  342 always 342
  false always 0
Line 343
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  343 always 343
  false always 0
Line 345
  "u\"a\"" always "u\"a\""
Line 346
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  346 always 346
  false always 0
Line 347
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  347 always 347
  false always 0
Line 348
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  348 always 348
  true always 1
Line 349
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  349 always 349
  false always 0
Line 350
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  350 always 350
  false always 0
Line 351
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  351 always 351
  false always 0
Line 353
  "U\"a\"" always "U\"a\""
Line 354
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  354 always 354
  false always 0
Line 355
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  355 always 355
  false always 0
Line 356
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  356 always 356
  false always 0
Line 357
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  357 always 357
  true always 1
Line 358
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  358 always 358
  false always 0
Line 359
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  359 always 359
  false always 0
Line 361
  "L\"a\"" always "L\"a\""
Line 362
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  362 always 362
  false always 0
Line 363
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  363 always 363
  false always 0
Line 364
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  364 always 364
  false always 0
Line 365
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  365 always 365
  false always 0
Line 366
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  366 always 366
  true always 1
Line 367
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  367 always 367
  false always 0
Line 373
  "\"\"" always "\"\""
Line 374
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  374 always 374
  0 always 0
  & {lifetime[Address]=(tok),!0}
Line 376
  "\"test\"" always "\"test\""
Line 377
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  377 always 377
  4 always 4
  & {lifetime[Address]=(tok),!0}
Line 379
  "\"test \\\\test\"" always "\"test \\\\test\""
Line 380
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  380 always 380
  10 always 10
  & {lifetime[Address]=(tok),!0}
Line 382
  "\"a\\0\"" always "\"a\\0\""
Line 383
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  383 always 383
  1 always 1
  & {lifetime[Address]=(tok),!0}
Line 385
  "L\"\"" always "L\"\""
Line 386
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  386 always 386
  0 always 0
  & {lifetime[Address]=(tok),!0}
Line 388
  "u8\"test\"" always "u8\"test\""
Line 389
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  389 always 389
  4 always 4
  & {lifetime[Address]=(tok),!0}
Line 391
  "U\"test \\\\test\"" always "U\"test \\\\test\""
Line 392
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  392 always 392
  10 always 10
  & {lifetime[Address]=(tok),!0}
Line 394
  "u\"a\\0\"" always "u\"a\\0\""
Line 395
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  395 always 395
  1 always 1
  & {lifetime[Address]=(tok),!0}
Line 402
  "\"\"" always "\"\""
Line 403
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  403 always 403
  ( always 1
  "" always ""
  & {lifetime[Address]=(tok),!0}
  & {lifetime[Address]=(settings),!0}
Line 405
  "\"abc\"" always "\"abc\""
Line 406
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  406 always 406
  ( always 4
  "abc" always "abc"
  & {lifetime[Address]=(tok),!0}
  & {lifetime[Address]=(settings),!0}
Line 408
  "\"\\0abc\"" always "\"\\0abc\""
Line 409
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  409 always 409
  ( always 5
  " abc" always " abc"
  & {lifetime[Address]=(tok),!0}
  & {lifetime[Address]=(settings),!0}
Line 411
  "\"\\\\\"" always "\"\\\\\""
Line 412
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  412 always 412
  ( always 2
  "\\" always "\\"
  & {lifetime[Address]=(tok),!0}
  & {lifetime[Address]=(settings),!0}
Line 418
  "\"asdf\"" always "\"asdf\""
Line 419
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  419 always 419
  "a" always "a"
  & {lifetime[Address]=(tok),!0}
  0 always 0
Line 420
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  420 always 420
  "s" always "s"
  & {lifetime[Address]=(tok),!0}
  1 always 1
Line 422
  "\"a\\ts\"" always "\"a\\ts\""
Line 423
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  423 always 423
  "\\t" always "\\t"
  & {lifetime[Address]=(tok),!0}
  1 always 1
Line 425
  "\"\"" always "\"\""
Line 426
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  426 always 426
  "\\0" always "\\0"
  & {lifetime[Address]=(tok),!0}
  0 always 0
Line 428
  "L\"a\\ts\"" always "L\"a\\ts\""
Line 429
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  429 always 429
  "a" always "a"
  & {lifetime[Address]=(tok),!0}
  0 always 0
Line 430
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  430 always 430
  "\\t" always "\\t"
  & {lifetime[Address]=(tok),!0}
  1 always 1
Line 432
  "u\"a\\ts\"" always "u\"a\\ts\""
Line 433
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  433 always 433
  "\\t" always "\\t"
  & {lifetime[Address]=(tok),!0}
  1 always 1
Line 434
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  434 always 434
  "s" always "s"
  & {lifetime[Address]=(tok),!0}
  2 always 2
Line 440
  "\"\"" always "\"\""
Line 441
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  441 always 441
  "" always ""
Line 443
  "\"0\"" always "\"0\""
Line 444
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  444 always 444
  "0" always "0"
Line 446
  "\"a\\n\"" always "\"a\\n\""
Line 447
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  447 always 447
  "a\n" always "a\n"
Line 449
  "\"a\\r\"" always "\"a\\r\""
Line 450
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  450 always 450
  "a\r" always "a\r"
Line 452
  "\"a\\t\"" always "\"a\\t\""
Line 453
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  453 always 453
  "a\t" always "a\t"
Line 455
  "\"\\\\\"" always "\"\\\\\""
Line 456
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  456 always 456
  "\\" always "\\"
Line 458
  "\"a\\0\"" always "\"a\\0\""
Line 459
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  459 always 459
  "a" always "a"
Line 461
  "L\"a\\t\"" always "L\"a\\t\""
Line 462
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  462 always 462
  "a\t" always "a\t"
Line 464
  "U\"a\\0\"" always "U\"a\\0\""
Line 465
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  465 always 465
  "a" always "a"
Line 471
  "\"\"" always "\"\""
Line 472
  "\"\"" always "\"\""
Line 473
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  473 always 473
  "" always ""
Line 474
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  474 always 474
Line 476
  "\"ab\"" always "\"ab\""
Line 477
  "\"cd\"" always "\"cd\""
Line 478
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  478 always 478
  "abcd" always "abcd"
Line 479
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  479 always 479
Line 481
  "L\"ab\"" always "L\"ab\""
Line 482
  "L\"cd\"" always "L\"cd\""
Line 483
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  483 always 483
  "abcd" always "abcd"
Line 484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  484 always 484
Line 486
  "L\"ab\"" always "L\"ab\""
Line 487
  "\"cd\"" always "\"cd\""
Line 488
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  488 always 488
  "abcd" always "abcd"
Line 489
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  489 always 489
Line 491
  "\"ab\"" always "\"ab\""
Line 492
  "L\"cd\"" always "L\"cd\""
Line 493
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  493 always 493
  "abcd" always "abcd"
Line 494
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  494 always 494
Line 496
  "\"ab\"" always "\"ab\""
Line 497
  "L\"\"" always "L\"\""
Line 498
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  498 always 498
  "ab" always "ab"
Line 499
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  499 always 499
Line 501
  "\"ab\"" always "\"ab\""
Line 502
  "u8\"cd\"" always "u8\"cd\""
Line 503
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  503 always 503
  "abcd" always "abcd"
Line 504
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  504 always 504
Line 508
  nullptr always 0
Line 509
  = {lifetime[Address]=(back),!0}
  & {lifetime[Address]=(back),!0}
Line 510
  & {lifetime[Address]=(listEnds),!0}
Line 511
  "aba" always "aba"
Line 512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  512 always 512
  true always 1
  tokensBack {lifetime[Address]=(back),!0}
  == always {!<=-1,!>=2}
Line 514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  514 always 514
  true always 1
  tokensBack {lifetime[Address]=(back),!0}
  == always {!<=-1,!>=2}
  & {lifetime[Address]=(tok),!0}
Line 518
  nullptr always 0
Line 519
  = {lifetime[Address]=(front),!0}
  & {lifetime[Address]=(front),!0}
Line 520
  & {lifetime[Address]=(listEnds),!0}
Line 522
  "aba" always "aba"
Line 524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  524 always 524
  true always 1
  tokensFront {lifetime[Address]=(front),!0}
  == always {!<=-1,!>=2}
Line 526
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  526 always 526
  true always 1
  tokensFront {lifetime[Address]=(front),!0}
  == always {!<=-1,!>=2}
  & {lifetime[Address]=(tok),!0}
Line 530
  "foo(1, 2, 3, 4);" always "foo(1, 2, 3, 4);"
Line 531
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  531 always 531
  true always 1
  2 always 2
  "2 , 3" always "2 , 3"
Line 532
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  532 always 532
  true always 1
  4 always 4
  "3 , 4" always "3 , 4"
Line 534
  "foo();" always "foo();"
Line 535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  535 always 535
  true always 1
  2 always 2
  == always {!<=-1,!>=2}
  nullptr always 0
Line 537
  "foo(bar(a, b), 2, 3);" always "foo(bar(a, b), 2, 3);"
Line 538
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  538 always 538
  true always 1
  2 always 2
  "2 , 3" always "2 , 3"
Line 540
  "foo(x.i[1], \"\", 3);" always "foo(x.i[1], \"\", 3);"
Line 541
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  541 always 541
  true always 1
  2 always 2
  "\"\" , 3" always "\"\" , 3"
Line 545
  "begin ; { this code will be removed } end" always "begin ; { this code will be removed } end"
  true always 1
Line 546
  9 always 9
Line 547
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  547 always 547
  "begin ; end" always "begin ; end"
  nullptr always 0
  false always 0
Line 552
  "abc|def" always "abc|def"
  true always 1
Line 553
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  553 always 553
  true always 1
  "%name% %or% %name%" always "%name% %or% %name%"
Line 555
  "abc||def" always "abc||def"
  true always 1
Line 556
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  556 always 556
  true always 1
  "%name% %oror% %name%" always "%name% %oror% %name%"
Line 560
  "a" always "a"
  true always 1
Line 561
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  561 always 561
  true always 1
  "[a|bc]" always "[a|bc]"
Line 562
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  562 always 562
  false always 0
  "[d|ef]" always "[d|ef]"
Line 565
  "[ab" always "[ab"
Line 566
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  566 always 566
  false always 0
  & {lifetime[Address]=(multiChar),!0}
  "[ab|def]" always "[ab|def]"
Line 570
  "" always ""
  true always 1
Line 571
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  571 always 571
  true always 1
  "!!else" always "!!else"
Line 572
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  572 always 572
  false always 0
  "!!else something" always "!!else something"
Line 574
  "if ;" always "if ;"
  true always 1
Line 575
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  575 always 575
  true always 1
  "if ; !!else" always "if ; !!else"
Line 577
  "if ; something" always "if ; something"
  true always 1
Line 578
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  578 always 578
  true always 1
  "if ; !!else" always "if ; !!else"
Line 580
  "else" always "else"
  true always 1
Line 581
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  581 always 581
  false always 0
  "!!else" always "!!else"
Line 583
  "if ; else" always "if ; else"
  true always 1
Line 584
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  584 always 584
  false always 0
  "if ; !!else" always "if ; !!else"
Line 588
  "abc" always "abc"
  true always 1
Line 589
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  589 always 589
  true always 1
  "%type%" always "%type%"
Line 591
  "int a = 3 ;" always "int a = 3 ;"
Line 592
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  592 always 592
  true always 1
  "%type%" always "%type%"
Line 593
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  593 always 593
  true always 1
  "%type% %name%" always "%type% %name%"
Line 594
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  594 always 594
  false always 0
  "%type% %type%" always "%type% %type%"
Line 596
  "delete" always "delete"
  true always 1
  true always 1
Line 597
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  597 always 597
  false always 0
  "%type%" always "%type%"
Line 599
  "delete" always "delete"
  true always 1
  false always 0
Line 600
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  600 always 600
  true always 1
  "%type%" always "%type%"
Line 602
  "void delete" always "void delete"
  true always 1
Line 603
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  603 always 603
  false always 0
  "!!foo %type%" always "!!foo %type%"
Line 607
  "'a'" always "'a'"
  true always 1
Line 608
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  608 always 608
  true always 1
  "%char%" always "%char%"
Line 610
  "'1'" always "'1'"
  true always 1
Line 611
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  611 always 611
  true always 1
  "%char%" always "%char%"
Line 613
  "\"10\"" always "\"10\""
  true always 1
Line 614
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  614 always 614
  false always 0
  "%char%" always "%char%"
Line 618
  "<=" always "<="
  true always 1
Line 619
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  619 always 619
  true always 1
  "%comp%" always "%comp%"
Line 621
  ">" always ">"
  true always 1
Line 622
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  622 always 622
  true always 1
  "%comp%" always "%comp%"
Line 624
  "=" always "="
  true always 1
Line 625
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  625 always 625
  false always 0
  "%comp%" always "%comp%"
Line 629
  "abc" always "abc"
  true always 1
Line 630
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  630 always 630
  false always 0
  "%str%" always "%str%"
Line 632
  "'a'" always "'a'"
  true always 1
Line 633
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  633 always 633
  false always 0
  "%str%" always "%str%"
Line 635
  "\"abc\"" always "\"abc\""
  true always 1
Line 636
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  636 always 636
  true always 1
  "%str%" always "%str%"
Line 639
  "\"\"" always "\"\""
  true always 1
Line 640
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  640 always 640
  true always 1
  "%str%" always "%str%"
Line 644
  "int a ; int b ;" always "int a ; int b ;"
Line 647
  "%type% %varid% ; %type% %name%" always "%type% %varid% ; %type% %name%"
  0 always 0
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  647 always 647
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  647 always 647
  false always 0
Line 649
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  649 always 649
  true always 1
  "%type% %varid% ; %type% %name%" always "%type% %varid% ; %type% %name%"
  1 always 1
Line 650
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  650 always 650
  true always 1
  "%type% %name% ; %type% %varid%" always "%type% %name% ; %type% %varid%"
  2 always 2
Line 653
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  653 always 653
  false always 0
  "%type% %varid% ; %type% %varid%" always "%type% %varid% ; %type% %varid%"
  2 always 2
Line 656
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  656 always 656
  true always 1
  "%type% %var% ;" always "%type% %var% ;"
Line 657
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  657 always 657
  false always 0
  "%var% %var% ;" always "%var% %var% ;"
Line 661
  "abc" always "abc"
  true always 1
Line 662
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  662 always 662
  false always 0
  "%num%" always "%num%"
Line 664
  "101010b" always "101010b"
  true always 1
Line 665
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  665 always 665
  true always 1
  "%num%" always "%num%"
Line 667
  "0123" always "0123"
  true always 1
Line 668
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  668 always 668
  true always 1
  "%num%" always "%num%"
Line 670
  "4567" always "4567"
  true always 1
Line 671
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  671 always 671
  true always 1
  "%num%" always "%num%"
Line 673
  "0xDEADBEEF" always "0xDEADBEEF"
  true always 1
Line 674
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  674 always 674
  true always 1
  "%num%" always "%num%"
Line 676
  "0.0f" always "0.0f"
  true always 1
Line 677
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  677 always 677
  true always 1
  "%num%" always "%num%"
Line 679
  "0.0d" always "0.0d"
  true always 1
Line 680
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  680 always 680
  true always 1
  "%num%" always "%num%"
Line 682
  "0L" always "0L"
  true always 1
Line 683
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  683 always 683
  true always 1
  "%num%" always "%num%"
Line 685
  "-0L" always "-0L"
  true always 1
Line 686
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  686 always 686
  true always 1
  "- %num%" always "- %num%"
Line 688
  "+0L" always "+0L"
  true always 1
Line 689
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  689 always 689
  true always 1
  "+ %num%" always "+ %num%"
Line 691
  "0U" always "0U"
  true always 1
Line 692
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  692 always 692
  true always 1
  "%num%" always "%num%"
Line 694
  "0UL" always "0UL"
  true always 1
Line 695
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  695 always 695
  true always 1
  "%num%" always "%num%"
Line 697
  "0ULL" always "0ULL"
  true always 1
Line 698
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  698 always 698
  true always 1
  "%num%" always "%num%"
Line 700
  "+666" always "+666"
  true always 1
Line 701
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  701 always 701
  true always 1
  "+ %num%" always "+ %num%"
Line 703
  "-42" always "-42"
  true always 1
Line 704
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  704 always 704
  true always 1
  "- %num%" always "- %num%"
Line 706
  "-.0" always "-.0"
  true always 1
Line 707
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  707 always 707
  true always 1
  "- %num%" always "- %num%"
Line 709
  "+.0" always "+.0"
  true always 1
Line 710
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  710 always 710
  true always 1
  "+ %num%" always "+ %num%"
Line 715
  "YES" always "YES"
  true always 1
Line 716
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  716 always 716
  false always 0
  "%bool%" always "%bool%"
Line 718
  "true" always "true"
  true always 1
Line 719
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  719 always 719
  true always 1
  "%bool%" always "%bool%"
Line 721
  "false" always "false"
  true always 1
Line 722
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  722 always 722
  true always 1
  "%bool%" always "%bool%"
Line 726
  ";|;" always ";|;"
  true always 1
Line 728
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  728 always 728
  true always 1
  "; %or%" always "; %or%"
Line 729
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  729 always 729
  true always 1
  "; %op%" always "; %op%"
Line 731
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  731 always 731
  false always 0
  "; %oror%" always "; %oror%"
Line 733
  ";|=;" always ";|=;"
Line 735
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  735 always 735
  false always 0
  "; %or%" always "; %or%"
Line 736
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  736 always 736
  true always 1
  "; %op%" always "; %op%"
Line 738
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  738 always 738
  false always 0
  "; %oror%" always "; %oror%"
Line 740
  ";||;" always ";||;"
  true always 1
Line 742
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  742 always 742
  false always 0
  "; %or%" always "; %or%"
Line 743
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  743 always 743
  true always 1
  "; %op%" always "; %op%"
Line 745
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  745 always 745
  true always 1
  "; %oror%" always "; %oror%"
Line 746
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  746 always 746
  true always 1
  "; &&|%oror%" always "; &&|%oror%"
Line 747
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  747 always 747
  true always 1
  "; %oror%|&&" always "; %oror%|&&"
Line 749
  ";&&;" always ";&&;"
  true always 1
Line 750
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  750 always 750
  true always 1
  "; &&" always "; &&"
Line 751
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  751 always 751
  true always 1
  "; &&|%oror%" always "; &&|%oror%"
Line 752
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  752 always 752
  true always 1
  "; %oror%|&&" always "; %oror%|&&"
Line 756
  dest possible size=0@17
  ( possible lifetime[Iterator]=(dest)
  ( {lifetime[Iterator]=(dest),end=0}
  ( {lifetime[Iterator]=(src),start=0}
  ( {lifetime[Iterator]=(src),end=0}
Line 761
  test_ops always size=0
Line 767
  = {lifetime[Iterator]=(test_ops),end=0}
  ( {lifetime[Iterator]=(test_ops),end=0}
Line 768
  = {lifetime[Iterator]=(test_ops),start=0}
  ( {lifetime[Iterator]=(test_ops),start=0}
  test_op possible {lifetime[Iterator]=(test_ops),start=0}
  != always {!<=-1,!>=2}
  test_ops_end {lifetime[Iterator]=(test_ops),symbolic=(test_ops.end()),end=0}
Line 769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  769 always 769
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  769 always 769
  test_op {lifetime[Iterator]=(test_ops),!symbolic=(test_ops_end),!end=0}
  "%op%" always "%op%"
Line 774
  other_ops always size=0
Line 776
  = {lifetime[Iterator]=(other_ops),end=0}
  ( {lifetime[Iterator]=(other_ops),end=0}
Line 777
  = {lifetime[Iterator]=(other_ops),start=0}
  ( {lifetime[Iterator]=(other_ops),start=0}
  other_op possible {lifetime[Iterator]=(other_ops),start=0}
  != always {!<=-1,!>=2}
  other_ops_end {lifetime[Iterator]=(other_ops),symbolic=(other_ops.end()),end=0}
  other_op possible lifetime[Iterator]=(other_ops)
Line 778
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  778 always 778
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  778 always 778
  other_op {lifetime[Iterator]=(other_ops),!symbolic=(other_ops_end),!end=0}
  "%op%" always "%op%"
  "Failing other operator: " always "Failing other operator: "
  other_op {lifetime[Iterator]=(other_ops),!symbolic=(other_ops_end),!end=0}
Line 784
  test_ops always size=0
Line 789
  = {lifetime[Iterator]=(test_ops),end=0}
  ( {lifetime[Iterator]=(test_ops),end=0}
Line 790
  = {lifetime[Iterator]=(test_ops),start=0}
  ( {lifetime[Iterator]=(test_ops),start=0}
  test_op possible {lifetime[Iterator]=(test_ops),start=0}
  != always {!<=-1,!>=2}
  test_ops_end {lifetime[Iterator]=(test_ops),symbolic=(test_ops.end()),end=0}
Line 791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  791 always 791
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  791 always 791
  test_op {lifetime[Iterator]=(test_ops),!symbolic=(test_ops_end),!end=0}
  "%cop%" always "%cop%"
Line 796
  other_ops always size=0
Line 799
  = {lifetime[Iterator]=(other_ops),end=0}
  ( {lifetime[Iterator]=(other_ops),end=0}
Line 800
  = {lifetime[Iterator]=(other_ops),start=0}
  ( {lifetime[Iterator]=(other_ops),start=0}
  other_op possible {lifetime[Iterator]=(other_ops),start=0}
  != always {!<=-1,!>=2}
  other_ops_end {lifetime[Iterator]=(other_ops),symbolic=(other_ops.end()),end=0}
  other_op possible lifetime[Iterator]=(other_ops)
Line 801
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  801 always 801
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  801 always 801
  other_op {lifetime[Iterator]=(other_ops),!symbolic=(other_ops_end),!end=0}
  "%cop%" always "%cop%"
  "Failing other operator: " always "Failing other operator: "
  other_op {lifetime[Iterator]=(other_ops),!symbolic=(other_ops_end),!end=0}
Line 807
  = {lifetime[Iterator]=(arithmeticalOps),end=0}
  ( {lifetime[Iterator]=(arithmeticalOps),end=0}
Line 808
  = {lifetime[Iterator]=(arithmeticalOps),start=0}
  ( {lifetime[Iterator]=(arithmeticalOps),start=0}
  test_op possible {lifetime[Iterator]=(arithmeticalOps),start=0}
  != always {!<=-1,!>=2}
  test_ops_end {lifetime[Iterator]=(arithmeticalOps),symbolic=(arithmeticalOps.end()),end=0}
Line 810
  test_op possible lifetime[Iterator]=(arithmeticalOps)
Line 811
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  811 always 811
  true always 1
Line 816
  other_ops always size=0
Line 822
  = {lifetime[Iterator]=(other_ops),end=0}
  ( {lifetime[Iterator]=(other_ops),end=0}
Line 823
  = {lifetime[Iterator]=(other_ops),start=0}
  ( {lifetime[Iterator]=(other_ops),start=0}
  other_op possible {lifetime[Iterator]=(other_ops),start=0}
  != always {!<=-1,!>=2}
  other_ops_end {lifetime[Iterator]=(other_ops),symbolic=(other_ops.end()),end=0}
Line 825
  other_op possible lifetime[Iterator]=(other_ops)
Line 826
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  826 always 826
  false always 0
  "Failing arithmetical operator: " always "Failing arithmetical operator: "
Line 832
  test_ops always size=0
Line 838
  = {lifetime[Iterator]=(test_ops),end=0}
  ( {lifetime[Iterator]=(test_ops),end=0}
Line 839
  = {lifetime[Iterator]=(test_ops),start=0}
  ( {lifetime[Iterator]=(test_ops),start=0}
  test_op possible {lifetime[Iterator]=(test_ops),start=0}
  != always {!<=-1,!>=2}
  test_ops_end {lifetime[Iterator]=(test_ops),symbolic=(test_ops.end()),end=0}
Line 841
  test_op possible lifetime[Iterator]=(test_ops)
Line 842
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  842 always 842
  true always 1
Line 847
  other_ops always size=0
Line 849
  = {lifetime[Iterator]=(other_ops),end=0}
  ( {lifetime[Iterator]=(other_ops),end=0}
Line 850
  = {lifetime[Iterator]=(other_ops),start=0}
  ( {lifetime[Iterator]=(other_ops),start=0}
  other_op possible {lifetime[Iterator]=(other_ops),start=0}
  != always {!<=-1,!>=2}
  other_ops_end {lifetime[Iterator]=(other_ops),symbolic=(other_ops.end()),end=0}
Line 852
  other_op possible lifetime[Iterator]=(other_ops)
Line 853
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  853 always 853
  false always 0
  "Failing normal operator: " always "Failing normal operator: "
Line 859
  test_ops always size=0
Line 864
  = {lifetime[Iterator]=(test_ops),end=0}
  ( {lifetime[Iterator]=(test_ops),end=0}
Line 865
  = {lifetime[Iterator]=(test_ops),start=0}
  ( {lifetime[Iterator]=(test_ops),start=0}
  test_op possible {lifetime[Iterator]=(test_ops),start=0}
  != always {!<=-1,!>=2}
  test_ops_end {lifetime[Iterator]=(test_ops),symbolic=(test_ops.end()),end=0}
Line 867
  test_op possible lifetime[Iterator]=(test_ops)
Line 868
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  868 always 868
  true always 1
Line 873
  other_ops always size=0
Line 876
  = {lifetime[Iterator]=(other_ops),end=0}
  ( {lifetime[Iterator]=(other_ops),end=0}
Line 877
  = {lifetime[Iterator]=(other_ops),start=0}
  ( {lifetime[Iterator]=(other_ops),start=0}
  other_op possible {lifetime[Iterator]=(other_ops),start=0}
  != always {!<=-1,!>=2}
  other_ops_end {lifetime[Iterator]=(other_ops),symbolic=(other_ops.end()),end=0}
Line 879
  other_op possible lifetime[Iterator]=(other_ops)
Line 880
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  880 always 880
  false always 0
  "Failing normal operator: " always "Failing normal operator: "
Line 886
  test_ops always size=0
Line 892
  = {lifetime[Iterator]=(test_ops),end=0}
  ( {lifetime[Iterator]=(test_ops),end=0}
Line 893
  = {lifetime[Iterator]=(test_ops),start=0}
  ( {lifetime[Iterator]=(test_ops),start=0}
  test_op possible {lifetime[Iterator]=(test_ops),start=0}
  != always {!<=-1,!>=2}
  test_ops_end {lifetime[Iterator]=(test_ops),symbolic=(test_ops.end()),end=0}
Line 895
  test_op possible lifetime[Iterator]=(test_ops)
Line 896
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  896 always 896
  true always 1
Line 900
  = {lifetime[Iterator]=(assignmentOps),end=0}
  ( {lifetime[Iterator]=(assignmentOps),end=0}
Line 901
  = {lifetime[Iterator]=(assignmentOps),start=0}
  ( {lifetime[Iterator]=(assignmentOps),start=0}
  other_op possible {lifetime[Iterator]=(assignmentOps),start=0}
  != always {!<=-1,!>=2}
  other_ops_end {lifetime[Iterator]=(assignmentOps),symbolic=(assignmentOps.end()),end=0}
Line 903
  other_op possible lifetime[Iterator]=(assignmentOps)
Line 904
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  904 always 904
  false always 0
  "Failing assignment operator: " always "Failing assignment operator: "
Line 909
  = {lifetime[Iterator]=(assignmentOps),end=0}
  ( {lifetime[Iterator]=(assignmentOps),end=0}
Line 910
  = {lifetime[Iterator]=(assignmentOps),start=0}
  ( {lifetime[Iterator]=(assignmentOps),start=0}
  test_op possible {lifetime[Iterator]=(assignmentOps),start=0}
  != always {!<=-1,!>=2}
  test_ops_end {lifetime[Iterator]=(assignmentOps),symbolic=(assignmentOps.end()),end=0}
Line 912
  test_op possible lifetime[Iterator]=(assignmentOps)
Line 913
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  913 always 913
  true always 1
Line 918
  other_ops always size=0
Line 924
  = {lifetime[Iterator]=(other_ops),end=0}
  ( {lifetime[Iterator]=(other_ops),end=0}
Line 925
  = {lifetime[Iterator]=(other_ops),start=0}
  ( {lifetime[Iterator]=(other_ops),start=0}
  other_op possible {lifetime[Iterator]=(other_ops),start=0}
  != always {!<=-1,!>=2}
  other_ops_end {lifetime[Iterator]=(other_ops),symbolic=(other_ops.end()),end=0}
Line 927
  other_op possible lifetime[Iterator]=(other_ops)
Line 928
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  928 always 928
  false always 0
  "Failing assignment operator: " always "Failing assignment operator: "
Line 934
  = {lifetime[Iterator]=(extendedOps),start=0}
  ( {lifetime[Iterator]=(extendedOps),start=0}
  test_op possible {lifetime[Iterator]=(extendedOps),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(extendedOps),end=0}
Line 936
  test_op possible lifetime[Iterator]=(extendedOps)
Line 937
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  937 always 937
Line 939
  = {lifetime[Iterator]=(logicalOps),start=0}
  ( {lifetime[Iterator]=(logicalOps),start=0}
  test_op possible {lifetime[Iterator]=(logicalOps),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(logicalOps),end=0}
Line 941
  test_op possible lifetime[Iterator]=(logicalOps)
Line 942
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  942 always 942
Line 944
  = {lifetime[Iterator]=(bitOps),start=0}
  ( {lifetime[Iterator]=(bitOps),start=0}
  test_op possible {lifetime[Iterator]=(bitOps),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(bitOps),end=0}
Line 946
  test_op possible lifetime[Iterator]=(bitOps)
Line 947
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  947 always 947
Line 949
  = {lifetime[Iterator]=(comparisonOps),start=0}
  ( {lifetime[Iterator]=(comparisonOps),start=0}
  test_op possible {lifetime[Iterator]=(comparisonOps),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(comparisonOps),end=0}
Line 951
  test_op possible lifetime[Iterator]=(comparisonOps)
Line 952
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  952 always 952
Line 955
  "++" always "++"
Line 956
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  956 always 956
Line 957
  "--" always "--"
Line 958
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  958 always 958
Line 964
  "\"foo\"" always "\"foo\""
Line 965
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  965 always 965
  == always {!<=-1,!>=2}
Line 966
  "\"\"" always "\"\""
Line 967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  967 always 967
  == always {!<=-1,!>=2}
Line 968
  "'f'" always "'f'"
Line 969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  969 always 969
  == always {!<=-1,!>=2}
Line 970
  "12345" always "12345"
Line 971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  971 always 971
  == always {!<=-1,!>=2}
Line 972
  "-55" always "-55"
Line 973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  973 always 973
  == always {!<=-1,!>=2}
Line 974
  "true" always "true"
Line 975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  975 always 975
  == always {!<=-1,!>=2}
Line 976
  "false" always "false"
Line 977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  977 always 977
  == always {!<=-1,!>=2}
Line 982
  standard_types always size=0
  "bool" always "bool"
Line 983
  standard_types always size=1
  "char" always "char"
Line 984
  standard_types always size=2
  "short" always "short"
Line 985
  standard_types always size=3
  "int" always "int"
Line 986
  standard_types always size=4
  "long" always "long"
Line 987
  standard_types always size=5
  "float" always "float"
Line 988
  standard_types always size=6
  "double" always "double"
Line 989
  standard_types always size=7
  "size_t" always "size_t"
Line 991
  = {lifetime[Iterator]=(standard_types),end=0,size=8}
  standard_types always size=8
  ( {lifetime[Iterator]=(standard_types),end=0,size=8}
Line 992
  = {lifetime[Iterator]=(standard_types),start=0,size=8}
  standard_types always size=8
  ( {lifetime[Iterator]=(standard_types),start=0,size=8}
  test_op {lifetime[Iterator]=(standard_types),start=0,size=8}
  != always {!<=-1,!>=2}
  test_ops_end {lifetime[Iterator]=(standard_types),symbolic=(standard_types.end()),end=0,size=8}
Line 994
  test_op {lifetime[Iterator]=(standard_types),size=8}
Line 995
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  995 always 995
  true always 1
  "Failing standard type: " always "Failing standard type: "
Line 1000
  "string" always "string"
Line 1001
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1001 always 1001
  false always 0
Line 1004
  "int" always "int"
Line 1005
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1005 always 1005
  true always 1
Line 1008
  "abc" always "abc"
Line 1009
  true always 1
Line 1010
  123 always 123
Line 1011
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1011 always 1011
  false always 0
Line 1016
  "foobar" always "foobar"
Line 1018
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1018 always 1018
  true always 1
Line 1019
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1019 always 1019
  false always 0
Line 1021
  "123456" always "123456"
Line 1023
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1023 always 1023
  false always 0
Line 1024
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1024 always 1024
  true always 1
Line 1029
  "Name" always "Name"
Line 1030
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1030 always 1030
  true always 1
Line 1035
  "_name" always "_name"
Line 1036
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1036 always 1036
  true always 1
Line 1041
  "_123" always "_123"
Line 1042
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1042 always 1042
  true always 1
Line 1047
  "123456" always "123456"
Line 1048
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1048 always 1048
  false always 0
Line 1049
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1049 always 1049
  true always 1
Line 1054
  "a123456" always "a123456"
Line 1055
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1055 always 1055
  true always 1
Line 1056
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1056 always 1056
  false always 0
Line 1061
  "$f" always "$f"
Line 1062
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1062 always 1062
  true always 1
Line 1066
  "std::deque<std::set<int> > intsets;" always "std::deque<std::set<int> > intsets;"
Line 1069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1069 always 1069
  == always {!<=-1,!>=2}
  nullptr always 0
Line 1073
  "std::deque<std::set<int> > intsets;" always "std::deque<std::set<int> > intsets;"
Line 1075
  7 always 7
Line 1076
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1076 always 1076
  ">" always ">"
Line 1077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1077 always 1077
  9 always 9
  == always {!<=-1,!>=2}
Line 1081
  "std::deque<std::set<int> > intsets;" always "std::deque<std::set<int> > intsets;"
Line 1083
  3 always 3
Line 1084
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1084 always 1084
  ">" always ">"
Line 1085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1085 always 1085
  10 always 10
  == always {!<=-1,!>=2}
Line 1089
  "X< 1>2 > x1;" always "X< 1>2 > x1;"
Line 1092
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1092 always 1092
  ">" always ">"
Line 1093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1093 always 1093
  3 always 3
  == always {!<=-1,!>=2}
Line 1097
  "X < (2 < 1) > x1;" always "X < (2 < 1) > x1;"
Line 1100
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1100 always 1100
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  t always !0
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1102
  4 always 4
Line 1103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1103 always 1103
  == always {!<=-1,!>=2}
  nullptr always 0
Line 1107
  "template<typename X, typename...Y> struct S : public Fred<Wilma<Y...>> {}" always "template<typename X, typename...Y> struct S : public Fred<Wilma<Y...>> {}"
Line 1110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1110 always 1110
  "> struct" always "> struct"
Line 1114
  "void f() { *((unsigned long long *)x) = 0; }" always "void f() { *((unsigned long long *)x) = 0; }"
Line 1115
  "*" always "*"
Line 1116
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1116 always 1116
  "*((unsigned long long*)x)" always "*((unsigned long long*)x)"
Line 1118
  "typedef unsigned long long u64; void f() { *((u64 *)x) = 0; }" always "typedef unsigned long long u64; void f() { *((u64 *)x) = 0; }"
Line 1119
  "*" always "*"
Line 1120
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1120 always 1120
  "*((unsigned long long*)x)" always "*((unsigned long long*)x)"
Line 1122
  "void f() { return (t){1,2}; }" always "void f() { return (t){1,2}; }"
Line 1123
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1123 always 1123
  "return(t){1,2}" always "return(t){1,2}"
  5 always 5
Line 1125
  "void f() { return L\"a\"; }" always "void f() { return L\"a\"; }"
Line 1126
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1126 always 1126
  "returnL\"a\"" always "returnL\"a\""
  5 always 5
Line 1128
  "void f() { return U\"a\"; }" always "void f() { return U\"a\"; }"
Line 1129
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1129 always 1129
  "returnU\"a\"" always "returnU\"a\""
  5 always 5
Line 1131
  "x = \"\\0\\x1\\x2\\x3\\x4\\x5\\x6\\x7\";" always "x = \"\\0\\x1\\x2\\x3\\x4\\x5\\x6\\x7\";"
Line 1132
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1132 always 1132
  "x=\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"" always "x=\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\""
Line 1137
  0 always 0
Line 1140
  2 always 2
Line 1145
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1145 always 1145
  true always 1
Line 1146
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1146 always 1146
  true always 1
Line 1147
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtoken.cpp" always "cppcheck-2.8/test/testtoken.cpp"
  1147 always 1147
  false always 0
